[
    {
        "title": "[bitcoin-dev] BIP draft: OP_CHECKBLOCKATHEIGHT",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2016-10-01T04:01:04",
                "message_text_only": "Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n\n> This BIP describes a new opcode (OP_CHECKBLOCKATHEIGHT) for the Bitcoin \n> scripting system to address reissuing bitcoin transactions when the coins they \n> spend have been conflicted/double-spent.\n>\n> https://github.com/luke-jr/bips/blob/bip-cbah/bip-cbah.mediawiki\n>\n> Does this seem like a good idea/approach?\n\nPrefer a three-arg version (gbits-to-compare, blocknum, hash):\n- If <bits> is 0 or > 256, invalid.\n- If the hash length is not (<bits> + 7) / 8, invalid.\n- If the hash unused bits are not 0, invalid.\n- Otherwise <bits> of hash is compared to lower <bits> of blockhash.\n\nThis version also lets you play gambling games on-chain!\n\nOr maybe I've just put another nail in CBAH's coffin?\n\nCheers,\nRusty."
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-10-01T05:02:09",
                "message_text_only": "On Saturday, October 01, 2016 4:01:04 AM Rusty Russell wrote:\n> Prefer a three-arg version (gbits-to-compare, blocknum, hash):\n> - If <bits> is 0 or > 256, invalid.\n> - If the hash length is not (<bits> + 7) / 8, invalid.\n\nThis means zero padding on-chain, which would be undesirable.\nRather \"at most\" and have the consensus implementation do the padding.\n\n> - If the hash unused bits are not 0, invalid.\n\nWhy?\n\n> - Otherwise <bits> of hash is compared to lower <bits> of blockhash.\n\nLower in what endian? Why only that endian? Why only lower? I can see a \npossible use case where one wants to look at only the high bits to ensure \ntheir transaction is only valid in a block with at least a certain \ndifficulty...\n\n> This version also lets you play gambling games on-chain!\n> \n> Or maybe I've just put another nail in CBAH's coffin?\n\nOr maybe resurrected it...\n\nLuke"
            },
            {
                "author": "Nathan Cook",
                "date": "2016-10-05T02:15:36",
                "message_text_only": "On 1 October 2016 at 08:02, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Saturday, October 01, 2016 4:01:04 AM Rusty Russell wrote:\n>\n> > - Otherwise <bits> of hash is compared to lower <bits> of blockhash.\n>\n> Lower in what endian? Why only that endian? Why only lower? I can see a\n> possible use case where one wants to look at only the high bits to ensure\n> their transaction is only valid in a block with at least a certain\n> difficulty...\n\n\nWhy not use segwit versioning for all this stuff? That lets you re-enable\nthe bitwise operations like OP_AND, permitting arbitrary bit-masks.\nFurther, the \"at least a certain difficulty\" problem suggests a solution by\nextending the validity of opcodes like OP_LESSTHAN etc. to 256-bit inputs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161005/c0497d3f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP draft: OP_CHECKBLOCKATHEIGHT",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Luke Dashjr",
                "Nathan Cook"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2620
        }
    },
    {
        "title": "[bitcoin-dev] Drivechain proposal using OP_COUNT_ACKS",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T15:49:08",
                "message_text_only": "Since ScalingBitcoin is close, I think this is a good moment to publish our\nproposal on drivechains. This BIP proposed the drivechain we'd like to use\nin RSK (a.k.a. Rootstock) two-way pegged blockchain and see it implemented\nin Bitcoin. Until that happens, we're using a federated approach.\nI'm sure that adding risk-less Bitcoin extensibility through\nsidechains/drivechains is what we all want, but it's of maximum importance\nto decide which technology will leads us there.\nWe hope this work can also be the base of all other new 2-way-pegged\nblockchains that can take Bitcoin the currency to new niches and test new\nuse cases, but cannot yet be realized because of current\nlimitations/protections.\n\nThe full BIP plus a reference implementation can be found here:\n\nBIP (draft):\nhttps://github.com/rootstock/bips/blob/master/BIP-R10.md\n\nCode & Test cases:\nhttps://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n(Note: Code is still unaudited)\n\nAs a summary, OP_COUNT_ACKS is a new segwit-based and soft-forked opcode\nthat counts acks and nacks tags in coinbase fields, and push the resulting\ntotals in the script stack.\n\nThe system was designed with the following properties in mind:\n\n1. Interoperability with scripting system\n2. Zero risk of invalidating a block\n3. No additional computation during blockchain management and\nre-organization\n4. No change in Bitcoin security model\n5. Bounded computation of poll results\n6. Strong protection from DoS attacks\n7. Minimum block space consumption\n8. Zero risk of cross-secondary chain invalidation\n\nPlease see the BIP draft for a more-detailed explanation on how we achieve\nthese goals.\n\nI'll be in ScalingBitcoin in less than a week and I'll be available to\ndiscuss the design rationale, improvements, changes and ideas any of you\nmay have.\n\nTruly yours,\nSergio Demian Lerner\nBitcoiner and RSK co-founder\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/b654e8f3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-02T16:17:17",
                "message_text_only": "On Sun, Oct 02, 2016 at 12:49:08PM -0300, Sergio Demian Lerner via bitcoin-dev wrote:\n\nI think your history of patenting(1) Bitcoin consensus relevant technology is\nsufficient by itself to be extremely dubious of any proposals coming from you\nor your colleagues; patents on Bitcoin consensus technology are a serious\nthreat to decentralization. Personally, I'm NACKing this proposal on that basis\nalone.\n\nYou need to rectify this dangerous and unethical behavior in a convincing,\nlegally binding way. I'd suggest looking into Blockstream's patent pledges as a\nway forward:\n\n    https://www.blockstream.com/about/patent_pledge/\n\nI see no reason to have any further discussion of your proposal until this is\nrectified.\n\n1) \"AsicBoost is a patent-pending method to improve the efficiency and cost of Bitcoin mining by approximately 20%\"\n   http://www.asicboost.com/single-post/2016/03/24/AsicBoost-Press-Release\n\n> Since ScalingBitcoin is close, I think this is a good moment to publish our\n> proposal on drivechains. This BIP proposed the drivechain we'd like to use\n> in RSK (a.k.a. Rootstock) two-way pegged blockchain and see it implemented\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/e1b2f066/attachment.sig>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T17:00:01",
                "message_text_only": "Peter, are you really going to try to down vote a decent free and\nopen-source proposal that benefits all the Bitcoin community including\nyou and your future children because a personal attack to me without any\nlogic or basis?\n\nIs that the way you collaborate to improving Bitcoin?\n\nI just can't believe it.\n\nLet's open another thread elsewhere to discuss hardware and software\npatents, and that particular one, if you wish, this is NOT the place.\n\n\n\nOn Sun, Oct 2, 2016 at 1:17 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Sun, Oct 02, 2016 at 12:49:08PM -0300, Sergio Demian Lerner via\n> bitcoin-dev wrote:\n>\n> I think your history of patenting(1) Bitcoin consensus relevant technology\n> is\n> sufficient by itself to be extremely dubious of any proposals coming from\n> you\n> or your colleagues; patents on Bitcoin consensus technology are a serious\n> threat to decentralization. Personally, I'm NACKing this proposal on that\n> basis\n> alone.\n>\n> You need to rectify this dangerous and unethical behavior in a convincing,\n> legally binding way. I'd suggest looking into Blockstream's patent pledges\n> as a\n> way forward:\n>\n>     https://www.blockstream.com/about/patent_pledge/\n>\n> I see no reason to have any further discussion of your proposal until this\n> is\n> rectified.\n>\n> 1) \"AsicBoost is a patent-pending method to improve the efficiency and\n> cost of Bitcoin mining by approximately 20%\"\n>    http://www.asicboost.com/single-post/2016/03/24/AsicBoost-Press-Release\n>\n> > Since ScalingBitcoin is close, I think this is a good moment to publish\n> our\n> > proposal on drivechains. This BIP proposed the drivechain we'd like to\n> use\n> > in RSK (a.k.a. Rootstock) two-way pegged blockchain and see it\n> implemented\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/67b00718/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-02T17:11:37",
                "message_text_only": "On Sun, Oct 02, 2016 at 02:00:01PM -0300, Sergio Demian Lerner wrote:\n> Peter, are you really going to try to down vote a decent free and\n> open-source proposal that benefits all the Bitcoin community including\n> you and your future children because a personal attack to me without any\n> logic or basis?\n\nI've suggested a way that you can rectify this situation so we can continue to\ncollaborate: Have Rootstock adopt a legally binding patent pledge/license. I'd\nsuggest you do as Blockstream has done and at minimum adopt the Defensive\nPatent License (DPL); I personally will be doing so in the next week or two for\nmy own consulting company (I'm discussing exactly how to do so with my lawyer\nright now).\n\nIf Rootstock is not planning on getting any patents for offensive purposes,\nthen there is no issue with doing so - the DPL in particular is designed in a\nminimally intrusive way.\n\nPlease fix this issue so we can in fact continue to collaborate to improve\nBitcoin.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/26faa19a/attachment.sig>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2016-10-02T17:18:08",
                "message_text_only": "The purpose of this list is highly technical discussion, not political\ndisagreements.\n\nIs this particular proposal encumbered by a licensing type, patent, or\npending patent which would preclude it from being used in the bitcoin\nproject?  If not, you're wildly off topic.\n\nOn Oct 2, 2016 12:11 PM, \"Peter Todd via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sun, Oct 02, 2016 at 02:00:01PM -0300, Sergio Demian Lerner wrote:\n> > Peter, are you really going to try to down vote a decent free and\n> > open-source proposal that benefits all the Bitcoin community including\n> > you and your future children because a personal attack to me without any\n> > logic or basis?\n>\n> I've suggested a way that you can rectify this situation so we can\n> continue to\n> collaborate: Have Rootstock adopt a legally binding patent pledge/license.\n> I'd\n> suggest you do as Blockstream has done and at minimum adopt the Defensive\n> Patent License (DPL); I personally will be doing so in the next week or\n> two for\n> my own consulting company (I'm discussing exactly how to do so with my\n> lawyer\n> right now).\n>\n> If Rootstock is not planning on getting any patents for offensive purposes,\n> then there is no issue with doing so - the DPL in particular is designed\n> in a\n> minimally intrusive way.\n>\n> Please fix this issue so we can in fact continue to collaborate to improve\n> Bitcoin.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/a23d4ab3/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-10-02T21:28:51",
                "message_text_only": "On Sunday, October 02, 2016 5:18:08 PM Andrew Johnson via bitcoin-dev wrote:\n> Is this particular proposal encumbered by a licensing type, patent, or\n> pending patent which would preclude it from being used in the bitcoin\n> project?  If not, you're wildly off topic.\n\nI think that's the concern: we don't - and *can't* - know. Pending patents are \nnot publicly visible, as far as I am aware, and the BIP process does not \n(presently) require any patent disclosure.\n\nOf course, it is entirely possible to voluntarily provide a disclosure of \npatents in the BIP (and ideally a free license to such patents, at least those \nfor the BIP). This is an alternative possibility to resolve patent concerns if \nRootstock is not prepared to adopt a defensive patent strategy in general \n(yet?).\n\nOn Sunday, October 02, 2016 6:17:12 PM Russell O'Connor via bitcoin-dev wrote:\n> If I understand this BIP correctly, the values pushed onto the stack by the\n> OP_COUNT_ACKS operation depends on the ack and nack counts relative to the\n> block that this happens to be included in.\n> \n> This isn't going to be acceptable.  The validity of a transaction should\n> always be monotone in the sense that if a transaction was acceptable in a\n> given block, it must always be acceptable in any subsequent block, with the\n> only exception being if one of the transaction's inputs get double spent.\n\nI don't know if it's possible to implement decentralised sidechains without \n\"breaking\" this rule. But I would argue that in this scenario, the only way it \nwould become invalid is the equivalent of a double-spend... and therefore it \nmay be acceptable in relation to this argument.\n\nLuke"
            },
            {
                "author": "Russell O'Connor",
                "date": "2016-10-02T21:46:43",
                "message_text_only": "> But I would argue that in this scenario, the only way it\n> would become invalid is the equivalent of a double-spend... and therefore\n> it\n> may be acceptable in relation to this argument.\n>\n\nThe values returned by OP_COUNT_ACKS vary in their exact value depending on\nwhich block this transaction ends up in.  While the proposed use of this\noperation is somewhat less objectionable (although still objectionable to\nme), nothing stops users from using OP_EQUALVERIFY and and causing their\ntransaction fluctuate between acceptable and unacceptable, with no party\ndoing anything like a double spend.  This is a major problem with the\nproposal.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/bc7052b6/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T22:36:29",
                "message_text_only": "On Sun, Oct 2, 2016 at 6:46 PM, Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> But I would argue that in this scenario, the only way it\n>> would become invalid is the equivalent of a double-spend... and therefore\n>> it\n>> may be acceptable in relation to this argument.\n>>\n>\n> The values returned by OP_COUNT_ACKS vary in their exact value depending\n> on which block this transaction ends up in.  While the proposed use of this\n> operation is somewhat less objectionable (although still objectionable to\n> me), nothing stops users from using OP_EQUALVERIFY and and causing their\n> transaction fluctuate between acceptable and unacceptable, with no party\n> doing anything like a double spend.  This is a major problem with the\n> proposal.\n>\n\nTransactions that redeem an output containing (or referencing by means of\nP2WSH) an OP_COUNT_ACKS are not broadcast by the network. That means that\nthe network cannot be DoS attacked by flooding with a transaction that will\nnot verify due to being too late.\nThe only parties that can include the redeem transaction are the miners\nthemselves.\nTherefore I see no problem that an OP_COUNT_ACKS scriptSig transaction is\ninvalidated after the liveness times expires.\nIf there is no expiration, then polls can last forever and the system fails\nto provide DoS protection for block validation since active polls can\naccumulate forever.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/c6349d29/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2016-10-02T21:54:08",
                "message_text_only": "> I don't know if it's possible to implement decentralised sidechains without\n> \"breaking\" this rule.\n>\n\nI haven't really been following the sidechain developements, but my\nunderstanding was that redemption from a side chain would be two phase.\nThe person unpegging the funds provides a proof that they have locked the\nfunds on the side chain and are eligible to withdraw the funds, plus they\nput up a bounty.  Then there is a time-locked period where others can\ncollect the bounty by providing a fraud proof, that the locked funds given\nin the proof have actually been double spent.  This two phase system\ndoesn't violate this rule.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/78830f94/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T17:26:18",
                "message_text_only": "I'm not a lawyer, and my knowledge on patents is limited. I guess RSK WILL\nendorse DPL or will make the required actions to make sure the things\ndeveloped by RSK remain free and open. This was not a priority until now,\nbut coding was. For me, coding always is the priority.\n\nI will discuss prioritizing this with the team. Remember it took several\nyears to BlockStream to decide for DPL and not just publish everything as\nthey were doing. I suppose the decision it was not a simple one, involving\nlawyers advise and all. I guess DPL needs to actually patent the things in\norder to open them later, and patenting has a very high cost.\n\nGive us time to decide which open source strategy is the best and cheaper\nfor RSK. At this point I can assert that RSK has not filed any patent not\nis planing to.  This proposal is not encumbered by any patents, and\ndrivechains is actually not RSK's idea, but Paul Sztorc's.\n\n\n\nOn Sun, Oct 2, 2016 at 2:11 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Sun, Oct 02, 2016 at 02:00:01PM -0300, Sergio Demian Lerner wrote:\n> > Peter, are you really going to try to down vote a decent free and\n> > open-source proposal that benefits all the Bitcoin community including\n> > you and your future children because a personal attack to me without any\n> > logic or basis?\n>\n> I've suggested a way that you can rectify this situation so we can\n> continue to\n> collaborate: Have Rootstock adopt a legally binding patent pledge/license.\n> I'd\n> suggest you do as Blockstream has done and at minimum adopt the Defensive\n> Patent License (DPL); I personally will be doing so in the next week or\n> two for\n> my own consulting company (I'm discussing exactly how to do so with my\n> lawyer\n> right now).\n>\n> If Rootstock is not planning on getting any patents for offensive purposes,\n> then there is no issue with doing so - the DPL in particular is designed\n> in a\n> minimally intrusive way.\n>\n> Please fix this issue so we can in fact continue to collaborate to improve\n> Bitcoin.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/d3052c9d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-02T17:34:25",
                "message_text_only": "On Sun, Oct 02, 2016 at 02:26:18PM -0300, Sergio Demian Lerner wrote:\n> I'm not a lawyer, and my knowledge on patents is limited. I guess RSK WILL\n> endorse DPL or will make the required actions to make sure the things\n> developed by RSK remain free and open. This was not a priority until now,\n> but coding was. For me, coding always is the priority.\n> \n> I will discuss prioritizing this with the team. Remember it took several\n> years to BlockStream to decide for DPL and not just publish everything as\n> they were doing. I suppose the decision it was not a simple one, involving\n> lawyers advise and all. I guess DPL needs to actually patent the things in\n> order to open them later, and patenting has a very high cost.\n> \n> Give us time to decide which open source strategy is the best and cheaper\n> for RSK. At this point I can assert that RSK has not filed any patent not\n> is planing to.  This proposal is not encumbered by any patents, and\n> drivechains is actually not RSK's idea, but Paul Sztorc's.\n\nThanks, please let us all know when this is done so we can continue our\ncollaborations constructively.\n\nI'll likewise prioritise my own adoption of the DPL and will announce it on\nthis mailing list.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/718ab14d/attachment.sig>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2016-10-02T18:17:12",
                "message_text_only": "If I understand this BIP correctly, the values pushed onto the stack by the\nOP_COUNT_ACKS operation depends on the ack and nack counts relative to the\nblock that this happens to be included in.\n\nThis isn't going to be acceptable.  The validity of a transaction should\nalways be monotone in the sense that if a transaction was acceptable in a\ngiven block, it must always be acceptable in any subsequent block, with the\nonly exception being if one of the transaction's inputs get double spent.\n\nThe added check lock time and check sequence number operations were\ncarefully constructed to ensure this property.\n\nOn Sun, Oct 2, 2016 at 11:49 AM, Sergio Demian Lerner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Since ScalingBitcoin is close, I think this is a good moment to publish\n> our proposal on drivechains. This BIP proposed the drivechain we'd like to\n> use in RSK (a.k.a. Rootstock) two-way pegged blockchain and see it\n> implemented in Bitcoin. Until that happens, we're using a federated\n> approach.\n> I'm sure that adding risk-less Bitcoin extensibility through\n> sidechains/drivechains is what we all want, but it's of maximum importance\n> to decide which technology will leads us there.\n> We hope this work can also be the base of all other new 2-way-pegged\n> blockchains that can take Bitcoin the currency to new niches and test new\n> use cases, but cannot yet be realized because of current\n> limitations/protections.\n>\n> The full BIP plus a reference implementation can be found here:\n>\n> BIP (draft):\n> https://github.com/rootstock/bips/blob/master/BIP-R10.md\n>\n> Code & Test cases:\n> https://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n> (Note: Code is still unaudited)\n>\n> As a summary, OP_COUNT_ACKS is a new segwit-based and soft-forked opcode\n> that counts acks and nacks tags in coinbase fields, and push the resulting\n> totals in the script stack.\n>\n> The system was designed with the following properties in mind:\n>\n> 1. Interoperability with scripting system\n> 2. Zero risk of invalidating a block\n> 3. No additional computation during blockchain management and\n> re-organization\n> 4. No change in Bitcoin security model\n> 5. Bounded computation of poll results\n> 6. Strong protection from DoS attacks\n> 7. Minimum block space consumption\n> 8. Zero risk of cross-secondary chain invalidation\n>\n> Please see the BIP draft for a more-detailed explanation on how we achieve\n> these goals.\n>\n> I'll be in ScalingBitcoin in less than a week and I'll be available to\n> discuss the design rationale, improvements, changes and ideas any of you\n> may have.\n>\n> Truly yours,\n> Sergio Demian Lerner\n> Bitcoiner and RSK co-founder\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/8a5f4427/attachment-0001.html>"
            },
            {
                "author": "Johnson Lau",
                "date": "2016-10-24T17:37:12",
                "message_text_only": "Some comments and questions\n\n1. In the BIP you mentioned scriptSig 3 times, but I don't think you are really talking about scriptSig. Especially, segwit has aborted the use of scriptSig to fix malleability. From the context I guess you mean redeemScript (see BIP141)\n\n2. It seems that 51% of miners may steal all money from the peg, right? But I think this is unavoidable for all 2-way-peg proposals. To make it safer you still need notaries.\n\n3. Instead of using a OP_NOPx, I suggest you using an unused code such as 0xba. OP_NOPx should be reserved for some simple \"VERIFY\"-type codes that does not write to the stack.\n\n4. I don't think you should simply replace \"(witversion == 0)\" with \"((witversion == 0) || (witversion == 1))\". There are only 16 available versions. It'd be exhausted very soon if we use a version for every new opcode. As a testing prototype this is fine, but the actual softfork should not waste a witversion this way. We need a better way to coordinate the use of new witness version. BIP114 suggests an additional field in the witness to indicate the script version (https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki)\n\n5. It seems this is the first BIP in markdown format, not mediawiki (but this is allowed by BIP1)\n\n6. The coinbase space is limited to 100 bytes and is already overloaded by many different purposes. I think any additional consensus critical message should go to a dummy scriptPubKey like the witness commitment. You may consider to  have a new OP_RETURN output like BIP141, with different magic bytes. However, please don't make this output mandatory (cf. witness commitment output is optional if the block does not have witness tx)\n\n6a. \"..........due to lack of space to include the proper ack tag in a block\": this shouldn't happen if you use a OP_RETURN output\n\n7.  \"It can be the case that two different secondary blockchains specify the same transaction candidate, but **at least** one of them will clearly be unauthentic.\"\n\n8. Question: is an ack-poll valid only for 1 transaction? When the transaction is confirmed, could full nodes prune the corresponding ack-poll data? (I think it has to be prunable after spending because ack-poll data is effectively UTXO data) \n\n9. No matter how you design a softfork, \"Zero risk of invalidating a block\" couldn't be true for any softfork. For example, even if a miner does not include any txs with OP_COUNT_ACKS, he may still build on top of blocks with invalid OP_COUNT_ACKS operations.\n\n ---- On Sun, 02 Oct 2016 23:49:08 +0800 Sergio Demian Lerner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote ---- \n > Since ScalingBitcoin is close, I think this is a good moment to publish our proposal on drivechains. This BIP proposed the drivechain we'd like to use in RSK (a.k.a. Rootstock) two-way pegged blockchain and see it implemented in Bitcoin. Until that happens, we're using a federated approach. \n > I'm sure that adding risk-less Bitcoin extensibility through sidechains/drivechains is what we all want, but it's of maximum importance to decide which technology will leads us there.\n > We hope this work can also be the base of all other new 2-way-pegged blockchains that can take Bitcoin the currency to new niches and test new use cases, but cannot yet be realized because of current limitations/protections.\n > \n > The full BIP plus a reference implementation can be found here:\n > \n > BIP (draft):\n > https://github.com/rootstock/bips/blob/master/BIP-R10.md\n > \n > Code & Test cases:\n > https://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n > (Note: Code is still unaudited)\n > \n > As a summary, OP_COUNT_ACKS is a new segwit-based and soft-forked opcode that counts acks and nacks tags in coinbase fields, and push the resulting totals in the script stack.\n > \n > The system was designed with the following properties in mind:\n > \n > 1. Interoperability with scripting system \n > 2. Zero risk of invalidating a block\n > 3. No additional computation during blockchain management and re-organization\n > 4. No change in Bitcoin security model\n > 5. Bounded computation of poll results\n > 6. Strong protection from DoS attacks\n > 7. Minimum block space consumption\n > 8. Zero risk of cross-secondary chain invalidation\n > \n > Please see the BIP draft for a more-detailed explanation on how we achieve these goals.\n > \n > I'll be in ScalingBitcoin in less than a week and I'll be available to discuss the design rationale, improvements, changes and ideas any of you may have.\n > \n > Truly yours, \n > Sergio Demian Lerner\n > Bitcoiner and RSK co-founder\n >  \n >  _______________________________________________ \n > bitcoin-dev mailing list \n > bitcoin-dev at lists.linuxfoundation.org \n > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev \n >"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-25T16:38:59",
                "message_text_only": "Responding between lines...\n\nOn Mon, Oct 24, 2016 at 2:37 PM, Johnson Lau <jl2012 at xbt.hk> wrote:\n\n> Some comments and questions\n>\n> 1. In the BIP you mentioned scriptSig 3 times, but I don't think you are\n> really talking about scriptSig. Especially, segwit has aborted the use of\n> scriptSig to fix malleability. From the context I guess you mean\n> redeemScript (see BIP141)\n>\n\nYou're right.I will change the naming asap.\n\n\n>\n> 2. It seems that 51% of miners may steal all money from the peg, right?\n> But I think this is unavoidable for all 2-way-peg proposals. To make it\n> safer you still need notaries.\n>\n\nCorrect, that's inherently a technical limitation. However, there can be\nmany deterrents from miners stealing money (legal contracts,\nmutual-assured-destruction states). Aslo as you mention, you can combine\nOP_COUNT_ACK with notary sigantures as AND/OR or a more complex acknowledge\nweight distribution.\n\n\n>\n> 3. Instead of using a OP_NOPx, I suggest you using an unused code such as\n> 0xba. OP_NOPx should be reserved for some simple \"VERIFY\"-type codes that\n> does not write to the stack.\n>\n\nOk. I'm not sure, but if everyone agrees to it, I will. Also Segwit\nversioning allows to create new opcode multiplexing opcodes, so I was\nthinking about adding an \"opcode index\" to a more generic OP_OPERATE. But\nthat prevents using all NOP space, but prevents easily counting\nOP_ACK_COUNT for checksig block limit.\n\n\n> 4. I don't think you should simply replace \"(witversion == 0)\" with\n> \"((witversion == 0) || (witversion == 1))\". There are only 16 available\n> versions. It'd be exhausted very soon if we use a version for every new\n> opcode. As a testing prototype this is fine, but the actual softfork should\n> not waste a witversion this way. We need a better way to coordinate the use\n> of new witness version. BIP114 suggests an additional field in the witness\n> to indicate the script version (https://github.com/bitcoin/\n> bips/blob/master/bip-0114.mediawiki)\n>\n> Good. But currently that version is not enforced, so this BIP cannot make\nuse of it. I can use (witversion == 1) but add the BIP114 version field so\nthat the next BIP can make use of it.\n\n\n\n> 5. It seems this is the first BIP in markdown format, not mediawiki (but\n> this is allowed by BIP1)\n>\n\n> 6. The coinbase space is limited to 100 bytes and is already overloaded by\n> many different purposes. I think any additional consensus critical message\n> should go to a dummy scriptPubKey like the witness commitment. You may\n> consider to  have a new OP_RETURN output like BIP141, with different magic\n> bytes. However, please don't make this output mandatory (cf. witness\n> commitment output is optional if the block does not have witness tx)\n>\n> 6a. \"..........due to lack of space to include the proper ack tag in a\n> block\": this shouldn't happen if you use a OP_RETURN output\n>\n> I'm not sure about this. The fact that the space for acknowledge and\nproposal is short has been seen by other developers a benefit and not a\ndrawback. It prevent hundreds of sidechains to be offered, which might hurt\nsolo miners. 70 bytes allows for approximately 10 active polls.\n\n\n\n> 7.  \"It can be the case that two different secondary blockchains specify\n> the same transaction candidate, but **at least** one of them will clearly\n> be unauthentic.\"\n>\n> thnks.\n\n8. Question: is an ack-poll valid only for 1 transaction? When the\n> transaction is confirmed, could full nodes prune the corresponding ack-poll\n> data? (I think it has to be prunable after spending because ack-poll data\n> is effectively UTXO data)\n>\n> Yes, there is no ack-poll data stored except for the coinbase field cache,\nwhich periodically cleans itself by using a FIFO approach.\n\n\n\n> 9. No matter how you design a softfork, \"Zero risk of invalidating a\n> block\" couldn't be true for any softfork. For example, even if a miner does\n> not include any txs with OP_COUNT_ACKS, he may still build on top of blocks\n> with invalid OP_COUNT_ACKS operations.\n>\n> I'm not sure. I assumed that transactions redeeming a script using\nOP_COUNT_ACKS  would be non-standard, so the the problem you point out\nwould only happen if the block including the transaction would be mined\nspecifically for the purpose to defeat subsequent miners. A honest pre-fork\nminer would never include a redeemScript that that verifies an\nOP_COUNT_ACKS, since that transaction would never be received by the p2p\nprotocol (it could if the miner accepts non-standard txs by a different\nchannnel).\n\nBut I must check this in the BIP source code if OP_COUNT_ACKS is really\nnon-standard as I designed it to be.\n\n(Thanks Jonhson Lau for taking the time to analyze the BIP.)\n\nSergio.\n\n\n\n>  ---- On Sun, 02 Oct 2016 23:49:08 +0800 Sergio Demian Lerner via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote ----\n>  > Since ScalingBitcoin is close, I think this is a good moment to publish\n> our proposal on drivechains. This BIP proposed the drivechain we'd like to\n> use in RSK (a.k.a. Rootstock) two-way pegged blockchain and see it\n> implemented in Bitcoin. Until that happens, we're using a federated\n> approach.\n>  > I'm sure that adding risk-less Bitcoin extensibility through\n> sidechains/drivechains is what we all want, but it's of maximum importance\n> to decide which technology will leads us there.\n>  > We hope this work can also be the base of all other new 2-way-pegged\n> blockchains that can take Bitcoin the currency to new niches and test new\n> use cases, but cannot yet be realized because of current\n> limitations/protections.\n>  >\n>  > The full BIP plus a reference implementation can be found here:\n>  >\n>  > BIP (draft):\n>  > https://github.com/rootstock/bips/blob/master/BIP-R10.md\n>  >\n>  > Code & Test cases:\n>  > https://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n>  > (Note: Code is still unaudited)\n>  >\n>  > As a summary, OP_COUNT_ACKS is a new segwit-based and soft-forked\n> opcode that counts acks and nacks tags in coinbase fields, and push the\n> resulting totals in the script stack.\n>  >\n>  > The system was designed with the following properties in mind:\n>  >\n>  > 1. Interoperability with scripting system\n>  > 2. Zero risk of invalidating a block\n>  > 3. No additional computation during blockchain management and\n> re-organization\n>  > 4. No change in Bitcoin security model\n>  > 5. Bounded computation of poll results\n>  > 6. Strong protection from DoS attacks\n>  > 7. Minimum block space consumption\n>  > 8. Zero risk of cross-secondary chain invalidation\n>  >\n>  > Please see the BIP draft for a more-detailed explanation on how we\n> achieve these goals.\n>  >\n>  > I'll be in ScalingBitcoin in less than a week and I'll be available to\n> discuss the design rationale, improvements, changes and ideas any of you\n> may have.\n>  >\n>  > Truly yours,\n>  > Sergio Demian Lerner\n>  > Bitcoiner and RSK co-founder\n>  >\n>  >  _______________________________________________\n>  > bitcoin-dev mailing list\n>  > bitcoin-dev at lists.linuxfoundation.org\n>  > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>  >\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161025/c738134c/attachment.html>"
            },
            {
                "author": "Johnson Lau",
                "date": "2016-10-25T17:45:20",
                "message_text_only": ">  3. Instead of using a OP_NOPx, I suggest you using an unused code such as 0xba. OP_NOPx should be reserved for some simple \"VERIFY\"-type codes that does not write to the stack.\n > \n > Ok. I'm not sure, but if everyone agrees to it, I will. Also Segwit versioning allows to create new opcode multiplexing opcodes, so I was thinking about adding an \"opcode index\" to a more generic OP_OPERATE. But that prevents using all NOP space, but prevents easily counting OP_ACK_COUNT for checksig block limit.\n \nThe other reason not to touch NOPx is they are shared by SIGVERSION_BASE and SIGVERSION_WITNESS_V0. If we later decide to introduce new opcodes to legacy versions, we may still use this space.\n\nAnd yes, I think you should keep OP_ACT_COUNT easily countable for block sigop limit.\n\n >  \n >  4. I don't think you should simply replace \"(witversion == 0)\" with \"((witversion == 0) || (witversion == 1))\". There are only 16 available versions. It'd be exhausted very soon if we use a version for every new opcode. As a testing prototype this is fine, but the actual softfork should not waste a witversion this way. We need a better way to coordinate the use of new witness version. BIP114 suggests an additional field in the witness to indicate the script version (https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki)\n >  \n > Good. But currently that version is not enforced, so this BIP cannot make use of it. I can use (witversion == 1) but add the BIP114 version field so that the next BIP can make use of it.\n \nProbably BIP114 would never be deployed. I don't know. But I think we should try to move the script version to witness, as it is cheaper. The major witness version could be reserved for some fundamental changes in language.\n\n  \n >  6. The coinbase space is limited to 100 bytes and is already overloaded by many different purposes. I think any additional consensus critical message should go to a dummy scriptPubKey like the witness commitment. You may consider to  have a new OP_RETURN output like BIP141, with different magic bytes. However, please don't make this output mandatory (cf. witness commitment output is optional if the block does not have witness tx)\n >  \n >  6a. \"..........due to lack of space to include the proper ack tag in a block\": this shouldn't happen if you use a OP_RETURN output\n >  \n > I'm not sure about this. The fact that the space for acknowledge and proposal is short has been seen by other developers a benefit and not a drawback. It prevent hundreds of sidechains to be offered, which might hurt solo miners. 70 bytes allows for approximately 10 active polls.\n\nThat's 1 active poll per minute on average, which sounds very small if it ever gets really popular. Have you made any forecast? I could foresee people have to bid for the coinbase space for their ack-poll, and they will yell at the devs asking for more poll space (well.....)\n\nWe used an OP_RETURN output for segwit as some miners wanted to retain the coinbase space for other purpose like advertisement.  Even if you want to set an artificial limit, you could still use an OP_RETURN output. It just means you will need a OP_COUNT_ACKS2 softfork when you want to expand the space.  Since polls are not fixed size, if an artificial limit is desired, maybe it makes more sense to limit the number of polls, instead of number of bytes.\n\n\n >  8. Question: is an ack-poll valid only for 1 transaction? When the transaction is confirmed, could full nodes prune the corresponding ack-poll data? (I think it has to be prunable after spending because ack-poll data is effectively UTXO data)\n >  \n > Yes, there is no ack-poll data stored except for the coinbase field cache, which periodically cleans itself by using a FIFO approach.\n \nIf the target tx of a ack-poll is never confirmed on the blockchain, I guess you need to keep the data of the poll forever?  It's like creating an unspendable and unprunable UTXO (just want you to clarify. People are spamming the UTXO already so your proposal won't make it worse anyway)\n \n >   9. No matter how you design a softfork, \"Zero risk of invalidating a block\" couldn't be true for any softfork. For example, even if a miner does not include any txs with OP_COUNT_ACKS, he may still build on top of blocks with invalid OP_COUNT_ACKS operations.\n >  \n > I'm not sure. I assumed that transactions redeeming a script using OP_COUNT_ACKS  would be non-standard, so the the problem you point out would only happen if the block including the transaction would be mined specifically for the purpose to defeat subsequent miners. A honest pre-fork miner would never include a redeemScript that that verifies an OP_COUNT_ACKS, since that transaction would never be received by the p2p protocol (it could if the miner accepts non-standard txs by a different channnel).   \n > \n > But I must check this in the BIP source code if OP_COUNT_ACKS is really non-standard as I designed it to be.\n \nIt must be non-standard because witversion != 0 are non-standard already. I mean, you proposal is probably as safe as OP_CSV, but no one sold OP_CSV as \"zero risk\".\n\nJohnson"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-02T17:24:15",
                "message_text_only": "On Sun, Oct 02, 2016 at 12:18:08PM -0500, Andrew Johnson wrote:\n> The purpose of this list is highly technical discussion, not political\n> disagreements.\n> \n> Is this particular proposal encumbered by a licensing type, patent, or\n> pending patent which would preclude it from being used in the bitcoin\n> project?  If not, you're wildly off topic.\n\nI don't know if it is; that's the problem.\n\nGiven Sergio's prior behavior of attempting to use patents offensively, it's\nperfectly reasonable to suspect that Rootstock does in fact intend to encumber\nthis proposal with patents. So the obvious thing to do, is for Rootstock to\ngive us all a legally binding guarantee that they will not be using patents\noffensively, eliminating the problem and allowing us to return to productive\ncollaboration.\n\nRemember that this kind of requirement is very common in standards bodies, e.g.\nby having all companies contributing to the standards in question join a patent\npool, or by making legally binding pledges/licenses to ensure any patents they\nhold can't be used offensively.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/6df6eb19/attachment.sig>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2016-10-02T23:26:18",
                "message_text_only": "If someone uses OP_EQUALVERIFY after OP_COUNT_ACKS then the transaction\nprobably won't be able to be included at a different height.\n\nOn Oct 2, 2016 19:16, \"Sergio Demian Lerner\" <sergio.d.lerner at gmail.com>\nwrote:\n\n> It can be included at another block at a differnt height. It can be\n> included anytime during the liveness period which starts 100 blocks later\n> than the poll period ends. I'm reading the BIP now and it's true that this\n> is not enterily clear. I will try to clarify.\n>\n>\n> On Sun, Oct 2, 2016 at 7:58 PM, Russell O'Connor <roconnor at blockstream.io>\n> wrote:\n>\n>> A related problem is that if this transaction is reorged out during an\n>> innocent reorg, one that doesn't involve a double spend, the transaction\n>> may never get back in unless it occurs at exactly  the same height, which\n>> is not guaranteed.\n>>\n>> This affects fungabity of coins generated from these transactions.\n>>\n>> On Oct 2, 2016 18:37, \"Sergio Demian Lerner\" <sergio.d.lerner at gmail.com>\n>> wrote:\n>>\n>>>\n>>>\n>>> On Sun, Oct 2, 2016 at 6:46 PM, Russell O'Connor via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>>\n>>>> But I would argue that in this scenario, the only way it\n>>>>> would become invalid is the equivalent of a double-spend... and\n>>>>> therefore it\n>>>>> may be acceptable in relation to this argument.\n>>>>>\n>>>>\n>>>> The values returned by OP_COUNT_ACKS vary in their exact value\n>>>> depending on which block this transaction ends up in.  While the proposed\n>>>> use of this operation is somewhat less objectionable (although still\n>>>> objectionable to me), nothing stops users from using OP_EQUALVERIFY and and\n>>>> causing their transaction fluctuate between acceptable and unacceptable,\n>>>> with no party doing anything like a double spend.  This is a major problem\n>>>> with the proposal.\n>>>>\n>>>\n>>> Transactions that redeem an output containing (or referencing by means\n>>> of P2WSH) an OP_COUNT_ACKS are not broadcast by the network. That means\n>>> that the network cannot be DoS attacked by flooding with a transaction that\n>>> will not verify due to being too late.\n>>> The only parties that can include the redeem transaction are the miners\n>>> themselves.\n>>> Therefore I see no problem that an OP_COUNT_ACKS scriptSig transaction\n>>> is invalidated after the liveness times expires.\n>>> If there is no expiration, then polls can last forever and the system\n>>> fails to provide DoS protection for block validation since active polls can\n>>> accumulate forever.\n>>>\n>>>\n>>>\n>>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/008196f0/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Drivechain proposal using OP_COUNT_ACKS",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Johnson",
                "Peter Todd",
                "Johnson Lau",
                "Russell O'Connor",
                "Sergio Demian Lerner",
                "Luke Dashjr"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 41636
        }
    },
    {
        "title": "[bitcoin-dev] About ASICBoost",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T17:13:13",
                "message_text_only": "Please Peter Todd explain here all what you want to say about a patent of a\nhardware design for an ASIC.\n\nRemember that ASICBoost is not the only patent out there, there are at\nleast three similar patents, filed by major Bitcoin ASIC manufacturers in\nthree different countries, on similar technologies.\n\nThat suggest that the problem is not ASICBoot's: you cannot blame any\ncompany from doing lawful commerce in a FREE MARKET.\n\nIt is a flaw in Bitcoin design that could be corrected if the guidelines I\nposted in [1] had been followed.\n\n[1]\nhttps://bitslog.wordpress.com/2014/03/18/the-re-design-of-the-bitcoin-block-header/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/9364fb1b/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2016-10-02T19:36:06",
                "message_text_only": "Sergio,\n\nIt is critically important to the future of Bitcoin that consensus\ncode avoid any unnecessary entanglements with patents because \"the\nfree market\" allows you and anyone else to make consensus change\nproposals that rely on (unknown) patents - but this is something we\nshould all be working to avoid, as it unnecessarily hinders Bitcoin\ndevelopment and everyone's ability to deploy. Consensus code must not\nbe hindered by patents and Bitcoin should retain its permissionless\nqualities.\n\nWhen you proposed the extra nonce space BIP [1], you had already\napplied for your ASICBOOST patent [2] without disclosure in the BIP\n[1] nor in your Bitcoin Core pull request #5102 [2].\n\nThe ASICBOOST patent [2] describes the same process as in the BIP [1]\nand proposed code [3] \"As we explained in our Provisional Application,\nit has been proposed to partition the 4-byte Version field in the\nblock header (see, Fig. 6) and use, e.g., the high 2-byte portion as\nadditional nonce range.\"\n\nToday when you proposed a new sidechain BIP [4], Peter Todd was\n(rightly) concerned about the prior lack of disclosure of your patents\nrelated to your prior consensus modification proposal. Hence the\nconcern is that this might be happening this time as well.\n\nThere is no evidence that any of the other filers for the\nASICBOOST-like patents by mining companies other than your own were\ngoing to be using it offensively as those other companies appeared to\nunderstand the decentralization risk of having an advantage enforced\nby legal and not technical means.\n\nIt's great that you have now committed to looking into the Defensive\nPatent License. This seems likely to mitigate some of the patent\nconcerns. Although it would be a show of good faith if you also agreed\nto license ASICBOOST under the DPL.\n\n[1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n[2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n[3]: Extra nonce pull request: https://github.com/bitcoin/bitcoin/pull/5102\n[4]: COUNT_ACKS\n[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-October/013174.html\n\nOn Sun, Oct 2, 2016 at 6:13 PM, Sergio Demian Lerner via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Please Peter Todd explain here all what you want to say about a patent of a\n> hardware design for an ASIC.\n>\n> Remember that ASICBoost is not the only patent out there, there are at least\n> three similar patents, filed by major Bitcoin ASIC manufacturers in three\n> different countries, on similar technologies.\n>\n> That suggest that the problem is not ASICBoot's: you cannot blame any\n> company from doing lawful commerce in a FREE MARKET.\n>\n> It is a flaw in Bitcoin design that could be corrected if the guidelines I\n> posted in [1] had been followed.\n>\n> [1]\n> https://bitslog.wordpress.com/2014/03/18/the-re-design-of-the-bitcoin-block-header/\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T22:25:52",
                "message_text_only": "It's good you bring that point, and it's very interesting to analyze what\nhappened then.\n\nWe shared our findings with some core developers much earlier than the BIP\nproposal. Wether they kept it secret or they shared it with some ASIC\nmanufacturers is something I don't know. I even mentioned my wishes to try\nto give the patent to public domain.\n\nI remember the reason we proposed the BIP is because ASICBoost actually\ndoes NOT require that BIP at all. And that BIP was not a consensus change,\nbut just a semantic re-interpretation.\n\nASICBoost can roll the nVersion field or the Merkle root hash. Doing the\nformer currently generates a strange warning message on nodes and can be\nconfusing, but doing the later makes ASICBoost completely stealthy. That\nBIP could help the community to monitor its use in non-confusing way to the\nusers. What is worse? I think forcing it to be stealthy is worse.\n\nI never opposed changing Bitcoin to be more decentralized, but hard-forking\na change to the PoW function may be contentious and that path of thought\nmust be walked very carefully.\n\nRegards\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/3104f53a/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2016-10-02T22:56:48",
                "message_text_only": "> When you proposed the extra nonce space BIP [1], you had already\n> applied for your ASICBOOST patent [2] without disclosure in the BIP\n> [1] nor in your Bitcoin Core pull request #5102 [2].\n\nThere may be quite a few things to clarify here, and a possible\nmisunderstanding:\n\nThe BIP proposal [1] and accompanying pull request [3] does not increase or\ndecrease the entanglement of Bitcoin consensus code with any patents. This\nis indicated by the title of the pull request: \"No forking Extra nonce\nadded to Bitcoin header.\" It is not a fork at all (soft or hard). The\nconsensus is not changed.\n\nAsicBoost is possible with or without adoption of that BIP proposal. Of\nseveral ways to implement AsicBoost (all described in the patent\napplication), making use of the version field is only one. And even that\nparticular one has always been possible since the beginning of Bitcoin and\nis still possible today. It is not the case that the BIP proposal enables\nAsicBoost in a way that wasn't possible before.\n\nThe rationale behind the BIP proposal was to eliminate incentives to mess\nwith the merkle root and, in the extreme case, to mine empty blocks. This\nincentive is real, and it is real with or without AsicBoost. It costs\nhardware manufacturers real $ in additional hardware components right now\nto cope with the pre-hashing load.\n\nTimo\n\n\nOn Sun, Oct 2, 2016 at 12:36 PM, Btc Drak via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Sergio,\n>\n> It is critically important to the future of Bitcoin that consensus\n> code avoid any unnecessary entanglements with patents because \"the\n> free market\" allows you and anyone else to make consensus change\n> proposals that rely on (unknown) patents - but this is something we\n> should all be working to avoid, as it unnecessarily hinders Bitcoin\n> development and everyone's ability to deploy. Consensus code must not\n> be hindered by patents and Bitcoin should retain its permissionless\n> qualities.\n>\n> When you proposed the extra nonce space BIP [1], you had already\n> applied for your ASICBOOST patent [2] without disclosure in the BIP\n> [1] nor in your Bitcoin Core pull request #5102 [2].\n>\n> The ASICBOOST patent [2] describes the same process as in the BIP [1]\n> and proposed code [3] \"As we explained in our Provisional Application,\n> it has been proposed to partition the 4-byte Version field in the\n> block header (see, Fig. 6) and use, e.g., the high 2-byte portion as\n> additional nonce range.\"\n>\n> Today when you proposed a new sidechain BIP [4], Peter Todd was\n> (rightly) concerned about the prior lack of disclosure of your patents\n> related to your prior consensus modification proposal. Hence the\n> concern is that this might be happening this time as well.\n>\n> There is no evidence that any of the other filers for the\n> ASICBOOST-like patents by mining companies other than your own were\n> going to be using it offensively as those other companies appeared to\n> understand the decentralization risk of having an advantage enforced\n> by legal and not technical means.\n>\n> It's great that you have now committed to looking into the Defensive\n> Patent License. This seems likely to mitigate some of the patent\n> concerns. Although it would be a show of good faith if you also agreed\n> to license ASICBOOST under the DPL.\n>\n> [1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n> [2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n> [3]: Extra nonce pull request: https://github.com/bitcoin/\n> bitcoin/pull/5102\n> [4]: COUNT_ACKS\n> [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-October/\n> 013174.html\n>\n> On Sun, Oct 2, 2016 at 6:13 PM, Sergio Demian Lerner via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Please Peter Todd explain here all what you want to say about a patent\n> of a\n> > hardware design for an ASIC.\n> >\n> > Remember that ASICBoost is not the only patent out there, there are at\n> least\n> > three similar patents, filed by major Bitcoin ASIC manufacturers in three\n> > different countries, on similar technologies.\n> >\n> > That suggest that the problem is not ASICBoot's: you cannot blame any\n> > company from doing lawful commerce in a FREE MARKET.\n> >\n> > It is a flaw in Bitcoin design that could be corrected if the guidelines\n> I\n> > posted in [1] had been followed.\n> >\n> > [1]\n> > https://bitslog.wordpress.com/2014/03/18/the-re-design-of-\n> the-bitcoin-block-header/\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/ed3b4e7a/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2016-10-02T22:51:06",
                "message_text_only": "Replies to comments inline.\n\nMatt\n\nOn 10/02/16 17:13, Sergio Demian Lerner via bitcoin-dev wrote:\n> Please Peter Todd explain here all what you want to say about a patent\n> of a hardware design for an ASIC.\n> \n> Remember that ASICBoost is not the only patent out there, there are at\n> least three similar patents, filed by major Bitcoin ASIC manufacturers\n> in three different countries, on similar technologies.\n\nThis is a very misleading comparison. I am not aware of any other\npatents on Bitcoin-specific ASIC technology which are practically\nenforceable or which the owners have indicated they wish to enforce. Of\nthe two patents which you point out which were filed on essentially the\nsame optimization that ASICBoost covers, yours predates both of them,\ninvalidating both the Spondoolies one (which Guy had indicated he wished\nto use only defensively) and the AntMiner one. Of course, as China is\nnotorious for ignoring international patent law, AntMiner's could\npossibly still be enforced in China. Still, AntMiner has, like\nSpondoolies did, indicated they have no intention of enforcing their\npatent to limit competition, though without any legally-enforceable\ncommitment. This leaves only your patent as practical and likely to be\nenforced in the vast majority of the world.\n\n> That suggest that the problem is not ASICBoot's: you cannot blame any\n> company from doing lawful commerce in a FREE MARKET.\n\nIf you had acted in a way which indicated even the slightest regard for\ncentralization pressure and the harm it can do to Bitcoin in the\nlong-term, then I dont think many would be blaming you. Instead of any\nkind of open or transparent licensing policy, with price structures\ndesigned to encourage competition, you chose to hide behind an opaque\nwebsite, asking people to simply email you and Timo to negotiate\nindividually.\n\n> It is a flaw in Bitcoin design that could be corrected if the guidelines\n> I posted in [1] had been followed.\n> \n> [1]\n> https://bitslog.wordpress.com/2014/03/18/the-re-design-of-the-bitcoin-block-header/\n\nOptimizations to the hashing algorithm are not, themselves, \"attacks\" on\nBitcoin, as you claimed in your post at the time. Only when they are\nused in a rent-seeking fashion to push for more centralization and lower\nminer revenue do they become so. One of the biggest advantages of SHA256\nin the context of mining is exactly that it is a relatively simple\nalgorithm, allowing for fewer large algorithmic optimizations (or, when\nthere are, more people are capable of finding them, as happened with\nASICBoost). This opens the doors to more competition in the ASIC market\nthan if only few people had the knowledge (or a patent) to build\nefficient ASICs. While it is certainly true that the high-end\nASIC-manufacturing industry is highly-centralized, making it worse by\nlimiting those who can build Bitcoin ASICs from anyone with access to\nsuch a fab to only those who can, additionally, negotiate for patent\nrights and navigate the modern patent system, is far from ideal.\n\nYou claim that Bitcoin should have fixed the problem at the time, but\nyou posted a proposal for a hard fork, with the only argument given as\nto why it should happen being that you thought you had an attack, but\ncant yet \"really tell if they could affect Bitcoin\". Instead of\nfollowing up with more information, as you indicated you would, you went\nand patented the optimizations and have gone on rent-seeking behavior since."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2016-10-02T22:58:46",
                "message_text_only": "On Sun, Oct 2, 2016 at 10:51 PM, Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> If you had acted in a way which indicated even the slightest regard for\n> centralization pressure and the harm it can do to Bitcoin in the\n> long-term, then I dont think many would be blaming you. Instead of any\n\nSergio was concerned about centralization pressure in private. He\nreached out to the BCF on 2013-11-23 and asked if they would license\nthe patent from him so they could make it equally available to all\nunder \"fair\" terms.  BCF responded that they didn't think it (a\nproprietary patent encumbered enhancement that would make its user(s)\n30% more effective than others) would be a big deal and basically\nencouraged him to go ahead and seek the patent."
            },
            {
                "author": "Matt Corallo",
                "date": "2016-10-02T23:19:08",
                "message_text_only": "Even if the Bitcoin Foundation decided to recklessly disregard Bitcoin's\nfuture centralization, I'm not sure going to them and asking them to pay\na license fee in order to keep from holding the rest of the Bitcoin\nmining community hostage counts as \"regard for centralization pressure\".\nIt also doesn't excuse the lack of transparent licensing being available\ntoday, or the lack of transparency when discussing it in public after\nthe patent had been filed.\n\nMatt\n\nOn 10/02/16 22:58, Gregory Maxwell via bitcoin-dev wrote:\n> On Sun, Oct 2, 2016 at 10:51 PM, Matt Corallo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> If you had acted in a way which indicated even the slightest regard for\n>> centralization pressure and the harm it can do to Bitcoin in the\n>> long-term, then I dont think many would be blaming you. Instead of any\n> \n> Sergio was concerned about centralization pressure in private. He\n> reached out to the BCF on 2013-11-23 and asked if they would license\n> the patent from him so they could make it equally available to all\n> under \"fair\" terms.  BCF responded that they didn't think it (a\n> proprietary patent encumbered enhancement that would make its user(s)\n> 30% more effective than others) would be a big deal and basically\n> encouraged him to go ahead and seek the patent.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2016-10-02T23:27:20",
                "message_text_only": "On Sun, Oct 2, 2016 at 11:19 PM, Matt Corallo <lf-lists at mattcorallo.com> wrote:\n> Even if the Bitcoin Foundation decided to recklessly disregard Bitcoin's\n> future centralization, I'm not sure going to them and asking them to pay\n> a license fee in order to keep from holding the rest of the Bitcoin\n> mining community hostage counts as \"regard for centralization pressure\".\n> It also doesn't excuse the lack of transparent licensing being available\n> today, or the lack of transparency when discussing it in public after\n> the patent had been filed.\n\nWe can't change the past (besides, would you want BCF to have owned\nthat patent? I didn't)-- only the future.\n\nTo do so requires collaboration, so lets focus on that."
            }
        ],
        "thread_summary": {
            "title": "About ASICBoost",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Timo Hanke",
                "Sergio Demian Lerner",
                "Btc Drak",
                "Gregory Maxwell",
                "Matt Corallo"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 16605
        }
    },
    {
        "title": "[bitcoin-dev] The use OP_COUNT_ACKS for paying for a common good for miners",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-02T22:57:31",
                "message_text_only": "One side benefit of OP_COUNT_ACKS is that it enables a completely different\nuse case:\n\nIt allow users to pay for any service miners can provide as group for the\ncommon good (e.g. fee payment smoothing over many blocks). For instance,\nusers could pay miners to jointly buy better Internet service to improve\nbandwidth or reduce latency between them.\n\nBy sending bitcoins to a script containing OP_COUNT_ACKS requiring 51% of\nminers approval and adding a special text tag to such outputs such as\n\"FOR-MINERS-TO-BUY-X\", users can send bitcoins to miners and ask the\nmajority of them to vote on the proposal, if accepted create a transaction\nto redeem those funds. This could help to address the so-called tragedy of\nthe commons problem that Bitcoin may face in in long-term, by users\ncrowdfunding mining of the following n blocks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/bbc97441/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-10-03T06:17:25",
                "message_text_only": "When would miners vote no to receive more funds?\nAlso, why would they spend the funds buying X once they get them?\n\nOn Oct 3, 2016 00:58, \"Sergio Demian Lerner via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> One side benefit of OP_COUNT_ACKS is that it enables a completely\n> different use case:\n>\n> It allow users to pay for any service miners can provide as group for the\n> common good (e.g. fee payment smoothing over many blocks). For instance,\n> users could pay miners to jointly buy better Internet service to improve\n> bandwidth or reduce latency between them.\n>\n> By sending bitcoins to a script containing OP_COUNT_ACKS requiring 51% of\n> miners approval and adding a special text tag to such outputs such as\n> \"FOR-MINERS-TO-BUY-X\", users can send bitcoins to miners and ask the\n> majority of them to vote on the proposal, if accepted create a transaction\n> to redeem those funds. This could help to address the so-called tragedy of\n> the commons problem that Bitcoin may face in in long-term, by users\n> crowdfunding mining of the following n blocks.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161003/509de83b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "The use OP_COUNT_ACKS for paying for a common good for miners",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2470
        }
    },
    {
        "title": "[bitcoin-dev] Fwd: Re:  Drivechain proposal using OP_COUNT_ACKS",
        "thread_messages": [
            {
                "author": "Russell O'Connor",
                "date": "2016-10-02T23:00:16",
                "message_text_only": "I forget to send to bitcoin-dev.\n\n> A related problem is that if this transaction is reorged out during an\ninnocent reorg, one that doesn't involve a double spend, the transaction\nmay never get back in unless it occurs at exactly  the same height, which\nis not guaranteed.\n>\n> This affects fungabity of coins generated from these transactions.\n>\n>\n> On Oct 2, 2016 18:37, \"Sergio Demian Lerner\" <sergio.d.lerner at gmail.com>\nwrote:\n>>\n>>\n>>\n>> On Sun, Oct 2, 2016 at 6:46 PM, Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>\n>>>> But I would argue that in this scenario, the only way it\n>>>> would become invalid is the equivalent of a double-spend... and\ntherefore it\n>>>> may be acceptable in relation to this argument.\n>>>\n>>>\n>>> The values returned by OP_COUNT_ACKS vary in their exact value\ndepending on which block this transaction ends up in.  While the proposed\nuse of this operation is somewhat less objectionable (although still\nobjectionable to me), nothing stops users from using OP_EQUALVERIFY and and\ncausing their transaction fluctuate between acceptable and unacceptable,\nwith no party doing anything like a double spend.  This is a major problem\nwith the proposal.\n>>\n>>\n>> Transactions that redeem an output containing (or referencing by means\nof P2WSH) an OP_COUNT_ACKS are not broadcast by the network. That means\nthat the network cannot be DoS attacked by flooding with a transaction that\nwill not verify due to being too late.\n>> The only parties that can include the redeem transaction are the miners\nthemselves.\n>> Therefore I see no problem that an OP_COUNT_ACKS scriptSig transaction\nis invalidated after the liveness times expires.\n>> If there is no expiration, then polls can last forever and the system\nfails to provide DoS protection for block validation since active polls can\naccumulate forever.\n>>\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161002/30d18dbb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Re:  Drivechain proposal using OP_COUNT_ACKS",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Russell O'Connor"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2064
        }
    },
    {
        "title": "[bitcoin-dev] To-be-softfork policy in 0.13.1",
        "thread_messages": [
            {
                "author": "Johnson Lau",
                "date": "2016-10-06T04:27:38",
                "message_text_only": "Coupled with the release of segwit in 0.13.1, there are 3 default relay and mining policy rules that may become softfork proposals in the near future.\n\nGenerally, users must not assume that a script spendable in pre-segregated witness system would also be spendable as a P2WPKH or P2WSH script. Before large-scale deployment in the production network, developers should test the scripts on testnet with the default relay policy turned on, and with a small amount of money after BIP141 is activated on mainnet.\n\nThe rules include:\n\n1. Only compressed public keys are accepted in P2WPKH and P2WSH (See BIP143 for details)\n2. The argument of OP_IF/NOTIF in P2WSH must be minimal (see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013014.html)\n3. Signature(s) must be null vector(s) if an OP_CHECKSIG or OP_CHECKMULTISIG is failed (for both pre-segregated witness script and P2WSH. See BIP146)\n\nThe BIP141 and 143 are updated with the aforementioned rules: https://github.com/bitcoin/bips/pull/459/files"
            }
        ],
        "thread_summary": {
            "title": "To-be-softfork policy in 0.13.1",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Johnson Lau"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1021
        }
    },
    {
        "title": "[bitcoin-dev] 1 Year bitcoin-dev Moderation Review",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2016-10-09T10:26:07",
                "message_text_only": "Hi bitcoin-dev,\n\nI'm well aware that discussion of moderation on bitcoin-dev is\ndiscouraged*. However, I think that we should, as a year of moderation\napproaches, discuss openly as a community what the impact of such policy\nhas been. Making such a post now is timely given that people will have the\nopportunity to discuss in-person as well as online as Scaling Bitcoin is\ncurrently underway. On the suggestion of others, I've also CC'd\nbitcoin-discuss on this message.\n\nBelow, I'll share some of my own personal thoughts as a starter, but would\nlove to hear others feelings as well.\n\nFor me, the bitcoin-dev mailing list was a place where I started\nfrequenting to learn a lot about bitcoin and the development process and\ninteract with the community. Since moderation has begun, it seems that the\nmessages/day has dropped drastically. This may be a nice outcome overall\nfor our sanity, but I think that it has on the whole made the community\nless accessible. I've heard from people (a > 1 number, myself included)\nthat they now self-censor because they think they will put a lot of work\ninto their email only for it to get moderated away as trolling/spam. Thus,\nwhile we may not observe a high rate of moderated posts, it does mean the\n\"chilling effect\" of moderation still manifests -- I think that people not\nwriting emails because they think it may be moderated reduces the rate of\npeople writing emails which is a generally valuable thing as it offers\npeople a vehicle through which they try to think through and communicate\ntheir ideas in detail.\n\nOverall, I think that at the time that moderation was added to the list, it\nwas probably the right thing to do. We're in a different place as a\ncommunity now, so I feel we should attempt to open up this valuable\ncommunication channel once again. My sentiment is that we enacted\nmoderation to protect a resource that we all felt was valuable, but in the\nprocess, the value of the list was damaged, but not irreparably so.\n\nBest,\n\nJeremy\n\n\n* From the email introducing the bitcoin-dev moderation policy, \"Generally\ndiscouraged: shower thoughts, wild speculation, jokes, +1s, non-technical\nbitcoin issues, rehashing settled topics without new data, moderation\n concerns.\"\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161009/ea20481e/attachment.html>"
            },
            {
                "author": "Ryan Grant",
                "date": "2016-10-09T20:31:54",
                "message_text_only": "Maybe bitcoin-discuss should have been opt-out rather than opt-in.\n\nDear moderators, what is the subscription count to bitcoin-discuss,\nand bitcoin-dev?"
            },
            {
                "author": "Henning Kopp",
                "date": "2016-10-10T07:38:06",
                "message_text_only": "Hi all,\n\nI totally agree with the assessment of the situation. Previously I\nlearned a lot about bitcoin on this list. There were a lot of great\nideas regarding the protocol and the surrounding ecosystem. Now there\nis mainly talk about code and BIPs, which is the main purpose of a\ndeveloper list.\nI do not feel that we should clog bitcoin-dev again with\nnon-development talk but rather find a way to get bitcoin-discuss\ngoing. My impression is that bitcoin-discuss has not reached a\ncritical mass of contributors. The question is how we can change that.\n\nAll the best\nHenning\n\nOn Sun, Oct 09, 2016 at 12:26:07PM +0200, Jeremy via bitcoin-dev wrote:\n> Hi bitcoin-dev,\n> \n> I'm well aware that discussion of moderation on bitcoin-dev is\n> discouraged*. However, I think that we should, as a year of moderation\n> approaches, discuss openly as a community what the impact of such policy\n> has been. Making such a post now is timely given that people will have the\n> opportunity to discuss in-person as well as online as Scaling Bitcoin is\n> currently underway. On the suggestion of others, I've also CC'd\n> bitcoin-discuss on this message.\n> \n> Below, I'll share some of my own personal thoughts as a starter, but would\n> love to hear others feelings as well.\n> \n> For me, the bitcoin-dev mailing list was a place where I started\n> frequenting to learn a lot about bitcoin and the development process and\n> interact with the community. Since moderation has begun, it seems that the\n> messages/day has dropped drastically. This may be a nice outcome overall\n> for our sanity, but I think that it has on the whole made the community\n> less accessible. I've heard from people (a > 1 number, myself included)\n> that they now self-censor because they think they will put a lot of work\n> into their email only for it to get moderated away as trolling/spam. Thus,\n> while we may not observe a high rate of moderated posts, it does mean the\n> \"chilling effect\" of moderation still manifests -- I think that people not\n> writing emails because they think it may be moderated reduces the rate of\n> people writing emails which is a generally valuable thing as it offers\n> people a vehicle through which they try to think through and communicate\n> their ideas in detail.\n> \n> Overall, I think that at the time that moderation was added to the list, it\n> was probably the right thing to do. We're in a different place as a\n> community now, so I feel we should attempt to open up this valuable\n> communication channel once again. My sentiment is that we enacted\n> moderation to protect a resource that we all felt was valuable, but in the\n> process, the value of the list was damaged, but not irreparably so.\n> \n> Best,\n> \n> Jeremy\n> \n> \n> * From the email introducing the bitcoin-dev moderation policy, \"Generally\n> discouraged: shower thoughts, wild speculation, jokes, +1s, non-technical\n> bitcoin issues, rehashing settled topics without new data, moderation\n>  concerns.\"\n> \n> \n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-- \nHenning Kopp\nInstitute of Distributed Systems\nUlm University, Germany\n\nOffice: O27 - 3402\nPhone: +49 731 50-24138\nWeb: http://www.uni-ulm.de/in/vs/~kopp"
            },
            {
                "author": "Dave Scotese",
                "date": "2016-10-10T15:34:17",
                "message_text_only": "I sent my previous email ONLY to bitcoin-discuss at lists.linuxfoundation.org\nand it waited in the moderation queue.  I don't know when moderation was\nadded to this list, but it seems to me that it's a misstep.\n\nOn Mon, Oct 10, 2016 at 12:38 AM, Henning Kopp via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> I totally agree with the assessment of the situation. Previously I\n> learned a lot about bitcoin on this list. There were a lot of great\n> ideas regarding the protocol and the surrounding ecosystem. Now there\n> is mainly talk about code and BIPs, which is the main purpose of a\n> developer list.\n> I do not feel that we should clog bitcoin-dev again with\n> non-development talk but rather find a way to get bitcoin-discuss\n> going. My impression is that bitcoin-discuss has not reached a\n> critical mass of contributors. The question is how we can change that.\n>\n> All the best\n> Henning\n>\n> On Sun, Oct 09, 2016 at 12:26:07PM +0200, Jeremy via bitcoin-dev wrote:\n> > Hi bitcoin-dev,\n> >\n> > I'm well aware that discussion of moderation on bitcoin-dev is\n> > discouraged*. However, I think that we should, as a year of moderation\n> > approaches, discuss openly as a community what the impact of such policy\n> > has been. Making such a post now is timely given that people will have\n> the\n> > opportunity to discuss in-person as well as online as Scaling Bitcoin is\n> > currently underway. On the suggestion of others, I've also CC'd\n> > bitcoin-discuss on this message.\n> >\n> > Below, I'll share some of my own personal thoughts as a starter, but\n> would\n> > love to hear others feelings as well.\n> >\n> > For me, the bitcoin-dev mailing list was a place where I started\n> > frequenting to learn a lot about bitcoin and the development process and\n> > interact with the community. Since moderation has begun, it seems that\n> the\n> > messages/day has dropped drastically. This may be a nice outcome overall\n> > for our sanity, but I think that it has on the whole made the community\n> > less accessible. I've heard from people (a > 1 number, myself included)\n> > that they now self-censor because they think they will put a lot of work\n> > into their email only for it to get moderated away as trolling/spam.\n> Thus,\n> > while we may not observe a high rate of moderated posts, it does mean the\n> > \"chilling effect\" of moderation still manifests -- I think that people\n> not\n> > writing emails because they think it may be moderated reduces the rate of\n> > people writing emails which is a generally valuable thing as it offers\n> > people a vehicle through which they try to think through and communicate\n> > their ideas in detail.\n> >\n> > Overall, I think that at the time that moderation was added to the list,\n> it\n> > was probably the right thing to do. We're in a different place as a\n> > community now, so I feel we should attempt to open up this valuable\n> > communication channel once again. My sentiment is that we enacted\n> > moderation to protect a resource that we all felt was valuable, but in\n> the\n> > process, the value of the list was damaged, but not irreparably so.\n> >\n> > Best,\n> >\n> > Jeremy\n> >\n> >\n> > * From the email introducing the bitcoin-dev moderation policy,\n> \"Generally\n> > discouraged: shower thoughts, wild speculation, jokes, +1s, non-technical\n> > bitcoin issues, rehashing settled topics without new data, moderation\n> >  concerns.\"\n> >\n> >\n> > --\n> > @JeremyRubin <https://twitter.com/JeremyRubin>\n> > <https://twitter.com/JeremyRubin>\n>\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> --\n> Henning Kopp\n> Institute of Distributed Systems\n> Ulm University, Germany\n>\n> Office: O27 - 3402\n> Phone: +49 731 50-24138\n> Web: http://www.uni-ulm.de/in/vs/~kopp\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161010/b30db2b1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "1 Year bitcoin-dev Moderation Review",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Henning Kopp",
                "Jeremy",
                "Dave Scotese"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 10727
        }
    },
    {
        "title": "[bitcoin-dev] Libconsensus completion plan document (with pictures)",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-10-10T14:58:04",
                "message_text_only": "Hello, since trying to encapsulate consensus code without exposing\nanything else (see my post from january\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-January/012235.html\n) wasn't succesful in getting review, I decided to turn \"phase 2\" into\n\"expose verifyHeader\" again. I was previously starting the document\nwith pictures but since things we're changing and the pictures were\nalready deprecated, I decided to wait after segwit was merged and\ninclude those changes in the pictures too.\nThis time I created a repository so that people can look at it, even\nif it's less advanced than previous versions have been:\n\nhttps://github.com/jtimon/consensus-doc\n\nHere's a branch with the resulting images, latex file and pdf:\n\nhttps://github.com/jtimon/consensus-doc/tree/generated\n\nAnd here's the pdf:\n\nhttps://github.com/jtimon/consensus-doc/blob/generated/libconsensus.pdf\n\nAny questions or comments are welcomed. If some of the images are\nwanted for some other more general documentation or you want me to\ncreate a specific diagram to document Bitcoin Core I'm happy to do so\nas well.\n\nNote that some phases can be done in different order or in parallel\n(ie phase 3 and phase 4 could happen before phase 2, although I\nstrongly doubt it because phase 2 is the simplest to review and I've\nbeen harassing different people to do it for a while with little\nsuccess [thanks to those who reviewed it and gave feedback] ).\n\nAn implementation of phase 2 (expose verifyHeader()) can be seen in\nhttps://github.com/bitcoin/bitcoin/pull/8493"
            }
        ],
        "thread_summary": {
            "title": "Libconsensus completion plan document (with pictures)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1540
        }
    },
    {
        "title": "[bitcoin-dev] Could a sidechain protocol create an addressable \"Internet of Blockchains\" and facilitate scaling?",
        "thread_messages": [
            {
                "author": "John Hardy",
                "date": "2016-10-11T21:23:44",
                "message_text_only": "Sidechains seem an inevitable tool for scaling. They allow Bitcoins to be transferred from the main blockchain into external blockchains, of which there can be any number with radically different approaches.\nIn current thinking I have encountered, sidechains are isolated from each other. To move Bitcoin between them would involve a slow transfer back to the mainchain, and then out again to a different sidechain.\nCould we instead create a protocol for addressable blockchains, all using a shared proof of work, which effectively acts as an Internet of Blockchains?\nInstead of transferring Bitcoin into individual sidechains, you move them into the master sidechain, which I'll call Angel. The Angel blockchain sits at the top of of a tree of blockchains, each of which can have radically different properties, but are all able to transfer Bitcoin and data between each other using a standardised protocol.\nEach blockchain has its own address, much like an IP address. The Angel blockchain acts as a registrar, a public record of every blockchain and its properties. Creating a blockchain is as simple as getting a createBlockchain transaction included in an Angel block, with details of parameters such as block creation time, block size limit, etc. A decentralised DNS of sorts.\nMining in Angel uses a standardised format, creating hashes which allow all different blockchains to contribute to the same Angel proof of work. Miners must hash the address of the blockchain they are mining, and if they mine a hash of sufficient difficulty for that blockchain they are able to create a block.\nBlockchains can have child blockchains, so a child of Angel might have the address aa9, and a child of aa9 might have the address aa9:e4d. The lower down the tree you go, the lower the security, but the lower the transaction fees. If a miner on a lower level produces a hash of sufficient difficulty, they can use it on any parents, up to and including the Angel blockchain, and claim fees on each.\nChildren always synchronise and follow all parents (and their reorganisations), and parents are aware of their children. This allows you to do some pretty cool things with security. If a child tries to withdraw to a parent after spending on the child (a double spend attempt) this will be visible instantly, and all child nodes will immediately be able to broadcast proof of the double spend to parent chain nodes so they do not mine on those blocks. This effectively means children can inherit a level of security from their parents without the same PoW difficulty.\nThere are so many conflicting visions for how to scale Bitcoin. Angel allows the free market to decide which approaches are successful, and for complementary blockchains with different use cases, such as privacy, high transaction volume, and Turing completeness to more seamlessly exist alongside each other, using Bitcoin as the standard medium of exchange.\nI wrote this as a TLDR summary for a (still evolving) idea I had on the best approach to scale Bitcoin infinitely. I've written more of my thoughts on the idea at https://seebitcoin.com/2016/09/introducing-buzz-a-turing-complete-concept-for-scaling-bitcoin-to-infinity-and-beyond/\nDoes anybody think this would be a better, more efficient way of implementing sidechains? It allows infinite scaling, and standardisation allows better pooling of resources.\nThanks,\nJohn Hardyjohn at seebitcoin.com \t\t \t   \t\t   \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161011/73c81f78/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2016-10-12T01:28:46",
                "message_text_only": "Den 12 okt. 2016 01:33 skrev \"John Hardy via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org>:\n> Sidechains seem an inevitable tool for scaling. They allow Bitcoins to be\ntransferred from the main blockchain into external blockchains, of which\nthere can be any number with radically different approaches.\n>\n> In current thinking I have encountered, sidechains are isolated from each\nother. To move Bitcoin between them would involve a slow transfer back to\nthe mainchain, and then out again to a different sidechain.\n>\n> Could we instead create a protocol for addressable blockchains, all using\na shared proof of work, which effectively acts as an Internet of\nBlockchains?\n\nMore of a treechain / clusterchain, then?\n\n> Instead of transferring Bitcoin into individual sidechains, you move them\ninto the master sidechain, which I'll call Angel. The Angel blockchain sits\nat the top of of a tree of blockchains, each of which can have radically\ndifferent properties, but are all able to transfer Bitcoin and data between\neach other using a standardised protocol.\n>\n> Each blockchain has its own address, much like an IP address. The Angel\nblockchain acts as a registrar, a public record of every blockchain and its\nproperties. Creating a blockchain is as simple as getting a\ncreateBlockchain transaction included in an Angel block, with details of\nparameters such as block creation time, block size limit, etc. A\ndecentralised DNS of sorts.\n>\n> Mining in Angel uses a standardised format, creating hashes which allow\nall different blockchains to contribute to the same Angel proof of work.\nMiners must hash the address of the blockchain they are mining, and if they\nmine a hash of sufficient difficulty for that blockchain they are able to\ncreate a block.\n>\n> Blockchains can have child blockchains, so a child of Angel might have\nthe address aa9, and a child of aa9 might have the address aa9:e4d. The\nlower down the tree you go, the lower the security, but the lower the\ntransaction fees. If a miner on a lower level produces a hash of sufficient\ndifficulty, they can use it on any parents, up to and including the Angel\nblockchain, and claim fees on each.\n>\n> Children always synchronise and follow all parents (and their\nreorganisations), and parents are aware of their children. This allows you\nto do some pretty cool things with security. If a child tries to withdraw\nto a parent after spending on the child (a double spend attempt) this will\nbe visible instantly, and all child nodes will immediately be able to\nbroadcast proof of the double spend to parent chain nodes so they do not\nmine on those blocks. This effectively means children can inherit a level\nof security from their parents without the same PoW difficulty.\n>\n> There are so many conflicting visions for how to scale Bitcoin. Angel\nallows the free market to decide which approaches are successful, and for\ncomplementary blockchains with different use cases, such as privacy, high\ntransaction volume, and Turing completeness to more seamlessly exist\nalongside each other, using Bitcoin as the standard medium of exchange.\n>\n> I wrote this as a TLDR summary for a (still evolving) idea I had on the\nbest approach to scale Bitcoin infinitely. I've written more of my thoughts\non the idea at\nhttps://seebitcoin.com/2016/09/introducing-buzz-a-turing-complete-concept-for-scaling-bitcoin-to-infinity-and-beyond/\n>\n> Does anybody think this would be a better, more efficient way of\nimplementing sidechains? It allows infinite scaling, and standardisation\nallows better pooling of resources.\n\nI've got a similar idea since quite a while back, but I've never really\nwritten it down in full. Here one link:\n\nhttp://www.metzdowd.com/pipermail/cryptography/2015-January/024338.html\n\nSome thoughts on how to design it;\n\nThe basic idea is to compress the validation data maximally, and yet\nachieve Turing completeness for an arbitary number of interacting chains,\nor \"namespaces\".\n\nThe whole thing is checkpointed and uses Zero-knowledge proofs to enable\nsecure pruning, making it essentially a rolling blockchain with complete\npreservation of history. It grows approximately linearly with\nnon-deprecated state.\n\nThis latest checkpoint's header + the following headers and accompanying\nZero-knowledge proofs would together act as the root for the system.\n\nHaving that is all you would need to confirm that any particular piece of\ndata from the blockchain is correct, given that it comes with enough\nmetadata to trace it all the way to the root. (Merkle tree hashes, ZKP:s,\netc).\n\nEvery chain would be registered under a unique name (the root chain would\nessentially just deal with registering chain names + their rules), and\nwould define its own external API towards other chains, and it would define\nits own rules for how its data can be updated and when. Every single\ninteraction with a chain is done by an atomic program (transaction), and\nall sets of validated changes must be conflict-free (especially across\nchains). Everything would practically be composed of a hierarchy of\ninteracting programs.\n\nEvery set of programs (transactions) can be transformed into a \"diff\" on\nthe blockchain state plus an accompanying Zero-knowledge proof. The proofs\ncan even be chained, such that groups of users of one chain can create a\nproof for their own changes, submit it to some chain coordinator who does\nanother compressing merge and proof generation, to then send it to the\nminers who merges the collective changes for all chains and generates a\nproof for the root.\n\nObviously that validation can get inefficient if many chains interact, as\nyou can't simply just look for conflicting UTXO:s in programs (unless the\nchain designers are *really* smart with their conflict resolution\nmechanisms). Either you have to use programmatic locking, very slow block\nrates or chose to not guarantee that any particular action has succeeded\n(essentially turning validated programs (transactions) into *requests* to\nthe API up towards the root, to eventually be resolved later with responses\npropagated back down, instead of having them be direct changes to the\nstate).\n\nThe latter option requires a lot more interaction by the client to get the\nintended behavior in many circumstances. The first two can both kill\nperformance (nobody wants small programs with a few round-trips to take a\nweek to execute).\n\nI really do hope it can be resolved effectively. I'm guessing some serious\nrestrictions on the API:s would be necessary. You would want most programs\nto be provably independent (such as not accessing the same resources) to be\nable to easily just create a small checkpoint of the global state and\ngenerate a proof for it. Programs simultaneously accessing resources that\ndon't guarantee commutativity for all actions would likely be to be rate\nlimited.\n\nBest case scenario: some genius manages to create the equivalent of\nLightning Network (with in-chain arbitration authority assigned to chosen\nservers in the chain definitions, and cross-chain negotiation between those\nauthorities when programs use the API) for processing the programs in near\nreal-time, and quickly settling on what changes to commit to the root.\nPrograms would practically need to be designed to be networked\n(multi-stage) so that the servers can let them negotiate over their API:s\nacross all chains, until the server has a complete set of changes without\nconflicts to commit to the root.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161012/303bc6d5/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Could a sidechain protocol create an addressable \"Internet of Blockchains\" and facilitate scaling?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Natanael",
                "John Hardy"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 11223
        }
    },
    {
        "title": "[bitcoin-dev] Defensive Patent License Offer Notice",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2016-10-13T08:51:17",
                "message_text_only": "Also published at https://petertodd.org/2016/defensive-patent-license-offer,\nand Bitcoin txid b4bf94f5c457d080924aa163106d423670373cfe3b10f8ec00742c2234b01b72\n\n    -----BEGIN PGP SIGNED MESSAGE-----\n    Hash: SHA256\n\n    I, Peter Todd, hereby declare myself and all technology companies that I\n    control as \"Defensive\" by committing to offer a Defensive Patent License,\n    version 1.1, for any of my patents either existing or future, to any DPL User.\n    Neither I nor any companies that I control have any patents at this time.\n\n    My contact address is pete at petertodd.org\n\n    -----BEGIN PGP SIGNATURE-----\n\n    iQEcBAEBCAAGBQJX/t11AAoJEGOZARBE6K+yR00H/0xp3oO7FiMvM4pjfoHZPPOa\n    m3KjT4RSbFQLa9uniz0u/9bkc5I70CggkY3jtNLtDMbMBTwcMP61ABsvx+5y2gGD\n    zE6VZ9DPcHVg/Eup6WSBlQO3HQKuFVz7vXSMuaidG7A+fpkU71SjDpB4M6hdvWnS\n    +L9XBQ1GtQe0lSM73s4mld/IvB1giwPN1bOheQ9koYcQjj+B8PWyt2gIUwctxyvA\n    7bC+KtCQT4RJPsQHbHx569CDkyIi3dNt0rTjCo5bOeUKrJF7eA3YktYdTJefZ+Rf\n    00dbRZMslrg3dW9VWECfC0xC/kn+heStJ7WqJJKqYWo4apm6IiKPZxlwIcVscF0=\n    =xrPk\n    -----END PGP SIGNATURE-----\n\n# Notes\n\n* On the advice of my lawyer, I'm currently offering only a specific version of\n  the DPL. I probably will offer licenses under subsequent versions in the\n  future, but I'd prefer to see how the DPL evolves and whether or not the\n  license stewards behind it prove trustworthy before committing to doing so.\n\n* The language \"all technology companies I control\" is there to avoid any\n  complications with non-technology companies that I may control in the future,\n  e.g. family real-estate holding companies, and the non-profit caving group\n  I'm a part of. To my knowledge, I only control one company as of writing, the\n  numbered company I do all my consulting through; I consider that company a\n  \"technology company\", and thus the above offer applies to it.\n\n* Equally, if by some stroke of luck I do end up in control of any other\n  technology companies - maybe Bill Gate's blockchain smart-contract will\n  mysteriously gives me control of Microsoft - then the above offer will apply.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161013/a7fc960f/attachment.sig>"
            },
            {
                "author": "greg misiorek",
                "date": "2016-10-13T13:03:45",
                "message_text_only": "Interesting and thx for sharing what a DPL  is.\n\ngm\n________________________________\nFrom: Peter Todd via bitcoin-dev<mailto:bitcoin-dev at lists.linuxfoundation.org>\nSent: \u200e10/\u200e13/\u200e2016 4:51 AM\nTo: bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nCc: defensivepatent at gmail.com<mailto:defensivepatent at gmail.com>\nSubject: [bitcoin-dev] Defensive Patent License Offer Notice\n\nAlso published at https://petertodd.org/2016/defensive-patent-license-offer,\nand Bitcoin txid b4bf94f5c457d080924aa163106d423670373cfe3b10f8ec00742c2234b01b72\n\n    -----BEGIN PGP SIGNED MESSAGE-----\n    Hash: SHA256\n\n    I, Peter Todd, hereby declare myself and all technology companies that I\n    control as \"Defensive\" by committing to offer a Defensive Patent License,\n    version 1.1, for any of my patents either existing or future, to any DPL User.\n    Neither I nor any companies that I control have any patents at this time.\n\n    My contact address is pete at petertodd.org\n\n    -----BEGIN PGP SIGNATURE-----\n\n    iQEcBAEBCAAGBQJX/t11AAoJEGOZARBE6K+yR00H/0xp3oO7FiMvM4pjfoHZPPOa\n    m3KjT4RSbFQLa9uniz0u/9bkc5I70CggkY3jtNLtDMbMBTwcMP61ABsvx+5y2gGD\n    zE6VZ9DPcHVg/Eup6WSBlQO3HQKuFVz7vXSMuaidG7A+fpkU71SjDpB4M6hdvWnS\n    +L9XBQ1GtQe0lSM73s4mld/IvB1giwPN1bOheQ9koYcQjj+B8PWyt2gIUwctxyvA\n    7bC+KtCQT4RJPsQHbHx569CDkyIi3dNt0rTjCo5bOeUKrJF7eA3YktYdTJefZ+Rf\n    00dbRZMslrg3dW9VWECfC0xC/kn+heStJ7WqJJKqYWo4apm6IiKPZxlwIcVscF0=\n    =xrPk\n    -----END PGP SIGNATURE-----\n\n# Notes\n\n* On the advice of my lawyer, I'm currently offering only a specific version of\n  the DPL. I probably will offer licenses under subsequent versions in the\n  future, but I'd prefer to see how the DPL evolves and whether or not the\n  license stewards behind it prove trustworthy before committing to doing so.\n\n* The language \"all technology companies I control\" is there to avoid any\n  complications with non-technology companies that I may control in the future,\n  e.g. family real-estate holding companies, and the non-profit caving group\n  I'm a part of. To my knowledge, I only control one company as of writing, the\n  numbered company I do all my consulting through; I consider that company a\n  \"technology company\", and thus the above offer applies to it.\n\n* Equally, if by some stroke of luck I do end up in control of any other\n  technology companies - maybe Bill Gate's blockchain smart-contract will\n  mysteriously gives me control of Microsoft - then the above offer will apply.\n\n--\nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161013/ecf32a56/attachment.html>\n-------------- next part --------------\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Defensive Patent License Offer Notice",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "greg misiorek",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5349
        }
    },
    {
        "title": "[bitcoin-dev] DPL is not only not enough, but brings unfounded confidence to Bitcoin users",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-14T10:38:07",
                "message_text_only": "I read the DPL v1.1 and I find it dangerous for Bitcoin users. Current\nusers may be confident they are protected but in fact they are not, as the\nfuture generations of users can be attacked, making Bitcoin technology\nfully proprietary and less valuable.\n\nIf you read the DPL v1.1 you will see that companies that join DPL can\nenforce their patents against anyone who has chosen not to join the DPL.\n(http://defensivepatentlicense.org/content/defensive-patent-license)\n\nSo basically most users of Bitcoin could be currently under threat of being\nsued by Bitcoin companies and individuals that joined DPL in the same way\nthey might be under threat by the remaining companies. And even if they\njoined DPL, they may be asked to pay royalties for the use of the\ninventions prior joining DPL.\n\nDPL changes nothing for most individuals that cannot and will not hire\npatent attorneys to advise them on what the DPL benefits are and what\nrights they are resigning. Remember that patten attorneys fees may be\nprohibitive for individuals in under-developed countries.\n\nAlso DPL is revocable by the signers (with only a 180-day notice), so if\nBitcoin Core ends up using ANY DPL covered patent, the company owning the\npatent can later force all new Bitcoin users to pay royalties.\n\nBecause Bitcoin user base grows all the time with new individuals, the sole\nexistence of DPL licensed patents in Bitcoin represents a danger to Bitcoin\nfuture almost the same as the existence of non-DPL license patents.\n\nIf you're publishing all your ideas and code (public disclosure), you\ncannot later go and file a patent in most of the world except the US, where\nyou have a 1 year grace period. So we need to do something specific to\nprevent the publishers filing a US patent.\nWhat we need much more than DPL, we need that every BIP and proposal to the\nBitcoin mailing list contains a note that grants all Bitcoin users a\nworldwide, royalty-free, no-charge, non-exclusive, irrevocable license for\nthe content of the e-mail or BIP.\n\nI'm not a lawyer and this is not an advise of any kind. Please check\nyourself the DPL v1.1 and get your own idea. I'm speaking on behalf of\nmyself, and not any company.\n(http://defensivepatentlicense.org/content/defensive-patent-license)\n\nBest regards,\n Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/095eb988/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-14T10:57:57",
                "message_text_only": "On Fri, Oct 14, 2016 at 07:38:07AM -0300, Sergio Demian Lerner via bitcoin-dev wrote:\n> I read the DPL v1.1 and I find it dangerous for Bitcoin users. Current\n> users may be confident they are protected but in fact they are not, as the\n> future generations of users can be attacked, making Bitcoin technology\n> fully proprietary and less valuable.\n\nGlad to hear you're taking a conservative approach.\n\nSo I assume Rootstock is going to do something stronger then, like\nBlockstream's DPL + binding patent pledge to only use patents defensively?\n\n    https://www.blockstream.com/about/patent_pledge/\n\nBecause if not, the DPL is still better than the status quo.\n\n> If you read the DPL v1.1 you will see that companies that join DPL can\n> enforce their patents against anyone who has chosen not to join the DPL.\n> (http://defensivepatentlicense.org/content/defensive-patent-license)\n> \n> So basically most users of Bitcoin could be currently under threat of being\n> sued by Bitcoin companies and individuals that joined DPL in the same way\n> they might be under threat by the remaining companies. And even if they\n> joined DPL, they may be asked to pay royalties for the use of the\n> inventions prior joining DPL.\n> \n> DPL changes nothing for most individuals that cannot and will not hire\n> patent attorneys to advise them on what the DPL benefits are and what\n> rights they are resigning. Remember that patten attorneys fees may be\n> prohibitive for individuals in under-developed countries.\n> \n> Also DPL is revocable by the signers (with only a 180-day notice), so if\n> Bitcoin Core ends up using ANY DPL covered patent, the company owning the\n> patent can later force all new Bitcoin users to pay royalties.\n\nIndeed. However, you're also free to adopt the DPL irrevocably by additionally\nstating that you will never invoke that 180-day notice provision (or more\nhumorously, make it a 100 year notice period to ensure any patents expire!).\n\nIf you're concerned about this problem, I'd suggest that Rootstock do exactly\nthat.\n\n> Because Bitcoin user base grows all the time with new individuals, the sole\n> existence of DPL licensed patents in Bitcoin represents a danger to Bitcoin\n> future almost the same as the existence of non-DPL license patents.\n\nTo be clear, modulo the revocability provision, it's a danger mainly to those\nwho are unwilling to adopt the DPL themselves, perhaps because they support\nsoftware patents.\n\n> If you're publishing all your ideas and code (public disclosure), you\n> cannot later go and file a patent in most of the world except the US, where\n> you have a 1 year grace period. So we need to do something specific to\n> prevent the publishers filing a US patent.\n\nAgain, lets remember that you personally proposed a BIP[1] that had the effect\nof aiding your ASICBOOST patent[2] without disclosing that fact in your BIP nor\nyour pull-req[3]. The simple fact is we can't rely solely on voluntary\ndisclosure - your own behavior is a perfect example of why not.\n\n[1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n[2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n[3]: Extra nonce pull request: https://github.com/bitcoin/bitcoin/pull/5102\n\n> What we need much more than DPL, we need that every BIP and proposal to the\n> Bitcoin mailing list contains a note that grants all Bitcoin users a\n> worldwide, royalty-free, no-charge, non-exclusive, irrevocable license for\n> the content of the e-mail or BIP.\n\nA serious problem here is the definition of \"Bitcoin users\". Does Bitcoin\nClassic count? Bitcoin Unlimited? What if Bitcoin forks?\n\nBetter to grant _everyone_ a irrevocable license.\n\n\nAlong those lines, it'd be reasonable to consider changing the Bitcoin Core\nlicense to something like an Apache2/LGPL3 dual license to ensure the copyright\nlicense also has anti-patent protections.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/2ecedac8/attachment.sig>"
            },
            {
                "author": "Daniel Robinson",
                "date": "2016-10-14T11:51:01",
                "message_text_only": ">\n> Because if not, the DPL is still better than the status quo.\n\n\nAgreed. Also worth noting that it has a potential advantage over unilateral\npatent disarmament, analogous to the advantage of copyleft licenses over\nMIT/BSD: it provides an incentive (at least a theoretical one) for other\ncompanies to adopt it too.\n\nAs many people have proposed, the best option, though one that would\nrequire a lot of work, might be a dedicated Bitcoin-related defensive\npatent pool\u2014similar to Linux's Open Invention Network\u2014that could\nstrategically deploy patent licenses to incentivize cooperation and punish\naggressors.\n\nAlong those lines, it'd be reasonable to consider changing the Bitcoin\n> Core license to something like an Apache2/LGPL3 dual license to ensure the\n> copyright license also has anti-patent protections.\n\n\nI think Apache 2.0 would be a great license for Bitcoin Core. It not only\ncontains an explicit patent license grant (rather than MIT's implicit one),\nbut terminates that license if the licensee asserts a claim alleging that\nthe covered work infringes a patent. That might be an effective deterrent\nagainst bringing patent claims based on alleged infringement in Bitcoin\nCore. (I'm not sure I see a good reason to dual-license under the LGPL3,\nbut am curious to hear more.)\n\nIt would probably be feasible to upgrade to the Apache license for new\nreleases and contributions (leaving already-existing code and previous\nreleases under the MIT license\u2014so basically a copyright \"soft-fork\"). Has\nthis been discussed before? Are there any obstacles or objections?\n\n(These are my personal opinions, do not necessarily reflect the views of\nany company, and are definitely not legal advice.)\n\n\nOn Fri, Oct 14, 2016 at 3:58 AM Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Oct 14, 2016 at 07:38:07AM -0300, Sergio Demian Lerner via\n> bitcoin-dev wrote:\n> > I read the DPL v1.1 and I find it dangerous for Bitcoin users. Current\n> > users may be confident they are protected but in fact they are not, as\n> the\n> > future generations of users can be attacked, making Bitcoin technology\n> > fully proprietary and less valuable.\n>\n> Glad to hear you're taking a conservative approach.\n>\n> So I assume Rootstock is going to do something stronger then, like\n> Blockstream's DPL + binding patent pledge to only use patents defensively?\n>\n>     https://www.blockstream.com/about/patent_pledge/\n>\n> Because if not, the DPL is still better than the status quo.\n>\n> > If you read the DPL v1.1 you will see that companies that join DPL can\n> > enforce their patents against anyone who has chosen not to join the DPL.\n> > (http://defensivepatentlicense.org/content/defensive-patent-license)\n> >\n> > So basically most users of Bitcoin could be currently under threat of\n> being\n> > sued by Bitcoin companies and individuals that joined DPL in the same way\n> > they might be under threat by the remaining companies. And even if they\n> > joined DPL, they may be asked to pay royalties for the use of the\n> > inventions prior joining DPL.\n> >\n> > DPL changes nothing for most individuals that cannot and will not hire\n> > patent attorneys to advise them on what the DPL benefits are and what\n> > rights they are resigning. Remember that patten attorneys fees may be\n> > prohibitive for individuals in under-developed countries.\n> >\n> > Also DPL is revocable by the signers (with only a 180-day notice), so if\n> > Bitcoin Core ends up using ANY DPL covered patent, the company owning the\n> > patent can later force all new Bitcoin users to pay royalties.\n>\n> Indeed. However, you're also free to adopt the DPL irrevocably by\n> additionally\n> stating that you will never invoke that 180-day notice provision (or more\n> humorously, make it a 100 year notice period to ensure any patents\n> expire!).\n>\n> If you're concerned about this problem, I'd suggest that Rootstock do\n> exactly\n> that.\n>\n> > Because Bitcoin user base grows all the time with new individuals, the\n> sole\n> > existence of DPL licensed patents in Bitcoin represents a danger to\n> Bitcoin\n> > future almost the same as the existence of non-DPL license patents.\n>\n> To be clear, modulo the revocability provision, it's a danger mainly to\n> those\n> who are unwilling to adopt the DPL themselves, perhaps because they support\n> software patents.\n>\n> > If you're publishing all your ideas and code (public disclosure), you\n> > cannot later go and file a patent in most of the world except the US,\n> where\n> > you have a 1 year grace period. So we need to do something specific to\n> > prevent the publishers filing a US patent.\n>\n> Again, lets remember that you personally proposed a BIP[1] that had the\n> effect\n> of aiding your ASICBOOST patent[2] without disclosing that fact in your\n> BIP nor\n> your pull-req[3]. The simple fact is we can't rely solely on voluntary\n> disclosure - your own behavior is a perfect example of why not.\n>\n> [1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n> [2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n> [3]: Extra nonce pull request: https://github.com/bitcoin/bit\n> coin/pull/5102\n>\n> > What we need much more than DPL, we need that every BIP and proposal to\n> the\n> > Bitcoin mailing list contains a note that grants all Bitcoin users a\n> > worldwide, royalty-free, no-charge, non-exclusive, irrevocable license\n> for\n> > the content of the e-mail or BIP.\n>\n> A serious problem here is the definition of \"Bitcoin users\". Does Bitcoin\n> Classic count? Bitcoin Unlimited? What if Bitcoin forks?\n>\n> Better to grant _everyone_ a irrevocable license.\n>\n>\n> Along those lines, it'd be reasonable to consider changing the Bitcoin Core\n> license to something like an Apache2/LGPL3 dual license to ensure the\n> copyright\n> license also has anti-patent protections.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/df3faf83/attachment-0001.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-15T10:01:32",
                "message_text_only": "On Friday, 14 October 2016 04:51:01 CEST Daniel Robinson via bitcoin-dev \nwrote:\n> > Because if not, the DPL is still better than the status quo.\n> \n> Agreed. Also worth noting that it has a potential advantage over\n> unilateral patent disarmament, analogous to the advantage of copyleft\n> licenses over MIT/BSD: it provides an incentive (at least a theoretical\n> one) for other companies to adopt it too.\n\nThis is a very important point and a huge step forward in my opinion.\n\nThe downside of MIT/BSD licenses is that companies can take and not give \nback. It doesn't build a community and commonly-shared property. Copyleft \nallows people to take and embrace, but if they extend they have to give \nback. Which is fair, you build it on their stuff...\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-10-14T18:10:45",
                "message_text_only": "Oh God... here we go again..\n\n>\n> Again, lets remember that you personally proposed a BIP[1] that had the\n> effect\n> of aiding your ASICBOOST patent[2] without disclosing that fact in your\n> BIP nor\n> your pull-req[3].\n>\n> This is false. The first sentence of the BIP states: \"There are incentives\nfor miners to find cheap, non-standard ways to generate new work which are\nnot in the best interest of the protocol\".\n\nThe BIP actually PROTECTS the network from stealth Shared-Nonce mining and\nthe fact you rejected it made the Bitcoin network LESS secure because now\nwe just don't know at what extent it is in use.\n\nShared-nonce mining can be done with or without that BIP/pull-req.\n\nWe didn't disclose more in the BIP because it was not clear if shared-nonce\nmining (the fact that Bitcoin had a design flaw) would have a negative\naffect on Bitcoin price.\n\nASICBoost patent may be a patent that protects Bitcoiners from mining\ncentralization: ASICBoost is the only company that at this point showed\ninterest in licensing the technology. But I do not control ASICBoost nor\nthe patent so I cannot do anything about it.\n\nI propose we as a community do a crowdfund to try to license it from that\ncompany (or any other that wants to put theirs in the deal) and put all in\npublic domain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/e46d79fe/attachment.html>"
            },
            {
                "author": "Nick ODell",
                "date": "2016-10-14T19:01:13",
                "message_text_only": "Pledging to not use patents offensively defeats the point of owning patents.\nThe point of owning a patent is so that you can use it offensively, either to\nprevent competition, or get licensing fees.\n\nObtaining a patent for defense doesn't make sense. The litigants you need to\nworry about do not produce or make anything. Their 'product' is patent lawsuits.\n\nUnless you have a patent on using a mail-merge program to sue people, your\ndefensive patents are useless in that situation.\n\nOn Fri, Oct 14, 2016 at 4:57 AM, Peter Todd via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Fri, Oct 14, 2016 at 07:38:07AM -0300, Sergio Demian Lerner via bitcoin-dev wrote:\n>> I read the DPL v1.1 and I find it dangerous for Bitcoin users. Current\n>> users may be confident they are protected but in fact they are not, as the\n>> future generations of users can be attacked, making Bitcoin technology\n>> fully proprietary and less valuable.\n>\n> Glad to hear you're taking a conservative approach.\n>\n> So I assume Rootstock is going to do something stronger then, like\n> Blockstream's DPL + binding patent pledge to only use patents defensively?\n>\n>     https://www.blockstream.com/about/patent_pledge/\n>\n> Because if not, the DPL is still better than the status quo.\n>\n>> If you read the DPL v1.1 you will see that companies that join DPL can\n>> enforce their patents against anyone who has chosen not to join the DPL.\n>> (http://defensivepatentlicense.org/content/defensive-patent-license)\n>>\n>> So basically most users of Bitcoin could be currently under threat of being\n>> sued by Bitcoin companies and individuals that joined DPL in the same way\n>> they might be under threat by the remaining companies. And even if they\n>> joined DPL, they may be asked to pay royalties for the use of the\n>> inventions prior joining DPL.\n>>\n>> DPL changes nothing for most individuals that cannot and will not hire\n>> patent attorneys to advise them on what the DPL benefits are and what\n>> rights they are resigning. Remember that patten attorneys fees may be\n>> prohibitive for individuals in under-developed countries.\n>>\n>> Also DPL is revocable by the signers (with only a 180-day notice), so if\n>> Bitcoin Core ends up using ANY DPL covered patent, the company owning the\n>> patent can later force all new Bitcoin users to pay royalties.\n>\n> Indeed. However, you're also free to adopt the DPL irrevocably by additionally\n> stating that you will never invoke that 180-day notice provision (or more\n> humorously, make it a 100 year notice period to ensure any patents expire!).\n>\n> If you're concerned about this problem, I'd suggest that Rootstock do exactly\n> that.\n>\n>> Because Bitcoin user base grows all the time with new individuals, the sole\n>> existence of DPL licensed patents in Bitcoin represents a danger to Bitcoin\n>> future almost the same as the existence of non-DPL license patents.\n>\n> To be clear, modulo the revocability provision, it's a danger mainly to those\n> who are unwilling to adopt the DPL themselves, perhaps because they support\n> software patents.\n>\n>> If you're publishing all your ideas and code (public disclosure), you\n>> cannot later go and file a patent in most of the world except the US, where\n>> you have a 1 year grace period. So we need to do something specific to\n>> prevent the publishers filing a US patent.\n>\n> Again, lets remember that you personally proposed a BIP[1] that had the effect\n> of aiding your ASICBOOST patent[2] without disclosing that fact in your BIP nor\n> your pull-req[3]. The simple fact is we can't rely solely on voluntary\n> disclosure - your own behavior is a perfect example of why not.\n>\n> [1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n> [2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n> [3]: Extra nonce pull request: https://github.com/bitcoin/bitcoin/pull/5102\n>\n>> What we need much more than DPL, we need that every BIP and proposal to the\n>> Bitcoin mailing list contains a note that grants all Bitcoin users a\n>> worldwide, royalty-free, no-charge, non-exclusive, irrevocable license for\n>> the content of the e-mail or BIP.\n>\n> A serious problem here is the definition of \"Bitcoin users\". Does Bitcoin\n> Classic count? Bitcoin Unlimited? What if Bitcoin forks?\n>\n> Better to grant _everyone_ a irrevocable license.\n>\n>\n> Along those lines, it'd be reasonable to consider changing the Bitcoin Core\n> license to something like an Apache2/LGPL3 dual license to ensure the copyright\n> license also has anti-patent protections.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Daniel Robinson",
                "date": "2016-10-14T21:07:01",
                "message_text_only": "First, non-practicing entities are definitely a problem, but they're far\nfrom the only companies involved in software patent litigation. As you say\nyourself, one reason companies obtain patents is to \"prevent\ncompetition\"\u2014meaning they produce a competing product. Look at the\nbillion-dollar lawsuits in the smartphone patent wars.\n\n(Unless you're referring to \"patent privateers\" that assert claims and are\nonly indirectly sponsored and controlled by real tech companies. I don't\nthink the Defensive Patent License directly addresses that problem\u2014Section\n7.1 defines an \"affiliate\" relatively narrowly\u2014although the Apache 2.0\nlicense arguably does, with its broad definition of \"Legal Entity.\" I don't\nprofess to know anything about the reasoning behind the DPL's wording, and\nI may be missing something; maybe a future version of the DPL will close\nthat loophole if it becomes an actual problem.)\n\nSecond, as several people have noted on this list, patent applications\nunfortunately seem to be more effective than defensive publication at\ngetting prior art under the noses of the patent examiners. So obtaining a\npatent for defensive purposes makes it more difficult for others to obtain\npatents on the same subject matter.\n\n(Usual disclaimers apply. Nothing you read on bitcoin-dev is legal advice;\ndon't take legal advice from mailing lists; come on)\n\nOn Fri, Oct 14, 2016 at 12:01 PM Nick ODell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nPledging to not use patents offensively defeats the point of owning patents.\nThe point of owning a patent is so that you can use it offensively, either\nto\nprevent competition, or get licensing fees.\n\nObtaining a patent for defense doesn't make sense. The litigants you need to\nworry about do not produce or make anything. Their 'product' is patent\nlawsuits.\n\nUnless you have a patent on using a mail-merge program to sue people, your\ndefensive patents are useless in that situation.\n\nOn Fri, Oct 14, 2016 at 4:57 AM, Peter Todd via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Fri, Oct 14, 2016 at 07:38:07AM -0300, Sergio Demian Lerner via\nbitcoin-dev wrote:\n>> I read the DPL v1.1 and I find it dangerous for Bitcoin users. Current\n>> users may be confident they are protected but in fact they are not, as\nthe\n>> future generations of users can be attacked, making Bitcoin technology\n>> fully proprietary and less valuable.\n>\n> Glad to hear you're taking a conservative approach.\n>\n> So I assume Rootstock is going to do something stronger then, like\n> Blockstream's DPL + binding patent pledge to only use patents defensively?\n>\n>     https://www.blockstream.com/about/patent_pledge/\n>\n> Because if not, the DPL is still better than the status quo.\n>\n>> If you read the DPL v1.1 you will see that companies that join DPL can\n>> enforce their patents against anyone who has chosen not to join the DPL.\n>> (http://defensivepatentlicense.org/content/defensive-patent-license)\n>>\n>> So basically most users of Bitcoin could be currently under threat of\nbeing\n>> sued by Bitcoin companies and individuals that joined DPL in the same way\n>> they might be under threat by the remaining companies. And even if they\n>> joined DPL, they may be asked to pay royalties for the use of the\n>> inventions prior joining DPL.\n>>\n>> DPL changes nothing for most individuals that cannot and will not hire\n>> patent attorneys to advise them on what the DPL benefits are and what\n>> rights they are resigning. Remember that patten attorneys fees may be\n>> prohibitive for individuals in under-developed countries.\n>>\n>> Also DPL is revocable by the signers (with only a 180-day notice), so if\n>> Bitcoin Core ends up using ANY DPL covered patent, the company owning the\n>> patent can later force all new Bitcoin users to pay royalties.\n>\n> Indeed. However, you're also free to adopt the DPL irrevocably by\nadditionally\n> stating that you will never invoke that 180-day notice provision (or more\n> humorously, make it a 100 year notice period to ensure any patents\nexpire!).\n>\n> If you're concerned about this problem, I'd suggest that Rootstock do\nexactly\n> that.\n>\n>> Because Bitcoin user base grows all the time with new individuals, the\nsole\n>> existence of DPL licensed patents in Bitcoin represents a danger to\nBitcoin\n>> future almost the same as the existence of non-DPL license patents.\n>\n> To be clear, modulo the revocability provision, it's a danger mainly to\nthose\n> who are unwilling to adopt the DPL themselves, perhaps because they\nsupport\n> software patents.\n>\n>> If you're publishing all your ideas and code (public disclosure), you\n>> cannot later go and file a patent in most of the world except the US,\nwhere\n>> you have a 1 year grace period. So we need to do something specific to\n>> prevent the publishers filing a US patent.\n>\n> Again, lets remember that you personally proposed a BIP[1] that had the\neffect\n> of aiding your ASICBOOST patent[2] without disclosing that fact in your\nBIP nor\n> your pull-req[3]. The simple fact is we can't rely solely on voluntary\n> disclosure - your own behavior is a perfect example of why not.\n>\n> [1]: BIP: https://github.com/BlockheaderNonce2/bitcoin/wiki\n> [2]: ASICBOOST PATENT https://www.google.com/patents/WO2015077378A1?cl=en\n> [3]: Extra nonce pull request:\nhttps://github.com/bitcoin/bitcoin/pull/5102\n>\n>> What we need much more than DPL, we need that every BIP and proposal to\nthe\n>> Bitcoin mailing list contains a note that grants all Bitcoin users a\n>> worldwide, royalty-free, no-charge, non-exclusive, irrevocable license\nfor\n>> the content of the e-mail or BIP.\n>\n> A serious problem here is the definition of \"Bitcoin users\". Does Bitcoin\n> Classic count? Bitcoin Unlimited? What if Bitcoin forks?\n>\n> Better to grant _everyone_ a irrevocable license.\n>\n>\n> Along those lines, it'd be reasonable to consider changing the Bitcoin\nCore\n> license to something like an Apache2/LGPL3 dual license to ensure the\ncopyright\n> license also has anti-patent protections.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/7830fb7d/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-14T12:31:57",
                "message_text_only": "On Fri, Oct 14, 2016 at 04:51:01AM -0700, Daniel Robinson wrote:\n> >\n> > Because if not, the DPL is still better than the status quo.\n> \n> \n> Agreed. Also worth noting that it has a potential advantage over unilateral\n> patent disarmament, analogous to the advantage of copyleft licenses over\n> MIT/BSD: it provides an incentive (at least a theoretical one) for other\n> companies to adopt it too.\n\nAgreed. That's also one of the reasons (lesser) reasons why I didn't adopt a\npatent pledge like blockstream has done. Though frankly the main reason is I'm\nunlikely to be able to afford to get any patents anytime soon anyway, so it's\nall symbolic and I'd rather spend as little as possible on lawyers. :) Also, my\nstandard contract that I use with clients prohibits me from getting patents on\nwork I do (and imposes financial penalties on clients who in turn try to apply\nfor patents on work derived from mine).\n\n> As many people have proposed, the best option, though one that would\n> require a lot of work, might be a dedicated Bitcoin-related defensive\n> patent pool\u2014similar to Linux's Open Invention Network\u2014that could\n> strategically deploy patent licenses to incentivize cooperation and punish\n> aggressors.\n\nAgreed.\n\n> Along those lines, it'd be reasonable to consider changing the Bitcoin\n> > Core license to something like an Apache2/LGPL3 dual license to ensure the\n> > copyright license also has anti-patent protections.\n> \n> \n> I think Apache 2.0 would be a great license for Bitcoin Core. It not only\n> contains an explicit patent license grant (rather than MIT's implicit one),\n> but terminates that license if the licensee asserts a claim alleging that\n> the covered work infringes a patent. That might be an effective deterrent\n> against bringing patent claims based on alleged infringement in Bitcoin\n> Core.\n\nIndeed. For a codebase that is in large part both a reference implementation\nand the very definition of the Bitcoin protocol, we do want a permissive\nlicense to ensure that commercial users are able to use the Bitcoin protocol.\nHowever there is no reason to extend that permissivity to allowing others to\nattempt to restrict others' rights to use the Bitcoin protocol via patents.\n\n> (I'm not sure I see a good reason to dual-license under the LGPL3,\n> but am curious to hear more.)\n\nAh, actually I think I misremembered: it'd be Apache2.0/LGPL_v2_ where a dual\nlicense would make sense; Apache2.0 is compatibile with (L)GPL3:\n\n    http://www.dwheeler.com/essays/floss-license-slide.html\n    https://www.apache.org/licenses/GPL-compatibility\n\n(L)GPLv2 doesn't have the patent protections that (L)GPLv3 does, so my\nsuggestion is wrong; Apache2.0 by itself is perfectly good.\n\n> It would probably be feasible to upgrade to the Apache license for new\n> releases and contributions (leaving already-existing code and previous\n> releases under the MIT license\u2014so basically a copyright \"soft-fork\"). Has\n> this been discussed before? Are there any obstacles or objections?\n\nYup, that'd be perfectly possible to do. Basically new contributions would be\nlicensed under the new, MIT-compatible, licenses. I did that myself with\npython-bitcoinlib, as part of the codebase was licensed MIT, and part LGPLv2 or\nlater; to comply with the latter I changed the license for all new work to\nLGPLv3 or later. Interestingly, this has lead to the Bitcoin Core unit tests\nusing an older version of python-bitcoinlib; kudo's goes to Suhas Daftuar for\ndilligently respecting the new license.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161014/079c7104/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "DPL is not only not enough, but brings unfounded confidence to Bitcoin users",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Nick ODell",
                "Tom Zander",
                "Daniel Robinson",
                "Peter Todd",
                "Sergio Demian Lerner"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 30423
        }
    },
    {
        "title": "[bitcoin-dev] BIP 2 revival and rework",
        "thread_messages": [
            {
                "author": "Marco Falke",
                "date": "2016-10-15T10:25:43",
                "message_text_only": "On Sat, Sep 24, 2016 at 11:41 AM, Tom via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I'd suggest saying that \"Share alike\" is required and \"Attribution\" is\n> optional.\n\nPlease note there is no CC license that requires SA and at the same\ntime has BY as an option.\n\nGenerally, I think CC0 is best suited as license for BIPs. If authors\nare scared that they won't get proper attribution, they can choose\nMIT/BSD or CC-BY. Other than that I don't think that more restrictive\nlicenses are suitable for BIPs. The BIP repo seems like the wrong\nplace to promote Open Access (e.g. by choosing a CC-BY-SA license).\nBIP 2 allows such licenses, but does not recommend them, which is\nfine.\n\nI think that BIP 2 in its current form (\nhttps://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki\n@6e47447b ) looks good and addressed the feedback which was\naccumulated last year. If there are no objections I'd suggest to move\nforward with BIP 2 in the next couple of days/weeks.\n\nMarco"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-15T11:00:35",
                "message_text_only": "On Saturday, 15 October 2016 12:11:02 CEST Marco Falke wrote:\n> On Sat, Sep 24, 2016 at 11:41 AM, Tom via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I'd suggest saying that \"Share alike\" is required and \"Attribution\" is\n> > optional.\n> \n> Please note there is no CC license that requires SA and at the same\n> time has BY as an option.\n> \n> Generally, I think CC0 is best suited as license for BIPs. If authors\n> are scared that they won't get proper attribution, they can choose\n> MIT/BSD or CC-BY.\n\nMy suggestion (sorry for not explaining it better) was that for BIPS to be a \npublic domain (aka CC0) and a CC-BY option and nothing else.\n\nI like you agree with that part, but I see you added two licenses.\nDo you have a good reason to add MIT/BSD to that list? Otherwise I think we \nagree.\nUsing code-specific licenses (including the GPL) for documentation and \nspecifically a specification is a really poor fit and doens't make much sense.\n\n> Other than that I don't think that more restrictive\n> licenses are suitable for BIPs. The BIP repo seems like the wrong\n> place to promote Open Access (e.g. by choosing a CC-BY-SA license).\n> BIP 2 allows such licenses, but does not recommend them, which is\n> fine.\n> \n> I think that BIP 2 in its current form (\n> https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki\n> @6e47447b ) \nWell, it has this sentence;\n\n> This BIP is dual-licensed under the Open Publication License and\n> BSD 2-clause license. \n\nWhich is a bit odd in light of the initial email from Luke that suggested we \ndrop the Open Publication License and we use the CC ones instead in addition \nto the public domain one.\n\nMarco:\n> looks good and addressed the feedback which was\n> accumulated last year. If there are no objections I'd suggest to move\n> forward with BIP 2 in the next couple of days/weeks.\n\nThats odd, you just stated you like the public domain (aka CC0) license, yet \nyou encourage the BIP2 that states we can no longer use public domain for \nBIPs... Did you read it?\nIt says;\n \u00abPublic domain is not universally recognised as a legitimate action, thus\n  it is inadvisable.\u00bb [1]\n\n\nAlso;\nThis list has not seen a lot of traffic, if you want to make sure people keep \nusing the BIP process, I think you need to reach out to the rest of the \ncommunity and make sure this has been heard and discussed.\nMoving forward the way it is now will likely deminish the importance of the \nBIP process.\n\nI strongly suggest people make very clear any and all changes that are \nproposed and defend each of them with reasons why you want to change things.\n\n\n1) if you write as a rationale \"In some jurisdictions, public domain is not \nrecognised as a legitimate legal action\" then you can at least name those \njurisdictions and explain how they *do* support things like GPL. Burden of \nproof is on the man who wants to change things.\nIt looks fishy when lawyers disagree. See the CC wikipedia page;\n \"public domain: cc0 Freeing content globally without restrictions\"\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Marco Falke",
                "date": "2016-10-15T12:12:09",
                "message_text_only": "On Sat, Oct 15, 2016 at 1:00 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> My suggestion (sorry for not explaining it better) was that for BIPS to be a\n> public domain (aka CC0) and a CC-BY option and nothing else.\n\nIndeed, we agree that BIPs should be licensed as permissive as\npossible. Still, I wonder why you chose otherwise with BIP 134.\n(Currently OPL and CC-BY-SA)\n\n> I like you agree with that part, but I see you added two licenses.\n> Do you have a good reason to add MIT/BSD to that list? Otherwise I think we\n> agree.\n\nLicenses that only require attribution are generally compatible with\neach other. I don't think we should pick one and only promote/endorse\nthis one. Let's just leave the decision to the BIP author.\n\n\n> Well, it has this sentence;\n>\n>> This BIP is dual-licensed under the Open Publication License and\n>> BSD 2-clause license.\n>\n> Which is a bit odd in light of the initial email from Luke that suggested we\n> drop the Open Publication License and we use the CC ones instead in addition\n> to the public domain one.\n\nI am pretty sure this is required to host the current text of BIP 2 in\nthe repo, as currently BIP 1 still applies and still requires for all\nBIPs either OPL or PD, which is one of the reasons I think we should\nmove forward with BIP 2 or amending BIP 1.\n\n\n> Marco:\n>> looks good and addressed the feedback which was\n>> accumulated last year. If there are no objections I'd suggest to move\n>> forward with BIP 2 in the next couple of days/weeks.\n>\n> Thats odd, you just stated you like the public domain (aka CC0) license, yet\n> you encourage the BIP2 that states we can no longer use public domain for\n> BIPs... Did you read it?\n> It says;\n>  \u00abPublic domain is not universally recognised as a legitimate action, thus\n>   it is inadvisable.\u00bb [1]\n\nBIP 2 does not forbid you to release your work under PD in\nlegislations where this is possible. None of the licenses mentioned in\nBIP 2 is exclusive, so you can choose as many options as you like. One\nof the goals of BIP 2 is to no longer allow PD as the only copyright\noption.\n\n\n>\n> Also;\n> This list has not seen a lot of traffic, if you want to make sure people keep\n> using the BIP process, I think you need to reach out to the rest of the\n> community and make sure this has been heard and discussed.\n> Moving forward the way it is now will likely deminish the importance of the\n> BIP process.\n>\n> I strongly suggest people make very clear any and all changes that are\n> proposed and defend each of them with reasons why you want to change things.\n>\n>\n> 1) if you write as a rationale \"In some jurisdictions, public domain is not\n> recognised as a legitimate legal action\" then you can at least name those\n> jurisdictions and explain how they *do* support things like GPL. Burden of\n> proof is on the man who wants to change things.\n> It looks fishy when lawyers disagree. See the CC wikipedia page;\n>  \"public domain: cc0 Freeing content globally without restrictions\"\n\nLuke is the BIP champion of BIP 2, so please cc him if you have\nsuggestions on how to improve the process of gathering community\nconsensus.\n\nMarco"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-15T14:21:41",
                "message_text_only": "On Saturday, 15 October 2016 14:12:09 CEST Marco Falke wrote:\n> On Sat, Oct 15, 2016 at 1:00 PM, Tom Zander via bitcoin-dev\n> \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > My suggestion (sorry for not explaining it better) was that for BIPS to\n> > be a public domain (aka CC0) and a CC-BY option and nothing else.\n> \n> Indeed, we agree that BIPs should be licensed as permissive as\n> possible. Still, I wonder why you chose otherwise with BIP 134.\n> (Currently OPL and CC-BY-SA)\n\nOPL was the only allowed option apart from CC0.\n\nI dual licensed it so future acceptance of the CC-BY-SA one may mean someone \ncan just remove the OPL from the BIP and no futher action or permission is \nneeded from all the authors.\n\n> BIP 2 does not forbid you to release your work under PD in\n> legislations where this is possible\n\nIt does, actually.\n\n> One\n> of the goals of BIP 2 is to no longer allow PD as the only copyright\n> option.\n\nThat's odd as PD was never the only copyright option.\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Marco Falke",
                "date": "2016-10-15T15:02:30",
                "message_text_only": "On Sat, Oct 15, 2016 at 4:21 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > My suggestion (sorry for not explaining it better) was that for BIPS to\n>> > be a public domain (aka CC0) and a CC-BY option and nothing else.\n>>\n>> Indeed, we agree that BIPs should be licensed as permissive as\n>> possible. Still, I wonder why you chose otherwise with BIP 134.\n>> (Currently OPL and CC-BY-SA)\n>\n> OPL was the only allowed option apart from CC0.\n\nI think you are misunderstanding what is allowed and what is required...\n\nBIP1: \"Each BIP must either be explicitly labelled as placed in the\npublic domain (see this BIP as an example) or licensed under the Open\nPublication License\"\n\nSo BIP1 *requires* PD or OPL but does not forbid other licenses. For\nexample, you are free to multi license OPL (and additionally: BSD,\nMIT, CC0, ...)\n\nBIP2: \"Each new BIP must identify at least one acceptable license in\nits preamble.\"\n\nSo BIP2 *requires* an acceptable license but does not forbid other\nchoices. For example, you are free to choose: BSD (and additionally:\nPD, CC-BY-SA, WTFPL, BEER, ...)\n\n\n>> BIP 2 does not forbid you to release your work under PD in\n>> legislations where this is possible\n>\n> It does, actually.\n\nHuh, I can't find it in the text I read. The text mentions \"not\nacceptable\", but I don't read that as \"forbidden\".\n\n>\n>> One\n>> of the goals of BIP 2 is to no longer allow PD as the only copyright\n>> option.\n>\n> That's odd as PD was never the only copyright option.\n\nRight. Though, up to now the majority of the BIP authors chose PD as\nthe only option.\n\nMarco"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T14:56:36",
                "message_text_only": "On Saturday, 15 October 2016 17:02:30 CEST Marco Falke wrote:\n> >> BIP 2 does not forbid you to release your work under PD in\n> >> legislations where this is possible\n> > \n> > It does, actually.\n> \n> Huh, I can't find it in the text I read. The text mentions \"not\n> acceptable\", but I don't read that as \"forbidden\".\n\nYou suggest that a person can dual license something under both CC-BY-SA as \nwell as under public domain.\nThat means you don't understand copyright,\n\nSee, all licenses are based on you having copyright. In contrast; public \ndomain is not a license, it means a certain text does not have copyright. \nPublic domain is the lack of copyright.\n\nOne text can not at the same time have copyright and not have copyright, \nmaking your assumption impossible.\n\nHence, with PD not explicitly being allowed, you can't use PD.\n\nPersonally I prefer copyleft licenses, so the lack of PD is fine with me. The \nlack of a good copyleft we can use in BIPs is what got me involved in this \ndiscussion in the first place.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-10-15T13:01:38",
                "message_text_only": "On Saturday, October 15, 2016 11:00:35 AM Tom Zander via bitcoin-dev wrote:\n> My suggestion (sorry for not explaining it better) was that for BIPS to be\n> a public domain (aka CC0) and a CC-BY option and nothing else.\n> \n> I like you agree with that part, but I see you added two licenses.\n> Do you have a good reason to add MIT/BSD to that list? Otherwise I think we\n> agree.\n\nBIPs often should include code.\n\n> Well, it has this sentence;\n> \n> > This BIP is dual-licensed under the Open Publication License and\n> > BSD 2-clause license.\n> \n> Which is a bit odd in light of the initial email from Luke that suggested\n> we drop the Open Publication License and we use the CC ones instead in\n> addition to the public domain one.\n\nThe \"real\" license in this case is the BSD 2-clause. However, BIP 1 only \nallows OPL and public domain, so BIP 2 is available under OPL as well so that \nit is acceptable before/until it activates also.\n\n> Thats odd, you just stated you like the public domain (aka CC0) license,\n> yet you encourage the BIP2 that states we can no longer use public domain\n> for BIPs... Did you read it?\n\nCC0 and public domain are two different things.\n\n> This list has not seen a lot of traffic, if you want to make sure people\n> keep using the BIP process, I think you need to reach out to the rest of\n> the community and make sure this has been heard and discussed.\n> Moving forward the way it is now will likely deminish the importance of the\n> BIP process.\n\nYes, you're right. I'll post to Lightning-dev and libbitcoin's list about\nBIP 2. If you're aware of any other Bitcoin development discussion groups, \ncould you please bring BIP 2 to their attention so it gets wider review?\n\n> 1) if you write as a rationale \"In some jurisdictions, public domain is not\n> recognised as a legitimate legal action\" then you can at least name those\n> jurisdictions and explain how they *do* support things like GPL. Burden of\n> proof is on the man who wants to change things.\n\nAs I understand it, presently France and Germany do not recognise public \ndomain as a possible status. GPL is merely a copyright license, so it should \nbe valid anywhere copyright laws exist.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "BIP 2 revival and rework",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr",
                "Tom Zander",
                "Marco Falke"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 13223
        }
    },
    {
        "title": "[bitcoin-dev] BIP 2: BIP process, revised (review please)",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2016-10-15T13:01:33",
                "message_text_only": "BIP 2 is currently believed to be a final draft of what will replace BIP 1 in \nspecifying how the entire BIP process works. This Process BIP will require \nrough consensus from the Bitcoin-dev mailing list to become Active (see BIP 2 \nfor the procedure, which I intend to use for its own activation due to absence \nof a clear process defined in BIP 1).\n\nTherefore, if you have any objections to the new BIP process as specified in \nBIP 2, please voice your concerns ASAP.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki\n\nThanks for your review,\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "BIP 2: BIP process, revised (review please)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 565
        }
    },
    {
        "title": "[bitcoin-dev] Some transcripts from Scaling Bitcoin 2016",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2016-10-15T18:34:13",
                "message_text_only": "Previously:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011862.html\n\nHere are some talks from Milan:\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/fungibility-overview/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/joinmarket/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/tumblebit/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/mimblewimble/\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/onion-routing-in-lightning/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/flare-routing-in-lightning/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/unlinkable-outsourced-channel-monitoring/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/lightning/\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/segwit-lessons-learned/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/schnorr-signatures/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/bip151-peer-encryption/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/coin-selection/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/covenants/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/on-the-security-and-performance-of-proof-of-work-blockchains/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/collective-signing/\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/fast-difficulty-adjustment/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/jute-braiding/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/client-side-validation/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/breaking-the-chain/\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/day-1-group-summaries/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/milan/day-2-group-summaries/\n\nThese are not always exact transcripts because I am typing while I am\nlistening, thus there are mistakes including typos and listening\nerrors, so please keep this discrepancy in mind between what's said\nand what's typed.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            }
        ],
        "thread_summary": {
            "title": "Some transcripts from Scaling Bitcoin 2016",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2030
        }
    },
    {
        "title": "[bitcoin-dev] Start time for BIP141 (segwit)",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2016-10-16T14:31:55",
                "message_text_only": "Hello all,\n\nWe're getting ready for Bitcoin Core's 0.13.1 release - the first one\nto include segregated witness (BIP 141, 143, 144, 145) for Bitcoin\nmainnet, after being extensively tested on testnet and in other\nsoftware. Following the BIP9 recommendation [1] to set the versionbits\nstart time a month in the future and discussion in the last IRC\nmeeting [2], I propose we set BIP 141's start time to November 15,\n2016, 0:00 UTC (unix time 1479168000).\n\nNote that this is just a lower bound on the time when the versionbits\nsignalling can begin. Activation on the network requires:\n(1) This date to pass\n(2) A full retarget window of 2016 blocks with 95% signalling the\nversion bit (bit 1 for BIP141)\n(3) A fallow period consisting of another 2016 blocks.\n\n  [1] https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n  [2] http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-10-13-19.04.log.html\n\nCheers,\n\n-- \nPieter"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T14:58:26",
                "message_text_only": "The fallow period sounds waaaay to short. I suggest 2 months at minimum \nsince anyone that wants to be safe needs to upgrade.\n\nAlso, please comment on why you won't use the much more safe and much \nsmaller Flexible Transactions.\n\nOn Sunday, 16 October 2016 16:31:55 CEST Pieter Wuille via bitcoin-dev \nwrote:\n> Hello all,\n> \n> We're getting ready for Bitcoin Core's 0.13.1 release - the first one\n> to include segregated witness (BIP 141, 143, 144, 145) for Bitcoin\n> mainnet, after being extensively tested on testnet and in other\n> software. Following the BIP9 recommendation [1] to set the versionbits\n> start time a month in the future and discussion in the last IRC\n> meeting [2], I propose we set BIP 141's start time to November 15,\n> 2016, 0:00 UTC (unix time 1479168000).\n> \n> Note that this is just a lower bound on the time when the versionbits\n> signalling can begin. Activation on the network requires:\n> (1) This date to pass\n> (2) A full retarget window of 2016 blocks with 95% signalling the\n> version bit (bit 1 for BIP141)\n> (3) A fallow period consisting of another 2016 blocks.\n> \n>   [1] https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>   [2]\n> http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.\n> 2016-10-13-19.04.log.html\n> \n> Cheers,\n\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Gavin Andresen",
                "date": "2016-10-16T16:35:58",
                "message_text_only": "On Sun, Oct 16, 2016 at 10:58 AM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The fallow period sounds waaaay to short. I suggest 2 months at minimum\n> since anyone that wants to be safe needs to upgrade.\n>\n\nI asked a lot of businesses and individuals how long it would take them to\nupgrade to a new release over the last year or two.\n\nNobody said it would take them more than two weeks.\n\nIf somebody is running their own validation code... then we should assume\nthey're sophisticated enough to figure out how to mitigate any risks\nassociated with segwit activation on their own.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/d7affd0c/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T16:42:26",
                "message_text_only": "On Sunday, 16 October 2016 12:35:58 CEST Gavin Andresen wrote:\n> On Sun, Oct 16, 2016 at 10:58 AM, Tom Zander via bitcoin-dev <\n> \n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The fallow period sounds waaaay to short. I suggest 2 months at minimum\n> > since anyone that wants to be safe needs to upgrade.\n> \n> I asked a lot of businesses and individuals how long it would take them to\n> upgrade to a new release over the last year or two.\n> \n> Nobody said it would take them more than two weeks.\n\nThe question you asked them was likely about the block size. The main \ndifference is that SPV users do not need to update after BIP109, but they do \nneed to have a new wallet when SegWit transactions are being sent to them.\n\nThis upgrade affects also end users, not just businesses etc.\n\nPersonally, I'd say that 2 months is even too fast.\n \n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Johnson Lau",
                "date": "2016-10-16T16:57:46",
                "message_text_only": "This is completely wrong. SPV wallets will work as normal without upgrade. Full nodes will only provide transactions to SPV in a format they understand, and SPV will accept the transaction since they are not doing any validation anyway. \n\nThe only reason an end user may want to upgrade is for lower transaction fee when they are sending transaction. If they don't upgrade, that means the fee is too low for them to care, which is a good news\n\n ---- On Mon, 17 Oct 2016 00:42:26 +0800 Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote ---- \n > On Sunday, 16 October 2016 12:35:58 CEST Gavin Andresen wrote: \n > > On Sun, Oct 16, 2016 at 10:58 AM, Tom Zander via bitcoin-dev < \n > >  \n > > bitcoin-dev at lists.linuxfoundation.org> wrote: \n > > > The fallow period sounds waaaay to short. I suggest 2 months at minimum \n > > > since anyone that wants to be safe needs to upgrade. \n > >  \n > > I asked a lot of businesses and individuals how long it would take them to \n > > upgrade to a new release over the last year or two. \n > >  \n > > Nobody said it would take them more than two weeks. \n >  \n > The question you asked them was likely about the block size. The main  \n > difference is that SPV users do not need to update after BIP109, but they do  \n > need to have a new wallet when SegWit transactions are being sent to them. \n >  \n > This upgrade affects also end users, not just businesses etc. \n >  \n > Personally, I'd say that 2 months is even too fast. \n >   \n > --  \n > Tom Zander \n > Blog: https://zander.github.io \n > Vlog: https://vimeo.com/channels/tomscryptochannel \n > _______________________________________________ \n > bitcoin-dev mailing list \n > bitcoin-dev at lists.linuxfoundation.org \n > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev \n >"
            },
            {
                "author": "Eric Voskuil",
                "date": "2016-10-16T16:42:49",
                "message_text_only": "If somebody is not \"running their own validation code\"  then they aren't actually using Bitcoin, so their ease in transition is irrelevant. For all they know they are accepting random numbers.\n\ne\n\n> On Oct 16, 2016, at 9:35 AM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> On Sun, Oct 16, 2016 at 10:58 AM, Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> The fallow period sounds waaaay to short. I suggest 2 months at minimum\n>> since anyone that wants to be safe needs to upgrade.\n> \n> I asked a lot of businesses and individuals how long it would take them to upgrade to a new release over the last year or two.\n> \n> Nobody said it would take them more than two weeks.\n> \n> If somebody is running their own validation code... then we should assume they're sophisticated enough to figure out how to mitigate any risks associated with segwit activation on their own.\n> \n> -- \n> --\n> Gavin Andresen\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/57ac3ff7/attachment-0001.html>"
            },
            {
                "author": "Douglas Roark",
                "date": "2016-10-16T16:47:40",
                "message_text_only": "On 2016/10/16 09:35, Gavin Andresen via bitcoin-dev wrote:\n> I asked a lot of businesses and individuals how long it would take them\n> to upgrade to a new release over the last year or two.\n> \n> Nobody said it would take them more than two weeks.\n> \n> If somebody is running their own validation code... then we should\n> assume they're sophisticated enough to figure out how to mitigate any\n> risks associated with segwit activation on their own.\n\nIn addition, there has been a page up for several months\n(https://bitcoincore.org/en/segwit_adoption/) that gauges whether or not\nwallets are ready for SegWit. Unfortunately, it appears that the page\nhasn't been updated since May. I do know that several wallets have\nfinished or are close to finishing their support, though.\n\nWould I want anyone to lose money due to faulty wallets? Of course not.\nBy the same token, devs have had almost a year to tinker with SegWit and\nmake sure the wallet isn't so poorly written that it'll flame out when\nSegWit comes along. It's not like this is some untested, mostly unknown\nfeature that's being slipped out at the last minute, unlike other\nfeatures I could name but won't. :)\n\n-- \n---\nDouglas Roark\nCryptocurrency, network security, travel, and art.\nhttps://onename.com/droark\njoroark at vt.edu\nPGP key ID: 26623924\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/f31664df/attachment.sig>"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T18:20:50",
                "message_text_only": "On Sunday, 16 October 2016 09:47:40 CEST Douglas Roark via bitcoin-dev \nwrote:\n> Would I want anyone to lose money due to faulty wallets? Of course not.\n> By the same token, devs have had almost a year to tinker with SegWit and\n> make sure the wallet isn't so poorly written that it'll flame out when\n> SegWit comes along. It's not like this is some untested, mostly unknown\n> feature that's being slipped out at the last minute\n\nThere have been objections to the way that SegWit has been implemented for a \nlong time, some wallets are taking a \"wait and see\" approach.  If you look \nat the page you linked[1], that is a very very sad state of affairs. The \nvast majority is not ready.  Would be interesting to get a more up-to-date \nview.\nWallets probably won't want to invest resources adding support for a feature \nthat will never be activated. The fact that we have a much safer alternative \nin the form of Flexible Transactions may mean it will not get activated. We \nwon't know until its actually locked in.\nWallets may not act until its actually locked in either. And I think we \nshould respect that.\n\nEven if all wallets support it (and thats a big if), they need to be rolled \nout and people need to actually download those updates.\nThis takes time, 2 months after the lock-in of SegWit would be the minimum \nsafe time for people to actually upgrade.\n\n1) https://bitcoincore.org/en/segwit_adoption/\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-10-16T18:41:34",
                "message_text_only": "As has been mentioned there have been a lot of time to upgrade\nsoftware to support segwit. Furthermore, since it is a softfork, there\nwill be plenty of time after activation too for those taking a \"wait\nand see\" approach.\n\nYou keep insisting on \"2 months after activation\", but that's not how\nBIP9 works. We could at most change BIP9's initial date, but if those\nwho haven't started to work on supporting segwit will keep waiting for\nactivation, then changing the initial date won't be of any help to\nthem can only delay those who are ready and waiting.\n\nThe new features are not a requirement after activation. And although\nit may take some time after activation for the new features to really\nget to the users, that's just a fact of life that won't change by\nchanging the initial BIP9 date.\n\n\nOn Sun, Oct 16, 2016 at 8:20 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Sunday, 16 October 2016 09:47:40 CEST Douglas Roark via bitcoin-dev\n> wrote:\n>> Would I want anyone to lose money due to faulty wallets? Of course not.\n>> By the same token, devs have had almost a year to tinker with SegWit and\n>> make sure the wallet isn't so poorly written that it'll flame out when\n>> SegWit comes along. It's not like this is some untested, mostly unknown\n>> feature that's being slipped out at the last minute\n>\n> There have been objections to the way that SegWit has been implemented for a\n> long time, some wallets are taking a \"wait and see\" approach.  If you look\n> at the page you linked[1], that is a very very sad state of affairs. The\n> vast majority is not ready.  Would be interesting to get a more up-to-date\n> view.\n> Wallets probably won't want to invest resources adding support for a feature\n> that will never be activated. The fact that we have a much safer alternative\n> in the form of Flexible Transactions may mean it will not get activated. We\n> won't know until its actually locked in.\n> Wallets may not act until its actually locked in either. And I think we\n> should respect that.\n>\n> Even if all wallets support it (and thats a big if), they need to be rolled\n> out and people need to actually download those updates.\n> This takes time, 2 months after the lock-in of SegWit would be the minimum\n> safe time for people to actually upgrade.\n>\n> 1) https://bitcoincore.org/en/segwit_adoption/\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T18:54:04",
                "message_text_only": "On Sunday, 16 October 2016 20:41:34 CEST Jorge Tim\u00f3n wrote:\n> You keep insisting on \"2 months after activation\", but that's not how\n> BIP9 works. We could at most change BIP9's initial date, but if those\n> who haven't started to work on supporting segwit will keep waiting for\n> activation, then changing the initial date won't be of any help to\n> them can only delay those who are ready and waiting.\n\nThen don't use BIP9...\n\nHonestly, if the reason for the too-short-for-safety timespan is that you \nwant to use BIP9, then please take a step back and realize that SegWit is a \ncontriversial soft-fork that needs to be deployed in a way that is extra \nsafe because you can't roll the feature back a week after deployment.\nAll transactions that were made in the mean time turn into everyone-can-\nspent transactions.\n\nI stand by the minimum of 2 months. There is no reason to use BIP9 as it was \ncoded in an older client. That is an excuse that I don't buy.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Johnson Lau",
                "date": "2016-10-16T19:11:23",
                "message_text_only": "---- On Mon, 17 Oct 2016 02:54:04 +0800 Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote ---- \n\n > Honestly, if the reason for the too-short-for-safety timespan is that you  \n > want to use BIP9, then please take a step back and realize that SegWit is a  \n > contriversial soft-fork that needs to be deployed in a way that is extra  \n > safe because you can't roll the feature back a week after deployment. \n > All transactions that were made in the mean time turn into everyone-can- \n > spent transactions. \n\nNo one should use, nor anyone is advised to use, segwit transactions before it is fully activated. Having 2 months or 2 weeks of grace period makes totally no difference in this regard. If anyone tried to use segwit tx during your proposed 2 months grace period, all those txs were still everyone-can-spent.\n\nAll you are advocating is just stalling the process with no improvement in security.\n\n >  \n > I stand by the minimum of 2 months. There is no reason to use BIP9 as it was  \n > coded in an older client. That is an excuse that I don't buy. \n > --  \n > Tom Zander \n > Blog: https://zander.github.io \n > Vlog: https://vimeo.com/channels/tomscryptochannel \n > _______________________________________________ \n > bitcoin-dev mailing list \n > bitcoin-dev at lists.linuxfoundation.org \n > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev \n >"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T20:08:29",
                "message_text_only": "On Monday, 17 October 2016 03:11:23 CEST Johnson Lau wrote:\n> > Honestly, if the reason for the too-short-for-safety timespan is that\n> > you\n> > want to use BIP9, then please take a step back and realize that SegWit\n> > is a contriversial soft-fork that needs to be deployed in a way that is\n> > extra safe because you can't roll the feature back a week after\n> > deployment. All transactions that were made in the mean time turn into\n> > everyone-can- spent transactions.\n> \n> No one should use, nor anyone is advised to use, segwit transactions\n> before it is fully activated. \n\nNaturally, I fully agree.\n\nIt seems I choose the wrong words, let me rephrase;\n\nYou can't roll the SegWit back a week after people are allowed to send \nsegwit transactions (lock-in + fallow period). All transactions that were \nmade in the mean time turn into everyone-can- spent transactions.\n\nBecause the network as a whole and any implementation is unable to roll back \nin an environment where SegWit is a contriversial soft-fork, it is super \nimportant to make sure that it is properly supported by all miners. This \ntakes time and the risk you take by pushing this is that actual real people \nloose actual real money because of the issue I outlined inthe previous \nparagraph.\n\n\n> Having 2 months or 2 weeks of grace period\n> makes totally no difference in this regard. If anyone tried to use segwit\n> tx during your proposed 2 months grace period, all those txs were still\n> everyone-can-spent.\n> \n> All you are advocating is just stalling the process with no improvement in\n> security.\n\nI hope the above explains the actual security issue better.\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Johnson Lau",
                "date": "2016-10-17T03:46:11",
                "message_text_only": "---- On Mon, 17 Oct 2016 04:08:29 +0800 Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote ---- \n > On Monday, 17 October 2016 03:11:23 CEST Johnson Lau wrote: \n > > > Honestly, if the reason for the too-short-for-safety timespan is that \n > > > you \n > > > want to use BIP9, then please take a step back and realize that SegWit \n > > > is a contriversial soft-fork that needs to be deployed in a way that is \n > > > extra safe because you can't roll the feature back a week after \n > > > deployment. All transactions that were made in the mean time turn into \n > > > everyone-can- spent transactions. \n > >  \n > > No one should use, nor anyone is advised to use, segwit transactions \n > > before it is fully activated.  \n >  \n > Naturally, I fully agree. \n >  \n > It seems I choose the wrong words, let me rephrase; \n >  \n > You can't roll the SegWit back a week after people are allowed to send  \n > segwit transactions (lock-in + fallow period). All transactions that were  \n > made in the mean time turn into everyone-can- spent transactions. \n > \n > Because the network as a whole and any implementation is unable to roll back  \n > in an environment where SegWit is a contriversial soft-fork, it is super  \n > important to make sure that it is properly supported by all miners. This  \n > takes time and the risk you take by pushing this is that actual real people  \n > loose actual real money because of the issue I outlined inthe previous  \n > paragraph. \n \nIt would only happen if a large proportion of miners are false-signalling, like how BU did with BIP109 and forked your Classic away on testnet\n\nBut this is a egg-and-chicken problem and extending the grace period would not have any improvement. Until the rules are fully activated, it is totally impossible to tell if some miners are false signalling. The only method to prevent it, as usual, is the majority of miners will orphan the blocks of malicious miners. Like in the last year, some miners did not correctly implement BIP66 and got punished by losing many blocks.\n\nIf your are suggesting >51% of miners may false-signal (like in the BIP109 case), we already have a much bigger problem.\n\nIf people are really worrying about that, I would advise them not to use segwit extensively at the beginning, and wait for at least a week to see any sign of false signalling (which will be shown as invalid orphaned blocks). If the grace period was 2 weeks, they need to wait for 3 weeks; if the grace period was 2 months, they need to wait for 2 months and a week. Pre-activation consensus-imposed grace period could never replace post-activation self-imposed observation period"
            },
            {
                "author": "Douglas Roark",
                "date": "2016-10-16T19:49:47",
                "message_text_only": "Before getting to my reply to Tom's message, I forgot to give my\nthoughts on the Nov. 15 date. I think it's a reasonable date. With\nvarious holidays coming up in the West, it's probably best to get the\nword out now so that work can progress before some people get sucked\ninto family obligations and such. A month gives a bit of time without\ndragging out the waiting game, IMO.\n\nNow then....\n\nOn 2016/10/16 11:20, Tom Zander via bitcoin-dev wrote:\n> There have been objections to the way that SegWit has been implemented for a \n> long time, some wallets are taking a \"wait and see\" approach.  If you look \n> at the page you linked[1], that is a very very sad state of affairs. The \n> vast majority is not ready.  Would be interesting to get a more up-to-date \n> view.\n\nIt's not the website's fault if wallet devs aren't updating their\nstatuses. Besides, \"WIP\" can mean an awful lot of things. For example, I\nknow Armory made significant progress with SegWit support as part of\ntheir upcoming 0.95 release. I have full confidence they'll be ready\nrelatively soon. Other wallets may be ready. Other wallets may be stuck\nwhere they were in the spring. In any event, it's a free country. Unlike\nconsensus rules and such, it's trivial to move one's funds to a wallet\nthat fully supports SegWit if that's what one desires.\n\nIn addition, I was at the wallet workshop at Scaling Bitcoin last week.\nAn awful lot of things were on the board as potential discussion points.\nI think SegWit was mentioned but wasn't really discussed. I don't think\nFlexTrans was even mentioned (and it's off-topic anyway). Wallet devs\nare far more concerned about things like UI and standards for HW wallets\nthan they are about their ability to support SegWit. I think wallet devs\nare quite capable of making noise if they felt that SegWit was a bad\nfeature, or a difficult-to-support feature.\n\n> Wallets probably won't want to invest resources adding support for a feature \n> that will never be activated. The fact that we have a much safer alternative \n> in the form of Flexible Transactions may mean it will not get activated. We \n> won't know until its actually locked in.\n\nA lot of devs have already worked on SegWit support. This has been\ncovered. Even if they don't support SegWit, the wallets will probably\nwork just fine. (For awhile, Armory did crash when trying to read SegWit\ndata in Core's blockchain files. That problem was fixed, and it was\nprobably a rarity since very few wallets rely directly on Core.) As long\nas devs use testnet or regtest to iron out their kinks before hitting\nmainnet, I can't think of a single good reason to hold back SegWit\nsolely due to wallet support.\n\nAlso, once again, FlexTrans is off-topic. As others have said, you're\nbasically being stubborn at this point. If you insist on discussing\nFlexTrans, start another thread. It sounds like quite a few devs would\nbe more than happy to say a word or two about your proposal.\n\n-- \n---\nDouglas Roark\nCryptocurrency, network security, travel, and art.\nhttps://onename.com/droark\njoroark at vt.edu\nPGP key ID: 26623924\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/7c46263a/attachment.sig>"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T20:58:31",
                "message_text_only": "On Sunday, 16 October 2016 12:49:47 CEST Douglas Roark via bitcoin-dev \nwrote:\n> It's not the website's fault if wallet devs aren't updating their\n> statuses. Besides, \"WIP\" can mean an awful lot of things.\n\nAs I said, it would be nice to get an updated version so we can see more \nthan 20% readyness of wallets.\nThe wallet devs not caring enough to update the status should be a worrying \nsign, though.\n\n> A lot of devs have already worked on SegWit support. This has been\n> covered. Even if they don't support SegWit, the wallets will probably\n> work just fine. (For awhile, Armory did crash when trying to read SegWit\n\nSegWit is probably the most disruptive and most invasive change ever made to \nBitcoin. We have miners actively saying they don't like it and this makes it \na contriversial upgrade which means the network may split and other issues.\n\nYour \"wallets will probably work just fine\" comment is honestly not the \nanswer to make people put faith in the way that this is being vetted and \nchecked...\n\n> Also, once again, FlexTrans is off-topic. \n\nIts an alternative and brought up in that vain. Nothing more. Feel free to \nrespond to the BIP discussion (134) right on this list if you have any \nopinions on it. They will be on-topic there. No problems have been found so \nfar.\n\nLets get back to the topic. Having a longer fallow period is a simple way to \nbe safe.  Your comments make me even more scared that safety is not taken \ninto account the way it would.\n\nPeople are not even acknowledging the damage a contriversial soft fork of \nthe scope and magnitude of SegWit can have, and a simple request to extend \nthe fallow time for safety is really not a big deal.\nSegWit has been in development for 18 months or so, what is a couple of \nextra week??\n\nI would just like to ask people to take the safety of Bitcoin serious. This \ndiscussion and refusal to extend the safety period is not a good sign.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "gb",
                "date": "2016-10-16T21:03:52",
                "message_text_only": "It's controversial not contriversial.\n\nAnd it isn't controversial except among a small clique, which you seem\nto be the sole representative of here. It might be time to consider\nunsubscribing (again) if you don't seem to know when to shut up and the\nmoderators are letting you go on an inappropriate crusade here.\n\nOn Sun, 2016-10-16 at 22:58 +0200, Tom Zander via bitcoin-dev wrote:\n> On Sunday, 16 October 2016 12:49:47 CEST Douglas Roark via bitcoin-dev \n> wrote:\n> > It's not the website's fault if wallet devs aren't updating their\n> > statuses. Besides, \"WIP\" can mean an awful lot of things.\n> \n> As I said, it would be nice to get an updated version so we can see more \n> than 20% readyness of wallets.\n> The wallet devs not caring enough to update the status should be a worrying \n> sign, though.\n> \n> > A lot of devs have already worked on SegWit support. This has been\n> > covered. Even if they don't support SegWit, the wallets will probably\n> > work just fine. (For awhile, Armory did crash when trying to read SegWit\n> \n> SegWit is probably the most disruptive and most invasive change ever made to \n> Bitcoin. We have miners actively saying they don't like it and this makes it \n> a contriversial upgrade which means the network may split and other issues.\n> \n> Your \"wallets will probably work just fine\" comment is honestly not the \n> answer to make people put faith in the way that this is being vetted and \n> checked...\n> \n> > Also, once again, FlexTrans is off-topic. \n> \n> Its an alternative and brought up in that vain. Nothing more. Feel free to \n> respond to the BIP discussion (134) right on this list if you have any \n> opinions on it. They will be on-topic there. No problems have been found so \n> far.\n> \n> Lets get back to the topic. Having a longer fallow period is a simple way to \n> be safe.  Your comments make me even more scared that safety is not taken \n> into account the way it would.\n> \n> People are not even acknowledging the damage a contriversial soft fork of \n> the scope and magnitude of SegWit can have, and a simple request to extend \n> the fallow time for safety is really not a big deal.\n> SegWit has been in development for 18 months or so, what is a couple of \n> extra week??\n> \n> I would just like to ask people to take the safety of Bitcoin serious. This \n> discussion and refusal to extend the safety period is not a good sign."
            },
            {
                "author": "Marek Palatinus",
                "date": "2016-10-16T21:08:08",
                "message_text_only": "On Sun, Oct 16, 2016 at 10:58 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sunday, 16 October 2016 12:49:47 CEST Douglas Roark via bitcoin-dev\n> wrote:\n> > It's not the website's fault if wallet devs aren't updating their\n> > statuses. Besides, \"WIP\" can mean an awful lot of things.\n>\n> As I said, it would be nice to get an updated version so we can see more\n> than 20% readyness of wallets.\n> The wallet devs not caring enough to update the status should be a worrying\n> sign, though.\n>\n\nWIP for TREZOR means that we've made that hard part already (firwmare) so\nwe know it is feasible, yet we didn't spend enough time on finalizing all\nthe stack like our web wallet because we don't see any actual release date\nyet. Considering current battles on BU hashpower, we decided simply sit and\nwatch (I already have popocorn).\n\n\nSegWit is probably the most disruptive and most invasive change ever made to\n> Bitcoin. We have miners actively saying they don't like it and this makes\n> it\n> a contriversial upgrade which means the network may split and other issues.\n>\n>\nThere're also many wallets which are impatiently waiting for segwit to be\nreleased. Segwit is blessing for hardware wallets for many reasons. I\nactually think that rolling out Segwit will increase security, because it\nwill reduce huge complexity in hardware wallets as it is today.\n\nSlush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/93d827a9/attachment.html>"
            },
            {
                "author": "Andrew C",
                "date": "2016-10-16T21:19:37",
                "message_text_only": "On 10/16/2016 4:58 PM, Tom Zander via bitcoin-dev wrote:\n> Lets get back to the topic. Having a longer fallow period is a simple way to \n> be safe.  Your comments make me even more scared that safety is not taken \n> into account the way it would.\n\nCan you please explain how having a longer grace period makes it any\nsafer? Once the fork reaches the LOCKED_IN status, the fork will become\nactive after the period is over. How does having a longer grace period\nmake this any safer besides just adding more waiting before it goes\nactive? You said something about rolling back the changes. There is no\nmechanism for roll backs, and the whole point of the soft fork\nsignalling is such that there is no need to roll back anything because\nminers have signaled that they are supporting the fork."
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-17T11:17:39",
                "message_text_only": "On Sunday, 16 October 2016 17:19:37 CEST Andrew C wrote:\n> On 10/16/2016 4:58 PM, Tom Zander via bitcoin-dev wrote:\n> > Lets get back to the topic. Having a longer fallow period is a simple\n> > way to be safe.  Your comments make me even more scared that safety is\n> > not taken into account the way it would.\n> \n> Can you please explain how having a longer grace period makes it any\n> safer? Once the fork reaches the LOCKED_IN status, the fork will become\n> active after the period is over. How does having a longer grace period\n> make this any safer besides just adding more waiting before it goes\n> active? \n\nAs Marek wrote just minutes before your email came in; companies will not \nroll out their updates until it locks in. Peter Todd says the same thing.\nSo your assumption that the lock-in time is the END of the upgrading is \nfalse. Thats only the case for miners.\n\nThe entire point here is that SegWit is much bigger than just full nodes \n(including miner).\nAn entire ecosystem of Bitconin will have a need to upgrade.\n\nI understand people saying that non-miners don't *need* to upgrade in order \nto avoid being kicked of the network, but truely, thats a bogus argument.\n\nPeople want to actually participate in Bitcoin and that means they need to \nunderstand all of it. Not just see anyone-can-spend transactions.\nI think its rather odd to think that developers on this list can decide\nthe risk profile that Bitcoin using companies or individuals should have.\n\n\n> You said something about rolling back the changes. There is no\n> mechanism for roll backs, and the whole point of the soft fork\n> signalling is such that there is no need to roll back anything because\n> miners have signaled that they are supporting the fork.\n\nThere are a bunch of really large assumptions in there that I disagree with.\nFirst of all, miners running the latest software doesn't mean the software \nis free from flaws. Everyone makes mistakes. People that see a way to abuse \nthe system may have found things and are not reporting it because they want \nto abuse the flaw for their own gains. Which is exactly what happened with \nEtherium.\n\nThe amount of code and the amount of changes in SegWit makes this a very \ndangerous change in (of?) Bitcoin. I counted 10 core concepts in Bitcoin \nbeing changed with it. We don't yet know how they will interact. We can\u2019t.\n\nYou are asking people to create everyone-can-spend transactions that would \nmean a loss of funds to everyone that used it if we do find a major flaw and \nneed to rollback.\n\nThe gamble is rather uncomforable to many...\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-17T13:09:27",
                "message_text_only": "On Mon, Oct 17, 2016 at 01:17:39PM +0200, Tom Zander via bitcoin-dev wrote:\n> On Sunday, 16 October 2016 17:19:37 CEST Andrew C wrote:\n> > On 10/16/2016 4:58 PM, Tom Zander via bitcoin-dev wrote:\n> > > Lets get back to the topic. Having a longer fallow period is a simple\n> > > way to be safe.  Your comments make me even more scared that safety is\n> > > not taken into account the way it would.\n> > \n> > Can you please explain how having a longer grace period makes it any\n> > safer? Once the fork reaches the LOCKED_IN status, the fork will become\n> > active after the period is over. How does having a longer grace period\n> > make this any safer besides just adding more waiting before it goes\n> > active? \n> \n> As Marek wrote just minutes before your email came in; companies will not \n> roll out their updates until it locks in. Peter Todd says the same thing.\n> So your assumption that the lock-in time is the END of the upgrading is \n> false. Thats only the case for miners.\n> \n> The entire point here is that SegWit is much bigger than just full nodes \n> (including miner).\n> An entire ecosystem of Bitconin will have a need to upgrade.\n> \n> I understand people saying that non-miners don't *need* to upgrade in order \n> to avoid being kicked of the network, but truely, thats a bogus argument.\n> \n> People want to actually participate in Bitcoin and that means they need to \n> understand all of it. Not just see anyone-can-spend transactions.\n> I think its rather odd to think that developers on this list can decide\n> the risk profile that Bitcoin using companies or individuals should have.\n\nPlease don't misleadingly reference/quote me.\n\nI made it quite clear in my last post that because segwit is a backwards\ncompatible soft-fork, the vast majority of code out there will not have to\nchange; my own OpenTimestamps being a good example. All I'll have to do to\nprepare for segwit is upgrade the (pruned) full nodes that the OpenTimestamps\nservers depend on to determine what's the most-work valid chain, and in the\nevent I was concerned about compatibility issues, I could easily run my\nexisting nodes behind updated segwit-supporting (pruned) nodes.\n\nLike most users, my OpenTimestamps code doesn't \"fully understand\" transactions\nat all - I rely on my full node to do that for me. What it does understand\nabout transactions and blocks remains the same in segwit. I can receive\ntransactions from segwit users with lite-client security without any action at\nall, and full-node security once I upgrade my full nodes (or run them behind\nupgraded nodes).\n\nYour proposed alternative to segwit - flexible transactions - has none of these\nbeneficial properties. And as Matt Corallo reported, it's no-where near ready\nfor deployment: three buffer overflows in 80 lines of code is a serious\nproblem.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161017/1cc41f27/attachment.sig>"
            },
            {
                "author": "Andrew C",
                "date": "2016-10-17T13:19:29",
                "message_text_only": "On 10/17/2016 7:17 AM, Tom Zander via bitcoin-dev wrote:\n> As Marek wrote just minutes before your email came in; companies will not \n> roll out their updates until it locks in. Peter Todd says the same thing.\n> So your assumption that the lock-in time is the END of the upgrading is \n> false. Thats only the case for miners.\nBut again, how does having a longer fallow period make this any safer?\nAs was mentioned before, a lot of the wallets listed as WIP have code\nready and tested, just not officially released, so not listed as ready.\nIt doesn't take 2 months to roll out a software update that is already\nprepared beforehand.\n> The entire point here is that SegWit is much bigger than just full nodes \n> (including miner).\n> An entire ecosystem of Bitconin will have a need to upgrade.\n>\n> I understand people saying that non-miners don't *need* to upgrade in order \n> to avoid being kicked of the network, but truely, thats a bogus argument.\n>\n> People want to actually participate in Bitcoin and that means they need to \n> understand all of it. Not just see anyone-can-spend transactions.\n> I think its rather odd to think that developers on this list can decide\n> the risk profile that Bitcoin using companies or individuals should have.\nI think it's rather odd that no major Bitcoin companies have raised any\nsuch issues with Segwit and in fact many already have the upgrade in the\nworks. I think it's rather odd that individuals who are not opposed to\nsegwit would choose to not upgrade even though it has been actively\ndiscussed for the past year.\n> There are a bunch of really large assumptions in there that I disagree with.\n> First of all, miners running the latest software doesn't mean the software \n> is free from flaws. Everyone makes mistakes. People that see a way to abuse \n> the system may have found things and are not reporting it because they want \n> to abuse the flaw for their own gains. Which is exactly what happened with \n> Etherium.\nWhile flaws can still be found, unlike the DAO, Segwit has been tested\nextensively for a much longer period of time. Waiting any longer isn't\nlikely to help given that so much testing and review has already been\ndone. Even so, that is a pointless argument as it is impossible to know\nwhether waiting a little longer would reveal an issue.\n>\n> The amount of code and the amount of changes in SegWit makes this a very \n> dangerous change in (of?) Bitcoin. I counted 10 core concepts in Bitcoin \n> being changed with it. We don't yet know how they will interact. We can\u2019t.\nReally? How so? It's been active on 4 different segwit specific testnets\nand it has been active on the Testnet for the past several months.\nPeople have been spamming segwit transactions and extensively testing\nSegwit since its deployment on Testnet. I think we know how segwit\ntransactions and all aspects of the changes work together as it has been\ntested as such for several months now."
            },
            {
                "author": "Btc Drak",
                "date": "2016-10-17T13:27:08",
                "message_text_only": "This thread has strayed extensively off topic from the OP which asked a\nsimple question about BIP141 signalling start params.\n\nPlease move to another thread, or take more general discussion to\nbitcoin-discuss.\n\nThank you.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161017/c9f09fb1/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-10-17T13:31:07",
                "message_text_only": "On Mon, Oct 17, 2016 at 1:17 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> You are asking people to create everyone-can-spend transactions that would\n> mean a loss of funds to everyone that used it if we do find a major flaw and\n> need to rollback.\n\nPlease, nobody is asking for this.\nNobody should produce segwit transactions until the softfork is\nactivated, after which those transactions aren't anyone-can-spend\nanymore.\nAfter activation, nobody can be forced to use the new format\nimmediately (or ever) if they don't want to reduce their tx fees.\nMaybe because they want to be additionally cautious or maybe because\nthey haven't implemented the new features yet.\nEither way, it is fine that some people upgrade later since, as\nrepeated by many, this is a backward compatible change."
            },
            {
                "author": "Btc Drak",
                "date": "2016-10-16T20:14:15",
                "message_text_only": "I can see how it looks but actually most of the underlying libraries have\nalready been adapted or are almost finished being adapted for segwit. Since\nsegwit is not live on mainnet, most are not released (either still in PR\nform or merged to a development branch). As a software developer, I think\nyou can appreciate that libraries cant actually release a segwit supported\nversions until segwit is released as final in 0.13.1. Obviously consumers\nof the libraries cant update for segwit until the libraries are released -\nyou get the idea. I wouldn't be too concerned about the adoption chart,\nit's just very difficult to reflect the actual state of affairs. For\nexample Trezor is marked as wip, but they have had an updated, but\nunreleased firmware version for many months[1]. We are in the process of\nplanning a migration guide and updating the existing development notes[2].\nAdditionally, many companies are already planning to update their services\nfor segwit.\n\nRegarding BIP9, it's purpose is to co-ordinate *miner upgrade* and\nactivation. The starttime delay is simply designed to avoid miners\nsignalling before the soft fork has been made available for general\nrelease; so the starttime prevents unreleased software from setting the\nversion bit prematurely. The whole BIP9 state machine allows predictable\nactivation. Non mining full nodes are under no constraints to upgrade on a\nspecific schedule, which is by design of soft forks. Signalling will not\nbegin until the first diff retarget period after the starttime of 15th Nov.\nPractically it means there will be a minimum of 4-6 weeks at the very least\nbefore activation can happen.\n\n[1] https://github.com/bitcoin-core/bitcoincore.org/pull/30#issu\necomment-217329474\n[2] https://bitcoincore.org/en/segwit_wallet_dev/\n\nOn Sun, Oct 16, 2016 at 7:20 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sunday, 16 October 2016 09:47:40 CEST Douglas Roark via bitcoin-dev\n> wrote:\n> > Would I want anyone to lose money due to faulty wallets? Of course not.\n> > By the same token, devs have had almost a year to tinker with SegWit and\n> > make sure the wallet isn't so poorly written that it'll flame out when\n> > SegWit comes along. It's not like this is some untested, mostly unknown\n> > feature that's being slipped out at the last minute\n>\n> There have been objections to the way that SegWit has been implemented for\n> a\n> long time, some wallets are taking a \"wait and see\" approach.  If you look\n> at the page you linked[1], that is a very very sad state of affairs. The\n> vast majority is not ready.  Would be interesting to get a more up-to-date\n> view.\n> Wallets probably won't want to invest resources adding support for a\n> feature\n> that will never be activated. The fact that we have a much safer\n> alternative\n> in the form of Flexible Transactions may mean it will not get activated. We\n> won't know until its actually locked in.\n> Wallets may not act until its actually locked in either. And I think we\n> should respect that.\n>\n> Even if all wallets support it (and thats a big if), they need to be rolled\n> out and people need to actually download those updates.\n> This takes time, 2 months after the lock-in of SegWit would be the minimum\n> safe time for people to actually upgrade.\n>\n> 1) https://bitcoincore.org/en/segwit_adoption/\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/db56653c/attachment-0001.html>"
            },
            {
                "author": "Chris Belcher",
                "date": "2016-10-16T16:08:14",
                "message_text_only": "Hello,\n\nExcellent news that segregated witness is nearing release for the mainnet.\n\nI know I don't only speak for myself in saying that this has been\neagerly awaited for some time.\n\nFor the timing, I'd support segwit being usable on the network as soon\nas is technically and safely possible.\n\nWe at JoinMarket are very interested in eventually using schnorr which\nwould allow signature aggregation and so reduce the cost of coinjoins.\n\nChris Belcher\n\nOn 16/10/16 15:31, Pieter Wuille via bitcoin-dev wrote:\n> Hello all,\n> \n> We're getting ready for Bitcoin Core's 0.13.1 release - the first one\n> to include segregated witness (BIP 141, 143, 144, 145) for Bitcoin\n> mainnet, after being extensively tested on testnet and in other\n> software. Following the BIP9 recommendation [1] to set the versionbits\n> start time a month in the future and discussion in the last IRC\n> meeting [2], I propose we set BIP 141's start time to November 15,\n> 2016, 0:00 UTC (unix time 1479168000).\n> \n> Note that this is just a lower bound on the time when the versionbits\n> signalling can begin. Activation on the network requires:\n> (1) This date to pass\n> (2) A full retarget window of 2016 blocks with 95% signalling the\n> version bit (bit 1 for BIP141)\n> (3) A fallow period consisting of another 2016 blocks.\n> \n>   [1] https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>   [2] http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-10-13-19.04.log.html\n> \n> Cheers,\n>"
            },
            {
                "author": "Matt Corallo",
                "date": "2016-10-16T17:52:09",
                "message_text_only": "This start time seems reasonable to me. It is mostly in line with BIP 9's proposed defaults, which seems like an appropriate choice.\n\nOn October 16, 2016 10:31:55 AM EDT, Pieter Wuille via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hello all,\n>\n>We're getting ready for Bitcoin Core's 0.13.1 release - the first one\n>to include segregated witness (BIP 141, 143, 144, 145) for Bitcoin\n>mainnet, after being extensively tested on testnet and in other\n>software. Following the BIP9 recommendation [1] to set the versionbits\n>start time a month in the future and discussion in the last IRC\n>meeting [2], I propose we set BIP 141's start time to November 15,\n>2016, 0:00 UTC (unix time 1479168000).\n>\n>Note that this is just a lower bound on the time when the versionbits\n>signalling can begin. Activation on the network requires:\n>(1) This date to pass\n>(2) A full retarget window of 2016 blocks with 95% signalling the\n>version bit (bit 1 for BIP141)\n>(3) A fallow period consisting of another 2016 blocks.\n>\n>  [1] https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>[2]\n>http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-10-13-19.04.log.html\n>\n>Cheers,"
            },
            {
                "author": "Peter Todd",
                "date": "2016-10-16T21:49:57",
                "message_text_only": "On Sun, Oct 16, 2016 at 04:31:55PM +0200, Pieter Wuille via bitcoin-dev wrote:\n> Hello all,\n> \n> We're getting ready for Bitcoin Core's 0.13.1 release - the first one\n> to include segregated witness (BIP 141, 143, 144, 145) for Bitcoin\n> mainnet, after being extensively tested on testnet and in other\n> software. Following the BIP9 recommendation [1] to set the versionbits\n> start time a month in the future and discussion in the last IRC\n> meeting [2], I propose we set BIP 141's start time to November 15,\n> 2016, 0:00 UTC (unix time 1479168000).\n\nSpeaking as maintainer of python-bitcoinlib, ACK.\n\nCurrently python-bitcoinlib doesn't have any support for segwit, although Bob\nMcElrath has had a pull-req open for it since July:\n\n    https://github.com/petertodd/python-bitcoinlib/pull/112\n\nI may or may not get time to finishing reviewing and merging that pull-req\nbefore segwit activates - I've been a rather distracted maintainer. But either\nway, as has been explained elsewhere ad nauseam, segwit is backwards compatible\nwith existing nodes and wallets so there's no rush to upgrade.\n\nFor example, another project of mine - OpenTimestamps - also makes use of\npython-bitcoinlib for the relatively complex and hairy low-level code that\nextracts timestamp proofs from blocks, among other things. In fact, in the\ndevelopment of OpenTimestamps I had to fix a few minor bugs in\npython-bitcoinlib, because it exercised parts of the codebase that few other\nprojects do.\n\nYet the impact on segwit for OpenTimestamps will be zero - since segwit is a\nsoftfork it's 100% backwards compatible with existing software. Of course, at\nsome point in the future I'll probably get around to adding segwit support to\nthe software to reduce transaction fees, but there's no rush to do so. All I'll\nbe doing for segwit in the near future is upgrading the full nodes on the two\nredundant OpenTimestamps calendar servers to v0.13.1, and even there I'll be\nable to stagger the upgrades to protect against the unlikely occurance of\nv0.13.1 having a bug that v0.13.0 doesn't. Again, staggering full-node upgrades\nis only possible because segwit is a soft-fork.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161016/ef7612e8/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Start time for BIP141 (segwit)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Eric Voskuil",
                "Douglas Roark",
                "Tom Zander",
                "Johnson Lau",
                "Peter Todd",
                "Andrew C",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Marek Palatinus",
                "Gavin Andresen",
                "Matt Corallo",
                "Pieter Wuille",
                "gb"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 48898
        }
    },
    {
        "title": "[bitcoin-dev] On the security of soft forks",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2016-10-16T17:04:59",
                "message_text_only": "I highly recommend you read the excellent thread on soft fork risks at\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html\nand respond there instead of getting off topic for this thread.\n\nMatt\n\nOn 10/16/16 16:42, Tom Zander via bitcoin-dev wrote:\n> On Sunday, 16 October 2016 12:35:58 CEST Gavin Andresen wrote:\n>> On Sun, Oct 16, 2016 at 10:58 AM, Tom Zander via bitcoin-dev <\n>>\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> The fallow period sounds waaaay to short. I suggest 2 months at minimum\n>>> since anyone that wants to be safe needs to upgrade.\n>>\n>> I asked a lot of businesses and individuals how long it would take them to\n>> upgrade to a new release over the last year or two.\n>>\n>> Nobody said it would take them more than two weeks.\n> \n> The question you asked them was likely about the block size. The main \n> difference is that SPV users do not need to update after BIP109, but they do \n> need to have a new wallet when SegWit transactions are being sent to them.\n> \n> This upgrade affects also end users, not just businesses etc.\n> \n> Personally, I'd say that 2 months is even too fast.\n>  \n>"
            }
        ],
        "thread_summary": {
            "title": "On the security of soft forks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Matt Corallo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1152
        }
    },
    {
        "title": "[bitcoin-dev] (no subject)",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2016-10-16T19:35:52",
                "message_text_only": "You keep calling flexible transactions \"safer\", and yet you haven't\nmentioned that the current codebase is riddled with blatant and massive\nsecurity holes. For example, you seem to have misunderstood C++'s memory\nmodel - you would have no less than three out-of-bound, probably\nexploitable memory accesses in your 80-LoC deserialize method at\nhttps://github.com/bitcoinclassic/bitcoinclassic/blob/develop/src/primitives/transaction.cpp#L119\nif you were to turn on flexible transactions (and I only reviewed that\nmethod for 2 minutes). If you want to propose an alternative to a\ncommunity which has been in desperate need of fixes to many problems for\nseveral years, please do so with something which would not take at least\na year to complete given a large team of qualified developers.\n\nYou additionally have not yet bothered to address the discussion of\nsoft-fork security at\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html\nwhich I believe answers all of your claims about upgrades required in a\nmuch more detailed discussion than I will include here. Please take your\noff-topic discussions there instead of this thread.\n\nOn 10/16/16 18:20, Tom Zander via bitcoin-dev wrote:\n> On Sunday, 16 October 2016 09:47:40 CEST Douglas Roark via bitcoin-dev \n> wrote:\n>> Would I want anyone to lose money due to faulty wallets? Of course not.\n>> By the same token, devs have had almost a year to tinker with SegWit and\n>> make sure the wallet isn't so poorly written that it'll flame out when\n>> SegWit comes along. It's not like this is some untested, mostly unknown\n>> feature that's being slipped out at the last minute\n> \n> There have been objections to the way that SegWit has been implemented for a \n> long time, some wallets are taking a \"wait and see\" approach.  If you look \n> at the page you linked[1], that is a very very sad state of affairs. The \n> vast majority is not ready.  Would be interesting to get a more up-to-date \n> view.\n> Wallets probably won't want to invest resources adding support for a feature \n> that will never be activated. The fact that we have a much safer alternative \n> in the form of Flexible Transactions may mean it will not get activated. We \n> won't know until its actually locked in.\n> Wallets may not act until its actually locked in either. And I think we \n> should respect that.\n> \n> Even if all wallets support it (and thats a big if), they need to be rolled \n> out and people need to actually download those updates.\n> This takes time, 2 months after the lock-in of SegWit would be the minimum \n> safe time for people to actually upgrade.\n> \n> 1) https://bitcoincore.org/en/segwit_adoption/\n>"
            },
            {
                "author": "Tom Zander",
                "date": "2016-10-16T20:45:19",
                "message_text_only": "On Sunday, 16 October 2016 19:35:52 CEST Matt Corallo wrote:\n> You keep calling flexible transactions \"safer\", and yet you haven't\n> mentioned that the current codebase is riddled with blatant and massive\n> security holes.\n\nI am not afraid of people finding issues with my code, I'm only human. Would \nappreciate you reporting actual issues instead of hinting at things here.\nCan't fix things otherwise :)\n\nBut, glad you brought it up, the reason that FT is safer is because of the \namount of conceps that SegWit changes in a way that anyone doing development \non Bitcoin later will need to know about them in order to do proper \ndevelopment.\nI counted 10 in my latest vlog entry.  FT only changes 2.\n\nIts safer because its simpler.\n\n> For example, you seem to have misunderstood C++'s memory\n> model - you would have no less than three out-of-bound, probably\n> exploitable memory accesses in your 80-LoC deserialize method at\n> https://github.com/bitcoinclassic/bitcoinclassic/blob/develop/src/primitiv\n> es/transaction.cpp#L119 if you were to turn on flexible transactions (and\n> I only reviewed that method for 2 minutes). \n\nThe unit test doesn't hit any of them. Valgrind only reports such possibly \nexploitable issues in secp256k and CKey::MakeNewKey. The same as in Core.\n\nI don't doubt that your 2 minute look shows stuff that others missed, and \nthat valgrind doesn't find either, but I'd be really grateful if you can \nreport them specifically to me in an email off list (or github, you know the \ndrill).\nMore feedback will only help to make the proposal stronger and even better. \nThanks!\n\n> If you want to propose an\n> alternative to a community which has been in desperate need of fixes to\n> many problems for several years, please do so with something which would\n> not take at least a year to complete given a large team of qualified\n> developers.\n\nI think FT fits the bill just fine :)  After your 2 minute look, take a bit \nlonger and check the rest of the code. You may be surprised with the \nsimplicity of the approach.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Btc Drak",
                "date": "2016-10-17T13:13:25",
                "message_text_only": "For continuity, Matt took the discussion to the bitcoin-discuss lists here\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-discuss/2016-October/000104.html\n\nOn Sun, Oct 16, 2016 at 9:45 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sunday, 16 October 2016 19:35:52 CEST Matt Corallo wrote:\n> > You keep calling flexible transactions \"safer\", and yet you haven't\n> > mentioned that the current codebase is riddled with blatant and massive\n> > security holes.\n>\n> I am not afraid of people finding issues with my code, I'm only human.\n> Would\n> appreciate you reporting actual issues instead of hinting at things here.\n> Can't fix things otherwise :)\n>\n> But, glad you brought it up, the reason that FT is safer is because of the\n> amount of conceps that SegWit changes in a way that anyone doing\n> development\n> on Bitcoin later will need to know about them in order to do proper\n> development.\n> I counted 10 in my latest vlog entry.  FT only changes 2.\n>\n> Its safer because its simpler.\n>\n> > For example, you seem to have misunderstood C++'s memory\n> > model - you would have no less than three out-of-bound, probably\n> > exploitable memory accesses in your 80-LoC deserialize method at\n> > https://github.com/bitcoinclassic/bitcoinclassic/\n> blob/develop/src/primitiv\n> > es/transaction.cpp#L119 if you were to turn on flexible transactions (and\n> > I only reviewed that method for 2 minutes).\n>\n> The unit test doesn't hit any of them. Valgrind only reports such possibly\n> exploitable issues in secp256k and CKey::MakeNewKey. The same as in Core.\n>\n> I don't doubt that your 2 minute look shows stuff that others missed, and\n> that valgrind doesn't find either, but I'd be really grateful if you can\n> report them specifically to me in an email off list (or github, you know\n> the\n> drill).\n> More feedback will only help to make the proposal stronger and even better.\n> Thanks!\n>\n> > If you want to propose an\n> > alternative to a community which has been in desperate need of fixes to\n> > many problems for several years, please do so with something which would\n> > not take at least a year to complete given a large team of qualified\n> > developers.\n>\n> I think FT fits the bill just fine :)  After your 2 minute look, take a bit\n> longer and check the rest of the code. You may be surprised with the\n> simplicity of the approach.\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161017/5149957c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "(no subject)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tom Zander",
                "Btc Drak",
                "Matt Corallo"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7660
        }
    },
    {
        "title": "[bitcoin-dev] On-going work: Coin Selection Simulation",
        "thread_messages": [
            {
                "author": "Murch",
                "date": "2016-10-21T14:09:57",
                "message_text_only": "Hello Daniel and others,\n\nA recent version of my Coin Selection Simulator is now available on my\nGitHub repository:\n\nhttps://github.com/Xekyo/CoinSelectionSimulator\n\nPlease feel free to write an email or open an issue on GitHub, if you\nhappen to find errors, have questions about using the simulator, or\n(especially!) have interesting results running the simulation on your\nown data.\n\nNote that a log and a csv-table with results are posted to the console\nby the simulator, so you might want to pipe that somewhere. ;)\nThere are probably some inefficiency issues, and user experience\nimprovement opportunities left as I'm currently focusing on my thesis,\nyet, I've come to the conclusion that some people might be interested in\ntaking a look nonetheless even though I haven't gotten around to\npolishing the code repository up yet.\n\nRegards\nMurch\n\nAm 23.09.2016 um 11:11 schrieb Murch via bitcoin-dev:\n> Hi Daniel,\n> \n> Thank you for your mail.\n> My simulation of the Mycelium coin selection does add small change\n> outputs to the fee, but I did get your boundary wrong.\n> Instead of the 5460, I dropped at the dust boundary which calculates to\n> 4440 in my simulation. Therefore, I think that the results in the table\n> might be slightly too big, but likely indicative of the actual Mycelium\n> behavior.\n> I've corrected the boundary in my simulation now and will update my\n> simulation results before Scaling Bitcoin. Thank you very much for your\n> correction.\n> \n> Sorry, the simulation code has not been published yet, I plan to do that\n> around Scaling Bitcoin or after I turn in my thesis (End of October). I\n> will let you know when I do.\n> \n> It is my understanding that Mycelium doesn't create small change outputs\n> but rather hardly ever spends them when received.\n> \n> You're probably more familiar with the code base (I think you work for\n> Mycelium?), so please correct me when I'm wrong:\n> Mycelium appears to select UTXO in a FIFO approach, but, after the\n> selection, prunes by removing the smallest selected UTXO until the\n> excess beyond the spending target is minimized. This post-selection step\n> seems the likely reason for Mycelium's small UTXO build-up. (Bitcoin\n> Core intermittenly used post-selection pruning also, and apparently this\n> did cause a similar increase in UTXO set size then.)\n> \n> I assume that this will also cause Mycelium to create a huge transaction\n> every once in a while when this build-up is enough to fund a transaction\n> without a bigger UTXO being selected.\n> \n> As to how it may be mitigated: BreadWallet uses a very similar FIFO\n> approach, but doesn't prune. My simulation result indicates that their\n> average UTXO set is much smaller. This has the downside that users could\n> be spammed with small transaction outputs that they then would pay for\n> spending.\n> A balanced approach between these two approaches might be that instead\n> of pruning all small inputs, a few of the small inputs could be allowed\n> to be selected to slowly drain low-value UTXO out of the wallet by\n> spending them over time. In order to avoid the privacy issues such as\n> e.g. always spending the oldest UTXO, it would for example be possible\n> to implement this as a 75% probability to prune an unnecessary output.\n> \n> Regards\n> Murch\n> \n> Am 22.09.2016 um 11:33 schrieb Daniel Weigl via bitcoin-dev:\n>> Hi,\n>>\n>> Is your simulation code available somewhere?\n>>\n>> I was just wondering why mycelium generates a very big UTXO set for <1000sat, because change outputs will never be smaller than \n>> 5460sat (=TransactionUtils.MINIMUM_OUTPUT_VALUE). If the change would be lower, it simply is skipped and added to the miner fee:\n>> \t-> https://github.com/mycelium-com/wallet/blob/master/public/bitlib/src/main/java/com/mrd/bitlib/StandardTransactionBuilder.java#L334\n>>\n>> Does your simulation account for that?\n>>\n>> It might also be that the small UTXO came from external tx and we never spend them, bec. of pruning/privacy. Not sure how we could optimize that.\n>>\n>> Cheers,\n>> Daniel\n>>\n>> On 2016-09-21 14:58, Murch via bitcoin-dev wrote:\n>>> Hi,\n>>>\n>>> I'm currently compiling my Master's thesis about Coin Selection and my\n>>> presentation proposal to Scaling Bitcoin has been accepted.\n>>>\n>>> For my thesis, I have analyzed the Coin Selection problem, created a\n>>> framework to simulate wallet behavior on basis of a sequence of\n>>> payments, and have re-implemented multiple coin selection strategies of\n>>> prominent Bitcoin wallets (Bitcoin Core, Mycelium, Breadwallet, and\n>>> Android Wallet for Bitcoin).\n>>>\n>>> As the Scaling Bitcoin site suggests that research should be made\n>>> available to this mailing list, I would like to invite you to have a\n>>> look at:\n>>>\n>>> http://murch.one/wp-content/uploads/2016/09/CoinSelection.pdf\n>>>\n>>> The PDF (176 kB) contains a two page description of my on-going work,\n>>> including preliminary simulation results, and three figures showing the\n>>> simulated wallets' UTXO compositions at the end of the simulation.\n>>>\n>>> I can provide further information as requested, and would welcome any\n>>> feedback.\n>>>\n>>> \u2192\u2192 If anyone has another sequence of incoming and outgoing payment\n>>> amounts at hand that I could run my simulation on, I'd love to hear\n>>> about it.\n>>>\n>>> Regards\n>>>\n>>> Murch\n>>>\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            }
        ],
        "thread_summary": {
            "title": "On-going work: Coin Selection Simulation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Murch"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5882
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.13.1 release candidate 3",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2016-10-25T17:47:37",
                "message_text_only": "Due to a relatively trivial fix for an out-of-place assertion in rc2\n(see\nhttps://github.com/bitcoin/bitcoin/commit/58d4fa7da30cb57e5fc3dca62f49a64e126c76cd),\n0.13.1rc3 was tagged and is now available on github either via git or at\nhttps://github.com/bitcoin/bitcoin/releases/tag/v0.13.1rc3.\n\nBecause of the simplicity of the change, it was decided that 0.13.1\nshould not be delayed as a result, and thus no official binaries will be\nmade available for rc3.\n\nHowever, any additional testing which folks have time for before final\ntag on Thursday would be significantly welcomed.\n\nAs usual please report bugs using the issue tracker on github at\nhttps://github.com/bitcoin/bitcoin/issues\n\nThanks,\nMatt"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.13.1 release candidate 3",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Matt Corallo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 700
        }
    },
    {
        "title": "[bitcoin-dev] The Soft Fork Deception",
        "thread_messages": [
            {
                "author": "Andrew",
                "date": "2016-10-27T15:38:17",
                "message_text_only": "I have been reading recently through the history of soft forks provided by\nBitcoin Core:\nhttps://bitcoin.stackexchange.com/questions/43538/where-can-i-find-a-record-of-blockchain-soft-forks\n.\n\nIt has led me to think that there is a deceiving notion that soft forks do\nnot force Bitcoin users to upgrade software. Yes, it's true that the past\nsoft forks still allow old nodes to accept blocks under the tighter rules\nas valid, but what about miners who are still using old software? What\nabout users who want to make a transaction using the old rules? Those\npeople are no longer able to do those things. And if they want to do those\nthings, a hard fork will result.\n\nRemember what happened when BIP 66 was activated? Luckily, it was short\nlived, but this is just the beginning. If you keep tightening the rules,\nyou are building up more and more pressure for a split in the network to\noccur. You can call this split a \"hard fork\" or just a \"fork\", but it is\ndangerous either way, and it leads to basically the creation of two coins\nwhen before we just had one, people instantly lose value, and the trust in\nBitcoin's store of value dies.\n\nObviously every one can debate about what should be the definition of a\nsoft fork, but whatever that is, I think it is unacceptable how sloppily\nthe past soft forks have been deployed. I can think of many ways in which\nwe could have these new features that the soft forks provided, but without\nforcing the new rules, and simply making them features that can be used on\nan individual miner or transaction signer basis. Is there a document from\nBitcoin Core that outlines the philosophy of soft forks and why it is\nacceptable to force the tightening of rules and cause such risks? And\nplease give me another reason other than \"it removes a few if statements\nfrom the code\".\n\nNow that Segregated witness is scheduled to be deployed on November 15, we\nshould take a look at this \"soft fork\" as well. I like the idea of\nSegregated Witness, but from conversations on Reddit and IRC, I see people\nsaying that this soft fork will be like the others: requiring a hard fork\nin order to revert it. Is this true? I am getting conflicting messages by\nreading the BIP. It says that if all transactions are non-segwit, then a\nnode will validate the block as before. But if we pass the threshhold\n(usually 95 % for 1000 blocks) will miners mining non-segwit blocks be\nignored? This is not good... I really think we should make it optional.\nMiners will have an incentive to mine segwit blocks, since it allows for\nmore transactions per block, so why force them? What if we want to slightly\nmodify the Segwit protocol in the future? What if we want to replace segwit\nwith something much different? We will be forced to do a hard fork in order\nto do that.\n\nNow, we can't go back in time and fix the deployment of the soft forks, but\nI do propose one clean way to fix things: Remove all the previously \"soft\nforked\" rules for non segwit transactions, and require them only for segwit\ntransactions. But make segwit optional! In addition to what I talked about\nabove, this may also relieve some tensions of people who are not\ncomfortable with segwit and are thinking of joining a hard fork like the\nBitcoin Unlimited project.\n\nUnless people can give me a good explanation as to why we are deploying\nsoft forks in such forceful manner, or Bitcoin Core accepts my proposal,\nthen I will have no choice but to create a new client (I'm thinking to call\nit Bitcoin Authentic), that will be just as Bitcoin Core but will always\nfollow the chain with the most work regardless of whether soft fork rules\nare respected, and I would put at least CHECKLOCKTIMEVERIFY as mandatory\nwithin segwit transactions.\n\n-- \nPGP: B6AC 822C 451D 6304 6A28  49E9 7DB7 011C D53B 5647\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161027/5d5cc827/attachment.html>"
            },
            {
                "author": "Douglas Roark",
                "date": "2016-10-27T16:22:14",
                "message_text_only": "Am attempting to move this over to bitcoin-discuss, as this (IMO) isn't\nappropriate for dev and is borderline trolling. I won't be replying on\ndev beyond this reply. I'll also try to keep this reply technical in\nnature. (If this continues on discuss, no promises. :) )\n\nOn 2016/10/27 08:38, Andrew via bitcoin-dev wrote:\n> I have been reading recently through the history of soft forks provided\n> by Bitcoin Core:\n> https://bitcoin.stackexchange.com/questions/43538/where-can-i-find-a-record-of-blockchain-soft-forks.\n\nThat list is incomplete.\nhttps://www.reddit.com/r/Bitcoin/comments/2y4mq2/list_of_soft_and_hard_forks/cp68q4q/\nis closer to the reality of the situation and is probably still incomplete.\n\n> It has led me to think that there is a deceiving notion that soft forks\n> do not force Bitcoin users to upgrade software. Yes, it's true that the\n> past soft forks still allow old nodes to accept blocks under the tighter\n> rules as valid, but what about miners who are still using old software?\n> What about users who want to make a transaction using the old rules?\n> Those people are no longer able to do those things. And if they want to\n> do those things, a hard fork will result.\n\nI don't see a particularly strong movement rallying for the right to use\nsigs without strict DER, previously NOP opcodes that now do something,\netc. I'd imagine that a soft fork that \"truly\" forced people to do\nthings they didn't want would be much more controversial than SegWit.\n\n> Remember what happened when BIP 66 was activated?\n\nWhat, you mean miners who were deploying cheap hacks in order to eke out\na bit more hashpower? They got what they deserved.\n\n> Obviously every one can debate about what should be the definition of a\n> soft fork, but whatever that is, I think it is unacceptable how sloppily\n> the past soft forks have been deployed. I can think of many ways in\n> which we could have these new features that the soft forks provided, but\n> without forcing the new rules, and simply making them features that can\n> be used on an individual miner or transaction signer basis.\n\nWell then, lay it on us. If your idea is so great, people will come\naround to it eventually. As is, the only thing I can see is a load of\nswitches that would cause the code to act in all manner of weird ways.\nNew features would have to plan for every single possible use case,\nincluding bizarre use cases that should have no basis in reality.\nCongratulations. New feature deployment is now far more complicated, and\nBitcoin, depending on one's viewpoint, will become further stuck in the\nmud feature-wise.\n\n> Now that Segregated witness is scheduled to be deployed on November 15,\n> we should take a look at this \"soft fork\" as well. I like the idea of\n> Segregated Witness, but from conversations on Reddit and IRC, I see\n> people saying that this soft fork will be like the others: requiring a\n> hard fork in order to revert it. Is this true? I am getting conflicting\n> messages by reading the BIP. It says that if all transactions are\n> non-segwit, then a node will validate the block as before. But if we\n> pass the threshhold (usually 95 % for 1000 blocks) will miners mining\n> non-segwit blocks be ignored? This is not good...\n\nI'd imagine that, if a block has zero SegWit Txes, everything will\nfunction as it did before. It's not like SegWit forces everyone to use\nSegWit when sending coins. It's just an optional method for sending coins.\n\n> Now, we can't go back in time and fix the deployment of the soft forks,\n> but I do propose one clean way to fix things: Remove all the previously\n> \"soft forked\" rules for non segwit transactions, and require them only\n> for segwit transactions. But make segwit optional! In addition to what I\n> talked about above, this may also relieve some tensions of people who\n> are not comfortable with segwit and are thinking of joining a hard fork\n> like the Bitcoin Unlimited project.\n\nCan you clearly define all the rules that you will remove? Are you going\nto include things like the original OP_VER opcode (see\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011938.html\nfor why this would be, IMO, a bad idea)? What about the multi-byte\nopcodes (e.g., OP_PUBKEYHASH), which were hard forked off the network\nbut were technically soft forks since nobody had actually used them on\nthe network?\n\n> Unless people can give me a good explanation as to why we are deploying\n> soft forks in such forceful manner, or Bitcoin Core accepts my proposal,\n> then I will have no choice but to create a new client (I'm thinking to\n> call it Bitcoin Authentic), that will be just as Bitcoin Core but will\n> always follow the chain with the most work regardless of whether soft\n> fork rules are respected, and I would put at least CHECKLOCKTIMEVERIFY\n> as mandatory within segwit transactions.\n\nIf you're going to create yet another Core fork, you'd better be sure to\ndefine just how \"authentic\" you want to be. I'm guessing you don't want\nthe overflow output Tx fix (i.e., \"the 92 billion Bitcoin bug\") removed,\nbut that one was arguably a soft fork too. Sure, Satoshi committed it\nand didn't even give the miners a chance to vote, but he still \"forced\"\neveryone to deploy it. If freedom \u00fcber alles is what you seek, you'll\nneed to revert just about everything Satoshi included too, which will be\ndifficult since a lot of his fixes have been drastically changed in the\ncode (albeit in a manner where they still function as intended).\n\n-- \n---\nDouglas Roark\nCryptocurrency, network security, travel, and art.\nhttps://onename.com/droark\njoroark at vt.edu\nPGP key ID: 26623924\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161027/bf440693/attachment.sig>"
            },
            {
                "author": "Andrew C",
                "date": "2016-10-28T15:28:35",
                "message_text_only": "On 10/27/2016 11:38 AM, Andrew via bitcoin-dev wrote:\n> I have been reading recently through the history of soft forks\n> provided by Bitcoin Core:\n> https://bitcoin.stackexchange.com/questions/43538/where-can-i-find-a-record-of-blockchain-soft-forks.\n>\n> It has led me to think that there is a deceiving notion that soft\n> forks do not force Bitcoin users to upgrade software. Yes, it's true\n> that the past soft forks still allow old nodes to accept blocks under\n> the tighter rules as valid, but what about miners who are still using\n> old software? What about users who want to make a transaction using\n> the old rules? Those people are no longer able to do those things. And\n> if they want to do those things, a hard fork will result.\nA soft fork means that a transaction using the old rules will still\nwork. Look at segwit, you can still make the original style of\ntransactions with P2PK, P2PKH, and P2SH outputs. There is nothing here\nto cause a hard fork.\n\n> Remember what happened when BIP 66 was activated? Luckily, it was\n> short lived, but this is just the beginning. If you keep tightening\n> the rules, you are building up more and more pressure for a split in\n> the network to occur. You can call this split a \"hard fork\" or just a\n> \"fork\", but it is dangerous either way, and it leads to basically the\n> creation of two coins when before we just had one, people instantly\n> lose value, and the trust in Bitcoin's store of value dies.\nBIP 66's hard fork was not due to the soft fork making transactions\ninvalid. Rather it was because miners were not properly validating\nblocks before building on top of them. That fork was because a\nnon-upgraded miner created a block invalid under the new rules and\nupgraded miners did not check the block and built on top of it. That\ninvalid block was only invalid because the isSuperMajority mechanism\nspecified that the new version number must be used otherwise the block\nwas invalid, and that was what happened: the invalid block had the old\nversion number. This is not an issue for BIP 9 Versionbits soft forks\nbecause no such rule exists.\n>\n> Obviously every one can debate about what should be the definition of\n> a soft fork, but whatever that is, I think it is unacceptable how\n> sloppily the past soft forks have been deployed.\nIn what way have these forks been sloppily deployed? The fork caused by\nprevious a soft forks (there was only one that caused that had an actual\nchain split issue) was due to the isSuperMajority mechanism which is not\na good mechanism for deployment. It has been superseded by BIP 9\nVersionbits. Furthermore, that fork was not due to \"sloppy deployment\"\nby the devs but rather due to greedy miners who were SPV mining.\n> I can think of many ways in which we could have these new features\n> that the soft forks provided, but without forcing the new rules, and\n> simply making them features that can be used on an individual miner or\n> transaction signer basis. Is there a document from Bitcoin Core that\n> outlines the philosophy of soft forks and why it is acceptable to\n> force the tightening of rules and cause such risks? And please give me\n> another reason other than \"it removes a few if statements from the code\".\nCan you explain what other risks you think there are with soft forks?\n>\n> Now that Segregated witness is scheduled to be deployed on November\n> 15, we should take a look at this \"soft fork\" as well. I like the idea\n> of Segregated Witness, but from conversations on Reddit and IRC, I see\n> people saying that this soft fork will be like the others: requiring a\n> hard fork in order to revert it. Is this true?\nIf you are reading r/btc, you are doing something wrong.\n\nLike with all soft forks, the only way to revert them is by a hard fork.\nSoft forks make previously valid things invalid, hard forks make\npreviously invalid things valid. In order to revert a soft fork which\nmade something invalid, you need to hard fork to make it valid again.\n> I am getting conflicting messages by reading the BIP. It says that if\n> all transactions are non-segwit, then a node will validate the block\n> as before. But if we pass the threshhold (usually 95 % for 1000\n> blocks) will miners mining non-segwit blocks be ignored? This is not\n> good... I really think we should make it optional. Miners will have an\n> incentive to mine segwit blocks, since it allows for more transactions\n> per block, so why force them?\nNo. This is incorrect. There is no requirement to include the witness\ncommitment in the coinbase if no transactions in the block contain\nwitnesses. Because transactions that contain witnesses are considered\nnon-standard transactions by the old rules, if a miner who did not\nupgrade continues to follow those standardness rules, their blocks will\nnot be invalid and they are not forced to upgrade.\n> What if we want to slightly modify the Segwit protocol in the future?\n> What if we want to replace segwit with something much different? We\n> will be forced to do a hard fork in order to do that.\nNot necessarily, it depends on the change. Most changes (such as\nsighashing, new opcodes, different scripts, etc.) can be done via\nanother soft fork because segwit introduces script versioning. A new\nscript version would be created with the necessary changes and that can\nbe soft forked in.\n>\n> Now, we can't go back in time and fix the deployment of the soft\n> forks, but I do propose one clean way to fix things: Remove all the\n> previously \"soft forked\" rules for non segwit transactions, and\n> require them only for segwit transactions. But make segwit optional!\n> In addition to what I talked about above, this may also relieve some\n> tensions of people who are not comfortable with segwit and are\n> thinking of joining a hard fork like the Bitcoin Unlimited project.\nSegwit already is optional. If you don't want to use segwit, you don't\nhave to. If you don't want to mine segwit blocks, you don't have to.\n\nAs for removing all previously soft forked things, then you would be\nremoving a ton of functionality, various fixes, and potentially break a\nlarge number of transactions that already exists but are not confirmed\nyet. This would require a hard fork.\n\nAs for what is would be reverted, you would be reverting P2SH (multisig\naddresses, you still want those right?), OP_CLTV, OP_CSV, block height\nrequirement in Coinbase, the value overflow incident, removal of\ndangerous opcodes, reduction of block size limit, etc. As you can see, a\nlot of functionality and various bug fixes would be lost be reverting\nevery single soft fork.\n>\n> Unless people can give me a good explanation as to why we are\n> deploying soft forks in such forceful manner,\nAs I have said throughout this response, soft forks are not deployed in\na forceful manner which forces people to upgrade.\n> or Bitcoin Core accepts my proposal, then I will have no choice but to\n> create a new client (I'm thinking to call it Bitcoin Authentic), that\n> will be just as Bitcoin Core but will always follow the chain with the\n> most work regardless of whether soft fork rules are respected, and I\n> would put at least CHECKLOCKTIMEVERIFY as mandatory within segwit\n> transactions.\nGreat, go ahead. Honestly, I don't think anyone cares about your\n\"ultimatum\". You are a random person on the internet.\n>\n> -- \n> PGP: B6AC 822C 451D 6304 6A28  49E9 7DB7 011C D53B 5647\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20161028/72db51a8/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "The Soft Fork Deception",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew C",
                "Douglas Roark",
                "Andrew"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 17565
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.13.1 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2016-10-27T18:42:35",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.13.1 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.13.1/>\n\nOr through bittorrent:\n\n  magnet:?xt=urn:btih:dbe48c446b1113890644bbef03e361269f69c49a&dn=bitcoin-core-0.13.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nThis is a new minor version release, including activation parameters for the\nsegwit softfork, various bugfixes and performance improvements, as well as\nupdated translations.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nCompatibility\n==============\n\nMicrosoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\nan OS initially released in 2001. This means that not even critical security\nupdates will be released anymore. Without security updates, using a bitcoin\nwallet on a XP machine is irresponsible at least.\n\nIn addition to that, with 0.12.x there have been varied reports of Bitcoin Core\nrandomly crashing on Windows XP. It is [not clear](https://github.com/bitcoin/bitcoin/issues/7681#issuecomment-217439891)\nwhat the source of these crashes is, but it is likely that upstream\nlibraries such as Qt are no longer being tested on XP.\n\nWe do not have time nor resources to provide support for an OS that is\nend-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are\nsuggested to upgrade to a newer version of Windows, or install an alternative OS\nthat is supported.\n\nNo attempt is made to prevent installing or running the software on Windows XP,\nyou can still do so at your own risk, but do not expect it to work: do not\nreport issues about Windows XP to the issue tracker.\n\n- From 0.13.1 onwards OS X 10.7 is no longer supported. 0.13.0 was intended to work on 10.7+, \nbut severe issues with the libc++ version on 10.7.x keep it from running reliably. \n0.13.1 now requires 10.8+, and will communicate that to 10.7 users, rather than crashing unexpectedly.\n\nNotable changes\n===============\n\nSegregated witness soft fork\n- ----------------------------\n\nSegregated witness (segwit) is a soft fork that, if activated, will\nallow transaction-producing software to separate (segregate) transaction\nsignatures (witnesses) from the part of the data in a transaction that is\ncovered by the txid. This provides several immediate benefits:\n\n- - **Elimination of unwanted transaction malleability:** Segregating the witness\n  allows both existing and upgraded software to calculate the transaction\n  identifier (txid) of transactions without referencing the witness, which can\n  sometimes be changed by third-parties (such as miners) or by co-signers in a\n  multisig spend. This solves all known cases of unwanted transaction\n  malleability, which is a problem that makes programming Bitcoin wallet\n  software more difficult and which seriously complicates the design of smart\n  contracts for Bitcoin.\n\n- - **Capacity increase:** Segwit transactions contain new fields that are not\n  part of the data currently used to calculate the size of a block, which\n  allows a block containing segwit transactions to hold more data than allowed\n  by the current maximum block size. Estimates based on the transactions\n  currently found in blocks indicate that if all wallets switch to using\n  segwit, the network will be able to support about 70% more transactions. The\n  network will also be able to support more of the advanced-style payments\n  (such as multisig) than it can support now because of the different weighting\n  given to different parts of a transaction after segwit activates (see the\n  following section for details).\n\n- - **Weighting data based on how it affects node performance:** Some parts of\n  each Bitcoin block need to be stored by nodes in order to validate future\n  blocks; other parts of a block can be immediately forgotten (pruned) or used\n  only for helping other nodes sync their copy of the block chain.  One large\n  part of the immediately prunable data are transaction signatures (witnesses),\n  and segwit makes it possible to give a different \"weight\" to segregated\n  witnesses to correspond with the lower demands they place on node resources.\n  Specifically, each byte of a segregated witness is given a weight of 1, each\n  other byte in a block is given a weight of 4, and the maximum allowed weight\n  of a block is 4 million.  Weighting the data this way better aligns the most\n  profitable strategy for creating blocks with the long-term costs of block\n  validation.\n\n- - **Signature covers value:** A simple improvement in the way signatures are\n  generated in segwit simplifies the design of secure signature generators\n  (such as hardware wallets), reduces the amount of data the signature\n  generator needs to download, and allows the signature generator to operate\n  more quickly.  This is made possible by having the generator sign the amount\n  of bitcoins they think they are spending, and by having full nodes refuse to\n  accept those signatures unless the amount of bitcoins being spent is exactly\n  the same as was signed.  For non-segwit transactions, wallets instead had to\n  download the complete previous transactions being spent for every payment\n  they made, which could be a slow operation on hardware wallets and in other\n  situations where bandwidth or computation speed was constrained.\n\n- - **Linear scaling of sighash operations:** In 2015 a block was produced that\n  required about 25 seconds to validate on modern hardware because of the way\n  transaction signature hashes are performed.  Other similar blocks, or blocks\n  that could take even longer to validate, can still be produced today.  The\n  problem that caused this can't be fixed in a soft fork without unwanted\n  side-effects, but transactions that opt-in to using segwit will now use a\n  different signature method that doesn't suffer from this problem and doesn't\n  have any unwanted side-effects.\n\n- - **Increased security for multisig:** Bitcoin addresses (both P2PKH addresses\n  that start with a '1' and P2SH addresses that start with a '3') use a hash\n  function known as RIPEMD-160.  For P2PKH addresses, this provides about 160\n  bits of security---which is beyond what cryptographers believe can be broken\n  today.  But because P2SH is more flexible, only about 80 bits of security is\n  provided per address. Although 80 bits is very strong security, it is within\n  the realm of possibility that it can be broken by a powerful adversary.\n  Segwit allows advanced transactions to use the SHA256 hash function instead,\n  which provides about 128 bits of security  (that is 281 trillion times as\n  much security as 80 bits and is equivalent to the maximum bits of security\n  believed to be provided by Bitcoin's choice of parameters for its Elliptic\n  Curve Digital Security Algorithm [ECDSA].)\n\n- - **More efficient almost-full-node security** Satoshi Nakamoto's original\n  Bitcoin paper describes a method for allowing newly-started full nodes to\n  skip downloading and validating some data from historic blocks that are\n  protected by large amounts of proof of work.  Unfortunately, Nakamoto's\n  method can't guarantee that a newly-started node using this method will\n  produce an accurate copy of Bitcoin's current ledger (called the UTXO set),\n  making the node vulnerable to falling out of consensus with other nodes.\n  Although the problems with Nakamoto's method can't be fixed in a soft fork,\n  Segwit accomplishes something similar to his original proposal: it makes it\n  possible for a node to optionally skip downloading some blockchain data\n  (specifically, the segregated witnesses) while still ensuring that the node\n  can build an accurate copy of the UTXO set for the block chain with the most\n  proof of work.  Segwit enables this capability at the consensus layer, but\n  note that Bitcoin Core does not provide an option to use this capability as\n  of this 0.13.1 release.\n\n- - **Script versioning:** Segwit makes it easy for future soft forks to allow\n  Bitcoin users to individually opt-in to almost any change in the Bitcoin\n  Script language when those users receive new transactions.  Features\n  currently being researched by Bitcoin Core contributors that may use this\n  capability include support for Schnorr signatures, which can improve the\n  privacy and efficiency of multisig transactions (or transactions with\n  multiple inputs), and Merklized Abstract Syntax Trees (MAST), which can\n  improve the privacy and efficiency of scripts with two or more conditions.\n  Other Bitcoin community members are studying several other improvements\n  that can be made using script versioning.\n\nActivation for the segwit soft fork is being managed using BIP9\nversionbits.  Segwit's version bit is bit 1, and nodes will begin\ntracking which blocks signal support for segwit at the beginning of the\nfirst retarget period after segwit's start date of 15 November 2016.  If\n95% of blocks within a 2,016-block retarget period (about two weeks)\nsignal support for segwit, the soft fork will be locked in.  After\nanother 2,016 blocks, segwit will activate.\n\nFor more information about segwit, please see the [segwit FAQ][], the\n[segwit wallet developers guide][] or BIPs [141][BIP141], [143][BIP143],\n[144][BIP144], and [145][BIP145].  If you're a miner or mining pool\noperator, please see the [versionbits FAQ][] for information about\nsignaling support for a soft fork.\n\n[Segwit FAQ]: https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n[segwit wallet developers guide]: https://bitcoincore.org/en/segwit_wallet_dev/\n[BIP141]: https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\n[BIP143]: https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki\n[BIP144]: https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki\n[BIP145]: https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n[versionbits FAQ]: https://bitcoincore.org/en/2016/06/08/version-bits-miners-faq/\n\n\nNull dummy soft fork\n- -------------------\n\nCombined with the segwit soft fork is an additional change that turns a\nlong-existing network relay policy into a consensus rule. The\n`OP_CHECKMULTISIG` and `OP_CHECKMULTISIGVERIFY` opcodes consume an extra\nstack element (\"dummy element\") after signature validation. The dummy\nelement is not inspected in any manner, and could be replaced by any\nvalue without invalidating the script.\n\nBecause any value can be used for this dummy element, it's possible for\na third-party to insert data into other people's transactions, changing\nthe transaction's txid (called transaction malleability) and possibly\ncausing other problems.\n\nSince Bitcoin Core 0.10.0, nodes have defaulted to only relaying and\nmining transactions whose dummy element was a null value (0x00, also\ncalled OP_0).  The null dummy soft fork turns this relay rule into a\nconsensus rule both for non-segwit transactions and segwit transactions,\nso that this method of mutating transactions is permanently eliminated\nfrom the network.\n\nSignaling for the null dummy soft fork is done by signaling support\nfor segwit, and the null dummy soft fork will activate at the same time\nas segwit.\n\nFor more information, please see [BIP147][].\n\n[BIP147]: https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki\n\nLow-level RPC changes\n- ---------------------\n\n- - `importprunedfunds` only accepts two required arguments. Some versions accept\n  an optional third arg, which was always ignored. Make sure to never pass more\n  than two arguments.\n\n\nLinux ARM builds\n- ----------------\n\nWith the 0.13.0 release, pre-built Linux ARM binaries were added to the set of\nuploaded executables. Additional detail on the ARM architecture targeted by each\nis provided below.\n\nThe following extra files can be found in the download directory or torrent:\n\n- - `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries targeting\n  the 32-bit ARMv7-A architecture.\n- - `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries targeting\n  the 64-bit ARMv8-A architecture.\n\nARM builds are still experimental. If you have problems on a certain device or\nLinux distribution combination please report them on the bug tracker, it may be\npossible to resolve them. Note that the device you use must be (backward)\ncompatible with the architecture targeted by the binary that you use.\nFor example, a Raspberry Pi 2 Model B or Raspberry Pi 3 Model B (in its 32-bit\nexecution state) device, can run the 32-bit ARMv7-A targeted binary. However,\nno model of Raspberry Pi 1 device can run either binary because they are all\nARMv6 architecture devices that are not compatible with ARMv7-A or ARMv8-A.\n\nNote that Android is not considered ARM Linux in this context. The executables\nare not expected to work out of the box on Android.\n\n\n0.13.1 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n### Consensus\n- - #8636 `9dfa0c8` Implement NULLDUMMY softfork (BIP147) (jl2012)\n- - #8848 `7a34a46` Add NULLDUMMY verify flag in bitcoinconsensus.h (jl2012)\n- - #8937 `8b66659` Define start and end time for segwit deployment (sipa)\n\n### RPC and other APIs\n- - #8581 `526d2b0` Drop misleading option in importprunedfunds (MarcoFalke)\n- - #8699 `a5ec248` Remove createwitnessaddress RPC command (jl2012)\n- - #8780 `794b007` Deprecate getinfo (MarcoFalke)\n- - #8832 `83ad563` Throw JSONRPCError when utxo set can not be read (MarcoFalke)\n- - #8884 `b987348` getblockchaininfo help: pruneheight is the lowest, not highest, block (luke-jr)\n- - #8858 `3f508ed` rpc: Generate auth cookie in hex instead of base64 (laanwj)\n- - #8951 `7c2bf4b` RPC/Mining: getblocktemplate: Update and fix formatting of help (luke-jr)\n\n### Block and transaction handling\n- - #8611 `a9429ca` Reduce default number of blocks to check at startup (sipa)\n- - #8634 `3e80ab7` Add policy: null signature for failed CHECK(MULTI)SIG (jl2012)\n- - #8525 `1672225` Do not store witness txn in rejection cache (sipa)\n- - #8499 `9777fe1` Add several policy limits and disable uncompressed keys for segwit scripts (jl2012)\n- - #8526 `0027672` Make non-minimal OP_IF/NOTIF argument non-standard for P2WSH (jl2012)\n- - #8524 `b8c79a0` Precompute sighashes (sipa)\n- - #8651 `b8c79a0` Predeclare PrecomputedTransactionData as struct (sipa)\n\n### P2P protocol and network code\n- - #8740 `42ea51a` No longer send local address in addrMe (laanwj)\n- - #8427 `69d1cd2` Ignore `notfound` P2P messages (laanwj)\n- - #8573 `4f84082` Set jonasschnellis dns-seeder filter flag (jonasschnelli)\n- - #8712 `23feab1` Remove maxuploadtargets recommended minimum (jonasschnelli)\n- - #8862 `7ae6242` Fix a few cases where messages were sent after requested disconnect (theuni)\n- - #8393 `fe1975a` Support for compact blocks together with segwit (sipa)\n- - #8282 `2611ad7` Feeler connections to increase online addrs in the tried table (EthanHeilman)\n- - #8612 `2215c22` Check for compatibility with download in FindNextBlocksToDownload (sipa)\n- - #8606 `bbf379b` Fix some locks (sipa)\n- - #8594 `ab295bb` Do not add random inbound peers to addrman (gmaxwell)\n- - #8940 `5b4192b` Add x9 service bit support to dnsseed.bluematt.me, seed.bitcoinstats.com (TheBlueMatt, cdecker)\n- - #8944 `685e4c7` Remove bogus assert on number of oubound connections. (TheBlueMatt)\n- - #8949 `0dbc48a` Be more agressive in getting connections to peers with relevant services (gmaxwell)\n\n### Build system\n- - #8293 `fa5b249` Allow building libbitcoinconsensus without any univalue (luke-jr)\n- - #8492 `8b0bdd3` Allow building bench_bitcoin by itself (luke-jr)\n- - #8563 `147003c` Add configure check for -latomic (ajtowns)\n- - #8626 `ea51b0f` Berkeley DB v6 compatibility fix (netsafe)\n- - #8520 `75f2065` Remove check for `openssl/ec.h` (laanwj)\n\n### GUI\n- - #8481 `d9f0d4e` Fix minimize and close bugs (adlawren)\n- - #8487 `a37cec5` Persist the datadir after option reset (achow101)\n- - #8697 `41fd852` Fix op order to append first alert (rodasmith)\n- - #8678 `8e03382` Fix UI bug that could result in paying unexpected fee (jonasschnelli)\n- - #8911 `7634d8e` Translate all files, even if wallet disabled (laanwj)\n- - #8540 `1db3352` Fix random segfault when closing \"Choose data directory\" dialog (laanwj)\n- - #7579 `f1c0d78` Show network/chain errors in the GUI (jonasschnelli)\n\n### Wallet\n- - #8443 `464dedd` Trivial cleanup of HD wallet changes (jonasschnelli)\n- - #8539 `cb07f19` CDB: fix debug output (crowning-)\n- - #8664 `091cdeb` Fix segwit-related wallet bug (sdaftuar)\n- - #8693 `c6a6291` Add witness address to address book (instagibbs)\n- - #8765 `6288659` Remove \"unused\" ThreadFlushWalletDB from removeprunedfunds (jonasschnelli)\n\n### Tests and QA\n- - #8713 `ae8c7df` create_cache: Delete temp dir when done (MarcoFalke)\n- - #8716 `e34374e` Check legacy wallet as well (MarcoFalke)\n- - #8750 `d6ebe13` Refactor RPCTestHandler to prevent TimeoutExpired (MarcoFalke)\n- - #8652 `63462c2` remove root test directory for RPC tests (yurizhykin)\n- - #8724 `da94272` walletbackup: Sync blocks inside the loop (MarcoFalke)\n- - #8400 `bea02dc` enable rpcbind_test (yurizhykin)\n- - #8417 `f70be14` Add walletdump RPC test (including HD- & encryption-tests) (jonasschnelli)\n- - #8419 `a7aa3cc` Enable size accounting in mining unit tests (sdaftuar)\n- - #8442 `8bb1efd` Rework hd wallet dump test (MarcoFalke)\n- - #8528 `3606b6b` Update p2p-segwit.py to reflect correct behavior (instagibbs)\n- - #8531 `a27cdd8` abandonconflict: Use assert_equal (MarcoFalke)\n- - #8667 `6b07362` Fix SIGHASH_SINGLE bug in test_framework SignatureHash (jl2012)\n- - #8673 `03b0196` Fix obvious assignment/equality error in test (JeremyRubin)\n- - #8739 `cef633c` Fix broken sendcmpct test in p2p-compactblocks.py (sdaftuar)\n- - #8418 `ff893aa` Add tests for compact blocks (sdaftuar)\n- - #8803 `375437c` Ping regularly in p2p-segwit.py to keep connection alive (jl2012)\n- - #8827 `9bbe66e` Split up slow RPC calls to avoid pruning test timeouts (sdaftuar)\n- - #8829 `2a8bca4` Add bitcoin-tx JSON tests (jnewbery)\n- - #8834 `1dd1783` blockstore: Switch to dumb dbm (MarcoFalke)\n- - #8835 `d87227d` nulldummy.py: Don't run unused code (MarcoFalke)\n- - #8836 `eb18cc1` bitcoin-util-test.py should fail if the output file is empty (jnewbery)\n- - #8839 `31ab2f8` Avoid ConnectionResetErrors during RPC tests (laanwj)\n- - #8840 `cbc3fe5` Explicitly set encoding to utf8 when opening text files (laanwj)\n- - #8841 `3e4abb5` Fix nulldummy test (jl2012)\n- - #8854 `624a007` Fix race condition in p2p-compactblocks test (sdaftuar)\n- - #8857 `1f60d45` mininode: Only allow named args in wait_until (MarcoFalke)\n- - #8860 `0bee740` util: Move wait_bitcoinds() into stop_nodes() (MarcoFalke)\n- - #8882 `b73f065` Fix race conditions in p2p-compactblocks.py and sendheaders.py (sdaftuar)\n- - #8904 `cc6f551` Fix compact block shortids for a test case (dagurval)\n\n### Documentation\n- - #8754 `0e2c6bd` Target protobuf 2.6 in OS X build notes. (fanquake)\n- - #8461 `b17a3f9` Document return value of networkhashps for getmininginfo RPC endpoint (jlopp)\n- - #8512 `156e305` Corrected JSON typo on setban of net.cpp (sevastos)\n- - #8683 `8a7d7ff` Fix incorrect file name bitcoin.qrc  (bitcoinsSG)\n- - #8891 `5e0dd9e` Update bips.md for Segregated Witness (fanquake)\n- - #8545 `863ae74` Update git-subtree-check.sh README (MarcoFalke)\n- - #8607 `486650a` Fix doxygen off-by-one comments, fix typos (MarcoFalke)\n- - #8560 `c493f43` Fix two VarInt examples in serialize.h (cbarcenas)\n- - #8737 `084cae9` UndoReadFromDisk works on undo files (rev), not on block files (paveljanik)\n- - #8625 `0a35573` Clarify statement about parallel jobs in rpc-tests.py (isle2983)\n- - #8624 `0e6d753` build: Mention curl (MarcoFalke)\n- - #8604 `b09e13c` build,doc: Update for 0.13.0+ and OpenBSD 5.9 (laanwj)\n- - #8939 `06d15fb` Update implemented bips for 0.13.1 (sipa)\n\n### Miscellaneous\n- - #8742 `d31ac72` Specify Protobuf version 2 in paymentrequest.proto (fanquake)\n- - #8414,#8558,#8676,#8700,#8701,#8702 Add missing copyright headers (isle2983, kazcw)\n- - #8899 `4ed2627` Fix wake from sleep issue with Boost 1.59.0 (fanquake)\n- - #8817 `bcf3806` update bitcoin-tx to output witness data (jnewbery)\n- - #8513 `4e5fc31` Fix a type error that would not compile on OSX. (JeremyRubin)\n- - #8392 `30eac2d` Fix several node initialization issues (sipa)\n- - #8548 `305d8ac` Use `__func__` to get function name for output printing (MarcoFalke)\n- - #8291 `a987431` [util] CopyrightHolders: Check for untranslated substitution (MarcoFalke)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - adlawren\n- - Alexey Vesnin\n- - Anders \u00d8yvind Urke-S\u00e6tre\n- - Andrew Chow\n- - Anthony Towns\n- - BtcDrak\n- - Chris Stewart\n- - Christian Barcenas\n- - Christian Decker\n- - Cory Fields\n- - crowning-\n- - Dagur Valberg Johannsson\n- - David A. Harding\n- - Eric Lombrozo\n- - Ethan Heilman\n- - fanquake\n- - Gaurav Rana\n- - Gregory Maxwell\n- - instagibbs\n- - isle2983\n- - Jameson Lopp\n- - Jeremy Rubin\n- - jnewbery\n- - Johnson Lau\n- - Jonas Schnelli\n- - jonnynewbs\n- - Justin Camarena\n- - Kaz Wesley\n- - leijurv\n- - Luke Dashjr\n- - MarcoFalke\n- - Marty Jones\n- - Matt Corallo\n- - Micha\n- - Michael Ford\n- - mruddy\n- - Pavel Jan\u00edk\n- - Pieter Wuille\n- - rodasmith\n- - Sev\n- - Suhas Daftuar\n- - whythat\n- - Wladimir J. van der Laan\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJYEkpHAAoJEHSBCwEjRsmmgEAH+gNUut+ywWNWp0B13+gHch2s\n/d/4OzTQNKAERRCniL9BMh/MEFAK7xDYXcDkQyj9uNS/+G9EhXNysjWEt8aftd/p\nHBhzWkGHO5WPSvYtBr6/0k/z3KCNDPrXybMf5x0e5P241S8ufKcqYVEspPUzezMb\naoco+Vr0XePAvCXTo3MPNTjcEFOQ7gHu/NOWC1glgPQp+krNkOjYGbtgwDwbKVIx\nkLbi+40+wRQUTLR/fSqs0F/5vjbQ2JCuEREWasxQiTuHDW+6HlcgGnx0AXQyPLo5\np7BkSFAJpHG5ipqKNcymEGcFhcfWXhx/7DfYaBS1ugWQEJlQVk0jn7+cxSzyYAQ=\n=vk0C\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.13.1 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 22439
        }
    }
]