[
    {
        "title": "[Bitcoin-development] Duplicate transactions vulnerability",
        "thread_messages": [
            {
                "author": "Ben Reeves",
                "date": "2012-03-01T10:15:01",
                "message_text_only": "Yes you are right. Any fix in DisconnectBlock() has the same potential issues.\n\nI think the exchanges and major merchants need to be made aware that\nthey must also upgrade. Maybe bundle both BIP16 and BIP30 in 0.6 and\nissue an advisory stating that this is a mandatory upgrade for\neveryone.\n\nIt also might be prudent to have a blockchain repair script ready,\nwhich checks the db for missing coinbase transactions and downloads\nthem from another peer or block explorer if necessary.\n\nThank You,\nBen Reeves\nwww.blockchain.info\n\nOn Wed, Feb 29, 2012 at 11:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:\n>> I'm not sure. What if they use a coinbase of a block that has already matured?\n>\n> Indeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.\n> The 100-blocks maturity will not help against is.\n>\n> I'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-\n> compatible way, though.\n>\n> --\n> Pieter"
            },
            {
                "author": "Ben Reeves",
                "date": "2012-03-01T13:09:02",
                "message_text_only": "One more thing to add. The implementation in the reference patch fixes\nthe blockchain forking issue however by still allowing spent coinbases\nto be disconnected patched clients are still vulnerable to blockchain\ncorruption. While not an immediate issue it would mean\nLoadBlockIndex() would error on restart and could cause problems for\nnew clients during the initial blockchain download.\n\nIs there a reason not to disallow duplicate coinbases entirely?\n\nOn Thu, Mar 1, 2012 at 10:15 AM, Ben Reeves <support at pi.uk.com> wrote:\n> Yes you are right. Any fix in DisconnectBlock() has the same potential issues.\n>\n> I think the exchanges and major merchants need to be made aware that\n> they must also upgrade. Maybe bundle both BIP16 and BIP30 in 0.6 and\n> issue an advisory stating that this is a mandatory upgrade for\n> everyone.\n>\n> It also might be prudent to have a blockchain repair script ready,\n> which checks the db for missing coinbase transactions and downloads\n> them from another peer or block explorer if necessary.\n>\n> Thank You,\n> Ben Reeves\n> www.blockchain.info\n>\n> On Wed, Feb 29, 2012 at 11:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>> On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:\n>>> I'm not sure. What if they use a coinbase of a block that has already matured?\n>>\n>> Indeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.\n>> The 100-blocks maturity will not help against is.\n>>\n>> I'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-\n>> compatible way, though.\n>>\n>> --\n>> Pieter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-03-01T14:27:53",
                "message_text_only": "On Thu, Mar 1, 2012 at 8:09 AM, Ben Reeves <support at pi.uk.com> wrote:\n> One more thing to add. The implementation in the reference patch fixes\n> the blockchain forking issue however by still allowing spent coinbases\n> to be disconnected patched clients are still vulnerable to blockchain\n> corruption. While not an immediate issue it would mean\n> LoadBlockIndex() would error on restart and could cause problems for\n> new clients during the initial blockchain download.\n\nI am not following you here, can you explain what you're thinking?\n\n> Is there a reason not to disallow duplicate coinbases entirely?\n\nBecause this would make it impossible for nodes to prune the vaules.\nThey'd all forever have to keep a set of all the coinbase hashes in\norder to perform the test. The height-in-coinbase BIP will make\nduplicates effectively impossible to create, which is a much more\nclean behavior."
            },
            {
                "author": "Ben Reeves",
                "date": "2012-03-01T17:20:41",
                "message_text_only": ">I am not following you here, can you explain what you're thinking?\n\nIf I mine a duplicate coinbase of an old block (whether spent or not)\nif that block is then invalidated DisconnectBlock() will erase both\nthe coinbase of the new block and of the old block. This leaves the\nblockchain is in an inconsistent state because with the coinbase\nmissing the old block will no longer pass CheckBlock().\n\nWhen affected clients are restarted LoadBlockIndex() will try and\nverify all blocks in the main chain, failing at the block with the\nmissing coinbase.\n\n1) If an attacker was to do this with an early block it would force\nall affected clients to redownload the majority of the blockchain.\n2) If the attacker was able to do this on a block after the March 1st\ndeadline (future block A). If they mined a fake copy of block A (block\nB) with the same coinbase but a different hash clients who received\nblock B before block A will refuse to accept block A because of the\nunspent duplicate coinbase in block B. The attacker can then fork the\nchain at this point despite the real chain being longer.\n\nI am just think out load here so I could be wrong, but maybe it would\nbe better to go for the full block height fix now?\n\nOn Thu, Mar 1, 2012 at 2:27 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Thu, Mar 1, 2012 at 8:09 AM, Ben Reeves <support at pi.uk.com> wrote:\n>> One more thing to add. The implementation in the reference patch fixes\n>> the blockchain forking issue however by still allowing spent coinbases\n>> to be disconnected patched clients are still vulnerable to blockchain\n>> corruption. While not an immediate issue it would mean\n>> LoadBlockIndex() would error on restart and could cause problems for\n>> new clients during the initial blockchain download.\n>\n> I am not following you here, can you explain what you're thinking?\n>\n>> Is there a reason not to disallow duplicate coinbases entirely?\n>\n> Because this would make it impossible for nodes to prune the vaules.\n> They'd all forever have to keep a set of all the coinbase hashes in\n> order to perform the test. The height-in-coinbase BIP will make\n> duplicates effectively impossible to create, which is a much more\n> clean behavior."
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-01T14:30:30",
                "message_text_only": "On Thu, Mar 01, 2012 at 01:09:02PM +0000, Ben Reeves wrote:\n> One more thing to add. The implementation in the reference patch fixes\n> the blockchain forking issue however by still allowing spent coinbases\n> to be disconnected patched clients are still vulnerable to blockchain\n> corruption. While not an immediate issue it would mean\n> LoadBlockIndex() would error on restart and could cause problems for\n> new clients during the initial blockchain download.\n\nI don't understand this.\n\n> Is there a reason not to disallow duplicate coinbases entirely?\n\nJust disallowing duplicate coinbases is possible, but it requires keeping a\nset of all coinbases transaction around until infinity. That's not really a problem,\nbut it can be avoided. One very reasonable proposed solution is adding the block\nheight to the coinbase. However, as coinbases are used for all kinds of things\nalready, this is harder to roll out network-wide. Hence, first this \"emergency\"\nsolution that already prevents (afaik) all practical attacks, and in a later step\nforcing unique coinbases, so that transactions can be assumed to be unique\nidentifiable by their hash again.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-02T01:56:34",
                "message_text_only": "On Tue, Feb 28, 2012 at 17:48, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> I've written about it in BIP30[2]. There is a patch for the reference\n> client, which has been tested and verified to make the attack\n> impossible. The change is backward compatible in the same way BIP16\n> is: if a supermajority of mining power implements it, old clients can\n> continue to function without risk.\n\nAfter some private discussion, Ben Reeves pointed out two potential\nsmall weaknesses in the proposed patch, which seem viable to me.\n\nFirst: disconnecting the same coinbase transaction twice would fail,\nas EraseTxIndex will not find anything the second time. This is\nextremely hard to pull off, as it requires reverting a chain of at\nleast 120 blocks long. Still, the fix is very easy imho: allow\nEraseTxIndex to fail.\n\nSecond: assume the following order of events: block with coinbase A is\ncreated, 120 blocks later, A:0 is spent in transaction B. Then, a dupe\nof A is created, and another 120 blocks are waited. At this point, A:0\nand B:0 are still spendable. Now a block is created with two\ntransactions: first C which spends B:0, followed by a dupe of B. This\ndupe is accepted, as its former instance is completely spent now.\nHowever, if this last block is disconnected again, B:0 is not\nspendable anymore, causing a risk for chain split. Ben suggested\nmoving the check for dupes up, turning the new network rule into:\n\n  Blocks are not allowed to contain transactions whose hash matches\nthat of an earlier transaction in the same chain, unless that\ntransaction was already completely spent before said block.\n\nI've updated the patch, and will update the BIP soon.\n\nWhat do you all think? Can we still move forward with deploying this?\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-03T16:41:03",
                "message_text_only": "On Tue, Feb 28, 2012 at 17:48, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hello all,\n>\n> I've written about it in BIP30[2]. There is a patch for the reference\n> client, which has been tested and verified to make the attack\n> impossible. The change is backward compatible in the same way BIP16\n> is: if a supermajority of mining power implements it, old clients can\n> continue to function without risk.\n\nAfter getting responses from Deepbit, bitcoin.cz (slush), MtRed, Bitlc\nand BTCmine, it looks like march 15 is a reasonable deployment date\nfor the security update described in BIP 30.\n\nI have created patches for:\n* git master: https://github.com/sipa/bitcoin/tree/nooverwritetx\n* v0.4.0: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.4.0\n* v0.3.24: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.24\n* v0.3.24+vinced:\nhttps://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.24+vinced\n* v0.3.19: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.19\n\nI've asked pool operators to upgrade, and confirm when they have done\nso. If you are a miner or pool operator, and have the ability to\nupgrade, please do so as well.\n\nThanks,\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Duplicate transactions vulnerability",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Gregory Maxwell",
                "Ben Reeves"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 9791
        }
    },
    {
        "title": "[Bitcoin-development] JSON-RPC is BIP territory or not?",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-03-02T18:51:41",
                "message_text_only": "Hi,\n\nI got sent this BIP:\n\nhttps://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool#JSON-RPC_Method:_getmemorypool\n\n\nWhat is your opinion on this? Is it BIP related?\n\nIt is a implementation-specific non-bitcoin-protocol proposal. My understanding of BIPs is that\nthey apply across bitcoin implementations and largely focus on the most generic use-cases\n(like the URIs) and the protocol. Things which affect all clients, and allow the system to function\nas a united whole.\n\nThat BIPs especially focus on the protocol, and that something like this is outside the mandate\nof the BIP process.\n\nFor instance, we could imagine a future scenario. Bitcoin-Qt is currently based off bitcoind's\ncodebase. However wumpus built the client in mind with an abstraction layer to enable multiple\nbackends (a good design). In our hypothetical situation, there are 3 different backend codebases\nusing\u00a0Bitcoin-Qt. I do not think a proposal to mandate a changing to Bitcoin-Qt's abstraction\nlayer or a change in the UI placement would be appropriate BIP material.\n\nOTOH, many clients do need to make use of URIs and the BIP process is totally correct, as it\nstandardises a behaviour which is needed for interoperability of the network and community.\n\nThoughts?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120302/fede72ef/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-02T19:14:05",
                "message_text_only": "On Friday, March 02, 2012 1:51:41 PM Amir Taaki wrote:\n> It is a implementation-specific non-bitcoin-protocol proposal. My\n> understanding of BIPs is that they apply across bitcoin implementations\n> and largely focus on the most generic use-cases (like the URIs) and the\n> protocol. Things which affect all clients, and allow the system to\n> function as a united whole.\n\nThis isn't implementation-specific. If you read it, you should notice it is \nintentionally generic for multiple use-cases. Right now bitcoind supports \ngetmemorypool for a few use cases, but this proposed BIP enables it to be \nutilized for many more. Specifically, Eligius and at least a few other pools \nwish to move toward a more decentralized method of pooled mining (similar to \nthe proprietary p2pool protocol). Eligius already supports miners producing \ntheir own work with getmemorypool using this draft, and our Eloipool server is \nopen source (AGPL-3) for others to adopt (I know of at least one other pool \nplanning to do so). Other pools not using Eloipool also have expressed \ninterest in this, so a standard is desirable."
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-03-03T13:44:45",
                "message_text_only": "Since several independent clients (I know at least libcoin \n<https://github.com/ceptacle/libcoin/blob/master/src/coinHTTP/RequestHandler.cpp> \nand BitcoinJS \n<https://github.com/bitcoinjs/bitcoinjs-server/tree/master/lib/rpc>) aim \nto implement JSON-RPC APIs which are either a superset of the original \nclient's or have at least some compatible functions, I think you can \nmake a case for including JSON-RPC API calls within the domain of BIPs.\n\nIn this instance the BIP aims to create a common protocol between \ndifferent clients, miners, mining proxies and pools. That's a lot of \nsoftware, so standardization definitely seems like a good idea and I \ncan't think of a reason not to use the BIP process.\n\nI have some comments on the content of the BIP, but since this thread is \nmore of a meta-discussion I'll wait until the BIP is officially proposed.\n\n\nOn 3/2/2012 7:51 PM, Amir Taaki wrote:\n> Hi,\n>\n> I got sent this BIP:\n>\n> https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool#JSON-RPC_Method:_getmemorypool\n>\n> What is your opinion on this? Is it BIP related?\n>\n> It is a implementation-specific non-bitcoin-protocol proposal. My \n> understanding of BIPs is that\n> they apply across bitcoin implementations and largely focus on the \n> most generic use-cases\n> (like the URIs) and the protocol. Things which affect all clients, and \n> allow the system to function\n> as a united whole.\n>\n> That BIPs especially focus on the protocol, and that something like \n> this is outside the mandate\n> of the BIP process.\n>\n> For instance, we could imagine a future scenario. Bitcoin-Qt is \n> currently based off bitcoind's\n> codebase. However wumpus built the client in mind with an abstraction \n> layer to enable multiple\n> backends (a good design). In our hypothetical situation, there are 3 \n> different backend codebases\n> using Bitcoin-Qt. I do not think a proposal to mandate a changing to \n> Bitcoin-Qt's abstraction\n> layer or a change in the UI placement would be appropriate BIP material.\n>\n> OTOH, many clients do need to make use of URIs and the BIP process is \n> totally correct, as it\n> standardises a behaviour which is needed for interoperability of the \n> network and community.\n>\n> Thoughts?\n>\n>\n> ------------------------------------------------------------------------------\n> Virtualization&  Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing\n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120303/f86175ef/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-03T13:49:03",
                "message_text_only": "On Saturday, March 03, 2012 8:44:45 AM Stefan Thomas wrote:\n> I have some comments on the content of the BIP, but since this thread is\n> more of a meta-discussion I'll wait until the BIP is officially proposed.\n\nPlease do comment on the content, in the original thread if you prefer:\n\nMessage-Id: <201202281706.22650.luke at dashjr.org>\nSubject: [Bitcoin-development] getmemorypool BIP process\nDate: Tue, 28 Feb 2012 17:06:20 -0500"
            }
        ],
        "thread_summary": {
            "title": "JSON-RPC is BIP territory or not?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Stefan Thomas",
                "Amir Taaki"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5876
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: Proposal for a new opcode",
        "thread_messages": [
            {
                "author": "Watson Ladd",
                "date": "2012-03-02T19:57:27",
                "message_text_only": "Dear all,\nI am proposing a new opcode for the purposes of anonymous\ntransactions. This new opcode enables scripts to be given proof that\nthe receiver can carry out or has carried out a previous transaction.\nI'm currently working on a paper that discusses using this opcode for\nanonymous transactions.\n\nName: OP_CHECKEXPSIG\nStack before: <sig><pk><hash>\nStack after: T/F, where is true if sig is a ECDSA signature under pk\nfor the hash hash. (Hash is the hash of a message).\nUses: Preexisting digital cash techniques relied on keeping track of a\nlist of turned in notes to forbid double spending. Using\nOP_CHECKEXPSIG we can instead pass the script that gives the nth note\nvalue proof that the notes {1,...n-1} were turned in and are distinct.\nThis enables a coupling of the strong double spend protection of\nBitcoin with traditional digital cash's strong anonymity.\n\nSincerely,\nWatson Ladd"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-03-03T17:55:02",
                "message_text_only": "On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n> Dear all,\n> I am proposing a new opcode for the purposes of anonymous\n> transactions.\n\nThat's very exciting!  I'm eager to read the paper for all of the\ndetails, and working out what else would need to be done besides a new\nopcode to enable strong anonymity (at the very least, I assume we'll\nneed one or more new 'standard' transaction types that clients\nunderstand).\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-03-07T00:05:48",
                "message_text_only": "On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n> I am proposing a new opcode for the purposes of anonymous\n> transactions. This new opcode enables scripts to be given proof that\n> the receiver can carry out or has carried out a previous transaction.\n> I'm currently working on a paper that discusses using this opcode for\n> anonymous transactions.\n\nI believe I understand what the opcode does directly\u2014 it just\nvalidates an opaque signautre. I don't understand how it enables\nanonymous transactions.\n\nCan you spell this out for me?\n\nIn particular I don't see why it is not, from the perspective of the\nblockchain, isomorphic to a hash locked transaction.   (This\nequivalence is more obvious when you think about how lamport\nsigntures turn simple hashing into a one time signature)."
            },
            {
                "author": "Watson Ladd",
                "date": "2012-03-07T00:42:41",
                "message_text_only": "On Tue, Mar 6, 2012 at 6:05 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n>> I am proposing a new opcode for the purposes of anonymous\n>> transactions. This new opcode enables scripts to be given proof that\n>> the receiver can carry out or has carried out a previous transaction.\n>> I'm currently working on a paper that discusses using this opcode for\n>> anonymous transactions.\n>\n> I believe I understand what the opcode does directly\u2014 it just\n> validates an opaque signautre. I don't understand how it enables\n> anonymous transactions.\n>\n> Can you spell this out for me?\nOne doesn't use this opcode as the sole thing to secure a transaction.\nInstead this opcode prevents double spend attacks against\nanonymization schemes. The idea is for Alice to give signatures to the\nrecipients of funds, all signatures being equivalent. To avoid this\nfrom leading to a double-spend, we use a quorum method based on\nshowing earlier redemptions happened.\n>\n> In particular I don't see why it is not, from the perspective of the\n> blockchain, isomorphic to a hash locked transaction. \u00a0 (This\n> equivalence is more obvious when you think about how lamport\n> signtures turn simple hashing into a one time signature).\nBecause you can't blind a lamport signature, it isn't. I'm searching\nfor a place to post the current draft: it's not ready for anything\nofficial yet, but does seem to be of interest. Drop me a (offlist)line\nif you have ideas about where I can put  it.\nSincerely,\nWatson Ladd\n\n-- \n\"Those who would give up Essential Liberty to purchase a little\nTemporary Safety deserve neither\u00a0 Liberty nor Safety.\"\n-- Benjamin Franklin"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-03-21T19:54:30",
                "message_text_only": "On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n> Dear all,\n> I am proposing a new opcode for the purposes of anonymous\n> transactions. This new opcode enables scripts to be given proof that\n> the receiver can carry out or has carried out a previous transaction.\n> I'm currently working on a paper that discusses using this opcode for\n> anonymous transactions.\n\n\nHere is an alternative protocol:\n\n\nN parties wish to purchase equal amounts of Bitcoin without the\nexchange being able to link their future transactions, they each put\nthe relevant amount of gold/whatever up at the exchange.\n\nThe exchange provides the exchanges public key, and the user provides\na public key for signing.   Externally the N participants agree on a\ncollection of non-cooperating mixers (the mixers may actually just be\nthe participants themselves, independent third parties, etc).   Each\nparticipant generates a new bitcoin address, and encrypts it with the\nthe public keys of the the exchange and all the mixers using an\nappropriate communicative homorophic scheme (or just a layers stack of\nregular encryption keys).  The participants then combine their\nencrypted addresess into a block and hand it off to the mixing chain.\nEach mixer randomizes the order and decrypts all the messages with its\nkey.\n\nAt the end of the chain the exchange does the final decryption and\npresents a list of addresses to the involved users.  Users validate\nthat their address is in the set and sign the entire set.  Once all\ninvolved users have signed, the exchange pays.\n\n\nThis requires no changes to the Bitcoin system and could be trivially\nimplemented by anyone interested.  It provides anonymity which is\nstrong so long as any one of the mixers is uncompromised.  It has very\nlow overhead.   It is not directly resistant to disruption, but if\nparticipation in an identified round requires a key provided by the\nexchange, abusive users can be detected and excluded.\n\nHave I explained this clearly enough? I could probably implement the\nwhole system it if its unclear.\n\nCan you contrast this with your proposal for me?"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Proposal for a new opcode",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Watson Ladd",
                "Gregory Maxwell",
                "Gavin Andresen"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 5970
        }
    },
    {
        "title": "[Bitcoin-development] Proposal for a new opcode",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-05T14:14:07",
                "message_text_only": "Sounds interesting, however, even after a couple of days, I cannot see how you maintain protection against double spend using OP_CHECKEXPSIG. It is not until you redeem the OP_CHECKEXPSIG transaction that you reveal which former transactions that was involved?\n\nI guess I am missing a point here?\n\n/M\n\n\n\n\n \nOn 02/03/2012, at 20:57, Watson Ladd wrote:\n\n> Dear all,\n> I am proposing a new opcode for the purposes of anonymous\n> transactions. This new opcode enables scripts to be given proof that\n> the receiver can carry out or has carried out a previous transaction.\n> I'm currently working on a paper that discusses using this opcode for\n> anonymous transactions.\n> \n> Name: OP_CHECKEXPSIG\n> Stack before: <sig><pk><hash>\n> Stack after: T/F, where is true if sig is a ECDSA signature under pk\n> for the hash hash. (Hash is the hash of a message).\n> Uses: Preexisting digital cash techniques relied on keeping track of a\n> list of turned in notes to forbid double spending. Using\n> OP_CHECKEXPSIG we can instead pass the script that gives the nth note\n> value proof that the notes {1,...n-1} were turned in and are distinct.\n> This enables a coupling of the strong double spend protection of\n> Bitcoin with traditional digital cash's strong anonymity.\n> \n> Sincerely,\n> Watson Ladd\n> \n> ------------------------------------------------------------------------------\n> Virtualization & Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing \n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Watson Ladd",
                "date": "2012-03-21T22:02:46",
                "message_text_only": "On Wed, Mar 21, 2012 at 3:54 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n>> Dear all,\n>> I am proposing a new opcode for the purposes of anonymous\n>> transactions. This new opcode enables scripts to be given proof that\n>> the receiver can carry out or has carried out a previous transaction.\n>> I'm currently working on a paper that discusses using this opcode for\n>> anonymous transactions.\n>\n>\n> Here is an alternative protocol:\n>\n>\n> N parties wish to purchase equal amounts of Bitcoin without the\n> exchange being able to link their future transactions, they each put\n> the relevant amount of gold/whatever up at the exchange.\n>\n> The exchange provides the exchanges public key, and the user provides\n> a public key for signing. \u00a0 Externally the N participants agree on a\n> collection of non-cooperating mixers (the mixers may actually just be\n> the participants themselves, independent third parties, etc). \u00a0 Each\n> participant generates a new bitcoin address, and encrypts it with the\n> the public keys of the the exchange and all the mixers using an\n> appropriate communicative homorophic scheme (or just a layers stack of\n> regular encryption keys). \u00a0The participants then combine their\n> encrypted addresess into a block and hand it off to the mixing chain.\n> Each mixer randomizes the order and decrypts all the messages with its\n> key.\n>\n> At the end of the chain the exchange does the final decryption and\n> presents a list of addresses to the involved users. \u00a0Users validate\n> that their address is in the set and sign the entire set. \u00a0Once all\n> involved users have signed, the exchange pays.\n>\n>\n> This requires no changes to the Bitcoin system and could be trivially\n> implemented by anyone interested. \u00a0It provides anonymity which is\n> strong so long as any one of the mixers is uncompromised. \u00a0It has very\n> low overhead. \u00a0 It is not directly resistant to disruption, but if\n> participation in an identified round requires a key provided by the\n> exchange, abusive users can be detected and excluded.\n>\n> Have I explained this clearly enough? I could probably implement the\n> whole system it if its unclear.\n>\n> Can you contrast this with your proposal for me?\nContrasts\n-My protocol works, your's doesn't. It's not enough to have a mix, the\nmix needs to be verifiable to avoid\none of the mixers inserting their own key and removing a key that\nshould be in there. That doesn't mean you can't make your protocol\nwork with some more magic, but magic is required.\n-You need a lot of online computation: the recipients need to be\ninvolved with validating the mix. By contrast in mine you need to wait for\nenough people to get their bitcoins to avoid partitioning. But this\nmight be a strength,\nnot a weakness.\n-You avoid the problem of de-anonymizing through having the protocol\nrun incompletely: if the permutation is correctly computed the\ntransaction goes through.\n-You also avoid all the problems with modifications to the bitcoin\nclients and miners.\n\nIt's definitely a good alternative, once you fix the problem in 1.\n\nOn a related note, private keys and signatures have better proofs of\nknowledge then hashes. Has this been considered in the P2SH\nconversation? There might be ways to use this to make even better\nmethods for enhancing anonymity.\nSincerely,\nWatson Ladd\n\n\n\n--\n\"Those who would give up Essential Liberty to purchase a little\nTemporary Safety deserve neither\u00a0 Liberty nor Safety.\"\n-- Benjamin Franklin\n\n\n-- \n\"Those who would give up Essential Liberty to purchase a little\nTemporary Safety deserve neither\u00a0 Liberty nor Safety.\"\n-- Benjamin Franklin"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-03-22T00:49:20",
                "message_text_only": "On Wed, Mar 21, 2012 at 6:02 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n> -My protocol works, your's doesn't. It's not enough to have a mix, the\n> mix needs to be verifiable to avoid\n> one of the mixers inserting their own key and removing a key that\n> should be in there. That doesn't mean you can't make your protocol\n> work with some more magic, but magic is required.\n\nIf the final step fails (someone says their address is missing) you\nchallenge the mixes to disclose half of their correspondences. You can\nthen prove which (if any) mixes defected.\n\nWhy I didn't bother elaborating is ... I think you can even avoid the\nfancy protocol where you must take care to only disclose alternating\nhalves at each mix because the addresses are throwaway: If the it\nfails in the final stage everyone publishes _everything_ and the\ncheater is instantly and provably identified and can be excluded from\nthe next attempt which is then performed using totally new addresses\nand the disclosed addresses are never used.  Care would need to be\ntaken to avoid fake-failures (e.g. the exchange says 'it fails'\ntriggering disclosure then sending anyways\u2014 but the participants could\nprove this cheating and stop using the exchange), I think there isn't\nmuch risk there if the participants are themselves the mixes.  I need\nto think this through a bit more.\n\n[snip]\n> On a related note, private keys and signatures have better proofs of\n> knowledge then hashes. Has this been considered in the P2SH\n> conversation? There might be ways to use this to make even better\n> methods for enhancing anonymity.\n\nIt's not something I thought about\u2014 In general the P2SH tends to be\na superset of other schemes, e.g. you can do a signature to prove you\naccess to a private key, then you can show someone a script using that\nkey to show control of a P2SH address.\n\nThere are lot of interesting things you can do with bitcoin if you can\nconstruct (potentially interactive) proofs for knowing the preimages of hashes."
            }
        ],
        "thread_summary": {
            "title": "Proposal for a new opcode",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Watson Ladd",
                "Michael Gr\u00f8nager",
                "Gregory Maxwell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7625
        }
    },
    {
        "title": "[Bitcoin-development] getmemorypool BIP process",
        "thread_messages": [
            {
                "author": "Stefan Thomas",
                "date": "2012-03-03T14:23:08",
                "message_text_only": "From what I understand the BIP uses a polling model, e.g. a miner would \nuse getmemorypool to request new work from a pool in intervals. Would it \nmake sense to specify a version of the API supporting long polling?\n\nFor BitcoinJS specifically, since we also support JSON-RPC over TCP, I'd \neven be interested in a genuine \"push\" API. Something like C->S \n\"listenmemorypool\", S->C \"updatememorypool\" (continually).\n\nOn 2/28/2012 11:06 PM, Luke-Jr wrote:\n> Please review and comment/critique:\n>      https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-03T15:00:27",
                "message_text_only": "On Saturday, March 03, 2012 9:23:08 AM Stefan Thomas wrote:\n>  From what I understand the BIP uses a polling model, e.g. a miner would\n> use getmemorypool to request new work from a pool in intervals. Would it\n> make sense to specify a version of the API supporting long polling?\n\nYou mean explicitly mention the getwork longpoll protocol as part of the \ngetmemorypool BIP? Probably a good idea.\n\n> For BitcoinJS specifically, since we also support JSON-RPC over TCP, I'd\n> even be interested in a genuine \"push\" API. Something like C->S\n> \"listenmemorypool\", S->C \"updatememorypool\" (continually).\n\nHTTP and JSON-RPC are a client-server model; there is no way for the server to \nmake calls to the client. It's not practical to expect clients to run their \nown JSON-RPC server - many cannot listen on WAN ports at all."
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-03T17:08:57",
                "message_text_only": "> \n> HTTP and JSON-RPC are a client-server model; there is no way for the server to \n> make calls to the client. It's not practical to expect clients to run their \n> own JSON-RPC server - many cannot listen on WAN ports at all.\n\nWell, I think what Stefan had in mind was http keep-alive combined with an event system. So similar to the way a web chat application work, just for json-rpc. BitcoinJS already uses this for realtime updating a webwallet. Libcoin is also prepared for this with a quite advanced, non-blocking, http server so I second Stefan that an update function could indeed be of relevance.\n\nBtw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?\n\nCheers,\n\nMichael\n\n\n> \n> ------------------------------------------------------------------------------\n> Virtualization & Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing \n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-03-04T00:18:09",
                "message_text_only": "> Btw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?\n\nAs for an explicitly standard way, there is none. The JSON-RPC 1.0 spec \n<http://json-rpc.org/wiki/specification> says \"The specifications do not \nrequire a certain transport protocol. The use of TCP/IP socket streams \nis encouraged. The serialized request and response objects are sent to \nthe peers through the byte streams. \" The JSON-RPC 2.0 spec \n<http://jsonrpc.org/specification> goes out of its way to say \"It is \ntransport agnostic in that the concepts can be used within the same \nprocess, over sockets, over http, or in many various message passing \nenvironments.\"\n\nThe de-facto standard for bidirectional JSON-RPC is plain TCP sockets. \nBitcoinJS currently implements this - we detect whether an incoming \nconnection is HTTP or raw JSON-RPC based on the first character. (HTTP \nmust start with an uppercase letter, raw JSON-RPC must start with an \nopening curly bracket.)\n\nThere are two things to watch out for with JSON-RPC over plain TCP:\n\n1. Plain TCP sockets (unlike HTTP) have no standardized authentication \nmechanism, so I added an extra RPC call auth(\"username\", \"password\").\n\n2. The TCP packets may or may not correspond to JSON-RPC messages. You \ncan either use a streaming JSON parser (yajl in ANSI C, Jackson in Java, \netc.), or you can just count (non-string-literal) curly braces to detect \nwhen a complete message has arrived.\n\nMany JSON-RPC libraries come with TCP socket support out of the box: \nhttp://json-rpc.org/wiki/implementations\n\nWe're planning to add more features to our JSON-RPC API in the future, \nsuch as:\n\n- JSON-RPC over TLS sockets\n- Challenge-response authentication\n- TLS client handshake (certificate authentication)\n\nAs for HTTP Keep-Alive: It works, but I don't think it's very widely \nsupported among client libraries and HTTP isn't really made for this \ntype of thing, so my gut instinct would be to avoid it. That said, it \ndoesn't hurt to offer the option.\n\nOn 3/3/2012 6:08 PM, Michael Gr\u00f8nager wrote:\n>> HTTP and JSON-RPC are a client-server model; there is no way for the server to\n>> make calls to the client. It's not practical to expect clients to run their\n>> own JSON-RPC server - many cannot listen on WAN ports at all.\n> Well, I think what Stefan had in mind was http keep-alive combined with an event system. So similar to the way a web chat application work, just for json-rpc. BitcoinJS already uses this for realtime updating a webwallet. Libcoin is also prepared for this with a quite advanced, non-blocking, http server so I second Stefan that an update function could indeed be of relevance.\n>\n> Btw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?\n>\n> Cheers,\n>\n> Michael\n>\n>\n>> ------------------------------------------------------------------------------\n>> Virtualization&  Cloud Management Using Capacity Planning\n>> Cloud computing makes use of virtualization - but cloud computing\n>> also focuses on allowing computing to be delivered as a service.\n>> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> Virtualization&  Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing\n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120304/72c6808b/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-03T15:44:15",
                "message_text_only": "On Saturday, March 03, 2012 10:05:58 AM Gavin Andresen wrote:\n> > HTTP and JSON-RPC are a client-server model; there is no way for the\n> > server to make calls to the client. It's not practical to expect clients\n> > to run their own JSON-RPC server - many cannot listen on WAN ports at\n> > all.\n> \n> You're doing that thing where either you say something before you've\n> done adequate research, or you're being needlessly pedantic; I just\n> copied and pasted this from section 2.1 of the JSON-RPC spec:\n\nI wasn't aware anyone was considering JSON-RPC over anything other than HTTP.\n\nI've updated the draft to include long polling, and remove some assumptions of \nusing HTTP for transport."
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-03-04T00:18:17",
                "message_text_only": "> I've updated the draft to include long polling, and remove some assumptions of\n> using HTTP for transport.\n\nLooks good to me.\n\nOn 3/3/2012 4:44 PM, Luke-Jr wrote:\n> On Saturday, March 03, 2012 10:05:58 AM Gavin Andresen wrote:\n>>> HTTP and JSON-RPC are a client-server model; there is no way for the\n>>> server to make calls to the client. It's not practical to expect clients\n>>> to run their own JSON-RPC server - many cannot listen on WAN ports at\n>>> all.\n>> You're doing that thing where either you say something before you've\n>> done adequate research, or you're being needlessly pedantic; I just\n>> copied and pasted this from section 2.1 of the JSON-RPC spec:\n> I wasn't aware anyone was considering JSON-RPC over anything other than HTTP.\n>\n> I've updated the draft to include long polling, and remove some assumptions of\n> using HTTP for transport.\n>\n> ------------------------------------------------------------------------------\n> Virtualization&  Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing\n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2012-03-03T23:51:34",
                "message_text_only": "On 28.02.2012 23:06, Luke-Jr wrote:\n> Please review and comment/critique:\n>     https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool\n\nLooking forward to implementing this in my pool backend and miner.\n\nA few comments:\n\n\"transactions \tadd or remove transactions (both of the above; default if\n\"transactions\" omitted) \"\n\nIn the above, you may want to specify that the \"transactions\" referred\nto here is the one in the first table (JSON-RPC response object) and not\nthe mutations. For a moment I thought free tx editing was the default.\n\nLong polling as currently implemented in pools has a race condition.\nDoes the miner reconnect first or does another block change happen\nfirst? \"Double\" block changes are common with merged mining and I'm\ndoing all sorts of tricks in my pool backend to reduce this problem.\n\nHow about another entry \"longpollid\" in long poll responses. The last\nseen longpollid should be included by the client in future long poll\nrequests. This enables the server to see if the client has missed any\nblock changes. The ID could perhaps be submitted in an HTTP header\n(X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params\ncould hold an object with a key \"longpollid\". Could be a string or\nnumber, like \"workid\".\n\nAnother useful value in the getmemorypool response would be \"height\", so\nthe miner can include the correct height in the coinbase. I would like\nthat in bitcoind as well. One JSON-RPC call instead of two, and no race\ncondition between getmemorypool and getblocknumber.\n\nIt should be explained how target vs. fulltarget works.\n\nPerhaps some things should be optional for a client to implement? I\nthink \"noncerange\" is of limited use and there's a good chance of\ngetting the endianness wrong.\n\nRegards,\nGeir Harald Hansen"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-04T01:04:29",
                "message_text_only": "On Saturday, March 03, 2012 6:51:34 PM Geir Harald Hansen wrote:\n> Long polling as currently implemented in pools has a race condition.\n> Does the miner reconnect first or does another block change happen\n> first? \"Double\" block changes are common with merged mining and I'm\n> doing all sorts of tricks in my pool backend to reduce this problem.\n\nHow would you suggest addressing this? I presume if a share solves blocks on \nmultiple chains, you just longpoll once when that's successful?\n\n> How about another entry \"longpollid\" in long poll responses. The last\n> seen longpollid should be included by the client in future long poll\n> requests. This enables the server to see if the client has missed any\n> block changes. The ID could perhaps be submitted in an HTTP header\n> (X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params\n> could hold an object with a key \"longpollid\". Could be a string or\n> number, like \"workid\".\n\nHmm, the problem is that adding any parameters to getmemorypool itself breaks \ncompatibility with bitcoind 0.5, and using HTTP headers makes it HTTP-specific \nagain. Any ideas?\n\n> Another useful value in the getmemorypool response would be \"height\", so\n> the miner can include the correct height in the coinbase. I would like\n> that in bitcoind as well. One JSON-RPC call instead of two, and no race\n> condition between getmemorypool and getblocknumber.\n\nGood catch. Should this be required (since it might be necessary for future \nBitcoin blocks), or just \"should\" for compatibility?\n\n> It should be explained how target vs. fulltarget works.\n\nWhat is unclear about this?\n\n> Perhaps some things should be optional for a client to implement?\n\nDoing this safely needs some way for clients to communicate capabilities to \nthe server, which has the problem of passing parameters to getmemorypool.\n\n> I think \"noncerange\" is of limited use and there's a good chance of getting\n> the endianness wrong.\n\nThere is no mining hardware to date that exhausts even half the nonce space, \nso I'd really prefer to see this as a required feature on the miner side. On \nthe other hand, it's merely an extension for getwork, so I can see the problem \nso long as we're using getwork proxies.\n\nLuke"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2012-03-04T17:49:00",
                "message_text_only": "On 04.03.2012 02:04, Luke-Jr wrote:\n> On Saturday, March 03, 2012 6:51:34 PM Geir Harald Hansen wrote:\n>> Long polling as currently implemented in pools has a race condition.\n>> Does the miner reconnect first or does another block change happen\n>> first? \"Double\" block changes are common with merged mining and I'm\n>> doing all sorts of tricks in my pool backend to reduce this problem.\n> \n> How would you suggest addressing this? I presume if a share solves blocks on \n> multiple chains, you just longpoll once when that's successful?\n\nIf the client doesn't tell you which block change it saw last, you can't\navoid this problem completely.\n\n>> How about another entry \"longpollid\" in long poll responses. The last\n>> seen longpollid should be included by the client in future long poll\n>> requests. This enables the server to see if the client has missed any\n>> block changes. The ID could perhaps be submitted in an HTTP header\n>> (X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params\n>> could hold an object with a key \"longpollid\". Could be a string or\n>> number, like \"workid\".\n> \n> Hmm, the problem is that adding any parameters to getmemorypool itself breaks \n> compatibility with bitcoind 0.5, and using HTTP headers makes it HTTP-specific \n> again. Any ideas?\n\nI think long polling and reconnecting to LP is an HTTP-specific problem\nanyway? So it may be best to go with an HTTP header. See below for an\nidea for a capabilities reporting system, though, which would allow\nputting this data into JSON.\n\n>> Another useful value in the getmemorypool response would be \"height\", so\n>> the miner can include the correct height in the coinbase. I would like\n>> that in bitcoind as well. One JSON-RPC call instead of two, and no race\n>> condition between getmemorypool and getblocknumber.\n> \n> Good catch. Should this be required (since it might be necessary for future \n> Bitcoin blocks), or just \"should\" for compatibility?\n\nI think \"should\" makes sense.\n\n>> It should be explained how target vs. fulltarget works.\n> \n> What is unclear about this?\n\nReading through it again it is mostly clear except for one thing, how to\nsubmit \"share/merkle\" style. It doesn't say exactly how to submit this data.\n\nIt says merkle tree, but a merkle branch should suffice. Also, I believe\nthe coinbase must always be the first transaction of a block? So we\nwon't need the transaction's index in the merkle tree (it's always index\nzero). This would then be just an array of sha256 hashes making up the\nmerkle branch for the coinbase.\n\nI'd prefer if block header, coinbase tx and merkle branch were submitted\nin 3 pieces. When merged mining and submitting a block generating proof\nto the aux backend you put an auxiliary proof of work between the block\nheader and transactions. So the header and transactions are not\nnecessarily adjacent. Also, there's no merkle branch in a regular\nbitcoin block.\n\n>> Perhaps some things should be optional for a client to implement?\n> \n> Doing this safely needs some way for clients to communicate capabilities to \n> the server, which has the problem of passing parameters to getmemorypool.\n\nLet's add an optional \"servercapabilities\" key on the server side, the\nvalue being a space-delimited list of what's supported by the server. If\nthat list contains \"clientcapabilities\" then the client may, instead of\nsending an empty request, send an object where one of the keys is\n\"clientcapabilities\", and the value is a space-delimited list of extensions.\n\nThose names are a bit long, maybe \"caps\" is better.\n\nOk, this is not entirely clean. For the first request the client won't\nknow what the server supports. For subsequent requests I guess always\nassume the last caps the server reported.\n\n>> I think \"noncerange\" is of limited use and there's a good chance of getting\n>> the endianness wrong.\n> \n> There is no mining hardware to date that exhausts even half the nonce space, \n> so I'd really prefer to see this as a required feature on the miner side. On \n> the other hand, it's merely an extension for getwork, so I can see the problem \n> so long as we're using getwork proxies.\n\nYes, you can end up getting half a nonce range from an upstream server,\nand not being able to make use of it because your downstream clients\ndon't support it.\n\nA single GPU can make full use of the noncerange if you allow the\ntimestamp to slip a few seconds into the past. I believe most miners do\nthat today.\n\nAlso worth including are the \"hostlist\" and \"switchto\" getwork\nextensions. I think those can fit right into the JSON response, to keep\nwith being transport-agnostic, but otherwise look like they do for getwork.\n\nRegards,\nGeir H. Hansen"
            }
        ],
        "thread_summary": {
            "title": "getmemorypool BIP process",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Stefan Thomas",
                "Geir Harald Hansen",
                "Michael Gr\u00f8nager",
                "Luke-Jr"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 18286
        }
    },
    {
        "title": "[Bitcoin-development] P2SH status update",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2012-03-06T15:46:25",
                "message_text_only": "BIP16: 37% support vs 4% oppose\nBIP17:  4% support vs 0% oppose"
            },
            {
                "author": "slush",
                "date": "2012-03-06T17:34:15",
                "message_text_only": "Hi,\n\nis there any status update from Deepbit? Why he still does not support\nanything...\n\nslush\n\nOn Tue, Mar 6, 2012 at 4:46 PM, Luke-Jr <luke at dashjr.org> wrote:\n> BIP16: 37% support vs 4% oppose\n> BIP17: \u00a04% support vs 0% oppose\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-06T19:29:14",
                "message_text_only": "On Tuesday, March 06, 2012 12:34:15 PM slush wrote:\n> is there any status update from Deepbit? Why he still does not support\n> anything...\n\nI think nobody has discussed P2SH with Tycho recently, since the priority is \nto get BIP 30 deployed first."
            }
        ],
        "thread_summary": {
            "title": "P2SH status update",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "slush"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1136
        }
    },
    {
        "title": "[Bitcoin-development] [ANNOUNCE] BitCoinJ 0.4",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-03-09T14:50:02",
                "message_text_only": "I'm pleased to announce the release of BitCoinJ 0.4, the leading Java\nimplementation of the Bitcoin protocol. BitCoinJ implements simplified\npayment verification, a lightweight mode in which no central server or\nauthority is needed but the resource requirements are still low enough to\nbe usable on smartphones.\n\nThis version of the library is used in the new releases of Android Wallet\nand MultiBit.\n\nNew in this release <http://code.google.com/p/bitcoinj/wiki/ReleaseNotes>\n\n   - Ability to use \"getheaders\" to quickly catch up new users to the head\n   of the chain. This is a big performance win.\n   - ECKeys no longer require the private part, allowing for \"watching\n   wallets\" that cannot spend, but still gather and track the transactions\n   associated with the public keys.\n   - A new API that implements transaction confidences. Get a quick summary\n   or detailed information about how much confidence you can have that a given\n   transaction won't be reversed.\n   - A new DerbyBlockStore that stores block headers and related data in\n   the Apache Derby relational database.\n   - Protocol buffers are now a supported serialization format for the\n   wallet. This means BitCoinJ based protobuf wallets can be read and\n   manipulated by any language/platform with a protobufs implementation, which\n   is most of them. There are extension points in the format to allow third\n   parties to add new features.\n   - Various new event listeners that help you learn when the state of the\n   wallet or transactions change.\n   - Support for post February 20th version handshakes (most library users\n   already got this fix via backports)\n   - All event listeners are now allowed to remove themselves during their\n   own execution.\n   - New APIs that allow you to create offline transactions and then\n   broadcast them at a later point. Pending relevant transactions are recorded\n   and announced to all newly connected nodes, ensuring a transaction won't\n   \"get lost\" if there was flaky network connectivity at the time of creation.\n   Pending transactions are supported much better in this release than in\n   previous releases.\n   - Wallet now can now take an invalid transaction and complete it by\n   adding sufficient inputs and a change output. This enables the creation of\n   multi-sends, as well as making experimentation with contracts easier.\n   - Support for BIP 14: apps can now set their own \"user agent\" which will\n   be put in the subVer field along with the library version.\n   - Updated DNS seeds list.\n   - A new WalletTool program for command line usage, and a ToyWallet app\n   showing how to set everything up.\n   - Support parsing and checking of alert messages.\n   - New articles explaining how to use the library:\n      - Working with\ntransactions<http://code.google.com/p/bitcoinj/wiki/WorkingWithTransactions>\n      - Working with the\nwallet<http://code.google.com/p/bitcoinj/wiki/WorkingWithTheWallet>\n   - The usual assortment of bugfixes, new APIs, robustness and test suite\n   improvements.\n\nThanks to everyone who contributed to this release, in particular Andreas\nSchildbach, Miron Cuperman, Roman Maneleil, Chris Rico and Vasile Rotaru.\n\nIn the next release cycle, I'll be focusing on the following areas:\n\n   1. Real support for transaction fee calculations (most users apply a\n   custom patch for this today)\n   2. A better block chain API\n   3. Have the library manage save points for the wallet itself\n   4. Further chain download time optimizations\n   5. More support for moving apps onto \"work done\" as a confidence\n   measurement\n\nOf course contributors are welcome to work on whatever they want.\n\nthanks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120309/798140af/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BitCoinJ 0.4",
            "categories": [
                "Bitcoin-development",
                "ANNOUNCE"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3823
        }
    },
    {
        "title": "[Bitcoin-development] Paper up",
        "thread_messages": [
            {
                "author": "Watson Ladd",
                "date": "2012-03-11T23:52:06",
                "message_text_only": "Dear all,\nA draft of my paper is up at\nhttp://wbl.github.com/bitcoinanon.pdf\nComments are welcome, as is discussion about implications I haven't thought of.\nSincerely,\nWatson Ladd"
            }
        ],
        "thread_summary": {
            "title": "Paper up",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Watson Ladd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 179
        }
    },
    {
        "title": "[Bitcoin-development] Adding a pong message",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-03-13T18:06:38",
                "message_text_only": "https://github.com/bitcoin/bitcoin/pull/932 adds a \"pong\" message that\nechoes back a 64 bit nonce contained in the ping, if the protocol\nversion is new enough.\n\nThe goal of this is to make it easier for clients, especially mobile\nclients, to quickly check if a connection is stale, and also to see if\na remote node is overloaded so we can avoid talking to it. A common\ncase where this happens is if the remote node is itself downloading\nthe block chain or doing something equally intensive.\n\nAny objections?"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-13T18:45:08",
                "message_text_only": "On Tuesday, March 13, 2012 2:06:38 PM Mike Hearn wrote:\n> https://github.com/bitcoin/bitcoin/pull/932 adds a \"pong\" message that\n> echoes back a 64 bit nonce contained in the ping, if the protocol\n> version is new enough.\n> \n> The goal of this is to make it easier for clients, especially mobile\n> clients, to quickly check if a connection is stale, and also to see if\n> a remote node is overloaded so we can avoid talking to it. A common\n> case where this happens is if the remote node is itself downloading\n> the block chain or doing something equally intensive.\n> \n> Any objections?\n\nNot really an objection per se, but what's wrong with TCP keepalives?"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-03-13T19:48:02",
                "message_text_only": "On Tue, 2012-03-13 at 14:45 -0400, Luke-Jr wrote:\n> On Tuesday, March 13, 2012 2:06:38 PM Mike Hearn wrote:\n> > https://github.com/bitcoin/bitcoin/pull/932 adds a \"pong\" message that\n> > echoes back a 64 bit nonce contained in the ping, if the protocol\n> > version is new enough.\n> > \n> > The goal of this is to make it easier for clients, especially mobile\n> > clients, to quickly check if a connection is stale, and also to see if\n> > a remote node is overloaded so we can avoid talking to it. A common\n> > case where this happens is if the remote node is itself downloading\n> > the block chain or doing something equally intensive.\n> > \n> > Any objections?\n> \n> Not really an objection per se, but what's wrong with TCP keepalives?\n> \nIt wont tell you if the node itself is overloaded (not just the OS'\nnetwork stack).\n\nLooks good to me.\n\nMatt"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-03-13T22:29:27",
                "message_text_only": "TCP keep-alives aren't reliably implemented.\n\nI've got reports that sometimes we struggle to keep connection to the\nnetwork on mobile, eg, because we roam into an area with poor\nconnectivity but not poor enough for the network stack to drop access\nentirely. Being able to quickly check if the connection is really\nthere with some kind of bounded, app layer deadline is probably useful\nand besides, it's cheap."
            }
        ],
        "thread_summary": {
            "title": "Adding a pong message",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Mike Hearn",
                "Matt Corallo"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 2418
        }
    },
    {
        "title": "[Bitcoin-development] 0.6rc3 binaries available",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-13T18:46:50",
                "message_text_only": "Version 0.6 release candidate 3 binaries are available at:\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/\n\nThe big reason to run rc3 is to get the BIP30 security fix that takes\neffect on March 15.\n\nIt also includes a fix to the problem of running rc1, upgrading, and\nbeing stuck on the wrong block-chain fork\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "0.6rc3 binaries available",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 361
        }
    },
    {
        "title": "[Bitcoin-development] BIP 18 (or not?)",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-03-14T15:07:29",
                "message_text_only": "Hi,\n\nluke-jr withdrew BIP 16 and put forwards support for BIP 17. So now there's a consensus to move forwards.\n\nHowever he submitted BIP 18 to me today. From looking it over, I'm not even sure the idea is tenable nor see the purpose when we are adopting BIP 17. Personally I'd rather not see a high turnover in protocol design when something works (now that we have viable multisig transactions) even compromising on the position of a perfect design.\n\nhttps://en.bitcoin.it/wiki/BIP_0018\n\nUsually for a BIP, someone submits it to me, I review to see whether the idea is technically sound (not making judgements on the validity), the community discusses the idea and I evaluate the support at the end to change the status. In general I try to accept all BIPs in the interests of fairness, rather than holding a vote or being the executioner.\n\n\"Once the champion has asked the Bitcoin community as to whether an idea has any chance of acceptance, a draft BIP should be presented to\u00a0bitcoin-development at lists.sourceforge.net. This gives the author a chance to flesh out the draft BIP to make properly formatted, of high quality, and to address initial concerns about the proposal.\nFollowing a discussion, the proposal should be sent to the Bitcoin-dev list with the draft BIP and the BIP editors <BIPs at Bitcoin.org>. This draft must be written in BIP style as described below, else it will be sent back without further regard until proper formatting rules are followed.\"\n\nI don't think BIP 18 has followed this discussion before being accepted. Neither have many other BIPs as we're a small community, and so far we avoided this unneeded level of bureaucracy. However I think this is a good thing to do here.\n\nShould BIP 18 be accepted into the repo or not?\n\n\"The BIP editor will not unreasonably deny a BIP. Reasons for denying BIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin philosophy.\"\n\n\"For a BIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.\"\n\n(quotes from BIP 1)"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-03-14T15:20:43",
                "message_text_only": "> luke-jr withdrew BIP 16 and put forwards support for BIP 17.\n\nYou are so funny sometimes. xD\n\nOn 3/14/2012 4:07 PM, Amir Taaki wrote:\n> Hi,\n>\n> luke-jr withdrew BIP 16 and put forwards support for BIP 17. So now there's a consensus to move forwards.\n>\n> However he submitted BIP 18 to me today. From looking it over, I'm not even sure the idea is tenable nor see the purpose when we are adopting BIP 17. Personally I'd rather not see a high turnover in protocol design when something works (now that we have viable multisig transactions) even compromising on the position of a perfect design.\n>\n> https://en.bitcoin.it/wiki/BIP_0018\n>\n> Usually for a BIP, someone submits it to me, I review to see whether the idea is technically sound (not making judgements on the validity), the community discusses the idea and I evaluate the support at the end to change the status. In general I try to accept all BIPs in the interests of fairness, rather than holding a vote or being the executioner.\n>\n> \"Once the champion has asked the Bitcoin community as to whether an idea has any chance of acceptance, a draft BIP should be presented to bitcoin-development at lists.sourceforge.net. This gives the author a chance to flesh out the draft BIP to make properly formatted, of high quality, and to address initial concerns about the proposal.\n> Following a discussion, the proposal should be sent to the Bitcoin-dev list with the draft BIP and the BIP editors <BIPs at Bitcoin.org>. This draft must be written in BIP style as described below, else it will be sent back without further regard until proper formatting rules are followed.\"\n>\n> I don't think BIP 18 has followed this discussion before being accepted. Neither have many other BIPs as we're a small community, and so far we avoided this unneeded level of bureaucracy. However I think this is a good thing to do here.\n>\n> Should BIP 18 be accepted into the repo or not?\n>\n> \"The BIP editor will not unreasonably deny a BIP. Reasons for denying BIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin philosophy.\"\n>\n> \"For a BIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.\"\n>\n> (quotes from BIP 1)\n>\n> ------------------------------------------------------------------------------\n> Virtualization & Cloud Management Using Capacity Planning\n> Cloud computing makes use of virtualization - but cloud computing \n> also focuses on allowing computing to be delivered as a service.\n> http://www.accelacomm.com/jaw/sfnl/114/51521223/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "BIP 18 (or not?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Stefan Thomas",
                "Amir Taaki"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5365
        }
    },
    {
        "title": "[Bitcoin-development] April 1 BIP16 switchover time is definite",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-16T17:44:11",
                "message_text_only": "Support for BIP16 has been approximately 70% of hashing power for the\nlast two days, and is 54% over the last week, so we're going to\nannounce that the BIP16 switchover time of April 1 is final and\nstrongly encourage any pools/miners that haven't yet upgraded their\nsoftware to do so in the next two weeks or risk hashing on a minority\nchain.\n\nI'll be checking to make sure support doesn't slip before April 1.\n\nI've learned a lot, and have started writing up a document that\nsuggests how we can make the next upgrade process less painful for\neverybody; when I've got a reasonable draft I'll start a discussion\nabout it here.\n\n-- \n--\nGavin Andresen\n\n\nPS: If you're curious, here is what support over the last 30 days\nlooks like, beginning with the last 24 hours (144 blocks) and going\nbackwards for each 24 hour period:\n\nFound 103 matches in 144 blocks (71.5 percent)\nFound 99 matches in 144 blocks (68.8 percent)\nFound 87 matches in 144 blocks (60.4 percent)\nFound 70 matches in 144 blocks (48.6 percent)\nFound 73 matches in 144 blocks (50.7 percent)\nFound 57 matches in 144 blocks (39.6 percent)\nFound 52 matches in 144 blocks (36.1 percent)\nFound 40 matches in 144 blocks (27.8 percent)\nFound 40 matches in 144 blocks (27.8 percent)\nFound 46 matches in 144 blocks (31.9 percent)\nFound 41 matches in 144 blocks (28.5 percent)\nFound 45 matches in 144 blocks (31.2 percent)\nFound 57 matches in 144 blocks (39.6 percent)\nFound 69 matches in 144 blocks (47.9 percent)\nFound 51 matches in 144 blocks (35.4 percent)\nFound 53 matches in 144 blocks (36.8 percent)\nFound 65 matches in 144 blocks (45.1 percent)\nFound 43 matches in 144 blocks (29.9 percent)\nFound 48 matches in 144 blocks (33.3 percent)\nFound 51 matches in 144 blocks (35.4 percent)\nFound 46 matches in 144 blocks (31.9 percent)\nFound 57 matches in 144 blocks (39.6 percent)\nFound 61 matches in 144 blocks (42.4 percent)\nFound 54 matches in 144 blocks (37.5 percent)\nFound 53 matches in 144 blocks (36.8 percent)\nFound 44 matches in 144 blocks (30.6 percent)\nFound 52 matches in 144 blocks (36.1 percent)\nFound 51 matches in 144 blocks (35.4 percent)\nFound 53 matches in 144 blocks (36.8 percent)\n\nCommand used to get that data:\n  for i in {1..30}; do ./search_coinbases.py --n=$(($i * 144))\n--start=$(( ($i -1) * 144)); done\n\nsearch_coinbases is one of my bitcointools:\n  https://github.com/gavinandresen/bitcointools\n\nPretty graph of support over the last 100 blocks here:\n  github.com/bitcoin/bitcoin/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-03-16T17:45:27",
                "message_text_only": "> Pretty graph of support over the last 100 blocks here:\n> \u00a0github.com/bitcoin/bitcoin/\n\nD'oh!  correct url for the pretty graph:\n  http://blockchain.info/P2SH\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "April 1 BIP16 switchover time is definite",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2645
        }
    },
    {
        "title": "[Bitcoin-development] Urgent: Windows Bitcoin-Qt update",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-17T00:14:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nA potential security vulnerability has been discovered in the Windows\nversion of Bitcoin-Qt. If you are running Bitcoin-Qt versions 0.5\nthrough 0.6 on Windows you should shut it down and upgrade to either\nversion 0.5.3.1 or 0.6rc4 NOW.\n\nThe command-line bitcoin daemon (bitcoind), Mac and Linux versions of\nBitcoin-Qt, and versions prior to 0.5 are not affected.\n\nDue to the nature of the vulnerability, we believe it would be very\ndifficult for an attacker to do anything more than crash the\nBitcoin-Qt process. However, because there is a possibility of such a\ncrash causing remote code execution we consider this a critical issue.\n\nBinaries are available at SourceForge:\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/\n\nIf you have questions, feel free to drop by the #bitcoin-dev channel\non FreeNode IRC.\n\n- --\nGavin Andresen\nGregory Maxwell\nMatt Corallo\nNils Schneider\nWladimir J. van der Laan\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (Darwin)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n\niEYEARECAAYFAk9j12IACgkQdYgkL74406iIyQCfbxFTO3yD4Q2bHDjPlDuJn3Mj\n9GAAn3mV+ggo+5q1Ujd0A5zwpFYojkE2\n=g1Ad\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Urgent: Windows Bitcoin-Qt update",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1300
        }
    },
    {
        "title": "[Bitcoin-development] BIP 16 changes (list inside)",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-03-18T14:04:27",
                "message_text_only": "Hi,\n\nIs this an accurate and precise summary of the changes needed for P2SH and BIP 16?\n\n== Block validation (starting with ProcessBlock) ==\n\n* SigOpCount is now a LegacySigOpCount (CheckBlock)\n* Main body of AcceptBlock() and rest of ProcessBlock() is unchanged.\n* AddToBlockIndex() unchanged\n* Some nice efficient improvements to SetBestChain(), but not related to BIP 16\n* ConnectBlock() has new SigOp calculation.\n* No important changes to FetchInputs()/ConnectInputs()\n\n== Script ==\n\n* Solver has special case to check for TX_SCRIPTHASH. Returns hash of input eval script\n* Another Solver which a) returns signature of pubkey script or b) TX_SCRIPTHASH - finds redeem script in KeyStore and returns it.\n* ExtractAddress(es)\n* VerifyScript:\n** After running input script (scriptSig), copy stack\n** Evaluate script as normal\n** if block date (fValidatePayToScriptHash) and output script (scriptPubKey) is P2SH:\n*** scriptSig must be only push operations\n*** evaluate last item of copied stack as a script using the copied stack as the stack\n* SigOpCount (used inside CBlock::ConnectBlock main loop) does scoring checksigs and multisigs.\n** Newly added DecodeOP_N to normal SigOpCount\n\n== Address ==\n\n* Set main hash160 data with a beginning byte (nVersion) of 0x05"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-18T18:11:48",
                "message_text_only": "On Sunday, March 18, 2012 10:04:27 AM Amir Taaki wrote:\n> Is this an accurate and precise summary of the changes needed for P2SH and\n> BIP 16?\n\nYou might find my 0.4.x backport helpful:\n    https://github.com/luke-jr/bitcoin/commit/bip16_0.4.x\nBe aware, this still needs auditing (nobody else has looked it over), but I \nbelieve should cover only the minimal changes required to get P2SH validation \n(though not the \"standard\" rule changes to accept them into blocks)."
            }
        ],
        "thread_summary": {
            "title": "BIP 16 changes (list inside)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Amir Taaki"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1735
        }
    },
    {
        "title": "[Bitcoin-development] A better Spanish translation for vulnerability page",
        "thread_messages": [
            {
                "author": "Jean-Pierre Rupp",
                "date": "2012-03-19T07:28:55",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nUna potencial falla de seguridad ha sido descubierta en  Bitcoin-Qt\npara Windows. Si tienes Bitcoin-Qt para Windows en alguna versi\u00f3n\nentre 0.5 y 0.6, deber\u00edas salir del programa, y actualizar a la\nversi\u00f3n 0.5.3.1 o 0.6rc4 AHORA.\n\nLa aplicaci\u00f3n de l\u00ednea de comandos (bitcoind), las versiones Mac y\nLinux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est\u00e1n afectadas.\n\nDebido a la naturaleza de esta falla, creemos que ser\u00eda muy dif\u00edcil\npara un atacante hacer algo m\u00e1s que colgar (cerrar) el proceso de\nBitcoin-Qt. Sin embargo, porque existe la posibilidad que un cierre\ninesperado permita la ejecuci\u00f3n de c\u00f3digo remoto, consideramos esto un\nincidente cr\u00edtico.\n\nSi tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.\n\nPuedes descargar el software actualizado desde SourceForge:\n0.6rc\n[https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]\n0.5.3.1 para Windows y 0.5.3 para Linux\n[https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]\n\n- -- \nBe Happy\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n\niEYEARECAAYFAk9m4DYACgkQ77Wxq1L+vC74wgCfX4kF+BiKjO51UOgZmRib4kMP\nW6sAn016/jDXOfV/WeonqtqB3GuhzG+t\n=pqWY\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-03-19T09:35:56",
                "message_text_only": "Hi, I've made some corrections.\n\nSe ha descubierto un fallo potencial de seguridad en Bitcoin-Qt\n para Windows. Si tienes Bitcoin-Qt para Windows en alguna versi\u00f3n\n entre 0.5 y 0.6, deber\u00edas salir del programa, y actualizar a la\n versi\u00f3n 0.5.3.1 o 0.6rc4 AHORA.\n\n La aplicaci\u00f3n de l\u00ednea de comandos (bitcoind), las versiones Mac y\n Linux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est\u00e1n afectadas.\n\n Debido a la naturaleza de este fallo, creemos que ser\u00eda muy dif\u00edcil\n para un atacante hacer algo m\u00e1s que bloquear el proceso de\n Bitcoin-Qt. Sin embargo, debido a que existe la posibilidad de que un cierre\n inesperado permita la ejecuci\u00f3n de c\u00f3digo remoto, consideramos esto una\n incidencia cr\u00edtica.\n\n Si tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.\n\nPuedes descargar el software actualizado desde SourceForge:\n 0.6rc\n [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]\n 0.5.3.1 para Windows y 0.5.3 para Linux\n [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]\n\nHope this helps\n\n\nOn 3/19/12, Jean-Pierre Rupp <jpierre at xeno-genesis.com> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Una potencial falla de seguridad ha sido descubierta en  Bitcoin-Qt\n> para Windows. Si tienes Bitcoin-Qt para Windows en alguna versi\u00f3n\n> entre 0.5 y 0.6, deber\u00edas salir del programa, y actualizar a la\n> versi\u00f3n 0.5.3.1 o 0.6rc4 AHORA.\n>\n> La aplicaci\u00f3n de l\u00ednea de comandos (bitcoind), las versiones Mac y\n> Linux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est\u00e1n afectadas.\n>\n> Debido a la naturaleza de esta falla, creemos que ser\u00eda muy dif\u00edcil\n> para un atacante hacer algo m\u00e1s que colgar (cerrar) el proceso de\n> Bitcoin-Qt. Sin embargo, porque existe la posibilidad que un cierre\n> inesperado permita la ejecuci\u00f3n de c\u00f3digo remoto, consideramos esto un\n> incidente cr\u00edtico.\n>\n> Si tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.\n>\n> Puedes descargar el software actualizado desde SourceForge:\n> 0.6rc\n> [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]\n> 0.5.3.1 para Windows y 0.5.3 para Linux\n> [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]\n>\n> - --\n> Be Happy\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.11 (GNU/Linux)\n> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n>\n> iEYEARECAAYFAk9m4DYACgkQ77Wxq1L+vC74wgCfX4kF+BiKjO51UOgZmRib4kMP\n> W6sAn016/jDXOfV/WeonqtqB3GuhzG+t\n> =pqWY\n> -----END PGP SIGNATURE-----\n>\n> ------------------------------------------------------------------------------\n> This SF email is sponsosred by:\n> Try Windows Azure free for 90 days Click Here\n> http://p.sf.net/sfu/sfd2d-msazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n"
            }
        ],
        "thread_summary": {
            "title": "A better Spanish translation for vulnerability page",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Jean-Pierre Rupp"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4248
        }
    },
    {
        "title": "[Bitcoin-development] Full disclosure on the Bitcoin-Qt on Windows problem",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-19T16:07:13",
                "message_text_only": "Reposting from my tech blog:\n  http://gavintech.blogspot.com/2012/03/full-disclosure-bitcoin-qt-on-windows.html\n\n----------------\n\nA major bug in Bitcoin-Qt on Windows went unnoticed for over four\nmonths. The bug was in the bitcoin-qt.pro file, in these two lines of\ncode:\n  windows:LIBS += -lws2_32 -lshlwapi\n  windows:DEFINES += WIN32\nSee the bug?\n\nI don't-- I can't see it, because the problem was Bitcoin-Qt on\nWindows should have been linked with the \"mingw\" multithreading\nlibrary and compiled with the -D_MT to turn on support for\nmultithread-safe C++ exception handling in the \"mingw\" library (you\ncan see the 3-line fix here).\n\nThere might be developers reading this who have had experience writing\nmultithreaded mingw-based C++ applications who will say \"Duh! You guys\nare idiots, everybody knows that!\"\n\nIf that's you and you're interested in Bitcoin:  we need people like\nyou to help out! Review the code, review the build process, let us\nknow when we're being idiots. There seem to be a lot fewer Windows\ndevelopers willing to help out with Bitcoin than Linux or Mac\ndevelopers, which is unfortunate since a majority of our downloads are\nWindows users.\n\n\nNon-mingw-C++-multithreaded developers are reading this and thinking\n\"the bug was THERE?  Not in some #ifdef WINDOWS C++ code or some\nslightly-out-of-date library that you were linking against?\"\n\n\nThe other reason this bug went unnoticed for so long is because it\nalmost never matters. Bitcoin-Qt doesn't throw a lot of exceptions\nnormally, and most of the time the single-threaded-application\nexception support in mingw works just fine. I'm still not sure exactly\nwhat triggers the bug-- probably something like two threads throwing\nexceptions at the same time, or one thread being interrupted while in\na try{} block and then resuming later and crashing because the\nexception handling code is in a different state.\n\nMatt Corallo deserves a lot of credit for being persistent and finding\nthe bug when investigating hard-to-reproduce reports of Bitcoin-Qt\ncrashing sometimes when run with the -server flag and handling\nJSON-RPC requests. He was never able to get the code to crash when\nrunning outside of the debugger, which is typical of bugs related to\nmultithreading. But he did see crashes not involving RPC requests, and\nthat is why we consider this a critical issue and are telling\neverybody affected to upgrade immediately.\n\nIt it exploitable? Could an attacker craft bitcoin protocol messages\nthat triggered the bug and compromised Windows computers? Has it\nalready been exploited?\n\nWe don't know. We think it would be extremely difficult to craft a\nusable exploit, partly because it is hard to even trigger the bug\nreliably but also because Bitcoin-Qt has some security-in-depth to try\nto prevent this type of bug from becoming exploitable.\n\nIf we're very careful and extremely lucky, this will be the last time\nwe have to tell users to shutdown and upgrade immediately because of\nsome potential vulnerability. But there is no such thing as perfect\nsecurity, and I expect that there will be another subtle bug either in\nBitcoin or in one of the many libraries we link against that becomes a\npotential security issue.\n\nThat doesn't mean we give up and go back to paying each other with\ncowrie shells; it means we assume that devices get compromised and\ndesign around that assumption. I think that is a lesson that the\nentire software industry needs to learn better.\n\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "Full disclosure on the Bitcoin-Qt on Windows problem",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3464
        }
    },
    {
        "title": "[Bitcoin-development] Adding callback hooks to the satoshi client",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2012-03-22T05:13:13",
                "message_text_only": "Hey, guys.\n\nI've been writing a number of apps that require realtime event\nnotifications, where the JSON-RPC API clearly doesn't suffice.\n\nThere are two approaches I've been taking to this end:\n\n1) Writing my own library for dealing with raw bitcoin structures and\nconnecting to bitcoin nodes via the bitcoin protocol.\n2) Making custom builds of the satoshi client putting callback hooks\nin key points.\n\nNeither of these two approaches is ideal. (1) involves a lot of code\nduplication, (2) involves patching the satoshi client source\neach time I grab a later version, with the everpresent risk of\nsomething breaking and the need to continue maintaining these patches.\nMoreover, unfortunately many of these key points happen to be in files\nlike main.cpp which see frequent changes.\n\nI would like to propose adding these callback hooks to the main\nbranch. I am willing to help locate these key points, reorganize the\ncode\nto place these methods in separate source files, define a callback\nmechanism, and contribute source code.\n\n-Eric Lombrozo"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-03-22T05:24:11",
                "message_text_only": "I spent some time changing the internal bitcoin code to use callback\nhooks, but its far from complete (or even really usable from anything\nother than the code in the satoshi client itself, it doesnt even have\nany deregister methods!).  As it sits now, it is likely to get more\neyeballs and merged for 0.7.  If you need additional specific callbacks,\nadding them would be cool, though I wouldn't recommend relying on the\nblockstore API to remain even remotely stable for the foreseeable\nfuture.\n\nhttps://github.com/bitcoin/bitcoin/pull/771\n\nMatt\n\nOn Wed, 2012-03-21 at 22:13 -0700, Eric Lombrozo wrote:\n> Hey, guys.\n> \n> I've been writing a number of apps that require realtime event\n> notifications, where the JSON-RPC API clearly doesn't suffice.\n> \n> There are two approaches I've been taking to this end:\n> \n> 1) Writing my own library for dealing with raw bitcoin structures and\n> connecting to bitcoin nodes via the bitcoin protocol.\n> 2) Making custom builds of the satoshi client putting callback hooks\n> in key points.\n> \n> Neither of these two approaches is ideal. (1) involves a lot of code\n> duplication, (2) involves patching the satoshi client source\n> each time I grab a later version, with the everpresent risk of\n> something breaking and the need to continue maintaining these patches.\n> Moreover, unfortunately many of these key points happen to be in files\n> like main.cpp which see frequent changes.\n> \n> I would like to propose adding these callback hooks to the main\n> branch. I am willing to help locate these key points, reorganize the\n> code\n> to place these methods in separate source files, define a callback\n> mechanism, and contribute source code.\n> \n> -Eric Lombrozo"
            },
            {
                "author": "bitcoin-list at bluematt.me",
                "date": "2012-03-22T05:39:06",
                "message_text_only": "You might also want to check out libcoin. Its a fork of the satoshi client: https://github.com/ceptacle/libcoin\n\nMatt\n\nEric Lombrozo <elombrozo at gmail.com> wrote:\n\nHey, guys.\n\nI've been writing a number of apps that require realtime event\nnotifications, where the JSON-RPC API clearly doesn't suffice.\n\nThere are two approaches I've been taking to this end:\n\n1) Writing my own library for dealing with raw bitcoin structures and\nconnecting to bitcoin nodes via the bitcoin protocol.\n2) Making custom builds of the satoshi client putting callback hooks\nin key points.\n\nNeither of these two approaches is ideal. (1) involves a lot of code\nduplication, (2) involves patching the satoshi client source\neach time I grab a later version, with the everpresent risk of\nsomething breaking and the need to continue maintaining these patches.\nMoreover, unfortunately many of these key points happen to be in files\nlike main.cpp which see frequent changes.\n\nI would like to propose adding these callback hooks to the main\nbranch. I am willing to help locate these key points, reorganize the\ncode\nto place these methods in separate source files, define a callback\nmechanism, and contribute source code.\n\n-Eric Lombrozo\n\n_____________________________________________\n\nThis SF email is sponsosred by:\nTry Windows Azure free for 90 days Click Here \nhttp://p.sf.net/sfu/sfd2d-msazure\n_____________________________________________\n\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/a48c76bf/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-22T09:56:00",
                "message_text_only": "Hi Eric,\n\nWhat hooks are you looking for in particular ?\n\nlibcoin supports registration of listeners for new blocks and new transactions. These are e.g. used for connecting the Wallet to the Node.\n\nCheers,\n\nM\n\n\nOn 22/03/2012, at 06:39, bitcoin-list at bluematt.me wrote:\n\n> You might also want to check out libcoin. Its a fork of the satoshi client: https://github.com/ceptacle/libcoin\n> \n> Matt\n> \n> Eric Lombrozo <elombrozo at gmail.com> wrote:\n> Hey, guys.\n> \n> I've been writing a number of apps that require realtime event\n> notifications, where the JSON-RPC API clearly doesn't suffice.\n> \n> There are two approaches I've been taking to this end:\n> \n> 1) Writing my own library for dealing with raw bitcoin structures and\n> connecting to bitcoin nodes via the bitcoin protocol.\n> 2) Making custom builds of the satoshi client putting callback hooks\n> in key points.\n> \n> Neither of these two approaches is ideal. (1) involves a lot of code\n> duplication, (2) involves patching the satoshi client source\n> each time I grab a later version, with the everpresent risk of\n> something breaking and the need to continue maintaining these patches.\n> Moreover, unfortunately many of these key points happen to be in files\n> like main.cpp which see frequent changes.\n> \n> I would like to propose adding these\n> callback hooks to the main\n> \n> branch. I am willing to help locate these key points, reorganize the\n> code\n> to place these methods in separate source files, define a callback\n> mechanism, and contribute source code.\n> \n> -Eric Lombrozo\n> \n> \n> This SF email is sponsosred by:\n> Try Windows Azure free for 90 days Click Here \n> http://p.sf.net/sfu/sfd2d-msazure\n> \n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> ------------------------------------------------------------------------------\n> This SF email is sponsosred by:\n> Try Windows Azure free for 90 days Click Here \n> http://p.sf.net/sfu/sfd2d-msazure_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-03-22T14:00:40",
                "message_text_only": "On Thursday, March 22, 2012 1:13:13 AM Eric Lombrozo wrote:\n> I would like to propose adding these callback hooks to the main\n> branch. I am willing to help locate these key points, reorganize the\n> code to place these methods in separate source files, define a callback\n> mechanism, and contribute source code.\n\nI'm not sure it's a good idea to let other code into the main wallet-handling \nprocess/memory space. I'd suggest looking into designing a workable Wallet \nProtocol for general use between the wallet and GUIs/applications.\n\nhttps://en.bitcoin.it/wiki/Wallet_protocol has a draft I made a long time ago, \nbut really seems a bit overcomplicated."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2012-03-22T15:23:17",
                "message_text_only": "The callback architecture could be such that other code would never\nneed to enter into the wallet-handling process/memory space. For\ninstance, client applications could subscribe a particular URL to get\nsent an HTTP POST.\n\nFor the apps I've been working on, there really isn't any need to\naccess the wallet space. I was talking more about events like \"A new\ntransaction was just seen\" or \"A new block was just seen\", like what\nlibcoin seems to support (sorry, Michael, I haven't really had a\nchance to look at it in depth but I will). Then there are other types\nof events for other bitcoin messages could also be useful: new addr,\nnew node connected, node disconnected, bitcoin alert, etc...\n\nThen there are events for dealing with potential attacks: DoS attempt,\ndouble-spend attempts (two transactions seen with valid signatures\nclaiming the same output), node sending malformed messages, etc...\n\nAnd then there are alerts pertaining to the status of the bitcoind\nprocess itself: bitcoind started, bitcoind ready to accept\nconnections, bitcoind stopping, etc...\n\nNone of these events require the callback subscriber to have any\naccess to the bitcoind process/memory space and all the I/O could be\ndone via IPC or over network sockets."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2012-03-24T08:41:25",
                "message_text_only": "I'd also like to be able to get detailed information of message format\nerrors for debugging other nodes that connect to bitcoind. For\ninstance, if a transaction is rejected because the signature is\ninvalid, I want to know this. If it's because the amount is out of\nrange or because the output couldn't be connected, I want to know\nthis, too. I especially want to know if it was because the transaction\nis claiming an output that has already been claimed by another\ntransaction.\n\nFor now, I've had to resort to sticking tracers and stubs into\nbitcoind. It would be really nice to not only be able to write an\nerror log but to also let the connecting node know what went wrong.\nObviously these types of messages should *not* be part of the bitcoin\nprotocol itself since it invites all kinds of attacks. But it would be\nwonderful to have a side channel for this type of data, and it could\nalso be done using callbacks.\n\nThe callback mechanism could be configurable in a similar fashion to\nthe RPC in the bitcoin.conf file.\n\n-Eric Lombrozo"
            }
        ],
        "thread_summary": {
            "title": "Adding callback hooks to the satoshi client",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo",
                "Luke-Jr",
                "bitcoin-list at bluematt.me",
                "Michael Gr\u00f8nager",
                "Matt Corallo"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 9788
        }
    },
    {
        "title": "[Bitcoin-development] Announcement: libcoin",
        "thread_messages": [
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-03-22T10:48:29",
                "message_text_only": "Hi Michael,\n\n NOTE: Re-add bitcoin-dev to this thread on Cc...\n\n I'll test this ASAP! I REALLY need this feature (blockchain server <->\nwallet client).\n\n I just want ask you some things...\n\n 1- How close is Libcoin with original Bitcoin? I mean, the output is a\nlittle different, the bitcoind help output was disabled and, I'm afraid\nthat Libcoin can possibly being distant from Bitcoin in the future... That\ncan happen?!\n\n 2- Do you have plans to update Libcoin on every new upstream Bitcoin\nrelease? How fast will be this updates? Do you need more resources/people\nworking on it?\n\n\n Another questions not involved directly with Libcoin/Bitcoin but, I'll\nneed it for my future Bitcoin projects, and Libcoin is on my radar:\n\n 1- Do you know about Diaspora* Project?\n\n 2- Do you have skills in Ruby on Rails development?\n\n\nThank you!\nThiago\n\n2012/3/3 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> Hi Martin,\n>\n> There are a couple of options of doing similarly...\n>\n> In the libcoin repository you will find some code for btc and btcd, it is\n> some code I wrote a while ago and it needs to be updated. It functions as a\n> bitcoind master and slave. The btcd keeps the blockchain, but no wallet.\n> btc keeps the wallet and contact the btcd to get transaction info (like\n> send an address and get its transactions or send a transaction id and get\n> its details). It works (or worked when I wrote them) with the wallet.dat,\n> but needs a little update.\n>\n> You could e.g. run one btcd on the machine and several btc instances to\n> get the functionality you asked for.\n>\n> Further, btcd also enables a web wallet, where the private keys are stored\n> in your browsers local-store.\n>\n> I will get the application updated, but most likely in a bit other setup\n> as it is something I intend to marketize in the near future.\n>\n> Hope this answers your question.\n>\n> Cheers,\n>\n> Michael\n>\n> On 03/03/2012, at 02:04, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Michael,\n> >\n> > libcoin is AWESOME! Thanks!!!\n> >\n> > Can I do the following scenario with libcoin ? :\n> >\n> > 1- Create a regular Linux user called \"blockchain\", with home dir\n> pointed to /var/lib/libcoin/ (more or like Ubuntu/Debian mysql does);\n> >\n> > 2- Start \"bitcoind\" under user \"blockchain\" (the Bitcoin blockchain)\n> will be downloaded to /var/lib/libcoin/bitcoin/ directory);\n> >\n> > 3- As another regular user, called \"michael\", I would like to run\n> \"bitcoind\" too but, I do not want to re-download the blockchain to its own\n> subdir, I want instead, to consult it (blockchain) through libcoin itself\n> (not by socket of JSON)...\n> >\n> > So, the /home/michael/.bitcoin/ directory will have only wallet.dat and\n> related files, not the blockchain.\n> >\n> > This is more or less what we can do with Bitcoin Electrum alternate\n> client but, with Electrum, it copy the whole blockchain to mysql... This is\n> terrible from my point of view, I think that there is no need to duplicate\n> the blockchain within MySQL in anyway.\n> >\n> > I just imagine a bitcoin splited in two, blockchain in one side and\n> wallet in the other side.\n> >\n> > This is possible with libcoin?!\n> >\n> > Thank you again!\n> >\n> > Best,\n> > Thiago\n> >\n> > 2012/2/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi again - and thanks for testing and finding this!\n> >\n> > I have fixed the bug you reported:\n> >\n> > The culprit was an implicit string constructor for the ChainAddress that\n> caused creation of a not fully initialized ChainAddress. The right way to\n> do it is using chain::getAddress(string) as the ChainAddress is chain\n> specific.\n> >\n> > A git pull will fix it ;)\n> >\n> > Cheers,\n> >\n> > Michael\n> >\n> >\n> > On 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> AWESOME!! Thank you!!\n> >>\n> >> Anyway, I found a new problem... lol\n> >>\n> >> /usr/local/bin/bitcoind getinfo #okay\n> >> {\n> >>   \"version\" : 40001,\n> >>   \"blocks\" : 168753,\n> >>   \"connections\" : 8,\n> >>   \"difficulty\" : 1376302.26788638,\n> >>   \"testnet\" : false\n> >> }\n> >>\n> >> /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> >> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> >>\n> >> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> >> {\n> >> }\n> >>\n> >> /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> >> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> >>\n> >> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> >> {\n> >>   \"teste\" : 0.00000000\n> >> }\n> >>\n> >> Where is my default account listed at \"listaccounts\" output?!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >> 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >> And if you do an update now \"help\" is there too ;)\n> >>\n> >> /M\n> >>\n> >> On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>\n> >>> Thank you!!!\n> >>>\n> >>> It is all working now! Except \"help\"...\n> >>>\n> >>> Nice work Michael!!\n> >>>\n> >>> Best,\n> >>> Thiago\n> >>>\n> >>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>> OK - didn't took the weekend:\n> >>>\n> >>> support for \"port\" is on github now :)\n> >>>\n> >>> Only took two lines:\n> >>>\n> >>>         (\"port\", value<unsigned short>(&port)->default_value(8333),\n> \"Listen on specified port for the p2p protocol\")\n> >>>\n> >>> and using the port option in the Node constructor (was there already):\n> >>>\n> >>>     Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" :\n> \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the\n> use of a proxy!\n> >>>\n> >>> /M\n> >>>\n> >>>\n> >>>\n> >>> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>\n> >>>> Hi Michael,\n> >>>>\n> >>>> Thank you for your attention!\n> >>>>\n> >>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it\n> always try to listen at 8332, no matter what I \"say\"...\n> >>>>\n> >>>> Look:\n> >>>>\n> >>>> $ cat .bitcoin/bitcoin.conf\n> >>>> server=1\n> >>>> daemon=1\n> >>>> rpcuser=libcoin\n> >>>> rpcpassword=LibCoin13\n> >>>> rpcport=10332\n> >>>> port=10333\n> >>>>\n> >>>> But:\n> >>>>\n> >>>> /usr/local/bin/bitcoind\n> >>>> Error: Address already in use\n> >>>>\n> >>>> terminate called after throwing an instance of 'DbException'\n> >>>> what():  DbEnv::close: Invalid argument\n> >>>> Aborted\n> >>>>\n> >>>> When I \"strace it\", I can see:\n> >>>>\n> >>>> ...\n> >>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),\n> sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> >>>> ...\n> >>>>\n> >>>> I already tried:\n> >>>>\n> >>>> /usr/local/bin/bitcoind --rpcport 10332\n> >>>> /usr/local/bin/bitcoind --rpcport=10332\n> >>>>\n> >>>> Without success...\n> >>>>\n> >>>> Thanks again!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>> Hi Thiago,\n> >>>>\n> >>>> Forgot to comment on the two latter:\n> >>>>\n> >>>>> $ bitcoind getaccountaddress \"\"\n> >>>>> HTTP error code: 401\n> >>>>> Error: couldn't parse reply from server\n> >>>>>\n> >>>>> $ bitcoind listaccounts\n> >>>>> HTTP error code: 401\n> >>>>> Error: couldn't parse reply from server\n> >>>>>\n> >>>>\n> >>>> 401 = permission denied - you need to setup username / password\n> either on the commandline or in the bicoin.conf file to access those\n> commands...\n> >>>>\n> >>>> See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n> >>>>\n> >>>> Those that contains an \"auth\" requires auth:\n> >>>>\n> >>>>    server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >>>>\n> >>>> As opposed to:\n> >>>>\n> >>>>    server.registerMethod(method_ptr(new GetInfo(node)));\n> >>>>\n> >>>> auth is defined by:\n> >>>>\n> >>>>    Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not\n> set, all authenticated methods becomes disallowed.\n> >>>>\n> >>>> so you just experience the case explained in the comment ;) I admit\n> that the output could be more readable, though!\n> >>>>\n> >>>> /M\n> >>>>\n> >>>>\n> >>>>>\n> >>>>> Any tips?! lol\n> >>>>>\n> >>>>> Thanks!\n> >>>>> Thiago\n> >>>>>\n> >>>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> >>>>> AWESOME!!!\n> >>>>>\n> >>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >>>>>\n> >>>>> sudo aptitude install libboost1.46-all-dev\n> >>>>>\n> >>>>> ...alongside with another already installed dependencies, and now it\n> works!!\n> >>>>>\n> >>>>> Thank you!\n> >>>>> Thiago\n> >>>>>\n> >>>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>>> Hi Martinx,\n> >>>>>\n> >>>>> Another note:\n> >>>>>\n> >>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you\n> try to compile coinHTTP with that specific combination: sslv2 has been\n> removed from openssl, but boost still references it.)\n> >>>>>\n> >>>>> You should do a :\n> >>>>>\n> >>>>> sudo apt-get upgrade libboost-dev-all\n> >>>>>\n> >>>>> to get the 1.46.1 library\n> >>>>>\n> >>>>> /M\n> >>>>>\n> >>>>>\n> >>>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>>>\n> >>>>>> Hi Michael!\n> >>>>>>\n> >>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and\n> for the CryptoCurrencies as a hole... Thanks!!!\n> >>>>>>\n> >>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At\n> this machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> >>>>>>\n> >>>>>> ----\n> >>>>>> user at desk:~/libcoin$ ./configure\n> >>>>>> -- The C compiler identification is GNU\n> >>>>>> -- The CXX compiler identification is GNU\n> >>>>>> -- Check for working C compiler: /usr/bin/gcc\n> >>>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> >>>>>> -- Detecting C compiler ABI info\n> >>>>>> -- Detecting C compiler ABI info - done\n> >>>>>> -- Check for working CXX compiler: /usr/bin/c++\n> >>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >>>>>> -- Detecting CXX compiler ABI info\n> >>>>>> -- Detecting CXX compiler ABI info - done\n> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >>>>>> -- Looking for pthread_create in pthreads\n> >>>>>> -- Looking for pthread_create in pthreads - not found\n> >>>>>> -- Looking for pthread_create in pthread\n> >>>>>> -- Looking for pthread_create in pthread - found\n> >>>>>> -- Found Threads: TRUE\n> >>>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >>>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >>>>>> -- Looking for gethostbyname\n> >>>>>> -- Looking for gethostbyname - found\n> >>>>>> -- Looking for connect\n> >>>>>> -- Looking for connect - found\n> >>>>>> -- Looking for remove\n> >>>>>> -- Looking for remove - found\n> >>>>>> -- Looking for shmat\n> >>>>>> -- Looking for shmat - found\n> >>>>>> -- Looking for IceConnectionNumber in ICE\n> >>>>>> -- Looking for IceConnectionNumber in ICE - found\n> >>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >>>>>> -- Boost version: 1.42.0\n> >>>>>> -- Found the following Boost libraries:\n> >>>>>> --   date_time\n> >>>>>> --   regex\n> >>>>>> --   filesystem\n> >>>>>> --   system\n> >>>>>> --   program_options\n> >>>>>> --   thread\n> >>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >>>>>> -- Looking for Q_WS_X11\n> >>>>>> -- Looking for Q_WS_X11 - found\n> >>>>>> -- Looking for Q_WS_WIN\n> >>>>>> -- Looking for Q_WS_WIN - not found.\n> >>>>>> -- Looking for Q_WS_QWS\n> >>>>>> -- Looking for Q_WS_QWS - not found.\n> >>>>>> -- Looking for Q_WS_MAC\n> >>>>>> -- Looking for Q_WS_MAC - not found.\n> >>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >>>>>> -- Found wxWidgets: TRUE\n> >>>>>>\n> >>>>>> The build system is configured to install libraries to\n> /usr/local/lib\n> >>>>>> Your applications may not be able to find your installed libraries\n> unless you:\n> >>>>>> set your LD_LIBRARY_PATH (user specific) or\n> >>>>>> update your ld.so configuration (system wide)\n> >>>>>> You have an ld.so.conf.d directory on your system, so if you wish\n> to ensure that\n> >>>>>> applications find the installed libcoin libraries, system wide, you\n> could install an\n> >>>>>> libcoin specific ld.so configuration with:\n> >>>>>> sudo make install_ld_conf\n> >>>>>>\n> >>>>>> -- Configuring done\n> >>>>>> -- Generating done\n> >>>>>> -- Build files have been written to: /home/user/libcoin\n> >>>>>> ----\n> >>>>>>\n> >>>>>> Now I tried make, without success:\n> >>>>>>\n> >>>>>> ----\n> >>>>>> .....\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum\n> const&, unsigned int)':\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x16): undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum\n> const&, unsigned int)':\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xf): undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum\n> const&, CBigNum const&)':\n> >>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum\n> const&, CBigNum const&)':\n> >>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> >>>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> >>>>>> collect2: ld returned 1 exit status\n> >>>>>> make[2]: *** [bin/bitcoind] Error 1\n> >>>>>> make[1]: ***\n> [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> >>>>>> make: *** [all] Error 2\n> >>>>>> -----\n> >>>>>>\n> >>>>>> What can I do?!\n> >>>>>>\n> >>>>>> Best,\n> >>>>>> Thiago\n> >>>>>>\n> >>>>>>\n> >>>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> >>>>>> Dear Bitcoiners,\n> >>>>>>\n> >>>>>> libcoin is now in a state ready for its first release, which I\n> would like to share with you!\n> >>>>>>\n> >>>>>> === libcoin is a crypto currency library based on the\n> bitcoin/bitcoin \"Satoshi\" client. ===\n> >>>>>>\n> >>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the\n> release of the first version of the crypto currency library \"libcoin\" based\n> on the bitcoin/bitcoin \"Satoshi\" client.\n> >>>>>>\n> >>>>>> libcoin also maintains a version of bitcoind that is a 100%\n> compatible drop-in replacement of the bitcoin/bitcoind client: You can use\n> it on the same computer on the same files and you can call it with the same\n> scripts. And you can easily extend it without touching the basic bitcoin\n> source files.\n> >>>>>>\n> >>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5\n> times faster than the bitcoin/bitcoind client. This is less than 90 minutes\n> on a modern laptop!\n> >>>>>>\n> >>>>>> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> >>>>>>\n> >>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> >>>>>>\n> >>>>>> The build system of libcoin is based on CMake and supports builds\n> of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>>>>>\n> >>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in\n> open source as well as in commercial projects, but improvements should go\n> back into the libcoin library.\n> >>>>>>\n> >>>>>> ======\n> >>>>>>\n> >>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>>>>>\n> >>>>>> Join libcoin on twitter: http://twitter.com/libcoin\n> >>>>>>\n> >>>>>> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>>>>>\n> >>>>>> Best regards,\n> >>>>>>\n> >>>>>> Michael Gronager, PhD\n> >>>>>> Director, Ceptacle\n> >>>>>> Jens Juels Gade 33\n> >>>>>> 2100 Copenhagen E\n> >>>>>> Mobile: +45 31 45 14 01\n> >>>>>> E-mail: gronager at ceptacle.com\n> >>>>>> Web: http://www.ceptacle.com/\n> >>>>>>\n> >>>>>>\n> >>>>>>\n> ------------------------------------------------------------------------------\n> >>>>>> Keep Your Developer Skills Current with LearnDevNow!\n> >>>>>> The most comprehensive online learning library for Microsoft\n> developers\n> >>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n> MVC3,\n> >>>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n> >>>>>> http://p.sf.net/sfu/learndevnow-d2d\n> >>>>>> _______________________________________________\n> >>>>>> Bitcoin-development mailing list\n> >>>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>>\n> >>>>>\n> >>>>> Michael Gronager, PhD\n> >>>>> Director, Ceptacle\n> >>>>> Jens Juels Gade 33\n> >>>>> 2100 Copenhagen E\n> >>>>> Mobile: +45 31 45 14 01\n> >>>>> E-mail: gronager at ceptacle.com\n> >>>>> Web: http://www.ceptacle.com/\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>\n> >>>>\n> >>>\n> >>> Michael Gronager, PhD\n> >>> Director, Ceptacle\n> >>> Jens Juels Gade 33\n> >>> 2100 Copenhagen E\n> >>> Mobile: +45 31 45 14 01\n> >>> E-mail: gronager at ceptacle.com\n> >>> Web: http://www.ceptacle.com/\n> >>>\n> >>>\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/5b5eff87/attachment.html>"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-03-22T10:50:23",
                "message_text_only": "Michael,\n\n Since libcoin is \"chain agnostic\", I was wondering if the project can be\nused like this:\n\n When I install it with \"make install\", I would like to have something like\nthis:\n\n Regular file: /usr/local/bin/libcoincore # or whatever you like\n\n Symlink -> Regular file\n\n /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a\nsymlink to libcoincore\n\n /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is a\nsymlink to libcoincore\n\n /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a\nsymlink to libcoincore\n\n /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is a\nsymlink to libcoincore\n\n ...and so on...\n\n So, libcoincore will interpret the ARGV[0] and, for each string, it will\ninitiate the appropriate internal functions...\n\n I don't know if Libcoin already does something like that... I'm not a\ndeveloper/code reader... Just a small nerd with big ideas...  ^_^\n\nThanks!\nThiago\n\n2012/2/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> Hi again - and thanks for testing and finding this!\n>\n> I have fixed the bug you reported:\n>\n> The culprit was an implicit string constructor for the ChainAddress that\n> caused creation of a not fully initialized ChainAddress. The right way to\n> do it is using chain::getAddress(string) as the ChainAddress is chain\n> specific.\n>\n> A git pull will fix it ;)\n>\n> Cheers,\n>\n> Michael\n>\n>\n> On 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > AWESOME!! Thank you!!\n> >\n> > Anyway, I found a new problem... lol\n> >\n> > /usr/local/bin/bitcoind getinfo #okay\n> > {\n> >    \"version\" : 40001,\n> >    \"blocks\" : 168753,\n> >    \"connections\" : 8,\n> >    \"difficulty\" : 1376302.26788638,\n> >    \"testnet\" : false\n> > }\n> >\n> > /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> >\n> > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > {\n> > }\n> >\n> > /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> >\n> > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > {\n> >    \"teste\" : 0.00000000\n> > }\n> >\n> > Where is my default account listed at \"listaccounts\" output?!\n> >\n> > Best,\n> > Thiago\n> >\n> > 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > And if you do an update now \"help\" is there too ;)\n> >\n> > /M\n> >\n> > On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Thank you!!!\n> >>\n> >> It is all working now! Except \"help\"...\n> >>\n> >> Nice work Michael!!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >> OK - didn't took the weekend:\n> >>\n> >> support for \"port\" is on github now :)\n> >>\n> >> Only took two lines:\n> >>\n> >>          (\"port\", value<unsigned short>(&port)->default_value(8333),\n> \"Listen on specified port for the p2p protocol\")\n> >>\n> >> and using the port option in the Node constructor (was there already):\n> >>\n> >>      Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" :\n> \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the\n> use of a proxy!\n> >>\n> >> /M\n> >>\n> >>\n> >>\n> >> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>\n> >>> Hi Michael,\n> >>>\n> >>> Thank you for your attention!\n> >>>\n> >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it\n> always try to listen at 8332, no matter what I \"say\"...\n> >>>\n> >>> Look:\n> >>>\n> >>> $ cat .bitcoin/bitcoin.conf\n> >>> server=1\n> >>> daemon=1\n> >>> rpcuser=libcoin\n> >>> rpcpassword=LibCoin13\n> >>> rpcport=10332\n> >>> port=10333\n> >>>\n> >>> But:\n> >>>\n> >>> /usr/local/bin/bitcoind\n> >>> Error: Address already in use\n> >>>\n> >>> terminate called after throwing an instance of 'DbException'\n> >>> what():  DbEnv::close: Invalid argument\n> >>> Aborted\n> >>>\n> >>> When I \"strace it\", I can see:\n> >>>\n> >>> ...\n> >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),\n> sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> >>> ...\n> >>>\n> >>> I already tried:\n> >>>\n> >>> /usr/local/bin/bitcoind --rpcport 10332\n> >>> /usr/local/bin/bitcoind --rpcport=10332\n> >>>\n> >>> Without success...\n> >>>\n> >>> Thanks again!\n> >>> Thiago\n> >>>\n> >>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>> Hi Thiago,\n> >>>\n> >>> Forgot to comment on the two latter:\n> >>>\n> >>>> $ bitcoind getaccountaddress \"\"\n> >>>> HTTP error code: 401\n> >>>> Error: couldn't parse reply from server\n> >>>>\n> >>>> $ bitcoind listaccounts\n> >>>> HTTP error code: 401\n> >>>> Error: couldn't parse reply from server\n> >>>>\n> >>>\n> >>> 401 = permission denied - you need to setup username / password either\n> on the commandline or in the bicoin.conf file to access those commands...\n> >>>\n> >>> See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n> >>>\n> >>> Those that contains an \"auth\" requires auth:\n> >>>\n> >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >>>\n> >>> As opposed to:\n> >>>\n> >>>     server.registerMethod(method_ptr(new GetInfo(node)));\n> >>>\n> >>> auth is defined by:\n> >>>\n> >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not\n> set, all authenticated methods becomes disallowed.\n> >>>\n> >>> so you just experience the case explained in the comment ;) I admit\n> that the output could be more readable, though!\n> >>>\n> >>> /M\n> >>>\n> >>>\n> >>>>\n> >>>> Any tips?! lol\n> >>>>\n> >>>> Thanks!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> >>>> AWESOME!!!\n> >>>>\n> >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >>>>\n> >>>> sudo aptitude install libboost1.46-all-dev\n> >>>>\n> >>>> ...alongside with another already installed dependencies, and now it\n> works!!\n> >>>>\n> >>>> Thank you!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>> Hi Martinx,\n> >>>>\n> >>>> Another note:\n> >>>>\n> >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you\n> try to compile coinHTTP with that specific combination: sslv2 has been\n> removed from openssl, but boost still references it.)\n> >>>>\n> >>>> You should do a :\n> >>>>\n> >>>> sudo apt-get upgrade libboost-dev-all\n> >>>>\n> >>>> to get the 1.46.1 library\n> >>>>\n> >>>> /M\n> >>>>\n> >>>>\n> >>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>>\n> >>>>> Hi Michael!\n> >>>>>\n> >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n> the CryptoCurrencies as a hole... Thanks!!!\n> >>>>>\n> >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At\n> this machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> >>>>>\n> >>>>> ----\n> >>>>> user at desk:~/libcoin$ ./configure\n> >>>>> -- The C compiler identification is GNU\n> >>>>> -- The CXX compiler identification is GNU\n> >>>>> -- Check for working C compiler: /usr/bin/gcc\n> >>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> >>>>> -- Detecting C compiler ABI info\n> >>>>> -- Detecting C compiler ABI info - done\n> >>>>> -- Check for working CXX compiler: /usr/bin/c++\n> >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >>>>> -- Detecting CXX compiler ABI info\n> >>>>> -- Detecting CXX compiler ABI info - done\n> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >>>>> -- Looking for pthread_create in pthreads\n> >>>>> -- Looking for pthread_create in pthreads - not found\n> >>>>> -- Looking for pthread_create in pthread\n> >>>>> -- Looking for pthread_create in pthread - found\n> >>>>> -- Found Threads: TRUE\n> >>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >>>>> -- Looking for gethostbyname\n> >>>>> -- Looking for gethostbyname - found\n> >>>>> -- Looking for connect\n> >>>>> -- Looking for connect - found\n> >>>>> -- Looking for remove\n> >>>>> -- Looking for remove - found\n> >>>>> -- Looking for shmat\n> >>>>> -- Looking for shmat - found\n> >>>>> -- Looking for IceConnectionNumber in ICE\n> >>>>> -- Looking for IceConnectionNumber in ICE - found\n> >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >>>>> -- Boost version: 1.42.0\n> >>>>> -- Found the following Boost libraries:\n> >>>>> --   date_time\n> >>>>> --   regex\n> >>>>> --   filesystem\n> >>>>> --   system\n> >>>>> --   program_options\n> >>>>> --   thread\n> >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >>>>> -- Looking for Q_WS_X11\n> >>>>> -- Looking for Q_WS_X11 - found\n> >>>>> -- Looking for Q_WS_WIN\n> >>>>> -- Looking for Q_WS_WIN - not found.\n> >>>>> -- Looking for Q_WS_QWS\n> >>>>> -- Looking for Q_WS_QWS - not found.\n> >>>>> -- Looking for Q_WS_MAC\n> >>>>> -- Looking for Q_WS_MAC - not found.\n> >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >>>>> -- Found wxWidgets: TRUE\n> >>>>>\n> >>>>> The build system is configured to install libraries to /usr/local/lib\n> >>>>> Your applications may not be able to find your installed libraries\n> unless you:\n> >>>>>  set your LD_LIBRARY_PATH (user specific) or\n> >>>>>  update your ld.so configuration (system wide)\n> >>>>> You have an ld.so.conf.d directory on your system, so if you wish to\n> ensure that\n> >>>>> applications find the installed libcoin libraries, system wide, you\n> could install an\n> >>>>> libcoin specific ld.so configuration with:\n> >>>>>  sudo make install_ld_conf\n> >>>>>\n> >>>>> -- Configuring done\n> >>>>> -- Generating done\n> >>>>> -- Build files have been written to: /home/user/libcoin\n> >>>>> ----\n> >>>>>\n> >>>>> Now I tried make, without success:\n> >>>>>\n> >>>>> ----\n> >>>>> .....\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum\n> const&, unsigned int)':\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x16): undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum\n> const&, unsigned int)':\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xf): undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum\n> const&, CBigNum const&)':\n> >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum\n> const&, CBigNum const&)':\n> >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> >>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> >>>>> collect2: ld returned 1 exit status\n> >>>>> make[2]: *** [bin/bitcoind] Error 1\n> >>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n> Error 2\n> >>>>> make: *** [all] Error 2\n> >>>>> -----\n> >>>>>\n> >>>>> What can I do?!\n> >>>>>\n> >>>>> Best,\n> >>>>> Thiago\n> >>>>>\n> >>>>>\n> >>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> >>>>> Dear Bitcoiners,\n> >>>>>\n> >>>>> libcoin is now in a state ready for its first release, which I would\n> like to share with you!\n> >>>>>\n> >>>>> === libcoin is a crypto currency library based on the\n> bitcoin/bitcoin \"Satoshi\" client. ===\n> >>>>>\n> >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the\n> release of the first version of the crypto currency library \"libcoin\" based\n> on the bitcoin/bitcoin \"Satoshi\" client.\n> >>>>>\n> >>>>> libcoin also maintains a version of bitcoind that is a 100%\n> compatible drop-in replacement of the bitcoin/bitcoind client: You can use\n> it on the same computer on the same files and you can call it with the same\n> scripts. And you can easily extend it without touching the basic bitcoin\n> source files.\n> >>>>>\n> >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5\n> times faster than the bitcoin/bitcoind client. This is less than 90 minutes\n> on a modern laptop!\n> >>>>>\n> >>>>> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> >>>>>\n> >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> >>>>>\n> >>>>> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>>>>\n> >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in\n> open source as well as in commercial projects, but improvements should go\n> back into the libcoin library.\n> >>>>>\n> >>>>> ======\n> >>>>>\n> >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>>>>\n> >>>>> Join libcoin on twitter: http://twitter.com/libcoin\n> >>>>>\n> >>>>> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>>>>\n> >>>>> Best regards,\n> >>>>>\n> >>>>> Michael Gronager, PhD\n> >>>>> Director, Ceptacle\n> >>>>> Jens Juels Gade 33\n> >>>>> 2100 Copenhagen E\n> >>>>> Mobile: +45 31 45 14 01\n> >>>>> E-mail: gronager at ceptacle.com\n> >>>>> Web: http://www.ceptacle.com/\n> >>>>>\n> >>>>>\n> >>>>>\n> ------------------------------------------------------------------------------\n> >>>>> Keep Your Developer Skills Current with LearnDevNow!\n> >>>>> The most comprehensive online learning library for Microsoft\n> developers\n> >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n> MVC3,\n> >>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n> >>>>> http://p.sf.net/sfu/learndevnow-d2d\n> >>>>> _______________________________________________\n> >>>>> Bitcoin-development mailing list\n> >>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>\n> >>>>\n> >>>> Michael Gronager, PhD\n> >>>> Director, Ceptacle\n> >>>> Jens Juels Gade 33\n> >>>> 2100 Copenhagen E\n> >>>> Mobile: +45 31 45 14 01\n> >>>> E-mail: gronager at ceptacle.com\n> >>>> Web: http://www.ceptacle.com/\n> >>>>\n> >>>>\n> >>>>\n> >>>\n> >>>\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/61d91451/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-22T11:34:22",
                "message_text_only": "> \n>  1- How close is Libcoin with original Bitcoin? I mean, the output is a little different, the bitcoind help output was disabled and, I'm afraid that Libcoin can possibly being distant from Bitcoin in the future... That can happen?!\n\nWell, I hope at some point to push libcoin to bitcoin, but that is not for me to decide ;)\n\nAnyway, I will strive at keeping the two synced - currently, they are almost in sync - even bip 16 is part of libcoin, but I have postponed generation of P2SH till after we were certain of 16 vs 17. So that is high on the list. \n\nI did a presentation of libcoin at BitCon12 in San Antonio - I will trow the slides at the web-side asap.\n\n> \n>  2- Do you have plans to update Libcoin on every new upstream Bitcoin release? How fast will be this updates? Do you need more resources/people working on it?\n\nMore people is always nice! I am using libcoin for my own bitcoin project, so that should guarantee that it will be kept up to date.\n\n>  Another questions not involved directly with Libcoin/Bitcoin but, I'll need it for my future Bitcoin projects, and Libcoin is on my radar:\n> \n>  1- Do you know about Diaspora* Project?\n\nYes, I even have an account :)\n\n>  2- Do you have skills in Ruby on Rails development?\n\nNope...\n\n/M\n\n> \n> \n> Thank you!\n> Thiago\n> \n> 2012/3/3 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi Martin,\n> \n> There are a couple of options of doing similarly...\n> \n> In the libcoin repository you will find some code for btc and btcd, it is some code I wrote a while ago and it needs to be updated. It functions as a bitcoind master and slave. The btcd keeps the blockchain, but no wallet. btc keeps the wallet and contact the btcd to get transaction info (like send an address and get its transactions or send a transaction id and get its details). It works (or worked when I wrote them) with the wallet.dat, but needs a little update.\n> \n> You could e.g. run one btcd on the machine and several btc instances to get the functionality you asked for.\n> \n> Further, btcd also enables a web wallet, where the private keys are stored in your browsers local-store.\n> \n> I will get the application updated, but most likely in a bit other setup as it is something I intend to marketize in the near future.\n> \n> Hope this answers your question.\n> \n> Cheers,\n> \n> Michael\n> \n> On 03/03/2012, at 02:04, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n> > Michael,\n> >\n> > libcoin is AWESOME! Thanks!!!\n> >\n> > Can I do the following scenario with libcoin ? :\n> >\n> > 1- Create a regular Linux user called \"blockchain\", with home dir pointed to /var/lib/libcoin/ (more or like Ubuntu/Debian mysql does);\n> >\n> > 2- Start \"bitcoind\" under user \"blockchain\" (the Bitcoin blockchain) will be downloaded to /var/lib/libcoin/bitcoin/ directory);\n> >\n> > 3- As another regular user, called \"michael\", I would like to run \"bitcoind\" too but, I do not want to re-download the blockchain to its own subdir, I want instead, to consult it (blockchain) through libcoin itself (not by socket of JSON)...\n> >\n> > So, the /home/michael/.bitcoin/ directory will have only wallet.dat and related files, not the blockchain.\n> >\n> > This is more or less what we can do with Bitcoin Electrum alternate client but, with Electrum, it copy the whole blockchain to mysql... This is terrible from my point of view, I think that there is no need to duplicate the blockchain within MySQL in anyway.\n> >\n> > I just imagine a bitcoin splited in two, blockchain in one side and wallet in the other side.\n> >\n> > This is possible with libcoin?!\n> >\n> > Thank you again!\n> >\n> > Best,\n> > Thiago\n> >\n> > 2012/2/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi again - and thanks for testing and finding this!\n> >\n> > I have fixed the bug you reported:\n> >\n> > The culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific.\n> >\n> > A git pull will fix it ;)\n> >\n> > Cheers,\n> >\n> > Michael\n> >\n> >\n> > On 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> AWESOME!! Thank you!!\n> >>\n> >> Anyway, I found a new problem... lol\n> >>\n> >> /usr/local/bin/bitcoind getinfo #okay\n> >> {\n> >>   \"version\" : 40001,\n> >>   \"blocks\" : 168753,\n> >>   \"connections\" : 8,\n> >>   \"difficulty\" : 1376302.26788638,\n> >>   \"testnet\" : false\n> >> }\n> >>\n> >> /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> >> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> >>\n> >> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> >> {\n> >> }\n> >>\n> >> /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> >> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> >>\n> >> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> >> {\n> >>   \"teste\" : 0.00000000\n> >> }\n> >>\n> >> Where is my default account listed at \"listaccounts\" output?!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >> 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >> And if you do an update now \"help\" is there too ;)\n> >>\n> >> /M\n> >>\n> >> On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>\n> >>> Thank you!!!\n> >>>\n> >>> It is all working now! Except \"help\"...\n> >>>\n> >>> Nice work Michael!!\n> >>>\n> >>> Best,\n> >>> Thiago\n> >>>\n> >>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>> OK - didn't took the weekend:\n> >>>\n> >>> support for \"port\" is on github now :)\n> >>>\n> >>> Only took two lines:\n> >>>\n> >>>         (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n> >>>\n> >>> and using the port option in the Node constructor (was there already):\n> >>>\n> >>>     Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n> >>>\n> >>> /M\n> >>>\n> >>>\n> >>>\n> >>> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>\n> >>>> Hi Michael,\n> >>>>\n> >>>> Thank you for your attention!\n> >>>>\n> >>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n> >>>>\n> >>>> Look:\n> >>>>\n> >>>> $ cat .bitcoin/bitcoin.conf\n> >>>> server=1\n> >>>> daemon=1\n> >>>> rpcuser=libcoin\n> >>>> rpcpassword=LibCoin13\n> >>>> rpcport=10332\n> >>>> port=10333\n> >>>>\n> >>>> But:\n> >>>>\n> >>>> /usr/local/bin/bitcoind\n> >>>> Error: Address already in use\n> >>>>\n> >>>> terminate called after throwing an instance of 'DbException'\n> >>>> what():  DbEnv::close: Invalid argument\n> >>>> Aborted\n> >>>>\n> >>>> When I \"strace it\", I can see:\n> >>>>\n> >>>> ...\n> >>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> >>>> ...\n> >>>>\n> >>>> I already tried:\n> >>>>\n> >>>> /usr/local/bin/bitcoind --rpcport 10332\n> >>>> /usr/local/bin/bitcoind --rpcport=10332\n> >>>>\n> >>>> Without success...\n> >>>>\n> >>>> Thanks again!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>> Hi Thiago,\n> >>>>\n> >>>> Forgot to comment on the two latter:\n> >>>>\n> >>>>> $ bitcoind getaccountaddress \"\"\n> >>>>> HTTP error code: 401\n> >>>>> Error: couldn't parse reply from server\n> >>>>>\n> >>>>> $ bitcoind listaccounts\n> >>>>> HTTP error code: 401\n> >>>>> Error: couldn't parse reply from server\n> >>>>>\n> >>>>\n> >>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n> >>>>\n> >>>> See in the bitcoind.cpp file for commands that you can use with and without auth...\n> >>>>\n> >>>> Those that contains an \"auth\" requires auth:\n> >>>>\n> >>>>    server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >>>>\n> >>>> As opposed to:\n> >>>>\n> >>>>    server.registerMethod(method_ptr(new GetInfo(node)));\n> >>>>\n> >>>> auth is defined by:\n> >>>>\n> >>>>    Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n> >>>>\n> >>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n> >>>>\n> >>>> /M\n> >>>>\n> >>>>\n> >>>>>\n> >>>>> Any tips?! lol\n> >>>>>\n> >>>>> Thanks!\n> >>>>> Thiago\n> >>>>>\n> >>>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> >>>>> AWESOME!!!\n> >>>>>\n> >>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >>>>>\n> >>>>> sudo aptitude install libboost1.46-all-dev\n> >>>>>\n> >>>>> ...alongside with another already installed dependencies, and now it works!!\n> >>>>>\n> >>>>> Thank you!\n> >>>>> Thiago\n> >>>>>\n> >>>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>>> Hi Martinx,\n> >>>>>\n> >>>>> Another note:\n> >>>>>\n> >>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> >>>>>\n> >>>>> You should do a :\n> >>>>>\n> >>>>> sudo apt-get upgrade libboost-dev-all\n> >>>>>\n> >>>>> to get the 1.46.1 library\n> >>>>>\n> >>>>> /M\n> >>>>>\n> >>>>>\n> >>>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>>>\n> >>>>>> Hi Michael!\n> >>>>>>\n> >>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> >>>>>>\n> >>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> >>>>>>\n> >>>>>> ----\n> >>>>>> user at desk:~/libcoin$ ./configure\n> >>>>>> -- The C compiler identification is GNU\n> >>>>>> -- The CXX compiler identification is GNU\n> >>>>>> -- Check for working C compiler: /usr/bin/gcc\n> >>>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> >>>>>> -- Detecting C compiler ABI info\n> >>>>>> -- Detecting C compiler ABI info - done\n> >>>>>> -- Check for working CXX compiler: /usr/bin/c++\n> >>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >>>>>> -- Detecting CXX compiler ABI info\n> >>>>>> -- Detecting CXX compiler ABI info - done\n> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >>>>>> -- Looking for pthread_create in pthreads\n> >>>>>> -- Looking for pthread_create in pthreads - not found\n> >>>>>> -- Looking for pthread_create in pthread\n> >>>>>> -- Looking for pthread_create in pthread - found\n> >>>>>> -- Found Threads: TRUE\n> >>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >>>>>> -- Looking for gethostbyname\n> >>>>>> -- Looking for gethostbyname - found\n> >>>>>> -- Looking for connect\n> >>>>>> -- Looking for connect - found\n> >>>>>> -- Looking for remove\n> >>>>>> -- Looking for remove - found\n> >>>>>> -- Looking for shmat\n> >>>>>> -- Looking for shmat - found\n> >>>>>> -- Looking for IceConnectionNumber in ICE\n> >>>>>> -- Looking for IceConnectionNumber in ICE - found\n> >>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >>>>>> -- Boost version: 1.42.0\n> >>>>>> -- Found the following Boost libraries:\n> >>>>>> --   date_time\n> >>>>>> --   regex\n> >>>>>> --   filesystem\n> >>>>>> --   system\n> >>>>>> --   program_options\n> >>>>>> --   thread\n> >>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >>>>>> -- Looking for Q_WS_X11\n> >>>>>> -- Looking for Q_WS_X11 - found\n> >>>>>> -- Looking for Q_WS_WIN\n> >>>>>> -- Looking for Q_WS_WIN - not found.\n> >>>>>> -- Looking for Q_WS_QWS\n> >>>>>> -- Looking for Q_WS_QWS - not found.\n> >>>>>> -- Looking for Q_WS_MAC\n> >>>>>> -- Looking for Q_WS_MAC - not found.\n> >>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >>>>>> -- Found wxWidgets: TRUE\n> >>>>>>\n> >>>>>> The build system is configured to install libraries to /usr/local/lib\n> >>>>>> Your applications may not be able to find your installed libraries unless you:\n> >>>>>> set your LD_LIBRARY_PATH (user specific) or\n> >>>>>> update your ld.so configuration (system wide)\n> >>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> >>>>>> applications find the installed libcoin libraries, system wide, you could install an\n> >>>>>> libcoin specific ld.so configuration with:\n> >>>>>> sudo make install_ld_conf\n> >>>>>>\n> >>>>>> -- Configuring done\n> >>>>>> -- Generating done\n> >>>>>> -- Build files have been written to: /home/user/libcoin\n> >>>>>> ----\n> >>>>>>\n> >>>>>> Now I tried make, without success:\n> >>>>>>\n> >>>>>> ----\n> >>>>>> .....\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> >>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> >>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> >>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> >>>>>> collect2: ld returned 1 exit status\n> >>>>>> make[2]: *** [bin/bitcoind] Error 1\n> >>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> >>>>>> make: *** [all] Error 2\n> >>>>>> -----\n> >>>>>>\n> >>>>>> What can I do?!\n> >>>>>>\n> >>>>>> Best,\n> >>>>>> Thiago\n> >>>>>>\n> >>>>>>\n> >>>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> >>>>>> Dear Bitcoiners,\n> >>>>>>\n> >>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!\n> >>>>>>\n> >>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> >>>>>>\n> >>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> >>>>>>\n> >>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> >>>>>>\n> >>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> >>>>>>\n> >>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> >>>>>>\n> >>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> >>>>>>\n> >>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>>>>>\n> >>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> >>>>>>\n> >>>>>> ======\n> >>>>>>\n> >>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>>>>>\n> >>>>>> Join libcoin on twitter: http://twitter.com/libcoin\n> >>>>>>\n> >>>>>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>>>>>\n> >>>>>> Best regards,\n> >>>>>>\n> >>>>>> Michael Gronager, PhD\n> >>>>>> Director, Ceptacle\n> >>>>>> Jens Juels Gade 33\n> >>>>>> 2100 Copenhagen E\n> >>>>>> Mobile: +45 31 45 14 01\n> >>>>>> E-mail: gronager at ceptacle.com\n> >>>>>> Web: http://www.ceptacle.com/\n> >>>>>>\n> >>>>>>\n> >>>>>> ------------------------------------------------------------------------------\n> >>>>>> Keep Your Developer Skills Current with LearnDevNow!\n> >>>>>> The most comprehensive online learning library for Microsoft developers\n> >>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> >>>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n> >>>>>> http://p.sf.net/sfu/learndevnow-d2d\n> >>>>>> _______________________________________________\n> >>>>>> Bitcoin-development mailing list\n> >>>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>>\n> >>>>>\n> >>>>> Michael Gronager, PhD\n> >>>>> Director, Ceptacle\n> >>>>> Jens Juels Gade 33\n> >>>>> 2100 Copenhagen E\n> >>>>> Mobile: +45 31 45 14 01\n> >>>>> E-mail: gronager at ceptacle.com\n> >>>>> Web: http://www.ceptacle.com/\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>\n> >>>>\n> >>>\n> >>> Michael Gronager, PhD\n> >>> Director, Ceptacle\n> >>> Jens Juels Gade 33\n> >>> 2100 Copenhagen E\n> >>> Mobile: +45 31 45 14 01\n> >>> E-mail: gronager at ceptacle.com\n> >>> Web: http://www.ceptacle.com/\n> >>>\n> >>>\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-03-28T07:59:42",
                "message_text_only": "Hi Michael,\n\n Let's talk a little bit more about this awesome stuff!\n\n2012/3/22 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> >\n> >  1- How close is Libcoin with original Bitcoin? I mean, the output is a\n> little different, the bitcoind help output was disabled and, I'm afraid\n> that Libcoin can possibly being distant from Bitcoin in the future... That\n> can happen?!\n>\n> Well, I hope at some point to push libcoin to bitcoin, but that is not for\n> me to decide ;)\n>\n>\nWell, +1000 for that!! Since bitcoin-qt and bitcoind binaries share a lot\nof functions... There is a need for some kind of library, right?! So, both\n(and even more apps) can use it!  :)\n\n\n> Anyway, I will strive at keeping the two synced - currently, they are\n> almost in sync - even bip 16 is part of libcoin, but I have postponed\n> generation of P2SH till after we were certain of 16 vs 17. So that is high\n> on the list.\n>\n> I did a presentation of libcoin at BitCon12 in San Antonio - I will trow\n> the slides at the web-side asap.\n>\n>\nAWESOME!!\n\n\n> >\n> >  2- Do you have plans to update Libcoin on every new upstream Bitcoin\n> release? How fast will be this updates? Do you need more resources/people\n> working on it?\n>\n> More people is always nice! I am using libcoin for my own bitcoin project,\n> so that should guarantee that it will be kept up to date.\n>\n\n I'll try to help you here... One thing that I like to try and announce is:\n\n Use P2Pool with libcoin instead Bitcoin! BUT, to that work, libcoin must\nbehave EXACTLY like Bitcoin 0.6.0rc5 (at least).\n\n If it works, I'll update my P2Pool guide here:\n\n A Complete Guide to P2Pool - Merged Mining (BTC/NMC/DVC/IXC/I0C) plus LTC,\nLinux:\n https://bitcointalk.org/index.php?topic=62842.0\n\n I think that this will bring much more eyes to Libcoin!! Don't you think?!\n\n Let's do it?!?!\n\n\n> >  Another questions not involved directly with Libcoin/Bitcoin but, I'll\n> need it for my future Bitcoin projects, and Libcoin is on my radar:\n> >\n> >  1- Do you know about Diaspora* Project?\n>\n> Yes, I even have an account :)\n>\n\nCOOL!! I just finish my Diaspora test environment, can you try it?!\n\nhttps://quilombas.com/\n\n\n>\n> >  2- Do you have skills in Ruby on Rails development?\n>\n> Nope...\n>\n\nToo bad... lol\n\nMy plan with Diaspora is to include a wallet for each user and, Libcoin\nsound perfect for it.\n\nIf I use original bitcoind, each Diaspora user will consumes a lot of\nresources and I'll need to build a private cloud computing for running\nuser's wallets more safely...\n\nYou know when you log into Diaspora and there is a Cubbi.es app for it?!\nSo, the same way Cubbi.es manages/shows your pictures within Diaspora, my\n(our) application will manage our Bitcoins!! And users will be able to\nsend/sell Bitcoins between them (maybe integrating it with Bitcoin-OTC will\nbe a good idea for the future)...\n\n\n> /M\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\nCheers!\nThiago Martins\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120328/8bf172e4/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-22T11:35:12",
                "message_text_only": "What you list below was actually the plan - just havn't gotten there yet, but it will be dead easy.\n\n/M\n\n\nOn 22/03/2012, at 11:50, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Michael,\n> \n>  Since libcoin is \"chain agnostic\", I was wondering if the project can be used like this:\n> \n>  When I install it with \"make install\", I would like to have something like this:\n> \n>  Regular file: /usr/local/bin/libcoincore # or whatever you like\n> \n>  Symlink -> Regular file\n> \n>  /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a symlink to libcoincore\n> \n>  /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is a symlink to libcoincore\n> \n>  /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a symlink to libcoincore\n> \n>  /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is a symlink to libcoincore\n> \n>  ...and so on...\n> \n>  So, libcoincore will interpret the ARGV[0] and, for each string, it will initiate the appropriate internal functions...\n> \n>  I don't know if Libcoin already does something like that... I'm not a developer/code reader... Just a small nerd with big ideas...  ^_^\n> \n> Thanks!\n> Thiago\n> \n> 2012/2/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi again - and thanks for testing and finding this!\n> \n> I have fixed the bug you reported:\n> \n> The culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific.\n> \n> A git pull will fix it ;)\n> \n> Cheers,\n> \n> Michael\n> \n> \n> On 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n> > AWESOME!! Thank you!!\n> >\n> > Anyway, I found a new problem... lol\n> >\n> > /usr/local/bin/bitcoind getinfo #okay\n> > {\n> >    \"version\" : 40001,\n> >    \"blocks\" : 168753,\n> >    \"connections\" : 8,\n> >    \"difficulty\" : 1376302.26788638,\n> >    \"testnet\" : false\n> > }\n> >\n> > /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> >\n> > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > {\n> > }\n> >\n> > /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> >\n> > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > {\n> >    \"teste\" : 0.00000000\n> > }\n> >\n> > Where is my default account listed at \"listaccounts\" output?!\n> >\n> > Best,\n> > Thiago\n> >\n> > 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > And if you do an update now \"help\" is there too ;)\n> >\n> > /M\n> >\n> > On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Thank you!!!\n> >>\n> >> It is all working now! Except \"help\"...\n> >>\n> >> Nice work Michael!!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >> OK - didn't took the weekend:\n> >>\n> >> support for \"port\" is on github now :)\n> >>\n> >> Only took two lines:\n> >>\n> >>          (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n> >>\n> >> and using the port option in the Node constructor (was there already):\n> >>\n> >>      Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n> >>\n> >> /M\n> >>\n> >>\n> >>\n> >> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>\n> >>> Hi Michael,\n> >>>\n> >>> Thank you for your attention!\n> >>>\n> >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n> >>>\n> >>> Look:\n> >>>\n> >>> $ cat .bitcoin/bitcoin.conf\n> >>> server=1\n> >>> daemon=1\n> >>> rpcuser=libcoin\n> >>> rpcpassword=LibCoin13\n> >>> rpcport=10332\n> >>> port=10333\n> >>>\n> >>> But:\n> >>>\n> >>> /usr/local/bin/bitcoind\n> >>> Error: Address already in use\n> >>>\n> >>> terminate called after throwing an instance of 'DbException'\n> >>> what():  DbEnv::close: Invalid argument\n> >>> Aborted\n> >>>\n> >>> When I \"strace it\", I can see:\n> >>>\n> >>> ...\n> >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> >>> ...\n> >>>\n> >>> I already tried:\n> >>>\n> >>> /usr/local/bin/bitcoind --rpcport 10332\n> >>> /usr/local/bin/bitcoind --rpcport=10332\n> >>>\n> >>> Without success...\n> >>>\n> >>> Thanks again!\n> >>> Thiago\n> >>>\n> >>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>> Hi Thiago,\n> >>>\n> >>> Forgot to comment on the two latter:\n> >>>\n> >>>> $ bitcoind getaccountaddress \"\"\n> >>>> HTTP error code: 401\n> >>>> Error: couldn't parse reply from server\n> >>>>\n> >>>> $ bitcoind listaccounts\n> >>>> HTTP error code: 401\n> >>>> Error: couldn't parse reply from server\n> >>>>\n> >>>\n> >>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n> >>>\n> >>> See in the bitcoind.cpp file for commands that you can use with and without auth...\n> >>>\n> >>> Those that contains an \"auth\" requires auth:\n> >>>\n> >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >>>\n> >>> As opposed to:\n> >>>\n> >>>     server.registerMethod(method_ptr(new GetInfo(node)));\n> >>>\n> >>> auth is defined by:\n> >>>\n> >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n> >>>\n> >>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n> >>>\n> >>> /M\n> >>>\n> >>>\n> >>>>\n> >>>> Any tips?! lol\n> >>>>\n> >>>> Thanks!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> >>>> AWESOME!!!\n> >>>>\n> >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >>>>\n> >>>> sudo aptitude install libboost1.46-all-dev\n> >>>>\n> >>>> ...alongside with another already installed dependencies, and now it works!!\n> >>>>\n> >>>> Thank you!\n> >>>> Thiago\n> >>>>\n> >>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>>> Hi Martinx,\n> >>>>\n> >>>> Another note:\n> >>>>\n> >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> >>>>\n> >>>> You should do a :\n> >>>>\n> >>>> sudo apt-get upgrade libboost-dev-all\n> >>>>\n> >>>> to get the 1.46.1 library\n> >>>>\n> >>>> /M\n> >>>>\n> >>>>\n> >>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>>\n> >>>>> Hi Michael!\n> >>>>>\n> >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> >>>>>\n> >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> >>>>>\n> >>>>> ----\n> >>>>> user at desk:~/libcoin$ ./configure\n> >>>>> -- The C compiler identification is GNU\n> >>>>> -- The CXX compiler identification is GNU\n> >>>>> -- Check for working C compiler: /usr/bin/gcc\n> >>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> >>>>> -- Detecting C compiler ABI info\n> >>>>> -- Detecting C compiler ABI info - done\n> >>>>> -- Check for working CXX compiler: /usr/bin/c++\n> >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >>>>> -- Detecting CXX compiler ABI info\n> >>>>> -- Detecting CXX compiler ABI info - done\n> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >>>>> -- Looking for pthread_create in pthreads\n> >>>>> -- Looking for pthread_create in pthreads - not found\n> >>>>> -- Looking for pthread_create in pthread\n> >>>>> -- Looking for pthread_create in pthread - found\n> >>>>> -- Found Threads: TRUE\n> >>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >>>>> -- Looking for gethostbyname\n> >>>>> -- Looking for gethostbyname - found\n> >>>>> -- Looking for connect\n> >>>>> -- Looking for connect - found\n> >>>>> -- Looking for remove\n> >>>>> -- Looking for remove - found\n> >>>>> -- Looking for shmat\n> >>>>> -- Looking for shmat - found\n> >>>>> -- Looking for IceConnectionNumber in ICE\n> >>>>> -- Looking for IceConnectionNumber in ICE - found\n> >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >>>>> -- Boost version: 1.42.0\n> >>>>> -- Found the following Boost libraries:\n> >>>>> --   date_time\n> >>>>> --   regex\n> >>>>> --   filesystem\n> >>>>> --   system\n> >>>>> --   program_options\n> >>>>> --   thread\n> >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >>>>> -- Looking for Q_WS_X11\n> >>>>> -- Looking for Q_WS_X11 - found\n> >>>>> -- Looking for Q_WS_WIN\n> >>>>> -- Looking for Q_WS_WIN - not found.\n> >>>>> -- Looking for Q_WS_QWS\n> >>>>> -- Looking for Q_WS_QWS - not found.\n> >>>>> -- Looking for Q_WS_MAC\n> >>>>> -- Looking for Q_WS_MAC - not found.\n> >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >>>>> -- Found wxWidgets: TRUE\n> >>>>>\n> >>>>> The build system is configured to install libraries to /usr/local/lib\n> >>>>> Your applications may not be able to find your installed libraries unless you:\n> >>>>>  set your LD_LIBRARY_PATH (user specific) or\n> >>>>>  update your ld.so configuration (system wide)\n> >>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> >>>>> applications find the installed libcoin libraries, system wide, you could install an\n> >>>>> libcoin specific ld.so configuration with:\n> >>>>>  sudo make install_ld_conf\n> >>>>>\n> >>>>> -- Configuring done\n> >>>>> -- Generating done\n> >>>>> -- Build files have been written to: /home/user/libcoin\n> >>>>> ----\n> >>>>>\n> >>>>> Now I tried make, without success:\n> >>>>>\n> >>>>> ----\n> >>>>> .....\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> >>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> >>>>> collect2: ld returned 1 exit status\n> >>>>> make[2]: *** [bin/bitcoind] Error 1\n> >>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> >>>>> make: *** [all] Error 2\n> >>>>> -----\n> >>>>>\n> >>>>> What can I do?!\n> >>>>>\n> >>>>> Best,\n> >>>>> Thiago\n> >>>>>\n> >>>>>\n> >>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> >>>>> Dear Bitcoiners,\n> >>>>>\n> >>>>> libcoin is now in a state ready for its first release, which I would like to share with you!\n> >>>>>\n> >>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> >>>>>\n> >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> >>>>>\n> >>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> >>>>>\n> >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> >>>>>\n> >>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> >>>>>\n> >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> >>>>>\n> >>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>>>>\n> >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> >>>>>\n> >>>>> ======\n> >>>>>\n> >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>>>>\n> >>>>> Join libcoin on twitter: http://twitter.com/libcoin\n> >>>>>\n> >>>>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>>>>\n> >>>>> Best regards,\n> >>>>>\n> >>>>> Michael Gronager, PhD\n> >>>>> Director, Ceptacle\n> >>>>> Jens Juels Gade 33\n> >>>>> 2100 Copenhagen E\n> >>>>> Mobile: +45 31 45 14 01\n> >>>>> E-mail: gronager at ceptacle.com\n> >>>>> Web: http://www.ceptacle.com/\n> >>>>>\n> >>>>>\n> >>>>> ------------------------------------------------------------------------------\n> >>>>> Keep Your Developer Skills Current with LearnDevNow!\n> >>>>> The most comprehensive online learning library for Microsoft developers\n> >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> >>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n> >>>>> http://p.sf.net/sfu/learndevnow-d2d\n> >>>>> _______________________________________________\n> >>>>> Bitcoin-development mailing list\n> >>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>\n> >>>>\n> >>>> Michael Gronager, PhD\n> >>>> Director, Ceptacle\n> >>>> Jens Juels Gade 33\n> >>>> 2100 Copenhagen E\n> >>>> Mobile: +45 31 45 14 01\n> >>>> E-mail: gronager at ceptacle.com\n> >>>> Web: http://www.ceptacle.com/\n> >>>>\n> >>>>\n> >>>>\n> >>>\n> >>>\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-03-22T16:34:34",
                "message_text_only": "This conversation reminds me that I'd like to see a comprehensive list of\ntests that alt processors / generators can run against.\n\nI haven't looked in the client code for some time, but does that exist now?\nThat would be a nice 'I want to help' early project, getting together\ninputs and expected outputs / stack states for implementers to check\nagainst.\n\nAs it is right now, we've split our codebase a bit; we rely on the client\nto check the validity of a transaction, the balance of a given address, and\nconverse with the network, but we have written most of our own code for\nstuff like block gen; I expect we will also do that for transaction\ncreation.\n\nPeter\n\n\n\n2012/3/22 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> What you list below was actually the plan - just havn't gotten there yet,\n> but it will be dead easy.\n>\n> /M\n>\n>\n> On 22/03/2012, at 11:50, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Michael,\n> >\n> >  Since libcoin is \"chain agnostic\", I was wondering if the project can\n> be used like this:\n> >\n> >  When I install it with \"make install\", I would like to have something\n> like this:\n> >\n> >  Regular file: /usr/local/bin/libcoincore # or whatever you like\n> >\n> >  Symlink -> Regular file\n> >\n> >  /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a\n> symlink to libcoincore\n> >\n> >  /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is\n> a symlink to libcoincore\n> >\n> >  /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a\n> symlink to libcoincore\n> >\n> >  /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is\n> a symlink to libcoincore\n> >\n> >  ...and so on...\n> >\n> >  So, libcoincore will interpret the ARGV[0] and, for each string, it\n> will initiate the appropriate internal functions...\n> >\n> >  I don't know if Libcoin already does something like that... I'm not a\n> developer/code reader... Just a small nerd with big ideas...  ^_^\n> >\n> > Thanks!\n> > Thiago\n> >\n> > 2012/2/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi again - and thanks for testing and finding this!\n> >\n> > I have fixed the bug you reported:\n> >\n> > The culprit was an implicit string constructor for the ChainAddress that\n> caused creation of a not fully initialized ChainAddress. The right way to\n> do it is using chain::getAddress(string) as the ChainAddress is chain\n> specific.\n> >\n> > A git pull will fix it ;)\n> >\n> > Cheers,\n> >\n> > Michael\n> >\n> >\n> > On 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> > > AWESOME!! Thank you!!\n> > >\n> > > Anyway, I found a new problem... lol\n> > >\n> > > /usr/local/bin/bitcoind getinfo #okay\n> > > {\n> > >    \"version\" : 40001,\n> > >    \"blocks\" : 168753,\n> > >    \"connections\" : 8,\n> > >    \"difficulty\" : 1376302.26788638,\n> > >    \"testnet\" : false\n> > > }\n> > >\n> > > /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> > > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> > >\n> > > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > > {\n> > > }\n> > >\n> > > /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> > > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> > >\n> > > /usr/local/bin/bitcoind listaccounts # NOT okay...\n> > > {\n> > >    \"teste\" : 0.00000000\n> > > }\n> > >\n> > > Where is my default account listed at \"listaccounts\" output?!\n> > >\n> > > Best,\n> > > Thiago\n> > >\n> > > 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > > And if you do an update now \"help\" is there too ;)\n> > >\n> > > /M\n> > >\n> > > On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> > >\n> > >> Thank you!!!\n> > >>\n> > >> It is all working now! Except \"help\"...\n> > >>\n> > >> Nice work Michael!!\n> > >>\n> > >> Best,\n> > >> Thiago\n> > >>\n> > >> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > >> OK - didn't took the weekend:\n> > >>\n> > >> support for \"port\" is on github now :)\n> > >>\n> > >> Only took two lines:\n> > >>\n> > >>          (\"port\", value<unsigned short>(&port)->default_value(8333),\n> \"Listen on specified port for the p2p protocol\")\n> > >>\n> > >> and using the port option in the Node constructor (was there already):\n> > >>\n> > >>      Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" :\n> \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the\n> use of a proxy!\n> > >>\n> > >> /M\n> > >>\n> > >>\n> > >>\n> > >> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> > >>\n> > >>> Hi Michael,\n> > >>>\n> > >>> Thank you for your attention!\n> > >>>\n> > >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it\n> always try to listen at 8332, no matter what I \"say\"...\n> > >>>\n> > >>> Look:\n> > >>>\n> > >>> $ cat .bitcoin/bitcoin.conf\n> > >>> server=1\n> > >>> daemon=1\n> > >>> rpcuser=libcoin\n> > >>> rpcpassword=LibCoin13\n> > >>> rpcport=10332\n> > >>> port=10333\n> > >>>\n> > >>> But:\n> > >>>\n> > >>> /usr/local/bin/bitcoind\n> > >>> Error: Address already in use\n> > >>>\n> > >>> terminate called after throwing an instance of 'DbException'\n> > >>> what():  DbEnv::close: Invalid argument\n> > >>> Aborted\n> > >>>\n> > >>> When I \"strace it\", I can see:\n> > >>>\n> > >>> ...\n> > >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),\n> sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> > >>> ...\n> > >>>\n> > >>> I already tried:\n> > >>>\n> > >>> /usr/local/bin/bitcoind --rpcport 10332\n> > >>> /usr/local/bin/bitcoind --rpcport=10332\n> > >>>\n> > >>> Without success...\n> > >>>\n> > >>> Thanks again!\n> > >>> Thiago\n> > >>>\n> > >>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > >>> Hi Thiago,\n> > >>>\n> > >>> Forgot to comment on the two latter:\n> > >>>\n> > >>>> $ bitcoind getaccountaddress \"\"\n> > >>>> HTTP error code: 401\n> > >>>> Error: couldn't parse reply from server\n> > >>>>\n> > >>>> $ bitcoind listaccounts\n> > >>>> HTTP error code: 401\n> > >>>> Error: couldn't parse reply from server\n> > >>>>\n> > >>>\n> > >>> 401 = permission denied - you need to setup username / password\n> either on the commandline or in the bicoin.conf file to access those\n> commands...\n> > >>>\n> > >>> See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n> > >>>\n> > >>> Those that contains an \"auth\" requires auth:\n> > >>>\n> > >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> > >>>\n> > >>> As opposed to:\n> > >>>\n> > >>>     server.registerMethod(method_ptr(new GetInfo(node)));\n> > >>>\n> > >>> auth is defined by:\n> > >>>\n> > >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are\n> not set, all authenticated methods becomes disallowed.\n> > >>>\n> > >>> so you just experience the case explained in the comment ;) I admit\n> that the output could be more readable, though!\n> > >>>\n> > >>> /M\n> > >>>\n> > >>>\n> > >>>>\n> > >>>> Any tips?! lol\n> > >>>>\n> > >>>> Thanks!\n> > >>>> Thiago\n> > >>>>\n> > >>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> > >>>> AWESOME!!!\n> > >>>>\n> > >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> > >>>>\n> > >>>> sudo aptitude install libboost1.46-all-dev\n> > >>>>\n> > >>>> ...alongside with another already installed dependencies, and now\n> it works!!\n> > >>>>\n> > >>>> Thank you!\n> > >>>> Thiago\n> > >>>>\n> > >>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > >>>> Hi Martinx,\n> > >>>>\n> > >>>> Another note:\n> > >>>>\n> > >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you\n> try to compile coinHTTP with that specific combination: sslv2 has been\n> removed from openssl, but boost still references it.)\n> > >>>>\n> > >>>> You should do a :\n> > >>>>\n> > >>>> sudo apt-get upgrade libboost-dev-all\n> > >>>>\n> > >>>> to get the 1.46.1 library\n> > >>>>\n> > >>>> /M\n> > >>>>\n> > >>>>\n> > >>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> > >>>>\n> > >>>>> Hi Michael!\n> > >>>>>\n> > >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and\n> for the CryptoCurrencies as a hole... Thanks!!!\n> > >>>>>\n> > >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At\n> this machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> > >>>>>\n> > >>>>> ----\n> > >>>>> user at desk:~/libcoin$ ./configure\n> > >>>>> -- The C compiler identification is GNU\n> > >>>>> -- The CXX compiler identification is GNU\n> > >>>>> -- Check for working C compiler: /usr/bin/gcc\n> > >>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> > >>>>> -- Detecting C compiler ABI info\n> > >>>>> -- Detecting C compiler ABI info - done\n> > >>>>> -- Check for working CXX compiler: /usr/bin/c++\n> > >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> > >>>>> -- Detecting CXX compiler ABI info\n> > >>>>> -- Detecting CXX compiler ABI info - done\n> > >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> > >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> > >>>>> -- Looking for pthread_create in pthreads\n> > >>>>> -- Looking for pthread_create in pthreads - not found\n> > >>>>> -- Looking for pthread_create in pthread\n> > >>>>> -- Looking for pthread_create in pthread - found\n> > >>>>> -- Found Threads: TRUE\n> > >>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> > >>>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> > >>>>> -- Looking for gethostbyname\n> > >>>>> -- Looking for gethostbyname - found\n> > >>>>> -- Looking for connect\n> > >>>>> -- Looking for connect - found\n> > >>>>> -- Looking for remove\n> > >>>>> -- Looking for remove - found\n> > >>>>> -- Looking for shmat\n> > >>>>> -- Looking for shmat - found\n> > >>>>> -- Looking for IceConnectionNumber in ICE\n> > >>>>> -- Looking for IceConnectionNumber in ICE - found\n> > >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> > >>>>> -- Boost version: 1.42.0\n> > >>>>> -- Found the following Boost libraries:\n> > >>>>> --   date_time\n> > >>>>> --   regex\n> > >>>>> --   filesystem\n> > >>>>> --   system\n> > >>>>> --   program_options\n> > >>>>> --   thread\n> > >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> > >>>>> -- Looking for Q_WS_X11\n> > >>>>> -- Looking for Q_WS_X11 - found\n> > >>>>> -- Looking for Q_WS_WIN\n> > >>>>> -- Looking for Q_WS_WIN - not found.\n> > >>>>> -- Looking for Q_WS_QWS\n> > >>>>> -- Looking for Q_WS_QWS - not found.\n> > >>>>> -- Looking for Q_WS_MAC\n> > >>>>> -- Looking for Q_WS_MAC - not found.\n> > >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> > >>>>> -- Found wxWidgets: TRUE\n> > >>>>>\n> > >>>>> The build system is configured to install libraries to\n> /usr/local/lib\n> > >>>>> Your applications may not be able to find your installed libraries\n> unless you:\n> > >>>>>  set your LD_LIBRARY_PATH (user specific) or\n> > >>>>>  update your ld.so configuration (system wide)\n> > >>>>> You have an ld.so.conf.d directory on your system, so if you wish\n> to ensure that\n> > >>>>> applications find the installed libcoin libraries, system wide,\n> you could install an\n> > >>>>> libcoin specific ld.so configuration with:\n> > >>>>>  sudo make install_ld_conf\n> > >>>>>\n> > >>>>> -- Configuring done\n> > >>>>> -- Generating done\n> > >>>>> -- Build files have been written to: /home/user/libcoin\n> > >>>>> ----\n> > >>>>>\n> > >>>>> Now I tried make, without success:\n> > >>>>>\n> > >>>>> ----\n> > >>>>> .....\n> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum\n> const&, unsigned int)':\n> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x16): undefined reference to `BN_init'\n> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,\n> unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum\n> const&, unsigned int)':\n> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xf): undefined reference to `BN_init'\n> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x1e): undefined reference to `BN_copy'\n> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,\n> unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum\n> const&, CBigNum const&)':\n> > >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum\n> const&, CBigNum const&)':\n> > >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> > >>>>> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> > >>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> > >>>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> > >>>>> collect2: ld returned 1 exit status\n> > >>>>> make[2]: *** [bin/bitcoind] Error 1\n> > >>>>> make[1]: ***\n> [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> > >>>>> make: *** [all] Error 2\n> > >>>>> -----\n> > >>>>>\n> > >>>>> What can I do?!\n> > >>>>>\n> > >>>>> Best,\n> > >>>>> Thiago\n> > >>>>>\n> > >>>>>\n> > >>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> > >>>>> Dear Bitcoiners,\n> > >>>>>\n> > >>>>> libcoin is now in a state ready for its first release, which I\n> would like to share with you!\n> > >>>>>\n> > >>>>> === libcoin is a crypto currency library based on the\n> bitcoin/bitcoin \"Satoshi\" client. ===\n> > >>>>>\n> > >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the\n> release of the first version of the crypto currency library \"libcoin\" based\n> on the bitcoin/bitcoin \"Satoshi\" client.\n> > >>>>>\n> > >>>>> libcoin also maintains a version of bitcoind that is a 100%\n> compatible drop-in replacement of the bitcoin/bitcoind client: You can use\n> it on the same computer on the same files and you can call it with the same\n> scripts. And you can easily extend it without touching the basic bitcoin\n> source files.\n> > >>>>>\n> > >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5\n> times faster than the bitcoin/bitcoind client. This is less than 90 minutes\n> on a modern laptop!\n> > >>>>>\n> > >>>>> In libcoin, the Satoshi client code has been completely\n> refactored, properly encapsulating classes, removing all globals, moving\n> from threads and mutexes to a pure asynchronous approach. Functionalities\n> have been divided into logical units and libraries, minimizing dependencies\n> for e.g. thin clients.\n> > >>>>>\n> > >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> > >>>>>\n> > >>>>> The build system of libcoin is based on CMake and supports builds\n> of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> > >>>>>\n> > >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in\n> open source as well as in commercial projects, but improvements should go\n> back into the libcoin library.\n> > >>>>>\n> > >>>>> ======\n> > >>>>>\n> > >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> > >>>>>\n> > >>>>> Join libcoin on twitter: http://twitter.com/libcoin\n> > >>>>>\n> > >>>>> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> > >>>>>\n> > >>>>> Best regards,\n> > >>>>>\n> > >>>>> Michael Gronager, PhD\n> > >>>>> Director, Ceptacle\n> > >>>>> Jens Juels Gade 33\n> > >>>>> 2100 Copenhagen E\n> > >>>>> Mobile: +45 31 45 14 01\n> > >>>>> E-mail: gronager at ceptacle.com\n> > >>>>> Web: http://www.ceptacle.com/\n> > >>>>>\n> > >>>>>\n> > >>>>>\n> ------------------------------------------------------------------------------\n> > >>>>> Keep Your Developer Skills Current with LearnDevNow!\n> > >>>>> The most comprehensive online learning library for Microsoft\n> developers\n> > >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n> MVC3,\n> > >>>>> Metro Style Apps, more. Free future releases when you subscribe\n> now!\n> > >>>>> http://p.sf.net/sfu/learndevnow-d2d\n> > >>>>> _______________________________________________\n> > >>>>> Bitcoin-development mailing list\n> > >>>>> Bitcoin-development at lists.sourceforge.net\n> > >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >>>>>\n> > >>>>\n> > >>>> Michael Gronager, PhD\n> > >>>> Director, Ceptacle\n> > >>>> Jens Juels Gade 33\n> > >>>> 2100 Copenhagen E\n> > >>>> Mobile: +45 31 45 14 01\n> > >>>> E-mail: gronager at ceptacle.com\n> > >>>> Web: http://www.ceptacle.com/\n> > >>>>\n> > >>>>\n> > >>>>\n> > >>>\n> > >>>\n> > >>\n> > >> Michael Gronager, PhD\n> > >> Director, Ceptacle\n> > >> Jens Juels Gade 33\n> > >> 2100 Copenhagen E\n> > >> Mobile: +45 31 45 14 01\n> > >> E-mail: gronager at ceptacle.com\n> > >> Web: http://www.ceptacle.com/\n> > >>\n> > >>\n> > >\n> > > Michael Gronager, PhD\n> > > Director, Ceptacle\n> > > Jens Juels Gade 33\n> > > 2100 Copenhagen E\n> > > Mobile: +45 31 45 14 01\n> > > E-mail: gronager at ceptacle.com\n> > > Web: http://www.ceptacle.com/\n> > >\n> > >\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n>\n> ------------------------------------------------------------------------------\n> This SF email is sponsosred by:\n> Try Windows Azure free for 90 days Click Here\n> http://p.sf.net/sfu/sfd2d-msazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n\nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/337a4904/attachment.html>"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-03-27T09:58:55",
                "message_text_only": "Hi!\n\n I'm trying to compile libcoin again and I'm seeing the following error:\n\nlibcoin at xapado:~/libcoin$ make\nScanning dependencies of target coin\n[  1%] Building CXX object src/coin/CMakeFiles/coin.dir/util.o\nIn file included from /home/libcoin/libcoin/include/coin/serialize.h:22:0,\n                 from /home/libcoin/libcoin/include/coin/uint256.h:8,\n                 from /home/libcoin/libcoin/include/coin/util.h:10,\n                 from /home/libcoin/libcoin/src/coin/util.cpp:6:\n/home/libcoin/libcoin/include/coin/Version.h:5:25: fatal error:\ncoin/export.h: No such file or directory\ncompilation terminated.\nmake[2]: *** [src/coin/CMakeFiles/coin.dir/util.o] Error 1\nmake[1]: *** [src/coin/CMakeFiles/coin.dir/all] Error 2\nmake: *** [all] Error 2\n\n Any help?!\n\nThanks!\nThiago\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120327/b183899c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Vessenes",
                "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "Michael Gr\u00f8nager"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 102268
        }
    },
    {
        "title": "[Bitcoin-development] Please trim excessive quoting",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-22T17:06:20",
                "message_text_only": "Messages over 40Kbytes big require moderator approval on this list; if\nyou want your messages to appear promptly, please trim excessive\nquoting before hitting send.\n\nThanks!\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "Please trim excessive quoting",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 196
        }
    },
    {
        "title": "[Bitcoin-development] Version 0.6 release candidate 5 binaries",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-03-26T23:40:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nBarring any last-minute showstopper issues, the plan is for release\ncandidate 5 to become the official 0.6.0 release on Wednesday.\n\nSo please help look for last-minute showstopper issues:\n\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/\n\nThe major changes from release candidate 4:\n\n+ Much faster writing of blkindex.dat during initial blockchain\ndownload (by modifying the default bdb environment cache settings)\n\n+ A new policy for wallet.dat upgrades: use the old format unless the\nuser either uses a feature that requires an upgrade (encrypts the\nwallet) or explicitly requests that the wallet be upgraded using the\nnew -upgradewallet option. New wallets will use new features (for 0.6,\nthe only new wallet feature is compressed public keys).\n\n+ bugfix introduced in rc4 for an assertion failure that could occur\nduring blockchain reorganizations\n\n+ New code for managing the addr.dat file that prevents an attacker\nfrom filling it with bogus entries.\n\n\n- -- \n- --\nGavin Andresen\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (Darwin)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n\niEYEARECAAYFAk9w/mIACgkQdYgkL74406gafACdHYn6QI6QoKhkf22e0My2jCWa\nIPkAn3YnNeMEmG8N6xEyCdNx3MTjgkcF\n=CRL2\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Version 0.6 release candidate 5 binaries",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1315
        }
    },
    {
        "title": "[Bitcoin-development] 0.7 merge recommendations/status",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2012-03-31T04:03:17",
                "message_text_only": "NOTE: I've been piecing this together for about a week now, and intended to \nupdate it when 0.6.0 final was released, but with the timing of it, I just \nwon't get the time to update for a while, so here is my last draft...\n\nIt seems to me, there is potentially enough ready to merge into 0.7 to start \nthe RC process right away if someone wants to... except that the first merge \nwill probably require rebasing everything else ;)\n\nMy first recommendation is to merge Matt's CBlockStore (#771). It's mostly a \nmajor code cleanup, but it still needs a lot of post-merge testing. The sooner \nit gets in the master branch, the more testing of unexpected cases that it \nwill get before final. Also, Matt's been working hard to keep rebasing it \nthroughout the 0.6 merge window, which is very difficult since it conflicts \nwith pretty much every other change. As one of the parties responsible for \nthose other changes, I vote to get the big conflict over with and rebase all \nthe simpler stuff afterward.\n\nNext up are some changes already ACK'd for 0.7: Hearn's \"pong\" message (#932) \nand Wladimir's Visual C++ 2010 fixes (#949). getmemorypool BIP standardization \n(#936) is also ACK'd, but it might be good to wait until later in the merge \nwindow considering its low impact and high potential for change as the BIP \ngets closer to Accepted status.\n\nFor similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-\nalive support (#568) should be merged sooner rather than later. It's long \noverdue for bitcoind having had a lot of testing, and pretty much required for \nany sort of high-volume bitcoind usage (such as solo mining). Some other \noptimizations by Joel such as the optimized ToHex function (#562) and \nFastGetWork (#565) have also had plenty of testing; all combined, these \noptimizations more than double the performance of JSON-RPC.\nDetails: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334\n\nPieter's getalltransactions (#841) and my getblock_full (#886) provide what is \nneeded to completely replace Jeff's old dumpblock call with bitcoind's new \ngetblock. He also put together a -loadblock option (#883) which has proven \nquite handy for development, and -walletupgrade (#974) seems like a good idea.\n\nUnder the hood, Chris has some neat refactoring of the coin selection \nalgorithm (#905, #898), and I haven't had any problems using it in next-test \nfor a few weeks now. Michael has contributed a patch to get the standard \nreopen-log-files-on-SIGHUP (#917). Matt noticed the protocol documentation on \nthe wiki and BitcoinJ both expect the 'getheaders' message to return at most \nonly 2000 headers, so recommends we enforce that in the core (#951). Philip \nhas a trivial flip to the backslashes in debug.log for Windows (#971). Some \np2pool miners put up a bounty for a JSON-RPC call to customize fee \nrequirements (#989) that would help make Bitcoin more decentralized.\n\nScott has a pull request for Bitcoin-Qt to behave more like other close-to-\nsystray applications by toggling the hide/show action (#855). He's also \ncontributed a patch to show miners' immature balances on the overview screen \n(#837; it leaves only a blank space for non-miners). Nils, on the other hand, \nhas been working with a UI designer to totally remodel Bitcoin-Qt.\n\nCoderrr has rebased his Coin Control features (#415) to the latest version. \nThese seem to be popular, so should probably be merged as soon as it's had \nproper review.\n\nFinally, I don't know the status of Pieter's IPv6 support, but I hope it will \nbe ready for 0.7. Right now all I see submitted for this is support for \nmultiple local IPs (#829) though.\n\nI'd like to see Coinbaser (#719) finally get merged, but since it seems nobody \nis using bitcoind for mining anymore, I guess there isn't a real need. I don't \nplan to rebase this anymore unless someone gives it a \"I'll merge it\" sign.\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2012-03-31T07:56:57",
                "message_text_only": "Thanks for the summary!\n\nOn Sat, Mar 31, 2012 at 6:03 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> It seems to me, there is potentially enough ready to merge into 0.7 to\n> start\n> the RC process right away if someone wants to... except that the first\n> merge\n> will probably require rebasing everything else ;)\n>\n\nYes, we have a lot of changes waiting already.\n\n\n> Next up are some changes already ACK'd for 0.7: Hearn's \"pong\" message\n> (#932)\n> and Wladimir's Visual C++ 2010 fixes (#949). getmemorypool BIP\n> standardization\n> (#936) is also ACK'd, but it might be good to wait until later in the merge\n> window considering its low impact and high potential for change as the BIP\n> gets closer to Accepted status.\n>\n\nAgreed.\n\n\n>\n> any sort of high-volume bitcoind usage (such as solo mining). Some other\n> optimizations by Joel such as the optimized ToHex function (#562) and\n>\n\nSee my comments there; I'm all for optimizing the ToHex function, but I\nprefer that he optimizes the current ToHex function not add yet another one\nwith an incompatible interface.\n\n(we have the same problem with Error/Debug/\"Log to console\" functions, too\nmany of them and sometimes it's unclear what the difference is)\n\n\n> Scott has a pull request for Bitcoin-Qt to behave more like other close-to-\n> systray applications by toggling the hide/show action (#855). He's also\n> contributed a patch to show miners' immature balances on the overview\n> screen\n> (#837; it leaves only a blank space for non-miners). Nils, on the other\n> hand,\n> has been working with a UI designer to totally remodel Bitcoin-Qt.\n>\n\nI also have some UI code changes ready, for example one to use notification\nfrom the bitcoin core when the address book/transactions changed, instead\nof a timer. Will submit pull requests soon.\n\nCoderrr has rebased his Coin Control features (#415) to the latest version.\n> These seem to be popular, so should probably be merged as soon as it's\n> had proper review.\n>\n\nAgreed. It is very popular and should certainly be merged. And it has seen\nquite some testing already. Though this will take some time to review, as\nit is quite a large change.\n\n\n> Finally, I don't know the status of Pieter's IPv6 support, but I hope it\n> will\n> be ready for 0.7. Right now all I see submitted for this is support for\n> multiple local IPs (#829) though.\n>\n>\nIPv6 support would be nice, but I don't think a milestone of 0.7 is\nrealistic. Such a change to the network code will require extensive\ntesting. Who has access to IPv6 and can help testing?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120331/554463e4/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-31T10:54:02",
                "message_text_only": "On Sat, Mar 31, 2012 at 12:03:17AM -0400, Luke-Jr wrote:\n> NOTE: I've been piecing this together for about a week now, and intended to \n> update it when 0.6.0 final was released, but with the timing of it, I just \n> won't get the time to update for a while, so here is my last draft...\n\nNice summary, thanks.\n\n> It seems to me, there is potentially enough ready to merge into 0.7 to start \n> the RC process right away if someone wants to... except that the first merge \n> will probably require rebasing everything else ;)\n\nI think that's right - for several reasons, the time between 0.5 and 0.6 was \nover 4 months. I prefer more frequent releases, as it slows down development\nthis way.\n\n> For similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-\n> alive support (#568) should be merged sooner rather than later. It's long \n> overdue for bitcoind having had a lot of testing, and pretty much required for \n> any sort of high-volume bitcoind usage (such as solo mining). Some other \n> optimizations by Joel such as the optimized ToHex function (#562) and \n> FastGetWork (#565) have also had plenty of testing; all combined, these \n> optimizations more than double the performance of JSON-RPC.\n> Details: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334\n\nI'd rather see a decent encapsulation of wallet and blockchain data structures\nthat allow us to make their mutexes private, and let only the code from the\nrespective mutex take locks in it when necessary. That will automatically\nlead to multithreaded RPC, but in a safe way, without needing guesswork about\nwhich two calls may or may not be called simultaneously.\n\nOf course, that requires a lot more work, but at some point that will be needed\nanyway, imho.\n\n> Pieter's getalltransactions (#841) and my getblock_full (#886) provide what is \n> needed to completely replace Jeff's old dumpblock call with bitcoind's new \n> getblock. He also put together a -loadblock option (#883) which has proven \n> quite handy for development, and -walletupgrade (#974) seems like a good idea.\n\nI've used loadblocks often in my personal branches. At least on Linux it seems\nto work fine. The data scanning code is mostly Cish though, and there may be\nmore preferrable to use boost or generic C++ solutions.\n\n> Finally, I don't know the status of Pieter's IPv6 support, but I hope it will \n> be ready for 0.7. Right now all I see submitted for this is support for \n> multiple local IPs (#829) though.\n\nI've already had a fully functional IPv6 node based on 0.3.24. Most of the changes\nthere have since been incorported in netbase (#735), and because of a risk for DoS'es\nbased on the much larger number of addresses an attacker could have under his control,\naddrman (#787) was necessary before IPv6 could be fully implemented. So, the technical\npart of supporting IPv6 seems mostly finished - right now, it's mostly just removing\nsome (!IsIPv4()) checks and adding listen/connect code that is IPv6-compatible.\nI'll do a pullreq for that soon.\n\nThere are a few other issues, though. For example: how will relaying work: will IPv4\nnodes relay IPv6 addresses? If not, the IPv6 bitcoin network will be completely\nseparate from the IPv4 one, though both may overlap in some points. The opposite is\nalso possible: allowing all nodes to relay IPv6 addresses, but only use them in case\nan IPv6-compatible interface is detected. Any opinions about this?\n\nSomething else was suggested by Jeff: what if a node accidentally connects to itself?\nAs we're moving towards multiple local addresses with IPv6, the chances for this\nbecome larger. Finally, there are always extra risks involved, as we could unknowingly\nbe opening DoS or others vulnerabilities.\n\nFinally, supporting IPv6 in a somewhat general way would pave the way for bitcoin\nfunctioning for example as a Tor or I2P hidden service, by using onioncat-like\ntor-encoded-in-IPv6 addresses. This way, two bitcoin nodes could connect to eachother\nwithout the need for passing any exit node.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-31T11:08:47",
                "message_text_only": "On Sat, Mar 31, 2012 at 12:54:02PM +0200, Pieter Wuille wrote:\n> Something else was suggested by Jeff: what if a node accidentally connects to itself?\n> As we're moving towards multiple local addresses with IPv6, the chances for this\n> become larger. Finally, there are always extra risks involved, as we could unknowingly\n> be opening DoS or others vulnerabilities.\n\nMy mistake: I mean two nodes connecting twice to eachother. There is already protection\nagainst a node connecting to itself.\n\n-- \nPieter"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-03-31T11:16:56",
                "message_text_only": "If you are interested, I could push libcoin to bitcoin (e.g. bitcoin/libcoin) and then you could build bitcoind bitcoin-qt on libcoin.\n\nlibcoin solved most of the problems you list below. And if you worry about the copyright/license I am also willing to change that to make it fit.\n\nlibcoin have no global thread mutexes and and there is no blocking of the main thread due to rpc methods (except for a sendto), further, e.g. a reorganize only locks the main thread for a split second while the final commit is done. \n\nThe libcoin rpc supports keep_alive and pipelining, runs in its own thread (but can also run in the same thread as the node) and uses async operation. Ipv6 is easy to implement in libcoin as the CAddress/Endpoint class is implemented as a subclass of boost::endpoint, only thing holding back is deciding on an ipv6 format on IRC, and, I then I would really like to reverse the order of the last 12 bytes in the address db (they are opposite to boost).\n\nCheers,\n\nMichael\n\nOn 31/03/2012, at 12:54, Pieter Wuille wrote:\n\n> On Sat, Mar 31, 2012 at 12:03:17AM -0400, Luke-Jr wrote:\n>> NOTE: I've been piecing this together for about a week now, and intended to \n>> update it when 0.6.0 final was released, but with the timing of it, I just \n>> won't get the time to update for a while, so here is my last draft...\n> \n> Nice summary, thanks.\n> \n>> It seems to me, there is potentially enough ready to merge into 0.7 to start \n>> the RC process right away if someone wants to... except that the first merge \n>> will probably require rebasing everything else ;)\n> \n> I think that's right - for several reasons, the time between 0.5 and 0.6 was \n> over 4 months. I prefer more frequent releases, as it slows down development\n> this way.\n> \n>> For similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-\n>> alive support (#568) should be merged sooner rather than later. It's long \n>> overdue for bitcoind having had a lot of testing, and pretty much required for \n>> any sort of high-volume bitcoind usage (such as solo mining). Some other \n>> optimizations by Joel such as the optimized ToHex function (#562) and \n>> FastGetWork (#565) have also had plenty of testing; all combined, these \n>> optimizations more than double the performance of JSON-RPC.\n>> Details: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334\n> \n> I'd rather see a decent encapsulation of wallet and blockchain data structures\n> that allow us to make their mutexes private, and let only the code from the\n> respective mutex take locks in it when necessary. That will automatically\n> lead to multithreaded RPC, but in a safe way, without needing guesswork about\n> which two calls may or may not be called simultaneously.\n> \n> Of course, that requires a lot more work, but at some point that will be needed\n> anyway, imho.\n> \n>> Pieter's getalltransactions (#841) and my getblock_full (#886) provide what is \n>> needed to completely replace Jeff's old dumpblock call with bitcoind's new \n>> getblock. He also put together a -loadblock option (#883) which has proven \n>> quite handy for development, and -walletupgrade (#974) seems like a good idea.\n> \n> I've used loadblocks often in my personal branches. At least on Linux it seems\n> to work fine. The data scanning code is mostly Cish though, and there may be\n> more preferrable to use boost or generic C++ solutions.\n> \n>> Finally, I don't know the status of Pieter's IPv6 support, but I hope it will \n>> be ready for 0.7. Right now all I see submitted for this is support for \n>> multiple local IPs (#829) though.\n> \n> I've already had a fully functional IPv6 node based on 0.3.24. Most of the changes\n> there have since been incorported in netbase (#735), and because of a risk for DoS'es\n> based on the much larger number of addresses an attacker could have under his control,\n> addrman (#787) was necessary before IPv6 could be fully implemented. So, the technical\n> part of supporting IPv6 seems mostly finished - right now, it's mostly just removing\n> some (!IsIPv4()) checks and adding listen/connect code that is IPv6-compatible.\n> I'll do a pullreq for that soon.\n> \n> There are a few other issues, though. For example: how will relaying work: will IPv4\n> nodes relay IPv6 addresses? If not, the IPv6 bitcoin network will be completely\n> separate from the IPv4 one, though both may overlap in some points. The opposite is\n> also possible: allowing all nodes to relay IPv6 addresses, but only use them in case\n> an IPv6-compatible interface is detected. Any opinions about this?\n> \n> Something else was suggested by Jeff: what if a node accidentally connects to itself?\n> As we're moving towards multiple local addresses with IPv6, the chances for this\n> become larger. Finally, there are always extra risks involved, as we could unknowingly\n> be opening DoS or others vulnerabilities.\n> \n> Finally, supporting IPv6 in a somewhat general way would pave the way for bitcoin\n> functioning for example as a Tor or I2P hidden service, by using onioncat-like\n> tor-encoded-in-IPv6 addresses. This way, two bitcoin nodes could connect to eachother\n> without the need for passing any exit node.\n> \n> -- \n> Pieter\n> \n> ------------------------------------------------------------------------------\n> This SF email is sponsosred by:\n> Try Windows Azure free for 90 days Click Here \n> http://p.sf.net/sfu/sfd2d-msazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-03-31T12:28:28",
                "message_text_only": "On Sat, Mar 31, 2012 at 01:16:56PM +0200, Michael Gr\u00f8nager wrote:\n> If you are interested, I could push libcoin to bitcoin (e.g. bitcoin/libcoin) and then you could build bitcoind bitcoin-qt on libcoin.\n> \n> libcoin solved most of the problems you list below. And if you worry about the copyright/license I am also willing to change that to make it fit.\n\nThanks for that - without a license change it would not be possible to merge anything.\n\n> libcoin have no global thread mutexes and and there is no blocking of the main thread due to rpc methods (except for a sendto), further, e.g. a reorganize only locks the main thread for a split second while the final commit is done. \n\nYes, I like its design and refactorings a lot, but at the same time it's very large change to accept at once. In particular, I'm not entirely convinced yet about its thread-safety. For example, acceptblock is a public method, but it seems (i may be missing something) to grab no lock at all until setBestBlock or reorganize is called. Is it impossible to call acceptBlock twice simultaneously? One may start with a bestblockindex value that gets modified a split second later by a simultaneous call. It may be the case that there are indeed no possibilities for this to happen because of things I'm missing, but although I'm a big fan of well-encapsulated locks and the use of reader-writer locks, it's hard to verify whether you use them enough. My suggestion would be: make each publicly accessible method of BlockChain grab either a reader lock (if it's a const function) or an upgradable lock, and take a writer lock in each method that actually performs changes.\n\n> The libcoin rpc supports keep_alive and pipelining, runs in its own thread (but can also run in the same thread as the node) and uses async operation. Ipv6 is easy to implement in libcoin as the CAddress/Endpoint class is implemented as a subclass of boost::endpoint, only thing holding back is deciding on an ipv6 format on IRC, and, I then I would really like to reverse the order of the last 12 bytes in the address db (they are opposite to boost).\n\nNot sure what you mean: the serialized combination of the 32-bit IPv4 address and 12 bytes padding in CAddress are exactly a bsd socket library in6_addr in network byte order. In 0.6.0, CAddress derives from CNetAddr, which encapsulates these 16 bytes.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "0.7 merge recommendations/status",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Pieter Wuille",
                "Michael Gr\u00f8nager",
                "Wladimir"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 19237
        }
    }
]