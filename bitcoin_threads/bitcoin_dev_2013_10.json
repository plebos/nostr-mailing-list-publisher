[
    {
        "title": "[Bitcoin-development] bitcoind stops responding",
        "thread_messages": [
            {
                "author": "Fatima Castiglione Maldonado \u53d1",
                "date": "2013-10-01T00:05:33",
                "message_text_only": "Oh, excuse me; it looked related to me.\nIt was not at all my intention to mess down the thread; on the contrary I\nwas trying to be of help and at the same time getting an answer.\n\nNo, I must recognize that I was not aware of sendmany. This is my first\ntime managing bulk transactions.\nThank you very much for your help.\nI lead a group of developers and we are trying to be of help to the Bitcoin\ncommunity at large, and to this group.\n\nKindest regards,\nFatima\n\n\n\n\n2013/9/30 Gregory Maxwell <gmaxwell at gmail.com>\n\n> On Mon, Sep 30, 2013 at 3:00 PM, Fatima Castiglione Maldonado \u53d1\n> <castiglionemaldonado at gmail.com> wrote:\n> > I am new on the list. I got a similar problem.\n> > If I put \"sendToAdress\" transactions to bitcoind, it will accept between\n> 1\n> > and 3 transactions per minute, depending on the underlying machine.\n> > If I try to send one transaction every 20 seconds or less, bitcoind stops\n> > responding to RPC calls.\n> >\n> > Does anybody know of any solution / fix / workaround for this?\n>\n> This is unrelated to Slush's question.\n>\n> The complexity of IsConfirmed/Ismine is exponential and starts taking\n> tens of seconds at a chain of a dozen unconfirmed transactions (and\n> growing from there)\n>\n> There are some patches that change this, but since the whole network\n> will only average about 7tx per second, you're probably doing\n> something wrong if you're building great big chains of unconfirmed\n> transaction.  Are you aware of sendmany?\n>\n\n\n\n-- \n=================================\nF\u00e1tima Castiglione Maldonado\ncastiglionemaldonado at gmail.com\n\n                     ____\n                   ,'_   |\n __________________|__|__|__\n<_____                      )                _.------._\n      `-----------,------.-'              ,-'          `-.\n                 |    |  |              ,'                `.\n                ,'    |  |            ,'                    `.\n                |  _,-'  |__         /                        \\\n              _,'-'    `.   `---.___|_____________             \\\n          .--'  -----.  | _____________________   `-. -----     |\n          |    ___|  |  |                      \\  ,- \\          |\n          |    ___|  |===========================((|) |         |\n          |       |  |  | _____________________/  `- /          |\n          `--._ -----'  |        _________________,-' -----     |\n               `.-._   ,' __.---'   |                          /\n                |   `-.  |           \\                        /\n                `.    |  |            `.                    ,'\n                 |    |  |              `.                ,'\n _____,----------`-------`-.              `-._        _,-'\n<___________________________)                 `------'\n                   | _|  |\n                   `.____|\n\n\n\n=================================\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130930/aea8ab42/attachment.html>"
            },
            {
                "author": "Chris Double",
                "date": "2013-10-01T00:20:40",
                "message_text_only": "slush <slush at centrum.cz> writes:\n\n> I observed this problem with version 0.8.2, but it is still happening with\n> 0.8.5. \n\nI see this as well with 0.8.2+. I don't see it on 0.8.1. I originally\nhit the '4 keep alive thread limit' where four clients on the same\nbitcoind would result in other clients not being able to connect. I\nresolved that and still hit the RPC hanging issue. The most problem I've\nhad is using 'getwork' which I believe is going the wayside anyway."
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-01T01:17:17",
                "message_text_only": "Can you please describe more than \"RPC stops working\"?  What is your\nprecise RPC usage?  getwork?  getblocktemplate?  other calls?  What is\nyour OS?\n\n\nOn Mon, Sep 30, 2013 at 10:44 PM, slush <slush at centrum.cz> wrote:\n> Hi,\n>\n> during several weeks I'm observing more and more frequent issues with\n> bitcoind. The problem is that bitcoind stops responding to RPC calls, but\n> there's no other suspicious activity in bitcoind log, CPU usage is low, disk\n> I/O is standard etc.\n>\n> I observed this problem with version 0.8.2, but it is still happening with\n> 0.8.5. Originally this happen just one or twice per day. Today my monitoring\n> scripts restarted bitcoind more than 30x, which sounds alarming. This happen\n> on various backends, so it isn't a problem of one specific node. Is there\n> anybody else who's observing similar problem?\n>\n> Thanks,\n> slush\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "slush",
                "date": "2013-10-01T08:58:05",
                "message_text_only": "ad \"RPC stops working\":\n\n* Client makes a 'getinfo' call and don't receive a response in a minute.\n\n\"What is your precise RPC usage? \"\n\nOne process is asking getinfo every second as a fallback to possibly\nmisconfigured blocknotify. It also calls getblocktemplate every 30 second.\nSecond process is calling getinfo once a minute to check if bitcoind is\nworking. If it don't receive a response in a minute, it kills bitcoind and\nstarts it again.\n\nThat's all.\n\nOS is Debian.\n\nOn Tue, Oct 1, 2013 at 3:17 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Can you please describe more than \"RPC stops working\"?  What is your\n> precise RPC usage?  getwork?  getblocktemplate?  other calls?  What is\n> your OS?\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131001/aac731ca/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-04T06:22:34",
                "message_text_only": "On Tue, Oct 1, 2013 at 6:58 PM, slush <slush at centrum.cz> wrote:\n\n> One process is asking getinfo every second as a fallback to possibly\n> misconfigured blocknotify. It also calls getblocktemplate every 30 second.\n>\n\ngetinfo does a bunch of stuff; with 0.9 you will be able to use\ngetbestblockhash instead.\n\n\n\n> Second process is calling getinfo once a minute to check if bitcoind is\n> working. If it don't receive a response in a minute, it kills bitcoind and\n> starts it again.\n>\n\nIf you just want to see if bitcoind is responding to RPC requests, then\n'help getinfo' would do the trick without acquiring any locks.\n\nRE: running into the maximum-of-4-keepalive-requests : simple workaround is\nto run with -rpcthreads=11 (or however many keepalive connections you need\nto support).  I agree that the rpc code should be smarter; making the last\nrpc thread ignore keepalive and always disconnecting should be a fairly\nsimple patch, and \"patches welcome.\"\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3bf174f2/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-04T15:05:29",
                "message_text_only": "On Fri, Oct 4, 2013 at 2:22 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> RE: running into the maximum-of-4-keepalive-requests : simple workaround is\n> to run with -rpcthreads=11 (or however many keepalive connections you need\n> to support).  I agree that the rpc code should be smarter; making the last\n> rpc thread ignore keepalive and always disconnecting should be a fairly\n> simple patch, and \"patches welcome.\"\n\nIt's all still working around a problem unchanged since Satoshi wrote\nit:  the HTTP server code paths use blocking I/O.\n\nAmusingly, we do this through an async I/O library, which helps\nfacilitate SSL, but all our connections and operations are blocking.\n\nThat's why RPC was multi-threaded in part:  to work around the ugly\nblocking nature of the code.  At least with multiple threads, one\nthread will not stall another even if the network stalls (or a\nsoftware bug triggers a stall etc.)\n\nHopefully I can dive into the code and make is truly async I/O.  It\ntakes some work, and I'm happy if someone else steals the task, but\nthat's what really needs to be done.\n\nI tried the multi-threaded approach, writing an entire boost::asio\nskeleton JSON-RPC HTTP server: https://github.com/jgarzik/rpcsrv\nThis is working, tested code that uses boost::asio properly.  It's\nalso quite a bit of LOC, and a bit messy to boot (four LOC per boost\nasync action and incomprehensible compiler errors in return for proper\nasync+MT).\n\nA single thread with async I/O is likely sufficient for even heavy\nuses of RPC -- since today it all goes through a big lock anyway.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-01T01:26:59",
                "message_text_only": "On Mon, Sep 30, 2013 at 11:01 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> 0.8.2 apparently was the first Bitcoin version to support RPC keepalive.\n\nNo, this is not correct at all.  RPC keepalive was present in 0.7.0,\npossibly earlier.\n\nCome on, it took a 30 second 'git checkout' session to verify this.\n\n\n> With the 4 RPC thread limit, four keepalive connections will exhaust all four and prevent further connections.\n\nI was about to flame you with a \"WTF is this fiction?\" but it seems\ntrue: 21eb5ada introduces this.\n\nUnfortunately, it does so erroneously, introducing clearly buggy\nbehavior that did not exist with the thread-per-connection code that\nprovided keep-alive before commit 21eb5ada.\n\nIn my opinion, 21eb5ada half-changed the RPC code from\nthread-per-connection to a worker-group model, without considering all\nthe consequences.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Olivier Langlois",
                "date": "2013-10-01T04:03:39",
                "message_text_only": "On Mon, 2013-09-30 at 22:44 +0200, slush wrote:\n> Hi,\n> \n> \n> during several weeks I'm observing more and more frequent issues with\n> bitcoind. The problem is that bitcoind stops responding to RPC calls,\n> but there's no other suspicious activity in bitcoind log, CPU usage is\n> low, disk I/O is standard etc.\n> \n> \n> I observed this problem with version 0.8.2, but it is still happening\n> with 0.8.5. Originally this happen just one or twice per day. Today my\n> monitoring scripts restarted bitcoind more than 30x, which sounds\n> alarming. This happen on various backends, so it isn't a problem of\n> one specific node. Is there anybody else who's observing similar\n> problem? \n\nWhat a coincidence. I do have observed the same thing. right now with\n0.8.5. I am writing a small app. My jsonrpc client is programmed to\ntimeout after 2 secs and I did see a couple of timeouts once in while.\n\nWhat I did is a simple test app that just hammer bitcoind with 3 rpc\nrequests every 30 seconds and I abort it as soon as it encountered a\ntimeout.\n\nThe 3 request burst is performed on the same HTTP 1.1 kept alive\nconnection. Then I disconnect. When I launch my app before leaving in\nthe morning, pretty sure that I have a core dump waiting for me when I\ncome back.\n\nI choose very simple calls: getinfo,getaccount\n\nAdded a couple of traces in the RPC handling code. (BTW, timestamps in\ntraces would be tremendously useful for tracking problems...). I see my\nrequest received by bitcoind but there is no trace yet to show that the\nreply is sent.\n\nNot sure yet exactly where the problem is but my current #1 suspect is:\n\nLOCK2(cs_main, pwalletMain->cs_wallet);\n\nwith some kind of lock contention with the other threads."
            },
            {
                "author": "Olivier Langlois",
                "date": "2013-10-01T07:10:18",
                "message_text_only": "> \n> Not sure yet exactly where the problem is but my current #1 suspect is:\n> \n> LOCK2(cs_main, pwalletMain->cs_wallet);\n> \n> with some kind of lock contention with the other threads.\n> \n\nI was right. It took more than 6 seconds to acquire the locks\n\nI did modify bitcoinrpc.cpp:\n\nnamespace {\n\nstruct timeval difftv( const struct timeval &tv1, const struct timeval\n&tv2 )\n{\n        struct timeval res;\n        res.tv_sec = tv1.tv_sec - tv2.tv_sec;\n        if (tv2.tv_usec > tv1.tv_usec) {\n                res.tv_sec--;\n                res.tv_usec = 1000000;\n        } else\n                res.tv_usec = 0;\n\n        res.tv_usec += tv1.tv_usec;\n        res.tv_usec -= tv2.tv_usec;\n\n        return res;\n}\n\nvoid printExecTimes( const struct timeval &tv1,\n                     const struct timeval &tv2,\n                     const struct timeval &tv3 )\n{\n        struct timeval lockTime = difftv(tv2,tv1);\n        struct timeval callTime = difftv(tv3,tv2);\n        struct timeval totalTime = difftv(tv3,tv1);\n        printf( \"locktime : %ld.%06ld calltime : %ld.%06ld totaltime : %\nld.%06ld\\n\",\n\nlockTime.tv_sec,lockTime.tv_usec,callTime.tv_sec,callTime.tv_usec,\n                totalTime.tv_sec,totalTime.tv_usec);\n}\n\n}\n\njson_spirit::Value CRPCTable::execute(const std::string &strMethod,\nconst json_spirit::Array &params) const\n{\n    // Find method\n    const CRPCCommand *pcmd = tableRPC[strMethod];\n    if (!pcmd)\n        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n\n    // Observe safe mode\n    string strWarning = GetWarnings(\"rpc\");\n    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n        !pcmd->okSafeMode)\n        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe\nmode: \") + strWarning);\n\n    try\n    {\n        // Execute\n        Value result;\n        {\n            if (pcmd->threadSafe)\n                result = pcmd->actor(params, false);\n            else {\n                struct timeval tv1,tv2,tv3;\n                gettimeofday(&tv1,NULL); {\n                LOCK2(cs_main, pwalletMain->cs_wallet);\n                gettimeofday(&tv2,NULL);\n                result = pcmd->actor(params, false); }\n                gettimeofday(&tv3,NULL);\n                printExecTimes(tv1,tv2,tv3);\n            }\n        }\n        return result;\n    }\n    catch (std::exception& e)\n    {\n        throw JSONRPCError(RPC_MISC_ERROR, e.what());\n    }\n}\n\nlocktime : 0.000001 calltime : 0.000153 totaltime : 0.000154\nlocktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\nlocktime : 0.000000 calltime : 0.000451 totaltime : 0.000451\nlocktime : 0.000000 calltime : 0.000313 totaltime : 0.000313\nlocktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\nlocktime : 0.051574 calltime : 0.000377 totaltime : 0.051951\nlocktime : 0.000000 calltime : 0.000222 totaltime : 0.000222\nlocktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\nlocktime : 0.121106 calltime : 0.000471 totaltime : 0.121577\nlocktime : 0.078093 calltime : 0.000451 totaltime : 0.078544\nlocktime : 0.101185 calltime : 0.000021 totaltime : 0.101206\nlocktime : 0.000000 calltime : 0.000476 totaltime : 0.000476\nlocktime : 0.000001 calltime : 0.000291 totaltime : 0.000292\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.003025 calltime : 0.000036 totaltime : 0.003061\nlocktime : 0.000000 calltime : 0.000383 totaltime : 0.000383\nlocktime : 0.000000 calltime : 0.000210 totaltime : 0.000210\nlocktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\nlocktime : 0.000000 calltime : 0.000470 totaltime : 0.000470\nlocktime : 0.000000 calltime : 0.000295 totaltime : 0.000295\nlocktime : 0.000000 calltime : 0.000020 totaltime : 0.000020\nlocktime : 0.000001 calltime : 0.000385 totaltime : 0.000386\nlocktime : 0.000000 calltime : 0.000241 totaltime : 0.000241\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000001 calltime : 0.000308 totaltime : 0.000309\nlocktime : 0.000000 calltime : 0.000164 totaltime : 0.000164\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000000 calltime : 0.000376 totaltime : 0.000376\nlocktime : 0.000000 calltime : 0.000356 totaltime : 0.000356\nlocktime : 0.000000 calltime : 0.000021 totaltime : 0.000021\nlocktime : 0.000000 calltime : 0.000496 totaltime : 0.000496\nlocktime : 0.000001 calltime : 0.000201 totaltime : 0.000202\nlocktime : 0.000001 calltime : 0.000017 totaltime : 0.000018\nlocktime : 0.000000 calltime : 0.000301 totaltime : 0.000301\nlocktime : 0.000000 calltime : 0.000180 totaltime : 0.000180\nlocktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\nlocktime : 0.000001 calltime : 0.000359 totaltime : 0.000360\nlocktime : 0.000000 calltime : 0.000265 totaltime : 0.000265\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000001 calltime : 0.000488 totaltime : 0.000489\nlocktime : 0.000000 calltime : 0.000226 totaltime : 0.000226\nlocktime : 0.000000 calltime : 0.000025 totaltime : 0.000025\nlocktime : 0.000000 calltime : 0.000369 totaltime : 0.000369\nlocktime : 0.000000 calltime : 0.000262 totaltime : 0.000262\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000000 calltime : 0.000459 totaltime : 0.000459\nlocktime : 0.000000 calltime : 0.000260 totaltime : 0.000260\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000000 calltime : 0.000330 totaltime : 0.000330\nlocktime : 0.000000 calltime : 0.000223 totaltime : 0.000223\nlocktime : 0.000000 calltime : 0.000014 totaltime : 0.000014\nlocktime : 0.000001 calltime : 0.000449 totaltime : 0.000450\nlocktime : 0.000001 calltime : 0.000248 totaltime : 0.000249\nlocktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\nlocktime : 0.000000 calltime : 0.000327 totaltime : 0.000327\nlocktime : 0.000000 calltime : 0.000196 totaltime : 0.000196\nlocktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\nlocktime : 0.121170 calltime : 0.000408 totaltime : 0.121578\nlocktime : 0.004912 calltime : 0.000278 totaltime : 0.005190\nlocktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\nlocktime : 5.996820 calltime : 0.000328 totaltime : 5.997148"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-01T14:17:43",
                "message_text_only": "Olivier,\n\nWhat network activity was going on, during this test?  i.e. during the\ncall with 5.99 locktime, was bitcoind processing a block or sending a\nlarge transaction?  There are plenty of valid reasons -- sadly -- that\nthe locks are held for a long time, during random network events.\n\n\n\nOn Tue, Oct 1, 2013 at 9:10 AM, Olivier Langlois <olivier at trillion01.com> wrote:\n>\n>>\n>> Not sure yet exactly where the problem is but my current #1 suspect is:\n>>\n>> LOCK2(cs_main, pwalletMain->cs_wallet);\n>>\n>> with some kind of lock contention with the other threads.\n>>\n>\n> I was right. It took more than 6 seconds to acquire the locks\n>\n> I did modify bitcoinrpc.cpp:\n>\n> namespace {\n>\n> struct timeval difftv( const struct timeval &tv1, const struct timeval\n> &tv2 )\n> {\n>         struct timeval res;\n>         res.tv_sec = tv1.tv_sec - tv2.tv_sec;\n>         if (tv2.tv_usec > tv1.tv_usec) {\n>                 res.tv_sec--;\n>                 res.tv_usec = 1000000;\n>         } else\n>                 res.tv_usec = 0;\n>\n>         res.tv_usec += tv1.tv_usec;\n>         res.tv_usec -= tv2.tv_usec;\n>\n>         return res;\n> }\n>\n> void printExecTimes( const struct timeval &tv1,\n>                      const struct timeval &tv2,\n>                      const struct timeval &tv3 )\n> {\n>         struct timeval lockTime = difftv(tv2,tv1);\n>         struct timeval callTime = difftv(tv3,tv2);\n>         struct timeval totalTime = difftv(tv3,tv1);\n>         printf( \"locktime : %ld.%06ld calltime : %ld.%06ld totaltime : %\n> ld.%06ld\\n\",\n>\n> lockTime.tv_sec,lockTime.tv_usec,callTime.tv_sec,callTime.tv_usec,\n>                 totalTime.tv_sec,totalTime.tv_usec);\n> }\n>\n> }\n>\n> json_spirit::Value CRPCTable::execute(const std::string &strMethod,\n> const json_spirit::Array &params) const\n> {\n>     // Find method\n>     const CRPCCommand *pcmd = tableRPC[strMethod];\n>     if (!pcmd)\n>         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n>\n>     // Observe safe mode\n>     string strWarning = GetWarnings(\"rpc\");\n>     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n>         !pcmd->okSafeMode)\n>         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe\n> mode: \") + strWarning);\n>\n>     try\n>     {\n>         // Execute\n>         Value result;\n>         {\n>             if (pcmd->threadSafe)\n>                 result = pcmd->actor(params, false);\n>             else {\n>                 struct timeval tv1,tv2,tv3;\n>                 gettimeofday(&tv1,NULL); {\n>                 LOCK2(cs_main, pwalletMain->cs_wallet);\n>                 gettimeofday(&tv2,NULL);\n>                 result = pcmd->actor(params, false); }\n>                 gettimeofday(&tv3,NULL);\n>                 printExecTimes(tv1,tv2,tv3);\n>             }\n>         }\n>         return result;\n>     }\n>     catch (std::exception& e)\n>     {\n>         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n>     }\n> }\n>\n> locktime : 0.000001 calltime : 0.000153 totaltime : 0.000154\n> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\n> locktime : 0.000000 calltime : 0.000451 totaltime : 0.000451\n> locktime : 0.000000 calltime : 0.000313 totaltime : 0.000313\n> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\n> locktime : 0.051574 calltime : 0.000377 totaltime : 0.051951\n> locktime : 0.000000 calltime : 0.000222 totaltime : 0.000222\n> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011\n> locktime : 0.121106 calltime : 0.000471 totaltime : 0.121577\n> locktime : 0.078093 calltime : 0.000451 totaltime : 0.078544\n> locktime : 0.101185 calltime : 0.000021 totaltime : 0.101206\n> locktime : 0.000000 calltime : 0.000476 totaltime : 0.000476\n> locktime : 0.000001 calltime : 0.000291 totaltime : 0.000292\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.003025 calltime : 0.000036 totaltime : 0.003061\n> locktime : 0.000000 calltime : 0.000383 totaltime : 0.000383\n> locktime : 0.000000 calltime : 0.000210 totaltime : 0.000210\n> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\n> locktime : 0.000000 calltime : 0.000470 totaltime : 0.000470\n> locktime : 0.000000 calltime : 0.000295 totaltime : 0.000295\n> locktime : 0.000000 calltime : 0.000020 totaltime : 0.000020\n> locktime : 0.000001 calltime : 0.000385 totaltime : 0.000386\n> locktime : 0.000000 calltime : 0.000241 totaltime : 0.000241\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000001 calltime : 0.000308 totaltime : 0.000309\n> locktime : 0.000000 calltime : 0.000164 totaltime : 0.000164\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000000 calltime : 0.000376 totaltime : 0.000376\n> locktime : 0.000000 calltime : 0.000356 totaltime : 0.000356\n> locktime : 0.000000 calltime : 0.000021 totaltime : 0.000021\n> locktime : 0.000000 calltime : 0.000496 totaltime : 0.000496\n> locktime : 0.000001 calltime : 0.000201 totaltime : 0.000202\n> locktime : 0.000001 calltime : 0.000017 totaltime : 0.000018\n> locktime : 0.000000 calltime : 0.000301 totaltime : 0.000301\n> locktime : 0.000000 calltime : 0.000180 totaltime : 0.000180\n> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\n> locktime : 0.000001 calltime : 0.000359 totaltime : 0.000360\n> locktime : 0.000000 calltime : 0.000265 totaltime : 0.000265\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000001 calltime : 0.000488 totaltime : 0.000489\n> locktime : 0.000000 calltime : 0.000226 totaltime : 0.000226\n> locktime : 0.000000 calltime : 0.000025 totaltime : 0.000025\n> locktime : 0.000000 calltime : 0.000369 totaltime : 0.000369\n> locktime : 0.000000 calltime : 0.000262 totaltime : 0.000262\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000000 calltime : 0.000459 totaltime : 0.000459\n> locktime : 0.000000 calltime : 0.000260 totaltime : 0.000260\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000000 calltime : 0.000330 totaltime : 0.000330\n> locktime : 0.000000 calltime : 0.000223 totaltime : 0.000223\n> locktime : 0.000000 calltime : 0.000014 totaltime : 0.000014\n> locktime : 0.000001 calltime : 0.000449 totaltime : 0.000450\n> locktime : 0.000001 calltime : 0.000248 totaltime : 0.000249\n> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017\n> locktime : 0.000000 calltime : 0.000327 totaltime : 0.000327\n> locktime : 0.000000 calltime : 0.000196 totaltime : 0.000196\n> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\n> locktime : 0.121170 calltime : 0.000408 totaltime : 0.121578\n> locktime : 0.004912 calltime : 0.000278 totaltime : 0.005190\n> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016\n> locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Olivier Langlois",
                "date": "2013-10-02T03:20:53",
                "message_text_only": "On Tue, 2013-10-01 at 16:17 +0200, Jeff Garzik wrote:\n> Olivier,\n> \n> What network activity was going on, during this test?  i.e. during the\n> call with 5.99 locktime, was bitcoind processing a block or sending a\n> large transaction?  There are plenty of valid reasons -- sadly -- that\n> the locks are held for a long time, during random network events.\n> \nJeff,\n\nIn your opinion what would be then a reasonable to value for a rpc client? From what you say, 2 seconds is apparently not enough.\n\nFor your question, unfortunately or fortunately, not much. The only thing that strike out is that CTxMemPool::accept() seems to be called while the rpc thread is between \njreq.parse() and tableRPC.execute().\n\nHere are the logs surrounding\nthe 5.99 sec lock wait.\n\n1380610602.706628 : RPC connection closed\nAdded 1 addresses from 85.202.231.133: 2633 tried, 12769 new\nCTxMemPool::accept() : accepted 6191dee582c1c19fd76d6f06a4c594ee1577dbb54b688c5dcc676ebfbc225cda (poolsz 1262)\nAdded 1 addresses from 217.73.163.131: 2633 tried, 12769 new\nCTxMemPool::accept() : accepted 7a482a24d2588a66c6561da6ee29b5adff4e8ba72e58fb360a2c36cd78be3a71 (poolsz 1263)\nAdded 1 addresses from 24.211.152.165: 2633 tried, 12770 new\nreceived getdata for: tx 3849ab1481c9d8c283e682f2ef8421a8cf01ef228a89d0daf2d5e888e04f45e4\nCTxMemPool::accept() : accepted cf34b31f26d3275b66adf081f84fca2d761e8e260b42243ba36638368c1633b1 (poolsz 1264)\nCTxMemPool::accept() : accepted 61fc517d9461b79bab972593fbaf8b0be8ed0222c232b2c51eea2a781a44efef (poolsz 1265)\nCTxMemPool::accept() : accepted 4a42913c0b956f27cfc72ed44605ef8654ff8720b81e6ef1c7dfab8e300ee9d9 (poolsz 1266)\nCTxMemPool::accept() : accepted cec545fca0b4ad6efa44159758dd18b2e3047a1f1783812256a11aba96c32792 (poolsz 1267)\nCTxMemPool::accept() : accepted 1ad7ff07ed4b8299af0f5ce61b721f20d984225a4a963174f51d329587eef2e9 (poolsz 1268)\nCTxMemPool::accept() : accepted 12f6a6e453f34db7165983def2ecdfef174917194aa1b8f4c4883b02595c043c (poolsz 1269)\nCTxMemPool::accept() : accepted 69942aebbf3d3e6b781e56553f0b1e021e07fe1c4d922b221cadabb7eb84abb7 (poolsz 1270)\nCTxMemPool::accept() : accepted d7d95a6fc61209c8dbdf4b17a058f4f9c7fa6d6e76b36ca4cf8bb67f288ef3cc (poolsz 1271)\nCTxMemPool::accept() : accepted da6c8145c9f506ec0f146b37d57ef423098b584af8dbed9490002ed900228c27 (poolsz 1272)\nCTxMemPool::accept() : accepted 46debd7df211ea26060db539a909d7908f1f6fcca8103897909280ab156b8872 (poolsz 1273)\nCTxMemPool::accept() : accepted 30f47bae4e485e1129e0598f2264469a4f9186d9a7988debfe7e21f283975c9f (poolsz 1274)\nCTxMemPool::accept() : accepted 80848aebe10afda234c42db1ae3a013f873af54906d966afcb42547501d899c4 (poolsz 1275)\nCTxMemPool::accept() : accepted faaf9a2b57e80460293f3d53115fc8795bb1357d0ae6400710bc8a6610312b81 (poolsz 1276)\nCTxMemPool::accept() : accepted 44f5fc39cde3b35d32f20f8246001f946c9fdc1297ea21fd7400c0c483aceca2 (poolsz 1277)\nCTxMemPool::accept() : accepted d92a8389cfa6a8ea98a8103a138f45e56cf229d9b35bd46ac319167d17409edd (poolsz 1278)\nCTxMemPool::accept() : accepted 557e88dfed0d2e9cd3c8c1af2eb497ea5c0a888af7417f7b816390af1dd4f38a (poolsz 1279)\nCTxMemPool::accept() : accepted 037b48b12209b046bed88806bf5a92e3cc45cc2e30af895b5536fd8ef2ae865f (poolsz 1280)\nreceived getdata for: tx 1ad7ff07ed4b8299af0f5ce61b721f20d984225a4a963174f51d329587eef2e9\nCTxMemPool::accept() : accepted cf8149016e4c25b0408a70dbb8f7bc596331de6840b9a3115a6aa5445cc2b3fe (poolsz 1281)\nreceived getdata for: tx 12f6a6e453f34db7165983def2ecdfef174917194aa1b8f4c4883b02595c043c\nreceived getdata for: tx 61fc517d9461b79bab972593fbaf8b0be8ed0222c232b2c51eea2a781a44efef\nCTxMemPool::accept() : accepted 890b41943b2cda0b9d7e34ddfcddb490582165c0cedd8fca09df6eec37ad768d (poolsz 1282)\n1380610633.387730: POST / HTTP/1.1^M\nThreadRPCServer method=getinfo\nCTxMemPool::accept() : accepted dc2941dd69b2f9fa2754f741dfba76489abef706bd237e3bd715181950723e4d (poolsz 1283)\nkeypool reserve 15\nkeypool return 15\nlocktime : 5.996820 calltime : 0.000328 totaltime : 5.997148"
            },
            {
                "author": "Olivier Langlois",
                "date": "2013-10-04T03:52:18",
                "message_text_only": "> 1380610633.387730: POST / HTTP/1.1^M\n> ThreadRPCServer method=getinfo\n> CTxMemPool::accept() : accepted dc2941dd69b2f9fa2754f741dfba76489abef706bd237e3bd715181950723e4d (poolsz 1283)\n> keypool reserve 15\n> keypool return 15\n> locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148\n> \n\nI have found another circumstance where getinfo rpc function can take\nmore than 2 secs to return. Here are the circunstances:\n\nreceived block 0000000000000013c889fbe1b2a23eb4b6bd38a8051420be1bf319da184f02ae\nCommitting 1015 changed transactions to coin database...\nSetBestChain: new best=0000000000000013c889fbe1b2a23eb4b6bd38a8051420be1bf319da184f02ae  height=261213  log2_work=72.38679  tx=24743665  date=2013-10-02 05:26:49 progress=0.999999\n\n{\"method\":\"getinfo\",\"params\":[],\"id\":783}\nThreadRPCServer method=getinfo\nkeypool reserve 15\nkeypool return 15\nlocktime : 0.000001 calltime : 2.453037 totaltime : 2.453038\n\nThis time locking the contention isn't from cs_main, cs_wallet mutex\nlock. I think that what happen here is\n\n1. CWallet::SetBestChain is called\n2. This trigger ThreadFlushWalletDB that will lock wallet db and flush\nit\n3. getinfo will have to wait that ThreadFlushWalletDB ends to complete\nGetOldestKeyPoolTime().\n\nJust throwing a couple of ideas here. Comments are welcome:\n\n1.\n\nIs closing the db and reopen it the only way to flush the db to disk?\nCan it be done asynchonously? I don't know BDB much but probably closing\nthe DB involves some blocking fsync() call and given that this follow\n1015 records writing into the txdb, it takes more time than it should\notherwise to return.\n\n2.\n\nI'm relatively new to bitcoin. I understand that in a recent past\neverything was using BDB. Now that only the wallet seems to keep using\nit, maybe some options could be removed to make BDB more lightweight.\n\nDB_THREAD:\n\n>From what I see, BDB API access is already well synchronized by\nbitcoind. There is no obvious reason to ask BDB API to be thread safe.\n\nDB_INIT_TXN:\n\nCorrect me if I'm wrong, but I suspect this subsystem initialization to\nbe a vestige of when txdb was in BDB.\n\n3.\n\nnot sure at all about this one but I'm throwing the idea anyway.\nPersonnally, I have no used for 'keypoololdest'. I might experiment\nwithout it\n\nHow about having an optional bool param to 'getinfo' that could have the\nname 'lowlatency' or 'nodb' to skip info gathering having the potential\nto make the call longer?"
            }
        ],
        "thread_summary": {
            "title": "bitcoind stops responding",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "slush",
                "Fatima Castiglione Maldonado \u53d1",
                "Chris Double",
                "Gavin Andresen",
                "Olivier Langlois"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 31409
        }
    },
    {
        "title": "[Bitcoin-development] homomorphic coin value (validatable but encrypted) (Re: smart contracts -- possible use case? yes or no?)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-10-01T14:26:03",
                "message_text_only": "On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:\n>This kind of thing - providing external audits of customer accounts\n>without revealing private data - would be generally useful beyond\n>taxation. If you have any solutions, I'd be interested to hear them\n>(although bitcoin-dev is probably not the right place yet).\n\nThanks for providing the impetus to write down the current state, the\nefficient version of which I only figured out a few days ago :)\n\nI have been researching this for a few months on and off, because it seems\nlike an interesting construct in its own right, a different aspect of\npayment privacy (eg for auditable but commercial sensistive information) but\nalso that other than its direct use it may enable some features that we have\nnot thought of yet.\n\nI moved it to bitcointalk:\n\nhttps://bitcointalk.org/index.php?topic=305791.new#new\n\nIts efficient finally (after many dead ends): approximately 2x cost of\ncurrent in terms of coin size and coin verification cost, however it also\ngives some perf advantages back in a different way - necessary changes to\nschnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,\nor k of n multiparty sigs for the verification cost and signature size of\none pair of ECS signatures, for n > 2 its a space and efficiency improvement\nover current bitcoin.\n\nAdam"
            },
            {
                "author": "Adam Back",
                "date": "2013-10-01T19:11:43",
                "message_text_only": "Err actually not (efficient) I made a mistake that came out when I started\nwriting it up about how the t parameter in the proof relates to bitcoin\nprecision and coin representation (I thought t=2, but t=51).  Damn!  Back to\nthe not so efficient version (which is more zerocoin-esque in size/cost), or\nthe more experimental Schoenmaker non-standard p, q non EC one, or other\ncreative ideas to change the coin representation to simplify the proof (of\nwhich this was a failed attempt).  See the bitcointalk thread for details.\n\nhttps://bitcointalk.org/index.php?topic=305791.new#new\n\nAdam\n\nOn Tue, Oct 01, 2013 at 04:26:03PM +0200, Adam Back wrote:\n>On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:\n>>This kind of thing - providing external audits of customer accounts\n>>without revealing private data - would be generally useful beyond\n>>taxation. If you have any solutions, I'd be interested to hear them\n>>(although bitcoin-dev is probably not the right place yet).\n>\n>Thanks for providing the impetus to write down the current state, the\n>efficient version of which I only figured out a few days ago :)\n>\n>I have been researching this for a few months on and off, because it seems\n>like an interesting construct in its own right, a different aspect of\n>payment privacy (eg for auditable but commercial sensistive information) but\n>also that other than its direct use it may enable some features that we have\n>not thought of yet.\n>\n>I moved it to bitcointalk:\n>\n>https://bitcointalk.org/index.php?topic=305791.new#new\n>\n>Its efficient finally (after many dead ends): approximately 2x cost of\n>current in terms of coin size and coin verification cost, however it also\n>gives some perf advantages back in a different way - necessary changes to\n>schnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,\n>or k of n multiparty sigs for the verification cost and signature size of\n>one pair of ECS signatures, for n > 2 its a space and efficiency improvement\n>over current bitcoin.\n>\n>Adam"
            },
            {
                "author": "Adam Back",
                "date": "2013-10-07T19:01:03",
                "message_text_only": "An update on the homomorphic coins, some more math validation & a test\nimplementation needs to be done, but a surprisingly good outcome so far of\npredicted 2.5kB homomorphic valued coin.  Only coin splitting has to incur\nthe 2.5kB range proof.  Coin adding, full spending and mining is \"free\",\nbecause adding existing range proofed and validated coins cant overflow by\ndefinition (21 mil coin cap).  You can also (obviously I guess) add a\nhomomorphicaly encrypted \"0\" value to a few other peoples coin balance to\nget a kind of taint mitigation.\n\nhttps://bitcointalk.org/index.php?topic=305791.msg3294618#msg3294618\n\nAdam\n\nOn Tue, Oct 01, 2013 at 09:11:43PM +0200, Adam Back wrote:\n>Err actually not (efficient) I made a mistake that came out when I started\n>writing it up about how the t parameter in the proof relates to bitcoin\n>precision and coin representation (I thought t=2, but t=51).  Damn!  Back to\n>the not so efficient version (which is more zerocoin-esque in size/cost), or\n>the more experimental Schoenmaker non-standard p, q non EC one, or other\n>creative ideas to change the coin representation to simplify the proof (of\n>which this was a failed attempt).  See the bitcointalk thread for details.\n>\n>https://bitcointalk.org/index.php?topic=305791.new#new\n>\n>Adam\n>\n>On Tue, Oct 01, 2013 at 04:26:03PM +0200, Adam Back wrote:\n>>On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:\n>>>This kind of thing - providing external audits of customer accounts\n>>>without revealing private data - would be generally useful beyond\n>>>taxation. If you have any solutions, I'd be interested to hear them\n>>>(although bitcoin-dev is probably not the right place yet).\n>>\n>>Thanks for providing the impetus to write down the current state, the\n>>efficient version of which I only figured out a few days ago :)\n>>\n>>I have been researching this for a few months on and off, because it seems\n>>like an interesting construct in its own right, a different aspect of\n>>payment privacy (eg for auditable but commercial sensistive information) but\n>>also that other than its direct use it may enable some features that we have\n>>not thought of yet.\n>>\n>>I moved it to bitcointalk:\n>>\n>>https://bitcointalk.org/index.php?topic=305791.new#new\n>>\n>>Its efficient finally (after many dead ends): approximately 2x cost of\n>>current in terms of coin size and coin verification cost, however it also\n>>gives some perf advantages back in a different way - necessary changes to\n>>schnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,\n>>or k of n multiparty sigs for the verification cost and signature size of\n>>one pair of ECS signatures, for n > 2 its a space and efficiency improvement\n>>over current bitcoin.\n>>\n>>Adam"
            }
        ],
        "thread_summary": {
            "title": "homomorphic coin value (validatable but encrypted) (Re: smart contracts -- possible use case? yes or no?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6102
        }
    },
    {
        "title": "[Bitcoin-development] on CDB::Rewrite()",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2013-10-03T03:16:03",
                "message_text_only": "I only bring this up here since I can't raise https://bitcointalk.org? Perhaps it runs on the silk road servers:)\n\nUpon looking at the 0.8.5 & earlier code for CDB:Rewrite(), in the files db.h and db.cpp, you will notice that in db.h it is declared bool static, but in db.cpp it isn't. Is this a problem? Or a feature? Or nothing at all?\n\n\nFurthermore, it is called only in wallet.cpp -->CWallet::EncryptWallet() but its return value is ignored? Again, intentional or a bug or a feature or a ...?\nNow CWallet::EncryptWallet() is called by AskPassphraseDialog::accept() and WalletModel::setWalletEncrypted()and they seem very interested in what\u00a0 CWallet::EncryptWallet() returns. Could this be involved in some old issue with wallet encryption on bitcoin-qt 0.8.1?\n\nThere seems to be plenty of this kind of \"suspicious\" code to ferret about in, with one's IDE during quiet moments. Amusing is to follow return 0 and return 1 to try and infer their meaning, their intent?\n\n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131002/ad22c996/attachment.html>"
            },
            {
                "author": "Olivier Langlois",
                "date": "2013-10-04T03:23:49",
                "message_text_only": "> Upon looking at the 0.8.5 & earlier code for CDB:Rewrite(), in the\n> files db.h and db.cpp, you will notice that in db.h it is declared\n> bool static, but in db.cpp it isn't. Is this a problem? Or a feature?\n> Or nothing at all?\n\nIt is perfect C++ code.\n\n> Furthermore, it is called only in wallet.cpp\n> -->CWallet::EncryptWallet() but its return value is ignored? Again,\n> intentional or a bug or a feature or a ...?\n\npossibly a minor bug. Minor because over 99% of the time it is called, the Rewrite() function will succeed.\n\nMaybe CWallet::EncryptWallet() should return false to its callers when\nCDB::Rewrite fails."
            }
        ],
        "thread_summary": {
            "title": "on CDB::Rewrite()",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Olivier Langlois",
                "Ron"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1778
        }
    },
    {
        "title": "[Bitcoin-development] Identity protocol observation",
        "thread_messages": [
            {
                "author": "Daniel Lidstrom",
                "date": "2013-10-03T09:35:30",
                "message_text_only": "The location of a tx in the blockchain can be encoded in n=log2(h)+log2(t)\nbits, where h is the block height, and t is the number of transactions in\nthe block.  Currently h~250,000 and t~500, so n~27.  A CVC phoneme encodes\n~10.7 bits *, so a transaction today can be located in the blockchain with\n3 of these, e.g. reb-mizvig.  This is reasonably short, readable and\nmemorable.\n\nThe identity protocol Jeff Garzik is working on will link a public key\nfingerprint to a miner sacrifice transaction.  This tx could in turn be\nuniquely described with a short name as above.  Associating this name with\nthe public key becomes secure once the tx is sufficiently buried in the\nblockchain.  In the identity protocol, lightweight clients check the\nvalidity of a sacrifice tx by checking that its merkle path is valid.  But\nthis path encodes, via the ordering of the hashes at each level, the\nlocation of the transaction in the block, so the lightweight client can\nverify the sacrifice tx's short name using only the information he already\nhas.\n\nSome more random names:\nvec-halhic\nwom-vizpyd\nguv-zussof\njog-copwug\nseg-rizges\njyg-somgod\npax-synjem\nzyg-zuxdyj\ngid-mutdyj\nrel-hyrdaj\n\nSources of inspiration:\nurbit.org\nhttps://en.bitcoin.it/wiki/Identity_protocol_v1\n\n* This is somewhat restricted: I disallowed q for obvious reasons and k\nbecause it conflicts with c, and c looks much softer and less like\nKlingon.  H is allowed for the first consonant, but not the second, and x\nis allowed for the last one, but not the first one.  Y is a vowel, but not\na consonant.  Maybe these weren't quite the right choices.  Paint away!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/d22dc584/attachment.html>"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2013-10-03T13:35:32",
                "message_text_only": "A couple more thoughts on this:\n\n1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits per\nphoneme.\n2) An extra phoneme (4 encode 43 bits total) gives room to put extra\ninformation into the name, e.g. the first 5 bits could be input as the key\nto a PRP that permutes the last 38 back to a standard encoding of a tx\nlocation.  This would give the user 32 random names per sacrifice to choose\nfrom, and 38 bits to encode its location in the blockchain, which is enough\nfor pretty large blocks.\n\nSample 4 phoneme names:\n~milmoz-vyrnyx\n~mypnoz-fojzas\n~sawfex-bovlec\n~fidhut-guvgis\n~bobfej-jessuk\n~furcos-diwhuw\n~wokryx-wilrox\n~bygbyl-caggos\n~vewcyv-jyjsal\n~daxsaf-cywkul\n\nThey're not that bad IMHO, especially if you get to pick a decent one from\na bunch.\n\n\nOn Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n\n> The location of a tx in the blockchain can be encoded in n=log2(h)+log2(t)\n> bits, where h is the block height, and t is the number of transactions in\n> the block.  Currently h~250,000 and t~500, so n~27.  A CVC phoneme encodes\n> ~10.7 bits *, so a transaction today can be located in the blockchain with\n> 3 of these, e.g. reb-mizvig.  This is reasonably short, readable and\n> memorable.\n>\n> The identity protocol Jeff Garzik is working on will link a public key\n> fingerprint to a miner sacrifice transaction.  This tx could in turn be\n> uniquely described with a short name as above.  Associating this name with\n> the public key becomes secure once the tx is sufficiently buried in the\n> blockchain.  In the identity protocol, lightweight clients check the\n> validity of a sacrifice tx by checking that its merkle path is valid.  But\n> this path encodes, via the ordering of the hashes at each level, the\n> location of the transaction in the block, so the lightweight client can\n> verify the sacrifice tx's short name using only the information he already\n> has.\n>\n> Some more random names:\n> vec-halhic\n> wom-vizpyd\n> guv-zussof\n> jog-copwug\n> seg-rizges\n> jyg-somgod\n> pax-synjem\n> zyg-zuxdyj\n> gid-mutdyj\n> rel-hyrdaj\n>\n> Sources of inspiration:\n> urbit.org\n> https://en.bitcoin.it/wiki/Identity_protocol_v1\n>\n> * This is somewhat restricted: I disallowed q for obvious reasons and k\n> because it conflicts with c, and c looks much softer and less like\n> Klingon.  H is allowed for the first consonant, but not the second, and x\n> is allowed for the last one, but not the first one.  Y is a vowel, but not\n> a consonant.  Maybe these weren't quite the right choices.  Paint away!\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/cb5995fb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-03T14:00:16",
                "message_text_only": "Interesting observation, thanks.\n\nI'd think any competent implementation of such an identity scheme would not\ninvolve end users directly handling randomized nonsense words, however. I\nalways imagined a sacrifice as being a file that you make with a GUI tool\nand load into a browser extension.\n\n\nOn Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n\n> A couple more thoughts on this:\n>\n> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits per\n> phoneme.\n> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra\n> information into the name, e.g. the first 5 bits could be input as the key\n> to a PRP that permutes the last 38 back to a standard encoding of a tx\n> location.  This would give the user 32 random names per sacrifice to choose\n> from, and 38 bits to encode its location in the blockchain, which is enough\n> for pretty large blocks.\n>\n> Sample 4 phoneme names:\n> ~milmoz-vyrnyx\n> ~mypnoz-fojzas\n> ~sawfex-bovlec\n> ~fidhut-guvgis\n> ~bobfej-jessuk\n> ~furcos-diwhuw\n> ~wokryx-wilrox\n> ~bygbyl-caggos\n> ~vewcyv-jyjsal\n> ~daxsaf-cywkul\n>\n> They're not that bad IMHO, especially if you get to pick a decent one from\n> a bunch.\n>\n>\n> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>\n>> The location of a tx in the blockchain can be encoded in\n>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of\n>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC\n>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the\n>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,\n>> readable and memorable.\n>>\n>> The identity protocol Jeff Garzik is working on will link a public key\n>> fingerprint to a miner sacrifice transaction.  This tx could in turn be\n>> uniquely described with a short name as above.  Associating this name with\n>> the public key becomes secure once the tx is sufficiently buried in the\n>> blockchain.  In the identity protocol, lightweight clients check the\n>> validity of a sacrifice tx by checking that its merkle path is valid.  But\n>> this path encodes, via the ordering of the hashes at each level, the\n>> location of the transaction in the block, so the lightweight client can\n>> verify the sacrifice tx's short name using only the information he already\n>> has.\n>>\n>> Some more random names:\n>> vec-halhic\n>> wom-vizpyd\n>> guv-zussof\n>> jog-copwug\n>> seg-rizges\n>> jyg-somgod\n>> pax-synjem\n>> zyg-zuxdyj\n>> gid-mutdyj\n>> rel-hyrdaj\n>>\n>> Sources of inspiration:\n>> urbit.org\n>> https://en.bitcoin.it/wiki/Identity_protocol_v1\n>>\n>> * This is somewhat restricted: I disallowed q for obvious reasons and k\n>> because it conflicts with c, and c looks much softer and less like\n>> Klingon.  H is allowed for the first consonant, but not the second, and x\n>> is allowed for the last one, but not the first one.  Y is a vowel, but not\n>> a consonant.  Maybe these weren't quite the right choices.  Paint away!\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/f5469bbd/attachment.html>"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2013-10-03T15:16:51",
                "message_text_only": "Fair enough, though people still manage okay with phone numbers.  And a\ndecentralized naming system seems to come at great cost - with namecoin you\nneed the whole blockchain to resolve names without trust.  Strip out a bell\nand whistle - meaningfulness and transferability of names - and you get a\nsimple, rudimentary (spam killing!) system that scales on any device.  I'll\nonly argue that it seems to be Good Enough *for the types of people who\nmight care about decentralized names*.  Probably a very small set :)\n\n\nOn Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Interesting observation, thanks.\n>\n> I'd think any competent implementation of such an identity scheme would\n> not involve end users directly handling randomized nonsense words, however.\n> I always imagined a sacrifice as being a file that you make with a GUI tool\n> and load into a browser extension.\n>\n>\n> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>\n>> A couple more thoughts on this:\n>>\n>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits\n>> per phoneme.\n>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra\n>> information into the name, e.g. the first 5 bits could be input as the key\n>> to a PRP that permutes the last 38 back to a standard encoding of a tx\n>> location.  This would give the user 32 random names per sacrifice to choose\n>> from, and 38 bits to encode its location in the blockchain, which is enough\n>> for pretty large blocks.\n>>\n>> Sample 4 phoneme names:\n>> ~milmoz-vyrnyx\n>> ~mypnoz-fojzas\n>> ~sawfex-bovlec\n>> ~fidhut-guvgis\n>> ~bobfej-jessuk\n>> ~furcos-diwhuw\n>> ~wokryx-wilrox\n>> ~bygbyl-caggos\n>> ~vewcyv-jyjsal\n>> ~daxsaf-cywkul\n>>\n>> They're not that bad IMHO, especially if you get to pick a decent one\n>> from a bunch.\n>>\n>>\n>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>>\n>>> The location of a tx in the blockchain can be encoded in\n>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of\n>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC\n>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the\n>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,\n>>> readable and memorable.\n>>>\n>>> The identity protocol Jeff Garzik is working on will link a public key\n>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be\n>>> uniquely described with a short name as above.  Associating this name with\n>>> the public key becomes secure once the tx is sufficiently buried in the\n>>> blockchain.  In the identity protocol, lightweight clients check the\n>>> validity of a sacrifice tx by checking that its merkle path is valid.  But\n>>> this path encodes, via the ordering of the hashes at each level, the\n>>> location of the transaction in the block, so the lightweight client can\n>>> verify the sacrifice tx's short name using only the information he already\n>>> has.\n>>>\n>>> Some more random names:\n>>> vec-halhic\n>>> wom-vizpyd\n>>> guv-zussof\n>>> jog-copwug\n>>> seg-rizges\n>>> jyg-somgod\n>>> pax-synjem\n>>> zyg-zuxdyj\n>>> gid-mutdyj\n>>> rel-hyrdaj\n>>>\n>>> Sources of inspiration:\n>>> urbit.org\n>>> https://en.bitcoin.it/wiki/Identity_protocol_v1\n>>>\n>>> * This is somewhat restricted: I disallowed q for obvious reasons and k\n>>> because it conflicts with c, and c looks much softer and less like\n>>> Klingon.  H is allowed for the first consonant, but not the second, and x\n>>> is allowed for the last one, but not the first one.  Y is a vowel, but not\n>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> October Webinars: Code for Performance\n>> Free Intel webinars can help you accelerate application performance.\n>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n>> from\n>> the latest Intel processors and coprocessors. See abstracts and register >\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/1e734bac/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-03T15:22:26",
                "message_text_only": "1) Generate sacrifice proof file using an app\n2) Load file into browser\n3) Surf\n\nWhere are the names in that design? I'm not sure where NameCoin comes into\nthis. The point of a sacrifice is it's an anonymous identity, there's no\npoint attaching a name to it.\n\nBTW I keep phone numbers in an address book ;)\n\n\n\n\nOn Thu, Oct 3, 2013 at 5:16 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n\n> Fair enough, though people still manage okay with phone numbers.  And a\n> decentralized naming system seems to come at great cost - with namecoin you\n> need the whole blockchain to resolve names without trust.  Strip out a bell\n> and whistle - meaningfulness and transferability of names - and you get a\n> simple, rudimentary (spam killing!) system that scales on any device.  I'll\n> only argue that it seems to be Good Enough *for the types of people who\n> might care about decentralized names*.  Probably a very small set :)\n>\n>\n> On Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Interesting observation, thanks.\n>>\n>> I'd think any competent implementation of such an identity scheme would\n>> not involve end users directly handling randomized nonsense words, however.\n>> I always imagined a sacrifice as being a file that you make with a GUI tool\n>> and load into a browser extension.\n>>\n>>\n>> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>>\n>>> A couple more thoughts on this:\n>>>\n>>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits\n>>> per phoneme.\n>>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra\n>>> information into the name, e.g. the first 5 bits could be input as the key\n>>> to a PRP that permutes the last 38 back to a standard encoding of a tx\n>>> location.  This would give the user 32 random names per sacrifice to choose\n>>> from, and 38 bits to encode its location in the blockchain, which is enough\n>>> for pretty large blocks.\n>>>\n>>> Sample 4 phoneme names:\n>>> ~milmoz-vyrnyx\n>>> ~mypnoz-fojzas\n>>> ~sawfex-bovlec\n>>> ~fidhut-guvgis\n>>> ~bobfej-jessuk\n>>> ~furcos-diwhuw\n>>> ~wokryx-wilrox\n>>> ~bygbyl-caggos\n>>> ~vewcyv-jyjsal\n>>> ~daxsaf-cywkul\n>>>\n>>> They're not that bad IMHO, especially if you get to pick a decent one\n>>> from a bunch.\n>>>\n>>>\n>>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>>>\n>>>> The location of a tx in the blockchain can be encoded in\n>>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of\n>>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC\n>>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the\n>>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,\n>>>> readable and memorable.\n>>>>\n>>>> The identity protocol Jeff Garzik is working on will link a public key\n>>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be\n>>>> uniquely described with a short name as above.  Associating this name with\n>>>> the public key becomes secure once the tx is sufficiently buried in the\n>>>> blockchain.  In the identity protocol, lightweight clients check the\n>>>> validity of a sacrifice tx by checking that its merkle path is valid.  But\n>>>> this path encodes, via the ordering of the hashes at each level, the\n>>>> location of the transaction in the block, so the lightweight client can\n>>>> verify the sacrifice tx's short name using only the information he already\n>>>> has.\n>>>>\n>>>> Some more random names:\n>>>> vec-halhic\n>>>> wom-vizpyd\n>>>> guv-zussof\n>>>> jog-copwug\n>>>> seg-rizges\n>>>> jyg-somgod\n>>>> pax-synjem\n>>>> zyg-zuxdyj\n>>>> gid-mutdyj\n>>>> rel-hyrdaj\n>>>>\n>>>> Sources of inspiration:\n>>>> urbit.org\n>>>> https://en.bitcoin.it/wiki/Identity_protocol_v1\n>>>>\n>>>> * This is somewhat restricted: I disallowed q for obvious reasons and k\n>>>> because it conflicts with c, and c looks much softer and less like\n>>>> Klingon.  H is allowed for the first consonant, but not the second, and x\n>>>> is allowed for the last one, but not the first one.  Y is a vowel, but not\n>>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!\n>>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> October Webinars: Code for Performance\n>>> Free Intel webinars can help you accelerate application performance.\n>>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n>>> from\n>>> the latest Intel processors and coprocessors. See abstracts and register\n>>> >\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/29632bb4/attachment.html>"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2013-10-03T16:16:27",
                "message_text_only": "Names clearly solve a different problem than that, but we still use them,\nso they must be solving _some_ problem :p  In this case they're a unique\nidentifier humans can remember after a bit of use and easily communicate to\neach other with little room for error.  Securely mapping them to public\nkeys would make key verification simpler.  Simpler than checking a much\nlarger key fingerprint, at least.  Like I said, it's probably a niche\nproduct ;)\n\nI used to remember dozens of phone numbers before my phone did it for me,\nbut maybe I was just weird.\n\n\nOn Thu, Oct 3, 2013 at 9:22 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> 1) Generate sacrifice proof file using an app\n> 2) Load file into browser\n> 3) Surf\n>\n> Where are the names in that design? I'm not sure where NameCoin comes into\n> this. The point of a sacrifice is it's an anonymous identity, there's no\n> point attaching a name to it.\n>\n> BTW I keep phone numbers in an address book ;)\n>\n>\n>\n>\n> On Thu, Oct 3, 2013 at 5:16 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>\n>> Fair enough, though people still manage okay with phone numbers.  And a\n>> decentralized naming system seems to come at great cost - with namecoin you\n>> need the whole blockchain to resolve names without trust.  Strip out a bell\n>> and whistle - meaningfulness and transferability of names - and you get a\n>> simple, rudimentary (spam killing!) system that scales on any device.  I'll\n>> only argue that it seems to be Good Enough *for the types of people who\n>> might care about decentralized names*.  Probably a very small set :)\n>>\n>>\n>> On Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>> Interesting observation, thanks.\n>>>\n>>> I'd think any competent implementation of such an identity scheme would\n>>> not involve end users directly handling randomized nonsense words, however.\n>>> I always imagined a sacrifice as being a file that you make with a GUI tool\n>>> and load into a browser extension.\n>>>\n>>>\n>>> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>>>\n>>>> A couple more thoughts on this:\n>>>>\n>>>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits\n>>>> per phoneme.\n>>>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra\n>>>> information into the name, e.g. the first 5 bits could be input as the key\n>>>> to a PRP that permutes the last 38 back to a standard encoding of a tx\n>>>> location.  This would give the user 32 random names per sacrifice to choose\n>>>> from, and 38 bits to encode its location in the blockchain, which is enough\n>>>> for pretty large blocks.\n>>>>\n>>>> Sample 4 phoneme names:\n>>>> ~milmoz-vyrnyx\n>>>> ~mypnoz-fojzas\n>>>> ~sawfex-bovlec\n>>>> ~fidhut-guvgis\n>>>> ~bobfej-jessuk\n>>>> ~furcos-diwhuw\n>>>> ~wokryx-wilrox\n>>>> ~bygbyl-caggos\n>>>> ~vewcyv-jyjsal\n>>>> ~daxsaf-cywkul\n>>>>\n>>>> They're not that bad IMHO, especially if you get to pick a decent one\n>>>> from a bunch.\n>>>>\n>>>>\n>>>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n>>>>\n>>>>> The location of a tx in the blockchain can be encoded in\n>>>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of\n>>>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC\n>>>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the\n>>>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,\n>>>>> readable and memorable.\n>>>>>\n>>>>> The identity protocol Jeff Garzik is working on will link a public key\n>>>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be\n>>>>> uniquely described with a short name as above.  Associating this name with\n>>>>> the public key becomes secure once the tx is sufficiently buried in the\n>>>>> blockchain.  In the identity protocol, lightweight clients check the\n>>>>> validity of a sacrifice tx by checking that its merkle path is valid.  But\n>>>>> this path encodes, via the ordering of the hashes at each level, the\n>>>>> location of the transaction in the block, so the lightweight client can\n>>>>> verify the sacrifice tx's short name using only the information he already\n>>>>> has.\n>>>>>\n>>>>> Some more random names:\n>>>>> vec-halhic\n>>>>> wom-vizpyd\n>>>>> guv-zussof\n>>>>> jog-copwug\n>>>>> seg-rizges\n>>>>> jyg-somgod\n>>>>> pax-synjem\n>>>>> zyg-zuxdyj\n>>>>> gid-mutdyj\n>>>>> rel-hyrdaj\n>>>>>\n>>>>> Sources of inspiration:\n>>>>> urbit.org\n>>>>> https://en.bitcoin.it/wiki/Identity_protocol_v1\n>>>>>\n>>>>> * This is somewhat restricted: I disallowed q for obvious reasons and\n>>>>> k because it conflicts with c, and c looks much softer and less like\n>>>>> Klingon.  H is allowed for the first consonant, but not the second, and x\n>>>>> is allowed for the last one, but not the first one.  Y is a vowel, but not\n>>>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!\n>>>>>\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> October Webinars: Code for Performance\n>>>> Free Intel webinars can help you accelerate application performance.\n>>>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the\n>>>> most from\n>>>> the latest Intel processors and coprocessors. See abstracts and\n>>>> register >\n>>>>\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/c437c1d1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Identity protocol observation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Daniel Lidstrom"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 23717
        }
    },
    {
        "title": "[Bitcoin-development] Code review",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-10-04T10:30:07",
                "message_text_only": "Git makes it easy to fork peoples work off and create long series of\ncommits that achieve some useful goal. That's great for many things.\nUnfortunately, code review is not one of those things.\n\nI'd like to make a small request - when submitting large, complex pieces of\nwork for review, please either submit it as one giant squashed change, or\nbe an absolute fascist about keeping commits logically clean and separated.\nIt really sucks to review things in sequence and then discover that some\ncode you spent some time thinking about or puzzling out got\ndeleted/rewritten/changed in a later commit. It also can make it harder to\nreview things when later code uses new APIs or behaviour changes introduced\nin earlier commits - you have to either keep it all in your head, do lots\nof tab switching, or do a squash yourself (in which case every reviewer\nwould have to manually do that).\n\nOn a related note, github seems to have lost the plot with regards to code\nreview - they are spending their time adding 3D renderers to their diff\nviewer but not making basic improvements other tools had for years.\n\nSo, I'd like to suggest the idea of using Review Board:\n\nhttp://www.reviewboard.org/\n\nIt's an open source, dedicated code review tool used by lots of big name\ncompanies for their internal work. It has git[hub] integration and a lot of\nvery neat features, like the ability to attach screenshots to reviews. Also\nmore basic ones, like side by side diffs. Branches can be and often are\nsubmitted to the system as single reviews.\n\nThe company behind it (disclosure - written and run by a long time friend\nof mine) offers hosting plans, but we could also host it on a Foundation\nserver instead.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/a56abe3c/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-10-04T10:42:29",
                "message_text_only": "On Friday 04 October 2013 12:30:07 Mike Hearn wrote:\n> Git makes it easy to fork peoples work off and create long series of\n> commits that achieve some useful goal. That's great for many things.\n> Unfortunately, code review is not one of those things.\n> \n> I'd like to make a small request - when submitting large, complex pieces of\n> work for review, please either submit it as one giant squashed change, or\n\nDon't do this.  It throws away all of the good stuff that git lets you record.  \nThere is more to a git branch than just the overall difference.  Every single \nlog message and diff is individually valuable.  It's easy to make a squashed \ndiff from many little commits; it's impossible to go the other way.\n\nCommand line for you so you don't have to think about it:\n\n  git diff $(git merge-base master feature-branch) feature-branch \n\ngit-merge-base finds the common ancestor between master and feature-branch, \nand then compares feature-branch against that.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-04T11:32:47",
                "message_text_only": "> There is more to a git branch than just the overall difference.  Every\n> single\n> log message and diff is individually valuable.\n\n\nWhen the log messages don't accurately describe the contents of the diff,\nit's just misinformation and noise. Everyone starts out by wanting a neat\ncollection of easy to understand and review commits, but in practice it's\nextremely hard to always get it.\n\nI know how to make squashed commits, thanks. I've done LOTS of code review\nin my life. I'm making a point here as one of the few people who goes\nthrough large pull requests and reviews them line by line. It's hard,\npartly because github sucks, and partly because reviewing lots of small\ncommits sucks.\n\nThere's nothing that makes a single large commit harder to review. It's the\nsame amount of code or strictly less, given the tendency for later commits\nto change earlier ones. You can easily search the entire change whilst\nreviewing. There are lots of things that make it easier.\n\nFWIW inside Google the code review process is one-commit-one-review.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/c73d3928/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-10-04T12:34:19",
                "message_text_only": "On Friday 04 October 2013 13:32:47 you wrote:\n> > There is more to a git branch than just the overall difference.  Every\n> > single\n> > log message and diff is individually valuable.\n> \n> When the log messages don't accurately describe the contents of the diff,\n> it's just misinformation and noise. Everyone starts out by wanting a neat\n> collection of easy to understand and review commits, but in practice it's\n> extremely hard to always get it.\n\nThen your request should be for better commits, not for just squashing the lot \ninto some incoherent blob.\n\nThe alternatives under discussion are:\n\n - Coder produces long chain of commits on feature branch.  Compresses them, \nthrowing away any individual and accurate messages into one large diff.  It's \nunlikely you'll get a log message that is as descriptive in the large one if \nyou made them throw away the little ones.  Large diff is offered for review.  \nReview is of one large diff.\n\n - Coder produces long chain on commits on feature branch.  Offers them for \nreview.  Reviewer only likes to review large diffs, so uses the tools \navailable to produce it.\n\nExactly the same diff is being reviewed, but in one case you're throwing away \ninformation.  There is no getting that information back ever.\n\nYou're also discarding the advantages of individual commits.\n\n - Merges are considerably harder than rebases.  You have to resolve all the \nconflicts at once with a merge, with a rebase you can resolve them with the \nlog message and original isolated diff to help you.\n\n - Bisect doesn't give as fine-grained an answer.\n\n> I know how to make squashed commits, thanks. I've done LOTS of code review\n\nExcellent.  Don't take it personally -- I only offered it in case you didn't \nknow.  Not everyone is familiar with git plumbing.\n\n> in my life. I'm making a point here as one of the few people who goes\n> through large pull requests and reviews them line by line. It's hard,\n\nThat doesn't make you the only person who does code reviews.  I do plenty of \nreviews here; they're just not bitcoin reviews.  Obviously we're talking about \nbitcoin, so you get to decide in the end.\n\n> partly because github sucks, and partly because reviewing lots of small\n> commits sucks.\n\nI'm not suggesting you review lots of small commits anyway.  I can't comment \non whether github sucks or not -- that's obviously personal preference.  \nHowever, nothing stops you doing reviews on your own local checkout.\n\n> There's nothing that makes a single large commit harder to review. It's the\n> same amount of code or strictly less, given the tendency for later commits\n\nThat's not true.  There are often lots of small changes that are manifestly \ncorrect -- let's use string changes as an example -- in the large commit, they \nare just noise.  You want to be able to focus on the hard commits.  However -- \nI am not trying to persuade you to review small commits, I'm trying to \npersuade you not to throw away the small commits, gone forever, merely because \nyour preference is to review large commits.\n\n> to change earlier ones. You can easily search the entire change whilst\n> reviewing. There are lots of things that make it easier.\n\nSince the large commit is always available, no facilities have been lost.\n\nPersonally I work hard in my repositories to make coherent, small, well \ndescribed commits.  If I had gone to that effort for a bitcoin branch only to \nbe told to collapse them all and throw away that effort, I'd think I'd been \nwasting my time.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-04T11:35:17",
                "message_text_only": "On Fri, Oct 04, 2013 at 11:42:29AM +0100, Andy Parkins wrote:\n> On Friday 04 October 2013 12:30:07 Mike Hearn wrote:\n> > Git makes it easy to fork peoples work off and create long series of\n> > commits that achieve some useful goal. That's great for many things.\n> > Unfortunately, code review is not one of those things.\n> > \n> > I'd like to make a small request - when submitting large, complex pieces of\n> > work for review, please either submit it as one giant squashed change, or\n> \n> Don't do this.  It throws away all of the good stuff that git lets you record.  \n> There is more to a git branch than just the overall difference.  Every single \n> log message and diff is individually valuable.  It's easy to make a squashed \n> diff from many little commits; it's impossible to go the other way.\n> \n> Command line for you so you don't have to think about it:\n> \n>   git diff $(git merge-base master feature-branch) feature-branch \n> \n> git-merge-base finds the common ancestor between master and feature-branch, \n> and then compares feature-branch against that.\n\nGit is a revision *communication* system that happens to also make for a\ngood revision *control* system.\n\nRemember that every individual commit is two things: what source code\nhas changed, and a message explaining why you thought that change should\nbe made. Commits aren't valuable in of themselves, they're valuable\nbecause they serve to explain to the other people you are working with\nwhy you thought a change should be made. Sometimes it makes sense to\nexplain your changes in 10 commits, sometimes it makes sense to squash\nthem all up into one commit, but there's no hard and fast rule other\nthan \"Put yourself in your fellow coders' shoes - what's the best way to\nexplain to them what you are trying to accomplish and why?\" You may have\ngenerated a lot of little commits in the process of creating your patch\nthat tell a story that no-one else cares about, or equally by squashing\neverything into one big commit you wind up with a tonne of changes with\nlittle explanation as to why they were made.\n\nTwo caveats apply however: git-bisect works best if every commit in the\ntree you are trying to debug works well enough that you can run tests\nwithout errors - that is you don't \"break the build\". Don't make commits\nthat don't compile at the very least, and preferably everything you do\nshould be refactored to the point where the commit as a whole \"works\".\n\nThe second caveat is more specific to Bitcoin: people tend to rebase\ntheir pull-requests over and over again until they are accepted, but\nthat also means that code review done earlier doesn't apply to the later\ncode pushed. Bitcoin is a particularly high profile, and high profit,\ntarget for people trying to get malicious code into the codebase. It may\nbe the case that we would be better off asking reviewers making small\nchanges to their pull-requests to add additional commits for those\nchanges rather than rebasing, to make it clear what changes were\nactually made so that code reviewers don't have to review the whole\npatch from scratch. After all, the place where the most eyes will\nactually look at the commits is during the pull-req process; after the\ncode has been pulled the audience for those commits is in most cases\nalmost no-one.\n\nHaving said that, there's currently a lot of other holes in the review\nand source code integrity process, so fixing this problem is probably\nnot the low-hanging fruit right now.\n\n\nFWIW personally I tend to review patches by both looking at the\nindividual commits to try to understand why someone wanted to make a\nchange, as well as all commits merged into one diff for a \"what actually\nchanged here?\" review.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3e8761c7/attachment.sig>"
            },
            {
                "author": "Arto Bendiken",
                "date": "2013-10-04T11:58:51",
                "message_text_only": "On Fri, Oct 4, 2013 at 1:35 PM, Peter Todd <pete at petertodd.org> wrote:\n> The second caveat is more specific to Bitcoin: people tend to rebase\n> their pull-requests over and over again until they are accepted, but\n> that also means that code review done earlier doesn't apply to the later\n> code pushed. Bitcoin is a particularly high profile, and high profit,\n> target for people trying to get malicious code into the codebase.\n\nOn that note, this 2003 example of an attempt to backdoor the Linux\nkernel is pertinent:\n\nhttp://lwn.net/Articles/57135/\n\nThe backdoor in question came down to a single missing character,\neasily overlooked by a reviewer if a spotlight hadn't been thrown on\nit for other reasons. Compromising a Bitcoin implementation isn't\ngoing to be as easy as that, one would hope, but certainly it seems\nonly a matter of time until there's an attempt at it.\n\nFollowing these code review discussions with much interest.\n\n-- \nArto Bendiken | @bendiken | http://ar.to/"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-10-04T12:34:39",
                "message_text_only": "On Friday 04 October 2013 07:35:17 you wrote:\n\n> Remember that every individual commit is two things: what source code\n> has changed, and a message explaining why you thought that change should\n> be made. Commits aren't valuable in of themselves, they're valuable\n> because they serve to explain to the other people you are working with\n> why you thought a change should be made. Sometimes it makes sense to\n\nYes -- I'm assuming that.  I'm not advocating creating commits with random \ndata as a log, and random bits of the changes.\n\n> explain your changes in 10 commits, sometimes it makes sense to squash\n> them all up into one commit, but there's no hard and fast rule other\n> than \"Put yourself in your fellow coders' shoes - what's the best way to\n> explain to them what you are trying to accomplish and why?\" You may have\n> generated a lot of little commits in the process of creating your patch\n> that tell a story that no-one else cares about, or equally by squashing\n\nThey don't care _now_; but when it comes to finding bugs, I can't count the \nnumber of times having a detailed change history has helped.  Combined with \ngit-blame, it makes it very easy to ask \"why did this line go in?\".\n\n> everything into one big commit you wind up with a tonne of changes with\n> little explanation as to why they were made.\n\nTrue enough.  I'm happy to accept that what you want is \"the most optimum\" set \nof commits.  But that doesn't mean \"squash it all together\".\n\n> Two caveats apply however: git-bisect works best if every commit in the\n> tree you are trying to debug works well enough that you can run tests\n> without errors - that is you don't \"break the build\". Don't make commits\n> that don't compile at the very least, and preferably everything you do\n> should be refactored to the point where the commit as a whole \"works\".\n\nAbsolutely true.  I'm in favour of having the CI system test every commit for \nexactly that reason.  Even if you don't do that though, simply making the \neffort to make commits coherent means that its rare to get commits that don't \nbuild.\n \n> FWIW personally I tend to review patches by both looking at the\n> individual commits to try to understand why someone wanted to make a\n> change, as well as all commits merged into one diff for a \"what actually\n> changed here?\" review.\n\nI think that code review is fundamentally hard.  There is only so much you can \ndo to make it easier; and I'm not sure encouraging contributors to squash \ntheir chains is it.  Encouraging better commit behaviour would be better.\n\nHowever, I'm only a lurker, not a committer, weight my opinions accordingly.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/cde9187b/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-04T11:53:00",
                "message_text_only": "On Fri, Oct 04, 2013 at 12:30:07PM +0200, Mike Hearn wrote:\n> Git makes it easy to fork peoples work off and create long series of\n> commits that achieve some useful goal. That's great for many things.\n> Unfortunately, code review is not one of those things.\n> \n> I'd like to make a small request - when submitting large, complex pieces of\n> work for review, please either submit it as one giant squashed change, or\n> be an absolute fascist about keeping commits logically clean and separated.\n> It really sucks to review things in sequence and then discover that some\n> code you spent some time thinking about or puzzling out got\n> deleted/rewritten/changed in a later commit. It also can make it harder to\n> review things when later code uses new APIs or behaviour changes introduced\n> in earlier commits - you have to either keep it all in your head, do lots\n> of tab switching, or do a squash yourself (in which case every reviewer\n> would have to manually do that).\n\nWhen I'm reviewing multiple commit pull-requests and want to see every\nchange made, I always either click on the \"Files Changed\" tab on github,\nwhich collapses every commit into a single diff, or do the equivalent\nwith git log.\n\nWhy doesn't that work for you?\n\n> On a related note, github seems to have lost the plot with regards to code\n> review - they are spending their time adding 3D renderers to their diff\n> viewer but not making basic improvements other tools had for years.\n> \n> So, I'd like to suggest the idea of using Review Board:\n> \n> http://www.reviewboard.org/\n> \n> It's an open source, dedicated code review tool used by lots of big name\n> companies for their internal work. It has git[hub] integration and a lot of\n> very neat features, like the ability to attach screenshots to reviews. Also\n> more basic ones, like side by side diffs. Branches can be and often are\n> submitted to the system as single reviews.\n> \n> The company behind it (disclosure - written and run by a long time friend\n> of mine) offers hosting plans, but we could also host it on a Foundation\n> server instead.\n\nOne advantage of using github is that they're an independent third\nparty; we should think carefully about the risks of furthering the\nimpression that Bitcoin development is a closed process by moving the\ncode review it to a server that we control with explicit review groups.\n\nGiven that Review Board appears to remain cryptographically unverifiable\nthere may also be disadvantages in operating it ourselves in that if the\nreview server does get compromised we *don't* have a third-party to\nblame. In addition GitHub is a third-party with a very valuable\nreputation to uphold and full-time staff - they're doing a better job of\nkeeping their servers secure and running then we ever could.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/c9917a7d/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-04T12:14:19",
                "message_text_only": "On Fri, Oct 4, 2013 at 1:53 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> When I'm reviewing multiple commit pull-requests and want to see every\n> change made, I always either click on the \"Files Changed\" tab on github,\n> which collapses every commit into a single diff, or do the equivalent\n> with git log.\n>\n> Why doesn't that work for you?\n>\n\nThe files changed tab definitely works better for reading. In the past\ncomments I put there have disappeared, but I think that can also be true of\ncomments put on the individual commit reviews (which is another issue with\ngithub, but it's unrelated to how the commits are presented). So I have\nlost trust in doing reviews that way. It does make things easier to read\nthough.\n\nOne advantage of using github is that they're an independent third\n> party; we should think carefully about the risks of furthering the\n> impression that Bitcoin development is a closed process by moving the\n> code review it to a server that we control with explicit review groups.\n>\n\nI guess anyone would be able to sign up and comment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/8804a6e6/attachment.html>"
            },
            {
                "author": "Eugen Leitl",
                "date": "2013-10-04T12:22:32",
                "message_text_only": "On Fri, Oct 04, 2013 at 02:14:19PM +0200, Mike Hearn wrote:\n\n> One advantage of using github is that they're an independent third\n> > party; we should think carefully about the risks of furthering the\n> > impression that Bitcoin development is a closed process by moving the\n> > code review it to a server that we control with explicit review groups.\n> >\n> \n> I guess anyone would be able to sign up and comment.\n\nIt's a long shot, but have any of you looked into Fossil?"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-05T02:31:57",
                "message_text_only": "On Fri, Oct 4, 2013 at 8:30 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> I'd like to make a small request - when submitting large, complex pieces\n> of work for review, please either submit it as one giant squashed change,\n> or be an absolute fascist about keeping commits logically clean and\n> separated.\n>\n\nI'll try harder to be a fascist (it doesn't come naturally to me). HUGE\nthanks for taking the time to review the fee changes in detail.\n\nRE: using Review Board:\n\nI'm all for using better tools, if they will actually get used. If a\npotential reviewer has to sign up to create a Review Board account or learn\nYet Another Tool, then I think it would be counter-productive:  we'd just\nmake the pool of reviewers even smaller than it already is.\n\nAre there good examples of other open source software projects successfully\nincentivizing review that we can copy?\n\nFor example, I'm wondering if maybe for the 0.9 release and onwards the\n\"Thank you\" section should thank only people who have significantly helped\ntest or review other people's code.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131005/b234c2f6/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-10-05T04:02:45",
                "message_text_only": "https://www.kernel.org/doc/Documentation/SubmittingPatches\nRead the section under \"14) Using Reported-by:, Tested-by:, Reviewed-by:\nand Suggested-by:\". That might be helpful in our process too?\n\nWarren\n\n\nOn Fri, Oct 4, 2013 at 4:31 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Fri, Oct 4, 2013 at 8:30 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I'd like to make a small request - when submitting large, complex pieces\n>> of work for review, please either submit it as one giant squashed change,\n>> or be an absolute fascist about keeping commits logically clean and\n>> separated.\n>>\n>\n> I'll try harder to be a fascist (it doesn't come naturally to me). HUGE\n> thanks for taking the time to review the fee changes in detail.\n>\n> RE: using Review Board:\n>\n> I'm all for using better tools, if they will actually get used. If a\n> potential reviewer has to sign up to create a Review Board account or learn\n> Yet Another Tool, then I think it would be counter-productive:  we'd just\n> make the pool of reviewers even smaller than it already is.\n>\n> Are there good examples of other open source software projects\n> successfully incentivizing review that we can copy?\n>\n> For example, I'm wondering if maybe for the 0.9 release and onwards the\n> \"Thank you\" section should thank only people who have significantly helped\n> test or review other people's code.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3b8b08d1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-05T11:36:26",
                "message_text_only": "On Sat, Oct 5, 2013 at 4:31 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> I'll try harder to be a fascist (it doesn't come naturally to me). HUGE\n> thanks for taking the time to review the fee changes in detail.\n>\n\nThanks, although I wasn't thinking specifically of you. The fee pull is\npretty well laid out. It just reminded me that it seems to be a common\nissue I've had over the past year or so, across projects and people.\n\n\n> I'm all for using better tools, if they will actually get used. If a\n> potential reviewer has to sign up to create a Review Board account or learn\n> Yet Another Tool, then I think it would be counter-productive:  we'd just\n> make the pool of reviewers even smaller than it already is.\n>\n\nYes, I don't know if github supports any kind of SSO. I will investigate.\nAs for learning another tool, well, when the current tool kind of sucks I\ndon't see any way around that one :)\n\n\n> Are there good examples of other open source software projects\n> successfully incentivizing review that we can copy?\n>\n> For example, I'm wondering if maybe for the 0.9 release and onwards the\n> \"Thank you\" section should thank only people who have significantly helped\n> test or review other people's code.\n>\n\nPerhaps just have a separate section for people who helped review above the\ncurrent section? It seems a bit mean not to credit occasional contributors\nwho fixed bugs or maintained something important but didn't review\ncomplicated changes to the core.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131005/23e4a09f/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-04T12:14:15",
                "message_text_only": "On Fri, Oct 04, 2013 at 01:58:51PM +0200, Arto Bendiken wrote:\n> On Fri, Oct 4, 2013 at 1:35 PM, Peter Todd <pete at petertodd.org> wrote:\n> > The second caveat is more specific to Bitcoin: people tend to rebase\n> > their pull-requests over and over again until they are accepted, but\n> > that also means that code review done earlier doesn't apply to the later\n> > code pushed. Bitcoin is a particularly high profile, and high profit,\n> > target for people trying to get malicious code into the codebase.\n> \n> On that note, this 2003 example of an attempt to backdoor the Linux\n> kernel is pertinent:\n> \n> http://lwn.net/Articles/57135/\n> \n> The backdoor in question came down to a single missing character,\n> easily overlooked by a reviewer if a spotlight hadn't been thrown on\n> it for other reasons. Compromising a Bitcoin implementation isn't\n> going to be as easy as that, one would hope, but certainly it seems\n> only a matter of time until there's an attempt at it.\n\nExactly.\n\nIdeally code review discussions would be PGP signed and have a mechanism\nfor someone to sign a commit saying they had in fact reviewed it.\nCombined with git's per-commit signature mechanism it'd make it possible\nto write a git-pull hook that checked that whatever was being pulled had\nsome sufficient number of signatures from people whose reviews you\ntrusted. With such a system you could host code review anywhere safely,\nor for that matter, use a completely distributed system.\n\nBut that's going to be a long way off. In the meantime github is\nprobably more trustworthy and competent than anything we ran ourselves,\nand we should focus on making sure reviewers eyeballs actually look at\nthe code that ends up in master.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/4ac17bb4/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Code review",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Arto Bendiken",
                "Warren Togami Jr.",
                "Mike Hearn",
                "Eugen Leitl",
                "Peter Todd",
                "Andy Parkins",
                "Gavin Andresen"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 27553
        }
    },
    {
        "title": "[Bitcoin-development] MacWallet - another wallet app for mac",
        "thread_messages": [
            {
                "author": "Jonas Schnelli",
                "date": "2013-10-08T10:31:06",
                "message_text_only": "Hi\n\nI'd like to introduce MacWallet.\nA tiny and integrated thin client wallet app based on bitcoinj.\n\nMain focus of the app:\n-> Small and integrated wallet app for Mac OSX.\n-> Low memory and cpu footprint, can be run in background without pain\n-> Use Mac OSX keychain as wallet store (by default encrypted with your login credentials)\n-> Simple UI. Use status menu (a.k.a global menu) as main UI entry point\n\nCurrently, MacWallet app is in early development stage.\n\nScreenshots:\nhttps://github.com/MacWallet/MacWallet/blob/master/SCREENSHOTS.md\n\nCheck the bitcointalk post:\nhttps://bitcointalk.org/index.php?topic=307200.0\n\nGithub:\nhttps://github.com/MacWallet/MacWallet\n\n</jonas>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131008/470e23ea/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "MacWallet - another wallet app for mac",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jonas Schnelli"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 863
        }
    },
    {
        "title": "[Bitcoin-development] 0.8.5 with libsecp256k1",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2013-10-10T03:50:30",
                "message_text_only": "https://github.com/sipa/secp256k1\nsipa's secp256k1, optimized ecdsa, significantly faster than openssl\n\nToday someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's\nsecp256k1.  Litecoin has been shipping test builds with secp256k1 for\nseveral months now so it was a simple matter to throw together a branch of\nBitcoin 0.8.5 with secp256k1.\n\nhttps://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1\nThis branch should theoretically work for Linux, win32 gitian and mac\nbuilds.  These commits are rather ugly because it was thrown together just\nto make it build with the old 0.8 makefiles without intent for production\ncode merge. cfields is working on autotoolizing it as one of the\nprerequisites prior to inclusion into bitcoin master where it will be an\noption disabled by default.\n\nhttp://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/\nUntested win32 gitian build.  Build your own Linux or Mac builds if you\nwant to test it.  Not recommended for production wallet or mining uses.\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131009/efac0a25/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-10-10T04:10:09",
                "message_text_only": "Can this be combined with the ideas on deterministic signing to show  \nmatching signatures with OpenSSL's implementation?\n\nNot sure if that's worth much, since we would just be testing needles in a  \nvery large haystack, but better than nothing?\n\nOn Wed, 09 Oct 2013 20:50:30 -0700, Warren Togami Jr. <wtogami at gmail.com>  \nwrote:\n\n> https://github.com/sipa/secp256k1\n> sipa's secp256k1, optimized ecdsa, significantly faster than openssl\n>\n> Today someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's  \n> secp256k1.  Litecoin has been shipping test builds with secp256k1 for  \n> several months >now so it was a simple matter to throw together a branch  \n> of Bitcoin 0.8.5 with secp256k1.\n>\n> https://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1\n> This branch should theoretically work for Linux, win32 gitian and mac  \n> builds.  These commits are rather ugly because it was thrown together  \n> just to make >it build with the old 0.8 makefiles without intent for  \n> production code merge. cfields is working on autotoolizing it as one of  \n> the prerequisites prior to >inclusion into bitcoin master where it will  \n> be an option disabled by default.\n>\n> http://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/\n> Untested win32 gitian build.  Build your own Linux or Mac builds if you  \n> want to test it.  Not recommended for production wallet or mining uses.\n>\n> Warren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131009/42b7fbc0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-10T08:29:20",
                "message_text_only": "Thanks! I'd love to see this library become usable behind a command line\nflag or config setting. At some point we're going to want to switch to it.\n\nI believe the main issue at the moment is the malleability issues? If so,\nit would seem possible to use OpenSSL to parse the signature into\ncomponents and then libsecp256k1 to verify them.\n\n\n\n\nOn Thu, Oct 10, 2013 at 5:50 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n\n> https://github.com/sipa/secp256k1\n> sipa's secp256k1, optimized ecdsa, significantly faster than openssl\n>\n> Today someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's\n> secp256k1.  Litecoin has been shipping test builds with secp256k1 for\n> several months now so it was a simple matter to throw together a branch of\n> Bitcoin 0.8.5 with secp256k1.\n>\n> https://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1\n> This branch should theoretically work for Linux, win32 gitian and mac\n> builds.  These commits are rather ugly because it was thrown together just\n> to make it build with the old 0.8 makefiles without intent for production\n> code merge. cfields is working on autotoolizing it as one of the\n> prerequisites prior to inclusion into bitcoin master where it will be an\n> option disabled by default.\n>\n> http://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/\n> Untested win32 gitian build.  Build your own Linux or Mac builds if you\n> want to test it.  Not recommended for production wallet or mining uses.\n>\n> Warren\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131010/80e0c5c3/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-10-11T11:41:41",
                "message_text_only": "On Thu, Oct 10, 2013 at 10:29 AM, Mike Hearn <mike at plan99.net> wrote:\n> Thanks! I'd love to see this library become usable behind a command line\n> flag or config setting. At some point we're going to want to switch to it.\n>\n\nThe current idea is to provide a compile-time flag to enable it, which\nat the same time disables the wallet and mining RPCs. In that state,\nit should be safe enough to provide test builds.\n\n> I believe the main issue at the moment is the malleability issues? If so, it\n> would seem possible to use OpenSSL to parse the signature into components\n> and then libsecp256k1 to verify them.\n\nI'm pretty sure that libsecp256k1 supports every signature that\nOpenSSL supports, so that direction is likely covered. The other\ndirection - the fact that libsecp256k1 potentially supports more than\nOpenSSL - is only a problem if a majority of the hash power would be\nrunning on it. However, with canonical encodings enforced by recent\nrelaying nodes, I hope that by then we're able to schedule a softfork\nand require them inside blocks.\n\nApart from that, there is of course the issue that there may be actual\nexploitable mistakes in the crypto code. There are unit tests,\nincluding ones that create signatures with libsecp256k1 and verify\nthem using OpenSSL and the other way around, but errors are certainly\nmore likely to occur in edge cases that you don't hit with randomized\ntests. The only way to catch those is review I suppose. I certainly\nwelcome people looking at it - even if just to get comments like \"Can\nyou add an explanation for why this works?\".\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "0.8.5 with libsecp256k1",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Mike Hearn",
                "Jeremy Spilman",
                "Pieter Wuille"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6628
        }
    },
    {
        "title": "[Bitcoin-development] malleability work-around vs fix (Re: 0.8.5 with libsecp256k1)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-10-10T14:21:54",
                "message_text_only": "Determinstic ECDSA signature aka k=H(d,m) insead of k=random, with signature\n(r,s) calculated r=[kG].x, s=k^-1(H(m)+rd) with public key Q=dG and\nverificaton relation [H(m)s^-1G+rs^-1Q].x=?r is cool and should be done. \nOtherwise RNG issues like EC_DRBG or even leaked partial bits like the RNG\nbias in the original DSA spec that Bleichenbacher pointed out and then they\ncorrected.\n\nOn Wed, Oct 09, 2013 at 09:10:09PM -0700, Jeremy Spilman wrote:\n>Can this be combined with the ideas on deterministic signing to show \n>matching signatures with OpenSSL's implementation?\n\nBut k=random and k=H(d,m) create compatible signatures - or were you eaning\nto cross check the two implementations with fuzz tester on lots of messages?\n\nbtw about malleability:\n\nMike Hearn <mike at plan99.net> wrote:\n>   I believe the main issue at the moment is the malleability issues? If\n>   so, it would seem possible to use OpenSSL to parse the signature into\n>   components and then libsecp256k1 to verify them.\n\nother than the ASN.1 related parsing ambiguity, if any (openSSL asn.1\nparsing code is evil and shold not be used), the (r,s) vs (r,-s) ambiguity\ncan be plugged as discussed (eg define -s as invalid).  But that is ECDSA\nspecific, and signature malleability and its impact is a generic problem. \nIts probably a non-requirement of a signature scheme in terms of the\nanalysis effort put in by cryptanalysts that the signature itself be\nnon-malleable, eg there are some encryption schemes which are publicly\nreblindable, like Elgamal.  By plugging the (r,s), (r,-s) specific case as a\nDSA specific work-around there may be other malleability even in DSA, unless\nsomeone has a clear proof that there is not.\n\nAnd we may want to add ECS (schnorr) because it's simpler and allows more\nflexibility and efficiency (eg native n of n multisig at the storage cost of\n1 signature vs n with ECDSA, and k of n threshold signature at the cost of 1\nsig (but some threshold secret share setup up front).  The relying party\ndoesnt need to know how many multi-sigs there are there is a single public\nkey.\n\nSo I was thinking a more generic / robust way to fix this would be to change\nthe txid from H(sig,inputs,outputs,script) to H(pubkey,inputs,outputs,script)\nor something like that in effect so that the malleability of the signature\nmechanism doesnt affect the security of conditional payments.\n\nAdam"
            },
            {
                "author": "Adam Back",
                "date": "2013-10-10T15:06:03",
                "message_text_only": "btw if I got that right, it means you dont even have to fix the asn.1 level\nambiguity (though its a good idea to remove openSSL asn.1 parsing code) to\nhave conditional payments using not yet broadcast txid outputs as inputs to\nwork with high assurance.  (And even in the event that a new crypto level\nmalleability is discovered in ECDSA it remains secure.)\n\nAdam\n\nAdam Back wrote:\n>So I was thinking a more generic / robust way to fix this would be to change\n>the txid from H(sig,inputs,outputs,script) to H(pubkey,inputs,outputs,script)\n>or something like that in effect so that the malleability of the signature\n>mechanism doesnt affect the security of conditional payments.\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "malleability work-around vs fix (Re: 0.8.5 with libsecp256k1)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3054
        }
    },
    {
        "title": "[Bitcoin-development] FYI: pull-tester status",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-10-11T06:04:11",
                "message_text_only": "Since the autotools merge, the pull-tester has been misbehaving-- marking\nvalid pulls as invalid, etc.\n\nSo I've turned off some pull-tester features until somebody has time to\nfigure out how to fix them. Right now, pull-tester does the following:\n\n+ Cross-compile windows binaries\n+ Compile linux binaries\n+ Run unit tests (binaries compiled on linux)\n\nThe following features are turned off:\n\n- Running unit tests under wine with cross-compiled windows binaries\n- Running the block-chain-compatibility tester\n- Computing code coverage\n\nMedium-term, there are several changes that need to be made to the\npull-tester environment; I'd like the following to get done:\n\n+ Upgrade the pull-tester machine from Ubuntu 10.04 to 12.04. Or, probably\nbetter, create a new 12.04 virtual machine and move the pull-tester over to\nit.\n\n+ Upgrade compilers/dependencies based on what we think we'll use for the\n0.9 release.\n\n+ Figure out how to unify the pull-tester and gitian build processes.\n Maybe the pull-tester should run gitian builds to create binaries (that\nare then tested against the blockchain tester)? Maybe the pull-tester\nscripts should be gitian scripts, which the pull-tester machine runs inside\nan LXC container?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131011/4f879353/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "FYI: pull-tester status",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1421
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin meets the Semantic Web....",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-10-11T11:27:49",
                "message_text_only": "On 1 April 2013 09:59, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n> I'm working on porting crypto currencies to the semantic web.\n>\n> The advantages of this is that pages can then become machine readable on\n> the web allowing new types of innovation and spreading bitcoin information\n> to a wider audience.\n>\n> The first step that needs to be done is to create a \"vocabulary\" for\n> bitcoin.\n>\n> What this means is like a dictionary of terms that can be put down in a\n> machine readable standard (called RDF).\n>\n> I was wondering if anyone has worked on this before or if there is a human\n> readable \"glossary\" for bitcoin that I could take text from?\n>\n> seeAlso: https://bitcointalk.org/index.php?topic=163705.0\n>\n\nHi All\n\nSorry for the delay on this.  I've made a very simple start, and am hosting\nthe vocabulary at.\n\nhttps://w3id.org/cc\n\nHaving chatted on IRC, I'm not only going to model bitcion, but all crypto\ncurrencies in time, starting first with bitcoin.  There's only one use case\ncurrently support, which is a way to tell the semantic web that a link is a\nbitcoin address (I know you can already introspect on the bitcoin: link but\nintrospection requires out of band knowledge).  More explanation below:\n\n*Use Case\n*\n\nAs a publisher Alice would like to link her web page content (or app) to a\nbitcoin address, so that donations can be received by those that have\nenjoyed her work.\n\n*Model\n*\nIt's only a slight overhead to model all crypto currencies so perhaps the\nmodel will be something like\n\nURI -> crypto-currency-address -> bitcoin-address\n\n*Implementation\n*\nThe folks at w3id.org have kindly offered to user their permanent\nidentifier switchboard, then we redirect to a locked down vocabulary.\n\nAs an implementer you simply need to add a single rel= tag to your markup.\n\n*Example Usage*\n\nIn a web page:\n\n<*meta* rel=\"https://w3id.org/cc#bitcoin<https://w3id.org/cc#bitcoin-address>\"\nhref=\"bitcoin:1234....\" />\n\nIn an html5 app:\n\n<a rel=\"https://w3id.org/cc#bitcoin <https://w3id.org/cc#bitcoin-address>\"\nhref=\"bitcoin:1234....\"></a>\n\n*Note: you an provide context for an individual concept in HTML5 (as\nopposed to the webpage itself), such as an app, a project, a person, but\nusing the @about tag.\n*\n\nFor litecoins (coming soon)\n\n<a rel=\"https://w3id.org/cc#litecoin <https://w3id.org/cc#litecoin-address>\"\nhref=\"....\"></a>\n\n\n*Next Steps\n\n*\nIt's just a small step to start with, can allow all sorts of entities to\nstart accepting bitcoin in a way that complies with the W3C best\npractices.  I'll be improving and extending this over time, feedback or\nhelp is welcome!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131011/13593de6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin meets the Semantic Web....",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2779
        }
    },
    {
        "title": "[Bitcoin-development] is there a way to do bitcoin-staging?",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-10-14T18:08:07",
                "message_text_only": "Coming back to the staging idea, maybe this is a realistic model that could\nwork.  The objective being to provide a way for bitcoin to move to a live\nbeta and stable being worked on in parallel like fedora vs RHEL or odd/even\nlinux kernel versions.\n\nDevelopment runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x\nstable and leap-frogs as beta becomes stable after testing.\n\nIts a live beta, meaning real value, real contracts.  But we dont want it to\nbe an alt-coin with a floating value exactly, we want it to be bitcoin, but\nthe bleeding edge bitcoin so we want to respect the 21 million coin limit,\nand allow coins to move between bitcoin and betacoin with some necessary\nsecurity related restrictions.\n\nThere is no mining reward on the betacoin network (can be merge mined for\nsecurity), and the way you opt to move a bitcoin into the betacoin network\nis to mark it as transferred in some UTXO recognized way.  It cant be\nreanimated, its dead.  (eg spend to a specific recognized invalid address on\nthe bitcoin network).  In this way its not really a destruction, but a move,\nmoving the coin from bitcoin to betacoin network.\n\nThis respects the 21 million coin cap, and avoids betacoin bugs flowing back\nand affecting bitcoin security or value-store properties.  Users may buy or\nswap betacoin for bitcoin to facilitate moving money back from betacoin to\nbitcoin.  However that is market priced so the bitcoin network is security\ninsulated from beta.  A significant security bug in beta would cause a\nmarket freeze, until it is rectified.\n\nThe cost of a betacoin is capped at one BTC because no one will pay more\nthan one bitcoin for a betacoin because they could alternatively move their\nown coin.  The reverse is market priced.\n\nOnce bitcoin beta stabalizes, eg say year or two type of time-frame, a\ndecision is reached to promote 1.0 beta to 2.0 stable, the remaining\nbitcoins can be moved, and the old network switched off, with mining past a\nflag day moving to the betacoin.\n\nDuring the beta period betacoin is NOT an alpha, people can rely on it and\nuse it in anger for real value transactions.  eg if it enables more script\nfeatures, or coin coloring, scalabity tweaks etc people can use it. \nProbably for large value store they are always going to prefer\nbitcoin-stable, but applications that need the coloring features, or\nadvanced scripting etc can go ahead and beta.\n\nBitcoin-stable may pull validated changes and merge them, as a way to pull\nin any features needed in the shorter term and benefit from the betacoin\nvalidation.  (Testing isnt as much validation as real-money at stake\nsurvivability). \n\nThe arguments are I think that: \n\n- it allows faster development allowing bitcoin to progress features faster,\n\n- it avoids mindshare dilution if alternatively an alt-coin with a hit\n   missing feature takes off;\n\n- it concentrates such useful-feature alt activities into one OPEN source\n   and OPEN control foundation mediated area (rather than suspected land\n   grabs on colored fees or such like bitcoin respun as a business model\n   things),\n\n- maybe gets the developers that would've been working on their pet\n   alt-coin, or their startup alt-coin to work together putting more\n   developers, testers and resources onto something with open control (open\n   source does not necessarily mean that much) and bitcoin mindshare\n   branding, its STILL bitcoin, its just the beta network.\n\n- it respects the 21 million limit, starting new mining races probably\n   dillutes the artificial scarcity semantic\n\n- while insulating bitcoin from betacoin security defects (I dont mean\n   betacoin as a testnet, it should have prudent rigorous testing like\n   bitcoin, just the very act of adding a feature creates risk that bitcoin\n   stable can be hesitant to take).\n\nProbably the main issue as always is more (trustable) very high caliber\ntesters and developers.  Maybe if the alt-coin minded startups and\ndevelopers donate their time to bitcoin-beta (or bitcoin-stable) for the\nbits they are missing, we'll get more hands to work on something of reusable\nvalue to humanity, in parallel with their startup's objectives and as a way\nfor them to get their needed features, while giving back to the bitcoin\ncommunity, and helping bitcoin progress faster.\n\nMaybe bitcoin foundation could ask for BTC donations to hire more developers\nand testers full time.  $1.5b of stored value should be interested to safe\nguard their value store, and develop the transaction features.\n\nAdam\n\nOn Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n>   This is exactly what I was planning to do with the\n>   inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n> \n>   For it to really work, it's gotta be part of the mainnet validation\n>   rules, but no way it can be evaluated realistically without some kind of\n>   \"staging\".  \n\n>   On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>\n>   I think this is a very interesting idea. As Bitcoiners, we often stuff\n>   things into the 'alt chain' bucket in our heads; I wonder if this idea\n>   works better as a curing period, essentially an extended version of the\n>   current 100 block wait for mined coins."
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-14T18:21:04",
                "message_text_only": "On Mon, Oct 14, 2013 at 2:08 PM, Adam Back <adam at cypherspace.org> wrote:\n> Its a live beta, meaning real value, real contracts.  But we dont want it to\n> be an alt-coin with a floating value exactly, we want it to be bitcoin, but\n> the bleeding edge bitcoin so we want to respect the 21 million coin limit,\n> and allow coins to move between bitcoin and betacoin with some necessary\n> security related restrictions.\n>\n> There is no mining reward on the betacoin network (can be merge mined for\n> security), and the way you opt to move a bitcoin into the betacoin network\n> is to mark it as transferred in some UTXO recognized way.  It cant be\n> reanimated, its dead.  (eg spend to a specific recognized invalid address on\n> the bitcoin network).  In this way its not really a destruction, but a move,\n> moving the coin from bitcoin to betacoin network.\n>\n> This respects the 21 million coin cap, and avoids betacoin bugs flowing back\n> and affecting bitcoin security or value-store properties.  Users may buy or\n> swap betacoin for bitcoin to facilitate moving money back from betacoin to\n> bitcoin.  However that is market priced so the bitcoin network is security\n> insulated from beta.  A significant security bug in beta would cause a\n> market freeze, until it is rectified.\n\nQuite a neat idea...\n\n\n> - it avoids mindshare dilution if alternatively an alt-coin with a hit\n>    missing feature takes off;\n\nFWIW, litecoin devs are open to having litecoin be a bit of a staging\narea for new bitcoin features.  Obviously there is some self-interest\nthere -- \"we have new cool stuff first!\" -- nevertheless, it is a live\ntest that could demonstrate problems with new features before they\nland in bitcoin-stable.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-10-14T18:43:26",
                "message_text_only": "Hi Alan,\n\nWhat you describe in the ultimate blockchain compression I have already\ncoded the authenticated datastructure part of in libcoin\n(https://github.com/libcoin/libcoin) - next step is to include a p2pool\nstyle mining, where a parallel chain serves several purposes:\n1. to validate the root hash at a higher frequency than the 10 min\n2. to enable distributed mining, easily (part of libcoind)\n3. to utilize the soft fork by defining the root hash in coinbase blocks\nas v3 and once we cross the limit all blocks are v3.\n\nI will have a closer look at you bitcoin talk post to see how well my\napproach and ideas fit to yours.\n\nMichael\n\nOn 20/5/13 08:34 , Alan Reiner wrote:\n> This is exactly what I was planning to do with the inappropriately-named\n> \"Ultimate Blockchain Compression\n> <https://bitcointalk.org/index.php?topic=88208.0>\".  I wanted to\n> reorganize the blockchain data into an authenticated tree, indexed by\n> TxOut script (address), instead of tx-hash.  Much like a regular merkle\n> tree, you can store the root in the block header, and communicate\n> branches of that tree to nodes, to prove inclusion (and exclusion!) of\n> TxOuts for any given script/address.  Additionally, you can include at\n> each node, the sum of BTC in all nodes below it, which offers some other\n> nice benefits.\n> \n> I think this idea is has epic upside-potential for bitcoin if it works\n> -- even \"SPV\" nodes could query their unspent TxOut list for their\n> wallet from any untrusted peer and compare the result directly to the\n> blockheaders/POW.  Given nothing but the headers, you can verify the\n> balance of 100 addresses with 250 kB.  But also epic failure-potential\n> in terms of feasibility and cost-to-benefit for miners.  For it to\n> really work, it's gotta be part of the mainnet validation rules, but no\n> way it can be evaluated realistically without some kind of \"staging\". \n> Therefore, I had proposed that this be merge-mined on a \"meta-chain\"\n> first...get a bunch of miners on board to agree to merge mine and see it\n> in action.  It seemed like a perfectly non-disruptive way to prove out a\n> particular idea before we actually consider making a protocol change\n> that significant.  Even if it stayed on its own meta chain, as long as\n> there is some significant amount of hashpower working on it, it can\n> still be a useful tool. \n> \n> Unfortunately, my experience with merged mining is minimal, so I'm still\n> not clear how feasible/reliable it is as an alternative to direct\n> blockchain integration.  That's a discussion I'd like to have.\n> \n> -Alan\n> \n> \n> On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>> I think this is a very interesting idea. As Bitcoiners, we often stuff\n>> things into the 'alt chain' bucket in our heads; I wonder if this idea\n>> works better as a curing period, essentially an extended version of\n>> the current 100 block wait for mined coins.\n>>\n>> An alternate setup comes to mind; I can imagine this working as a sort\n>> of gift economy; people pay real BTC for merge-mined \"beta BTC\" as a\n>> way to support development. There is no doubt a more elegant and\n>> practical solution that might have different economic and crypto\n>> characteristics.\n>>\n>>\n>>\n>> On Sun, May 19, 2013 at 6:23 AM, Adam Back <adam at cypherspace.org\n>> <mailto:adam at cypherspace.org>> wrote:\n>>\n>>     Is there a way to experiment with new features - eg committed\n>>     coins - that\n>>     doesnt involve an altcoin in the conventional sense, and also\n>>     doesnt impose\n>>     a big testing burden on bitcoin main which is a security and\n>>     testing risk?\n>>\n>>     eg lets say some form of merged mine where an alt-coin lets call it\n>>     bitcoin-staging?  where the coins are the same coins as on\n>>     bitcoin, the\n>>     mining power goes to bitcoin main, so some aspect of merged\n>>     mining, but no\n>>     native mining.  and ability to use bitcoins by locking them on\n>>     bitcoin to\n>>     move them to bitcoin-staging and vice versa (ie exchange them 1:1\n>>     cryptographically, no exchange).\n>>\n>>     Did anyone figure anything like that out?  Seems vaguely doable and\n>>     maybe productive.  The only people with coins at risk of defects\n>>     in a new\n>>     feature, or insufficiently well tested novel feature are people\n>>     with coins\n>>     on bitcoin-staging.\n>>\n>>     Yes I know about bitcoin-test this is not it.  I mean a real live\n>>     system,\n>>     with live value, but that is intentionally wanting to avoid\n>>     forking bitcoins\n>>     parameters, nor value, nor mindshare dillution.  In this way something\n>>     potentially interesting could move forward faster, and be les\n>>     risky to the\n>>     main bitcoin network.  eg particularly defenses against\n>>\n>>     It might also be a more real world test test (after bitcoin-test)\n>>     because\n>>     some parameters are different on test, and some issues may not\n>>     manifest\n>>     without more real activity.\n>>\n>>     Then also bitcoin could cherry pick interesting patches and merge\n>>     them after\n>>     extensive real-world validation with real-money at stake (by early\n>>     adopters).\n>>\n>>     Adam\n>>\n>>     ------------------------------------------------------------------------------\n>>     AlienVault Unified Security Management (USM) platform delivers\n>>     complete\n>>     security visibility with the essential security capabilities.\n>>     Easily and\n>>     efficiently configure, manage, and operate all of your security\n>>     controls\n>>     from a single console and one unified framework. Download a free\n>>     trial.\n>>     http://p.sf.net/sfu/alienvault_d2d\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> -- \n>> Are you coming to Bitcoin2013 <http://bitcoin2013.com> in San Jose In\n>> May? \n>> ------------------------------------------------------------------------\n>>\n>> CoinLab LogoPETER VESSENES \n>> CEO\n>>\n>> *peter at coinlab.com <mailto:peter at coinlab.com> * /  206.486.6856\n>>  / SKYPE: vessenes \n>> 71 COLUMBIA ST / SUITE 300  /  SEATTLE, WA 98104\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> AlienVault Unified Security Management (USM) platform delivers complete\n>> security visibility with the essential security capabilities. Easily and\n>> efficiently configure, manage, and operate all of your security controls\n>> from a single console and one unified framework. Download a free trial.\n>> http://p.sf.net/sfu/alienvault_d2d\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> AlienVault Unified Security Management (USM) platform delivers complete\n> security visibility with the essential security capabilities. Easily and\n> efficiently configure, manage, and operate all of your security controls\n> from a single console and one unified framework. Download a free trial.\n> http://p.sf.net/sfu/alienvault_d2d\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-10-14T20:20:33",
                "message_text_only": "Michael,\n\nVery interesting that you have tackled that off the radar.  I didn't\nknow anyone else was working on anything similar.  I'm sure you saw the\nrecent Armory-funding announcement, so understandably I have other\npriorities in recent past and near future, but I think you should\nconnect with Mark Friedenbach about this topic.  He solicited donations\nfor working on my idea, and has been doing proof-of-concept for for the\nlast few months.  In fact, he was just looking for funding for another 3\nmonths, and Armory Technologies, Inc, just offered up 50 BTC for him to\ncontinue (@Mark, whoops, I haven't actually paid you yet; contact me to\nwork out details).\n\nFor now, my ability to participate directly is limited, but I am still\nvery interested to see the ideas developed further, as well as provide a\nfirst test of this whole staging-area idea.  I devised it originally for\nthe UBC/Reiner-tree concept, but there's no reason it couldn't be used\nfor any other type of sweeping change to the protocol. \n\n-Alan\n\n\nOn 10/14/2013 02:43 PM, Michael Gronager wrote:\n> Hi Alan,\n>\n> What you describe in the ultimate blockchain compression I have already\n> coded the authenticated datastructure part of in libcoin\n> (https://github.com/libcoin/libcoin) - next step is to include a p2pool\n> style mining, where a parallel chain serves several purposes:\n> 1. to validate the root hash at a higher frequency than the 10 min\n> 2. to enable distributed mining, easily (part of libcoind)\n> 3. to utilize the soft fork by defining the root hash in coinbase blocks\n> as v3 and once we cross the limit all blocks are v3.\n>\n> I will have a closer look at you bitcoin talk post to see how well my\n> approach and ideas fit to yours.\n>\n> Michael\n>\n> On 20/5/13 08:34 , Alan Reiner wrote:\n>> This is exactly what I was planning to do with the inappropriately-named\n>> \"Ultimate Blockchain Compression\n>> <https://bitcointalk.org/index.php?topic=88208.0>\".  I wanted to\n>> reorganize the blockchain data into an authenticated tree, indexed by\n>> TxOut script (address), instead of tx-hash.  Much like a regular merkle\n>> tree, you can store the root in the block header, and communicate\n>> branches of that tree to nodes, to prove inclusion (and exclusion!) of\n>> TxOuts for any given script/address.  Additionally, you can include at\n>> each node, the sum of BTC in all nodes below it, which offers some other\n>> nice benefits.\n>>\n>> I think this idea is has epic upside-potential for bitcoin if it works\n>> -- even \"SPV\" nodes could query their unspent TxOut list for their\n>> wallet from any untrusted peer and compare the result directly to the\n>> blockheaders/POW.  Given nothing but the headers, you can verify the\n>> balance of 100 addresses with 250 kB.  But also epic failure-potential\n>> in terms of feasibility and cost-to-benefit for miners.  For it to\n>> really work, it's gotta be part of the mainnet validation rules, but no\n>> way it can be evaluated realistically without some kind of \"staging\". \n>> Therefore, I had proposed that this be merge-mined on a \"meta-chain\"\n>> first...get a bunch of miners on board to agree to merge mine and see it\n>> in action.  It seemed like a perfectly non-disruptive way to prove out a\n>> particular idea before we actually consider making a protocol change\n>> that significant.  Even if it stayed on its own meta chain, as long as\n>> there is some significant amount of hashpower working on it, it can\n>> still be a useful tool. \n>>\n>> Unfortunately, my experience with merged mining is minimal, so I'm still\n>> not clear how feasible/reliable it is as an alternative to direct\n>> blockchain integration.  That's a discussion I'd like to have.\n>>\n>> -Alan\n>>\n>>\n>> On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>>> I think this is a very interesting idea. As Bitcoiners, we often stuff\n>>> things into the 'alt chain' bucket in our heads; I wonder if this idea\n>>> works better as a curing period, essentially an extended version of\n>>> the current 100 block wait for mined coins.\n>>>\n>>> An alternate setup comes to mind; I can imagine this working as a sort\n>>> of gift economy; people pay real BTC for merge-mined \"beta BTC\" as a\n>>> way to support development. There is no doubt a more elegant and\n>>> practical solution that might have different economic and crypto\n>>> characteristics.\n>>>\n>>>\n>>>\n>>> On Sun, May 19, 2013 at 6:23 AM, Adam Back <adam at cypherspace.org\n>>> <mailto:adam at cypherspace.org>> wrote:\n>>>\n>>>     Is there a way to experiment with new features - eg committed\n>>>     coins - that\n>>>     doesnt involve an altcoin in the conventional sense, and also\n>>>     doesnt impose\n>>>     a big testing burden on bitcoin main which is a security and\n>>>     testing risk?\n>>>\n>>>     eg lets say some form of merged mine where an alt-coin lets call it\n>>>     bitcoin-staging?  where the coins are the same coins as on\n>>>     bitcoin, the\n>>>     mining power goes to bitcoin main, so some aspect of merged\n>>>     mining, but no\n>>>     native mining.  and ability to use bitcoins by locking them on\n>>>     bitcoin to\n>>>     move them to bitcoin-staging and vice versa (ie exchange them 1:1\n>>>     cryptographically, no exchange).\n>>>\n>>>     Did anyone figure anything like that out?  Seems vaguely doable and\n>>>     maybe productive.  The only people with coins at risk of defects\n>>>     in a new\n>>>     feature, or insufficiently well tested novel feature are people\n>>>     with coins\n>>>     on bitcoin-staging.\n>>>\n>>>     Yes I know about bitcoin-test this is not it.  I mean a real live\n>>>     system,\n>>>     with live value, but that is intentionally wanting to avoid\n>>>     forking bitcoins\n>>>     parameters, nor value, nor mindshare dillution.  In this way something\n>>>     potentially interesting could move forward faster, and be les\n>>>     risky to the\n>>>     main bitcoin network.  eg particularly defenses against\n>>>\n>>>     It might also be a more real world test test (after bitcoin-test)\n>>>     because\n>>>     some parameters are different on test, and some issues may not\n>>>     manifest\n>>>     without more real activity.\n>>>\n>>>     Then also bitcoin could cherry pick interesting patches and merge\n>>>     them after\n>>>     extensive real-world validation with real-money at stake (by early\n>>>     adopters).\n>>>\n>>>     Adam\n>>>\n>>>     ------------------------------------------------------------------------------\n>>>     AlienVault Unified Security Management (USM) platform delivers\n>>>     complete\n>>>     security visibility with the essential security capabilities.\n>>>     Easily and\n>>>     efficiently configure, manage, and operate all of your security\n>>>     controls\n>>>     from a single console and one unified framework. Download a free\n>>>     trial.\n>>>     http://p.sf.net/sfu/alienvault_d2d\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>>\n>>> -- \n>>> Are you coming to Bitcoin2013 <http://bitcoin2013.com> in San Jose In\n>>> May? \n>>> ------------------------------------------------------------------------\n>>>\n>>> CoinLab LogoPETER VESSENES \n>>> CEO\n>>>\n>>> *peter at coinlab.com <mailto:peter at coinlab.com> * /  206.486.6856\n>>>  / SKYPE: vessenes \n>>> 71 COLUMBIA ST / SUITE 300  /  SEATTLE, WA 98104\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> AlienVault Unified Security Management (USM) platform delivers complete\n>>> security visibility with the essential security capabilities. Easily and\n>>> efficiently configure, manage, and operate all of your security controls\n>>> from a single console and one unified framework. Download a free trial.\n>>> http://p.sf.net/sfu/alienvault_d2d\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> AlienVault Unified Security Management (USM) platform delivers complete\n>> security visibility with the essential security capabilities. Easily and\n>> efficiently configure, manage, and operate all of your security controls\n>> from a single console and one unified framework. Download a free trial.\n>> http://p.sf.net/sfu/alienvault_d2d\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>"
            }
        ],
        "thread_summary": {
            "title": "is there a way to do bitcoin-staging?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Michael Gronager",
                "Alan Reiner",
                "Jeff Garzik"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 23328
        }
    },
    {
        "title": "[Bitcoin-development] two comments on brain-wallet security (and BIP 38)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-10-15T13:34:46",
                "message_text_only": "So I had a go at deciphering BIP 038 in summary what I think its doing is\n(ommitting lot and sequence and deterinistic IVs for simplicity):\n\nuser:\n\nx1 = Scrypt( salt=random, pass )\nP = x1*G\n\nsend (salt, P) to coin manufacturer -> \n\n\t\t\t\tmanufacturer:\n\n\t\t\t\tx2 = random 24bytes\n\t\t\t\tQ = x2*P\n\t\t\t\tk = Scrypt( salt2=H(Q)||salt, pass=P )\n\t\t\t\te = AES_k( x2 )\n\n\t\t\t\tmanufacturer puts es inside coin.\n\n\t\t<- send coin, (salt, e, Q) to user\n\n\t\t\t\tthen optionally creates conf code:\n\n\t\t\t\tB = x2*G\n\t\t\t\tc = AES_k( B )\n\n\t\t<- send conf code c to user\n\nverify code c:\n\n(by recreating P, then k from Q & P, decrypt c to get B, check Q = x1*B)\n\nx1 = Scrypt( salt, pass )\nP = x1*G\nk = Scrypt( salt2=H(Q)||salt, pass=P )\n\nWhich seems reasonable enough, however its unfortunate that you have to\nrepeat the Scrypt work at setup.\n\nOne thing that occurs to me eg as mentioned by Rivest et al in their\ntime-lock puzzle paper is that it is easy to create work, if you are ok with\nparallelizable symmetric constructions (like scrypt(i) or PBKDF2(i) with i\niterations) without *doing* the work during setup.\n\nIt seems to me therefore that the above protocol could avoid the javascript\noverhead issue that forces users to choose a weak iteration level if they\nwant to create the wallet in that way.\n\neg create a 32-bit random salt, replace scrypt(i=16384, salt, pass) with\nscrypt(i=1,salt, pass) to be brute forced based on deleted salt.  Immediate\n2^32 = 4billion iteration salt without any significant setup cost.  (Or if\nyou want to limit the parallelism say scrypt(i=65536, salt, pass) with a\ndeleted 16-bit salt.  That should be parallelizable up to 65536 GPU cores\n(32x 7970 chips).\n\nSymmetric time-lock puzzles can achieve decrypt asymmetry without repeating\nthe work at setup...\n\n(Rivest et al goes on to avoid using that symmetric construct with an RSA\nrelated mechanism, because they are trying to lock information for an\napproximate future date, rather than protected by a specific amount of\ngrinding work.)\n\n\nI proposed a different blind (securely server-offloadable) deterministic\nproof of work relating to (asymmetric RSA-style) time-lock puzzles.  The\ndifference from time-lock is it is made blind (so the work can be securely\noffloaded without the server learning your password or resulting key) and\ncan be easily made parallelizable also which is desirable for server\noffload.\n\nhttps://bitcointalk.org/index.php?topic=311000.new#new\n\nI think that could take brain-wallets to a new level of security, if you\nprotect the amount by an amount of computation proportional to the value, eg\n0.1% or 0.01% redemption cost paid to blind proof of work miners.\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "two comments on brain-wallet security (and BIP 38)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2639
        }
    },
    {
        "title": "[Bitcoin-development] An \"app store\" and non-network transaction fees",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-10-18T11:56:09",
                "message_text_only": "We've gone ahead and pushed a v1 API for this idea:\nhttps://bitcointalk.org/index.php?topic=313352\n\nNo fees yet, just the basics.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Sep 5, 2013, at 10:26 AM, Mike Hearn wrote:\n\n> Hey Wendell,\n> \n> Interesting idea you have there!"
            }
        ],
        "thread_summary": {
            "title": "An \"app store\" and non-network transaction fees",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wendell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 294
        }
    },
    {
        "title": "[Bitcoin-development] BIP39 word list",
        "thread_messages": [
            {
                "author": "jan",
                "date": "2013-10-18T23:52:58",
                "message_text_only": "The words 'public', 'private' and 'secret' could be confusing when\nencoding public and private keys. eg. a private key that begins with\nthe word 'public'.\n\nI think avoiding words that could look similar when written down would\nbe a good idea aswell. I searched for words that only differ by the\nletters c & e, g & y, u & v and found the following:\n\ncar ear\ncat eat\ngear year\nvalue valve\n\nOther combinations could potentially be problematic depending on the\nhandwriting style: ft, ao, ij, vy, possibly even lt and il?\n\nI've included the search utility I used below.\n\n\n#include <stdbool.h>\n#include <string.h>\n#include <stdio.h>\n\nchar *similar_char_pairs[] = { \"ce\", \"gy\", \"uv\", NULL };\n\nbool is_similar_char(char c1, char c2)\n{\n  char **pairs = similar_char_pairs;\n  do {\n    char *p = *pairs;\n    if ((c1 == p[0] && c2 == p[1]) ||\n        (c1 == p[1] && c2 == p[0]))\n      return true;\n  } while (*++pairs);\n\n  return false;\n}\n\nbool print_words_if_similar(char *word1, char *word2)\n{\n  /* reject words of different lengths */\n  if (strlen(word1) != strlen(word2))\n    return false;\n\n  size_t i, similarcount = 0;\n  \n  for (i = 0; i < strlen(word1); i++) {\n    /* skip identical letters */\n    if (word1[i] == word2[i])\n      continue;\n\n    /* reject words that don't match */\n    if (is_similar_char(word1[i], word2[i]) == false)\n      return false;\n\n    similarcount++;\n  }\n\n  /* reject words with more than 1 different letter */\n  //if (similarcount > 1)\n  //  return false;\n\n  printf(\"%s %s\\n\", word1, word2);\n\n  return true;\n}\n\nint main(void)\n{\n  /* english.txt is assumed to exist in the working directory\n     download from:\n     https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt */\n  FILE* f = fopen(\"english.txt\", \"r\");\n  if (!f) {\n    fprintf(stderr, \"failed to open english.txt\\n\");\n    return 1;\n  }\n\n  /* read in word list, assumes one word per line */\n  #define MAXWORD 16\n  char wordlist[2048][MAXWORD];\n  int word = 0;\n  while (fgets(wordlist[word], MAXWORD, f)) {\n    /* strip trailing whitespace, assumes no leading whitespace */\n    char *ch = strpbrk(wordlist[word], \" \\n\\t\");\n    if (ch)\n      *ch = '\\0';\n    word++;\n  }\n\n  if (word != 2048) {\n    fprintf(stderr, \"word list incorrect length\\n\");\n    return 1;\n  }\n\n  /* check each word for similarity against every other word */\n  int i, j, count = 0;\n  for (i = 0; i < 2048; i++) {\n    for (j = i+1; j < 2048; j++) {\n      if (print_words_if_similar(wordlist[i], wordlist[j]))\n        count++;\n    }\n  }\n\n  printf(\"%d matches\\n\", count);\n  \n  return 0;\n}"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-18T23:58:27",
                "message_text_only": "some fairly old wordlist solver code of mine:\n\nhttps://people.xiph.org/~greg/wordlist.visual.py\n\nit has a 52x52 letter visual similarity matrix in it (along with a citation)\n\nOn Fri, Oct 18, 2013 at 4:52 PM, jan <jan.marecek at gmail.com> wrote:\n>\n> The words 'public', 'private' and 'secret' could be confusing when\n> encoding public and private keys. eg. a private key that begins with\n> the word 'public'.\n>\n> I think avoiding words that could look similar when written down would\n> be a good idea aswell. I searched for words that only differ by the\n> letters c & e, g & y, u & v and found the following:\n>\n> car ear\n> cat eat\n> gear year\n> value valve\n>\n> Other combinations could potentially be problematic depending on the\n> handwriting style: ft, ao, ij, vy, possibly even lt and il?\n>\n> I've included the search utility I used below.\n>\n>\n> #include <stdbool.h>\n> #include <string.h>\n> #include <stdio.h>\n>\n> char *similar_char_pairs[] = { \"ce\", \"gy\", \"uv\", NULL };\n>\n> bool is_similar_char(char c1, char c2)\n> {\n>   char **pairs = similar_char_pairs;\n>   do {\n>     char *p = *pairs;\n>     if ((c1 == p[0] && c2 == p[1]) ||\n>         (c1 == p[1] && c2 == p[0]))\n>       return true;\n>   } while (*++pairs);\n>\n>   return false;\n> }\n>\n> bool print_words_if_similar(char *word1, char *word2)\n> {\n>   /* reject words of different lengths */\n>   if (strlen(word1) != strlen(word2))\n>     return false;\n>\n>   size_t i, similarcount = 0;\n>\n>   for (i = 0; i < strlen(word1); i++) {\n>     /* skip identical letters */\n>     if (word1[i] == word2[i])\n>       continue;\n>\n>     /* reject words that don't match */\n>     if (is_similar_char(word1[i], word2[i]) == false)\n>       return false;\n>\n>     similarcount++;\n>   }\n>\n>   /* reject words with more than 1 different letter */\n>   //if (similarcount > 1)\n>   //  return false;\n>\n>   printf(\"%s %s\\n\", word1, word2);\n>\n>   return true;\n> }\n>\n> int main(void)\n> {\n>   /* english.txt is assumed to exist in the working directory\n>      download from:\n>      https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt */\n>   FILE* f = fopen(\"english.txt\", \"r\");\n>   if (!f) {\n>     fprintf(stderr, \"failed to open english.txt\\n\");\n>     return 1;\n>   }\n>\n>   /* read in word list, assumes one word per line */\n>   #define MAXWORD 16\n>   char wordlist[2048][MAXWORD];\n>   int word = 0;\n>   while (fgets(wordlist[word], MAXWORD, f)) {\n>     /* strip trailing whitespace, assumes no leading whitespace */\n>     char *ch = strpbrk(wordlist[word], \" \\n\\t\");\n>     if (ch)\n>       *ch = '\\0';\n>     word++;\n>   }\n>\n>   if (word != 2048) {\n>     fprintf(stderr, \"word list incorrect length\\n\");\n>     return 1;\n>   }\n>\n>   /* check each word for similarity against every other word */\n>   int i, j, count = 0;\n>   for (i = 0; i < 2048; i++) {\n>     for (j = i+1; j < 2048; j++) {\n>       if (print_words_if_similar(wordlist[i], wordlist[j]))\n>         count++;\n>     }\n>   }\n>\n>   printf(\"%d matches\\n\", count);\n>\n>   return 0;\n> }\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2013-10-19T10:11:26",
                "message_text_only": "On 19/10/13 01:58, Gregory Maxwell wrote:\n> https://people.xiph.org/~greg/wordlist.visual.py\n\n>> I've included the search utility I used below.\n\nYeah, there are lots of tools on the Internet. Posting links to them is\nnot helping. Sending pull requests with particular changesets with\nexplanation is. Well, or rather was. I think we are past the point where\nit was wise to introduce changes to the word list ... (especially when\n50 people have 51 different opinions on this topic)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "slush",
                "date": "2013-10-24T13:26:32",
                "message_text_only": "I've just pushed updated wordlist which is filtered to similar characters\ntaken from this matrix.\n\nBIP39 now consider following character pairs as similar:\n\n        similar = (\n            ('a', 'c'), ('a', 'e'), ('a', 'o'),\n            ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),\n            ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),\n('c', 'u'),\n            ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),\n            ('e', 'f'), ('e', 'o'),\n            ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),\n            ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),\n            ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),\n            ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),\n            ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),\n            ('k', 'x'),\n            ('l', 't'),\n            ('m', 'n'), ('m', 'w'),\n            ('n', 'u'), ('n', 'z'),\n            ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),\n            ('p', 'q'), ('p', 'r'),\n            ('q', 'y'),\n            ('s', 'z'),\n            ('u', 'v'), ('u', 'w'), ('u', 'y'),\n            ('v', 'w'), ('v', 'y')\n        )\n\nFeel free to review and comment current wordlist, but I think we're slowly\nmoving forward final list.\n\nslush\n\n\nOn Sat, Oct 19, 2013 at 1:58 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> some fairly old wordlist solver code of mine:\n>\n> https://people.xiph.org/~greg/wordlist.visual.py\n>\n> it has a 52x52 letter visual similarity matrix in it (along with a\n> citation)\n>\n> On Fri, Oct 18, 2013 at 4:52 PM, jan <jan.marecek at gmail.com> wrote:\n> >\n> > The words 'public', 'private' and 'secret' could be confusing when\n> > encoding public and private keys. eg. a private key that begins with\n> > the word 'public'.\n> >\n> > I think avoiding words that could look similar when written down would\n> > be a good idea aswell. I searched for words that only differ by the\n> > letters c & e, g & y, u & v and found the following:\n> >\n> > car ear\n> > cat eat\n> > gear year\n> > value valve\n> >\n> > Other combinations could potentially be problematic depending on the\n> > handwriting style: ft, ao, ij, vy, possibly even lt and il?\n> >\n> > I've included the search utility I used below.\n> >\n> >\n> > #include <stdbool.h>\n> > #include <string.h>\n> > #include <stdio.h>\n> >\n> > char *similar_char_pairs[] = { \"ce\", \"gy\", \"uv\", NULL };\n> >\n> > bool is_similar_char(char c1, char c2)\n> > {\n> >   char **pairs = similar_char_pairs;\n> >   do {\n> >     char *p = *pairs;\n> >     if ((c1 == p[0] && c2 == p[1]) ||\n> >         (c1 == p[1] && c2 == p[0]))\n> >       return true;\n> >   } while (*++pairs);\n> >\n> >   return false;\n> > }\n> >\n> > bool print_words_if_similar(char *word1, char *word2)\n> > {\n> >   /* reject words of different lengths */\n> >   if (strlen(word1) != strlen(word2))\n> >     return false;\n> >\n> >   size_t i, similarcount = 0;\n> >\n> >   for (i = 0; i < strlen(word1); i++) {\n> >     /* skip identical letters */\n> >     if (word1[i] == word2[i])\n> >       continue;\n> >\n> >     /* reject words that don't match */\n> >     if (is_similar_char(word1[i], word2[i]) == false)\n> >       return false;\n> >\n> >     similarcount++;\n> >   }\n> >\n> >   /* reject words with more than 1 different letter */\n> >   //if (similarcount > 1)\n> >   //  return false;\n> >\n> >   printf(\"%s %s\\n\", word1, word2);\n> >\n> >   return true;\n> > }\n> >\n> > int main(void)\n> > {\n> >   /* english.txt is assumed to exist in the working directory\n> >      download from:\n> >\n> https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt*/\n> >   FILE* f = fopen(\"english.txt\", \"r\");\n> >   if (!f) {\n> >     fprintf(stderr, \"failed to open english.txt\\n\");\n> >     return 1;\n> >   }\n> >\n> >   /* read in word list, assumes one word per line */\n> >   #define MAXWORD 16\n> >   char wordlist[2048][MAXWORD];\n> >   int word = 0;\n> >   while (fgets(wordlist[word], MAXWORD, f)) {\n> >     /* strip trailing whitespace, assumes no leading whitespace */\n> >     char *ch = strpbrk(wordlist[word], \" \\n\\t\");\n> >     if (ch)\n> >       *ch = '\\0';\n> >     word++;\n> >   }\n> >\n> >   if (word != 2048) {\n> >     fprintf(stderr, \"word list incorrect length\\n\");\n> >     return 1;\n> >   }\n> >\n> >   /* check each word for similarity against every other word */\n> >   int i, j, count = 0;\n> >   for (i = 0; i < 2048; i++) {\n> >     for (j = i+1; j < 2048; j++) {\n> >       if (print_words_if_similar(wordlist[i], wordlist[j]))\n> >         count++;\n> >     }\n> >   }\n> >\n> >   printf(\"%d matches\\n\", count);\n> >\n> >   return 0;\n> > }\n> >\n> >\n> ------------------------------------------------------------------------------\n> > October Webinars: Code for Performance\n> > Free Intel webinars can help you accelerate application performance.\n> > Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> > the latest Intel processors and coprocessors. See abstracts and register\n> >\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/a07dd6b6/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-10-23T00:56:57",
                "message_text_only": "I think this is a good idea; I just pushed new unit test test_similarity()\nto github which finds such similar words. Right now it identifies ~90\nsimilar pairs in current wordlist, I'll update wordlist tomorrow to pass\nthis test.\n\nslush\n\nOn Sat, Oct 19, 2013 at 1:52 AM, jan <jan.marecek at gmail.com> wrote:\n\n>\n> I think avoiding words that could look similar when written down would\n> be a good idea aswell. I searched for words that only differ by the\n> letters c & e, g & y, u & v and found the following:\n>\n> car ear\n> cat eat\n> gear year\n> value valve\n>\n> Other combinations could potentially be problematic depending on the\n> handwriting style: ft, ao, ij, vy, possibly even lt and il?\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/0b80db54/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP39 word list",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "jan",
                "Pavol Rusnak",
                "Gregory Maxwell",
                "slush"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 13687
        }
    },
    {
        "title": "[Bitcoin-development] A critique of bitcoin open source community",
        "thread_messages": [
            {
                "author": "Mitar",
                "date": "2013-10-19T16:38:30",
                "message_text_only": "Hi!\n\nInteresting read:\n\nhttp://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html\n\n\nMitar\n\n-- \nhttp://mitar.tnode.com/\nhttps://twitter.com/mitar_m"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-10-19T16:50:25",
                "message_text_only": "On 19 October 2013 18:38, Mitar <mmitar at gmail.com> wrote:\n\n> Hi!\n>\n> Interesting read:\n>\n>\n> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html\n>\n\nIm sympathetic to some of the points, but it seems slightly harsh.  I do\nagree that we're lucky to have the excellent leadership of Gavin, who I\nthink is a great role model.\n\nPerhaps the bitcoin community is at a size where it may benefit from a\nloose code of conduct.  The ubuntu code of conduct has been excellent in\nthis respect, in helping to grow that community:\n\nhttp://www.ubuntu.com/about/about-ubuntu/conduct\n\n[[\n\nUbuntu Code of Conduct v2.0\nCommunity\n\nUbuntu is about showing humanity to one another: the word itself captures\nthe spirit of being human.\n\nWe want a productive, happy and agile community that can welcome new ideas\nin a complex field, improve every process every year, and foster\ncollaboration between groups with very different needs, interests and\nskills.\n\nWe gain strength from diversity, and actively seek participation from those\nwho enhance it. This code of conduct exists to ensure that diverse groups\ncollaborate to mutual advantage and enjoyment. We will challenge prejudice\nthat could jeopardise the participation of any person in the project.\n\nThe Code of Conduct governs how we behave in public or in private whenever\nthe project will be judged by our actions. We expect it to be honored by\neveryone who represents the project officially or informally, claims\naffiliation with the project, or participates directly.\nWe strive to:\n\nBe considerate\n\nOur work will be used by other people, and we in turn will depend on the\nwork of others. Any decision we take will affect users and colleagues, and\nwe should consider them when making decisions.\n\nBe respectful\n\nDisagreement is no excuse for poor manners. We work together to resolve\nconflict, assume good intentions and do our best to act in an empathic\nfashion. We don't allow frustration to turn into a personal attack. A\ncommunity where people feel uncomfortable or threatened is not a productive\none.\n\nTake responsibility for our words and our actions\n\nWe can all make mistakes; when we do, we take responsibility for them. If\nsomeone has been harmed or offended, we listen carefully and respectfully,\nand work to right the wrong.\n\nBe collaborative\n\nWhat we produce is a complex whole made of many parts, it is the sum of\nmany dreams. Collaboration between teams that each have their own goal and\nvision is essential; for the whole to be more than the sum of its parts,\neach part must make an effort to understand the whole.\n\nCollaboration reduces redundancy and improves the quality of our work.\nInternally and externally, we celebrate good collaboration. Wherever\npossible, we work closely with upstream projects and others in the free\nsoftware community to coordinate our efforts. We prefer to work\ntransparently and involve interested parties as early as possible.\n\nValue decisiveness, clarity and consensus\n\nDisagreements, social and technical, are normal, but we do not allow them\nto persist and fester leaving others uncertain of the agreed direction.\n\nWe expect participants in the project to resolve disagreements\nconstructively. When they cannot, we escalate the matter to structures with\ndesignated leaders to arbitrate and provide clarity and direction.\n\nAsk for help when unsure\n\nNobody is expected to be perfect in this community. Asking questions early\navoids many problems later, so questions are encouraged, though they may be\ndirected to the appropriate forum. Those who are asked should be responsive\nand helpful.\n\nStep down considerately\n\nWhen somebody leaves or disengages from the project, we ask that they do so\nin a way that minimises disruption to the project. They should tell people\nthey are leaving and take the proper steps to ensure that others can pick\nup where they left off.\nLeadership, authority and responsibility\n\nWe all lead by example, in debate and in action. We encourage new\nparticipants to feel empowered to lead, to take action, and to experiment\nwhen they feel innovation could improve the project. Leadership can be\nexercised by anyone simply by taking action, there is no need to wait for\nrecognition when the opportunity to lead presents itself.\nDelegation from the top\n\nResponsibility for the project starts with the \"benevolent dictator\", who\ndelegates specific responsibilities and the corresponding authority to a\nseries of teams, councils and individuals, starting with the Community\nCouncil (\"CC\"). That Council or its delegated representative will arbitrate\nin any dispute.\n\nWe are a meritocracy; we delegate decision making, governance and\nleadership from senior bodies to the most able and engaged candidates.\nSupport for delegation is measured\n\nNominations to the boards and councils are at the discretion of the\nCommunity Council, however the Community Council will seek the input of the\ncommunity before confirming appointments.\n\nLeadership is not an award, right, or title; it is a privilege, a\nresponsibility and a mandate. A leader will only retain their authority as\nlong as they retain the support of those who delegated that authority to\nthem.\nWe value discussion, data and decisiveness\n\nWe gather opinions, data and commitments from concerned parties before\ntaking a decision. We expect leaders to help teams come to a decision in a\nreasonable time, to seek guidance or be willing to take the decision\nthemselves when consensus is lacking, and to take responsibility for\nimplementation.\n\nThe poorest decision of all is no decision: clarity of direction has value\nin itself. Sometimes all the data are not available, or consensus is\nelusive. A decision must still be made. There is no guarantee of a perfect\ndecision every time - we prefer to err, learn, and err less in future than\nto postpone action indefinitely.\n\nWe recognise that the project works better when we trust the teams closest\nto a problem to make the decision for the project. If we learn of a\ndecision that we disagree with, we can engage the relevant team to find\ncommon ground, and failing that, we have a governance structure that can\nreview the decision. Ultimately, if a decision has been taken by the people\nresponsible for it, and is supported by the project governance, it will\nstand. None of us expects to agree with every decision, and we value highly\nthe willingness to stand by the project and help it deliver even on the\noccasions when we ourselves may prefer a different route.\nOpen meritocracy\n\nWe invite anybody, from any company, to participate in any aspect of the\nproject. Our community is open, and any responsibility can be carried by\nany contributor who demonstrates the required capacity and competence.\nTeamwork\n\nA leader's foremost goal is the success of the team.\n\n\"A virtuoso is judged by their actions; a leader is judged by the actions\nof their team.\" A leader knows when to act and when to step back. They know\nwhen to delegate work, and when to take it upon themselves.\nCredit\n\nA good leader does not seek the limelight, but celebrates team members for\nthe work they do. Leaders may be more visible than members of the team,\ngood ones use that visibility to highlight the great work of others.\nCourage and considerateness\n\nLeadership occasionally requires bold decisions that will not be widely\nunderstood, consensual or popular. We value the courage to take such\ndecisions, because they enable the project as a whole to move forward\nfaster than we could if we required complete consensus. Nevertheless,\nboldness demands considerateness; take bold decisions, but do so mindful of\nthe challenges they present for others, and work to soften the impact of\nthose decisions on them. Communicating changes and their reasoning clearly\nand early on is as important as the implementation of the change itself.\nConflicts of interest\n\nWe expect leaders to be aware when they are conflicted due to employment or\nother projects they are involved in, and abstain or delegate decisions that\nmay be seen to be self-interested. We expect that everyone who participates\nin the project does so with the goal of making life better for its users.\n\nWhen in doubt, ask for a second opinion. Perceived conflicts of interest\nare important to address; as a leader, act to ensure that decisions are\ncredible even if they must occasionally be unpopular, difficult or\nfavourable to the interests of one group over another.\n\nThis Code is not exhaustive or complete. It is not a rulebook; it serves to\ndistill our common understanding of a collaborative, shared environment and\ngoals. We expect it to be followed in spirit as much as in the letter.\n\nThe Ubuntu Code of Conduct is licensed under the Creative Commons\nAttribution-Share Alike 3.0 license. You may re-use it for your own\nproject, and modify it as you wish, just please allow others to use your\nmodifications and give credit to the Ubuntu Project!\n\n]]\n\n\n>\n>\n> Mitar\n>\n> --\n> http://mitar.tnode.com/\n> https://twitter.com/mitar_m\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/c6a2e96a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-19T20:40:10",
                "message_text_only": "On Sat, Oct 19, 2013 at 9:38 AM, Mitar <mmitar at gmail.com> wrote:\n> Hi!\n> Interesting read:\n> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html\n\nHopefully Nick will show up someplace and offer some specific pointers\nto where we failed him.\n\nThe only interaction I can find from him on IRC is in #bitcoin, rather\nthan #bitcoin-dev:\n\n--- Day changed Mon Sep 16 2013\n11:45 < csmpls> Hi, I'm interested in contributing to the official\nbitcoin project. Is there a mailing list I can join?\n11:46 < neo2> csmpls, contributing how?\n11:47 < csmpls> neo2 - probably start by approaching a low priority\nissue like this one https://github.com/bitcoin/bitcoin/issues/2545\n11:48 < michagogo> csmpls: There *is* a mailing list\n11:48 < michagogo> ;;google bitcoin-dev mailing list\n11:48 <@gribble> SourceForge.net: Bitcoin: bitcoin-development:\n<http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development>;\nBitcoin-development Info\n11:48 < csmpls> Great, thanks.\n11:48 < michagogo> I don't know how active it is, though\n11:49 < michagogo> There's also the #bitcoin-dev channel\n\nI got involved with Bitcoin without previously interacting with other\ncontributors (AFAIK) and maybe things have changed in ways invisibly\nto me. But I don't think so. Michagogo, who was answering there, is a\nnewer participant and I don't think anyone knows him from anywhere.\nCertainly if things have become less welcome to new participants that\nwould be bad.\n\nI can point out a number of other recent contributors who, as far as I\ncan tell, just showed up and stared contributing.  But I don't think\nthat the existence of exceptions is sufficiently strong evidence that\nthere isn't a problem.\n\nThe specific complaints I can extract from that article are:\n\n\"I wasn't even allowed to edit the wiki\"\n\nI'm confused about this, if he's referring to en.bitcoin.it.  Editing\nit is open to anyone who is willing to pay the 0.01\n(https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't\na policy set by the bitcoin development community, though I'm not sure\nthat its a terrible one. I've both paid it on behalf of other users\nand made edits on behalf of people who didn't want to go to it.  At\nleast relative to some policy which requires actual approval the\npayment antispam is at least open to anyone with Bitcoin.\n\n\"My IRC questions about issues on the github page were never answered\"\n\nWithout a nick I'm unable to find more than the above, unfortunately.\nSo I don't yet know what we need to improve there.\n\n\"#bitcoin-dev would rather talk about conspiracies, or about\ndestroying other cryptocurrencies\"\n\nI've been pretty aggressive about punting out offtopic conversation\nfrom #bitcoin-dev lately. Enough that I worried that my actions would\nbe the inspiration for this complaint. Much of the time discussion\nlike that is brought in and primarily continued by people who are not\nactive in the development community at all, but deflecting it to other\nchallenge without creating a hostile environment (or one that merely\nfeels hostile to new people) is hard.  Nicks comments themselves may\nbe a useful thing for me to show to people in the future on that\npoint.\n\n\"Bitcoiners are a bunch of paranoid, anti-authoritarian nutjobs\"\n\nI actually don't think that this stereotype accurately reflects the\ndevelopment community. (In fact, I personally enjoy the great sport of\nbeing called a statist by some of these aformentioned jutjobs, but\nnone of them are developers). On his other article Nick also asserts\n\"Most contributors hide their identities\", but this is factually\nuntrue as far as I can tell. (In that same article he writes,\n\"Bitcoin's core code is written in Typescript, which is compiled into\nC++\"\u2026)\n\n\"I looked at the many items sitting in pull request purgatory\"\n\nMany of the long standing pull requests are actually created by people\nwith direct commit access.  We use a model which has a relatively long\npipeline, a fact which I think is justified by the safety\ncriticialness of the software and our current shortages of active\nreview. Hopefully long term motion towards increased codebase\nmodularity will allow faster merging of \"safe\" changes.\n\nBut I suspect there will always be a backlog, at least of \"unsafe\" changes.\n\nWhich brings me to,\n\n\"I didn't even know what I had to do\"\n\nAbove all, I think the most important takeaway from this is that we\nneed to have better introductory materials.\n\nOne obvious place to put them would be\nhttp://bitcoin.org/en/development  but the IRC question makes me\nbelieve that Nick hadn't actually found that page, it's a little\nburied."
            },
            {
                "author": "Mitar",
                "date": "2013-10-19T21:09:09",
                "message_text_only": "Hi!\n\nGregory, thank you for your time and answers. Just maybe to clarify\nwhere Nick is coming from, there are two previous articles:\n\nhttp://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign1.html\nhttp://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign2.html\n\n\nMitar\n\nOn Sat, Oct 19, 2013 at 1:40 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Sat, Oct 19, 2013 at 9:38 AM, Mitar <mmitar at gmail.com> wrote:\n>> Hi!\n>> Interesting read:\n>> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html\n>\n> Hopefully Nick will show up someplace and offer some specific pointers\n> to where we failed him.\n>\n> The only interaction I can find from him on IRC is in #bitcoin, rather\n> than #bitcoin-dev:\n>\n> --- Day changed Mon Sep 16 2013\n> 11:45 < csmpls> Hi, I'm interested in contributing to the official\n> bitcoin project. Is there a mailing list I can join?\n> 11:46 < neo2> csmpls, contributing how?\n> 11:47 < csmpls> neo2 - probably start by approaching a low priority\n> issue like this one https://github.com/bitcoin/bitcoin/issues/2545\n> 11:48 < michagogo> csmpls: There *is* a mailing list\n> 11:48 < michagogo> ;;google bitcoin-dev mailing list\n> 11:48 <@gribble> SourceForge.net: Bitcoin: bitcoin-development:\n> <http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development>;\n> Bitcoin-development Info\n> 11:48 < csmpls> Great, thanks.\n> 11:48 < michagogo> I don't know how active it is, though\n> 11:49 < michagogo> There's also the #bitcoin-dev channel\n>\n> I got involved with Bitcoin without previously interacting with other\n> contributors (AFAIK) and maybe things have changed in ways invisibly\n> to me. But I don't think so. Michagogo, who was answering there, is a\n> newer participant and I don't think anyone knows him from anywhere.\n> Certainly if things have become less welcome to new participants that\n> would be bad.\n>\n> I can point out a number of other recent contributors who, as far as I\n> can tell, just showed up and stared contributing.  But I don't think\n> that the existence of exceptions is sufficiently strong evidence that\n> there isn't a problem.\n>\n> The specific complaints I can extract from that article are:\n>\n> \"I wasn't even allowed to edit the wiki\"\n>\n> I'm confused about this, if he's referring to en.bitcoin.it.  Editing\n> it is open to anyone who is willing to pay the 0.01\n> (https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't\n> a policy set by the bitcoin development community, though I'm not sure\n> that its a terrible one. I've both paid it on behalf of other users\n> and made edits on behalf of people who didn't want to go to it.  At\n> least relative to some policy which requires actual approval the\n> payment antispam is at least open to anyone with Bitcoin.\n>\n> \"My IRC questions about issues on the github page were never answered\"\n>\n> Without a nick I'm unable to find more than the above, unfortunately.\n> So I don't yet know what we need to improve there.\n>\n> \"#bitcoin-dev would rather talk about conspiracies, or about\n> destroying other cryptocurrencies\"\n>\n> I've been pretty aggressive about punting out offtopic conversation\n> from #bitcoin-dev lately. Enough that I worried that my actions would\n> be the inspiration for this complaint. Much of the time discussion\n> like that is brought in and primarily continued by people who are not\n> active in the development community at all, but deflecting it to other\n> challenge without creating a hostile environment (or one that merely\n> feels hostile to new people) is hard.  Nicks comments themselves may\n> be a useful thing for me to show to people in the future on that\n> point.\n>\n> \"Bitcoiners are a bunch of paranoid, anti-authoritarian nutjobs\"\n>\n> I actually don't think that this stereotype accurately reflects the\n> development community. (In fact, I personally enjoy the great sport of\n> being called a statist by some of these aformentioned jutjobs, but\n> none of them are developers). On his other article Nick also asserts\n> \"Most contributors hide their identities\", but this is factually\n> untrue as far as I can tell. (In that same article he writes,\n> \"Bitcoin's core code is written in Typescript, which is compiled into\n> C++\"\u2026)\n>\n> \"I looked at the many items sitting in pull request purgatory\"\n>\n> Many of the long standing pull requests are actually created by people\n> with direct commit access.  We use a model which has a relatively long\n> pipeline, a fact which I think is justified by the safety\n> criticialness of the software and our current shortages of active\n> review. Hopefully long term motion towards increased codebase\n> modularity will allow faster merging of \"safe\" changes.\n>\n> But I suspect there will always be a backlog, at least of \"unsafe\" changes.\n>\n> Which brings me to,\n>\n> \"I didn't even know what I had to do\"\n>\n> Above all, I think the most important takeaway from this is that we\n> need to have better introductory materials.\n>\n> One obvious place to put them would be\n> http://bitcoin.org/en/development  but the IRC question makes me\n> believe that Nick hadn't actually found that page, it's a little\n> buried.\n\n\n\n-- \nhttp://mitar.tnode.com/\nhttps://twitter.com/mitar_m"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-19T21:16:24",
                "message_text_only": "On 2013-10-19, at 1:40 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n> \"I wasn't even allowed to edit the wiki\"\n> \n> I'm confused about this, if he's referring to en.bitcoin.it.  Editing\n> it is open to anyone who is willing to pay the 0.01\n> (https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't\n> a policy set by the bitcoin development community, though I'm not sure\n> that its a terrible one. I've both paid it on behalf of other users\n> and made edits on behalf of people who didn't want to go to it.  At\n> least relative to some policy which requires actual approval the\n> payment antispam is at least open to anyone with Bitcoin.\n\n\nI have a question regarding this part. I wrote a BIP for base 58 encoding / encryption of BIP 32 root keys. The BIP page states that we shouldn't add to this list ourselves, but should contact you for a BIP number. I have contacted you a couple times on bitcointalk for a BIP number, but haven't received a response (or do those requests explicitly have to go to your email address)? \n\nProposal in question: https://bitcointalk.org/index.php?topic=258678.0\n\n\nCheers,\n\njp\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/198c2b9c/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-19T22:29:19",
                "message_text_only": "On Saturday, October 19, 2013 9:16:24 PM Jean-Paul Kogelman wrote:\n> I have a question regarding this part. I wrote a BIP for base 58 encoding /\n> encryption of BIP 32 root keys. The BIP page states that we shouldn't add\n> to this list ourselves, but should contact you for a BIP number. I have\n> contacted you a couple times on bitcointalk for a BIP number, but haven't\n> received a response (or do those requests explicitly have to go to your\n> email address)?\n\nSee BIP 1 for the process.. proposals go to this mailing list first.\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-19T23:20:59",
                "message_text_only": "On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:\n> See BIP 1 for the process.. proposals go to this mailing list first.\n\nFWIW, he did post to the mailing list and he got an underwhelming response:\n\nhttp://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development\n\nWhen I responded to him on BCT I said \"I was about to suggest you hit\nthe mailing list for some initial comments first\u2014 but I see you've\ndone that. I'll issue a number in a couple days once there has been a\nlittle chance for some discussion.\".\n\nSince much discussion didn't materialize I went and gave it a\ntechnical once over, posting to the forum.  In hindsight, I probably\nshould have also posted my review to the mailing list, which might\nhave served to restart some additional discussion."
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-19T23:35:13",
                "message_text_only": "On 2013-10-19, at 4:20 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> See BIP 1 for the process.. proposals go to this mailing list first.\n> \n> FWIW, he did post to the mailing list and he got an underwhelming response:\n> \n> http://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development\n\nAlthough I agree that the number of responses on the mailing list was minimal, they were overall positive. Mike voiced concerns about not having a date field to limit the rescan when importing, but other than that, most of the discussion was on bitcointalk. I've made a number of revisions, trying to incorporate the suggestions that were given. Obviously this doesn't mean that the draft is final (specifically the KDF's that can be used is still up for debate and having 29 undefined ID's means it's reasonably future proof).\n\nHaving it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.\n\n\njp\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/995fc3a3/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-19T23:57:46",
                "message_text_only": "On Sat, Oct 19, 2013 at 04:35:13PM -0700, Jean-Paul Kogelman wrote:\n> > On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:\n> >> See BIP 1 for the process.. proposals go to this mailing list first.\n> > \n> > FWIW, he did post to the mailing list and he got an underwhelming response:\n> > \n> > http://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development\n> \n> Although I agree that the number of responses on the mailing list was minimal, they were overall positive. Mike voiced concerns about not having a date field to limit the rescan when importing, but other than that, most of the discussion was on bitcointalk. I've made a number of revisions, trying to incorporate the suggestions that were given. Obviously this doesn't mean that the draft is final (specifically the KDF's that can be used is still up for debate and having 29 undefined ID's means it's reasonably future proof).\n> \n> Having it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.\n\nHaving it on the BIP page *does* make it more official, at least the way\nwe've been using the BIP page, which is to filter out the proposals that\nhaven't gotten much support at all. (or maybe are just controversial)\n\nFWIW I myself haven't pushed hard for getting an \"official\" BIP number\nfor my draft NODE_BLOOM BIP, even though I've got support from most of\nthe dev team on the pull-request:\nhttps://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point\nwhere I could get one assigned - Litecoin for instance has made that\nchange - but really I just see that as a formality; that it's still a\ncontroversial idea is much more relevant.\n\nIn any case I don't see any working code in your email, I'd suggest\nwriting some. You're BIP would be much more likely to be accepted if you\nwere more involved in wallet development.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000ad5e0cbc9438203b9cf2dcae776774f59575e38fcefa802ed\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/535a9a14/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-20T00:52:49",
                "message_text_only": ">> Having it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.\n> \n> Having it on the BIP page *does* make it more official, at least the way\n> we've been using the BIP page, which is to filter out the proposals that\n> haven't gotten much support at all. (or maybe are just controversial)\n\nInteresting. The main reason I wrote my proposal was because the only proposal that came close to covering the same area was BIP 39, which at that time had 2 paragraphs of text (although admittedly did link to a text file off site where the draft was being developed). And currently there are 2 proposals that have numbers allocated but are empty (BIP 40 and 41) with no references to the development or discussion.\n\nI appreciate the fact that acceptance of proposals on the BIP page are more strict, but it may be desirable to have the enforcement be more uniform. Also, BIP 38 is gaining more acceptance out in the community (many sites support the import of these keys and a growing number of paper wallet sites / coin / card vendors are offering it as an option), yet it's still missing from the BIP list, which seems to me a bit counter to the arguments given about community acceptance.\n\n> FWIW I myself haven't pushed hard for getting an \"official\" BIP number\n> for my draft NODE_BLOOM BIP, even though I've got support from most of\n> the dev team on the pull-request:\n> https://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point\n> where I could get one assigned - Litecoin for instance has made that\n> change - but really I just see that as a formality; that it's still a\n> controversial idea is much more relevant.\n\n\n> In any case I don't see any working code in your email, I'd suggest\n> writing some. You're BIP would be much more likely to be accepted if you\n> were more involved in wallet development.\n\nGood point. I'm developing my own client (which has the code up and running, with unit tests), but I'm not ready to release it just yet until I've got all the client's alpha features working. Would putting contact information there so people can ask for the relevant code be sufficient until I have my client up on github?\n\n\njp\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/237fe29a/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-20T22:43:16",
                "message_text_only": "On Sat, Oct 19, 2013 at 05:52:49PM -0700, Jean-Paul Kogelman wrote:\n> Interesting. The main reason I wrote my proposal was because the only proposal that came close to covering the same area was BIP 39, which at that time had 2 paragraphs of text (although admittedly did link to a text file off site where the draft was being developed). And currently there are 2 proposals that have numbers allocated but are empty (BIP 40 and 41) with no references to the development or discussion.\n> \n> I appreciate the fact that acceptance of proposals on the BIP page are more strict, but it may be desirable to have the enforcement be more uniform. Also, BIP 38 is gaining more acceptance out in the community (many sites support the import of these keys and a growing number of paper wallet sites / coin / card vendors are offering it as an option), yet it's still missing from the BIP list, which seems to me a bit counter to the arguments given about community acceptance.\n\nNo, that just means the authors of BIP 38 know community acceptance is\nthe most important thing; BIP numbers are secondary.\n\nFWIW I think that BIP's should have been done as a github repository,\nallowing for dealing with this stuff transparently as a pull-request.\nIt'd also be useful to handle BIP's that way to make it easy to archive\nthem, update them, and keep a log of what and why they were updated.\nJust put them in markdown format, which is pretty much feature\nequivalent to the wiki now that markdown supports images.\n\n> > FWIW I myself haven't pushed hard for getting an \"official\" BIP number\n> > for my draft NODE_BLOOM BIP, even though I've got support from most of\n> > the dev team on the pull-request:\n> > https://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point\n> > where I could get one assigned - Litecoin for instance has made that\n> > change - but really I just see that as a formality; that it's still a\n> > controversial idea is much more relevant.\n> \n> \n> > In any case I don't see any working code in your email, I'd suggest\n> > writing some. You're BIP would be much more likely to be accepted if you\n> > were more involved in wallet development.\n> \n> Good point. I'm developing my own client (which has the code up and running, with unit tests), but I'm not ready to release it just yet until I've got all the client's alpha features working. Would putting contact information there so people can ask for the relevant code be sufficient until I have my client up on github?\n\nNo, just put the client up on github. If you think actually using it is\ndangerous, just delibrately make it hard to use for people who shouldn't\nbe using it. Leave out compilation documentation for instance, or make\nit check that it's on testnet first and refuse to run if it isn't.\n\nPond for instance doesn't make binaries available:\nhttps://pond.imperialviolet.org/ IIRC only recently have they provided a\nmakefile.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000b647feda1820ad95b2ea9efb742e9087b022bd3d37530dc06\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/9bcede0e/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-20T23:11:43",
                "message_text_only": "On Sun, Oct 20, 2013 at 06:43:16PM -0400, Peter Todd wrote:\n> FWIW I think that BIP's should have been done as a github repository,\n> allowing for dealing with this stuff transparently as a pull-request.\n> It'd also be useful to handle BIP's that way to make it easy to archive\n> them, update them, and keep a log of what and why they were updated.\n> Just put them in markdown format, which is pretty much feature\n> equivalent to the wiki now that markdown supports images.\n\nFigures, I'm told that's exactly how they were first done -\nhttps://github.com/genjix/bips - only people found it inconvenient and\nused the wiki instead.\n\nPathetic IMO for standards, but it wouldn't exactly be the first time\nI've seen strong resistance to using revision control. (I quite\nliterally work with rocket scientists/satellite engineers who can't be\nconvinced to use it)\n\nI dunno, maybe something using git submodules or subtrees - letting the\nindividual BIP \"owners\" make changes frequently until they're happy -\nmight have more social acceptance.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000aff52788645172e4acca1d9fc9387ebe4074d9ce275273b44\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/1596ffc7/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-21T00:27:47",
                "message_text_only": "On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:\n> FWIW I think that BIP's should have been done as a github repository,\n> allowing for dealing with this stuff transparently as a pull-request.\n> It'd also be useful to handle BIP's that way to make it easy to archive\n> them, update them, and keep a log of what and why they were updated.\n> Just put them in markdown format, which is pretty much feature\n> equivalent to the wiki now that markdown supports images.\n\nAgreed -- let's do it.  I nominate you to do the conversion, and we'll\nput it up at github.com/bitcoin/bips.git.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-21T06:25:55",
                "message_text_only": "On Sun, Oct 20, 2013 at 08:27:47PM -0400, Jeff Garzik wrote:\n> On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:\n> > FWIW I think that BIP's should have been done as a github repository,\n> > allowing for dealing with this stuff transparently as a pull-request.\n> > It'd also be useful to handle BIP's that way to make it easy to archive\n> > them, update them, and keep a log of what and why they were updated.\n> > Just put them in markdown format, which is pretty much feature\n> > equivalent to the wiki now that markdown supports images.\n> \n> Agreed -- let's do it.  I nominate you to do the conversion, and we'll\n> put it up at github.com/bitcoin/bips.git.\n\nDone: https://github.com/petertodd/bips/\n\nGitHub supports MediaWiki these days, so just directly copying from\n'View Source' in the bitcoin.it wiki worked pretty well; I archived the\nexact text of BIP. Tables, images and math is all supported by github\nand look fine, although github doesn't seem to support coloration in\ntables. Users wishing to edit their pull-req's or create new ones can do\nso easily by forking the repository - they can see their changes as they\ngo in GitHub.\n\nI've probably missed some stuff re: formatting, and I haven't changed\nany of the submission guideline text in bip 1 yet, but that's probably\n90% of the work done.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000245a735ccc14b98552e152f773c07efa2e89dd7f0463f61cf\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/f953d505/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-21T06:40:26",
                "message_text_only": "I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? \n\nOn 2013-10-20, at 11:25 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Sun, Oct 20, 2013 at 08:27:47PM -0400, Jeff Garzik wrote:\n>> On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:\n>>> FWIW I think that BIP's should have been done as a github repository,\n>>> allowing for dealing with this stuff transparently as a pull-request.\n>>> It'd also be useful to handle BIP's that way to make it easy to archive\n>>> them, update them, and keep a log of what and why they were updated.\n>>> Just put them in markdown format, which is pretty much feature\n>>> equivalent to the wiki now that markdown supports images.\n>> \n>> Agreed -- let's do it.  I nominate you to do the conversion, and we'll\n>> put it up at github.com/bitcoin/bips.git.\n> \n> Done: https://github.com/petertodd/bips/\n> \n> GitHub supports MediaWiki these days, so just directly copying from\n> 'View Source' in the bitcoin.it wiki worked pretty well; I archived the\n> exact text of BIP. Tables, images and math is all supported by github\n> and look fine, although github doesn't seem to support coloration in\n> tables. Users wishing to edit their pull-req's or create new ones can do\n> so easily by forking the repository - they can see their changes as they\n> go in GitHub.\n> \n> I've probably missed some stuff re: formatting, and I haven't changed\n> any of the submission guideline text in bip 1 yet, but that's probably\n> 90% of the work done.\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 000000000000000245a735ccc14b98552e152f773c07efa2e89dd7f0463f61cf\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/6a8548ee/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-21T06:43:20",
                "message_text_only": "On Sun, Oct 20, 2013 at 11:40:26PM -0700, Jean-Paul Kogelman wrote:\n> \n> I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? \n\nSure, I think Jeff mentioned the idea of a specific drafts/ directory\nwithin the repository. (could also do a rejected/)\n\nLess of an issue in some ways when it's all in git - just point people\nto your bips fork.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000099eaa116fac83a2b0e097cae3391c794990e128c8e162d91a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/98811e75/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-21T06:52:45",
                "message_text_only": "How about putting them into sub directories that map onto the status of the BIP? \n\nReading BIP 1, that would make: \n\nAccepted\nActive\nDraft\nDeferred\nFinal\nRejected\nReplaced\nWithdrawn\n\nWould that place NODE_BLOOM and BIP 38 in Deferred?\n\n\nOn 2013-10-20, at 11:43 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Sun, Oct 20, 2013 at 11:40:26PM -0700, Jean-Paul Kogelman wrote:\n>> \n>> I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? \n> \n> Sure, I think Jeff mentioned the idea of a specific drafts/ directory\n> within the repository. (could also do a rejected/)\n> \n> Less of an issue in some ways when it's all in git - just point people\n> to your bips fork.\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 00000000000000099eaa116fac83a2b0e097cae3391c794990e128c8e162d91a\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/9af62985/attachment.sig>"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-21T07:03:55",
                "message_text_only": "On 21/10/13 08:52, Jean-Paul Kogelman wrote:\n> How about putting them into sub directories that map onto the status of the BIP?\n>\n> Reading BIP 1, that would make:\n>\n> Accepted\n> Active\n> Draft\n> Deferred\n> Final\n> Rejected\n> Replaced\n> Withdrawn\n\nHave it been considered to do this via IETF? The process there is \nhardened by 40 years of experience and 7000+ RFCs. Probably better than \nanything you can devise yourself.\n\nMartin"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-10-21T09:36:04",
                "message_text_only": "On 21 October 2013 09:03, Martin Sustrik <sustrik at 250bpm.com> wrote:\n\n> On 21/10/13 08:52, Jean-Paul Kogelman wrote:\n> > How about putting them into sub directories that map onto the status of\n> the BIP?\n> >\n> > Reading BIP 1, that would make:\n> >\n> > Accepted\n> > Active\n> > Draft\n> > Deferred\n> > Final\n> > Rejected\n> > Replaced\n> > Withdrawn\n>\n> Have it been considered to do this via IETF? The process there is\n> hardened by 40 years of experience and 7000+ RFCs. Probably better than\n> anything you can devise yourself.\n>\n\nIETF is great for some things.  I think the bitcoin URI scheme is being\nregistered with them.\n\nHowever the process can take many years to get to an RFC, for something\nrelatively simple, not to mention there can be costs too\n\nGiven that crypto currencies are a relatively new field, I am unsure the\nIETF has a wealth of expertise in this area, compared with the core devs\n\nMaybe IETF is better to standardize some of the communications or\nserialization components, but not so much the BIPs.  Or perhaps some of the\nBIPs can be written up as \"Informational\" rather than \"Proposed Standard\"\nin the RFC format, and reviewed\n\nI've followed quite a few FLOSS projects over the years.  Overall, I've\nbeen amazingly impressed with the BIP process (dont forget it's used in\nother systems too -- python?).  It seems an agile process, that strikes an\ngreat balance between needed features, and documentation.  I think that's\nexactly what will continue bitcoin's momentum in the short to medium term.\n\n\n>\n> Martin\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/1b8fd110/attachment.html>"
            },
            {
                "author": "Arto Bendiken",
                "date": "2013-10-21T09:44:08",
                "message_text_only": "On Mon, Oct 21, 2013 at 11:36 AM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n>\n> I've followed quite a few FLOSS projects over the years.  Overall, I've been\n> amazingly impressed with the BIP process (dont forget it's used in other\n> systems too -- python?).  It seems an agile process, that strikes an great\n> balance between needed features, and documentation.  I think that's exactly\n> what will continue bitcoin's momentum in the short to medium term.\n\nIndeed. The BIP analogs that immediately come to mind would be the\nenhancement proposal processes for Python, XMPP, and BitTorrent:\n\nhttp://www.python.org/dev/peps/\nhttp://xmpp.org/xmpp-protocols/xmpp-extensions/\nhttp://www.bittorrent.org/beps/bep_0000.html\n\n-- \nArto Bendiken | @bendiken | http://ar.to"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-21T09:49:02",
                "message_text_only": "On 2013-10-21, at 2:44 AM, Arto Bendiken <arto at bendiken.net> wrote:\n\n> \n> Indeed. The BIP analogs that immediately come to mind would be the\n> enhancement proposal processes for Python, XMPP, and BitTorrent:\n\nBitcoin's BIP process is directly based off of Python's PEP process. \n\nQuote from BIP 1, History:\n\nThis document was derived heavily from Python's PEP-0001. In many places text was simply copied and modified.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/327b7918/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/327b7918/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-10-21T10:21:27",
                "message_text_only": "I think it's great to move BIPs to github.\nI also agree with the states -> directories mapping.\nGit manages moved files well.\n\n\nOn 10/21/13, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>\n> On 2013-10-21, at 2:44 AM, Arto Bendiken <arto at bendiken.net> wrote:\n>\n>>\n>> Indeed. The BIP analogs that immediately come to mind would be the\n>> enhancement proposal processes for Python, XMPP, and BitTorrent:\n>\n> Bitcoin's BIP process is directly based off of Python's PEP process.\n>\n> Quote from BIP 1, History:\n>\n> This document was derived heavily from Python's PEP-0001. In many places\n> text was simply copied and modified.\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Wladimir",
                "date": "2013-10-20T10:00:43",
                "message_text_only": "On Sun, Oct 20, 2013 at 1:20 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> Since much discussion didn't materialize I went and gave it a\n> technical once over, posting to the forum.\n\n\nAt least I now understand where he got the idea of bitcoin devs being a\nbunch of paranoid, anti-authoritarian nutjobs :-) I've been on a lot of\nforums in my life but never encountered one with such selfish, unhelpful,\ntrolling, complaining sods (well maybe apart from 15-year old gamers).\n\nNick couldn't have got that idea from discussion on this mailing list or\n#bitcoin-dev. Please don't send anyone to that jungle. People shouldn't get\nthe idea that that the forum is our development community, or even endorsed\nby the devs.\n\nAs for the real developer community, I haven't noticed so much\nunfriendliness or closedness. But the core devs are with very few people\n(certainly compared to the number of users) and reviewing and testing takes\ntime so pull requests, proposals and such can linger for a while. Which can\nindeed be frustrating.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/e8f3e8eb/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-19T23:21:42",
                "message_text_only": "I submitted the proposal to the mailing list on July 19, 2003.\n\n \nOn 2013-10-19, at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Saturday, October 19, 2013 9:16:24 PM Jean-Paul Kogelman wrote:\n>> I have a question regarding this part. I wrote a BIP for base 58 encoding /\n>> encryption of BIP 32 root keys. The BIP page states that we shouldn't add\n>> to this list ourselves, but should contact you for a BIP number. I have\n>> contacted you a couple times on bitcointalk for a BIP number, but haven't\n>> received a response (or do those requests explicitly have to go to your\n>> email address)?\n> \n> See BIP 1 for the process.. proposals go to this mailing list first.\n> \n> Luke\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/1a0c4767/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-19T23:22:09",
                "message_text_only": "On 2013-10-19, at 4:21 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n\n> I submitted the proposal to the mailing list on July 19, 2003.\n\nThat would be 2013. sorry.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/9197f456/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-19T22:33:36",
                "message_text_only": "I was hoping to see something interesting and useful, but all I saw was\nabsurd ranting. Example quote:\n\nIt is not known where bitcoin contributors are based. Gavin Andersson, a\nmajor contributor, is a well-known South African\nanarchist/crypto-libertarian. Most contributors hide their identities.\nI don't know who this guy is or why anyone should care what he thinks, but\nI doubt any of us have time for someone who can't even be bothered spelling\nGavin's name correctly, thinks he is South African or would describe him as\nan anarchist.\n\nOpen source development can be intimidating and brutal at times, it's\nprobably one factor that causes the massive gender skew. But many pages\nhave been written on that topic, here is probably not the right place to\nthrash it out for the umpteenth time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/c2a1312e/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-21T07:07:53",
                "message_text_only": "The list comes from BIP 1.\n\nOn 2013-10-21, at 12:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n\n> On 21/10/13 08:52, Jean-Paul Kogelman wrote:\n>> How about putting them into sub directories that map onto the status of the BIP?\n>> \n>> Reading BIP 1, that would make:\n>> \n>> Accepted\n>> Active\n>> Draft\n>> Deferred\n>> Final\n>> Rejected\n>> Replaced\n>> Withdrawn\n> \n> Have it been considered to do this via IETF? The process there is hardened by 40 years of experience and 7000+ RFCs. Probably better than anything you can devise yourself.\n> \n> Martin\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/bce168ec/attachment.sig>"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-21T07:28:39",
                "message_text_only": "On 21/10/13 09:07, Jean-Paul Kogelman wrote:\n> The list comes from BIP 1.\n\nSorry, I haven't meant you personally. It was just a generic question \nabout using existing process instead of inventing a new one on the go.\n\n>> Have it been considered to do this via IETF? The process there is hardened by 40 years of experience and 7000+ RFCs. Probably better than anything you can devise yourself.\n>>\n>> Martin\n>"
            }
        ],
        "thread_summary": {
            "title": "A critique of bitcoin open source community",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Arto Bendiken",
                "Wladimir",
                "Mike Hearn",
                "Peter Todd",
                "Martin Sustrik",
                "Jean-Paul Kogelman",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Mitar",
                "Melvin Carvalho"
            ],
            "messages_count": 28,
            "total_messages_chars_count": 49939
        }
    },
    {
        "title": "[Bitcoin-development] Root key encoding / BIP process Was: A critique of bitcoin open source community",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-19T23:13:48",
                "message_text_only": "On Sat, Oct 19, 2013 at 2:16 PM, Jean-Paul Kogelman\n<jeanpaulkogelman at me.com> wrote:\n> I have a question regarding this part. I wrote a BIP for base 58 encoding / encryption of BIP 32 root keys. The BIP page states that we shouldn't add to this list ourselves, but should contact you for a BIP number. I have contacted you a couple times on bitcointalk for a BIP number, but haven't received a response (or do those requests explicitly have to go to your email address)?\n>\n> Proposal in question: https://bitcointalk.org/index.php?topic=258678.0\n\nI responded to you in PM on July 19, 2013, 05:57:15 PM.\n\nThen I followed up with a technical review after I didn't see much\nother technical review happening:\n\nhttps://bitcointalk.org/index.php?topic=258678.msg3128364#msg3128364\n\nWhich you responded to, correcting a few of my misunderstandings and\noffering to make changes to the specification to make it more clear\nand to correct a few of the limitations I pointed out.\n\nAt that point I put aside further action on your proposal waiting for\nyou to make those updates.\n\nThe reason to go through a serialization point for BIP numbers is to\navoid assigning them to things to people's pet ideas that haven't been\nreviewed by or represent any identifiable part of the Bitcoin\ncommunity. (After all: You're free to publish any specs at all on your\nown without a BIP. BIPs are not \"official\" but they should be stronger\nthan \"some guy says this\" if they are to mean anything).  I don't\ngenerally see my role in this process as acting as an approver, but\nrather just someone recognizing approval that already exists.\n\nGenerally I try not to assign numbers to things before I see evidence\nof discussion which I can reasonably expect to result in an \"community\noutcome\".  In some cases this means that I'll take up the role of\ngoing through and being a second set of eyes on the document myself\n(directly contributing to creating some community approval), as I did\nin this case.\n\nOn October 2nd, you followed up with\nhttps://bitcointalk.org/index.php?topic=258678.msg3287415#msg3287415\nindicating that you'd made the changes addressing my points.\n\nMy apologies, I missed this completely as I not working on Bitcoin\nthings pretty much at all during 09/26 to 10/13 due to other\nobligations. Thanks for your patience. Following up here was\nabsolutely the right thing to do if I'm dropping the ball.\n\nPieter, do you have any opinions to offer on this?  (Also, generally\nto the list. I'm singling out Pieter only because just asking \"anyone\"\nto comment tends to be less effective.)"
            }
        ],
        "thread_summary": {
            "title": "Root key encoding / BIP process Was: A critique of bitcoin open source community",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2567
        }
    },
    {
        "title": "[Bitcoin-development] Revisiting the BIPS process, a proposal",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-10-21T14:30:22",
                "message_text_only": "This summarizes some rambling on IRC about revising the BIPS process.\n\nRight now, the BIPS process is a bit haphazard.  Previously, BIPS were\nin a git repo, and the BIPS on the wiki were locked against editing.\nThe BIPS editor at the time started off well, but was eventually\nM.I.A.  So the BIPS \"home\" moved de facto to where everyone was\nreading them anyway, the wiki.  They were made editable, and it became\neasier to Just Pick A Number And Write One.  However, this inevitably\nbecame a bit disorganized.  Further, there was a recent incident --\neasily reverted -- where someone hopped on the wiki and started\narbitrarily editing an existing standard.\n\nBIPs need to move back to git, in my opinion.  Standards should be\nhash-sealed against corruption.  Anything less would be uncivilized,\nand un-bitcoin.  However, many on IRC pointed out requiring a git pull\nrequest might be a burdensome process, and discourage some\ncontributors.  The following is a sketch of an improved process.\n\n1) BIP Draft.\n\nModelled after IETF drafts.  Anybody may submit a BIP draft, as long\nas it meets two very loose requirements:\n* At least somewhat related to bitcoin.  Note, I did not say \"crypto-currency\".\n* Formatted similarly to existing BIPs (i.e. markdown, or whatever the\ncommunity prefers)\n\nBIP drafts may be submitted via git pull request, or by emailing an\nattachment to bips.editor at bitcoin.org.  This mirrors the Linux kernel\nchange submission process:  git is preferred, but there is always a\nnon-git method for folks who cannot or do not wish to use git or\ngithub.\n\nBIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\nare not automatically assigned a BIPS number.\n\n2) Time passes.  Software for BIP drafts is developed, tested,\npublished, and publicly discussed in a typical open source manner.\n\n3) If interest and use cases remain strong, a BIP number may be\nrequested, and the BIP draft is moved to\ngit://github.com/bitcoin/bips.git main directory.\n\n4) If there is general consensus that the BIP should be adopted, the\nBIP status is changed to \"accepted.\"\n\nThere are no specified time limits.  Sometimes consensus about a BIP\nis reached in days, sometimes 12+ months or more.  It varies widely\ndepending on the feature's complexity and impact.\n\nAs with the IETF, it will be q\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-21T14:34:06",
                "message_text_only": "Continuing.  (grumble gmail grumble)\n\nAs with the IETF, there will be a great many drafts that do not make\nit to BIPS status.  That is normal, and a sign of a healthy process.\n\nI'll volunteer as the BIPS editor.\n\nThere needs to be some backups with commit access to bips.git, in case\nthe BIPS editor is hit by a bus or goes crazy or on vacation.  This\ncan be some core devs, but I would like at least one or two folks who\nare not Satoshi-client devs on the list.  Maybe Andreas, Michael G,\nAlan R, and others working on non-Satoshi clients.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-10-21T15:46:47",
                "message_text_only": "On 10/21/2013 04:34 PM, Jeff Garzik wrote:\n\n> I'll volunteer as the BIPS editor.\n>\n> There needs to be some backups with commit access to bips.git, in case\n> the BIPS editor is hit by a bus or goes crazy or on vacation.  This\n> can be some core devs, but I would like at least one or two folks who\n> are not Satoshi-client devs on the list.  Maybe Andreas, Michael G,\n> Alan R, and others working on non-Satoshi clients.\n\nI accept the nomination as a backup (-:\n\nSo the duty of the editor is merging pull requests and/or proxying\nbetween email and git for those who do not use git?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-21T16:14:16",
                "message_text_only": "On Mon, Oct 21, 2013 at 11:46 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> I accept the nomination as a backup (-:\n\nCool.\n\n> So the duty of the editor is merging pull requests and/or proxying\n> between email and git for those who do not use git?\n\nCorrect.  And assigning BIP numbers.  Ideally a boring administrative\nposition.  :)\n\nThe main tensions will be in gauging whether there is sufficient\nconsensus and review to boost a draft into BIP/proposed status, and\nthen promoting a numbered BIP to the final/accepted status.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-21T17:17:20",
                "message_text_only": "Added:  I'm happy with gmaxwell as BIP editor as well, as he is\napparently the current BIP-number-assigner-in-chief.  :)\n\nThe goal is to improve the process, hash-seal our specs, and create an\neasy way for anyone with at least an email address to participate.\n\nOn Mon, Oct 21, 2013 at 10:30 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> This summarizes some rambling on IRC about revising the BIPS process.\n>\n> Right now, the BIPS process is a bit haphazard.  Previously, BIPS were\n> in a git repo, and the BIPS on the wiki were locked against editing.\n> The BIPS editor at the time started off well, but was eventually\n> M.I.A.  So the BIPS \"home\" moved de facto to where everyone was\n> reading them anyway, the wiki.  They were made editable, and it became\n> easier to Just Pick A Number And Write One.  However, this inevitably\n> became a bit disorganized.  Further, there was a recent incident --\n> easily reverted -- where someone hopped on the wiki and started\n> arbitrarily editing an existing standard.\n>\n> BIPs need to move back to git, in my opinion.  Standards should be\n> hash-sealed against corruption.  Anything less would be uncivilized,\n> and un-bitcoin.  However, many on IRC pointed out requiring a git pull\n> request might be a burdensome process, and discourage some\n> contributors.  The following is a sketch of an improved process.\n>\n> 1) BIP Draft.\n>\n> Modelled after IETF drafts.  Anybody may submit a BIP draft, as long\n> as it meets two very loose requirements:\n> * At least somewhat related to bitcoin.  Note, I did not say \"crypto-currency\".\n> * Formatted similarly to existing BIPs (i.e. markdown, or whatever the\n> community prefers)\n>\n> BIP drafts may be submitted via git pull request, or by emailing an\n> attachment to bips.editor at bitcoin.org.  This mirrors the Linux kernel\n> change submission process:  git is preferred, but there is always a\n> non-git method for folks who cannot or do not wish to use git or\n> github.\n>\n> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\n> are not automatically assigned a BIPS number.\n>\n> 2) Time passes.  Software for BIP drafts is developed, tested,\n> published, and publicly discussed in a typical open source manner.\n>\n> 3) If interest and use cases remain strong, a BIP number may be\n> requested, and the BIP draft is moved to\n> git://github.com/bitcoin/bips.git main directory.\n>\n> 4) If there is general consensus that the BIP should be adopted, the\n> BIP status is changed to \"accepted.\"\n>\n> There are no specified time limits.  Sometimes consensus about a BIP\n> is reached in days, sometimes 12+ months or more.  It varies widely\n> depending on the feature's complexity and impact.\n>\n> As with the IETF, it will be q\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n\n\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-21T19:38:37",
                "message_text_only": "I have some more questions.\n\n1) Should the protocol specification page also be codified into BIP(s)?\n\n2) Should the current wiki pages be taken down / forwarded to the git repo or be auto updated from the git repo?\n\n3) Even though the information in BIP 50 is valuable, should it really be considered a BIP?\n\nOn Oct 21, 2013, at 10:17 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\nThe goal is to improve the process, hash-seal our specs, and create an\neasy way for anyone with at least an email address to participate.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/da1da444/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-21T19:47:58",
                "message_text_only": "On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:\n> 1) Should the protocol specification page also be codified into BIP(s)?\n\nProbably wouldn't hurt, but it'd likely need a rewrite in a more modular and \nformal form.\n\n> 2) Should the current wiki pages be taken down / forwarded to the git repo\n> or be auto updated from the git repo?\n\nSince it's the same format, I'd keep it up there, maybe with a link to the git \nrepo on the main BIP index wiki page.\n\n> 3) Even though the information in BIP 50 is valuable, should it really be\n> considered a BIP?\n\nIt's a hardforking protocol change, so IMO yes."
            },
            {
                "author": "Benjamin Cordes",
                "date": "2013-10-21T20:57:03",
                "message_text_only": "I believe a better solution would to use a gitlab clone such as gitlab,\nwhich sits on top of the git repo, and allows for custom code around the\nBIP process. Potentially one could even build Bitcoin into such a BIP\nsystem. If somebody wants to support a BIP he donates Bitcoins to that\nproposal. Somebody who actually implements the BIP can receive some percent\nof the bounty (while some percent goes to the Bitcoin foundation). Via such\na platform one could create assurance contracts to kickstart BIP\ndevelopments or Bitcoin extensions (public infrastructure which is not part\nof the core, such as opensourced exchanges).\n\n\nOn Mon, Oct 21, 2013 at 9:47 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:\n> > 1) Should the protocol specification page also be codified into BIP(s)?\n>\n> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular\n> and\n> formal form.\n>\n> > 2) Should the current wiki pages be taken down / forwarded to the git\n> repo\n> > or be auto updated from the git repo?\n>\n> Since it's the same format, I'd keep it up there, maybe with a link to the\n> git\n> repo on the main BIP index wiki page.\n>\n> > 3) Even though the information in BIP 50 is valuable, should it really be\n> > considered a BIP?\n>\n> It's a hardforking protocol change, so IMO yes.\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/d874a3d8/attachment.html>"
            },
            {
                "author": "Benjamin Cordes",
                "date": "2013-10-21T20:59:26",
                "message_text_only": "I believe a better solution would to use a github clone such as gitlab,\nwhich sits on top of the git repo, and allows for custom code around the\nBIP process. Potentially one could even build Bitcoin into such a BIP\nsystem. If somebody wants to support a BIP he donates Bitcoins to that\nproposal. Somebody who actually implements the BIP can receive some percent\nof the bounty, while some percentage goes to the Bitcoin foundation. Via\nsuch a platform one could create assurance contracts to kickstart BIP\ndevelopments or Bitcoin extensions (public infrastructure which is not part\nof the core, such as opensourced exchanges).\n\n\nOn Mon, Oct 21, 2013 at 9:47 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:\n> > 1) Should the protocol specification page also be codified into BIP(s)?\n>\n> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular\n> and\n> formal form.\n>\n> > 2) Should the current wiki pages be taken down / forwarded to the git\n> repo\n> > or be auto updated from the git repo?\n>\n> Since it's the same format, I'd keep it up there, maybe with a link to the\n> git\n> repo on the main BIP index wiki page.\n>\n> > 3) Even though the information in BIP 50 is valuable, should it really be\n> > considered a BIP?\n>\n> It's a hardforking protocol change, so IMO yes.\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/35473229/attachment.html>"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-22T06:39:51",
                "message_text_only": "On 21/10/13 21:47, Luke-Jr wrote:\n> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:\n>> 1) Should the protocol specification page also be codified into BIP(s)?\n>\n> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular and\n> formal form.\n\nI wanted to have a look at how the whole Bitcoin thing works recently. \nBeing a distributed application, I've searched for the protocol spec. \nWhat I found were two wiki pages (Protocol & ProtocolRules) that looked \nmore like notes someone wrote down while implementing the application.\n\nHave I missed something? Is there any effort underway trying to produce \na decent spec? If not so, I am willing to help with that.\n\nMartin"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-22T06:59:18",
                "message_text_only": "> I wanted to have a look at how the whole Bitcoin thing works recently. \n> Being a distributed application, I've searched for the protocol spec. \n> What I found were two wiki pages (Protocol & ProtocolRules) that looked \n> more like notes someone wrote down while implementing the application.\n> \n> Have I missed something? Is there any effort underway trying to produce \n> a decent spec? If not so, I am willing to help with that.\n\nHave you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/507d8f63/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-22T07:03:53",
                "message_text_only": "On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman\n<jeanpaulkogelman at me.com> wrote:\n> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n\nTake care, the information in the wiki is woefully incomplete."
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-22T07:34:57",
                "message_text_only": "On 22/10/13 09:03, Gregory Maxwell wrote:\n> On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman\n> <jeanpaulkogelman at me.com> wrote:\n>> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n>\n> Take care, the information in the wiki is woefully incomplete.\n\nImagine myself, with no prior knowledge of Bitcoin looking at the \ndocument. It starts with \"Hashes\". What hashes? No idea what's going on. \nEtc.\n\nNow compare that to a well written RFC. It starts with introduction, \ndescription of the problem, explains the conceptual model of the \nsolution, then dives into the details. There's also Security \nConsiderations part in every RFC that is pretty relevant for Bitcoin.\n\nAs I said, I am willing to help with writing such document, it would be \na nice way of learning the stuff, however, help from core devs, such as \nanswering question that may arise in the process, or reviewing the \ndocument would be needed.\n\nMartin"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-22T07:49:41",
                "message_text_only": "On Tue, Oct 22, 2013 at 09:34:57AM +0200, Martin Sustrik wrote:\n> On 22/10/13 09:03, Gregory Maxwell wrote:\n> > On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman\n> > <jeanpaulkogelman at me.com> wrote:\n> >> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n> >\n> > Take care, the information in the wiki is woefully incomplete.\n> \n> Imagine myself, with no prior knowledge of Bitcoin looking at the \n> document. It starts with \"Hashes\". What hashes? No idea what's going on. \n> Etc.\n> \n> Now compare that to a well written RFC. It starts with introduction, \n> description of the problem, explains the conceptual model of the \n> solution, then dives into the details. There's also Security \n> Considerations part in every RFC that is pretty relevant for Bitcoin.\n> \n> As I said, I am willing to help with writing such document, it would be \n> a nice way of learning the stuff, however, help from core devs, such as \n> answering question that may arise in the process, or reviewing the \n> document would be needed.\n\nWriting such RFCs is dangerous due to the consensus nature of Bitcoin -\nit makes people think the standard is the RFC, rather than the code.\n\nI hear one of the better intros to Bitcoin is the Khan academy videos,\nbut I've never watched them myself. Once you understand how it works,\nstart reading source code - the Bitcoin codebase is actually really\nsimple and readable. However remember that the implications of that\ncodebase are anything but simple; there's lots of reasons to think\nSatoshi himself didn't understand Bitcoin all that well, even by the\ntime he left the project.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f155e7a648e84a83589048ae1cacb0c60bfce2437553b6af4\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131022/efd1835a/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-22T07:56:59",
                "message_text_only": "On Tue, Oct 22, 2013 at 12:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n> There's also Security Considerations part in\n> every RFC that is pretty relevant for Bitcoin.\n\nWhich would say something interesting like \"If the bitcoin network\nimplements inconsistent behavior in the consensus critical parts of\nthe protocol the world ends. As such, conformance or _non_-conformance\nwith this specification (in particular, sections 4. 5. and 6.) may be\nrequired for security.\"\n\nA Bitcoin protocol RFC would be a great place to exercise RFC 6919\nkeywords.  ( http://tools.ietf.org/html/rfc6919 )"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-22T08:20:44",
                "message_text_only": "On 22/10/13 09:56, Gregory Maxwell wrote:\n> On Tue, Oct 22, 2013 at 12:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n>> There's also Security Considerations part in\n>> every RFC that is pretty relevant for Bitcoin.\n>\n> Which would say something interesting like \"If the bitcoin network\n> implements inconsistent behavior in the consensus critical parts of\n> the protocol the world ends. As such, conformance or _non_-conformance\n> with this specification (in particular, sections 4. 5. and 6.) may be\n> required for security.\"\n\nIn fact, yes.\n\nIn the end it boils down to saying something like: \"Bitcoin is a unique \nglobal distributed application and thus all implementations MUST support \nthe version of the protocol currently in use, irrespective of whether it \nhave been documented and/or published. This RFC is meant only for \ninformational purposes and is a snapshot of the protocol as to Oct 22nd \n2013.\"\n\nThat being said, I understand the idea of not publishing the spec so \nthat everyone is forced to work with live data.\n\n> A Bitcoin protocol RFC would be a great place to exercise RFC 6919\n> keywords.  ( http://tools.ietf.org/html/rfc6919 )\n\nHeh. Haven't seen that one.\n\nMartin"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-22T14:08:06",
                "message_text_only": "All that is good practice, but we should avoid adding burdensome\nprocess that might discourage BIP writing.\n\nConsider a distributed approach:  if you feel a draft needs more\nsections or better language, submit a pull request yourself and help\ncommunity-edit the document.\n\nOn Tue, Oct 22, 2013 at 3:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n> On 22/10/13 09:03, Gregory Maxwell wrote:\n>> On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman\n>> <jeanpaulkogelman at me.com> wrote:\n>>> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n>>\n>> Take care, the information in the wiki is woefully incomplete.\n>\n> Imagine myself, with no prior knowledge of Bitcoin looking at the\n> document. It starts with \"Hashes\". What hashes? No idea what's going on.\n> Etc.\n>\n> Now compare that to a well written RFC. It starts with introduction,\n> description of the problem, explains the conceptual model of the\n> solution, then dives into the details. There's also Security\n> Considerations part in every RFC that is pretty relevant for Bitcoin.\n>\n> As I said, I am willing to help with writing such document, it would be\n> a nice way of learning the stuff, however, help from core devs, such as\n> answering question that may arise in the process, or reviewing the\n> document would be needed.\n>\n> Martin\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-23T07:38:31",
                "message_text_only": "On 22/10/13 16:08, Jeff Garzik wrote:\n> All that is good practice, but we should avoid adding burdensome\n> process that might discourage BIP writing.\n>\n> Consider a distributed approach:  if you feel a draft needs more\n> sections or better language, submit a pull request yourself and help\n> community-edit the document.\n\nI would love to do so.\n\nHowever, from what Peter Todd said above, my feeling was that spec is \ndeliberately vague to force compatibility with the reference \nimplementation rather than with a document.\n\nWhile that kind of compatibility-via-obscurity won't probably work in a \nlong run, in short run it can prevent proliferation of implementations \nand thus give protocol more space and flexibility to evolve (I've done \nthe same trick with ZeroMQ myself once).\n\nAnyway, if my impression was wrong I am happy to give it a try.\n\nMartin"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-23T19:40:39",
                "message_text_only": "On Wed, Oct 23, 2013 at 09:38:31AM +0200, Martin Sustrik wrote:\n> On 22/10/13 16:08, Jeff Garzik wrote:\n> > All that is good practice, but we should avoid adding burdensome\n> > process that might discourage BIP writing.\n> >\n> > Consider a distributed approach:  if you feel a draft needs more\n> > sections or better language, submit a pull request yourself and help\n> > community-edit the document.\n> \n> I would love to do so.\n> \n> However, from what Peter Todd said above, my feeling was that spec is \n> deliberately vague to force compatibility with the reference \n> implementation rather than with a document.\n> \n> While that kind of compatibility-via-obscurity won't probably work in a \n> long run, in short run it can prevent proliferation of implementations \n> and thus give protocol more space and flexibility to evolve (I've done \n> the same trick with ZeroMQ myself once).\n\nThe reference implementation is the specification - the \"specification\"\non the wiki is best thought of as a set of Coles Notes on the real\nspecification. If you don't already understand that and the nuance of\nthat statement you should assume the protocol is fixed in stone and\ndoesn't evolve at all; that statement is not quite true, but it's very\nclose to the truth.\n\n\nI gotta get around to writing a \"Developers\" section for the FAQ\nexplaining this stuff....\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000007362b283ac07839aba795dbfb3c5c4e831d80df9cf3bea2d5\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/419118b5/attachment.sig>"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-23T20:05:56",
                "message_text_only": "On 23/10/13 21:40, Peter Todd wrote:\n\n> The reference implementation is the specification - the \"specification\"\n> on the wiki is best thought of as a set of Coles Notes on the real\n> specification. If you don't already understand that and the nuance of\n> that statement you should assume the protocol is fixed in stone and\n> doesn't evolve at all; that statement is not quite true, but it's very\n> close to the truth.\n\nDoes that imply that the notes are deliberately obscured to force \neveryone to check the source code?\n\nMartin"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-23T20:27:31",
                "message_text_only": "On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:\n> On 23/10/13 21:40, Peter Todd wrote:\n> \n> >The reference implementation is the specification - the \"specification\"\n> >on the wiki is best thought of as a set of Coles Notes on the real\n> >specification. If you don't already understand that and the nuance of\n> >that statement you should assume the protocol is fixed in stone and\n> >doesn't evolve at all; that statement is not quite true, but it's very\n> >close to the truth.\n> \n> Does that imply that the notes are deliberately obscured to force\n> everyone to check the source code?\n\nWhat's on the wiki is mostly the work of people who aren't working on\nthe reference implementation, so no, you can't say that.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000003c1d48b638b9857cb56b6fe9188a60c481fbc9b738ccb4663\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/afb18a9c/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-10-23T21:07:18",
                "message_text_only": "On Wed, Oct 23, 2013 at 10:27 PM, Peter Todd <pete at petertodd.org> wrote:\n> On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:\n>> On 23/10/13 21:40, Peter Todd wrote:\n>>\n>> >The reference implementation is the specification - the \"specification\"\n>> >on the wiki is best thought of as a set of Coles Notes on the real\n>> >specification. If you don't already understand that and the nuance of\n>> >that statement you should assume the protocol is fixed in stone and\n>> >doesn't evolve at all; that statement is not quite true, but it's very\n>> >close to the truth.\n>>\n>> Does that imply that the notes are deliberately obscured to force\n>> everyone to check the source code?\n>\n> What's on the wiki is mostly the work of people who aren't working on\n> the reference implementation, so no, you can't say that.\n\nIndeed, I know of few people who are familiar with the source code\nthat use the wiki.\n\nI do think that is a pity. The openness and transparency of the\nprotocol is essential to trusting the system (and shouldn't be limited\nto those digging through the source code), and for that reason alone I\nthink it needs to be well-documented.\n\nI also do agree with earlier comments, that due to the nature of the\nconsensus problem Bitcoin solves, it will always be the network that\ndictates what the actual rules are - anything else can result in\ninresolvable forks. If a \"formal\" specification were written, and we\nwould find out that the majority of nodes on the network deviate from\nit in a subtle way, those nodes would be buggy in the sense that they\naren't doing what was expected, but it would be the specification that\nis incorrect for not following the rules of the network. In short,\nconsistency is more important than correctness, and for that reason,\nwriting alternate implementation will always be hard and dangerous.\n\nHowever, I do not think that making it hard to find information about\nthe details of the system is the way to go. Alternate implementations\nare likely inevitable, and in the long run probably a win for the\necosystem. If effort is put into accurately describing the rules, it\nshould indeed carry a strong notice about it being descriptive rather\nthan normative.\n\nIf someone is willing to work on that, I am (and likely many people in\n#bitcoin-dev are) available for any questions about the protocol and\nits semantics.\n\n-- \nPieter"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-10-23T21:42:14",
                "message_text_only": "I think formalizing the specification could go a long way and encouraging\nalternate implementations is going to be the best way to reduce unexpected\nsmall bugs having a bad effect except on the \"buggy\" node.\n\nThat being said, it's a huge chicken and egg problem.  No one wants to go\noff the reference client since it could lead to working on a forked chain\nas a miner or having bad data as a client.\n\nI don't know if there is a good way to try to take small pieces, get\nconsensus, possibly have some type of universal test cases and running on\ntestnet that would solve the problem.\n\nI wouldn't mind taking on parts of this when I have time, specifically\ntransactions/scripting.  Obviously if there are better qualified people who\nare interested, have at it!\n\n\nOn Wed, Oct 23, 2013 at 4:07 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Wed, Oct 23, 2013 at 10:27 PM, Peter Todd <pete at petertodd.org> wrote:\n> > On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:\n> >> On 23/10/13 21:40, Peter Todd wrote:\n> >>\n> >> >The reference implementation is the specification - the \"specification\"\n> >> >on the wiki is best thought of as a set of Coles Notes on the real\n> >> >specification. If you don't already understand that and the nuance of\n> >> >that statement you should assume the protocol is fixed in stone and\n> >> >doesn't evolve at all; that statement is not quite true, but it's very\n> >> >close to the truth.\n> >>\n> >> Does that imply that the notes are deliberately obscured to force\n> >> everyone to check the source code?\n> >\n> > What's on the wiki is mostly the work of people who aren't working on\n> > the reference implementation, so no, you can't say that.\n>\n> Indeed, I know of few people who are familiar with the source code\n> that use the wiki.\n>\n> I do think that is a pity. The openness and transparency of the\n> protocol is essential to trusting the system (and shouldn't be limited\n> to those digging through the source code), and for that reason alone I\n> think it needs to be well-documented.\n>\n> I also do agree with earlier comments, that due to the nature of the\n> consensus problem Bitcoin solves, it will always be the network that\n> dictates what the actual rules are - anything else can result in\n> inresolvable forks. If a \"formal\" specification were written, and we\n> would find out that the majority of nodes on the network deviate from\n> it in a subtle way, those nodes would be buggy in the sense that they\n> aren't doing what was expected, but it would be the specification that\n> is incorrect for not following the rules of the network. In short,\n> consistency is more important than correctness, and for that reason,\n> writing alternate implementation will always be hard and dangerous.\n>\n> However, I do not think that making it hard to find information about\n> the details of the system is the way to go. Alternate implementations\n> are likely inevitable, and in the long run probably a win for the\n> ecosystem. If effort is put into accurately describing the rules, it\n> should indeed carry a strong notice about it being descriptive rather\n> than normative.\n>\n> If someone is willing to work on that, I am (and likely many people in\n> #bitcoin-dev are) available for any questions about the protocol and\n> its semantics.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/274be828/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-23T21:49:00",
                "message_text_only": "On Wednesday, October 23, 2013 9:42:14 PM Allen Piscitello wrote:\n> That being said, it's a huge chicken and egg problem.  No one wants to go\n> off the reference client since it could lead to working on a forked chain\n> as a miner or having bad data as a client.\n\nThankfully, miners are incentivised to run one of every widespread node to \nensure their blocks are accepted by the network. Eloipool already supports \ncross-referencing block templates between multiple clients and using the one \nthat is accepted by most/all (and logging any discrepancies with coredump-like \ndetails).\n\nLuke"
            },
            {
                "author": "Martin Sustrik",
                "date": "2013-10-24T07:03:14",
                "message_text_only": "On 23/10/13 23:07, Pieter Wuille wrote:\n\n> In short,\n> consistency is more important than correctness.\n\nThat's a nice and concise way to put it and any potential protocol \ndocumentation should start with a statement like that.\n\n> However, I do not think that making it hard to find information about\n> the details of the system is the way to go. Alternate implementations\n> are likely inevitable, and in the long run probably a win for the\n> ecosystem. If effort is put into accurately describing the rules, it\n> should indeed carry a strong notice about it being descriptive rather\n> than normative.\n\nOne interesting question is whather alternative implementations are more \nlikely to get it wrong because the protocol description is wrong or \nbecause the authors misunderstood the reference implementation source code.\n\nExtensive documentation of the source code, a la Knuth's literate \nprogramming, may be some kind of a middle ground.\n\n> If someone is willing to work on that, I am (and likely many people in\n> #bitcoin-dev are) available for any questions about the protocol and\n> its semantics.\n\nOk. Several people expressed an interest in the topic, so I'll give it a \ntry and see how it fares.\n\nMartin"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-10-24T10:39:24",
                "message_text_only": "Yes.  I had pointed people in IRC to Knuth's literate programming, as\nan example of how we might document bitcoin.\n\n\nOn Thu, Oct 24, 2013 at 3:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n> On 23/10/13 23:07, Pieter Wuille wrote:\n>\n>> In short,\n>> consistency is more important than correctness.\n>\n> That's a nice and concise way to put it and any potential protocol\n> documentation should start with a statement like that.\n>\n>> However, I do not think that making it hard to find information about\n>> the details of the system is the way to go. Alternate implementations\n>> are likely inevitable, and in the long run probably a win for the\n>> ecosystem. If effort is put into accurately describing the rules, it\n>> should indeed carry a strong notice about it being descriptive rather\n>> than normative.\n>\n> One interesting question is whather alternative implementations are more\n> likely to get it wrong because the protocol description is wrong or\n> because the authors misunderstood the reference implementation source code.\n>\n> Extensive documentation of the source code, a la Knuth's literate\n> programming, may be some kind of a middle ground.\n>\n>> If someone is willing to work on that, I am (and likely many people in\n>> #bitcoin-dev are) available for any questions about the protocol and\n>> its semantics.\n>\n> Ok. Several people expressed an interest in the topic, so I'll give it a\n> try and see how it fares.\n>\n> Martin\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Christian Decker",
                "date": "2013-10-24T11:11:05",
                "message_text_only": "I'd like to add some historical background about how the \"protocol\nspecification\" came to be in the first place.\n\nA bit over three years [1] ago I started an attempt to document the\nnetwork protocol, by reverse engineering it from the satoshi\nclient. My goal, back then, was to enable like-minded engineers to\ncreate alternative clients and move away from the client-monoculture\nthat is still predominant today. It was clear from the beginning that\nit would merely be a reverse engineering effort, and that it would\nlikely lag a bit behind the changes in the main client. It was meant\nas a help for engineers that are not well versed in C/C++ to enable\nthem to contribute by creating new clients, but the satoshi client\nwould always be the de-facto standard.\n\nWith the move from Google Code to the Bitcoin.it wiki somehow this\nnotion of it being a reverse engineering effort was lost and people\nstarted assuming that if the behavior of the satoshi client did not\nmatch the protocol description it was a bug on the client\nside. Instead it is because the reverse engineering of the protocol is\nincorrect or simply missing some details. Although the protocol\ndescription is far more complete than it was back when we started, I\nstill don't feel comfortable giving it the name specification.\n\nI still believe that a client monoculture is bad for the system as a\nwhole, because a single bug might bring down the whole network. Giving\npeople the necessary tools to implement new clients brings\nstability. I do understand the criticism that writing a specification\nmight hinder future development as it restricts the possible changes\nto the protocol, but isn't this already the case as long as we have\nlegacy versions of the client participating in the network? I would\nalso argue that having a specification allows an application\nindependent review of the protocol to identify possible improvements\nand bugs.\n\nI think the protocol description has an important place in the\ndevelopment of Bitcoin, so much so that we pushed a long time ago to\nseparate protocol version from the client version. I would love to see\nthe protocol specification becoming official part of the bitcoin\ngithub repository, which would ideally be maintained alongside the\nsatoshi client to keep it up to date.\n\nRegards,\nChristian Decker\n\n[1] https://bitcointalk.org/index.php?topic=231\n--\nChristian Decker\n\n\nOn Thu, Oct 24, 2013 at 9:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:\n> On 23/10/13 23:07, Pieter Wuille wrote:\n>\n>> In short,\n>> consistency is more important than correctness.\n>\n> That's a nice and concise way to put it and any potential protocol\n> documentation should start with a statement like that.\n>\n>> However, I do not think that making it hard to find information about\n>> the details of the system is the way to go. Alternate implementations\n>> are likely inevitable, and in the long run probably a win for the\n>> ecosystem. If effort is put into accurately describing the rules, it\n>> should indeed carry a strong notice about it being descriptive rather\n>> than normative.\n>\n> One interesting question is whather alternative implementations are more\n> likely to get it wrong because the protocol description is wrong or\n> because the authors misunderstood the reference implementation source code.\n>\n> Extensive documentation of the source code, a la Knuth's literate\n> programming, may be some kind of a middle ground.\n>\n>> If someone is willing to work on that, I am (and likely many people in\n>> #bitcoin-dev are) available for any questions about the protocol and\n>> its semantics.\n>\n> Ok. Several people expressed an interest in the topic, so I'll give it a\n> try and see how it fares.\n>\n> Martin\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-10-24T19:43:15",
                "message_text_only": "Thanks Christian, this is a really interesting bit of history. My own  \npersonal experience from when I wrote my own client and BCCAPI-ish server  \nwas that the protocol specification on the Wiki was hugely valuable, and  \nrarely sent me astray. Supplement that with the occasional questions on  \n#bitcoin-dev, and then just coding, coding, coding and getting unit tests  \nto pass.\n\nNothing compares (IMO) to stepping through your own code watching the unit  \ntests run, scripts evaluate, calculating transaction hashes for the  \ndifferent SIGHASH modes, and finally getting your first transaction into  \nthe block chain. I really appreciated the .json files holding the unit  \ntest data, which were easy to load into my own test harness, the tables on  \nthe Wiki showing what the stack should look like at each point in a script  \nexecution, and the diagrams showing transaction signing.\n\nBitcoin takes some time to \"grok\" when you first approach; more than a  \nday, less than a month, and really no amount of reading documentation or  \nspecs will get you to that \"ah ha\" moment. When the fog lifts and the  \nblockchain, scripting, signing, and wallet handling really click, suddenly  \nthe bitcoind code (and many other great public sources in just about any  \nlanguage you could want) actually does starts to feel fairly simple and  \nobvious. But it certainly doesn't start out that way on day one.\n\nI think the majority of client code development is actually people writing  \n'agents' not end-user P2P wallets, and they tend to be written to connect  \nto a single bitcoind acting as a proxy to the network. Even some end-user  \nwallets work this way! As such, I spent very little time in my own client  \nwriting P2P protocol code, no peer discovery code, no anti-DoS, etc.  \nClients like this also don't pose much systemic risk, because they don't  \nmine, they don't connect directly to external nodes, etc. They can  \ncertainly be used to \"cause trouble\" though, but so can  \n'sendrawtransaction'.\n\nI chose to speak the P2P protocol to bitcoind versus using some of the  \nother options like ZeroMQ, but it still didn't take long to get headers,  \nblocks, and transactions downloading. I remember getting stuck on the very  \nfirst version message, because of missing the checksum and user-agent or  \nsomething caused the latest bitcoind to just ignore me. A little wireshark  \ncapture of the exchange between two working bitcoind instances cleared it  \nright up. I didn't mind the leg work, I don't think everything needs to be  \nspoon fed, and it's certainly not purposefully obfuscated. Maybe one  \nexception is the mix-matched endianness will throw you off, especially if  \nyou are developing on LE! Anyway, I have huge respect for how much effort  \nit takes to keep even small bits of documentation up-to-date. For as  \n\"slow\" as bitcoin moves, it's actually moving incredibly fast.\n\nFinally, the bitcoind console and debug logs, as well sites like  \nblockchain.info and blockexplorer.com are hugely helpful for debugging raw  \nand live transactions for when you get stuck. There's a surprisingly large  \ntooling and support ecosystem out there.\n\nMoral of the story, I think, is everything you need is there. No, it's not  \nall in one place. Yes, it takes time to find it and assimilate all that  \nknowledge. It also really helps that the community is extremely willing to  \nhelp and answer technical questions, and point you in the right direction,  \neven when you're working on your own private client code. The IRC channel  \ncan certainly be intimidating because it seems like every time I hit enter  \nto send a question, gmaxwell's respond 300ms later would invoke an  \nimmediate forehead slap and a groan of \"shit, I knew/should have known  \nthat, now I feel dumb\" ;-) but if you're working on bitcoin, you better  \nget used to not being the smartest person in the room! The responses I got  \nwere never arrogant or disparaging, but they were straight to-the-point  \nand surprisingly high quality. Ain't no slouches in that channel, yes you  \nwill have to bring your A-game and you are expected to have \"tried first\"  \nbefore just asking. I have fairly limited experience working on open  \nsource projects, but I'm extremely happy with my experience with the  \nBitcoin community and found writing Bitcoin code hugely enjoyable.\n\nThe flip side to helping people implement their own clients, agents, or  \neven miners, is helping people to contribute pulls requests, or at the  \nvery highest echelon, a BIP. If you haven't written any significant  \nBitcoin code, you might want to consider investing in that first before  \nsubmitting a BIP. :-)\n\nFor a BIP to be valuable, often it requires widespread or even consensus  \nadoption. BIPs are probably not the place to toss just any old 'good idea'  \nbecause BIPs impose a cost on all active developers. I want to read and  \nunderstand 'all the BIPs' because for the most part they are actually  \nessential, like, how to handle duplicate transactions in BIP30 - if you  \ndon't read BIP30 you very likely totally miss that, until your code throws  \nexceptions while processing block 91842.\n\nAnd perhaps the hardest kind of BIP of all is the \"lets get wallets to add  \nthis user-facing feature\" where it has no bearing on the blockchain or  \ntransaction processing, it doesn't make the network more resilient or add  \ncrucial functionality for increasing scalability. Kind of like JPK's HD  \nwallet encryption proposal, which I love, and I tried to contribute to in  \nthe forums, but I can totally understand the headwinds for making progress  \non BIPs like that one and BIP39. No one is against it per-say, it's just  \nmuch harder to articulate and justify the NEED for everyone to implement,  \ntest, and support this new not-yet-standard, nice-to-have feature. For  \nthose kinds of BIPs you probably have to go out and get some wallets to  \nimplement it, or implement it yourself, to prove the value and kick start  \ncritical mass before you will even get enough support for getting a BIP  \nnumber assigned. IMO, it's not a Bad Thing.\n\nTL;DR; The current support systems worked very well for me. I was able to  \naccomplish all my goals, and I would even say it was a pleasure. Keep a  \nhigh bar for assigning BIP numbers. And I hope to be able to jump back in  \nand do more with Bitcoin soon.\n\nThanks all, sorry if I'm rambling,\nJeremy Spilman\n\nOn Thu, 24 Oct 2013 04:11:05 -0700, Christian Decker  \n<decker.christian at gmail.com> wrote:\n\n> I'd like to add some historical background about how the \"protocol\n> specification\" came to be in the first place.\n>\n> A bit over three years [1] ago I started an attempt to document the\n> network protocol, by reverse engineering it from the satoshi\n> client. My goal, back then, was to enable like-minded engineers to\n> create alternative clients and move away from the client-monoculture\n> that is still predominant today. It was clear from the beginning that\n> it would merely be a reverse engineering effort, and that it would\n> likely lag a bit behind the changes in the main client. It was meant\n> as a help for engineers that are not well versed in C/C++ to enable\n> them to contribute by creating new clients, but the satoshi client\n> would always be the de-facto standard.\n>\n> With the move from Google Code to the Bitcoin.it wiki somehow this\n> notion of it being a reverse engineering effort was lost and people\n> started assuming that if the behavior of the satoshi client did not\n> match the protocol description it was a bug on the client\n> side. Instead it is because the reverse engineering of the protocol is\n> incorrect or simply missing some details. Although the protocol\n> description is far more complete than it was back when we started, I\n> still don't feel comfortable giving it the name specification.\n>\n> I still believe that a client monoculture is bad for the system as a\n> whole, because a single bug might bring down the whole network. Giving\n> people the necessary tools to implement new clients brings\n> stability. I do understand the criticism that writing a specification\n> might hinder future development as it restricts the possible changes\n> to the protocol, but isn't this already the case as long as we have\n> legacy versions of the client participating in the network? I would\n> also argue that having a specification allows an application\n> independent review of the protocol to identify possible improvements\n> and bugs.\n>\n> I think the protocol description has an important place in the\n> development of Bitcoin, so much so that we pushed a long time ago to\n> separate protocol version from the client version. I would love to see\n> the protocol specification becoming official part of the bitcoin\n> github repository, which would ideally be maintained alongside the\n> satoshi client to keep it up to date.\n>\n> Regards,\n> Christian Decker\n>\n> [1] https://bitcointalk.org/index.php?topic=231\n> --\n> Christian Decker\n>\n>"
            }
        ],
        "thread_summary": {
            "title": "Revisiting the BIPS process, a proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Allen Piscitello",
                "Andreas Schildbach",
                "Peter Todd",
                "Martin Sustrik",
                "Benjamin Cordes",
                "Jean-Paul Kogelman",
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Christian Decker"
            ],
            "messages_count": 28,
            "total_messages_chars_count": 49308
        }
    },
    {
        "title": "[Bitcoin-development] \"Bitcoin codebase is actually really simple and readable.\"",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2013-10-23T15:02:07",
                "message_text_only": "________________________________\n From: \"bitcoin-development-request at lists.sourceforge.net\" <bitcoin-development-request at lists.sourceforge.net>\nTo: bitcoin-development at lists.sourceforge.net \nSent: Wednesday, October 23, 2013 3:38 AM\nSubject: Bitcoin-development Digest, Vol 29, Issue 20\n \n\nSend Bitcoin-development mailing list submissions to\n\u00a0\u00a0\u00a0 bitcoin-development at lists.sourceforge.net\nWhen replying, please edit your Subject line so it is more specific\nthan \"Re: Contents of Bitcoin-development digest...\"\nToday's Topics:\n\u00a0  2. Re: Revisiting the BIPS process, a proposal (Peter Todd)\n----------------------------------------------------------------------\n....\n\nOn Tue, Oct 22, 2013 at 09:34:57AM +0200, Martin Sustrik wrote:\n> On 22/10/13 09:03, Gregory Maxwell wrote:\n> > On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman\n> > <jeanpaulkogelman at me.com> wrote:\n> >> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?\n> >\n> > Take care, the information in the wiki is woefully incomplete.\n> \n> Imagine myself, with no prior knowledge of Bitcoin looking at the \n> document. It starts with \"Hashes\". What hashes? No idea what's going on. \n> Etc.\n> \n> Now compare that to a well written RFC. It starts with introduction, \n> description of the problem, explains the conceptual model of the \n> solution, then dives into the details. There's also Security \n> Considerations part in every RFC that is pretty relevant for Bitcoin.\n> \n> As I said, I am willing to help with writing such document, it would be \n> a nice way of learning the stuff, however, help from core devs, such as \n> answering question that may arise in the process, or reviewing the \n> document would be needed.\n\nWriting such RFCs is dangerous due to the consensus nature of Bitcoin -\nit makes people think the standard is the RFC, rather than the code.\n\nI hear one of the better intros to Bitcoin is the Khan academy videos,\nbut I've never watched them myself. Once you understand how it works,\nstart reading source code - the Bitcoin codebase is actually really\nsimple and readable. However remember that the implications of that\ncodebase are anything but simple; there's lots of reasons to think\nSatoshi himself didn't understand Bitcoin all that well, even by the\ntime he left the project.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f155e7a648e84a83589048ae1cacb0c60bfce2437553b6af4\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\n\n------------------------------\nI feel that I must respond to the statements that \n1.\nthe Bitcoin codebase is actually really\nsimple and readable. \n\n2.\nHowever remember that the implications of that\ncodebase are anything but simple; there's lots of reasons to think\nSatoshi himself didn't understand Bitcoin all that well, even by the\ntime he left the project.\n\nOn point one: if it was/is so readable, why hasn't it been documented better, if at all? \nWhy haven't the obscure names of important items been globally searched and replaced?\nWhy are there still mixed formatting \"styles\" still in the code. I think it is the fear that C++ \nis so brittle, that one change may bring the whole house of cards down.\nI feel that it is the language (C++) that is hindering the expression of ideas in the code.\nThis goes to your point two about Satoshi's understanding. I think just the opposite:\nthat he knew what he wanted but that C++ hindered him in expressing and implementing it.\nI think that if anything, C++ was what Satoshi \"didn't understand all that well\".\n\nBut then who does understand C++, really? See\nhttps://groups.google.com/forum/#!msg/comp.lang.lisp/7xCvdzijzgU/4xCFzLc3d5EJ \nand the quote:\nWhenever I solve a difficult problem with C++, I feel like I\u2019ve won a bar fight. \u2014 Michael Fogus\n\nI don't think readability is attainable easily in C++. It requires intentionally writing so that \nothers may understand your code. How many programmers have ever done that? And this \nis like swimming upstream in C++, where things are designed to be hidden! \n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/0829f006/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-23T19:29:40",
                "message_text_only": "On Wed, Oct 23, 2013 at 08:02:07AM -0700, Ron wrote:\n> I feel that I must respond to the statements that \n> 1.\n> the Bitcoin codebase is actually really\n> simple and readable. \n> \n> 2.\n> However remember that the implications of that\n> codebase are anything but simple; there's lots of reasons to think\n> Satoshi himself didn't understand Bitcoin all that well, even by the\n> time he left the project.\n> \n> On point one: if it was/is so readable, why hasn't it been documented better, if at all? \n> Why haven't the obscure names of important items been globally searched and replaced?\n> Why are there still mixed formatting \"styles\" still in the code. I think it is the fear that C++ \n> is so brittle, that one change may bring the whole house of cards down.\n\nThe nature of Bitcoin is that in any language one change could\naccidentally bring the whole house of cards down.\n\nAlso the time and effort it takes to review changes for maliciously or\naccidentally added exploits.\n\n> I feel that it is the language (C++) that is hindering the expression of ideas in the code.\n> This goes to your point two about Satoshi's understanding. I think just the opposite:\n> that he knew what he wanted but that C++ hindered him in expressing and implementing it.\n> I think that if anything, C++ was what Satoshi \"didn't understand all that well\".\n> \n> But then who does understand C++, really? See\n> https://groups.google.com/forum/#!msg/comp.lang.lisp/7xCvdzijzgU/4xCFzLc3d5EJ \n> and the quote:\n> Whenever I solve a difficult problem with C++, I feel like I\u2019ve won a bar fight. \u2014 Michael Fogus\n> \n> I don't think readability is attainable easily in C++. It requires intentionally writing so that \n> others may understand your code. How many programmers have ever done that? And this \n> is like swimming upstream in C++, where things are designed to be hidden! \n\nI'm making the statement that \"the Bitcoin codebase is actually really\nsimple and readable.\" based on personal experience: for what the\nreference client does - solve a previously thought unsolvable problem in\ncryptography - the code is simple and readable. (try reading the OpenSSL\nsource-code sometime as a comparison) My experience has consistently\nbeen that understanding what the code does is by far the easiest part of\nunderstanding Bitcoin; understanding what the effect of what the code\ndoes in terms of the system as a whole is at least another one or two\norders of magnitude more difficult.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000c9e44ec3cb95d6ea51b7e8d29901be451ce3a2bd7b0ed8ae\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/4464942d/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "\"Bitcoin codebase is actually really simple and readable.\"",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd",
                "Ron"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7122
        }
    },
    {
        "title": "[Bitcoin-development] Core Development Update #5",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-10-24T09:09:40",
                "message_text_only": "https://bitcoinfoundation.org/blog/?p=290\n\nVery excited about this, particularly the 80 bytes embeddable message.  I\ndo believe satoshi mentioned he wanted to add short messages, at some point.\n\nGreat work Gavin & all!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c4045d92/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Core Development Update #5",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 401
        }
    },
    {
        "title": "[Bitcoin-development] Making fee estimation better",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-10-24T14:30:43",
                "message_text_only": "Quick thought on how to make blockchain-based fee estimates work better\nin the context of out-of-band mining contracts: have miners advertise in\ntheir coinbase's what fees were actually paid, as opposed to appear to\nhave been paid.\n\nThe logic is very simple: we assume miners aren't an effective cartel\nand are willing to undercut each other. Therefore it's in their\ninterests for people to broadcast a transaction with a fee that is\ncompetitive the first time around so they can get onto mining it\nimmediately.\n\nGranted, those incentives may not be as strong as one would like, and\nthere could be some perverse ones as well, but it's a line of thought\nworth thinking about more.\n\n\nA related idea: let miners advertise a address to submit transactions\ntoo. (like a node IP) The inherent proof-of-work is nice and could help\npeople more securely find someone to connect too with the inherent proof\nthat a lot of work went into mining the block with the address in it.\n\nObviously, lots of downsides too, but it's a different security model\nthan other forms of bootstrapping, and that's probably useful in of\nitself.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001fce0617deb31cc20bec2903cd10dc352ac3b2fc1af6b27f0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/b5009fcb/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-24T14:38:16",
                "message_text_only": "On Thu, Oct 24, 2013 at 4:30 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> Quick thought on how to make blockchain-based fee estimates work better\n> in the context of out-of-band mining contracts: have miners advertise in\n> their coinbase's what fees were actually paid, as opposed to appear to\n> have been paid.\n\n\nThis is interesting, but I suppose some miners may have business models\nthat can't be easily summed up as a \"fee\" - like all-you-can-eat deals with\ncertain providers, or preference to certain kinds of transactions etc.\n\nFor the concern that estimation might force fees down too far if miners\ninclude private transactions, I thought the estimates were calculated only\non broadcast transactions, so transactions that just appear in a block\nwon't ever influence the estimate?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/76944c85/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-24T14:43:58",
                "message_text_only": "On Thu, Oct 24, 2013 at 04:38:16PM +0200, Mike Hearn wrote:\n> On Thu, Oct 24, 2013 at 4:30 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > Quick thought on how to make blockchain-based fee estimates work better\n> > in the context of out-of-band mining contracts: have miners advertise in\n> > their coinbase's what fees were actually paid, as opposed to appear to\n> > have been paid.\n> \n> \n> This is interesting, but I suppose some miners may have business models\n> that can't be easily summed up as a \"fee\" - like all-you-can-eat deals with\n> certain providers, or preference to certain kinds of transactions etc.\n\nFor sure, although *usually* all kinds of odd-ball forms of compensation\ncan be turned into a dollar figure. :)\n\n> For the concern that estimation might force fees down too far if miners\n> include private transactions, I thought the estimates were calculated only\n> on broadcast transactions, so transactions that just appear in a block\n> won't ever influence the estimate?\n\nThe thing is if a miner is mining a transaction, even in exchange for a\nout-of-band fee if they succeed, they probably still have an incentive\nto a: ask the sender to include enough of a fee that it propagates, and\nb: broadcast it themselves to make sure it's in other nodes signature\ncaches so their blocks propagate fast. (esp. with by-txid-only relaying)\n\nAnyway, in what circumstance would a customer want an exclusive contract\nwith a miner?\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000bf7bcf3da1b3b228216b72fefccbed84becaaba6fcc6aff2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/60a19c56/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-24T14:46:41",
                "message_text_only": "Well, miners are all supposed to be more or less equivalent - modulo\ndifferences in tx acceptance policies - so I'd hope that having out of bad\nfee mechanisms yet still broadcasting the TX isn't that common. If it was\nbroadcasted, it should get mined in short order, otherwise things are going\nwrong.\n\nOn Thu, Oct 24, 2013 at 4:43 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> Anyway, in what circumstance would a customer want an exclusive contract\n> with a miner?\n>\n\nI was thinking for transactions that aren't standard so have to be\nsubmitted to miners directly.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/de348db5/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-24T14:54:47",
                "message_text_only": "On Thu, Oct 24, 2013 at 04:46:41PM +0200, Mike Hearn wrote:\n> Well, miners are all supposed to be more or less equivalent - modulo\n> differences in tx acceptance policies - so I'd hope that having out of bad\n> fee mechanisms yet still broadcasting the TX isn't that common. If it was\n> broadcasted, it should get mined in short order, otherwise things are going\n> wrong.\n\nEligius has contracts to do transaction mining, and it's currently 10%\nof the hashing power.\n\nAs I said elsewhere, a good use-case for OOB fee payment is for\nmerchants who use the payment protocol, and want to get their customers\ntransactions mined as efficiently and cheaply as possible.\n(child-pays-for-parent has more blockchain bloat and thus extra expense)\n\n> On Thu, Oct 24, 2013 at 4:43 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > Anyway, in what circumstance would a customer want an exclusive contract\n> > with a miner?\n> >\n> \n> I was thinking for transactions that aren't standard so have to be\n> submitted to miners directly.\n\nSure, but even then there's no harm in letting more than one miner know\nabout it.\n\nThere's even an existing form of this: P2Pool lets shares be accompanied\nby up to 50KB worth of transactions of any form.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000d2860c825ea223b805c60a33b26b9b70616698033d360b066\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/2cd3d55b/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-24T20:39:34",
                "message_text_only": "On Fri, Oct 25, 2013 at 12:54 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> Eligius has contracts to do transaction mining, and it's currently 10%\n> of the hashing power.\n>\n\nYes, and I asked Luke what percentage of that 10% is OOB fee payments, and\nthe answer is \"a small percentage.\"\n\nSo: there are multiple layers of reasons why OOB fee payments will not\nscrew up the fee estimation code:\n\n+ If the transactions are not broadcast, then they have no effect on the\nestimates.\n\n+ If the transactions are broadcast but not relayed because their priority\nand fee are way below current estimates then they will have very close to\nzero effect on the estimates.\n\n+ If the OOB transaction is zero-fee, zero-priority (e.g comes from a\nhigh-tx-volume service and relies on recently spent outputs) it will have\nzero effect on the estimates.\n\n+ If they make up less than about 40% of broadcast transactions they will\nhave very close to zero effect on the fee estimate (because of the\ndistribution of fees and behavior of taking a median)\n\nThe only case where the estimation code is even slightly likely to get\nconfused is estimating the priority needed to get into a block IF there are\na significant number of zero-fee, low-but-not-zero-priority OOB\ntransactions being broadcast.\n\nAnd since priority naturally increases over time, even if that case DOES\noccur the failure is very mild-- it means your free transactions might have\nto build up more priority than the code estimates before successfully\nentering a block.  If that gets to be an actual problem, then implementing\nPieter's idea of keeping track of memory pool transactions that are NOT\ngetting mined would fix it. But I don't want to waste time on a theoretical\nproblem when it is very possible miners will decide to stop accepting free\ntransactions alltogether.\n\n\n\nAnd all of the above is completely orthogonal to child-pays-for-parent\nand/or replace-with-higher-fee.\n\nPS: I would appreciate it if you stop saying things like \"Regarding the\ntransaction fee estimate code, it's not very well thought out.\"\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/47fc4c53/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-25T07:07:08",
                "message_text_only": "On Fri, Oct 25, 2013 at 06:39:34AM +1000, Gavin Andresen wrote:\n> Yes, and I asked Luke what percentage of that 10% is OOB fee payments, and\n> the answer is \"a small percentage.\"\n> \n> So: there are multiple layers of reasons why OOB fee payments will not\n> screw up the fee estimation code:\n\nI've responded to nearly all those arguments elsewhere, but anyway...\n\n> And all of the above is completely orthogonal to child-pays-for-parent\n> and/or replace-with-higher-fee.\n\nIndeed. Quoting myself here: \"What we should have is both: fee\nestimation with replacement so you can replace transactions in the event\nthat the estimate was too low.\"\n\nSo on IRC you were talking about very agressive mempool expiration - as\nlittle as a block or two before tx's are expired. Now if a tx does fail\nto get mined in that short window, am I correct in saying you want a way\nto modify the fee it pays and rebroadcast? In which case wallet software\nand other players in the ecosystem will have to adjust to the fact that\nthey can expect to see relatively frequent double-spends of unconfirmed\ntransactions?\n\nAs you know I've already written relaying/mempool code for\ntx-replacement and replace-by-fee; it's the wallet code that's the hard\npart that I haven't done. If you're already planning on changing the\nwallet side of things to handle replacement-through-expiration that'd\nsave me a lot of hard work. You're probably better qualified to write\nthat code too; I'm not very familiar with the wallet.\n\nWorth thinking about the whole ecosystem of wallets involved; they all\nhave to handle double-spends gracefully to make tx replacement of any\nkind user friendly. We should try to give people a heads up that this is\ncoming soon if that's your thinking.\n\n\nAlso, regarding tx replacement user experience:\n\n> Come back a few hours later and find out you need to type in your\n> password again so your client can unlock your wallet, resign, and\n> re-transmit with a higher fee?\n\nPassword-using wallets sign multiple versions of the transaction in\nadvance of course and release the higher fee versions only later if\nrequired. (could be applied to coinjoin too)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000005391e2338afe5204414d66b1f140b172da651daedf5663af2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/7bbb7631/attachment.sig>"
            },
            {
                "author": "Andreas Petersson",
                "date": "2013-10-25T12:02:35",
                "message_text_only": "> Worth thinking about the whole ecosystem of wallets involved; they all\n> have to handle double-spends gracefully to make tx replacement of any\n> kind user friendly. We should try to give people a heads up that this is\n> coming soon if that's your thinking.\n\nIf there is a situation where wallets are supposed to constantly monitor\nthe tx propagation and recreate their transactions with different fees,\nthis would make a lot of usecases inconvenient.\nhalf-offline bluetooth transactions, users with unstable connections,\nbattery power lost, etc, etc. - and last but not least power concerns on\nhardware wallets on the bitcoincard (tx signing drains a significant amount\nof power and should therefore only be done once)\n\n-Andreas"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-10-25T13:29:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThere's no reason the signing can't be done all at once. The wallet\napp would create and sign three transactions, paying avg-std.D, avg,\nand avg+std.D fee. It just waits to broadcast the latter two until it\nhas to.\n\nOn 10/25/13 5:02 AM, Andreas Petersson wrote:\n> \n> \n>> Worth thinking about the whole ecosystem of wallets involved;\n>> they all have to handle double-spends gracefully to make tx\n>> replacement of any kind user friendly. We should try to give\n>> people a heads up that this is coming soon if that's your\n>> thinking.\n> \n> If there is a situation where wallets are supposed to constantly\n> monitor the tx propagation and recreate their transactions with\n> different fees, this would make a lot of usecases inconvenient. \n> half-offline bluetooth transactions, users with unstable\n> connections, battery power lost, etc, etc. - and last but not least\n> power concerns on hardware wallets on the bitcoincard (tx signing\n> drains a significant amount of power and should therefore only be\n> done once)\n> \n> -Andreas\n> \n> ------------------------------------------------------------------------------\n>\n> \nOctober Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application\n> performance. Explore tips for MPI, OpenMP, advanced profiling, and\n> more. Get the most from the latest Intel processors and\n> coprocessors. See abstracts and register > \n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSanJVAAoJEAdzVfsmodw4RHYQAKBrku4S80GXtbt4wBgkRMgx\nEQuobBrwtknxHOhKyYuBeAJ+h8ao1zSSNeqLvS5fJShH7vwBD2UOePLw4Nsy5p9U\npe56c07pRmgi+EWdq/3o1tggp9HN0FR3HDRwt03U4qrPTx449kHb11aOw5KZH7VS\nZiG09gKxkMPOtUy9dmVukjkG3zQ1AWjax+aOoseCnkU8u1I4kfhOyWLIjD7ciMm4\n07gD8MzBLHTfJ6/pwUczQCby76Xdg51G/5d/toT3EnXyEOC7tCbI4xunAn1eIyg3\neCUNYaOQ7WYV9tjBUDGFwjVkGDJ8KdzEUqMPEK5nAWF29vmrwBSGJ4H2C47OkTQA\n58Ie0hEYc5FMNuUCUWz3IGt2zoQ/8YENtNUDKG8oVoNhAIp5zkLK8wsMAJjZP6WM\nz56JUl8NZ2Ka5U1OelImGGVZIx4NXrXlccyxemAn3/c+krkpNv0CHAeMCeNbPG8i\ne4l2vQandiBW4NBGVYcm5A/EO6VJHAJhLEPT0pjmbuq4qTACo4Fgeb0LpOnWb/1a\n6b1SdGGhMMrXeR2IaIbnx0+0WArixsOPl9w+R9WbrMh8g7hYBLH8EpGrRj0omim7\nOoJb+W599HU37XZyWtuov+8Ouh5DpnP9l4hvNxHmro77uPPq10i/ibMd0Bnm4zZd\nALtIYpYYgUCN1D9lQwPQ\n=BjIH\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Andreas Petersson",
                "date": "2013-10-25T14:08:12",
                "message_text_only": "> There's no reason the signing can't be done all at once. The wallet\n> app would create and sign three transactions, paying avg-std.D, avg,\n> and avg+std.D fee. It just waits to broadcast the latter two until it\n> has to.\n\ni see several reasons why this is problematic. \nSo how would that work in a setting where the user signs a transaction\ncreated offline, transmitted via Bluetooth via a one-way broadcast?\ndoes it transmit all 3 tx to the receiver and just hopes they he will do\nthe \"right thing\"?\n\n\n> \n> On 10/25/13 5:02 AM, Andreas Petersson wrote:\n>> \n>> \n>>> Worth thinking about the whole ecosystem of wallets involved;\n>>> they all have to handle double-spends gracefully to make tx\n>>> replacement of any kind user friendly. We should try to give\n>>> people a heads up that this is coming soon if that's your\n>>> thinking.\n>> \n>> If there is a situation where wallets are supposed to constantly\n>> monitor the tx propagation and recreate their transactions with\n>> different fees, this would make a lot of usecases inconvenient. \n>> half-offline bluetooth transactions, users with unstable\n>> connections, battery power lost, etc, etc. - and last but not least\n>> power concerns on hardware wallets on the bitcoincard (tx signing\n>> drains a significant amount of power and should therefore only be\n>> done once)\n>> \n>>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-25T16:13:23",
                "message_text_only": "On Fri, Oct 25, 2013 at 02:02:35PM +0200, Andreas Petersson wrote:\n> \n> \n> > Worth thinking about the whole ecosystem of wallets involved; they all\n> > have to handle double-spends gracefully to make tx replacement of any\n> > kind user friendly. We should try to give people a heads up that this is\n> > coming soon if that's your thinking.\n> \n> If there is a situation where wallets are supposed to constantly monitor\n> the tx propagation and recreate their transactions with different fees,\n> this would make a lot of usecases inconvenient.\n> half-offline bluetooth transactions, users with unstable connections,\n> battery power lost, etc, etc. - and last but not least power concerns on\n> hardware wallets on the bitcoincard (tx signing drains a significant amount\n> of power and should therefore only be done once)\n\nAnyway, as I've said repeatedly my problem with fee estimation is that\nit needs to be combined with some form of transaction replacement to\ngive users a way to recover from bad estimates, not that I think the\nidea shouldn't be implemented at all. After all, we alrady have fee\nestimation: wallet authors and users manully estimate fees!\n\nThis particular case is a nasty one re: recovering from a bad estimate,\nand it's exactly why the payment protocol is designed for the sender to\ngive the receiver a copy of every transaction they make so the receiver\ncan be held responsible for getting them mined, eg. with\nchild-pays-for-parent, out-of-band fee payment, or maybe even by adding\ninputs to the transaction. (SIGHASH_ANYONECANPAY)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001231d6e04b4b18f85fa0ad00e837727e7141eaa8cfecc734b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/71968b72/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-10-25T19:35:34",
                "message_text_only": "Do you think we're at the point where wallets have to be able to \"actively  \nbid\" the fee using replacement due to block contention?\n\nI think a fee estimation API is just a data point. Depending on the  \nproperties of the estimator, and how that's presented in the UI, it could  \nserve to either increase or decrease the need for recovery.\n\nLike you said, we already have \"fee estimation\" in the form of \"user,  \nplease estimate the fee!\" Now we want to make fee estimation \"better\", and  \none key aspect of better fee estimation is decreasing the need for  \nrecovery. Techniques like signing multiple transactions with different fee  \nlevels should become less useful the better you are at estimating the fee.\n\nWhat I find interesting is that fee estimation can look at the size and  \ntype of the transaction, the age of the inputs, the number of inputs  \nversus outputs, amount of the outputs, factor in [assumptions about] what  \nfee policies miners are actually using, and after all that, look at the  \nactual competing transactions on the blockchain and try to figure out how  \nmany of those are even real.\n\nFor example, if you just look at fee-per-KB of mempool versus fee-per-KB  \nof recently mined transactions, without taking into account input age,  \nnumber of inputs vs outputs, output amounts... all the other things miner  \nmight have used to discriminate between transactions, then I don't think  \nyou'll end up with a better fee estimator.\n\nContention might bump you out of a few blocks, but if the basis for  \ncalculating the fee is fundamentally compatible with the relay policies  \nand the transaction-inclusion policies being run by large mining pools,  \nthe transaction isn't dead, it's just pending.\n\nOn Fri, 25 Oct 2013 09:13:23 -0700, Peter Todd <pete at petertodd.org> wrote:\n\n> On Fri, Oct 25, 2013 at 02:02:35PM +0200, Andreas Petersson wrote:\n>>\n>>\n>> > Worth thinking about the whole ecosystem of wallets involved; they all\n>> > have to handle double-spends gracefully to make tx replacement of any\n>> > kind user friendly. We should try to give people a heads up that this  \n>> is\n>> > coming soon if that's your thinking.\n>>\n>> If there is a situation where wallets are supposed to constantly monitor\n>> the tx propagation and recreate their transactions with different fees,\n>> this would make a lot of usecases inconvenient.\n>> half-offline bluetooth transactions, users with unstable connections,\n>> battery power lost, etc, etc. - and last but not least power concerns on\n>> hardware wallets on the bitcoincard (tx signing drains a significant  \n>> amount\n>> of power and should therefore only be done once)\n>\n> Anyway, as I've said repeatedly my problem with fee estimation is that\n> it needs to be combined with some form of transaction replacement to\n> give users a way to recover from bad estimates, not that I think the\n> idea shouldn't be implemented at all. After all, we alrady have fee\n> estimation: wallet authors and users manully estimate fees!\n>\n> This particular case is a nasty one re: recovering from a bad estimate,\n> and it's exactly why the payment protocol is designed for the sender to\n> give the receiver a copy of every transaction they make so the receiver\n> can be held responsible for getting them mined, eg. with\n> child-pays-for-parent, out-of-band fee payment, or maybe even by adding\n> inputs to the transaction. (SIGHASH_ANYONECANPAY)"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-25T22:13:27",
                "message_text_only": "On Fri, Oct 25, 2013 at 12:35:34PM -0700, Jeremy Spilman wrote:\n> Do you think we're at the point where wallets have to be able to\n> \"actively bid\" the fee using replacement due to block contention?\n\nIf Bitcoin continues to grow we probably will be at some as-yet-unknown\npoint in the future.\n\n> I think a fee estimation API is just a data point. Depending on the\n> properties of the estimator, and how that's presented in the UI, it\n> could serve to either increase or decrease the need for recovery.\n> \n> Like you said, we already have \"fee estimation\" in the form of\n> \"user, please estimate the fee!\" Now we want to make fee estimation\n> \"better\", and one key aspect of better fee estimation is decreasing\n> the need for recovery. Techniques like signing multiple transactions\n> with different fee levels should become less useful the better you\n> are at estimating the fee.\n\nYes, but equally all estimates are imperfect, and you can trade-off risk\nthat your transaction will not go through initially for lower fees.\n\nEstimates can be made sufficiently conservative that they are rarely\nwrong - this is basically the strategy of the current system. Given that\ndemand for blockchain space isn't \"saturated\" it works reasonably well\nfor now. But without a good mechanism to recover from an initial bad\nestimate you have to be more conservative than is efficient.\n\n> What I find interesting is that fee estimation can look at the size\n> and type of the transaction, the age of the inputs, the number of\n> inputs versus outputs, amount of the outputs, factor in [assumptions\n> about] what fee policies miners are actually using, and after all\n> that, look at the actual competing transactions on the blockchain\n> and try to figure out how many of those are even real.\n> \n> For example, if you just look at fee-per-KB of mempool versus\n> fee-per-KB of recently mined transactions, without taking into\n> account input age, number of inputs vs outputs, output amounts...\n> all the other things miner might have used to discriminate between\n> transactions, then I don't think you'll end up with a better fee\n> estimator.\n\nTo a first approximation there's not much reason for miners to take\nanything other than fee-per-KB into account when determining what\ntransactions to mine; you want to stuff your 1MB block full of high\npaying transactions. That a child tx may make a parent more profitable\nto mine complicates things - Gavin's current fee estimator also makes\ntoo-low-estimates in that case - and not all algorithms to do so will\ncome to the same conclusion. (doing it perfectly is something like\nO(n^2), and imperfectly is O(1) but doesn't handle multiple children\nwell)\n\nThere are some second-order effects, a block is less likely to be\norphaned if all transactions in it have propagated sufficiently, thus a\nminer should penalize very recently broadcast transactions. In addition\nbecause miners never orphan themselves large miners have a significant\nadvantage regarding orphan-inducing effects. However those effects all\ntend to be miner specific, and/or only temporary.\n\nFWIW the logic behind orphans is currently rather frightening: a\nrational miner will, the moment they learn that a block exists via the\nquickly propagating block header, start working to extend that block\nwith one that either doesn't contain any transactions, or only contains\ntransactions they can be reasonably sure another miner didn't mine.\n(e.g. via exclusive tx mining contracts) This boosts their profit\nbecause they aren't wasting their effort while the rest of the block\npropagates, removes much of the incentive have any limit on block size,\nand incentivizes miners to extend chains they haven't actually validated\nyet. (relying on the other miners incentive not to produce an invalid\nblock)\n\n> Contention might bump you out of a few blocks, but if the basis for\n> calculating the fee is fundamentally compatible with the relay\n> policies and the transaction-inclusion policies being run by large\n> mining pools, the transaction isn't dead, it's just pending.\n\nWith a size-limited blocks inclusion is more a matter of supply and\ndemand than policy.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000066c29f3319f83f1c6e912b5add5534da1b938c4c65a07b02a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/4df8f795/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-10-25T07:51:22",
                "message_text_only": "Gavin, can you confirm the best place to  read  up on the discuss fee  \nestimation changes for v0.9?\n\nI think fee estimation at its core is about providing a data point, or  \neven call it an API, which can be used however you see fit.\n\nWhat parameters do I want to see in a 'fee estimation' API?\n\n  - 30 minutes vs 24 hours processing time\n  - Confidence Levels (50%/90%)\n\nWhat properties does the result have?\n   - Is it globally consistent?\n\nTalking about fees.. I read this:  \nhttps://gist.github.com/gavinandresen/2961409 and there is so much there I  \nreally liked.\n\nAny pointers for reading more about the leading theories on transaction  \nfees? For example, how well do they correlate with network security? Are  \nwe getting what we are paying for? :-)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/91e5d419/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-25T22:49:38",
                "message_text_only": "On Fri, Oct 25, 2013 at 12:51:22AM -0700, Jeremy Spilman wrote:\n> Gavin, can you confirm the best place to  read  up on the discuss\n> fee estimation changes for v0.9?\n> \n> I think fee estimation at its core is about providing a data point,\n> or even call it an API, which can be used however you see fit.\n> \n> What parameters do I want to see in a 'fee estimation' API?\n> \n>  - 30 minutes vs 24 hours processing time\n>  - Confidence Levels (50%/90%)\n> \n> What properties does the result have?\n>   - Is it globally consistent?\n> \n> Talking about fees.. I read this:\n> https://gist.github.com/gavinandresen/2961409 and there is so much\n> there I really liked.\n\nState-of-the-art thinking has changed a lot; that document is over a\nyear old and needs significant changes to update it.\n\n> Any pointers for reading more about the leading theories on\n> transaction fees? For example, how well do they correlate with\n> network security? Are we getting what we are paying for? :-)\n\nNetwork security is currently funded by inflation rather than\ntransaction fees. This is likely to remain true for at least a few more\nyears. FWIW the cost of that security on a per transaction basis is\nabout $18, see http://blockchain.info/charts/cost-per-transaction\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000009b86605cc3235f2674600d5131dd437d941b479e78588177b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/d58a7282/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-26T00:25:06",
                "message_text_only": "On Fri, Oct 25, 2013 at 5:51 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> **\n> Gavin, can you confirm the best place to  read  up on the discuss fee\n> estimation changes for v0.9?\n>\n\nThe blog post is the best place for high-level overview.\n\nThe (closed for now, but it will come back) pull request is the best place\nfor low-level details and nit-picking discussion:\n  https://github.com/bitcoin/bitcoin/pull/3024\n\n\n\n> I think fee estimation at its core is about providing a data point, or\n> even call it an API, which can be used however you see fit.\n>\n> What parameters do I want to see in a 'fee estimation' API?\n>\n>  - 30 minutes vs 24 hours processing time\n>  - Confidence Levels (50%/90%)\n>\n\nThe pull request adds an 'estimatefees' JSON-RPC api call:\n\n====\nestimatefees [prioritymedian=0.1] [feemedian=0.5]\nEstimates the priority or fee a transaction needs\nto be relayed across the network and included in\nthe block chain.\n\nprioritymedian and feemedian are values from 0.0\nto 1.0, where 0.0 will return the smallest\nrecently-included-in-a-block priority (or fee) seen,\n1.0 the largest, and 0.5 the median priority (or fee)\nfor transactions that were broadcast on the network and\nincluded in a block.\n\nThe default value for prioritymedian (0.1) is\nchosen to return a priority for free transactions that\nwill eventually be confirmed, but might take several hours.\nThe default value for feemedian (0.5) returns how much\nfee you should include to have your transactions confirmed\nin an average amount of time.\n\nValues returned are:\n freepriority : priority needed to out-compete a prioritymedian\n  fraction of free transactions to be relayed and included in blocks.\n feeperbyte : fee, in satoshis/byte, needed to out-compete a\n  feemedian fraction of fee-paying transactions.\n\nValues of -1.0 are returned if not enough transactions\nhave been seen to make a good estimate.\n====\n\nThat API doesn't give \"30 minute versus 24 hour\" confirmation time or\nconfidence intervals. I've always regretted not taking a statistics class;\nif you want to help write code that estimates confidence intervals send me\nan email. The API certainly isn't set in stone.\n\n  - Is it globally consistent?\n>\n\nUmmm.... roughly, yes, it will be. Nodes that have just joined the network\nand haven't seen enough transactions enter and leave the memory pool will\nhave a different estimate than long-running nodes, but in my testing the\nestimate narrows down very quickly (with three or four blocks enough\nfee-paying transactions have been seen to make a reasonable estimate; it\ntakes longer to see enough free transactions to get a good estimate of the\npriority needed to get into the free space of a block).\n\nRE: lots of other comments:\n\nI feel like there is a lot of \"in the weeds\" discussion here about\ntheoretical, what-if-this-and-that-happens-in-the-future scenarios.\n\nI would just like to point out (again) that this is not intended to be The\nOne True Solution For Transaction Fees And Transaction Prioritization. If\nyou've got a better mechanism for estimating fees, fantastic! If it turns\nout estimates are often-enough wrong to be a problem and you've got a\nsolution for that, fantastic!\n\nRE: are we already seeing pressure on transaction fees:\n\nI believe we are, yes. As part of the prep work for the smart fee work I\nspent some time plotting priority (for zero-fee transactions) and\ntransaction fee (for zero-priority transactions) versus confirmation time,\nand it looks to me like people/services are starting to include more than\nthe hard-coded fees in the reference implementation-- I assume because they\nwant their transactions to be confirmed more quickly.\n\nThere is definitely already competition among zero-fee transactions for the\n\"free\" block space. One of the reasons I'm comfortable with the fee changes\nI'm proposing is if the estimation code gets it very wrong we'll see that\nfirst as free transactions taking \"too long\" to confirm, but they'll\nconfirm eventually because priority increases over time.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/b5b80e6c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-26T07:28:27",
                "message_text_only": "On Sat, Oct 26, 2013 at 10:25:06AM +1000, Gavin Andresen wrote:\n> RE: lots of other comments:\n> \n> I feel like there is a lot of \"in the weeds\" discussion here about\n> theoretical, what-if-this-and-that-happens-in-the-future scenarios.\n\nUm... yeah. Note how I said on your original pull-req that I'd be happy\nto see it merged once the bugs were fixed (95% of the transactions it\nproduced had zero fees even with zero priority txins for some reason)\nand you added a lower bound on fees in the wallet code as a \"do no harm\"\nmeasure.\n\nIn fact, I think I wasn't being conservative enough given that it\naffects relaying of transactions. Instead add both lower and upper\nbounds to what the wallet and relaying code uses for 0.9.0 and it'd\nprobably be safe to merge.  We can get relax those \"training wheels\" in\n0.9.1 or 0.9.2 once we've had some real-world experience with how the\nestimation system works in practice, particularly for how it affects\nrelaying.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000036253c7a02061121b6a12484278a3c472a22e47a821c28a69\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/4477c3ab/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-10-28T07:17:50",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sat, Oct 26, 2013 at 12:25 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> I feel like there is a lot of \"in the weeds\" discussion here about\n> theoretical, what-if-this-and-that-happens-in-the-future scenarios.\n>\n> I would just like to point out (again) that this is not intended to be The\n> One True Solution For Transaction Fees And Transaction Prioritization. If\n> you've got a better mechanism for estimating fees, fantastic! If it turns\n> out estimates are often-enough wrong to be a problem and you've got a\n> solution for that, fantastic!\n\nThis discussion seems to be a lot of hot air over a simple observation that\nestimates are imperfect and always will be. I do not understand you vehement\nopposition the notion that a backup is a good thing except in the context that\nreplacement to change fees is halfway to profit-seeking replacement by fee.\n\n\nPeter Todd:\n\nYou did a fair bit of leg work for replace-by-fee. Seems to me that\nreplace-for-fee will help prep infrastructure to eventual replace-by-fee usage,\nwhile avoiding some of the politics around zero-conf transactions.\n\nGo dust off your code and make it happen. I want to see a mempool\nimplementation similar to what you did for me on replace-for-fee, and I\nunderstand much of the code is written in any case. This time I also want to\nsee a increasetxfee RPC command, and erasewallettx RPC command to deal with\nduplicates. (I know touching the wallet code is scary) Having all will enable\nusage, and I can imagine getting pools to use this will be easy enough.\n(eligius?)\n\nHere is your 4BTC bounty. In the event I am not around Gregory Maxwell can also\nadjudicate. If both you and him feel someone else deserves it, by all means\nsend them the funds\n\nbitcoind decodescript\n522102d527466a144aac2030cd16d8be3d91231af26a95c2f8fc345a0ea0e8d53ac3914104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae\n{\n    \"asm\" : \"2 02d527466a144aac2030cd16d8be3d91231af26a95c2f8fc345a0ea0e8d53ac391\n04d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e7141783\n04f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce4\n3 OP_CHECKMULTISIG\",\n    \"reqSigs\" : 2,\n    \"type\" : \"multisig\",\n    \"addresses\" : [\n        \"1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe\",\n        \"1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv\",\n        \"1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB\"\n    ],\n    \"p2sh\" : \"3BST1dPxvgMGL3d9GPCHvTyZNsJ7YKTVPo\"\n}\n\n(I realized right after my Tor payment protocol bounty that I would need some\nbit of uniqueness like a bounty-specific pubkey to disambiguate multiple such\nbounties!)\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSbg9wAAoJEEWCsU4mNhiPROQH/j+eWccx7oSVsr94cgGu7qza\nkdnA7B6BAlnCPg3D+nqEFKDqzOyFppeHLadCCIYHHc5iVRfJuu9J1Gh9lgMCuyCW\nqN7ZOBCARjiVOqrHPQR1pf18i0ko7dQWw2hZjy51XKuFxAsHwZpB/fzQCbVVzyB6\nl5SECCou58bJ/x7B0L93K+yjXuMGnvi9jqiLAKkLWYDzVm7TeVWNVQr04B7sqi6A\nmY+BfG61e7sqM2UJd69yGLeQdEfghYTmtA+EaaqYS0L11m7yFGZdUqD7UNy1FKO7\n44M1JTh2ANnQRjSTJWOBXQNHMa/mxDCji1VFUtJhZKEuOZyWpGm7HMH1D3vcvcQ=\n=4flN\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tamas Blummer",
                "date": "2013-10-25T16:40:08",
                "message_text_only": "Two thoughts:\n1. Please keep it simple, miner will override it either.\n2. If block construction algorithm compares alternate chains and not individual transactions,  then receiver can bump up the fee by spending the unconfirmed output again with higher fee, no need for replacement in the mempool.\n\nTamas Blummer"
            }
        ],
        "thread_summary": {
            "title": "Making fee estimation better",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tamas Blummer",
                "Andreas Petersson",
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Gavin Andresen",
                "Mark Friedenbach"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 37780
        }
    },
    {
        "title": "[Bitcoin-development] Fix available for startup issues for git HEAD nodes",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-10-24T14:34:03",
                "message_text_only": "\"DisconnectBlock() : outputs still spent? database corrupted\"\n\nIf you can't get your node up and running and see the above in your\ndebug.log there's a potential fix available:\n\nhttps://github.com/bitcoin/bitcoin/pull/3143\n\nBe warned: highly rushed and poorly tested, so you're best to ask a dev\nin IRC for more details.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000bf7bcf3da1b3b228216b72fefccbed84becaaba6fcc6aff2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/f37d44ea/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Fix available for startup issues for git HEAD nodes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 693
        }
    },
    {
        "title": "[Bitcoin-development] Proposal to replace BIP0039",
        "thread_messages": [
            {
                "author": "thomasV1 at gmx.de",
                "date": "2013-10-24T17:29:18",
                "message_text_only": "I would like to propose a new BIP, that replaces BIP0039.\n\nMy initial problem was that BIP0039 is not backward compatible with Electrum. When trying to solve that, I realized that the seed encoding used in Electrum does not help, because it does not contain a version number information. However, BIP0039 suffers the same shortcoming: it does nothing to help a future replacement, it wants to be final. My first recommendation is to allocate a few bits of the mnemonic, in order to encode a \"version number\" along with the checksum bits.\n\nThe second problem is the wallet structure. There are multiple ways to use a BIP32 tree, and each client will certainly handle this differently. For Electrum, it is important to be able to recover an entire wallet from its mnemonic, using no extra information. Thus, the client needs to know which branches of the BIP32 tree are populated by default. This means that the \"version number\" I mentioned will not only be about the seed encoding, but it should also give some information about the wallet structure, at least in the case of Electrum.\n\nThe third problem is the dictionary. I do not like the dictionary proposed in BIP0039, because it contains too many short words, which are bad for memorization (I explained here how I designed the dictionary used by Electrum: https://bitcointalk.org/index.php?topic=153990.msg2167909#msg2167909). I had some discussions with slush about this, but I do not think it will ever be possible to find a consensus on that topic. \n\nBIP0039 also suggests to use localized dictionaries, with non-colliding word lists, but it is not clear how that will be achieved; it seems to be difficult, because languages often have words in common. It looks like a first-come-first-served aproach will be used. \n\nFor these reasons, I believe that we need a dictionary-independent solution. This will allow developers to use the dictionary they like, and localization will be easy.\n\nI would like to suggest the following solution:\n\n1. Define a target of k bits: this target contains the metadata (\"version number\"), plus some extra bits for the checksum. For example, with k=16, we can allocate 8 bits for the version number, and 8 bits for checksum.\n\n2. Pick a random number of length n+k bits, where n is the desired entropy of the seed, and k is the number of bits needed for the metadata (checksum, version number)\n\n3. Translate this random number to a mnemonic string, using a dictionary.\n\n4. Compute a hash of the mnemonic string (utf8 encoded).\n\n5. Repeat steps 2, 3 and 4 until the k first bits of the hash are equal to the target defined in 1.\n\n6. Use the final hash as input for bip32 (as the master seed)\n\nThis means that we \"mine\" for the seed, until the desired metadata is obtained in the hash. This \"mining\" also adds a bit of difficulty to the process of finding a seed (on average, it will require 2^k iterations). The entropy of the final hash is n, the number of unconstrained bits.\n\nThis solution makes it possible for developers to define new dictionaries, localized or adapted to a particular need. \nThe resulting mnemonics will always be usable with other clients, even if they do not know the dictionary. \n\nI am willing to write a new BIP where this proposal is specified in detail."
            },
            {
                "author": "slush",
                "date": "2013-10-24T18:09:52",
                "message_text_only": "On Thu, Oct 24, 2013 at 7:29 PM, <thomasV1 at gmx.de> wrote:\n\n>\n> My initial problem was that BIP0039 is not backward compatible with\n> Electrum. When trying to solve that, I realized that the seed encoding used\n> in Electrum does not help, because it does not contain a version number\n> information. However, BIP0039 suffers the same shortcoming: it does nothing\n> to help a future replacement, it wants to be final. My first recommendation\n> is to allocate a few bits of the mnemonic, in order to encode a \"version\n> number\" along with the checksum bits.\n>\n>\nTwo years ago I proposed exactly this and you refused to add extra\ninformation to mnemonic, because \"it isn't necessary\" and \"it makes it\nlonger to mnemonization\". What changed since then?\n\n\n> The second problem is the wallet structure. There are multiple ways to use\n> a BIP32 tree, and each client will certainly handle this differently. For\n> Electrum, it is important to be able to recover an entire wallet from its\n> mnemonic, using no extra information. Thus, the client needs to know which\n> branches of the BIP32 tree are populated by default. This means that the\n> \"version number\" I mentioned will not only be about the seed encoding, but\n> it should also give some information about the wallet structure, at least\n> in the case of Electrum.\n>\n>\nHm, what exactly do you need to store about wallet structure? I lived in\nopinion that everything is able to recover using CKD function to generate\nnew addresses and blockchain lookups for their balances.\n\n\n> The third problem is the dictionary. I do not like the dictionary proposed\n> in BIP0039, because it contains too many short words, which are bad for\n> memorization (I explained here how I designed the dictionary used by\n> Electrum:\n> https://bitcointalk.org/index.php?topic=153990.msg2167909#msg2167909). I\n> had some discussions with slush about this, but I do not think it will ever\n> be possible to find a consensus on that topic.\n>\n>\nYes, that's true. It isn't possible to make everybody 100% happy. At least\nI wanted to be constructive and asked you to replace the most problematic\nwords. No pull request from you so far.\n\n\n> BIP0039 also suggests to use localized dictionaries, with non-colliding\n> word lists, but it is not clear how that will be achieved; it seems to be\n> difficult, because languages often have words in common. It looks like a\n> first-come-first-served aproach will be used.\n>\n>\nYes, it was original idea. So far I don't think this is a problem. Of\ncourse some words may have some meaning across languages, but it should be\neasy to avoid them. There are tens of thousands words in every language and\nwe need to pick \"only\" 2048 words to wordlist.\n\n\n> For these reasons, I believe that we need a dictionary-independent\n> solution. This will allow developers to use the dictionary they like, and\n> localization will be easy.\n>\nI would like to suggest the following solution:\n>\n>\nIf I understand this well, it is basically one-way algorithm \"mnemonic ->\nseed\", right? Seed cannot be printed out as mnemonic, because there's\nhashing involved, but the bi-directionality has been the original\nrequirement for such algorithm (at least in Electrum and bip39).\n\nThen, how is this different to picking 12 random words from dictionary and\nhashing them together? I don't see any benefit in that \"mining\" part of the\nproposal (except that it is lowering the entropy for given length of\nmnemonic).\n\n\n> This solution makes it possible for developers to define new dictionaries,\n> localized or adapted to a particular need.\n>\n\nAre your worries about overlapping words across languages a real issue?\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/05ebacd9/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-10-25T09:27:24",
                "message_text_only": "slush wrote :\n> Two years ago I proposed exactly this and you refused to add extra \n> information to mnemonic, because \"it isn't necessary\" and \"it makes it \n> longer to mnemonization\". What changed since then?\n\nI was wrong, and I fully acknowledge it.\n\nMy concern was that adding extra information would make the mnemonic \nlonger than 12 words.\nIn addition, you proposed to allocate these extra bits for a checksum, \nnot for metadata.\nHowever, a checksum does not really add any information, because \nElectrum checks the existence of a wallet directly from the blockchain.\nSo, my feeling at that time was that adding extra bits would increase \nthe risks (a longer seed is harder to memorize, increases the \nprobability of mistakes, etc), and did not bring any real benefit.\n\nHowever, you showed since then how to solve this by using a slightly \nlonger dictionary, and I do like your solution, I find it absolutely \nbrilliant.\nIn addition, I realize now that metadata (ie a \"version number\") is \ncrucially needed, for the reasons mentioned in my previous post.\n\n> Hm, what exactly do you need to store about wallet structure? I lived \n> in opinion that everything is able to recover using CKD function to \n> generate new addresses and blockchain lookups for their balances.\n\nBIP32 gives a lot of freedom to wallet developers: it does not specify \nwhich branches of the HD tree shall be used for which purpose.\n\nHowever, if you want to recover a wallet from its mnemonic (a \nrequirement for Electrum), then you need to know which branches to explore.\nIn Electrum 1.9 I had to make some choices about branch allocation. \nHowever, the decisions that I made are certainly not final, so it is \nimportant to be able to change them in the future. Thus, this metadata \nneeds to be added to the mnemonic.\n\n\n>  Yes, that's true. It isn't possible to make everybody 100% happy. At \n> least I wanted to be constructive and asked you to replace the most \n> problematic words. No pull request from you so far.\n\nThe solution I propose is very different from BIP39, and it does not \nrequire to predefine a dictionary.\nMy proposal is actually somewhat similar to Pieter Wuille's proposal, \nwhich I discovered after his recent post.\n( https://bitcointalk.org/index.php?topic=102349.0 )\n\n>  Yes, it was original idea. So far I don't think this is a problem. Of \n> course some words may have some meaning across languages, but it \n> should be easy to avoid them. There are tens of thousands words in \n> every language and we need to pick \"only\" 2048 words to wordlist.\n> ...\n> Are your worries about overlapping words across languages a real issue?\n\nNo, there are not so many words that are frequent enough.\nOverlapping will be an issue, especially if we go for a 4096 words \ndictionary.\n\n\n> If I understand this well, it is basically one-way algorithm \"mnemonic \n> -> seed\", right? Seed cannot be printed out as mnemonic, because \n> there's hashing involved, but the bi-directionality has been the \n> original requirement for such algorithm (at least in Electrum and bip39).\n\nYou are right, this encoding is not symmetric.\nBi-directionality has never been a requirement for Electrum. May I ask \nwhy you need bi-directionality in Trezor?\n(the only reason I can think of is if you want to export a bip32 branch \ninto another wallet, but this would create a very long mnemonic string)\n\n> Then, how is this different to picking 12 random words from dictionary \n> and hashing them together? I don't see any benefit in that \"mining\" \n> part of the proposal (except that it is lowering the entropy for given \n> length of mnemonic).\n\nit makes it possible to hash a utf8 string, and to retrieve the metadata \nfrom the hash.\nThus we don't need to spend ages arguing about the best choice of a \ndictionary, and to set it in stone."
            },
            {
                "author": "slush",
                "date": "2013-10-24T18:54:53",
                "message_text_only": "On Thu, Oct 24, 2013 at 7:29 PM, <thomasV1 at gmx.de> wrote:\n>\n> My initial problem was that BIP0039 is not backward compatible with\n> Electrum. When trying to solve that, I realized that the seed encoding used\n> in Electrum does not help, because it does not contain a version number\n> information. However, BIP0039 suffers the same shortcoming: it does nothing\n> to help a future replacement, it wants to be final. My first recommendation\n> is to allocate a few bits of the mnemonic, in order to encode a \"version\n> number\" along with the checksum bits.\n>\n>\nOn topic of \"it wants to be final\" and \"it is incompatible with Electrum\":\nNone of this is true. Firstly, it *is* possible to implement both algorithm\ninto the client at the same time, so user will be able to recover wallet\nusing Electrum or bip39 mnemonic and - what is worse - you already *know*\nabout this solution. Still you're spreading FUD about it on IRC, on emails\nbehind my back and here on mailing list.\n\nThe solution for Electrum client - as we discussed two weeks ago on IRC -\nis that:\n\na) User type down the mnemonic (created with Electrum or BIP39)\nb1) Only if *all* words are presented in both dictionaries and it has valid\nBIP39 checksum (which is quite rare situation itself!), the mnemonic can be\nconsider to be both Electrum or BIP39.\nb2) In most of cases we end up here, because the most common situation is\nthat with given words, only Electrum *or* BIP39 seed can be recovered.\n----\nc) Consider the mnemonic as Electrum. Create first few addresses and do a\nlookup. If there are transactions in address history, this is Electrum\nmnemonic.\nd) If there were no used address in c), build seed using BIP39 and do the\nsame lookup. If there's history, this is BIP39 mnemonic.\ne) If there are no history on both algorithm, then pick prefered one for\ngiven client (it should not hurt which one, because first use of given\nmnemonic will \"freeze\" given algorithm for next time of mnemonic recovery).\n\nWell, because only Electrum uses some mnemonic algorithm to this date, such\ndecision tree need to be implemented only in Electrum. You cannot tell that\n\"it is too complicated\" or \"ambiguous\", because you're using the same\nalgorithm of deciding between Electrum deterministic / BIP32.\n\nI must admit that I'm quite annoyed of such discussion, because we already\ndiscussed all this privately, you didn't tell me any reason why this should\nnot work and still I see that this is coming back as a boomerang.\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/d8ba8bd2/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-10-26T15:24:50",
                "message_text_only": "here is a simple implementation, with some ideas on how to format the \nmetadata:\nhttps://en.bitcoin.it/wiki/Talk:BIP_0039"
            },
            {
                "author": "slush",
                "date": "2013-10-26T20:47:41",
                "message_text_only": "Hi Thomas,\n\ncan you more elaborate on that \"version\" bits? What is exact meaning of it?\nI still think this is more an implementation problem. What stops Electrum\nto do the same algorithm for searching branches as it is now for used\naddresses?\n\nThese \"version bits\" need to be covered by the specification as well,\nbecause if any client will use them differently (or won't use them at all),\nit will break cross-compatibility between clients, which was another goal\nof bip39.\n\nMarek\n\n\n\n\nOn Sat, Oct 26, 2013 at 5:24 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n\n> here is a simple implementation, with some ideas on how to format the\n> metadata:\n> https://en.bitcoin.it/wiki/Talk:BIP_0039\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/0bdf1770/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-10-26T21:30:37",
                "message_text_only": "Let's first try to agree on what we are solving.\n\nIt seems that Thomas wants - in addition to the cryptographic data -\nto encode the tree structure, or at least version information about\nwhat features are used in it, inside the seed.\n\nI'm not sure whether we're ready to standardize on something like that\nyet, not having established best practices regarding different wallet\nstructures. I do think we first need to see what possibilities and\ndevelopments are possible related to it.\n\nIn addition, information about the wallet structure is strictly less\nsecret than the key data - it is even less confidential than address\nbook data, transaction annotations, labels and comments and\nbookkeeping information. It could be backed up anywhere and everywhere\nwithout any repercussions, as far as I can see. I understand that in\nthe case of Electrum, there is a strong reason to want this\nencapsulated together with the seed, but it's not really a requirement\nfor most wallets.\n(if really needed, any key derivation scheme that starts from random\nstrings can be augmented with metadata by enforcing property-bits on a\nhash of the string (so not of the output), as this data doesn't need\nprotection from brute-forcing).\n\nRegarding other requirements, I wonder why we want the transformation\nto be bidirectional? If it is just about generating master seeds, one\ndirection should be enough, and allows far nicer properties w.r.t.\nsecurity. If we do settle on a standard for 'brainwallets', I would\nstrongly prefer if it had at least some strengthening built-in, to\ndecrease the impact of worst-case situations.\nIf the reason is backward-compatibility, I think that any client that\nsupports seeds already can just keep supporting whatever they\nsupported before. Only if it matches both encoding schemes (as\nmentioned before) there is a potential collision (and in that case,\nthe user could just be asked).\n\n-- \nPieter\n\n\nOn Sat, Oct 26, 2013 at 10:47 PM, slush <slush at centrum.cz> wrote:\n> Hi Thomas,\n>\n> can you more elaborate on that \"version\" bits? What is exact meaning of it?\n> I still think this is more an implementation problem. What stops Electrum to\n> do the same algorithm for searching branches as it is now for used\n> addresses?\n>\n> These \"version bits\" need to be covered by the specification as well,\n> because if any client will use them differently (or won't use them at all),\n> it will break cross-compatibility between clients, which was another goal of\n> bip39.\n>\n> Marek\n>\n>\n>\n>\n> On Sat, Oct 26, 2013 at 5:24 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>>\n>> here is a simple implementation, with some ideas on how to format the\n>> metadata:\n>> https://en.bitcoin.it/wiki/Talk:BIP_0039\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> October Webinars: Code for Performance\n>> Free Intel webinars can help you accelerate application performance.\n>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n>> from\n>> the latest Intel processors and coprocessors. See abstracts and register >\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-10-31T09:13:43",
                "message_text_only": "Indeed, I want to include a version number in the seed phrase because \nthere are\nmultiple ways to define the tree structure used with BIP32. It is \ncertainly too early\nto make final decisions on that, or to achieve a common standard.\nAlso, I can imagine that bip32 itself might be superseeded in the future.\n\nI understand that encapsulating a version number in the seed phrase might\nnot be as important for other wallets as it is for Electrum. So it is \nprobably not\nnecessary to propose another BIP for that. I will simply implement it \nfor Electrum,\nand I will try to do it in such a way that other wallets can use the \nsame format.\n\nThe other question we might be solving is strenghtening (your proposal). \nI consider\nthat this is not a strong requirement for Electrum, because it does not \nlet the user\nchoose their seed phrase. However, if a few bits of the seed phrase are \nallocated\nfor metadata, then I guess strenghtening can be part of it. That's \nanother good\nreason to have a version number encapsulated in the seed.\n\nI too wonder why the transformation needs to be bidirectional in bip39.\n\n\n\n\nLe 26/10/2013 23:30, Pieter Wuille a \u00e9crit :\n> Let's first try to agree on what we are solving.\n>\n> It seems that Thomas wants - in addition to the cryptographic data -\n> to encode the tree structure, or at least version information about\n> what features are used in it, inside the seed.\n>\n> I'm not sure whether we're ready to standardize on something like that\n> yet, not having established best practices regarding different wallet\n> structures. I do think we first need to see what possibilities and\n> developments are possible related to it.\n>\n> In addition, information about the wallet structure is strictly less\n> secret than the key data - it is even less confidential than address\n> book data, transaction annotations, labels and comments and\n> bookkeeping information. It could be backed up anywhere and everywhere\n> without any repercussions, as far as I can see. I understand that in\n> the case of Electrum, there is a strong reason to want this\n> encapsulated together with the seed, but it's not really a requirement\n> for most wallets.\n> (if really needed, any key derivation scheme that starts from random\n> strings can be augmented with metadata by enforcing property-bits on a\n> hash of the string (so not of the output), as this data doesn't need\n> protection from brute-forcing).\n>\n> Regarding other requirements, I wonder why we want the transformation\n> to be bidirectional? If it is just about generating master seeds, one\n> direction should be enough, and allows far nicer properties w.r.t.\n> security. If we do settle on a standard for 'brainwallets', I would\n> strongly prefer if it had at least some strengthening built-in, to\n> decrease the impact of worst-case situations.\n> If the reason is backward-compatibility, I think that any client that\n> supports seeds already can just keep supporting whatever they\n> supported before. Only if it matches both encoding schemes (as\n> mentioned before) there is a potential collision (and in that case,\n> the user could just be asked).\n>"
            },
            {
                "author": "slush",
                "date": "2013-10-31T10:41:27",
                "message_text_only": "Strange, I didn't receive the response from sipa in separate message, so\nI'll respond to him at first place.\n\nLe 26/10/2013 23:30, Pieter Wuille a \u00e9crit :\n> I'm not sure whether we're ready to standardize on something like that\n> yet, not having established best practices regarding different wallet\n> structures. I do think we first need to see what possibilities and\n> developments are possible related to it.\n\nAlthough many strange practices how to use whole bip32 space are possible,\nI think that we may (should?) agree on some \"good enough\" way how to\ndiscover already used addresses in bip32 space. I read Electrum sources\nabout bip32 and I see that Electrum still uses quite flat structure (fixed\namount of branches, indexes from 0 to n), which is of course very sane way.\n\nSo if I migrate seed to another (non-Electrum) software, I only need to\ndiscover close neighbourhood of the path \"0\", similarly like Electrum is\ndoing with \"gap limit\" in plain old Electrum algorithm, except in two\ndimensions (paths 0, 1, 2, 3, 4, 5, 0/0, 0/1, 0/2, 0/3, 0/4, 0/5, 1/0, 1/1,\n...5/5 for gap limit \"5\"). I don't say such operation is cheap, but this\ndiscovery needs to be done only during the import.\n\nFor the reason that I think this is the only sane algorithm of general use\nof bip32 space, I still don't see why we do need some extra metadata. I\nwould understand this if Electrum will use for some strange reason\naddresses in higher address space like 2^32-1 or so, but this is not going\nto happen at least in Electrum.\n\n> I understand that in\n> the case of Electrum, there is a strong reason to want this\n> encapsulated together with the seed, but it's not really a requirement\n> for most wallets.\n\nWell, I can imagine that the bip32 compatible software will do full scan of\naddress space using some gap factor (actually I think \"5\" is too low by\ndefault) or it can ask for wallet metadata like which software used such\ntree before, to speedup scanning process.\n\nI see that Thomas wants to make this automatic and hidden to user and\ngenerally I agree that hiding the compexity to user is a good practice, but\nactually this particular situation sounds to me as an exact oposite of\noriginal statement \"no metadata in mnemonic\".\n\n> Regarding other requirements, I wonder why we want the transformation\n> to be bidirectional? If it is just about generating master seeds, one\n> direction should be enough, and allows far nicer properties w.r.t.\n> security. If we do settle on a standard for 'brainwallets',\n\nECDSA has one very nice option - (almost) any random data can be used as a\nprivate key. There are very nice schemas possible by using this feature and\nrequiring private key to be specially crafted just because the user wanted\nto use mnemonic schema is very strong limitation to me.\n\nTo be specific, we (in cooperation with / inspired by Timo Hanke) developed\nmethod how to prove that the seed generated by Trezor has been created\nusing combination of computer-provided entropy and device-provided entropy,\nwithout leaking full private information to other computer, just because we\nwant Trezor to be blackbox-testable and fully deterministic (seed\ngeneration is currently the only operation which uses any source of RNG).\n\nTo limit the complexity of such algorithm it is better to produce plain\nseed (128, 192 or 256 bits, depends on settings) and then transform the\nresult of such \"deterministic seed\" to mnemonic, so for us the\nbi-directionality is quite strong requirement. *Maybe* it would be possible\nto combine such algorithm and one-way mnemonic together, but it would\ncomplicate the design and I'm sure you understand that we want to keep\nthings as clear and simple as possible, especially while handling with seed\ngeneration.\n\n> I would strongly prefer if it had at least some strengthening built-in, to\n> decrease the impact of worst-case situations.\n\nAgree (hardening is default in bip39).\n\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/35ff057a/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-31T11:07:58",
                "message_text_only": "On Thu, Oct 31, 2013 at 11:41:27AM +0100, slush wrote:\n> To be specific, we (in cooperation with / inspired by Timo Hanke) developed\n> method how to prove that the seed generated by Trezor has been created\n> using combination of computer-provided entropy and device-provided entropy,\n> without leaking full private information to other computer, just because we\n> want Trezor to be blackbox-testable and fully deterministic (seed\n> generation is currently the only operation which uses any source of RNG).\n\nI just wanted to say the fact that you're making key generation\nauditable, and using deterministic signatures, is a clear sign that you\nguys know what you're doing. Hearing this makes me a lot more confident\nthat the Trezor will prove to be a secure way to store my Bitcoins and\nmy pre-order will prove to be money well spent.\n\nKudos!\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000784d399e7c1d1e8f2fc953c6939b115699a1ee05029a59bc9\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/dc4940b1/attachment.sig>"
            },
            {
                "author": "slush",
                "date": "2013-10-31T11:11:02",
                "message_text_only": "On Thu, Oct 31, 2013 at 10:13 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n\n> Indeed, I want to include a version number in the seed phrase because\n> there are\n> multiple ways to define the tree structure used with BIP32. It is\n> certainly too early\n> to make final decisions on that, or to achieve a common standard.\n>\n\nWell, as we're the first pioneers of bip32, let's start using it in some\nsane way and I'm sure the others will join. Just because they don't want to\nincompatible software.\n\nActually I quite like that you're not wasting bip32 space by using some\ndynamic allocatons in higher address space, so I'm happy to follow your\nrules and I think we can agree on generic discover algorithm which maybe\nwon't be optimal, but will find all used addresses and won't need any\nadditional information directly in mnemonic.\n\nAs I wrote in previous post, in worst case I can imagine dropdown list on\nimport dialog, which will ask user which software has been handling the\nseed before, to speedup the scan. But for now I don't see this necessary at\nall.\n\nAlso, I can imagine that bip32 itself might be superseeded in the future.\n>\n>\nAlthough I can imagine that as well, I hope that it won't be the case. We\nneed to unite and integrate instead of making incompatible applications.\n\nOne disadvantage of bip32 is that in fact it is too much flexible, so we\neven falled into the necessity of defining version of discovery algorithm.\nLets set up best practices how to use it and other will follow instead of\ncreating zillion cross-incompatible algorithms which won't understand each\nto other.\n\n\n> The other question we might be solving is strenghtening (your proposal).\n> I consider\n> that this is not a strong requirement for Electrum, because it does not\n> let the user\n> choose their seed phrase. However, if a few bits of the seed phrase are\n>\n\nHardening and password protection are two unrelated requirements. Again,\nthere are some scenarios in which use can leak part of the mnemonic to\nattacker, so hardening prevent to bruteforce the rest information by\nattacker, even if the mnemonic isn't passphrase protected.\n\nI'm especially refering to our algorithm of mnemonic import to Trezor\nduring disaster recovery (when Trezor is destroyed and user wants to import\nthe seed to another one), so that leak isn't just a theoretical concept,\nbut real-word scenario.\n\n\n> allocated\n\nfor metadata, then I guess strenghtening can be part of it. That's\n> another good\n> reason to have a version number encapsulated in the seed.\n>\n\nActually creating optional features of such algorithm only make things\ncomplicated (and less cross-compatible). Every software still needs to\nimplement such hardening even if it is optional feature, to be compatible\nwith other clients. Then I don't see any reason why to have it optional.\n\nDon't forget that the proposal uses only 4 bits of version, which isn't too\nmuch combination for all these optional features ;-).\n\nI too wonder why the transformation needs to be bidirectional in bip39.\n>\n>\nWell, I wrote longer answer in previous  email. tl;dr; there's quite easy\nway how to make the algorithm bi-directional, so I don't see a necessity to\ndrop potentially useful feature for no good reason.\n\nI was thinking about your proposal and I realized that both our solutions\nsolves a bit different problem. Lets summarize features (and forget to\nwordlist fights for moment):\n\nbip39:\n+ bi-directional\n+ passphrase protected\n+ shorter mnemonic or shorter wordlist\n- predefined wordlist\n\nThomasV proposal:\n+ any software can has its own preferred worlist\n? passphrase protected\n- one-direction only\n- longer mnemonic or longer wordlist\n\nBack to wordlist fights\na) actually I think that the wordlist choice is far less important than it\nmay look at first glance. Thomas thinks that bip39 wordlist is disaster, me\nand many other thinks it is ok, but mainly that it is very subjective.\n\nb) I see the beauty of \"custom wordlists\" in Thomas proposal, still if it\nmeans the algorithm is uni-direction only, it is very strong disadvantage\nto our usecase.\n\nc) I advocated our wordlist mainly because we put a lot of effort into it\nand after many weeks of tuning it is already done; not because I think that\none method of picking the words is superior to other. I mean - if Thomas\ncan offer any other plain-english wordlist which he'll be happy with, I'll\nvote for dropping our own wordlist and to use Thomas's version for the deal\nthat he'll accept our need for bi-directionality and he agrees on the rest\nof bip39 ;-).\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/22ee437e/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-10-31T11:18:32",
                "message_text_only": "Oh, I forgot to one practical aspect; the way how the mnemonic is \"mined\"\nin Thomas proposal prevents usage in embedded devices, because difficulty\nof generating proper mnemonic is simply too high for embedded\nmicrocontrollers. Maybe this can be solved somehow by modifying the\nproposal, but right now it is a showstopper for us.\n\nMarek\n\nOn Thu, Oct 31, 2013 at 12:11 PM, slush <slush at centrum.cz> wrote:\n\n>\n> bip39:\n> + bi-directional\n> + passphrase protected\n> + shorter mnemonic or shorter wordlist\n> - predefined wordlist\n>\n> ThomasV proposal:\n> + any software can has its own preferred worlist\n> ? passphrase protected\n> - one-direction only\n> - longer mnemonic or longer wordlist\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/315b5ef0/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-24T21:55:22",
                "message_text_only": "On Thursday, October 24, 2013 5:29:18 PM thomasV1 at gmx.de wrote:\n> I would like to propose a new BIP, that replaces BIP0039.\n\nBIP 39 is still a draft. Just suggest revisions to the author(s)..."
            }
        ],
        "thread_summary": {
            "title": "Proposal to replace BIP0039",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Thomas Voegtlin",
                "slush",
                "thomasV1 at gmx.de",
                "Peter Todd",
                "Pieter Wuille"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 33386
        }
    },
    {
        "title": "[Bitcoin-development] BIP0039 Mnemonic code for generating deterministic keys",
        "thread_messages": [
            {
                "author": "slush",
                "date": "2013-10-24T18:26:47",
                "message_text_only": "We've reflected many comments about BIP39 wordlist from the community and I\nthink the wordlist is much better now. Specifically we removed many of\ntheoretically offensive words as well as we implemented algorithm for\ndetecting words with similar characters (cat/eat) and we resolved these\nduplicities. I'm now quite happy with the wordlist and I want to ask you\nfor next (final?) round of comments.\n\n>From other features, we added password protection of seed and seed\nhardening (against bruteforcing) using Rijndael cipher. This has been\nchosen because its blocksize can be 128, 192 or 256 bits, so it fits length\nof desired seeds. Also there are Rijndael implementations in every\nlanguage. Btw password protection has one interesting feature - plausible\ndeniability. It allows user to have one mnemonic and by using it with\ndifferent passwords, it will generate different BIP32 wallets.... (wink\nwink)\n\nI want to be pretty clear that we need to close this topic somehow, because\nwe want to use such algorithm in Trezor (which deadline is coming quick)\nand also other wallet developers want to implement such algorithm into\nclients to be compatible with Trezor. There were quite strict requirements\nfor such algorithm (like the possibility to convert mnemonic to seed as\nwell as seed to mnemonic) and I think we found a good solution. I'm wildly\nasking you for constructive comments, but saying \"it's a crap, I don't like\nit\" won't help anything.\n\nThanks,\nslush\n\n\nOn Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell <\nmatthewmitchell at godofgod.co.uk> wrote:\n\n> I removed some more but I haven't added enough back in. It was taking far\n> longer than expected so I gave up, but maybe someone else can try to add\n> some more:\n>\n>\n> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt\n>\n> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:\n>\n> > On 10/09/13 23:03, Matthew Mitchell wrote:\n> >> Maybe it would have been better without the aggressive words?\n> >\n> > I revisited the wordlist and replaced around 67 words that can be\n> > found offensive in some context.\n> >\n> > --\n> > Best Regards / S pozdravom,\n> >\n> > Pavol Rusnak <stick at gk2.sk>\n> >\n> >\n> ------------------------------------------------------------------------------\n> > How ServiceNow helps IT people transform IT departments:\n> > 1. Consolidate legacy IT systems to a single system of record for IT\n> > 2. Standardize and globalize service processes across IT\n> > 3. Implement zero-touch automation to replace manual, redundant tasks\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> How ServiceNow helps IT people transform IT departments:\n> 1. Consolidate legacy IT systems to a single system of record for IT\n> 2. Standardize and globalize service processes across IT\n> 3. Implement zero-touch automation to replace manual, redundant tasks\n> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c69dcea3/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-10-24T19:23:51",
                "message_text_only": "This is probably too late in the discussion, and I certainly don't\nwant to derail any standard being formed. But if it is controversial,\nI want to offer my own suggestion.\n\nThis is a proposal I wrote a year ago, but never spent enough work to\npush it as a standard:\nhttps://bitcointalk.org/index.php?topic=102349.0\n\nIt needs some work, but I believe it may be a base for a superior\nsystem than what is being proposed here. As the scheme linked above\nhas built-in configurable difficulty and checksums, the word set being\nused doesn't need to function for checking anymore. You could use any\ndictionary/language/text generator, and feed it into the system - the\nsoftware on the other side doesn't need to use the same dictionary.\n\nThe disadvantage is of course that it cannot encode arbitrary data -\nit can only be used to generate a random seed. It does have some\ntheoretical advantages, though (see link).\n\n-- \nPieter\n\n\nOn Thu, Oct 24, 2013 at 8:26 PM, slush <slush at centrum.cz> wrote:\n> We've reflected many comments about BIP39 wordlist from the community and I\n> think the wordlist is much better now. Specifically we removed many of\n> theoretically offensive words as well as we implemented algorithm for\n> detecting words with similar characters (cat/eat) and we resolved these\n> duplicities. I'm now quite happy with the wordlist and I want to ask you for\n> next (final?) round of comments.\n>\n> From other features, we added password protection of seed and seed hardening\n> (against bruteforcing) using Rijndael cipher. This has been chosen because\n> its blocksize can be 128, 192 or 256 bits, so it fits length of desired\n> seeds. Also there are Rijndael implementations in every language. Btw\n> password protection has one interesting feature - plausible deniability. It\n> allows user to have one mnemonic and by using it with different passwords,\n> it will generate different BIP32 wallets.... (wink wink)\n>\n> I want to be pretty clear that we need to close this topic somehow, because\n> we want to use such algorithm in Trezor (which deadline is coming quick) and\n> also other wallet developers want to implement such algorithm into clients\n> to be compatible with Trezor. There were quite strict requirements for such\n> algorithm (like the possibility to convert mnemonic to seed as well as seed\n> to mnemonic) and I think we found a good solution. I'm wildly asking you for\n> constructive comments, but saying \"it's a crap, I don't like it\" won't help\n> anything.\n>\n> Thanks,\n> slush\n>\n>\n> On Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell\n> <matthewmitchell at godofgod.co.uk> wrote:\n>>\n>> I removed some more but I haven't added enough back in. It was taking far\n>> longer than expected so I gave up, but maybe someone else can try to add\n>> some more:\n>>\n>>\n>> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt\n>>\n>> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:\n>>\n>> > On 10/09/13 23:03, Matthew Mitchell wrote:\n>> >> Maybe it would have been better without the aggressive words?\n>> >\n>> > I revisited the wordlist and replaced around 67 words that can be\n>> > found offensive in some context.\n>> >\n>> > --\n>> > Best Regards / S pozdravom,\n>> >\n>> > Pavol Rusnak <stick at gk2.sk>\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > How ServiceNow helps IT people transform IT departments:\n>> > 1. Consolidate legacy IT systems to a single system of record for IT\n>> > 2. Standardize and globalize service processes across IT\n>> > 3. Implement zero-touch automation to replace manual, redundant tasks\n>> >\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> How ServiceNow helps IT people transform IT departments:\n>> 1. Consolidate legacy IT systems to a single system of record for IT\n>> 2. Standardize and globalize service processes across IT\n>> 3. Implement zero-touch automation to replace manual, redundant tasks\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "slush",
                "date": "2013-10-24T19:46:57",
                "message_text_only": "On Thu, Oct 24, 2013 at 9:23 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>\n> This is a proposal I wrote a year ago, but never spent enough work to\n> push it as a standard:\n> https://bitcointalk.org/index.php?topic=102349.0\n>\n>\nI think that PoW concept in your proposal is quite smart! However the\nproblem that it isn't bidirectional; it don't allow to convert back and\nforth between mnemonic and seed, which was one of basic requirement for\nsuch algorithm.\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c0ec8fb3/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-10-24T19:32:26",
                "message_text_only": "This will probably sound stupid to most of you, but I'll say it anyway.\n\nThe aim of mnemonics is to easily remember, isn't it?\nBut the approach of removing \"offensive words\" is probably\ncounterproductive to achieving that end. These words cause a greater\nemotional impact in our human moral psyches.\nIf we were willing to use that fact in our advantage to optimize the\n\"maximum unforgettableness\" criterion, we should actually prefer the\nmost generally offensive words in that list. Specially if they can\ncombine with each other to produce more offensive results, basically\nthe opposite of what we're doing.\n\nIsn't \"legalize murder dirty jew\" much easier to remember for most\npeople than \"sandwich house yellow cauliflower\"?\n\nI guess that even if I'm right, this will be hard to explain to users\nand I'm not offering myself to do it. So I completely understand if\nthe people working on this BIP simply ignore this \"unforgettable\nwordlist\" proposal like if it was just a bad taste joke.\nUsing the sub-optimal (in terms of human memory) politically correct\nwordlist probably won't be that much worse.\n\n\nOn 10/24/13, slush <slush at centrum.cz> wrote:\n> We've reflected many comments about BIP39 wordlist from the community and I\n> think the wordlist is much better now. Specifically we removed many of\n> theoretically offensive words as well as we implemented algorithm for\n> detecting words with similar characters (cat/eat) and we resolved these\n> duplicities. I'm now quite happy with the wordlist and I want to ask you\n> for next (final?) round of comments.\n>\n> >From other features, we added password protection of seed and seed\n> hardening (against bruteforcing) using Rijndael cipher. This has been\n> chosen because its blocksize can be 128, 192 or 256 bits, so it fits length\n> of desired seeds. Also there are Rijndael implementations in every\n> language. Btw password protection has one interesting feature - plausible\n> deniability. It allows user to have one mnemonic and by using it with\n> different passwords, it will generate different BIP32 wallets.... (wink\n> wink)\n>\n> I want to be pretty clear that we need to close this topic somehow, because\n> we want to use such algorithm in Trezor (which deadline is coming quick)\n> and also other wallet developers want to implement such algorithm into\n> clients to be compatible with Trezor. There were quite strict requirements\n> for such algorithm (like the possibility to convert mnemonic to seed as\n> well as seed to mnemonic) and I think we found a good solution. I'm wildly\n> asking you for constructive comments, but saying \"it's a crap, I don't like\n> it\" won't help anything.\n>\n> Thanks,\n> slush\n>\n>\n> On Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell <\n> matthewmitchell at godofgod.co.uk> wrote:\n>\n>> I removed some more but I haven't added enough back in. It was taking far\n>> longer than expected so I gave up, but maybe someone else can try to add\n>> some more:\n>>\n>>\n>> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt\n>>\n>> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:\n>>\n>> > On 10/09/13 23:03, Matthew Mitchell wrote:\n>> >> Maybe it would have been better without the aggressive words?\n>> >\n>> > I revisited the wordlist and replaced around 67 words that can be\n>> > found offensive in some context.\n>> >\n>> > --\n>> > Best Regards / S pozdravom,\n>> >\n>> > Pavol Rusnak <stick at gk2.sk>\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > How ServiceNow helps IT people transform IT departments:\n>> > 1. Consolidate legacy IT systems to a single system of record for IT\n>> > 2. Standardize and globalize service processes across IT\n>> > 3. Implement zero-touch automation to replace manual, redundant tasks\n>> >\n>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> How ServiceNow helps IT people transform IT departments:\n>> 1. Consolidate legacy IT systems to a single system of record for IT\n>> 2. Standardize and globalize service processes across IT\n>> 3. Implement zero-touch automation to replace manual, redundant tasks\n>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "slush",
                "date": "2013-10-24T19:37:43",
                "message_text_only": "On Thu, Oct 24, 2013 at 9:32 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> This will probably sound stupid to most of you, but I'll say it anyway.\n>\n> The aim of mnemonics is to easily remember, isn't it?\n>\n\nWell, I would say more \"retype\" than \"remember\". I really don't think that\ncommon user will memorize it. But of course, it is still an option.\n\n\n> But the approach of removing \"offensive words\" is probably\n> counterproductive to achieving that end. These words cause a greater\n> emotional impact in our human moral psyches.\n>\n\nNo, I dont' think it is stupid! Actually it was my concern as well.\nUnfortunately I don't think it is \"politically correct\" to include all\nbitches, assholes and motherfuckers in end user product :-).\n\n\n> If we were willing to use that fact in our advantage to optimize the\n> \"maximum unforgettableness\" criterion, we should actually prefer the\n> most generally offensive words in that list. Specially if they can\n> combine with each other to produce more offensive results, basically\n> the opposite of what we're doing.\n\n\n> Isn't \"legalize murder dirty jew\" much easier to remember for most\n> people than \"sandwich house yellow cauliflower\"?\n>\n>\nWell, bip39 can have more dictionaries and *maybe* swearword dictionary\nwould gain some popularity ;).\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/af3f3b9b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP0039 Mnemonic code for generating deterministic keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Jorge Tim\u00f3n",
                "slush"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 15742
        }
    },
    {
        "title": "[Bitcoin-development] BIP 38",
        "thread_messages": [
            {
                "author": "Mike Caldwell",
                "date": "2013-10-25T18:50:10",
                "message_text_only": "Hey everyone,\n\nI have noticed that there was a recent change to BIP 0038 (Password-Protected Private Key) on the Wiki, which is a proposal I wrote in late 2012.  Gregory, it looks to me as though you have made this change, and I'm hoping for your help here.  The change suggests that the number was never assigned, and that there has been no discussion regarding the proposal on this list.\n\nI had this number assigned by Amir Taaki in November of 2012, consistent with what I understood the procedure to be at the time by reading BIP 0001 on the Wiki.\n\nFirst off, I want to confirm that when I send to the list, that there isn't a technical reason it's not getting to everybody.  I believe I most recently mentioned BIP 38 to this list on August 17, 2013. (EDIT: seems my prior messages, including an earlier revision of this message, have not made it to the list)\n\nSecondly, in the case that it is deemed that this has never been properly submitted, discussed, or pushed forward, I'd like to propose that this happen, and request help with the formalities where I'm lacking.\n\nI believe BIP 38 is a valuable proposal that is seeing real-world use.  BIP 38 allows people to create private keys (including paper wallets) protected by a password, and also allows one party to select the password for paper wallets to be created by another party.\n\nReal-world use includes a working implementation at BitAddress.org, one at Bit2Factor.org, implementation by Mycelium, and others.  Also, others are informally using it as a sort of abbreviated escrow scheme where a buyer and seller agree on the buyer maintaining control over the release of funds.  In short, it would be terribly confusing to reassign the number BIP 38 after already having had an established meaning for the better part of the year, particularly on what appears to be procedural grounds.\n\nMike\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/eee52f9d/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-25T20:05:04",
                "message_text_only": "On Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell\n<mcaldwell at swipeclock.com> wrote:\n> I have noticed that there was a recent change to BIP 0038\n> (Password-Protected Private Key) on the Wiki, which is a proposal I wrote in\n> late 2012.  Gregory, it looks to me as though you have made this change, and\n> I\u2019m hoping for your help here.  The change suggests that the number was\n> never assigned, and that there has been no discussion regarding the proposal\n> on this list.\n\nGreetings, (repeating from our discussion on IRC)\n\nNo prior messages about your proposal have made it to the list, and no\nmention of the assignment had been made in the wiki.\n\nThe first I ever heard of this scheme was long after you'd written the\ndocument when I attempted to assign the number to something else then\nnoticed something existed at that name.\n\nSince you had previously created BIP documents without public\ndiscussion (e.g. \"BIP 22\"\nhttps://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder\ndid your emails just get eaten that time too?), I'd just assumed\nsomething similar had happened here.\n\nI didn't take any action at the time I first noticed it, but after\nsomeone complained about bitcoin-qt \"not confirming with BIP38\" to me\ntoday it was clear to me that people were confusing this with\nsomething that was \"officially\" (as much as anything is) supported, so\nI moved the document out.  (I've since moved it back, having heard\nfrom you that you thought that it had actually been\nassigned/announced).\n\nWith respect to moving it forward: Having a wallet which can only a\nsingle address is poor form. Jean-Paul Kogelman has a draft proposal\nwhich is based on your BIP38 work though the encoding scheme is\ndifferent, having been revised in response to public discussion.\n\nPerhaps efforts here can be combined?"
            },
            {
                "author": "Mike Caldwell",
                "date": "2013-10-25T20:46:50",
                "message_text_only": "Gregory,\n\nNo problem, thanks for providing the IRC recap, and glad I've finally made \"radio contact\" with the list.  Perhaps there can be some long overdue discussion on the topic.\n\nI see Kogelman's improvements to my proposal as being of merit and may very well be sufficient to supersede what I've originally proposed.  I suppose the main thing I'm wanting to ensure is that the identity of my original proposal is maintained.  Regardless of whether a paper wallet or physical bitcoin with a single address is poor form or whether my proposal is rejected or superseded, I hope there can be a consensus that \"BIP38\" can continue to be understood to mean \"Password-protected private key proposal by Mike Caldwell\", and that it can appear in the lists of BIPs alongside others.\n\nRegarding \"BIP 22\"... I in fact did not originally attempt to post to the list over what I had created and called BIP 22 once upon a time, I literally just created a wiki entry contrary to advice in BIP 1 that I had not read at the time.  I recognize it's totally legitimate to feel and act upon the appearance that BIP 38 was created in a similar shortcut fashion.  Certainly, the next thing I propose will be in the form of a draft outside the BIP \"numberspace\" and I won't solicit a BIP number without an established consensus in the future.  That said, I'm asking for BIP 38 to stand and be recognized as in existence, so as to not confuse those who call it by that name and who have already chosen to do something with it (whether that's to implement it, or to draft improvements to it like Kogelman).\n\nIf I did BIP 38 over again, there's a couple shortcomings of my own that I wouldn't mind seeing addressed in another iteration, and the right venue for that may very well be to contribute to Kogelman's work.  My particular improvements might include wanting the ability to outsource the computationally expensive step to another service at a minimized risk to the user, potentially the ability to have special-purpose \"encrypted minikeys\" (sort of how ARM has Thumb for places where the tradeoff makes sense), and a typo check with better privacy (I currently use sha256(address)[0...3] which may unintentionally reveal the bitcoin address, if it's funded, to someone who has the encrypted key but doesn't know the password).\n\nmike\n\n\n\n-----Original Message-----\nFrom: Gregory Maxwell [mailto:gmaxwell at gmail.com]\nSent: Friday, October 25, 2013 2:05 PM\nTo: Mike Caldwell\nCc: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] BIP 38\n\nOn Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell <mcaldwell at swipeclock.com> wrote:\n> I have noticed that there was a recent change to BIP 0038 \n> (Password-Protected Private Key) on the Wiki, which is a proposal I \n> wrote in late 2012.  Gregory, it looks to me as though you have made \n> this change, and I\u2019m hoping for your help here.  The change suggests \n> that the number was never assigned, and that there has been no \n> discussion regarding the proposal on this list.\n\nGreetings, (repeating from our discussion on IRC)\n\nNo prior messages about your proposal have made it to the list, and no mention of the assignment had been made in the wiki.\n\nThe first I ever heard of this scheme was long after you'd written the document when I attempted to assign the number to something else then noticed something existed at that name.\n\nSince you had previously created BIP documents without public discussion (e.g. \"BIP 22\"\nhttps://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder did your emails just get eaten that time too?), I'd just assumed something similar had happened here.\n\nI didn't take any action at the time I first noticed it, but after someone complained about bitcoin-qt \"not confirming with BIP38\" to me today it was clear to me that people were confusing this with something that was \"officially\" (as much as anything is) supported, so I moved the document out.  (I've since moved it back, having heard from you that you thought that it had actually been assigned/announced).\n\nWith respect to moving it forward: Having a wallet which can only a single address is poor form. Jean-Paul Kogelman has a draft proposal which is based on your BIP38 work though the encoding scheme is different, having been revised in response to public discussion.\n\nPerhaps efforts here can be combined?"
            }
        ],
        "thread_summary": {
            "title": "BIP 38",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Caldwell",
                "Gregory Maxwell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 8209
        }
    },
    {
        "title": "[Bitcoin-development] Feedback requested: \"reject\" p2p message",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-10-26T00:34:51",
                "message_text_only": "Mike Hearn has been lobbying for an \"error\" message in the Bitcoin p2p\nprotocol for years (at least since the \"ban peers if they send us garbage\"\ndenial-of-service mitigation code was pull-requested). This came up again\nwith my proposed \"smartfee\" changes, which would drop low-priority or\nlow-fee transactions.\n\nIn short, giving peers feedback about why their blocks or transactions are\ndropped or why they are being banned should help interoperability between\ndifferent implementations, and will give SPV (simplified payment\nverification) clients feedback when their transactions are rejected due to\ninsufficient priority or fees.\n\nSee the gist for details, I'm looking for feedback and planning on\nimplementing this before circling back to finish the 'smart fee' work:\n\n   https://gist.github.com/gavinandresen/7079034\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/86e9867d/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-10-26T01:01:49",
                "message_text_only": "Would it make sense to use either fixed length strings or maybe even enums?\n\nOn Oct 25, 2013, at 05:34 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\nMike Hearn has been lobbying for an \"error\" message in the Bitcoin p2p protocol for years (at least since the \"ban peers if they send us garbage\" denial-of-service mitigation code was pull-requested). This came up again with my proposed \"smartfee\" changes, which would drop low-priority or low-fee transactions.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/eeabfe72/attachment.html>"
            },
            {
                "author": "Gavin",
                "date": "2013-10-26T02:00:03",
                "message_text_only": "On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n\n> \n> Would it make sense to use either fixed length strings or maybe even enums?\n\nNo. Enums or fixed length strings just make it harder to extend, for no benefit (bandwidth of 'reject' messages doesn't matter, they will be rare and are not relayed)."
            },
            {
                "author": "kjj",
                "date": "2013-10-26T04:32:27",
                "message_text_only": "The HTTP status code system seems to work well enough, and seems to give \nthe best of both worlds.  A 3 digit numeric code that is \nmachine-readable, and a freeform text note for humans.\n\nThe clever part about that system was in realizing that the numeric \ncodes didn't need to account for every possible error. They just need to \ngive the other node the most useful information, like \"try that again \nlater, I'm having a temporary problem\" vs. \"That is just plain wrong and \nit will still be wrong next time too, so don't bother to retry\".\n\nWe can leave it to the humans to puzzle out the meaning of \"403: values \nof txid gives rise to dom!\"\n\nGavin wrote:\n>\n> On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>\n>> Would it make sense to use either fixed length strings or maybe even enums?\n> No. Enums or fixed length strings just make it harder to extend, for no benefit (bandwidth of 'reject' messages doesn't matter, they will be rare and are not relayed).\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-27T14:32:57",
                "message_text_only": "Yeah, something like HTTP would work well.\n\nI'm really looking forward to this. Currently bitcoinj gets a small but\nsteady stream of bug reports of the form \"my transaction did not\npropagate\". It's flaky because the library picks one peer to send the\ntransaction to, and then watches it propagate across the network. But if\nthat selected peer refuses the tx for whatever reason, that propagation\nnever comes, and there's currently no timeout to make it retry with a\ndifferent node. The transactions as created usually look fine, so it's not\nclear to me why some nodes would accept it others wouldn't given the\nabsence of double spends, and there's no way to debug and find out :(\n\n\n\n\nOn Sat, Oct 26, 2013 at 6:32 AM, kjj <bitcoin-devel at jerviss.org> wrote:\n\n> The HTTP status code system seems to work well enough, and seems to give\n> the best of both worlds.  A 3 digit numeric code that is\n> machine-readable, and a freeform text note for humans.\n>\n> The clever part about that system was in realizing that the numeric\n> codes didn't need to account for every possible error. They just need to\n> give the other node the most useful information, like \"try that again\n> later, I'm having a temporary problem\" vs. \"That is just plain wrong and\n> it will still be wrong next time too, so don't bother to retry\".\n>\n> We can leave it to the humans to puzzle out the meaning of \"403: values\n> of txid gives rise to dom!\"\n>\n> Gavin wrote:\n> >\n> > On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <\n> jeanpaulkogelman at me.com> wrote:\n> >\n> >> Would it make sense to use either fixed length strings or maybe even\n> enums?\n> > No. Enums or fixed length strings just make it harder to extend, for no\n> benefit (bandwidth of 'reject' messages doesn't matter, they will be rare\n> and are not relayed).\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > October Webinars: Code for Performance\n> > Free Intel webinars can help you accelerate application performance.\n> > Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> > the latest Intel processors and coprocessors. See abstracts and register\n> >\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/d02f8dde/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-27T14:39:51",
                "message_text_only": "On Sunday, October 27, 2013 2:32:57 PM Mike Hearn wrote:\n> Currently bitcoinj gets a small but steady stream of bug reports of the form\n> \"my transaction did not propagate\". It's flaky because the library picks one\n> peer to send the transaction to, and then watches it propagate across the\n> network. But if that selected peer refuses the tx for whatever reason, that\n> propagation never comes, and there's currently no timeout to make it retry\n> with a different node.\n\nSounds like the real bug is \"BitcoinJ relies on good/servant behaviour from \nother nodes\". Don't assume your random node isn't hostile. Handling a peer \nthat doesn't relay your transaction for any reason (including if they lie to \nyou about having done so) should be expected behaviour.\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-27T14:50:37",
                "message_text_only": "These nodes are much more likely to just be broken than malicious, but\nwithout any way to diagnose why they are dropping a transaction it's hard\nto find out what's really going on.\n\nAnyway, yes, I need to spend time adding timeouts and all kinds of other\nthings, although of course if the transactions are being rejected due to a\nchange in network rules that won't help either - if the nodes you're\nconnected to are silently eating your transaction, there's no sane UI that\ncan result from that without more explicit error handling.\n\n\nOn Sun, Oct 27, 2013 at 3:39 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, October 27, 2013 2:32:57 PM Mike Hearn wrote:\n> > Currently bitcoinj gets a small but steady stream of bug reports of the\n> form\n> > \"my transaction did not propagate\". It's flaky because the library picks\n> one\n> > peer to send the transaction to, and then watches it propagate across the\n> > network. But if that selected peer refuses the tx for whatever reason,\n> that\n> > propagation never comes, and there's currently no timeout to make it\n> retry\n> > with a different node.\n>\n> Sounds like the real bug is \"BitcoinJ relies on good/servant behaviour from\n> other nodes\". Don't assume your random node isn't hostile. Handling a peer\n> that doesn't relay your transaction for any reason (including if they lie\n> to\n> you about having done so) should be expected behaviour.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/dfd261cc/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-30T17:13:49",
                "message_text_only": "On Sun, Oct 27, 2013 at 7:32 AM, Mike Hearn <mike at plan99.net> wrote:\n> I'm really looking forward to this. Currently bitcoinj gets a small but\n> steady stream of bug reports of the form \"my transaction did not propagate\".\n> It's flaky because the library picks one peer to send the transaction to,\n> and then watches it propagate across the network. But if that selected peer\n> refuses the tx for whatever reason, that propagation never comes, and\n\nActually, we'll probably need to explicitly document that a failure to\nreject is by no means a promise to forward.\n\nIf a node is using priority queued rate limiting for its relaying then\nit might \"accept\" a transaction from you, but have it fall out of its\nmemory pool (due to higher priority txn arriving, or getting\nrestarted, etc.) before it ever gets a chance to send it on to any\nother peers.\n\nFinding out that it rejected is still useful information, but even\nassuming all nodes are honest and well behaved I don't think you could\ncount on its absence to be sure of forwarding."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-31T12:01:37",
                "message_text_only": "On Wed, Oct 30, 2013 at 6:13 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> If a node is using priority queued rate limiting for its relaying then\n> it might \"accept\" a transaction from you, but have it fall out of its\n> memory pool (due to higher priority txn arriving, or getting\n> restarted, etc.) before it ever gets a chance to send it on to any\n> other peers.\n>\n\nThat's a good point, however, I would hope that this fairly trivial race\ncondition can be resolved. There's no requirement that a transaction be\nplaced into a buffer from which it can be removed before relaying. After\nrelaying - sure. But the gap of a few seconds between that shouldn't cause\nany issues to eliminate.\n\nI believe Gavin's smartfees branch adds mempool persistence to disk, so\nrestarting nodes won't clear the mempool in future. Or at least that's a\npart of the longer term plan once mempool limiting is done.\n\n\n> Finding out that it rejected is still useful information, but even\n> assuming all nodes are honest and well behaved I don't think you could\n> count on its absence to be sure of forwarding.\n>\n\nI think measuring propagation will be a part of bitcoin wallets for the\nforseeable future, although if all nodes reject that allows for a more\nresponsive and more helpful UI than just waiting for some arbitrary timeout\nto elapse.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/61485d73/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-27T22:52:25",
                "message_text_only": "RE: use HTTP-like status codes:\n\nOkey dokey, I'll add a one-byte machine-readable HTTP-like status code.\nUnless y'all want a 32-bit status code.  Or maybe a varint. Or a\nthree-character numeric string. I really and truly don't care, but I am\nwriting this code right now so whatever you want, decide quickly.\n\nIf anybody has strong feelings about what the reject categories should be,\nthen please take the time to write a specific list, I can't read your\nmind....\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5e1a8963/attachment.html>"
            },
            {
                "author": "kjj",
                "date": "2013-10-28T02:52:58",
                "message_text_only": "Any reason not to use actual HTTP codes?  I'm not aware of any major \ndeficiency in them.  Most of them won't apply to us, which is fine, they \ndon't seem to apply to HTTP either.  We can extend the scheme on our own \nif we find a good reason to.\n\nThat implies 16 bits, or a varint.  I would avoid a string or varstring \nhere; we already have a text field.  Varint vs. 16 bits is a minor \nissue, and arguments can be made in both directions.  I flipped a coin \nand got heads, so I'll say varint.\n\nGavin Andresen wrote:\n> RE: use HTTP-like status codes:\n>\n> Okey dokey, I'll add a one-byte machine-readable HTTP-like status \n> code. Unless y'all want a 32-bit status code.  Or maybe a varint. Or a \n> three-character numeric string. I really and truly don't care, but I \n> am writing this code right now so whatever you want, decide quickly.\n>\n> If anybody has strong feelings about what the reject categories should \n> be, then please take the time to write a specific list, I can't read \n> your mind....\n>\n>\n> -- \n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/447ba632/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-10-28T09:26:24",
                "message_text_only": "HTTP also defines success codes (2xx). Are we also talking about ACK\nmessages now, rather than just REJECT messages?\n\n\nOn 10/28/2013 03:52 AM, kjj wrote:\n> Any reason not to use actual HTTP codes?  I'm not aware of any major\n> deficiency in them.  Most of them won't apply to us, which is fine, they\n> don't seem to apply to HTTP either.  We can extend the scheme on our own\n> if we find a good reason to.\n> \n> That implies 16 bits, or a varint.  I would avoid a string or varstring\n> here; we already have a text field.  Varint vs. 16 bits is a minor\n> issue, and arguments can be made in both directions.  I flipped a coin\n> and got heads, so I'll say varint.\n> \n> Gavin Andresen wrote:\n>> RE: use HTTP-like status codes:\n>>\n>> Okey dokey, I'll add a one-byte machine-readable HTTP-like status\n>> code. Unless y'all want a 32-bit status code.  Or maybe a varint. Or a\n>> three-character numeric string. I really and truly don't care, but I\n>> am writing this code right now so whatever you want, decide quickly.\n>>\n>> If anybody has strong feelings about what the reject categories should\n>> be, then please take the time to write a specific list, I can't read\n>> your mind....\n>>\n>>\n>> -- \n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> October Webinars: Code for Performance\n>> Free Intel webinars can help you accelerate application performance.\n>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from \n>> the latest Intel processors and coprocessors. See abstracts and register >\n>> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from \n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-28T09:32:08",
                "message_text_only": "On Mon, Oct 28, 2013 at 2:26 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> HTTP also defines success codes (2xx). Are we also talking about ACK\n> messages now, rather than just REJECT messages?\n\nI do not believe we should do that:  It would be a non-trivial\nincrease the protocol bandwidth requirements."
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-29T05:37:11",
                "message_text_only": "Thanks for the feedback, everybody, gist updated:\n  https://gist.github.com/gavinandresen/7079034\n\nCategories are:\n\n0x01-0x0fProtocol syntax errors0x10-0x1fProtocol semantic errors0x40-0x4fServer\npolicy rule\n<https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>\n\nRE: why not a varint:  because we're never ever going to run out of reject\ncodes.  Eight are defined right now, if we ever defined eight more I'd be\nsurprised.\n\nRE: why not use HTTP codes directly: because we'd be fitting round pegs\ninto square holes.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/606c3950/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-10-29T08:55:59",
                "message_text_only": "How about rejection codes to notify you that you have been rate limited?\n\nWarren\n\n\nOn Mon, Oct 28, 2013 at 7:37 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>\n> Thanks for the feedback, everybody, gist updated:\n>   https://gist.github.com/gavinandresen/7079034\n>\n> Categories are:\n>\n> 0x01-0x0f Protocol syntax errors0x10-0x1f Protocol semantic errors0x40-0x4fServer\n> policy rule\n> <https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>\n>\n> RE: why not a varint:  because we're never ever going to run out of reject\n> codes.  Eight are defined right now, if we ever defined eight more I'd be\n> surprised.\n>\n> RE: why not use HTTP codes directly: because we'd be fitting round pegs\n> into square holes.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/edd87851/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-29T09:12:00",
                "message_text_only": "On Mon, Oct 28, 2013 at 10:55:59PM -1000, Warren Togami Jr. wrote:\n> How about rejection codes to notify you that you have been rate limited?\n\nACK\n\nHowever note that for the rejection messages defined these are actually\ncovered by the \"too-low-fees\" rejection codes. What would would want a\nrate limiting rejection code is things like getblock and other requests.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000aefda5391d2a12987ee8dc048c046c8f3e1ad1f1a3a1dbbe4954bfaf\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/7474c36f/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-29T09:52:31",
                "message_text_only": "For tx reject, should there be a code for \"unknown version\"? That is,\ntx.nVersion > bestKnownVersion == reject? In that case 0x40 would become\n\"non-standard transaction type\". I think \"unknown transaction type\" is a\nbit vague. Or do we want new tx messages to always be backwards compatible?\n\n0x42 and 0x43 seems a bit similar to me. The sender knows what fee was paid\n(presumably). If free transactions and fee-paying transactions end up\nhaving a unified ranking applied, then distinguishing between them in the\nreject message won't make much sense.\n\nFor block 0x11 again shall there be a separate code for \"block is from the\nfuture\"? We don't want to lose the nVersion field to people just using it\nfor nonsense, so does it make sense to reject blocks that claim to be v2 or\nv3?\n\n\n\n\nOn Tue, Oct 29, 2013 at 6:37 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>\n> Thanks for the feedback, everybody, gist updated:\n>   https://gist.github.com/gavinandresen/7079034\n>\n> Categories are:\n>\n> 0x01-0x0f Protocol syntax errors0x10-0x1f Protocol semantic errors0x40-0x4fServer\n> policy rule\n> <https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>\n>\n> RE: why not a varint:  because we're never ever going to run out of reject\n> codes.  Eight are defined right now, if we ever defined eight more I'd be\n> surprised.\n>\n> RE: why not use HTTP codes directly: because we'd be fitting round pegs\n> into square holes.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/c48b5df4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-29T10:14:52",
                "message_text_only": "On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:\n> For block 0x11 again shall there be a separate code for \"block is from the\n> future\"? We don't want to lose the nVersion field to people just using it\n> for nonsense, so does it make sense to reject blocks that claim to be v2 or\n> v3?\n\nThat would prevent us from using nVersion as a soft-forking mechanism.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000908fddb47210344de50e6d3bd842e649c68853eeee0390dcd\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/c357d271/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-29T11:38:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nPeter Todd <pete at petertodd.org> wrote:\n>On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:\n>> For block 0x11 again shall there be a separate code for \"block is\n>from the\n>> future\"? We don't want to lose the nVersion field to people just\n>using it\n>> for nonsense, so does it make sense to reject blocks that claim to be\n>v2 or\n>> v3?\n>\n>That would prevent us from using nVersion as a soft-forking mechanism.\n\nActually, that statement didn't go far enough: rejecting blocks with nVersions that you don't expect is a hard fork.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.9\n\niQFQBAEBCAA6BQJSb544MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhfuGCADHB+5WZ3oSRCCYgId+\n5c4rxZHjjmXXIVOlXySjoRQ20JUnGbkUqN057VlutYbWaGV7OqR0oQyzh0LGpMdL\nBU9hg8XoHbyIvA0WhCfEJvFzkwseN8Ac77UxtV3leBpBkSzjqlMS9QBGU6L5rw2U\nuo8Sd7bQaqkadOPode3MMWDtmmqAZaj2dN02w/8C1rRna3SrbYRVYbaVAuN9yREO\n99DOGEM2V7ni+eo4sQoxP2jf8vmNzy1EuQH8v1OloPgcpxl/GkLVXzQh4ZfO1ApE\nUVKBo93oT34Tce9LwZy+k8XpeCvBRJ/+QwsbAAgdVYKr8KmRcAW4oR2KN7Y0jjq4\n44xU\n=OaON\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-29T12:32:27",
                "message_text_only": "Yes, exactly. That's the point. As you well know I think the whole\nsoft-fork mechanism is wrong and should not be used. If the rules change,\nyour node is *supposed* to end up on a chain fork and trigger an alert to\nyou, that's pretty much the whole purpose of Bitcoin's design. Undermining\nthat security model is problematic.\n\n\nOn Tue, Oct 29, 2013 at 12:38 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> Peter Todd <pete at petertodd.org> wrote:\n> >On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:\n> >> For block 0x11 again shall there be a separate code for \"block is\n> >from the\n> >> future\"? We don't want to lose the nVersion field to people just\n> >using it\n> >> for nonsense, so does it make sense to reject blocks that claim to be\n> >v2 or\n> >> v3?\n> >\n> >That would prevent us from using nVersion as a soft-forking mechanism.\n>\n> Actually, that statement didn't go far enough: rejecting blocks with\n> nVersions that you don't expect is a hard fork.\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.0.9\n>\n> iQFQBAEBCAA6BQJSb544MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhfuGCADHB+5WZ3oSRCCYgId+\n> 5c4rxZHjjmXXIVOlXySjoRQ20JUnGbkUqN057VlutYbWaGV7OqR0oQyzh0LGpMdL\n> BU9hg8XoHbyIvA0WhCfEJvFzkwseN8Ac77UxtV3leBpBkSzjqlMS9QBGU6L5rw2U\n> uo8Sd7bQaqkadOPode3MMWDtmmqAZaj2dN02w/8C1rRna3SrbYRVYbaVAuN9yREO\n> 99DOGEM2V7ni+eo4sQoxP2jf8vmNzy1EuQH8v1OloPgcpxl/GkLVXzQh4ZfO1ApE\n> UVKBo93oT34Tce9LwZy+k8XpeCvBRJ/+QwsbAAgdVYKr8KmRcAW4oR2KN7Y0jjq4\n> 44xU\n> =OaON\n> -----END PGP SIGNATURE-----\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/25e2fca3/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-30T02:01:16",
                "message_text_only": "On Tue, Oct 29, 2013 at 10:32 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Yes, exactly. That's the point. As you well know I think the whole\n> soft-fork mechanism is wrong and should not be used. If the rules change,\n> your node is *supposed* to end up on a chain fork and trigger an alert to\n> you, that's pretty much the whole purpose of Bitcoin's design. Undermining\n> that security model is problematic.\n>\n\nBut if you are getting soft-forked recent versions of the reference\nimplementation WILL alert you; see this code in main.cpp:\n\n        if (nUpgraded > 100/2)\n            strMiscWarning = _(\"Warning: This version is obsolete, upgrade\nrequired!\");\n\nThat is, if more than half of the last 100 blocks are up-version, warn.\n block.version is part of the block header, so SPV clients can (and\nprobably should) do the same.\n\nThere are also warnings if you are forked, and, most recently, warnings if\nthere is a high-work alternative fork.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/1ce0b2f8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-30T08:24:44",
                "message_text_only": "> But if you are getting soft-forked recent versions of the reference\n> implementation WILL alert you; see this code in main.cpp:\n>\n\nPerhaps I'm confused about how we're using the term soft fork. My\nunderstanding is that this is where a new upgrade is designed to look valid\nto old nodes, and if you don't upgrade you rely on the miner majority to\nget you \"back on track\". For instance, P2SH was done this way - old nodes\nthat didn't upgrade during that transition believed all spends of P2SH\noutputs were valid, even those spending someone elses coins.\n\nIn this case, the code you cite won't do anything because your client will\nnever reject a block during a soft-forking upgrade, even if it does\nsomething that's supposed to be invalid or nonsensical.\n\nIf a new block version changes the serialization format or script language\nor SIGHASH rules such that old clients reject the block, then they will end\nup on a hard fork and the alerting code will trigger, which is correct and\nas it should be.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/e37ddff8/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-10-30T09:05:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nIf I understand the code correctly, it's not about rejecting blocks.\nIt's about noticing that >50% of recent blocks are declaring a version\nnumber that is meaningless to you. Chances are, there's been a soft\nfork and you should upgrade.\n\nOn 10/30/13 1:24 AM, Mike Hearn wrote:\n> \n> But if you are getting soft-forked recent versions of the\n> reference implementation WILL alert you; see this code in\n> main.cpp:\n> \n> \n> Perhaps I'm confused about how we're using the term soft fork. My \n> understanding is that this is where a new upgrade is designed to\n> look valid to old nodes, and if you don't upgrade you rely on the\n> miner majority to get you \"back on track\". For instance, P2SH was\n> done this way - old nodes that didn't upgrade during that\n> transition believed all spends of P2SH outputs were valid, even\n> those spending someone elses coins.\n> \n> In this case, the code you cite won't do anything because your\n> client will never reject a block during a soft-forking upgrade,\n> even if it does something that's supposed to be invalid or\n> nonsensical.\n> \n> If a new block version changes the serialization format or script \n> language or SIGHASH rules such that old clients reject the block,\n> then they will end up on a hard fork and the alerting code will\n> trigger, which is correct and as it should be.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJScMvBAAoJEAdzVfsmodw4I5sQAL0Wq4e7b6/KX2zl9RmtFl5S\nqM9ZJkJV8qzirj1hMgVwvnuOj147Vb3EkJujxeMa8ujepXKZ215mMCLnCHPzWPpJ\njTtOBn1FCkCUbyt9uSbZ+56NR+ElmSOsDpAJ8IR9VywHriCxm4OIAMCLTR6CKRfr\n6NWySvjEMlsSHyr7DFaJTlMqo+KIUWGmP7tdPu1L2AvNE+613dI5q76IjUHYoxhu\n2dDtanYUvFCsdLZEnjTr1N45BBf1mTSlPfmA1ZWHgM779h6VIyb0TeO+iCaxpvWp\n2RpSDj3+diFdMUK2uu69ZcwkREH0/RoQLOys6U5DfaGkpPtjY0YXB5DwN9quKgzX\npadWzbQ0flpwWLYOPYrWATz4sWflxZJu6wHAcUkRS5k9crOLVjritXs1205x7YET\n0H9jtbqXmBRXidCP2BOZPdq0PGDF8g2VeEHR69JRe3F3dBfSvbgHfKoiF1jpLLqb\nrttoP+nD4ZRX8FesV2E/DEZgDZJMd8eqDKNDjq7Db4BTDg24Nq2ATNE2fBtenXwI\nnXVNdmnvjDxjF0weJGlYgaQTfgVwHRxs+j4qgY4VLM0qEYplhHgg+KmOMFUtxAF/\nsZv6w56XtCZS3LdNONAJSZzXIcqgmcodiWKVxkTL29dsWKikcBL5cG9ipdfmjQKT\neccFOHArsbW3eSfKP/Mb\n=FSQI\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-30T10:26:16",
                "message_text_only": "On Wed, Oct 30, 2013 at 10:05 AM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> If I understand the code correctly, it's not about rejecting blocks.\n>\n\nI was referring to the fork alerts that Matt did. They also alert you if\nthere's a missed upgrade.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/3ed28fb8/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-28T02:59:38",
                "message_text_only": "On Sunday, October 27, 2013 10:52:25 PM Gavin Andresen wrote:\n> If anybody has strong feelings about what the reject categories should be,\n> then please take the time to write a specific list, I can't read your\n> mind....\n\nIt might make sense to use the rejection reasons from BIP 22 where applicable.\n\nhttps://en.bitcoin.it/wiki/BIP_0022#Appendix:_Example_Rejection_Reasons\n\nLuke"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-10-28T03:02:18",
                "message_text_only": "Categories that make sense to me:\n1) protocol related problems\n1.a) failed to deserialize transaction\n2) core principle violations\n2.a) script evaluation fail (only owner is allowed to spend)\n2.b) outputs larger than inputs (no creation of new money)\n2.c) outputs not found/already spent (no double spending)\n3) policy rules\n3.a) not standard\n3.b) ...\n\n-- \nPieter\n On Oct 27, 2013 11:54 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n\n> RE: use HTTP-like status codes:\n>\n> Okey dokey, I'll add a one-byte machine-readable HTTP-like status code.\n> Unless y'all want a 32-bit status code.  Or maybe a varint. Or a\n> three-character numeric string. I really and truly don't care, but I am\n> writing this code right now so whatever you want, decide quickly.\n>\n> If anybody has strong feelings about what the reject categories should be,\n> then please take the time to write a specific list, I can't read your\n> mind....\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5b79e959/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Feedback requested: \"reject\" p2p message",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin",
                "Luke-Jr",
                "kjj",
                "Andreas Schildbach",
                "Warren Togami Jr.",
                "Mike Hearn",
                "Peter Todd",
                "Jean-Paul Kogelman",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Pieter Wuille"
            ],
            "messages_count": 26,
            "total_messages_chars_count": 33422
        }
    },
    {
        "title": "[Bitcoin-development] On soft-forks and hard-forks",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-10-29T16:35:05",
                "message_text_only": "> On Tue, Oct 29, 2013 at 12:38 PM, Peter Todd <pete at petertodd.org> wrote:\n> > Peter Todd <pete at petertodd.org> wrote:\n> > >On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:\n> > >> For block 0x11 again shall there be a separate code for \"block is\n> > >from the\n> > >> future\"? We don't want to lose the nVersion field to people just\n> > >using it\n> > >> for nonsense, so does it make sense to reject blocks that claim to be\n> > >v2 or\n> > >> v3?\n> > >\n> > >That would prevent us from using nVersion as a soft-forking mechanism.\n> >\n> > Actually, that statement didn't go far enough: rejecting blocks with\n> > nVersions that you don't expect is a hard fork.\n>\n> Yes, exactly. That's the point. As you well know I think the whole\n> soft-fork mechanism is wrong and should not be used. If the rules change,\n> your node is *supposed* to end up on a chain fork and trigger an alert to\n> you, that's pretty much the whole purpose of Bitcoin's design. Undermining\n> that security model is problematic.\n\nThat's a nice sentiment, but there's a lot more nuance to it than\n\"soft-forks are bad\"\n\nWe're talking about rejection here: you don't want to end up on an\nisolated chain fork wondering if maybe miners have been unlucky. You\nwant to know that a longer chain exists so as to have solid evidence\nthat you're local configuration isn't what miners are mining.  Thus not\nonly should you \"accept\" blocks with versions you don't know about, you\nshould relay those blocks as well so that other out-of-date nodes have\nthe highest possible chance of finding out about them. Creating a block\nis expensive, so with some minor safeguards - a high minimum difficulty,\nand maximum size - relaying blocks you consider invalid is perfectly\nsafe and doesn't enable DoS attacks. Relaying block headers has similar\nlogic, and even less DoS attack worry. (don't apply bloom filters to\ninvalid blocks though!)\n\nI had this discussion with Warren the other day actually: Litecoin is\nconsidering banning old node versions and rejecting their attempts to\nconnect. I pointed out how you wanted to be damn sure there was no-one\nmining with them, least you wind up creating a slowly growing fork mined\nby nodes unaware of the main chain.\n\nSoft-forks and SPV nodes is another topic. SPV nodes don't do any\nmeaningful validation - they usually don't even have the transaction\ninputs spent by a transaction to determine if a scriptSig is valid.\nTheir security is already dependent on miners, so allowing those miners\nto upgrade does no harm. In addition there are even cases where what\nwould be a hard-fork for a full node, is a soft-fork for a SPV node. On\nthe other hand if your \"SPV\" node is more sophisticated, then by all\nmeans use a nVersion change to trigger an alert to the user. If you're\nimplementation relays blockchain data, continue doing so to ensure other\nnodes find out about the new version as soon as possible. (all SPV nodes\nshould relay block headers if possible)\n\n\nNote how the nVersion field is useful for voting: the \"chain height in\ncoinbase\" soft-fork was accomplished this way, changing nVersion from 1\nto 2 with full enforcement of the rule triggered by a 95% supermajority.\nBitcoin is a decentralized system, so any changes need to be done by\nvoting to show that a clear consensus of hashing power will enforce and\nvalidate the new rules. (time and height deadlines can be disasters if\nthe upgrade is ever ignored or delayed)\n\nInterestingly this suggests that what we actually want is two nVersions\nper upgrade: the first to signal that nodes wish to upgrade, and are\nshowing their intent to use the new rules. The second to signal that the\nupgrade has actually happened and the old rules are now ignored. Client\nsoftware can use this two stage approach to know when rules may have\nchanged, and the user probably should consider upgrading. As applied to\nthe chain height upgrade we would have gone from version 2 during the\nvoting, to version 3 for any block produced while the rules were in\neffect. Put another way, the last in nVersion is simply to signify that\nthe new blockchain rules are now active, as opposed to being proposed.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000180dabf823b09a30b4f2032b5cab7ba1d0351cab350bee91f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/3b94799d/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "On soft-forks and hard-forks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4514
        }
    },
    {
        "title": "[Bitcoin-development] Payment protocol for onion URLs.",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-26T03:31:05",
                "message_text_only": "One limitation of the payment protocol as speced is that there is no\nway for a hidden service site to make use of its full authentication\ncapability because they are unable to get SSL certificates issued to\nthem.\n\nA tor hidden service (onion site) is controlled by an RSA key.\n\nIt would be trivial to pack a tor HS pubkey into a self-signed x509\ncertificate with the cn set to foooo.onion.\n\nIf we specified in the payment protocol an additional validation\nprocedure for [base32].onion hosts that just has it hash and base32\nencode the pubkey (as tor does) then the payment protocol could work\nseamlessly with tor hosts. (Displaying that the payment request came\nfrom \"foooo.onion\").  I believe that the additional code for this\nwould be trivial (and I'll write it if there is support for making\nthis a standard feature).\n\nThis would give us an fully supported option which is completely CA\nfree... it would only work for tor sites, but the people concerned\nabout CA trechery are likely to want to use tor in any case.\n\nThoughts?"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-10-26T03:41:40",
                "message_text_only": "On Saturday, October 26, 2013 3:31:05 AM Gregory Maxwell wrote:\n> One limitation of the payment protocol as speced is that there is no\n> way for a hidden service site to make use of its full authentication\n> capability because they are unable to get SSL certificates issued to\n> them.\n> \n> A tor hidden service (onion site) is controlled by an RSA key.\n> \n> It would be trivial to pack a tor HS pubkey into a self-signed x509\n> certificate with the cn set to foooo.onion.\n> ...\n> Thoughts?\n\nIs there any point to additional encryption over tor (which afaik is already \nencrypted end-to-end)? Is there a safe way to make this work through tor entry \nnodes/gateways?\n\nIt'd be nice to have a way to support namecoin-provided keys too...\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-10-26T04:06:48",
                "message_text_only": "On Fri, Oct 25, 2013 at 8:41 PM, Luke-Jr <luke at dashjr.org> wrote:\n> Is there any point to additional encryption over tor (which afaik is already\n> encrypted end-to-end)? Is there a safe way to make this work through tor entry\n> nodes/gateways?\n\nThe x.509 in the payment protocol itself is for authentication and\nnon-repudiation, not confidentiality.\n\nIt's used to sign the payment request so that later there is\ncryptographic evidence in the event of a dispute:\n\"He didn't send me my alpaca socks!\" \"Thats not the address I told you to pay!\"\n\"He told me he'd send my 99 red-balloons, not just one!\"  \"No way,\nthat was the price for 1 red-balloon!\"\n\nJust using SSL or .onion (or whatever else) gets you confidentiality\nand authentication.  Neither of these things get you non-repudiation.\n\n> It'd be nice to have a way to support namecoin-provided keys too...\n\nThe payment protocol is extensible, so I hope that someday someone\nwill support namecoin authenticated messages (but note: this requires\nnamecoin to support trust-free SPV resolvers, otherwise there is no\nway to extract a compact proof that can be stuck into a payment\nrequest) and GPG authenticated messages.\n\nBut those things will require a fair amount of code (even fixing the\nnamecoin protocol in the nmc case), and GPG could be done just by\nexternally signing the actual payment request like you'd sign any\nfile... and considering the sorry state of their _practical_\nusability, I don't think they're worth doing at this time.\n\nBy contrast, I _think_ the tor onion support would require only a\nrelatively few lines of code since it could just be the existing x.509\nmechanism with just a simple special validation rule for .onion, plus\na little tool to repack the keys.  I think it would easily be more\nwidely used than namecoin (though probably both would not really be\nused, as gavin notes).\n\nw/ Gavin's comments I'll go check in with the tor folks and see if\nanyone has ever though of doing this before and if there is already a\ncanonical structure for the x.509 certs used in this way."
            },
            {
                "author": "Adam Back",
                "date": "2013-10-28T12:14:33",
                "message_text_only": "I think its a mistake relying directly on X509, its subject to corrpution\nattacks, involves ASN.1 and enough openSSL X.500 encoding abiguity (or other\ncode base) to be a security nightmare.\n\nWhy not make the payment messages signed by bitcoin keys.  If someone wants\nto associate with X.509 they can put a bitcoin address on their SSL site.\n\nIf someone can get into your site deeply enough to modify your SSL served\ncode and you're trying to run ecommerce you have other problems.\n\nNever the less if they care they can clear sign the bitcoin addr with xmlsig\nand their X.509 private key, and/or with PGP and a WoT.\n\nI think its smarter to pollute bitcoin main with X509.  Make a little helper\nutil if there are not enough xmlsig tools that you cant pick one up\nopensource for multiple languages.\n\nThis then avoids the binding to Tor - you can publish a bitcoin address\nauthenticated anyway you like.  Eg tahoe-LAFS auth/integrity, i2p, tor, pgp\n- you name it.\n\nMaybe I voice this opinion a bit late in the cycle, but I think it would do\nbitcoin a favor otherwise its a camels nose in the tent into the TLAs that\ncontrol their own X.509 CAs, or issue NSL letters for CA private keys, or\nforged certs.  It's all happening and thanks to Snowden we now have even\nmore evidence...\n\nAdam\n\nOn Fri, Oct 25, 2013 at 09:06:48PM -0700, Gregory Maxwell wrote:\n>On Fri, Oct 25, 2013 at 8:41 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> Is there any point to additional encryption over tor (which afaik is already\n>> encrypted end-to-end)? Is there a safe way to make this work through tor entry\n>> nodes/gateways?\n>\n>The x.509 in the payment protocol itself is for authentication and\n>non-repudiation, not confidentiality.\n>\n>It's used to sign the payment request so that later there is\n>cryptographic evidence in the event of a dispute:\n>\"He didn't send me my alpaca socks!\" \"Thats not the address I told you to pay!\"\n>\"He told me he'd send my 99 red-balloons, not just one!\"  \"No way,\n>that was the price for 1 red-balloon!\"\n>\n>Just using SSL or .onion (or whatever else) gets you confidentiality\n>and authentication.  Neither of these things get you non-repudiation.\n>\n>> It'd be nice to have a way to support namecoin-provided keys too...\n>\n>The payment protocol is extensible, so I hope that someday someone\n>will support namecoin authenticated messages (but note: this requires\n>namecoin to support trust-free SPV resolvers, otherwise there is no\n>way to extract a compact proof that can be stuck into a payment\n>request) and GPG authenticated messages.\n>\n>But those things will require a fair amount of code (even fixing the\n>namecoin protocol in the nmc case), and GPG could be done just by\n>externally signing the actual payment request like you'd sign any\n>file... and considering the sorry state of their _practical_\n>usability, I don't think they're worth doing at this time.\n>\n>By contrast, I _think_ the tor onion support would require only a\n>relatively few lines of code since it could just be the existing x.509\n>mechanism with just a simple special validation rule for .onion, plus\n>a little tool to repack the keys.  I think it would easily be more\n>widely used than namecoin (though probably both would not really be\n>used, as gavin notes).\n>\n>w/ Gavin's comments I'll go check in with the tor folks and see if\n>anyone has ever though of doing this before and if there is already a\n>canonical structure for the x.509 certs used in this way.\n>\n>------------------------------------------------------------------------------\n>October Webinars: Code for Performance\n>Free Intel webinars can help you accelerate application performance.\n>Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from\n>the latest Intel processors and coprocessors. See abstracts and register >\n>http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-10-28T13:21:07",
                "message_text_only": "On Mon, Oct 28, 2013 at 1:14 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> Maybe I voice this opinion a bit late in the cycle, but ....\n\n\nA bit late is one way to put it. All these topics and more were discussed\nto death a year ago when the payment protocol was first being designed.\nBluntly, I think we're all sick of it. You are welcome to PGP sign your\npayment requests if you want to. If not, then please see my FAQ for\ndiscussion:\n\n   https://bitcointalk.org/index.php?topic=300809.msg3225143#msg3225143\n\ntl;dr - the right way to tackle governments getting bogus certs issued is\ncertificate transparency. All other suggestions tend to boil down to\n\"here's some handwaving that doesn't actually solve the problem\".\n\nBy the way, the evidence from the Snowden case rather reinforces the\nstrength of the CA system. Did we see stories about bulk usage of fake\ncertificates? No. What we read is that the increased usage of SSL was a\nmajor game-changer for intelligence agencies. They \"solve\" SSL by compiling\ndatabases of private keys they obtain in various ways. True to form when\nthe FBI wanted access to LavaBit, they tried to obtain his private keys\nrather than just push a convenient \"give me a fake cert\" button, and when\nit became known that Lavabit had to hand over their key, GoDaddy revoked\ntheir certificate. Industry policies forced their hand and those policies\ndon't have a get-out clause for the FBI.\n\nIt's without a doubt that there are government-issued fake certs floating\nabout, somewhere, just due to the scale of hacking that's been taking\nplace. However, demanding perfection in a system that handles security for\nover a billion people and tens of millions of operators is unreasonable.\nAll we can ask for is that it it's being improved, which through\ninitiatives like cert transparency, it is.\n\nPlease, let's call time on these discussions. They long ago ceased to have\nany value.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5039010f/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-26T03:55:35",
                "message_text_only": "On Sat, Oct 26, 2013 at 1:31 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> ....\n\nThis would give us an fully supported option which is completely CA\n> free... it would only work for tor sites, but the people concerned\n> about CA trechery are likely to want to use tor in any case.\n>\n> Thoughts?\n>\n\nI think a tiny number of people would use it, so from a purely engineering\npriority perspective my initial reaction is \"not worth it.\"\n\nHowever, as a demonstration of the flexibility of the payment protocol and\nbecause it is a really nifty idea that will give lots of people warm\nfuzzies I think you should do it and we should pull it.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/b0e325e7/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-26T04:15:51",
                "message_text_only": "On Fri, Oct 25, 2013 at 08:31:05PM -0700, Gregory Maxwell wrote:\n> One limitation of the payment protocol as speced is that there is no\n> way for a hidden service site to make use of its full authentication\n> capability because they are unable to get SSL certificates issued to\n> them.\n> \n> A tor hidden service (onion site) is controlled by an RSA key.\n> \n> It would be trivial to pack a tor HS pubkey into a self-signed x509\n> certificate with the cn set to foooo.onion.\n> \n> If we specified in the payment protocol an additional validation\n> procedure for [base32].onion hosts that just has it hash and base32\n> encode the pubkey (as tor does) then the payment protocol could work\n> seamlessly with tor hosts. (Displaying that the payment request came\n> from \"foooo.onion\").  I believe that the additional code for this\n> would be trivial (and I'll write it if there is support for making\n> this a standard feature).\n> \n> This would give us an fully supported option which is completely CA\n> free... it would only work for tor sites, but the people concerned\n> about CA trechery are likely to want to use tor in any case.\n> \n> Thoughts?\n\nStrong ACK on the basis of responding for forum trolls alone.\n\nIt's easy enough to make it a genuinely useful tool for multisig wallets\ntoo: keep a copy of your Tor URL bookmarks on your second signing\ncomputer. So long as either computer has the correct URL you're safe.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000006fbd917e8b4770c566dbc8ed4bedd00f441286ffb6e7f73ac\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/c214a3f2/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-10-28T05:58:13",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sat, Oct 26, 2013 at 3:31 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> One limitation of the payment protocol as speced is that there is no\n> way for a hidden service site to make use of its full authentication\n> capability because they are unable to get SSL certificates issued to\n> them.\n>\n> Thoughts?\n\nI think this is a great idea and wish to see it done. Here is 1BTC for you,\nredeemable when you finish this task. I trust either Jeff Garzik or Peter Todd\nto evaluate your finished product, or possibly someone elses:\n\n37NDa6iFLEozbvw8vj38ri5D6SLw5xQujS\n\n22e067d3317e6300a9edda84fd0e24d8bfb86cf91540c3fe7acff45e4dc64dd3:0\n\nredeemScript : \"5241045f4bba15dbfe94a45f362aa13bbaef8bbf21ff84fec1be5b27fa628f4b3acca1a2e5711503c8b8fe2e228229b8b8814f9e33e0f7a314a089d7140269ffd51fe44104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae\"\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSbfy2AAoJEEWCsU4mNhiPrMMH/jd+AgVYUKd1vmP1BfaZum1s\nX186JulwF659YHOx94dLs+NOjvjMfY6cPbHm+B0j20CnhWrZrXzcXvwTHnzOSuoc\n1AAXg0KDbvyo+7PvTrsGQfHhT1FZSRzIUToofVmFlvEIO6/LiYMAYWCgIiX9nPvv\nRlvdtavTST+cY19yZamo5X0XU5cgI2tbtVWKEHJQ2VcglCgwFg5K0kZ0O1NMKbcZ\nKBagY3PVTiHnYP+LwSTW6EU9DNq0eLYG39mz4N6CqGkXZjGgh2YXZ6Sl2qRuO/5e\nRd9HcJXKqPKqMuRpQ2PA5U3U6QSyrUz7/fmi5dsOxnR6pdR53kjUVSvbOqBFHXw=\n=I1/R\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-10-28T19:37:30",
                "message_text_only": "Just an aside...\n\nThe 1BTC bountry John references below is a 1BTC P2SH output, where the  \nredeemScript he provided does hash to the expected value, and is itself a  \n2-of-3 multisig, with the following pubkeys, expressed as addresses:\n\n1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj\n1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv\n1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB\n\nBy comparison, the signatories for the 4BTC bountry are:\n\n1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe\n1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv\n1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB\n\nOn the one hand, the vanity address makes it easy to guess who one of the  \nsignatories is, on the other hand, is it bad form to reuse keys for  \nsigning?\n\nJohn, you mentioned wanting to disambiguate bounties, perhaps through a  \nbounty-specific pubkey. I'm not sure I follow, how is that better than  \njust referencing the address of the output, or the TxID, in a 'Table of  \nBounties'? Or you want to embed a hash of your signed message announcing  \nthe bounty?\n\nOut of curiosity, I suppose right now you just keep pubkeys for the  \nsignatories you want to appoint and reuse the same pubkey to create these  \nmulti-sigs, or you have to ask for a new one each time?\n\n From the signatories perspective, I imagine we're a long way off from a  \nwallet receiving or importing the p2sh, tracking that these outputs as  \n\"yours\", and even more, which contract/bounty they correspond to, and  \nfinally a usable way to accumulate signatures and ultimately spend the  \noutput to the bounty winner.\n\nAnd of course, thanks for posting the bounties!\n\n\nOn Sun, 27 Oct 2013 22:58:13 -0700, John Dillon  \n<john.dillon892 at googlemail.com> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On Sat, Oct 26, 2013 at 3:31 AM, Gregory Maxwell <gmaxwell at gmail.com>  \n> wrote:\n>> One limitation of the payment protocol as speced is that there is no\n>> way for a hidden service site to make use of its full authentication\n>> capability because they are unable to get SSL certificates issued to\n>> them.\n>>\n>> Thoughts?\n>\n> I think this is a great idea and wish to see it done. Here is 1BTC for  \n> you,\n> redeemable when you finish this task. I trust either Jeff Garzik or  \n> Peter Todd\n> to evaluate your finished product, or possibly someone elses:\n>\n> 37NDa6iFLEozbvw8vj38ri5D6SLw5xQujS\n>\n> 22e067d3317e6300a9edda84fd0e24d8bfb86cf91540c3fe7acff45e4dc64dd3:0\n>\n> redeemScript :  \n> \"5241045f4bba15dbfe94a45f362aa13bbaef8bbf21ff84fec1be5b27fa628f4b3acca1a2e5711503c8b8fe2e228229b8b8814f9e33e0f7a314a089d7140269ffd51fe44104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae\"\n>\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.11 (GNU/Linux)\n>\n> iQEcBAEBCAAGBQJSbfy2AAoJEEWCsU4mNhiPrMMH/jd+AgVYUKd1vmP1BfaZum1s\n> X186JulwF659YHOx94dLs+NOjvjMfY6cPbHm+B0j20CnhWrZrXzcXvwTHnzOSuoc\n> 1AAXg0KDbvyo+7PvTrsGQfHhT1FZSRzIUToofVmFlvEIO6/LiYMAYWCgIiX9nPvv\n> RlvdtavTST+cY19yZamo5X0XU5cgI2tbtVWKEHJQ2VcglCgwFg5K0kZ0O1NMKbcZ\n> KBagY3PVTiHnYP+LwSTW6EU9DNq0eLYG39mz4N6CqGkXZjGgh2YXZ6Sl2qRuO/5e\n> Rd9HcJXKqPKqMuRpQ2PA5U3U6QSyrUz7/fmi5dsOxnR6pdR53kjUVSvbOqBFHXw=\n> =I1/R\n> -----END PGP SIGNATURE-----\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most  \n> from\n> the latest Intel processors and coprocessors. See abstracts and register  \n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2013-10-31T00:44:01",
                "message_text_only": "On Mon, Oct 28, 2013 at 12:37:30PM -0700, Jeremy Spilman wrote:\n> Just an aside...\n> \n> The 1BTC bountry John references below is a 1BTC P2SH output, where the  \n> redeemScript he provided does hash to the expected value, and is itself a  \n> 2-of-3 multisig, with the following pubkeys, expressed as addresses:\n> \n> 1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj\n> 1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv\n> 1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB\n> \n> By comparison, the signatories for the 4BTC bountry are:\n> \n> 1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe\n> 1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv\n> 1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB\n> \n> On the one hand, the vanity address makes it easy to guess who one of the  \n> signatories is, on the other hand, is it bad form to reuse keys for  \n> signing?\n\nIt's a bit more risky from a cryptography perspective, but provided your\nwallet implementation is done correctly the extra risk is pretty much\ntheoretical. However this has caused real-world coin loss in the past in\nthe case of the Android PRNG flaw - re-using nonces in ECC signing\ncauses the private key to be revealed.\n\nI think the real issue here is that John doesn't appear to have asked\nany of the people whose signatures can release the funds if they were\nwilling to take part. If he had done that, he could have, and should\nhave, gotten separate pubkeys for the purpose of the bounty like was\ndone for Gregory Maxwell's CoinJoin bounty. Instead by not asking he is\nin reality if not in theory placing demands on people who haven't\nconsented, particularly for the 1BTC bounty where he doesn't control any\nof the private keys required to release the funds. IMO this is rude and\nI encourage people not to do this.\n\n> John, you mentioned wanting to disambiguate bounties, perhaps through a  \n> bounty-specific pubkey. I'm not sure I follow, how is that better than  \n> just referencing the address of the output, or the TxID, in a 'Table of  \n> Bounties'? Or you want to embed a hash of your signed message announcing  \n> the bounty?\n\nWell, the issue with not disambiguating bounties is that if further\nfunds are sent to the bounty address it's unclear how do you handle\nthose funds. Note how he specified a specific txout for the 1BTC bounty,\nbut specified an address for the 4BTC bounty.\n\n> Out of curiosity, I suppose right now you just keep pubkeys for the  \n> signatories you want to appoint and reuse the same pubkey to create these  \n> multi-sigs, or you have to ask for a new one each time?\n> \n>  From the signatories perspective, I imagine we're a long way off from a  \n> wallet receiving or importing the p2sh, tracking that these outputs as  \n> \"yours\", and even more, which contract/bounty they correspond to, and  \n> finally a usable way to accumulate signatures and ultimately spend the  \n> output to the bounty winner.\n\nWe're not that far off: I could cook up a Python script to do the\nsignature accumulation and signing in a few hours. There's just not all\nthat much demand yet to fully polish the UI's, and in any case, it'll\ndiffer for every specific application.\n\nFWIW blockchain.info added multisig escrow support ages ago, then\nremoved it not long after because usage was near zero.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001daf527009e07f452eee5dca920d3a9253b682d8bd26783ff\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/2a9200d8/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Payment protocol for onion URLs.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Adam Back",
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Gavin Andresen"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 21696
        }
    },
    {
        "title": "[Bitcoin-development] Advisory: PHP library Bitcoin SCI weak key generation",
        "thread_messages": [
            {
                "author": "Andres Home",
                "date": "2013-10-27T22:25:41",
                "message_text_only": "For those developers who are using the Bitcoin SCI library (maybe others too, I\nfound two total and could only make contact with one), I would advise that you\nreview how your software handles private key creation.\n\nUp until today, the Bitcoin SCI library used the Mersenne Twister PRNG or the\nGMP library's PRNG directly to generate private keys. This has been somewhat \nresolved in the most recent version (October 27th), but only for the \ncreateNewMiniKey() function. Even if you haven't been using this library, it \nwould be a fine oportunity to check your key generation functions if you do not \ninterface directly with bitcoind. \n\nAffected keys have 32bits of entropy, possibly up to 56bits depending on the \nbuild of PHP, a low enough amount that would allow GPU based attacks on keys\nin the lower ranges.\n\n\nI do not know how many keys have been created using either function\n.\nI also don't share the authors optimism that this isn't an issue."
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-10-27T22:46:34",
                "message_text_only": "Thanks for the warning; to be clear, \"the Bitcoin SCI library\" is this\nproject?\n  http://bitfreak.info/index.php?page=tools&t=bitsci\n\n\nOn Mon, Oct 28, 2013 at 8:25 AM, Andres Home <a86551 at outlook.com> wrote:\n\n> For those developers who are using the Bitcoin SCI library (maybe others\n> too, I\n> found two total and could only make contact with one), I would advise that\n> you\n> review how your software handles private key creation.\n\n\n\n> --\n>\n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/9eab4668/attachment.html>"
            },
            {
                "author": "Andres Home",
                "date": "2013-10-27T22:48:04",
                "message_text_only": "That's correct. \n\nThere's no source control so I've mirrored the weak functions. \n\n\nThe MiniKey function:\n\nhttp://pastie.org/8435726\n\n\nThe PrivKey function:\n\nhttp://pastie.org/8435731\n\n\n\n________________________________\n> Date: Mon, 28 Oct 2013 08:46:34 +1000 \n> Subject: Re: [Bitcoin-development] Advisory: PHP library Bitcoin SCI  \n> weak key generation \n> From: gavinandresen at gmail.com \n> To: a86551 at outlook.com \n> CC: bitcoin-development at lists.sourceforge.net \n>  \n> Thanks for the warning; to be clear, \"the Bitcoin SCI library\" is this  \n> project? \n>    http://bitfreak.info/index.php?page=tools&t=bitsci \n>  \n>  \n> On Mon, Oct 28, 2013 at 8:25 AM, Andres Home  \n> <a86551 at outlook.com<mailto:a86551 at outlook.com>> wrote: \n> For those developers who are using the Bitcoin SCI library (maybe  \n> others too, I \n> found two total and could only make contact with one), I would advise  \n> that you \n> review how your software handles private key creation. \n>  \n> --  \n> -- \n> Gavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "Advisory: PHP library Bitcoin SCI weak key generation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Andres Home"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2602
        }
    },
    {
        "title": "[Bitcoin-development] 0.8.5 setup.exe is corrupt",
        "thread_messages": [
            {
                "author": "Chris Evans",
                "date": "2013-10-28T07:31:45",
                "message_text_only": "I downloaded 0.8.5 windows setup .exe and it says it is corrupted even\nafter i try re-download it  maybe it needs to be rearchived?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/f2400c4b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.8.5 setup.exe is corrupt",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Chris Evans"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 314
        }
    }
]