[
    {
        "title": "[Bitcoin-development] Segmented Block Relaying BIP draft.",
        "thread_messages": [
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-10T15:07:52",
                "message_text_only": "Here is a BIP draft for improving the block relaying and validation so that it can be done in parallel and so that redundancy can be removed. This becomes more beneficial the larger the block sizes are.\n\nhttps://en.bitcoin.it/wiki/User:MatthewLM/ImprovedBlockRelayingProposal\n\nMatthew Mitchell\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120910/053635ab/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-10T15:14:25",
                "message_text_only": "On Mon, Sep 10, 2012 at 11:07 AM, Matthew Mitchell\n<matthewmitchell at godofgod.co.uk> wrote:\n> Here is a BIP draft for improving the block relaying and validation so that\n> it can be done in parallel and so that redundancy can be removed. This\n> becomes more beneficial the larger the block sizes are.\n>\n> https://en.bitcoin.it/wiki/User:MatthewLM/ImprovedBlockRelayingProposal\n\nWhy does this focus on actually sending the hash tree?  The block\nheader + transaction list + transactions a node doesn't already know\n(often just the coinbase) is enough."
            },
            {
                "author": "Matt Corallo",
                "date": "2012-09-10T16:29:20",
                "message_text_only": "I actually implemented parts of the header+ v<tx> stuff in a branch with\nmy bloom filter stuff, you can see it here:\nhttps://github.com/TheBlueMatt/bitcoin/commits/bloom%2Brelayblock\nIts pretty stupid and would be pretty easy to DoS/get it stuck/etc, but\nin theory it works.  I don't see much reason why we'd need anything\nsignificantly more complicated, but maybe there is a use-case I'm\nmissing?\n\nMatt\n\nOn Mon, 2012-09-10 at 11:14 -0400, Gregory Maxwell wrote:\n> On Mon, Sep 10, 2012 at 11:07 AM, Matthew Mitchell\n> <matthewmitchell at godofgod.co.uk> wrote:\n> > Here is a BIP draft for improving the block relaying and validation so that\n> > it can be done in parallel and so that redundancy can be removed. This\n> > becomes more beneficial the larger the block sizes are.\n> >\n> > https://en.bitcoin.it/wiki/User:MatthewLM/ImprovedBlockRelayingProposal\n> \n> Why does this focus on actually sending the hash tree?  The block\n> header + transaction list + transactions a node doesn't already know\n> (often just the coinbase) is enough."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-09-10T18:59:03",
                "message_text_only": "On Monday, September 10, 2012 3:07:52 PM Matthew Mitchell wrote:\n> Here is a BIP draft for improving the block relaying and validation so that\n> it can be done in parallel and so that redundancy can be removed. This\n> becomes more beneficial the larger the block sizes are.\n> \n> https://en.bitcoin.it/wiki/User:MatthewLM/ImprovedBlockRelayingProposal\n\nMost of the problem with block propagation lies in implementation, not \nprotocol... Distributing missing transaction on an as-needed basis is a \npossible improvement at the protocol level, but there hasn't (AFAIK) been any \nresearch into whether the little benefit outweighs the cost yet. In any case, \nI don't see why 6 new messages are needed instead of simply adding a single \nnew type to getinv?"
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-10T19:34:10",
                "message_text_only": "Do you mean getdata? Here is the reason for the 6 new messages:\n\ngetseginv,seginv - These are for learning about what segments of a block a node has. Else you could remove these messages and simply have nodes advertise blocks via inventory messages. In this case nodes would have to wait until they had fully received a block before relaying anything. No longer is there a benefit with nodes being able to relay segments of blocks before they have received the entire block.\n\ngettreelevel,treelevel - These are to received a level of the merle tree. Instead you might use get data but gettreelevel is more compact than get data and is clearly differentiates itself as part of the new protocol. Perhaps these messages could include the block headers alongside the hashes and you could request many at once like with the getheaders message? If you skip these messages, then you could verify the transactions at the end but there would be problems when peers give bad segments where data would need to be downloaded again.\n\ngetsegment,segment - These are clearly important to request and receive segments for the blocks. These allows for nodes to download arbitrary segments of blocks. The optimum number of segments could be calculated by node software using measurements of download speeds and latency times, the number of connections and how likely redundancy is to occur. If a node is up-to-date and likely has many of the transactions in blocks, it can start asking for the deepest merle level (tx hashes) and ask nodes for segments, avoiding transactions it already has.\n\nI'll get around to doing measurements myself sometime to estimate the benefit of this proposal. It will certainly be beneficial when block sizes reach some size but not much is really known except what can be assumed/guessed.\n\nI should also mention the bitcointalk topic here: https://bitcointalk.org/index.php?topic=103295.0\n\nOn 10 Sep 2012, at 19:59, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> \n> Most of the problem with block propagation lies in implementation, not \n> protocol... Distributing missing transaction on an as-needed basis is a \n> possible improvement at the protocol level, but there hasn't (AFAIK) been any \n> research into whether the little benefit outweighs the cost yet. In any case, \n> I don't see why 6 new messages are needed instead of simply adding a single \n> new type to getinv?\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120910/ea129c44/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-09-10T19:53:33",
                "message_text_only": "It seems to me the whole idea of segmenting blocks would add very little\n(to nothing) with any sane block size.  Sure, if a block were to be\n10GB, it may make sense.  However, even in that case, it would be easier\nto relay a list of tx hashes (which may be a bit expensive) and txes\nseparately instead of using a notion of block segments.  That said, I\ndon't see blocks ever being that large and if they do become that large,\nas only a few full nodes will remain, upgrading their protocol would be\n(relatively) easy.  I would instead encourage focus on decreasing block\nrelay times for the current network and as blocks approach 10MB (so that\nthey can approach 10MB).\n\nMatt\n\nOn Mon, 2012-09-10 at 20:34 +0100, Matthew Mitchell wrote:\n> Do you mean getdata? Here is the reason for the 6 new messages:\n> \n> \n> getseginv,seginv - These are for learning about what segments of a\n> block a node has. Else you could remove these messages and simply have\n> nodes advertise blocks via inventory messages. In this case nodes\n> would have to wait until they had fully received a block before\n> relaying anything. No longer is there a benefit with nodes being able\n> to relay segments of blocks before they have received the entire\n> block.\n> \n> \n> gettreelevel,treelevel - These are to received a level of\n> the merle tree. Instead you might use get data but gettreelevel is\n> more compact than get data and is clearly differentiates itself as\n> part of the new protocol. Perhaps these messages could include the\n> block headers alongside the hashes and you could request many at once\n> like with the getheaders message? If you skip these messages, then you\n> could verify the transactions at the end but there would be problems\n> when peers give bad segments where data would need to be downloaded\n> again.\n> \n> \n> getsegment,segment - These are clearly important to request and\n> receive segments for the blocks. These allows for nodes\n> to download arbitrary segments of blocks. The optimum number of\n> segments could be calculated by node software using measurements of\n> download speeds and latency times, the number of connections and how\n> likely redundancy is to occur. If a node is up-to-date and likely has\n> many of the transactions in blocks, it can start asking for the\n> deepest merle level (tx hashes) and ask nodes for segments, avoiding\n> transactions it already has.\n> \n> \n> I'll get around to doing measurements myself sometime to estimate the\n> benefit of this proposal. It will certainly be beneficial when block\n> sizes reach some size but not much is really known except what can be\n> assumed/guessed.\n> \n> \n> I should also mention the bitcointalk topic\n> here: https://bitcointalk.org/index.php?topic=103295.0\n> \n> On 10 Sep 2012, at 19:59, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> > \n> > Most of the problem with block propagation lies in implementation,\n> > not \n> > protocol... Distributing missing transaction on an as-needed basis\n> > is a \n> > possible improvement at the protocol level, but there hasn't (AFAIK)\n> > been any \n> > research into whether the little benefit outweighs the cost yet. In\n> > any case, \n> > I don't see why 6 new messages are needed instead of simply adding a\n> > single \n> > new type to getinv?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-10T20:00:57",
                "message_text_only": "On Mon, Sep 10, 2012 at 3:53 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> It seems to me the whole idea of segmenting blocks would add very little\n> (to nothing) with any sane block size.  Sure, if a block were to be\n> 10GB, it may make sense.  However, even in that case, it would be easier\n\nAs you know there is a hard protocol limit of 1MB.\n\nIf you're going to talk about doing that you are screwing with the\ncore economic promises of the system. (in particular, removing the cap\neliminates the only armwave we have for long term security).  But in\nany case, removing it requires a complete and totally incompatible\nhardfork, and at that point you can do whatever you want with the\nprotocol. Changing how blocks are fetched is almost incidental to the\nnumber of other things that would be changed.  I don't think it makes\nsense to design for that especially when something far simpler (as you\npointed out) is prudent for the design of bitcoin."
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-11T19:07:39",
                "message_text_only": "For some reason sourceforge is not sending me updates anymore but I can see the replies online\u2026\n\nThere could be a slightly more simple protocol which gives all the transactions hashes and nodes can then download the transactions separately. However there are two problems:\n\n1. Downloading all the transactions individually might be inefficient. My proposal will allow nodes to request multiple transactions at once.\n2. Why not add a few additional components to the protocol to allow requests for any level of the merkle tree? It's not very complicated at all and protects against the future.\n\nSure, analysis needs to be done to see at what point the proposal would give benefit and I will hopefully get around to doing some measurements of peer behaviour to aid with this.\n\nI think it's a good idea to think ahead rather than only do what is beneficial for the network currently. The block sizes at the moment are about 0.1MB but what if the bitcoin demand starts pushing that into megabytes? And yes the ~0.95MB limit needs to be changed in order for bitcoin to grow that far. Why would the limit not be lifted? How will bitcoin demand be satisfied other than having large fees to deter transactions, hoping the fees are large enough to balance the demand with the block size limits to prevent many transactions being unconfirmed and annoying users? That limit has got to go eventually. And then it could be that block sizes do become large enough to worry about the performance in relaying.\n\nBest not to leave this to the last minute, so at the very least I think it's good to talk about this."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-11T19:42:32",
                "message_text_only": "On Tue, Sep 11, 2012 at 3:07 PM, Matthew Mitchell\n<matthewmitchell at godofgod.co.uk> wrote:\n> For some reason sourceforge is not sending me updates anymore but I can see the replies online\u2026\n>\n> There could be a slightly more simple protocol which gives all the transactions hashes and nodes can then download the transactions separately. However there are two problems:\n>\n> 1. Downloading all the transactions individually might be inefficient. My proposal will allow nodes to request multiple transactions at once.\n\nSomeone can do that just by pipelining the one at a time requests.\nHow much bandwidth do you think you could save over that?\n\n> 2. Why not add a few additional components to the protocol to allow requests for any level of the merkle tree? It's not very complicated at all and protects against the future.\n\nI don't see what value this provides.  For protecting against the\nfuture you might as well suggest uploading x86 code which gets\nexecuted to select transactions. \"Protects against the future\".  Can\nyou clarify some more about exactly how you think it would help?\n\nIt's sometimes desirable to be more general rather than more special\ncase when it's costless... but having couple extra p2p protocol\nmessages to implement, test for interop, guard against vulnerability,\netc. isn't costless... and should be justified with concrete benefits.\n\nit's not clear to me how your proposal is really all that useful for\nvery large blocks: I looks like it would lot of bytes sending\nredundant tree data.\n\n>The block sizes at the moment are about 0.1MB but what if the bitcoin demand starts pushing that into megabytes?\n\nAnd what if? _Bitcoin_ blocksizes can't be any larger.  Some future\nincompatible system? well perhaps. But we're working on the protocol\nfor bitcoin now.\n\n> And yes the ~0.95MB limit needs to be changed in order for bitcoin to grow that far. Why would the limit not be lifted? How will bitcoin demand be satisfied other than having large fees to deter transactions, hoping the fees are large enough to balance the demand with the block size limits to prevent many transactions being unconfirmed and annoying users? That limit has got to go eventually. And then it could be that block sizes do become large enough to worry about the performance in relaying.\n\nThe finite size\u2014 and ultimately the contention for space it causes\u2014 is\nthe only thing will creates non-trivial fees. Without the fees there\nis no honest economic motivation to mine with adequate computing power\nto provide security (lots of dishonest motivations\u2014 e.g. applying\ncontrol over the currency exist), you'd just have a race to the\nbottom, given unbounded block sizes it is always rational for\ndecentralized to include any transaction with a fee even if it is very\nsmall\u2014 otherwise the next rational solver is just going to include it.\n\nBitcoin gets its value through scarcity. There are two kinds of\nscarcity that are economically important, scarcity of the coins\u2014 there\nwill never be more than 21 million\u2014 and scarcity of the block space\nwhich, as the protocol is defined and enforced by every node can not\nbe more than 1MB. The latter scarcity is what makes the security model\neconomically sane.\n\nFortunately, its perfectly possible to make transactions denominated\nin bitcoin outside of the blockchain, and in a secure and distributed\nmanner that respects the principles that make bitcoin attractive, but\nwith information hiding that improves privacy, transaction speed, and\nscalability. See, e.g. the good work being done by Open transactions\nto create distributed cryptographic banks.  So blockchain scarcity\nitself doesn't prevent Bitcoin from being a one world currency\n(something which isn't at all sane no matter how big you make the\nblocks if you don't allow for other modes of transaction processing\u2014\nwho the heck wants to possibly wait an hour to get a 1 confirm\nsodapop??).\n\n>From the beginning it was obvious that confirmations would eventually\nbe slower (or expensive to make merely slow; Bitcoin is incapable of\nreliable fast confirmations)\u2014 thats the nature the stochastic\nconsensus and the fee based security support.  You could instead\nimagine a future where bitcoin's security came by collusion by major\nfinancial cartels and governments, and where fees aren't important....\n But I reject that future, it's a perfectly viable one, but why bother\nwith Bitcoins in the first place? To make some early adopters a little\nbit of money starting off the next big centrally controlled fiat?\nBoring.\n\nI can't say for sure if the 1MB limit will stay exactly as is forever,\nas I expect the economics work with any limit out of a fairly broad\nrange that is low enough to both make the space seriously scarce and\nlow enough that 'inexpensive' (e.g. privately owned) hardware can\ncontinue to audit it to preserve the decentralized security,  and the\neconomic importance of the size limit is more subtle than the\ninflation resistance... but I know that changing it is precisely as\ntechnically difficult as changing the 21 million limit: all Bitcoin\nnode software must be replaced with incompatible software, and I\nbelieve it would be just as economically risky\u2014 if not more so\u2014 if\ndone wrong, as at least inflation would have a easily understood\ndirect dillution effect while inadequate security would potentially\nmake all Bitcoin worthless.  As such I don't think it's even worth\ndiscussing until there is an urgent demand to clarify the tradeoffs...\n\nShould the block size ever be increased the message format used for\nrelaying the larger blocks will be the smallest of the issues being\ndiscussed."
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-11T21:48:43",
                "message_text_only": "On 11 Sep 2012, at 20:42, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> Someone can do that just by pipelining the one at a time requests.\n> How much bandwidth do you think you could save over that?\n\nYou wouldn't need to pipeline the requests, just place more than one inventory vector in get data, right? Well my messages would save the space of those inventory vectors. Instead of needing 36 byte inventory vectors for each transaction and a var int, you would need two var ints only. And then the transaction responses only need one header, so you save 24 bytes for each transaction after the first. You could say that is a small benefit.\n \n> I don't see what value this provides.  For protecting against the\n> future you might as well suggest uploading x86 code which gets\n> executed to select transactions. \"Protects against the future\".  Can\n> you clarify some more about exactly how you think it would help?\n\nWell it depends on wether you seriously think bitcoin blocks should be limited at a million bytes or not.\n\n> it's not clear to me how your proposal is really all that useful for\n> very large blocks: I looks like it would lot of bytes sending\n> redundant tree data.\n\nLook at bittorrent. With bittorrent you don't download files from a single peer all at once.\n\n> Bitcoin gets its value through scarcity. There are two kinds of\n> scarcity that are economically important, scarcity of the coins\u2014 there\n> will never be more than 21 million\u2014 and scarcity of the block space\n> which, as the protocol is defined and enforced by every node can not\n> be more than 1MB. The latter scarcity is what makes the security model\n> economically sane.\n\nWhy wouldn't requesting minimum fees in the software work as is done currently?\n\n> Fortunately, its perfectly possible to make transactions denominated\n> in bitcoin outside of the blockchain, and in a secure and distributed\n> manner that respects the principles that make bitcoin attractive, but\n> with information hiding that improves privacy, transaction speed, and\n> scalability. See, e.g. the good work being done by Open transactions\n> to create distributed cryptographic banks.  So blockchain scarcity\n> itself doesn't prevent Bitcoin from being a one world currency\n> (something which isn't at all sane no matter how big you make the\n> blocks if you don't allow for other modes of transaction processing\u2014\n> who the heck wants to possibly wait an hour to get a 1 confirm\n> sodapop??).\n\nSo what you essentially suggest is having bitcoin banks that maintain trust through Open Transaction contracts which contains proof of agreement, providing some legal protection? One wonders why have bitcoin at all then? Why not have an elaborate e-money system between several banks using Open Transactions? Bitcoin doesn't just contain proof of if something was done right or not, it contains actual certainty that it will be done right. And how does Open Transactions prevent fractional reserve fraud?\n\nI suppose when people consider bitcoin banks, they will consider bitcoin being useless.\n\n>  but I know that changing it is precisely as\n> technically difficult as changing the 21 million limit\n\nSet the change to occur at some block in the future leaving time for people to upgrade. Send out alert messages to notify users to upgrade. Issue is, some people might not like the change for whatever reasons.\n\nAs far as I see it, if bitcoin won't scale, then it's worth looking at something different to bitcoin that will scale."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-11T23:22:05",
                "message_text_only": "On Tue, Sep 11, 2012 at 5:48 PM, Matthew Mitchell\n<matthewmitchell at godofgod.co.uk> wrote:\n> You wouldn't need to pipeline the requests, just place more than one inventory vector in get data, right? Well my messages would save the space of those inventory vectors. Instead of needing 36 byte inventory vectors for each transaction and a var int, you would need two var ints only. And then the transaction responses only need one header, so you save 24 bytes for each transaction after the first. You could say that is a small benefit.\n\nBut you only need to request the transactions you don't have. Most of\ntime you should already have almost all of the transactions.\n\n> Look at bittorrent. With bittorrent you don't download files from a single peer all at once.\n\nYou can fetch transactions from multiple peers with just a simple\nmechanism that gives you the headers plus the txn list. And if you\nwant ArgumentAdSomethingElse, thats what bittorrent does too: the\ntorrent file contains the list of block hashes, and you get it from\none place.\n\n> Why wouldn't requesting minimum fees in the software work as is done currently?\n\nBecause there is no motivation not to set them to zero, if you don't\nsomeone else will.  Right now the income from fees is hardly relevant,\nand the ability to drive more non-existant because there isn't enough\nload to create scarcity.\n\n\n> So what you essentially suggest is having bitcoin banks that maintain trust through Open Transaction contracts which contains proof of agreement, providing some legal protection? One wonders why have bitcoin at all then? Why not have an elaborate e-money system between several banks using Open Transactions?\n\nBecause it can't resist inflation. You have to trust that the banks\nwon't conspire to their mutual benefit to inflate the base currency.\nOT can make it so a 'bank' (which is really a distributed collection\nof nodes, not a single point of trust) can trivially prove how much\n\"gold certificates\" it has issued, but you also need to prove how much\n'gold' exists and which keys hold it, and for that you need a _global_\nconsensus; which bitcoin provides...\n\nIf you don't like\n\n>Bitcoin doesn't just contain proof of if something was done right or not, it contains actual certainty that it will be done right. And how does Open >Transactions prevent fractional reserve fraud?\n\nWell, Bitcoin gives you no certainty that any particular transaction\nwill be confirmed at all, ever; so perhaps best not to overstate it\ntoo much. But yes, Bitcoin is great. ... but all that greatness\ndepends on there being a way to fund enough computation so that\nattacks are too costly to be justified and that the cost of\nmaintaining a system to fully validate the system's rules (e.g. that\nthe miners aren't mining duplicate txns to create inflation for\nthemselves) is low enough that it will naturally enormously\ndistributed so that a conspiracy is effectively impossible.  Otherwise\neverything consolidates down to a few meganodes and the attractive\nproperties are all gone.\n\nOT's issuers can prove how much bitcoin they hold on the blockchain\n(by nothing more sophisticated than signmessage) and they can prove\nhow many tokens they've issued against it.\n\nAnd I didn't mean to suggest OT as a unique solution. Another path is\nripple, the idea of which is a sort of a p2p hawala where you have\npairwise trust and debt. It can allow you to circulate around tokens\nbetween a community of users and only settle infrequently (as\ndetermined by your level of trust, the debt involved, and the cost of\nthe bitcoin transaction) against bitcoin.\n\n> I suppose when people consider bitcoin banks, they will consider bitcoin being useless.\n\nThey already exist, in crappy centralized form\u2014 e.g. look at mtgox\ncodes and user to user instant transfers; and bitcoin isn't useless.\nPlus some extra system of some kind is the _only_ way to securely\nirreversible transactions which are reliably fast, so it's not like\nthere is any real prospect of using bitcoin directly for all kinds of\nuses at scale. (yes, blocks are 'only' 10 minutes apart on average,\nbut if you care about fast, you care about e.g. the 99% not the\naverage)\n\n> As far as I see it, if bitcoin won't scale, then it's worth looking at something different to bitcoin that will scale.\n\nBitcoin scales fine.  It is not a singular replacement for everything\nyou can imagine it being a replacement for, however, or at least not a\ngood replacement.  The fact that you could conceivably make it\ndirectly scale up to handle e.g. the volume of all the credit network\ndoesn't make that a good idea. It would still be a very poor\nreplacement for a credit network (slow transactions; which can't be\nfixed by tweaking some parameters, the bitcoin blockchain consensus\nalgorithm has infinite convergence time when the block time falls\nbelow the hash-power-weighed latency), and that kind of scaling would\nabsolutely ruin the decentralization, making it so only large states\nand megabanks could run full nodes, and even at that level it couldn't\nmatch the worldwide volume of cash transactions or 'internal' money\ntransactions (like money moving around on all the poker tables in the\nworld).   It's like someone made the mistake of saying the floor wax\nis edible (linseed oil) and now you complain that its a crappy desert\ntopping. :P\n\nMaybe people will ultimately agree to raise the block sizes, but I\nexpect and hope that they'll only do so when it is entirely\nuncontroversial that doing so won't significantly degrade the\ndecentralization (certainly not the case today: a large portion of the\nnetwork appears to have trouble keeping up with large blocks right\nnow, though upcoming software improvements will help enormously), or\nthe mining economics.   And yes, of course, you schedule the change\nfor the future, but as you note that it doesn't solve the problem of\npeople opposing it."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-09-13T08:42:58",
                "message_text_only": "For what it's worth I disagree with Gregory on nearly all these\npoints, so don't take it as some kind of consensus from the Bitcoin\ncommunity ;)\n\nMatts change is reasonable but I think we all agree it has minimal\nimpact at the moment relative to other things, so something even more\ncomplex than that seems like a non-starter. Bloom filtering is a lot\nmore important."
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-13T14:05:29",
                "message_text_only": "On 13 Sep 2012, at 09:42, Mike Hearn <mike at plan99.net> wrote:\n\n> For what it's worth I disagree with Gregory on nearly all these\n> points, so don't take it as some kind of consensus from the Bitcoin\n> community ;)\n> \n> Matts change is reasonable but I think we all agree it has minimal\n> impact at the moment relative to other things, so something even more\n> complex than that seems like a non-starter. Bloom filtering is a lot\n> more important.\n\nSure other things may be done before this, I was seeing this as a change somewhere down the line but not urgent.\n\n@Gregory\n\n> But you only need to request the transactions you don't have. Most of\n> time you should already have almost all of the transactions.\n\nYes, my proposal allows you to do this. You skip out transactions your already have. My proposal is simply better than others because it takes full advantage of the merkle tree structure with minor additions that are simple to implement. How hard is it to get the hashes at a particular level of a merkle tree? Not hard at all. How hard is it to place a selection of transactions from a block into a message Not hard at all. Implementation of the protocol requirements would be a piece of cake. The harder bit would be to create an algorithm to determine the best level of segmentation but this is not required to comply with the protocol.\n\n> Because there is no motivation not to set them to zero, if you don't\n> someone else will\n\nThe motivation to incentivise miners and maintain stronger security? The difficulty only has to be high enough to prevent a cartel of malicious miners taking control of the network, something that is potentially a problem today with the large mining pools. Remember that the more transactions there are the more fees there can be for miners to collect. The more people that are using bitcoin, the greater bitcoins will be worth. A bigger network should be good for miners when relying on fees.\n\n> And yes, of course, you schedule the change\n> for the future, but as you note that it doesn't solve the problem of\n> people opposing it.\n\nIf it's so controversial that it creates a split making two separated currencies then I'd see it turning out like the format wars (VHS vs Betamax and Blu-ray vs HD-DVD). Eventually people will move towards one or the other since it's better for people to have universalised agreement on a system."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-13T15:16:09",
                "message_text_only": "On Thu, Sep 13, 2012 at 10:05 AM, Matthew Mitchell\n<matthewmitchell at godofgod.co.uk> wrote:\n\n> @Gregory\n>\n>> But you only need to request the transactions you don't have. Most of\n>> time you should already have almost all of the transactions.\n>\n> Yes, my proposal allows you to do this. You skip out transactions your already have. My proposal is simply better than others because it takes full advantage of the merkle tree structure with minor additions that are simple to implement. How hard is it to get the hashes at a particular level of a merkle tree? Not hard at all. How hard is it to place a selection of transactions from a block into a message Not hard at all. Implementation of the protocol requirements would be a piece of cake. The harder bit would be to create an algorithm to determine the best level of segmentation but this is not required to comply with the protocol.\n\nSorry, I'm still not seeing what the value is.  How is the tree level\nuseful to anyone?  If you did want to get only parts of the\ntransaction list, why not just ranges from the lowest level?"
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-13T15:46:21",
                "message_text_only": "On 13 Sep 2012, at 16:16, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> Sorry, I'm still not seeing what the value is.  How is the tree level\n> useful to anyone?  If you did want to get only parts of the\n> transaction list, why not just ranges from the lowest level?\n\nObtaining a particular tree level allows you to verify segments without needing to download all the transaction hashes first. You only need one hash per segment. For instance if you want to divide the block into 8 segments you specify level 3 and download 8 hashes. You could download all transaction hashes if you wanted and it would still work, it just requires more data transfer for the hashes. This was the reason why merkle trees were used in bitcoin, to avoid requiring all hashes to verify data."
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-13T17:49:49",
                "message_text_only": "On 13 Sep 2012, at 16:51, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> I thoroughly understand the value of tree hashes. That wasn't what I\n> was asking about.\n> \n> If you're validating a block you need all the transactions, once you\n> have them or their hashes you can build the tree without transferring\n> more, e.g. what a fully validating node needs. If you're checking a\n> single transaction to need the path from the transaction to the root\n> (what a SPV nodes need, for example).\n> \n> Can you spell out the 'end user'ish application for fetching a tree level?\n\nA merkle tree root is found by hashing the two children together and those children are found the same way until you get to the greatest level down the tree. This means you can validate children as being correct as long as they hash together to form the root. This means you do not need all the transaction hashes to validate segments of the block, you only need the root hashes for all the segments you want. Let's say there are 8 transactions and you want to verify 4 segments (2 transactions each), The merkle tree looks like this (Might not work depending on the font):\n\nLevel 0:               *\n                      / \\\n                     /   \\\n                    /     \\\n                   /       \\\n                  /         \\\n                 /           \\\n                /             \\\nLevel 1:       *               *\n              / \\             / \\\n             /   \\           /   \\\n            /     \\         /     \\\nLevel 2:   *       *       *       *\n          / \\     / \\     / \\     / \\\nLevel 3: *   *   *   *   *   *   *   *\n\nWhen you look at any non-leaf node you can see a separate merkle tree where the root can be found exactly the same as any other merkle tree. In this example you want four segments, so you ask for level 2. Now imagine a tree without level 3, you can validate the root with level 2. In fact you can validate that the root exists for any level. So you first check that the level 2 hashes do indeed calculate to the root. Once this is done you can now use these hashes to validate the segments. When you receive a segment, you check that segment against the segment's root. So you've validated the segment transactions for the segment root and the segment root was validated for the entire tree's root. You validate the segments for each segment root and this way you know all the transactions are valid for the four segments and thus are valid for the entire tree. This way you have downloaded 4 hashes instead of 8. \n\nDownloading the transactions hashes are therefore not necessary only the level for the segment roots. You might for instance want to divide the block into two segments in which case you ask for level 1 and download 2 hashes.\n\nI hope that made sense.\n\nAnd yes the merkle tree is particularly useful for validating a single transaction exists in a block as that saves a large proportion of the data required. The redundant data removed in the proposal here is smaller as a proportion of the total data (Because most of the data is the actual transactions themselves), so you might argue it's not worth it but it's simple to implement.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120913/5e035fd4/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-09-13T18:59:02",
                "message_text_only": "On Thu, Sep 13, 2012 at 06:49:49PM +0100, Matthew Mitchell wrote:\n> A merkle tree root is found by hashing the two children together and those children are found the same way until you get to the greatest level down the tree. This means you can validate children as being correct as long as they hash together to form the root. This means you do not need all the transaction hashes to validate segments of the block, you only need the root hashes for all the segments you want. Let's say there are 8 transactions and you want to verify 4 segments (2 transactions each), The merkle tree looks like this (Might not work depending on the font):\n\n> I hope that made sense.\n\nI'm quite sure Gregory thoroughly understands how Merkle trees work and why they are useful.\n\nHis question was about the use case. Let me try to answer his question, by making some assumptions about your intentions. Correct me if I'm wrong - I haven't read all details.\n\nYou want to parallellize block downloads, while at the same time preventing re-download of transactions that are already known.\nTo do so, a requesting node would first request (for example) the 8 level-3 hashes, then start 8 parallel threads to download the\ntransactions from presumably 8 different peers. Each thread then fetches the transaction id's that correspond to its own 1/8th of\nthe block, and requests the transactions whose txid is not yet known.\nComparing this with Gregory's own suggestion (just fetch the entire txid list at first, and then (again as parallellized as needed)\nfetch the unknown transactions from several peers), this does indeed have an advantage: you need to download (relatively) far less\ndata before the threaded part can start. If this is what you propose, it is certainly meaningful, but the gains aren't very large,\nin my opinion.\n\nHowever, my impression while reading your proposal was at times that you intend to process the different layers of the\nMerkle tree iteratively after starting the initial parallel segments. I don't think that is useful, as you'll need the actual\ntxids anyway before deciding whether they need to be downloaded at all, it adds several round-trips, and once you have downloaded\nthe intermediate merkle hashes for about 8 levels, you've already transferred more data than the transactions themselves. I think\nGregory also assumed something like this, making him question why it's useful. Anyway, this whole paragraph is one assumption, so\nif it's not the case, ignore me.\n\nCan you clarify what you mean? Preferably by giving a concrete sequence of exchanged messages, with a given purpose?\n\nPS: the reason Satoshi used a Merkle tree for the transactions in a block was to allow a short piece of data (the hashes along a\npath in the tree) to prove a transaction belongs to it - I doubt he intended it for parallellizing downloads (though it certainly\nopens some opportunities here).\n\n-- \nPieter"
            },
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-13T20:24:35",
                "message_text_only": "On 13 Sep 2012, at 19:59, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> You want to parallellize block downloads, while at the same time preventing re-download of transactions that are already known.\n> To do so, a requesting node would first request (for example) the 8 level-3 hashes, then start 8 parallel threads to download the\n> transactions from presumably 8 different peers. Each thread then fetches the transaction id's that correspond to its own 1/8th of\n> the block, and requests the transactions whose txid is not yet known.\n> Comparing this with Gregory's own suggestion (just fetch the entire txid list at first, and then (again as parallellized as needed)\n> fetch the unknown transactions from several peers), this does indeed have an advantage: you need to download (relatively) far less\n> data before the threaded part can start. If this is what you propose, it is certainly meaningful, but the gains aren't very large,\n> in my opinion.\n\nThis is not fully correct. I propose downloading the roots of the segments when you are not looking to remove redundant transaction downloads. This would be the case when the node is not up-to-date and is unlikely to have transactions in the required blocks. When a node is up-to-date and can benefit from removing redundant transaction downloads it can switch to downloading all the transactions hashes by specifying a high level number. Also I wouldn't recommend using one thread per connection, I'd recommend using one thread for all connections.\n\n> However, my impression while reading your proposal was at times that you intend to process the different layers of the\n> Merkle tree iteratively after starting the initial parallel segments. I don't think that is useful, as you'll need the actual\n> txids anyway before deciding whether they need to be downloaded at all, it adds several round-trips, and once you have downloaded\n> the intermediate merkle hashes for about 8 levels, you've already transferred more data than the transactions themselves. I think\n> Gregory also assumed something like this, making him question why it's useful. Anyway, this whole paragraph is one assumption, so\n> if it's not the case, ignore me.\n\nThis isn't what I was suggesting. I was suggesting you only need to download one level. Once you have done that you verify everything for the hashes on that level.\n\n> \n> Can you clarify what you mean? Preferably by giving a concrete sequence of exchanged messages, with a given purpose?\n\nWell you will need to ask for the headers first. Once you do that you can start downloading the full blocks for the headers.  The node should use \"get blocks\" to find nodes with segments of the blocks they need. Now for each block:\n\n1. Send getsiginv to a number of peers to know the segments of the blocks they have. \n2. Send gettreelevel requesting a level of the merkle tree from a peer that can provide it. When up-to-date use a high level to get the transaction hashes to find redundant data.\n3. Validate the treelevel response\n4. Send getsegment for each segment wanted (at the same time where possible) to the peers that have these segments. Skip transactions already known.\n5. Validate the transactions in each segment received. Stop if the block is invalid and disconnect peers that give transactions which do not fit the merkle tree.\n6. Revert to getdata if peers using the protocol cannot satisfy the block download.\n\nWhen a valid block segment is received, include the block in inv and headers messages for other peers using the protocol. Thus relaying can begin before the entire block is downloaded.\n\nI'm thinking about improvements to this proposal. I'll get to that tomorrow perhaps\u2026\n\nThank you everyone for the replies."
            }
        ],
        "thread_summary": {
            "title": "Segmented Block Relaying BIP draft.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Matthew Mitchell",
                "Mike Hearn",
                "Gregory Maxwell",
                "Matt Corallo",
                "Pieter Wuille"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 40699
        }
    },
    {
        "title": "[Bitcoin-development] Fwd:  Segmented Block Relaying BIP draft.",
        "thread_messages": [
            {
                "author": "Matthew Mitchell",
                "date": "2012-09-10T15:25:25",
                "message_text_only": "Almost forgot...\n\nBegin forwarded message:\n\n> From: Matthew Mitchell <matthewmitchell at godofgod.co.uk>\n> Subject: Re: [Bitcoin-development] Segmented Block Relaying BIP draft.\n> Date: 10 September 2012 16:23:45 BST\n> To: Gregory Maxwell <gmaxwell at gmail.com>\n> \n> By \"gettreelevel\" and \"treelevel\" you get the level of the merle tree with the hashes for the segments you want to download. You could request all the transaction hashes by specifying a very deep level. You could modify the proposal by removing the \"level\" byte in \"gettreelevel\" and always send the deepest level ie. The transaction hashes. Though by specifying the level you do not need to download all of the transaction hashes, only the hashes you need to verify each segment.\n> \n> \n> On 10 Sep 2012, at 16:14, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> \n>> Why does this focus on actually sending the hash tree?  The block\n>> header + transaction list + transactions a node doesn't already know\n>> (often just the coinbase) is enough.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120910/6bd57c32/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Segmented Block Relaying BIP draft.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matthew Mitchell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1201
        }
    },
    {
        "title": "[Bitcoin-development] Announcement: libcoin",
        "thread_messages": [
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-09-12T23:27:32",
                "message_text_only": "Michael,\n\n I think it is time to your Libcoin to become the official Bitcoin...   ;-)\n\n Look: https://bitcointalk.org/index.php?topic=108987.msg1185827\n\n It is more or less the same idea, right?!\n\nBest!\nThiago\n\nOn 16 July 2012 17:14, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com> wrote:\n\n> Hi Michael!\n>\n>  I would like to ask you one thing:\n>\n>  1- Release a new version of Libcoin closest as possible with mainline\n> Bitcoin.\n>\n>  I mean, do not add any extra code to it and also, do not change any\n> stdout / stderr messages.\n>\n>  How much do you think that this will cost?\n>\n>  For the extra code: I'll need to run the \"blockchain side\" as Linux user\n> called \"blockchain\" and, each of my regular Linux user will have its own\n> wallet.dat file (without the blockchain).\n>\n> Thanks!\n> Thiago\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120912/0df95dce/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 980
        }
    },
    {
        "title": "[Bitcoin-development] separate out blockchain db and wallet to two dirs?",
        "thread_messages": [
            {
                "author": "Scott Howard",
                "date": "2012-09-14T01:57:05",
                "message_text_only": "This idea is from a Debian user [1].\n\nWhat do you think of moving the > 2 GB db to $HOME/.cache/bitcoin and\nleaving the wallet and other config files in $HOME/.bitcoin? This is\nso backups can skip the .cache directory and the proposal follows the\nfreedesktop.org XDG Base Directory Specification [2]. Personal\ninfo/settings stays in .bitcoin/ and everything that can be rebuilt\ngoes to .cache/bitcoin/ I know users can do a work around and set it\nup themselves with symlinks, but interested in what you guys think.\n\nCheers,\nScott (Debian Developer but new to bitcoin)\n\n\n\n[1] http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=660286\n[2] http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"
            },
            {
                "author": "grarpamp",
                "date": "2012-09-14T02:15:24",
                "message_text_only": "I mentioned this somewhere a while ago.\nIt is enough of a sysadmin problem to warrant a feature ticket.\nOpen one on github for it.\nXDGBDS is not canon. So don't hardcode said paths.\nAll paths should be specifiable in bitcoin the config file, whose\nlocation should itself be specifiable on the command line."
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-09-14T02:18:13",
                "message_text_only": "I like this idea, although I would say the blockchain should go in\n/var/lib/bitcoin by default, right? I'm just a longtime LInux guy, not a\nformal sysadmin, though.\n\nPeter\n\nOn Fri, Sep 14, 2012 at 11:15 AM, grarpamp <grarpamp at gmail.com> wrote:\n\n> I mentioned this somewhere a while ago.\n> It is enough of a sysadmin problem to warrant a feature ticket.\n> Open one on github for it.\n> XDGBDS is not canon. So don't hardcode said paths.\n> All paths should be specifiable in bitcoin the config file, whose\n> location should itself be specifiable on the command line.\n>\n>\n> ------------------------------------------------------------------------------\n> Got visibility?\n> Most devs has no idea what their production app looks like.\n> Find out how fast your code is with AppDynamics Lite.\n> http://ad.doubleclick.net/clk;262219671;13503038;y?\n> http://info.appdynamics.com/FreeJavaPerformanceDownload.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n------------------------------\n\n[image: CoinLab Logo]PETER VESSENES\nCEO\n\n*peter at coinlab.com * /  206.486.6856  / SKYPE: vessenes\n811 FIRST AVENUE  /  SUITE 480  /  SEATTLE, WA 98104\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120914/2b3f898d/attachment.html>"
            },
            {
                "author": "grarpamp",
                "date": "2012-09-14T02:59:02",
                "message_text_only": "> I like this idea, although I would say the blockchain should go in /var/lib/bitcoin\n> by default, right? I'm just a longtime LInux guy, not a formal sysadmin, though.\n\nFurther, bitcoin doesn't allow easy separation of the files without\ndetachdb (off by default), nor does it supply a user agnostic system\ndaemon to do the block processing separately from user wallet ops.\nSo I would suggest until then it remain split up somewhere under\n.bitcoin rather than in /var or anywhere else."
            },
            {
                "author": "grarpamp",
                "date": "2012-09-14T03:03:23",
                "message_text_only": "Linux typically uses the FHS, which various distros often bastardize:\n http://www.linuxfoundation.org/collaborate/workgroups/lsb/fhs\nBSD typically uses the traditional hierarchy, for which admins\n often add /home and /opt:\n http://svnweb.freebsd.org/base/head/share/man/man7/hier.7?revision=HEAD&view=markup\n\nYou'd have to read them both and decide which camp you're in.\n https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard\n\nSince bitcoin isn't really an X app at it's core, XDG doesn't really\napply.\n http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\nFurther, bitcoin doesn't allow easy separation of the files without\ndetachdb (off by default), nor does it supply a user agnostic system\ndaemon to do the block processing separately from user wallet ops.\nSo I would suggest until then it remain split up somewhere under\n.bitcoin rather than in /var or anywhere else.\n\nAnd when you figure out where I should place my messages in\nfull the first time, please let me know because I obviously need help."
            },
            {
                "author": "Wladimir",
                "date": "2012-09-14T05:27:47",
                "message_text_only": "On Fri, Sep 14, 2012 at 3:57 AM, Scott Howard <showard314 at gmail.com> wrote:\n\n> This idea is from a Debian user [1].\n>\n> What do you think of moving the > 2 GB db to $HOME/.cache/bitcoin and\n> leaving the wallet and other config files in $HOME/.bitcoin? This is\n> so backups can skip the .cache directory and the proposal follows the\n> freedesktop.org XDG Base Directory Specification [2]. Personal\n> info/settings stays in .bitcoin/ and everything that can be rebuilt\n> goes to .cache/bitcoin/ I know users can do a work around and set it\n> up themselves with symlinks, but interested in what you guys think.\n>\n\nThis is currently not feasible due to BerkelyDB limitations. All the\ndatabases are within one 'environment', which is necessarily one directory\n(it can probably be hacked around, but obviously we're really careful).\n\nWhen LevelDB for the block chain and the custom format for the wallets is\nintroduces, various new configurations will be possible: Multiple wallets,\nwallet in block chain in separate dirs, etc.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120914/b2af0259/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-09-14T07:40:55",
                "message_text_only": "On Fri, Sep 14, 2012 at 1:27 AM, Wladimir <laanwj at gmail.com> wrote:\n> This is currently not feasible due to BerkelyDB limitations. All the\n> databases are within one 'environment', which is necessarily one directory\n> (it can probably be hacked around, but obviously we're really careful).\n>\n> When LevelDB for the block chain and the custom format for the wallets is\n> introduces, various new configurations will be possible: Multiple wallets,\n> wallet in block chain in separate dirs, etc.\n\nIndeed.  See many threads on the forum discussing this...  a\nfrequently requested feature.\n\nAs Wladimir says, it's a database constraint at the moment.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "separate out blockchain db and wallet to two dirs?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Peter Vessenes",
                "Scott Howard",
                "grarpamp"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 5924
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-Qt/bitcoind version 0.7 released",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-09-18T00:03:46",
                "message_text_only": "Bitcoin version 0.7.0 is now available for download at:\n  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.0/\n\nWe recommend that everybody running prior versions of bitcoind/Bitcoin-Qt\nupgrade to this release.\n\nPlease report bugs using the issue tracker at github:\n  https://github.com/bitcoin/bitcoin/issues\n\nProject source code is hosted at github; you can get\nsource-only tarballs/zipballs directly from there:\n  https://github.com/bitcoin/bitcoin/tarball/v0.7.0  # .tar.gz\n  https://github.com/bitcoin/bitcoin/zipball/v0.7.0  # .zip\n\nUbuntu Linux users can use the \"Personal Package Archive\" (PPA)\nmaintained by Matt Corallo to automatically keep\nbitcoin up-to-date.  Just type\n  sudo apt-add-repository ppa:bitcoin/bitcoin\nin your terminal, then install the bitcoin-qt package:\n  sudo apt-get install bitcoin-qt\n\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait\nuntil it has completely shut down (which might take a few minutes for older\nversions), then run the installer (on Windows) or just copy over\n/Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n\nIf you were running on Linux with a version that might have been compiled\nwith a different version of Berkeley DB (for example, if you were using the\nPPA and are switching to the binary release), then run the old version again\nwith the -detachdb argument and shut it down; if you do not, then the new\nversion will not be able to read the database files and will exit with an error.\n\nIncompatible Changes\n--------------------\n* Replaced the 'getmemorypool' RPC command with 'getblocktemplate/submitblock'\n  and 'getrawmempool' commands.\n* Remove deprecated RPC 'getblocknumber'\n\nBitcoin Improvement Proposals implemented\n-----------------------------------------\nBIP 22 - 'getblocktemplate', 'submitblock' RPCs\nBIP 34 - block version 2, height in coinbase\nBIP 35 - 'mempool' message, extended 'getdata' message behavior\n\n\nCore bitcoin handling and blockchain database\n---------------------------------------------\n* Reduced CPU usage, by eliminating some redundant hash calculations\n* Cache signature verifications, to eliminate redundant signature checks\n* Transactions with zero-value outputs are considered non-standard\n* Mining: when creating new blocks, sort 'paid' area by fee-per-kb\n* Database: better validation of on-disk stored data\n* Database: minor optimizations and reliability improvements\n* -loadblock=FILE will import an external block file\n* Additional DoS (denial-of-service) prevention measures\n* New blockchain checkpoint at block 193,000\n\n\nJSON-RPC API\n------------\n* Internal HTTP server is now thread-per-connection, rather than\n  a single-threaded queue that would stall on network I/O.\n* Internal HTTP server supports HTTP/1.1, pipelined requests and\n  connection keep-alive.\n* Support JSON-RPC 2.0 batches, to encapsulate multiple JSON-RPC requests\n  within a single HTTP request.\n* IPv6 support\n* Added raw transaction API.  See https://gist.github.com/2839617\n* Added 'getrawmempool', to list contents of TX memory pool\n* Added 'getpeerinfo', to list data about each connected network peer\n* Added 'listaddressgroupings' for better coin control\n* Rework gettransaction, getblock calls. 'gettransaction' responds for\n  non-wallet TXs now.\n* Remove deprecated RPC 'getblocknumber'\n* Remove superceded RPC 'getmemorypool' (see BIP 22, above)\n* listtransactions output now displays \"smart\" times for transactions,\n  and 'blocktime' and 'timereceived' fields were added\n\n\nP2P networking\n--------------\n* IPv6 support\n* Tor hidden service support (see doc/Tor.txt)\n* Attempts to fix \"stuck blockchain download\" problems\n* Replace BDB database \"addr.dat\" with internally-managed \"peers.dat\"\n  file containing peer address data.\n* Lower default send buffer from 10MB to 1MB\n* proxy: SOCKS5 by default\n* Support connecting by hostnames passed to proxy\n* Add -seednode connections, and use this instead of DNS seeds when proxied\n* Added -externalip and -discover\n* Add -onlynet to connect only to a given network (IPv4, IPv6, or Tor)\n* Separate listening sockets, -bind=<addr>\n\n\nQt GUI\n------\n* Add UI RPC console / debug window\n* Re-Enable URI handling on Windows, add safety checks and tray-notifications\n* Harmonize the use of ellipsis (\"...\") to be used in menus, but not on buttons\n* Add 2 labels to the overviewpage that display Wallet and Transaction\nstatus (obsolete or current)\n* Extend the optionsdialog (e.g. language selection) and re-work it to\na tabbed UI\n* Merge sign/verify message into a single window with tabbed UI\n* Ensure a changed bitcoin unit immediately updates all GUI elements\nthat use units\n* Update QR Code dialog\n* Improve error reporting at startup\n* Fine-grained UI updates for a much smoother UI during block downloads\n* Remove autocorrection of 0/i in addresses in UI\n* Reorganize tray icon menu into more logical order\n* Persistently poll for balance change when number of blocks changed\n* Much better translations\n* Override progress bar design on platforms with segmented progress\nbars to assist with readability\n* Added 'immature balance' display on the overview page\n* (Windows only): enable ASLR and DEP for bitcoin-qt.exe\n* (Windows only): add meta-data to bitcoin-qt.exe (e.g. description)\n\nInternal codebase\n-----------------\n* Additional unit tests\n* Compile warning fixes\n\n\nMiscellaneous\n-------------\n* Reopen debug.log upon SIGHUP\n* Bash programmable completion for bitcoind(1)\n* On supported OS's, each thread is given a useful name\n\n------------------------------\n\nThanks to everybody who contributed to this release:\n\nChris Moore\nChristian von Roques\nDavid Joel Schwartz\nDouglas Huff\nFordy\nGavin Andresen\nGiel van Schijndel\nGregory Maxwell\nJeff Garzik\nLuke Dashjr\nMatt Corallo\nMichael Ford\nMichael Hendricks\nPeter Todd\nPhilip Kaufmann\nPieter Wuille\nR E Broadley\nRicardo M. Correia\nRune K. Svendsen\nScott Ellis\nStephane Glondu\nWladimir J. van der Laan\ncardpuncher\ncoderrr\nfanquake\ngrimd34th\nsje397\nxanatos\n\nThanks to Sergio Lerner for reporting denial-of-service\nvulnerabilities fixed in this release."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-Qt/bitcoind version 0.7 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6100
        }
    },
    {
        "title": "[Bitcoin-development] Atomic coin swapping?",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-09-22T07:28:05",
                "message_text_only": "Forum URL: https://bitcointalk.org/index.php?topic=112007.0\n\ngmaxwell was talking about colored coins[1] in IRC recently.  They are\npotentially interesting in the context of distributed bonds[2], which\nI am currently pursuing with pybond[3].\n\nHere is the problem I am trying to solve, does the crowd have an answer?\n\n1. Alice transfers a 1-satoshi colored coin to Bob.\n2. Bob transfers 100 BTC to Alice.  May be restricted to 1 txout, if\nthat eases implementation details.\n3. Steps #1 and #2 happen as an atomic unit, all-or-none.\n4. Alice and Bob must both approve this atomic transfer of coins, with\nappropriate signatures.\n\nIs this possible within the current bitcoin system?  As far as I can\nsee, the answer is \"no\" but maybe I'm missing something.\n\nMy best guess to the answer is \"possible, but requires a new SIGHASH_* type\"?\n\n[1] https://bitcointalk.org/index.php?topic=106449.0\n[2] https://bitcointalk.org/index.php?topic=92421.0\n[3] https://github.com/jgarzik/pybond\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-09-22T09:10:16",
                "message_text_only": "I'm very interested in this. I was expecting transitive/multi-hop\ntransactions (Ripple) with colored coins, and I don't understand why\nis not possible.\n\n>From https://en.bitcoin.it/wiki/Contracts\n\n---\nSIGHASH_ALL: This is the default. It indicates that everything about\nthe transaction is signed, except for the input scripts. Signing the\ninput scripts as well would obviously make it impossible to construct\na transaction, so they are always blanked out. Note, though, that\nother properties of the input, like the connected output and sequence\nnumbers, are signed; it's only the scripts that are not. Intuitively,\nit means \"I agree to put my money in, if everyone puts their money in\nand the outputs are this\".\n---\n\nWhy \"Signing the input scripts as well would obviously make it\nimpossible to construct a transaction\"?\nI don't understand that part. I think a new SIGHASH_* type that\ndoesn't pay attention to that \"obviously\" is needed to achieve what we\nwant.\n\nSay we want the following transaction:\n\nA 1 satoshi -> B 1 satoshi -> C 100 btc -> A\n\nIt would be necessary to sign the following:\n\nInputs: from srcA, from srcB,\nOutputs: 1 satoshi to destB, 1 satoshi to destC, 100 btc to destA\n\n\"from srcC\" is not really necessary.\n\nThis same scheme can be used for n-hops.\n\nWhat am I missing?\n\nOn 9/22/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> Forum URL: https://bitcointalk.org/index.php?topic=112007.0\n>\n> gmaxwell was talking about colored coins[1] in IRC recently.  They are\n> potentially interesting in the context of distributed bonds[2], which\n> I am currently pursuing with pybond[3].\n>\n> Here is the problem I am trying to solve, does the crowd have an answer?\n>\n> 1. Alice transfers a 1-satoshi colored coin to Bob.\n> 2. Bob transfers 100 BTC to Alice.  May be restricted to 1 txout, if\n> that eases implementation details.\n> 3. Steps #1 and #2 happen as an atomic unit, all-or-none.\n> 4. Alice and Bob must both approve this atomic transfer of coins, with\n> appropriate signatures.\n>\n> Is this possible within the current bitcoin system?  As far as I can\n> see, the answer is \"no\" but maybe I'm missing something.\n>\n> My best guess to the answer is \"possible, but requires a new SIGHASH_*\n> type\"?\n>\n> [1] https://bitcointalk.org/index.php?topic=106449.0\n> [2] https://bitcointalk.org/index.php?topic=92421.0\n> [3] https://github.com/jgarzik/pybond\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n> ------------------------------------------------------------------------------\n> How fast is your code?\n> 3 out of 4 devs don\\\\\\'t know how their code performs in production.\n> Find out how slow your code is with AppDynamics Lite.\n> http://ad.doubleclick.net/clk;262219672;13503038;z?\n> http://info.appdynamics.com/FreeJavaPerformanceDownload.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-09-22T11:04:54",
                "message_text_only": "Perhaps I missing something obvious about the definition of coloured coins,\nbut this appears to be very simple. Just create a transaction that\ntransfers 300 coins and have an unsigned input connected to the coloured\noutput. send to the owner of the coloured output, they sign it and\nbroadcast.\nOn Sep 22, 2012 11:10 AM, \"Jorge Tim\u00f3n\" <timon.elviejo at gmail.com> wrote:\n\n> I'm very interested in this. I was expecting transitive/multi-hop\n> transactions (Ripple) with colored coins, and I don't understand why\n> is not possible.\n>\n> >From https://en.bitcoin.it/wiki/Contracts\n>\n> ---\n> SIGHASH_ALL: This is the default. It indicates that everything about\n> the transaction is signed, except for the input scripts. Signing the\n> input scripts as well would obviously make it impossible to construct\n> a transaction, so they are always blanked out. Note, though, that\n> other properties of the input, like the connected output and sequence\n> numbers, are signed; it's only the scripts that are not. Intuitively,\n> it means \"I agree to put my money in, if everyone puts their money in\n> and the outputs are this\".\n> ---\n>\n> Why \"Signing the input scripts as well would obviously make it\n> impossible to construct a transaction\"?\n> I don't understand that part. I think a new SIGHASH_* type that\n> doesn't pay attention to that \"obviously\" is needed to achieve what we\n> want.\n>\n> Say we want the following transaction:\n>\n> A 1 satoshi -> B 1 satoshi -> C 100 btc -> A\n>\n> It would be necessary to sign the following:\n>\n> Inputs: from srcA, from srcB,\n> Outputs: 1 satoshi to destB, 1 satoshi to destC, 100 btc to destA\n>\n> \"from srcC\" is not really necessary.\n>\n> This same scheme can be used for n-hops.\n>\n> What am I missing?\n>\n> On 9/22/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> > Forum URL: https://bitcointalk.org/index.php?topic=112007.0\n> >\n> > gmaxwell was talking about colored coins[1] in IRC recently.  They are\n> > potentially interesting in the context of distributed bonds[2], which\n> > I am currently pursuing with pybond[3].\n> >\n> > Here is the problem I am trying to solve, does the crowd have an answer?\n> >\n> > 1. Alice transfers a 1-satoshi colored coin to Bob.\n> > 2. Bob transfers 100 BTC to Alice.  May be restricted to 1 txout, if\n> > that eases implementation details.\n> > 3. Steps #1 and #2 happen as an atomic unit, all-or-none.\n> > 4. Alice and Bob must both approve this atomic transfer of coins, with\n> > appropriate signatures.\n> >\n> > Is this possible within the current bitcoin system?  As far as I can\n> > see, the answer is \"no\" but maybe I'm missing something.\n> >\n> > My best guess to the answer is \"possible, but requires a new SIGHASH_*\n> > type\"?\n> >\n> > [1] https://bitcointalk.org/index.php?topic=106449.0\n> > [2] https://bitcointalk.org/index.php?topic=92421.0\n> > [3] https://github.com/jgarzik/pybond\n> >\n> > --\n> > Jeff Garzik\n> > exMULTI, Inc.\n> > jgarzik at exmulti.com\n> >\n> >\n> ------------------------------------------------------------------------------\n> > How fast is your code?\n> > 3 out of 4 devs don\\\\\\'t know how their code performs in production.\n> > Find out how slow your code is with AppDynamics Lite.\n> > http://ad.doubleclick.net/clk;262219672;13503038;z?\n> > http://info.appdynamics.com/FreeJavaPerformanceDownload.html\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n>\n> ------------------------------------------------------------------------------\n> How fast is your code?\n> 3 out of 4 devs don\\\\\\'t know how their code performs in production.\n> Find out how slow your code is with AppDynamics Lite.\n> http://ad.doubleclick.net/clk;262219672;13503038;z?\n> http://info.appdynamics.com/FreeJavaPerformanceDownload.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120922/170b0f11/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-09-22T17:05:03",
                "message_text_only": ">\n> Why \"Signing the input scripts as well would obviously make it\n> impossible to construct a transaction\"?\n\n\nAs it states in the source code, signatures cannot sign themselves.  If\nscriptSigs were included in the data that is being signed, the act of\ninserting the newly calculated signature for one input would break the\nsignatures for all the others.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120922/8bdee6a4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-09-22T17:09:16",
                "message_text_only": "On Sat, Sep 22, 2012 at 5:10 AM, Jorge Tim\u00f3n <timon.elviejo at gmail.com> wrote:\n> I'm very interested in this. I was expecting transitive/multi-hop\n> transactions (Ripple) with colored coins, and I don't understand why\n> is not possible.\n>\n> From https://en.bitcoin.it/wiki/Contracts\n>\n> ---\n> SIGHASH_ALL: This is the default. It indicates that everything about\n\nYes, SIGHASH_ALL was the crucial piece I was missing.\n\nI have updated the post to add a concrete example with as much detail\nas necessary for programmers to recreate.  Review requested:\nhttps://bitcointalk.org/index.php?topic=112007.msg1212356#msg1212356\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-09-22T18:24:45",
                "message_text_only": "On 9/22/12, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Why \"Signing the input scripts as well would obviously make it\n>> impossible to construct a transaction\"?\n>\n>\n> As it states in the source code, signatures cannot sign themselves.  If\n> scriptSigs were included in the data that is being signed, the act of\n> inserting the newly calculated signature for one input would break the\n> signatures for all the others.\n\nI see. By \"input scripts\" I thought you meant scriptPubKey rather than\nscriptSigs. We only need to sign scriptPubKey. Right, Jeff?\n\n> Yes, SIGHASH_ALL was the crucial piece I was missing.\n\nGreat, there's no need for an additional SIGHASH.\nI guess you're implementing the simple case you describe first.\nDo you plan to implement the more general case with n participants\ninstead of only 2 (a Ripple transaction)?\nThat would be awesome.\n\n-- \nJorge Tim\u00f3n\n\n\n\nOn 9/22/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> On Sat, Sep 22, 2012 at 5:10 AM, Jorge Tim\u00f3n <timon.elviejo at gmail.com>\n> wrote:\n>> I'm very interested in this. I was expecting transitive/multi-hop\n>> transactions (Ripple) with colored coins, and I don't understand why\n>> is not possible.\n>>\n>> From https://en.bitcoin.it/wiki/Contracts\n>>\n>> ---\n>> SIGHASH_ALL: This is the default. It indicates that everything about\n>\n> Yes, SIGHASH_ALL was the crucial piece I was missing.\n>\n> I have updated the post to add a concrete example with as much detail\n> as necessary for programmers to recreate.  Review requested:\n> https://bitcointalk.org/index.php?topic=112007.msg1212356#msg1212356\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n\n\n-- \nJorge Tim\u00f3n"
            }
        ],
        "thread_summary": {
            "title": "Atomic coin swapping?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 11152
        }
    },
    {
        "title": "[Bitcoin-development] Large backlog of transactions building up?",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-09-23T12:12:58",
                "message_text_only": "Has anyone got long term longs that contain the pool size and timestamps?\n\nUnfortunately I forgot to enable timestamps in the logs for my own\nnodes (the privacy benefit of disabling this by default is\nquestionable, imho). But just looking at the general trends and\ncross-checking against my own memory it definitely seems that there\nare more and more pending transactions that don't get cleared into\nblocks.\n\nOne of my nodes now routinely has 4000 transactions in the mempool.\nBlocks typically clear only a few hundred at most, which is what you'd\nexpect given current transaction rates (around 300 per ten minute\ninterval). So what are the other pending transactions doing and why\naren't they getting drained out of the mempool?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-09-23T20:30:20",
                "message_text_only": "On Sun, Sep 23, 2012 at 8:12 AM, Mike Hearn <mike at plan99.net> wrote:\n> Has anyone got long term longs that contain the pool size and timestamps?\n>\n> Unfortunately I forgot to enable timestamps in the logs for my own\n> nodes (the privacy benefit of disabling this by default is\n> questionable, imho). But just looking at the general trends and\n> cross-checking against my own memory it definitely seems that there\n> are more and more pending transactions that don't get cleared into\n> blocks.\n>\n> One of my nodes now routinely has 4000 transactions in the mempool.\n> Blocks typically clear only a few hundred at most, which is what you'd\n> expect given current transaction rates (around 300 per ten minute\n> interval). So what are the other pending transactions doing and why\n> aren't they getting drained out of the mempool?\n\nYeah, my public nodes currently have 2200+  Over time, it gets\ncluttered naturally due to the disconnect between what miners mine and\nwhat relayers relay.\n\nI've long argued that all mempool implementations should limit the\nlifetime of any TX to a specific number of blocks.  Rationale:\n- bitcoin clients retransmit until TX is confirmed\n- provides a deterministic lifetime for a TX; if you KNOW a TX will\ndisappear 144 blocks (24 hours) after you stop transmitting, then it\nis probably safe to initiate recovery procedures and perhaps revise\nthe transaction\n- prevents zombie TXs from littering memory... they hang around,\nwasting resources, but never get confirmed\n\nNo one has strenuously argued against this, so I suppose it is down to\nwriting a patch, and coming up with a good number we (as a network)\ncan agree upon.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-23T20:44:55",
                "message_text_only": "On Sun, Sep 23, 2012 at 4:30 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> Yeah, my public nodes currently have 2200+  Over time, it gets\n> cluttered naturally due to the disconnect between what miners mine and\n> what relayers relay.\n\nRight, this disconnect is why simple scalar measures of mempool size\naren't terribly informative.\n\nThere are bursts of weird transactions (e.g. someone was flooding zero\nvalue txn a few weeks ago; before that there were some enormous series\nof double-spend induced orphans), and other sustained loads that quite\na few miners are intentionally excluding.\n\n> No one has strenuously argued against this, so I suppose it is down to\n> writing a patch, and coming up with a good number we (as a network)\n> can agree upon.\n\nSounds good\u2014 my only concern is that nodes will repeat their own\ntransactions but not the unconfirmed parents. So being more aggressive\ncan turn otherwise valid transactions into orphans.\n\nWould there be value in an archive-mempool which is only checked when\nyou receive an orphan transaction?\n\nI would point out that you can't _KNOW_ a txn will disappear. Someone\nelse could happily reannounce it. (I know you know this; but it's good\nto be clear on that point when we talk about it!)"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-09-23T21:54:03",
                "message_text_only": "> Sounds good\u2014 my only concern is that nodes will repeat their own\n> transactions but not the unconfirmed parents.\n\nNodes repeat wallet transactions and any previous transactions that\nare not yet included in the chain (see\nCWalletTx::RelayWalletTransaction). So I don't think it's an issue.\n\n(ok, bitcoinj clients don't do that, they just announce their own transactions)"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-09-25T17:34:50",
                "message_text_only": "On 9/23/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> - provides a deterministic lifetime for a TX; if you KNOW a TX will\n> disappear 144 blocks (24 hours) after you stop transmitting, then it\n> is probably safe to initiate recovery procedures and perhaps revise\n> the transaction\n> - prevents zombie TXs from littering memory... they hang around,\n> wasting resources, but never get confirmed\n\nI don't understand. Can the chain enforce this number?\nWhy can't clients delete all those transactions right now?\n\nOn 9/23/12, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> There are bursts of weird transactions (e.g. someone was flooding zero\n> value txn a few weeks ago; before that there were some enormous series\n> of double-spend induced orphans), and other sustained loads that quite\n> a few miners are intentionally excluding.\n\nWhy clients store transactions that don't obey the current rules of\nthe chain at all?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-25T17:52:10",
                "message_text_only": "On Tue, Sep 25, 2012 at 1:34 PM, Jorge Tim\u00f3n <timon.elviejo at gmail.com> wrote:\n> On 9/23/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n>> - provides a deterministic lifetime for a TX; if you KNOW a TX will\n>> disappear 144 blocks (24 hours) after you stop transmitting, then it\n>> is probably safe to initiate recovery procedures and perhaps revise\n>> the transaction\n>> - prevents zombie TXs from littering memory... they hang around,\n>> wasting resources, but never get confirmed\n>\n> I don't understand. Can the chain enforce this number?\n> Why can't clients delete all those transactions right now?\n\nThis is discussion about transactions which are not in the chain yet.\n\n> On 9/23/12, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> There are bursts of weird transactions (e.g. someone was flooding zero\n>> value txn a few weeks ago; before that there were some enormous series\n>> of double-spend induced orphans), and other sustained loads that quite\n>> a few miners are intentionally excluding.\n>\n> Why clients store transactions that don't obey the current rules of\n> the chain at all?\n\nThe double spending transaction is not stored\u2014 which is, in fact, the\nproblem which creates these huge chain. When a transaction depending\non the doublespend is received we do not know its parent (because we\ndropped it because it was a rule violation) so we keep it around as an\norphan hoping its parent arrives.\n\nThe software could maintain a cache of rejected txids to consult for\norphan txn's parents, but it would need to be dropped any time there\nis a reorg so I don't know how useful it would be."
            }
        ],
        "thread_summary": {
            "title": "Large backlog of transactions building up?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 6567
        }
    },
    {
        "title": "[Bitcoin-development] bitcoinj 0.6 now available",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-09-24T13:35:42",
                "message_text_only": "I'm pleased to announce the release of version 0.6 of bitcoinj, the leading\nJava implementation of Bitcoin. You can download the source from Google\nCode, or use the release-0.6 branch from git. Our Nexus repository will be\nupdated soon.\n\nThis release focuses on improved compliance with the protocol, improved and\nmore scalable network handling, a more flexible send API, other misc API\nimprovements and of course, a large pile of bug fixes. You should upgrade\nyour software to use bitcoinj 0.6 as soon as possible, if only to benefit\nfrom the fixes - the API changes are minimal so it should be easy.\n\nIn more detail:\n\n   - Thanks to Jim Burton, the wallet now stores the depth and work done\n   for all transactions, and coinbase transactions are now processed\n   correctly. The ability to handle pubkey-only outputs was added, so these\n   are now spendable. Migration from 0.5 wallets that don't store this is\n   supported, but only for depth, by using\n   WalletProtobufSerializer.setChainHeight().\n   - Made some more APIs documented and public.\n   - Improved block chain download handling.\n   - Added compatibility with the broken URIs generated by blockchain.info,\n   meaning that the iPhone app and Android apps can now read each others\n   QRcodes.\n   - Wallets can now auto-save themselves, taking the hassle of managing\n   wallet persistence away from your app. See the javadocs for\n   Wallet.autoSaveToFile() for information on this.\n   - The network layer was rewritten on top of Netty to be more robust,\n   more scalable and to remove flakyness in the unit tests. Thanks to Miron\n   Cuperman for this work.\n   - Thanks to Matt Corallo the ping/pong protocol is now supported. Also\n   various protocol conformance issues and other misc bugs were resolved.\n   - WalletTool now has a RAW_DUMP option that prints the raw protocol\n   buffer form as text.\n   - You can now explicitly set fees on a created transaction using the fee\n   member of SendRequest. Please note that the correct fees for a\n   transaction are still not auto-calculated or minimized. This will come in a\n   future release.\n   - Many bug fixes.\n\nAPI changes:\n\n   - TransactionConfidence.OVERRIDDEN_BY_DOUBLE_SPEND is now called DEAD\n   - PeerGroup.broadcastTransaction now returns a Guava ListenableFuture (which\n   is a subclass of Future, so it's compatible). The future completes when the\n   transaction has been heard back from the network, instead of just being\n   written out.\n   - Wallet.sendCoins() now returns a SendResult that contains both the\n   transaction, and the future returned by PeerGroup.broadcastTransaction(),\n   so it will no longer block. As a result sendCoinsAsync() has been\n   removed.\n   - Various send methods on Wallet now take a SendRequest object that lets\n   you customize the created transactions. The methods that let you explicitly\n   set the change address are removed, you should set the changeAddress member\n   of the SendRequest instead.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120924/484d4944/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoinj 0.6 now available",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3137
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Testing Project",
        "thread_messages": [
            {
                "author": "steve",
                "date": "2012-09-25T18:32:44",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi All,\n\nAfter the failure to get any real testing done for the 0.7 release (all\nof which is my fault) I have decided to rejig things.\n\nI am heavily into test driven development, and I have a strong\nbackground in requirements management, and automation.\n\nI want to leave bettermeans behind, maybe we might be able to keep the\nvoting aspect of it, and link it into mantis.\n\nSo, what I have been doing over the past few weeks is developing a\nrudimentary requirements set, basic requirement tracking, tests to\nprove/stress the requirements.\n\nThe next most important thing is to get release/acceptance tests done -\nthese primarily focus on new stuff doesnt break old (ie lose a wallet,\netc) and needs no special requirements.\n\nTo this end I have installed various opensource applications (mantis,\nsalomeTMF, bugzilla, etc) and am currently evaluating the best workflow\nprocess.\n\nThis was a much longer post, but decided against it. :)\n\nSo, what I want to know is who wants to be a part helping me out with\nall this? I am finalising the workflow flow diagrams and they should be\nready for inspection soon.\n\nAnyone interested in helping out/reviewing processes? even if it is just\nsome encouragement, it is all greatly appreciated.\n\nDrop me an email if you want access to the current setup and help me\nreview the different software for the bitcoin workflow process.\n\ncheers,\n\nsteve\n\n- -- \nmy PGP public key is at pgp.mit.edu id: 0x5016FB50\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQYfjMAAoJEFvEB9dQFvtQSmsH/R/FEdOQRB7ncTnHhaP8woLu\nnIiGX2DgLOWLOF9launSuTCrtVm2G56B9Dgl/BqScFxeuJGbzje7+kp7LgjtA3uy\nkS9DUZ1zhUfhslGP0UpVJJGX6Yfk8GbQ4nUcuL1VTv6nSZXWP2EvLMDPpRgKwyi5\nz1FiyBg2A3Kg3Er+VmHPmpI0zZAGB5ytaenUp4xXGhL7Nk66i5X0twVr51xlEm0L\nzKCDXHzWTvNNlT7TzMjIxShJ/EcgCI1r6tVD3T+2e9QeVm0QNw3xeNUkMxKn+ul8\nd1v1OxJbHD1CsNqW+XgVvFE2SJReizaHNOFwrqcpVCp7bABnWAB5eyTzB9B9IX8=\n=di5x\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-09-25T20:41:17",
                "message_text_only": "Although Jenkins may not be the best system, we already have jenkins and\npull-tester (which is a dumb python script I wrote to test all incoming\npull requests from github).  \n\nThey both run the same set of scripts, namely those at\nhttps://github.com/TheBlueMatt/test-scripts (its pretty basic right now,\nbut since it is on github, I was hoping someone would find the\ninspiration to add to it).\n\nI dont really care if we keep using jenkins, but I figure we might as\nwell keep all the tests in one place?\n\nAnyway, I'm all for more testing (I'm always complaining about how we\nneed more tests for stuff...).\n\nMatt\n\nOn Tue, 2012-09-25 at 19:32 +0100, steve wrote:\n> Hi All,\n> \n> After the failure to get any real testing done for the 0.7 release (all\n> of which is my fault) I have decided to rejig things.\n> \n> I am heavily into test driven development, and I have a strong\n> background in requirements management, and automation.\n> \n> I want to leave bettermeans behind, maybe we might be able to keep the\n> voting aspect of it, and link it into mantis.\n> \n> So, what I have been doing over the past few weeks is developing a\n> rudimentary requirements set, basic requirement tracking, tests to\n> prove/stress the requirements.\n> \n> The next most important thing is to get release/acceptance tests done -\n> these primarily focus on new stuff doesnt break old (ie lose a wallet,\n> etc) and needs no special requirements.\n> \n> To this end I have installed various opensource applications (mantis,\n> salomeTMF, bugzilla, etc) and am currently evaluating the best workflow\n> process.\n> \n> This was a much longer post, but decided against it. :)\n> \n> So, what I want to know is who wants to be a part helping me out with\n> all this? I am finalising the workflow flow diagrams and they should be\n> ready for inspection soon.\n> \n> Anyone interested in helping out/reviewing processes? even if it is just\n> some encouragement, it is all greatly appreciated.\n> \n> Drop me an email if you want access to the current setup and help me\n> review the different software for the bitcoin workflow process.\n> \n> cheers,\n> \n> steve"
            },
            {
                "author": "Wladimir",
                "date": "2012-09-26T05:49:13",
                "message_text_only": "I think it's a great initiative Steve,\n\nOn Tue, Sep 25, 2012 at 10:41 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n\n> They both run the same set of scripts, namely those at\n> https://github.com/TheBlueMatt/test-scripts (its pretty basic right now,\n> but since it is on github, I was hoping someone would find the\n> inspiration to add to it).\n\nThe pulltester and Jenkins are really useful, I think it's best to\nkeep these and improve them if needed.\n\n> I dont really care if we keep using jenkins, but I figure we might as\n> well keep all the tests in one place?\n\nWhich brings me to another issue: we desperately need a page that\nlinks all the developer resources for bitcoin dev:\n\n- link to my doxygen docs (https://dev.visucore.com/bitcoin/doxygen/)\n- bluematt's pulltester and jenkins\n- any testing dashboards Steve is going to add\n\nBut also:\n\n- how to check out the source code, how to find the build instructions\nfor your platform\n- contribution guidelines\n- where to ask w/ development problems (this mailing list, #bitcoin-dev)\n- where to begin, which bugs to solve first\n...\n\nMaybe on bitcoin.org, but at least easy to find for people that want\nto contribute, not just some deeply nested wiki page. Ie, something\nlike\n\nhttps://www.mozilla.org/en-US/contribute/\nhttp://www.ogre3d.org/developers\n...\n\nI'm willing to write this. But I know these kinds of proposals always\nend in a big discussion about what should be and what should not be on\nbitcoin.org, however we should be a bit pragmatic here.\n\nWladimir"
            },
            {
                "author": "Daniel F",
                "date": "2012-09-26T11:41:13",
                "message_text_only": "on 09/26/2012 01:49 AM Wladimir said the following:\n\n> I'm willing to write this. But I know these kinds of proposals always\n> end in a big discussion about what should be and what should not be on\n> bitcoin.org, however we should be a bit pragmatic here.\n\nMay I suggest a page bitcoin.org/developers, that links to a wiki page\nof developer resources?\nThat way there's an easy link from the main site, but the content is\nreadily editable and expandable.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 224 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120926/573eb685/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-09-26T12:00:49",
                "message_text_only": "On Wednesday, September 26, 2012 11:41:13 AM Daniel F wrote:\n> on 09/26/2012 01:49 AM Wladimir said the following:\n> > I'm willing to write this. But I know these kinds of proposals always\n> > end in a big discussion about what should be and what should not be on\n> > bitcoin.org, however we should be a bit pragmatic here.\n> \n> May I suggest a page bitcoin.org/developers, that links to a wiki page\n> of developer resources?\n> That way there's an easy link from the main site, but the content is\n> readily editable and expandable.\n\nThe front page already has wiki links. Adding a direct link to a developer \nresources page there would probably make sense."
            },
            {
                "author": "steve",
                "date": "2012-09-26T12:28:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi Matt,\n\nGlad to have another ninja onboard :)\n\nOn 25/09/2012 21:41, Matt Corallo wrote:\n> Although Jenkins may not be the best system, we already have\n> jenkins and pull-tester (which is a dumb python script I wrote to\n> test all incoming pull requests from github).\n\nI have never heard of jenkins before.  I need to do some more digging.\nis this the right thing?\n\nhttps://wiki.jenkins-ci.org/display/JENKINS/Mantis+Plugin\n\nMantis on the other hand, I know exceptionally well.  I hate\nduplication of work/data unless absolutely necessary.  I will check\njenkins out (just out of interest what is it actually meant to do? the\nwebsite implies framework, but not what its for)\n\nSo, currently there are 4 potential places for bugs to be reported\n1 - jenkins (and unit tests)\n2 - git\n3 - mailing list\n4 - forum (bitcointalk...)\n5? - is there still the ability to add bugs via sourceforge?\n\nAdding to this doesnt make sense.  Each one of these reporting methods\nis for a different thing.  I am not seeking to replace these (or even\nunify them) I am looking for software that will take testcases and bug\nreports against them [and allow for test campaigns].  Mantis is so\nflexible and industry standard and if the jenkins plugin works... then\nwe can keep things as they are until they fit into better places.\n\nThe reason I am so behind mantis as the backbone is it works with more\nor less anything, and can easily modded to work with whatever people\nare most comfortable with - however it is exceptionally powerful and\nhas had a constant stream of workflow improvements over the past few\nyears.\n\n> \n> They both run the same set of scripts, namely those at \n> https://github.com/TheBlueMatt/test-scripts (its pretty basic right\n> now, but since it is on github, I was hoping someone would find\n> the inspiration to add to it).\n\nI will check it out. I wrote a very basic script that wikified the\nchangelog, and linked to the changes and created wiki pages for the\ntestcases.  have you seen the stuff I put on bettermeans? bits keep\nvanishing then re appearing.\n\nThis is the outline of the testing that I setup for 0.7\n\nhttps://secure.bettermeans.com/projects/4256/wiki\n\n> \n> I dont really care if we keep using jenkins, but I figure we might\n> as well keep all the tests in one place?\n\nYes, I would love to unify all build testing and testcases into one\nplace.  I am still on the fence as to including unit tests into this.\nHowever I do see 3 distinct type of testcases\n1 - requirements based testcases (requirements based off the current\nblock chain rules - these are edge cases and known interoperability\nissues)\n\n2 - Acceptance based testcases - these are testcases that should be\nrun for every build.  Check out the General Acceptance Tests in the\nwiki link for examples and testcases\n\n3 - Testcases for reference implementations of things (like multisig -\ni see these working like the /test folder when you install a new perl\nmodule)\n\nThese three things alone are a massive task. and they still wont cover\neverything.  I would like to get the workflow so that people can\nsponsor or donate to a specific campaign (eg a new feature is\nimplemented, people want it tested so can donate just for that\ncampaign [developing testcases, structure, requirements, etc])\n\nOnce this is done, I will get to do some exciting stuff (like writing\nfuzzers, automation, etc) unfortunately I do not know python, only perl.\n\n> \n> Anyway, I'm all for more testing (I'm always complaining about how\n> we need more tests for stuff...).\n\nNice, I love testing.  I think we will get on :)\n\nAnd I would rather go for interoperability between testing rather than\nrewriting it all.\n\nCheers,\n\nsteve\n\n> \n> Matt\n> \n> On Tue, 2012-09-25 at 19:32 +0100, steve wrote:\n>> Hi All,\n>> \n>> After the failure to get any real testing done for the 0.7\n>> release (all of which is my fault) I have decided to rejig\n>> things.\n>> \n>> I am heavily into test driven development, and I have a strong \n>> background in requirements management, and automation.\n>> \n>> I want to leave bettermeans behind, maybe we might be able to\n>> keep the voting aspect of it, and link it into mantis.\n>> \n>> So, what I have been doing over the past few weeks is developing\n>> a rudimentary requirements set, basic requirement tracking, tests\n>> to prove/stress the requirements.\n>> \n>> The next most important thing is to get release/acceptance tests\n>> done - these primarily focus on new stuff doesnt break old (ie\n>> lose a wallet, etc) and needs no special requirements.\n>> \n>> To this end I have installed various opensource applications\n>> (mantis, salomeTMF, bugzilla, etc) and am currently evaluating\n>> the best workflow process.\n>> \n>> This was a much longer post, but decided against it. :)\n>> \n>> So, what I want to know is who wants to be a part helping me out\n>> with all this? I am finalising the workflow flow diagrams and\n>> they should be ready for inspection soon.\n>> \n>> Anyone interested in helping out/reviewing processes? even if it\n>> is just some encouragement, it is all greatly appreciated.\n>> \n>> Drop me an email if you want access to the current setup and help\n>> me review the different software for the bitcoin workflow\n>> process.\n>> \n>> cheers,\n>> \n>> steve\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQYvT4AAoJEFvEB9dQFvtQlgkIAJX7JYel5RGmCsbptGdQrCnT\nBR42tUwTg1t/NRUJ6RA8/Ou8lzallztQquShpLn4mZdQpoalvETdtAwcPnQKnaZb\nM5inZE/IEq8WJM1y4YkHt3BLou4BJbjwncCNy1/jqcm6f2Oonrg7isVbDwY/7JlP\ny/epm7XELS7NU4vVubBwQCunwvtsuydXRzuI812LiLXNqpXFMHvG2m8a2RajXE0/\nxW4lOMy/hUFzEgYRQWCTAru4Ts2x3Xt26NaEUh/uKvHLwBZJ4xbdu3gpupiPb4sI\nbCHnVFOC7zoQKOAnfPkCMyvtyoqpzM9HW2+DWI51FoOz851Y2F36N3Fpk/2lii4=\n=W5xI\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir",
                "date": "2012-09-26T12:49:21",
                "message_text_only": "Steve,\n\n> So, currently there are 4 potential places for bugs to be reported\n> 1 - jenkins (and unit tests)\n> 2 - git\n> 3 - mailing list\n> 4 - forum (bitcointalk...)\n> 5? - is there still the ability to add bugs via sourceforge?\n\nCurrently github is the authoritative place to report issues. When\nsomeone reports a bug on the mailing list, IRC or forum, they are\ngenerally asked to make a github issue (or, someone else makes the\nissue for them). Failed tests are generally also reported on github,\nby the pull tester.\n\nWe currently have 232 issues, mostly classified into categories such\nas \"Bug\", \"Improvement\", \"GUI\", \"Wallet\", and so on.\n\nAlso it's easy to refer to github issues in commits with #123, with\nautomatic linking.\n\nI'm not sure it is worth the effort to move to another system\n(especially if you need a another login etc...). But I'm probably\nmisunderstanding what you're trying to do.\n\nWladimir"
            },
            {
                "author": "steve",
                "date": "2012-09-26T13:22:52",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n- -----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 26/09/2012 13:49, Wladimir wrote:\n> Steve,\n\nHi Wladimir,\n\n> \n>> So, currently there are 4 potential places for bugs to be \n>> reported 1 - jenkins (and unit tests) 2 - git 3 - mailing list 4 \n>> - forum (bitcointalk...) 5? - is there still the ability to add \n>> bugs via sourceforge?\n> \n> Currently github is the authoritative place to report issues. When\n>  someone reports a bug on the mailing list, IRC or forum, they are\n>  generally asked to make a github issue (or, someone else makes the\n>  issue for them). Failed tests are generally also reported on \n> github, by the pull tester.\n\nexcellent, that makes things much easier.\n\n> \n> We currently have 232 issues, mostly classified into categories \n> such as \"Bug\", \"Improvement\", \"GUI\", \"Wallet\", and so on.\n> \n> Also it's easy to refer to github issues in commits with #123, with\n> automatic linking.\n> \n> I'm not sure it is worth the effort to move to another system \n> (especially if you need a another login etc...). But I'm probably \n> misunderstanding what you're trying to do.\n\nI think you might be misunderstanding a little. I am not trying to\nreplace the current system, I need to make sure that what I do will be\ncompatible with it (seamlessly so for the developer). I do not want this\nto generate extra work for the development team.\n\nHowever testing is a lot more than just bug reporting, dont get me\nwrong bug reports are important, but so is running a testcase and that\ntestcase passing, especially if that testcase is linked to the proof\nof a requirement. I am trying to develop a qa environment that is\nconducive to testing and will allow the testers to shine in all their\nglory :) and we need different tools and methodologies.\n\nGit is too developer centric to be useful for organising testing. -\nhowever there is a large amount of software that is compatible with\ngit, so the core development team only ever need to work with git.\n\nThe linking between a bug, the requirement, the fix, the retest, and\nupdating of regression testplan is vital. So is the ability to\norganise testing campaigns and assigning tests, work units and test\nrelevant docs/scripts/ideas, etc.\n\nI hope this clears things up a bit?\n\nCheers,\n\nsteve\n\n> \n> Wladimir\n> \n\n- -----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQYwESAAoJEFvEB9dQFvtQ/GUH/jv2c5L0OcL/kHkX/z0Yqbl/\n2IntPLdjXNKLuz0A7BMz7XfUyVmWlZrw44qxmi+Vyk5PKNBjYIidm763xHnTeJLN\nULQBckYexMvan9hAyYZUOt85IpesdNgqTIsqh8f49y4roHOy8GT4M/2fhzXpnsGg\nG9d2m8jWGpj/kxl9qE7/WjVQC4APwBi/NiJsCrcHswgweN+zENc/Pot9YBLxAZu/\nACBUX/xFymRdaZN8P2LWBXuKx6E2WEcBdPCCWArX07wPiBlrashx9Gz6tiNzIiNq\nx2c4ltLzRa45AmiDtQhwqyTprz/DbyeAYO1sIsfpUxDeu9e3xTb/Zd96jfKIWI0=\n=iHI1\n- -----END PGP SIGNATURE-----\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQYwGsAAoJEFvEB9dQFvtQxOsIAKgBBOKHNFtoV2cN+GVqzlip\nyy0qiMvMTZKrraOhEw8QNNuOlB3LRchi+RDR/PvQkVfuwi/jHB2gUBzlapLoECBv\nEH8pgT/MO281pXzARgRSVkRYqkb3ljhQz3mEQg9RhR9h5t9g2mL3Tvppt7249Bg8\noGXPj6xmMcrbClF5qDbwQUUDGJfOo4eti0jSVD3qp2NE7QpPVQwuN5buchpoKt3P\n9aJnjeZdLmuAk2RPoDaLXUFc9unT8AcnW96juD0zoVA9wKvAa6/8IZQf0mzV4iZP\nyiWGNOQtBZ+jyu2ixiEnvHqqG2ZmjtUVqWtjHkxYgrCyuuK2jOcTMNEWfn7SfKc=\n=yP7N\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2012-09-26T16:06:41",
                "message_text_only": "Running a concurrent Mantis tracker would be confusing and fragment the\ndevelopment pathway. We have an issue tracker; it's on github.\n\nWhat's being talked about here are two separate things. Jenkins is a\ncontinuous integration system. It can be configured to run the suite of\nunit tests, regression tests, and any kind of automated functional tests\nfor every commit on github and every pull request.\n\nGithub is our issue tracker. Github, and only github, is where new issues\nshould be reported (unless it's security related, in which case an email\nshould be sent to the core devs directly).\n\nCertainly developers should be responsible for making sure that regression\ntests for bugs they fix make it either into the unit tests or Matt's\nfunctional test repository. QA should hold them accountable for that\n(re-opening tickets for bugs that have been fixed but without regression\ntests).\n\nThe other thing we're talking about is coordinated release testing--getting\nrelease candidates in the hands of actual users and making sure that issues\nare reported. This is something that can't be automated as the point really\nis to pick up on things that the testing suite missed. You sound more\nqualified than me for coming up with a process, but in the end discovered\nissues should be reported to github, the final repository of issues that\nhold up Gavin from doing a release.\n\nJust my 0.002BTC\nMark\n\nOn Wed, Sep 26, 2012 at 6:22 AM, steve <steve at mistfpga.net> wrote:\n>\n> I think you might be misunderstanding a little. I am not trying to\n> replace the current system, I need to make sure that what I do will be\n> compatible with it (seamlessly so for the developer). I do not want this\n> to generate extra work for the development team.\n>\n> However testing is a lot more than just bug reporting, dont get me\n> wrong bug reports are important, but so is running a testcase and that\n> testcase passing, especially if that testcase is linked to the proof\n> of a requirement. I am trying to develop a qa environment that is\n> conducive to testing and will allow the testers to shine in all their\n> glory :) and we need different tools and methodologies.\n>\n> Git is too developer centric to be useful for organising testing. -\n> however there is a large amount of software that is compatible with\n> git, so the core development team only ever need to work with git.\n>\n> The linking between a bug, the requirement, the fix, the retest, and\n> updating of regression testplan is vital. So is the ability to\n> organise testing campaigns and assigning tests, work units and test\n> relevant docs/scripts/ideas, etc.\n>\n> I hope this clears things up a bit?\n>\n> Cheers,\n>\n> steve\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120926/5b9b6e20/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-09-26T17:10:31",
                "message_text_only": "On Wed, Sep 26, 2012 at 12:06 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Certainly developers should be responsible for making sure that regression\n> tests for bugs they fix make it either into the unit tests or Matt's\n> functional test repository. QA should hold them accountable for that\n> (re-opening tickets for bugs that have been fixed but without regression\n> tests).\n\nAs a goal or general principle, this is agreeable.\n\nBut slavish attention to this will only get ignored.  There is finite\ndeveloper resources, and regression tests for certain types of bugs,\nlike prickly P2P network interaction bugs or RPC API bugs, could\npotentially involve many days or weeks of coding, to sufficiently\nsimulate the environment.  The ability to easily, automatically and\nprogrammatically reproduce certain classes of bugs is simply out of\nreach right now, and nobody is going to shut down development to fix\nthat problem.\n\nWe should move towards this direction, yes, but bitcoin test cases are\nnot always going to be as easy as writing (say) a compiler testcase.\n\nWe can always use the help of a few good QA coders:  simulating a P2P\nenvironment and checking the RPC API are two examples of very\ncomplicated problems that -can- be automated for testing... with a lot\nof work.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "steve",
                "date": "2012-09-26T17:44:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 26/09/2012 17:06, Mark Friedenbach wrote:\n> Running a concurrent Mantis tracker would be confusing and fragment\n> the development pathway. We have an issue tracker; it's on github.\n\nI think you misunderstand what I am proposing.\n\nQA needs more than just an issue tracker. i have yet to find any\nopensource software that integrates testcases, nor any method for\ngenerating testplans, nor any method for linking testcases and plans\nto requirements, that work with git.\n\nWe will need software for this (as well as workflow software) and it\nis much easier to integrate this into mantis/bugzilla. They are both\nso much more functional than Git.\n\nboth mantis and bugzilla have full two way functionality with git.\n\n> \n> What's being talked about here are two separate things. Jenkins is\n> a continuous integration system. It can be configured to run the\n> suite of unit tests, regression tests, and any kind of automated\n> functional tests for every commit on github and every pull\n> request.\n\nwell 3 but okay.  Jenkins integrates both with mantis (and therefore a\ntestsuite, etc) and with git. I do not see why anything should be any\ndifferent.  again I am not trying to change any current process, just\ndevelop some new ones.\n\n> \n> Github is our issue tracker. Github, and only github, is where new\n> issues should be reported (unless it's security related, in which\n> case an email should be sent to the core devs directly).\n\nYou will only ever receive bug reports via git. How they are entered\nshould not be of concern.\n\nThere will be no space in mantis/zilla for bugs that are not related\nto testcases.\n\n> \n> Certainly developers should be responsible for making sure that\n> regression tests for bugs they fix make it either into the unit\n> tests or Matt's functional test repository. QA should hold them\n> accountable for that (re-opening tickets for bugs that have been\n> fixed but without regression tests).\n\nI feel very strongly that developers should not do regression testing\nor any signoff testing on their own code. QA should do the testing. I\nam 50/50 if they should write the testcases. the QA process should\nmake things easier for the dev team, not generate more work for them.\n\n> \n> The other thing we're talking about is coordinated release\n> testing--getting release candidates in the hands of actual users\n> and making sure that issues are reported. This is something that\n> can't be automated as the point really is to pick up on things that\n> the testing suite missed. You sound more qualified than me for\n> coming up with a process, but in the end discovered issues should\n> be reported to github, the final repository of issues that hold up\n> Gavin from doing a release.\n\nAll the core development team will still use git. the extra software\nis needed by test.\n\n(And the third point was coming up with a suite of tests for 3rd party\ndevelopers to test their interoperability - this will having nothing\nto do with git, or mantis. But the solution should be compatible with\nmantis/zilla)\n\n> \n> Just my 0.002BTC Mark\n> \n> On Wed, Sep 26, 2012 at 6:22 AM, steve <steve at mistfpga.net> wrote:\n>> \n>> I think you might be misunderstanding a little. I am not trying\n>> to replace the current system, I need to make sure that what I do\n>> will be compatible with it (seamlessly so for the developer). I\n>> do not want this to generate extra work for the development\n>> team.\n>> \n>> However testing is a lot more than just bug reporting, dont get\n>> me wrong bug reports are important, but so is running a testcase\n>> and that testcase passing, especially if that testcase is linked\n>> to the proof of a requirement. I am trying to develop a qa\n>> environment that is conducive to testing and will allow the\n>> testers to shine in all their glory :) and we need different\n>> tools and methodologies.\n>> \n>> Git is too developer centric to be useful for organising testing.\n>> - however there is a large amount of software that is compatible\n>> with git, so the core development team only ever need to work\n>> with git.\n>> \n>> The linking between a bug, the requirement, the fix, the retest,\n>> and updating of regression testplan is vital. So is the ability\n>> to organise testing campaigns and assigning tests, work units and\n>> test relevant docs/scripts/ideas, etc.\n>> \n>> I hope this clears things up a bit?\n>> \n>> Cheers,\n>> \n>> steve\n>> \n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQYz8CAAoJEFvEB9dQFvtQjkMH/Apa95IRh21mfNIuyK8kOSdt\n55tLoT9a6DFyF1IPTgjHQlPN/A0JCPy/p2rIEEL7XzWpCMu1zU8BzBNmJsxGAZJG\nC0ue1eDEywKNFEMPTgQdebC2MbNSfUBA6lGJ5vijQlcXKoIuiV/LS7IMYh57T4u1\n6Tc/SGypGe8kBLuFTihmIGH5uFS6arNGlcGgh+HRn+O4jKiAcw06lIoKh7S9Rj5e\nbmkimvOfproCIZeNQfSJH1BfYZaVVsJ1ouVI7ch6ytFpKsZ622zYF0Iq3042kEEp\nFyqh9pDDNTJ/dwbyFpTx0WaxZySdZfZmQOCxFCAeLaCpop/nKeUnW5fy3i0sYno=\n=rfHO\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-09-26T18:09:55",
                "message_text_only": "There are test cases that can be automated. That's Jenkins, and those will\nbe run automagically.\n\nThen there are tests that cannot be automated; things like \"Does the GUI\nlook OK on all of the platforms that we support (Windows XP/2000/Vista/7/8,\nUbuntu/Debian blah with window managers foo and bar, OSX 10.5/6/7/8).\"\n\nThanks to Matt, we're doing great with automated functional test cases (can\nalways do better, of course).\n\nWe're failing on simple, boring stuff like making sure we actually run on\nall of the platforms that we say we run on BEFORE final release. That is\nwhere I think a QA team can add a lot of value.\n\nSteve: I'm worried you're over-designing The Process. A release acceptance\ntest plan could be nothing more than a step-by-step checklist on a wiki\npage, Google Doc, or Drobox shared folder...\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120926/4a465097/attachment.html>"
            },
            {
                "author": "steve",
                "date": "2012-09-29T18:26:49",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi Gavin,\n\nSorry for the delayed response, I wanted to take a couple of days to\nreflect on your email.\n\nOn 26/09/2012 19:09, Gavin Andresen wrote:\n\n\nAnd their are other methods too.\n\n\n\nThe GUI::Test package for perl will allow this to be greatly\nautomated. (I have done this before on the localisation of photoshop.)\n\n\n\nthis why we need detailed testscripts and plans.  so we know what has\nand hasnt been done. The more boring the task the more work that needs\nto go into testcase development.  This is the area I see as my\ngreatest failing last time.  I have a large number of virtual machines\nand should have at least this work.  But we need very detailed\ntestcases.  with decent testplans just downloading the software,\nsyncing the block chain, syncing an existing wallet, rescanning the\nblockchain and verifying the balance would cover a large number of\ntests.  The idea behind having lots of very specific testcases is you\nget to see what tests have not been run.\n\n\n\nI understand your concern, however I have taken a couple of days to\nreflect on this and I still strongly feel that in order to make sure\nthat this sticks, and is still useful in 1 years time we need to lay\nproper foundations. Those foundations are not word documents,\nspreadsheets, etc.  they are selecting the right tools for the job.\n\nWe can gain so much benefit from using 3rd party software.\n(bettermeans would rock if it wasnt rotting)\n\nI am sure you could do your coding work just using vi, but an sdk\nmakes it much easier and allows you to work in a more productive manner.\n\nI have had a couple of off list emails with some testers and they also\nfeel that it is very important to make sure we have a sound foundation\n(mantis is so much more than just a bug reporting tool, I see the bug\nreporting functionality as secondary to the main test run\nfunctionality - but it doesnt have to be mantis based, we do need\nworkflow and testcase software though - and proper software for this\nis much better than just a massive google doc.) however I am checking\nout some other software that has been recommended.  It will be very\nhard to change 'the process' once we have something we are used too\n(just look at the current resistance) I promise nothing will change\nfor the dev team.  But test does need other tools, and processes.\n\nIf you feel that strongly that I am going about this the wrong way, I\nam happy to step back and let someone else sort it out (I will still\ndo all the testing I possibly can). I would feel that this would be a\nreal shame and we have the chance to setup requirements to\nfunctionality to tests all with traceability. why not do it right from\nthe start?\n\nI will open up my vps' somepoint over the next few days and you can\nsee what I mean. I will setup a fake git project, and sort out the\ninteractions.\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJQZz1pAAoJEFvEB9dQFvtQRLkIAJtPCkW1R9vmMPY9u4o+ET1t\nw4pV/+W2PXo2p86HnljCIPLV/cua/1I/EJp7XR7s145Nj4KZUbzHGhvUUmwDOHW2\nTGvJs+HO1bjsJfh4pWEb6PXcW3TguZxZSt5/rBAAI/5BeomSuRcZOdoV87D1xnK8\nTSlgaseWrJcpKLO30/FQA3QnH/bjJ4OBmtHp8WaOtSnfww9Zbb5VYca37O15c2U4\n2d0RUunDg1w2kRbkKjztxr3YasSOX+07Uvj4d5Lw7zgA0U93krNWVT1Ypo94dNJ7\n6SyKi30UuqDdJ9XxZrMB/LBVNGOLlIBNWL++ocu5GFnOn9pnw57ZMBZM5g6YDpo=\n=ekQ/\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-09-27T00:53:26",
                "message_text_only": "On Wed, 2012-09-26 at 13:28 +0100, steve wrote:\n> Hi Matt,\n> \n> Glad to have another ninja onboard :)\n> \n> On 25/09/2012 21:41, Matt Corallo wrote:\n> > Although Jenkins may not be the best system, we already have\n> > jenkins and pull-tester (which is a dumb python script I wrote to\n> > test all incoming pull requests from github).\n> \n> I have never heard of jenkins before.  I need to do some more digging.\n> is this the right thing?\n> \n> https://wiki.jenkins-ci.org/display/JENKINS/Mantis+Plugin\nFor a mantis plugin, sure, I guess...\n> \n> Mantis on the other hand, I know exceptionally well.  I hate\n> duplication of work/data unless absolutely necessary.  I will check\n> jenkins out (just out of interest what is it actually meant to do? the\n> website implies framework, but not what its for)\nJenkins currently just runs the test script after each new commit to\nbitcoin (and provides binaries to anyone who wants them), so its pretty\nbasic (though jenkins has way more features than we use).  The bitcoin\none lives at http://jenkins.bluematt.me/\n> \n> > \n> > They both run the same set of scripts, namely those at \n> > https://github.com/TheBlueMatt/test-scripts (its pretty basic right\n> > now, but since it is on github, I was hoping someone would find\n> > the inspiration to add to it).\n> \n> I will check it out. I wrote a very basic script that wikified the\n> changelog,\nWe currently keep a changelog at https://en.bitcoin.it/wiki/Changelog (I\nwent back and added tons of logs a while back and it got updated, though\n0.7 seems to be missing...) anyway, automating that would be nice...\n> and linked to the changes and created wiki pages for the\n> testcases.  \nHaving more info on that changelog page would be nice.\n> have you seen the stuff I put on bettermeans? bits keep\n> vanishing then re appearing.\nI have been meaning to catch up with the various attempts at better\nbitcoin testing that have started up a few times, but I keep never\ngetting around to it...\n> \n> This is the outline of the testing that I setup for 0.7\n> \n> https://secure.bettermeans.com/projects/4256/wiki\n> \n> > \n> > I dont really care if we keep using jenkins, but I figure we might\n> > as well keep all the tests in one place?\n> \n> Yes, I would love to unify all build testing and testcases into one\n> place.  I am still on the fence as to including unit tests into this.\n> However I do see 3 distinct type of testcases\nEven if unit tests are considered separate, having it all run in one\nhuge test script makes it quite easy to implement new things (like\npull-tester) which test some arbitrary bitcoind commit in the same way\nas every other tester.  \n> 1 - requirements based testcases (requirements based off the current\n> block chain rules - these are edge cases and known interoperability\n> issues)\nThe BitcoinjBitcoindComparisonTool.jar file which is run as a part of\nthe test scripts tries to hit as many block acceptance edge cases as\npossible (I'm sure I missed a ton, but it hits a lot too).  I've also\nbeen pushing alternate implementation implementors to use it to test\ntheir own implementations.\n> \n> 2 - Acceptance based testcases - these are testcases that should be\n> run for every build.  Check out the General Acceptance Tests in the\n> wiki link for examples and testcases\n> \n> 3 - Testcases for reference implementations of things (like multisig -\n> i see these working like the /test folder when you install a new perl\n> module)\n> \n> These three things alone are a massive task. and they still wont cover\n> everything.  I would like to get the workflow so that people can\n> sponsor or donate to a specific campaign (eg a new feature is\n> implemented, people want it tested so can donate just for that\n> campaign [developing testcases, structure, requirements, etc])\n> \n> Once this is done, I will get to do some exciting stuff (like writing\n> fuzzers, automation, etc) unfortunately I do not know python, only perl.\nAs far as I'm concerned more test cases are more test cases, it may get\nunwieldy to maintain, but at least we'd have more test cases :)\n\nIn terms of general testing strategies, I really prefer to script it\nall, jenkins is quite nice in that it can have slave workers using a\ndifferent OS which run their own tests and then report back to the main\njenkins instance.  Getting a real Windows slave to run the installer and\ntest that thoroughly as well as basic Mac things (I know OSX uses a very\ndifferent build system...) would be nice (though I dont really have time\nto write all those tests...)\n\nre: GUI testing is hard: I've heard Qt's unit test framework is really\npowerful and can even include things like click scripting and analysis\nof the current views (though, I agree, its still no doubt hard).  \n\nMatt"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-09-27T02:29:30",
                "message_text_only": "On Wed, Sep 26, 2012 at 8:53 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Jenkins currently just runs the test script after each new commit to\n> bitcoin (and provides binaries to anyone who wants them), so its pretty\n> basic (though jenkins has way more features than we use).  The bitcoin\n> one lives at http://jenkins.bluematt.me/\n\nJenkins is excellent at cycling through tests,  while additional\nexternal tools may bring some value they're not required.  It's also\nessential to automate all tests that we really care are run\u2014 with our\nsmall active development group and volunteer contributors the only\ntests we can count on being run are the automated ones. Automated\ntests included with the software\u2014 or at least the source\u2014 are also the\nonly way to have a good chance of catching gnarly platform\ninteractions.\n\nI think more than talking about testing I think we need is actual\ntesting. Code coverage from the current tests (e.g. bitcoin-test and a\ntestnet sync) is very unimpressive, and while coverage isn't some\nmagical silver bullet and does not, by itself, mean the tests are good\nflaws in uncovered code can't be detected by the tests.  We also lack\nsimple testing cycle documentation for people interested in testing\nmanually to walk through, etc. I think all the meta discussion is not\nvery useful until we actually have more substance to put into it.\nOtherwise I fear we're just building an airport by painting stripes\nand waiting for the planes to land...\n\nIf someone wants to help and would like a list of some of the testing\nI think would be useful, ping me off-list and I can blast some\nsuggestions. But I assume that anyone who actually wants to work on\nthis isn't short of ideas, and at this point \"work on what interests\nyou, report what interesting thing you accomplish or discover\" is\nprobably a perfectly fine level of coordination."
            },
            {
                "author": "Daniel F",
                "date": "2012-09-25T20:49:22",
                "message_text_only": "on 09/25/2012 02:32 PM steve said the following:\n> Anyone interested in helping out/reviewing processes? even if it is just\n> some encouragement, it is all greatly appreciated.\n\nnot enough time in the day for me to seriously help out, but since you\nasked, here's some encouragement. :) more testing == good.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 224 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120925/0f8c9abf/attachment.sig>"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-09-25T21:25:39",
                "message_text_only": "This is definitely worth doing and I wish you every encouragement.\n\nFor my part I'm working on a different area of the Bitcoin ecosystem and\nthat is taking up all my time so I can only cheer you on from the sidelines.\n\nOn 25 September 2012 21:49, Daniel F <nanotube at gmail.com> wrote:\n\n> on 09/25/2012 02:32 PM steve said the following:\n> > Anyone interested in helping out/reviewing processes? even if it is just\n> > some encouragement, it is all greatly appreciated.\n>\n> not enough time in the day for me to seriously help out, but since you\n> asked, here's some encouragement. :) more testing == good.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120925/b170e63a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Testing Project",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Gary Rowe",
                "Wladimir",
                "steve",
                "Gregory Maxwell",
                "Matt Corallo",
                "Mark Friedenbach",
                "Daniel F",
                "Gavin Andresen"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 39345
        }
    }
]