[
    {
        "title": "[Bitcoin-development] Electrum 2.0 has been tagged",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2015-03-01T15:23:25",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nDear Bitcoin devs,\n\nI just tagged version 2.0 of Electrum:\nhttps://github.com/spesmilo/electrum/tree/2.0\n\nThe electrum.org website will be updated later today. The release\nnotes are a bit dense, due to the large amount of changes and new\nfeatures in this release. In the coming weeks we will be adding more\ndetailed documentation to the wiki and to the website.\n\nThere has been a very long hiatus in Electrum releases, because it\ntook me a lot of time to decide about the new seed derivation method\nand wallet structure. Now that this part is done, I hope that we will\nresume to a faster release pace.\n\nI would like to thank all the people who contributed to this release,\ndevelopers, beta testers, but also people from this list who provided\nuseful feedback.\n\nCheers,\n\nThomas\n\n_____________________________\n\nRELEASE-NOTES\n\n# Release 2.0\n\n* Before you upgrade, make sure you have saved your wallet seed on\npaper.\n\n* Documentation is now hosted on a wiki: http://electrum.orain.org\n\n* New seed derivation method (not compatible with BIP39). The seed\nphrase includes a version number, that refers to the wallet\nstructure. The version number also serves as a checksum, and it\nwill prevent the import of seeds from incompatible wallets. Old\nElectrum seeds are still supported.\n\n* New address derivation (BIP32). Standard wallets are single account\nand use a gap limit of 20.\n\n* Support for Multisig wallets using parallel BIP32 derivations and\nP2SH addresses (\"2 of 2\", \"2 of 3\").\n\n* Compact serialization format for unsigned or partially signed\ntransactions, that includes the BIP32 master public key and\nderivation needed to sign inputs. Serialized transactions can be\nsent to cosigners or to cold storage using QR codes (using Andreas\nSchildbach's base 43 idea).\n\n* Support for BIP70 payment requests:\n- - Verification of the chain of signatures uses tlslite.\n- - In the GUI, payment requests are shown in the 'Invoices' tab.\n\n* Support for hardware wallets: Trezor (Satoshilabs) and Btchip (Ledger).\n\n* Two-factor authentication service by TrustedCoin. This service uses\n\"2 of 3\" multisig wallets and Google Authenticator. Note that\nwallets protected by this service can be deterministically restored\nfrom seed, without Trustedcoin's server.\n\n* Cosigner Pool plugin: encrypted communication channel for multisig\nwallets, to send and receive partially signed transactions.\n\n* Audio Modem plugin: send and receive transactions by sound.\n\n* OpenAlias plugin: send bitcoins to aliases verified using DNSSEC.\n\n* New 'Receive' tab in the GUI:\n- - create and manage payment requests, with QR Codes\n- - the former 'Receive' tab was renamed to 'Addresses'\n- - the former Point of Sale plugin is replaced by a resizeable\nwindow that pops up if you click on the QR code\n\n* The 'Send' tab in the Qt GUI supports transactions with multiple\noutputs, and raw hexadecimal scripts.\n\n* The GUI can connect to the Electrum daemon: \"electrum -d\" will\nstart the daemon if it is not already running, and the GUI will\nconnect to it. The daemon can serve several clients. It times out\nif no client uses if for more than 5 minutes.\n\n* The install wizard can be used to import addresses or private\nkeys. A watching-only wallet is created by entering a list of\naddresses in the wizard dialog.\n\n* New file format: Wallets files are saved as JSON. Note that new\nwallet files cannot be read by older versions of Electrum. Old\nwallet files will be converted to the new format; this operation\nmay take some time, because public keys will be derived for each\naddress of your wallet.\n\n* The client accepts servers with a CA-signed SSL certificate.\n\n* ECIES encrypt/decrypt methods, availabe in the GUI and using\nthe command line:\nencrypt <pubkey> <message>\ndecrypt <pubkey> <message>\n\n* The Android GUI has received various updates and it is much more\nstable. Another script was added to Android, called Authenticator,\nthat works completely offline: it reads an unsigned transaction\nshown as QR code, signs it and shows the result as a QR code.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAEBAgAGBQJU8y7fAAoJECvVgkt/lHDm78oP/2uIqCyOwLsAJGkAI3CPFxtw\nWssFJlnCnFiA4tPv5pd7HdOgxQkTaPbUHftexfdd/lpfmFvxZVoHcA/32IIKFH63\nBU2bnEyYOaW1A4XfNDQH6VG7eT2er1HOlHCtIgzRl0KJNmVggU6DnXnHkUs1PVvg\npyEIR7Xv3GiK7rcS4qCS/9COroqQGFOXJAiLnOaQP5KszT1bMUdoL7mBPTfavnla\nLM+2MgKJOWv+JpHQCDp3XwAXX62LLsS2BjdK1Jt6OpGA6IuVQGBSaTIn5K81S+Yh\nM6RDKbP3kObYQ+bzLvtWrzgUD3sdht/V8L5ZPS3+Jibvmhae2zRrm/YpJZ77Yjd4\n7QliCFGH0+Gwle72yOempFGWULwq7p6yo4dVZXpj1G3XmbZXuvFg4jYeC/usCx+T\nkQgMBPWME2m80fCzhJew1pRChSs/lzVreB0Lh6Tm/5Pibmy721J4oUr6oLkaR9Uy\nNMrYqnSy0+tCEOXHrpCYhqogyzzdjOlv0gWKqB2uSkO5TkEHv2eyHeiZttAn11qO\nsb85q/k0kYQBZZEvKJ9022eyKHjejDhQjKsCVIHhb81BJ1QYnZFIxBiKkVMxf0u5\nsT2TTi18eOrYCUGD2WJ+ALyI1zN1sHO0/sn5+XzlC0jg+1KUXoo0j8NYnzmHb0Yx\n5lbdlcaw0Uo7iWkFdMYT\n=IGGP\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-02T07:09:12",
                "message_text_only": "Congrats on the release! Electrum is a very nice wallet.\n\n\nOn 03/01/2015 04:23 PM, Thomas Voegtlin wrote:\n> Dear Bitcoin devs,\n> \n> I just tagged version 2.0 of Electrum: \n> https://github.com/spesmilo/electrum/tree/2.0\n> \n> The electrum.org website will be updated later today. The release \n> notes are a bit dense, due to the large amount of changes and new \n> features in this release. In the coming weeks we will be adding\n> more detailed documentation to the wiki and to the website.\n> \n> There has been a very long hiatus in Electrum releases, because it \n> took me a lot of time to decide about the new seed derivation\n> method and wallet structure. Now that this part is done, I hope\n> that we will resume to a faster release pace.\n> \n> I would like to thank all the people who contributed to this\n> release, developers, beta testers, but also people from this list\n> who provided useful feedback.\n> \n> Cheers,\n> \n> Thomas\n> \n> _____________________________\n> \n> RELEASE-NOTES\n> \n> # Release 2.0\n> \n> * Before you upgrade, make sure you have saved your wallet seed on \n> paper.\n> \n> * Documentation is now hosted on a wiki: http://electrum.orain.org\n> \n> * New seed derivation method (not compatible with BIP39). The seed \n> phrase includes a version number, that refers to the wallet \n> structure. The version number also serves as a checksum, and it \n> will prevent the import of seeds from incompatible wallets. Old \n> Electrum seeds are still supported.\n> \n> * New address derivation (BIP32). Standard wallets are single\n> account and use a gap limit of 20.\n> \n> * Support for Multisig wallets using parallel BIP32 derivations\n> and P2SH addresses (\"2 of 2\", \"2 of 3\").\n> \n> * Compact serialization format for unsigned or partially signed \n> transactions, that includes the BIP32 master public key and \n> derivation needed to sign inputs. Serialized transactions can be \n> sent to cosigners or to cold storage using QR codes (using Andreas \n> Schildbach's base 43 idea).\n> \n> * Support for BIP70 payment requests: - Verification of the chain\n> of signatures uses tlslite. - In the GUI, payment requests are\n> shown in the 'Invoices' tab.\n> \n> * Support for hardware wallets: Trezor (Satoshilabs) and Btchip\n> (Ledger).\n> \n> * Two-factor authentication service by TrustedCoin. This service\n> uses \"2 of 3\" multisig wallets and Google Authenticator. Note that \n> wallets protected by this service can be deterministically\n> restored from seed, without Trustedcoin's server.\n> \n> * Cosigner Pool plugin: encrypted communication channel for\n> multisig wallets, to send and receive partially signed\n> transactions.\n> \n> * Audio Modem plugin: send and receive transactions by sound.\n> \n> * OpenAlias plugin: send bitcoins to aliases verified using\n> DNSSEC.\n> \n> * New 'Receive' tab in the GUI: - create and manage payment\n> requests, with QR Codes - the former 'Receive' tab was renamed to\n> 'Addresses' - the former Point of Sale plugin is replaced by a\n> resizeable window that pops up if you click on the QR code\n> \n> * The 'Send' tab in the Qt GUI supports transactions with multiple \n> outputs, and raw hexadecimal scripts.\n> \n> * The GUI can connect to the Electrum daemon: \"electrum -d\" will \n> start the daemon if it is not already running, and the GUI will \n> connect to it. The daemon can serve several clients. It times out \n> if no client uses if for more than 5 minutes.\n> \n> * The install wizard can be used to import addresses or private \n> keys. A watching-only wallet is created by entering a list of \n> addresses in the wizard dialog.\n> \n> * New file format: Wallets files are saved as JSON. Note that new \n> wallet files cannot be read by older versions of Electrum. Old \n> wallet files will be converted to the new format; this operation \n> may take some time, because public keys will be derived for each \n> address of your wallet.\n> \n> * The client accepts servers with a CA-signed SSL certificate.\n> \n> * ECIES encrypt/decrypt methods, availabe in the GUI and using the\n> command line: encrypt <pubkey> <message> decrypt <pubkey>\n> <message>\n> \n> * The Android GUI has received various updates and it is much more \n> stable. Another script was added to Android, called Authenticator, \n> that works completely offline: it reads an unsigned transaction \n> shown as QR code, signs it and shows the result as a QR code.\n> \n> ------------------------------------------------------------------------------\n>\n> \nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-02T15:37:31",
                "message_text_only": "Congrats Thomas! Glad to see Electrum 2 finally launch.\n\n\n> * New seed derivation method (not compatible with BIP39).\n\n\nDoes this mean a \"12 words\" wallet created by Electrum won't work if\nimported into some other wallet that supports BIP39? Vice versa? This seems\nunfortunate. I guess if seeds are being represented with 12 words\nconsistently, people will expect them to work everywhere.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150302/3647f808/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2015-03-02T17:11:22",
                "message_text_only": "Great to see Electrum 2.0 tagged !\n\nIt's been a long road I know.\nCongratulations to ThomasV and all the other Electrum contributors.\n\n:-)\n\nJim\n\n-- \nhttp://bitcoin-solutions.co.uk\n\nOn Mon, Mar 2, 2015, at 03:37 PM, Mike Hearn wrote:\n> Congrats Thomas! Glad to see Electrum 2 finally launch.\n> \n> \n> > * New seed derivation method (not compatible with BIP39).\n> \n> \n> Does this mean a \"12 words\" wallet created by Electrum won't work if\n> imported into some other wallet that supports BIP39? Vice versa? This seems\n> unfortunate. I guess if seeds are being represented with 12 words\n> consistently, people will expect them to work everywhere.\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-03-11T14:58:05",
                "message_text_only": "Thanks Mike, and sorry to answer a bit late; it has been a busy couple\nof weeks.\n\nYou are correct, a BIP39 seed phrase will not work in Electrum, and vice\nversa. It is indeed unfortunate. However, I believe BIP39 should not be\nfollowed, because it reproduces two mistakes I did when I designed the\nolder Electrum seed system. Let me explain.\n\nThe first problem I have with BIP39 is that the seed phrase does not\ninclude a version number.\n\nWallet development is still in an exploratory phase, and we should\nexpect even more innovation in this domain. In this context, it is\nunwise to make decisions that prevent future innovation.\n\nHowever, when we give a seed phrase to users, we have a moral obligation\nto keep supporting this seed phrase in future versions. We cannot simply\nannounce to Electrum users that their old seed phrase is not supported\nanymore, because we created a new version of the software that uses a\ndifferent derivation. This could lead to financial losses for users who\nare unaware of these technicalities. Well, at least, that is how I feel\nabout it.\n\nBIP39 and Electrum v2 have a very different ways of handling future\ninnovation. Electrum v2 seed phrases include an explicit version number,\nthat indicates how the wallet addresses should be derived. In contrast,\nBIP39 seed phrases do not include a version number at all. BIP39 is\nmeant to be combined with BIP43, which stipulates that the wallet\nstructure should depend on the BIP32 derivation path used for the wallet\n(although BIP43 is not followed by all BIP39 compatible wallets). Thus,\ninnovation in BIP43 is allowed only within the framework of BIP32. In\naddition, having to explore the branches of the BIP32 tree in order to\ndetermine the type of wallet attached to a seed might be somewhat\ninefficient.\n\nThe second problem I see with BIP39 is that it requires a fixed\nwordlist. Of course, this forbids innovation in the wordlist itself, but\nthat's not the main problem. When you write a new standard, it is\nimportant to keep this standard minimal, given the goal you want to\nachieve. I believe BIP39 could (and should) have been written without\nincluding the wordlist in the standard.\n\nThere are two ways to derive a master key from a mnemonic phrase:\n 1. A bidirectional mapping between words and numbers, as in old\nElectrum versions. Pros: bidirectional means that you can do Shamir\nsecret sharing of your seed. Cons: It requires a fixed wordlist.\n 2. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\nrequired. Cons: the mapping isn't bidirectional.\n\nElectrum v1 uses (1). Electrum v2 uses (2).\n\nEarly versions of BIP39 used (1), and later they switched to (2).\nHowever, BIP39 uses (2) only in order to derive the wallet keys, not for\nits checksum. The BIP39 checksum uses (1), and it does requires a fixed\nwordlist. This is just plainly inconsistent. As a result, you have\nneither wordlist flexibility, nor Shamir secret sharing.\n\nHaving a fixed wordlist is very unfortunate. First, it means that BIP39\nwill probably never leave the 'draft' stage, until all languages of the\nworld have been added. Second, once you add a wordlist for a new\nlanguage, you cannot change it anymore, because it will break existing\nseed phrases; therefore you have to be extremely careful in the way you\ndesign these wordlists. Third, languages often have words in common.\nWhen you add a new language to the list, you should not use words\nalready used by existing wordlists, in order to ensure that the language\ncan be detected. It leads to a first come first served situation, that\nmight not be sustainable in the future.\n\nIn order to support the old Electrum v1 seeds, all future versions of\nElectrum will have to include the old wordlist. In addition, when\ngenerating new seed phrases, Electrum now has to avoid collisions with\nold seed phrases, because the old ones did not have a version number.\nThis is painful enough, I will not repeat the same errors twice.\n\nElectrum v2 derives both its private keys and its checksum/version\nnumber using a hash of the seed phrase. This means that wordlists can be\nadded and modified in the future, without breaking existing seed\nphrases. It also means that it will be very easy for other wallets to\nsupport Electrum seedphrases: it requires about 20 lines of code, and no\nwordlist is required.\n\n\nThomas\n\n\nLe 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> Congrats Thomas! Glad to see Electrum 2 finally launch.\n> \n> \n>> * New seed derivation method (not compatible with BIP39).\n> \n> \n> Does this mean a \"12 words\" wallet created by Electrum won't work if\n> imported into some other wallet that supports BIP39? Vice versa? This seems\n> unfortunate. I guess if seeds are being represented with 12 words\n> consistently, people will expect them to work everywhere.\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-11T15:31:06",
                "message_text_only": "Thanks Thomas, for sharing your experience!\n\nI'd like know why you think it's a problem that BIP43 is tied to BIP32?\nI understand we all agreed at least on the BIP32-derivation spec\n(excluding the BIP32-hierarchy spec)?"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-03-12T08:56:55",
                "message_text_only": "Hi Andreas,\n\nI don't think it's a problem that BIP43 is tied to BIP32.\n\nWhat I don't like is that you have to explore branches of the derivation\ntree, in order to know if there is a wallet. As a result, it is not\npossible for the software to give a negative answer, like \"this wallet\nis empty\", because you do not know if you have explored all the possible\nderivations; a new one may have been added after the software was written.\n\nWith a version number, you can answer \"sorry this seed is not recognized\nby me\", and you do not need to be online to do that.\nIf you are online, you can answer \"this wallet is empty\" after exploring it.\n\n\n\n\nLe 11/03/2015 16:31, Andreas Schildbach a \u00e9crit :\n> Thanks Thomas, for sharing your experience!\n> \n> I'd like know why you think it's a problem that BIP43 is tied to BIP32?\n> I understand we all agreed at least on the BIP32-derivation spec\n> (excluding the BIP32-hierarchy spec)?\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-11T17:14:19",
                "message_text_only": "Sigh. The wallet words system is turning into kind of a mess.\n\nI thought the word list is in fact not a fixed part of the spec, because\nthe entropy is a hash of the words. But perhaps I'm misunderstanding\nsomething.\n\nThe main problem regular SPV wallets have with BIP39 is that there is no\nbirth time included in the data. Therefore we must ask users to write down\na timestamp as well, so we know where to start rescanning the chain. It\nsounds like the Electrum version doesn't fix this, so now we have at least\nFIVE incompatible results from a 12 word list:\n\n   - Electrum v2 with a version number but no date\n   - myTREZOR with no version and no date and BIP44 key derivation. Some\n   seeds I believe are now being generated with 24 words instead of 12.\n   - MultiBit HD with no version and a date in a custom form that creates\n   non-date-like codes you are expected to write down. I think BIP32 and BIP44\n   are both supported (sorta).\n   - GreenAddress with no version, no date and BIP32\n   - Other bitcoinj based wallets, with no version and a date written down\n   in normal human form, BIP32 only.\n\nI really hope we can recover from this somehow because otherwise all\nwallets will have to provide the user with a complicated matrix of\npossibilities and software combinations, and in practice many won't bother\nso these word combinations will actually end up being wallet specific for\nno particularly good reason, just very minor details like the presence or\nabsence of single fields.\n\nIt feels like we somehow fell flat on our faces just before the finishing\nline. This is deeply unfortunate. Compatibility and UX consistency is\nimportant!\n\nCurrently, I don't have any bright ideas for how to get everyone back onto\nthe same page with a fully compatible system that is acceptable to all. If\nanyone else has suggestions, I'm all ears.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/6feebf89/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2015-03-11T19:04:37",
                "message_text_only": "The wallet words system isn't perfect for sure but it does help the user in two main ways:\n1) Assuming wallet devs ensure forward compatibility for _their_ wallet the user knows they can recover their bitcoins using the same wallet software in case of a Bad Thing Happening.\n2) To an imperfect degree, they can transfer/ recover their bitcoins that are stored in Wallet X into Wallet Y. We need to give them guidance on how to do this.\n\nI think it is up to each wallet team to explain to their users clearly how they can do this in their help. It's only good manners to show your guests where the fire exits are.\n\nIt can be a simple help page saying:\n\"If you want to transfer your bitcoin out of MultiBit HD to Lighthouse, do this, this and this.\nIf you want to use the Trezor wallet you created in MultiBit HD on myTrezor.com, do this, this and this.\"\n\nThat way users have clear instructions on how to recover their bitcoins.\nUsers don't care about BIP this or BIP that but they REALLY DO CARE about keeping their bitcoins.\n\n-- \nhttp://bitcoin-solutions.co.uk\n\nOn Wed, Mar 11, 2015, at 05:14 PM, Mike Hearn wrote:\n> Sigh. The wallet words system is turning into kind of a mess.\n> \n> I thought the word list is in fact not a fixed part of the spec, because\n> the entropy is a hash of the words. But perhaps I'm misunderstanding\n> something.\n> \n> The main problem regular SPV wallets have with BIP39 is that there is no\n> birth time included in the data. Therefore we must ask users to write down\n> a timestamp as well, so we know where to start rescanning the chain. It\n> sounds like the Electrum version doesn't fix this, so now we have at least\n> FIVE incompatible results from a 12 word list:\n> \n>    - Electrum v2 with a version number but no date\n>    - myTREZOR with no version and no date and BIP44 key derivation. Some\n>    seeds I believe are now being generated with 24 words instead of 12.\n>    - MultiBit HD with no version and a date in a custom form that creates\n>    non-date-like codes you are expected to write down. I think BIP32 and BIP44\n>    are both supported (sorta).\n>    - GreenAddress with no version, no date and BIP32\n>    - Other bitcoinj based wallets, with no version and a date written down\n>    in normal human form, BIP32 only.\n> \n> I really hope we can recover from this somehow because otherwise all\n> wallets will have to provide the user with a complicated matrix of\n> possibilities and software combinations, and in practice many won't bother\n> so these word combinations will actually end up being wallet specific for\n> no particularly good reason, just very minor details like the presence or\n> absence of single fields.\n> \n> It feels like we somehow fell flat on our faces just before the finishing\n> line. This is deeply unfortunate. Compatibility and UX consistency is\n> important!\n> \n> Currently, I don't have any bright ideas for how to get everyone back onto\n> the same page with a fully compatible system that is acceptable to all. If\n> anyone else has suggestions, I'm all ears.\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2015-03-11T19:24:13",
                "message_text_only": "i guess you look at the glass half full :)\neven though what you say is true, we should aim for wallets not to\nrequire those instructions, by standardizing these things in BIPs.\nlet's hope bitcoin doesn't fail in standards as our industries have in\nthe past...\n\n2015-03-11 19:04 GMT+00:00 Jim <jim618 at fastmail.co.uk>:\n> The wallet words system isn't perfect for sure but it does help the user in two main ways:\n> 1) Assuming wallet devs ensure forward compatibility for _their_ wallet the user knows they can recover their bitcoins using the same wallet software in case of a Bad Thing Happening.\n> 2) To an imperfect degree, they can transfer/ recover their bitcoins that are stored in Wallet X into Wallet Y. We need to give them guidance on how to do this.\n>\n> I think it is up to each wallet team to explain to their users clearly how they can do this in their help. It's only good manners to show your guests where the fire exits are.\n>\n> It can be a simple help page saying:\n> \"If you want to transfer your bitcoin out of MultiBit HD to Lighthouse, do this, this and this.\n> If you want to use the Trezor wallet you created in MultiBit HD on myTrezor.com, do this, this and this.\"\n>\n> That way users have clear instructions on how to recover their bitcoins.\n> Users don't care about BIP this or BIP that but they REALLY DO CARE about keeping their bitcoins.\n>\n> --\n> http://bitcoin-solutions.co.uk\n>\n> On Wed, Mar 11, 2015, at 05:14 PM, Mike Hearn wrote:\n>> Sigh. The wallet words system is turning into kind of a mess.\n>>\n>> I thought the word list is in fact not a fixed part of the spec, because\n>> the entropy is a hash of the words. But perhaps I'm misunderstanding\n>> something.\n>>\n>> The main problem regular SPV wallets have with BIP39 is that there is no\n>> birth time included in the data. Therefore we must ask users to write down\n>> a timestamp as well, so we know where to start rescanning the chain. It\n>> sounds like the Electrum version doesn't fix this, so now we have at least\n>> FIVE incompatible results from a 12 word list:\n>>\n>>    - Electrum v2 with a version number but no date\n>>    - myTREZOR with no version and no date and BIP44 key derivation. Some\n>>    seeds I believe are now being generated with 24 words instead of 12.\n>>    - MultiBit HD with no version and a date in a custom form that creates\n>>    non-date-like codes you are expected to write down. I think BIP32 and BIP44\n>>    are both supported (sorta).\n>>    - GreenAddress with no version, no date and BIP32\n>>    - Other bitcoinj based wallets, with no version and a date written down\n>>    in normal human form, BIP32 only.\n>>\n>> I really hope we can recover from this somehow because otherwise all\n>> wallets will have to provide the user with a complicated matrix of\n>> possibilities and software combinations, and in practice many won't bother\n>> so these word combinations will actually end up being wallet specific for\n>> no particularly good reason, just very minor details like the presence or\n>> absence of single fields.\n>>\n>> It feels like we somehow fell flat on our faces just before the finishing\n>> line. This is deeply unfortunate. Compatibility and UX consistency is\n>> important!\n>>\n>> Currently, I don't have any bright ideas for how to get everyone back onto\n>> the same page with a fully compatible system that is acceptable to all. If\n>> anyone else has suggestions, I'm all ears.\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub for all\n>> things parallel software development, from weekly thought leadership blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-11T19:46:22",
                "message_text_only": "On Wed, Mar 11, 2015 at 7:24 PM, Ricardo Filipe\n<ricardojdfilipe at gmail.com> wrote:\n> i guess you look at the glass half full :)\n> even though what you say is true, we should aim for wallets not to\n> require those instructions, by standardizing these things in BIPs.\n> let's hope bitcoin doesn't fail in standards as our industries have in\n> the past...\n\nThere are genuine principled disagreements on how some things should\nbe done. There are genuine differences in functionality.\n\nWe cannot expect and should not expect complete compatibility. If you\nmust have complete compatibility: use the same software (or maybe not\neven then, considering how poor the forward compatibility of some\nthings has been..).\n\nWhat we can hope to do, and I think the best we can hope to do, is to\nminimize the amount of gratuitous incompatibility and reduce the\namount of outright flawed constructions (so if there are choices which\nmust be made, they're at least choices among relatively good options)."
            },
            {
                "author": "Aaron Voisine",
                "date": "2015-03-11T22:57:43",
                "message_text_only": "I'm not convinced that wallet seed interoperability is such a great thing.\nThere is a wide variability in the quality and security level of wallet\nimplementations and platforms. Each new device and wallet software a user\ntypes their seed into increases their attack surface and exposure to flaws.\nTheir security level is reduced to the lowest common denominator. I see the\nneed for a \"fire exit\", certainly, but we must also remember that fire\nexits are potential entrances for intruders.\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\n\nOn Wed, Mar 11, 2015 at 12:46 PM, Gregory Maxwell <gmaxwell at gmail.com>\nwrote:\n\n> On Wed, Mar 11, 2015 at 7:24 PM, Ricardo Filipe\n> <ricardojdfilipe at gmail.com> wrote:\n> > i guess you look at the glass half full :)\n> > even though what you say is true, we should aim for wallets not to\n> > require those instructions, by standardizing these things in BIPs.\n> > let's hope bitcoin doesn't fail in standards as our industries have in\n> > the past...\n>\n> There are genuine principled disagreements on how some things should\n> be done. There are genuine differences in functionality.\n>\n> We cannot expect and should not expect complete compatibility. If you\n> must have complete compatibility: use the same software (or maybe not\n> even then, considering how poor the forward compatibility of some\n> things has been..).\n>\n> What we can hope to do, and I think the best we can hope to do, is to\n> minimize the amount of gratuitous incompatibility and reduce the\n> amount of outright flawed constructions (so if there are choices which\n> must be made, they're at least choices among relatively good options).\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/9247ee7b/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-11T23:22:10",
                "message_text_only": "Users will want to have wallets shared between devices, it's as simple as\nthat, especially for mobile/desktop wallets. Trying to stop them from doing\nthat by making things gratuitously incompatible isn't the right approach:\n they'll just find workarounds or wallet apps will learn how to import\nseeds from other apps. Better to just explain the risks and help people\nmitigate them.\n\nOn Wed, Mar 11, 2015 at 3:57 PM, Aaron Voisine <voisine at gmail.com> wrote:\n\n> I'm not convinced that wallet seed interoperability is such a great thing.\n> There is a wide variability in the quality and security level of wallet\n> implementations and platforms. Each new device and wallet software a user\n> types their seed into increases their attack surface and exposure to flaws.\n> Their security level is reduced to the lowest common denominator. I see the\n> need for a \"fire exit\", certainly, but we must also remember that fire\n> exits are potential entrances for intruders.\n>\n> Aaron Voisine\n> co-founder and CEO\n> breadwallet.com\n>\n> On Wed, Mar 11, 2015 at 12:46 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>\n>> On Wed, Mar 11, 2015 at 7:24 PM, Ricardo Filipe\n>> <ricardojdfilipe at gmail.com> wrote:\n>> > i guess you look at the glass half full :)\n>> > even though what you say is true, we should aim for wallets not to\n>> > require those instructions, by standardizing these things in BIPs.\n>> > let's hope bitcoin doesn't fail in standards as our industries have in\n>> > the past...\n>>\n>> There are genuine principled disagreements on how some things should\n>> be done. There are genuine differences in functionality.\n>>\n>> We cannot expect and should not expect complete compatibility. If you\n>> must have complete compatibility: use the same software (or maybe not\n>> even then, considering how poor the forward compatibility of some\n>> things has been..).\n>>\n>> What we can hope to do, and I think the best we can hope to do, is to\n>> minimize the amount of gratuitous incompatibility and reduce the\n>> amount of outright flawed constructions (so if there are choices which\n>> must be made, they're at least choices among relatively good options).\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub\n>> for all\n>> things parallel software development, from weekly thought leadership\n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/2a1f4679/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2015-03-11T23:50:27",
                "message_text_only": "I'd like to offer that the best practice for the shared wallet use case\nshould be multi-device multi-sig.  The mobile has a key, the desktop has\na key and a third-party security oracle has a third key.  The oracle\nwould have different security thresholds for countersigning the mobile.\n\nThis way you can have the same overall wallet on all devices, but\ndifferent security profiles on different keys.\n\nThat said, I do agree that mnemonic phrases should be portable, and find\nit unfortunate that the ecosystem is failing to standardize on phrase\nhandling.\n\nOn 2015-03-11 04:22 PM, Mike Hearn wrote:\n> Users will want to have wallets shared between devices, it's as simple\n> as that, especially for mobile/desktop wallets. Trying to stop them from\n> doing that by making things gratuitously incompatible isn't the right\n> approach:  they'll just find workarounds or wallet apps will learn how\n> to import seeds from other apps. Better to just explain the risks and\n> help people mitigate them.\n> \n> On Wed, Mar 11, 2015 at 3:57 PM, Aaron Voisine <voisine at gmail.com\n> <mailto:voisine at gmail.com>> wrote:\n> \n>     I'm not convinced that wallet seed interoperability is such a great\n>     thing. There is a wide variability in the quality and security level\n>     of wallet implementations and platforms. Each new device and wallet\n>     software a user types their seed into increases their attack surface\n>     and exposure to flaws. Their security level is reduced to the lowest\n>     common denominator. I see the need for a \"fire exit\", certainly, but\n>     we must also remember that fire exits are potential entrances for\n>     intruders.\n> \n>     Aaron Voisine\n>     co-founder and CEO\n>     breadwallet.com <http://breadwallet.com>\n> \n>     On Wed, Mar 11, 2015 at 12:46 PM, Gregory Maxwell\n>     <gmaxwell at gmail.com <mailto:gmaxwell at gmail.com>> wrote:\n> \n>         On Wed, Mar 11, 2015 at 7:24 PM, Ricardo Filipe\n>         <ricardojdfilipe at gmail.com <mailto:ricardojdfilipe at gmail.com>>\n>         wrote:\n>         > i guess you look at the glass half full :)\n>         > even though what you say is true, we should aim for wallets not to\n>         > require those instructions, by standardizing these things in BIPs.\n>         > let's hope bitcoin doesn't fail in standards as our industries have in\n>         > the past...\n> \n>         There are genuine principled disagreements on how some things should\n>         be done. There are genuine differences in functionality.\n> \n>         We cannot expect and should not expect complete compatibility.\n>         If you\n>         must have complete compatibility: use the same software (or\n>         maybe not\n>         even then, considering how poor the forward compatibility of some\n>         things has been..).\n> \n>         What we can hope to do, and I think the best we can hope to do,\n>         is to\n>         minimize the amount of gratuitous incompatibility and reduce the\n>         amount of outright flawed constructions (so if there are choices\n>         which\n>         must be made, they're at least choices among relatively good\n>         options).\n> \n>         ------------------------------------------------------------------------------\n>         Dive into the World of Parallel Programming The Go Parallel\n>         Website, sponsored\n>         by Intel and developed in partnership with Slashdot Media, is\n>         your hub for all\n>         things parallel software development, from weekly thought\n>         leadership blogs to\n>         news, videos, case studies, tutorials and more. Take a look and\n>         join the\n>         conversation now. http://goparallel.sourceforge.net/\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Dive into the World of Parallel Programming The Go Parallel Website,\n>     sponsored\n>     by Intel and developed in partnership with Slashdot Media, is your\n>     hub for all\n>     things parallel software development, from weekly thought leadership\n>     blogs to\n>     news, videos, case studies, tutorials and more. Take a look and join the\n>     conversation now. http://goparallel.sourceforge.net/\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-11T23:54:59",
                "message_text_only": ">\n> I'd like to offer that the best practice for the shared wallet use case\n> should be multi-device multi-sig.\n\n\nSure. But in practice people will want to have a pool of spending money\nthat they can spend when they are out and about, and also with one click\nfrom their web browser on their primary computer, and maybe also on their\ngames console, etc etc.\n\nI don't think we can realistically tell people to *always* use clever\nmulti-device wallets - there will always be a desire to have a convenient\nhot wallet that's synchronised between different devices.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/2125934b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-12T00:11:24",
                "message_text_only": "On Wed, Mar 11, 2015 at 11:50 PM, devrandom <c1.sf-bitcoin at niftybox.net> wrote:\n> That said, I do agree that mnemonic phrases should be portable, and find\n> it unfortunate that the ecosystem is failing to standardize on phrase\n> handling.\n\nThe fact remains that there are several apparently unresolvable\nwell-principled perspectives on this subject.\n\n(And I can speak to this personally: There are several BIPs in this\nspace that I'd rather not see in product with my name on it.)\n\nUnless two wallets have exactly the same feature set, cross importing\nkeys is going to confuse or break something. Even if you're trying to\nbe fairly generic the testing overhead for all possible strategies and\nstructures is large. Expecting compatibility here would be like\nexpecting two large commercial accounting packages to support the same\ninternal file formats. Compatibility is only straight forward when the\nfeature set is as limited as possible.\n\nThe space for weird behavior to harm users is pretty large... e.g. you\ncould load a key into two wallets, such that one can see all the funds\nby the other, but not vice versa and and up losing funds by\nincorrectly assuming you had no coins; or inadvertently rip of your\nbusiness partners by accounting for things incorrectly.\n\nEven ignoring compatibility, most demanded use cases here are ones\nthat create concurrent read/write use of single wallet without some\ncoordinating service is inherently somewhat broken because you can\ndouble spend yourself, and end up with stalled and stuck transactions\nand causing people to think you tried ripping them off.\n\nI certainly recognize the desirable aspects of just being able to load\na common wallet, and that inexperienced users expect it to just work.\nBut I don't think that expectation is currently very realistic except\nwithin limited domains. It may be more realistic in the future when\nthe role of wallets is better established. I don't see any _harm_ in\ntrying to standardize what can be, I just don't expect to see a lot of\nsuccess.\n\nUltimately, the most fundamental compatibility is guaranteed:  you can\nalways send your funds to another wallet. This always works and\nguarantees that you are never locked in to a single wallet. It is well\ntested and cannot drive any software in to weird or confused states."
            },
            {
                "author": "devrandom",
                "date": "2015-03-12T02:41:30",
                "message_text_only": "On 2015-03-11 05:11 PM, Gregory Maxwell wrote:\n> On Wed, Mar 11, 2015 at 11:50 PM, devrandom <c1.sf-bitcoin at niftybox.net> wrote:\n>> That said, I do agree that mnemonic phrases should be portable, and find\n>> it unfortunate that the ecosystem is failing to standardize on phrase\n>> handling.\n> \n> The fact remains that there are several apparently unresolvable\n> well-principled perspectives on this subject.\n> \n> (And I can speak to this personally: There are several BIPs in this\n> space that I'd rather not see in product with my name on it.)\n> \n> Unless two wallets have exactly the same feature set, cross importing\n> keys is going to confuse or break something. Even if you're trying to\n> be fairly generic the testing overhead for all possible strategies and\n> structures is large. Expecting compatibility here would be like\n> expecting two large commercial accounting packages to support the same\n> internal file formats. Compatibility is only straight forward when the\n> feature set is as limited as possible.\n\nYou make some good points.  However, I still hope for standardization by\n\"profile\".  E.g. a \"consumer profile\" for wallets with just one account,\na \"business profile\" for small business wallets.  If an application\nfalls outside of the standardized profiles, they can roll their own or\ntry to promote a new standard.\n\nI think there are some important advantages to not being forced to use\nthe old wallet to send coins when switching wallets. The three I can\nthink of right now are: maintaining transaction history, emergency\ntransition when a wallet has a serious (e.g. money losing) bug and web\nwallet with server down.\n\nAnother important reason to standardize is to reduce the \"roll your own\ncrypto\" temptation on the wallet creator part, where the wallet-specific\nalgorithm is more likely to contain weaknesses.\n\nI do agree that trying to come up with one uber standard will likely\nfail and is probably counter productive.\n\n> \n> The space for weird behavior to harm users is pretty large... e.g. you\n> could load a key into two wallets, such that one can see all the funds\n> by the other, but not vice versa and and up losing funds by\n> incorrectly assuming you had no coins; or inadvertently rip of your\n> business partners by accounting for things incorrectly.\n> \n> Even ignoring compatibility, most demanded use cases here are ones\n> that create concurrent read/write use of single wallet without some\n> coordinating service is inherently somewhat broken because you can\n> double spend yourself, and end up with stalled and stuck transactions\n> and causing people to think you tried ripping them off.\n> \n> I certainly recognize the desirable aspects of just being able to load\n> a common wallet, and that inexperienced users expect it to just work.\n> But I don't think that expectation is currently very realistic except\n> within limited domains. It may be more realistic in the future when\n> the role of wallets is better established. I don't see any _harm_ in\n> trying to standardize what can be, I just don't expect to see a lot of\n> success.\n> \n> Ultimately, the most fundamental compatibility is guaranteed:  you can\n> always send your funds to another wallet. This always works and\n> guarantees that you are never locked in to a single wallet. It is well\n> tested and cannot drive any software in to weird or confused states.\n> \n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-12T04:09:44",
                "message_text_only": "On Thu, Mar 12, 2015 at 2:41 AM, devrandom <c1.sf-bitcoin at niftybox.net> wrote:\n> I think there are some important advantages to not being forced to use\n> the old wallet to send coins when switching wallets. The three I can\n> think of right now are: maintaining transaction history,\n\nJust loading a key doesn't keep transaction history however, if the\nloading wallet can't understand or infer metadata about the\ntransactions. You get some mass of data but to tell actually what the\ntransactions are, or what they were for, forensic accounting is\nrequired and some data will be potentially unrecoverable.\n\nThe best way to preserve historical information is to use reporting\nfrom the wallet in question; which will accurately record the best\navailable output for this. (E.g. Bitcoin-qt has a CSV export or you\ncan take a json list-transactions out of it).\n\n> emergency transition when a wallet has a serious (e.g. money losing) bug\n\nThis cuts both ways, we've seen significant losses for users in\nBitcoin Core where they've used the console to import keys that they\nalso used in other insecure clients.\n\nFor an emergency transition the user is probably better off with an\nexplicit unstructured mass private key export, and a sweep function;\nand guaranteeing compatibility with that is much easier; and because\nit moves funds in one direction there is much less chance of going\nfrom secure to insecure.\n\n> and web\n> wallet with server down.\n\nI suppose it would be too much to ask that these web wallets actually\nnot be totally centrally controlled and have the potential of just\nhaving someone else stand up a server. I guess not. :(\n\nEmergencies being what the are you do with what you can... indeed, I\nagree thats a reason that better compatibility is better. (But perhaps\nbest is that its insane to use software to handle your money that can\njust be taken away from you like that...)\n\n> Another important reason to standardize is to reduce the \"roll your own\n> crypto\" temptation on the wallet creator part, where the wallet-specific\n> algorithm is more likely to contain weaknesses.\n> I do agree that trying to come up with one uber standard will likely\n> fail and is probably counter productive.\n\nCareful with this line of thinking: We have no mechanism in the BIP\nprocess to exclude weak cryptography.\n\nA BIP is not a measure of cryptographic integrity. There are existing\nBIPs which I consider flawed and would not use or recommend.\n\nIt result in some level of review, maybe, and so it can be productive\nto at least have more eyes on fewer things; which is a reason I\nwouldn't say don't bother trying.\n\nAnd indeed, I do think that what can be standardized should be, my\nwords weren't intended to dismiss anyone's efforts, only to encourage\nrealistic (I think) expectations around what will come of it.\n\nAnd while I hope for no gratuitous incompatibility, I also hope that\nno one working on a wallet hesitates for a minute to offer a new and\ninteresting functionality just because it doesn't fit into a prefab\nshape."
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-03-12T19:08:43",
                "message_text_only": "On Wed, Mar 11, 2015 at 11:09 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> For an emergency transition the user is probably better off with an\n> explicit unstructured mass private key export, and a sweep function;\n> and guaranteeing compatibility with that is much easier; and because\n> it moves funds in one direction there is much less chance of going\n> from secure to insecure.\n\nI haven't looked at the existing sweep implementations, but it would\nbe unfortunate if sweep functions were not available that create at\nleast the same number of keys, or possibly more, for the purposes of\nsweeping. I suppose there are different levels of emergency, where\nperhaps you want to sweep all at once in a single transaction and lose\nout on (already nebulous) privacy benefits. I say nebulous because\nbroadcasting a bunch of transactions all at the same time during the\nsweep can compromise privacy even when the transactions have no common\nancestor outputs.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-12T10:30:18",
                "message_text_only": "On 03/12/2015 01:11 AM, Gregory Maxwell wrote:\n\n> Ultimately, the most fundamental compatibility is guaranteed:  you can\n> always send your funds to another wallet. This always works and\n> guarantees that you are never locked in to a single wallet. It is well\n> tested and cannot drive any software in to weird or confused states.\n\nThis."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-12T10:28:25",
                "message_text_only": "That doesn't work for mobile wallets, because we need to consider the\noffline case. To fix this, we'd need to extend BIP70 to tell the\nmerchant where to forward the half-signed transaction to. Then again I'm\nnot sure if we want that, for privacy reasons. In any case, practical\nmultisig is still a looong way off.\n\n\nOn 03/12/2015 12:50 AM, devrandom wrote:\n> I'd like to offer that the best practice for the shared wallet use case\n> should be multi-device multi-sig.  The mobile has a key, the desktop has\n> a key and a third-party security oracle has a third key.  The oracle\n> would have different security thresholds for countersigning the mobile.\n> \n> This way you can have the same overall wallet on all devices, but\n> different security profiles on different keys.\n> \n> That said, I do agree that mnemonic phrases should be portable, and find\n> it unfortunate that the ecosystem is failing to standardize on phrase\n> handling.\n> \n> On 2015-03-11 04:22 PM, Mike Hearn wrote:\n>> Users will want to have wallets shared between devices, it's as simple\n>> as that, especially for mobile/desktop wallets. Trying to stop them from\n>> doing that by making things gratuitously incompatible isn't the right\n>> approach:  they'll just find workarounds or wallet apps will learn how\n>> to import seeds from other apps. Better to just explain the risks and\n>> help people mitigate them.\n>>\n>> On Wed, Mar 11, 2015 at 3:57 PM, Aaron Voisine <voisine at gmail.com\n>> <mailto:voisine at gmail.com>> wrote:\n>>\n>>     I'm not convinced that wallet seed interoperability is such a great\n>>     thing. There is a wide variability in the quality and security level\n>>     of wallet implementations and platforms. Each new device and wallet\n>>     software a user types their seed into increases their attack surface\n>>     and exposure to flaws. Their security level is reduced to the lowest\n>>     common denominator. I see the need for a \"fire exit\", certainly, but\n>>     we must also remember that fire exits are potential entrances for\n>>     intruders.\n>>\n>>     Aaron Voisine\n>>     co-founder and CEO\n>>     breadwallet.com <http://breadwallet.com>\n>>\n>>     On Wed, Mar 11, 2015 at 12:46 PM, Gregory Maxwell\n>>     <gmaxwell at gmail.com <mailto:gmaxwell at gmail.com>> wrote:\n>>\n>>         On Wed, Mar 11, 2015 at 7:24 PM, Ricardo Filipe\n>>         <ricardojdfilipe at gmail.com <mailto:ricardojdfilipe at gmail.com>>\n>>         wrote:\n>>         > i guess you look at the glass half full :)\n>>         > even though what you say is true, we should aim for wallets not to\n>>         > require those instructions, by standardizing these things in BIPs.\n>>         > let's hope bitcoin doesn't fail in standards as our industries have in\n>>         > the past...\n>>\n>>         There are genuine principled disagreements on how some things should\n>>         be done. There are genuine differences in functionality.\n>>\n>>         We cannot expect and should not expect complete compatibility.\n>>         If you\n>>         must have complete compatibility: use the same software (or\n>>         maybe not\n>>         even then, considering how poor the forward compatibility of some\n>>         things has been..).\n>>\n>>         What we can hope to do, and I think the best we can hope to do,\n>>         is to\n>>         minimize the amount of gratuitous incompatibility and reduce the\n>>         amount of outright flawed constructions (so if there are choices\n>>         which\n>>         must be made, they're at least choices among relatively good\n>>         options).\n>>\n>>         ------------------------------------------------------------------------------\n>>         Dive into the World of Parallel Programming The Go Parallel\n>>         Website, sponsored\n>>         by Intel and developed in partnership with Slashdot Media, is\n>>         your hub for all\n>>         things parallel software development, from weekly thought\n>>         leadership blogs to\n>>         news, videos, case studies, tutorials and more. Take a look and\n>>         join the\n>>         conversation now. http://goparallel.sourceforge.net/\n>>         _______________________________________________\n>>         Bitcoin-development mailing list\n>>         Bitcoin-development at lists.sourceforge.net\n>>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>     ------------------------------------------------------------------------------\n>>     Dive into the World of Parallel Programming The Go Parallel Website,\n>>     sponsored\n>>     by Intel and developed in partnership with Slashdot Media, is your\n>>     hub for all\n>>     things parallel software development, from weekly thought leadership\n>>     blogs to\n>>     news, videos, case studies, tutorials and more. Take a look and join the\n>>     conversation now. http://goparallel.sourceforge.net/\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub for all\n>> things parallel software development, from weekly thought leadership blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the \n>> conversation now. http://goparallel.sourceforge.net/\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>"
            },
            {
                "author": "devrandom",
                "date": "2015-03-18T02:06:09",
                "message_text_only": "On 2015-03-12 03:28 AM, Andreas Schildbach wrote:\n> That doesn't work for mobile wallets, because we need to consider the\n> offline case. To fix this, we'd need to extend BIP70 to tell the\n> merchant where to forward the half-signed transaction to. Then again I'm\n> not sure if we want that, for privacy reasons. In any case, practical\n\nTelling the merchant who my security provider is not that different from\na privacy point of view from using their wifi.  In both cases they would\nsee us connect to the provider.  The connection / payload would be\nencrypted of course.\n\nIn the mean time, we can un-multisig some of the coins for daily use, up\nto a defined velocity limit.  (credit to Mike Hearn's for this idea)\n\n> multisig is still a looong way off.\n\nLet's bring it closer.  p2sh.info shows an exponential increase,\ncurrently at 8%.  At this rate, the majority of the coins will be\nmultisig near the end of the year.\n\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-12T10:41:03",
                "message_text_only": "For reasonably skilled users your points are valid, but I'm sure you\nalso \u2013 like me \u2013 encountered the kind of user who has absolutely no clue\nbut thinks he understands. S/he will ignore warnings and run into\ntroubles. This generates a huge amount of support cases and likely tears\nabout lost coins.\n\nThe simple fact that someone elses broken RNG implementation/wrapper\ncould compromise the security of my software frightens me.\n\n\nOn 03/11/2015 08:04 PM, Jim wrote:\n> The wallet words system isn't perfect for sure but it does help the user in two main ways:\n> 1) Assuming wallet devs ensure forward compatibility for _their_ wallet the user knows they can recover their bitcoins using the same wallet software in case of a Bad Thing Happening.\n> 2) To an imperfect degree, they can transfer/ recover their bitcoins that are stored in Wallet X into Wallet Y. We need to give them guidance on how to do this.\n> \n> I think it is up to each wallet team to explain to their users clearly how they can do this in their help. It's only good manners to show your guests where the fire exits are.\n> \n> It can be a simple help page saying:\n> \"If you want to transfer your bitcoin out of MultiBit HD to Lighthouse, do this, this and this.\n> If you want to use the Trezor wallet you created in MultiBit HD on myTrezor.com, do this, this and this.\"\n> \n> That way users have clear instructions on how to recover their bitcoins.\n> Users don't care about BIP this or BIP that but they REALLY DO CARE about keeping their bitcoins.\n>"
            },
            {
                "author": "slush",
                "date": "2015-03-12T03:43:47",
                "message_text_only": "On Wed, Mar 11, 2015 at 6:14 PM, Mike Hearn <mike at plan99.net> wrote:\n\n>\n>    - Electrum v2 with a version number but no date\n>    - myTREZOR with no version and no date and BIP44 key derivation. Some\n>    seeds I believe are now being generated with 24 words instead of 12.\n>    - MultiBit HD with no version and a date in a custom form that creates\n>    non-date-like codes you are expected to write down. I think BIP32 and BIP44\n>    are both supported (sorta).\n>    - GreenAddress with no version, no date and BIP32\n>    - Other bitcoinj based wallets, with no version and a date written\n>    down in normal human form, BIP32 only.\n>\n> To my knowledge, myTREZOR, Multibit HD and GreenAddress uses BIP39, just\ndifferent scheme for key derivation (myTREZOR uses full BIP44, Multibit HD\nuses BIP44 with first account only and GreenAddress uses another scheme\nbecause it's multisig only wallet).\n\nI disagree with the need of some version \"magic flags\" or creation date\nstored in the mnemnonic, for those reasons:\n\na) If we fail in the way how mnemonic algo is defined, then some magic,\nextra version flag won't save our asses, because we'll fail in meaning of\nits meaning. Then it will be completely useless, as implementations cannot\nrely on it. I know Thomas was sound proponent of this solution, but he was\nunable to give any reasonable rules about who/how define meaning of version\nflag.\n\nb) \"Creation date\" is just a short-term hack. Considering that mnemonic\nwords are kind of cold storage (longterm storage), it *really* does not\nmake much difference in 2020, if your wallet has been created in 02/2014 or\n10/2016. If there's performance issue with scanning of the blockchain,\ncreation date don't save our asses. We need to find another solution, and\nas a bonus, we don't need users to know some weird numbers on top of\nmnemonic itself.\n\n> From my interpretation of BIP39, wordlists DO NOT REQUIRE to be fixed\nbetween wallet providers. There is some recommendations regarding the\nwordlists to help with things such as predictive text, so mobile apps can\neasily predict the word being typed in after a few chars etc.\n\nExactly! After some community feedback, we changed BIP39 algo to be one-way\nonly, which means you can use *any* wordlist to create the mnemonic, and\nany other implementation can derive BIP32 root node even without knowing\nthat particular wordlist. Namely this has been changed because of\nconstructive criticism of ThomasV, and from discussion on the mailing list\nI had a feeling that we've found a consensus. I was *very* surprised that\nElectrum 2.0 started to use yet another algo \"just because\".\n\nShortly said, I think BIP39 does perfect job and there's no need to use\nanything else.\n\nCheers,\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/318ad491/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-12T16:47:56",
                "message_text_only": ">\n> b) \"Creation date\" is just a short-term hack.\n>\n\nI agree, but we need things to be easy in the short term as well as the\nlong term :)\n\nThe long term solution is clearly to have the 12 word seed be an encryption\nkey for a wallet backup with all associated metadata. We're heading in that\ndirection one step at a time. Unfortunately it will take time for wallets\nto start working this way, and all the pieces to fall into place. Restoring\nfrom the block chain will be a semi regular operation for users until then.\n\nWRT version number I have no real strong feelings about this. But\nrepresenting short pieces of binary data as words is so convenient, it\nseems likely that it could be similar to addresses: people find other uses\nfor this mechanism beyond just storing a raw private key. Bitcoin addresses\nhave versions and that's proven to be useful several times, even though in\ntheory an address is \"just\" a hash of a pubkey.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/dfc7f38e/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2015-03-12T17:20:53",
                "message_text_only": "When Jim and I were selecting which combination of HD wallet structures to\nsupport we noted the following:\n\n* BIP39 is a good standard list to select from that mandates words that do\nnot look similar to each other, a certain spelling (no English US/UK\nconfusion) and possible foreign language variants provided by experts later\n* BIP32 (m/0h/0/0) and BIP44 (m/44h/0h/0h/0/0) allow for maximum\ncompatibility with other wallets\n* including a date in the \"wallet words\" themselves is open to spoofing\nsince the generator cannot be sure the date is correct (local time drift,\nprovided externally by untrusted third party etc)\n* a timestamp as optional external metadata is useful to reduce sync times\nin SPV\n* our experience verified that users will very often enter a timestamp\nincorrectly (locale, fat fingers, bad memory etc) so we opted for \"number\nof days elapsed since Bitcoin genesis block with a modulo 97 checksum\nappended\" (e.g. 1850/07) to mitigate this\n* if a user has no timestamp then blank is the only alternative (no\nguessing) which is interpreted as \"earliest possible BIP32 date\"\n* if restoring the user has to select where the \"wallet words\" came from\n(e.g. MultiBit HD, Trezor, Mycelium etc)\n\nUsers will naturally assume that they can type their \"wallet words\" (a more\nmainstream-friendly term than \"seed phrase\") into any wallet and with a bit\nof fiddling about get their bitcoins back. As wallet developers it is\nwithin our capability to make that happen and I think we're quite close\nalready.\n\nOn 12 March 2015 at 16:47, Mike Hearn <mike at plan99.net> wrote:\n\n> b) \"Creation date\" is just a short-term hack.\n>>\n>\n> I agree, but we need things to be easy in the short term as well as the\n> long term :)\n>\n> The long term solution is clearly to have the 12 word seed be an\n> encryption key for a wallet backup with all associated metadata. We're\n> heading in that direction one step at a time. Unfortunately it will take\n> time for wallets to start working this way, and all the pieces to fall into\n> place. Restoring from the block chain will be a semi regular operation for\n> users until then.\n>\n> WRT version number I have no real strong feelings about this. But\n> representing short pieces of binary data as words is so convenient, it\n> seems likely that it could be similar to addresses: people find other uses\n> for this mechanism beyond just storing a raw private key. Bitcoin addresses\n> have versions and that's proven to be useful several times, even though in\n> theory an address is \"just\" a hash of a pubkey.\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nBitcoin Solutions Ltd provides bespoke software and consultancy. Find us at\nbitcoin-solutions.co.uk.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/cb5f3188/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2015-03-12T17:42:57",
                "message_text_only": "When Jim and I were selecting which combination of HD wallet structures to\nsupport we noted the following:\n\n* BIP39 is a good standard list to select from that mandates words that do\nnot look similar to each other, a certain spelling (no English US/UK\nconfusion) and possible foreign language variants provided by experts later\n* BIP32 (m/0h/0/0) and BIP44 (m/44h/0h/0h/0/0) allow for maximum\ncompatibility with other wallets\n* including a date in the \"wallet words\" themselves is open to spoofing\nsince the generator cannot be sure the date is correct (local time drift,\nprovided externally by untrusted third party etc)\n* a timestamp as optional external metadata is useful to reduce sync times\nin SPV\n* our experience verified that users will very often enter a timestamp\nincorrectly (locale, fat fingers, bad memory etc) so we opted for \"number\nof days elapsed since Bitcoin genesis block with a modulo 97 checksum\nappended\" (e.g. 1850/07) to mitigate this\n* if a user has no timestamp then blank is the only alternative (no\nguessing) which is interpreted as \"earliest possible BIP32 date\"\n* if restoring the user has to select where the \"wallet words\" came from\n(e.g. MultiBit HD, Trezor, Mycelium etc)\n\nUsers will naturally assume that they can type their \"wallet words\" (a more\nmainstream-friendly term than \"seed phrase\") into any wallet and with a bit\nof fiddling about get their bitcoins back. As wallet developers it is\nwithin our capability to make that happen and I think we're quite close\nalready.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/4e18a33f/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-03-12T18:27:24",
                "message_text_only": "Den 12 mar 2015 17:48 skrev \"Mike Hearn\" <mike at plan99.net>:\n>>\n>> b) \"Creation date\" is just a short-term hack.\n>\n>\n> I agree, but we need things to be easy in the short term as well as the\nlong term :)\n>\n> The long term solution is clearly to have the 12 word seed be an\nencryption key for a wallet backup with all associated metadata. We're\nheading in that direction one step at a time. Unfortunately it will take\ntime for wallets to start working this way, and all the pieces to fall into\nplace. Restoring from the block chain will be a semi regular operation for\nusers until then.\n\nThis have been mentioned a few times before, and what I think is necessary\nis to create a common file format that can be interpreted by a library\nwhich all wallets can use. I see it as similar as the work to create\nlibconsensus for parsing the blockchain.\n\nWe need something extensible that can describe how to derive all addresses\nused by the user. What HD branches to derive and how, with block numbers\n(or bloom filters of block hashes or similar) to note where all previously\nknown transactions related to the wallet have occurred, and the last known\nblock (so only new blocks need to be scanned).\n\nA way to describe one HD tree as a multisignature wallet tied to a hardware\nwallet if you have that (could include serial number or MAC of the device\nfor simple identification by the wallet client). A way to describe another\nset of addresses as using a custom extension. A way to denote one private\nkey as being used for stealth addresses together with details for how to\nidentify the transactions (prefix, mailbox to look in, etc). Labels for\ntransactions. P2SH script templates so those addresses can be recovered. A\nway to describe Copay style multisignature wallets and what server to use\nfor coordinating with the other coowners. A way to describe threshold\ncrypto group signature wallets and how to coordinate. Computer parsable\ndescriptions of HD branches as change addresses, as being used for\nreceiving payments in merchant payment systems, etc... Also, you should\nreally be talking to people like accountants and auditors to see what\nfeatures they'd like to see when it comes to things like how company\nwallets could have rules defined for how to use the various HD branches.\n\nAnd so on... I think you get my point by now.\n\nThe basic idea is that the wallet uses the library to parse the wallet file\nand tells the user which sections it understands (can't expect all wallets\nto handle custom extensions or stealth addresses, etc), then proceeds to\nscan the blockchain for those addresses. Then the user also won't be\nsurprised that not all funds are found and won't think they're lost.\n\nI think it should be referred to as an import/export format, more than as a\nbackup format.\n\nYou always want the most recent metadata the wallet of origin can provide\nwhen importing, to reduce unnecessary extra work. You don't want really old\nbackup files. If people add new seeds and various new extensions that can't\nbe automatically recovered from old wallet backups, they need new backups.\nYou might as well use the wallet's own internal formats for backup, as the\nwallet developer might better know how to optimize for the use cases he\nhave designed for. But at the same time we should ask wallet developers to\noffer conversion tools to generate export format files from custom wallet\ndata files.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/8331a17a/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-12T18:51:14",
                "message_text_only": "On 03/12/2015 07:27 PM, Natanael wrote:\n> \n> Den 12 mar 2015 17:48 skrev \"Mike Hearn\" <mike at plan99.net\n> <mailto:mike at plan99.net>>:\n>>>\n>>> b) \"Creation date\" is just a short-term hack.\n>>\n>>\n>> I agree, but we need things to be easy in the short term as well as\n> the long term :) \n>>\n>> The long term solution is clearly to have the 12 word seed be an\n> encryption key for a wallet backup with all associated metadata. We're\n> heading in that direction one step at a time. Unfortunately it will take\n> time for wallets to start working this way, and all the pieces to fall\n> into place. Restoring from the block chain will be a semi regular\n> operation for users until then.\n> \n> This have been mentioned a few times before, and what I think is\n> necessary is to create a common file format that can be interpreted by a\n> library which all wallets can use. I see it as similar as the work to\n> create libconsensus for parsing the blockchain.\n\n\nI'm afraid this will never fly. Wallets are just too different and\nthat's a good thing! For example, by design choice Bitcoin Wallet and\nbitcoinj doesn't support multiple accounts. How would it ever import\nwallets from MultiBit or Mycelium?\n\nBitcoinj-based wallets could probably share the bitcoinj protobuf wallet\nformat (or whatever format we will be at the time of the \"merge\" \u2013 we\nalready have tons of requirements piling up!). This would mean bitcoinj\nis the \"consensus library equivalent\" you were mentioning."
            },
            {
                "author": "Natanael",
                "date": "2015-03-12T19:14:34",
                "message_text_only": "Den 12 mar 2015 19:52 skrev \"Andreas Schildbach\" <andreas at schildbach.de>:\n>\n> I'm afraid this will never fly. Wallets are just too different and\n> that's a good thing! For example, by design choice Bitcoin Wallet and\n> bitcoinj doesn't support multiple accounts. How would it ever import\n> wallets from MultiBit or Mycelium?\n\nI think I covered that with the \"importing wallet says what sections it\nsupports\" part. Then you'd only ask for the library to give you the\naddresses from the first branch in the main HD wallet. The user would be\ntold that you by design can't manage the other parts. The user would be\nalerted and get the recommendation to send the funds over manually if they\nwant to switch their wallet. The user might however just want to export\nthat one single branch if he's a \"power user\", so he would proceed to use\nit that way.\n\nAt export, I recommend the wallet will tell the user what extensions and\nstandards are in use (and which are necessary to recover how much of their\nfunds in the target wallet). The user would be asked to confirm that the\ntarget wallet client supports these. The user should be given the option to\nhand the list of supported functionality in the target wallet (like a list\nof BIP numbers?), and tell the wallet to move the funds around so that the\ntarget wallet can successfully import everything and recover all funds.\n\nActually, thinking about it I think what we really need first is a standard\nsynchronization / transition protocol. Right now we don't have more than\nthe address label syncing plugin for Electrum. We need something for\nwallets to synchronize state, with the option for having one wallet tell\nthe other how to send over all funds (for when they use completely\ndifferent standards for managing funds). As the most simple option, the\ntarget wallet would provide a list of addresses to the sending wallet when\nyou switch (this would satisfy Bryan's request).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/75ba39b6/attachment.html>"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T02:16:38",
                "message_text_only": "That's disappointing the Electrum 2.0 doesn't use BIP39.\n>From my interpretation of BIP39, wordlists DO NOT\u00a0REQUIRE to be fixed between wallet providers.\u00a0There is some recommendations regarding the wordlists to help with things such as predictive text, so mobile apps can easily predict the word being typed in after a few chars etc. This would seem to be the reasoning for the reference word lists. Now there is nothing stopping one from implementing a wordlist of say profanities or star wars terms or whatever and still accepting a mnemonic from another provider. Remember if you have a mnemonic from a different wordlist, simply Normalization of the words occurs and then the hashing the mnemonic\u00a0to derive the seed bytes. It is not really a restriction at all! BIP39 was designed such that the mnemonic generation is decoupled from seed derivation, just like what you are saying Electrum 2.0 can do! The wordlist is only needed for mnemonic generation NOT seed derivation, so Electrum DOES NOT need a copy of the BIP39 word lists to generate the seed from the phrase, there is really not much reason for Electrum not to accept BIP39 mnemonics at the moment! it requires bugger all code! Here is my seed generation code\n\n\n\n//literally this is the bulk of the decoupled seed generation code, easy.byte[] salt = Utilities.MergeByteArrays(UTF8Encoding.UTF8.GetBytes(cSaltHeader),_passphraseBytes);return Rfc2898_pbkdf2_hmacsha512.PBKDF2(UTF8Encoding.UTF8.GetBytes(Utilities.NormaliseStringNfkd(MnemonicSentence)), salt);\n\nChanging the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\nVersion is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\nSo most of what you are suggesting as problems are not.\nAs for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\nAlso then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\nThomas V:\n\"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\nof weeks.\n\nYou are correct, a BIP39 seed phrase will not work in Electrum, and vice\nversa. It is indeed unfortunate. However, I believe BIP39 should not be\nfollowed, because it reproduces two mistakes I did when I designed the\nolder Electrum seed system. Let me explain.\n\nThe first problem I have with BIP39 is that the seed phrase does not\ninclude a version number.\n\nWallet development is still in an exploratory phase, and we should\nexpect even more innovation in this domain. In this context, it is\nunwise to make decisions that prevent future innovation.\n\nHowever, when we give a seed phrase to users, we have a moral obligation\nto keep supporting this seed phrase in future versions. We cannot simply\nannounce to Electrum users that their old seed phrase is not supported\nanymore, because we created a new version of the software that uses a\ndifferent derivation. This could lead to financial losses for users who\nare unaware of these technicalities. Well, at least, that is how I feel\nabout it.\n\nBIP39 and Electrum v2 have a very different ways of handling future\ninnovation. Electrum v2 seed phrases include an explicit version number,\nthat indicates how the wallet addresses should be derived. In contrast,\nBIP39 seed phrases do not include a version number at all. BIP39 is\nmeant to be combined with BIP43, which stipulates that the wallet\nstructure should depend on the BIP32 derivation path used for the wallet\n(although BIP43 is not followed by all BIP39 compatible wallets). Thus,\ninnovation in BIP43 is allowed only within the framework of BIP32. In\naddition, having to explore the branches of the BIP32 tree in order to\ndetermine the type of wallet attached to a seed might be somewhat\ninefficient.\n\nThe second problem I see with BIP39 is that it requires a fixed\nwordlist. Of course, this forbids innovation in the wordlist itself, but\nthat's not the main problem. When you write a new standard, it is\nimportant to keep this standard minimal, given the goal you want to\nachieve. I believe BIP39 could (and should) have been written without\nincluding the wordlist in the standard.\n\nThere are two ways to derive a master key from a mnemonic phrase:\n\u00a01. A bidirectional mapping between words and numbers, as in old\nElectrum versions. Pros: bidirectional means that you can do Shamir\nsecret sharing of your seed. Cons: It requires a fixed wordlist.\n\u00a02. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\nrequired. Cons: the mapping isn't bidirectional.\n\nElectrum v1 uses (1). Electrum v2 uses (2).\n\nEarly versions of BIP39 used (1), and later they switched to (2).\nHowever, BIP39 uses (2) only in order to derive the wallet keys, not for\nits checksum. The BIP39 checksum uses (1), and it does requires a fixed\nwordlist. This is just plainly inconsistent. As a result, you have\nneither wordlist flexibility, nor Shamir secret sharing.\n\nHaving a fixed wordlist is very unfortunate. First, it means that BIP39\nwill probably never leave the 'draft' stage, until all languages of the\nworld have been added. Second, once you add a wordlist for a new\nlanguage, you cannot change it anymore, because it will break existing\nseed phrases; therefore you have to be extremely careful in the way you\ndesign these wordlists. Third, languages often have words in common.\nWhen you add a new language to the list, you should not use words\nalready used by existing wordlists, in order to ensure that the language\ncan be detected. It leads to a first come first served situation, that\nmight not be sustainable in the future.\n\nIn order to support the old Electrum v1 seeds, all future versions of\nElectrum will have to include the old wordlist. In addition, when\ngenerating new seed phrases, Electrum now has to avoid collisions with\nold seed phrases, because the old ones did not have a version number.\nThis is painful enough, I will not repeat the same errors twice.\n\nElectrum v2 derives both its private keys and its checksum/version\nnumber using a hash of the seed phrase. This means that wordlists can be\nadded and modified in the future, without breaking existing seed\nphrases. It also means that it will be very easy for other wallets to\nsupport Electrum seedphrases: it requires about 20 lines of code, and no\nwordlist is required.\"\n\n\nThomas\n\n\nLe 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> Congrats Thomas! Glad to see Electrum 2 finally launch.\n> \n> \n>> * New seed derivation method (not compatible with BIP39).\n> \n> \n> Does this mean a \"12 words\" wallet created by Electrum won't work if\n> imported into some other wallet that supports BIP39? Vice versa? This seems\n> unfortunate. I guess if seeds are being represented with 12 words\n> consistently, people will expect them to work everywhere.\n> \n\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the \nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nBitcoin-development --\n| \u00a0 |\n| \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n|  |\n| View on lists.sourceforge.net | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0\n\n \n   \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/8f2ef0c6/attachment.html>"
            },
            {
                "author": "Neill Miller",
                "date": "2015-03-12T03:59:45",
                "message_text_only": "On Thu, Mar 12, 2015 at 02:16:38AM +0000, Thy Shizzle wrote:\n> That's disappointing the Electrum 2.0 doesn't use BIP39.\n\nAgreed, but I don't know the full background on this.\n\n> Changing the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\n\nThat's true for generating new mnemonics (i.e. same entropy can\ngenerate any combinations of words), but not for converting a mnemonic\nto a seed (i.e. a specific wordlist/passphrase should always generate\nthe same seed).  I agree that it's true that a static wordlist is\nrequired once people have started using BIP39 for anything real and\nchanging the word lists will invalidate any existing mnemonics (unless\nyour 'new' wordlist simply substitutes one word for another and the\nindex mapping is made public ... which means it's not really an\narbitrary word list).\n\n> Version is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\n> So most of what you are suggesting as problems are not.\n\nI don't see how this can work given the BIP39 spec as it is today\n(there's simply no room for a version in the bits).  I do think\nversioning would be nice, but as of now, I'm in the camp that thinks\ncomplete wallet interoperability is a bit of a myth -- so long as you\ncan fundamentally move into/out of wallets at will.\n\n-Neill.\n\n> As for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\n> Also then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\n> Thomas V:\n> \"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\n> of weeks.\n> \n> You are correct, a BIP39 seed phrase will not work in Electrum, and vice\n> versa. It is indeed unfortunate. However, I believe BIP39 should not be\n> followed, because it reproduces two mistakes I did when I designed the\n> older Electrum seed system. Let me explain.\n> \n> The first problem I have with BIP39 is that the seed phrase does not\n> include a version number.\n> \n> Wallet development is still in an exploratory phase, and we should\n> expect even more innovation in this domain. In this context, it is\n> unwise to make decisions that prevent future innovation.\n> \n> However, when we give a seed phrase to users, we have a moral obligation\n> to keep supporting this seed phrase in future versions. We cannot simply\n> announce to Electrum users that their old seed phrase is not supported\n> anymore, because we created a new version of the software that uses a\n> different derivation. This could lead to financial losses for users who\n> are unaware of these technicalities. Well, at least, that is how I feel\n> about it.\n> \n> BIP39 and Electrum v2 have a very different ways of handling future\n> innovation. Electrum v2 seed phrases include an explicit version number,\n> that indicates how the wallet addresses should be derived. In contrast,\n> BIP39 seed phrases do not include a version number at all. BIP39 is\n> meant to be combined with BIP43, which stipulates that the wallet\n> structure should depend on the BIP32 derivation path used for the wallet\n> (although BIP43 is not followed by all BIP39 compatible wallets). Thus,\n> innovation in BIP43 is allowed only within the framework of BIP32. In\n> addition, having to explore the branches of the BIP32 tree in order to\n> determine the type of wallet attached to a seed might be somewhat\n> inefficient.\n> \n> The second problem I see with BIP39 is that it requires a fixed\n> wordlist. Of course, this forbids innovation in the wordlist itself, but\n> that's not the main problem. When you write a new standard, it is\n> important to keep this standard minimal, given the goal you want to\n> achieve. I believe BIP39 could (and should) have been written without\n> including the wordlist in the standard.\n> \n> There are two ways to derive a master key from a mnemonic phrase:\n> \u00a01. A bidirectional mapping between words and numbers, as in old\n> Electrum versions. Pros: bidirectional means that you can do Shamir\n> secret sharing of your seed. Cons: It requires a fixed wordlist.\n> \u00a02. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\n> required. Cons: the mapping isn't bidirectional.\n> \n> Electrum v1 uses (1). Electrum v2 uses (2).\n> \n> Early versions of BIP39 used (1), and later they switched to (2).\n> However, BIP39 uses (2) only in order to derive the wallet keys, not for\n> its checksum. The BIP39 checksum uses (1), and it does requires a fixed\n> wordlist. This is just plainly inconsistent. As a result, you have\n> neither wordlist flexibility, nor Shamir secret sharing.\n> \n> Having a fixed wordlist is very unfortunate. First, it means that BIP39\n> will probably never leave the 'draft' stage, until all languages of the\n> world have been added. Second, once you add a wordlist for a new\n> language, you cannot change it anymore, because it will break existing\n> seed phrases; therefore you have to be extremely careful in the way you\n> design these wordlists. Third, languages often have words in common.\n> When you add a new language to the list, you should not use words\n> already used by existing wordlists, in order to ensure that the language\n> can be detected. It leads to a first come first served situation, that\n> might not be sustainable in the future.\n> \n> In order to support the old Electrum v1 seeds, all future versions of\n> Electrum will have to include the old wordlist. In addition, when\n> generating new seed phrases, Electrum now has to avoid collisions with\n> old seed phrases, because the old ones did not have a version number.\n> This is painful enough, I will not repeat the same errors twice.\n> \n> Electrum v2 derives both its private keys and its checksum/version\n> number using a hash of the seed phrase. This means that wordlists can be\n> added and modified in the future, without breaking existing seed\n> phrases. It also means that it will be very easy for other wallets to\n> support Electrum seedphrases: it requires about 20 lines of code, and no\n> wordlist is required.\"\n> \n> \n> Thomas\n> \n> \n> Le 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> > Congrats Thomas! Glad to see Electrum 2 finally launch.\n> > \n> > \n> >> * New seed derivation method (not compatible with BIP39).\n> > \n> > \n> > Does this mean a \"12 words\" wallet created by Electrum won't work if\n> > imported into some other wallet that supports BIP39? Vice versa? This seems\n> > unfortunate. I guess if seeds are being represented with 12 words\n> > consistently, people will expect them to work everywhere.\n> > \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> Bitcoin-development --\n> | \u00a0 |\n> | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n> | Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n> |  |\n> | View on lists.sourceforge.net | Preview by Yahoo |\n> |  |\n> | \u00a0 |\n> \n>  \u00a0\n> \n>  \n>    \n\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "devrandom",
                "date": "2015-03-12T02:26:45",
                "message_text_only": "On 2015-03-11 06:21 PM, Thy Shizzle wrote:\n> Hmmmm I don't think it's fair to say that there has been a failure to\n> standardise. From what I read earlier among the wallets, mostly it came\n> down to if a version was noted and the date. Assuming no date is\n> provided, it just means you are scanning the block chain from day 0 for\n> transactions right? Hardly a big deal as you will still recover funds right?\n\nUnfortunately there's more incompatibility than just the date issue:\n\n* seed: some follow BIP39, and some roll their own\n* HD structure: some follow BIP44, some BIP32 derivation, and some roll\ntheir own\n\nSo actually very few wallets are seed-compatible, even ignoring the date\nquestion.\n\n> \n> Version right now is irrelevant as there is only one version of BIP39\n> currently, probably this will change as 2048 iterations of HMACSHA512\n> will likely need to be up scaled in the future, I thought about adding\n> one extra word into the mnemonic to signify version, so if you have a 12\n> word mnemonic then you have 12 words + 1 word version. Version 1 has no\n> extra word, version 2 uses the first word on the list, version 3 uses\n> the second word on the wordlist, so on and so forth. Least that's what I\n> was thinking of doing if I ever had to record a version, won't effect\n> anything because entropy increases in blocks of 3 words so one extra\n> word can simply be thrown on the end.\n\nThat's a reasonable solution.\n\n> \n> So in summary I feel that date can be handled by assuming day 0, and\n> version is not an issue yet but may become one and probably it is a good\n> idea to think about standardising a version into BIP39, I have\n> provided a seed idea for discussion.\n> \n> I don't think it is quite the doom and gloom I'm reading :)\n> \n> \n> devrandom:\n> \"I'd like to offer that the best practice for the shared wallet use case\n> should be multi-device multi-sig.  The mobile has a key, the desktop has\n> a key and a third-party security oracle has a third key.  The oracle\n> would have different security thresholds for countersigning the mobile.\n> \n> This way you can have the same overall wallet on all devices, but\n> different security profiles on different keys.\n> \n> That said, I do agree that mnemonic phrases should be portable, and find\n> it unfortunate that the ecosystem is failing to standardize on phrase\n> handling.\"\n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T02:38:29",
                "message_text_only": "Right you are!\nI saw Thomas's email about Electrum 2.0 not supporting BIP39.\nIt seems he had the idea that the wordlist was a strict requirement yet it is not, it is unfortunate that Electrum did not go the route of BIP39. The wordlist is irrelevant and merely used to help build mnemonics.\nAlso as I've shown, you can work a version into it, I was going to actually propose it to the BIP39 authors but didn't think it was an issue.\nI think BIP39 is fantastic.\nI think Electrum 2.0 (And everyone)\u00a0should use BIP39\u00a0 On 2015-03-11 06:21 PM, Thy Shizzle wrote:\n> Hmmmm I don't think it's fair to say that there has been a failure to\n> standardise. From what I read earlier among the wallets, mostly it came\n> down to if a version was noted and the date. Assuming no date is\n> provided, it just means you are scanning the block chain from day 0 for\n> transactions right? Hardly a big deal as you will still recover funds right?\n\nUnfortunately there's more incompatibility than just the date issue:\n\n* seed: some follow BIP39, and some roll their own\n* HD structure: some follow BIP44, some BIP32 derivation, and some roll\ntheir own\n\nSo actually very few wallets are seed-compatible, even ignoring the date\nquestion.\n\n> \n> Version right now is irrelevant as there is only one version of BIP39\n> currently, probably this will change as 2048 iterations of HMACSHA512\n> will likely need to be up scaled in the future, I thought about adding\n> one extra word into the mnemonic to signify version, so if you have a 12\n> word mnemonic then you have 12 words + 1 word version. Version 1 has no\n> extra word, version 2 uses the first word on the list, version 3 uses\n> the second word on the wordlist, so on and so forth. Least that's what I\n> was thinking of doing if I ever had to record a version, won't effect\n> anything because entropy increases in blocks of 3 words so one extra\n> word can simply be thrown on the end.\n\nThat's a reasonable solution.\n\n> \n> So in summary I feel that date can be handled by assuming day 0, and\n> version is not an issue yet but may become one and probably it is a good\n> idea to think about standardising a version into BIP39, I have\n> provided a seed idea for discussion.\n> \n> I don't think it is quite the doom and gloom I'm reading :)\n> \n> \n> devrandom:\n> \"I'd like to offer that the best practice for the shared wallet use case\n> should be multi-device multi-sig.\u00a0 The mobile has a key, the desktop has\n> a key and a third-party security oracle has a third key.\u00a0 The oracle\n> would have different security thresholds for countersigning the mobile.\n> \n> This way you can have the same overall wallet on all devices, but\n> different security profiles on different keys.\n> \n> That said, I do agree that mnemonic phrases should be portable, and find\n> it unfortunate that the ecosystem is failing to standardize on phrase\n> handling.\"\n\n-- \ndevrandom / Miron\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/d1164461/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-03-12T10:43:57",
                "message_text_only": "Thy, your message threading is broken. Can you make sure your mail\nprogram uses the correct message ID when replying?"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T04:21:59",
                "message_text_only": "\"I agree that it's true that a static wordlist is\n required once people have started using BIP39 for anything real and\n changing the word lists will invalidate any existing mnemonics\"\n^ This is incorrect I think Neill, the reason is that the only thing that happens when you change the wordlist is that entropy points to different words. But remember, entropy is disposed. Yes in my code I allow for the keeping of entropy etc, it also lets me \"hot swap\" between different language wordlists etc but in real world implementation the entropy is forgotten and not stored. So changing the wordlist merely allows new mnemonic phrases to be generated but it has a nil impact on previously generated mnemonics UNLESS you are trying to rebuild from entropy but you wouldn't do that. You would be rebuilding from the Mnemonic in real world scenario. You really can have a word list of total rubbish in BIP39 as long as it is 2048 words long that is all! If you input the mnemonic made out of rubbish words so for e.g \"uyuy jkjasd sdsd sdsdd yuuyu sdsds iooioi sdasds uyuyuy sdsdsd tyyty rwetrtr\" and no matter what BIP39 implementation you put it in, it will always generate the same seed bytes thus allowing for complete and universal seed derivation without any reliance on word list. The word list is merely to generate a mnemonic, after that it has no role in seed generation so you can change it at anytime and it will never effect future mnemonics.\n\nOn Thu, Mar 12, 2015 at 02:16:38AM +0000, Thy Shizzle wrote:\n> That's disappointing the Electrum 2.0 doesn't use BIP39.\n\nAgreed, but I don't know the full background on this.\n\n> Changing the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\n\nThat's true for generating new mnemonics (i.e. same entropy can\ngenerate any combinations of words), but not for converting a mnemonic\nto a seed (i.e. a specific wordlist/passphrase should always generate\nthe same seed).\u00a0 I agree that it's true that a static wordlist is\nrequired once people have started using BIP39 for anything real and\nchanging the word lists will invalidate any existing mnemonics (unless\nyour 'new' wordlist simply substitutes one word for another and the\nindex mapping is made public ... which means it's not really an\narbitrary word list).\n\n> Version is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\n> So most of what you are suggesting as problems are not.\n\nI don't see how this can work given the BIP39 spec as it is today\n(there's simply no room for a version in the bits).\u00a0 I do think\nversioning would be nice, but as of now, I'm in the camp that thinks\ncomplete wallet interoperability is a bit of a myth -- so long as you\ncan fundamentally move into/out of wallets at will.\n\n-Neill.\n\n> As for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\n> Also then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\n> Thomas V:\n> \"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\n> of weeks.\n> \n> You are correct, a BIP39 seed phrase will not work in Electrum, and vice\n> versa. It is indeed unfortunate. However, I believe BIP39 should not be\n> followed, because it reproduces two mistakes I did when I designed the\n> older Electrum seed system. Let me explain.\n> \n> The first problem I have with BIP39 is that the seed phrase does not\n> include a version number.\n> \n> Wallet development is still in an exploratory phase, and we should\n> expect even more innovation in this domain. In this context, it is\n> unwise to make decisions that prevent future innovation.\n> \n> However, when we give a seed phrase to users, we have a moral obligation\n> to keep supporting this seed phrase in future versions. We cannot simply\n> announce to Electrum users that their old seed phrase is not supported\n> anymore, because we created a new version of the software that uses a\n> different derivation. This could lead to financial losses for users who\n> are unaware of these technicalities. Well, at least, that is how I feel\n> about it.\n> \n> BIP39 and Electrum v2 have a very different ways of handling future\n> innovation. Electrum v2 seed phrases include an explicit version number,\n> that indicates how the wallet addresses should be derived. In contrast,\n> BIP39 seed phrases do not include a version number at all. BIP39 is\n> meant to be combined with BIP43, which stipulates that the wallet\n> structure should depend on the BIP32 derivation path used for the wallet\n> (although BIP43 is not followed by all BIP39 compatible wallets). Thus,\n> innovation in BIP43 is allowed only within the framework of BIP32. In\n> addition, having to explore the branches of the BIP32 tree in order to\n> determine the type of wallet attached to a seed might be somewhat\n> inefficient.\n> \n> The second problem I see with BIP39 is that it requires a fixed\n> wordlist. Of course, this forbids innovation in the wordlist itself, but\n> that's not the main problem. When you write a new standard, it is\n> important to keep this standard minimal, given the goal you want to\n> achieve. I believe BIP39 could (and should) have been written without\n> including the wordlist in the standard.\n> \n> There are two ways to derive a master key from a mnemonic phrase:\n> \u00a01. A bidirectional mapping between words and numbers, as in old\n> Electrum versions. Pros: bidirectional means that you can do Shamir\n> secret sharing of your seed. Cons: It requires a fixed wordlist.\n> \u00a02. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\n> required. Cons: the mapping isn't bidirectional.\n> \n> Electrum v1 uses (1). Electrum v2 uses (2).\n> \n> Early versions of BIP39 used (1), and later they switched to (2).\n> However, BIP39 uses (2) only in order to derive the wallet keys, not for\n> its checksum. The BIP39 checksum uses (1), and it does requires a fixed\n> wordlist. This is just plainly inconsistent. As a result, you have\n> neither wordlist flexibility, nor Shamir secret sharing.\n> \n> Having a fixed wordlist is very unfortunate. First, it means that BIP39\n> will probably never leave the 'draft' stage, until all languages of the\n> world have been added. Second, once you add a wordlist for a new\n> language, you cannot change it anymore, because it will break existing\n> seed phrases; therefore you have to be extremely careful in the way you\n> design these wordlists. Third, languages often have words in common.\n> When you add a new language to the list, you should not use words\n> already used by existing wordlists, in order to ensure that the language\n> can be detected. It leads to a first come first served situation, that\n> might not be sustainable in the future.\n> \n> In order to support the old Electrum v1 seeds, all future versions of\n> Electrum will have to include the old wordlist. In addition, when\n> generating new seed phrases, Electrum now has to avoid collisions with\n> old seed phrases, because the old ones did not have a version number.\n> This is painful enough, I will not repeat the same errors twice.\n> \n> Electrum v2 derives both its private keys and its checksum/version\n> number using a hash of the seed phrase. This means that wordlists can be\n> added and modified in the future, without breaking existing seed\n> phrases. It also means that it will be very easy for other wallets to\n> support Electrum seedphrases: it requires about 20 lines of code, and no\n> wordlist is required.\"\n> \n> \n> Thomas\n> \n> \n> Le 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> > Congrats Thomas! Glad to see Electrum 2 finally launch.\n> > \n> > \n> >> * New seed derivation method (not compatible with BIP39).\n> > \n> > \n> > Does this mean a \"12 words\" wallet created by Electrum won't work if\n> > imported into some other wallet that supports BIP39? Vice versa? This seems\n> > unfortunate. I guess if seeds are being represented with 12 words\n> > consistently, people will expect them to work everywhere.\n> > \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> Bitcoin-development --\n> | \u00a0 |\n> | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n> | Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n> |\u00a0 |\n> | View on lists.sourceforge.net | Preview by Yahoo |\n> |\u00a0 |\n> | \u00a0 |\n> \n>\u00a0 \u00a0\n> \n>\u00a0 \n>\u00a0\u00a0\u00a0 \n\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/ba0f7b83/attachment.html>"
            },
            {
                "author": "Neill Miller",
                "date": "2015-03-12T11:51:37",
                "message_text_only": "Ok, I see your point here, and I was referring to rebuilding from\nentropy -- which as you noted is not a real world usage.  It is a\nuseful implementation test though and at the very least the existing\ntest vectors would need to be regenerated with each word list change.\n\nI recently added BIP39 to libbitcoin and our implementation would fail\nwith an arbitrarily new word list because we validate the user\nprovided word list before converting it to a seed (i.e. we check that\nthe encoded entropy/checksum line up and warn the user if that's not\nthe case to distinguish a rubbish word list from a BIP39 mnemonic --\nas referenced in the BIP).  You're correct that we could use rubbish\nwords, but at the moment it's not allowed there.  By removing that\nvalidating 'restriction', I agree with you that word lists have no\nneed to be fixed.  But realistically, we still don't allow completely\narbitrary words to be used because I don't see the word lists changing\ntoo often, nor implementations storing word lists of all words and\nlanguages.\n\nThanks for clarifying,\n-Neill.\n\nOn Thu, Mar 12, 2015 at 04:21:59AM +0000, Thy Shizzle wrote:\n> \"I agree that it's true that a static wordlist is\n>  required once people have started using BIP39 for anything real and\n>  changing the word lists will invalidate any existing mnemonics\"\n> ^ This is incorrect I think Neill, the reason is that the only thing that happens when you change the wordlist is that entropy points to different words. But remember, entropy is disposed. Yes in my code I allow for the keeping of entropy etc, it also lets me \"hot swap\" between different language wordlists etc but in real world implementation the entropy is forgotten and not stored. So changing the wordlist merely allows new mnemonic phrases to be generated but it has a nil impact on previously generated mnemonics UNLESS you are trying to rebuild from entropy but you wouldn't do that. You would be rebuilding from the Mnemonic in real world scenario. You really can have a word list of total rubbish in BIP39 as long as it is 2048 words long that is all! If you input the mnemonic made out of rubbish words so for e.g \"uyuy jkjasd sdsd sdsdd yuuyu sdsds iooioi sdasds uyuyuy sdsdsd tyyty rwetrtr\" and no matter what BIP39 implementation you put it in, it will always generate the same seed bytes thus allowing for complete and universal seed derivation without any reliance on word list. The word list is merely to generate a mnemonic, after that it has no role in seed generation so you can change it at anytime and it will never effect future mnemonics.\n> \n> On Thu, Mar 12, 2015 at 02:16:38AM +0000, Thy Shizzle wrote:\n> > That's disappointing the Electrum 2.0 doesn't use BIP39.\n> \n> Agreed, but I don't know the full background on this.\n> \n> > Changing the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\n> \n> That's true for generating new mnemonics (i.e. same entropy can\n> generate any combinations of words), but not for converting a mnemonic\n> to a seed (i.e. a specific wordlist/passphrase should always generate\n> the same seed).\u00a0 I agree that it's true that a static wordlist is\n> required once people have started using BIP39 for anything real and\n> changing the word lists will invalidate any existing mnemonics (unless\n> your 'new' wordlist simply substitutes one word for another and the\n> index mapping is made public ... which means it's not really an\n> arbitrary word list).\n> \n> > Version is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\n> > So most of what you are suggesting as problems are not.\n> \n> I don't see how this can work given the BIP39 spec as it is today\n> (there's simply no room for a version in the bits).\u00a0 I do think\n> versioning would be nice, but as of now, I'm in the camp that thinks\n> complete wallet interoperability is a bit of a myth -- so long as you\n> can fundamentally move into/out of wallets at will.\n> \n> -Neill.\n> \n> > As for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\n> > Also then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\n> > Thomas V:\n> > \"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\n> > of weeks.\n> > \n> > You are correct, a BIP39 seed phrase will not work in Electrum, and vice\n> > versa. It is indeed unfortunate. However, I believe BIP39 should not be\n> > followed, because it reproduces two mistakes I did when I designed the\n> > older Electrum seed system. Let me explain.\n> > \n> > The first problem I have with BIP39 is that the seed phrase does not\n> > include a version number.\n> > \n> > Wallet development is still in an exploratory phase, and we should\n> > expect even more innovation in this domain. In this context, it is\n> > unwise to make decisions that prevent future innovation.\n> > \n> > However, when we give a seed phrase to users, we have a moral obligation\n> > to keep supporting this seed phrase in future versions. We cannot simply\n> > announce to Electrum users that their old seed phrase is not supported\n> > anymore, because we created a new version of the software that uses a\n> > different derivation. This could lead to financial losses for users who\n> > are unaware of these technicalities. Well, at least, that is how I feel\n> > about it.\n> > \n> > BIP39 and Electrum v2 have a very different ways of handling future\n> > innovation. Electrum v2 seed phrases include an explicit version number,\n> > that indicates how the wallet addresses should be derived. In contrast,\n> > BIP39 seed phrases do not include a version number at all. BIP39 is\n> > meant to be combined with BIP43, which stipulates that the wallet\n> > structure should depend on the BIP32 derivation path used for the wallet\n> > (although BIP43 is not followed by all BIP39 compatible wallets). Thus,\n> > innovation in BIP43 is allowed only within the framework of BIP32. In\n> > addition, having to explore the branches of the BIP32 tree in order to\n> > determine the type of wallet attached to a seed might be somewhat\n> > inefficient.\n> > \n> > The second problem I see with BIP39 is that it requires a fixed\n> > wordlist. Of course, this forbids innovation in the wordlist itself, but\n> > that's not the main problem. When you write a new standard, it is\n> > important to keep this standard minimal, given the goal you want to\n> > achieve. I believe BIP39 could (and should) have been written without\n> > including the wordlist in the standard.\n> > \n> > There are two ways to derive a master key from a mnemonic phrase:\n> > \u00a01. A bidirectional mapping between words and numbers, as in old\n> > Electrum versions. Pros: bidirectional means that you can do Shamir\n> > secret sharing of your seed. Cons: It requires a fixed wordlist.\n> > \u00a02. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\n> > required. Cons: the mapping isn't bidirectional.\n> > \n> > Electrum v1 uses (1). Electrum v2 uses (2).\n> > \n> > Early versions of BIP39 used (1), and later they switched to (2).\n> > However, BIP39 uses (2) only in order to derive the wallet keys, not for\n> > its checksum. The BIP39 checksum uses (1), and it does requires a fixed\n> > wordlist. This is just plainly inconsistent. As a result, you have\n> > neither wordlist flexibility, nor Shamir secret sharing.\n> > \n> > Having a fixed wordlist is very unfortunate. First, it means that BIP39\n> > will probably never leave the 'draft' stage, until all languages of the\n> > world have been added. Second, once you add a wordlist for a new\n> > language, you cannot change it anymore, because it will break existing\n> > seed phrases; therefore you have to be extremely careful in the way you\n> > design these wordlists. Third, languages often have words in common.\n> > When you add a new language to the list, you should not use words\n> > already used by existing wordlists, in order to ensure that the language\n> > can be detected. It leads to a first come first served situation, that\n> > might not be sustainable in the future.\n> > \n> > In order to support the old Electrum v1 seeds, all future versions of\n> > Electrum will have to include the old wordlist. In addition, when\n> > generating new seed phrases, Electrum now has to avoid collisions with\n> > old seed phrases, because the old ones did not have a version number.\n> > This is painful enough, I will not repeat the same errors twice.\n> > \n> > Electrum v2 derives both its private keys and its checksum/version\n> > number using a hash of the seed phrase. This means that wordlists can be\n> > added and modified in the future, without breaking existing seed\n> > phrases. It also means that it will be very easy for other wallets to\n> > support Electrum seedphrases: it requires about 20 lines of code, and no\n> > wordlist is required.\"\n> > \n> > \n> > Thomas\n> > \n> > \n> > Le 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> > > Congrats Thomas! Glad to see Electrum 2 finally launch.\n> > > \n> > > \n> > >> * New seed derivation method (not compatible with BIP39).\n> > > \n> > > \n> > > Does this mean a \"12 words\" wallet created by Electrum won't work if\n> > > imported into some other wallet that supports BIP39? Vice versa? This seems\n> > > unfortunate. I guess if seeds are being represented with 12 words\n> > > consistently, people will expect them to work everywhere.\n> > > \n> > \n> > ------------------------------------------------------------------------------\n> > Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> > by Intel and developed in partnership with Slashdot Media, is your hub for all\n> > things parallel software development, from weekly thought leadership blogs to\n> > news, videos, case studies, tutorials and more. Take a look and join the \n> > conversation now. http://goparallel.sourceforge.net/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > Bitcoin-development --\n> > | \u00a0 |\n> > | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n> > | Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n> > |\u00a0 |\n> > | View on lists.sourceforge.net | Preview by Yahoo |\n> > |\u00a0 |\n> > | \u00a0 |\n> > \n> >\u00a0 \u00a0\n> > \n> >\u00a0 \n> >\u00a0\u00a0\u00a0 \n> \n> > ------------------------------------------------------------------------------\n> > Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> > by Intel and developed in partnership with Slashdot Media, is your hub for all\n> > things parallel software development, from weekly thought leadership blogs to\n> > news, videos, case studies, tutorials and more. Take a look and join the \n> > conversation now. http://goparallel.sourceforge.net/\n> \n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T12:59:11",
                "message_text_only": "@Neill, Indeed supplying entropy is necessary for testing etc, that's the main reason why I put this in my .NET implementation, the test vectors require us to supply entropy and build the mnemonic from the supplied wordlist and you are correct that changes to the word list will null and void the test vectors. Also it allows us to do fun things like swap between languages so one entropy set can have many seeds based on many languages etc, just novel little things like that. I'm not at all against a standard wordlist. The point I want to get across is that people seem to think that BIP39 is restricted by its word list but not at all. As long as you give a BIP39 implementation 12 words or more (in 3 word increments) it will always derive the same seed bytes, independent of any word list and this is the most important message to realise.\n\n@Thomas V if you must record a version, why don't you just put an integer at the end of your mnemonic or something? I can't understand why you have disregarded BIP39 when designing Electrum 2.0?  12 - 24 words plus a version integer tacked on the end, tell the user to omit the version integer if they want to import to multibit HD or whatever, job done!\n\nI really think you need to rethink the use of BIP39 with Electrum Thomas! If you want to maintain a version field and/or date independent of the BIP39 spec then do so because at least the seed can still be recreated from anyone else utilising BIP39!!!\n\nThy\n\n> Date: Thu, 12 Mar 2015 06:51:37 -0500\n> From: neillm at thecodefactory.org\n> To: thashiznets at yahoo.com.au\n> CC: Bitcoin-development at lists.sourceforge.net\n> Subject: Re: [Bitcoin-development] Electrum 2.0 has been tagged\n> \n> \n> Ok, I see your point here, and I was referring to rebuilding from\n> entropy -- which as you noted is not a real world usage.  It is a\n> useful implementation test though and at the very least the existing\n> test vectors would need to be regenerated with each word list change.\n> \n> I recently added BIP39 to libbitcoin and our implementation would fail\n> with an arbitrarily new word list because we validate the user\n> provided word list before converting it to a seed (i.e. we check that\n> the encoded entropy/checksum line up and warn the user if that's not\n> the case to distinguish a rubbish word list from a BIP39 mnemonic --\n> as referenced in the BIP).  You're correct that we could use rubbish\n> words, but at the moment it's not allowed there.  By removing that\n> validating 'restriction', I agree with you that word lists have no\n> need to be fixed.  But realistically, we still don't allow completely\n> arbitrary words to be used because I don't see the word lists changing\n> too often, nor implementations storing word lists of all words and\n> languages.\n> \n> Thanks for clarifying,\n> -Neill.\n> \n> On Thu, Mar 12, 2015 at 04:21:59AM +0000, Thy Shizzle wrote:\n> > \"I agree that it's true that a static wordlist is\n> >  required once people have started using BIP39 for anything real and\n> >  changing the word lists will invalidate any existing mnemonics\"\n> > ^ This is incorrect I think Neill, the reason is that the only thing that happens when you change the wordlist is that entropy points to different words. But remember, entropy is disposed. Yes in my code I allow for the keeping of entropy etc, it also lets me \"hot swap\" between different language wordlists etc but in real world implementation the entropy is forgotten and not stored. So changing the wordlist merely allows new mnemonic phrases to be generated but it has a nil impact on previously generated mnemonics UNLESS you are trying to rebuild from entropy but you wouldn't do that. You would be rebuilding from the Mnemonic in real world scenario. You really can have a word list of total rubbish in BIP39 as long as it is 2048 words long that is all! If you input the mnemonic made out of rubbish words so for e.g \"uyuy jkjasd sdsd sdsdd yuuyu sdsds iooioi sdasds uyuyuy sdsdsd tyyty rwetrtr\" and no matter what BIP39 implementation you put it in, it will always generate the same seed bytes thus allowing for complete and universal seed derivation without any reliance on word list. The word list is merely to generate a mnemonic, after that it has no role in seed generation so you can change it at anytime and it will never effect future mnemonics.\n> > \n> > On Thu, Mar 12, 2015 at 02:16:38AM +0000, Thy Shizzle wrote:\n> > > That's disappointing the Electrum 2.0 doesn't use BIP39.\n> > \n> > Agreed, but I don't know the full background on this.\n> > \n> > > Changing the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\n> > \n> > That's true for generating new mnemonics (i.e. same entropy can\n> > generate any combinations of words), but not for converting a mnemonic\n> > to a seed (i.e. a specific wordlist/passphrase should always generate\n> > the same seed).  I agree that it's true that a static wordlist is\n> > required once people have started using BIP39 for anything real and\n> > changing the word lists will invalidate any existing mnemonics (unless\n> > your 'new' wordlist simply substitutes one word for another and the\n> > index mapping is made public ... which means it's not really an\n> > arbitrary word list).\n> > \n> > > Version is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\n> > > So most of what you are suggesting as problems are not.\n> > \n> > I don't see how this can work given the BIP39 spec as it is today\n> > (there's simply no room for a version in the bits).  I do think\n> > versioning would be nice, but as of now, I'm in the camp that thinks\n> > complete wallet interoperability is a bit of a myth -- so long as you\n> > can fundamentally move into/out of wallets at will.\n> > \n> > -Neill.\n> > \n> > > As for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\n> > > Also then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\n> > > Thomas V:\n> > > \"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\n> > > of weeks.\n> > > \n> > > You are correct, a BIP39 seed phrase will not work in Electrum, and vice\n> > > versa. It is indeed unfortunate. However, I believe BIP39 should not be\n> > > followed, because it reproduces two mistakes I did when I designed the\n> > > older Electrum seed system. Let me explain.\n> > > \n> > > The first problem I have with BIP39 is that the seed phrase does not\n> > > include a version number.\n> > > \n> > > Wallet development is still in an exploratory phase, and we should\n> > > expect even more innovation in this domain. In this context, it is\n> > > unwise to make decisions that prevent future innovation.\n> > > \n> > > However, when we give a seed phrase to users, we have a moral obligation\n> > > to keep supporting this seed phrase in future versions. We cannot simply\n> > > announce to Electrum users that their old seed phrase is not supported\n> > > anymore, because we created a new version of the software that uses a\n> > > different derivation. This could lead to financial losses for users who\n> > > are unaware of these technicalities. Well, at least, that is how I feel\n> > > about it.\n> > > \n> > > BIP39 and Electrum v2 have a very different ways of handling future\n> > > innovation. Electrum v2 seed phrases include an explicit version number,\n> > > that indicates how the wallet addresses should be derived. In contrast,\n> > > BIP39 seed phrases do not include a version number at all. BIP39 is\n> > > meant to be combined with BIP43, which stipulates that the wallet\n> > > structure should depend on the BIP32 derivation path used for the wallet\n> > > (although BIP43 is not followed by all BIP39 compatible wallets). Thus,\n> > > innovation in BIP43 is allowed only within the framework of BIP32. In\n> > > addition, having to explore the branches of the BIP32 tree in order to\n> > > determine the type of wallet attached to a seed might be somewhat\n> > > inefficient.\n> > > \n> > > The second problem I see with BIP39 is that it requires a fixed\n> > > wordlist. Of course, this forbids innovation in the wordlist itself, but\n> > > that's not the main problem. When you write a new standard, it is\n> > > important to keep this standard minimal, given the goal you want to\n> > > achieve. I believe BIP39 could (and should) have been written without\n> > > including the wordlist in the standard.\n> > > \n> > > There are two ways to derive a master key from a mnemonic phrase:\n> > >  1. A bidirectional mapping between words and numbers, as in old\n> > > Electrum versions. Pros: bidirectional means that you can do Shamir\n> > > secret sharing of your seed. Cons: It requires a fixed wordlist.\n> > >  2. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\n> > > required. Cons: the mapping isn't bidirectional.\n> > > \n> > > Electrum v1 uses (1). Electrum v2 uses (2).\n> > > \n> > > Early versions of BIP39 used (1), and later they switched to (2).\n> > > However, BIP39 uses (2) only in order to derive the wallet keys, not for\n> > > its checksum. The BIP39 checksum uses (1), and it does requires a fixed\n> > > wordlist. This is just plainly inconsistent. As a result, you have\n> > > neither wordlist flexibility, nor Shamir secret sharing.\n> > > \n> > > Having a fixed wordlist is very unfortunate. First, it means that BIP39\n> > > will probably never leave the 'draft' stage, until all languages of the\n> > > world have been added. Second, once you add a wordlist for a new\n> > > language, you cannot change it anymore, because it will break existing\n> > > seed phrases; therefore you have to be extremely careful in the way you\n> > > design these wordlists. Third, languages often have words in common.\n> > > When you add a new language to the list, you should not use words\n> > > already used by existing wordlists, in order to ensure that the language\n> > > can be detected. It leads to a first come first served situation, that\n> > > might not be sustainable in the future.\n> > > \n> > > In order to support the old Electrum v1 seeds, all future versions of\n> > > Electrum will have to include the old wordlist. In addition, when\n> > > generating new seed phrases, Electrum now has to avoid collisions with\n> > > old seed phrases, because the old ones did not have a version number.\n> > > This is painful enough, I will not repeat the same errors twice.\n> > > \n> > > Electrum v2 derives both its private keys and its checksum/version\n> > > number using a hash of the seed phrase. This means that wordlists can be\n> > > added and modified in the future, without breaking existing seed\n> > > phrases. It also means that it will be very easy for other wallets to\n> > > support Electrum seedphrases: it requires about 20 lines of code, and no\n> > > wordlist is required.\"\n> > > \n> > > \n> > > Thomas\n> > > \n> > > \n> > > Le 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n> > > > Congrats Thomas! Glad to see Electrum 2 finally launch.\n> > > > \n> > > > \n> > > >> * New seed derivation method (not compatible with BIP39).\n> > > > \n> > > > \n> > > > Does this mean a \"12 words\" wallet created by Electrum won't work if\n> > > > imported into some other wallet that supports BIP39? Vice versa? This seems\n> > > > unfortunate. I guess if seeds are being represented with 12 words\n> > > > consistently, people will expect them to work everywhere.\n> > > > \n> > > \n> > > ------------------------------------------------------------------------------\n> > > Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> > > by Intel and developed in partnership with Slashdot Media, is your hub for all\n> > > things parallel software development, from weekly thought leadership blogs to\n> > > news, videos, case studies, tutorials and more. Take a look and join the \n> > > conversation now. http://goparallel.sourceforge.net/\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > Bitcoin-development --\n> > > |   |\n> > > |   |   |   |   |   |\n> > > | Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n> > > |  |\n> > > | View on lists.sourceforge.net | Preview by Yahoo |\n> > > |  |\n> > > |   |\n> > > \n> > >   \n> > > \n> > >  \n> > >    \n> > \n> > > ------------------------------------------------------------------------------\n> > > Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> > > by Intel and developed in partnership with Slashdot Media, is your hub for all\n> > > things parallel software development, from weekly thought leadership blogs to\n> > > news, videos, case studies, tutorials and more. Take a look and join the \n> > > conversation now. http://goparallel.sourceforge.net/\n> > \n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/d0a28c36/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2015-03-12T16:39:29",
                "message_text_only": "On 2015-03-12 04:51 AM, Neill Miller wrote:\n> \n> Ok, I see your point here, and I was referring to rebuilding from\n> entropy -- which as you noted is not a real world usage.  It is a\n> useful implementation test though and at the very least the existing\n> test vectors would need to be regenerated with each word list change.\n> \n> I recently added BIP39 to libbitcoin and our implementation would fail\n> with an arbitrarily new word list because we validate the user\n> provided word list before converting it to a seed (i.e. we check that\n> the encoded entropy/checksum line up and warn the user if that's not\n> the case to distinguish a rubbish word list from a BIP39 mnemonic --\n> as referenced in the BIP).  You're correct that we could use rubbish\n> words, but at the moment it's not allowed there.  By removing that\n> validating 'restriction', I agree with you that word lists have no\n> need to be fixed.  But realistically, we still don't allow completely\n> arbitrary words to be used because I don't see the word lists changing\n> too often, nor implementations storing word lists of all words and\n> languages.\n\nA good way to go about this from a UX point of view is warn the user\nthat their \"phrase is non-standard\", but allow them to insist.\n\n> \n> Thanks for clarifying,\n> -Neill.\n> \n> On Thu, Mar 12, 2015 at 04:21:59AM +0000, Thy Shizzle wrote:\n>> \"I agree that it's true that a static wordlist is\n>>  required once people have started using BIP39 for anything real and\n>>  changing the word lists will invalidate any existing mnemonics\"\n>> ^ This is incorrect I think Neill, the reason is that the only thing that happens when you change the wordlist is that entropy points to different words. But remember, entropy is disposed. Yes in my code I allow for the keeping of entropy etc, it also lets me \"hot swap\" between different language wordlists etc but in real world implementation the entropy is forgotten and not stored. So changing the wordlist merely allows new mnemonic phrases to be generated but it has a nil impact on previously generated mnemonics UNLESS you are trying to rebuild from entropy but you wouldn't do that. You would be rebuilding from the Mnemonic in real world scenario. You really can have a word list of total rubbish in BIP39 as long as it is 2048 words long that is all! If you input the mnemonic made out of rubbish words so for e.g \"uyuy jkjasd sdsd sdsdd yuuyu sdsds iooioi sdasds uyuyuy sdsdsd tyyty rwetrtr\" and no matter what BIP39 implementation you put it in, it will always generate the same seed\n bytes thus allowing for complete and universal seed derivation without any reliance on word list. The word list is merely to generate a mnemonic, after that it has no role in seed generation so you can change it at anytime and it will never effect future mnemonics.\n>>\n>> On Thu, Mar 12, 2015 at 02:16:38AM +0000, Thy Shizzle wrote:\n>>> That's disappointing the Electrum 2.0 doesn't use BIP39.\n>>\n>> Agreed, but I don't know the full background on this.\n>>\n>>> Changing the wordlist in the future has ZERO effect on derived seed, whatever mnemonic you provide will always generate the same seed, BIP39 is not mapping the words back to numbers etc to derive seed.\n>>\n>> That's true for generating new mnemonics (i.e. same entropy can\n>> generate any combinations of words), but not for converting a mnemonic\n>> to a seed (i.e. a specific wordlist/passphrase should always generate\n>> the same seed).  I agree that it's true that a static wordlist is\n>> required once people have started using BIP39 for anything real and\n>> changing the word lists will invalidate any existing mnemonics (unless\n>> your 'new' wordlist simply substitutes one word for another and the\n>> index mapping is made public ... which means it's not really an\n>> arbitrary word list).\n>>\n>>> Version is something that can be dealt with after the fact, hopefully standardised (curious why didn't you work with the BIP39 to insert version instead of do something different to BIP39?)\n>>> So most of what you are suggesting as problems are not.\n>>\n>> I don't see how this can work given the BIP39 spec as it is today\n>> (there's simply no room for a version in the bits).  I do think\n>> versioning would be nice, but as of now, I'm in the camp that thinks\n>> complete wallet interoperability is a bit of a myth -- so long as you\n>> can fundamentally move into/out of wallets at will.\n>>\n>> -Neill.\n>>\n>>> As for the common words between languages, I have discussed this with the provider of the Chinese wordlists as they shared some words between simplified and traditional, but I found it easy to look for a word in the mnemonic that is unique to that language/wordlist and so straight away you can determine the language, remembering you get minimum 12 goes at doing that :)\n>>> Also then I asked myself, do we really care about detecting the language? Probably not because we don't need to use the wordlist ever again after creation, we literally accept the mnemonic, normalise it then hash it into a seed. From what I'm reading, Electrum 2.0 really should have BIP39, it would take almost no effort to put it in and I think you should do that :) I don't have any interest in BIP39 other than it being a standard. I think TREZOR may have an interest in it?\n>>> Thomas V:\n>>> \"Thanks Mike, and sorry to answer a bit late; it has been a busy couple\n>>> of weeks.\n>>>\n>>> You are correct, a BIP39 seed phrase will not work in Electrum, and vice\n>>> versa. It is indeed unfortunate. However, I believe BIP39 should not be\n>>> followed, because it reproduces two mistakes I did when I designed the\n>>> older Electrum seed system. Let me explain.\n>>>\n>>> The first problem I have with BIP39 is that the seed phrase does not\n>>> include a version number.\n>>>\n>>> Wallet development is still in an exploratory phase, and we should\n>>> expect even more innovation in this domain. In this context, it is\n>>> unwise to make decisions that prevent future innovation.\n>>>\n>>> However, when we give a seed phrase to users, we have a moral obligation\n>>> to keep supporting this seed phrase in future versions. We cannot simply\n>>> announce to Electrum users that their old seed phrase is not supported\n>>> anymore, because we created a new version of the software that uses a\n>>> different derivation. This could lead to financial losses for users who\n>>> are unaware of these technicalities. Well, at least, that is how I feel\n>>> about it.\n>>>\n>>> BIP39 and Electrum v2 have a very different ways of handling future\n>>> innovation. Electrum v2 seed phrases include an explicit version number,\n>>> that indicates how the wallet addresses should be derived. In contrast,\n>>> BIP39 seed phrases do not include a version number at all. BIP39 is\n>>> meant to be combined with BIP43, which stipulates that the wallet\n>>> structure should depend on the BIP32 derivation path used for the wallet\n>>> (although BIP43 is not followed by all BIP39 compatible wallets). Thus,\n>>> innovation in BIP43 is allowed only within the framework of BIP32. In\n>>> addition, having to explore the branches of the BIP32 tree in order to\n>>> determine the type of wallet attached to a seed might be somewhat\n>>> inefficient.\n>>>\n>>> The second problem I see with BIP39 is that it requires a fixed\n>>> wordlist. Of course, this forbids innovation in the wordlist itself, but\n>>> that's not the main problem. When you write a new standard, it is\n>>> important to keep this standard minimal, given the goal you want to\n>>> achieve. I believe BIP39 could (and should) have been written without\n>>> including the wordlist in the standard.\n>>>\n>>> There are two ways to derive a master key from a mnemonic phrase:\n>>>  1. A bidirectional mapping between words and numbers, as in old\n>>> Electrum versions. Pros: bidirectional means that you can do Shamir\n>>> secret sharing of your seed. Cons: It requires a fixed wordlist.\n>>>  2. Use a hash of the seed phrase (pbkdf). Pros: a fixed wordlist is not\n>>> required. Cons: the mapping isn't bidirectional.\n>>>\n>>> Electrum v1 uses (1). Electrum v2 uses (2).\n>>>\n>>> Early versions of BIP39 used (1), and later they switched to (2).\n>>> However, BIP39 uses (2) only in order to derive the wallet keys, not for\n>>> its checksum. The BIP39 checksum uses (1), and it does requires a fixed\n>>> wordlist. This is just plainly inconsistent. As a result, you have\n>>> neither wordlist flexibility, nor Shamir secret sharing.\n>>>\n>>> Having a fixed wordlist is very unfortunate. First, it means that BIP39\n>>> will probably never leave the 'draft' stage, until all languages of the\n>>> world have been added. Second, once you add a wordlist for a new\n>>> language, you cannot change it anymore, because it will break existing\n>>> seed phrases; therefore you have to be extremely careful in the way you\n>>> design these wordlists. Third, languages often have words in common.\n>>> When you add a new language to the list, you should not use words\n>>> already used by existing wordlists, in order to ensure that the language\n>>> can be detected. It leads to a first come first served situation, that\n>>> might not be sustainable in the future.\n>>>\n>>> In order to support the old Electrum v1 seeds, all future versions of\n>>> Electrum will have to include the old wordlist. In addition, when\n>>> generating new seed phrases, Electrum now has to avoid collisions with\n>>> old seed phrases, because the old ones did not have a version number.\n>>> This is painful enough, I will not repeat the same errors twice.\n>>>\n>>> Electrum v2 derives both its private keys and its checksum/version\n>>> number using a hash of the seed phrase. This means that wordlists can be\n>>> added and modified in the future, without breaking existing seed\n>>> phrases. It also means that it will be very easy for other wallets to\n>>> support Electrum seedphrases: it requires about 20 lines of code, and no\n>>> wordlist is required.\"\n>>>\n>>>\n>>> Thomas\n>>>\n>>>\n>>> Le 02/03/2015 16:37, Mike Hearn a \u00e9crit :\n>>>> Congrats Thomas! Glad to see Electrum 2 finally launch.\n>>>>\n>>>>\n>>>>> * New seed derivation method (not compatible with BIP39).\n>>>>\n>>>>\n>>>> Does this mean a \"12 words\" wallet created by Electrum won't work if\n>>>> imported into some other wallet that supports BIP39? Vice versa? This seems\n>>>> unfortunate. I guess if seeds are being represented with 12 words\n>>>> consistently, people will expect them to work everywhere.\n>>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n>>> by Intel and developed in partnership with Slashdot Media, is your hub for all\n>>> things parallel software development, from weekly thought leadership blogs to\n>>> news, videos, case studies, tutorials and more. Take a look and join the \n>>> conversation now. http://goparallel.sourceforge.net/\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> Bitcoin-development --\n>>> |   |\n>>> |   |   |   |   |   |\n>>> | Bitcoin-development --To see the collection of prior postings to the list, visit the Bitcoin-development Archives. |\n>>> |  |\n>>> | View on lists.sourceforge.net | Preview by Yahoo |\n>>> |  |\n>>> |   |\n>>>\n>>>    \n>>>\n>>>   \n>>>     \n>>\n>>> ------------------------------------------------------------------------------\n>>> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n>>> by Intel and developed in partnership with Slashdot Media, is your hub for all\n>>> things parallel software development, from weekly thought leadership blogs to\n>>> news, videos, case studies, tutorials and more. Take a look and join the \n>>> conversation now. http://goparallel.sourceforge.net/\n>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T05:12:47",
                "message_text_only": "Yes I agree with this sentiment.\nAs for the version, don't forget we can kinda \"brute force\" our way to determine a version, because lets say there is 10 versions, we can generate the seed for all 10 versions and then check to see which seed was in use (has transacted) and then use that seed. If no transactions are found, we could restore the wallet with the seed of the latest and greatest version. Not really any need to store the version, sure it may save some time but as Marek rightly says, this is for restoration of a wallet from cold storage not an everyday thing so the extra time to brute force the version etc is acceptable as a trade off for not forcing the remembering of a version.\nBIP39 is beautiful.\nOn Wed, Mar 11, 2015 at 6:14 PM, Mike Hearn <mike at plan99.net> wrote:\n\n   \n   - Electrum v2 with a version number but no date\n   - myTREZOR with no version and no date and BIP44 key derivation. Some seeds I believe are now being generated with 24 words instead of 12.\n   - MultiBit HD with no version and a date in a custom form that creates non-date-like codes you are expected to write down. I think BIP32 and BIP44 are both supported (sorta).\n   - GreenAddress with no version, no date and BIP32\n   - Other bitcoinj based wallets, with no version and a date written down in normal human form, BIP32 only.\n\nTo my knowledge, myTREZOR, Multibit HD and GreenAddress uses BIP39, just different scheme for key derivation (myTREZOR uses full BIP44, Multibit HD uses BIP44 with first account only and GreenAddress uses another scheme because it's multisig only wallet).\nI disagree with the need of some version \"magic flags\" or creation date stored in the mnemnonic, for those reasons:\na) If we fail in the way how mnemonic algo is defined, then some magic, extra version flag won't save our asses, because we'll fail in meaning of its meaning. Then it will be completely useless, as implementations cannot rely on it. I know Thomas was sound proponent of this solution, but he was unable to give any reasonable rules about who/how define meaning of version flag.\nb) \"Creation date\" is just a short-term hack. Considering that mnemonic words are kind of cold storage (longterm storage), it *really* does not make much difference in 2020, if your wallet has been created in 02/2014 or 10/2016. If there's performance issue with scanning of the blockchain, creation date don't save our asses. We need to find another solution, and as a bonus, we don't need users to know some weird numbers on top of mnemonic itself.\n>\u00a0From my interpretation of BIP39, wordlists DO NOT\u00a0REQUIRE to be fixed between wallet providers.\u00a0There is some recommendations regarding the wordlists to help with things such as predictive text, so mobile apps can easily predict the word being typed in after a few chars etc.\nExactly! After some community feedback, we changed BIP39 algo to be one-way only, which means you can use *any* wordlist to create the mnemonic, and any other implementation can derive BIP32 root node even without knowing that particular wordlist. Namely this has been changed because of constructive criticism of ThomasV, and from discussion on the mailing list I had a feeling that we've found a consensus. I was *very* surprised that Electrum 2.0 started to use yet another algo \"just because\".\nShortly said, I think BIP39 does perfect job and there's no need to use anything else.\nCheers,Marek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/bf558c63/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2015-03-12T05:25:37",
                "message_text_only": "On Wed, Mar 11, 2015 at 10:12 PM, Thy Shizzle <thashiznets at yahoo.com.au>\nwrote:\n>\n> BIP39 is beautiful.\n\nmeh... the fact that you can't derive the seed phrase from the wallet seed,\nand that the password key stretching is so weak as to be ineffectual\nsecurity theater bugs me. Feels like a pretty big compromise to work on\ncurrent generation low power embedded devices when the next generation will\nbe more than capable. But I understand the motivation for the compromise.\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/1c12393a/attachment.html>"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T05:58:12",
                "message_text_only": "Why on earth would you want to derive the mnemonic from the wallet seed? Ever?\nRemembering that as an attacker doesn't actually have to do any key stretching, they can just keep trying (what is it 64 bytes from memory?) at a time without any PBKDF2 to attack a seed, it seems that the PBKDF2 is just to slow down anyone attempting to attack through an interface such as a web service or to a TREZOR or whatever, in a real world attack you would not even be performing PBKDF2 you would just brute force the raw bytes and\u00a0force them into the BIP32 wallet\u00a0as there is no Authentication scheme that hashes and compares against the result. It purely limits abuse through an online wallet provider or something like that by slowing down seed generation attempts THROUGH that API, it doesn't really add any security to the seed in a real world brute force attack! So yea I think the 2048 iteration count is sufficient for it's purpose because even if it only forces an extra 1ms per seed generation through the API, it is still slower than just brute forcing the 64 bytes straight up, and so they would have no reason to abuse your API that is all :)\n\"meh... the fact that you can't derive the seed phrase from the wallet seed, and that the password key stretching is so weak as to be ineffectual security theater bugs me. Feels like a pretty big compromise to work on current generation low power embedded devices when the next generation will be more than capable. But I understand the motivation for the compromise.\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/72515729/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Electrum 2.0 has been tagged",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Neill Miller",
                "Bryan Bishop",
                "Jim",
                "Natanael",
                "Thy Shizzle",
                "Thomas Voegtlin",
                "slush",
                "Andreas Schildbach",
                "Mike Hearn",
                "Ricardo Filipe",
                "Gregory Maxwell",
                "Gary Rowe",
                "devrandom",
                "Aaron Voisine"
            ],
            "messages_count": 42,
            "total_messages_chars_count": 156211
        }
    },
    {
        "title": "[Bitcoin-development] replace-by-fee v0.10.0rc4",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2015-03-01T17:44:14",
                "message_text_only": "Bitcoin was/is a disruptive technology for credit card payment processors,\nand replace-by-fee/stag-hunt is a disruptive technology for Bitcoin payment\nprocessors.\n\nI think whether you call it scorched earth is a bit more of a reflection of\nwhether you stand to make money, or lose money from the distruption.\n\nPersonally, I think 'first-seen' is a dangerous scorched-earth policy that\nonly benefits the people who own the internet routers that determine what\nis seen first.\n\nBut from the standpoint of consensus, can we at least agree that it's a\n*node policy* decision, and the market particpants should be free to choose\nwhichever policy works best for them?\n\nOtherwise, I think the only way to make 'first-seen' work is by adding \na timestamp to CTransaction.\n\nOn Sat, Feb 21, 2015 at 05:47:28PM -0500, Jeff Garzik wrote:\n> \"scorched earth\" refers to the _real world_ impact such policies would\n> have on present-day 0-conf usage within the bitcoin community.\n> \n> All payment processors AFAIK process transactions through some scoring\n> system, then accept 0-conf transactions for payments.\n> \n> This isn't some theoretical exercise.  Like it or not many use\n> insecure 0-conf transactions for rapid payments.  Deploying something\n> that makes 0-conf transactions unusable would have a wide, negative\n> impact on present day bitcoin payments, thus \"scorched earth\"\n> \n> Without adequate decentralized solutions for instant payments,\n> deploying replace-by-fee widely would simply push instant transactions\n> even more into the realm of centralized, walled-garden services.\n> \n> \n> \n> \n> \n> \n> On Sat, Feb 21, 2015 at 3:30 PM, Mark Friedenbach <mark at friedenbach.org> wrote:\n> > Thank you Jorge for the contribution of the Stag Hunt terminology. It is\n> > much better than a politically charged \"scorched earth\".\n> >\n> > On Feb 21, 2015 11:10 AM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n> >>\n> >> I agree \"scorched hearth\" is a really bad name for the 0 conf protocol\n> >> based on game theory. I would have preferred \"stag hunt\" since that's\n> >> basically what it's using (see http://en.wikipedia.org/wiki/Stag_hunt)\n> >> but I like the protocol and I think it would be interesting to\n> >> integrate it in the  payment protocol.\n> >> Even if that protocol didn't existed or didn't worked, replace-by-fee\n> >> is purely part of a node's policy, not part of consensus.\n> >> >From the whitepaper, 0 conf transactions being secure by the good will\n> >> of miners was never an assumption, and it is clear to me that the\n> >> system cannot provide those guaranties based on such a weak scheme. I\n> >> believe thinking otherwise is naive.\n> >> As to consider non-standard policies \"an attack to bitcoin\" because\n> >> \"that's not how bitcoin used to work\", then I guess minimum relay fee\n> >> policies can also be considered \"an attack to bitcoin\" on the same\n> >> grounds.\n> >> Lastly, \"first-seen-wins\" was just a simple policy to bootstrap the\n> >> system, but I expect that most nodes will eventually move to policies\n> >> that are economically rational for miners such as replace-by-fee.\n> >> Not only I disagree this will be \"the end of bitcoin\" or \"will push\n> >> the price of the btc miners are mining down\", I believe it will be\n> >> something good for bitcoin.\n> >> Since this is apparently controversial I don't want to push for\n> >> replace-by-fee to become the new standard policy (something that would\n> >> make sense to me). But once the policy code is sufficiently modular as\n> >> to support several policies I would like bitcoin core to have a\n> >> CReplaceByFeePolicy alongside CStandardPolicy and a CNullPolicy (no\n> >> policy checks at all).\n> >> One step at a time I guess...\n> >>\n> >>\n> >> On Thu, Feb 19, 2015 at 9:56 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> >> > On Sun, Feb 15, 2015 at 11:40:24PM +0200, Adam Gibson wrote:\n> >> >>\n> >> >>\n> >> >> On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n> >> >> >\n> >> >> > Most money/payment systems include some method to reverse or undo\n> >> >> > payments made in error. In these systems, the longer settlement\n> >> >> > times you mention below are a feature, not a bug, and give more\n> >> >> > time for a human to react to errors and system failures.\n> >> >> >\n> >> >>\n> >> >> Settlement has to be final somewhere. That is the whole point of it.\n> >> >> Transfer costs in current electronic payment systems are a direct\n> >> >> consequence of their non-finality. That's the point Satoshi was making\n> >> >> in the introduction to the whitepaper: \"With the possibility of\n> >> >> reversal, the need for trust spreads\".\n> >> >\n> >> > The problem with that statement is I trust a merchant that I went into\n> >> > a store and made a payment with personally more than I trust the\n> >> > firmware\n> >> > on my hard drive [1].\n> >> >\n> >> > The attack surface of devices in your computer is huge. A motivated\n> >> > attacker\n> >> > just needs to get an intern into a company that makes some kind of\n> >> > component\n> >> > or system that's in your computer, cloud server, hardware wallet, or\n> >> > what\n> >> > have you that has firmware capable of reading your private keys.\n> >> >\n> >> > With the possibility of mass trojaned hardware, if we are going to trust\n> >> > the system, it must somehow allow reversal through a human-in-the-loop.\n> >> >\n> >> >> There is nothing wrong with having reversible mechanisms built on top\n> >> >> of Bitcoin, and indeed it makes sense for most activity to happen at\n> >> >> those higher layers. It's easy to build things that way, but\n> >> >> impossible to build them the other way: you can't build a\n> >> >> non-reversible layer on top of a reversible layer.\n> >> >\n> >> > We built 'reliable' TCP on top of unreliable ethernet networks. My\n> >> > experience\n> >> > with networking was if you tried to guarantee message delivery at the\n> >> > lowest\n> >> > level, the system got exceedingly complicated, expensive, and brittle.\n> >> >\n> >> > Most applications, in particular paying someone you already trust, are\n> >> > quite\n> >> > happy running on reversible systems, and in some cases more reliable and\n> >> > lower risk. (carrying non-reversible cash is generally considered risky)\n> >> >\n> >> > The problem is that if the base currency is assumed to be\n> >> > non-reversible,\n> >> > then it's brittle and becomes 'too big to fail'.\n> >> >\n> >> > Where the blockchain improves on everything else is in transparency. If\n> >> > you\n> >> > reverse transactions a lot, it will be obvious from an analysis. I would\n> >> > much\n> >> > rather deal with a known, predictable, and relatively continous\n> >> > transaction\n> >> > reversal rate (percentage) than have to deal with sudden failures where\n> >> > some anonymous bad actor makes off with a fortune.\n> >> >\n> >> > We already have zero-conf double-spend transaction reversal, why not\n> >> > explicitly\n> >> > extend that a little in a way that senders and receivers have a choice\n> >> > to\n> >> > use it, or not?\n> >> >\n> >> >\n> >> > [1]\n> >> > http://www.reuters.com/article/2015/02/16/us-usa-cyberspying-idUSKBN0LK1QV20150216\n> >> >\n> >> >\n> >> > ------------------------------------------------------------------------------\n> >> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> >> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> >> > with Interactivity, Sharing, Native Excel Exports, App Integration &\n> >> > more\n> >> > Get technology previously reserved for billion-dollar corporations, FREE\n> >> >\n> >> > http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> >> > _______________________________________________\n> >> > Bitcoin-development mailing list\n> >> > Bitcoin-development at lists.sourceforge.net\n> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> >> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> >> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> >> Get technology previously reserved for billion-dollar corporations, FREE\n> >>\n> >> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> > with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> > Get technology previously reserved for billion-dollar corporations, FREE\n> > http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2015-03-01T17:59:50",
                "message_text_only": "So let's play this out a little.. Let's call it \"Solomon's spend[1]\"\n\nExchange gets hacked, bitcoins move.\n\nThe exchange has a contract with an insurance company and miners for \n'scorched earth' theft response that creates a double-spend of the \noriginal transaction.\n\nSo now there's a 10,000 bitcoin incentive for miners to roll back the\nchain and start (re)mining the block where the theft occurred.\n\nThe exchange gets an insurance payout, some miner wins the lottery, and\nthe thief gets nothing. Seems like a good deal, what am I missing?\n\n[1] http://en.wikipedia.org/wiki/Judgment_of_Solomon\n\nOn Sun, Feb 22, 2015 at 04:06:13AM -0800, Eric Lombrozo wrote:\n> I should note that my proposal does require a change to the consensus\n> rules...but getting bitcoin to scale will require this no matter what.\n> \n> - Eric Lombrozo\n> On Feb 22, 2015 3:41 AM, \"Eric Lombrozo\" <elombrozo at gmail.com> wrote:\n> \n> > It seems to me we're confusing two completely different motivations for\n> > double-spending. One is the ability to replace a fee, the other is the\n> > ability to replace outputs.\n> >\n> > If the double-spend were to merely add or remove inputs (but keep at least\n> > one input in common, of course), it seems fairly safe to assume it's the\n> > former, a genuine fee replacement. Even allowing for things like coinjoin,\n> > none of the payees would really care either way.\n> >\n> > Conversely, if at least one of the inputs were kept but none of the\n> > outputs were, we can be confident it's the the latter.\n> >\n> > It is possible to build a wallet that always does the former when doing\n> > fee replacement by using another transaction to create an output with\n> > exactly the additional desired fee.\n> >\n> > If we can clearly distinguish these two cases then the fee replacement\n> > case can be handled by relaying both and letting miners pick one or the\n> > other while the output replacement case could be handled by rewarding\n> > everything to a miner (essentially all outputs are voided...made\n> > unredeemable...and all inputs are added to coinbase) if the miner includes\n> > the two conflicting transactions in the same block.\n> >\n> > Wouldn't this essentially solve the problem?\n> >\n> > - Eric Lombrozo\n> > On Feb 21, 2015 8:09 PM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n> >\n> >> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >> > On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com>\n> >> wrote:\n> >> >> This isn't some theoretical exercise.  Like it or not many use\n> >> >> insecure 0-conf transactions for rapid payments.  Deploying something\n> >> >> that makes 0-conf transactions unusable would have a wide, negative\n> >> >> impact on present day bitcoin payments, thus \"scorched earth\"\n> >>\n> >> > And maybe by maintaining first seen policies we're harming the system\n> >> > in the long term by encouraging people to widely deploy systems based\n> >> > on extremely weak assumptions.\n> >>\n> >> Lacking a coded, reviewed alternative, that's only a platitude.\n> >> Widely used 0-conf payments are where we're at today.  Simply ceasing\n> >> the \"maintaining [of] first seen policies\" alone is simply not a\n> >> realistic option.  The negative impact to today's userbase would be\n> >> huge.\n> >>\n> >> Instant payments need a security upgrade, yes.\n> >>\n> >> --\n> >> Jeff Garzik\n> >> Bitcoin core developer and open source evangelist\n> >> BitPay, Inc.      https://bitpay.com/\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> >> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> >> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> >> Get technology previously reserved for billion-dollar corporations, FREE\n> >>\n> >> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Neil Fincham",
                "date": "2015-03-01T19:05:39",
                "message_text_only": "> Seems like a good deal, what am I missing?\n\nThe disruption caused to every other user or the bitcoin network.\nTransactions unconfirmed, history is rewritten, the poor Byzantine General\nwho sent his soldiers off to battle finds out that his scouts have been\npaid to change their reports.\n\nNeil\n\nOn 2 March 2015 at 06:59, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n> So let's play this out a little.. Let's call it \"Solomon's spend[1]\"\n>\n> Exchange gets hacked, bitcoins move.\n>\n> The exchange has a contract with an insurance company and miners for\n> 'scorched earth' theft response that creates a double-spend of the\n> original transaction.\n>\n> So now there's a 10,000 bitcoin incentive for miners to roll back the\n> chain and start (re)mining the block where the theft occurred.\n>\n> The exchange gets an insurance payout, some miner wins the lottery, and\n> the thief gets nothing. Seems like a good deal, what am I missing?\n>\n> [1] http://en.wikipedia.org/wiki/Judgment_of_Solomon\n>\n> On Sun, Feb 22, 2015 at 04:06:13AM -0800, Eric Lombrozo wrote:\n> > I should note that my proposal does require a change to the consensus\n> > rules...but getting bitcoin to scale will require this no matter what.\n> >\n> > - Eric Lombrozo\n> > On Feb 22, 2015 3:41 AM, \"Eric Lombrozo\" <elombrozo at gmail.com> wrote:\n> >\n> > > It seems to me we're confusing two completely different motivations for\n> > > double-spending. One is the ability to replace a fee, the other is the\n> > > ability to replace outputs.\n> > >\n> > > If the double-spend were to merely add or remove inputs (but keep at\n> least\n> > > one input in common, of course), it seems fairly safe to assume it's\n> the\n> > > former, a genuine fee replacement. Even allowing for things like\n> coinjoin,\n> > > none of the payees would really care either way.\n> > >\n> > > Conversely, if at least one of the inputs were kept but none of the\n> > > outputs were, we can be confident it's the the latter.\n> > >\n> > > It is possible to build a wallet that always does the former when doing\n> > > fee replacement by using another transaction to create an output with\n> > > exactly the additional desired fee.\n> > >\n> > > If we can clearly distinguish these two cases then the fee replacement\n> > > case can be handled by relaying both and letting miners pick one or the\n> > > other while the output replacement case could be handled by rewarding\n> > > everything to a miner (essentially all outputs are voided...made\n> > > unredeemable...and all inputs are added to coinbase) if the miner\n> includes\n> > > the two conflicting transactions in the same block.\n> > >\n> > > Wouldn't this essentially solve the problem?\n> > >\n> > > - Eric Lombrozo\n> > > On Feb 21, 2015 8:09 PM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n> > >\n> > >> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc>\n> wrote:\n> > >> > On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com>\n> > >> wrote:\n> > >> >> This isn't some theoretical exercise.  Like it or not many use\n> > >> >> insecure 0-conf transactions for rapid payments.  Deploying\n> something\n> > >> >> that makes 0-conf transactions unusable would have a wide, negative\n> > >> >> impact on present day bitcoin payments, thus \"scorched earth\"\n> > >>\n> > >> > And maybe by maintaining first seen policies we're harming the\n> system\n> > >> > in the long term by encouraging people to widely deploy systems\n> based\n> > >> > on extremely weak assumptions.\n> > >>\n> > >> Lacking a coded, reviewed alternative, that's only a platitude.\n> > >> Widely used 0-conf payments are where we're at today.  Simply ceasing\n> > >> the \"maintaining [of] first seen policies\" alone is simply not a\n> > >> realistic option.  The negative impact to today's userbase would be\n> > >> huge.\n> > >>\n> > >> Instant payments need a security upgrade, yes.\n> > >>\n> > >> --\n> > >> Jeff Garzik\n> > >> Bitcoin core developer and open source evangelist\n> > >> BitPay, Inc.      https://bitpay.com/\n> > >>\n> > >>\n> > >>\n> ------------------------------------------------------------------------------\n> > >> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> > >> from Actuate! Instantly Supercharge Your Business Reports and\n> Dashboards\n> > >> with Interactivity, Sharing, Native Excel Exports, App Integration &\n> more\n> > >> Get technology previously reserved for billion-dollar corporations,\n> FREE\n> > >>\n> > >>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> > >> _______________________________________________\n> > >> Bitcoin-development mailing list\n> > >> Bitcoin-development at lists.sourceforge.net\n> > >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >>\n> > >\n>\n> >\n> ------------------------------------------------------------------------------\n> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> > with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> > Get technology previously reserved for billion-dollar corporations, FREE\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> --\n>\n> ----------------------------------------------------------------------------\n> Troy Benjegerdes                 'da hozer'\n> hozer at hozed.org\n> 7 elements      earth::water::air::fire::mind::spirit::soul\n> grid.coop\n>\n>       Never pick a fight with someone who buys ink by the barrel,\n>          nor try buy a hacker who makes money by the megahash\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150302/aecaa366/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "replace-by-fee v0.10.0rc4",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Neil Fincham"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 22136
        }
    },
    {
        "title": "[Bitcoin-development] New paper: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies",
        "thread_messages": [
            {
                "author": "Andrew Miller",
                "date": "2015-03-02T16:48:24",
                "message_text_only": "We (Joseph Bonneau, myself Arvind Narayanan, Jeremy Clark, Ed Felten,\nJosh Kroll -- from Stanford, Maryland, Concordia, Princeton) have\nwritten a \u201csystemization\u201d paper about Bitcoin-related research. It\u2019s\ngoing to appear in the Oakland security conference later this year\n(IEEE Security and Privacy) but we wanted to announce a draft to this\ncommunity ahead of time.\n\nhttp://www.jbonneau.com/doc/BMCNKF15-IEEESP-bitcoin.pdf\n\nOne of the main goals of our work is to build a bridge between the\ncomputer science research community and the cryptocurrency community.\nMany of the most interesting ideas and proposals for Bitcoin come from\nthis mailing list and forums/wikis/irc channels, where many academic\nresearchers simply don\u2019t know to look! In fact, we started out by\nscraping all the interesting posts/articles we could find and trying\nto figure out how we could organize them. We hope our paper helps some\nof the best ideas and research questions from the Bitcoin community\nbubble up and inspires researchers to build on them.\n\nWe didn\u2019t limit our scope to Bitcoin, but we also decided not to\nprovide a complete survey of altcoins and other next-generation\ncryptocurrency designs. Instead, we tried to explain all the\ndimensions along which these designs differ from Bitcoin.\n\nThis effort has roughly been in progress over two years, though it\nstopped and restarted several times along the way.\n\nIf anyone has comments or suggestions, we still have a week before the\nfinal version is due, and regardless we plan to continue updating our\nonline version for the forseeable future."
            },
            {
                "author": "Ricardo Filipe",
                "date": "2015-03-03T01:57:49",
                "message_text_only": "As a researcher in a distributed systems group, it is awesome to see\nthese papers flocking up that help convince the supervisors to pay\nmore attention to blockchain technologies.\nthanks for keeping us up to speed.\n\n2015-03-02 16:48 GMT+00:00 Andrew Miller <amiller at cs.umd.edu>:\n> We (Joseph Bonneau, myself Arvind Narayanan, Jeremy Clark, Ed Felten,\n> Josh Kroll -- from Stanford, Maryland, Concordia, Princeton) have\n> written a \u201csystemization\u201d paper about Bitcoin-related research. It\u2019s\n> going to appear in the Oakland security conference later this year\n> (IEEE Security and Privacy) but we wanted to announce a draft to this\n> community ahead of time.\n>\n> http://www.jbonneau.com/doc/BMCNKF15-IEEESP-bitcoin.pdf\n>\n> One of the main goals of our work is to build a bridge between the\n> computer science research community and the cryptocurrency community.\n> Many of the most interesting ideas and proposals for Bitcoin come from\n> this mailing list and forums/wikis/irc channels, where many academic\n> researchers simply don\u2019t know to look! In fact, we started out by\n> scraping all the interesting posts/articles we could find and trying\n> to figure out how we could organize them. We hope our paper helps some\n> of the best ideas and research questions from the Bitcoin community\n> bubble up and inspires researchers to build on them.\n>\n> We didn\u2019t limit our scope to Bitcoin, but we also decided not to\n> provide a complete survey of altcoins and other next-generation\n> cryptocurrency designs. Instead, we tried to explain all the\n> dimensions along which these designs differ from Bitcoin.\n>\n> This effort has roughly been in progress over two years, though it\n> stopped and restarted several times along the way.\n>\n> If anyone has comments or suggestions, we still have a week before the\n> final version is due, and regardless we plan to continue updating our\n> online version for the forseeable future.\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nRicardo Filipe\nGSD/INESC-ID Lisboa"
            },
            {
                "author": "Tim Ruffing",
                "date": "2015-03-04T12:19:43",
                "message_text_only": "This is great to see. \n\nOn Monday 02 March 2015 11:48:24 Andrew Miller wrote:\n> One of the main goals of our work is to build a bridge between the\n> computer science research community and the cryptocurrency community.\n> Many of the most interesting ideas and proposals for Bitcoin come from\n> this mailing list and forums/wikis/irc channels, where many academic\n> researchers simply don\u2019t know to look! \nThis is indeed a problem in the research community. Often ideas from here are \njust overlooked, and e.g., re-invented or not properly acknowledged. Of \ncourse, this is (in almost all cases) not intentionally. It's just difficult to \nkeep track of everything.\n\nYour paper is a definitely the right approach to bring the researchers closer \nto the Bitcoin community.\n\nBest,\nTim"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-04T15:28:53",
                "message_text_only": "Nice, Andrew.\n\nJust one minor point. SPV clients do not need to maintain an ever growing\nlist of PoW solutions. BitcoinJ uses a ring buffer with 5000 headers and\nthus has O(1) disk usage. Re-orgs past the event horizon cannot be\nprocessed but are assumed to be sufficiently rare that manual intervention\nwould be acceptable.\n\nOn Mon, Mar 2, 2015 at 8:48 AM, Andrew Miller <amiller at cs.umd.edu> wrote:\n\n> We (Joseph Bonneau, myself Arvind Narayanan, Jeremy Clark, Ed Felten,\n> Josh Kroll -- from Stanford, Maryland, Concordia, Princeton) have\n> written a \u201csystemization\u201d paper about Bitcoin-related research. It\u2019s\n> going to appear in the Oakland security conference later this year\n> (IEEE Security and Privacy) but we wanted to announce a draft to this\n> community ahead of time.\n>\n> http://www.jbonneau.com/doc/BMCNKF15-IEEESP-bitcoin.pdf\n>\n> One of the main goals of our work is to build a bridge between the\n> computer science research community and the cryptocurrency community.\n> Many of the most interesting ideas and proposals for Bitcoin come from\n> this mailing list and forums/wikis/irc channels, where many academic\n> researchers simply don\u2019t know to look! In fact, we started out by\n> scraping all the interesting posts/articles we could find and trying\n> to figure out how we could organize them. We hope our paper helps some\n> of the best ideas and research questions from the Bitcoin community\n> bubble up and inspires researchers to build on them.\n>\n> We didn\u2019t limit our scope to Bitcoin, but we also decided not to\n> provide a complete survey of altcoins and other next-generation\n> cryptocurrency designs. Instead, we tried to explain all the\n> dimensions along which these designs differ from Bitcoin.\n>\n> This effort has roughly been in progress over two years, though it\n> stopped and restarted several times along the way.\n>\n> If anyone has comments or suggestions, we still have a week before the\n> final version is due, and regardless we plan to continue updating our\n> online version for the forseeable future.\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150304/6dead10b/attachment.html>"
            },
            {
                "author": "Pindar Wong",
                "date": "2015-03-08T12:23:56",
                "message_text_only": "*Spendid* work Andrew (and all the other authors). Well done.\n\nThis is a timely paper that deserves significantly wider circulation and\ncomment.\n\nFWIW, Joichi Ito, from the MIT media Lab, made reference to your work\nduring yesterday's MIT Bitcoin Expo\n<https://www.youtube.com/watch?v=lIgjogLipvk>[@ 2:46:54]\n\np.\n\n\nOn Wed, Mar 4, 2015 at 11:28 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Nice, Andrew.\n>\n> Just one minor point. SPV clients do not need to maintain an ever growing\n> list of PoW solutions. BitcoinJ uses a ring buffer with 5000 headers and\n> thus has O(1) disk usage. Re-orgs past the event horizon cannot be\n> processed but are assumed to be sufficiently rare that manual intervention\n> would be acceptable.\n>\n> On Mon, Mar 2, 2015 at 8:48 AM, Andrew Miller <amiller at cs.umd.edu> wrote:\n>\n>> We (Joseph Bonneau, myself Arvind Narayanan, Jeremy Clark, Ed Felten,\n>> Josh Kroll -- from Stanford, Maryland, Concordia, Princeton) have\n>> written a \u201csystemization\u201d paper about Bitcoin-related research. It\u2019s\n>> going to appear in the Oakland security conference later this year\n>> (IEEE Security and Privacy) but we wanted to announce a draft to this\n>> community ahead of time.\n>>\n>> http://www.jbonneau.com/doc/BMCNKF15-IEEESP-bitcoin.pdf\n>>\n>> One of the main goals of our work is to build a bridge between the\n>> computer science research community and the cryptocurrency community.\n>> Many of the most interesting ideas and proposals for Bitcoin come from\n>> this mailing list and forums/wikis/irc channels, where many academic\n>> researchers simply don\u2019t know to look! In fact, we started out by\n>> scraping all the interesting posts/articles we could find and trying\n>> to figure out how we could organize them. We hope our paper helps some\n>> of the best ideas and research questions from the Bitcoin community\n>> bubble up and inspires researchers to build on them.\n>>\n>> We didn\u2019t limit our scope to Bitcoin, but we also decided not to\n>> provide a complete survey of altcoins and other next-generation\n>> cryptocurrency designs. Instead, we tried to explain all the\n>> dimensions along which these designs differ from Bitcoin.\n>>\n>> This effort has roughly been in progress over two years, though it\n>> stopped and restarted several times along the way.\n>>\n>> If anyone has comments or suggestions, we still have a week before the\n>> final version is due, and regardless we plan to continue updating our\n>> online version for the forseeable future.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub\n>> for all\n>> things parallel software development, from weekly thought leadership\n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150308/204de424/attachment.html>"
            },
            {
                "author": "Stephen Reed",
                "date": "2015-03-05T05:06:15",
                "message_text_only": "You might consider the dimension taken by the cooperative mining approach of AI Coin, an altcoin that will launch April 27. The coin is an embodiment of principles described in my whitepaper last May, \"Bitcoin Cooperative Proof of Stake\". \nhttp://arxiv.org/abs/1405.5741\n\nCurrently we do not use staking, as network-wide algorithmic trustworthiness provides the security directly. Network operations, although highly automated with intelligent software agents, has a human-in-the-loop for oversight.\n\nOur innovation enables immediate settlement of transactions. Peers in our network cooperate, taking turns creating new blocks. There is single version of the blockchain which is appended to by a single peer, and is replicated by the other peers. Our peers wrap Bitcoind instances, controlling transaction and new block routing to form a scalable super peer topology. Peers have self-signed X.509 certificates which encrypt messages and prevent impersonation. The tamper-evident technology that secures Bitcoin's blockchain and transactions is extended to secure the entire network. Inspired by an idea published by Nick Szabo, our peers maintain tamper-evident logs which are replayed, verified and signed by other peers. Aside from the whitepaper, more current technical information can be found on our forum - where I would be glad to answer questions and debate skeptics - instead of responding in this list off topic. \n\nhttp://ai-cointalk.org\n\nI would like thank those here and on IRC who last year encouraged me think outside the box.\n\n-Steve\n\nCTO AI Coin, Inc.\n512.791.7960\nhttp://ai-coin.org\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150305/24526fa2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New paper: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andrew Miller",
                "Mike Hearn",
                "Tim Ruffing",
                "Ricardo Filipe",
                "Pindar Wong",
                "Stephen Reed"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 13646
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin at POS using BIP70, NFC and offline payments - implementer feedback",
        "thread_messages": [
            {
                "author": "Eric Voskuil",
                "date": "2015-03-03T00:54:18",
                "message_text_only": "On 02/26/2015 04:30 AM, Andreas Schildbach wrote:\n> On 02/24/2015 11:41 AM, Mike Hearn wrote:\n>> On 02/23/2015 04:10 PM, Eric Voskuil wrote:\n>>> Does this not also require the BT publication of the script for a P2SH\n>>> address?\n>>\n>> You mean if the URI you're serving is like this?\n>>\n>>    bitcoin:3aBcD........?bt=....\n>>\n>> Yes it would. I guess then, the server would indicate both the script,\n>> and the key within that script that it wanted to use. A bit more complex\n>> but would still work to save URI space.\n> \n> What if the script doesn't use any key at all?\n> \n> Somehow this \"re-using\" the fallback address idea feels less and less\n> appealing to me. I think we should add our own parameter and let go of\n> fallback addresses as soon as possible. If will waste space during the\n> transition period, but after that it should make no difference any more.\n\nAgree. The amount of bitcoin URI space in question isn't a material\nissue when it comes to NFC. The more significant considerations here are\nthe additional BT round trip to establish a session, greater complexity,\nand the potential lack of a correlating address (as you point out above).\n\nOn the other hand I think the approach has merit in a scenario where the\nbitcoin URI is read from a QR code and BT is available (IOW no NFC).\nGeneralizing it to the NFC-based bitcoin URI is the problem.\n\nA much cleaner generalization is to rationalize the two approaches\n*after* the bitcoin URI has been read (from either NFC or QR). In the QR\nscenario the wallet can obtain a verifiable public key from the BT\nterminal (subject to some limitations as discussed above). In the NFC\nscenario the public key is just passed in the URI. The scenarios come\ntogether at the point where they both have the public key (and the mac\naddress).\n\nThis of course implies that the the BT URL scheme, in order to be used\nin both places, would have to allow the public key to be optional. But\nin an NFC tap it would be present and in a QR scan it would not.\n\nQR-BT\nbitcoin:<bitcoin-address>?bts:<mac-address>\n\nNFC-BT\nbitcoin:[bitcoin-address]?bts:<mac-address>/<public-key>\n\nAs you say, this prevents the NFC scenario from perpetuating the\nfallback address as a requirement, which eventually shortens the bitcoin\nURI.\n\nMaking the public key a requirement when used with NFC would simplify\nwallet development for NFC only wallets. But if a wallet supported both\nNFC and QR scanning it wouldn't make much difference. So it's not\nunreasonable to think of it like this:\n\nQR-BT/NFC-BT\nbitcoin:<bitcoin-address>?bts:<mac-address>\nbitcoin:[bitcoin-address]?bts:<mac-address>/<public-key>\n\nThis provides greater generality, but it creates a situation where\nNFC-only wallets need to support the more complex approach, and where\nuse in QR codes would have scanning issues. So I think it's better to\nspecify limits on each as in the first example.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150302/3e8323c8/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin at POS using BIP70, NFC and offline payments - implementer feedback",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Voskuil"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3164
        }
    },
    {
        "title": "[Bitcoin-development] Useless Address attack?",
        "thread_messages": [
            {
                "author": "Thy Shizzle",
                "date": "2015-03-05T01:40:57",
                "message_text_only": "Hi, so just a thought as my node relays addresses etc. If I wanted to really slow down communication over the P2P network, what's stopping me from popping up a heap of dummy nodes that do nothing more than exchange version and relay addresses, except I send addr messages with all 1000 addresses pointing to my useless nodes that never send invs or respond to getdata etc so clients connect to my dumb nodes instead of legit ones. I'm thinking that if I fill up their address pool with enough addresses to dumb nodes and keep them really fresh time wise, it could have a bit of an impact especially if all 8 outbound connections are used up by my dumb nodes right?\n\nI don't want to do this obviously, I'm just thinking about it as I'm building my node, what is there to stop this happening?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150305/1d39ad29/attachment.html>"
            },
            {
                "author": "Kevin Greene",
                "date": "2015-03-05T02:13:38",
                "message_text_only": "Bitcoind protects against this by storing the addresses it has learned\nabout in buckets. The bucket an address is stored in is chosen based on the\nIP of the peer that advertised the addr message, and the address in the\naddr message itself. The idea is that the bucketing is done in a randomized\nway so that no attacker should be able to fill your database with his or\nher own nodes.\n\n>From addrman.h\n<https://github.com/bitcoin/bitcoin/blob/master/src/addrman.h>:\n\n/** Stochastic address manager\n *\n * Design goals:\n *  * Keep the address tables in-memory, and asynchronously dump the entire\nto able in peers.dat.\n *  * Make sure no (localized) attacker can fill the entire table with his\nnodes/addresses.\n *\n * To that end:\n *  * Addresses are organized into buckets.\n *    * Address that have not yet been tried go into 256 \"new\" buckets.\n *      * Based on the address range (/16 for IPv4) of source of the\ninformation, 32 buckets are selected at random\n *      * The actual bucket is chosen from one of these, based on the range\nthe address itself is located.\n *      * One single address can occur in up to 4 different buckets, to\nincrease selection chances for addresses that\n *        are seen frequently. The chance for increasing this multiplicity\ndecreases exponentially.\n *      * When adding a new address to a full bucket, a randomly chosen\nentry (with a bias favoring less recently seen\n *        ones) is removed from it first.\n *    * Addresses of nodes that are known to be accessible go into 64\n\"tried\" buckets.\n *      * Each address range selects at random 4 of these buckets.\n *      * The actual bucket is chosen from one of these, based on the full\naddress.\n *      * When adding a new good address to a full bucket, a randomly\nchosen entry (with a bias favoring less recently\n *        tried ones) is evicted from it, back to the \"new\" buckets.\n *    * Bucket selection is based on cryptographic hashing, using a\nrandomly-generated 256-bit key, which should not\n *      be observable by adversaries.\n *    * Several indexes are kept for high performance. Defining\nDEBUG_ADDRMAN will introduce frequent (and expensive)\n *      consistency checks for the entire data structure.\n */\n\nOn Wed, Mar 4, 2015 at 5:40 PM, Thy Shizzle <thashiznets at yahoo.com.au>\nwrote:\n\n> Hi, so just a thought as my node relays addresses etc. If I wanted to\n> really slow down communication over the P2P network, what's stopping me\n> from popping up a heap of dummy nodes that do nothing more than exchange\n> version and relay addresses, except I send addr messages with all 1000\n> addresses pointing to my useless nodes that never send invs or respond to\n> getdata etc so clients connect to my dumb nodes instead of legit ones. I'm\n> thinking that if I fill up their address pool with enough addresses to dumb\n> nodes and keep them really fresh time wise, it could have a bit of an\n> impact especially if all 8 outbound connections are used up by my dumb\n> nodes right?\n>\n> I don't want to do this obviously, I'm just thinking about it as I'm\n> building my node, what is there to stop this happening?\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150304/536a50fe/attachment.html>"
            },
            {
                "author": "Kevin Greene",
                "date": "2015-03-05T02:16:07",
                "message_text_only": "Also (I am fuzzy on the details for this), Bitcoind will detect when a node\nis misbehaving and (I believe) it will blacklist misbehaving nodes for a\nperiod of time so it doesn't continually keep trying to connect to tarpit\nnodes, for example.\n\nOn Wed, Mar 4, 2015 at 6:13 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n\n> Bitcoind protects against this by storing the addresses it has learned\n> about in buckets. The bucket an address is stored in is chosen based on the\n> IP of the peer that advertised the addr message, and the address in the\n> addr message itself. The idea is that the bucketing is done in a randomized\n> way so that no attacker should be able to fill your database with his or\n> her own nodes.\n>\n> From addrman.h\n> <https://github.com/bitcoin/bitcoin/blob/master/src/addrman.h>:\n>\n> /** Stochastic address manager\n>  *\n>  * Design goals:\n>  *  * Keep the address tables in-memory, and asynchronously dump the\n> entire to able in peers.dat.\n>  *  * Make sure no (localized) attacker can fill the entire table with his\n> nodes/addresses.\n>  *\n>  * To that end:\n>  *  * Addresses are organized into buckets.\n>  *    * Address that have not yet been tried go into 256 \"new\" buckets.\n>  *      * Based on the address range (/16 for IPv4) of source of the\n> information, 32 buckets are selected at random\n>  *      * The actual bucket is chosen from one of these, based on the\n> range the address itself is located.\n>  *      * One single address can occur in up to 4 different buckets, to\n> increase selection chances for addresses that\n>  *        are seen frequently. The chance for increasing this multiplicity\n> decreases exponentially.\n>  *      * When adding a new address to a full bucket, a randomly chosen\n> entry (with a bias favoring less recently seen\n>  *        ones) is removed from it first.\n>  *    * Addresses of nodes that are known to be accessible go into 64\n> \"tried\" buckets.\n>  *      * Each address range selects at random 4 of these buckets.\n>  *      * The actual bucket is chosen from one of these, based on the full\n> address.\n>  *      * When adding a new good address to a full bucket, a randomly\n> chosen entry (with a bias favoring less recently\n>  *        tried ones) is evicted from it, back to the \"new\" buckets.\n>  *    * Bucket selection is based on cryptographic hashing, using a\n> randomly-generated 256-bit key, which should not\n>  *      be observable by adversaries.\n>  *    * Several indexes are kept for high performance. Defining\n> DEBUG_ADDRMAN will introduce frequent (and expensive)\n>  *      consistency checks for the entire data structure.\n>  */\n>\n> On Wed, Mar 4, 2015 at 5:40 PM, Thy Shizzle <thashiznets at yahoo.com.au>\n> wrote:\n>\n>> Hi, so just a thought as my node relays addresses etc. If I wanted to\n>> really slow down communication over the P2P network, what's stopping me\n>> from popping up a heap of dummy nodes that do nothing more than exchange\n>> version and relay addresses, except I send addr messages with all 1000\n>> addresses pointing to my useless nodes that never send invs or respond to\n>> getdata etc so clients connect to my dumb nodes instead of legit ones. I'm\n>> thinking that if I fill up their address pool with enough addresses to dumb\n>> nodes and keep them really fresh time wise, it could have a bit of an\n>> impact especially if all 8 outbound connections are used up by my dumb\n>> nodes right?\n>>\n>> I don't want to do this obviously, I'm just thinking about it as I'm\n>> building my node, what is there to stop this happening?\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub\n>> for all\n>> things parallel software development, from weekly thought leadership\n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150304/12fbe50e/attachment.html>"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-05T03:18:54",
                "message_text_only": "Interesting!\nThanks Kevin, I now need to research this and include such protections in my node.\u00a0\nAlso (I am fuzzy on the details for this), Bitcoind will detect when a node is misbehaving and (I believe) it will blacklist misbehaving nodes for a period of time so it doesn't continually keep trying to connect to tarpit nodes, for example.\nOn Wed, Mar 4, 2015 at 6:13 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n\nBitcoind protects against this by storing the addresses it has learned about in buckets. The bucket an address is stored in is chosen based on the IP of the peer that advertised the addr message, and the address in the addr message itself. The idea is that the bucketing is done in a randomized way so that no attacker should be able to fill your database with his or her own nodes.\n>From addrman.h:\n/** Stochastic address manager\u00a0*\u00a0* Design goals:\u00a0* \u00a0* Keep the address tables in-memory, and asynchronously dump the entire to able in peers.dat.\u00a0* \u00a0* Make sure no (localized) attacker can fill the entire table with his nodes/addresses.\u00a0*\u00a0* To that end:\u00a0* \u00a0* Addresses are organized into buckets.\u00a0* \u00a0 \u00a0* Address that have not yet been tried go into 256 \"new\" buckets.\u00a0* \u00a0 \u00a0 \u00a0* Based on the address range (/16 for IPv4) of source of the information, 32 buckets are selected at random\u00a0* \u00a0 \u00a0 \u00a0* The actual bucket is chosen from one of these, based on the range the address itself is located.\u00a0* \u00a0 \u00a0 \u00a0* One single address can occur in up to 4 different buckets, to increase selection chances for addresses that\u00a0* \u00a0 \u00a0 \u00a0 \u00a0are seen frequently. The chance for increasing this multiplicity decreases exponentially.\u00a0* \u00a0 \u00a0 \u00a0* When adding a new address to a full bucket, a randomly chosen entry (with a bias favoring less recently seen\u00a0* \u00a0 \u00a0 \u00a0 \u00a0ones) is removed from it first.\u00a0* \u00a0 \u00a0* Addresses of nodes that are known to be accessible go into 64 \"tried\" buckets.\u00a0* \u00a0 \u00a0 \u00a0* Each address range selects at random 4 of these buckets.\u00a0* \u00a0 \u00a0 \u00a0* The actual bucket is chosen from one of these, based on the full address.\u00a0* \u00a0 \u00a0 \u00a0* When adding a new good address to a full bucket, a randomly chosen entry (with a bias favoring less recently\u00a0* \u00a0 \u00a0 \u00a0 \u00a0tried ones) is evicted from it, back to the \"new\" buckets.\u00a0* \u00a0 \u00a0* Bucket selection is based on cryptographic hashing, using a randomly-generated 256-bit key, which should not\u00a0* \u00a0 \u00a0 \u00a0be observable by adversaries.\u00a0* \u00a0 \u00a0* Several indexes are kept for high performance. Defining DEBUG_ADDRMAN will introduce frequent (and expensive)\u00a0* \u00a0 \u00a0 \u00a0consistency checks for the entire data structure.\u00a0*/\nOn Wed, Mar 4, 2015 at 5:40 PM, Thy Shizzle <thashiznets at yahoo.com.au> wrote:\n\n Hi, so just a thought as my node relays addresses etc. If I wanted to really slow down communication over the P2P network, what's stopping me from popping up a heap of dummy nodes that do nothing more than exchange version and relay addresses, except I send addr messages with all 1000 addresses pointing to my useless nodes that never send invs or respond to getdata etc so clients connect to my dumb nodes instead of legit ones. I'm thinking that if I fill up their address pool with enough addresses to dumb nodes and keep them really fresh time wise, it could have a bit of an impact especially if all 8 outbound connections are used up by my dumb nodes right?\n\nI don't want to do this obviously, I'm just thinking about it as I'm building my node, what is there to stop this happening?\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the\nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150305/757e7714/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Useless Address attack?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin Greene",
                "Thy Shizzle"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 13548
        }
    },
    {
        "title": "[Bitcoin-development] bip44 GPG identities - POC demo",
        "thread_messages": [
            {
                "author": "Mem Wallet",
                "date": "2015-03-07T15:53:37",
                "message_text_only": "If anyone is interested in using a bip44 Wallet to generate\ndeterministic GPG identities, I have implemented a demonstration in\njavascript.\n\nhttp://memwallet.info/bip44ext/test.html\n\nthis allows a user to manage a GPG identity for encryption\nand signing with zero bytes of permanent storage. (on tails for example)\n\n\nPaper is here still:\n\nhttps://github.com/taelfrinn/bip44extention/blob/master/README.md\n\nOne minor correction added which specifies that the smallest S value\nshould be used, to prevent different ecdsa implementations from creating\nnon-canonical/identical outputs.\n\ncomments welcome\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150307/fd2ce6b9/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-03-08T01:34:38",
                "message_text_only": "On 07/03/15 16:53, Mem Wallet wrote:\n> this allows a user to manage a GPG identity for encryption\n> and signing with zero bytes of permanent storage. (on tails for example)\n\nHi!\n\nAs an author of BIP44 I don't think that you should use BIP44 for this\nand a new BIP number should be allocated. To me it does not make much\nsense to create GPG key hierarchy per Bitcoin account, but rather create\na GPG key hierarchy per device/master seed.\n\nI am currently in process of implementing a SignIdentity message for\nTREZOR, which will be used for HTTPS/SSH/etc. logins.\n\nSee PoC here:\nhttps://github.com/trezor/trezor-emu/commit/9f612c286cc7b8268ebaec4a36757e1c19548717\n\nThe idea is to derive the BIP32 path from HTTPS/SSH URI (by hashing it\nand use m/46'/a'/b'/c'/d' where a,b,c,d are first 4*32 bits of the hash)\nand use that to derive the private key. This scheme might work for GPG\nkeys (just use gpg://user@host.com for the URI) as well.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Natanael",
                "date": "2015-03-08T08:20:31",
                "message_text_only": "Den 8 mar 2015 02:36 skrev \"Pavol Rusnak\" <stick at gk2.sk>:\n>\n> On 07/03/15 16:53, Mem Wallet wrote:\n[...]\n> I am currently in process of implementing a SignIdentity message for\n> TREZOR, which will be used for HTTPS/SSH/etc. logins.\n>\n> See PoC here:\n>\nhttps://github.com/trezor/trezor-emu/commit/9f612c286cc7b8268ebaec4a36757e1c19548717\n>\n> The idea is to derive the BIP32 path from HTTPS/SSH URI (by hashing it\n> and use m/46'/a'/b'/c'/d' where a,b,c,d are first 4*32 bits of the hash)\n> and use that to derive the private key. This scheme might work for GPG\n> keys (just use gpg://user@host.com for the URI) as well.\n\nReminds me of FIDO's U2F protocol.\n\nhttp://fidoalliance.org/specifications\nhttps://www.yubico.com/products/yubikey-hardware/fido-u2f-security-key/\n\nIt ties into the browser SSL session to make sure only the correct server\ncan get the correct response for the challenge-response protocol, so that\ncredentials phishing is blocked and worthless. A unique keypair is\ngenerated for each service for privacy, so that you can't easily be\nidentified across services from the usage of the device alone (thus safe\nfor people with multiple pseudonyms).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150308/df137ccd/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bip44 GPG identities - POC demo",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pavol Rusnak",
                "Natanael",
                "Mem Wallet"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3126
        }
    },
    {
        "title": "[Bitcoin-development] BIP for standard multi-signature P2SH addresses",
        "thread_messages": [
            {
                "author": "Thomas Kerin",
                "date": "2015-03-11T11:45:29",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHi all,\n\nI just created a PR on bitcoin/bips for a proposed standard for creating\nstandard multisignature P2SH addresses given m, and a set of public keys.\n\nhttps://github.com/bitcoin/bips/pull/146\n\nI used BIP0090 as a place-holder, but I would like to request a BIP\nnumber for this now.\n\nAll the best,\n\n- -- \nThomas Kerin\n- -------------------------\n\nMy PGP key can be found here\n<http://pgp.mit.edu/pks/lookup?op=get&search=0x3F0D2F83A2966155>\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQJ8BAEBCgBmBQJVACrVXxSAAAAAAC4AKGlzc3Vlci1mcHJAbm90YXRpb25zLm9w\nZW5wZ3AuZmlmdGhob3JzZW1hbi5uZXQ2MzI1MzM4QjJGOTU5OEUzREMzQzc0MzAz\nRjBEMkY4M0EyOTY2MTU1AAoJED8NL4OilmFVkGgQAIUpyA3PsNjCA99W1HwFI7Ra\n+g+JTtXBdhJSvVpv67TlaPZzp4LP7rRW/U1Nv0JYvhpQZTsV/xcMSKpy56d3S50M\nYvxwy51Aco1LEPC1vuiE2aJ8lDwCrXJMxJwfdBp6iNwf0huZNrsqZNKUHwMepePj\nPYlGBkyfnp7QXo0ZkYBCJ2yerir5emKap3AibijRtkTrq6K1+YRk/9UZHllZSmmk\n/B8n6xy/+v65uoAriVwKkX7H0bXmNTjleMzXbm/+Zhh9qfEnp2zqGmBIk5ooV5x4\n3Flb76EYAMXibfAQ2+NPoCiPxCDIEWIsWqyzOC9zWX1QZN55qT3s/p7olYtaYheD\nmf2xZ2pI/cIxpiYGfFEn4C/l0dOCNFLfElgsFcn4RsqRE41Grm+MGAPrf7S5bstp\nTPIALOoVShucHaMvD/6sdK51hC54MKktNDtzTIumnWtOMwTy9qbELIcNvD8DaFe8\n7FVZ7Vndj2FfXCNBF2EHzmy4D4+BE2YZ07pLQVUrc79oidUTs/099PsnUNOEYz0l\nY4IL/5qJMep9PJlj+IlbfXFX0zfTLJF7vJgjYMybr0iKP66iTtuHc46QFxTRyIhC\ndMLXbSqm9X5zEc1j9Q50dSE5rqIT3/gkQe7nWFwf4xC7hlLAXSm8HuqwRSkZdP19\n2byvsvoZ+4D4drXHXXpi\n=QU8i\n-----END PGP SIGNATURE-----\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/9a51df90/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-11T17:16:47",
                "message_text_only": "bitcoinj also uses this convention.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150311/402fedba/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-11T20:16:13",
                "message_text_only": "On Wed, Mar 11, 2015 at 11:45 AM, Thomas Kerin <me at thomaskerin.io> wrote:\n> I used BIP0090 as a place-holder, but I would like to request a BIP number\n> for this now.\n\nWe have had repeated problems in the past with people working on and\ncirculating prior draft proposals squatting on each others numbers,\nand each demanding access to the same numbers. As a matter of\nprocedure I will not assign squatted numbers, but also discussion\nshould come in advance of number assignment; general subject here\nseems reasonable but many proposals are withdrawn by the party\ntendering them after further discussion shows the effort to be without\npublic interest or actually subsumed by other functionality. :)\n\nProposals should not be called \"BIP[nn]\" until they're actually a BIP.\n  Feel free to call it bip-kerin-multisignature or any other\nplaceholder name that won't be confused with a finished BIP for\ndrafting.\n\nIf there is any public documentation on the process which caused you\nspecific confusion, please feel free to point me at it and I'll be\nsure to fix it! Sorry for any confusion there."
            },
            {
                "author": "Pindar Wong",
                "date": "2015-03-11T23:24:59",
                "message_text_only": "Hi,\n\nPerhaps at some point consider introducing something akin to a\n'Bitcoin-Draft' (BD) status with some autoexpiry period?\n\nI understand that the Internet Engineering Task Force (IETF)\n<http://www.ietf.org>  has the concept of 'Internet Drafts\" (ID)\n<http://www.ietf.org/ietf-ftp/1id-guidelines.txt> and this looks like it\nhas worked for them so far.\n\nm2c.\n\np.\n\n\nOn Thu, Mar 12, 2015 at 4:16 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Mar 11, 2015 at 11:45 AM, Thomas Kerin <me at thomaskerin.io> wrote:\n> > I used BIP0090 as a place-holder, but I would like to request a BIP\n> number\n> > for this now.\n>\n> We have had repeated problems in the past with people working on and\n> circulating prior draft proposals squatting on each others numbers,\n> and each demanding access to the same numbers. As a matter of\n> procedure I will not assign squatted numbers, but also discussion\n> should come in advance of number assignment; general subject here\n> seems reasonable but many proposals are withdrawn by the party\n> tendering them after further discussion shows the effort to be without\n> public interest or actually subsumed by other functionality. :)\n>\n> Proposals should not be called \"BIP[nn]\" until they're actually a BIP.\n>   Feel free to call it bip-kerin-multisignature or any other\n> placeholder name that won't be confused with a finished BIP for\n> drafting.\n>\n> If there is any public documentation on the process which caused you\n> specific confusion, please feel free to point me at it and I'll be\n> sure to fix it! Sorry for any confusion there.\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/d757f7fa/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-11T23:34:41",
                "message_text_only": "On Wed, Mar 11, 2015 at 11:24 PM, Pindar Wong <pindar.wong at gmail.com> wrote:\n> Perhaps at some point consider introducing something akin to a\n> 'Bitcoin-Draft' (BD) status with some autoexpiry period?\n>\n> I understand that the Internet Engineering Task Force (IETF)  has the\n> concept of 'Internet Drafts\" (ID) and this looks like it has worked for them\n> so far.\n\nThats more or less what posting to the list is supposed to be.\nCreating a draft document requires no approval, beyond filling out the\nright form.\n\nPerhaps calling out that as a distinct step would be better, indeed."
            },
            {
                "author": "Pindar Wong",
                "date": "2015-03-11T23:50:08",
                "message_text_only": "Understood... perhaps just add something like:\n\n'After copy-editing and acceptance,* a BIP number is assigned* and it will\nbe published here.'?\n\nhttps://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals\n\np.\n\n\nOn Thu, Mar 12, 2015 at 7:34 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Mar 11, 2015 at 11:24 PM, Pindar Wong <pindar.wong at gmail.com>\n> wrote:\n> > Perhaps at some point consider introducing something akin to a\n> > 'Bitcoin-Draft' (BD) status with some autoexpiry period?\n> >\n> > I understand that the Internet Engineering Task Force (IETF)  has the\n> > concept of 'Internet Drafts\" (ID) and this looks like it has worked for\n> them\n> > so far.\n>\n> Thats more or less what posting to the list is supposed to be.\n> Creating a draft document requires no approval, beyond filling out the\n> right form.\n>\n> Perhaps calling out that as a distinct step would be better, indeed.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/35027fd0/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2015-03-11T23:11:27",
                "message_text_only": "ACK.  CryptoCorp uses this method for our external signer service.\n\nOn 2015-03-11 04:45 AM, Thomas Kerin wrote:\n> \n> Hi all,\n> \n> I just created a PR on bitcoin/bips for a proposed standard for creating\n> standard multisignature P2SH addresses given m, and a set of public keys.\n> \n> https://github.com/bitcoin/bips/pull/146\n> \n> I used BIP0090 as a place-holder, but I would like to request a BIP\n> number for this now.\n> \n> All the best,\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \ndevrandom / Miron\n\n-- \ndevrandom / Miron"
            }
        ],
        "thread_summary": {
            "title": "BIP for standard multi-signature P2SH addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thomas Kerin",
                "Mike Hearn",
                "Gregory Maxwell",
                "devrandom",
                "Pindar Wong"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 8189
        }
    },
    {
        "title": "[Bitcoin-development] Testnet3",
        "thread_messages": [
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T03:54:18",
                "message_text_only": "Hi, so I have my .NET node communicating on the P2P network just fine, so I figured as I'll now start looking at making and validating transactions etc I should probably migrate to test net. Now I see that we are up to the third generation testnet testnet3, and I am sending my messages now using packet magic 0x0b110907 and I'm using Wireshark and I can confirm that my messages are going out with that packet magic.\nNow what is interesting is that when I try connect to a test node obtained from DNS seed testnet-seed.bitcoin.petertodd.org, I send it a version message with the testnet3 packet magic, yet I get no verack or version in response???? In fact, the only thing I get back is a ping and then the connection is severed by the\u00a0remote node.\nWhat is going on? Also, it works fine with the\u00a0mainnet packet magic value of 0x0f9beb4d9 and I am debuging my code and ensuring it is looking for the testnet3 packet magic, but I am not getting a response from the node?\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/9272a63e/attachment.html>"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T06:36:02",
                "message_text_only": "Strangely enough, it has started to work properly and I didn't even touch my code just had it sitting there in the loop/ping circuit it was performing and capturing with wireshark.....that is quite odd!\n\n\"Hi, so I have my .NET node communicating on the P2P network just fine, so I figured as I'll now start looking at making and validating transactions etc I should probably migrate to test net. Now I see that we are up to the third generation testnet testnet3, and I am sending my messages now using packet magic 0x0b110907 and I'm using Wireshark and I can confirm that my messages are going out with that packet magic.\nNow what is interesting is that when I try connect to a test node obtained from DNS seed testnet-seed.bitcoin.petertodd.org, I send it a version message with the testnet3 packet magic, yet I get no verack or version in response???? In fact, the only thing I get back is a ping and then the connection is severed by the\u00a0remote node.\nWhat is going on? Also, it works fine with the\u00a0mainnet packet magic value of 0x0f9beb4d9 and I am debuging my code and ensuring it is looking for the testnet3 packet magic, but I am not getting a response from the node?\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/59ebeaf7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Testnet3",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thy Shizzle"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2514
        }
    },
    {
        "title": "[Bitcoin-development] Broken Threading",
        "thread_messages": [
            {
                "author": "Thy Shizzle",
                "date": "2015-03-12T11:23:16",
                "message_text_only": "Yes apologies for the broken threading, it was the result of me auto forwarding between mail providers etc.\n\nTo fix this issue I have created this new dedicated outlook account (thyshizzle at outlook.com) that I shall use for all my subscriptions here and I am unsubscribing the yahoo address. This should solve this issue going forward :)\n \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150312/cc4b0b02/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Broken Threading",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thy Shizzle"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 535
        }
    },
    {
        "title": "[Bitcoin-development] BIP32 Index Randomisation",
        "thread_messages": [
            {
                "author": "Matias Alejo Garcia",
                "date": "2015-03-13T03:48:05",
                "message_text_only": "Hello everyone,\n\nWe are working on bitcore-wallet-server (BWS), a HD multisig wallet\n'facilitator'. We have a couple of questions regarding BIP32 path usage,\nand we would love to have feedback from you before moving forward.\n\nCurrently the BWS instances hold the set of extended public keys of the\nwallet's peers to be able to derive  addresses.\n\nSince this is a problem from the privacy point of view, we thought using\npseudo-random  BIP32 paths, with a seed only known be the peers, so the\nserver will be able to verify that addresses  submitted by peers belong to\nthe wallet, but will not be able to derive future wallet addresses.\n\nThe workflow would be something like:\n\n```\nPeer >   getCurrentIndex\n\n< Server [index]\n\nPeer:\n  pathSeed = PRNG(seed, index);\n\nPeer > createAddress(index, pathSeed);\n\nServer:\n  derives the address and add it to the wallet.\n\n< Server  new address\n\nPeer: Verifies the address and inform it the user.\n```\n\nThis way, accessing server data won't reveal future wallet addresses. The\nseed (only known by the peers) could\nbe derived from hashes of their xprivs, so wallet funds can still be\nrecover with:\n  1) The complete set of xprivs\n  2) The quorum of xprivs + the complete set of xpubs + the address seed.\n\nThanks a lot in advance for any comment on this schema.\n\nmat\u00edas\n\n-- \nBitPay.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/af2f95d0/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-13T04:01:45",
                "message_text_only": "This seems overly complicated to me, unless I'm missing something.\n\nInstead, I think you should just give the server the master pubkey P\nonly without the chaincode.\n\n\nThen when you transact you generate the address in whatever manner you\nlike and tell the server the scalar value iL which the user computes\nas\n\niL = HMAC-SHA512(Key = cpar, Data = serP(Kpar) || ser32(i))[first 32\nbyes],  (per BIP 32).\n\nand the server computes P + iL*G  and checks agreement with the address.\n\nIt would be inaccurate to call this private, as the server still\nlearns this particular relation. (and really users should _not_ be\nusing the same chaincode with different parties... as it exacerbates\nthe private key leak risk), but its certainly more private than giving\npeople the chain code.\n\nThe approach I suggest is also not gratuitously incompatible with\nhardened derivation, which is what parties should be doing when they\ndon't actually need a third party to generate future addresses for\nthem without their cooperation (as appears to be the case here).\n\n\n\n\n\n\n\n\n\n\nOn Fri, Mar 13, 2015 at 3:48 AM, Matias Alejo Garcia <matias at bitpay.com> wrote:\n>\n> Hello everyone,\n>\n> We are working on bitcore-wallet-server (BWS), a HD multisig wallet\n> 'facilitator'. We have a couple of questions regarding BIP32 path usage, and\n> we would love to have feedback from you before moving forward.\n>\n> Currently the BWS instances hold the set of extended public keys of the\n> wallet's peers to be able to derive  addresses.\n>\n> Since this is a problem from the privacy point of view, we thought using\n> pseudo-random  BIP32 paths, with a seed only known be the peers, so the\n> server will be able to verify that addresses  submitted by peers belong to\n> the wallet, but will not be able to derive future wallet addresses.\n>\n> The workflow would be something like:\n>\n> ```\n> Peer >   getCurrentIndex\n>\n> < Server [index]\n>\n> Peer:\n>   pathSeed = PRNG(seed, index);\n>\n> Peer > createAddress(index, pathSeed);\n>\n> Server:\n>   derives the address and add it to the wallet.\n>\n> < Server  new address\n>\n> Peer: Verifies the address and inform it the user.\n> ```\n>\n> This way, accessing server data won't reveal future wallet addresses. The\n> seed (only known by the peers) could\n> be derived from hashes of their xprivs, so wallet funds can still be recover\n> with:\n>   1) The complete set of xprivs\n>   2) The quorum of xprivs + the complete set of xpubs + the address seed.\n>\n> Thanks a lot in advance for any comment on this schema.\n>\n> mat\u00edas\n>\n> --\n> BitPay.com\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T16:40:27",
                "message_text_only": "Hey Matias,\n\nWe are working on bitcore-wallet-server (BWS), a HD multisig wallet\n> 'facilitator'.\n> Currently the BWS instances hold the set of extended public keys of the\n> wallet's peers to be able to derive  addresses.\n>\n\nCould you describe what exactly BWS does? It sounds like the server doesn't\nhave to actually derive the keys itself for any particular purpose beyond\nknowing the addresses are a part of the wallet. Could the server work if it\ndidn't even know that, and was just a bucket of arbitrary addresses with\nthe clients themselves deriving the addresses?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/047fe284/attachment.html>"
            },
            {
                "author": "Matias Alejo Garcia",
                "date": "2015-03-13T18:01:03",
                "message_text_only": "> Could you describe what exactly BWS does?\n\nSure. BWS tasks are:\n\n* Coordinate Transaction proposals in multisignature wallets:  provide\nan 'always connected' node to distribute pending transaction proposals\n and receive the signatures from peers.\n* Coordinate and store BIP32 derivation indexes. (If the BWS\ndisappear, peer can still access the funds by scanning the blockchain,\nbut having the index in a common accessable point in useful).\n* Access the blockchain and provide functions like: `getBalance` and\n`getTxHistory` to peers.\n* Allow agents to notify incoming funds / or transaction proposals to peers.\n\nBWS is designed to be extremely easy to setup and run. BitPay will\nprovide a public BWS instance, but companies and individuals can run\ntheir own for privacy and security reasons.\n\n> It sounds like the server doesn't have to actually derive the keys itself for any particular purpose\n> beyond knowing the addresses are a part of the wallet. Could the server work if it didn't even\n> know that, and was just a bucket of arbitrary addresses with the clients themselves deriving the\n> addresses?\n\nWe have evaluated  BWS  not having the extended public keys (and it is\nstill an open possibility) but the main drawback we found is that BWS\nwill have no way to verify addresses sent by the peers (*).\n\nA peer could send a fake address to BWS and then functions like\n'getBalance' or 'txHistory' will be broken. Of course, the peers could\nverify the addresses on getTxHistory or getBalance (by Address) but we\nalso want to allow thin-clients and agents with lower level of trust\n(than the server) that can notify the wallet balance and incoming\ntransaction to peers using, for example, mobile push notifications.\n\n(*):  Gregory Maxwell proposed an schema for doing this with the \"not\nextended\" pubkeys, that we need to evaluate. That could be the best\nsolution."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T18:04:57",
                "message_text_only": "It sounds like the main issue is this is a web wallet server of some kind.\nIf the clients were SPV then they'd be checking their own balances and\ndownloading their own tx history, which would mean the coordination tasks\ncould be done by storing encrypted blobs on the server rather than the\nserver itself having insight into what's going on (see: Subspace).\n\nSo whilst you might be able to use some scheme to avoid the server knowing\nthe xpubkey, if the server still knows all addresses and all transactions\nbecause the clients are web wallets ..... is there any point? It seems like\nmaybe going from server knows everything to server knows 95% of everything:\nmaybe not worth the engineering cost.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/42a1bcee/attachment.html>"
            },
            {
                "author": "Matias Alejo Garcia",
                "date": "2015-03-13T20:26:32",
                "message_text_only": "> It sounds like the main issue is this is a web wallet server of some kind.\n> If the clients were SPV then they'd be checking their own balances and\n> downloading their own tx history, which would mean the coordination tasks\n> could be done by storing encrypted blobs on the server rather than the\n> server itself having insight into what's going on (see: Subspace).\n\nYou are killing us Mike! :) We really don't like to think that BWS is\na webwallet. Note\nthat private keys are not stored (not even encrypted) at the server. Addresses\ncan be generated offline, funds received and transferred by the peers\nwithout accessing\nBWS.\n\nCurrently Copay uses the encrypted blob idea (checks balances and tx\nhistory thought Insight), but after working with Copay for ~6 months\nwe think having some visibility of the wallet by the multisig\nfacilitator will make the user experience much better (e.g: mobile\nnotifications).\n\nThanks for the Subspace reference, we will definitely check it.\n\n> So whilst you might be able to use some scheme to avoid the server knowing\n> the xpubkey, if the server still knows all addresses and all transactions\n> because the clients are web wallets ..... is there any point? It seems like\n> maybe going from server knows everything to server knows 95% of everything:\n> maybe not worth the engineering cost.\n\nInteresting point. IMO, if we can prevent the server from having the xpubs keys\nit would be valuable: It will give us more flexibility for future\nfeatures, and if the server is compromised future addresses will not\nbe known by the attacker, but of course we need to evaluate the cost.\n\nmat\u00edas\n\n\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nBitPay.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T21:34:31",
                "message_text_only": ">\n> You are killing us Mike! :) We really don't like to think that BWS is\n> a webwallet. Note\n> that private keys are not stored (not even encrypted) at the server.\n\n\nSure, sorry, by web wallet I meant a blockchain.info/CoPay type setup where\nthe client has the private keys and signs txns, but otherwise relies on the\nserver for learning about the wallet contents. I tend to call wallets where\nthe server has the private key BitBanks but I don't know if anyone else\nuses this terminology. It might just be a personal quirk of my own ;)\n\n\n> we think having some visibility of the wallet by the multisig\n> facilitator will make the user experience much better (e.g: mobile\n> notifications).\n>\n\nFair enough. Yes, push notifications to mobiles in a decentralised way is\nrather a hard problem.\n\nI think what Gregory suggested is then the best approach for you to do what\nyou want. Whether it's worth the additional complexity is something I don't\nhave any feedback on, only you can judge that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/0e155bb2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP32 Index Randomisation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matias Alejo Garcia",
                "Mike Hearn",
                "Gregory Maxwell"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 11670
        }
    },
    {
        "title": "[Bitcoin-development] Proof of Payment",
        "thread_messages": [
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-03-13T19:29:42",
                "message_text_only": "Hi all,\n\nI've been thinking about how a person can prove that she has made a\npayment. I came up with an idea I call Proof of Payment (PoP) and I would\nhighly appreciate your comments. Has something like this been discussed\nsomewhere before?\n\n*Use cases*\n\nThere are several scenarios in which it would be useful to prove that you\nhave paid for something. For example:\n\n   - A pre-paid hotel room where your PoP functions as a key to the door.\n   - An online video rental service where you pay for a video and watch it\n   on any device.\n   - An ad-sign where you pay in advance for e.g. 2-weeks exclusivity.\n   During this period you can upload new content to the sign whenever you like\n   using PoP.\n   - A lottery where all participants pay to the same address, and the\n   winner of the T-shirt is selected among the transactions to that address.\n   You exchange the T-shirt for a PoP for the winning transaction.\n\nThese use cases can be achieved without any personal information (no\naccounts, no e-mails, etc) being involved.\nDesirable properties:\n\n   1. A PoP should be generated on demand.\n   2. It should only be usable once to avoid issues due to theft.\n   3. It should be able to create a PoP for any payment, regardless of\n   script type (P2SH, P2PKH, etc.).\n\nCurrent methods of proving a payment, as I know of:\n\n   - BIP0070, The PaymentRequest together with the transactions fulfilling\n   the payment makes some sort of proof. However, it does not meet 1 or 2 and\n   it obviously only meets 3 if the payment is made through BIP0070. Also,\n   there's no standard way to request/provide the proof.\n   - Signing messages, chosen by the entity that the proof is provided to,\n   with the private keys used to sign the transaction. This could meet 1 and 2\n   but probably not 3. This is not standardized either.\n\n*Proof of Payment, the data structure*\n\nA proof of payment for a transaction T, PoP(T), is used to prove that one\nhas ownership of the credentials needed to unlock all the inputs of T. It\nhas the exact same structure as a bitcoin transaction with the same inputs\nas T and with a single OP_RETURN output:\n\nOP_RETURN PoP <txid> <nonce>\n\n| Field     | Size [B] | Description                        |\n|-----------|----------|------------------------------------|\n| PoP       | 3        | Literal identifying this as a PoP  |\n| <txid>    | 32       | The transaction to Prove           |\n| <nonce>   | 5        | Unsigned integer                   |\n\nThe PoP is signed using the same signing process that is used for bitcoin\ntransactions. The purpose of the nonce is to make it harder to use a stolen\nPoP. Once the PoP has reached the destination, that PoP is useless since\nthe destination will generate a new nonce for every PoP.\n\n*Proof of Payment, the process*\n\n   1. A proof of payment request is sent from the server to the wallet. The\n   request contains:\n      1. a random nonce\n      2. a destination where to send the PoP, for example a https URL\n      3. data hinting the wallet which transaction to create a proof for.\n      For example:\n      - txid, if known by the server\n         - PaymentRequest.PaymentDetails.merchant_data (in case of a\n         BIP0070 payment)\n         - amount\n         - label, message or other information from a BIP0021 URL\n      2. The wallet identifies the transaction T, if possible. Otherwise\n   asks the user to select among the ones that fit the hints in 1.3.\n   3. The wallet checks that T is on the blockchain, meaning all the inputs\n   are spent.\n   4. The wallet creates an unsigned PoP (UPoP) for T, and asks the user to\n   sign it.\n   5. The user confirms\n   6. The UPoP(T) is signed by the wallet, creating PoP(T).\n   7. The PoP is sent to the destination in 1.2.\n   8. The server receiving the PoP validates it and responds with \u201cvalid\u201d\n   or \u201cinvalid\u201d\n   9. The wallet displays the response in some way to the user.\n\nRemarks:\n\n   - The method of transferring the PoP request at step 1 is not very well\n   thought through, but I think we can extend BIP0021 to cater for this. For\n   example read a URI, representing a PoP request, using QR code or NFC. A\n   more advanced approach would be to extend BIP0070.\n   - The nonce must be randomly generated by the server for every new PoP\n   request.\n\n*Validating a PoP*\n\nThe server needs to validate the PoP and reply with \u201cvalid\u201d or \u201cinvalid\u201d.\nThat process is outlined below:\n\n   1. Check the format of the PoP. It must pass normal transaction checks,\n   except for the inputs being already spent.\n   2. Check the output script. It must conform to the OP_RETURN output\n   format outlined above.\n   3. Check that the nonce is the same as the one you requested.\n   4. Check that the txid in the output is the transaction you actually\n   want proof for. If you don\u2019t know what transaction you want proof for,\n   check that the transaction actually pays for the product/service you\n   deliver (in the video rental case, find the transaction among all payments\n   for that specific video).\n   5. Check that the inputs of the PoP are exactly the same as in\n   transaction T.\n   6. Check the signatures of all the inputs, as would be done on a normal\n   transaction.\n   7. If the signatures are valid, the PoP is valid.\n\n*Security issues*\n\n   - Someone can intercept the PoP-request and change the destination so\n   that the user sends the PoP to the bad actor.\n   - Someone can intercept the PoP-request and change for example the txid\n   to trick the user to sign a PoP for another transaction than the intended.\n   This can of course be avoided by actually looking at the UPoP before\n   signing it. The bad actor could also set hints for a transaction that the\n   user didn\u2019t make, resulting in a broken service.\n   - Someone can steal a PoP and try to use the service hoping to get a\n   matching nonce. Probability per try: 1/(2^40). The server should have\n   mechanism for detecting a brute force attack of this kind, or at least slow\n   down the process by delaying the PoP request by some 100 ms or so.\n   - Even if a wallet has no funds it might still be valuable as a\n   generator for PoPs. This makes it important to keep the security of the\n   wallet after it has been emptied.\n\nThe first two issues are the same as for traditional bitcoin payments. They\ncould be mitigated by using secure connections and possibly also extending\nBIP0070 to support PoPs.\n\n*Further work*\n\n   - Figure out how to make use of, and extend, BIP0070 for the purpose of\n   PoPs\n   - Define an extension for BIP0021 to support PoP requests (something\n   along the lines of BIP0072)\n   - Implement a proof-of-concept\n   - Possibly propose BIPs for the different parts.\n\nLooking forward to reading your comments\nRegards,\nKalle Rosenbaum\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/0c9b5dab/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-03-13T20:30:01",
                "message_text_only": "Den 13 mar 2015 20:57 skrev \"Kalle Rosenbaum\" <kalle at rosenbaum.se>:\n>\n> Hi all,\n>\n> I've been thinking about how a person can prove that she has made a\npayment. I came up with an idea I call Proof of Payment (PoP) and I would\nhighly appreciate your comments. Has something like this been discussed\nsomewhere before?\n>\n> Use cases\n>\n> There are several scenarios in which it would be useful to prove that you\nhave paid for something. For example:\n> A pre-paid hotel room where your PoP functions as a key to the door.\n> An online video rental service where you pay for a video and watch it on\nany device.\n> An ad-sign where you pay in advance for e.g. 2-weeks exclusivity. During\nthis period you can upload new content to the sign whenever you like using\nPoP.\n> A lottery where all participants pay to the same address, and the winner\nof the T-shirt is selected among the transactions to that address. You\nexchange the T-shirt for a PoP for the winning transaction.\n>\n> These use cases can be achieved without any personal information (no\naccounts, no e-mails, etc) being involved.\n>\n> Desirable properties:\n> A PoP should be generated on demand.\n> It should only be usable once to avoid issues due to theft.\n> It should be able to create a PoP for any payment, regardless of script\ntype (P2SH, P2PKH, etc.).\n\nRelevant: https://idemix.wordpress.com/\n\nAnonymous Credentials allows an issuer to declare that you have certain\nrights. For example, upon paying the service provider could issue you the\ncredentials for using their service up until a certain date.\n\nWhen challenged to prove a statement about what credentials you have, you\ncan prove the fact that you've got the right credentials without revealing\nanything else. You don't even reveal you're the same person as the last\ntime, if you prove the right to access a VPN multiple times there's no data\nin it that links the different sessions together.\n\nThe main difference is that issuance of Anonymous Credentials aren't\n\"atomic\" with the payment transactions, which can open up the risk for\ncertain types of dishonest behavior by the seller. You could however use a\nproof in court of having paid for the credentials but not getting them\nissued to you (maybe throw in usage of Factom to log issuance of\ncredentials?). With this construction of using both these methods, you add\nstronger privacy for the usage of the services while simultaneously keeping\na degree of accountability for the payment.\n\nThe Zerocoin developers also got a paper on a blockchain version,\n\"Distributed Anonymous Credentials\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/d6964566/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T21:31:29",
                "message_text_only": "Hi Kalle,\n\nI think you're thinking along the right lines, but I am skeptical that this\nprotocol adds much. A saved payment request is meant to be unique per\ntransaction e.g. because the destination address is unique for that payment\n(for privacy reasons). Where would you store the signed payment request?\nProbably in the wallet. You could just extract the metadata that's useful\nfor UI rendering into a separate structure and then encrypt the original\nfull payment request under the wallet key. At least this is how I imagine\nit would work.\n\nSo then, if someone can steal a payment request they can probably steal the\nwallet signing keys too, and thus signing a challenge with the wallet keys\ndoesn't add much. It means the wallet doesn't have to store the\nPaymentRequest encrypted. But AFAICT that's about all it does.\n\nDo you agree with this analysis?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/5687acba/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-03-13T21:47:12",
                "message_text_only": "Hi\n\nNo I don't agree with the analysis.\n\nYes, the PaymentRequest can be stored with the same security as the private\nkeys are stored. The big difference is that the keys never leave the\nwallet. As soon as that PaymentRequest leaves the wallet on its way to the\nhotel server, it is up for grabs which makes it inappropriate for use as a\nproof of payment other than for resolving disputes and other one-time stuff.\n\n/Kalle\n\n\n2015-03-13 22:31 GMT+01:00 Mike Hearn <mike at plan99.net>:\n\n> Hi Kalle,\n>\n> I think you're thinking along the right lines, but I am skeptical that\n> this protocol adds much. A saved payment request is meant to be unique per\n> transaction e.g. because the destination address is unique for that payment\n> (for privacy reasons). Where would you store the signed payment request?\n> Probably in the wallet. You could just extract the metadata that's useful\n> for UI rendering into a separate structure and then encrypt the original\n> full payment request under the wallet key. At least this is how I imagine\n> it would work.\n>\n> So then, if someone can steal a payment request they can probably steal\n> the wallet signing keys too, and thus signing a challenge with the wallet\n> keys doesn't add much. It means the wallet doesn't have to store the\n> PaymentRequest encrypted. But AFAICT that's about all it does.\n>\n> Do you agree with this analysis?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/fe954efb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T22:03:23",
                "message_text_only": ">\n> As soon as that PaymentRequest leaves the wallet on its way to the hotel\n> server, it is up for grabs\n>\n\nIs it? I'm assuming TLS is being used here. And the hotel server also has a\ncopy of the PaymentRequest, as the hotel actually issued it and that's how\nthey're deciding the receipt is valid. So I don't know how it could be\nstolen unless the attacker can break TLS.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/7fb548a6/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-03-14T09:28:01",
                "message_text_only": ">\n> Actually, the security of the PaymetRequest is pretty much out of your\n>> control as soon as the PaymentRequest is created on the server. You have no\n>> idea what the hotel does with it. Also if it's stored in the hotel server I\n>> have to trust the hotel to keep it safe for me.\n>>\n>\n> Well, yes. But if the hotel itself is hacked then the whole process is\n> meaningless, no? The hacker could just make the hotel think the proof of\n> payment is correct even though it was never made at all, for instance.\n>\n\nMaybe the hotel example is not perfect for this discussion. Let's instead\nassume that the server holds yearly subscriptions to some expensive video\nservice. If that service stores PaymentRequests for all their subscribers,\nand accept them as proof of payment, that would be similar to storing\nusername and (possibly hashed) passwords for all subscribers. If all the\nPaymentRequests for all users are stolen, then they have to shut down all\naccounts if they discover the theft. If they don't discover the theft the\n\"accounts\" are out in the wild, for sale, for blackmail, etc.\n\nWouldn't it be better if the service don't accept the reusable\nPaymentRequests as proof, and instead accept a proof generated on demand,\nat the very moment it is needed, and that it is only usable once? From a\nusability perspective there is no difference; The users simply need access\nthe service and authorize the proof being sent to the server.\n\n\n>\n>\n>> Another thing is that you assume BIP0070 is used for payments, which\n>> isn't necessarily is the case.\n>>\n>\n> It's just a convenient place to put things. There are lots of useful\n> features that need BIP 70. I hope eventually all wallets will support it.\n>\n\nI also hope BIP0070 will take off. It would greatly improve the user\nexperience. But even then, all payments are not BIP0070. BIP0070 is\nprimarily for merchants who have the skills, time and money to use\ncertificates. I don't think a lottery at the local church would want to set\nup a secure BIP0070 server, but they still might want to use bitcoin for\ntheir lottery.\n\nRegards,\nKalle\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150314/c5d37d17/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-03-14T18:16:39",
                "message_text_only": "Den 14 mar 2015 00:59 skrev \"Patrick Mccorry (PGR)\" <\npatrick.mccorry at newcastle.ac.uk>:\n>\n> That all seems more complicated than it needs to be - the service you are\npaying knows that it had received a payment from some public key Q\n(regardless of script type, as all scripts require a public key).\n\nThe service knows it had received a payment from Q1, Q2,...,Qn. A tx may\nhave multiple inputs and each input may have several public keys.\n\n>\n> So I want to rent a movie, they send me a challenge and I respond with a\nzero knowledge proof to demonstrate that I am the owner of Q, and as they\nknow that Q made a payment - then there is a proof of payment - as this is\nprovided by the time stamped transaction on the blockchain - in this sense\nyou are bootstrapping trust from the blockchain.\n>\n\nOk. Without knowing much about zero knowledge proof, i guess you'd need a\nchallenge/response for each of the keys Q1,..,Qn. If we settle on only a\nsingle key, what key from what input should we use? One input may be a\nmultisig (2 of 3) input. Is it ok to settle on only one of the multisig\nkeys? Probably not. I'd say that we need 2 of 3 signatures (just as in a\nbitcoin transaction), and not necessarily the same two that made the\npayment.\n\n> For all of your scenarios, a simple challenge-response scheme would work.\nAdding an op_return makes the payment transaction worse as it is now\ndistinguishable on the blockchain - you want use information that is\nalready available on that transaction.\n\nI'm not sure I follow. Do you mean that it's a problem that the PoP itself\nreveals what transaction I'm proving? Well, maybe it is a problem under\nsome circumstances. The least you can do to protect yourself from revealing\ninformation to third party is to communicate over secure channels. Could\nyou please elaborate on this?\n\nAnyway, if both the client and the server knows what transaction to prove\n(ad-sign example) you are right that the tx info is kind of redundant. But\nif we don't send the tx hints from server to client, the client user must\nmanually select the transaction to prove which makes the user experience\nworse.\n\nThank you very much for your comments,\n\n/Kalle\n\n>\n> Sent from my iPhone\n>\n> On 13 Mar 2015, at 19:58, Kalle Rosenbaum <kalle at rosenbaum.se> wrote:\n>\n>> Hi all,\n>>\n>> I've been thinking about how a person can prove that she has made a\npayment. I came up with an idea I call Proof of Payment (PoP) and I would\nhighly appreciate your comments. Has something like this been discussed\nsomewhere before?\n>>\n>> Use cases\n>>\n>> There are several scenarios in which it would be useful to prove that\nyou have paid for something. For example:\n>> A pre-paid hotel room where your PoP functions as a key to the door.\n>> An online video rental service where you pay for a video and watch it on\nany device.\n>> An ad-sign where you pay in advance for e.g. 2-weeks exclusivity. During\nthis period you can upload new content to the sign whenever you like using\nPoP.\n>> A lottery where all participants pay to the same address, and the winner\nof the T-shirt is selected among the transactions to that address. You\nexchange the T-shirt for a PoP for the winning transaction.\n>>\n>> These use cases can be achieved without any personal information (no\naccounts, no e-mails, etc) being involved.\n>>\n>> Desirable properties:\n>> A PoP should be generated on demand.\n>> It should only be usable once to avoid issues due to theft.\n>> It should be able to create a PoP for any payment, regardless of script\ntype (P2SH, P2PKH, etc.).\n>> Current methods of proving a payment, as I know of:\n>> BIP0070, The PaymentRequest together with the transactions fulfilling\nthe payment makes some sort of proof. However, it does not meet 1 or 2 and\nit obviously only meets 3 if the payment is made through BIP0070. Also,\nthere's no standard way to request/provide the proof.\n>> Signing messages, chosen by the entity that the proof is provided to,\nwith the private keys used to sign the transaction. This could meet 1 and 2\nbut probably not 3. This is not standardized either.\n>> Proof of Payment, the data structure\n>>\n>> A proof of payment for a transaction T, PoP(T), is used to prove that\none has ownership of the credentials needed to unlock all the inputs of T.\nIt has the exact same structure as a bitcoin transaction with the same\ninputs as T and with a single OP_RETURN output:\n>>\n>> OP_RETURN PoP <txid> <nonce>\n>>\n>> | Field     | Size [B] | Description                        |\n>> |-----------|----------|------------------------------------|\n>> | PoP       | 3        | Literal identifying this as a PoP  |\n>> | <txid>    | 32       | The transaction to Prove           |\n>> | <nonce>   | 5        | Unsigned integer                   |\n>>\n>> The PoP is signed using the same signing process that is used for\nbitcoin transactions. The purpose of the nonce is to make it harder to use\na stolen PoP. Once the PoP has reached the destination, that PoP is useless\nsince the destination will generate a new nonce for every PoP.\n>>\n>> Proof of Payment, the process\n>> A proof of payment request is sent from the server to the wallet. The\nrequest contains:\n>> a random nonce\n>> a destination where to send the PoP, for example a https URL\n>> data hinting the wallet which transaction to create a proof for. For\nexample:\n>> txid, if known by the server\n>> PaymentRequest.PaymentDetails.merchant_data (in case of a BIP0070\npayment)\n>> amount\n>> label, message or other information from a BIP0021 URL\n>> The wallet identifies the transaction T, if possible. Otherwise asks the\nuser to select among the ones that fit the hints in 1.3.\n>> The wallet checks that T is on the blockchain, meaning all the inputs\nare spent.\n>> The wallet creates an unsigned PoP (UPoP) for T, and asks the user to\nsign it.\n>> The user confirms\n>> The UPoP(T) is signed by the wallet, creating PoP(T).\n>> The PoP is sent to the destination in 1.2.\n>> The server receiving the PoP validates it and responds with \u201cvalid\u201d or\n\u201cinvalid\u201d\n>> The wallet displays the response in some way to the user.\n>> Remarks:\n>> The method of transferring the PoP request at step 1 is not very well\nthought through, but I think we can extend BIP0021 to cater for this. For\nexample read a URI, representing a PoP request, using QR code or NFC. A\nmore advanced approach would be to extend BIP0070.\n>> The nonce must be randomly generated by the server for every new PoP\nrequest.\n>> Validating a PoP\n>>\n>> The server needs to validate the PoP and reply with \u201cvalid\u201d or\n\u201cinvalid\u201d. That process is outlined below:\n>> Check the format of the PoP. It must pass normal transaction checks,\nexcept for the inputs being already spent.\n>> Check the output script. It must conform to the OP_RETURN output format\noutlined above.\n>> Check that the nonce is the same as the one you requested.\n>> Check that the txid in the output is the transaction you actually want\nproof for. If you don\u2019t know what transaction you want proof for, check\nthat the transaction actually pays for the product/service you deliver (in\nthe video rental case, find the transaction among all payments for that\nspecific video).\n>> Check that the inputs of the PoP are exactly the same as in transaction\nT.\n>> Check the signatures of all the inputs, as would be done on a normal\ntransaction.\n>> If the signatures are valid, the PoP is valid.\n>> Security issues\n>> Someone can intercept the PoP-request and change the destination so that\nthe user sends the PoP to the bad actor.\n>> Someone can intercept the PoP-request and change for example the txid to\ntrick the user to sign a PoP for another transaction than the intended.\nThis can of course be avoided by actually looking at the UPoP before\nsigning it. The bad actor could also set hints for a transaction that the\nuser didn\u2019t make, resulting in a broken service.\n>> Someone can steal a PoP and try to use the service hoping to get a\nmatching nonce. Probability per try: 1/(2^40). The server should have\nmechanism for detecting a brute force attack of this kind, or at least slow\ndown the process by delaying the PoP request by some 100 ms or so.\n>> Even if a wallet has no funds it might still be valuable as a generator\nfor PoPs. This makes it important to keep the security of the wallet after\nit has been emptied.\n>> The first two issues are the same as for traditional bitcoin payments.\nThey could be mitigated by using secure connections and possibly also\nextending BIP0070 to support PoPs.\n>>\n>> Further work\n>> Figure out how to make use of, and extend, BIP0070 for the purpose of\nPoPs\n>> Define an extension for BIP0021 to support PoP requests (something along\nthe lines of BIP0072)\n>> Implement a proof-of-concept\n>> Possibly propose BIPs for the different parts.\n>> Looking forward to reading your comments\n>> Regards,\n>> Kalle Rosenbaum\n>>\n>>\n------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub\nfor all\n>> things parallel software development, from weekly thought leadership\nblogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150314/d819a395/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proof of Payment",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kalle Rosenbaum",
                "Mike Hearn",
                "Natanael"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 24719
        }
    },
    {
        "title": "[Bitcoin-development] Criminal complaints against \"network disruption as a service\" startups",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2015-03-13T20:01:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nGiven the recent news about Chainanalysis\n(https://www.reddit.com/r/Bitcoin/comments/2yvy6b/a_regulatory_compliance_service_is_sybil/),\nand other companies who are disrupting the Bitcoin network\n(https://www.reddit.com/r/Bitcoin/comments/2we0d9/in_an_unrelated_thread_a_bitcoin_dev_claimed/copzt3x)\nit might be worth reviewing the terms of the Computer Fraud and Abuse\nAct and similar legislation in other countries.\n\nAlthough it's not possible to stop network attacks by making them\nillegal, it's certainly possible to stop traditionally funded\ncompanies from engaging in that activity. Note there exist no\nVC-funded DDoS as a service companies operating openly.\n\nIt's also worth discussing ways to make the responsibilities of\nnetwork peers more explicit in the protocol, so that when an entity\ndecides to access the network for purposes other than for what full\nnode operators made connection slots available that behavior will be a\nmore obvious violation of various anti-hacking laws.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVA0IFAAoJECpf2nDq2eYjp0IP+wVsW69xOpFIX4yRTHrEQYh7\nMCPM7OTkIay/O13TSewbxTRPww9Z6vOpmrDkFlWGYKyrLWyqUGwcKqOscE8r3P3U\nxdV5ACppol5HXra/bykxuaXJWF/yTM7PybFNQ2Ary0X41CFrOUITsO8SwWDl8jBu\nGtRgbWdALA6IQeeRLVQmMo3zC/uShOplOh/HrS2z9ZtXSm3rNkLzhnUWfznbixb0\n9C1yvIM5VOwoNcRKt7uoX6cl4mFsBO3Gfjz4rr5gABerTltBlRk4c3jnUDUlQiFC\ncppX9eaEYMLR7y0gHWnmzWcFW7LFwMR2isyJ79O2cpUpYNzbfp0fWetM1WVAMFSK\n7hyUlwVx4WgaVRT5hDb6QPHHvzCYjYq+19+9/uChh9P3s3QkKuFJUVYwHQ+wnruK\nhPS3/vb7Tmt1eLTUeno4RRyJJ7likHsNA2bxWSG9rDezTownkSVZe2BQh3GIZOBg\nH8Nu2IDWK4pHJaCiswW4jfDsucuYiP7978p8ZFbZbymeflsXz1qyUHSVm9kngfZn\nsYUK4rgRsdrPpong0nqlmWcQW3VgmNO1tw5gmUqWTxQLnrCxgqnSdT7srzAw1ZaS\nYIAaB1rBy8k7QyDCOyIsIV+n1H26ZBa8PrqdRExlz6PuWcywjuEbcIfEl9QSURA+\npLuNJ+uQN+JBjKokmaSQ\n=ZO1/\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/0fe22b36/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T21:48:17",
                "message_text_only": "That would be rather new and tricky legal territory.\n\nBut even putting the legal issues to one side, there are definitional\nissues.\n\nFor instance if the Chainalysis nodes started following the protocol specs\nbetter and became just regular nodes that happen to keep logs, would that\nstill be a violation? If so, what about blockchain.info? It'd be shooting\nourselves in the foot to try and forbid block explorers given how useful\nthey are.\n\nIf someone non-maliciously runs some nodes with debug logging turned on,\nand makes full system backups every night, and keeps those backups for\nyears, are they in violation of whatever pseudo-law is involved?\n\nI think it's a bit early to think about these things right now. Michael\nGr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers for a long time. I'd be\ninterested to know their thoughts on all of this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/b0d0085a/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-03-13T22:03:24",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 03/13/2015 04:48 PM, Mike Hearn wrote:\n> That would be rather new and tricky legal territory.\n> \n> But even putting the legal issues to one side, there are\n> definitional issues.\n> \n> For instance if the Chainalysis nodes started following the\n> protocol specs better and became just regular nodes that happen to\n> keep logs, would that still be a violation? If so, what about\n> blockchain.info? It'd be shooting ourselves in the foot to try and\n> forbid block explorers given how useful they are.\n\nI'm not talking about keeping logs, I mean purporting to be a network\npeer in order to gain a connection slot and then not behaving as one\n(not relaying transactions), thereby depriving the peers to which\noperator actually intends to offer service of the ability to connect.\n\nThat someone wants to run a large number of nodes in order to make\ntheir own logs more saleable, does not mean they are entitled to break\nthe protocol to make other node operators subsidize their log collection.\n\nEspecially if a data collection company is deploying nodes that do not\nrelay and aggressively reconnect after a ban, it seems like they'd\nhave a hard time arguing that they were not knowingly exceeding\nauthorized access.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVA16sAAoJECpf2nDq2eYjxsUP/3ASGcsdGR8IEO7Fk8VghuVp\njwIIM8Bu/WsoWKG76GhuPKs/qC0VC6GXKpGUBVy7bF8uwdhfdSXcyld9MIzIENJF\nI0wMX6B3SjqQG/g0rNZ91Dh3xKIF39/TQdDERM3yiQi1oavAc5TPLReN9ZbyRcVw\nvCfPWorTvrad5INCn/krcEopbI013aW2ryWnkN6sFGinF5Yf4xhrNQbQeGbhlH15\n/XUIBva6/PbUs4HaC+wqJPSUfB4OmcP1ZfXMuPDEmKEWdI+3WqUYF4sNAVOke560\n+RL5qMJIxSUMYMAb3p+025Fn6WOc2wupQzpH/ISkuaI+5+ne54Mx/ZHJg7Z7inov\nWMKfiUS6R8EHrY8IoNpO9uNqsgC+y0vlU3ELqu+gOhFTpMK7pVX2aAek8Qe7hSHy\nGwtG5U6AFubLqyzP9/pBJHnmDG71brsKffAXOePDjXWfLfhy78aeQ3HOnzVhv9QK\nsnmE2C6Ex/tQDUwT9MKTdw59Hy7E7GdQlSPH+MYQKUBlkpWLDGpi7oriBRwvEy4/\nNJCJU9+x7jijD7vrjBE+LSYdIQoZqE240N6teWqVc2wRPM8g+e+kSQqfjdKQdiQY\nwaeKHBKerqRq2EGffeJWV1RIEFtFND1l8zw/5ZQF4w959zLvhk/QPHzxKyTbCM2f\n3DOgEWCJFLsNzpPQ8es2\n=MV9D\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/dafc843f/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T22:08:08",
                "message_text_only": ">\n> I'm not talking about keeping logs, I mean purporting to be a network\n> peer in order to gain a connection slot and then not behaving as one\n> (not relaying transactions)\n\n\nThat definition would include all SPV clients?\n\nI get what you are trying to do. It just seems extremely tricky.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/2f839145/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-03-13T22:16:44",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 03/13/2015 05:08 PM, Mike Hearn wrote:\n> \n> That definition would include all SPV clients?\n\nDon't SPV clients announce their intentions by the act of uploading a\nfilter?\n\n> I get what you are trying to do. It just seems extremely tricky.\n\nCertainly the protocol could be designed in a way that provides\nfiner-grained access controls and connection limits, which would make\nthe situation more clear.\n\nWhat I'd actually like to see is for network users to pay for the node\nresources that they consume, so that anyone who wants to place\nincreased load on the network would compensate node operators for the\nburden:\n\nhttp://bitcoinism.liberty.me/2015/02/09/economic-fallacies-and-the-block-size-limit-part-2-price-discovery/\n\nAbsent that kind of comprehensive solution, problems like this will\ncontinue to recur.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVA2HLAAoJECpf2nDq2eYjcvYP/iqYBxboMmTPLp9Kx3GlBdR/\nIPtCxVoaZQkqrAHlbbED1YHoI7QqaufdPMb9mw8bErFX7E89u4gD93jvx2x+skqW\nKtqIyc5fHe4MgbtGypvE5GjSiqZZIqn7EYzLGVE5ydmO4SKpfodXIIRuQRkZ1fTG\nj0ovFc/bmigS7Cvf3gsMT5oW26IcEaH6mAZ/YU5oVEi1LGff8hUTq90uddOCpoqp\nmIj8MHMdd0yvtihjLwyJPdfT0qTOkbAxHJqwPLoOWzmrN0z1PbU9qcf0aHdDnMlT\n+jWHqHzSxjwyB1bmUhi6vZKVFfd1moOTI3BBj+Jqjc+xaOmXCcyAtpfzq97VITZw\nqhAnYM4unsC0A1GH3fQEJPvoOy0kwyNNtI7z5YOrRJtihCpFSbtULqN9DUmxwgKL\n/0cmOc2SyjgflTiCejazBIJk4Ie+WcV2cbgepdX8USb0tusQs+jn2HMFGUfxywTz\nriy9Ex8Wftl12LAYXSbMQl7GnADYG9t0HIY3JqPAhAzEdPynXUduveatiQyNc6SH\nIqXraTgHj6IFFWB7eLjWuIleyxcFC81qTFNUYxEajGDLbCX00emKiR3RUpVZ/wP7\n8CXcV4zco1y1+va1eD/7eNhTW/Xuf3+KdqJs2reLq23fLV01HA92sRYbgLIxb0Yz\nyBsE+PpY06vrHqoVD/4l\n=Ofbb\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/f9526c56/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-03-13T22:24:05",
                "message_text_only": ">\n> Don't SPV clients announce their intentions by the act of uploading a\n> filter?\n>\n\nWell they don't set NODE_NETWORK, so they don't claim to be providing\nnetwork services. But then I guess the Chainalysis nodes could easily just\nclear that bit flag too.\n\n\n> What I'd actually like to see is for network users to pay for the node\n> resources that they consume\n\n\nIt's not quite pay-as-you-go, but I just posted a scheme for funding of\nnetwork resources using crowdfunding contracts here:\n\nhttps://github.com/bitcoin/bitcoin/issues/5783#issuecomment-79460064\n\nThat comment doesn't have any kind of provision for access control, but\ngroup signatures could be extended in both directions: the server proves it\nwas a part of the group that was funded by the contract, and the client\nproves it was in group that funded the contract, but it's done in a\n(relatively) anonymous way. Then any client can use any node it funded, or\nat least, buy priority access.\n\nBut it's rather complicated. I'd hope that nodes can be like email\naccounts: yes they have a cost but in practice people everyone gets one for\nfree because of random commercial cross-subsidisation, self hosting and\nother things.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/41dda398/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-03-13T22:38:07",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 03/13/2015 05:24 PM, Mike Hearn wrote:\n> Well they don't set NODE_NETWORK, so they don't claim to be\n> providing network services. But then I guess the Chainalysis nodes\n> could easily just clear that bit flag too.\n\nIf a peer claims to provide network services, and does not do so while\nconsuming another node's resources, that might be considered exceeding\nauthorized access.\n\nbitcoind should probably have more fine-grained control over how it\nallocates connection resources between peers vs clients.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVA2bPAAoJECpf2nDq2eYjm/UP/0MZmdEBameT6tnLnebkru5d\nUeHsX6Qikv3qF+i936SkoDylg08PJNWlpApuXC5t52x262V763y9tGV8qqh3vTSf\nLeLeKY1M4mYCjHjegpz3JXzzF9i9OqgWl+0OxGOHDHyp8COfzKzC9FEUP3XBqitb\nswyeS2t0LkzJnXYV8z8pDOxn4pZN0cUaKPvBIRKEUs4PgA4JVpRTM5Rvzi7oOItz\nGHknxH++ja7kfFpgRSJMh3gHu4xhRiHfzGPaszrrrznpubNr42+4ouBy+QDr2XYr\n1AtklROYLySeUtd0yNxeWdeaLIBSTiiDisNkD62MOTr0Zmdnc6M7IefSCqLN4fD9\nwPu5a5h4HI/N/4/+kUhGmW+g5vagKMkCVlUIsG7gpGQJk4HyLElAdmgDToPJTrvr\nhtrd7k5HjjZu8oAt/vYcx15myuQ7VXc7v193g7m3kRRx4rnZ5XCu5BJd92uaOW1e\n9ARhN7hfNQbfVkZw0f+qfG0fzMSAk3aHxpao7topwKARQfYJ++Mry5qAzFfxWred\nIHXHbd4JqafsUJxTqDvm7oVP+l+XqlFkZTGi5u6NjPSeJL0IMFI5NqOepqAqwi0P\nn9tePxN19+TmK2TSGtuzWBNZXcbwujSmvzRnDouxpcTyhRXc5YBbetI4/s0xcAyK\nsQ2dm0SKF4S8MclylelW\n=IpAp\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150313/e4196caf/attachment.bin>"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2015-03-16T08:44:33",
                "message_text_only": "What we were trying to achieve was determining the flow of funds between\ncountries by figuring out which country a transaction originates from.\nTo do that with a certain accuracy you need many nodes. We chose a class C\nIP range as we knew that bitcoin core and others only connect to one node\nin any class C IP range. We were not aware that breadwallet didn't follow\nthis practice. Breadwallet risked getting tar-pitted, but that was not our\nintention and we are sorry about that.\n\nOur nodes DID respond with valid blocks and merkle-blocks and allowed\neveryone connecting to track the blockchain. We did however not relay\ntransactions. The 'service' bit in the version message is not meant for\ntelling whether or how the node relays transactions, it tells whether you\ncan ask for block headers only or full blocks.\n\nMany implementations enforce non standard rules for handling transactions;\nsome nodes ignore transactions with address reuse, some nodes happily\nforward double spends, and some nodes forward neither blocks not\ntransactions. We did blocks but not transactions.\n\nIn hindsight we should have done two things:\n1. relay transactions\n2. advertise address from 'foreign' nodes\n\nBoth would have fixed the problems that breadwallet experienced. My\nunderstanding is that breadwallet now has the same 'class C' rule as\nbitcoind, which would also fix it.\n\nGetting back on the topic of this thread and whether it is illegal, your\nguess is as good as mine. I don't think it is illegal to log incoming\nconnections and make statistical analysis on it. That would more or less\nincriminate anyone who runs a web-server and looks into the access log.\nAt lease one Bitcoin service has been collecting IP addresses for years and\ngiven them to anyone visiting their web-site (you know who) and I believe\nthat this practise is very wrong. We have no intention of giving IP\naddresses away to anyone, but we believe that you are free to make\nstatistics on connection logs when nodes connect to you.\n\nOn a side note: When you make many connections to the network you see lots\nof strange nodes and suspicious patterns. You can be certain that we were\nnot the only ones connected to many nodes.\n\nMy takeaway from this: If nodes that do not relay transactions is a problem\nthen there is stuff to fix.\n\n/Jan\n\nOn Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> That would be rather new and tricky legal territory.\n>\n> But even putting the legal issues to one side, there are definitional\n> issues.\n>\n> For instance if the Chainalysis nodes started following the protocol specs\n> better and became just regular nodes that happen to keep logs, would that\n> still be a violation? If so, what about blockchain.info? It'd be shooting\n> ourselves in the foot to try and forbid block explorers given how useful\n> they are.\n>\n> If someone non-maliciously runs some nodes with debug logging turned on,\n> and makes full system backups every night, and keeps those backups for\n> years, are they in violation of whatever pseudo-law is involved?\n>\n> I think it's a bit early to think about these things right now. Michael\n> Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers for a long time. I'd be\n> interested to know their thoughts on all of this.\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150316/1f5a72c2/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2015-03-16T19:33:06",
                "message_text_only": "Thanks Jan, we added several additional checks for non-standard protocol\nresponses, and also made the client revert to DNS seeding more quickly if\nit runs into trouble, so it's now more robust against sybil/DOS attack. I\nmentioned in the coindesk article that I didn't think what your nodes were\ndoing was intended to be malicious with respect to network disruption. It's\nour job to better handle non-standard or even malicious behavior from\nrandom p2p nodes.\n\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\n\nOn Mon, Mar 16, 2015 at 1:44 AM, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n\n> What we were trying to achieve was determining the flow of funds between\n> countries by figuring out which country a transaction originates from.\n> To do that with a certain accuracy you need many nodes. We chose a class C\n> IP range as we knew that bitcoin core and others only connect to one node\n> in any class C IP range. We were not aware that breadwallet didn't follow\n> this practice. Breadwallet risked getting tar-pitted, but that was not our\n> intention and we are sorry about that.\n>\n> Our nodes DID respond with valid blocks and merkle-blocks and allowed\n> everyone connecting to track the blockchain. We did however not relay\n> transactions. The 'service' bit in the version message is not meant for\n> telling whether or how the node relays transactions, it tells whether you\n> can ask for block headers only or full blocks.\n>\n> Many implementations enforce non standard rules for handling transactions;\n> some nodes ignore transactions with address reuse, some nodes happily\n> forward double spends, and some nodes forward neither blocks not\n> transactions. We did blocks but not transactions.\n>\n> In hindsight we should have done two things:\n> 1. relay transactions\n> 2. advertise address from 'foreign' nodes\n>\n> Both would have fixed the problems that breadwallet experienced. My\n> understanding is that breadwallet now has the same 'class C' rule as\n> bitcoind, which would also fix it.\n>\n> Getting back on the topic of this thread and whether it is illegal, your\n> guess is as good as mine. I don't think it is illegal to log incoming\n> connections and make statistical analysis on it. That would more or less\n> incriminate anyone who runs a web-server and looks into the access log.\n> At lease one Bitcoin service has been collecting IP addresses for years\n> and given them to anyone visiting their web-site (you know who) and I\n> believe that this practise is very wrong. We have no intention of giving IP\n> addresses away to anyone, but we believe that you are free to make\n> statistics on connection logs when nodes connect to you.\n>\n> On a side note: When you make many connections to the network you see lots\n> of strange nodes and suspicious patterns. You can be certain that we were\n> not the only ones connected to many nodes.\n>\n> My takeaway from this: If nodes that do not relay transactions is a\n> problem then there is stuff to fix.\n>\n> /Jan\n>\n> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> That would be rather new and tricky legal territory.\n>>\n>> But even putting the legal issues to one side, there are definitional\n>> issues.\n>>\n>> For instance if the Chainalysis nodes started following the protocol\n>> specs better and became just regular nodes that happen to keep logs, would\n>> that still be a violation? If so, what about blockchain.info? It'd be\n>> shooting ourselves in the foot to try and forbid block explorers given how\n>> useful they are.\n>>\n>> If someone non-maliciously runs some nodes with debug logging turned on,\n>> and makes full system backups every night, and keeps those backups for\n>> years, are they in violation of whatever pseudo-law is involved?\n>>\n>> I think it's a bit early to think about these things right now. Michael\n>> Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers for a long time. I'd be\n>> interested to know their thoughts on all of this.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub\n>> for all\n>> things parallel software development, from weekly thought leadership\n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150316/3bccccf3/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-03-23T02:44:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nIf you (e.g. Chainalysis) or anyone else are doing surveillance on the\nnetwork and gathering information for later use, and whether or not\nthe ultimate purpose is to divulge it to other parties for compliance\npurposes, you can bet that ultimately the tables will be turned on\nyou, and you will be the one having your ass handed to you so to\nspeak, before or after you are served, in legal parlance.  Whether or\nnot the outcome of that is meaningful and beneficial to any concerned\nparties and what is the upshot of it in the end depends on on what you\ndo and just how far you decide to take your ill-advised enterprise.\n\nChainalysis and similar operations would be, IMHO, well advised to\ncease operations.  This doesn't mean they will, but guess what:\n\nShot over the bow, folks.\n\nJan M\u00f8ller:\n> What we were trying to achieve was determining the flow of funds\n> between countries by figuring out which country a transaction\n> originates from. To do that with a certain accuracy you need many\n> nodes. We chose a class C IP range as we knew that bitcoin core and\n> others only connect to one node in any class C IP range. We were\n> not aware that breadwallet didn't follow this practice. Breadwallet\n> risked getting tar-pitted, but that was not our intention and we\n> are sorry about that.\n> \n> Our nodes DID respond with valid blocks and merkle-blocks and\n> allowed everyone connecting to track the blockchain. We did however\n> not relay transactions. The 'service' bit in the version message is\n> not meant for telling whether or how the node relays transactions,\n> it tells whether you can ask for block headers only or full\n> blocks.\n> \n> Many implementations enforce non standard rules for handling\n> transactions; some nodes ignore transactions with address reuse,\n> some nodes happily forward double spends, and some nodes forward\n> neither blocks not transactions. We did blocks but not\n> transactions.\n> \n> In hindsight we should have done two things: 1. relay transactions \n> 2. advertise address from 'foreign' nodes\n> \n> Both would have fixed the problems that breadwallet experienced.\n> My understanding is that breadwallet now has the same 'class C'\n> rule as bitcoind, which would also fix it.\n> \n> Getting back on the topic of this thread and whether it is illegal,\n> your guess is as good as mine. I don't think it is illegal to log\n> incoming connections and make statistical analysis on it. That\n> would more or less incriminate anyone who runs a web-server and\n> looks into the access log. At lease one Bitcoin service has been\n> collecting IP addresses for years and given them to anyone visiting\n> their web-site (you know who) and I believe that this practise is\n> very wrong. We have no intention of giving IP addresses away to\n> anyone, but we believe that you are free to make statistics on\n> connection logs when nodes connect to you.\n> \n> On a side note: When you make many connections to the network you\n> see lots of strange nodes and suspicious patterns. You can be\n> certain that we were not the only ones connected to many nodes.\n> \n> My takeaway from this: If nodes that do not relay transactions is a\n> problem then there is stuff to fix.\n> \n> /Jan\n> \n> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net>\n> wrote:\n> \n>> That would be rather new and tricky legal territory.\n>> \n>> But even putting the legal issues to one side, there are\n>> definitional issues.\n>> \n>> For instance if the Chainalysis nodes started following the\n>> protocol specs better and became just regular nodes that happen\n>> to keep logs, would that still be a violation? If so, what about\n>> blockchain.info? It'd be shooting ourselves in the foot to try\n>> and forbid block explorers given how useful they are.\n>> \n>> If someone non-maliciously runs some nodes with debug logging\n>> turned on, and makes full system backups every night, and keeps\n>> those backups for years, are they in violation of whatever\n>> pseudo-law is involved?\n>> \n>> I think it's a bit early to think about these things right now.\n>> Michael Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers for a\n>> long time. I'd be interested to know their thoughts on all of\n>> this.\n>> \n>> \n>> ------------------------------------------------------------------------------\n>>\n>> \nDive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot\n>> Media, is your hub for all things parallel software development,\n>> from weekly thought leadership blogs to news, videos, case\n>> studies, tutorials and more. Take a look and join the \n>> conversation now. http://goparallel.sourceforge.net/ \n>> _______________________________________________ \n>> Bitcoin-development mailing list \n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJVD34mAAoJEGxwq/inSG8CvrQH/28Rt26oGdo9rS+PaR1fIQ1p\nJwks11Axsmu5x3emTgIz0xUJ6zz/4ERM0LeNLBpfSFwZyLbuCgw1uiJplT+9uPgY\nhPXb9OTNejfWZJjYc3i6rNjf2SNc5E3/4PtgeOI6lI/SsGQ6ineNm6gFjwe8xVpt\nwCLOPetzCukQegXluFZZdALnPDf4H9yAeSsrfX2h2iCBAJ3qd9f1DP7+e6hvr+xr\nPOVBjlRYtnSd/viKJ2IhMbRvnqd86pRNAKEWrjZp0CIkGyY7wh4nqtYErZi4TcOK\nH7yhU8o4/mgTNSIYdLTOSMlRi+nTMPWUD2jvO/Z9i9VTR9afn8E7j7iHD6QPMB0=\n=vdbG\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-23T03:38:20",
                "message_text_only": "I don't believe that at all. Analyzing information publicly available is not illegal. Chainalysis or whatever you call it would be likened to observing who comes and feeds birds at the park everyday. You can sit in the park and observe who feeds the birds, just as you can connect to the Bitcoin P2P network and observe the blocks being formed into the chain and transactions etc. Unless there is some agreement taking place where it is specified that upon connecting to the Bitcoin P2P swarm you agree to a set of terms, however as every node is providing their own \"entry\" into the P2P swarm it becomes really up to the node providing the connection to uphold and enforce the terms of the agreement. If you allow people to connect to you without terms of agreement, you cannot cry foul when they record the data that passes through. To say Chainalysis needs to cease is silly, the whole point of the public blockchain is for Chainalysis, whether it be for the verification of transactions, research or otherwise.\n\n-----Original Message-----\nFrom: \"odinn\" <odinn.cyberguerrilla at riseup.net>\nSent: \u200e23/\u200e03/\u200e2015 1:48 PM\nTo: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] Criminal complaints against \"network disruption as a service\" startups\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nIf you (e.g. Chainalysis) or anyone else are doing surveillance on the\nnetwork and gathering information for later use, and whether or not\nthe ultimate purpose is to divulge it to other parties for compliance\npurposes, you can bet that ultimately the tables will be turned on\nyou, and you will be the one having your ass handed to you so to\nspeak, before or after you are served, in legal parlance.  Whether or\nnot the outcome of that is meaningful and beneficial to any concerned\nparties and what is the upshot of it in the end depends on on what you\ndo and just how far you decide to take your ill-advised enterprise.\n\nChainalysis and similar operations would be, IMHO, well advised to\ncease operations.  This doesn't mean they will, but guess what:\n\nShot over the bow, folks.\n\nJan M\u00f8ller:\n> What we were trying to achieve was determining the flow of funds\n> between countries by figuring out which country a transaction\n> originates from. To do that with a certain accuracy you need many\n> nodes. We chose a class C IP range as we knew that bitcoin core and\n> others only connect to one node in any class C IP range. We were\n> not aware that breadwallet didn't follow this practice. Breadwallet\n> risked getting tar-pitted, but that was not our intention and we\n> are sorry about that.\n> \n> Our nodes DID respond with valid blocks and merkle-blocks and\n> allowed everyone connecting to track the blockchain. We did however\n> not relay transactions. The 'service' bit in the version message is\n> not meant for telling whether or how the node relays transactions,\n> it tells whether you can ask for block headers only or full\n> blocks.\n> \n> Many implementations enforce non standard rules for handling\n> transactions; some nodes ignore transactions with address reuse,\n> some nodes happily forward double spends, and some nodes forward\n> neither blocks not transactions. We did blocks but not\n> transactions.\n> \n> In hindsight we should have done two things: 1. relay transactions \n> 2. advertise address from 'foreign' nodes\n> \n> Both would have fixed the problems that breadwallet experienced.\n> My understanding is that breadwallet now has the same 'class C'\n> rule as bitcoind, which would also fix it.\n> \n> Getting back on the topic of this thread and whether it is illegal,\n> your guess is as good as mine. I don't think it is illegal to log\n> incoming connections and make statistical analysis on it. That\n> would more or less incriminate anyone who runs a web-server and\n> looks into the access log. At lease one Bitcoin service has been\n> collecting IP addresses for years and given them to anyone visiting\n> their web-site (you know who) and I believe that this practise is\n> very wrong. We have no intention of giving IP addresses away to\n> anyone, but we believe that you are free to make statistics on\n> connection logs when nodes connect to you.\n> \n> On a side note: When you make many connections to the network you\n> see lots of strange nodes and suspicious patterns. You can be\n> certain that we were not the only ones connected to many nodes.\n> \n> My takeaway from this: If nodes that do not relay transactions is a\n> problem then there is stuff to fix.\n> \n> /Jan\n> \n> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net>\n> wrote:\n> \n>> That would be rather new and tricky legal territory.\n>> \n>> But even putting the legal issues to one side, there are\n>> definitional issues.\n>> \n>> For instance if the Chainalysis nodes started following the\n>> protocol specs better and became just regular nodes that happen\n>> to keep logs, would that still be a violation? If so, what about\n>> blockchain.info? It'd be shooting ourselves in the foot to try\n>> and forbid block explorers given how useful they are.\n>> \n>> If someone non-maliciously runs some nodes with debug logging\n>> turned on, and makes full system backups every night, and keeps\n>> those backups for years, are they in violation of whatever\n>> pseudo-law is involved?\n>> \n>> I think it's a bit early to think about these things right now.\n>> Michael Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers for a\n>> long time. I'd be interested to know their thoughts on all of\n>> this.\n>> \n>> \n>> ------------------------------------------------------------------------------\n>>\n>> \nDive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot\n>> Media, is your hub for all things parallel software development,\n>> from weekly thought leadership blogs to news, videos, case\n>> studies, tutorials and more. Take a look and join the \n>> conversation now. http://goparallel.sourceforge.net/ \n>> _______________________________________________ \n>> Bitcoin-development mailing list \n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJVD34mAAoJEGxwq/inSG8CvrQH/28Rt26oGdo9rS+PaR1fIQ1p\nJwks11Axsmu5x3emTgIz0xUJ6zz/4ERM0LeNLBpfSFwZyLbuCgw1uiJplT+9uPgY\nhPXb9OTNejfWZJjYc3i6rNjf2SNc5E3/4PtgeOI6lI/SsGQ6ineNm6gFjwe8xVpt\nwCLOPetzCukQegXluFZZdALnPDf4H9yAeSsrfX2h2iCBAJ3qd9f1DP7+e6hvr+xr\nPOVBjlRYtnSd/viKJ2IhMbRvnqd86pRNAKEWrjZp0CIkGyY7wh4nqtYErZi4TcOK\nH7yhU8o4/mgTNSIYdLTOSMlRi+nTMPWUD2jvO/Z9i9VTR9afn8E7j7iHD6QPMB0=\n=vdbG\n-----END PGP SIGNATURE-----\n\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the \nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "odinn",
                "date": "2015-03-23T05:50:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBack to what is Chainalysis and country of their origin, so criminal\ncomplaints against them would likely relate to violation of Swiss\nlaws, as is described here:\nhttps://bitcointalk.org/index.php?topic=978088.msg10774882#msg10774882\n\nIt is fairly obvious that Chainalysis is not merely doing what\nblockchain.info etc. is. Let's not delude ourselves here.\n\nAs stated, it would be advisable for such a firm to cease operations,\nand it would seem that plenty of polite shots over the bow have been\ngiven to Chainalysis, which should now fold up its operation, pack its\nbags, and go back to its hole before trying to serve its masters again\nin another way. Etc.\n\nCorporations similar to Chainalysis which are domiciled in other\ncountries which conduct collection of information in ways that violate\ncountries' laws (there are many countries and each have their own ways\nof interpreting user privacy and what constitutes permissible breach\nand in what circumstances) can indeed be held to legal standards that\nmay result in minimal or severe legal penalties.  It is true that\nanalyzing information that is publicly available, such as that which\nis in a library, is not illegal. But the act of surveillance is.\n(Then there is the question of what sort of surveillance, targeted or\ngeneral, and whether it is limited to the bitcoin network or if it\nmoves beyond that to attempts to correlate with usernames, IDs, IPs,\nand other information available on fora and apparent from services,\nbut I won't get into that here.)  Even if you argue that the manner in\nwhich you are performing your actions is not actually \"surveillance,\"\nor you argue that it is \"legally permissible,\" someone else will\ncertainly come along and make a reasonable argument that you are\nindeed engaging in illegal surveillance.  They may even suggest to a\njudge that you are in the process of constructing a botnet and demand\nthat your domains be seized, and may successfully obtain an ex parte\ntemporary restraining order (TRO) against Chainalysis and similar\ncorporations to have domain(s) seized.  Any and all arguments may be\nadded in here, there are 196 countries in the world today - each with\ntheir own unique laws - (maybe less by the time you read this) and a\nshit-ton of possible legal arguments that can be made by creative\nminds that might want to sue you if you have been surveilling people,\neach different depending on where your surveillance corporation is\ndomiciled.  There are plenty of legal processes available for people\nto do exactly that.  You are indeed subject to having that happen to\nyou if you continue to surveill the network even if you are doing so\non behalf of the state for the purpose of gathering information for a\nstate's compliance initiative.\n\nSo, don't delude yourself, and be happy if all that happens is your\nlittle surveillance initiative has to close its doors (or gets sued if\nit stays open).  Because that is the legal side of things.  The\nextralegal stuff is far worse.  The community is helping you by asking\nyou gently to close up shop and go away. It is a helpful suggestion\nand I believe also a fair warning, again, a shot off the bow.\n\nOn the development side, developers are certainly responsible for\ndoing what they can to resist this kind of surveillance activity.  But\nI have a feeling that will be a different thread which is more\ntechnical and so won't comment on it here, except to say it will\nlikely involve working toward giving the user an anonymity option\nwhich can be exercised as part of any transaction.\n\nThy Shizzle:\n> I don't believe that at all. Analyzing information publicly\n> available is not illegal. Chainalysis or whatever you call it would\n> be likened to observing who comes and feeds birds at the park\n> everyday. You can sit in the park and observe who feeds the birds,\n> just as you can connect to the Bitcoin P2P network and observe the\n> blocks being formed into the chain and transactions etc. Unless\n> there is some agreement taking place where it is specified that\n> upon connecting to the Bitcoin P2P swarm you agree to a set of\n> terms, however as every node is providing their own \"entry\" into\n> the P2P swarm it becomes really up to the node providing the\n> connection to uphold and enforce the terms of the agreement. If you\n> allow people to connect to you without terms of agreement, you\n> cannot cry foul when they record the data that passes through. To\n> say Chainalysis needs to cease is silly, the whole point of the\n> public blockchain is for Chainalysis, whether it be for the\n> verification of transactions, research or otherwise.\n> \n> -----Original Message----- From: \"odinn\"\n> <odinn.cyberguerrilla at riseup.net> Sent: \u200e23/\u200e03/\u200e2015 1:48 PM To:\n> \"bitcoin-development at lists.sourceforge.net\"\n> <bitcoin-development at lists.sourceforge.net> Subject: Re:\n> [Bitcoin-development] Criminal complaints against \"network\n> disruption as a service\" startups\n> \n> If you (e.g. Chainalysis) or anyone else are doing surveillance on\n> the network and gathering information for later use, and whether or\n> not the ultimate purpose is to divulge it to other parties for\n> compliance purposes, you can bet that ultimately the tables will be\n> turned on you, and you will be the one having your ass handed to\n> you so to speak, before or after you are served, in legal parlance.\n> Whether or not the outcome of that is meaningful and beneficial to\n> any concerned parties and what is the upshot of it in the end\n> depends on on what you do and just how far you decide to take your\n> ill-advised enterprise.\n> \n> Chainalysis and similar operations would be, IMHO, well advised to \n> cease operations.  This doesn't mean they will, but guess what:\n> \n> Shot over the bow, folks.\n> \n> Jan M\u00f8ller:\n>> What we were trying to achieve was determining the flow of funds \n>> between countries by figuring out which country a transaction \n>> originates from. To do that with a certain accuracy you need\n>> many nodes. We chose a class C IP range as we knew that bitcoin\n>> core and others only connect to one node in any class C IP range.\n>> We were not aware that breadwallet didn't follow this practice.\n>> Breadwallet risked getting tar-pitted, but that was not our\n>> intention and we are sorry about that.\n> \n>> Our nodes DID respond with valid blocks and merkle-blocks and \n>> allowed everyone connecting to track the blockchain. We did\n>> however not relay transactions. The 'service' bit in the version\n>> message is not meant for telling whether or how the node relays\n>> transactions, it tells whether you can ask for block headers only\n>> or full blocks.\n> \n>> Many implementations enforce non standard rules for handling \n>> transactions; some nodes ignore transactions with address reuse, \n>> some nodes happily forward double spends, and some nodes forward \n>> neither blocks not transactions. We did blocks but not \n>> transactions.\n> \n>> In hindsight we should have done two things: 1. relay\n>> transactions 2. advertise address from 'foreign' nodes\n> \n>> Both would have fixed the problems that breadwallet experienced. \n>> My understanding is that breadwallet now has the same 'class C' \n>> rule as bitcoind, which would also fix it.\n> \n>> Getting back on the topic of this thread and whether it is\n>> illegal, your guess is as good as mine. I don't think it is\n>> illegal to log incoming connections and make statistical analysis\n>> on it. That would more or less incriminate anyone who runs a\n>> web-server and looks into the access log. At lease one Bitcoin\n>> service has been collecting IP addresses for years and given them\n>> to anyone visiting their web-site (you know who) and I believe\n>> that this practise is very wrong. We have no intention of giving\n>> IP addresses away to anyone, but we believe that you are free to\n>> make statistics on connection logs when nodes connect to you.\n> \n>> On a side note: When you make many connections to the network\n>> you see lots of strange nodes and suspicious patterns. You can\n>> be certain that we were not the only ones connected to many\n>> nodes.\n> \n>> My takeaway from this: If nodes that do not relay transactions is\n>> a problem then there is stuff to fix.\n> \n>> /Jan\n> \n>> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net> \n>> wrote:\n> \n>>> That would be rather new and tricky legal territory.\n>>> \n>>> But even putting the legal issues to one side, there are \n>>> definitional issues.\n>>> \n>>> For instance if the Chainalysis nodes started following the \n>>> protocol specs better and became just regular nodes that\n>>> happen to keep logs, would that still be a violation? If so,\n>>> what about blockchain.info? It'd be shooting ourselves in the\n>>> foot to try and forbid block explorers given how useful they\n>>> are.\n>>> \n>>> If someone non-maliciously runs some nodes with debug logging \n>>> turned on, and makes full system backups every night, and\n>>> keeps those backups for years, are they in violation of\n>>> whatever pseudo-law is involved?\n>>> \n>>> I think it's a bit early to think about these things right\n>>> now. Michael Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers\n>>> for a long time. I'd be interested to know their thoughts on\n>>> all of this.\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>>\n>>>\n>\n>>> \nDive into the World of Parallel Programming The Go Parallel Website,\n>>> sponsored by Intel and developed in partnership with Slashdot \n>>> Media, is your hub for all things parallel software\n>>> development, from weekly thought leadership blogs to news,\n>>> videos, case studies, tutorials and more. Take a look and join\n>>> the conversation now. http://goparallel.sourceforge.net/ \n>>> _______________________________________________ \n>>> Bitcoin-development mailing list \n>>> Bitcoin-development at lists.sourceforge.net \n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>\n>>> \n> \n> \n>> ------------------------------------------------------------------------------\n>\n>> \n> \n> Dive into the World of Parallel Programming The Go Parallel\n> Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is\n>> your hub for all things parallel software development, from\n>> weekly thought leadership blogs to news, videos, case studies,\n>> tutorials and more. Take a look and join the conversation now. \n>> http://goparallel.sourceforge.net/\n> \n> \n> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/ \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJVD6mmAAoJEGxwq/inSG8CkLUH/iWvn7kp6KW2fe5RFca1eAmH\nL+5P+kNDzMARIRt8A3CvopoQQMZx44aZ8pMdErUk+78A7oeP/x+scYEkSiXE17Iv\nsaBWv43mO+qFxgVrU7y+9njwLJoywHitBymhLGisi3hv+H7lfIMdPK2dLVThwxel\nbVO0Ga8Y9qDYAwtK23yEOCT7klj5mT0tG50U4HxDpIXaJj8kCnVUC2O1MdYhr1pP\n93cDuhBmXOg7sOLAPpdWVhgfnz0Vm8M0ZWUIK+4FGzpQugWHcmdp3YUDCeczOYzD\nu5zVdAqvdL6qQcWkUcGfkKaAqfJH3u5F2zeQvDUEJeeEz1lWnrsXuT7cCvcp/TU=\n=6io6\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-23T06:10:12",
                "message_text_only": "Oh so you're talking about the criminality of one single entity? So having a quick look, it seems that the issue is they are collecting IPs and that kind of thing as well? So similar to what http://getaddr.bitnodes.io is doing but without the funding from the bitcoin foundation? If you are worried about your IP getting out you're behind a VPN. They can only collect the information made available to them. Botnets etc are completely different because you are forcing control over something you have no right to do. If companies want to sit there and collect publicly available information that you are voluntarily making available to them, why do you care? I can't see how it could be at all criminal. Remembering that most privacy laws relate to information that YOU PROVIDE to an entity during an agreement for service, payment, etc. You are providing this information publicly and they are collecting it from the public domain, not you giving it to them in an agreement, therefore the usual provisions of privacy etc don't apply. If you connect to their scraper node, of course they can log that. How could it possibly be criminal?\n________________________________\nFrom: odinn<mailto:odinn.cyberguerrilla at riseup.net>\nSent: \u200e23/\u200e03/\u200e2015 4:50 PM\nTo: Thy Shizzle<mailto:thyshizzle at outlook.com>\nCc: bitcoin-development at lists.sourceforge.net<mailto:bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] Criminal complaints against \"network disruption as a service\" startups\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBack to what is Chainalysis and country of their origin, so criminal\ncomplaints against them would likely relate to violation of Swiss\nlaws, as is described here:\nhttps://bitcointalk.org/index.php?topic=978088.msg10774882#msg10774882\n\nIt is fairly obvious that Chainalysis is not merely doing what\nblockchain.info etc. is. Let's not delude ourselves here.\n\nAs stated, it would be advisable for such a firm to cease operations,\nand it would seem that plenty of polite shots over the bow have been\ngiven to Chainalysis, which should now fold up its operation, pack its\nbags, and go back to its hole before trying to serve its masters again\nin another way. Etc.\n\nCorporations similar to Chainalysis which are domiciled in other\ncountries which conduct collection of information in ways that violate\ncountries' laws (there are many countries and each have their own ways\nof interpreting user privacy and what constitutes permissible breach\nand in what circumstances) can indeed be held to legal standards that\nmay result in minimal or severe legal penalties.  It is true that\nanalyzing information that is publicly available, such as that which\nis in a library, is not illegal. But the act of surveillance is.\n(Then there is the question of what sort of surveillance, targeted or\ngeneral, and whether it is limited to the bitcoin network or if it\nmoves beyond that to attempts to correlate with usernames, IDs, IPs,\nand other information available on fora and apparent from services,\nbut I won't get into that here.)  Even if you argue that the manner in\nwhich you are performing your actions is not actually \"surveillance,\"\nor you argue that it is \"legally permissible,\" someone else will\ncertainly come along and make a reasonable argument that you are\nindeed engaging in illegal surveillance.  They may even suggest to a\njudge that you are in the process of constructing a botnet and demand\nthat your domains be seized, and may successfully obtain an ex parte\ntemporary restraining order (TRO) against Chainalysis and similar\ncorporations to have domain(s) seized.  Any and all arguments may be\nadded in here, there are 196 countries in the world today - each with\ntheir own unique laws - (maybe less by the time you read this) and a\nshit-ton of possible legal arguments that can be made by creative\nminds that might want to sue you if you have been surveilling people,\neach different depending on where your surveillance corporation is\ndomiciled.  There are plenty of legal processes available for people\nto do exactly that.  You are indeed subject to having that happen to\nyou if you continue to surveill the network even if you are doing so\non behalf of the state for the purpose of gathering information for a\nstate's compliance initiative.\n\nSo, don't delude yourself, and be happy if all that happens is your\nlittle surveillance initiative has to close its doors (or gets sued if\nit stays open).  Because that is the legal side of things.  The\nextralegal stuff is far worse.  The community is helping you by asking\nyou gently to close up shop and go away. It is a helpful suggestion\nand I believe also a fair warning, again, a shot off the bow.\n\nOn the development side, developers are certainly responsible for\ndoing what they can to resist this kind of surveillance activity.  But\nI have a feeling that will be a different thread which is more\ntechnical and so won't comment on it here, except to say it will\nlikely involve working toward giving the user an anonymity option\nwhich can be exercised as part of any transaction.\n\nThy Shizzle:\n> I don't believe that at all. Analyzing information publicly\n> available is not illegal. Chainalysis or whatever you call it would\n> be likened to observing who comes and feeds birds at the park\n> everyday. You can sit in the park and observe who feeds the birds,\n> just as you can connect to the Bitcoin P2P network and observe the\n> blocks being formed into the chain and transactions etc. Unless\n> there is some agreement taking place where it is specified that\n> upon connecting to the Bitcoin P2P swarm you agree to a set of\n> terms, however as every node is providing their own \"entry\" into\n> the P2P swarm it becomes really up to the node providing the\n> connection to uphold and enforce the terms of the agreement. If you\n> allow people to connect to you without terms of agreement, you\n> cannot cry foul when they record the data that passes through. To\n> say Chainalysis needs to cease is silly, the whole point of the\n> public blockchain is for Chainalysis, whether it be for the\n> verification of transactions, research or otherwise.\n>\n> -----Original Message----- From: \"odinn\"\n> <odinn.cyberguerrilla at riseup.net> Sent: \u200e23/\u200e03/\u200e2015 1:48 PM To:\n> \"bitcoin-development at lists.sourceforge.net\"\n> <bitcoin-development at lists.sourceforge.net> Subject: Re:\n> [Bitcoin-development] Criminal complaints against \"network\n> disruption as a service\" startups\n>\n> If you (e.g. Chainalysis) or anyone else are doing surveillance on\n> the network and gathering information for later use, and whether or\n> not the ultimate purpose is to divulge it to other parties for\n> compliance purposes, you can bet that ultimately the tables will be\n> turned on you, and you will be the one having your ass handed to\n> you so to speak, before or after you are served, in legal parlance.\n> Whether or not the outcome of that is meaningful and beneficial to\n> any concerned parties and what is the upshot of it in the end\n> depends on on what you do and just how far you decide to take your\n> ill-advised enterprise.\n>\n> Chainalysis and similar operations would be, IMHO, well advised to\n> cease operations.  This doesn't mean they will, but guess what:\n>\n> Shot over the bow, folks.\n>\n> Jan M\u00f8ller:\n>> What we were trying to achieve was determining the flow of funds\n>> between countries by figuring out which country a transaction\n>> originates from. To do that with a certain accuracy you need\n>> many nodes. We chose a class C IP range as we knew that bitcoin\n>> core and others only connect to one node in any class C IP range.\n>> We were not aware that breadwallet didn't follow this practice.\n>> Breadwallet risked getting tar-pitted, but that was not our\n>> intention and we are sorry about that.\n>\n>> Our nodes DID respond with valid blocks and merkle-blocks and\n>> allowed everyone connecting to track the blockchain. We did\n>> however not relay transactions. The 'service' bit in the version\n>> message is not meant for telling whether or how the node relays\n>> transactions, it tells whether you can ask for block headers only\n>> or full blocks.\n>\n>> Many implementations enforce non standard rules for handling\n>> transactions; some nodes ignore transactions with address reuse,\n>> some nodes happily forward double spends, and some nodes forward\n>> neither blocks not transactions. We did blocks but not\n>> transactions.\n>\n>> In hindsight we should have done two things: 1. relay\n>> transactions 2. advertise address from 'foreign' nodes\n>\n>> Both would have fixed the problems that breadwallet experienced.\n>> My understanding is that breadwallet now has the same 'class C'\n>> rule as bitcoind, which would also fix it.\n>\n>> Getting back on the topic of this thread and whether it is\n>> illegal, your guess is as good as mine. I don't think it is\n>> illegal to log incoming connections and make statistical analysis\n>> on it. That would more or less incriminate anyone who runs a\n>> web-server and looks into the access log. At lease one Bitcoin\n>> service has been collecting IP addresses for years and given them\n>> to anyone visiting their web-site (you know who) and I believe\n>> that this practise is very wrong. We have no intention of giving\n>> IP addresses away to anyone, but we believe that you are free to\n>> make statistics on connection logs when nodes connect to you.\n>\n>> On a side note: When you make many connections to the network\n>> you see lots of strange nodes and suspicious patterns. You can\n>> be certain that we were not the only ones connected to many\n>> nodes.\n>\n>> My takeaway from this: If nodes that do not relay transactions is\n>> a problem then there is stuff to fix.\n>\n>> /Jan\n>\n>> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net>\n>> wrote:\n>\n>>> That would be rather new and tricky legal territory.\n>>>\n>>> But even putting the legal issues to one side, there are\n>>> definitional issues.\n>>>\n>>> For instance if the Chainalysis nodes started following the\n>>> protocol specs better and became just regular nodes that\n>>> happen to keep logs, would that still be a violation? If so,\n>>> what about blockchain.info? It'd be shooting ourselves in the\n>>> foot to try and forbid block explorers given how useful they\n>>> are.\n>>>\n>>> If someone non-maliciously runs some nodes with debug logging\n>>> turned on, and makes full system backups every night, and\n>>> keeps those backups for years, are they in violation of\n>>> whatever pseudo-law is involved?\n>>>\n>>> I think it's a bit early to think about these things right\n>>> now. Michael Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin hackers\n>>> for a long time. I'd be interested to know their thoughts on\n>>> all of this.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>>\n>>>\n>\n>>>\nDive into the World of Parallel Programming The Go Parallel Website,\n>>> sponsored by Intel and developed in partnership with Slashdot\n>>> Media, is your hub for all things parallel software\n>>> development, from weekly thought leadership blogs to news,\n>>> videos, case studies, tutorials and more. Take a look and join\n>>> the conversation now. http://goparallel.sourceforge.net/\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>\n>>>\n>\n>\n>> ------------------------------------------------------------------------------\n>\n>>\n>\n> Dive into the World of Parallel Programming The Go Parallel\n> Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is\n>> your hub for all things parallel software development, from\n>> weekly thought leadership blogs to news, videos, case studies,\n>> tutorials and more. Take a look and join the conversation now.\n>> http://goparallel.sourceforge.net/\n>\n>\n>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/\n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n- --\nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJVD6mmAAoJEGxwq/inSG8CkLUH/iWvn7kp6KW2fe5RFca1eAmH\nL+5P+kNDzMARIRt8A3CvopoQQMZx44aZ8pMdErUk+78A7oeP/x+scYEkSiXE17Iv\nsaBWv43mO+qFxgVrU7y+9njwLJoywHitBymhLGisi3hv+H7lfIMdPK2dLVThwxel\nbVO0Ga8Y9qDYAwtK23yEOCT7klj5mT0tG50U4HxDpIXaJj8kCnVUC2O1MdYhr1pP\n93cDuhBmXOg7sOLAPpdWVhgfnz0Vm8M0ZWUIK+4FGzpQugWHcmdp3YUDCeczOYzD\nu5zVdAqvdL6qQcWkUcGfkKaAqfJH3u5F2zeQvDUEJeeEz1lWnrsXuT7cCvcp/TU=\n=6io6\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150323/1785fb92/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-03-23T06:45:31",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nShizzle's opinion, it would seem, is highly important.  I'm done here.\n\nThy Shizzle:\n> Oh so you're talking about the criminality of one single entity? So\n> having a quick look, it seems that the issue is they are collecting\n> IPs and that kind of thing as well? So similar to what\n> http://getaddr.bitnodes.io is doing but without the funding from\n> the bitcoin foundation? If you are worried about your IP getting\n> out you're behind a VPN. They can only collect the information made\n> available to them. Botnets etc are completely different because you\n> are forcing control over something you have no right to do. If\n> companies want to sit there and collect publicly available\n> information that you are voluntarily making available to them, why\n> do you care? I can't see how it could be at all criminal.\n> Remembering that most privacy laws relate to information that YOU\n> PROVIDE to an entity during an agreement for service, payment, etc.\n> You are providing this information publicly and they are collecting\n> it from the public domain, not you giving it to them in an\n> agreement, therefore the usual provisions of privacy etc don't\n> apply. If you connect to their scraper node, of course they can log\n> that. How could it possibly be criminal? \n> ________________________________ From:\n> odinn<mailto:odinn.cyberguerrilla at riseup.net> Sent: \u200e23/\u200e03/\u200e2015\n> 4:50 PM To: Thy Shizzle<mailto:thyshizzle at outlook.com> Cc:\n> bitcoin-development at lists.sourceforge.net<mailto:bitcoin-development at lists.sourceforge.net>\n>\n> \nSubject: Re: [Bitcoin-development] Criminal complaints against \"network\ndisruption as a service\" startups\n> \n> Back to what is Chainalysis and country of their origin, so\n> criminal complaints against them would likely relate to violation\n> of Swiss laws, as is described here: \n> https://bitcointalk.org/index.php?topic=978088.msg10774882#msg10774882\n>\n>  It is fairly obvious that Chainalysis is not merely doing what \n> blockchain.info etc. is. Let's not delude ourselves here.\n> \n> As stated, it would be advisable for such a firm to cease\n> operations, and it would seem that plenty of polite shots over the\n> bow have been given to Chainalysis, which should now fold up its\n> operation, pack its bags, and go back to its hole before trying to\n> serve its masters again in another way. Etc.\n> \n> Corporations similar to Chainalysis which are domiciled in other \n> countries which conduct collection of information in ways that\n> violate countries' laws (there are many countries and each have\n> their own ways of interpreting user privacy and what constitutes\n> permissible breach and in what circumstances) can indeed be held to\n> legal standards that may result in minimal or severe legal\n> penalties.  It is true that analyzing information that is publicly\n> available, such as that which is in a library, is not illegal. But\n> the act of surveillance is. (Then there is the question of what\n> sort of surveillance, targeted or general, and whether it is\n> limited to the bitcoin network or if it moves beyond that to\n> attempts to correlate with usernames, IDs, IPs, and other\n> information available on fora and apparent from services, but I\n> won't get into that here.)  Even if you argue that the manner in \n> which you are performing your actions is not actually\n> \"surveillance,\" or you argue that it is \"legally permissible,\"\n> someone else will certainly come along and make a reasonable\n> argument that you are indeed engaging in illegal surveillance.\n> They may even suggest to a judge that you are in the process of\n> constructing a botnet and demand that your domains be seized, and\n> may successfully obtain an ex parte temporary restraining order\n> (TRO) against Chainalysis and similar corporations to have\n> domain(s) seized.  Any and all arguments may be added in here,\n> there are 196 countries in the world today - each with their own\n> unique laws - (maybe less by the time you read this) and a shit-ton\n> of possible legal arguments that can be made by creative minds that\n> might want to sue you if you have been surveilling people, each\n> different depending on where your surveillance corporation is \n> domiciled.  There are plenty of legal processes available for\n> people to do exactly that.  You are indeed subject to having that\n> happen to you if you continue to surveill the network even if you\n> are doing so on behalf of the state for the purpose of gathering\n> information for a state's compliance initiative.\n> \n> So, don't delude yourself, and be happy if all that happens is\n> your little surveillance initiative has to close its doors (or gets\n> sued if it stays open).  Because that is the legal side of things.\n> The extralegal stuff is far worse.  The community is helping you by\n> asking you gently to close up shop and go away. It is a helpful\n> suggestion and I believe also a fair warning, again, a shot off the\n> bow.\n> \n> On the development side, developers are certainly responsible for \n> doing what they can to resist this kind of surveillance activity.\n> But I have a feeling that will be a different thread which is more \n> technical and so won't comment on it here, except to say it will \n> likely involve working toward giving the user an anonymity option \n> which can be exercised as part of any transaction.\n> \n> Thy Shizzle:\n>> I don't believe that at all. Analyzing information publicly \n>> available is not illegal. Chainalysis or whatever you call it\n>> would be likened to observing who comes and feeds birds at the\n>> park everyday. You can sit in the park and observe who feeds the\n>> birds, just as you can connect to the Bitcoin P2P network and\n>> observe the blocks being formed into the chain and transactions\n>> etc. Unless there is some agreement taking place where it is\n>> specified that upon connecting to the Bitcoin P2P swarm you agree\n>> to a set of terms, however as every node is providing their own\n>> \"entry\" into the P2P swarm it becomes really up to the node\n>> providing the connection to uphold and enforce the terms of the\n>> agreement. If you allow people to connect to you without terms of\n>> agreement, you cannot cry foul when they record the data that\n>> passes through. To say Chainalysis needs to cease is silly, the\n>> whole point of the public blockchain is for Chainalysis, whether\n>> it be for the verification of transactions, research or\n>> otherwise.\n> \n>> -----Original Message----- From: \"odinn\" \n>> <odinn.cyberguerrilla at riseup.net> Sent: \u200e23/\u200e03/\u200e2015 1:48 PM\n>> To: \"bitcoin-development at lists.sourceforge.net\" \n>> <bitcoin-development at lists.sourceforge.net> Subject: Re: \n>> [Bitcoin-development] Criminal complaints against \"network \n>> disruption as a service\" startups\n> \n>> If you (e.g. Chainalysis) or anyone else are doing surveillance\n>> on the network and gathering information for later use, and\n>> whether or not the ultimate purpose is to divulge it to other\n>> parties for compliance purposes, you can bet that ultimately the\n>> tables will be turned on you, and you will be the one having your\n>> ass handed to you so to speak, before or after you are served, in\n>> legal parlance. Whether or not the outcome of that is meaningful\n>> and beneficial to any concerned parties and what is the upshot of\n>> it in the end depends on on what you do and just how far you\n>> decide to take your ill-advised enterprise.\n> \n>> Chainalysis and similar operations would be, IMHO, well advised\n>> to cease operations.  This doesn't mean they will, but guess\n>> what:\n> \n>> Shot over the bow, folks.\n> \n>> Jan M\u00f8ller:\n>>> What we were trying to achieve was determining the flow of\n>>> funds between countries by figuring out which country a\n>>> transaction originates from. To do that with a certain accuracy\n>>> you need many nodes. We chose a class C IP range as we knew\n>>> that bitcoin core and others only connect to one node in any\n>>> class C IP range. We were not aware that breadwallet didn't\n>>> follow this practice. Breadwallet risked getting tar-pitted,\n>>> but that was not our intention and we are sorry about that.\n> \n>>> Our nodes DID respond with valid blocks and merkle-blocks and \n>>> allowed everyone connecting to track the blockchain. We did \n>>> however not relay transactions. The 'service' bit in the\n>>> version message is not meant for telling whether or how the\n>>> node relays transactions, it tells whether you can ask for\n>>> block headers only or full blocks.\n> \n>>> Many implementations enforce non standard rules for handling \n>>> transactions; some nodes ignore transactions with address\n>>> reuse, some nodes happily forward double spends, and some nodes\n>>> forward neither blocks not transactions. We did blocks but not \n>>> transactions.\n> \n>>> In hindsight we should have done two things: 1. relay \n>>> transactions 2. advertise address from 'foreign' nodes\n> \n>>> Both would have fixed the problems that breadwallet\n>>> experienced. My understanding is that breadwallet now has the\n>>> same 'class C' rule as bitcoind, which would also fix it.\n> \n>>> Getting back on the topic of this thread and whether it is \n>>> illegal, your guess is as good as mine. I don't think it is \n>>> illegal to log incoming connections and make statistical\n>>> analysis on it. That would more or less incriminate anyone who\n>>> runs a web-server and looks into the access log. At lease one\n>>> Bitcoin service has been collecting IP addresses for years and\n>>> given them to anyone visiting their web-site (you know who) and\n>>> I believe that this practise is very wrong. We have no\n>>> intention of giving IP addresses away to anyone, but we believe\n>>> that you are free to make statistics on connection logs when\n>>> nodes connect to you.\n> \n>>> On a side note: When you make many connections to the network \n>>> you see lots of strange nodes and suspicious patterns. You can \n>>> be certain that we were not the only ones connected to many \n>>> nodes.\n> \n>>> My takeaway from this: If nodes that do not relay transactions\n>>> is a problem then there is stuff to fix.\n> \n>>> /Jan\n> \n>>> On Fri, Mar 13, 2015 at 10:48 PM, Mike Hearn <mike at plan99.net> \n>>> wrote:\n> \n>>>> That would be rather new and tricky legal territory.\n>>>> \n>>>> But even putting the legal issues to one side, there are \n>>>> definitional issues.\n>>>> \n>>>> For instance if the Chainalysis nodes started following the \n>>>> protocol specs better and became just regular nodes that \n>>>> happen to keep logs, would that still be a violation? If so, \n>>>> what about blockchain.info? It'd be shooting ourselves in\n>>>> the foot to try and forbid block explorers given how useful\n>>>> they are.\n>>>> \n>>>> If someone non-maliciously runs some nodes with debug\n>>>> logging turned on, and makes full system backups every night,\n>>>> and keeps those backups for years, are they in violation of \n>>>> whatever pseudo-law is involved?\n>>>> \n>>>> I think it's a bit early to think about these things right \n>>>> now. Michael Gr\u00f8nager and Jan M\u00f8ller have been Bitcoin\n>>>> hackers for a long time. I'd be interested to know their\n>>>> thoughts on all of this.\n>>>> \n>>>> \n>>>> ------------------------------------------------------------------------------\n>>>>\n>>>>\n>\n>>>> \n>>>> \n> Dive into the World of Parallel Programming The Go Parallel\n> Website,\n>>>> sponsored by Intel and developed in partnership with\n>>>> Slashdot Media, is your hub for all things parallel software \n>>>> development, from weekly thought leadership blogs to news, \n>>>> videos, case studies, tutorials and more. Take a look and\n>>>> join the conversation now.\n>>>> http://goparallel.sourceforge.net/ \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>\n>>>> \n>>>> \n> \n> \n>>> ------------------------------------------------------------------------------\n>\n>>> \n>>> \n> \n>> Dive into the World of Parallel Programming The Go Parallel \n>> Website, sponsored\n>>> by Intel and developed in partnership with Slashdot Media, is \n>>> your hub for all things parallel software development, from \n>>> weekly thought leadership blogs to news, videos, case studies, \n>>> tutorials and more. Take a look and join the conversation now. \n>>> http://goparallel.sourceforge.net/\n> \n> \n> \n>>> _______________________________________________ \n>>> Bitcoin-development mailing list \n>>> Bitcoin-development at lists.sourceforge.net \n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>>> \n> \n> \n>> ------------------------------------------------------------------------------\n>\n>> \n> \n> Dive into the World of Parallel Programming The Go Parallel\n> Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is\n>> your hub for all things parallel software development, from\n>> weekly thought leadership blogs to news, videos, case studies,\n>> tutorials and more. Take a look and join the conversation now. \n>> http://goparallel.sourceforge.net/ \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJVD7aKAAoJEGxwq/inSG8C4KsIAIu5atra8Y9R9oejNryjMQkz\nUOVORw3y0eD8yaAiJJQzJjmNE6UXC92R3gM3KtQoQchSQ6RhyhZUZkzCY7k2Ug08\n8UZnxjgAHCwScGUSgpDu2hcGDtC+Csa1EKOExjCxYCBlVRI+cCJqxIm9d7vGDi4V\nR1y57xtKtussJxhZKVjIxothkHtSy5HuaKdKLfI7ikoBAerOVY7bGCxE+drUr4OO\nSgxe94M8z/ecFk3h37ZhuL2P+mNAlCKQkW592628XC0bXN8iT2vW7MnB3BLEBzvb\nTeWFYUFjs5v09B6Cw6LQWFGKdFwLGganybeEqoKNfzrihEAa19PFsRWHPStMUCM=\n=JnJQ\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Criminal complaints against \"network disruption as a service\" startups",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "odinn",
                "Mike Hearn",
                "Justus Ranvier",
                "Thy Shizzle",
                "Jan M\u00f8ller",
                "Aaron Voisine"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 74238
        }
    },
    {
        "title": "[Bitcoin-development] \"network disruption as a service\" and proof of local storage",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2015-03-16T16:29:03",
                "message_text_only": "The problem of pseudo-nodes will come over and over. The cat and mouse\nchase is just beginning.\nIt has been discussed some times that the easiest solution world be to\nrequest some kind of resource consumption on each peer to be allowed to\nconnect to other peers.\nGmaxwell proposed Proof of Storage here:\nhttps://bitcointalk.org/index.php?topic=310323.msg3332919#msg3332919\n\nI proposed a (what I think) is better protocol for Proof of Storage that\nI call \"Proof of Local storage\" here\nhttps://bitslog.wordpress.com/2014/11/03/proof-of-local-blockchain-storage/\n. It's better because it does not need the storage of additional data,\nbut more importantly, it allows you to prove full copy of the blockchain\nis being maintained by the peer.\nThis is specially important now that Bitnodes is trying a full-node\nincentive program that may be easily cheated\n(http://qntra.net/2015/02/pseudonode-proxy-fools-bitcoin-full-node-incentive-program/)\n\nProof of local storage allows a node to prove another peer that he is\nstoring a LOCAL copy of a PUBLIC file, such as the blockchain. So the\npeer need not waste more resources (well, just some resources to\nencode/decode the block-chain).\nThe main idea is to use what I called asymmetric-time-encoding.\nBasically you encode the block-chain in a way that it takes 100 more\ntimes to write it than to read it. Since the block-chain is an\nappend-only (write-only) file, this fit good for our needs. For instance\n(and as a simplification), choosing a global 1024-bit prime, then\nsplitting the block-chain in 1024-bit blocks, and encrypting each block\nusing Polihg-Hellman (modexp) with decryption exponent 3.  Then\nencryption is at least 100 times slower than decryption. Before PH\nencryption each node must xor each block with a pseudo-random mask\nderived from the public IP and the block index.  So block encryption\ncould be: \nBlockEncryptIndex(i) = E(IP+i,block(i))^inv(3) (mod p),\n\nwhere inv(3) is 3^-1 mod (p-1). E() could be a fast tweaked encryption\nroutine (tweak = index), but we only need the PRNG properties of E() and\nthat E() does share algebraic properties with P.H..\n\nTwo protocols can be performed to prove local possession:\n1. (prover and verifier pay a small cost) The verifier sends a seed to\nderive some n random indexes, and the prover must respond with the hash\nof the decrypted blocks within a certain time bound. Suppose that\ndecryption of n blocks take 100 msec (+-100 msec of network jitter).\nThen an attacker must have a computer 50 faster to be able to\nconsistently cheat. The last 50 blocks should not be part of the list to\nallow nodes to catch-up and encrypt the blocks in background.\n\n2. (prover pay a high cost, verified pays negligible cost). The verifier\nchooses a seed n, and then pre-computes the encrypted blocks derived\nfrom the seed using the prover's IP. Then the verifier sends the  seed,\nand the prover must respond with the hash of the encrypted blocks within\na certain time bound. The proved does not require to do any PH\ndecryption, just take the encrypted blocks for indexes derived from the\nseed, hash them and send the hash back to the verifier. The verifier\nvalidates the time bound and the hash.\n\nBoth protocols can me made available by the client, under different\nstates. For instance, new nodes are only allowed to request protocol 2\n(and so they get an initial assurance their are connecting to\nfull-nodes). After a first-time mutual authentication, they are allowed\nto periodically perform protocol 1. Also new nodes may be allowed to\nperform protocol 1 with a small index set, and increase the index set\nover time, to get higher confidence.\n\nThe important difference between this protocol and classical remote\nsoftware attestation protocols, is that the time gap between a good peer\nand a malicious peer can be made arbitrarily high, picking a larger p.\nMaybe there is even another crypto primitive which is more asymmetric\nthan exponent 3 decryption (the LUC or NTRU cryptosystem?).\n\nIn GMaxwell proposal each peer builds a table for each other peer. In my\nproposal, each peer builds a single table (the encrypted blockchain), so\nit could be still possible to establish a thousands of connections to\nthe network from a single peer. Nevertheless, the attacker's IP will be\neasily detected (he cannot hide under a thousands different IPs). It's\nalso possible to restrict the challenge-response to a portion of the\nblock-chain, the portion offset being derived from the hash of both IP\naddresses and one random numbers provided by each peer. Suppose each\nconnection has a C-R space equivalent to 1% of the block-chain. Then\nhaving 100 connections and responding to C-R on each connection means\nstoring approximate 1 copy of the block-chain (there may be overlaps,\nwhich would need to be stored twice) , while having 1K connections would\nrequire storing 10 copies of the blockchain.\n\n\nBest regards,\n Sergio"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2015-03-24T05:14:23",
                "message_text_only": "On Mon, 16 Mar 2015 09:29:03 -0700, Sergio Lerner  \n<sergiolerner at certimix.com> wrote:\n> I proposed a (what I think) is better protocol for Proof of Storage that\n> I call \"Proof of Local storage\" here\n> https://bitslog.wordpress.com/2014/11/03/proof-of-local-blockchain-storage/\n\nThanks so much for publishing this. It could be useful in any application  \nto try to prove a keyed copy of some data.\n\nIf I understand correctly, transforming raw blocks to keyed blocks takes  \n512x longer than transforming keyed blocks back to raw. The key is public,  \nlike the IP, or some other value which perhaps changes less frequently.\n\nThe verifier keeps blocks in the keyed format, and can decrypt quickly to  \nprovide raw data, or use the keyed data for hashing to try to demonstrate  \nthey have a pre-keyed copy.\n\n>\n> Two protocols can be performed to prove local possession:\n> 1. (prover and verifier pay a small cost) The verifier sends a seed to\n> derive some n random indexes, and the prover must respond with the hash\n> of the decrypted blocks within a certain time bound. Suppose that\n> decryption of n blocks take 100 msec (+-100 msec of network jitter).\n> Then an attacker must have a computer 50 faster to be able to\n> consistently cheat. The last 50 blocks should not be part of the list to\n> allow nodes to catch-up and encrypt the blocks in background.\n>\n\nCan you clarify, the prover is hashing random blocks of *decrypted*, as-in  \nraw, blockchain data? What does this prove other than, perhaps, fast  \nrandom IO of the blockchain? (which is useful in its own right, e.g. as a  \nway to ensure only full-node IO-bound mining if baked into the PoW)\n\nHow is the verifier validating the response without possession of the full  \nblockchain?\n\n> 2. (prover pay a high cost, verified pays negligible cost). The verifier\n> chooses a seed n, and then pre-computes the encrypted blocks derived\n> from the seed using the prover's IP. Then the verifier sends the  seed,\n> and the prover must respond with the hash of the encrypted blocks within\n> a certain time bound. The proved does not require to do any PH\n> decryption, just take the encrypted blocks for indexes derived from the\n> seed, hash them and send the hash back to the verifier. The verifier\n> validates the time bound and the hash.\n\nThe challenger requests a hash-sum of a random sequence of indices of the  \nkeyed data, based on a challenge seed. So in a few bytes round-trip we can  \nsee how fast the computation is completed. If the data is already keyed,  \nthe hash of 1,000 random 1024-bit blocks should come back much faster than  \nif the data needs to be keyed on-the-fly.\n\nTo verify the response, the challenger would have to use the peer's  \nidentity key and perform the slower transforms on those same 1,000 blocks  \nand see that the result matches, so cost to challenger is higher than  \nprover, assuming they actually do the computation.\n\nWhich brings up a good tweak, a full-node challenger could have to do the  \ncomputation first, then also include something like HMAC(identityKey,  \nexpectedResult). The prover could then know if the challenger was honest  \nbefore returning a result, and blacklist them if not.\n\n>\n> Both protocols can me made available by the client, under different\n> states. For instance, new nodes are only allowed to request protocol 2\n> (and so they get an initial assurance their are connecting to\n> full-nodes). After a first-time mutual authentication, they are allowed\n> to periodically perform protocol 1. Also new nodes may be allowed to\n> perform protocol 1 with a small index set, and increase the index set\n> over time, to get higher confidence.\n\nI guess a new-node could see if different servers all returned the same  \nchallenge response, but they would have no way to know if the challenge  \nresponse was technically correct, or sybil.\n\nI also wonder about the effect of spinning disk versus SSD. Seek time for  \n1,000 random reads is either nearly zero or dominating depending on the  \ntwo modes. I wonder if a sequential read from a random index is a possible  \ntrade-off,; it doesn't prove possession of the whole chain nearly as well,  \nbut at least iowait converges significantly. Then again, that presupposes  \na specific ordering on disk which might not exist. In X years it will all  \nbe solid-state, so eventually it's moot."
            },
            {
                "author": "Sergio Lerner",
                "date": "2015-03-26T22:09:00",
                "message_text_only": "> If I understand correctly, transforming raw blocks to keyed blocks\n> takes 512x longer than transforming keyed blocks back to raw. The key\n> is public, like the IP, or some other value which perhaps changes less\n> frequently.\n>\nYes. I was thinking that the IP could be part of a first layer of\nencryption done to the blockchain data prior to the asymetric operation.\nThat way the asymmetric operation can be the same for all users (no\ndifferent primers for different IPs, and then the verifiers does not\nhave to verify that a particular p is actually a pseudo-prime suitable\nfor P.H. ) and the public exponent can be just 3.\n\n>\n>> Two protocols can be performed to prove local possession:\n>> 1. (prover and verifier pay a small cost) The verifier sends a seed to\n>> derive some n random indexes, and the prover must respond with the hash\n>> of the decrypted blocks within a certain time bound. Suppose that\n>> decryption of n blocks take 100 msec (+-100 msec of network jitter).\n>> Then an attacker must have a computer 50 faster to be able to\n>> consistently cheat. The last 50 blocks should not be part of the list to\n>> allow nodes to catch-up and encrypt the blocks in background.\n>>\n>\n> Can you clarify, the prover is hashing random blocks of *decrypted*,\n> as-in raw, blockchain data? What does this prove other than, perhaps,\n> fast random IO of the blockchain? (which is useful in its own right,\n> e.g. as a way to ensure only full-node IO-bound mining if baked into\n> the PoW)\n>\n> How is the verifier validating the response without possession of the\n> full blockchain?\n\nYou're right, It is incorrect. Not the decrypted blocks must be sent,\nbut the encrypted blocks. There correct protocol is this:\n\n1. (prover and verifier pay a small cost) The verifier sends a seed to\nderive some n random indexes, and the prover must respond with the the\nencrypted blocks within a certain time bound. The verifier decrypts\nthose blocks to check if they are part of the block-chain.\n\nBut then there is this improvement which allows the verifier do detect\nnon full-nodes with much less computation:\n\n3. (prover pays a small cost, verifier smaller cost) The verifier asks\nthe prover to send a Merkle tree root of hashes of encrypted blocks with\nN indexes selected by a psudo-random function seeded by a challenge\nvalue, where each encrypted-block is previously prefixed with the seed\nbefore being hashed (e.g. N=100). The verifier receives the Markle Root\nand performs a statistical test on the received information. From the N\nhashes blocks, it chooses M < N (e.g. M = 20), and asks the proved for\nthe blocks at these indexes. The prover sends the blocks, the verifier\nvalidates the blocks by decrypting them and also verifies that the\nMerkle tree was well constructed for those block nodes. This proves with\nhigh probability that the Merkle tree was built on-the-fly and\nspecifically for this challenge-response protocol.\n\n> I also wonder about the effect of spinning disk versus SSD. Seek time\n> for 1,000 random reads is either nearly zero or dominating depending\n> on the two modes. I wonder if a sequential read from a random index is\n> a possible trade-off,; it doesn't prove possession of the whole chain\n> nearly as well, but at least iowait converges significantly. Then\n> again, that presupposes a specific ordering on disk which might not\n> exist. In X years it will all be solid-state, so eventually it's moot.\n>\nGood idea.\n\nAlso we don't need that every node implements the protocol, but only\nnodes that want to prove full-node-ness, such as the ones which want to\nreceive bitnodes subsidy."
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-03-26T23:04:14",
                "message_text_only": "Maybe I'm overlooking something, but I've been watching this thread with increasing skepticism at the complexity of the offered solution. I don't understand why it needs to be so complex. I'd like to offer an alternative for your consideration...\n\nChallenge:\n\"Send me: SHA256(SHA256(concatenation of N pseudo-randomly selected bytes from the block chain)).\"\n\nChoose N such that it would be infeasible for the responding node to fetch all of the needed blocks in a short amount of time. In other words, assume that a node can seek to a given byte in a block stored on local disk much faster than it can download the entire block from a remote peer. This is almost certainly a safe assumption.\n\nFor example, choose N = 1024. Then the proving node needs to perform 1024 random reads from local disk. On spinning media, this is likely to take somewhere on the order of 15 seconds. Assuming blocks are averaging 500 KiB each, then 1024 blocks would comprise 500 MiB of data. Can 500 MiB be downloaded in 15 seconds? This data transfer rate is 280 Mbps. Almost certainly not possible. And if it is, just increase N. The challenge also becomes more difficult as average block size increases.\n\nThis challenge-response protocol relies on the lack of a \"partial getdata\" command in the Bitcoin protocol: a node cannot ask for only part of a block; it must ask for an entire block. Furthermore, nodes could ban other nodes for making too many random requests for blocks.\n\n\nOn Thursday, 26 March 2015, at 7:09 pm, Sergio Lerner wrote:\n> \n> > If I understand correctly, transforming raw blocks to keyed blocks\n> > takes 512x longer than transforming keyed blocks back to raw. The key\n> > is public, like the IP, or some other value which perhaps changes less\n> > frequently.\n> >\n> Yes. I was thinking that the IP could be part of a first layer of\n> encryption done to the blockchain data prior to the asymetric operation.\n> That way the asymmetric operation can be the same for all users (no\n> different primers for different IPs, and then the verifiers does not\n> have to verify that a particular p is actually a pseudo-prime suitable\n> for P.H. ) and the public exponent can be just 3.\n> \n> >\n> >> Two protocols can be performed to prove local possession:\n> >> 1. (prover and verifier pay a small cost) The verifier sends a seed to\n> >> derive some n random indexes, and the prover must respond with the hash\n> >> of the decrypted blocks within a certain time bound. Suppose that\n> >> decryption of n blocks take 100 msec (+-100 msec of network jitter).\n> >> Then an attacker must have a computer 50 faster to be able to\n> >> consistently cheat. The last 50 blocks should not be part of the list to\n> >> allow nodes to catch-up and encrypt the blocks in background.\n> >>\n> >\n> > Can you clarify, the prover is hashing random blocks of *decrypted*,\n> > as-in raw, blockchain data? What does this prove other than, perhaps,\n> > fast random IO of the blockchain? (which is useful in its own right,\n> > e.g. as a way to ensure only full-node IO-bound mining if baked into\n> > the PoW)\n> >\n> > How is the verifier validating the response without possession of the\n> > full blockchain?\n> \n> You're right, It is incorrect. Not the decrypted blocks must be sent,\n> but the encrypted blocks. There correct protocol is this:\n> \n> 1. (prover and verifier pay a small cost) The verifier sends a seed to\n> derive some n random indexes, and the prover must respond with the the\n> encrypted blocks within a certain time bound. The verifier decrypts\n> those blocks to check if they are part of the block-chain.\n> \n> But then there is this improvement which allows the verifier do detect\n> non full-nodes with much less computation:\n> \n> 3. (prover pays a small cost, verifier smaller cost) The verifier asks\n> the prover to send a Merkle tree root of hashes of encrypted blocks with\n> N indexes selected by a psudo-random function seeded by a challenge\n> value, where each encrypted-block is previously prefixed with the seed\n> before being hashed (e.g. N=100). The verifier receives the Markle Root\n> and performs a statistical test on the received information. From the N\n> hashes blocks, it chooses M < N (e.g. M = 20), and asks the proved for\n> the blocks at these indexes. The prover sends the blocks, the verifier\n> validates the blocks by decrypting them and also verifies that the\n> Merkle tree was well constructed for those block nodes. This proves with\n> high probability that the Merkle tree was built on-the-fly and\n> specifically for this challenge-response protocol.\n> \n> > I also wonder about the effect of spinning disk versus SSD. Seek time\n> > for 1,000 random reads is either nearly zero or dominating depending\n> > on the two modes. I wonder if a sequential read from a random index is\n> > a possible trade-off,; it doesn't prove possession of the whole chain\n> > nearly as well, but at least iowait converges significantly. Then\n> > again, that presupposes a specific ordering on disk which might not\n> > exist. In X years it will all be solid-state, so eventually it's moot.\n> >\n> Good idea.\n> \n> Also we don't need that every node implements the protocol, but only\n> nodes that want to prove full-node-ness, such as the ones which want to\n> receive bitnodes subsidy."
            },
            {
                "author": "Robert McKay",
                "date": "2015-03-27T14:32:33",
                "message_text_only": "Basically the problem with that is that someone could setup a single \nfull node that has the blockchain and can answer those challenges and \nthen a bunch of other non-full nodes that just proxy any such challenges \nto the single full node.\n\nRob\n\nOn 2015-03-26 23:04, Matt Whitlock wrote:\n> Maybe I'm overlooking something, but I've been watching this thread\n> with increasing skepticism at the complexity of the offered solution.\n> I don't understand why it needs to be so complex. I'd like to offer \n> an\n> alternative for your consideration...\n>\n> Challenge:\n> \"Send me: SHA256(SHA256(concatenation of N pseudo-randomly selected\n> bytes from the block chain)).\"\n>\n> Choose N such that it would be infeasible for the responding node to\n> fetch all of the needed blocks in a short amount of time. In other\n> words, assume that a node can seek to a given byte in a block stored\n> on local disk much faster than it can download the entire block from \n> a\n> remote peer. This is almost certainly a safe assumption.\n>\n> For example, choose N = 1024. Then the proving node needs to perform\n> 1024 random reads from local disk. On spinning media, this is likely\n> to take somewhere on the order of 15 seconds. Assuming blocks are\n> averaging 500 KiB each, then 1024 blocks would comprise 500 MiB of\n> data. Can 500 MiB be downloaded in 15 seconds? This data transfer \n> rate\n> is 280 Mbps. Almost certainly not possible. And if it is, just\n> increase N. The challenge also becomes more difficult as average \n> block\n> size increases.\n>\n> This challenge-response protocol relies on the lack of a \"partial\n> getdata\" command in the Bitcoin protocol: a node cannot ask for only\n> part of a block; it must ask for an entire block. Furthermore, nodes\n> could ban other nodes for making too many random requests for blocks.\n>\n>\n> On Thursday, 26 March 2015, at 7:09 pm, Sergio Lerner wrote:\n>>\n>> > If I understand correctly, transforming raw blocks to keyed blocks\n>> > takes 512x longer than transforming keyed blocks back to raw. The \n>> key\n>> > is public, like the IP, or some other value which perhaps changes \n>> less\n>> > frequently.\n>> >\n>> Yes. I was thinking that the IP could be part of a first layer of\n>> encryption done to the blockchain data prior to the asymetric \n>> operation.\n>> That way the asymmetric operation can be the same for all users (no\n>> different primers for different IPs, and then the verifiers does not\n>> have to verify that a particular p is actually a pseudo-prime \n>> suitable\n>> for P.H. ) and the public exponent can be just 3.\n>>\n>> >\n>> >> Two protocols can be performed to prove local possession:\n>> >> 1. (prover and verifier pay a small cost) The verifier sends a \n>> seed to\n>> >> derive some n random indexes, and the prover must respond with \n>> the hash\n>> >> of the decrypted blocks within a certain time bound. Suppose that\n>> >> decryption of n blocks take 100 msec (+-100 msec of network \n>> jitter).\n>> >> Then an attacker must have a computer 50 faster to be able to\n>> >> consistently cheat. The last 50 blocks should not be part of the \n>> list to\n>> >> allow nodes to catch-up and encrypt the blocks in background.\n>> >>\n>> >\n>> > Can you clarify, the prover is hashing random blocks of \n>> *decrypted*,\n>> > as-in raw, blockchain data? What does this prove other than, \n>> perhaps,\n>> > fast random IO of the blockchain? (which is useful in its own \n>> right,\n>> > e.g. as a way to ensure only full-node IO-bound mining if baked \n>> into\n>> > the PoW)\n>> >\n>> > How is the verifier validating the response without possession of \n>> the\n>> > full blockchain?\n>>\n>> You're right, It is incorrect. Not the decrypted blocks must be \n>> sent,\n>> but the encrypted blocks. There correct protocol is this:\n>>\n>> 1. (prover and verifier pay a small cost) The verifier sends a seed \n>> to\n>> derive some n random indexes, and the prover must respond with the \n>> the\n>> encrypted blocks within a certain time bound. The verifier decrypts\n>> those blocks to check if they are part of the block-chain.\n>>\n>> But then there is this improvement which allows the verifier do \n>> detect\n>> non full-nodes with much less computation:\n>>\n>> 3. (prover pays a small cost, verifier smaller cost) The verifier \n>> asks\n>> the prover to send a Merkle tree root of hashes of encrypted blocks \n>> with\n>> N indexes selected by a psudo-random function seeded by a challenge\n>> value, where each encrypted-block is previously prefixed with the \n>> seed\n>> before being hashed (e.g. N=100). The verifier receives the Markle \n>> Root\n>> and performs a statistical test on the received information. From \n>> the N\n>> hashes blocks, it chooses M < N (e.g. M = 20), and asks the proved \n>> for\n>> the blocks at these indexes. The prover sends the blocks, the \n>> verifier\n>> validates the blocks by decrypting them and also verifies that the\n>> Merkle tree was well constructed for those block nodes. This proves \n>> with\n>> high probability that the Merkle tree was built on-the-fly and\n>> specifically for this challenge-response protocol.\n>>\n>> > I also wonder about the effect of spinning disk versus SSD. Seek \n>> time\n>> > for 1,000 random reads is either nearly zero or dominating \n>> depending\n>> > on the two modes. I wonder if a sequential read from a random \n>> index is\n>> > a possible trade-off,; it doesn't prove possession of the whole \n>> chain\n>> > nearly as well, but at least iowait converges significantly. Then\n>> > again, that presupposes a specific ordering on disk which might \n>> not\n>> > exist. In X years it will all be solid-state, so eventually it's \n>> moot.\n>> >\n>> Good idea.\n>>\n>> Also we don't need that every node implements the protocol, but only\n>> nodes that want to prove full-node-ness, such as the ones which want \n>> to\n>> receive bitnodes subsidy.\n>\n>\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all\n> things parallel software development, from weekly thought leadership \n> blogs to\n> news, videos, case studies, tutorials and more. Take a look and join \n> the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-03-27T15:16:43",
                "message_text_only": "I agree that someone could do this, but why is that a problem? Isn't the goal of this exercise to ensure more full nodes on the network? In order to be able to answer the challenges, an entity would need to be running a full node somewhere. Thus, they have contributed at least one additional full node to the network. I could certainly see a case for a company to host hundreds of lightweight (e.g., EC2) servers all backed by a single copy of the block chain. Why force every single machine to have its own copy? All you really need to require is that each agency/participant have its own copy.\n\n\nOn Friday, 27 March 2015, at 2:32 pm, Robert McKay wrote:\n> Basically the problem with that is that someone could setup a single \n> full node that has the blockchain and can answer those challenges and \n> then a bunch of other non-full nodes that just proxy any such challenges \n> to the single full node.\n> \n> Rob\n> \n> On 2015-03-26 23:04, Matt Whitlock wrote:\n> > Maybe I'm overlooking something, but I've been watching this thread\n> > with increasing skepticism at the complexity of the offered solution.\n> > I don't understand why it needs to be so complex. I'd like to offer \n> > an\n> > alternative for your consideration...\n> >\n> > Challenge:\n> > \"Send me: SHA256(SHA256(concatenation of N pseudo-randomly selected\n> > bytes from the block chain)).\"\n> >\n> > Choose N such that it would be infeasible for the responding node to\n> > fetch all of the needed blocks in a short amount of time. In other\n> > words, assume that a node can seek to a given byte in a block stored\n> > on local disk much faster than it can download the entire block from \n> > a\n> > remote peer. This is almost certainly a safe assumption.\n> >\n> > For example, choose N = 1024. Then the proving node needs to perform\n> > 1024 random reads from local disk. On spinning media, this is likely\n> > to take somewhere on the order of 15 seconds. Assuming blocks are\n> > averaging 500 KiB each, then 1024 blocks would comprise 500 MiB of\n> > data. Can 500 MiB be downloaded in 15 seconds? This data transfer \n> > rate\n> > is 280 Mbps. Almost certainly not possible. And if it is, just\n> > increase N. The challenge also becomes more difficult as average \n> > block\n> > size increases.\n> >\n> > This challenge-response protocol relies on the lack of a \"partial\n> > getdata\" command in the Bitcoin protocol: a node cannot ask for only\n> > part of a block; it must ask for an entire block. Furthermore, nodes\n> > could ban other nodes for making too many random requests for blocks.\n> >\n> >\n> > On Thursday, 26 March 2015, at 7:09 pm, Sergio Lerner wrote:\n> >>\n> >> > If I understand correctly, transforming raw blocks to keyed blocks\n> >> > takes 512x longer than transforming keyed blocks back to raw. The \n> >> key\n> >> > is public, like the IP, or some other value which perhaps changes \n> >> less\n> >> > frequently.\n> >> >\n> >> Yes. I was thinking that the IP could be part of a first layer of\n> >> encryption done to the blockchain data prior to the asymetric \n> >> operation.\n> >> That way the asymmetric operation can be the same for all users (no\n> >> different primers for different IPs, and then the verifiers does not\n> >> have to verify that a particular p is actually a pseudo-prime \n> >> suitable\n> >> for P.H. ) and the public exponent can be just 3.\n> >>\n> >> >\n> >> >> Two protocols can be performed to prove local possession:\n> >> >> 1. (prover and verifier pay a small cost) The verifier sends a \n> >> seed to\n> >> >> derive some n random indexes, and the prover must respond with \n> >> the hash\n> >> >> of the decrypted blocks within a certain time bound. Suppose that\n> >> >> decryption of n blocks take 100 msec (+-100 msec of network \n> >> jitter).\n> >> >> Then an attacker must have a computer 50 faster to be able to\n> >> >> consistently cheat. The last 50 blocks should not be part of the \n> >> list to\n> >> >> allow nodes to catch-up and encrypt the blocks in background.\n> >> >>\n> >> >\n> >> > Can you clarify, the prover is hashing random blocks of \n> >> *decrypted*,\n> >> > as-in raw, blockchain data? What does this prove other than, \n> >> perhaps,\n> >> > fast random IO of the blockchain? (which is useful in its own \n> >> right,\n> >> > e.g. as a way to ensure only full-node IO-bound mining if baked \n> >> into\n> >> > the PoW)\n> >> >\n> >> > How is the verifier validating the response without possession of \n> >> the\n> >> > full blockchain?\n> >>\n> >> You're right, It is incorrect. Not the decrypted blocks must be \n> >> sent,\n> >> but the encrypted blocks. There correct protocol is this:\n> >>\n> >> 1. (prover and verifier pay a small cost) The verifier sends a seed \n> >> to\n> >> derive some n random indexes, and the prover must respond with the \n> >> the\n> >> encrypted blocks within a certain time bound. The verifier decrypts\n> >> those blocks to check if they are part of the block-chain.\n> >>\n> >> But then there is this improvement which allows the verifier do \n> >> detect\n> >> non full-nodes with much less computation:\n> >>\n> >> 3. (prover pays a small cost, verifier smaller cost) The verifier \n> >> asks\n> >> the prover to send a Merkle tree root of hashes of encrypted blocks \n> >> with\n> >> N indexes selected by a psudo-random function seeded by a challenge\n> >> value, where each encrypted-block is previously prefixed with the \n> >> seed\n> >> before being hashed (e.g. N=100). The verifier receives the Markle \n> >> Root\n> >> and performs a statistical test on the received information. From \n> >> the N\n> >> hashes blocks, it chooses M < N (e.g. M = 20), and asks the proved \n> >> for\n> >> the blocks at these indexes. The prover sends the blocks, the \n> >> verifier\n> >> validates the blocks by decrypting them and also verifies that the\n> >> Merkle tree was well constructed for those block nodes. This proves \n> >> with\n> >> high probability that the Merkle tree was built on-the-fly and\n> >> specifically for this challenge-response protocol.\n> >>\n> >> > I also wonder about the effect of spinning disk versus SSD. Seek \n> >> time\n> >> > for 1,000 random reads is either nearly zero or dominating \n> >> depending\n> >> > on the two modes. I wonder if a sequential read from a random \n> >> index is\n> >> > a possible trade-off,; it doesn't prove possession of the whole \n> >> chain\n> >> > nearly as well, but at least iowait converges significantly. Then\n> >> > again, that presupposes a specific ordering on disk which might \n> >> not\n> >> > exist. In X years it will all be solid-state, so eventually it's \n> >> moot.\n> >> >\n> >> Good idea.\n> >>\n> >> Also we don't need that every node implements the protocol, but only\n> >> nodes that want to prove full-node-ness, such as the ones which want \n> >> to\n> >> receive bitnodes subsidy.\n> >\n> >\n> > \n> > ------------------------------------------------------------------------------\n> > Dive into the World of Parallel Programming The Go Parallel Website,\n> > sponsored\n> > by Intel and developed in partnership with Slashdot Media, is your\n> > hub for all\n> > things parallel software development, from weekly thought leadership \n> > blogs to\n> > news, videos, case studies, tutorials and more. Take a look and join \n> > the\n> > conversation now. http://goparallel.sourceforge.net/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Robert McKay",
                "date": "2015-03-27T15:32:13",
                "message_text_only": "The main motivation is to try and stop a single entity running lots of \nnodes in order to harvest transaction origin IPs. That's what's behind \nthis.\n\nProbably the efforts are a waste of time.. if someone has to keep a few \nhundred copies of the blockchain around in order to keep IP specific \nprecomputed data around for all the IPs they listen on then they'll just \nbuy a handful of 5TB HDs and call it a day.. still some of the ideas \nproposed are quite interesting and might not have much downside.\n\nRob\n\n\nOn 2015-03-27 15:16, Matt Whitlock wrote:\n> I agree that someone could do this, but why is that a problem? Isn't\n> the goal of this exercise to ensure more full nodes on the network? \n> In\n> order to be able to answer the challenges, an entity would need to be\n> running a full node somewhere. Thus, they have contributed at least\n> one additional full node to the network. I could certainly see a case\n> for a company to host hundreds of lightweight (e.g., EC2) servers all\n> backed by a single copy of the block chain. Why force every single\n> machine to have its own copy? All you really need to require is that\n> each agency/participant have its own copy.\n>\n>\n> On Friday, 27 March 2015, at 2:32 pm, Robert McKay wrote:\n>> Basically the problem with that is that someone could setup a single\n>> full node that has the blockchain and can answer those challenges \n>> and\n>> then a bunch of other non-full nodes that just proxy any such \n>> challenges\n>> to the single full node.\n>>\n>> Rob\n>>\n>> On 2015-03-26 23:04, Matt Whitlock wrote:\n>> > Maybe I'm overlooking something, but I've been watching this \n>> thread\n>> > with increasing skepticism at the complexity of the offered \n>> solution.\n>> > I don't understand why it needs to be so complex. I'd like to \n>> offer\n>> > an\n>> > alternative for your consideration...\n>> >\n>> > Challenge:\n>> > \"Send me: SHA256(SHA256(concatenation of N pseudo-randomly \n>> selected\n>> > bytes from the block chain)).\"\n>> >\n>> > Choose N such that it would be infeasible for the responding node \n>> to\n>> > fetch all of the needed blocks in a short amount of time. In other\n>> > words, assume that a node can seek to a given byte in a block \n>> stored\n>> > on local disk much faster than it can download the entire block \n>> from\n>> > a\n>> > remote peer. This is almost certainly a safe assumption.\n>> >\n>> > For example, choose N = 1024. Then the proving node needs to \n>> perform\n>> > 1024 random reads from local disk. On spinning media, this is \n>> likely\n>> > to take somewhere on the order of 15 seconds. Assuming blocks are\n>> > averaging 500 KiB each, then 1024 blocks would comprise 500 MiB of\n>> > data. Can 500 MiB be downloaded in 15 seconds? This data transfer\n>> > rate\n>> > is 280 Mbps. Almost certainly not possible. And if it is, just\n>> > increase N. The challenge also becomes more difficult as average\n>> > block\n>> > size increases.\n>> >\n>> > This challenge-response protocol relies on the lack of a \"partial\n>> > getdata\" command in the Bitcoin protocol: a node cannot ask for \n>> only\n>> > part of a block; it must ask for an entire block. Furthermore, \n>> nodes\n>> > could ban other nodes for making too many random requests for \n>> blocks.\n>> >\n>> >\n>> > On Thursday, 26 March 2015, at 7:09 pm, Sergio Lerner wrote:\n>> >>\n>> >> > If I understand correctly, transforming raw blocks to keyed \n>> blocks\n>> >> > takes 512x longer than transforming keyed blocks back to raw. \n>> The\n>> >> key\n>> >> > is public, like the IP, or some other value which perhaps \n>> changes\n>> >> less\n>> >> > frequently.\n>> >> >\n>> >> Yes. I was thinking that the IP could be part of a first layer of\n>> >> encryption done to the blockchain data prior to the asymetric\n>> >> operation.\n>> >> That way the asymmetric operation can be the same for all users \n>> (no\n>> >> different primers for different IPs, and then the verifiers does \n>> not\n>> >> have to verify that a particular p is actually a pseudo-prime\n>> >> suitable\n>> >> for P.H. ) and the public exponent can be just 3.\n>> >>\n>> >> >\n>> >> >> Two protocols can be performed to prove local possession:\n>> >> >> 1. (prover and verifier pay a small cost) The verifier sends a\n>> >> seed to\n>> >> >> derive some n random indexes, and the prover must respond with\n>> >> the hash\n>> >> >> of the decrypted blocks within a certain time bound. Suppose \n>> that\n>> >> >> decryption of n blocks take 100 msec (+-100 msec of network\n>> >> jitter).\n>> >> >> Then an attacker must have a computer 50 faster to be able to\n>> >> >> consistently cheat. The last 50 blocks should not be part of \n>> the\n>> >> list to\n>> >> >> allow nodes to catch-up and encrypt the blocks in background.\n>> >> >>\n>> >> >\n>> >> > Can you clarify, the prover is hashing random blocks of\n>> >> *decrypted*,\n>> >> > as-in raw, blockchain data? What does this prove other than,\n>> >> perhaps,\n>> >> > fast random IO of the blockchain? (which is useful in its own\n>> >> right,\n>> >> > e.g. as a way to ensure only full-node IO-bound mining if baked\n>> >> into\n>> >> > the PoW)\n>> >> >\n>> >> > How is the verifier validating the response without possession \n>> of\n>> >> the\n>> >> > full blockchain?\n>> >>\n>> >> You're right, It is incorrect. Not the decrypted blocks must be\n>> >> sent,\n>> >> but the encrypted blocks. There correct protocol is this:\n>> >>\n>> >> 1. (prover and verifier pay a small cost) The verifier sends a \n>> seed\n>> >> to\n>> >> derive some n random indexes, and the prover must respond with \n>> the\n>> >> the\n>> >> encrypted blocks within a certain time bound. The verifier \n>> decrypts\n>> >> those blocks to check if they are part of the block-chain.\n>> >>\n>> >> But then there is this improvement which allows the verifier do\n>> >> detect\n>> >> non full-nodes with much less computation:\n>> >>\n>> >> 3. (prover pays a small cost, verifier smaller cost) The verifier\n>> >> asks\n>> >> the prover to send a Merkle tree root of hashes of encrypted \n>> blocks\n>> >> with\n>> >> N indexes selected by a psudo-random function seeded by a \n>> challenge\n>> >> value, where each encrypted-block is previously prefixed with the\n>> >> seed\n>> >> before being hashed (e.g. N=100). The verifier receives the \n>> Markle\n>> >> Root\n>> >> and performs a statistical test on the received information. From\n>> >> the N\n>> >> hashes blocks, it chooses M < N (e.g. M = 20), and asks the \n>> proved\n>> >> for\n>> >> the blocks at these indexes. The prover sends the blocks, the\n>> >> verifier\n>> >> validates the blocks by decrypting them and also verifies that \n>> the\n>> >> Merkle tree was well constructed for those block nodes. This \n>> proves\n>> >> with\n>> >> high probability that the Merkle tree was built on-the-fly and\n>> >> specifically for this challenge-response protocol.\n>> >>\n>> >> > I also wonder about the effect of spinning disk versus SSD. \n>> Seek\n>> >> time\n>> >> > for 1,000 random reads is either nearly zero or dominating\n>> >> depending\n>> >> > on the two modes. I wonder if a sequential read from a random\n>> >> index is\n>> >> > a possible trade-off,; it doesn't prove possession of the whole\n>> >> chain\n>> >> > nearly as well, but at least iowait converges significantly. \n>> Then\n>> >> > again, that presupposes a specific ordering on disk which might\n>> >> not\n>> >> > exist. In X years it will all be solid-state, so eventually \n>> it's\n>> >> moot.\n>> >> >\n>> >> Good idea.\n>> >>\n>> >> Also we don't need that every node implements the protocol, but \n>> only\n>> >> nodes that want to prove full-node-ness, such as the ones which \n>> want\n>> >> to\n>> >> receive bitnodes subsidy.\n>> >\n>> >\n>> >\n>> > \n>> ------------------------------------------------------------------------------\n>> > Dive into the World of Parallel Programming The Go Parallel \n>> Website,\n>> > sponsored\n>> > by Intel and developed in partnership with Slashdot Media, is your\n>> > hub for all\n>> > things parallel software development, from weekly thought \n>> leadership\n>> > blogs to\n>> > news, videos, case studies, tutorials and more. Take a look and \n>> join\n>> > the\n>> > conversation now. http://goparallel.sourceforge.net/\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> \n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website, \n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your \n>> hub for all\n>> things parallel software development, from weekly thought leadership \n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join \n>> the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2015-03-27T18:40:43",
                "message_text_only": "> On Mar 27, 2015, at 8:16 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> \n> Isn't the goal of this exercise to ensure more full nodes on the network?\n\nBasically we're talking about a form of Sybil defense and better quantifying true blockchain resiliency by proof of storage.\n\nIn this case the goal is to see if we can prove the number of distinct digital copies of the blockchain. This is actually a tricky problem because it will (always?) devolve to inferences from response timing, and we are running over a heterogenous network with heterogeneous machines.\n\nIt would be extremely impressive to achieve a reliable mechanism for discerning a local copy exists under these constraints, particularly without false positives and false negatives, and without imposing very substantial one-time encoding costs, e.g. on par with doubling the verification cost. \n\nI think while its a difficult cost-benefit analysis, even code complexity aside, it's interesting to discuss all the same!\n\nSimply having many unique IP addresses possibly accessing the same unique copy provides a different (if any) benefit. E.g. Tor uses IPs as a cost factor, but (until recently?) didn't even factor in things like them all being the same Class C."
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-23T10:06:48",
                "message_text_only": "Wow, that's quite impressive. But what comes to my mind is if such an extravagant solution really need to be implemented regarding proof of storage? I mean, my idea whilst building my node was to do something along the lines of \"tell me what you got\" i.e get block height from the version message, and then fire off your getblock, getdata etc and simply if a node does not respond with the requested data after a few attempts, we disconnect  and perhaps blacklist until the  node restarts or something. I am of course purely looking at it from the perspective of useless nodes consuming connection slots, there may be other scenarios where you require proof of storage that I am not considering. I just think that simple blacklist rules could easily avoid this without the extra resource usage? I mean if you start doing encryption for every task then before you know it you need to dedicate all your cpu to the node! Especially for tasks that are not mission critical or require verification, I mean useless nodes are more of an annoyance with the potential to disrupt the network, slow it down, but not compromise it, so I shouldn't think it would be something that you would turn to encryption for right? I feel this anyway.\n________________________________\nFrom: Sergio Lerner<mailto:sergiolerner at certimix.com>\nSent: \u200e17/\u200e03/\u200e2015 3:45 AM\nTo: bitcoin-development at lists.sourceforge.net<mailto:bitcoin-development at lists.sourceforge.net>\nSubject: [Bitcoin-development] \"network disruption as a service\" and proof of local storage\n\nThe problem of pseudo-nodes will come over and over. The cat and mouse\nchase is just beginning.\nIt has been discussed some times that the easiest solution world be to\nrequest some kind of resource consumption on each peer to be allowed to\nconnect to other peers.\nGmaxwell proposed Proof of Storage here:\nhttps://bitcointalk.org/index.php?topic=310323.msg3332919#msg3332919\n\nI proposed a (what I think) is better protocol for Proof of Storage that\nI call \"Proof of Local storage\" here\nhttps://bitslog.wordpress.com/2014/11/03/proof-of-local-blockchain-storage/\n. It's better because it does not need the storage of additional data,\nbut more importantly, it allows you to prove full copy of the blockchain\nis being maintained by the peer.\nThis is specially important now that Bitnodes is trying a full-node\nincentive program that may be easily cheated\n(http://qntra.net/2015/02/pseudonode-proxy-fools-bitcoin-full-node-incentive-program/)\n\nProof of local storage allows a node to prove another peer that he is\nstoring a LOCAL copy of a PUBLIC file, such as the blockchain. So the\npeer need not waste more resources (well, just some resources to\nencode/decode the block-chain).\nThe main idea is to use what I called asymmetric-time-encoding.\nBasically you encode the block-chain in a way that it takes 100 more\ntimes to write it than to read it. Since the block-chain is an\nappend-only (write-only) file, this fit good for our needs. For instance\n(and as a simplification), choosing a global 1024-bit prime, then\nsplitting the block-chain in 1024-bit blocks, and encrypting each block\nusing Polihg-Hellman (modexp) with decryption exponent 3.  Then\nencryption is at least 100 times slower than decryption. Before PH\nencryption each node must xor each block with a pseudo-random mask\nderived from the public IP and the block index.  So block encryption\ncould be:\nBlockEncryptIndex(i) = E(IP+i,block(i))^inv(3) (mod p),\n\nwhere inv(3) is 3^-1 mod (p-1). E() could be a fast tweaked encryption\nroutine (tweak = index), but we only need the PRNG properties of E() and\nthat E() does share algebraic properties with P.H..\n\nTwo protocols can be performed to prove local possession:\n1. (prover and verifier pay a small cost) The verifier sends a seed to\nderive some n random indexes, and the prover must respond with the hash\nof the decrypted blocks within a certain time bound. Suppose that\ndecryption of n blocks take 100 msec (+-100 msec of network jitter).\nThen an attacker must have a computer 50 faster to be able to\nconsistently cheat. The last 50 blocks should not be part of the list to\nallow nodes to catch-up and encrypt the blocks in background.\n\n2. (prover pay a high cost, verified pays negligible cost). The verifier\nchooses a seed n, and then pre-computes the encrypted blocks derived\nfrom the seed using the prover's IP. Then the verifier sends the  seed,\nand the prover must respond with the hash of the encrypted blocks within\na certain time bound. The proved does not require to do any PH\ndecryption, just take the encrypted blocks for indexes derived from the\nseed, hash them and send the hash back to the verifier. The verifier\nvalidates the time bound and the hash.\n\nBoth protocols can me made available by the client, under different\nstates. For instance, new nodes are only allowed to request protocol 2\n(and so they get an initial assurance their are connecting to\nfull-nodes). After a first-time mutual authentication, they are allowed\nto periodically perform protocol 1. Also new nodes may be allowed to\nperform protocol 1 with a small index set, and increase the index set\nover time, to get higher confidence.\n\nThe important difference between this protocol and classical remote\nsoftware attestation protocols, is that the time gap between a good peer\nand a malicious peer can be made arbitrarily high, picking a larger p.\nMaybe there is even another crypto primitive which is more asymmetric\nthan exponent 3 decryption (the LUC or NTRU cryptosystem?).\n\nIn GMaxwell proposal each peer builds a table for each other peer. In my\nproposal, each peer builds a single table (the encrypted blockchain), so\nit could be still possible to establish a thousands of connections to\nthe network from a single peer. Nevertheless, the attacker's IP will be\neasily detected (he cannot hide under a thousands different IPs). It's\nalso possible to restrict the challenge-response to a portion of the\nblock-chain, the portion offset being derived from the hash of both IP\naddresses and one random numbers provided by each peer. Suppose each\nconnection has a C-R space equivalent to 1% of the block-chain. Then\nhaving 100 connections and responding to C-R on each connection means\nstoring approximate 1 copy of the block-chain (there may be overlaps,\nwhich would need to be stored twice) , while having 1K connections would\nrequire storing 10 copies of the blockchain.\n\n\nBest regards,\n Sergio\n\n\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the\nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150323/bc401ab6/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-03-27T16:00:52",
                "message_text_only": "On Friday, 27 March 2015, at 4:57 pm, Wladimir J. van der Laan wrote:\n> On Fri, Mar 27, 2015 at 11:16:43AM -0400, Matt Whitlock wrote:\n> > I agree that someone could do this, but why is that a problem? Isn't the goal of this exercise to ensure more full nodes on the network? In order to be able to answer the challenges, an entity would need to be running a full node somewhere. Thus, they have contributed at least one additional full node to the network. I could certainly see a case for a company to host hundreds of lightweight (e.g., EC2) servers all backed by a single copy of the block chain. Why force every single machine to have its own copy? All you really need to require is that each agency/participant have its own copy.\n> \n> They would not even have to run one. It could just pass the query to a random other node, and forward its result :)\n\nD'oh. Of course. Thanks. :/\n\nThe suggestion about encrypting blocks with a key tied to IP address seems like a bad idea, though. Lots of nodes are on dynamic IP addresses. It wouldn't really be practical to re-encrypt the entire block chain every time a node's IP address changes."
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-03-27T16:08:40",
                "message_text_only": "On Friday, 27 March 2015, at 4:57 pm, Wladimir J. van der Laan wrote:\n> On Fri, Mar 27, 2015 at 11:16:43AM -0400, Matt Whitlock wrote:\n> > I agree that someone could do this, but why is that a problem? Isn't the goal of this exercise to ensure more full nodes on the network? In order to be able to answer the challenges, an entity would need to be running a full node somewhere. Thus, they have contributed at least one additional full node to the network. I could certainly see a case for a company to host hundreds of lightweight (e.g., EC2) servers all backed by a single copy of the block chain. Why force every single machine to have its own copy? All you really need to require is that each agency/participant have its own copy.\n> \n> They would not even have to run one. It could just pass the query to a random other node, and forward its result :)\n\nAh, easy way to fix that. In fact, in my first draft of my suggestion, I had the answer, but I removed it because I thought it was superfluous.\n\nChallenge:\n\"Send me: SHA256(SHA256(concatenation of N pseudo-randomly selected bytes from the block chain | prover's nonce | verifier's nonce)).\"\n\nThe nonces are from the \"version\" messages exchanged at connection startup. A node can't pass the buck because it can't control the nonce that a random other node chooses."
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-28T02:55:00",
                "message_text_only": "If the IP discovery is your main motivation, why don't you introduce some onion routing into transactions? That would solve this problem easily, of course there is an overhead which will slightly slow down the relay of transactions but not significantly, also make it an option not enforced, for those worried about IP association.\n________________________________\nFrom: Robert McKay<mailto:robert at mckay.com>\nSent: \u200e28/\u200e03/\u200e2015 2:33 AM\nTo: Matt Whitlock<mailto:bip at mattwhitlock.name>\nCc: bitcoin-development at lists.sourceforge.net<mailto:bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] \"network disruption as a service\" and proof of local storage\n\nThe main motivation is to try and stop a single entity running lots of\nnodes in order to harvest transaction origin IPs. That's what's behind\nthis.\n\nProbably the efforts are a waste of time.. if someone has to keep a few\nhundred copies of the blockchain around in order to keep IP specific\nprecomputed data around for all the IPs they listen on then they'll just\nbuy a handful of 5TB HDs and call it a day.. still some of the ideas\nproposed are quite interesting and might not have much downside.\n\nRob\n\n\nOn 2015-03-27 15:16, Matt Whitlock wrote:\n> I agree that someone could do this, but why is that a problem? Isn't\n> the goal of this exercise to ensure more full nodes on the network?\n> In\n> order to be able to answer the challenges, an entity would need to be\n> running a full node somewhere. Thus, they have contributed at least\n> one additional full node to the network. I could certainly see a case\n> for a company to host hundreds of lightweight (e.g., EC2) servers all\n> backed by a single copy of the block chain. Why force every single\n> machine to have its own copy? All you really need to require is that\n> each agency/participant have its own copy.\n>\n>\n> On Friday, 27 March 2015, at 2:32 pm, Robert McKay wrote:\n>> Basically the problem with that is that someone could setup a single\n>> full node that has the blockchain and can answer those challenges\n>> and\n>> then a bunch of other non-full nodes that just proxy any such\n>> challenges\n>> to the single full node.\n>>\n>> Rob\n>>\n>> On 2015-03-26 23:04, Matt Whitlock wrote:\n>> > Maybe I'm overlooking something, but I've been watching this\n>> thread\n>> > with increasing skepticism at the complexity of the offered\n>> solution.\n>> > I don't understand why it needs to be so complex. I'd like to\n>> offer\n>> > an\n>> > alternative for your consideration...\n>> >\n>> > Challenge:\n>> > \"Send me: SHA256(SHA256(concatenation of N pseudo-randomly\n>> selected\n>> > bytes from the block chain)).\"\n>> >\n>> > Choose N such that it would be infeasible for the responding node\n>> to\n>> > fetch all of the needed blocks in a short amount of time. In other\n>> > words, assume that a node can seek to a given byte in a block\n>> stored\n>> > on local disk much faster than it can download the entire block\n>> from\n>> > a\n>> > remote peer. This is almost certainly a safe assumption.\n>> >\n>> > For example, choose N = 1024. Then the proving node needs to\n>> perform\n>> > 1024 random reads from local disk. On spinning media, this is\n>> likely\n>> > to take somewhere on the order of 15 seconds. Assuming blocks are\n>> > averaging 500 KiB each, then 1024 blocks would comprise 500 MiB of\n>> > data. Can 500 MiB be downloaded in 15 seconds? This data transfer\n>> > rate\n>> > is 280 Mbps. Almost certainly not possible. And if it is, just\n>> > increase N. The challenge also becomes more difficult as average\n>> > block\n>> > size increases.\n>> >\n>> > This challenge-response protocol relies on the lack of a \"partial\n>> > getdata\" command in the Bitcoin protocol: a node cannot ask for\n>> only\n>> > part of a block; it must ask for an entire block. Furthermore,\n>> nodes\n>> > could ban other nodes for making too many random requests for\n>> blocks.\n>> >\n>> >\n>> > On Thursday, 26 March 2015, at 7:09 pm, Sergio Lerner wrote:\n>> >>\n>> >> > If I understand correctly, transforming raw blocks to keyed\n>> blocks\n>> >> > takes 512x longer than transforming keyed blocks back to raw.\n>> The\n>> >> key\n>> >> > is public, like the IP, or some other value which perhaps\n>> changes\n>> >> less\n>> >> > frequently.\n>> >> >\n>> >> Yes. I was thinking that the IP could be part of a first layer of\n>> >> encryption done to the blockchain data prior to the asymetric\n>> >> operation.\n>> >> That way the asymmetric operation can be the same for all users\n>> (no\n>> >> different primers for different IPs, and then the verifiers does\n>> not\n>> >> have to verify that a particular p is actually a pseudo-prime\n>> >> suitable\n>> >> for P.H. ) and the public exponent can be just 3.\n>> >>\n>> >> >\n>> >> >> Two protocols can be performed to prove local possession:\n>> >> >> 1. (prover and verifier pay a small cost) The verifier sends a\n>> >> seed to\n>> >> >> derive some n random indexes, and the prover must respond with\n>> >> the hash\n>> >> >> of the decrypted blocks within a certain time bound. Suppose\n>> that\n>> >> >> decryption of n blocks take 100 msec (+-100 msec of network\n>> >> jitter).\n>> >> >> Then an attacker must have a computer 50 faster to be able to\n>> >> >> consistently cheat. The last 50 blocks should not be part of\n>> the\n>> >> list to\n>> >> >> allow nodes to catch-up and encrypt the blocks in background.\n>> >> >>\n>> >> >\n>> >> > Can you clarify, the prover is hashing random blocks of\n>> >> *decrypted*,\n>> >> > as-in raw, blockchain data? What does this prove other than,\n>> >> perhaps,\n>> >> > fast random IO of the blockchain? (which is useful in its own\n>> >> right,\n>> >> > e.g. as a way to ensure only full-node IO-bound mining if baked\n>> >> into\n>> >> > the PoW)\n>> >> >\n>> >> > How is the verifier validating the response without possession\n>> of\n>> >> the\n>> >> > full blockchain?\n>> >>\n>> >> You're right, It is incorrect. Not the decrypted blocks must be\n>> >> sent,\n>> >> but the encrypted blocks. There correct protocol is this:\n>> >>\n>> >> 1. (prover and verifier pay a small cost) The verifier sends a\n>> seed\n>> >> to\n>> >> derive some n random indexes, and the prover must respond with\n>> the\n>> >> the\n>> >> encrypted blocks within a certain time bound. The verifier\n>> decrypts\n>> >> those blocks to check if they are part of the block-chain.\n>> >>\n>> >> But then there is this improvement which allows the verifier do\n>> >> detect\n>> >> non full-nodes with much less computation:\n>> >>\n>> >> 3. (prover pays a small cost, verifier smaller cost) The verifier\n>> >> asks\n>> >> the prover to send a Merkle tree root of hashes of encrypted\n>> blocks\n>> >> with\n>> >> N indexes selected by a psudo-random function seeded by a\n>> challenge\n>> >> value, where each encrypted-block is previously prefixed with the\n>> >> seed\n>> >> before being hashed (e.g. N=100). The verifier receives the\n>> Markle\n>> >> Root\n>> >> and performs a statistical test on the received information. From\n>> >> the N\n>> >> hashes blocks, it chooses M < N (e.g. M = 20), and asks the\n>> proved\n>> >> for\n>> >> the blocks at these indexes. The prover sends the blocks, the\n>> >> verifier\n>> >> validates the blocks by decrypting them and also verifies that\n>> the\n>> >> Merkle tree was well constructed for those block nodes. This\n>> proves\n>> >> with\n>> >> high probability that the Merkle tree was built on-the-fly and\n>> >> specifically for this challenge-response protocol.\n>> >>\n>> >> > I also wonder about the effect of spinning disk versus SSD.\n>> Seek\n>> >> time\n>> >> > for 1,000 random reads is either nearly zero or dominating\n>> >> depending\n>> >> > on the two modes. I wonder if a sequential read from a random\n>> >> index is\n>> >> > a possible trade-off,; it doesn't prove possession of the whole\n>> >> chain\n>> >> > nearly as well, but at least iowait converges significantly.\n>> Then\n>> >> > again, that presupposes a specific ordering on disk which might\n>> >> not\n>> >> > exist. In X years it will all be solid-state, so eventually\n>> it's\n>> >> moot.\n>> >> >\n>> >> Good idea.\n>> >>\n>> >> Also we don't need that every node implements the protocol, but\n>> only\n>> >> nodes that want to prove full-node-ness, such as the ones which\n>> want\n>> >> to\n>> >> receive bitnodes subsidy.\n>> >\n>> >\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > Dive into the World of Parallel Programming The Go Parallel\n>> Website,\n>> > sponsored\n>> > by Intel and developed in partnership with Slashdot Media, is your\n>> > hub for all\n>> > things parallel software development, from weekly thought\n>> leadership\n>> > blogs to\n>> > news, videos, case studies, tutorials and more. Take a look and\n>> join\n>> > the\n>> > conversation now. http://goparallel.sourceforge.net/\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website,\n>> sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all\n>> things parallel software development, from weekly thought leadership\n>> blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join\n>> the\n>> conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the\nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150328/91a39972/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "\"network disruption as a service\" and proof of local storage",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robert McKay",
                "Sergio Lerner",
                "Matt Whitlock",
                "Jeremy Spilman",
                "Thy Shizzle"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 63091
        }
    },
    {
        "title": "[Bitcoin-development] BIP70: why Google Protocol Buffers for encoding?",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2015-03-14T15:58:44",
                "message_text_only": "> That was essentially what we did in the end, we replaced the network\n> identifier (\"main\"/\"test\") with the genesis block hash. The result is\n> never going to accidentally work with Bitcoin Core (nor vice-versa), but\n> is readily extensible to any other altcoins that want to use the\n> specification without requiring any sort of central registry.\n>\n\nInteresting approach, and I also think that requiring a central\nregistry would be potentially harmful.\n\nHowever, I think it might not be adequate to think of the network\nidentifier as being congruent with the genesis block hash. In the\ntheoretical case of the blockchain being continued on two forked\nchains (with two communities which prefer one of the chains each),\nclients would not be prevented from interpreting messages on the wrong\nchain.\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-03-24T12:08:03",
                "message_text_only": "That case is very unlikely IMO, but still you can solve it while keeping\nhash of the genesis block as the chain id. If a community decides to accept\na forking chain with new rules from block N (let's call it bitcoinB), the\noriginal chain can maintain the original genesis block and the new\ncommunity can define N (which is not accepted by bitcoin due to the new\nrules) as the genesis block for bitcoinB for the purposes of chain ID. As\nsaid forking bitcoins and  bitcoinsB with the same owners doesn't make much\nsense to me. If you're creating a new currency you can just as well define\na new chain. If you want to start an initial utxo giving the new coins to\nbitcoin holders...I still don't see the point, but you can also do that in\na new chain.\n\nIn summary, your example is not a good reason not to adopt a hash of the\ngenesis block as chain ID.\nOn Mar 14, 2015 5:22 PM, \"Isidor Zeuner\" <cryptocurrencies at quidecco.de>\nwrote:\n\n> > That was essentially what we did in the end, we replaced the network\n> > identifier (\"main\"/\"test\") with the genesis block hash. The result is\n> > never going to accidentally work with Bitcoin Core (nor vice-versa), but\n> > is readily extensible to any other altcoins that want to use the\n> > specification without requiring any sort of central registry.\n> >\n>\n> Interesting approach, and I also think that requiring a central\n> registry would be potentially harmful.\n>\n> However, I think it might not be adequate to think of the network\n> identifier as being congruent with the genesis block hash. In the\n> theoretical case of the blockchain being continued on two forked\n> chains (with two communities which prefer one of the chains each),\n> clients would not be prevented from interpreting messages on the wrong\n> chain.\n>\n> Best regards,\n>\n> Isidor\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150324/2236724b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70: why Google Protocol Buffers for encoding?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Isidor Zeuner"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3456
        }
    },
    {
        "title": "[Bitcoin-development] My thoughts on the viability of the Factom token",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-03-16T22:12:59",
                "message_text_only": "Repost of https://www.reddit.com/r/Bitcoin/comments/2z9k5p/factom_announces_launch_date_for_software_token/cph0pvo\nfor archival/disclosure purposes:\n\nI'm very skeptical about the long-term viability of Factom and the value of the\nFactom token.\n\nThe idea behind Factom is to create a proof-of-publication medium where facts\nfor some purpose can be published; the token incentivises people to maintain\nthe infrastructure required for that medium. You can think of Factom as a two\nlayer system, with Factom servers provide a layer that in turn is used by\nsecondary proof-of-publication ledgers. By publishing records in the Factom\nlayer you prove that the secondary layer of actual facts is being maintained\nhonestly.\n\nFor instance one such secondary layer might be the property records of a\ncity using a digital Torrens title system\u00b9 to maintain land titles.\nLet's look at how this works step by step:\n\n* You would know your digitally represented land title was valid because\n  it was in the city's ledger and the digital signatures verify.\n\n* You in turn know the *copy* of that ledger that you posess is the\n  official version because you can inspect the ledger maintained by the\n  Factom servers.\n\n* You know that ledger is the official Factom layer - not a fork of that\n  ledger - because you can run the Factom consensus protocol against the\n  Bitcoin blockchain.\n\n* You know you have the only Bitcoin blockchain and not a fork because\n  of the Bitcoin Proof-of-Work consensus algorithm.\n\nThat's four steps in total. The problem is step #3 - the Factom\nconsensus layer - requires you to trust the Factom servers. The issue is\nif the Factom servers ever publish a Factom ledger anchor in the Bitcoin\nblockchain but don't make the data available you have no way of proving\nthat your Factom-secured ledger - e.g. the city's property title records\n- is the only copy out there and you're not trying to defraud someone.\nThose servers are voted in by a (quite complex) consensus algorithm, but\nultimately they are trusted third parties that can break your ability to\nprove your Factom-secured records are honest.\n\nOf course in practice if this happens people will just accept it and\npatch their software to ignore the failure... but then why use Factom at\nall? You can do the exact same thing with *far* less complexity by just\nsecuring your ledger directly in the Bitcoin blockchain, skipping step\n#3 and the dependency on trusted third parties. (I don't mean putting\nthe ledger itself in the chain, just hashes of it)\n\nThe only disadvantage to securing your records directly in the Bitcoin\nblockchain is you have to pay transaction fees to do it. However\ncurrently those fees are very small - they'll always be about the cost\nto make a transaction - and if they do increase it's easy to create\n\"meta-ledgers\" based on explicit trust relationships. For instance a\nbunch of cities can get together to establish a meta-ledger for all\ntheir per-city property title systems, perhaps using efficient\nthreshold-signature\u00b2 multisig to ensure that a majority of those cities\nhave to sign off on any updates to the meta-ledger.\n\nOf course all these Factom alternatives can be argued to \"bloat the\nblockchain\" - but how are we going to force people to use less secure\nalternatives to just using the blockchain? It's impossible to stop\npeople from securing ledgers in the blockchain technically; our only way\nto do it is via social pressure like writing angry posts on reddit and\nlawsuits.\n\ntl;dr: For the Facom token to rise in value we need Bitcoin transaction\nfees to rise greatly, and/or people to choose to use much more complex\nand less secure systems in preference to much more simple systems.\n\nDisclaimer: I've been hired by Factom to review the Factom protocol. I\nalso am working on a competing library called Proofchains that among\nother things can be used to secure ledgers using Bitcoin directly. That\nfunding model for that effort is to convince individual clients that\nthey need the technology and should pay me to develop it.\n\n1) http://en.wikipedia.org/wiki/Torrens_title\n\n2) https://bitcoinmagazine.com/19528/threshold-signatures-new-standard-wallet-security/\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000de14334f9da364dc660a7cb1d7b695c08a3472e94d3512a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150316/87139669/attachment.sig>"
            },
            {
                "author": "Brian Deery",
                "date": "2015-03-20T05:46:18",
                "message_text_only": "Greetings mailing list.\n\nNot sure that this content is 100% appropriate here, but Peter Todd\ninvited me to post this for archival purposes.  The original thread\nhas been removed from the search results, but is still up here:\nhttp://www.reddit.com/r/Bitcoin/comments/2z9k5p/factom_announces_launch_date_for_software_token/\n\n\nI have added more thoughts too.\n\n\n\n-----BEGIN REDDIT MESSAGE-----\n\n> The idea behind Factom is to create a proof-of-publication medium where facts for some purpose can be published\n\nThat is only part of the story.  Factom is attempting to make a\npublishing platform which is simultaneously censorship and spam\nresistant.  This is what makes Bitcoin magical, and what Factom is\ntrying to accomplish.  Last Summer, I went down the road that you are\ngoing down and kept coming up with a system that was susceptible to\neither one or the other.  I gave the entities you described the\nglorious name **Compaction Service Providers** (CSP) and even wrote\nabout it [here](https://github.com/FactomProject/FactomDocs/commit/2791c51917e3ecc65dc52bfc434ca6dec0b3a1fd)\nback when we were Notarychains.  With free entry of CSPs, censorship\nwould be limited, but the entire system would get spammed quickly, and\nthere would not be a good way to accurately locate the data you\nneeded.  Without free entry, once a specific CSP (or proofchain\npackager) was selected by a network, the CSP could selectively censor\nwithin that network.  Lock in effects would be strong, so switching\nthe entire network over to a new CSP would be expensive.\n\nThe CSPs (and Proofchain packagers) could \"exclude, delay, or reorder\nthe customer's timestamped entries\".  This is fine as long as the CSP\ndoesn't have an incentive to do these things.\n\nYou claim that proofchains packagers will be the very business that\nissues a stock.  Since stockholders are trusting the company to return\ndividends in the first place, the trust can be expanded to managing\nall the stock trades too.  In my mind, the company who issues the\nstock still may game the system they control for their personal\nbenefit.  What is needed is a scalable disimpassioned 3rd party.\nSomething of the scale where if the company president calls up and\nsays \"Delay these disfavored parties\" that the packagers tell him his\ncompany isn't big enough to push them around.\n\nI think **Factom sits in a sweet spot between** your proposed\n**centralized** solution **and** Bitcoin's anonymous membership\nauthority set (**Proof of Work**).  The Federated servers must\ncooperate to move Factom forward, but like Bitcoin, require a majority\nto effectively censor a transaction.  It is a whole lot easier to\ncensor with Proofchains.\n\n\n\n>The issue is if the Factom servers ever publish a Factom ledger anchor in the Bitcoin blockchain but don't make the data available you have no way of proving...\n\nYes, to this point, Factom being forked is way worse than seizing up.\nThe Federated servers are constantly watching their peers and keeping\nthem honest.  Since we have a defined majority instead of an anonymous\nmembership set, if one Federated server goes rouge, the honest\nmajority will all place the correct anchor.  You will see 1 anchor\nwhere someone is maybe trying to defraud you, and 31 anchors that have\nthe correct data.\n\n\n> Those servers are voted in by a (quite complex) consensus algorithm\n\nI had considered merge mining, but your [arguments against\nit](https://letstalkbitcoin.com/ltb104-tree-chains-with-peter-todd/)\nin reference to sidechains is compelling.  Without a majority of\nminers, then the system is vulnerable to consensus attack.  We gain\nthe non-reversability by placing anchors in bitcoin without needing to\nrecruit mining pools.\n\nWe could have gone to proof of stake, but then someone who funded it\nearly on would have a disproportionate say in how the system was run.\nSince we have the two step payment process, we can leverage that to\ndetermine who is actively participating in the system, and let them\ndetermine who sets policy.\n\n\n>but ultimately they are trusted third parties that can break your ability to prove your Factom-secured records are honest\n\nWe are making the system so that it is visible if someone is trying to\ndo this, and the other members fight against it.\n\n>skipping step #3 and the dependency on trusted third parties\n\nBut what you are proposing is a single trusted third party.\n\n\n\n>is you have to pay transaction fees to do it\n>we need Bitcoin transaction fees to rise greatly\nI disagree.  Bitcoin is optimized for proving a negative over the\ndomain of Bitcoin value transactions.  Lets take a closed system like\nCounterparty's current implementation.  To prove the negative (that an\nasset has not been sent to someone else first) you need to parse the\nentire Bitcoin blockchain looking for Counterparty transactions.  One\nof two things will happen soon.  The 1MB limit will be raised, or not.\n\n* Raised blocksize.  In order to see if your Counterparty asset was\ndoublespent, you will need to parse through many terabytes of Bitcoin\ntransactions to find the few MiB of Counterparty transactions.  You\nwould also need to wade through all the other embedded protocols like\nOmni, ProofOfExistence.com, and all the others in your search for\nCounterparty transactions.  Factom is setup so that interpreted\nprotocols like Counterparty do not need to wade through all other\nprotocol's data.\n\n* Block limit stays.  Each Bitcoin transaction becomes expensive.\nEach transaction might rise to $5, $10, $15, who knows.  Distributions\nto asset holders would cost hundreds or thousands per dividend.\n\n\n\n>I'm very skeptical about the long-term viability of Factom and the value of the Factom token.\n>tl;dr: For the Facom token to rise in value we need Bitcoin transaction fees to rise greatly\n\nYou are making economic statements with technical arguments to back\nthem up.  I think the economics and technicals are not as tightly\nbound as you imply.\n\n\nTLDR:\nFactom is trying to be a censorship and spam resistant disimpassioned\n3rd party, like Bitcoin.\n\n-----END REDDIT MESSAGE-----\n\n\n\n\n\n\nI like to think in audited vs interpreted protocols.  Think Bitcoin vs\nCounterparty.  Bitcoin won't let an invalid transaction into the\nsystem.  Counterparty filters out invalid transactions after the fact.\n\nProofchains are good for audited protocols where there is a\npredetermined auditor.  There is a gatekeeper who only adds in valid\ntransactions.\n\nFactom is good for interpreted protocols.  A user's software will\nfilter out transactions which do not pass a ruleset that they agreed\nto.\n\nBoth are immutable and serve as proof of publication (POP).  Sure the\nPOP in Factom is more complicated, but the publishing powers are\nshared.\n\nOn the bitcoin wizards\n[IRC](https://download.wpsoftware.net/bitcoin/wizards/2015-03-16.html),\nphantomcircuit seems to have gotten close, the conversation resolved\nwith Alice burning her house down.\n\nThere are applications where proofchains will work just fine.  If you\nare securing your own blockchian for your own data, proofchains will\nwork.  You are not worried about censoring yourself.\n\nIf two rivalrous institutions are sharing a blockchain, then giving\none of them exclusive power of making the blockchain is undesirable\nfor the non-authoritative institution.  No need to discuss that\narrangement anymore.\n\nWith threshold multisig, now multiple institutions would need to\ncooperate amongst each other to create a communal blockchain. In this\nexample, a majority of keyholders can directly censor the minority.\nThe minority might have recourse like in Szabo's property club blog\npost to fork the chain and start an alternate system, but if the\nminority is too small, then the network will not jump to the fairer\nfork.\n\nOK, lets move authority to an industry group.  For something like\nproperty records, it is shown to work in a centralized model.  Making\nthat model immutable with proofchains will certainly work.  Property\nrecords are highly gated as of now at the county seat.  Transitioning\nthe county property database to a proofchains based POP will work.\nThey are audited records, and the auditor is predetermined.  They\nalready have censorship powers, and would in Factom too.  The only\ndifference would be that in proofchains an invalid record would not\nexist, and in Factom, an invalid record would exist, but not be signed\nby the county.\n\nAs the individual players in a system become more numerous and less\npowerful, it becomes harder to have a disimpassioned industry group.\nThis is similar to politics where we see dispersed costs and\nconcentrated benefits.\n\nLets jump to the end and try to imagine how Counterparty would run on\nproofchains.  Who would be the one to package the transactions?  The\ncounterpart devs can censor now, by updating the software to blacklist\ncertain addresses.  They are already the predetermined auditor.  The\nCounterparty Foundation could package the transactions in a\nproofchain.  The difference to me lies in how easy it is to censor.\nIt feels harder to censor by baking specific blacklists into the\nsoftware than keeping a blacklisted party from ever publishing at all.\nOne is very visible and the latter maybe not as much.  (Something like\nproofchains is how I initially imagined Mastercoin and Counterparty\nwould work, since it seems silly to have every transaction be a BTC\ntransaction too.  I underestimated their desire for censorship\nresistance.)\n\n\nIn the end it comes down to the data being published, and how/when it\nis audited.  Proofchains prefilters data and couples the auditor with\nthe packager.  Factom allows the users to choose how they audit data\nindependent of the packager.  How much power do you want to invest in\none entity?  Factom allows splitting of those powers.\n\n-Brian Deery\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150320/5cfde684/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-03-29T14:20:43",
                "message_text_only": "On Fri, Mar 20, 2015 at 12:46:18AM -0500, Brian Deery wrote:\n> Greetings mailing list.\n> \n> Not sure that this content is 100% appropriate here, but Peter Todd\n> invited me to post this for archival purposes.  The original thread\n> has been removed from the search results, but is still up here:\n> http://www.reddit.com/r/Bitcoin/comments/2z9k5p/factom_announces_launch_date_for_software_token/\n> \n> \n> I have added more thoughts too.\n\nThanks.\n\nYou know, looking though your writeup, I think we're talking past each\nother. I've found with a lot of other projects a good way to start is to\nexplicitly list what you think Factom *prevents* from happening. It is\nafter all security software - the most important thing it does is what\nit prevents the attacker from doing. Be specific - you really need to\nnail down exactly what kind of guarantees you're trying to get out of\nthe Factom system.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000064a6b620c22d89697757f4d81c3b839e50b03e2d3f8e168\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150329/83c65bbe/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "My thoughts on the viability of the Factom token",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Brian Deery",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 15729
        }
    },
    {
        "title": "[Bitcoin-development] Relative CHECKLOCKTIMEVERIFY (was CLTV proposal)",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2015-03-16T22:22:13",
                "message_text_only": "In building some CLTV-based contracts, it is often also useful to have a\nmethod of requiring, instead of locktime-is-at-least-N,\nlocktime-is-at-least-N-plus-the-height-of-my-input. ie you could imagine\nan OP_RELATIVECHECKLOCKTIMEVERIFY that reads (does not pop) the top\nstack element, adds the height of the output being spent and then has\nidentical semantics to CLTV.\nA slightly different API (and different name) was described by maaku at\nhttp://www.reddit.com/r/Bitcoin/comments/2z2l91/time_to_lobby_bitcoins_core_devs_sf_bitcoin_devs/cpgc154\nwhich does a better job of saving softfork-available opcode space.\n\nThere are two major drawbacks to adding such an operation, however.\n\n1) More transaction information is exposed inside the script (prior to\nCLTV we only had the sigchecking operation exposed, with a CLTV and\nRCLTV/OP_CHECK_MATURITY_VERIFY we expose two more functions).\n\n2) Bitcoin Core's mempool invariant of \"all transactions in the mempool\ncould be thrown into one overside block and aside from block size, it\nwould be valid\" becomes harder to enforce. Currently, during reorgs,\ncoinbase spends need checked (specifically, anything spending THE\ncoinbase 100 blocks ago needs checked) and locktime transactions need\nchecked. With such a new operation, any script which used this new\nopcode during its execution would need to be re-evaluated during reorgs.\n\nI think both of these requirements are reasonable and not particularly\ncumbersome, and the value of such an operation is quite nice for some\nprotocols (including settings setting up a contest interval in a\nsidechain data validation operation).\n\nThoughts?\n\nMatt\n\nOn 10/01/14 13:08, Peter Todd wrote:\n> I've written a reference implementation and BIP draft for a new opcode,\n> CHECKLOCKTIMEVERIFY. The BIP, reproduced below, can be found at:\n> \n>     https://github.com/petertodd/bips/blob/checklocktimeverify/bip-checklocktimeverify.mediawiki\n> \n> The reference implementation, including a full-set of unittests for the\n> opcode semantics can be found at:\n> \n>     https://github.com/petertodd/bitcoin/compare/checklocktimeverify\n> \n> <pre>\n>   BIP:\n>   Title: OP_CHECKLOCKTIMEVERIFY\n>   Author: Peter Todd <pete at petertodd.org>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2014-10-01\n> </pre>\n> \n> ==Abstract==\n> \n> This BIP describes a new opcode (OP_CHECKLOCKTIMEVERIFY) for the Bitcoin\n> scripting system that allows a transaction output to be made unspendable until\n> some point in the future.\n> \n> \n> ==Summary==\n> \n> CHECKLOCKTIMEVERIFY re-defines the existing NOP2 opcode. When executed it\n> compares the top item on the stack to the nLockTime field of the transaction\n> containing the scriptSig. If that top stack item is greater than the transation\n> nLockTime the script fails immediately, otherwise script evaluation continues\n> as though a NOP was executed.\n> \n> The nLockTime field in a transaction prevents the transaction from being mined\n> until either a certain block height, or block time, has been reached. By\n> comparing the argument to CHECKLOCKTIMEVERIFY against the nLockTime field, we\n> indirectly verify that the desired block height or block time has been reached;\n> until that block height or block time has been reached the transaction output\n> remains unspendable.\n> \n> \n> ==Motivation==\n> \n> The nLockTime field in transactions makes it possible to prove that a\n> transaction output can be spent in the future: a valid signature for a\n> transaction with the desired nLockTime can be constructed, proving that it is\n> possible to spend the output with that signature when the nLockTime is reached.\n> An example where this technique is used is in micro-payment channels, where the\n> nLockTime field proves that should the receiver vanish the sender is guaranteed\n> to get all their escrowed funds back when the nLockTime is reached.\n> \n> However the nLockTime field is insufficient if you wish to prove that\n> transaction output ''can-not'' be spent until some time in the future, as there\n> is no way to prove that the secret keys corresponding to the pubkeys controling\n> the funds have not been used to create a valid signature.\n> \n> \n> ===Escrow===\n> \n> If Alice and Bob jointly operate a business they may want to\n> ensure that all funds are kept in 2-of-2 multisig transaction outputs that\n> require the co-operation of both parties to spend. However, they recognise that\n> in exceptional circumstances such as either party getting \"hit by a bus\" they\n> need a backup plan to retrieve the funds. So they appoint their lawyer, Lenny,\n> to act as a third-party.\n> \n> With a standard 2-of-3 CHECKMULTISIG at any time Lenny could conspire with\n> either Alice or Bob to steal the funds illegitimately. Equally Lenny may prefer\n> not to have immediate access to the funds to discourage bad actors from\n> attempting to get the secret keys from him by force.\n> \n> However with CHECKLOCKTIMEVERIFY the funds can be stored in scriptPubKeys of\n> the form:\n> \n>     IF\n>         <now + 3 months> CHECKLOCKTIMEVERIFY DROP\n>         <Lenny's pubkey> CHECKSIGVERIFY\n>         1\n>     ELSE\n>         2\n>     ENDIF\n>     <Alice's pubkey> <Bob's pubkey> 2 CHECKMULTISIG\n> \n> At any time the funds can be spent with the following scriptSig:\n> \n>     <Alice's signature> <Bob's signature> 0\n> \n> After 3 months have passed Lenny and one of either Alice or Bob can spend the\n> funds with the following scriptSig:\n> \n>     <Alice/Bob's signature> <Lenny's signature> 1\n> \n> \n> ===Non-interactive time-locked refunds===\n> \n> There exist a number of protocols where a transaction output is created that\n> the co-operation of both parties to spend the output. To ensure the failure of\n> one party does not result in the funds becoming lost refund transactions are\n> setup in advance using nLockTime. These refund transactions need to be created\n> interactively, and additionaly, are currently vulnerable to transaction\n> mutability. CHECKLOCKTIMEVERIFY can be used in these protocols, replacing the\n> interactive setup with a non-interactive setup, and additionally, making\n> transaction mutability a non-issue.\n> \n> \n> ====Two-factor wallets====\n> \n> Services like GreenAddress store Bitcoins with 2-of-2 multisig scriptPubKey's\n> such that one keypair is controlled by the user, and the other keypair is\n> controlled by the service. To spend funds the user uses locally installed\n> wallet software that generates one of the required signatures, and then uses a\n> 2nd-factor authentication method to authorize the service to create the second\n> SIGHASH_NONE signature that is locked until some time in the future and sends\n> the user that signature for storage. If the user needs to spend their funds and\n> the service is not available, they wait until the nLockTime expires.\n> \n> The problem is there exist numerous occasions the user will not have a valid\n> signature for some or all of their transaction outputs. With\n> CHECKLOCKTIMEVERIFY rather than creating refund signatures on demand\n> scriptPubKeys of the following form are used instead:\n> \n>     IF\n>         <service pubkey> CHECKSIGVERIFY\n>     ELSE\n>         <expiry time> CHECKLOCKTIMEVERIFY DROP\n>     ENDIF\n>     <user pubkey> CHECKSIG\n> \n> Now the user is always able to spend their funds without the co-operation of\n> the service by waiting for the expiry time to be reached.\n> \n> \n> ====Micropayment Channels====\n> \n> Jeremy Spilman style micropayment channels first setup a deposit controlled by\n> 2-of-2 multisig, tx1, and then adjust a second transaction, tx2, that spends\n> the output of tx1 to payor and payee. Prior to publishing tx1 a refund\n> transaction is created, tx3, to ensure that should the payee vanish the payor\n> can get their deposit back. The process by which the refund transaction is\n> created is currently vulnerable to transaction mutability attacks, and\n> additionally, requires the payor to store the refund. Using the same\n> scriptPubKey from as in the Two-factor wallets example solves both these issues.\n> \n> \n> ===Trustless Payments for Publishing Data===\n> \n> The PayPub protocol makes it possible to pay for information in a trustless way\n> by first proving that an encrypted file contains the desired data, and secondly\n> crafting scriptPubKeys used for payment such that spending them reveals the\n> encryption keys to the data. However the existing implementation has a\n> significant flaw: the publisher can delay the release of the keys indefinitely.\n> \n> This problem can be solved interactively with the refund transaction technique;\n> with CHECKLOCKTIMEVERIFY the problem can be non-interactively solved using\n> scriptPubKeys of the following form:\n> \n>     IF\n>         HASH160 <Hash160(encryption key)> EQUALVERIFY\n>         <publisher pubkey> CHECKSIG\n>     ELSE\n>         <expiry time> CHECKLOCKTIMEVERIFY DROP\n>         <buyer pubkey> CHECKSIG\n>     ENDIF\n> \n> The buyer of the data is now making a secure offer with an expiry time. If the\n> publisher fails to accept the offer before the expiry time is reached the buyer\n> can cancel the offer by spending the output.\n> \n> \n> ===Proving sacrifice to miners' fees===\n> \n> Proving the sacrifice of some limited resource is a common technique in a\n> variety of cryptographic protocols. Proving sacrifices of coins to mining fees\n> has been proposed as a ''universal public good'' to which the sacrifice could\n> be directed, rather than simply destroying the coins. However doing so is\n> non-trivial, and even the best existing technqiue - announce-commit sacrifices\n> - could encourage mining centralization. CHECKLOCKTIMEVERIFY can be used to\n> create outputs that are provably spendable by anyone (thus to mining fees\n> assuming miners behave optimally and rationally) but only at a time\n> sufficiently far into the future that large miners profitably can't sell the\n> sacrifices at a discount.\n> \n> \n> ===Replacing the nLockTime field entirely===\n> \n> As an aside, note how if the SignatureHash() algorithm could optionally cover\n> part of the scriptSig the signature could require that the scriptSig contain\n> CHECKLOCKTIMEVERIFY opcodes, and additionally, require that they be executed.\n> (the CODESEPARATOR opcode came very close to making this possible in v0.1 of\n> Bitcoin) This per-signature capability could replace the per-transaction\n> nLockTime field entirely as a valid signature would now be the proof that a\n> transaction output ''can'' be spent.\n> \n> \n> ==Detailed Specification==\n> \n> Refer to the reference implementation, reproduced below, for the precise\n> semantics and detailed rationale for those semantics.\n> \n>     case OP_NOP2:\n>     {\n>         // CHECKLOCKTIMEVERIFY\n>         //\n>         // (nLockTime -- nLockTime )\n>     \n>         if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY))\n>             break; // not enabled; treat as a NOP\n>     \n>         if (stack.size() < 1)\n>             return false;\n>     \n>         // Note that elsewhere numeric opcodes are limited to\n>         // operands in the range -2**31+1 to 2**31-1, however it is\n>         // legal for opcodes to produce results exceeding that\n>         // range. This limitation is implemented by CScriptNum's\n>         // default 4-byte limit.\n>         //\n>         // If we kept to that limit we'd have a year 2038 problem,\n>         // even though the nLockTime field in transactions\n>         // themselves is uint32 which only becomes meaningless\n>         // after the year 2106.\n>         //\n>         // Thus as a special case we tell CScriptNum to accept up\n>         // to 5-byte bignums, which are good until 2**32-1, the\n>         // same limit as the nLockTime field itself.\n>         const CScriptNum nLockTime(stacktop(-1), 5);\n>     \n>         // In the rare event that the argument may be < 0 due to\n>         // some arithmetic being done first, you can always use\n>         // 0 MAX CHECKLOCKTIMEVERIFY.\n>         if (nLockTime < 0)\n>             return false;\n>     \n>         // There are two times of nLockTime: lock-by-blockheight\n>         // and lock-by-blocktime, distinguished by whether\n>         // nLockTime < LOCKTIME_THRESHOLD.\n>         //\n>         // We want to compare apples to apples, so fail the script\n>         // unless the type of nLockTime being tested is the same as\n>         // the nLockTime in the transaction.\n>         if (!(\n>               (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n>               (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n>              ))\n>             return false;\n>     \n>         // Now that we know we're comparing apples-to-apples, the\n>         // comparison is a simple numeric one.\n>         if (nLockTime > (int64_t)txTo.nLockTime)\n>             return false;\n>     \n>         // Finally the nLockTime feature can be disabled and thus\n>         // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n>         // finalized by setting nSequence to maxint. The\n>         // transaction would be allowed into the blockchain, making\n>         // the opcode ineffective.\n>         //\n>         // Testing if this vin is not final is sufficient to\n>         // prevent this condition. Alternatively we could test all\n>         // inputs, but testing just this input minimizes the data\n>         // required to prove correct CHECKLOCKTIMEVERIFY execution.\n>         if (txTo.vin[nIn].IsFinal())\n>             return false;\n>     \n>         break;\n>     \n>     }\n> \n> https://github.com/petertodd/bitcoin/commit/ab0f54f38e08ee1e50ff72f801680ee84d0f1bf4\n> \n> \n> ==Upgrade and Testing Plan==\n> \n> TBD\n> \n> \n> ==Credits==\n> \n> Thanks goes to Gregory Maxwell for suggesting that the argument be compared\n> against the per-transaction nLockTime, rather than the current block height and\n> time.\n> \n> \n> ==References==\n> \n> PayPub - https://github.com/unsystem/paypub\n> \n> Jeremy Spilman Micropayment Channels - http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02028.html\n> \n> \n> ==Copyright==\n> \n> This document is placed in the public domain.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Zooko Wilcox-OHearn",
                "date": "2015-03-19T17:39:09",
                "message_text_only": "I'm in favor of relative CHECKLOCKTIMEVERIFY, but I don't have a very\nspecific reason. I just have a vague worry that there can be \"race\nconditions\" in which a txn with an absolute CHECKLOCKTIMEVERIFY goes\ninto the blockchain later than one of its signers expected that it\nwould, and therefore there is a surprisingly short delay between that\ntransaction going into the blockchain and becoming spendable.\n\nThis worry of mine is assuaged by using relative CHECKLOCKTIMEVERIFY instead.\n\nRegards,\n\nZooko"
            }
        ],
        "thread_summary": {
            "title": "Relative CHECKLOCKTIMEVERIFY (was CLTV proposal)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Zooko Wilcox-OHearn"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 15222
        }
    },
    {
        "title": "[Bitcoin-development] Improving resistance to transaction origination harvesting",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2015-03-17T16:26:10",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThe ability of entities with large numbers of nodes to track the\norigination of Bitcoin transactions is very similar to an attack on\nthe Freenet project.\n\nThe Freenet project addressed this weakness by via a technique they\ncalled \"Darket\" - which means that nodes would only connected to a\ndefined set of trusted peers instead of being open to all connections\n(Opennet) An individual Freenet node can operate in Opennet mode, or\nDarknet mode, or mixed mode. [1]\n\nThis approach would be beneficial to Bitcoin as well to reduce privacy\nleaks due to harvesting attacks.\n\nProposal:\n\nAllow Bitcoin nodes to create authenticated connections with trusted\npeers via CurveCP [2]. Nodes that have at least one CurveCP peer only\nbroadcast their transactions to those peers.\n\nUse of CurveCP requires both sides of the connection to know each\nother's long term public key. This key can be packaged in a structure\nsimilar in concept to a Freenet node reference.\n\nA Bitcoin node reference consists of a JSON structure containing one\nor more \"externalip\" elements followed by one \"pubkey\" element. The\nstructure is then clearsigned by the long term CurveCP public key\ncontained in the \"pubkey\" element.\n\nUsers who wish to set up a secure connection between their nodes would\nfirst use an API command to generate their node references, exchange\nthese files, and copy them to the ~/.bitcoin/curvecp directory with a\n.ref extension. The node only accepts CurveCP connections from, and\nattempts CurveCP connection to, peers whose references are present in\nthat directory.\n\nInstead of listening both for regular TCP and CurveCP connections on\nthe same port, CurveCP connections would take place on a separate\nport, designated by -bind_curvecp, -port_curvecp, and -externalip_curvecp\n\nIf -bind_curvecp is specified, the node will always listen for\nincoming CurveCP connections, -listen=0 can be set to disallow\nnon-authenticated incoming connections.\n\nRelationship with Tor:\n\nThis proposal would work along with, or independently of Tor usage.\n\nThe same network monitoring techniques which can track an originating\ntransaction to a particular IP address could do the same thing for a\nnode which is listening as a hidden service, and any technique for\ndeanonymising hidden services could then identify the point of origin.\n\nCurrently the only way to configure a node to submit its transactions\nanonymously to the network is to make the node non-listening, which\nmeans it can not contribute to the network.\n\nThis proposal would allow nodes to contribute to the network as\nlistening nodes, while retaining privacy with regards to transactions\noriginating from themselves.\n\nSPV peers:\n\nCurveCP connections also can be created between full nodes and SPV\nnodes, in which case transactions originating from the SPV peers would\nbe routed as if they originated from the full node.\n\n\n[1] https://wiki.freenetproject.org/Darknet\n[2] http://curvecp.org\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVCFWiAAoJECpf2nDq2eYjsqIP/2Ri7gmJ1ULqRKh6k0BZskTh\nzW2T+Bm+QgoTqiaoLSB61kX6IjwMdTTeVmzCn8ciRIUzvn+RD4843qG0vYKAU3BZ\no+7kMzfAn+KK/Y7j9S++FLteCs21GxsQfARwkKlJxvluoqxlIL50K5H1SySpmZMs\nUKppgAIUpHv8H+5T4hwRlgM2vnZv7YyMqEpCDAsVWtQfyOg/WsftVP2UI4zsM3ei\nKU36ztJYVUDqmnu3gg0mIW+lv/DqHk59d3Mo/gveRUUUTGzYXy7kKkubCzJQ5t7s\nAgEdm5OmlKDEhZt/gFt6AA1FEjoQY+TzDSspFCJMiXmWQU7xu+wJwP7TBINXUbXr\n7TNPC0KWHkBCa0ccKvP4O72dToPQM8LQl42My8ye0sUkfqAcOldRoqYBsnpqAdVv\nddvjSyr1wn1ek8bC7tjL1eRdjYz9PFeNayDv5vyur067DI5yjgpTXLjKVHxZe5TO\nzA8MC8gp/mHDexO9+zmi+mFdPD/HiFl2liiLMsSg7pxGxMCy6cB8sUXHNPm6+vow\nHHGgRWAVWVkTZNHc7n50+ugbtrudQaDOehVSH3NRLZC4pnRAg+pzZz/5Z/WWjr/M\nmE1M3nbitCwznFpBm/Zgg7DUZq+MMTlUwsiNdGhyqYfadW7L5/vlp4d7otNoIhOz\nV8zOgdC3ZwMfbf/g26PM\n=u2MW\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150317/ec52079c/attachment.bin>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-03-19T20:08:25",
                "message_text_only": "On Tue, Mar 17, 2015 at 11:26:10AM -0500, Justus Ranvier wrote:\n> \n> Allow Bitcoin nodes to create authenticated connections with trusted\n> peers via CurveCP [2]. Nodes that have at least one CurveCP peer only\n> broadcast their transactions to those peers.\n\nThe user would have to select trusted peers or rely on a web of trust to\npick them. Experience with other networks such as Retroshare shows that\nnot only this is a lot of work to use, mistakes are easily made. It\nwill only protect the privacy of those that know what they're\ndoing and who they're trusting.\n\nOtherwise, paradoxally this could reduce privacy, as the trusted peers\nnecessarily know (part of) your identity to be able to exchange keys\nout-of-band. \n(and in practice most people are easily tricked into adding someone as\n'friend', for Retroshare here is a case in which a law firm did this and\nthus could sue people for making files available...)\n\n> Use of CurveCP requires both sides of the connection to know each\n> other's long term public key. This key can be packaged in a structure\n> similar in concept to a Freenet node reference.\n\nRight.\n\n> Users who wish to set up a secure connection between their nodes would\n> first use an API command to generate their node references, exchange\n> these files, and copy them to the ~/.bitcoin/curvecp directory with a\n> .ref extension. The node only accepts CurveCP connections from, and\n> attempts CurveCP connection to, peers whose references are present in\n> that directory.\n\nIndeed, if the goal is to make a secure connections between nodes that\nknow and trust each other, this could employ any kind of tunnelling on top\nof the P2P protocol. CurveCP would be one option. \n\nAs said I'm not convinced this will help with privacy, but this could be\nused for whitelisting: trusted nodes could be subjected to fewer DoS\nconstraints.\n\n> Relationship with Tor:\n> \n> This proposal would work along with, or independently of Tor usage.\n> \n> The same network monitoring techniques which can track an originating\n> transaction to a particular IP address could do the same thing for a\n> node which is listening as a hidden service, and any technique for\n> deanonymising hidden services could then identify the point of origin.\n\nSeperating the transaction submission from normal node functionality\nwould already go a long way, and that can be done without any protocol\nchanges. The transaction submitter would connect to a few nodes\nthrough Tor and drop off a transaction, then disconnect. It would not\nadvertise itself as the hidden service, and should also use a different\nTor circuit as the node connections.\n\nThis could even work if the normal node functionality does not go\nthrough Tor - although then one'd have to be even more careful about\nany kind of residual fingerprinting or timing attacks.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Improving resistance to transaction origination harvesting",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Justus Ranvier",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7071
        }
    },
    {
        "title": "[Bitcoin-development] Are Instant Confirmations safe?",
        "thread_messages": [
            {
                "author": "Dennis Sullivan",
                "date": "2015-03-18T22:38:30",
                "message_text_only": "Hello. This is my first time posting to this list. I wanted to ask your\nopinions on something relating to confirmation times.\n\nI recently read about a \"transaction locking\" proposal which claims to make\nit possible to accept 0-conf transactions with guarantee they will get\nmined. This seems rather dubious to me, because if there was merit to the\nsystem, I would have already expected to see discussion on this list\nregarding it.\n\nThe scheme operates as follows:\n\nAs implemented into Darkcoin, an InstantX transaction is broadcast spending\ncertain outputs. Certain nodes determined deterministically will sign a\nmessage which is relayed across the network locking this tx in mempool such\nit's inputs cannot be double spent. All nodes are instructed to reject any\nconflicting transactions and flush out any existing txs in the mempool that\nconflict with this \"locked\" tx. From this point onwards, the network will\nrefuse to relay double spends and will also reject blocks that contain a\nconflicting tx thus forcing miners to play ball.\n\nThe idea is once a transaction receives a \"consensus lock\" across nodes in\nthe mempool, the tx will eventually get mined as there is no way it can be\ndouble spent and no way a miner can mine a double spend of the consensus\nlocked transaction. At the very least, this seems like it could be turned\nin on itself to fork the network because of the ability to cause blocks to\nbe rejected. I am sure there is an attack vector there somewhere.\n\nA full explanation is published in this paper:\nhttps://www.darkcoin.io/wp-content/uploads/2014/09/InstantTX.pdf\n\nDennis\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150318/6f45755c/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-03-18T22:53:32",
                "message_text_only": "Den 18 mar 2015 23:38 skrev \"Dennis Sullivan\" <dennis.jm.sullivan at gmail.com\n>:\n>\n> Hello. This is my first time posting to this list. I wanted to ask your\nopinions on something relating to confirmation times.\n>\n> I recently read about a \"transaction locking\" proposal which claims to\nmake it possible to accept 0-conf transactions with guarantee they will get\nmined. This seems rather dubious to me, because if there was merit to the\nsystem, I would have already expected to see discussion on this list\nregarding it.\n\nSounds like it would be weak to sybil attacks (deterministically choosing\nmy own nodes sounds great!), and of course Finney attacks (single-block\nreversal) and defecting miners (what are you gonna do, punish miners with\nlimited network connectivity as well? You'll risk forking the network).\n\nZero-conf is only safe if nobody's actively trying to attack you. It has no\ninherent security in and of itself. For low values the risk is usually\ntolerated. For large values there's too much risk of making yourself a\ntarget.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150318/89142b7c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Are Instant Confirmations safe?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Dennis Sullivan",
                "Natanael"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3000
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: re Improving resistance to transaction origination harvesting",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2015-03-20T15:16:51",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n- -------- Forwarded Message --------\nSubject: re [Bitcoin-development] Improving resistance to transaction\norigination harvesting\nDate: Fri, 20 Mar 2015 14:06:59 +0100\nFrom: Arne Bab. <Arne_Bab at web.de>\nTo: justus.ranvier at monetas.net\n\nHi Justus,\n\nI read your proposal for a bitcoin darknet (friend-to-friend), but I\u2019m\nnot on that list, so it would be nice if you could relay my message.\n\nWladimir J. van der Laan wrote:\n> Experience with other networks such as Retroshare shows that \u2026 in\n> practice most people are easily tricked into adding someone as\n'friend'\n\nThis argumentation does not apply to the friend-to-friend connections\nin Freenet, though, because in Retroshare you need friends to be\nconnected at all, while in Freenet adding Friends is optional. They\nwere made optional in direct response to seeing people exchange\nfriend-references with strangers.\n\nAn important aspect of friend-to-friend connections is that they have\nto provide additional value for the communication with real-life\nfriends. I had few darknet contacts in Freenet until I started using\nmessages to friends for confidential communication (in which freenet\ntraffic provides a cover for the direct communication with friends).\n\nFor details on confidential messaging as additional value see \u201cLet us\ntalk over Freenet, so I can speak freely again\u201d:\n- - http://draketo.de/english/freenet/connect-speak-freely\n\nAnd for a description of capabilities freenet builds on top of the\nfriend-to-friend connections, see \u201cFreenet: The forgotten cryptopunk\nparadise\u201d:\n- - http://draketo.de/english/freenet/forgotten-cryptopunk-paradise\n\nBest wishes,\nArne\n\n\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJVDDnjAAoJECpf2nDq2eYjgwUP/3fRjH25OcGmG5AS3UE/wTvf\nz8DrPieF4wtX4ABZTC6X/Ls9JnWeEhL3jN70SfGLzx2Exat620DVeR7nMHuQhLQj\n6vWJSKLX8a0W47LmlAveagKeLMyQdOa1jZWZWJOUwxpoH0sHJwhBvRSiZeoHub2H\nPI+WyivRy3aUhhAc4EkFlaFbJVl7JMjdaqEaoHV2l96fKkvuJOYfzKWuxYd0noTI\nmgfDrXtm1zTH6H9C+B+AhXlDlaAnBoVr/EC7r4nKGeXGvOBw/UrAd/OHEySQJm6b\nQuo8jPBOT8mwZVanJaAbRBDnOYXP4lIxkGaH5aXCWCReiepCPtUqbGF7hHXlAwGQ\nLjpLr81Uxd/1TKk709FnSKtprSf6WdYmkzXCNjjPWLfd1bR7Yj71wtmDwPdy5IOS\nW9TSD9gszD0BmiZFncD4lyKBFletfGlZaVirXNhwgEKBgRcS48AYc71IjWfjbq0B\nP2wzevfdHJqda3Wr04H08pGNO9YeYVqJAvr7sqHaZdn7DyDdDhRehpzbgkphNU3c\nPr1XBTheFqZZTZSya1ufVR4y9c1qFeVx1T5pqVyfUt1nNA0oaHNm0tcCOKafNAyq\n+9r9p08IXsjR44STpw/DHMERZ+W/XCJsACwWNo3BK7UumHlvaLoevmdmswghjblb\nMQKLKZaKAZA56lvPymbC\n=7CQT\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150320/88c95533/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: re Improving resistance to transaction origination harvesting",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Justus Ranvier"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2747
        }
    },
    {
        "title": "[Bitcoin-development] Research on partitioning Bitcoind nodes: \"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\"",
        "thread_messages": [
            {
                "author": "Ethan Heilman",
                "date": "2015-03-23T15:33:18",
                "message_text_only": "Hi All,\n\nThere has been much discussion lately on the dev list about\nmisbehaving peers and attacks on the P2P network. We'd like to share\nour research on partitioning Bitcoind nodes from the rest of the\nnetwork.\n\nEclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\nAbstract: We present eclipse attacks on bitcoin's peer-to-peer\nnetwork. Our attack allows an adversary controlling a sufficient\nnumber of IP addresses to monopolize all connections to and from a\nvictim bitcoin node. The attacker can then exploit the victim for\nattacks on bitcoin's mining and consensus system, including\nN-confirmation double spending, selfish mining, and adversarial forks\nin the blockchain. We take a detailed look at bitcoin\u2019s peer-to-peer\nnetwork, and quantify the resources involved in our attack via\nprobabilistic analysis, Monte Carlo simulations, measurements and\nexperiments with live bitcoin nodes. Finally, we present\ncountermeasures, inspired by botnet architectures, that are designed\nto raise the bar for eclipse attacks while preserving the openness and\ndecentralization of bitcoin\u2019s current network architecture.\n\nFull paper available here:\nhttp://cs-people.bu.edu/heilman/eclipse/\n\nThanks,\nEthan"
            }
        ],
        "thread_summary": {
            "title": "Research on partitioning Bitcoind nodes: \"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\"",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ethan Heilman"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1192
        }
    },
    {
        "title": "[Bitcoin-development] Address Expiration to Prevent Reuse",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-03-25T01:57:37",
                "message_text_only": "The idea of limited-lifetime addresses was discussed on 2014-07-15 in\n\nhttp://thread.gmane.org/gmane.comp.bitcoin.devel/5837\n\nIt appears that a limited-lifetime address, such as the fanciful\n\naddress = 4HB5ld0FzFVj8ALj6mfBsbifRoD4miY36v_349366\n\nwhere 349366 is the last valid block for a transaction paying this \naddress, could be made reuse-proof with bounded resource requirements, \nif for locktime'd tx paying address, the following were enforced by \nconsensus:\n\n  - Expiration\n    Block containing tx invalid at height > 349366\n\n  - Finality\n    Block containing tx invalid if (349366 - locktime) > X\n    (X is the address validity duration in blocks)\n\n  - Uniqueness\n    Block containing tx invalid if a prior confirmed tx has paid address\n\nJust an an idea, obviously not a concrete proposal."
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-03-25T10:09:44",
                "message_text_only": "On Tuesday, 24 March 2015, at 6:57 pm, Tom Harding wrote:\n> It appears that a limited-lifetime address, such as the fanciful\n> \n> address = 4HB5ld0FzFVj8ALj6mfBsbifRoD4miY36v_349366\n> \n> where 349366 is the last valid block for a transaction paying this \n> address, could be made reuse-proof with bounded resource requirements, \n\nThe core devs seem not to like ideas such as this because a transaction that was once valid can become invalid due to a chain reorganization."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-25T16:34:36",
                "message_text_only": "On Wed, Mar 25, 2015 at 1:57 AM, Tom Harding <tomh at thinlink.com> wrote:\n> The idea of limited-lifetime addresses was discussed on 2014-07-15 in\n>\n> http://thread.gmane.org/gmane.comp.bitcoin.devel/5837\n>\n> It appears that a limited-lifetime address, such as the fanciful\n>\n> address = 4HB5ld0FzFVj8ALj6mfBsbifRoD4miY36v_349366\n\nAssuming the sender is not an uncooperative idiot, you can simply\ninclude expiration information and the sender can refuse to send after\nthat time.\n\nIf the sender is an uncooperative idiot, they can always change your\ntarget and send anyways.\n\nThis would seem to work nearly as well as the non-reorg safe network\nimpacting version, and yet has no cost beyond the extra size is\ncommunicating the limit.\n\n> Block containing tx invalid if a prior confirmed tx has paid address\n\nRequires a unprunable verification state."
            },
            {
                "author": "Tom Harding",
                "date": "2015-03-25T18:44:00",
                "message_text_only": "On 3/25/2015 9:34 AM, Gregory Maxwell wrote:\n>\n>> address = 4HB5ld0FzFVj8ALj6mfBsbifRoD4miY36v_349366\n> Assuming the sender is not an uncooperative idiot, you can simply\n> include expiration information and the sender can refuse to send after\n> that time.\n\nIs this assuming payment protocol?  A major benefit of address\nexpiration, if it works, would be that it works without requiring\npayment protocol. \n\n> If the sender is an uncooperative idiot, they can always change your\n> target and send anyways.\n\nAre you suggesting there is no implementation of address expiration that\nwouldn't allow the string to be trivially changed by the sender?\n\n\n>> Block containing tx invalid if a prior confirmed tx has paid address\n> Requires a unprunable verification state.\n\nI don't understand, explanation would be appreciated."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-25T19:22:58",
                "message_text_only": "On Wed, Mar 25, 2015 at 6:44 PM, Tom Harding <tomh at thinlink.com> wrote:\n> Is this assuming payment protocol?  A major benefit of address\n> expiration, if it works, would be that it works without requiring\n> payment protocol.\n\nNot at all.\n\n> Are you suggesting there is no implementation of address expiration that\n> wouldn't allow the string to be trivially changed by the sender?\n\nThe sender is always able to intentionally hide their payment under a\nrock-- There is no encoding that can prevent that.\n\nThe defense against that is to not accept payments not made according\nto the payees specification.\n\n> I don't understand, explanation would be appreciated.\n\nTo reject reused scriptPubKeys you must remember past scriptPubkeys in\norder to test against them.\n\nFor illustration purposes imagine a bitcoin system where there is only\na single base unit available for trade.\n\nVerification of that chain requires O(1) storage (the identity of the\ncurrent chain tip, and the identity of the spendable coin.).\nVerification with duplicate elimination requires O(N) storage (with N\nbeing the length of the history), since you need to track all the\nduplicates to reject.\n\n(The same is true for actual Bitcoin as well, though the constant\nfactors make the difference somewhat less stark.)"
            },
            {
                "author": "Tom Harding",
                "date": "2015-03-26T20:38:04",
                "message_text_only": "On 3/25/2015 12:22 PM, Gregory Maxwell wrote:\n>\n> Verification with duplicate elimination requires O(N) storage (with N\n> being the length of the history), since you need to track all the\n> duplicates to reject.\n>\n\nI addressed that by limiting the duplicate check to an X-block segment.  \nX is hard-coded in this simple scheme (X=144  => \"1-day addresses\").  \nYou could picture a selectable expiration duration too."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-26T20:42:55",
                "message_text_only": "On Thu, Mar 26, 2015 at 8:38 PM, Tom Harding <tomh at thinlink.com> wrote:\n> I addressed that by limiting the duplicate check to an X-block segment.  X\n> is hard-coded in this simple scheme (X=144  => \"1-day addresses\").  You\n> could picture a selectable expiration duration too.\n\nIf its to be heuristic in any case why not make it a client feature\ninstead of a consensus rule?\n\nIf someone wants to bypass anything they always can, thats what I mean\nby \"hide their payment under a rock\"\n\nE.g. I can take your pubkey, add G to it (adding 1 to the private\nkey), strip off the time limits, and send the funds.\n\n\"What do you mean I didn't pay you? I wrote a check. locked it in a\nsafe, and burred it in your back garden.\"\n\nThe answer to this can only be that payment is only tendered when its\nmade _exactly_ to the payee's specifications.\n\nIf someone violates the specifications all they're doing is destroying\ncoins. Nothing can stop people from destroying coins...\n\nWhich is why a simpler, safer, client enforced behavior is probably\npreferable. Someone who wants to go hack their client to make a\npayment that isn't according to the payee will have to live with the\nresults, esp. as we can't prevent that in a strong sense."
            },
            {
                "author": "Tom Harding",
                "date": "2015-03-26T21:26:59",
                "message_text_only": "On 3/26/2015 1:42 PM, Gregory Maxwell wrote:\n> Which is why a simpler, safer, client enforced behavior is probably\n> preferable. Someone who wants to go hack their client to make a\n> payment that isn't according to the payee will have to live with the\n> results, esp. as we can't prevent that in a strong sense.\n\nI should have been clearer that the motivation for address expiration is \nto reduce the rate of increase of the massive pile of bitcoin addresses \nout there which have to be monitored forever for future payments.  It \ncould make a significant dent if something like this worked, and were \nused by default someday.\n\nAddress expiration is not an enhancement to the payment experience and \nit doesn't stop sender from doing something weird.  Hacking a new \naddress for the recipient would be just as weird as hacking their client \nIMHO."
            },
            {
                "author": "Peter Todd",
                "date": "2015-03-26T21:33:15",
                "message_text_only": "On Thu, Mar 26, 2015 at 02:26:59PM -0700, Tom Harding wrote:\n> On 3/26/2015 1:42 PM, Gregory Maxwell wrote:\n> > Which is why a simpler, safer, client enforced behavior is probably\n> > preferable. Someone who wants to go hack their client to make a\n> > payment that isn't according to the payee will have to live with the\n> > results, esp. as we can't prevent that in a strong sense.\n> \n> I should have been clearer that the motivation for address expiration is \n> to reduce the rate of increase of the massive pile of bitcoin addresses \n> out there which have to be monitored forever for future payments.  It \n> could make a significant dent if something like this worked, and were \n> used by default someday.\n\nAgain, along the lines of what Gregory Maxwell is saying, if the payment\ninstructions you have given to the sender say \"don't make funds\nspendable with scriptPubKey after this date\" why are you scanning those\n\"old\" bitcoin addresses for future payments? That makes no more sense\nthan taking your p2pkh addresses and scanning for the same scriptPubKey\nembedded within a p2sh address - you haven't told anyone to pay you via\nthat method so why expect anyone to do so?\n\n> Address expiration is not an enhancement to the payment experience and \n> it doesn't stop sender from doing something weird.  Hacking a new \n> address for the recipient would be just as weird as hacking their client \n> IMHO.\n\nThe sender is free to bury their Bitcoins in a safe in your neighbors\nfront yard; you have no reason to accept such silly behavior as payment\nand every reason to ignore it.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000b48023e9c98038c50b9a2044975bbdf9f43313400a156b6\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150326/f6bbcec2/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-26T21:44:11",
                "message_text_only": "On Thu, Mar 26, 2015 at 9:26 PM, Tom Harding <tomh at thinlink.com> wrote:\n> I should have been clearer that the motivation for address expiration is to\n> reduce the rate of increase of the massive pile of bitcoin addresses out\n> there which have to be monitored forever for future payments.  It could make\n> a significant dent if something like this worked, and were used by default\n> someday.\n\nGreat, that can be accomplished by simply encoding an expiration into\nthe address people are using and specifying that clients enforce it."
            },
            {
                "author": "Tom Harding",
                "date": "2015-03-26T22:23:24",
                "message_text_only": "On 3/26/2015 2:44 PM, Gregory Maxwell wrote:\n> On Thu, Mar 26, 2015 at 9:26 PM, Tom Harding <tomh at thinlink.com> wrote:\n>> I should have been clearer that the motivation for address expiration is to\n>> reduce the rate of increase of the massive pile of bitcoin addresses out\n>> there which have to be monitored forever for future payments.  It could make\n>> a significant dent if something like this worked, and were used by default\n>> someday.\n> Great, that can be accomplished by simply encoding an expiration into\n> the address people are using and specifying that clients enforce it.\n\nAnother way to look at it: is the benefit of the bitcoin network \nproviding this service sufficiently greater than the cost?\n\nThe main cost is that a reorganization has a chance of invalidating a \npayment made at or just before expiration (if the payment isn't early \nenough in the new chain).  Would that increase recommended confirmations \nabove their current levels, which are centered around the possibility of \na malicious double-spend?  Unclear to me."
            },
            {
                "author": "s7r",
                "date": "2015-03-26T22:28:42",
                "message_text_only": "This should not be enforced by default. There are some use cases where\naddress re-use is justified (a donation address spread on multiple\nstatic pages or even printed on papers/books?). For example, I offer\nsome services on the internet for free, and I only have a bitcoin\naddress for donations which is posted everywhere. Obviously this could\npossibly harm privacy, but not everyone who uses bitcoin wants to keep\nall transactions private. To the contrary, there are accounting cases\nwhen you need to archive all keys, hashes of transactions and\neverything (for example when using btc inside a company which is\nrequired by law to keep accounting registries).\n\nI know it's not recommended to use the same pubkey more than once, but\nthe protocol was not designed this way. Enforcing something as\ndescribed in this topic will undermine an user's rights to re-use his\naddresses, if a certain situation requires it.\n\nOn 3/26/2015 11:44 PM, Gregory Maxwell wrote:\n> On Thu, Mar 26, 2015 at 9:26 PM, Tom Harding <tomh at thinlink.com> \n> wrote:\n>> I should have been clearer that the motivation for address \n>> expiration is to reduce the rate of increase of the massive pile \n>> of bitcoin addresses out there which have to be monitored\n>> forever for future payments.  It could make a significant dent\n>> if something like this worked, and were used by default someday.\n> \n> Great, that can be accomplished by simply encoding an expiration \n> into the address people are using and specifying that clients \n> enforce it.\n> \n> ----------------------------------------------------------------------\n--------\n>\n>\n> \nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your \n> hub for all things parallel software development, from weekly \n> thought leadership blogs to news, videos, case studies, tutorials \n> and more. Take a look and join the conversation now. \n> http://goparallel.sourceforge.net/ \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-26T23:00:50",
                "message_text_only": "On Thu, Mar 26, 2015 at 10:28 PM, s7r <s7r at sky-ip.org> wrote:\n> This should not be enforced by default.\n\nNo one suggested _anything_ like that. Please save the concern for\nsomeplace its actually applicable.\n\n> I know it's not recommended to use the same pubkey more than once, but\n> the protocol was not designed this way.\n\nFor a point of pedantry, the protocol actually was designed that way\nand in the initial versions of the software there was actually no user\nexposed mechanism to reuse a scriptPubkey no matter how hard you\ntried."
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-27T01:51:46",
                "message_text_only": "Yes I agree, also there is talks about a government body I know of warming to bitcoin by issuing addresses for use by a business and then all transactions can be tracked for that business entity. This is one proposal I saw put forward by a country specific bitcoin group to their government and so not allowing address reuse would neuter that :(\n________________________________\nFrom: s7r<mailto:s7r at sky-ip.org>\nSent: \u200e27/\u200e03/\u200e2015 9:29 AM\nTo: Gregory Maxwell<mailto:gmaxwell at gmail.com>; Tom Harding<mailto:tomh at thinlink.com>\nCc: Bitcoin Development<mailto:bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] Address Expiration to Prevent Reuse\n\nThis should not be enforced by default. There are some use cases where\naddress re-use is justified (a donation address spread on multiple\nstatic pages or even printed on papers/books?). For example, I offer\nsome services on the internet for free, and I only have a bitcoin\naddress for donations which is posted everywhere. Obviously this could\npossibly harm privacy, but not everyone who uses bitcoin wants to keep\nall transactions private. To the contrary, there are accounting cases\nwhen you need to archive all keys, hashes of transactions and\neverything (for example when using btc inside a company which is\nrequired by law to keep accounting registries).\n\nI know it's not recommended to use the same pubkey more than once, but\nthe protocol was not designed this way. Enforcing something as\ndescribed in this topic will undermine an user's rights to re-use his\naddresses, if a certain situation requires it.\n\nOn 3/26/2015 11:44 PM, Gregory Maxwell wrote:\n> On Thu, Mar 26, 2015 at 9:26 PM, Tom Harding <tomh at thinlink.com>\n> wrote:\n>> I should have been clearer that the motivation for address\n>> expiration is to reduce the rate of increase of the massive pile\n>> of bitcoin addresses out there which have to be monitored\n>> forever for future payments.  It could make a significant dent\n>> if something like this worked, and were used by default someday.\n>\n> Great, that can be accomplished by simply encoding an expiration\n> into the address people are using and specifying that clients\n> enforce it.\n>\n> ----------------------------------------------------------------------\n--------\n>\n>\n>\nDive into the World of Parallel Programming The Go Parallel Website,\nsponsored\n> by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly\n> thought leadership blogs to news, videos, case studies, tutorials\n> and more. Take a look and join the conversation now.\n> http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n------------------------------------------------------------------------------\nDive into the World of Parallel Programming The Go Parallel Website, sponsored\nby Intel and developed in partnership with Slashdot Media, is your hub for all\nthings parallel software development, from weekly thought leadership blogs to\nnews, videos, case studies, tutorials and more. Take a look and join the\nconversation now. http://goparallel.sourceforge.net/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150327/4306e1a3/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-03-27T03:13:06",
                "message_text_only": "On Fri, Mar 27, 2015 at 1:51 AM, Thy Shizzle <thyshizzle at outlook.com> wrote:\n> Yes I agree, also there is talks about a government body I know of warming\n> to bitcoin by issuing addresses for use by a business and then all\n> transactions can be tracked for that business entity. This is one proposal I\n> saw put forward by a country specific bitcoin group to their government and\n> so not allowing address reuse would neuter that :(\n\nI hope you're mistaken, because that would be a serious attack on the\ndesign of bitcoin, which obtains privacy and fungibility, both\nessential properties of any money like good, almost exclusively\nthrough avoiding reuse.\n\n[What business would use a money where all their competition can see\ntheir sales and identify their customers, where their customers can\ntrack their margins and suppliers? What individuals would use a system\nwhere their inlaws could criticize their spending? Where their\nlandlord knows they got a raise, or where thieves know their net\nworth?]\n\nThough no one here is currently suggesting blocking reuse as a network\nrule, the reasonable and expected response to what you're suggesting\nwould be to do so.\n\nIf some community wishes to choose not to use Bitcoin, great, but they\ndon't get to simply choose to screw up its utility for all the other\nusers.\n\nYou should advise this \"country specific bitcoin group\" that they\nshouldn't speak for the users of a system which they clearly do not\nunderstand."
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-03-27T04:31:35",
                "message_text_only": "Indeed, and with things like BIP32 it would be pointless to use one address, and I agree it is silly to reuse addresses, some for the privacy aspect, some for the revealing the pubkey on a spend aspect. But just because it is silly, doesn't mean it's necessarily required for devs to disallow it. I mean if a business doesn't care who can see their  bitcoin takings and they are willing to keep shifting the bitcoin and live woth the exposed pubkey let them yea?\n\nhttp://www.forexminute.com/bitcoin/australian-association-asks-voluntary-bitcoin-register-individuals-companies-51183\n________________________________\nFrom: Gregory Maxwell<mailto:gmaxwell at gmail.com>\nSent: \u200e27/\u200e03/\u200e2015 2:13 PM\nTo: Thy Shizzle<mailto:thyshizzle at outlook.com>\nCc: s7r at sky-ip.org<mailto:s7r at sky-ip.org>; Tom Harding<mailto:tomh at thinlink.com>; Bitcoin Development<mailto:bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] Address Expiration to Prevent Reuse\n\nOn Fri, Mar 27, 2015 at 1:51 AM, Thy Shizzle <thyshizzle at outlook.com> wrote:\n> Yes I agree, also there is talks about a government body I know of warming\n> to bitcoin by issuing addresses for use by a business and then all\n> transactions can be tracked for that business entity. This is one proposal I\n> saw put forward by a country specific bitcoin group to their government and\n> so not allowing address reuse would neuter that :(\n\nI hope you're mistaken, because that would be a serious attack on the\ndesign of bitcoin, which obtains privacy and fungibility, both\nessential properties of any money like good, almost exclusively\nthrough avoiding reuse.\n\n[What business would use a money where all their competition can see\ntheir sales and identify their customers, where their customers can\ntrack their margins and suppliers? What individuals would use a system\nwhere their inlaws could criticize their spending? Where their\nlandlord knows they got a raise, or where thieves know their net\nworth?]\n\nThough no one here is currently suggesting blocking reuse as a network\nrule, the reasonable and expected response to what you're suggesting\nwould be to do so.\n\nIf some community wishes to choose not to use Bitcoin, great, but they\ndon't get to simply choose to screw up its utility for all the other\nusers.\n\nYou should advise this \"country specific bitcoin group\" that they\nshouldn't speak for the users of a system which they clearly do not\nunderstand.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150327/d99c27f9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Address Expiration to Prevent Reuse",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "s7r",
                "Peter Todd",
                "Matt Whitlock",
                "Gregory Maxwell",
                "Thy Shizzle",
                "Tom Harding"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 20702
        }
    },
    {
        "title": "[Bitcoin-development] On Rewriting Bitcoin (was Re: [Libbitcoin] Satoshi client: is a fork past 0.10 possible?)",
        "thread_messages": [
            {
                "author": "Eric Voskuil",
                "date": "2015-03-25T08:04:48",
                "message_text_only": "On 02/14/2015 05:13 AM, Peter Todd wrote:\n> So stop wasting your time. Help get the consensus critical code out of\n> Bitcoin Core and into a stand-alone libconsensus library...\n\ndone\n\nhttps://github.com/libbitcoin/libbitcoin-consensus\n\n> ...\n> Then ... when the next time we decide to soft-fork Bitcoin the\n> process isn't some secretive IRC discussion by a half-dozen \"core\n> developers\" - and one guy who finds the term hilarious - but a full on\n> DIRECT DEMOCRACY OCCUPY WALL STREEET MODIFIED CONSENSUS POW-WOW,\n> complete with twinkle fingers.\n\nYou seriously made me laugh out loud with this one Peter.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150325/acc634f0/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "On Rewriting Bitcoin (was Re: Satoshi client: is a fork past 0.10 possible?)",
            "categories": [
                "Bitcoin-development",
                "Libbitcoin"
            ],
            "authors": [
                "Eric Voskuil"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 895
        }
    },
    {
        "title": "[Bitcoin-development] Double spending and replace by fee",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2015-03-28T13:58:53",
                "message_text_only": "I've written a couple of blog posts on replace by fee and double spending\nmitigations. They sum up the last few years (!) worth of discussions on\nthis list and elsewhere, from my own perspective.\n\nI make no claim to be comprehensive or unbiased but I keep being asked\nabout these topics so figured I'd just write up my thoughts once so I can\nsend links instead of answers :) And then so can anyone who happens to\nagree.\n\n(1) Replace by fee scorched earth, a counter argument:\n\nhttps://medium.com/@octskyward/replace-by-fee-43edd9a1dd6d\n\nThis article lays out the case against RBF-SE and argues it is harmful to\nBitcoin.\n\n(2) Double spending and how to make it harder:\n\nhttps://medium.com/@octskyward/double-spending-in-bitcoin-be0f1d1e8008\n\nThis article summarises a couple of double spending incidents against\nmerchants and then discusses the following techniques:\n\n   1. Risk analysis of transactions\n   2. Payment channels\n   3. Countersigning by a trusted third party\n   4. Remote attestation\n   5. ID verification\n   6. Waiting for confirmations\n   7. Punishment of double spending blocks\n\nI hope the material is useful / interesting.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150328/6ba443f3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-03-28T14:22:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nWould you so us all a favor and make a list of companies *actually* relying on \"first-seen\" mempool behaviour. Because I've been having a hard time actually finding anyone who does who hasn't given up on it. Not very useful to talk about attacks against hypothetical defences.\n\nOn 28 March 2015 09:58:53 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:\n>I've written a couple of blog posts on replace by fee and double\n>spending\n>mitigations. They sum up the last few years (!) worth of discussions on\n>this list and elsewhere, from my own perspective.\n>\n>I make no claim to be comprehensive or unbiased but I keep being asked\n>about these topics so figured I'd just write up my thoughts once so I\n>can\n>send links instead of answers :) And then so can anyone who happens to\n>agree.\n>\n>(1) Replace by fee scorched earth, a counter argument:\n>\n>https://medium.com/@octskyward/replace-by-fee-43edd9a1dd6d\n>\n>This article lays out the case against RBF-SE and argues it is harmful\n>to\n>Bitcoin.\n>\n>(2) Double spending and how to make it harder:\n>\n>https://medium.com/@octskyward/double-spending-in-bitcoin-be0f1d1e8008\n>\n>This article summarises a couple of double spending incidents against\n>merchants and then discusses the following techniques:\n>\n>   1. Risk analysis of transactions\n>   2. Payment channels\n>   3. Countersigning by a trusted third party\n>   4. Remote attestation\n>   5. ID verification\n>   6. Waiting for confirmations\n>   7. Punishment of double spending blocks\n>\n>I hope the material is useful / interesting.\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Dive into the World of Parallel Programming The Go Parallel Website,\n>sponsored\n>by Intel and developed in partnership with Slashdot Media, is your hub\n>for all\n>things parallel software development, from weekly thought leadership\n>blogs to\n>news, videos, case studies, tutorials and more. Take a look and join\n>the\n>conversation now. http://goparallel.sourceforge.net/\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVFrj2\nAAoJEMCF8hzn9LncxH8IAIFVwBvpNQfDJTJGEHT8LHQEIB0hLmEMSWwYRovHdwob\nu3mUigF7dpYoQfL9eU7NqSaNsAkL2WEhBYS9C/OF81AFApxuugnH/VOGz9X4PvJ/\nzy5wP12onOrL//8/H9PoGH2dP3fmEe/rdhLelWUABuzyPQaoIaMLTZGREipbbBPK\nmJ6lBbNhtGGSxV3RgKvkkFYYBCAci/S/ntzpTOuYsgvZIjiXVsxD1uZZ/SiGfS3M\nR+RIrDX6W/xRdct0gm07KrHMNWo2kPE6uT6egZDxPNP308ddLwGWcvQWTe73bmEL\nFXsb6gUnfoXwBZfhDav41H4gRdZhLC+gOwVIcx0qLOY=\n=t0aZ\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Double spending and replace by fee",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4203
        }
    }
]