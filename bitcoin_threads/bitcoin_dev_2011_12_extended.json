[{"title": "[Bitcoin-development] Overview of pullreqs for 0.6", "thread_messages": [{"author": "Luke-Jr", "date": "2011-12-02T21:02:35", "message_text_only": "ACK'd for 0.6:\n585   Added Caps Lock detection to askpassphrasedialog.\n569   Coinbaser\n669   Multisignature and OP_EVAL support\n629   QR Code generation via libqrencode\n582   Bitcoin-Qt signmessage GUI\n\n*** All of the above are available merged in my personal 'next' branch:\n***     https://github.com/luke-jr/bitcoin/tree/next\n\nPossibly good for 0.6:\n454   Add -keepnode which attempts to -addnode and keep a connection open\n570   Specify fees explicitly via JSON-RPC\n673   Store fewer time samples\n649   Compressed pubkeys\n593   Full URL Support in bitcoin-qt\n\n*** All of the above are available merged in my personal 'next-test' branch:\n***     https://github.com/luke-jr/bitcoin/tree/next-test\n\nNeeds more review/support:\n427   IPv6 support (lots of complicated conflicts merging)\n568   Multithreaded JSON-RPC with HTTP 1.1 Keep-Alive support\n565   FastGetWork optimization\n555   SIGUSR1 new block notifications\n415   advanced anonymity features: send from address(es), view address\n      linkages, view all addresses\n358   Address Book related Fixes", "summary": "Luke-jr's personal 'next' branch includes Caps Lock detection, multisignature support, QR code generation, and more. 'Next-test' branch includes explicit fee specification and compressed pubkeys. IPv6 support and advanced anonymity features need more review."}], "thread_summary": {"title": "Overview of pullreqs for 0.6", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 1054}}, {"title": "[Bitcoin-development] Closing issues on github", "thread_messages": [{"author": "John Smith", "date": "2011-12-04T10:24:08", "message_text_only": "Hi,\n\nThis weekend I closed some old github issues that are no longer\nreproducible in more recent versions, or needed input from the submitter\nbut were stalling for months.\n\nI've also closed some issues that deal purely with Wx UI issues like this\none:\n\nhttps://github.com/bitcoin/bitcoin/issues/425\n\nI think my statement is valid, that we no longer support the old UI? Or\nmaybe some people want to take up maintenance of the old UI? I don't think\nthat has very high priority, and should probably not be in the main project.\n\nSome of the older issues are absolutely still relevant, but 150+ open\nissues is not something to be proud of, and I wonder how other open source\nprojects deal with this without too much stepping on people's toes :-)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111204/c9a87b35/attachment.html>", "summary": "The author closed old GitHub issues that are no longer reproducible or needed input, and some issues dealing purely with Wx UI issues."}, {"author": "Luke-Jr", "date": "2011-12-04T14:22:11", "message_text_only": "On Sunday, December 04, 2011 5:24:08 AM John Smith wrote:\n> I've also closed some issues that deal purely with Wx UI issues like this\n> one:\n> \n> https://github.com/bitcoin/bitcoin/issues/425\n> \n> I think my statement is valid, that we no longer support the old UI? Or\n> maybe some people want to take up maintenance of the old UI? \n\nI think it would be ideal if someone wanted to take up wxBitcoin. Maybe after \nbackporting to wx 2.8...\n\nThat being said, I have no interest, as I hate wx, and prefer Qt in general ;)\n\n> I don't think that has very high priority, and should probably not be in the\n> main project.\n\nPlease be careful to avoid the centralization mindset. There is no \"main \nproject\"; there is bitcoind, wxBitcoin, Bitcoin-Qt, MultiBit, and many other \nnon-functional clients, which should be given equal footing (before \nconsidering their differences). There shouldn't be given any special treatment \nto bitcoind and Bitcoin-Qt just because \"Gavin et al\" happen to maintain it.\n\n> Some of the older issues are absolutely still relevant, but 150+ open\n> issues is not something to be proud of, and I wonder how other open source\n> projects deal with this without too much stepping on people's toes :-)\n\nKDE literally just closed a bug of mine that I reported in 2002, because the \ncomponent with the bug hasn't been part of KDE since 2008.", "summary": "John Smith closed some Wx UI issues and suggested that someone take up wxBitcoin, but he personally prefers Qt. He also cautioned against a centralization mindset and noted that many non-functional clients should be given equal footing. He expressed concern about the large number of open issues and wondered how other open source projects handle them."}, {"author": "Wladimir", "date": "2011-12-04T15:31:01", "message_text_only": ">\n>\n> I think it would be ideal if someone wanted to take up wxBitcoin. Maybe\n> after\n> backporting to wx 2.8...\n>\n\nIndeed, someone could do this if they're interested in it, in their own\nfork. That's what I said too. But it's no longer our issue.\n\n\n> > I don't think that has very high priority, and should probably not be in\n> the\n> > main project.\n>\n> Please be careful to avoid the centralization mindset. There is no \"main\n> project\"; there is bitcoind, wxBitcoin, Bitcoin-Qt, MultiBit,\n\n\nWith the \"main project\" here I mean the issue list of bitcoin/bitcoin\nproject on github, which only deals with that project (and not that of the\nforks, which have their own issue lists). You can argue the \"main\"-ness but\nit's just a mailing list message and not some official document deciding\nabout the future of bitcoin, so I did not feel like specifying it to that\nlevel of detail.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111204/2b2b293f/attachment.html>", "summary": "A discussion about the priority of adding wxBitcoin to the main project, with a reminder to avoid a centralization mindset."}], "thread_summary": {"title": "Closing issues on github", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Wladimir"], "messages_count": 3, "total_messages_chars_count": 3345, "convo_summary": "John Smith closed old GitHub issues, including some Wx UI issues. Luke-Jr suggested someone take up wxBitcoin, but prefers Qt. He cautioned against centralization and noted non-functional clients should be given equal footing. Wladimir discussed adding wxBitcoin to the main project, reminding to avoid centralization."}}, {"title": "[Bitcoin-development] Version bytes \"2.0\"", "thread_messages": [{"author": "Luke-Jr", "date": "2011-12-06T21:10:39", "message_text_only": "sipa made a nice specification for version numbers a while back, that seemed \ngreat at the time. However, there are concerns that it has overlooked a very \nimportant factor: usability in base58 encoding. The version currently chosen \nfor script-based addresses (2) makes this excessively complicated for end \nusers-- these addresses, once encoded, may begin with ANY of the following \ncharacters: 2opqrstuvwxyz\n\nTaking this into account, as well as sipa's original goals, I have come up \nwith the following proposal:\n* Bits 128/64 define network class\n** 0 = main network\n** 64,128 = reserved\n** 192 = test network\n* Bits 32/16 define network\n** 0 = Bitcoin\n** 16,32 = reserved\n** 48 = OTHER (next octet)\n* Bits 8/4/2 define data class\n** 0 = Public key hash\n** 2 = Public key (raw)\n** 4 = Script hash\n** 6 = reserved\n** 8 = Private key (raw)\n** 10 = Signature\n** 12 = reserved\n** 14 = OTHER (next octet)\n* Bit 1 is freely chosen (for aesthetic assignment)\n\nUnlike sipa's proposal, however, I have (intentionally) neglected to consider \nthe versions currently in use other than the widespread Bitcoin addresses. \nThat means this reassigns the versions used by Namecoin and testnets, and \nprobably messes with the (unmerged) key export format and signature formats.\n\nIt \"wastes\" 2 bits (64 and 1) to accomplish aesthetic norms. Bit 64 *could* be \nassigned in the future if we ever have a \"crunch\". By using the high bit (128) \nto designate test networks, all testnet addresses will now begin with '2'. \nBitcoin script-hash (aka OP_EVAL) addresses are assigned version 5 (using the \naesthetic +1), which means they always begin with '3'. Signatures are on \nversion 10 and/or 11, beginning with '5'.\n\nWe get two first-class \"networks\" besides Bitcoin, addresses starting with '7' \nand 'E' (pubkey), and '9' and 'F' (script). I propose these should be assigned \nsparingly, only when a network has significant adoption-- the only one I would \neven *consider* might fit the requirement today is Namecoin. I would also \nsuggest making merged mining support a requirement except for networks that \nhave a proven-better proof-of-work (ie, NOT scrypt). Other networks can use \nthe \"other\" value (thus beginning with 'L' and 'N') and a second octet (which \ncan be divided up later).\n\nThoughts?\n\nLuke", "summary": "A proposal for a new version numbering system for Bitcoin addresses has been put forward, taking into account usability in base58 encoding. The proposal assigns bits to define network class, network, and data class, with some bits left for aesthetic assignment. The proposal reassigns versions used by Namecoin and testnets, and may affect key export and signature formats. The proposal suggests sparing use of two first-class \"networks\" besides Bitcoin, with merged mining support as a requirement except for networks with a proven-better proof-of-work."}, {"author": "Luke-Jr", "date": "2011-12-06T21:28:16", "message_text_only": "Some bugs I found in my spec so far:\n- Bitcoin public keys begin with '2' (same as testnet data)\n- For the first first-class \"aux\" network, signatures and private keys will\n  start with the same character.\n- More \"collisions\" are possible if the \"reserved\" values were ever assigned.\n\nTo address these slightly better, here's a revised proposal:\n* Bits 128/64 define network class\n** 0 = main network\n** 64,128 = reserved\n** 192 = test network\n* Bits 32/16 define network\n** 0 = Bitcoin\n** 16,32 = reserved\n** 48 = OTHER (next octet)\n* Bits 8/4/2 define data class\n** 0 = Public key hash\n** 2 = reserved\n** 4 = Script hash\n** 6 = Public key (raw)\n** 8 = Signature\n** 10 = reserved\n** 12 = Private key (raw)\n** 14 = OTHER (next octet)\n* Bit 1 is freely chosen (for aesthetic assignment)\n\nNote that under this scheme, both script hashes and raw public keys begin with \n'3'; I consider this a non-issue since neither are supported by current-\ngeneration clients, and both pubkey-hash and script-hash are quite capable of \nthe same functionality as a raw public key. Also, the raw public key will \npresumably be noticably longer.\n\nFor reference, a table of version number to first-base58-char mappings:\n+........   0 => 1\n-.......1   1 => QRSTUVWXYZabcdefghijkmno\n-......1.   2 => 2opqrstuvwxyz\n+......11   3 => 2\n-.....1..   4 => 23\n+.....1.1   5 => 3\n+.....11.   6 => 3\n-.....111   7 => 34\n+....1...   8 => 4\n-....1..1   9 => 45\n+....1.1.  10 => 5\n+....1.11  11 => 5\n-....11..  12 => 56\n+....11.1  13 => 6\n-....111.  14 => 67\n+....1111  15 => 7\n+...1....  16 => 7\n-...1...1  17 => 78\n+...1..1.  18 => 8\n-...1..11  19 => 89\n+...1.1..  20 => 9\n+...1.1.1  21 => 9\n-...1.11.  22 => 9A\n+...1.111  23 => A\n-...11...  24 => AB\n+...11..1  25 => B\n+...11.1.  26 => B\n-...11.11  27 => BC\n+...111..  28 => C\n-...111.1  29 => CD\n+...1111.  30 => D\n+...11111  31 => D\n-..1.....  32 => DE\n+..1....1  33 => E\n-..1...1.  34 => EF\n+..1...11  35 => F\n+..1..1..  36 => F\n-..1..1.1  37 => FG\n+..1..11.  38 => G\n-..1..111  39 => GH\n+..1.1...  40 => H\n+..1.1..1  41 => H\n-..1.1.1.  42 => HJ\n+..1.1.11  43 => J\n-..1.11..  44 => JK\n+..1.11.1  45 => K\n+..1.111.  46 => K\n-..1.1111  47 => KL\n+..11....  48 => L\n-..11...1  49 => LM\n+..11..1.  50 => M\n+..11..11  51 => M\n-..11.1..  52 => MN\n+..11.1.1  53 => N\n-..11.11.  54 => NP\n+..11.111  55 => P\n+..111...  56 => P\n-..111..1  57 => PQ\n+..111.1.  58 => Q\n-..111.11  59 => QR\n+..1111..  60 => R\n+..1111.1  61 => R\n-..11111.  62 => RS\n+..111111  63 => S\n-.1......  64 => ST\n+.1.....1  65 => T\n+.1....1.  66 => T\n-.1....11  67 => TU\n+.1...1..  68 => U\n-.1...1.1  69 => UV\n+.1...11.  70 => V\n+.1...111  71 => V\n-.1..1...  72 => VW\n+.1..1..1  73 => W\n-.1..1.1.  74 => WX\n+.1..1.11  75 => X\n+.1..11..  76 => X\n-.1..11.1  77 => XY\n+.1..111.  78 => Y\n-.1..1111  79 => YZ\n+.1.1....  80 => Z\n+.1.1...1  81 => Z\n-.1.1..1.  82 => Za\n+.1.1..11  83 => a\n-.1.1.1..  84 => ab\n+.1.1.1.1  85 => b\n-.1.1.11.  86 => bc\n+.1.1.111  87 => c\n+.1.11...  88 => c\n-.1.11..1  89 => cd\n+.1.11.1.  90 => d\n-.1.11.11  91 => de\n+.1.111..  92 => e\n+.1.111.1  93 => e\n-.1.1111.  94 => ef\n+.1.11111  95 => f\n-.11.....  96 => fg\n+.11....1  97 => g\n+.11...1.  98 => g\n-.11...11  99 => gh\n+.11..1.. 100 => h\n-.11..1.1 101 => hi\n+.11..11. 102 => i\n+.11..111 103 => i\n-.11.1... 104 => ij\n+.11.1..1 105 => j\n-.11.1.1. 106 => jk\n+.11.1.11 107 => k\n+.11.11.. 108 => k\n-.11.11.1 109 => km\n+.11.111. 110 => m\n-.11.1111 111 => mn\n+.111.... 112 => n\n+.111...1 113 => n\n-.111..1. 114 => no\n+.111..11 115 => o\n-.111.1.. 116 => op\n+.111.1.1 117 => p\n+.111.11. 118 => p\n-.111.111 119 => pq\n+.1111... 120 => q\n-.1111..1 121 => qr\n+.1111.1. 122 => r\n+.1111.11 123 => r\n-.11111.. 124 => rs\n+.11111.1 125 => s\n-.111111. 126 => st\n+.1111111 127 => t\n+1....... 128 => t\n-1......1 129 => tu\n+1.....1. 130 => u\n-1.....11 131 => uv\n+1....1.. 132 => v\n+1....1.1 133 => v\n-1....11. 134 => vw\n+1....111 135 => w\n-1...1... 136 => wx\n+1...1..1 137 => x\n+1...1.1. 138 => x\n-1...1.11 139 => xy\n+1...11.. 140 => y\n-1...11.1 141 => yz\n+1...111. 142 => z\n+1...1111 143 => z\n-1..1.... 144 => 2z\n+1..1...1 145 => 2\n+1..1..1. 146 => 2\n+1..1..11 147 => 2\n+1..1.1.. 148 => 2\n+1..1.1.1 149 => 2\n+1..1.11. 150 => 2\n+1..1.111 151 => 2\n+1..11... 152 => 2\n+1..11..1 153 => 2\n+1..11.1. 154 => 2\n+1..11.11 155 => 2\n+1..111.. 156 => 2\n+1..111.1 157 => 2\n+1..1111. 158 => 2\n+1..11111 159 => 2\n+1.1..... 160 => 2\n+1.1....1 161 => 2\n+1.1...1. 162 => 2\n+1.1...11 163 => 2\n+1.1..1.. 164 => 2\n+1.1..1.1 165 => 2\n+1.1..11. 166 => 2\n+1.1..111 167 => 2\n+1.1.1... 168 => 2\n+1.1.1..1 169 => 2\n+1.1.1.1. 170 => 2\n+1.1.1.11 171 => 2\n+1.1.11.. 172 => 2\n+1.1.11.1 173 => 2\n+1.1.111. 174 => 2\n+1.1.1111 175 => 2\n+1.11.... 176 => 2\n+1.11...1 177 => 2\n+1.11..1. 178 => 2\n+1.11..11 179 => 2\n+1.11.1.. 180 => 2\n+1.11.1.1 181 => 2\n+1.11.11. 182 => 2\n+1.11.111 183 => 2\n+1.111... 184 => 2\n+1.111..1 185 => 2\n+1.111.1. 186 => 2\n+1.111.11 187 => 2\n+1.1111.. 188 => 2\n+1.1111.1 189 => 2\n+1.11111. 190 => 2\n+1.111111 191 => 2\n+11...... 192 => 2\n+11.....1 193 => 2\n+11....1. 194 => 2\n+11....11 195 => 2\n+11...1.. 196 => 2\n+11...1.1 197 => 2\n+11...11. 198 => 2\n+11...111 199 => 2\n+11..1... 200 => 2\n+11..1..1 201 => 2\n+11..1.1. 202 => 2\n+11..1.11 203 => 2\n+11..11.. 204 => 2\n+11..11.1 205 => 2\n+11..111. 206 => 2\n+11..1111 207 => 2\n+11.1.... 208 => 2\n+11.1...1 209 => 2\n+11.1..1. 210 => 2\n+11.1..11 211 => 2\n+11.1.1.. 212 => 2\n+11.1.1.1 213 => 2\n+11.1.11. 214 => 2\n+11.1.111 215 => 2\n+11.11... 216 => 2\n+11.11..1 217 => 2\n+11.11.1. 218 => 2\n+11.11.11 219 => 2\n+11.111.. 220 => 2\n+11.111.1 221 => 2\n+11.1111. 222 => 2\n+11.11111 223 => 2\n+111..... 224 => 2\n+111....1 225 => 2\n+111...1. 226 => 2\n+111...11 227 => 2\n+111..1.. 228 => 2\n+111..1.1 229 => 2\n+111..11. 230 => 2\n+111..111 231 => 2\n+111.1... 232 => 2\n+111.1..1 233 => 2\n+111.1.1. 234 => 2\n+111.1.11 235 => 2\n+111.11.. 236 => 2\n+111.11.1 237 => 2\n+111.111. 238 => 2\n+111.1111 239 => 2\n+1111.... 240 => 2\n+1111...1 241 => 2\n+1111..1. 242 => 2\n+1111..11 243 => 2\n+1111.1.. 244 => 2\n+1111.1.1 245 => 2\n+1111.11. 246 => 2\n+1111.111 247 => 2\n+11111... 248 => 2\n+11111..1 249 => 2\n+11111.1. 250 => 2\n+11111.11 251 => 2\n+111111.. 252 => 2\n+111111.1 253 => 2\n+1111111. 254 => 2\n+11111111 255 => 2", "summary": "A revised proposal for addressing bugs in the spec includes defining network class, network, and data class using bits."}, {"author": "Luke-Jr", "date": "2011-12-10T18:16:30", "message_text_only": "This should make it compatible with Namecoin addresses...\n\nHere's a revised proposal:\n* Bits 128/64 define network class\n** 0 = main network\n** 64,128 = reserved\n** 192 = test network\n* Bits 32/16 define network\n** 0 = Bitcoin\n** 16 = reserved\n** 32 = OTHER (next octet)\n** 48 = Namecoin\n\nThe rest is left up to the network to decide; for Bitcoin, it is:\n* Bits 8/4/2 define data class\n** 0 = Public key hash\n** 2 = reserved\n** 4 = Script hash\n** 6 = Public key (raw)\n** 8 = Signature\n** 10 = reserved\n** 12 = Private key (raw)\n** 14 = OTHER (next octet)\n* Bit 1 is freely chosen (for aesthetic assignment)", "summary": "A proposal suggests using bits to define network class and network for compatibility with Namecoin addresses, leaving the rest up to the network."}, {"author": "Pieter Wuille", "date": "2011-12-12T20:57:54", "message_text_only": "It seems base58 is actually quite terrible for producing nice human-recognizable\naddresses, even though base58 is specially intended for human usage. We'll just\nhave to deal with it, or completely overhaul it and move to a saner encoding.\n\n\nLuke's proposal is somewhat more drastic than my original one, since it removes\nthe actual \"version\" notion from the version bytes, and changes testnet addresses.\nHowever, I think it may be worth it. More data classes have been necessary\nbefore, and new versions haven't. Furthermore, they are far more recognizable to\nusers, which is something that in particular for OP_EVAL addresses (script hashes)\nwill be a plus.\n\nTherefore, I'm in favor of the proposal; the new versions would become:\n\n0:   mainnet pubkey hashes ('1', as before)\n192: testnet pubnet hashes ('2', instead of 111, 'm' and 'n')\n5:   mainnet script hashes ('3'; for OP_EVAL)\n196: testnet script hashes ('2', same as normal testnet addresses)\n12:  mainnet private keys  ('Q', 'R' or 'S', instead of 128, '5')\n204: testnet private keys  ('7', instead of 239, '8' and '9')\n\nComments?\n\n--\nPieter", "summary": "Base58 encoding is not ideal for human-readable addresses. A proposal to overhaul the encoding for Bitcoin addresses has been suggested."}, {"author": "Luke-Jr", "date": "2011-12-12T21:02:11", "message_text_only": "On Monday, December 12, 2011 3:56:01 PM Pieter Wuille wrote:\n> It seems base58 is actually quite terrible for producing nice\n> human-recognizable addresses, even though base58 is specially intended for\n> human usage. We'll just have to deal with it, or completely overhaul it\n> and move to a saner encoding.\n\nOr both: use this proposal for 20-byte base58 for now, and overhaul it in the \nfuture (maybe when the block chain forks?).\n\n> 0:   mainnet pubkey hashes ('1', as before)\n> 192: testnet pubnet hashes ('2', instead of 111, 'm' and 'n')\n> 5:   mainnet script hashes ('3'; for OP_EVAL)\n> 196: testnet script hashes ('2', same as normal testnet addresses)\n\nLooks good here.\n\n> 12:  mainnet private keys  ('Q', 'R' or 'S', instead of 128, '5')\n> 204: testnet private keys  ('7', instead of 239, '8' and '9')\n\nThese are 32-byte, so have no reason IMO to follow the 20-byte proposal.\nSince a lot of services are already using version 128 ('5') for bitcoin \nprivate keys, and 128 is \"reserved\" in the 20-byte proposal, I think it's fair \nto leave it alone (for now).", "summary": "Base58 encoding is not ideal for human-readable addresses, and may need to be overhauled. Proposed changes to encoding for Bitcoin addresses."}, {"author": "Mike Hearn", "date": "2011-12-13T10:38:55", "message_text_only": "Why does anyone care what an address looks like?\n\nIf the user is seeing an address, that's a usability fail right there. It's\ncommon today because AFAIK nobody finished off the  URL handling support in\nthe main client for browser integration. It'd be a much better use of time\nto finish off that integration and make it easy for people to create links\ncontaining a bitcoin: URL (like with copy/paste of text/html content).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/d8f5f0e8/attachment.html>", "summary": "The appearance of a Bitcoin address is irrelevant to its usability; finishing URL handling support for browser integration would be more beneficial."}, {"author": "Wladimir", "date": "2011-12-13T10:56:52", "message_text_only": "All,\n\nI fully agree with Mike Hearn on this. Like email addresses, bank numbers,\nphone numbers, IPv4/v6 addresses and such the bitcoin address is just an\nopaque identifier for machines to be able to send each other messages.\n\nBase58 was chosen not for human readability but to make it easy to\ncopy/paste.\n\nOf course, sometimes for security reasons you may want to check the\naddresses manually, but it is not the prime usage scenario. Although fun as\na nerd pasttime, I don't think we should encourage \"addresses with meaning\"\nto normal users.\n\nIndeed better to focus on alternative ways that don't involve typing or\neven seeing the addresses.\n\nCopy/paste of HTML content is currently not possible. You *can* already\ndrag&drop the bitcoin: link to the client. Bluematt has a pull request to\nautomatically handle bitcoin: URLs when clicked in the browser.\n\nWladimir\n\nOn Tue, Dec 13, 2011 at 11:38 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Why does anyone care what an address looks like?\n>\n> If the user is seeing an address, that's a usability fail right there.\n> It's common today because AFAIK nobody finished off the  URL handling\n> support in the main client for browser integration. It'd be a much better\n> use of time to finish off that integration and make it easy for people to\n> create links containing a bitcoin: URL (like with copy/paste of text/html\n> content).\n>\n> ------------------------------------------------------------------------------\n> Systems Optimization Self Assessment\n> Improve efficiency and utilization of IT resources. Drive out cost and\n> improve service delivery. Take 5 minutes to use this Systems Optimization\n> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/aedaec84/attachment.html>", "summary": "Bitcoin addresses are just opaque identifiers for machines to send messages, not for human readability. Focus on alternative ways to handle addresses."}, {"author": "Mike Hearn", "date": "2011-12-13T11:07:17", "message_text_only": ">\n> Base58 was chosen not for human readability but to make it easy to\n> copy/paste.\n>\n\nIt was also chosen for hand-writeability, weirdly enough. That's why it\nexcludes some confusible characters. But Satoshi didn't really understand\nhow people would end up using Bitcoin, he originally imagined most\ntransactions being done directly between pairs of IP addresses.\n\n\n> Copy/paste of HTML content is currently not possible. You *can* already\n> drag&drop the bitcoin: link to the client. Bluematt has a pull request to\n> automatically handle bitcoin: URLs when clicked in the browser.\n>\n\nThat's cool. I hope Matts change gets merged soon. Then the issue becomes\nhow do people find out about this capability? Expecting people to learn how\nto hand-craft Bitcoin links won't work. But all modern operating systems\nsupport copy/paste and drag/drop of rich content. Qt probably makes it easy\nto expose an UI like this:\n\n   *Pay me*    [Copy to clipboard]\n\nClicking the link in the UI would pop up an alert saying something like\n\n   \"You can drag this link to an email, chat window or editing program.\"\n\nDragging it/pushing the copy button would just set the drag/clipboard data\nas a bit of text/html content. So then you can just copy/paste into an\nemail or HTML editor. It wouldn't work for forums that use bbCode, though I\nguess there's no particular reason the forum software can't turn <a href>\ninto [url=] automatically.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/545d5441/attachment.html>", "summary": "Base58 was chosen for easy copy/paste and hand-writeability, not human readability. Bluematt's pull request may allow drag&drop of bitcoin links."}, {"author": "Wladimir", "date": "2011-12-13T11:15:20", "message_text_only": ">\n>\n> That's cool. I hope Matts change gets merged soon. Then the issue becomes\n> how do people find out about this capability? Expecting people to learn how\n> to hand-craft Bitcoin links won't work. But all modern operating systems\n> support copy/paste and drag/drop of rich content. Qt probably makes it easy\n> to expose an UI like this:\n>\n>    *Pay me*    [Copy to clipboard]\n>\n> Clicking the link in the UI would pop up an alert saying something like\n>\n>    \"You can drag this link to an email, chat window or editing program.\"\n>\n\nGood idea! This could be integrated with the QR-code generation (\nhttps://github.com/bitcoin/bitcoin/pull/629) which adds \"create a payment\nlink\" functionality (but currently only \"exports\" this link as a QR code).\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/681d3874/attachment.html>", "summary": "A proposal to make it easier for people to share Bitcoin payment links by integrating a UI with copy/paste and drag/drop functionality."}, {"author": "Luke-Jr", "date": "2011-12-13T15:43:18", "message_text_only": "On Tuesday, December 13, 2011 6:07:17 AM Mike Hearn wrote:\n> That's cool. I hope Matts change gets merged soon. Then the issue becomes\n> how do people find out about this capability? Expecting people to learn how\n> to hand-craft Bitcoin links won't work. \n\nBitcoin-Qt 0.6 will include a QR Code generator.\n\n> But all modern operating systems support copy/paste and drag/drop of rich\n> content. \n\nNo, not really. I've found that dragging and dropping links manages to corrupt \nthem most of the time.", "summary": "Bitcoin-Qt 0.6 will have a QR code generator to address the issue of people not knowing how to hand-craft Bitcoin links, but dragging and dropping links can still corrupt them."}], "thread_summary": {"title": "Version bytes \"2.0\"", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Luke-Jr", "Pieter Wuille", "Wladimir"], "messages_count": 10, "total_messages_chars_count": 16962, "convo_summary": "A proposal for a new version numbering system for Bitcoin addresses has been suggested, using bits to define network class, network, and data class. Base58 encoding is not ideal for human-readable addresses, and alternative ways to handle addresses should be considered. Bitcoin-Qt 0.6 will have a QR code generator to address the issue of people not knowing how to hand-craft Bitcoin links."}}, {"title": "[Bitcoin-development] Lowering confirmation requirements and preventing double spends", "thread_messages": [{"author": "Andy Parkins", "date": "2011-12-08T10:47:08", "message_text_only": "Hello,\n\nAnother of my crazy ideas:\n\nWhen a transaction is first broadcast, it should include the hash of the block \nit wants to appear after, let's call it's basis block.  That block can be \nanything the claimer wants; but it allows the miners to add this condition: \nthe transactions outputs a new transaction claims must be before the new \ntransaction's basis block.\n\nConsider this block chain fork:\n\n * -- * -- F -- * -- 1 -- 4 -- 5\n            \\\n             * -- 2 -- 3\n\nLet's say in block 2; I transfer coins from address A to Mt.Gox (or any other \npooled-account online wallet).  In block 1 I transfer credit from address A to \naddress B.  In block 3 I transfer credit from Mt.Gox's pool to address B.\n\nThe chain at 3 races out first, but eventually the chain at 5 becomes \"the \none\".  If Mt.Gox are foolish enough to broadcast my withdrawl in 3; there is \nnothing to stop that same withdrawl making it into 4 (since it comes from a \npooled fund address).  Therefore Mt.Gox can't allow such a fast turnaround and \nmust wait for six confirmations of 2 before allowing use of the funds.  That \nis an inconvenience for all the honest users.\n\nWith my proposed change, the Mt.Gox transaction broadcast at 3 would include \n\"block 2\" as its basis block.  Therefore that transaction could never make it \ninto block 4, as no miner will include a transaction based on block 2 in the \nblock 4 chain.\n\nMt.Gox is probably not a good example, as they have problems with fiat to deal \nwith too.  However, for other online wallet accounts it would allow faster \nacceptance of received funds, since there is no danger of loss should an \nattacker arrange a reorganisation.\n\nThis basis block would be optional (implied by the input transactions if it \nisn't present); and would only need storing for the pending transactions, so \nno incompatible change is needed to the block format.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "A proposal to include the hash of the block a transaction wants to appear after, called the basis block, to prevent loss from an attacker's reorganization."}, {"author": "Stefan Thomas", "date": "2011-12-08T22:43:24", "message_text_only": "Hey Andy,\n\nBitcoin already does something which in practice has exactly this \neffect: If a transaction is reversed, any transactions based on its \noutputs are rejected.\n\nHosted wallets can make use of this - but as you correctly point out, \ndepending on the service, it can get tricky. What if I exchange the \nmoney to USD and back before withdrawing? You could have an algorithm \nwhere MtGox prefers to spend outputs from your own deposits as the \ninputs for your withdrawals, it's not trivial though and never 100% secure.\n\nI have trouble thinking of a good example where you need an explicit \nblock dependency as you describe. The only times you'd want to use this \ndependency of transactions on specific previous transactions is when you \ncan clearly and easily associate the money. But if you can clearly and \neasily associate the money, you might as well just relate the \ntransactions (use the outputs from the deposit transaction as the inputs \nof the withdrawal transaction.)\n\nThis is btw something that would strongly agree with: Hosted wallets \nshould absolutely keep each account as separate public keys. With that \nyou lose free and instant internal transactions, but you gain instant \ndeposits and much better risk isolation.\n\nThis is just my view. Thanks and keep the thought-provoking stuff coming!\n\nCheers,\n\nStefan\n\nOn 12/8/2011 11:47 AM, Andy Parkins wrote:\n> Hello,\n>\n> Another of my crazy ideas:\n>\n> When a transaction is first broadcast, it should include the hash of the block\n> it wants to appear after, let's call it's basis block.  That block can be\n> anything the claimer wants; but it allows the miners to add this condition:\n> the transactions outputs a new transaction claims must be before the new\n> transaction's basis block.\n>\n> Consider this block chain fork:\n>\n>   * -- * -- F -- * -- 1 -- 4 -- 5\n>              \\\n>               * -- 2 -- 3\n>\n> Let's say in block 2; I transfer coins from address A to Mt.Gox (or any other\n> pooled-account online wallet).  In block 1 I transfer credit from address A to\n> address B.  In block 3 I transfer credit from Mt.Gox's pool to address B.\n>\n> The chain at 3 races out first, but eventually the chain at 5 becomes \"the\n> one\".  If Mt.Gox are foolish enough to broadcast my withdrawl in 3; there is\n> nothing to stop that same withdrawl making it into 4 (since it comes from a\n> pooled fund address).  Therefore Mt.Gox can't allow such a fast turnaround and\n> must wait for six confirmations of 2 before allowing use of the funds.  That\n> is an inconvenience for all the honest users.\n>\n> With my proposed change, the Mt.Gox transaction broadcast at 3 would include\n> \"block 2\" as its basis block.  Therefore that transaction could never make it\n> into block 4, as no miner will include a transaction based on block 2 in the\n> block 4 chain.\n>\n> Mt.Gox is probably not a good example, as they have problems with fiat to deal\n> with too.  However, for other online wallet accounts it would allow faster\n> acceptance of received funds, since there is no danger of loss should an\n> attacker arrange a reorganisation.\n>\n> This basis block would be optional (implied by the input transactions if it\n> isn't present); and would only need storing for the pending transactions, so\n> no incompatible change is needed to the block format.\n>\n>\n>\n> Andy", "summary": "A proposal to include the hash of the block a transaction wants to appear after to prevent transaction reversals and ensure secure withdrawals. Hosted wallets should keep each account as separate public keys for better risk isolation."}, {"author": "Andy Parkins", "date": "2011-12-09T09:50:03", "message_text_only": "On 2011 December 08 Thursday, Stefan Thomas wrote:\n\n> Bitcoin already does something which in practice has exactly this\n> effect: If a transaction is reversed, any transactions based on its\n> outputs are rejected.\n\nThat part is fine; I was aware that Bitcoin did this.  How could it not?  The \ntransactions form multiple signature chains of their own.  It impossible to \nhave a transaction depend on a non-existent input transaction.\n\n> Hosted wallets can make use of this - but as you correctly point out,\n> depending on the service, it can get tricky. What if I exchange the\n> money to USD and back before withdrawing? You could have an algorithm\n> where MtGox prefers to spend outputs from your own deposits as the\n> inputs for your withdrawals, it's not trivial though and never 100% secure.\n\nQuite so; this is essentially the problem my suggestion addresses.  What do \nyou do when a transaction is dependent on another transaction financially but \nnot technically?  That is to say that your accounting software would show a \ncredit and a debit to a particular entity, but the bitcoin block chain would \nnot.  In the old world we might do this as \"I'll write you a cheque and you \ngive me cash\"; if that cheque bounces, you've lost your cash.\n\n> I have trouble thinking of a good example where you need an explicit\n> block dependency as you describe. The only times you'd want to use this\n> dependency of transactions on specific previous transactions is when you\n> can clearly and easily associate the money. But if you can clearly and\n> easily associate the money, you might as well just relate the\n> transactions (use the outputs from the deposit transaction as the inputs\n> of the withdrawal transaction.)\n\nThe MyBitcoin debacle (if we are to believe their reports) would have been \navoided by my suggestion.  They were accepting deposits in one chain, and \nallowing withdrawls from another.  That meant that while there was a financial \nconnection, there was not a bitcoin-connection.  The withdrawls happened from \nthe pool address, most likely well funded, so were valid on either chain.  If \nMyBitcoin had been able to broadcast the withdrawl transactions as being based \non the same chain as the deposit (even though it was not using transactions in \nthat chain) then the attack would have failed.\n\n> This is btw something that would strongly agree with: Hosted wallets\n> should absolutely keep each account as separate public keys. With that\n> you lose free and instant internal transactions, but you gain instant\n> deposits and much better risk isolation.\n\nI'm not sure I agree.  There is certainly a case for both types: one-to-one \ncorrespondence between address and account has the advantages you list but is \nhighly identifiable and trackable.  However the disadvantage is that all funds \nwould have to be kept online.  Places like Mt.Gox can (although there is \nevidence to suggest that they don't, tut tu) move the majority of the funds to \nfive USB sticks, and keep them in five fire-proof safes or deposit boxes or \nwhatever only because deposited funds are pooled.\n\n> This is just my view. Thanks and keep the thought-provoking stuff coming!\n\nThanks for the encouragement.  It's appreciated.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111209/5a680498/attachment.sig>", "summary": "Bitcoin transactions can be rejected if a previous transaction is reversed, but it can get tricky with hosted wallets. Explicit block dependencies can prevent financial connections without a bitcoin-connection. Hosted wallets should keep each account as separate public keys."}], "thread_summary": {"title": "Lowering confirmation requirements and preventing double spends", "categories": ["Bitcoin-development"], "authors": ["Stefan Thomas", "Andy Parkins"], "messages_count": 3, "total_messages_chars_count": 8806, "convo_summary": "Andy Parkins and Stefan Thomas discussed proposals to prevent loss and ensure secure withdrawals in Bitcoin transactions. Parkins suggested including the hash of the basis block to prevent loss from an attacker's reorganization, while Thomas proposed including the hash of the block a transaction wants to appear after. They also agreed that hosted wallets should keep each account as separate public keys for better risk isolation."}}, {"title": "[Bitcoin-development] [BIP 15] Aliases", "thread_messages": [{"author": "Amir Taaki", "date": "2011-12-12T22:21:09", "message_text_only": "I wrote this pre-draft:\n\n\nhttps://en.bitcoin.it/wiki/BIP_0015\n\nIt's merely a starter for discussions.\n\nAliases are a way to lookup bitcoin addresses so I can type genjix at genjix.net instead of 1jkddsjdskjwnk2j3kj232kjdkj", "summary": "BIP 0015 proposes a way to use aliases to lookup Bitcoin addresses, making it easier to remember and type them. It's up for discussion."}, {"author": "Amir Taaki", "date": "2011-12-12T22:25:42", "message_text_only": "OK, my thoughts. My order of preference is: web service, server service, DNS TXT records.\n\nFirstBits + Vanitygen is out of the question in my mind. Not robust enough.\n\nI like web service since anyone can trivially set one up. You can provide a PHP script and a text file (that users edit) that people upload to XFreeWebHost and then they're instantly set to go. Setting up a web host is very easy nowadays- as easy as click click click.\n\nThe other ideas are not so easy.\n\nAlso HTTPS + CA is the most secure of the bunch.\n\nI'm curious to hear any other ideas too.\n\nThanks.\n\n\n\n----- Original Message -----\nFrom: Amir Taaki <zgenjix at yahoo.com>\nTo: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nCc: \nSent: Monday, December 12, 2011 10:21 PM\nSubject: [BIP 15] Aliases\n\nI wrote this pre-draft:\n\n\nhttps://en.bitcoin.it/wiki/BIP_0015\n\nIt's merely a starter for discussions.\n\nAliases are a way to lookup bitcoin addresses so I can type genjix at genjix.net instead of 1jkddsjdskjwnk2j3kj232kjdkj", "summary": "The author suggests using a web service as the best option for implementing aliases for Bitcoin addresses, followed by a server service and DNS TXT records. HTTPS + CA is the most secure option."}, {"author": "Luke-Jr", "date": "2011-12-12T22:32:40", "message_text_only": "FirstBits looks nice at glance, but is bound to create a gold-rush to grab \nevery nice-looking FirstBits address.\n\nHTTPS is only as secure as the (centralized) CAs, thus not really any better \nthan TXT records.\n\nI don't think an address of some form is avoidable.", "summary": "FirstBits may attract a rush to acquire desirable addresses, HTTPS is not foolproof, and addresses are likely unavoidable."}, {"author": "theymos", "date": "2011-12-13T04:38:42", "message_text_only": "I like the user at server.com model. The protocol should be done entirely\nin DNS, though, not using HTTP connections to the server. Then the\nprotocol can easily be used with Namecoin or other DNS\nreplacements/enhancements later. Crypto to prevent MITM attacks can be\nan optional part of the protocol.\n\nAlmost all users will be unable to set up *any* always-on Internet\nservice to answer queries, so I'm not too concerned about how easy it is\nto set up the server software.\n\nI agree that FirstBits is bad for this. Unlike DNS, \"registrations\" last\nforever because private keys can't be transferred safely. All short\nnames will be taken quickly. It will also be very expensive for clients\nto query this themselves.\n\nThe CA model is broken and it should never be used by Bitcoin.", "summary": "A DNS-based protocol for server.com model is suggested to be used with Namecoin or other DNS replacements/enhancements. The CA model is deemed broken for Bitcoin."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-13T07:41:48", "message_text_only": "@Matt\nI didn't thought about firstbits scalability, but the \"registering\ncrap\" and squatting arguments don't apply to green addresses because\nno one wants fancy or easy to memorize names there. Is just a way to\nmake the bitcoin addresses shorter in the green addresses protocol to\nbe able to have various of them in the same QR-code.\n\n@Amir\nI see, the point is to be able to type the alias directly into the client.\n\nI like the DNS proposal. This would allow for both well known working\ncentralized technology and namecoin (not proven, but decentralized)\noptions to be used.\n\n\n2011/12/13, theymos <theymos at mm.st>:\n> I like the user at server.com model. The protocol should be done entirely\n> in DNS, though, not using HTTP connections to the server. Then the\n> protocol can easily be used with Namecoin or other DNS\n> replacements/enhancements later. Crypto to prevent MITM attacks can be\n> an optional part of the protocol.\n>\n> Almost all users will be unable to set up *any* always-on Internet\n> service to answer queries, so I'm not too concerned about how easy it is\n> to set up the server software.\n>\n> I agree that FirstBits is bad for this. Unlike DNS, \"registrations\" last\n> forever because private keys can't be transferred safely. All short\n> names will be taken quickly. It will also be very expensive for clients\n> to query this themselves.\n>\n> The CA model is broken and it should never be used by Bitcoin.\n>\n> ------------------------------------------------------------------------------\n> Systems Optimization Self Assessment\n> Improve efficiency and utilization of IT resources. Drive out cost and\n> improve service delivery. Take 5 minutes to use this Systems Optimization\n> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "Green addresses protocol uses shorter Bitcoin addresses for multiple addresses in one QR code. DNS proposal allows for centralized or decentralized options."}, {"author": "theymos", "date": "2011-12-15T19:59:07", "message_text_only": "Bitcoin already has code and a protocol for transactions to IP\naddresses. Why not reuse that for dynamic address lookup? Just a few\nchanges are necessary to enable complete user at server.com handling:\n- Extend the protocol so that \"reply\" messages can be signed by a fixed\n  public key\n- Extend \"checkorder\" messages so they can specify an account to\n  send BTC to. Or standardize on how to put the account into the\n  message field.\n- Enable DNS lookups for IP transactions. The DNS-only proposals could\n  also be used here to avoid having to use the IP transaction protocol\n  sometimes. The public key for signing \"reply\" messages can be gotten\n  from TXT records. This will be safe with DNSSEC and Namecoin. With\n  plain DNS Bitcoin could take a SSH-like approach and ask the user to\n  verify the public key the first time it is used, remembering it later.\n\nDoS attacks are already handled by the IP transactions code: the same IP\naddress is always given the same bitcoin address until it pays to that\nbitcoin address.", "summary": "Bitcoin's existing protocol for transactions to IP addresses can be modified to enable complete user handling at server.com through a few changes, including extending the protocol for signed \"reply\" messages and enabling DNS lookups for IP transactions. DoS attacks are already handled."}, {"author": "Amir Taaki", "date": "2011-12-15T23:56:02", "message_text_only": "This is maybe the best idea. I added it:\nhttps://en.bitcoin.it/wiki/BIP_0015#IP_Transactions\n\nThings I like about this:\n- IP transactions are useful, but have a security flaw. This mitigates their security problems.\n- The code for IP transactions is already in Satoshi client. If other clients want to add IP transactions, then it can be done with minimal fuss/bloat.\nI feel that for any protocol extension, less is more. The less code \nneeded, the better the extension. Not always but generally we want to \navoid bitcoin protocol bloat which *will* happen far in the future. The \nonly way to mitigate how spaghettified the standard will be in the \nfuture, is by careful cautious planning now.\n\n- We can have a proxy node running 24/7 for us, serving our public keys in lieu of us.\n\n\n\n________________________________\n From: theymos <theymos at mm.st>\nTo: bitcoin-development at lists.sourceforge.net \nSent: Thursday, December 15, 2011 7:59 PM\nSubject: Re: [Bitcoin-development] [BIP 15] Aliases\n \nBitcoin already has code and a protocol for transactions to IP\naddresses. Why not reuse that for dynamic address lookup? Just a few\nchanges are necessary to enable complete user at server.com handling:\n- Extend the protocol so that \"reply\" messages can be signed by a fixed\n\u00a0 public key\n- Extend \"checkorder\" messages so they can specify an account to\n\u00a0 send BTC to. Or standardize on how to put the account into the\n\u00a0 message field.\n- Enable DNS lookups for IP transactions. The DNS-only proposals could\n\u00a0 also be used here to avoid having to use the IP transaction protocol\n\u00a0 sometimes. The public key for signing \"reply\" messages can be gotten\n\u00a0 from TXT records. This will be safe with DNSSEC and Namecoin. With\n\u00a0 plain DNS Bitcoin could take a SSH-like approach and ask the user to\n\u00a0 verify the public key the first time it is used, remembering it later.\n\nDoS attacks are already handled by the IP transactions code: the same IP\naddress is always given the same bitcoin address until it pays to that\nbitcoin address.\n\n------------------------------------------------------------------------------\n10 Tips for Better Server Consolidation\nServer virtualization is being driven by many needs.\u00a0 \nBut none more important than the need to reduce IT complexity \nwhile improving strategic productivity.\u00a0 Learn More! \nhttp://www.accelacomm.com/jaw/sdnl/114/51507609/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/ea93e7ce/attachment.html>", "summary": "Bitcoin developers discuss reusing code for IP transactions to enable dynamic address lookup and mitigate security flaws, with minimal protocol extension."}, {"author": "Kyle Henderson", "date": "2011-12-16T02:37:03", "message_text_only": "This is the first proposal I've seen regarding mapping something like\nuser at host that actually makes sense to me.\n\nBitcoin itself is decentralised by design, in my opinion it seems obvious\nthat it needs to continue to maintain this feature.\n\n\nOn Fri, Dec 16, 2011 at 8:59 AM, theymos <theymos at mm.st> wrote:\n\n> Bitcoin already has code and a protocol for transactions to IP\n> addresses. Why not reuse that for dynamic address lookup? Just a few\n> changes are necessary to enable complete user at server.com handling:\n> - Extend the protocol so that \"reply\" messages can be signed by a fixed\n>  public key\n> - Extend \"checkorder\" messages so they can specify an account to\n>  send BTC to. Or standardize on how to put the account into the\n>  message field.\n> - Enable DNS lookups for IP transactions. The DNS-only proposals could\n>  also be used here to avoid having to use the IP transaction protocol\n>  sometimes. The public key for signing \"reply\" messages can be gotten\n>  from TXT records. This will be safe with DNSSEC and Namecoin. With\n>  plain DNS Bitcoin could take a SSH-like approach and ask the user to\n>  verify the public key the first time it is used, remembering it later.\n>\n> DoS attacks are already handled by the IP transactions code: the same IP\n> address is always given the same bitcoin address until it pays to that\n> bitcoin address.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/f86f05de/attachment.html>", "summary": "A proposal to enable complete user@server.com handling in Bitcoin by extending the protocol for transactions to IP addresses and enabling DNS lookups."}, {"author": "Walter Stanish", "date": "2011-12-16T04:32:17", "message_text_only": "> Bitcoin itself is decentralised by design, in my opinion it seems obvious\n> that it needs to continue to maintain this feature.\n\nWhat's the real issue?\n\n - People want to use alternate representations ('aliases') of bitcoin\naddresses, for various reasons.\n - The blockchain is the only way to create distributed consensus\nwithin the bitcoin network.\n - Very few people - even those who wish to have a permanent alias -\nwant to have it map to a permanent bitcoin address, since this\ndiscloses their financial history (eg: income for a business) to the\npublic\n - Some people want throw-away (single use) aliases, others want\npermanent ones.  This means many addresses.\n - Blockchain bloat is already acknowledged as an issue.\n - The blockchain is not really a good option.\n\nLeaving out the blockchain, there are still ways to implement aliasing.\n\nWhat is the core problem for an extra-blockchain aliasing system?\n\nAt the core is usability - people basically want aliases to make it\neasier to type in or remember addresses.  So a solution that\nsacrifices usability too far is a broken one.\n\nAnother requirement is absolute security.  A user of the aliasing\nsystem is going to trust it to translate a particular alias to a\nbitcoin address - ie: 'where my money goes with absolutely zero chance\n(by default)  of getting it back if it's sent somewhere wrong by\naccident'.  Such an accident might be mistyping an alias.  It might\nalso be a hijacking of the alias resolution system (eg: a DNS based\nsystem without DNSSEC, etc.).  As a case in point, we already see very\nwell organized attacks by domain squatters in order to steal traffic\nor effect phishing under the DNS system.\n\nSo... to help see which qualities are meaningful for such an alias\nsystem, let's look at what types of solutions to these problems exist\nwithin conventional (ie: mature) financial systems.\n\nFirst, arbitrary aliases are not in use.  This means that memory-based\nmnemonics are not subject to predictable squatting-style attacks.  For\nour purposes, this means that if you are payments at business1.com, I\ncan't go and register payments at busines1.com and take a portion of your\ninbound cash whenever a client tries to pay you and typos on the send\naddress.  Likewise, if you're 'someuser at hostedwalletservice.com' I\ncan't go and register as 'someuse at hostedwalletservice.com' and pull\nthe same heist. IIBAN is the only aliasing proposal I have seen\nmentioned within this thread that adopts this strategy, the others all\nmaintain this vulnerability through DNS. HTTP relies on DNS.\n\nSecond, checksum systems detect transposition errors. This is a very\npowerful feature, which (I can't be bothered googling for stats, but\njust think about it) cuts out the vast majority of such errors\ninstantly, at the time of input, before money changes hands or\nanything touches the financial settlement networks.  IIBAN adopts\nexactly the same mature and proven MOD97-based two digit checksum\nfeature that is used within the IBAN standard, proposed by the\nEuropean Union with the benefit of decades of banking experience in\nmany member states and now growing rapidly in use around the world.\n(For something as expensive and painful to implement as a\nnationally-mandated banking standard affecting all member banks, a\ngrowth rate of 'a few countries per year' is a pretty serious growth\ncurve!)  With checksums, it's even possible to auto-suggest\ncorrections based upon common transposition errors and help the user\nto check those parts of the alias for common errors more quickly.\n\nThird, conventional financial systems typically require recipient name\n(and sometimes address, or business tax numbers in some countries'\ndomestic schemes) as part of the transaction.  This secondary data\nfacilitates error checking since an incorrectly supplied destination\naddress can be checked against these properties.  Of course, Bitcoin\npresently has no such secondary input with which to verify the\ndestination of a transfer, and since blockchain bloat is an\nacknowledged issue and very few bitcoin users would like to see their\nnames appear against their transactions within the blockchain (visible\nto all, for eternity!) it also seems that this feature is not going to\nbe added and for good reason.  However, within an external (and not\nnecessarily bitcoin specific) higher-level 'transaction negotation'\nprotocol (alluded to in earlier posts as a logical extension of the\npre transaction alias resolution mechanism, and being a pre\ntransaction connection of some nature between a payer and payee, or\ntheir proxying/representing institution, in the case of hosted\nwallets/aliases), such external destination validation features could\nbe added. (Many types are possible... data-based as per name/address\nvalidation, cryptographic validation schemes, etc.)\n\nFinally, an increasing number of countries use an aliasing scheme\n(IBAN) that is familiar to users.  Doing so for digital currencies\nsuch as Bitcoin increases usability (by eliminating novelty, and in\nthe case of IIBAN which is not specific to any given currency, the\nneed to register, recall and manage yet another account identifier),\nwhich was one of the original goals. None of the other proposals\nmentioned have this property.\n\nI won't go in to other benefits previously mentioned of the IIBAN\nproposal, but I still cannot see any reason to either:\n - Include aliasing within bitcoind itself\n - Re-invent the wheel\n - Scare off non-technical users\n - Dodge the fact that there are unique properties of bitcoin that\nwill always remain and should perhaps simply be acknowledged and\nworked around OUTSIDE of the codebase, rather than within.\nUnix/internet philosophy is that it's usually best to keep code as\nsimple as possible, to 'do one thing' and 'do it well'. For bitcoind\n(despite sharing a codebase with the GUI), that something is achieving\na distributed internet-based financial system that is free from legacy\ncentralized currencies. It is *not* worrying about making it look\npretty or easy to use, which can be achieved by layering totally\nexternal systems through simply translating various alternate\nrepresentations ('aliases') to the well defined bitcoin addressing\nscheme.\n\nJust to avoid any notion of table-banging (Hah! A lost cause?), this\nwill be the last IIBAN-related post I will make on this thread, but\nthere will be some further announcements in the near future.\n\nKeep up the good work everyone.\n\nRegards,\nWalter Stanish\nPayward Inc.", "summary": "Bitcoin needs to maintain its decentralized feature, but people want alternate representations of bitcoin addresses. Blockchain bloat is an issue, and an extra-blockchain aliasing system must prioritize usability and absolute security. Arbitrary aliases are not in use in mature financial systems, and checksum systems detect transposition errors."}, {"author": "Matt Corallo", "date": "2011-12-16T02:48:17", "message_text_only": "On Thu, 2011-12-15 at 13:59 -0600, theymos wrote:\n> Bitcoin already has code and a protocol for transactions to IP\n> addresses. Why not reuse that for dynamic address lookup? Just a few\n> changes are necessary to enable complete user at server.com handling:\nI'm not against this, but I think its way overcomplicated when compared\nto the DNS or HTTPS methods.\n> - Extend the protocol so that \"reply\" messages can be signed by a fixed\n>   public key\n> - Extend \"checkorder\" messages so they can specify an account to\n>   send BTC to. Or standardize on how to put the account into the\n>   message field.\nOK, not too debatable, but considering how terrible bitcoind's account\nhandling is, the second might not be easy to get right...\n> - Enable DNS lookups for IP transactions. The DNS-only proposals could\n>   also be used here to avoid having to use the IP transaction protocol\n>   sometimes. The public key for signing \"reply\" messages can be gotten\n>   from TXT records. This will be safe with DNSSEC and Namecoin. With\n>   plain DNS Bitcoin could take a SSH-like approach and ask the user to\n>   verify the public key the first time it is used, remembering it later.\nThis is where I think this method becomes way overcomplicated.  Not only\ndo you have to update the IP-Transaction code, but now you have to\nimplement the full DNS System that is the other option as well.  Note\nthat to make this secure, we have to have a full DNSSEC-capable resolver\nbuilt-into bitcoind (there are libs, but it has to happen).  Yes you can\nask the user \"does this fingerprint look right to you? Y/N\" but that\nalways opens you up to a ton of users getting screwed out of coins and I\ndon't think it should be enabled, except in bitcoind, and since the main\ntarget of this whole alias system is bitcoin-qt users, well...\n\nMatt", "summary": "Proposal to use Bitcoin's existing code for transactions to IP addresses for dynamic address lookup. Suggestions include extending the protocol and enabling DNS lookups."}, {"author": "Khalahan", "date": "2011-12-16T17:23:36", "message_text_only": "Namecoin is a peer-to-peer generic name/value datastore system.\nDon't forget it's not limited to .bit usage ! So, directly mapping\nthings to .bit url would not be the optimal way of using namecoin.\n\nNamecoin is *specificaly designed to map things to names* in a fully\ndecentralized way. So, it's the perfect starting point to map names to\nother things (a public bitcoin address, an url, etc)\nYou won't have all the advantages of namecoin when using other systems\nlike DNS and HTTP(S) as the first entry point.\n\nWhat is namecoin ?\n\n* proven technology :\n- do not mix the namecoin technology and the dot-bit namespace with .bit\ndomains (dot-bit domains needs dot-bit compatible dns servers or proxies\n+ namecoin and have a small visibility due to the nature of\ntop-to-bottom domain name system controlled by ICANN, namecoin needs\nonly namecoin to store data !)\n- as proven and secure as bitcoin\n- merged mining provides a secure network\n\n* decentralized :\n- a lot of nodes, and you can have your own node\n- everybody can register his own name, by itself with the namecoin\nsoftware (bitcoin could even allow registration directly from it,\neasily) or by using a name provider\n- everybody can become a name provider (register for your friends and\nresell names).\n\n* no single point of failure :\n- DNS and HTTPS have several limitations (Man in the Middle attacks, no\nreliable authority of certifications, domain seizure, ...)\n\n* designed for that :\n- namecoin uses a system of namespaces to separate each usages :\nhttp://dot-bit.org/Main_Page#Namespaces.\nFor example, the \"personal namespace\" draft\n(http://dot-bit.org/Personal_Namespace) could be extended to support\nmapping to a bitcoin address, or a dedicated namespace can be used if\nprefered (the \"bitcoin/\" or \"alias/\" or \"map/\" prefixes for example).\n\n* easily connectable to bitcoin\n- they both use RPC and json to exchange informations, so connecting one\nto the other is really easy\n- bitcoin could even allow registration of names by sending an RPC\nrequest to namecoin\n\n* extensible and not limited :\n- you are not forced to store a bitcoin address directly in namecoin,\nyou can also store an url or a domain name\n- allows additional security : add a certificate fingerprint combined\nwith an https url (so, using DNS or HTTP(S) is not a major problem\nanymore if the first point of entry is really secure and configurable\n[and you use and self-signed certificate])\n- really easy to update\n- simple for simple cases\n- possibility to use a nick, an email address or a domain as name\n- other methods to get bitcoins addresses can be added later, protocol\nis extensible\n\n\nExamples of possible registered names in namecoin with the \"personal\nnamespace\" (with the \"p/\" prefix) :\n\n* An individual person with well known public addresses :\n\"p/*khal*\":\n{\n    \"email\": \"khal at dot-bit.org\",\n    \"bitcoin\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    \"namecoin\": \"N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9\"\n}\n\n* Another individual person with well known public addresses :\n\"p/*khal at dot-bit.org*\":\n{\n    \"bitcoin\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    \"namecoin\": \"N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9\"\n}\n\n* A merchant accepting payments in bitcoin, namecoin, paypal or\nothercoin (to show you how the whole namespace could be used) :\n\"p/*mymerchant.com*\":\n{\n    \"bitcoin\": {\n        \"url\": \"https://payto.mymerchant.com/bitcoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\"\n        \"cert\": \"https://payto.mymerchant.com/certificate.pem\",\n    },\n    \"namecoin\": {\n        \"url\": \"https://payto.mymerchant.com/namecoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\"\n    },\n    \"paypal\": \"xxxxxx at yyyyyyyyy.zzz\",\n    \"othercoin\": \"oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\n\n* A merchant with a public address, an url to generate custom addresses\nand a domain name (not sure if this case is really usefull, maybe as\nfallback)\n\"p/*mymerchant2*\":\n{\n    \"bitcoin\": {\n        \"url\": \"https://payto.mymerchant.com/bitcoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\",\n        \"dns\": \"_bitcoin.payto.mymerchant.com\",\n        \"address\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    }\n}\n\n\n* How to use it in bitcoin ?\n\nSeveral possibilities of address syntax :\n- khal, khal at dot-bit.org, mymerchant.com, mymerchant2 : no syntax limit\n- mymerchant2 at bitcoin : will conflict with names already containing a @\n- mymerchant2 at namecoin : same\n- namecoin:mymerchant2 : strange syntax, confusing with the \"uri scheme\"\n- namecoin://mymerchant2 : same\n- other ?\n\n\nHere is how things would be processed when people put an address to pay\nto in the bitcoin client :\n\n* address : khal\n-> RPC to namecoin for \"p/khal\"\n-> json processing for \"p/khal->bitcoin\"\n-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\n\n* address : khal at dot-bit.org\n-> RPC to namecoin for \"p/khal at dot-bit.org\"\n-> json processing for \"p/khal at dot-bit.org->bitcoin\"\n-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\n\n* address : mymerchant.com\n-> RPC to namecoin for \"p/mymerchant.com\"\n-> json processing for \"p/mymerchant.com->bitcoin\"\n-> json processing for \"p/mymerchant.com->bitcoin->url\" and\n\"p/mymerchant.com->bitcoin->fpr\"\n-> https request to \"https://payto.mymerchant.com/bitcoin/\"\n-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n* address : mymerchant2\n-> RPC to namecoin for \"p/mymerchant2\"\n-> json processing for \"p/mymerchant2->bitcoin\"\n-> json processing for \"p/mymerchant2->bitcoin->url\" and\n\"p/mymerchant2->bitcoin->fpr\"\n-> https request to \"https://payto.mymerchant.com/bitcoin/\"\n-> result : error (website unavailable, page not found, timeout, etc)\n-> json processing for \"p/mymerchant2->bitcoin->dns\"\n-> dns request for \"_bitcoin.payto.mymerchant.com\"\n-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n\nLe 15/12/2011 20:59, theymos a \u00e9crit :\n> Bitcoin already has code and a protocol for transactions to IP\n> addresses. Why not reuse that for dynamic address lookup? Just a few\n> changes are necessary to enable complete user at server.com handling:\n> - Extend the protocol so that \"reply\" messages can be signed by a fixed\n>   public key\n> - Extend \"checkorder\" messages so they can specify an account to\n>   send BTC to. Or standardize on how to put the account into the\n>   message field.\n> - Enable DNS lookups for IP transactions. The DNS-only proposals could\n>   also be used here to avoid having to use the IP transaction protocol\n>   sometimes. The public key for signing \"reply\" messages can be gotten\n>   from TXT records. This will be safe with DNSSEC and Namecoin. With\n>   plain DNS Bitcoin could take a SSH-like approach and ask the user to\n>   verify the public key the first time it is used, remembering it later.\n>\n> DoS attacks are already handled by the IP transactions code: the same IP\n> address is always given the same bitcoin address until it pays to that\n> bitcoin address.\n>\n> ------------------------------------------------------------------------------\n> 10 Tips for Better Server Consolidation\n> Server virtualization is being driven by many needs.  \n> But none more important than the need to reduce IT complexity \n> while improving strategic productivity.  Learn More! \n> http://www.accelacomm.com/jaw/sdnl/114/51507609/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nBest Regards,\nKhalahan\nhttp://dot-bit.org/\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/e4feca94/attachment.html>", "summary": "Namecoin is a decentralized system designed to map names to other things, such as public bitcoin addresses or URLs, and is not limited to .bit usage. It is proven technology, has no single point of failure, and is easily connectable to bitcoin."}, {"author": "slush", "date": "2011-12-16T19:54:35", "message_text_only": "Khalahan, honestly, using namecoin for aliases is (for me) clean example of\nover-engineering. I mean - it will definitely work if implemented properly.\nI played with a namecoin a bit (as my pool was the first 'big' pool\nsupporting merged mining), but I think there's really long way to provide\nsuch alias system in namecoin and *cleanly integrate it with bitcoin*.\nDon't forget that people who want to do lookup need to maintain also\nnamecoin blockchain with their bitcoin client. It goes against my instinct\nof keeping stuff easy.\n\nFor example, yesterday I implemented HTTPS lookup for addresses into my\nfork of Electrum client. I did it in 15 minutes, it works as expected, it\ndoes the job and the implementation is really transparent, becuase\nimplementation is 20 lines of code. There's no magic transformation, no\nforced \"?handle=\" parameters or whatever. And I don't care if somebody\nprovide URL\nhttps://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True\n\nAnd everybody can do the same in their clients, in their merchant\nsolutions, websites or whatever. Everybody can do HTTPS lookup. But try to\nexplain DNS, Namecoin, IIBAN, email aliases to other programmers...\n\nThose IIBAN - well, why not. At least I see the potential in PR. So far I\nunderstand it as some teoretic concept which is not supported by anything\nelse right now. Give it few years until it matures and then add IIBAN alias\nto Bitcoin client too.\n\nMaybe I'm repeating myself already, but the way to go is to make aliases as\neasy as possible, so everybody can implement it in their own solution and\nthus practially remove the need of using standard bitcoin addresses for\nnormal users. Using some superior technology, which is hard to implement or\neven understand won't solve the situation, because it will ends up with\nsome reference implementation in standard client only and nobody else will\nuse it.\n\nslush\n\nOn Fri, Dec 16, 2011 at 6:23 PM, Khalahan <khal at dot-bit.org> wrote:\n\n> **\n> Namecoin is a peer-to-peer generic name/value datastore system.\n> Don't forget it's not limited to .bit usage ! So, directly mapping things\n> to .bit url would not be the optimal way of using namecoin.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/d08d98b2/attachment.html>", "summary": "Slush believes using Namecoin for aliases is over-engineering and prefers a simpler solution like HTTPS lookup for addresses."}, {"author": "Amir Taaki", "date": "2011-12-16T20:10:30", "message_text_only": "I think IBANs are not such a good idea. Note that as someone who has spent the last year of my life dealing with hundreds of bank transactions a day and interacting with the banking system (both on a technical, systematic and personnel level), the entire system is a gigantic mess.\n\nThe banks are in fact looking to us for answers. That's why we (Bitcoin Consultancy) were invited to the SWIFT conference to join their panel on bank 2.0.\n\nI don't even mind the maxim \"take everything the banks have done and do the complete opposite\" :)\n\nI invite anyone who is skeptical to read the ECB's specification on SEPA payments. It really is an example of a system made to work alongside legacy systems that rely on inefficient people. The interchange fees are dependent on a totally arbitrary test of merchant indifference and various antitrust regulations.\n\nThese systems are usually built not by engineers or hackers, but by finance people. IBAN has no place in bitcoin IMO.\n\nI don't mean to sound too critical, but I'm skeptical of its usefulness. Especially when we already have bitcoin addresses with their own checksums- what value do IBANs add? Nothing except negatives.\n\n\n\n________________________________\n From: slush <slush at centrum.cz>\nTo: Khalahan <khal at dot-bit.org> \nCc: bitcoin-development at lists.sourceforge.net \nSent: Friday, December 16, 2011 7:54 PM\nSubject: Re: [Bitcoin-development] [BIP 15] Aliases\n \n\nKhalahan, honestly, using namecoin for aliases is (for me) clean example of over-engineering. I mean - it will definitely work if implemented properly. I played with a namecoin a bit (as my pool was the first 'big' pool supporting merged mining), but I think there's really long way to provide such alias system in namecoin and *cleanly integrate it with bitcoin*. Don't forget that people who want to do lookup need to maintain also namecoin blockchain with their bitcoin client. It goes against my instinct of keeping stuff easy.\n\nFor example, yesterday I implemented HTTPS lookup for addresses into my fork of Electrum client. I did it in 15 minutes, it works as expected, it does the job and the implementation is really transparent, becuase implementation is 20 lines of code. There's no magic transformation, no forced \"?handle=\" parameters or whatever. And I don't care if somebody provide URL https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True\n\nAnd everybody can do the same in their clients, in their merchant solutions, websites or whatever. Everybody can do HTTPS lookup. But try to explain DNS, Namecoin, IIBAN, email aliases to other programmers...\n\n\nThose IIBAN - well, why not. At least I see the potential in PR. So far I understand it as some teoretic concept which is not supported by anything else right now. Give it few years until it matures and then add IIBAN alias to Bitcoin client too.\n\nMaybe I'm repeating myself already, but the way to go is to make aliases as easy as possible, so everybody can implement it in their own solution and thus practially remove the need of using standard bitcoin addresses for normal users. Using some superior technology, which is hard to implement or even understand won't solve the situation, because it will ends up with some reference implementation in standard client only and nobody else will use it.\n\nslush\n\n\nOn Fri, Dec 16, 2011 at 6:23 PM, Khalahan <khal at dot-bit.org> wrote:\n\n \n>Namecoin is a peer-to-peer generic name/value datastore system.\n>Don't forget it's not limited to .bit usage ! So, directly mapping\n    things to .bit url would not be the optimal way of using namecoin.\n>\n>\n------------------------------------------------------------------------------\nLearn Windows Azure Live!\u00a0 Tuesday, Dec 13, 2011\nMicrosoft is holding a special Learn Windows Azure training event for \ndevelopers. It will provide a great way to learn Windows Azure and what it \nprovides. You can attend the event by watching it streamed LIVE online.\u00a0 \nLearn more at http://p.sf.net/sfu/ms-windowsazure\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/6566d3c1/attachment.html>", "summary": "Professional summarizer skeptical of IBAN's usefulness in Bitcoin. Believes legacy banking systems are inefficient and built by finance people, not engineers. Supports easy-to-implement aliases."}, {"author": "Harald Schilly", "date": "2011-12-16T20:14:53", "message_text_only": "On Fri, Dec 16, 2011 at 21:10, Amir Taaki <zgenjix at yahoo.com> wrote:\n> Especially when we already have bitcoin addresses with their own checksums-\n> what value do IBANs add?\n\nWell, I'm not an expert like you, but one benefit would be to be\ncompatible with existing software solutions that are based on using\nIBANs.\n\nH", "summary": "Taaki questions the value of IBANs when Bitcoin addresses already have their own checksums, while the other person argues for compatibility with existing software solutions."}, {"author": "Khalahan", "date": "2011-12-16T21:52:04", "message_text_only": "The number of proposals <https://en.bitcoin.it/wiki/BIP_0015> is not\ninfinite, here are their problems :\n\n- FirstBits : centralized\n- DNS TXT Records : DNSSEC is required to have a minimum of security,\nlimits usage to engineers, limits usage to some domain names (i won't be\nable to use a gmail address for example, because i don't control the\ngmail.com domain)\n- Server Service (DNS + a daemon) : Same as DNS TXT records\n- HTTPS Web service : relies on HTTPS and CA, bitcoin needs to be able\nto check the full certificate chain and access a list of up-to-date\ncertificate authorities (installed on the OS or provided with bitcoin).\nAnd don't forget the CA model is not 100% reliable (several CA hacked\nthis year + possible government control...).\n- IP Transactions : /This proposal seeks to enable DNS lookups for IP\ntransactions/ => same as above\n\nI know that providing a namecoin daemon with bitcoin is not the lighter\nsolution, but, if a better one existed i guess it would have already\nbeen integrated into bitcoin... (see in what state is my first attempt\nwith the HTTPS proposal : Send payments to emails, urls and domains in\nGUI <https://github.com/bitcoin/bitcoin/pull/174> - /khalahan opened\nthis pull request April 20, 2011/)\n\nSo, what's next ?\n\nLe 16/12/2011 20:54, slush a \u00e9crit :\n> Khalahan, honestly, using namecoin for aliases is (for me) clean\n> example of over-engineering. I mean - it will definitely work if\n> implemented properly. I played with a namecoin a bit (as my pool was\n> the first 'big' pool supporting merged mining), but I think there's\n> really long way to provide such alias system in namecoin and *cleanly\n> integrate it with bitcoin*. Don't forget that people who want to do\n> lookup need to maintain also namecoin blockchain with their bitcoin\n> client. It goes against my instinct of keeping stuff easy.\n>\n> For example, yesterday I implemented HTTPS lookup for addresses into\n> my fork of Electrum client. I did it in 15 minutes, it works as\n> expected, it does the job and the implementation is really\n> transparent, becuase implementation is 20 lines of code. There's no\n> magic transformation, no forced \"?handle=\" parameters or whatever. And\n> I don't care if somebody provide URL\n> https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True\n> <https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True>\n>\n> And everybody can do the same in their clients, in their merchant\n> solutions, websites or whatever. Everybody can do HTTPS lookup. But\n> try to explain DNS, Namecoin, IIBAN, email aliases to other programmers...\n>\n> Those IIBAN - well, why not. At least I see the potential in PR. So\n> far I understand it as some teoretic concept which is not supported by\n> anything else right now. Give it few years until it matures and then\n> add IIBAN alias to Bitcoin client too.\n>\n> Maybe I'm repeating myself already, but the way to go is to make\n> aliases as easy as possible, so everybody can implement it in their\n> own solution and thus practially remove the need of using standard\n> bitcoin addresses for normal users. Using some superior technology,\n> which is hard to implement or even understand won't solve the\n> situation, because it will ends up with some reference implementation\n> in standard client only and nobody else will use it.\n>\n> slush\n\n-- \nBest Regards,\nKhalahan\nhttp://dot-bit.org/\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/cb3fc4b4/attachment.html>", "summary": "Bitcoin proposals for aliases have limitations, including centralization, reliance on HTTPS and CA, and limited domain name usage. Namecoin integration is complex but effective."}, {"author": "Rick Wesson", "date": "2011-12-16T22:05:41", "message_text_only": "On Fri, Dec 16, 2011 at 1:52 PM, Khalahan <khal at dot-bit.org> wrote:\n> The number of proposals is not infinite, here are their problems :\n>\n> - FirstBits : centralized\n> - DNS TXT Records : DNSSEC is required to have a minimum of security, limits\n> usage to engineers, limits usage to some domain names (i won't be able to\n> use a gmail address for example, because i don't control the gmail.com\n> domain)\n\nThe same goes for http(s) one would not be able to use\nhttp://google.com/user unless google offers the services.\n\nALSO look at DANE for getting around the certificate requirement for https\n\n> - Server Service (DNS + a daemon) : Same as DNS TXT records\n\nDNS TXT are not the only way forward, also registry/registrars can facilitate.\n\n> - HTTPS Web service : relies on HTTPS and CA, bitcoin needs to be able to\n> check the full certificate chain and access a list of up-to-date certificate\n> authorities (installed on the OS or provided with bitcoin). And don't forget\n> the CA model is not 100% reliable (several CA hacked this year + possible\n> government control...).\n\nThis most likely relies on a paid, valid certificate (that expires),\nno self signed certs. I admit that running a secured https server with\na valid CA signed  cet is as simple/hard as running a DNSSEC authority\nzone.\n\nusing a x.509 certificate to secure a bitcoin transaction removes some\nof the anonymity of the transaction by allowing the lookup to identify\nthe certification, ca, crl etc thus connecting a transaction/bitcoin\naddress to the cert and to its issuing authority. No matter the\nfrequency of the destination bitcoin address changing.\n\nIMNSHO, leveraging CAs to secure http to provide a lookup translation\nto a bitcoin address will only erode anonymity. While DNS is connected\nto whois there are provision for hiding behind a proxy where to the\nbest of my knowledge there are no such provisions offered by CA's\nissuing x.509 certificates.\n\nShould self signed cers be \"allowed\" or encouraged only decreases\nsecurity. Clearly DANE would be the only way to mitigate this\nsituation but then you are back to relying on DNSSEC to bind the x.509\ncert.\n\nwash, rinse,  ...\n\n-rick\n\n> - IP Transactions : This proposal seeks to enable DNS lookups for IP\n> transactions => same as above\n>\n> I know that providing a namecoin daemon with bitcoin is not the lighter\n> solution, but, if a better one existed i guess it would have already been\n> integrated into bitcoin... (see in what state is my first attempt with the\n> HTTPS proposal : Send payments to emails, urls and domains in GUI - khalahan\n> opened this pull request April 20, 2011)\n>\n> So, what's next ?\n>\n> Le 16/12/2011 20:54, slush a \u00e9crit\u00a0:\n>\n> Khalahan, honestly, using namecoin for aliases is (for me) clean example of\n> over-engineering. I mean - it will definitely work if implemented properly.\n> I played with a namecoin a bit (as my pool was the first 'big' pool\n> supporting merged mining), but I think there's really long way to provide\n> such alias system in namecoin and *cleanly integrate it with bitcoin*. Don't\n> forget that people who want to do lookup need to maintain also namecoin\n> blockchain with their bitcoin client. It goes against my instinct of keeping\n> stuff easy.\n>\n> For example, yesterday I implemented HTTPS lookup for addresses into my fork\n> of Electrum client. I did it in 15 minutes, it works as expected, it does\n> the job and the implementation is really transparent, becuase implementation\n> is 20 lines of code. There's no magic transformation, no forced \"?handle=\"\n> parameters or whatever. And I don't care if somebody provide URL\n> https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True\n>\n> And everybody can do the same in their clients, in their merchant solutions,\n> websites or whatever. Everybody can do HTTPS lookup. But try to explain DNS,\n> Namecoin, IIBAN, email aliases to other programmers...\n>\n> Those IIBAN - well, why not. At least I see the potential in PR. So far I\n> understand it as some teoretic concept which is not supported by anything\n> else right now. Give it few years until it matures and then add IIBAN alias\n> to Bitcoin client too.\n>\n> Maybe I'm repeating myself already, but the way to go is to make aliases as\n> easy as possible, so everybody can implement it in their own solution and\n> thus practially remove the need of using standard bitcoin addresses for\n> normal users. Using some superior technology, which is hard to implement or\n> even understand won't solve the situation, because it will ends up with some\n> reference implementation in standard client only and nobody else will use\n> it.\n>\n> slush\n>\n>\n> --\n> Best Regards,\n> Khalahan\n> http://dot-bit.org/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live! \u00a0Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Various proposals for linking Bitcoin addresses to domain names or aliases have limitations, including centralization, reliance on HTTPS and CA, and DNSSEC requirements. Namecoin is a potential solution."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-18T21:05:11", "message_text_only": "If we chose the simple URI proposal namecoin can still be integrated\nto map the IP of the server by those who want to.\nDoes it removes the necessity of the certificates?\nIf so, we should let people decide between HTTP, HTTPS, namecoin or\nwhatever they trust.\n\nShouldn't we be also discussing the valid format of the answered\nmessage? I mean fields like \"amount\", \"concept\" and such.", "summary": "Simple URI proposal allows integration of Namecoin to map server IP without certificates. Users can choose between HTTP, HTTPS, Namecoin or other trusted options. Valid format of response message should be discussed."}, {"author": "Jordan Mack", "date": "2011-12-18T21:18:58", "message_text_only": "I can't speak for Namecoin. As for the HTTPS requirement, I'm on the \nfence. Without it, the resolution is open to a man in the middle attack. \nPerhaps HTTPS should be required, and if HTTP is used, a large warning \nmessage is displayed.\n\nAs for the answered message format, is JSON the assumed structure that \nwould be used?\n\n\nOn 12/18/2011 1:05 PM, Jorge Tim\u00f3n wrote:\n> If we chose the simple URI proposal namecoin can still be integrated\n> to map the IP of the server by those who want to.\n> Does it removes the necessity of the certificates?\n> If so, we should let people decide between HTTP, HTTPS, namecoin or\n> whatever they trust.\n>\n> Shouldn't we be also discussing the valid format of the answered\n> message? I mean fields like \"amount\", \"concept\" and such.\n>", "summary": "HTTPS requirement is debatable, but a warning message should be displayed if HTTP is used. JSON is the assumed structure for the answered message format."}, {"author": "Luke-Jr", "date": "2011-12-18T21:44:43", "message_text_only": "On Sunday, December 18, 2011 4:05:11 PM Jorge Tim\u00f3n wrote:\n> If we chose the simple URI proposal namecoin can still be integrated\n> to map the IP of the server by those who want to.\n> Does it removes the necessity of the certificates?\n> If so, we should let people decide between HTTP, HTTPS, namecoin or\n> whatever they trust.\n\nHow are you going to authenticate the host? Certificates from CAs are how \nHTTPS does it. HTTP is vulnerable. If the URI contains an address (eg, \nbitcoin://remotehost/base58key), the remote host could sign its (self-signed) \nSSL key with the ECDSA key to prove authenticity. DNSSEC/namecoin presumably \nhas some way to do this as well.\n\n> Shouldn't we be also discussing the valid format of the answered\n> message? I mean fields like \"amount\", \"concept\" and such.\n\nAt some point, a proper protocol to negotiate payment is needed for anything \nlike this.", "summary": "Discussion on integrating Namecoin to map server IPs using simple URI proposal. Authentication of host and negotiation of payment protocol also discussed."}, {"author": "slush", "date": "2011-12-18T23:58:37", "message_text_only": "Maybe I'm retarded, but where's the point in providing alliases containing\nyet another hash in URL?\n\nslush\n\nOn Sun, Dec 18, 2011 at 10:44 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, December 18, 2011 4:05:11 PM Jorge Tim\u00f3n wrote:\n> > If we chose the simple URI proposal namecoin can still be integrated\n> > to map the IP of the server by those who want to.\n> > Does it removes the necessity of the certificates?\n> > If so, we should let people decide between HTTP, HTTPS, namecoin or\n> > whatever they trust.\n>\n> How are you going to authenticate the host? Certificates from CAs are how\n> HTTPS does it. HTTP is vulnerable. If the URI contains an address (eg,\n> bitcoin://remotehost/base58key), the remote host could sign its\n> (self-signed)\n> SSL key with the ECDSA key to prove authenticity. DNSSEC/namecoin\n> presumably\n> has some way to do this as well.\n>\n> > Shouldn't we be also discussing the valid format of the answered\n> > message? I mean fields like \"amount\", \"concept\" and such.\n>\n> At some point, a proper protocol to negotiate payment is needed for\n> anything\n> like this.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/b86751c7/attachment.html>", "summary": "A discussion on the authentication of hosts and the need for a proper protocol to negotiate payment in Bitcoin development."}, {"author": "Luke-Jr", "date": "2011-12-19T01:13:57", "message_text_only": "On Sunday, December 18, 2011 6:58:37 PM slush wrote:\n> Maybe I'm retarded, but where's the point in providing alliases containing\n> yet another hash in URL?\n\nThe point of the extended URI is to allow the server to negotiate payment \ndetails (payment/order information, fees, new privacy address, etc) rather \nthan merely sending a simple payment to a single fixed address.\n\nI am not convinced *aliases* are practical, without CA trust. An organization \nthat wants to trust a CA with all their funds can leave off the address \nportion, to provide more human-friendly URIs.", "summary": "Extended URIs allow servers to negotiate payment details, making aliases practical for organizations that trust a CA with their funds."}, {"author": "Pieter Wuille", "date": "2011-12-19T01:14:20", "message_text_only": "On Mon, Dec 19, 2011 at 12:58:37AM +0100, slush wrote:\n> Maybe I'm retarded, but where's the point in providing alliases containing\n> yet another hash in URL?\n\nAny DNS-based alias system is vulnerable to spoofing. If I can make people's\nDNS server believe that mining.cz points to my IP, I'll receive payments to\nyou...\n\nIf no trusted CA is used to authenticate the communication, there is no way\nto be sure the one you are asking how to pay, is the person you want to pay.\nTherefore, one solution is to put a bitcoin address in the identification\nstring itself, and requiring SSL communication authenticated using the\nrespective key.\n\nThis makes the identification strings obviously less useful as aliases,\nbut pure aliases in the sense of human-typable strings have imho\nlimited usefulness anyway - in most cases these identification strings\nwill be communicated through other electronic means anyway.\n\nFurthermore, the embedded bitcoin address could be hidden from the user:\nretrieved when first connecting, and stored together with the URI in\nan address book. Like ssh, it could warn the user if the key changes\n(which wil be ignored by most users anyway, but what do you do about\nthat?)\n\n-- \nPieter", "summary": "Using DNS-based alias systems for Bitcoin payments is vulnerable to spoofing. One solution is to embed a Bitcoin address in the identification string itself."}, {"author": "Luke-Jr", "date": "2011-12-19T01:43:47", "message_text_only": "On Sunday, December 18, 2011 8:14:20 PM Pieter Wuille wrote:\n> Furthermore, the embedded bitcoin address could be hidden from the user:\n> retrieved when first connecting, and stored together with the URI in\n> an address book. Like ssh, it could warn the user if the key changes\n> (which wil be ignored by most users anyway, but what do you do about\n> that?)\n\nLike SSH, don't make it easy to ignore.\neg, to ignore it, you need to manually go in and remove it from the URI.", "summary": "A proposal suggests hiding the bitcoin address from users and storing it with the URI in an address book, similar to SSH key warnings."}, {"author": "slush", "date": "2011-12-19T01:44:42", "message_text_only": "Pieter, it was more rhetorical question than asking for explanation, but\nthanks anyway. As an Internet application developer, I of course understand\nsecurity issues while using HTTPS and CA.\n\nI have a gut feeling that there simply does not exist any single solution\nwhich is both easy to use and secure enough. At least nobody mentioned it\nyet. And if I need to choose between easy solution or secure solution for\naliases, I'll pick that easy one. I mean - we need some solution which will\nbe easy enough for daily use; it is something what we currently don't have.\nBut if I want to be really really sure I'm using correct destination for\npaying $1mil for a house, I can every time ask for real bitcoin addresses,\nthis is that secure way which we currently have.\n\nslush\n\nOn Mon, Dec 19, 2011 at 2:14 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Mon, Dec 19, 2011 at 12:58:37AM +0100, slush wrote:\n> > Maybe I'm retarded, but where's the point in providing alliases\n> containing\n> > yet another hash in URL?\n>\n> Any DNS-based alias system is vulnerable to spoofing. If I can make\n> people's\n> DNS server believe that mining.cz points to my IP, I'll receive payments\n> to\n> you...\n>\n> If no trusted CA is used to authenticate the communication, there is no way\n> to be sure the one you are asking how to pay, is the person you want to\n> pay.\n> Therefore, one solution is to put a bitcoin address in the identification\n> string itself, and requiring SSL communication authenticated using the\n> respective key.\n>\n> This makes the identification strings obviously less useful as aliases,\n> but pure aliases in the sense of human-typable strings have imho\n> limited usefulness anyway - in most cases these identification strings\n> will be communicated through other electronic means anyway.\n>\n> Furthermore, the embedded bitcoin address could be hidden from the user:\n> retrieved when first connecting, and stored together with the URI in\n> an address book. Like ssh, it could warn the user if the key changes\n> (which wil be ignored by most users anyway, but what do you do about\n> that?)\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/d492945b/attachment.html>", "summary": "The author expresses concern about the lack of an easy and secure solution for using aliases in Bitcoin transactions, and suggests using SSL communication authenticated with a bitcoin address as a potential solution."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-19T07:56:09", "message_text_only": "Ok, so HTTP is not an option unless it shows a huge warning. I don't\nknow the HTTPS possible attack, but maybe it needs a warning message\ntoo, from what you people are saying. Although using namecoin to\nidentify hosts may be the more secure option, it's integration with\nthe client seems more difficult and probably most clients won't\nsupport it. Using namecoin to directly specify the payment address\nseems a bad idea for most cases for the reasons that have been said.\n\nFor the \"answer format\" JSON seems ok, but I mean a \"negotiating\nprotocol\" like luke-jr says. I'd even include green addresses there\nbut probably many of you don't like the idea.\n\n2011/12/19, slush <slush at centrum.cz>:\n> And if I need to choose between easy solution or secure solution for\n> aliases, I'll pick that easy one. I mean - we need some solution which will\n> be easy enough for daily use; it is something what we currently don't have.\n> But if I want to be really really sure I'm using correct destination for\n> paying $1mil for a house, I can every time ask for real bitcoin addresses,\n> this is that secure way which we currently have.\n\nI agree.", "summary": "HTTP is not secure, HTTPS may need a warning, Namecoin is secure but difficult to integrate, and using it to specify payment address is not ideal. A negotiating protocol like JSON is suggested."}, {"author": "Andy Parkins", "date": "2011-12-19T11:44:59", "message_text_only": "On 2011 December 19 Monday, Jorge Tim\u00f3n wrote:\n> Ok, so HTTP is not an option unless it shows a huge warning. I don't\n> know the HTTPS possible attack, but maybe it needs a warning message\n> too, from what you people are saying. Although using namecoin to\n\nThe problems with HTTPS have been social rather than technical.  Multiple CAs \nhave been strong-armed by governments or tricked into issuing fake \ncertificates by scammers.  There is no technical measure around that.  By \nusing the CA certificate we are saying to the system \"here is someone I trust \nto issue a certificate\".  So far, with a large number of CAs, that trust is \nmisplaced.\n\nI'm of the opinion though that this problem is outside the remit of bitcoin to \nsolve.\n\nPerhaps we should be more strict about which CA certificates are trusted by \nthe bitcoin client: say restrict it to those who have demonstrably good \npractices for verifying identity; rather than the ridiculous amount of trust \nthat comes pre-installed for me in my browser.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/b557a325/attachment.sig>", "summary": "HTTPS issues are social, not technical, with multiple CAs being tricked or strong-armed into issuing fake certificates. Bitcoin cannot solve this problem."}, {"author": "solar", "date": "2011-12-19T14:46:12", "message_text_only": "I think HTTPS, and more specifically x.509 PKI certs and CAs are generally a good idea and (historical implementation bugs aside) the concept is technically sound and secure.  What is a bad idea (in my opinion) is to trust a software vendor to decide who you should trust.. thus it is a bad idea for bitcoin software to promise any trust.\n\nThe part where the concept becomes flawed is trusting 3rd parties who have no relationship with you, to serve your interests.  Now I'm just generalizing here and this is not universally true.. but internet CAs just want to sell certificates - they generally don't care beyond that, and they abuse the certificate validity dates to charge more money.  All this is done under the guise of wanting to provide a secure experience to users without a prior relationship to the entity being identified.  I propose that trying to follow this paradigm in bitcoin alias resolution is a bad idea because it tries to solve 2 problems at once, one of which does not have any 'good' solution, and forces a specific policy.\n\nFirst, we need to resolve an alias to a bitcoin address somehow.. but secondly we need to establish trust with the entity doing the alias resolution - to make sure that we can trust the response.\n\nWhen resolving an alias you will have to query an untrusted server, possibly being proxied by an 'attacker'.  Presumably, an x.509 certificate will be presented, possibly self signed or chained off a self generated CA or whatever else.. but if it's your first contact then there is no possible way to know if it's correct or not.  You would have to retrieve the correct public key of the CA to compare to first, possibly out of band.  Get it from my website, compare it to my business card, send me an email and I'll send it to you, or get it from some other source using some other pre existing trust (a centralized and possibly private directory perhaps).  The point is, the reason there is so much disagreement is because there is no good way to trust the resolver if you don't create that trust relationship prior to resolving an alias from it.\n\nI think that having to pre-trust the resolver would be an acceptable solution to all.. Those whose policy requires a simpler process can get a 3rd party CA list, much like the ones provided with web browsers and operating systems.  Those with strict verification policies can choose to pre verify every public key.. and these processes are familiar to many organizations using PKI for other things already.  In a client, presenting the usual certificate detail dialog, showing the public key, subject, issuer, and thumbprint would be sufficient to allow users to implement their own policies without forcing it one way or another.\n\nPlease consider that while some organizations or users might require strong anonymity and pre existing trust, there are others who may want to do the opposite and that is just as valid, even if you or 'everyone else' disagrees with that.  In the case of bitcoin, it will be used as part of a larger system, and whatever concerns are created by 'insecure' alias resolution may well be addressed in another part of the system.  The most successful standards and implementations are the ones which provide the most flexibility - primarily because that allows users to extend them in ways the original designers didn't necessarily plan for.\n\nThanks,\nLaszlo\n\n\n\nOn Dec 19, 2011, at 11:44 AM, Andy Parkins wrote:\n\n> On 2011 December 19 Monday, Jorge Tim\u00f3n wrote:\n>> Ok, so HTTP is not an option unless it shows a huge warning. I don't\n>> know the HTTPS possible attack, but maybe it needs a warning message\n>> too, from what you people are saying. Although using namecoin to\n> \n> The problems with HTTPS have been social rather than technical.  Multiple CAs \n> have been strong-armed by governments or tricked into issuing fake \n> certificates by scammers.  There is no technical measure around that.  By \n> using the CA certificate we are saying to the system \"here is someone I trust \n> to issue a certificate\".  So far, with a large number of CAs, that trust is \n> misplaced.\n> \n> I'm of the opinion though that this problem is outside the remit of bitcoin to \n> solve.\n> \n> Perhaps we should be more strict about which CA certificates are trusted by \n> the bitcoin client: say restrict it to those who have demonstrably good \n> practices for verifying identity; rather than the ridiculous amount of trust \n> that comes pre-installed for me in my browser.\n> \n> \n> \n> Andy\n> \n> -- \n> Dr Andy Parkins\n> andyparkins at gmail.com\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for \n> developers. It will provide a great way to learn Windows Azure and what it \n> provides. You can attend the event by watching it streamed LIVE online.  \n> Learn more at http://p.sf.net/sfu/ms-windowsazure_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Trusting third-party entities for alias resolution in Bitcoin is a flawed concept, and pre-trusting the resolver may be an acceptable solution for different policies."}, {"author": "Rick Wesson", "date": "2011-12-19T15:35:51", "message_text_only": "You are describing the problem DANE addresses, see\nhttp://tools.ietf.org/html/draft-ietf-dane-protocol-12\n\n\nUsing Secure DNS to Associate Certificates with Domain Names For TLS\n\nAbstract\n\n   TLS and DTLS use PKIX certificates for authenticating the server.\n   Users want their applications to verify that the certificate provided\n   by the TLS server is in fact associated with the domain name they\n   expect.  TLSA provides bindings of keys to domains that are asserted\n   not by external entities, but by the entities that operate the DNS.\n   This document describes how to use secure DNS to associate the TLS\n   server's certificate with the intended domain name.\n\n\nFor those of you against DNSSEC, DANE leverages it significantly.\n\nThe point I have been attempting to make is if one to rely on HTTPS,\nleveraging DANE will allow you to mitigate CAs and use self signed\ncers but you will need to leverage DNSSEC to bind the self signed cert\nusing DANE and if you are going to rely on DNSSEC for DANE to support\nHTTPS, why not short-circut this madness and just publish your\nidentifiers and secure the zone via DNSSEC and link in a stub resolver\nin the client.\n\nShort story: transform user at authority.tld  --> _btc.user.athority.tld TXT 1z....\n\nA short i-d is probably a better way to explain, so I will task myself\nto do that.\n\n-rick\n\n\nOn Mon, Dec 19, 2011 at 6:46 AM, solar <solar at heliacal.net> wrote:\n> I think HTTPS, and more specifically x.509 PKI certs and CAs are generally a good idea and (historical implementation bugs aside) the concept is technically sound and secure. \u00a0What is a bad idea (in my opinion) is to trust a software vendor to decide who you should trust.. thus it is a bad idea for bitcoin software to promise any trust.\n>\n> The part where the concept becomes flawed is trusting 3rd parties who have no relationship with you, to serve your interests. \u00a0Now I'm just generalizing here and this is not universally true.. but internet CAs just want to sell certificates - they generally don't care beyond that, and they abuse the certificate validity dates to charge more money. \u00a0All this is done under the guise of wanting to provide a secure experience to users without a prior relationship to the entity being identified. \u00a0I propose that trying to follow this paradigm in bitcoin alias resolution is a bad idea because it tries to solve 2 problems at once, one of which does not have any 'good' solution, and forces a specific policy.\n>\n> First, we need to resolve an alias to a bitcoin address somehow.. but secondly we need to establish trust with the entity doing the alias resolution - to make sure that we can trust the response.\n>\n> When resolving an alias you will have to query an untrusted server, possibly being proxied by an 'attacker'. \u00a0Presumably, an x.509 certificate will be presented, possibly self signed or chained off a self generated CA or whatever else.. but if it's your first contact then there is no possible way to know if it's correct or not. \u00a0You would have to retrieve the correct public key of the CA to compare to first, possibly out of band. \u00a0Get it from my website, compare it to my business card, send me an email and I'll send it to you, or get it from some other source using some other pre existing trust (a centralized and possibly private directory perhaps). \u00a0The point is, the reason there is so much disagreement is because there is no good way to trust the resolver if you don't create that trust relationship prior to resolving an alias from it.\n>\n> I think that having to pre-trust the resolver would be an acceptable solution to all.. Those whose policy requires a simpler process can get a 3rd party CA list, much like the ones provided with web browsers and operating systems. \u00a0Those with strict verification policies can choose to pre verify every public key.. and these processes are familiar to many organizations using PKI for other things already. \u00a0In a client, presenting the usual certificate detail dialog, showing the public key, subject, issuer, and thumbprint would be sufficient to allow users to implement their own policies without forcing it one way or another.\n>\n> Please consider that while some organizations or users might require strong anonymity and pre existing trust, there are others who may want to do the opposite and that is just as valid, even if you or 'everyone else' disagrees with that. \u00a0In the case of bitcoin, it will be used as part of a larger system, and whatever concerns are created by 'insecure' alias resolution may well be addressed in another part of the system. \u00a0The most successful standards and implementations are the ones which provide the most flexibility - primarily because that allows users to extend them in ways the original designers didn't necessarily plan for.\n>\n> Thanks,\n> Laszlo\n>\n>\n>\n> On Dec 19, 2011, at 11:44 AM, Andy Parkins wrote:\n>\n>> On 2011 December 19 Monday, Jorge Tim\u00f3n wrote:\n>>> Ok, so HTTP is not an option unless it shows a huge warning. I don't\n>>> know the HTTPS possible attack, but maybe it needs a warning message\n>>> too, from what you people are saying. Although using namecoin to\n>>\n>> The problems with HTTPS have been social rather than technical. \u00a0Multiple CAs\n>> have been strong-armed by governments or tricked into issuing fake\n>> certificates by scammers. \u00a0There is no technical measure around that. \u00a0By\n>> using the CA certificate we are saying to the system \"here is someone I trust\n>> to issue a certificate\". \u00a0So far, with a large number of CAs, that trust is\n>> misplaced.\n>>\n>> I'm of the opinion though that this problem is outside the remit of bitcoin to\n>> solve.\n>>\n>> Perhaps we should be more strict about which CA certificates are trusted by\n>> the bitcoin client: say restrict it to those who have demonstrably good\n>> practices for verifying identity; rather than the ridiculous amount of trust\n>> that comes pre-installed for me in my browser.\n>>\n>>\n>>\n>> Andy\n>>\n>> --\n>> Dr Andy Parkins\n>> andyparkins at gmail.com\n>> ------------------------------------------------------------------------------\n>> Learn Windows Azure Live! \u00a0Tuesday, Dec 13, 2011\n>> Microsoft is holding a special Learn Windows Azure training event for\n>> developers. It will provide a great way to learn Windows Azure and what it\n>> provides. You can attend the event by watching it streamed LIVE online.\n>> Learn more at http://p.sf.net/sfu/ms-windowsazure_______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live! \u00a0Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "DANE uses secure DNS to associate TLS server's certificate with the intended domain name, mitigating the need for CAs and allowing self-signed certificates."}, {"author": "Luke-Jr", "date": "2011-12-19T16:35:32", "message_text_only": "On Monday, December 19, 2011 6:44:59 AM Andy Parkins wrote:\n> Perhaps we should be more strict about which CA certificates are trusted by\n> the bitcoin client: say restrict it to those who have demonstrably good\n> practices for verifying identity; rather than the ridiculous amount of\n> trust that comes pre-installed for me in my browser.\n\nAccepted CAs is/should be a property of your *operating system*, not any \nparticular software. Anyhow, restricting this further just makes it even more \nunusable. Already there is only 1 or 2 CAs that will provide a gratis \ncertificate for personal/small users. If you only allow high-class CAs, I \nimagine that will restrict \"no key in the URI\" aliases to those who will fork \nover a lot of money.", "summary": "Proposal to limit trusted CA certificates for Bitcoin client to those with good identity verification practices, but this may limit accessibility."}, {"author": "solar", "date": "2011-12-19T17:13:14", "message_text_only": "Using commercial CAs to establish trust is a site local administrative policy..\n\nBitcoin and operating systems have no technical need to concern themselves with this.  It is a shame that the system has been abused by CAs paying off operating system and web browser vendors but this is not the only way to use it.. my policy may be (as an example) to require each party I deal with to generate their own self signed cert or their own CA cert (same thing really) and then I can trust that and only that.  Obviously, commercial CAs will sell a certificate to anyone which means you trust anyone that is their customer.  This is a valid site policy but not for everyone.\n\nRick Wesson's suggestion about DNSSEC and such is interesting since it would provide a system for that 'first contact' exchange where you can more reliably retrieve the certificate, if the site supports it.  Some policies may not require this however - you can always get the trust established another way like downloading a cert file from a website or whatever else you consider adequately secure for your organization.\n\nI think 3rd party CA lists and the DNSSEC/DANE idea are both useful ways to automatically establish trust out of band, but this is independent of the actual implementation of alias resolution, which happens after a trusted connection is made.  Automatically establishing trust with the alias resolver is perhaps a useful feature, but not a requirement for either side to support alias resolution.\n\nIn any case, it sounds like using HTTPS and x.509 certs would allow many of these automatic trust establishment systems to be implemented on top, allowing flexible policy configuration, which seems to be important to several people in this thread of discussion.\n\nI think using JSON would be ok but like it's been said, you either have to serialize your binary data into some text format like base64/UUencode or represent it as an integer array, both of which are inefficient.. probably cancelling out any benefit of using JSON in the first place :)\n\nMaybe there is no need for binary data for alias resolution though.. I imagine it would be as simple as submitting a name to resolve, and giving back a base58 address string, perhaps along with a textual comment or other extra, information data.\n\nBeing strict or lax or anything else is not really a concern for alias resolution - establishing trust is an administrative issue with a lot of different solutions and not every site or application requires trust.  HTTPS and mutual authentication may be desirable for general cases, however HTTP should work just as well if trust is established another way and thus SSL/TLS is not a requirement for the HTTP exchange to work.  As an example use case, I may be using IPsec or any number of other systems external to bitcoin and alias resolution itself.\n\nLaszlo\n\n\n\nOn Dec 19, 2011, at 4:35 PM, Luke-Jr wrote:\n\n> On Monday, December 19, 2011 6:44:59 AM Andy Parkins wrote:\n>> Perhaps we should be more strict about which CA certificates are trusted by\n>> the bitcoin client: say restrict it to those who have demonstrably good\n>> practices for verifying identity; rather than the ridiculous amount of\n>> trust that comes pre-installed for me in my browser.\n> \n> Accepted CAs is/should be a property of your *operating system*, not any \n> particular software. Anyhow, restricting this further just makes it even more \n> unusable. Already there is only 1 or 2 CAs that will provide a gratis \n> certificate for personal/small users. If you only allow high-class CAs, I \n> imagine that will restrict \"no key in the URI\" aliases to those who will fork \n> over a lot of money.\n> \n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for \n> developers. It will provide a great way to learn Windows Azure and what it \n> provides. You can attend the event by watching it streamed LIVE online.  \n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Using commercial CAs for trust is a site policy, but not necessary. Self-signed or CA certs can be used. DNSSEC and HTTPS can also establish trust."}, {"author": "Luke-Jr", "date": "2011-12-19T16:30:41", "message_text_only": "On Monday, December 19, 2011 2:56:09 AM Jorge Tim\u00f3n wrote:\n> For the \"answer format\" JSON seems ok,\n\nI'd prefer we stick to simple standards.\nHTTP alone should really be fine to build on...\n\nJSON in particular has very poor language support, and cannot reasonably \nrepresent binary data (such as a custom output script). The HTTP \nspecification, however, allows binary data in multipart content just fine.", "summary": "Stick to simple standards like HTTP instead of using JSON which has poor language support and cannot represent binary data effectively."}, {"author": "Jordan Mack", "date": "2011-12-19T17:04:34", "message_text_only": "I still think HTTPS should be used, at the minimum. Using HTTPS is \nstandard to every website out there that deals with financials, even if \nit is not a perfect system. Why should Bitcoin adopt a more lax policy \nthan everyone else?\n\nI thought that JSON support was fairly common these days. I personally \nprefer XML in most cases, but since JSON is already used with the RPC, \nit seemed like a natural fit here. Binary data can be base64 encoded, \nalthough I'm not sure why you would need to send back binary in an alias \nresponse.\n\nWhat exactly do you mean by \"custom output script\"?\n\n\nOn 12/19/2011 8:30 AM, Luke-Jr wrote:\n> I'd prefer we stick to simple standards.\n> HTTP alone should really be fine to build on...\n>\n> JSON in particular has very poor language support, and cannot reasonably\n> represent binary data (such as a custom output script). The HTTP\n> specification, however, allows binary data in multipart content just fine.", "summary": "HTTPS should be used for Bitcoin websites dealing with financials. JSON support is common, but it cannot represent binary data. Custom output script needs clarification."}, {"author": "slush", "date": "2011-12-19T17:09:16", "message_text_only": "I agree with Luke that HTTP standard has everything necessary and bloating\npayload with json/xml is not necessary.\n\nBtw that argument \"we have json in client already\" seems pretty wrong,\nbecause json in server rpc solves another problem (and solve it in wrong\nway, because of data type issues, but it's another story).\n\nslush\n\nOn Mon, Dec 19, 2011 at 6:04 PM, Jordan Mack <jordanmack at parhelic.com>wrote:\n\n> I thought that JSON support was fairly common these days. I personally\n> prefer XML in most cases, but since JSON is already used with the RPC,\n> it seemed like a natural fit here. Binary data can be base64 encoded,\n> although I'm not sure why you would need to send back binary in an alias\n> response.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/fabde08e/attachment.html>", "summary": "HTTP standard is sufficient, and bloating payload with JSON/XML is unnecessary. The argument for using JSON in server RPC is flawed."}, {"author": "Jordan Mack", "date": "2011-12-19T18:13:08", "message_text_only": "With all due respect, I continue to disagree on the topic of using HTTP \nfor data interchange.\n\nYes, an HTTP multipart response will accomplish the need for multiple \nnamed resources. The problem is that parsing of a multipart response \nisn't simple, and library support is weak across many languages. The \nwidely adopted cURL library does not support multipart response parsing \nat all.\n\nJSON is widely adopted, human readable, and has parsing libraries \navailable for every major language. There is a bit of additional bloat, \nbut I believe it is warranted in this case because of the convenience \nand ease it brings to developers.\n\nIf the idea is to \"KISS\", and provide a method that is both quick and \neasy to implement for the average developer, then JSON is a stand out \noption. Using HTTP for the data interchange will make things difficult \nfor a lot of developers if multipart responses are used. JSON will be \ngreeted with open arms.\n\n\n\nOn 12/19/2011 9:09 AM, slush wrote:\n> I agree with Luke that HTTP standard has everything necessary and\n> bloating payload with json/xml is not necessary.\n>\n> Btw that argument \"we have json in client already\" seems pretty wrong,\n> because json in server rpc solves another problem (and solve it in wrong\n> way, because of data type issues, but it's another story).", "summary": "HTTP multipart response is not simple to parse and lacks library support. JSON is widely adopted, human-readable, and has parsing libraries available for every major language. Using HTTP for data interchange will make things difficult for developers."}, {"author": "slush", "date": "2011-12-19T18:17:55", "message_text_only": "In my opinion, there's not necessary any payload format (json, xml,\nmultipart). In keeping stuff KISS, everything we need is just an address in\nresponse + potentially some stuff like HTTP redirects (for providing\nadditional compatibility for proposal of bitcoin URIs with \"amount\",\n\"label\" and other parts). I don't see reason why we need some extra payload\nyet.\n\nslush\n\nOn Mon, Dec 19, 2011 at 7:13 PM, Jordan Mack <jordanmack at parhelic.com>wrote:\n\n> If the idea is to \"KISS\", and provide a method that is both quick and\n> easy to implement for the average developer, then JSON is a stand out\n> option. Using HTTP for the data interchange will make things difficult\n> for a lot of developers if multipart responses are used. JSON will be\n> greeted with open arms.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/33ea8eb3/attachment.html>", "summary": "Slush suggests that there is no need for a payload format like JSON or XML, and all that is required is an address in response."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-19T18:50:01", "message_text_only": "I don't have a strong position for or against JSON but...What about\nprotocol buffers?\nWould it be too much too? Would it be simple enough for developers?", "summary": "The author is neutral about JSON and suggests considering protocol buffers as an alternative. They question its complexity for developers."}, {"author": "Jordan Mack", "date": "2011-12-19T20:03:29", "message_text_only": "I don't think protocol buffers are as simple to implement as some would \nlike. I would still opt for it over MIME though.\n\n\nOn 12/19/2011 10:50 AM, Jorge Tim\u00f3n wrote:\n> I don't have a strong position for or against JSON but...What about\n> protocol buffers?\n> Would it be too much too? Would it be simple enough for developers?", "summary": "Protocol buffers may not be easy to implement, but they are still preferred over MIME for data transmission. JSON is not strongly favored."}, {"author": "Jordan Mack", "date": "2011-12-19T19:22:59", "message_text_only": "If alias resolution was guaranteed to always be just the address, then \nyes, I would opt for no serialization at all. A simple plain text \nresponse of an address is about as simple as it can get.\n\nThere are already a lot of good ideas floating around about how the \nalias protocol could be extended. Is it really going to stay that simple \nfor long? I would personally much just have a serialized response \nupfront, rather than having to worry about backward compatibility in the \nfuture.\n\nOn 12/19/2011 10:17 AM, slush wrote:\n> In my opinion, there's not necessary any payload format (json, xml,\n> multipart). In keeping stuff KISS, everything we need is just an address\n> in response + potentially some stuff like HTTP redirects (for providing\n> additional compatibility for proposal of bitcoin URIs with \"amount\",\n> \"label\" and other parts). I don't see reason why we need some extra\n> payload yet.", "summary": "The author suggests that a simple plain text response of an address is sufficient for alias resolution, but worries about future compatibility issues."}, {"author": "Luke-Jr", "date": "2011-12-19T18:15:24", "message_text_only": "On Monday, December 19, 2011 12:04:34 PM Jordan Mack wrote:\n> I still think HTTPS should be used, at the minimum. Using HTTPS is\n> standard to every website out there that deals with financials, even if\n> it is not a perfect system. Why should Bitcoin adopt a more lax policy\n> than everyone else?\n\nSure, I meant HTTP as the underlying protocol.\nTLS/SSL should of course be required in some form.\n\n> I thought that JSON support was fairly common these days. I personally\n> prefer XML in most cases, but since JSON is already used with the RPC,\n> it seemed like a natural fit here. \n\nJSON-RPC won't go on forever. In any case, bitcoind's use of JSON-RPC is \nexactly why I (and many other developers) have come to the realization how \npoorly supported JSON really is. Most of the common languages do have a \nlibrary, but almost all of them have one issue or another (particularly around \nthe very undefined Number type).\n\nXML shares the same binary-data problem as JSON, too.\nAs slush mentioned, no additional serialization is necessary anyway.\n\n> Binary data can be base64 encoded, although I'm not sure why you would need\n> to send back binary in an alias response.\n\nBecause computers work with binary. I don't think anyone wants to implement a \nfully functional script assembler just to send funds.\n\n> What exactly do you mean by \"custom output script\"?\n\nThis suggests you need to learn more about how Bitcoin works ;)\nhttps://en.bitcoin.it/wiki/Script", "summary": "A developer suggests using HTTPS and requiring TLS/SSL for Bitcoin, while discussing the use of JSON-RPC and binary data in Bitcoin transactions."}, {"author": "Jordan Mack", "date": "2011-12-19T18:52:54", "message_text_only": "I believe I'm missing something here. I was under the interpretation \nthat alias resolution was going the KISS route, of basically a single \nHTTP request and response. How do you see binary data fitting into this?\n\nI'm not going to pretend that I know all the details of the difficulties \nthat were encountered with JSON-RPC. But in the argument of developer \naccessibility, it still serves a purpose. If JSON-RPC support is \nremoved, you will immediately lose a large pool of high level language \ndevelopers. I would hope that support would not be dropped, even if it \nonly remains as a secondary protocol with limited capability. Most high \nlevel developers are only going to use it for basic functions anyhow.\n\n\n\nOn 12/19/2011 10:15 AM, Luke-Jr wrote:\n> Because computers work with binary. I don't think anyone wants to implement a\n> fully functional script assembler just to send funds.\n>\n> JSON-RPC won't go on forever. In any case, bitcoind's use of JSON-RPC is\n> exactly why I (and many other developers) have come to the realization how\n> poorly supported JSON really is. Most of the common languages do have a\n> library, but almost all of them have one issue or another (particularly around\n> the very undefined Number type).", "summary": "The use of binary data is necessary for efficient processing, but JSON-RPC still serves a purpose for high-level language developers. Support should not be dropped entirely."}, {"author": "Luke-Jr", "date": "2011-12-19T19:16:54", "message_text_only": "On Monday, December 19, 2011 1:52:54 PM Jordan Mack wrote:\n> I believe I'm missing something here. I was under the interpretation\n> that alias resolution was going the KISS route, of basically a single\n> HTTP request and response. How do you see binary data fitting into this?\n\nBitcoin is a binary system. Not all payment outputs are necessarily \nserializable into addresses, and assuming they are would be broken-by-design.\nIn other words, why send the user's *software* \"pay to address foo\" just to \nhave it turn that into a script (of limited subset), when you can send the \nscript itself and avoid all the possible problems? Doing this right also means \nthat if the user's client doesn't support version 255 addresses, it still \nworks fine.\n\n> I'm not going to pretend that I know all the details of the difficulties\n> that were encountered with JSON-RPC. But in the argument of developer\n> accessibility, it still serves a purpose. If JSON-RPC support is\n> removed, you will immediately lose a large pool of high level language\n> developers.\n\nJSON isn't problem-free at high-level either. To summarize one of the issues, \nalmost every implementation of JSON treats Numbers differently based on \nwhether they have a '.' in them or not.\n\nMIME has been around much longer, and should have sufficient support in every \nlanguage by now. For some reason, Python calls the module 'email'.", "summary": "Discussion on using binary data in Bitcoin and the limitations of JSON-RPC for developer accessibility. MIME suggested as an alternative."}, {"author": "Jordan Mack", "date": "2011-12-19T20:03:09", "message_text_only": "I wish that was the case. It would have made my life a lot easier in the \npast. A lot of the MIME libraries out there are extremely buggy. MIME is \njust difficult to work with, and support is still weak.\n\nUndefined content length + text based boundaries = pain in the ass.\n\nIt is in the e-mail module because that's all MIME was originally \nintended for. It's now grown beyond that now, but you will find the MIME \nfunctions still live in the e-mail libraries. When dealing with raw MIME \nencoded data, e-mail is still the most common case.\n\n\nOn 12/19/2011 11:16 AM, Luke-Jr wrote:\n> MIME has been around much longer, and should have sufficient support in every\n> language by now. For some reason, Python calls the module 'email'.", "summary": "MIME libraries are buggy and difficult to work with, with weak support. MIME functions still live in e-mail libraries, as it is the most common case."}, {"author": "Pieter Wuille", "date": "2011-12-16T08:35:38", "message_text_only": "On Mon, Dec 12, 2011 at 02:21:09PM -0800, Amir Taaki wrote:\n> I wrote this pre-draft:\n> \n> \n> https://en.bitcoin.it/wiki/BIP_0015\n> \n> It's merely a starter for discussions.\n\nInteresting discussion so far, with many nice ideas.\n\nI'll try to give my opinion and comment on some in batch here.\n\nFirst of all, I'm a big proponent of moving away from using base58 strings\nas addresses. They are not flexible and not human-friendly. I did an own\nproposal to improve the situation some time ago, see\n\n  https://gist.github.com/1237788\n\nThere was little reaction, and maybe the reason is we shouldn't try to solve/fix\neverything at once.\n\na) IP transactions-like system with DNS resolution\n\nNot only does this give you nice identifiers, but it also moves the\nresponsibility of getting the transaction accepted by the network from the\nsender to the receiver - the one who actually cares about getting his\nmoney.\n\nThe authentication problem that was present in the original IP transactions\nsystem can either be mitigated by trusting the existing SSL public-key\nintrastructure (which not everyone may like) or (as Satoshi suggested) adding\nbitcoin address-based authentication on top (separate from the address used in\nthe transaction itself). So you get an identifier like <url>$<btcaddress>, and\nthe communication to <url> would be authenticated using <btcaddress>. This\nis obviously not useful as human-typable alias, but is no problem for\nclickable URLs on websites that want to provide the additional security.\n\nI'm not sure about using the bitcoin p2p protocol here - i think there are\neasier (or at least more widely deployed) protocols like HTTP. So maybe ...\n\nb) HTTPS Web Service\n\nwe can just use an HTTPS web service, that provides the bitcoin address to\nbe used in the transaction to a client that queries a URL. This immediately\nmakes the identifier double as a clickable URL, and a merchant could add\nmetadata to the URL to make the transaction easily trackable.\n\nAs for the possibility for spoofing: relying on DNSSEC is currently\ndifficult i believe (though i'm not entirely up-to-date about its\ndeployment). Again, alternatives are the SSL PKI, or bitcoin address-based\nauthentication (basically doing SSL but using bitcoin pubkeys to\nauthenticate)\n\nc) user at hostname-like identifiers\n\nThese look very good, and conveniently match the e-mail system's identifiers.\nHowever, I believe they are only useful for one purpose: user-to-user\npayments. For anything somewhat more business-y you probably want to use\na clickable URL, and hide all address information entirely from the user.\nStill, for user-to-user payments they are nice.\n\nI'm not convinced about the hardcoding of the \"https://\" and\n\"/bitcoin-alias/?handle=\" parts, though. These seem very arbitrarily\nchosen to me, but if you consider an HTTPS-based variant of a bitcoin\nip-transactions-like system, the proposed \"account\" parameter to\ncheckorder would probably become a CGI parameter anyway...\n\nd) DNS TXT lookups\n\nI'm not entirely against this, but only allowing a fixed bitcoin address\nto be returned would far too strongly encourage the use of fixed\naddresses in transactions. If anything, it should be an identifier\nfor one of the other proposals (which do allow interaction, or at least\ncreation of a fresh bitcoin address) that is returned. \n\n\n\nTo conclude: my suggestion would be to use URLs as address identifiers,\noptionally suffixed with a bitcoin address for authentication.\nThis means my \"address\" would be either \"sipa.be/pw.btc\" or\n\"sipa.be/pw.btc$14TYdpodQQDKVgvUUcpaMzjJwhQ4KYsipa\" (where \"https://\")\nis an implicit default. Initiating a payment to either of these would\nresult in a GET of https://sipa.be/pw.btc. When a transaction is\nconstructed, it is POSTed back to that URL.\n\nIf we can agree on reasonable hardcoded mapping, pw at sipa.be could just\nbe a shorthand for either of these (though vulnerable to proofing...).\n\n-- \nPieter", "summary": "Amir Taaki proposed a pre-draft for BIP 0015, discussing the use of base58 strings as addresses and suggesting alternatives such as IP transactions, HTTPS web service, user at hostname-like identifiers, and DNS TXT lookups."}, {"author": "Rick Wesson", "date": "2011-12-16T16:03:28", "message_text_only": "On Fri, Dec 16, 2011 at 12:35 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Mon, Dec 12, 2011 at 02:21:09PM -0800, Amir Taaki wrote:\n>> I wrote this pre-draft:\n\n[snip]\n\n>\n> To conclude: my suggestion would be to use URLs as address identifiers,\n> optionally suffixed with a bitcoin address for authentication.\n> This means my \"address\" would be either \"sipa.be/pw.btc\" or\n> \"sipa.be/pw.btc$14TYdpodQQDKVgvUUcpaMzjJwhQ4KYsipa\" (where \"https://\")\n> is an implicit default. Initiating a payment to either of these would\n> result in a GET of https://sipa.be/pw.btc. When a transaction is\n> constructed, it is POSTed back to that URL.\n>\n> If we can agree on reasonable hardcoded mapping, pw at sipa.be could just\n> be a shorthand for either of these (though vulnerable to proofing...).\n\nI believe that any URI scheme will still leverage DNS and inherit any\nbase issues you would have with TXT records. I suggest looking at DANE\nand reviewing their work on hardening certificate (x.509)\ninfrastructure as your HTTPS scheme will inherit the issues we\ncurrently experience with CAs getting p0wned.\n\nHardening the protocols and usability are related. Please look at some\nof the work done in the IETF which has a long history in addressing\nmany of the issues you are considering. Review some of the elegance in\nthe bitcoin protocols. The proposals in this thread are neither clear\nnor elegant. If you can't reach nearly the same level of\nsophistication then I suggest you rethink your scheme.\n\n-rick", "summary": "A proposal to use URLs as address identifiers, optionally suffixed with a bitcoin address for authentication, is suggested. Hardening protocols and usability are related."}, {"author": "Pieter Wuille", "date": "2011-12-16T16:17:00", "message_text_only": "On Fri, Dec 16, 2011 at 08:03:28AM -0800, Rick Wesson wrote:\n> Hardening the protocols and usability are related. Please look at some\n> of the work done in the IETF which has a long history in addressing\n> many of the issues you are considering. Review some of the elegance in\n> the bitcoin protocols. The proposals in this thread are neither clear\n> nor elegant. If you can't reach nearly the same level of\n> sophistication then I suggest you rethink your scheme.\n\nThat's why you use URI + bitcoin address pairs, and use SSL communication\nauthenticated using the respective bitcoin pubkey. They may spoof your DNS\nserver, they can't fake having the requested corresponding private key.\n\nObviously, this moves the problem to getting the URL + address securely\nto the client that wants to interact with it, but that is inevitable if\nyou're not going to rely on a pre-trusted certificate authority and PKI.\n\nAlso, the client software can cache the address corresponding to a particular\nserver or URL, making it similar to an ssh client that caches host keys and\nwarns when they change.\n\n-- \nPieter", "summary": "The writer suggests hardening protocols and usability, citing the elegance of bitcoin protocols and IETF's work in addressing related issues."}, {"author": "Rick Wesson", "date": "2011-12-16T16:21:40", "message_text_only": "On Fri, Dec 16, 2011 at 8:17 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Fri, Dec 16, 2011 at 08:03:28AM -0800, Rick Wesson wrote:\n>> Hardening the protocols and usability are related. Please look at some\n>> of the work done in the IETF which has a long history in addressing\n>> many of the issues you are considering. Review some of the elegance in\n>> the bitcoin protocols. The proposals in this thread are neither clear\n>> nor elegant. If you can't reach nearly the same level of\n>> sophistication then I suggest you rethink your scheme.\n>\n> That's why you use URI + bitcoin address pairs, and use SSL communication\n> authenticated using the respective bitcoin pubkey. They may spoof your DNS\n> server, they can't fake having the requested corresponding private key.\n\nYou are making my point (again) regarding usability and security.\nAliases are not a https secured URI+bitcoin address.\n\n-rick", "summary": "Rick Wesson suggests that hardening protocols and usability are related, and recommends looking at IETF's work and the elegance of Bitcoin protocols. He argues that aliases are not as secure as HTTPS secured URI+Bitcoin address pairs."}, {"author": "Andy Parkins", "date": "2011-12-16T17:21:11", "message_text_only": "On 2011 December 16 Friday, Rick Wesson wrote:\n\n> I believe that any URI scheme will still leverage DNS and inherit any\n> base issues you would have with TXT records. I suggest looking at DANE\n\nHTTPS takes care of that.\n\n> and reviewing their work on hardening certificate (x.509)\n> infrastructure as your HTTPS scheme will inherit the issues we\n> currently experience with CAs getting p0wned.\n\nThis is the only real problem with HTTPS: we would be centralising part of our \notherwise decentralised system.  CAs are certainly a risk.\n\nHowever, trust is needed somewhere in the communication.  There is no way to \nsecurely communicate between A and B without the use of some previously \ntrusted secure channel -- in Joe Sixpack's case it's by assuming that the \nbrowser he downloaded came with an untainted CA list, and that the CAs are \ntrustworthy.  Neither of which is guaranteed.  Until and unless we get PGP \nsupport in browsers, CAs are all that we have.\n\nWorrying about CAs misses the point anyway; if we're being that paranoid -- \nhow did A tell B the appropriate alias to use for a lookup?  Was that channel \nsecure too?  I could set up a MITM server that simply looks for the alias \n\"RICKWESSON at bitcoinaliases.org\" and rewrites it to \n\"ANDYPARKINS at bitcoinaliases.org\".  When the answer to that problem is HTTPS \n(or some other system that requires a previously authorised secure channel for \ntransfer of trust), then we're back where we started, and HTTPS is acceptable.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/c16ac4b7/attachment.sig>", "summary": "The use of HTTPS is centralized, but necessary for secure communication. Trust is needed somewhere, and until PGP support is available, CAs are necessary."}, {"author": "Zell Faze", "date": "2011-12-12T23:16:21", "message_text_only": "I agree with Luke-Jr.  We need to try to find a decentralized solution if we are going to implement BIP 15.  Bitcoin needs to remain decentralized in every aspect of the protocol or we lose its greatest strength.\n\nI feel like the HTTPS idea would be a great idea for a client feature, but not really something that should be added to the protocol.\n\n--- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:\n\n> From: Luke-Jr <luke at dashjr.org>\n> Subject: Re: [Bitcoin-development] [BIP 15] Aliases\n> To: bitcoin-development at lists.sourceforge.net, \"Amir Taaki\" <zgenjix at yahoo.com>\n> Date: Monday, December 12, 2011, 5:32 PM\n> FirstBits looks nice at glance, but\n> is bound to create a gold-rush to grab \n> every nice-looking FirstBits address.\n> \n> HTTPS is only as secure as the (centralized) CAs, thus not\n> really any better \n> than TXT records.\n> \n> I don't think an address of some form is avoidable.", "summary": "Decentralized solutions are needed to implement BIP 15 and maintain Bitcoin's strength. HTTPS is a good client feature, but not for the protocol."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-12T23:37:56", "message_text_only": "I don't think Amir wants to put it into the protocol, but I still\ndon't like much the proposal if it has to rely on servers.\nAs an aside, even if firstbits it's not useful enough for the human\nmemory, it is still useful for QR-codes like in the case of green\naddresses's POS instant payments.\n\nWould it be too strange to use namecoin?\nSome devices may need to rely on block exploring servers, but it is\nthe easiest decentralized solution that comes to mind.\n\n\n2011/12/13, Zell Faze <zellfaze at yahoo.com>:\n> I agree with Luke-Jr.  We need to try to find a decentralized solution if we\n> are going to implement BIP 15.  Bitcoin needs to remain decentralized in\n> every aspect of the protocol or we lose its greatest strength.\n>\n> I feel like the HTTPS idea would be a great idea for a client feature, but\n> not really something that should be added to the protocol.\n>\n> --- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:\n>\n>> From: Luke-Jr <luke at dashjr.org>\n>> Subject: Re: [Bitcoin-development] [BIP 15] Aliases\n>> To: bitcoin-development at lists.sourceforge.net, \"Amir Taaki\"\n>> <zgenjix at yahoo.com>\n>> Date: Monday, December 12, 2011, 5:32 PM\n>> FirstBits looks nice at glance, but\n>> is bound to create a gold-rush to grab\n>> every nice-looking FirstBits address.\n>>\n>> HTTPS is only as secure as the (centralized) CAs, thus not\n>> really any better\n>> than TXT records.\n>>\n>> I don't think an address of some form is avoidable.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "Decentralized solutions are needed for implementing BIP 15, and HTTPS is not a good option. Namecoin may be a viable solution for some devices."}, {"author": "Luke-Jr", "date": "2011-12-12T23:41:38", "message_text_only": "On Monday, December 12, 2011 6:37:56 PM Jorge Tim\u00f3n wrote:\n> Would it be too strange to use namecoin?\n\nThis has the same problem as FirstBits, except .bit domains are dirt cheap, \nwhereas vanitygen at least slows down grabbing all the common words...", "summary": "Using Namecoin has a similar issue as FirstBits, but .bit domains are inexpensive, while vanitygen slows down grabbing common words."}, {"author": "Stefan Thomas", "date": "2011-12-13T02:39:42", "message_text_only": ">> Would it be too strange to use namecoin?\n> This has the same problem as FirstBits, except .bit domains are dirt cheap,\n> whereas vanitygen at least slows down grabbing all the common words...\n\nGrabbing is no more an issue than mining Bitcoins is an issue. Sure, \ndomain grabbers will have the domains first, but they want to profit and \ntherefore are willing to sell them for whatever price they can get. Just \nlike the trading of any other limited resource, this process sounds like \nsomebody is getting rich for nothing, but it does tend to put the \nlimited resources to good use as people who waste good domains can't \nafford them in the long run. The problem with Firstbits is that the \nnames already grabbed have fixed private keys that are known by their \noriginators. That makes the names untradable. This may be fixable with \nsplit keys, but a lot of \"good\" 1firstbits are already made useless in \nthis way.\n\nNames in Namecoin can be transferred/traded securely, strong \ncryptography is built in and it shares mining without bloating the \nBitcoin block chain. I see it as a decentralized DNS alternative at a \ntime when domain seizures are on the rise, even absent any court order.\n\nSo I would use one of the DNS-based solutions that Amir suggested and \nsimply require standard-compliant clients to be able to look up .bit \n(i.e. Namecoin) domains as well. That way we have a pragmatic solution, \nbut one that also provides security and true decentralization for the \nmore paranoid of our users.\n\n\nOn 12/13/2011 12:41 AM, Luke-Jr wrote:\n> On Monday, December 12, 2011 6:37:56 PM Jorge Tim\u00f3n wrote:\n>> Would it be too strange to use namecoin?\n> This has the same problem as FirstBits, except .bit domains are dirt cheap,\n> whereas vanitygen at least slows down grabbing all the common words...\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Using Namecoin as a decentralized DNS alternative is suggested due to its ability to transfer/trade names securely and share mining without bloating the Bitcoin block chain."}, {"author": "Matt Corallo", "date": "2011-12-12T23:52:45", "message_text_only": "On Tue, 2011-12-13 at 00:37 +0100, Jorge Tim\u00f3n wrote:\n> I don't think Amir wants to put it into the protocol, but I still\n> don't like much the proposal if it has to rely on servers.\n> As an aside, even if firstbits it's not useful enough for the human\n> memory, it is still useful for QR-codes like in the case of green\n> addresses's POS instant payments.\nFirstbits isn't acceptable for anything.  As Amir originally pointed\nout, it doesn't scale well and worst of all it fills the blockchain with\na ton of crap to get 1 satoshi at an address so that it is\n\"registered\".  \n> \n> Would it be too strange to use namecoin?\n> Some devices may need to rely on block exploring servers, but it is\n> the easiest decentralized solution that comes to mind.\nFirstbits is unacceptable because it causes unnecessary harm to each\nBitcoin node.  However, if one were to use a chain specifically crafted\nfor such a purpose isn't terrible.  That said, it still doesn't scale\nwell and if it becomes popular virtually every implementation would have\nto rely on trusted servers at which point you are better off going back\nto an HTTPS/DNSSEC-based implementation\n\nMatt", "summary": "Firstbits proposal for Bitcoin protocol criticized for not scaling well and filling blockchain with unnecessary data; suggests using Namecoin instead."}, {"author": "Will", "date": "2011-12-12T23:37:58", "message_text_only": "Are there any PGP key servers that support EC key pairs?  OpenPGP Spec\nRFC2440 defines key types for EC, just not sure if they were ever\nimplemented on the keyserver side.  Could even have a similar 'web of\ntrust' using private keys to sign people's identities similar to PGP.\n\nWill\n\nOn 12 December 2011 23:16, Zell Faze <zellfaze at yahoo.com> wrote:\n\n> I agree with Luke-Jr.  We need to try to find a decentralized solution if\n> we are going to implement BIP 15.  Bitcoin needs to remain decentralized in\n> every aspect of the protocol or we lose its greatest strength.\n>\n> I feel like the HTTPS idea would be a great idea for a client feature, but\n> not really something that should be added to the protocol.\n>\n> --- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:\n>\n> > From: Luke-Jr <luke at dashjr.org>\n> > Subject: Re: [Bitcoin-development] [BIP 15] Aliases\n> > To: bitcoin-development at lists.sourceforge.net, \"Amir Taaki\" <\n> zgenjix at yahoo.com>\n> > Date: Monday, December 12, 2011, 5:32 PM\n> > FirstBits looks nice at glance, but\n> > is bound to create a gold-rush to grab\n> > every nice-looking FirstBits address.\n> >\n> > HTTPS is only as secure as the (centralized) CAs, thus not\n> > really any better\n> > than TXT records.\n> >\n> > I don't think an address of some form is avoidable.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111212/25918c42/attachment.html>", "summary": "The OpenPGP Spec RFC2440 defines key types for EC, but it is unclear if they were ever implemented on the keyserver side."}], "thread_summary": {"title": "Aliases", "categories": ["Bitcoin-development", "BIP 15"], "authors": ["Luke-Jr", "Rick Wesson", "slush", "Kyle Henderson", "solar", "Walter Stanish", "Khalahan", "Amir Taaki", "theymos", "Harald Schilly", "Jordan Mack", "Jorge Tim\u00f3n", "Andy Parkins", "Zell Faze", "Matt Corallo", "Stefan Thomas", "Pieter Wuille", "Will"], "messages_count": 53, "total_messages_chars_count": 99242, "convo_summary": "Bitcoin developers discussed proposals for using aliases to lookup Bitcoin addresses, including using a web service, server service, or DNS TXT records. Namecoin was suggested as a potential solution for its decentralized system. The discussion also covered the need for a proper protocol to negotiate payment in Bitcoin development. The use of HTTPS and CA for security was debated, and the potential for blockchain bloat was noted. Overall, the focus was on prioritizing usability and absolute security while maintaining Bitcoin's decentralized feature."}}, {"title": "[Bitcoin-development] Fwd:  [BIP 15] Aliases", "thread_messages": [{"author": "Jorge Tim\u00f3n", "date": "2011-12-13T00:00:58", "message_text_only": "Is the point is to have different hosts like in jtimon at gmail.com,\njtimon at timon.es, etc. so if jtimon is already taken I can take another\nhost?\n\nWhat about reserving directly the string \"jtimon at nottaken.org\" or\n\"jtimon::public::receiving::bitcoin\" in namecoin?\n\nI'm confused about the problem we're trying to solve.\n\n\n2011/12/13, Luke-Jr <luke at dashjr.org>:\n> On Monday, December 12, 2011 6:37:56 PM Jorge Tim\u00f3n wrote:\n>> Would it be too strange to use namecoin?\n>\n> This has the same problem as FirstBits, except .bit domains are dirt cheap,\n> whereas vanitygen at least slows down grabbing all the common words...\n>", "summary": "The discussion is about using different hosts or reserving a string in Namecoin to solve the problem of having a unique identifier."}, {"author": "Amir Taaki", "date": "2011-12-13T00:42:26", "message_text_only": "> I'm confused about the problem we're trying to solve.\n\nI was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is \nuseless. Then I remembered FirstBits, went to my terminal and typed \n1brmlab. I got their bitcoin address from the website and copied that, \nthen opened my terminal and pasted that in to send 1 BTC.\n\nAnd \nthese proposals for Namecoin, would make bitcoin implementations \ndependent on unproven technology. HTTPS/DNSSEC have been around a long \ntime and are responsible for many mission critical systems. There's a \nlot of momentum behind those projects. Namecoin by contrast, could die \ntomorrow. And it isn't a big deal that they're centralised. This is a \nconvenience for end users and does not affect the core system much.\n\ntl;dr: usability", "summary": "Difficulty paying with BTC due to lack of mobile phone and QR code. Used FirstBits instead. Concerns about dependence on unproven Namecoin technology. Focus on usability."}], "thread_summary": {"title": "Fwd:  Aliases", "categories": ["Bitcoin-development", "BIP 15"], "authors": ["Jorge Tim\u00f3n", "Amir Taaki"], "messages_count": 2, "total_messages_chars_count": 1500, "convo_summary": "The convo discussed using different hosts or reserving a string in Namecoin for a unique identifier. Amir Taaki mentioned difficulty paying with BTC without a mobile phone and QR code, using FirstBits instead. He expressed concerns about dependence on unproven Namecoin technology and emphasized the importance of usability."}}, {"title": "[Bitcoin-development] Fwd: [BIP 15] Aliases", "thread_messages": [{"author": "Daniel F", "date": "2011-12-13T02:32:56", "message_text_only": "> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is\n> useless. Then I remembered FirstBits, went to my terminal and typed\n> 1brmlab. I got their bitcoin address from the website and copied that,\n> then opened my terminal and pasted that in to send 1 BTC.\n\nok, imagine if firstbits didn't exist. instead of going to firstbits,\nyou would have gone to your terminal, opened up brmlabs website, and\ncopied the address from there?\n\nthere may be some arguments for name-> address translation, but i'm\nsorry to say, that your example is not one of them. if anything, it\nseems to suggest that firstbits is completely useless, since it saves\napproximately zero effort.", "summary": "Person pays for Club Mate using Bitcoin without a mobile phone by using FirstBits to obtain the Bitcoin address from the website."}, {"author": "Amir Taaki", "date": "2011-12-13T02:37:06", "message_text_only": "lol, way to miss the point nanotube.\n\nFirstBits *is* useless, but not for the reasons you specified. But simply because the resources it needs rises exponentially as the number of participants in the network grows linearly.\n\nThe point is that if FirstBits were built into the implementation, that would allow me to simply send to 1brmlab. The proposal here is not for a website where people can lookup bitcoin addresses, but a shared naming scheme between bitcoin implementations. Here's the story again:\n\n> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had \non the wall a picture of their QR code and a bitcoin address. I don't \nown a mobile phone so the QR code is\n> useless. Then I remembered FirstBits, went to my terminal and typed\n> 1brmlab. I got their bitcoin address from the website and copied that,\n> then opened my terminal and pasted that in to send 1 BTC.\n\nIn our revised history, I simply send 1 BTC to brmlab\n\nBOOM.\n\nClub Mate\n\n\n\n----- Original Message -----\nFrom: Daniel F <nanotube at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Tuesday, December 13, 2011 2:32 AM\nSubject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n\n> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is\n> useless. Then I remembered FirstBits, went to my terminal and typed\n> 1brmlab. I got their bitcoin address from the website and copied that,\n> then opened my terminal and pasted that in to send 1 BTC.\n\nok, imagine if firstbits didn't exist. instead of going to firstbits,\nyou would have gone to your terminal, opened up brmlabs website, and\ncopied the address from there?\n\nthere may be some arguments for name-> address translation, but i'm\nsorry to say, that your example is not one of them. if anything, it\nseems to suggest that firstbits is completely useless, since it saves\napproximately zero effort.", "summary": "FirstBits is not useless, but its resources rise exponentially as the number of participants in the network grows linearly, making it impractical. A shared naming scheme between Bitcoin implementations is proposed."}, {"author": "Luke-Jr", "date": "2011-12-13T02:43:08", "message_text_only": "On Monday, December 12, 2011 9:37:06 PM Amir Taaki wrote:\n> In our revised history, I simply send 1 BTC to brmlab\n\nAnd then Joe Address Squatter gets 1 BTC. BOOM.", "summary": "Amir Taaki sent 1 BTC to brmlab, but Joe Address Squatter received it instead, according to a revised history."}, {"author": "Daniel F", "date": "2011-12-13T02:52:00", "message_text_only": "On Mon, Dec 12, 2011 at 9:37 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> lol, way to miss the point nanotube.\n>\n> FirstBits *is* useless, but not for the reasons you specified. But simply because the resources it needs rises exponentially as the number of participants in the network grows linearly.\n>\n> The point is that if FirstBits were built into the implementation, that would allow me to simply send to 1brmlab. The proposal here is not for a website where people can lookup bitcoin addresses, but a shared naming scheme between bitcoin implementations. Here's the story again:\n\nwell, it's easy to miss the point when the example you use doesn't\nmake the point you think you're making. :D\nbut ok, yes, it would be nice to send directly to something like\n1brmlab from the client. i suppose figuring out how to make sure that\n1brmlab actually does send to whom you think it sends, is left to the\ndetails of implementation, but that's a separate question.", "summary": "Amir Taaki argues that FirstBits is useless due to the exponential rise in resources needed as the number of participants in the network grows linearly. He proposes a shared naming scheme between bitcoin implementations."}, {"author": "Mike Hearn", "date": "2011-12-13T10:55:34", "message_text_only": ">\n> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the\n> wall a picture of their QR code and a bitcoin address. I don't own a mobile\n> phone so the QR code is\n> useless.\n\n\nFixed addresses like that are a temporary thing during Bitcoins maturation\nperiod. They lead to merchants exposing data they probably don't realize\nthey're exposing, like their income, which is basically unacceptable for\nany payment system.\n\nThere's no point trying to optimize a case where:\n\n1) You are in the minority (no phone?)\n2) The \"perfect experience\" leaks private data in such a way that would be\ndeemed a gross security breach by any serious payment processor.\n\nOK, some thoughts on the general proposal, from the POV of what it'd take\nfor a large deployment, like for every Gmail or every Facebook user. In\nterms of ease of implementation it is ordered HTTPS/HTTP then DNS trailing\nby a large margin. Big sites, even small sites, typically have high-speed\nload balancing and demuxing already implemented for HTTP[S] and it's\nusually easy to add new endpoints. The same is *not* true of DNS, and\nwhilst coding up a custom DNS server is possible it's definitely a worse\nfit.\n\nFirstBits seems out of the question for the same privacy reasons as given\nabove. No banking system worth its salt would let everyone look up other\npeoples income.\n\nThe simplest approach would be to request a full public key with an HTTPS\nrequest like\n\n   foo at domain ->\nhttps://domain/_bitcoin/getnewkey?user=foo&label=Payment%20from%20Bob\n\nIf you then want to turn the resulting public key into an address before\ncreating a transaction you can obviously do that.\n\nBTW the BIP is pretty hard to read. Your spec for the HTTPS proposal is a\nbig pile of source code. I think it's the same as above, but it's hard to\ntell without more effort.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/f32e484c/attachment.html>", "summary": "A proposal for a Bitcoin payment system using HTTPS requests for public keys instead of fixed addresses, which can expose private data."}, {"author": "Christian Decker", "date": "2011-12-13T11:42:17", "message_text_only": "I think the scope of this BIP is not so well defined right now. We need a\nway for merchants to translate a human readable, and more importantly\nhuman-writeable, address into a bitcoin address. I agree with Mike that a\nfixed address is not the way to go, because addresses should be used once\nfor a single transaction to be able to track payments.\n\nWhile firstbits sounds attractive at first, I think we can all agree that\nit just isn't feasible and would not allow per-transaction addresses. DNS\nsounds interesting for fixed addresses, but caching and propagation make it\ndifficult to use for per-transaction addresses that are to be generated\nad-hoc.\n\nHTTP(S) is the best option I think, merchants are probably using HTTP\nanyway for their shops. So something like\nhttp://merchant.com/btc/transaction/1234 sounds reasonable. But I think it\nshould not be over-engineered, it should be a simple HTTP(S) request to a\nmerchant specified URL that returns an ASCII document containing either a\nbitcoin: URI or simply the bitcoin address or even a 301 redirect. It's no\nuse to start defining URL schemes, it should be left to the merchants to\ndefine how to structure them.\n\nThis would allow a merchant to decide if he prefers per-transaction\naddresses, per-user transactions, fixed addresses or any combination.\n\nRegards,\ncdecker\n\n\nOn Tue, Dec 13, 2011 at 11:55 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the\n>> wall a picture of their QR code and a bitcoin address. I don't own a mobile\n>> phone so the QR code is\n>> useless.\n>\n>\n> Fixed addresses like that are a temporary thing during Bitcoins maturation\n> period. They lead to merchants exposing data they probably don't realize\n> they're exposing, like their income, which is basically unacceptable for\n> any payment system.\n>\n> There's no point trying to optimize a case where:\n>\n> 1) You are in the minority (no phone?)\n> 2) The \"perfect experience\" leaks private data in such a way that would be\n> deemed a gross security breach by any serious payment processor.\n>\n> OK, some thoughts on the general proposal, from the POV of what it'd take\n> for a large deployment, like for every Gmail or every Facebook user. In\n> terms of ease of implementation it is ordered HTTPS/HTTP then DNS trailing\n> by a large margin. Big sites, even small sites, typically have high-speed\n> load balancing and demuxing already implemented for HTTP[S] and it's\n> usually easy to add new endpoints. The same is *not* true of DNS, and\n> whilst coding up a custom DNS server is possible it's definitely a worse\n> fit.\n>\n> FirstBits seems out of the question for the same privacy reasons as given\n> above. No banking system worth its salt would let everyone look up other\n> peoples income.\n>\n> The simplest approach would be to request a full public key with an HTTPS\n> request like\n>\n>    foo at domain ->\n> https://domain/_bitcoin/getnewkey?user=foo&label=Payment%20from%20Bob\n>\n> If you then want to turn the resulting public key into an address before\n> creating a transaction you can obviously do that.\n>\n> BTW the BIP is pretty hard to read. Your spec for the HTTPS proposal is a\n> big pile of source code. I think it's the same as above, but it's hard to\n> tell without more effort.\n>\n>\n> ------------------------------------------------------------------------------\n> Systems Optimization Self Assessment\n> Improve efficiency and utilization of IT resources. Drive out cost and\n> improve service delivery. Take 5 minutes to use this Systems Optimization\n> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/2f4582b5/attachment.html>", "summary": "Proposal for a way for merchants to translate a human-readable address into a bitcoin address, using HTTP(S) requests to a merchant-specified URL. Allows for per-transaction or fixed addresses."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-13T12:32:27", "message_text_only": "No decentralized solution for non-fixed addresses comes to mind.\nIf we're going to always rely on servers, we should definitely offer\ndynamic addresses.\n\nThere was a bitcoin service in the forum to which merchants send\ndifferent addresses and the service manages the payments for the\nmerchant without holding his private keys. The service identified each\nshopping cart by a combination of the total amount and the selected\naddress for that cart. I don't remember the name of the service\nthough.\nIt could easily implement aliases (the same alias for various rotating\naddresses). Of course, the service provider still knows your income\nand you still need to provide new addresses to maintain your privacy.\nI say this just in case it inspires someone.", "summary": "Decentralized solution for non-fixed addresses is lacking, relying on servers is necessary, dynamic addresses should be offered, and a bitcoin service with rotating addresses exists."}, {"author": "Gavin Andresen", "date": "2011-12-13T13:06:15", "message_text_only": "I agree with Mike Hearn and Christian Decker-- paying to\n'somebody at foo.com' should become, behind the scenes, a HTTPS query to\nhttps://foo.com/something. If you just want to (say) donate to\neff.org, then paying to '@eff.org' aught to work nicely.\n\nAnd if namecoin ever takes off you'll pay to 'somebody at foo.bit'.\n\nIt seems to me that if it was DNS-based, the address should be\nsomething like 'somebody.bitcoin.foo.com'. But I think it is unlikely\npeople will setup and run a custom DNS server just to support bitcoin\npayments.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen agrees with Mike Hearn and Christian Decker that Bitcoin payments should be made through HTTPS queries and potentially through namecoin."}, {"author": "Amir Taaki", "date": "2011-12-13T15:46:48", "message_text_only": "Maybe I wasn't clear enough in the document, but this is the intent with the HTTPS proposal.\n\ngenjix at foo.org\n\nContacts https://foo.org/bitcoin-alias/?handle=genjix and the system responds with a bitcoin address. Whether the system gives you a new address from a pool of addresses, or contacts the merchant behind the scenes is implementation defined.\n\nI'll clarify it later. This is the relevant line:\n\nstring strRequestUrl = strDomain + \"/bitcoin-alias/?handle=\" + pszEncodedNick;\n\nBetween HTTPS service and server service, I lean slightly towards HTTPS (automatic encrypted connection, CAs + all benefits of DNS). But still interested in arguments in favour of a server service (daemon answering queries).\n\n\n----- Original Message -----\nFrom: Gavin Andresen <gavinandresen at gmail.com>\nTo: Jorge Tim\u00f3n <timon.elviejo at gmail.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Tuesday, December 13, 2011 1:06 PM\nSubject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n\nI agree with Mike Hearn and Christian Decker-- paying to\n'somebody at foo.com' should become, behind the scenes, a HTTPS query to\nhttps://foo.com/something. If you just want to (say) donate to\neff.org, then paying to '@eff.org' aught to work nicely.\n\nAnd if namecoin ever takes off you'll pay to 'somebody at foo.bit'.\n\nIt seems to me that if it was DNS-based, the address should be\nsomething like 'somebody.bitcoin.foo.com'. But I think it is unlikely\npeople will setup and run a custom DNS server just to support bitcoin\npayments.\n\n-- \n--\nGavin Andresen\n\n------------------------------------------------------------------------------\nSystems Optimization Self Assessment\nImprove efficiency and utilization of IT resources. Drive out cost and \nimprove service delivery. Take 5 minutes to use this Systems Optimization \nSelf Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "The proposal suggests using HTTPS for Bitcoin aliases, with the option for a server service, and clarifies the relevant line of code."}, {"author": "Andy Parkins", "date": "2011-12-13T16:22:00", "message_text_only": "On 2011 December 13 Tuesday, Amir Taaki wrote:\n\n> Maybe I wasn't clear enough in the document, but this is the intent with\n> the HTTPS proposal.\n\nI don't like the idea of a hard-coded mapping at all.  We shouldn't be making \nchoices on behalf of server operators.  It's up to them how they arrange their \ndomain names and paths.\n\nI also agree that DNS is not the technology to use.  DNS is a nightmare.\n\n> genjix at foo.org\n> \n> Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system\n> responds with a bitcoin address. Whether the system gives you a new\n> address from a pool of addresses, or contacts the merchant behind the\n> scenes is implementation defined.\n> \n> I'll clarify it later. This is the relevant line:\n> \n> string strRequestUrl = strDomain + \"/bitcoin-alias/?handle=\" +\n> pszEncodedNick;\n> \n> Between HTTPS service and server service, I lean slightly towards HTTPS\n> (automatic encrypted connection, CAs + all benefits of DNS). But still\n> interested in arguments in favour of a server service (daemon answering\n> queries).\n\nWhy bother with an encoding scheme at all?  If the address\n\n  genjix at foo.org\n\nalways maps to\n\n  https://foo.org/bitcoin-alias/?handle=genjix\n\nThen forget the hardcoding of \"https\" the hardcoding of \"bitcoin-alias\" and \n\"?handle=\" and the original email-looking \"genjix at foo.org\".  Just use the URL.  \nThen the author of the service can use whatever they want.\n\n \"Can I pay you 10 BTC?\"\n \"Sure, send it to 'https://bitcoinalias.foo.org/genjix/'\"\n\nWhile I might implement my alias server like this:\n\n \"Sure, send it to 'https://google.com/bitcoin/?andyparkins'\"\n \"Sure, send it to 'https://parkins.co.uk/\"\n\n... or any other URL they want -- any of which suit might suit me and my \nwebserver better than whatever mapping would otherwise be hard-coded.  The \nworld is already very familiar with URLs so this is no more scary than the \nemail address.  What's more, the email address form looks _too much_ like an \nemail address, and will only lead to confusion ... \"send it to genjix at foo.org\"  \n\"so I use outlook express for that, right?\"  \"erm, no, you put it in your \nbitcoin client\".\n\nThe URL form could easily be made to detect a browser connecting rather than a \nbitcoin client (and this is an area that would benefit from a standards \ndocument -- define the headers and user agent triggers that an alias server \nexpects) and give them better instructions.\n\nhttps can be specified as the default, so  \"https://\" can be optional when \nthey're typing.  If, in the future, bitcoin gets a distributed peer-to-peer \nalias system, then a new URL type can be added easily \"bcalias://andyparkins\" \nmight automatically find my node in the network and query it for an address \n(or whatever).\n\nAll of the above is exactly why OpenID chose to use URLs for ID.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/bac47699/attachment.sig>", "summary": "Amir Taaki proposes a HTTPS service for Bitcoin aliases, but Dr. Andy Parkins suggests using URLs instead of hard-coded mappings."}, {"author": "D.H.", "date": "2011-12-14T19:22:12", "message_text_only": "> Then forget the hardcoding of \"https\" the hardcoding of \"bitcoin-alias\" and> \"?handle=\" and the original email-looking \"genjix at foo.org\". \u00a0Just use the URL.> Then the author of the service can use whatever they want.\nI like this a lot. It's very simple to understand and would be very\neasy to implement and set up.\n\n\"Sure, send it to david.bitcoin.se\".\n\nD.H.", "summary": "Use URLs instead of hardcoding specific terms for easier implementation. Example: \"send it to david.bitcoin.se\"."}, {"author": "Luke-Jr", "date": "2011-12-14T20:07:59", "message_text_only": "On Wednesday, December 14, 2011 2:22:12 PM D.H. wrote:\n> > Then forget the hardcoding of \"https\" the hardcoding of \"bitcoin-alias\"\n> > and> \"?handle=\" and the original email-looking \"genjix at foo.org\".  Just\n> > use the URL.> Then the author of the service can use whatever they want.\n> \n> I like this a lot. It's very simple to understand and would be very\n> easy to implement and set up.\n> \n> \"Sure, send it to david.bitcoin.se\".\n\nThat's not a valid URI.", "summary": "A suggestion was made to simplify the use of a URL instead of hardcoding specific elements, but the example given was not a valid URI."}, {"author": "D.H.", "date": "2011-12-14T20:17:42", "message_text_only": ">> \"Sure, send it to david.bitcoin.se\".>> That's not a valid URI.\nI'm not sure I get your point. If someone tells you \"hey, check out\nthe web page at xkcd.com\", is that your response or do you just open\nup your web browser and type \"xkcd.com\"?\n\nD.H.", "summary": "Invalid URI provided for sending information to David about Bitcoin. Confusion over the appropriate response to a web page suggestion."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-12-14T20:21:20", "message_text_only": "On Wed, 2011-12-14 at 15:07 -0500, Luke-Jr wrote:\n> > \"Sure, send it to david.bitcoin.se\".\n> \n> That's not a valid URI.\n\nI realize I'm responding to an useless nitpick with another useless\nnitpick but here goes.\n\nIt doesn't have to be a valid URI. As long as the recipient (or the\nsoftware he's using) can make it into a valid URI. My web-browser\ndefinitely would open http://david.bitcoin.se/ from that. For bitcoin\nclients, https:// should be the guess it tries.\n\n- Joel", "summary": "A discussion about the validity of a URI for sending Bitcoin to a recipient's address, with one participant arguing it doesn't have to be valid."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-14T22:51:48", "message_text_only": "What if we specify \"bitcoin\" to make it easier for software (maybe the\nbrowser, a plugin for the browser, the bitcoin client analyzing the\nclipboard...) to easily detect that you expect a bitcoin address when\ngoing to url?\nIf puted in the bitcoin client, the \"bitcoin://\" is optional (? and\ncan also be replaced by http ?) since from the context you already\nexpect an address or an url that will give you the address.\n\nIn the browser:\n\nbitcoin://address\nbitcoin://rest_of_url\n\nIn the bitcoin client:\n\naddress\nrest_of_url\nbitcoin://address\nbitcoin://rest_of_url\nhttp://rest_of_url  ??\n\nMaybe in the bitcoin client you can put any site and the client\ndownloads the web to look for occurrences of \"bitcoin://\" (? or just\nvalid addresses ?) in it. It caches and shows them to you to decide\nwhat to do with each one.\nI have used other programs (jdownloader) that read the clipboard\nlooking for patterns in links and is very convenient.\n\nMaybe then parameters for the client can be added to this.\n\nbitcoin://address?amount=10.53\nbitcoin://rest_of_url?amount=10.53&green_address=r\nbitcoin://rest_of_url?amount=10.53&green_address=r&green_address_list=address1,address2,address3\n\nWhatever the community have planned for bitcoin URIs.", "summary": "Proposal to specify \"bitcoin://\" in URLs to make it easier for software to detect bitcoin addresses, with potential for additional parameters."}, {"author": "Rick Wesson", "date": "2011-12-14T23:02:25", "message_text_only": "I was looking at the wiki entry for this and noticed that your\ndescription of DNSSEC is incorrect. It is an internet standard and is\nwidely deployed in the root (.), many TLDs, ccTLDs and second leverl\ndomains.\n\nAlso understand when the IETF or ICANN adopts new (we worked on DNSSEC\nno less than 10 years) standard the horizon is at least 20 years.\nNothing and I really mean nothing is adopted in mass over shorter time\nscales.\n\nI also am largely in favor of using secured zones to publish TXT\nrecords to digital currencies. I've been thinking mainly about TXT\nusing the following format for bitcoin.\n\n_btc.<lhs>.<rhs>\n\nyou can look up the following record _btc.rick.wesson.us (from\nrick at wesson.us) which yealds\n\n; <<>> DiG 9.6-ESV-R4-P3 <<>> _btc.rick.wesson.us txt\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45136\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;_btc.rick.wesson.us.           IN      TXT\n\n;; ANSWER SECTION:\n_btc.rick.wesson.us.    299     IN      TXT     \"BTC=1\\;\n1GCVXLfF1TcpnnDLJRHk845NZhuJWQTnUD\"\n\n;; Query time: 147 msec\n\n\nwhile this isn't a secured zone, any leverage of DNSSEC would require\nthe application to have direct hooks into the stub-resolver, rather\nthan just leveraging the OS's implementation.\n\njust some food for thought...\n\n-rick\n\n\n\n2011/12/14 Jorge Tim\u00f3n <timon.elviejo at gmail.com>:\n> What if we specify \"bitcoin\" to make it easier for software (maybe the\n> browser, a plugin for the browser, the bitcoin client analyzing the\n> clipboard...) to easily detect that you expect a bitcoin address when\n> going to url?\n> If puted in the bitcoin client, the \"bitcoin://\" is optional (? and\n> can also be replaced by http ?) since from the context you already\n> expect an address or an url that will give you the address.\n>\n> In the browser:\n>\n> bitcoin://address\n> bitcoin://rest_of_url\n>\n> In the bitcoin client:\n>\n> address\n> rest_of_url\n> bitcoin://address\n> bitcoin://rest_of_url\n> http://rest_of_url \u00a0??\n>\n> Maybe in the bitcoin client you can put any site and the client\n> downloads the web to look for occurrences of \"bitcoin://\" (? or just\n> valid addresses ?) in it. It caches and shows them to you to decide\n> what to do with each one.\n> I have used other programs (jdownloader) that read the clipboard\n> looking for patterns in links and is very convenient.\n>\n> Maybe then parameters for the client can be added to this.\n>\n> bitcoin://address?amount=10.53\n> bitcoin://rest_of_url?amount=10.53&green_address=r\n> bitcoin://rest_of_url?amount=10.53&green_address=r&green_address_list=address1,address2,address3\n>\n> Whatever the community have planned for bitcoin URIs.\n>\n> ------------------------------------------------------------------------------\n> Cloud Computing - Latest Buzzword or a Glimpse of the Future?\n> This paper surveys cloud computing today: What are the benefits?\n> Why are businesses embracing it? What are its payoffs and pitfalls?\n> http://www.accelacomm.com/jaw/sdnl/114/51425149/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "DNSSEC is an internet standard widely deployed in the root, TLDs, ccTLDs, and second-level domains. TXT records can be used for digital currencies."}, {"author": "Luke-Jr", "date": "2011-12-14T23:27:34", "message_text_only": "On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson wrote:\n> I also am largely in favor of using secured zones to publish TXT\n> records to digital currencies. I've been thinking mainly about TXT\n> using the following format for bitcoin.\n> \n> _btc.<lhs>.<rhs>\n\nDon't confuse BTC (Bitcoin unit) with BC (Bitcoin in general / protocol)...\nThe hard part of using DNS will be sticking to the standard good practice of \nusing a new address for every transaction.", "summary": "Rick Wesson suggests using secured zones to publish TXT records for digital currencies, specifically proposing the format _btc.<lhs>.<rhs> for Bitcoin. However, using DNS for transactions may be challenging."}, {"author": "Rick Wesson", "date": "2011-12-15T01:22:30", "message_text_only": "understand that not *everyone* wants or will adhere to that best\npractice and in my NSHO it isn't.\n\n-rick\n\n2011/12/14 Luke-Jr <luke at dashjr.org>:\n> On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson wrote:\n>> I also am largely in favor of using secured zones to publish TXT\n>> records to digital currencies. I've been thinking mainly about TXT\n>> using the following format for bitcoin.\n>>\n>> _btc.<lhs>.<rhs>\n>\n> Don't confuse BTC (Bitcoin unit) with BC (Bitcoin in general / protocol)...\n> The hard part of using DNS will be sticking to the standard good practice of\n> using a new address for every transaction.", "summary": "Using secured zones to publish TXT records for digital currencies is a good practice, but not everyone will adhere to it. Sticking to standard practices is important."}, {"author": "Zell Faze", "date": "2011-12-15T03:57:09", "message_text_only": "Could we combine this proposal and the HTTPS proposal?\n\nThe DNSSEC TXT record could give instructions on how to query an HTTPS server to get the address.  Then we get the dynamism of HTTPS without having a rigid URL scheme for querying the server along with the advantages of DNSSEC.\n\n\n--- On Wed, 12/14/11, Rick Wesson <rick at support-intelligence.com> wrote:\n\n> From: Rick Wesson <rick at support-intelligence.com>\n> Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n> To: \"Luke-Jr\" <luke at dashjr.org>\n> Cc: bitcoin-development at lists.sourceforge.net\n> Date: Wednesday, December 14, 2011, 8:22 PM\n> understand that not *everyone* wants\n> or will adhere to that best\n> practice and in my NSHO it isn't.\n> \n> -rick\n> \n> 2011/12/14 Luke-Jr <luke at dashjr.org>:\n> > On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson\n> wrote:\n> >> I also am largely in favor of using secured zones\n> to publish TXT\n> >> records to digital currencies. I've been thinking\n> mainly about TXT\n> >> using the following format for bitcoin.\n> >>\n> >> _btc.<lhs>.<rhs>\n> >\n> > Don't confuse BTC (Bitcoin unit) with BC (Bitcoin in\n> general / protocol)...\n> > The hard part of using DNS will be sticking to the\n> standard good practice of\n> > using a new address for every transaction.\n> \n> ------------------------------------------------------------------------------\n> 10 Tips for Better Server Consolidation\n> Server virtualization is being driven by many needs.\u00a0\n> \n> But none more important than the need to reduce IT\n> complexity \n> while improving strategic productivity.\u00a0 Learn More! \n> http://www.accelacomm.com/jaw/sdnl/114/51507609/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Combining DNSSEC TXT record and HTTPS proposal could provide the dynamism of HTTPS without a rigid URL scheme for querying the server."}, {"author": "Kyle Henderson", "date": "2011-12-15T04:56:52", "message_text_only": "Just so we're clear, what is the need for HTTP at all?\n\nA query for a string and an answer can all be handled via DNS.\n\nOn Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com> wrote:\n\n> Could we combine this proposal and the HTTPS proposal?\n>\n> The DNSSEC TXT record could give instructions on how to query an HTTPS\n> server to get the address.  Then we get the dynamism of HTTPS without\n> having a rigid URL scheme for querying the server along with the advantages\n> of DNSSEC.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/2289ae2c/attachment.html>", "summary": "A proposal to combine DNSSEC TXT record and HTTPS to get the dynamism of HTTPS without a rigid URL scheme for querying the server."}, {"author": "Zell Faze", "date": "2011-12-15T06:04:54", "message_text_only": "It is a lot easier to set up an HTTP server to dynamically respond with addresses than a DNS record. \u00a0It is considered a good practice to use a different address for every payment.\n\n------------------------\n\"It stopped being just a website a long time ago. For many of us, most of us, Wikipedia has become an indispensable part of our daily lives.\"\n\u2014 Jimmy Wales, Founder of Wikipedia \nHelp protect it now. Please make a donation today: http://www.wikimediafoundation.org/wiki/Donate\n\n\n--- On Wed, 12/14/11, Kyle Henderson <k at old.school.nz> wrote:\n\nFrom: Kyle Henderson <k at old.school.nz>\nSubject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\nTo: \"Zell Faze\" <zellfaze at yahoo.com>\nCc: \"Luke-Jr\" <luke at dashjr.org>, \"Rick Wesson\" <rick at support-intelligence.com>, bitcoin-development at lists.sourceforge.net\nDate: Wednesday, December 14, 2011, 11:56 PM\n\nJust so we're clear, what is the need for HTTP at all?\n\nA query for a string and an answer can all be handled via DNS.\n\nOn Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com> wrote:\n\nCould we combine this proposal and the HTTPS proposal?\n\n\n\nThe DNSSEC TXT record could give instructions on how to query an HTTPS server to get the address. \u00a0Then we get the dynamism of HTTPS without having a rigid URL scheme for querying the server along with the advantages of DNSSEC.\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111214/5a89fb7b/attachment.html>", "summary": "Using HTTP servers to respond with addresses is easier than DNS records. It's recommended to use different addresses for each payment. Protect Wikipedia by donating."}, {"author": "Walter Stanish", "date": "2011-12-15T06:41:02", "message_text_only": ">> Just so we're clear, what is the need for HTTP at all?\n>> A query for a string and an answer can all be handled via DNS.\n\n> It is a lot easier to set up an HTTP server to dynamically respond\n> with addresses than a DNS record.\n\nInteresting that you bring up the effort factor.\n\nThe notion that every individual will want to run their own DNS or\nHTTP based alias system to dispense transaction-specific bitcoin\naddresses seems - on this basis - alone a little far fetched. Such a\nsystem would provide very little added value at significant hassle to\nthe small subset of users who could be bothered setting up such a\nscheme. Also, remember that most people in the world don't even know\nwhat DNS is, nor do they have the capacity or motivation to set up a\nprogram on a web server for what amounts to minor ongoing time savings\nand some vanity thrills.\n\nTo my mind, it is far more likely that third party hosted services\n(such as providers of hosted wallet, conventional currency holding and\nexchange services) will provide aliasing resolution, and that these\nalias resolution services will operate on an alias at provider mechanism\n(for example, IIBAN and its 'institution' codes @ ).\n\nIn addition, during the 'pre-transaction exchange' that the alias\nresolution process essentially represents, additional value could be\nadded by these types of service providers by providing functionality\npresently excluded from Bitcoin but relevant to real world financial\nsystems. For example this 'pre-transaction exchange' process might\ninclude, in addition to alias resolution, transaction metadata\nexchange (transaction description, invoice/order number, taxation\ninformation, schedules of fees and charges, pre-arranged currency\nexchange rates if filling an payment for an amount quoted in another\n(eg: conventional) currency, shipping terms, transaction reversal\n(cancellation) terms, escrow terms, etc.)\n\nRegards,\nWalter Stanish\nPayward Inc.", "summary": "HTTP is easier to set up than DNS for dynamically responding with addresses. Third-party hosted services are more likely to provide aliasing resolution. Additional functionality could be added during the pre-transaction exchange process."}, {"author": "Jordan Mack", "date": "2011-12-15T07:45:45", "message_text_only": "I believe it is also worth mentioning the possible susceptibility of a \nDOS attack on a publicly available alias system. Assuming that an alias \nlookup triggers the creation of a new Bitcoin address, the private key \nwould need to be retained indefinitely. If gone unnoticed, this could \nconsume considerable resources over time. Unlike system logs and such, \nthis is not something that can be so easily pruned.", "summary": "Publicly available alias system may be vulnerable to DOS attack, as creation of new Bitcoin address requires retention of private key indefinitely."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-15T07:52:12", "message_text_only": "2011/12/15, Jordan Mack <jordanmack at parhelic.com>:\n> I believe it is also worth mentioning the possible susceptibility of a\n> DOS attack on a publicly available alias system. Assuming that an alias\n> lookup triggers the creation of a new Bitcoin address, the private key\n> would need to be retained indefinitely. If gone unnoticed, this could\n> consume considerable resources over time. Unlike system logs and such,\n> this is not something that can be so easily pruned.\n\nYou're right. Then servers should not use a different address with\nevery lookup. Maybe don't change it more than once per\nmin/hour/whatever, maybe wait to see a payment to that address to\nstart giving another one...", "summary": "Using a publicly available alias system for Bitcoin addresses could be vulnerable to a DOS attack, consuming considerable resources over time. A solution is suggested to limit address changes."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-15T07:48:12", "message_text_only": "Andy sounded very convincing when talking in favor of URLs. What's\nwrong with his proposal?\n\n2011/12/15, Walter Stanish <walter at stani.sh>:\n> To my mind, it is far more likely that third party hosted services\n> (such as providers of hosted wallet, conventional currency holding and\n> exchange services) will provide aliasing resolution, and that these\n> alias resolution services will operate on an alias at provider mechanism\n> (for example, IIBAN and its 'institution' codes @ ).\n\nWhy don't just...\n\nbitcoin://url.without.explicitly.specifying.provider\nbitcoin://alias@provider\nbitcoin://IIBAN@authorizedBitcoinInstitution ??\n\nBy the way, I don't like the fact that a single authorized institution\nneeds to map the IIBANs to bitcoin addresses.", "summary": "Andy proposes using aliasing resolution services for Bitcoin URLs, but Walter questions the need for a single authorized institution to map IIBANs to Bitcoin addresses."}, {"author": "Walter Stanish", "date": "2011-12-15T08:26:38", "message_text_only": ">> Why don't just...\n>>\n>> bitcoin://url.without.explicitly.specifying.provider\n>> bitcoin://alias@provider\n>> bitcoin://IIBAN@authorizedBitcoinInstitution ??\n\n> Andy sounded very convincing when talking in favor of URLs. What's\n> wrong with his proposal?\n\nA URI identifies a resource and is in effect an alias itself.\nIdentifying a resource is different from interacting with it. So,\nwhile <resource-type>://<resource-type-specific-alias> will work\nsufficiently for the identification, it does not explain the\ninteraction.\n\nInteraction is a requirement, since there seems to be a widely felt\nneed to preserve anonymity through the use of temporary addresses.\nGenerating a temporary address requires some actual processing to\nachieve, since the issuing of the new address cannot be done without\ninteracting with the entity hosting the wallet (unless I'm missing\nsomething?).\n\n> By the way, I don't like the fact that a single authorized institution\n> needs to map the IIBANs to bitcoin addresses.\n\nThis is not the case. Please read my earlier response to Gavin and the\nIIBAN specification itself to clarify.  That would be a total breach\nof privacy since the entity would have access to financial information\non all transactions using the IIBAN identifiers... prior to\ntransactions being executed.\n\nIt *is* true that under the current IIBAN proposal there would be one\nentity (IANA) in charge of issuing namespace portions ('institution\ncodes' - probably best to rename these...), however:\n - The policy is strict and something similar to 'give one out to\nanyone except existing financial instutions with the pre-existing\ncapacity to issue IBAN'.\n - IANA have a pretty reasonable track record\n - This suggestion, like the entire proposal, is open for discussion\nand modification.  If you can think of a more efficient and fair way\nof assigning namespace prefixes to random entities on the internet\nthat doesn't require someone *without* an established track record of\ndoing this for the internet community to take up IANA's place, then\nI'd be happy to hear it. Whilst a bitcoin-like 'community consensus'\nsystem is conceivably possible to deploy in its place, I don't think\nit's necessary.\n\nRegards,\nWalter Stanish\nPayward, Inc.", "summary": "The proposal to use URIs for Bitcoin addresses lacks the necessary interaction for generating temporary addresses. The IIBAN proposal is open for discussion and modification."}, {"author": "Andy Parkins", "date": "2011-12-15T10:01:14", "message_text_only": "On 2011 December 15 Thursday, Walter Stanish wrote:\n\n> > Andy sounded very convincing when talking in favor of URLs. What's\n> > wrong with his proposal?\n> \n> A URI identifies a resource and is in effect an alias itself.\n> Identifying a resource is different from interacting with it. So,\n> while <resource-type>://<resource-type-specific-alias> will work\n> sufficiently for the identification, it does not explain the\n> interaction.\n\nQuite so; the BIP15 standard shouldn't be setting the format of the URI; it \nshould be setting what the format of the client-server conversation is.  \nEffectively, what headers will a requesting client send?  What headers should \na server require?  What will a server respond?\n\n> Interaction is a requirement, since there seems to be a widely felt\n> need to preserve anonymity through the use of temporary addresses.\n\nI think that's missing the point; any aliasing scheme is definitely reducing \nyour anonymity, neccessarily so -- the alias has to be looked up somewhere, \nthat somewhere reduces anonymity.  If anonymity is what you want, stick with \njust a bitcoin address.  The point of an aliasing server is surely to be able \nto give a single, unchanging, well known label to a transacting party, but \nstill enable that party to generate a new address per transaction.\n\nI want my webshop to be able to say \"please pay 3.20 BTC to \nhttps://mywebshop.com/payments/orderid=27282\" to enable the automatic \nconnection from orderid to bitcoin address (which my payment system can then \nmonitor for payment receipt).  (This is just one example).\n\n> Generating a temporary address requires some actual processing to\n> achieve, since the issuing of the new address cannot be done without\n> interacting with the entity hosting the wallet (unless I'm missing\n> something?).\n\nWell yes; but then the client has no idea what address to send to unless it \nconnects to that URI... interaction/address generation is done when that \nconnection is made.\n\nIn short: I don't really think that this aliasing system should be concerning \nitself with preserving anonymity of the receiving party.  That is almost \ncertainly already gone (I'm hardly likely to send money to someone I don't \nknow unless I like gifting random cash).  The sending party loses a little \nanonymity because their IP is revealed when they connect to the aliasing \nsystem.  But there is very little anonymity in a supplier-client relationship \nanyway (you have to say what goods you want, and where you want them, and you \nhad to interact with a website when you were ordering already).\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/74e9c385/attachment.sig>", "summary": "The BIP15 standard should set the format of the client-server conversation, not the URI format, as interaction is necessary for generating temporary addresses. An aliasing server can give a single, unchanging, well-known label to a transacting party, but still enable that party to generate a new address per transaction. Anonymity is already lost in a supplier-client relationship, and any aliasing scheme necessarily reduces anonymity."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-15T11:08:13", "message_text_only": "2011/12/15, Walter Stanish <walter at stani.sh>:\n> Interaction is a requirement, since there seems to be a widely felt\n> need to preserve anonymity through the use of temporary addresses.\n> Generating a temporary address requires some actual processing to\n> achieve, since the issuing of the new address cannot be done without\n> interacting with the entity hosting the wallet (unless I'm missing\n> something?).\n\nI thought the interaction was just the server answering with an\naddress (maybe also amount and other details). But we don't have to\ndefine how the server will get that address.\nSome possibilities:\n\n-A static address: less anonymity, but some people may not care. Say a\ndonation address.\n-The servers stores the recipient private keys and generates a new one\nfor each payment.\n-The server stores a set of addresses provided by the recipient and it\nmanages what address it gives in each request (like in the web service\nI told you I can't find).\n\n> It *is* true that under the current IIBAN proposal there would be one\n> entity (IANA) in charge of issuing namespace portions ('institution\n> codes' - probably best to rename these...), however:\n>  ...\n\nIANA reserves some namespace for bitcoin. All right.\nThe problem comes later.\n\"\n* Systems such as [BITCOIN] have quirks that require slightly\n      delayed settlement due to the nature of their decentralized,\n      consensus-based approach to fiscal transfer.  Users requiring\n      instant settlement MAY thus see benefit in the use of a\n      centralized proxy system or organization as an instantaneous\n      financial settlement provider (the 'institution').\n\"\nAs I understand it (probably I'm wrong, because I haven't read the\nwhole IIBAN draft) there would be a \"bitcoin institution\" that would\nmap bitcoin addresses to the bitcoin subspace of the IIBAN.\n\n\"    * IANA MAY delegate management of portions of the IIBAN name space\n      through such institutions.\"\n\nIf we can find a deterministic method to map the subspace the all\npossible bitcoin addresses, everything's fine again. But if that's not\npossible, we would need a central institution to manage the mapping\nand that would be a step back in decentralization.\nI can't find the answer of Gavin's question \"How is the mapping done?\"\nin your post. I'll re-read it though.", "summary": "The need for temporary addresses to preserve anonymity requires interaction with the wallet host, and there are different ways to generate temporary addresses. The IIBAN proposal may require a centralized institution to manage the mapping of bitcoin addresses to the IIBAN subspace, which could be a step back in decentralization."}, {"author": "Christian Decker", "date": "2011-12-15T11:22:29", "message_text_only": "> But we don't have to\n> define how the server will get that address.\n> Some possibilities:\n>\n> -A static address: less anonymity, but some people may not care. Say a\n> donation address.\n> -The servers stores the recipient private keys and generates a new one\n> for each payment.\n> -The server stores a set of addresses provided by the recipient and it\n> manages what address it gives in each request (like in the web service\n> I told you I can't find).\n>\n\nExactly, I think we should starting separating the minimal protocol that is\nto be supported by everybody, and the rest can be summed up in a few best\npractices, no need to standardize the part that to the user is transparent.\nI was on the same lines as Andy, which is that in order to have require a\npayment I probably have an order/transaction pending with my vendor or have\nan account to be filled, so there's a 1-to-1 mapping between the details\npage and the bitcoin address I have to send to.\n\nAs a further possibility we could use <meta> tags like the OpenID server\ndelegation mechanism. It would allow customers to open the transaction\ndetails page, see that everything is ok, then paste the same URL into the\nbitcoin client, the bitcoin client retrieves the URL, parses the meta tag\nand knows what to send where. Alternatively the Bitcoin Client sends an\nAccept header which tells the server to return just the address.\n\nAs for the format I'd say either a Bitcoin address or a Bitcoin URI [1]\nwhich ought to be flexible enough as it includes amount and messages, for\nthe customer to be able to track transactions.\n\nRegards,\nChris\n\n[1] https://en.bitcoin.it/wiki/URI_Scheme\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/c44d2b60/attachment.html>", "summary": "The server can get the recipient's address in various ways, including a static address, generating a new one for each payment, or managing a set of addresses. Best practices can be used instead of standardizing the transparent part of the process. The use of <meta> tags or Bitcoin URI can be used for the format."}, {"author": "Walter Stanish", "date": "2011-12-16T05:42:01", "message_text_only": ">> Interaction is a requirement, since there seems to be a widely felt\n>> need to preserve anonymity through the use of temporary addresses.\n>> Generating a temporary address requires some actual processing to\n>> achieve, since the issuing of the new address cannot be done without\n>> interacting with the entity hosting the wallet (unless I'm missing\n>> something?).\n>\n> I thought the interaction was just the server answering with an\n> address (maybe also amount and other details). But we don't have to\n> define how the server will get that address.\n> Some possibilities:\n>\n> -A static address: less anonymity, but some people may not care. Say a\n> donation address.\n\nSure, but this falls short of requirements for most users.\n\n> -The servers stores the recipient private keys and generates a new one\n> for each payment.\n\nEquivalent to hosted wallet, which is decentralization in a BIG way,\nbut apparently a very popular choice (for pragmatic reasons).\nProbably not going away.\n\n> -The server stores a set of addresses provided by the recipient and it\n> manages what address it gives in each request (like in the web service\n> I told you I can't find).\n\nTrue.  However, probably a poor user experience for most users re:\nprovision of temporary addresses to the alias host.  Also the\nknowledge of which entity for which inbound payment has been allocated\nwhich temporary address would be a significant complexity in the alias\nhost / end user relationship that you gloss over.  This is important\nfor businesses, since inbound payments are only really possible to\ntrack - AFAIK (correct me if I'm wrong, the two exceptions being the\nedge case of people requesting inbound transactions where every single\ntransaction is of a unique amount and no 'partial payment' (2x\ntransactions for one inbound payment) and the case where every single\ninbound payer's sending address is previously known) - by issuing\nunique recipient addresses to each client.  In short, it's kind of\nsimilar to hosted wallet as well, since you need to absolutely trust\nyour host (they could tell people wishing to make payments to you to\npay someone else instead!).\n\n> IANA reserves some namespace for bitcoin. All right.\n> The problem comes later.\n> \"\n> * Systems such as [BITCOIN] have quirks that require slightly\n>      delayed settlement due to the nature of their decentralized,\n>      consensus-based approach to fiscal transfer.  Users requiring\n>      instant settlement MAY thus see benefit in the use of a\n>      centralized proxy system or organization as an instantaneous\n>      financial settlement provider (the 'institution').\n> \"\n> As I understand it (probably I'm wrong, because I haven't read the\n> whole IIBAN draft) there would be a \"bitcoin institution\" that would\n> map bitcoin addresses to the bitcoin subspace of the IIBAN.\n\nMany people can get namespace management rights as\n'institutions' (in the current draft's terminology), then manage\nthe assignement of IIBANs within that space as they wish.\nThere would be many institutions with many IIBANs.  The\nassociation of a bitcoin address (or many addresses, or\nthe capacity to generate temporary addresses as required)\nwith an IIBAN would be the responsibility of either that\nnamespace manager ('institution') or the individual who\nhas acquired that IIBAN via that namespace manager\n('insitution').\n\n> \"    * IANA MAY delegate management of portions of the IIBAN name space\n>      through such institutions.\"\n>\n> If we can find a deterministic method to map the subspace the all\n> possible bitcoin addresses, everything's fine again. But if that's not\n> possible, we would need a central institution to manage the mapping\n> and that would be a step back in decentralization.\n\nMany institutions, many policies, no absolute centralization, though\nadmittedly increased centralization. However, this is a problem shared\nwith two of your proposals (the subset not disqualified as failing to\nmeet most user's requirements) when you consider that most users (if\nyou consider 'the whole world's mobile devices' a potential userbase,\nas I prefer to do) do not have the technical skills to configure,\nsecure and manage their own 'always on' alias service hosts, nor the\ncapacity to host blockchain copies on those devices (either due to\nspace or bandwidth requirements. As an aside, this is a large part of\nthe unfortunate reality that is tending to push Bitcoin towards hosted\nwallet solutions)\n\n> I can't find the answer of Gavin's question \"How is the mapping done?\"\n> in your post. I'll re-read it though.\n\nNear the top, beginning \"It seems a clarification is in order,\napologies for not being clearer.\"  (Re-reading, it's still not that\nclear!)\n\nRegards,\nWalter Stanish\nPayward, Inc.", "summary": "Temporary addresses require interaction with wallet hosts for issuance. Options include static addresses, hosted wallets, or recipient-provided addresses managed by the server. Instant settlement may require a centralized proxy system."}, {"author": "Pieter Wuille", "date": "2011-12-16T08:46:33", "message_text_only": "On Thu, Dec 15, 2011 at 04:26:38PM +0800, Walter Stanish wrote:\n> Interaction is a requirement, since there seems to be a widely felt\n> need to preserve anonymity through the use of temporary addresses.\n> Generating a temporary address requires some actual processing to\n> achieve, since the issuing of the new address cannot be done without\n> interacting with the entity hosting the wallet (unless I'm missing\n> something?).\n\nJust replying to this one comment: yes, some interaction is always\nnecessary, but not necessarily directly with the entity hosting the wallet.\nThere are some EC crypto tricks to do this (often mentioned under\n\"deterministic wallets\" before):\n\nThe wallet-hosting entity has a private key x, with public key X.\nThe address-generating entity knows X, and generates a fresh private\nkey y for each transaction. For each, it calculates Z=y*X, and asks\nthe client to pay to hash160(Z). Afterwards, it can send a bunch of\ny's to the wallet hosting service, which can reconstruct z=y*x for\neach. Alternatively, the y's can be generated according to a predefined\nscheme instead.\n\n-- \nPieter", "summary": "Temporary addresses for anonymity require interaction with the wallet-hosting entity. EC crypto tricks can generate fresh private keys for each transaction."}, {"author": "Rick Wesson", "date": "2011-12-15T15:44:58", "message_text_only": "> Why don't just...\n>\n> bitcoin://url.without.explicitly.specifying.provider\n> bitcoin://alias@provider\n> bitcoin://IIBAN@authorizedBitcoinInstitution ??\n>\n> By the way, I don't like the fact that a single authorized institution\n> needs to map the IIBANs to bitcoin addresses.\n\nThe IANA is a good institution to rely on for mapping things, much\nhistory and wise execution there.\n\n-rick", "summary": "Proposal to use IANA for mapping IIBANs to bitcoin addresses instead of relying on a single authorized institution."}, {"author": "Rick Wesson", "date": "2011-12-15T15:42:59", "message_text_only": "Are we designing protocols or applications, its easier and better for all\ninvolved if we design a protocol and then let the applications implement\nit.\n\nLets stick to understanding how labels (dns) or URIs can be leveraged to\nsecurly obtain a bitcoin address, rather than reviewing capabilities of\ncurrent applications.\n\n-rick\n\nOn Wed, Dec 14, 2011 at 10:04 PM, Zell Faze <zellfaze at yahoo.com> wrote:\n\n> It is a lot easier to set up an HTTP server to dynamically respond with\n> addresses than a DNS record.  It is considered a good practice to use a\n> different address for every payment.\n>\n> ------------------------\n> \"It stopped being just a website a long time ago. For many of us, most of\n> us, Wikipedia has become an indispensable part of our daily lives.\"\n> \u2014 Jimmy Wales, *Founder of Wikipedia*\n> <http://2e740a1a.qvvo.com/>\n>\n> Help protect it now. Please make a donation today:\n> http://www.wikimediafoundation.org/wiki/Donate\n>\n>\n> --- On *Wed, 12/14/11, Kyle Henderson <k at old.school.nz>* wrote:\n>\n>\n> From: Kyle Henderson <k at old.school.nz>\n>\n> Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n> To: \"Zell Faze\" <zellfaze at yahoo.com>\n> Cc: \"Luke-Jr\" <luke at dashjr.org>, \"Rick Wesson\" <\n> rick at support-intelligence.com>, bitcoin-development at lists.sourceforge.net\n> Date: Wednesday, December 14, 2011, 11:56 PM\n>\n>\n> Just so we're clear, what is the need for HTTP at all?\n>\n> A query for a string and an answer can all be handled via DNS.\n>\n> On Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com<http://mc/compose?to=zellfaze@yahoo.com>\n> > wrote:\n>\n> Could we combine this proposal and the HTTPS proposal?\n>\n> The DNSSEC TXT record could give instructions on how to query an HTTPS\n> server to get the address.  Then we get the dynamism of HTTPS without\n> having a rigid URL scheme for querying the server along with the advantages\n> of DNSSEC.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/28f5a961/attachment.html>", "summary": "Designing a protocol is better than designing applications; focus on using labels or URIs to securely obtain a bitcoin address."}, {"author": "slush", "date": "2011-12-16T00:07:58", "message_text_only": "I really like this proposal with standard URLs. All other proposals like\nDNS mapping or email aliases converted to URLs with some weird logic looks\nstrange to me.\n\nPlain URLs (returning address in response body, redirecting to URI\n\"bitcoin:<address>\" or anything else) are very clear solution, easy to\nimplement in clients and very easy to understand by people. It's also\nextremely flexible - almost everybody can somewhere setup static file\ncontaining his \"personal\" addresses or it's very easy to integrate such\nsolution with eshops (providing custom address for given order) etc. I'm\ndefinitely for this solution.\n\nBest,\nslush\n\nOn Tue, Dec 13, 2011 at 5:22 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n\n> On 2011 December 13 Tuesday, Amir Taaki wrote:\n>\n> > Maybe I wasn't clear enough in the document, but this is the intent with\n> > the HTTPS proposal.\n>\n> I don't like the idea of a hard-coded mapping at all.  We shouldn't be\n> making\n> choices on behalf of server operators.  It's up to them how they arrange\n> their\n> domain names and paths.\n>\n> I also agree that DNS is not the technology to use.  DNS is a nightmare.\n>\n> > genjix at foo.org\n> >\n> > Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system\n> > responds with a bitcoin address. Whether the system gives you a new\n> > address from a pool of addresses, or contacts the merchant behind the\n> > scenes is implementation defined.\n> >\n> > I'll clarify it later. This is the relevant line:\n> >\n> > string strRequestUrl = strDomain + \"/bitcoin-alias/?handle=\" +\n> > pszEncodedNick;\n> >\n> > Between HTTPS service and server service, I lean slightly towards HTTPS\n> > (automatic encrypted connection, CAs + all benefits of DNS). But still\n> > interested in arguments in favour of a server service (daemon answering\n> > queries).\n>\n> Why bother with an encoding scheme at all?  If the address\n>\n>  genjix at foo.org\n>\n> always maps to\n>\n>  https://foo.org/bitcoin-alias/?handle=genjix\n>\n> Then forget the hardcoding of \"https\" the hardcoding of \"bitcoin-alias\" and\n> \"?handle=\" and the original email-looking \"genjix at foo.org\".  Just use the\n> URL.\n> Then the author of the service can use whatever they want.\n>\n>  \"Can I pay you 10 BTC?\"\n>  \"Sure, send it to 'https://bitcoinalias.foo.org/genjix/'\"\n>\n> While I might implement my alias server like this:\n>\n>  \"Sure, send it to 'https://google.com/bitcoin/?andyparkins'\"\n>  \"Sure, send it to 'https://parkins.co.uk/\"\n>\n> ... or any other URL they want -- any of which suit might suit me and my\n> webserver better than whatever mapping would otherwise be hard-coded.  The\n> world is already very familiar with URLs so this is no more scary than the\n> email address.  What's more, the email address form looks _too much_ like\n> an\n> email address, and will only lead to confusion ... \"send it to\n> genjix at foo.org\"\n> \"so I use outlook express for that, right?\"  \"erm, no, you put it in your\n> bitcoin client\".\n>\n> The URL form could easily be made to detect a browser connecting rather\n> than a\n> bitcoin client (and this is an area that would benefit from a standards\n> document -- define the headers and user agent triggers that an alias server\n> expects) and give them better instructions.\n>\n> https can be specified as the default, so  \"https://\" can be optional when\n> they're typing.  If, in the future, bitcoin gets a distributed peer-to-peer\n> alias system, then a new URL type can be added easily\n> \"bcalias://andyparkins\"\n> might automatically find my node in the network and query it for an address\n> (or whatever).\n>\n> All of the above is exactly why OpenID chose to use URLs for ID.\n>\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n>\n>\n> ------------------------------------------------------------------------------\n> Systems Optimization Self Assessment\n> Improve efficiency and utilization of IT resources. Drive out cost and\n> improve service delivery. Take 5 minutes to use this Systems Optimization\n> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/c1446aa4/attachment.html>", "summary": "Slush supports using standard URLs for Bitcoin addresses, finding them easy to implement and understand, and flexible for personal or business use."}, {"author": "Rick Wesson", "date": "2011-12-16T15:52:14", "message_text_only": "On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:\n> I really like this proposal with standard URLs. All other proposals like DNS\n> mapping or email aliases converted to URLs with some weird logic looks\n> strange to me.\n\nwow, really. Maybe you could review some RFCs, there are thousands of\nexamples where some really smart engineers chose the exact opposite\npath which you propose below.\n\n-rick\n\n> Plain URLs (returning address in response body, redirecting to URI\n> \"bitcoin:<address>\" or anything else) are very clear solution, easy to\n> implement in clients and very easy to understand by people. It's also\n> extremely flexible - almost everybody can somewhere setup static file\n> containing his \"personal\" addresses or it's very easy to integrate such\n> solution with eshops (providing custom address for given order) etc. I'm\n> definitely for this solution.\n>\n> Best,\n> slush\n>\n> On Tue, Dec 13, 2011 at 5:22 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n>>\n>> On 2011 December 13 Tuesday, Amir Taaki wrote:\n>>\n>> > Maybe I wasn't clear enough in the document, but this is the intent with\n>> > the HTTPS proposal.\n>>\n>> I don't like the idea of a hard-coded mapping at all. \u00a0We shouldn't be\n>> making\n>> choices on behalf of server operators. \u00a0It's up to them how they arrange\n>> their\n>> domain names and paths.\n>>\n>> I also agree that DNS is not the technology to use. \u00a0DNS is a nightmare.\n>>\n>> > genjix at foo.org\n>> >\n>> > Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system\n>> > responds with a bitcoin address. Whether the system gives you a new\n>> > address from a pool of addresses, or contacts the merchant behind the\n>> > scenes is implementation defined.\n>> >\n>> > I'll clarify it later. This is the relevant line:\n>> >\n>> > string strRequestUrl = strDomain + \"/bitcoin-alias/?handle=\" +\n>> > pszEncodedNick;\n>> >\n>> > Between HTTPS service and server service, I lean slightly towards HTTPS\n>> > (automatic encrypted connection, CAs + all benefits of DNS). But still\n>> > interested in arguments in favour of a server service (daemon answering\n>> > queries).\n>>\n>> Why bother with an encoding scheme at all? \u00a0If the address\n>>\n>> \u00a0genjix at foo.org\n>>\n>> always maps to\n>>\n>> \u00a0https://foo.org/bitcoin-alias/?handle=genjix\n>>\n>> Then forget the hardcoding of \"https\" the hardcoding of \"bitcoin-alias\"\n>> and\n>> \"?handle=\" and the original email-looking \"genjix at foo.org\". \u00a0Just use the\n>> URL.\n>> Then the author of the service can use whatever they want.\n>>\n>> \u00a0\"Can I pay you 10 BTC?\"\n>> \u00a0\"Sure, send it to 'https://bitcoinalias.foo.org/genjix/'\"\n>>\n>> While I might implement my alias server like this:\n>>\n>> \u00a0\"Sure, send it to 'https://google.com/bitcoin/?andyparkins'\"\n>> \u00a0\"Sure, send it to 'https://parkins.co.uk/\"\n>>\n>> ... or any other URL they want -- any of which suit might suit me and my\n>> webserver better than whatever mapping would otherwise be hard-coded. \u00a0The\n>> world is already very familiar with URLs so this is no more scary than the\n>> email address. \u00a0What's more, the email address form looks _too much_ like\n>> an\n>> email address, and will only lead to confusion ... \"send it to\n>> genjix at foo.org\"\n>> \"so I use outlook express for that, right?\" \u00a0\"erm, no, you put it in your\n>> bitcoin client\".\n>>\n>> The URL form could easily be made to detect a browser connecting rather\n>> than a\n>> bitcoin client (and this is an area that would benefit from a standards\n>> document -- define the headers and user agent triggers that an alias\n>> server\n>> expects) and give them better instructions.\n>>\n>> https can be specified as the default, so \u00a0\"https://\" can be optional when\n>> they're typing. \u00a0If, in the future, bitcoin gets a distributed\n>> peer-to-peer\n>> alias system, then a new URL type can be added easily\n>> \"bcalias://andyparkins\"\n>> might automatically find my node in the network and query it for an\n>> address\n>> (or whatever).\n>>\n>> All of the above is exactly why OpenID chose to use URLs for ID.\n>>\n>>\n>>\n>> Andy\n>>\n>> --\n>> Dr Andy Parkins\n>> andyparkins at gmail.com\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Systems Optimization Self Assessment\n>> Improve efficiency and utilization of IT resources. Drive out cost and\n>> improve service delivery. Take 5 minutes to use this Systems Optimization\n>> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live! \u00a0Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Slush prefers standard URLs for Bitcoin addresses, finding other proposals like DNS mapping or email aliases converted to URLs strange."}, {"author": "slush", "date": "2011-12-16T16:36:43", "message_text_only": "OK, I'm ignoring your sarcastic style, I just wanted to support the URL\nidea, which is KISS attitude, in the oposite of everything else proposed\nhere. I'm really affraid of over-engineering the aliases, which will make\nit hard to implement in clients. Somebody noticed account implementation in\nstandard client - yes, it's good example of fail.\n\nI still don't see any serious issue with the URL proposals. And sipa's idea\nof posting back the transaction ID is also interesting, prividing yet\nanother flexibility in implementation and possible usage.\n\nBtw, Rick, feel free to provide me some relevant RFCs which are solving\nsimilar problems like BIP 15. And no, it's not sarcasm, I really want to\nlearn something new. Until now I just feel we're reinventing wheel or\nraping some stuff which we should not touch at all (DNS).\n\nslush\n\nOn Fri, Dec 16, 2011 at 4:52 PM, Rick Wesson\n<rick at support-intelligence.com>wrote:\n\n> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:\n> > I really like this proposal with standard URLs. All other proposals like\n> DNS\n> > mapping or email aliases converted to URLs with some weird logic looks\n> > strange to me.\n>\n> wow, really. Maybe you could review some RFCs, there are thousands of\n> examples where some really smart engineers chose the exact opposite\n> path which you propose below.\n>\n> -rick\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/97352afb/attachment.html>", "summary": "Slush supports the KISS attitude of using standard URLs, opposed to over-engineering aliases, and sees no serious issue with URL proposals."}, {"author": "Andy Parkins", "date": "2011-12-16T17:10:10", "message_text_only": "On 2011 December 16 Friday, Rick Wesson wrote:\n> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:\n> > I really like this proposal with standard URLs. All other proposals like\n> > DNS mapping or email aliases converted to URLs with some weird logic\n> > looks strange to me.\n> \n> wow, really. Maybe you could review some RFCs, there are thousands of\n> examples where some really smart engineers chose the exact opposite\n> path which you propose below.\n\nCould you point me at an example?\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/017b7ff8/attachment.sig>", "summary": "A discussion on proposals for standard URLs, with one participant suggesting reviewing RFCs for examples of alternative approaches."}, {"author": "Rick Wesson", "date": "2011-12-16T17:41:25", "message_text_only": "Its a negative example -- in that the IETF does not specify anything\nin the PATH part of the URI. The scheme, sure, but not in the path,\nthere are many types of URI schemes ( start with RFC 2396 )\n\nThere is significant upside to having your own scheme and having apps\nunderstand how to integrate with it. Frankly, having just one client\n(I understand there are more) is an artifact that hinders acceptance\nand participation. If you want to go the route of https then\nspecifying a scheme is your path forward\n\nI still believe that it is experience that is leading this thread down\nthe rat-hole of CGI and HTTP requests. The stuff isn't magic, it is\njust what you are used to. Review the bitcoin protocol, there is an\nelegance there -- not found  in the https schemes proposed thus far.\nCGI isn't a protocol, nor does it address usability/identity issues.\n\nProviding a mapping from user at authority.tld addresses usability and\nidentity. I'd like to see an elegant transformation, specifically I\ntake to task anyone that advocates\nhttps://authority/foo/user?tx=1zhd789632uilos as elegant.\n\n-rick\n\n\nOn Fri, Dec 16, 2011 at 9:10 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On 2011 December 16 Friday, Rick Wesson wrote:\n>> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:\n>> > I really like this proposal with standard URLs. All other proposals like\n>> > DNS mapping or email aliases converted to URLs with some weird logic\n>> > looks strange to me.\n>>\n>> wow, really. Maybe you could review some RFCs, there are thousands of\n>> examples where some really smart engineers chose the exact opposite\n>> path which you propose below.\n>\n> Could you point me at an example?\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com", "summary": "The IETF does not specify anything in the PATH part of the URI, but having your own scheme and having apps understand how to integrate with it has significant upside. The use of CGI and HTTP requests is not magic, it is just what people are used to. Providing a mapping from user at authority.tld addresses usability and identity."}, {"author": "Amir Taaki", "date": "2011-12-16T18:29:37", "message_text_only": "You have to be seriously joking to call the bitcoin protocol elegant. A message based system over TCP with constantly changing endians that needs to lookup its own IP address on several websites is not elegant. It is functioning, not elegant.\n\nAlso it is kind of dick to come guns blaring and start insulting slush who runs one of the biggest mining pools and is working on electrum, and sipa who develops the satoshi bitcoin.\n\nKhalahan said:\n\n> Namecoin is a peer-to-peer generic name/value datastore system\n\nNamecoin has the same problem as DNS. From the document:\n\n\"The disadvantage of DNS TXT records is that updating a record takes \ntime. This encourages people to not use new addresses per transaction \nwhich has certain security issues.\"\n\n\n________________________________\n From: Rick Wesson <rick at support-intelligence.com>\nTo: Andy Parkins <andyparkins at gmail.com> \nCc: bitcoin-development at lists.sourceforge.net \nSent: Friday, December 16, 2011 5:41 PM\nSubject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n \nIts a negative example -- in that the IETF does not specify anything\nin the PATH part of the URI. The scheme, sure, but not in the path,\nthere are many types of URI schemes ( start with RFC 2396 )\n\nThere is significant upside to having your own scheme and having apps\nunderstand how to integrate with it. Frankly, having just one client\n(I understand there are more) is an artifact that hinders acceptance\nand participation. If you want to go the route of https then\nspecifying a scheme is your path forward\n\nI still believe that it is experience that is leading this thread down\nthe rat-hole of CGI and HTTP requests. The stuff isn't magic, it is\njust what you are used to. Review the bitcoin protocol, there is an\nelegance there -- not found\u00a0 in the https schemes proposed thus far.\nCGI isn't a protocol, nor does it address usability/identity issues.\n\nProviding a mapping from user at authority.tld addresses usability and\nidentity. I'd like to see an elegant transformation, specifically I\ntake to task anyone that advocates\nhttps://authority/foo/user?tx=1zhd789632uilos as elegant.\n\n-rick\n\n\nOn Fri, Dec 16, 2011 at 9:10 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On 2011 December 16 Friday, Rick Wesson wrote:\n>> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:\n>> > I really like this proposal with standard URLs. All other proposals like\n>> > DNS mapping or email aliases converted to URLs with some weird logic\n>> > looks strange to me.\n>>\n>> wow, really. Maybe you could review some RFCs, there are thousands of\n>> examples where some really smart engineers chose the exact opposite\n>> path which you propose below.\n>\n> Could you point me at an example?\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n\n------------------------------------------------------------------------------\nLearn Windows Azure Live!\u00a0 Tuesday, Dec 13, 2011\nMicrosoft is holding a special Learn Windows Azure training event for \ndevelopers. It will provide a great way to learn Windows Azure and what it \nprovides. You can attend the event by watching it streamed LIVE online.\u00a0 \nLearn more at http://p.sf.net/sfu/ms-windowsazure\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/9780da73/attachment.html>", "summary": "Bitcoin protocol is functional but not elegant, with constantly changing endians and the need to lookup its own IP address. Namecoin has the same problem as DNS."}, {"author": "Gavin Andresen", "date": "2011-12-16T19:06:52", "message_text_only": "First: everybody please try to focus on the issues/ideas, and try to\navoid this becoming a flame war.\n\nSecond: I think Walter Stanish made several good points that may have\nbeen missed in all the long posts and discussion, the main one being:\n\nThe banking industry has been dealing with many of these issues for\nyears; I think we should not dismiss their experience.\n\nI think there is also a huge public relations benefit to using a\nstandard like IIBAN instead of inventing our own. Having a Bitcoin\nPayment Routing Address (or whatever it ends up being called) that\nlooks like the number issues by big financial institutions will give\npeople the warm fuzzies.\n\nI don't really care what happens behind the scenes, as long as it is\nas secure as an HTTPS connection (RE: CA pwnage:  there's no such\nthing as perfect security, and until a more secure solution comes\nalong HTTPS is the best we've got).\n\nAnd I'll reiterate that there doesn't have to be just one solution.\n\nMy only concern is that IIBAN is Yet Another Fledgling Standard, and\nthose little details that remain to be worked out could take years to\nactually work out.\n\n-- \n--\nGavin Andresen", "summary": "Banking industry's experience in dealing with issues should not be dismissed. Using a standard like IIBAN for Bitcoin Payment Routing Address has PR benefits. Multiple solutions can coexist."}, {"author": "Rick Wesson", "date": "2011-12-16T19:22:19", "message_text_only": "Agreed, I find measured dialog much more valuable. I also agree that\nstandards take time and are messy, though choosing a standard allows\nadditional participation and can drive interopability. One does not\nneed to accept IBANN but we should participate in the dialog in its\ndevelopment. internet-drafts don't make it through the process\nunchanged. IBANN is a starting point not the end of the discussion.\n\n-rick\n\nOn Fri, Dec 16, 2011 at 11:06 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> First: everybody please try to focus on the issues/ideas, and try to\n> avoid this becoming a flame war.\n>\n> Second: I think Walter Stanish made several good points that may have\n> been missed in all the long posts and discussion, the main one being:\n>\n> The banking industry has been dealing with many of these issues for\n> years; I think we should not dismiss their experience.\n>\n> I think there is also a huge public relations benefit to using a\n> standard like IIBAN instead of inventing our own. Having a Bitcoin\n> Payment Routing Address (or whatever it ends up being called) that\n> looks like the number issues by big financial institutions will give\n> people the warm fuzzies.\n>\n> I don't really care what happens behind the scenes, as long as it is\n> as secure as an HTTPS connection (RE: CA pwnage: \u00a0there's no such\n> thing as perfect security, and until a more secure solution comes\n> along HTTPS is the best we've got).\n>\n> And I'll reiterate that there doesn't have to be just one solution.\n>\n> My only concern is that IIBAN is Yet Another Fledgling Standard, and\n> those little details that remain to be worked out could take years to\n> actually work out.\n>\n> --\n> --\n> Gavin Andresen\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live! \u00a0Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Participants discuss the benefits of using a standard like IIBAN for Bitcoin Payment Routing Address, which can drive interoperability and provide public relations benefits."}, {"author": "Andy Parkins", "date": "2011-12-16T20:58:27", "message_text_only": "On Friday 16 Dec 2011 19:06:52 Gavin Andresen wrote:\n\n> I think there is also a huge public relations benefit to using a\n> standard like IIBAN instead of inventing our own. Having a Bitcoin\n> Payment Routing Address (or whatever it ends up being called) that\n> looks like the number issues by big financial institutions will give\n> people the warm fuzzies.\n\nI can see the PR advantages, but isn't mapping from one massively long, \nmulti-character, human-opaque number (IBAN) to another (bitcoin address) a \nbit of a waste of time?\n\nSurely the point of all this is to provide at least the possibility of a \nhuman-readable name for a bitcoin-address?\n\nIsn't there a possibility that one day we might want to be able to say \"send \nme those bitcoins you owe me to bitcoin.yahoo.co.uk/andyparkins\"?  Or \nsimilar?\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "Using a standard like IIBAN for Bitcoin Payment Routing Address can have a huge public relations benefit and give people a sense of familiarity. However, the ultimate goal is to provide human-readable names for Bitcoin addresses."}, {"author": "Andy Parkins", "date": "2011-12-16T20:54:50", "message_text_only": "On Friday 16 Dec 2011 17:41:25 Rick Wesson wrote:\n> Its a negative example -- in that the IETF does not specify anything\n> in the PATH part of the URI. The scheme, sure, but not in the path,\n> there are many types of URI schemes ( start with RFC 2396 )\n\nYou seem to have jumped off the topic; you mentioned that there were \nthousands of RFCs that we should review over why we shouldn't use a URI; and \nyou've pointed at an RFC that shows how a URI can be used.\n\nWhile you're right that CGI and HTTP aren't magic; they are commonplace; and \nit's important when we want an infinitely expandable mapping system that \npeople can use technology they are already familiar with. People already \nhave web servers, people already understand URIs.  It's not \"just what we \nare used to\"; people who can cope with development of the bitcoin protocol \naren't going to be worried about protocol complexity.  It is a concern about \nwhat the rest of the world will have to do to get a bitcoin alias.\n\n> Providing a mapping from user at authority.tld addresses usability and\n\nNo it doesn't address usability at all, because it falls down on the first \nattempt: what if I want to supply a URI that allows my web service to link \nan invoice number to an issued bitcoin address?  You've forced every mapping \nservice to be identical, and limited.\n\n> identity. I'd like to see an elegant transformation, specifically I\n> take to task anyone that advocates\n> https://authority/foo/user?tx=1zhd789632uilos as elegant.\n\nYou've been unfair, the equivalent of your \"user at authority.tld\" is \n\"https://authority.tld/user\" or \"https://user.authority.tld/\" or \n\"https://google.com/bitcoin/user\" or any of an infinite number of other \nvariations that _I_ as the mapper get to choose rather than whoever wrote \nthe BIP; all of which are arguably no less \"elegant\" than that simple email.\n\nThere is no equivalent in the other direction though.  For someone who \nwant's to supply the TX to their mapping server... where does it go in \n\"user at authority.tld\"?\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "The IETF does not specify anything in the PATH part of the URI, but it's important to use technology people are already familiar with for usability."}, {"author": "Rick Wesson", "date": "2011-12-16T21:50:54", "message_text_only": "On Fri, Dec 16, 2011 at 12:54 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n\n[snip]\n\n>\n> You've been unfair, the equivalent of your \"user at authority.tld\" is\n> \"https://authority.tld/user\" or \"https://user.authority.tld/\" or\n> \"https://google.com/bitcoin/user\" or any of an infinite number of other\n> variations that _I_ as the mapper get to choose rather than whoever wrote\n> the BIP; all of which are arguably no less \"elegant\" than that simple email.\n>\n> There is no equivalent in the other direction though. \u00a0For someone who\n> want's to supply the TX to their mapping server... where does it go in\n> \"user at authority.tld\"?\n\nactually there are many differences. Specifying a standard using a\nHTTP(s) transport for a look-up isn't something that has been done in\nthe PATH portion of the URI and that I was pointing out that there is\n*NO* RFC that specifies such for a look-up provide the inverse of many\nprotocol specifications that did *not* choose that methodology.\n\nWhat has happened is various schemes are specified, developed and\ndeployed. I am sure you are familure with many. sip:// ftp:// etc://\nmany are described at http://en.wikipedia.org/wiki/URI_scheme\n\nNAPTR records (see http://en.wikipedia.org/wiki/NAPTR_record) are\nanother area that deserves research for those that desire URI schemes.\n\nUnderstand that I am mearly advocating that as a group this work be\ndone in standards development process, and that IBANN is one such\neffort.\n\n-rick", "summary": "A discussion about the use of HTTP(s) transport for a look-up in the PATH portion of the URI and the need for standardization in the development process."}, {"author": "Luke-Jr", "date": "2011-12-13T15:47:42", "message_text_only": "On Tuesday, December 13, 2011 8:06:15 AM Gavin Andresen wrote:\n> I agree with Mike Hearn and Christian Decker-- paying to\n> 'somebody at foo.com' should become, behind the scenes, a HTTPS query to\n> https://foo.com/something. If you just want to (say) donate to\n> eff.org, then paying to '@eff.org' aught to work nicely.\n\nSeems like introducing a gaping security risk to me.\n\n> It seems to me that if it was DNS-based, the address should be\n> something like 'somebody.bitcoin.foo.com'. But I think it is unlikely\n> people will setup and run a custom DNS server just to support bitcoin\n> payments.\n\nCould always use a fixed address and email somebody at foo.com a signed message.", "summary": "Experts suggest that paying to a domain name should be done through HTTPS queries to avoid security risks, and a fixed address can be used for payments."}, {"author": "Khalahan", "date": "2011-12-16T17:36:57", "message_text_only": "Namecoin is a peer-to-peer generic name/value datastore system.\nDon't forget it's not limited to .bit usage ! So, directly mapping\nthings to .bit url would not be the optimal way of using namecoin.\n\nNamecoin is specificaly designed to map things to names in a fully\ndecentralized way. So, it's the perfect starting point to map names to\nother things (a public bitcoin address, an url, etc)\nYou won't have all the advantages of namecoin when using other systems\nlike DNS and HTTP(S) as the first entry point.\n\nWhat is namecoin ?\n\n* proven technology :\n- do not mix the namecoin technology and the dot-bit namespace with .bit\ndomains (dot-bit domains needs dot-bit compatible dns servers or proxies\n+ namecoin and have a small visibility due to the nature of\ntop-to-bottom domain name system controlled by ICANN, namecoin needs\nonly namecoin to store data !)\n- as proven and secure as bitcoin\n- merged mining provides a secure network\n\n* decentralized :\n- a lot of nodes, and you can have your own node\n- everybody can register his own name, by itself with the namecoin\nsoftware (bitcoin could even allow registration directly from it,\neasily) or by using a name provider\n- everybody can become a name provider (register for your friends and\nresell names).\n\n* no single point of failure :\n- DNS and HTTPS have several limitations (Man in the Middle attacks, no\nreliable authority of certifications, domain seizure, ...)\n\n* designed for that :\n- namecoin uses a system of namespaces to separate each usages :\nhttp://dot-bit.org/Main_Page#Namespaces.\nFor example, the \"personal namespace\" draft\n(http://dot-bit.org/Personal_Namespace) could be extended to support\nmapping to a bitcoin address, or a dedicated namespace can be used if\nprefered (the \"bitcoin/\" or \"alias/\" or \"map/\" prefixes for example).\n\n* easily connectable to bitcoin\n- they both use RPC and json to exchange informations, so connecting one\nto the other is really easy\n- bitcoin could even allow registration of names by sending an RPC\nrequest to namecoin\n\n* extensible and not limited :\n- you are not forced to store a bitcoin address directly in namecoin,\nyou can also store an url or a domain name\n- allows additional security : add a certificate fingerprint combined\nwith an https url (so, using DNS or HTTP(S) is not a major problem\nanymore if the first point of entry is really secure and configurable\n[and you use and self-signed certificate])\n- really easy to update\n- simple for simple cases\n- possibility to use a nick, an email address or a domain as name\n- other methods to get bitcoins addresses can be added later, protocol\nis extensible\n\n\nExamples of possible registered names in namecoin with the \"personal\nnamespace\" (with the \"p/\" prefix) :\n\n* An individual person with well known public addresses :\n\"p/khal\":\n{\n    \"email\": \"khal at dot-bit.org\",\n    \"bitcoin\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    \"namecoin\": \"N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9\"\n}\n\n* Another individual person with well known public addresses :\n\"p/khal at dot-bit.org\":\n{\n    \"bitcoin\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    \"namecoin\": \"N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9\"\n}\n\n* A merchant accepting payments in bitcoin, namecoin, paypal or\nothercoin (to show you how the whole namespace could be used) :\n\"p/mymerchant.com\":\n{\n    \"bitcoin\": {\n        \"url\": \"https://payto.mymerchant.com/bitcoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\"\n        \"cert\": \"https://payto.mymerchant.com/certificate.pem\",\n    },\n    \"namecoin\": {\n        \"url\": \"https://payto.mymerchant.com/namecoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\"\n    },\n    \"paypal\": \"xxxxxx at yyyyyyyyy.zzz\",\n    \"othercoin\": \"oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\n\n* A merchant with a public address, an url to generate custom addresses\nand a domain name (not sure if this case is really usefull, maybe as\nfallback)\n\"p/mymerchant2\":\n{\n    \"bitcoin\": {\n        \"url\": \"https://payto.mymerchant.com/bitcoin/\",\n        \"fpr\": \"54FFA829023FC4DEF26B9339E07F7A743DF9F926\",\n        \"dns\": \"_bitcoin.payto.mymerchant.com\",\n        \"address\": \"1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\",\n    }\n}\n\n\n* How to use it in bitcoin ?\n\nSeveral possibilities of address syntax :\n- khal, khal at dot-bit.org, mymerchant.com, mymerchant2 : no syntax limit\n- mymerchant2 at bitcoin : will conflict with names already containing a @\n- mymerchant2 at namecoin : same\n- namecoin:mymerchant2 : strange syntax, confusing with the \"uri scheme\"\n- namecoin://mymerchant2 : same\n- other ?\n\n\nHere is how things would be processed when people put an address to pay\nto in the bitcoin client :\n\n* address : khal\n-> RPC to namecoin for \"p/khal\"\n-> json processing for \"p/khal->bitcoin\"\n-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\n\n* address : khal at dot-bit.org\n-> RPC to namecoin for \"p/khal at dot-bit.org\"\n-> json processing for \"p/khal at dot-bit.org->bitcoin\"\n-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T\n\n* address : mymerchant.com\n-> RPC to namecoin for \"p/mymerchant.com\"\n-> json processing for \"p/mymerchant.com->bitcoin\"\n-> json processing for \"p/mymerchant.com->bitcoin->url\" and\n\"p/mymerchant.com->bitcoin->fpr\"\n-> https request to \"https://payto.mymerchant.com/bitcoin/\"\n-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n* address : mymerchant2\n-> RPC to namecoin for \"p/mymerchant2\"\n-> json processing for \"p/mymerchant2->bitcoin\"\n-> json processing for \"p/mymerchant2->bitcoin->url\" and\n\"p/mymerchant2->bitcoin->fpr\"\n-> https request to \"https://payto.mymerchant.com/bitcoin/\"\n-> result : error (website unavailable, page not found, timeout, etc)\n-> json processing for \"p/mymerchant2->bitcoin->dns\"\n-> dns request for \"_bitcoin.payto.mymerchant.com\"\n-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\nLe 13/12/2011 14:06, Gavin Andresen a \u00e9crit :\n> I agree with Mike Hearn and Christian Decker-- paying to\n> 'somebody at foo.com' should become, behind the scenes, a HTTPS query to\n> https://foo.com/something. If you just want to (say) donate to\n> eff.org, then paying to '@eff.org' aught to work nicely.\n>\n> And if namecoin ever takes off you'll pay to 'somebody at foo.bit'.\n>\n> It seems to me that if it was DNS-based, the address should be\n> something like 'somebody.bitcoin.foo.com'. But I think it is unlikely\n> people will setup and run a custom DNS server just to support bitcoin\n> payments.\n>\n\n\n-- \nBest Regards,\nKhalahan\nhttp://dot-bit.org/", "summary": "Namecoin is a decentralized system designed to map names to other things in a fully decentralized way, not limited to .bit usage. It is easily connectable to Bitcoin and allows for extensibility."}, {"author": "Gregory Maxwell", "date": "2011-12-16T17:48:33", "message_text_only": "On Fri, Dec 16, 2011 at 12:36 PM, Khalahan <khal at dot-bit.org> wrote:\n> Namecoin is a peer-to-peer generic name/value datastore system.\n> Don't forget it's not limited to .bit usage ! So, directly mapping\n> things to .bit url would not be the optimal way of using namecoin.\n>\n> Namecoin is specificaly designed to map things to names in a fully\n> decentralized way. So, it's the perfect starting point to map names to\n> other things (a public bitcoin address, an url, etc)\n> You won't have all the advantages of namecoin when using other systems\n> like DNS and HTTP(S) as the first entry point.\n\n\nHow can one construct a zero-trust (or nearly zero trust) namecoin\nresolver without having a copy of the ever growing complete namecoin\nblock chain?\n\nThe bitcoin lite node mechanism will not work because a peer could\nreturn stale records or no-result and you would have no evidence of\ntheir deception.  (In the case of lite bitcoin nodes, telling you\nabout old transactions is harmless because you control your own\ntransactions).", "summary": "Namecoin is a decentralized system designed to map names to other things, making it a perfect starting point for constructing a zero-trust namecoin resolver."}, {"author": "Walter Stanish", "date": "2011-12-13T15:55:47", "message_text_only": "Interesting thread.\n\nGiven the following paragraph and the limited feedback garnered upon\nits announcement to this list last month, I couldn't help but chime in\nagain to mention IIBAN, an Internet Standards Draft available at\nhttp://tools.ietf.org/html/draft-iiban-00 (A related proposal for\ninternet connected financial market identification, IMIC, is also\navailable: http://tools.ietf.org/html/draft-imic-00) which - fair\ndeclaration of bias - I authored on behalf of my employer, Payward\nInc., while working on Bitcoin-related development.\n\n> I think the scope of this BIP is not so well defined right now. We need a\n> way for merchants to translate a human readable, and more importantly\n> human-writeable, address into a bitcoin address.\n\nI believe that IIBAN solves this problem fairly elegantly:\n\n(1) Mature transposition error detection (think \"Oops, that's a zero\nnot an 'oh'! I wrote it wrong!\"). This functions via checksum digits\nusing a known algorithm, leveraging decades of experience in\nconventional financial institutions. The same functionality provides\nfor simple suggested error correction on common transposition errors\n(0->O, 1->I, etc.).\n\n(2) Fixed length.\n\n(3) Far shorter than both bitcoin addresses and many national bank\naccount numbers at 13 characters (less than half of the size of a\nbitcoin address).\n\n(4) Fewer characters (no lowercase), resulting in less transposition\nissues and greater legibility.\n\n(5) Superset-compatible with existing financial networks utilizing the\nIBAN standard (mandated in Europe, increasingly popular elsewhere),\nresulting in greater ease of uptake.\n\n(5) Centralized, delegatable namespace allocation but with clear rules\ngoverning allocation that aim to minimize potential room for any\npotential abuse of power.\n\n(6) Settlement system neutral - ie: not bitcoin-centric. By leaving\nBitcoin to be Bitcoin, Bitcoin developers can focus on core concerns\nrather than becoming embroiled in formatting and user experience\nconcerns. Also, a single address could be paid via multiple channels\n(conventional financial systems, bitcoin, LETS systems, etc.)\nresulting in greater ease of uptake and higher user confidence over\ntime since published banking information is no longer held hostage to\nthe assumed longevity, liquidity, legality or other liabilities of an\nindividual settlement system (such as Bitcoin).\n\n(7) Provides defined private address spaces for internal transfers\n(eg: within an organization's own systems, for financial simulations,\nMMORPGs, etc.) and a documentation/public works of fiction address\nspace to address common usage concerns in similar network addressing\nschemes.\n\n(8) Heterogeneous management of different parts of the address space.\n\nWhilst the proposed IANA (Internet Assigned Numbers Authority)\nmanagement of IIBAN's initial institution namespace is indeed\ncentralized and will no doubt raise eyebrows from within parts of the\ncommunity for that reason alone, the IIBAN draft is liberal in its\nassignment policy, which can be viewed within the draft document\nlinked to above, and whose terms are binding for IANA.  It's also\nworth noting that four of the most similar global systems deployed\ntoday, SWIFT's BIC and IBAN, the ITU's E.164 international telephone\nnumbering scheme and IANA's IP address space management are\nimplemented as similar centralized-but-delegated style schemes.\n\nFurthermore, due to the flat nature of the registry, a\nhttp://convergence.io/ style 'trust agility' model (ie: multiple\n'centralized' parties share their network view, and user-prioritized\nsource consensus/acceptance/approval determine end-user perspective)\nis wholly compatible.\n\nIn closing, a quick mention that a new version of the IIBAN draft will\nbe released very shortly including a draft IIBAN institutions registry\nthat will be established in order to facilitate implementation and\ntesting. Drop me an email if you'd like a portion of the address space\nand your early assignment will appear within that draft.\n\nRegards,\nWalter Stanish\nPayward, Inc.", "summary": "IIBAN, an Internet Standards Draft, proposes a solution for translating human-readable addresses into Bitcoin addresses, with mature error detection and a fixed length."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-13T16:15:57", "message_text_only": "> (6) Settlement system neutral - ie: not bitcoin-centric.\n...\n> Also, a single address could be paid via multiple channels\n> (conventional financial systems, bitcoin, LETS systems, etc.)\n> resulting in greater ease of uptake and higher user confidence over\n> time since published banking information is no longer held hostage to\n> the assumed longevity, liquidity, legality or other liabilities of an\n> individual settlement system (such as Bitcoin).\n\nI like this part.", "summary": "The settlement system is neutral and allows payment through multiple channels, increasing user confidence and ease of uptake."}, {"author": "Gavin Andresen", "date": "2011-12-13T16:48:31", "message_text_only": "RE: IIBAN numbers:\n\nNifty!  Thanks for the pointers, I think we should avoid reinventing\nwheels whenever possible.\n\nWhen composing my last response in this thread I wrote, and then erased:\n\n\"There doesn't have to be one solution: I'd like to see some\nexperimentation, with clients supporting different schemes for bitcoin\naddress aliases, and maybe supporting plugins to extend the schemes\nsupported (a plugin would take a string, do some\nbehind-the-scenes-magic, and return a bitcoin address or public key).\"\n\nDefining Bitcoin as an IIBAN \"institution\", with 36^6 \"accounts\",\nseems like a forward-thinking idea, although I'm not clear on exactly\nhow those 2.2billion \"accounts\" would get allocated and mapped into\nbitcoin addresses.\n\nI imagine some central organization that maps IIBAN account numbers to\ndomain names... and then clients (or plugins in the clients) query\nthat trusted central organization and then the account holder's domain\nto get a (possibly unique) public key or bitcoin address.\n\nAs long as IIBANs are not the ONLY way of aliasing bitcoin addresses\nto more-human-friendly strings I think that would be a fine way to do\nit.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests experimenting with clients supporting different schemes for Bitcoin address aliases and supporting plugins to extend the schemes supported. Defining Bitcoin as an IIBAN \"institution\" seems like a forward-thinking idea."}, {"author": "Walter Stanish", "date": "2011-12-14T02:30:04", "message_text_only": "> Nifty! \u00a0Thanks for the pointers, I think we should avoid reinventing\n> wheels whenever possible.\n\nHear hear!\n\n> When composing my last response in this thread I wrote, and then erased:\n>\n> \"There doesn't have to be one solution: I'd like to see some\n> experimentation, with clients supporting different schemes for bitcoin\n> address aliases, and maybe supporting plugins to extend the schemes\n> supported (a plugin would take a string, do some\n> behind-the-scenes-magic, and return a bitcoin address or public key).\"\n\nSure. Alias systems are a usability focused requirement and as such\nshould probably not be mandated by the network itself, anyway.\n\n> Defining Bitcoin as an IIBAN \"institution\", with 36^6 \"accounts\",\n> seems like a forward-thinking idea, although I'm not clear on exactly\n> how those 2.2billion \"accounts\" would get allocated and mapped into\n> bitcoin addresses.\n\nIt seems a clarification is in order, apologies for not being clearer.\n\nUnder the IIBAN scheme, whilst Bitcoin *could* define some default\nmechanism for automatically creating IIBANs that map to Bitcoin\naddresses (for example, Bitcoin client authors could provide hosted\nlookup), this was not the style of integration in mind while writing\nthe IIBAN draft.\n\nRather than simply defining Bitcoin as a single 'institution'\n(namespace segment) within the IIBAN standard, Payward Inc. envisages\nlarge numbers of parties (including individuals or small groups of\nindividuals) operating individual Bitcoin-related (or LETS, or other\nalternate currency) services to register as institutions (really just\n'namespace holders') within the IIBAN registry. Each such party may\nthen define its own mapping system between Bitcoin, LETS, or other\nalternate currency financial endpoints that it 'manages' (proxies for)\nand IIBAN, within its namespace.  As detailed within the IIBAN\nproposal, this process could be peer to peer or centralized,\nsupporting one time or short-term use addresses as well as permanent\naddresses.  A permanent address within IIBAN could map via the\ninstitution managing that portion of the IIBAN address space to a\nsingle use address on the Bitcoin network.\n\nInstitutions are important for the following reasons (from\nhttp://tools.ietf.org/html/draft-iiban-00#section-4.3.2):\n\n   With the advent of decentralized virtual currencies such as [BITCOIN]\n   the conventional idea of a financial institution (such as a bank) may\n   be seen by some as somewhat superfluous.  However, the notion remains\n   useful:\n\n    * Conventional currencies will not disappear in the conceivable\n      future, so the notion of financial institutions is expected\n      to endure at least as providers of currency exchange and holding\n      services.\n\n    * Systems such as [BITCOIN] have quirks that require slightly\n      delayed settlement due to the nature of their decentralized,\n      consensus-based approach to fiscal transfer.  Users requiring\n      instant settlement MAY thus see benefit in the use of a\n      centralized proxy system or organization as an instantaneous\n      financial settlement provider (the 'institution').\n\n    * IANA MAY delegate management of portions of the IIBAN name space\n      through such institutions.\n\nFurthermore from http://tools.ietf.org/html/draft-iiban-00#section-4.3.1:\n\n   [Under IIBAN's combined issue paradigm] proxied issue is\n   facilitated through IANA managed institution registration, provision\n   for two types of privately issued addresses is reserved within this\n   document, and registered institutions COULD provide DHT or similar\n   mechanisms for the management of their delegated name space.  The\n   combined issue paradigm offers adequate provision for both\n   manageability and decentralization, whilst maintaining heterogeneity.\n\nSo the idea is that many institutions each provide mappings between\nIIBAN and Bitcoin, in a range of ways, and we do not see the emergence\nof a single mandated standard.  There is no suggestion that Bitcoin\ndevelopers should implement a hard-coded mechanism.\n\n> I imagine some central organization that maps IIBAN account numbers to\n> domain names... and then clients (or plugins in the clients) query\n> that trusted central organization and then the account holder's domain\n> to get a (possibly unique) public key or bitcoin address.\n\nThis style of solution - in which a central organization becomes aware\nof every single IIBAN-based transaction in the network - is not\nnecessary or desirable.  Instead, under the IIBAN recommendation IANA\nwould publish the registry of IIBAN institutions for everyone to use\nwithout the need to query any party.\n\nIn the case of a financial transfer, a client or peer instutition\nseeking to send funds to an IIBAN-denominated address would use some\nhitherto-underfined mechanism* for translating the appropriate entry\nwithin that registry (corresponding to the transfer's destination\naddress) to some kind of internet node representing the institution's\nsystems.\n\n* This mechanism may necessitate the storage of public keys within the\nIIBAN institution registry and will be addressed within the next\nversion of the IIBAN draft.  Community input is encouraged.\n\nIn a second yet-to-be-define protocol**, various settlement-system\nneutral (ie: not specific to Bitcoin, LETS, or any other system)\ntransaction-related metadata would then be exchanged, prior to any\nactual transaction.  Such metadata could include aspects of the\ntransaction such as description, financial system endpoint ('account')\nholder name, account exists verification, settlement path negotiation\n(based upon feasibility, transaction overheads, latency, etc.), which\nparty is to pay overheads, information mandated by local jurisdiction\nsuch as business tax numbers (required in some countries of Europe, I\nbelieve, for domestic B2B settlements), etc.\n\n** This mechanism does need to be defined, and Payward Inc. has\ncompleted a not insubstantial amount of research in to existing\nprotocols and concerns within this area, which touches upon high\nfrequency automated banking, financial market support, and interbank\nsettlement policy.  An additional Internet Draft proposing one such\npotential mechanism will probably be published 'soon'.\n\nAt the conclusion of this metadata exchange, the two nodes would have\neither aborted the transaction, suspended it to seek human input (such\nas settlement path selection based upon fee and latency metadata\ngarnered), or agreed upon financial settlement system specific\ninformation to use in executing the transaction itself, likely out of\nband. In the case of Bitcoin, this *might* include information such as\nthe blockcount after which the transaction will be considered settled\nby the receiving institution, an effective 'gentleman's agreement' on\nthe terms of any opt-in notion of reversibility, a one time Bitcoin\naddress provided by the recipient institution for the sender to make a\nBitcoin transaction to, etc.\n\n>From the perspective of a settlement system such as Bitcoin, IIBAN's\nprovision of settlement system neutral financial endpoint\nidentification provides the benefits outlined in the previous email,\nas well as the possibility to publish a permanent, fixed address\nwithout disclosing one's corresponding Bitcoin-derived income.  From\nthe broader perspective of effective financial system innovation, it\nhopes to provide a common basis upon which many such systems can\nconceivably interoperate, regardless of their underlying systemic\ndifferences.\n\n> As long as IIBANs are not the ONLY way of aliasing bitcoin addresses\n> to more-human-friendly strings I think that would be a fine way to do\n> it.\n\nThank you for your vote of confidence.\n\nRegards,\nWalter Stanish\nPayward Inc.", "summary": "Alias systems for Bitcoin addresses should not be mandated by the network. IIBAN proposes large numbers of parties to register as institutions within the registry."}, {"author": "Cameron Garnham", "date": "2011-12-13T08:55:23", "message_text_only": "Namecoin makes sense; as we can use the same private keys to spend the\nnamecoin as spending the bitcoins.\n\nNamecoin happens to be the only secure guaranteed global unique human\nrememberable string system that exists.\n\nI suggest that sending bitcoins to a namecoin name is the way to go...\nIt makes even more sense since namecoin started merged mining.\n\nOn 13 December 2011 08:03, Cameron Garnham <da2ce7 at gmail.com> wrote:\n\n>\n> Sent from my Windows Phone\n> De: Amir Taaki\n> Enviado: 13/12/2011 0:43\n> Para: bitcoin-development at lists.sourceforge.net\n> Asunto: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases\n> > I'm confused about the problem we're trying to solve.\n>\n> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on\n> the wall a picture of their QR code and a bitcoin address. I don't own\n> a mobile phone so the QR code is\n> useless. Then I remembered FirstBits, went to my terminal and typed\n> 1brmlab. I got their bitcoin address from the website and copied that,\n> then opened my terminal and pasted that in to send 1 BTC.\n>\n> And\n> these proposals for Namecoin, would make bitcoin implementations\n> dependent on unproven technology. HTTPS/DNSSEC have been around a long\n> time and are responsible for many mission critical systems. There's a\n> lot of momentum behind those projects. Namecoin by contrast, could die\n> tomorrow. And it isn't a big deal that they're centralised. This is a\n> convenience for end users and does not affect the core system much.\n>\n> tl;dr: usability\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Systems Optimization Self Assessment\n> Improve efficiency and utilization of IT resources. Drive out cost and\n> improve service delivery. Take 5 minutes to use this Systems Optimization\n> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nCameron Garnham:\nemail: da2ce7 at gmail.com\nwebsite: http://da2ce7.blogspot.com\ntelephone: +61405227831\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/4f763e8f/attachment.html>", "summary": "Namecoin is a secure, unique human-rememberable string system that can use the same private keys as Bitcoin, making it a convenient option for end-users."}], "thread_summary": {"title": "Fwd: Aliases", "categories": ["Bitcoin-development", "BIP 15"], "authors": ["D.H.", "Daniel F", "Cameron Garnham", "Mike Hearn", "Jorge Tim\u00f3n", "Gregory Maxwell", "slush", "Zell Faze", "Jordan Mack", "Andy Parkins", "Gavin Andresen", "Luke-Jr", "Rick Wesson", "Kyle Henderson", "Walter Stanish", "Khalahan", "Amir Taaki", "Pieter Wuille", "Joel Joonatan Kaartinen", "Christian Decker"], "messages_count": 52, "total_messages_chars_count": 98033, "convo_summary": "Participants in a Bitcoin discussion propose various solutions for simplifying the payment process. Amir Taaki argues that FirstBits is impractical and suggests a shared naming scheme between Bitcoin implementations. Mike Hearn proposes a payment system using HTTPS requests for public keys, while Christian Decker suggests a way for merchants to translate human-readable addresses into Bitcoin addresses. The discussion also covers the use of DNSSEC TXT records and HTTP servers for dynamically responding with addresses. Concerns are raised about the vulnerability of a publicly available alias system to DOS attacks."}}, {"title": "[Bitcoin-development] CDataStream", "thread_messages": [{"author": "Michael Gr\u00f8nager", "date": "2011-12-15T17:18:09", "message_text_only": "OK, I admit that this is *really* of little importance... \n\nBut could someone with commit rights please update the CDataStream test table in the code. The arguments for the custom stream are just way off (stringstream wins by factor 10-20!). On OS X (g++) I get:\n\nFurther, if you get(got) bad stringstream numbers on e.g. windows (dikumware had some issues several years ago) you can improve just by changing the default allocation chunk size. So... speed is not a reason for reimplementing stringstream. (And perhaps this can motivate someone to revert bitcoin to stringstream ;-)\n\nCheers,\n\nMichael\n\nPS: Could be fun to see the output on other OS'es !\n\nserialize.h (with TESTCDATASTREAM defined, i686-apple-darwin11-llvm-g++-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)):\n\nCDataStream:\nn=1000       0 seconds\nn=2000       0 seconds\nn=4000       0 seconds\nn=8000       0 seconds\nn=16000      0 seconds\nn=32000      0 seconds\nn=64000      1 seconds\nn=128000     1 seconds\nn=256000     2 seconds\nn=512000     4 seconds\nn=1024000    8 seconds\nn=2048000    17 seconds\nn=4096000    40 seconds\nstringstream:\nn=1000       0 seconds\nn=2000       0 seconds\nn=4000       0 seconds\nn=8000       0 seconds\nn=16000      0 seconds\nn=32000      0 seconds\nn=64000      0 seconds\nn=128000     0 seconds\nn=256000     0 seconds\nn=512000     0 seconds\nn=1024000    0 seconds\nn=2048000    1 seconds\nn=4096000    2 seconds", "summary": "A request for someone to update the CDataStream test table in the code, as the arguments for the custom stream are way off compared to stringstream."}], "thread_summary": {"title": "CDataStream", "categories": ["Bitcoin-development"], "authors": ["Michael Gr\u00f8nager"], "messages_count": 1, "total_messages_chars_count": 1427}}, {"title": "[Bitcoin-development] Pubkey addresses", "thread_messages": [{"author": "Luke-Jr", "date": "2011-12-17T06:32:22", "message_text_only": "IMO, we should standardize and support public key addresses. While not ideal \nfor humans, because of their length, it's a better fit for large QR Codes IMO.", "summary": "Standardizing and supporting public key addresses is better for large QR codes, despite their length being less ideal for humans."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-17T11:14:24", "message_text_only": "Don't know much about QR codes, but I thought they have a length limitation.\nWhy jav wants to use not just addresses but firstbits then?\n\n\"Allow a field \"green_address_list\" (short \"gal\") to specify\nacceptable addresses in Firstbit format directly in the QR code and\nonly use the \"green_address_details\" mechanism when that starts to get\ntoo long to fit comfortably into the QR code\"\n\nhttps://bitcointalk.org/index.php?topic=32818.msg422789#msg422789\n\n\n2011/12/17, Luke-Jr <luke at dashjr.org>:\n> IMO, we should standardize and support public key addresses. While not ideal\n> for humans, because of their length, it's a better fit for large QR Codes\n> IMO.\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "A proposal suggests using Firstbit format directly in QR codes to specify acceptable addresses, only using the \"green_address_details\" mechanism when necessary."}, {"author": "Matt Corallo", "date": "2011-12-17T16:15:46", "message_text_only": "On Sat, 2011-12-17 at 12:14 +0100, Jorge Tim\u00f3n wrote:\n> Don't know much about QR codes, but I thought they have a length limitation.\n> Why jav wants to use not just addresses but firstbits then?\nUnder no circumstances should the use of firstbits ever be supported.\nIt doesn't scale, not even close, especially as we (hopefully) move\ntowards SPV clients.  Also, it provides incentives for people to spam\nthe chain to get a firstbits address.  Never should that be supported.\n\nMatt", "summary": "Firstbits should not be supported as it does not scale and incentivizes spamming the chain for an address."}, {"author": "Jordan Mack", "date": "2011-12-17T18:20:15", "message_text_only": "While I think firstbits is an interesting idea, I agree with Matt on \nthis one. Firstbits, while being a clever idea, produces a less \ndesirable solution in comparison to the current alias proposals.\n\nIn addition to Matt's reasons, I would like to add that it is still a \nblock of random characters, just shorter. It creates the undesirable \neffect of having addresses short enough that people may try to type it \nin rather than pasting or scanning, which is more error prone.\n\nOne obvious scenario for potential exploitation would be if a large \norganization adopted a firstbits address for donations. Others could \nimmediately try to collect similar addresses in hopes of a typo. A \nsecond would be if the organization published the firstbits address on a \nposter in a public location. Someone could easily secure a firstbits \naddress which was one character longer, then stencil that extra \ncharacter on to the poster.\n\n\n\nOn 12/17/2011 8:15 AM, Matt Corallo wrote:\n> On Sat, 2011-12-17 at 12:14 +0100, Jorge Tim\u00f3n wrote:\n>> Don't know much about QR codes, but I thought they have a length limitation.\n>> Why jav wants to use not just addresses but firstbits then?\n> Under no circumstances should the use of firstbits ever be supported.\n> It doesn't scale, not even close, especially as we (hopefully) move\n> towards SPV clients.  Also, it provides incentives for people to spam\n> the chain to get a firstbits address.  Never should that be supported.\n>\n> Matt\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Firstbits is an interesting idea but produces a less desirable solution compared to current alias proposals, according to Matt Corallo. It doesn't scale and provides incentives for people to spam the chain to get a firstbits address."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-18T12:15:26", "message_text_only": "2011/12/17, Jordan Mack <jordanmack at parhelic.com>:\n> While I think firstbits is an interesting idea, I agree with Matt on\n> this one. Firstbits, while being a clever idea, produces a less\n> desirable solution in comparison to the current alias proposals.\n\nI'm just saying is useful for the \"green address\" particular case.\nPeople don't have to write or memorize the firstbit address, it's just\nto have a shorter string to put it in the QR code. In this particular\ncase you don't really care about \"squatting\" or typographic errors\nbecause the users are bot going to write or even see the firstbit\naddress. I think aliases are a better solution for the \"memorizing use\ncase\".\n\nBut anyway, reading some comments I feel I'm missing something about\nthis proposal. How can you save space by putting the whole public key\ninstead of just the address (a hash of the public key) with each\noutput?\nIs this what it's being proposed?", "summary": "Jordan Mack agrees with Matt that firstbits is not as desirable as current alias proposals, but sees its usefulness for the \"green address\" case. He questions how saving space is possible by using the whole public key instead of just the address."}, {"author": "Luke-Jr", "date": "2011-12-18T14:03:33", "message_text_only": "On Sunday, December 18, 2011 7:15:26 AM Jorge Tim\u00f3n wrote:\n> I'm just saying is useful for the \"green address\" particular case.\n\n\"Green addresses\" are also a broken-by-design feature and should be \ndiscouraged.", "summary": "\"Green addresses\" are problematic and should not be encouraged, according to a professional's opinion."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-18T14:28:36", "message_text_only": "I see it as a good start for POS payments. I don't know what flaw\nyou're referring to.\n\nBack on topic, is actually putting the whole pub key in each output\nwhat you're proposing?\n\n\n2011/12/18, Luke-Jr <luke at dashjr.org>:\n> On Sunday, December 18, 2011 7:15:26 AM Jorge Tim\u00f3n wrote:\n>> I'm just saying is useful for the \"green address\" particular case.\n>\n> \"Green addresses\" are also a broken-by-design feature and should be\n> discouraged.\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "Discussion on the use of \"green addresses\" for POS payments. One participant sees it as a good start, while another considers it a broken feature."}, {"author": "Luke-Jr", "date": "2011-12-18T14:34:37", "message_text_only": "On Sunday, December 18, 2011 9:28:36 AM Jorge Tim\u00f3n wrote:\n> Back on topic, is actually putting the whole pub key in each output\n> what you're proposing?\n\nYes, just like is already done for generation, since it is more efficient \n*overall* for the block chain. sipa's key extraction is a MUCH better \nsolution, however, so if we can get that without a block chain fork, I'm \ninclined to favour it.", "summary": "Jorge Tim\u00f3n proposes putting the whole public key in each output for efficiency in the blockchain, but favors sipa's key extraction solution."}, {"author": "Pieter Wuille", "date": "2011-12-18T15:42:06", "message_text_only": "On Sun, Dec 18, 2011 at 01:15:26PM +0100, Jorge Tim\u00f3n wrote:\n> But anyway, reading some comments I feel I'm missing something about\n> this proposal. How can you save space by putting the whole public key\n> instead of just the address (a hash of the public key) with each\n> output?\n> Is this what it's being proposed?\n\nYes. The reason is that currently a send-to-address puts the address in the\noutput script, while redeeming requires the full pubkey plus the signature\nto be placed in the input script. Overall, this requires more space than a\nsend-to-pubkey, where the output contains the pubkey, and the input the\nsignature.\n\nThere are several possible improvements however, and they may not all have\nbeen explained in this thread. To summarize:\n* compressed public keys (33 byte pubkeys instead of 65 bytes)\n* compact signatures (66 bytes instead of 72, including hash type byte)\n* pubkey recovery (allows the public key to be derived from a compact signature)\n\nThe first is very easy to implement (see pull #649). Compact signatures \nand pubkey recovery require a change to the scripting language (though are\nalready implemented, as they are used for message signing).\n\nThese result in several combinations that could be proposed:\n1) send-to-pubkeys-hash\n   - currently the default addres type\n2) send-to-recovered-pubkeys-hash-with-compact-signature-inside-op_eval\n   - extend the scripting language inside OP_EVAL, as described in\n     https://gist.github.com/1262449\n   - use compact signatures\n   - use key recovery, and never put a pubkey in the blockchain data\n3) send-to-pubkey\n   - traditional transaction type\n4) send-to-compressed-pubkey\n   - what Luke proposes as new address type\n5) send-to-compressed-pubkeys-hash\n   - what pull #649 would bring\n\nGregory Maxwell made a small table to compare these options:\n\n  http://people.xiph.org/~greg/addr.compare.html\n\nIf you don't consider pruning, everything is better than send-to-pubkeys-hash\nas we have now. Both using pubkeys instead of hashes, using compressed pubkeys\ninstead of full ones improve the situation independently, and using key\nrecovery is even better.\n\nIf you do consider pruning, the advantages are smaller, but it is far from\nclear to me how pruning will be implemented in the future (as a pruning\nnode cannot function as a NODE_NETWORK service anymore).\n\n-- \nPieter", "summary": "Bitcoin developers are proposing changes to the scripting language to reduce the amount of data required to be stored on the blockchain. The changes include using compressed public keys, compact signatures, and pubkey recovery. These changes could result in several proposed transaction types, including send-to-pubkeys-hash, send-to-recovered-pubkeys-hash-with-compact-signature-inside-op_eval, send-to-pubkey, send-to-compressed-pubkey, and send-to-compressed-pubkeys-hash. The proposed changes would reduce the amount of space required on the blockchain and improve transaction efficiency."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-18T19:50:13", "message_text_only": "Now I get it. Thank you.\nYou save space by having shorter scripts in transactions.", "summary": "Shorter scripts in transactions save space."}, {"author": "Wladimir", "date": "2011-12-17T13:54:56", "message_text_only": "I don't see reason why not. It could just be another, longer, address type.\nThe advantage being that it allows for shorter transactions in the block\nchain (right?).\n\nWladimir\n\nOn Sat, Dec 17, 2011 at 7:32 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> IMO, we should standardize and support public key addresses. While not\n> ideal\n> for humans, because of their length, it's a better fit for large QR Codes\n> IMO.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/f67c8cb3/attachment.html>", "summary": "Luke-Jr suggests standardizing and supporting public key addresses, despite their length, for better QR code compatibility and shorter transactions in blockchain."}, {"author": "Luke-Jr", "date": "2011-12-17T21:52:19", "message_text_only": "I propose that full public key addresses be required to be \"compact\" (length \n33), and use version 21 (begins with '4', and is redundant with ver 20 for 20-\nbyte data). Any reason this wouldn't be workable?", "summary": "Proposal to require compact public key addresses with version 21 (starting with '4') and length 33 for better efficiency. No apparent issues."}, {"author": "Gregory Maxwell", "date": "2011-12-17T23:46:34", "message_text_only": "On Sat, Dec 17, 2011 at 4:52 PM, Luke-Jr <luke at dashjr.org> wrote:\n> I propose that full public key addresses be required to be \"compact\" (length\n> 33), and use version 21 (begins with '4', and is redundant with ver 20 for 20-\n> byte data). Any reason this wouldn't be workable?\n\nWould introduce yet another address type that services will have to cope with.\n\nNo currently deployed sofware knows how to spend it.\n\nNo currently deployed software knows how to receive it.\n\nAll pay-to-pubkey schemes (point compressed or otherwise) shift\nstorage to TXN _output_ scripts which are the least prunable place, so\nfor nodes which are pruning any pay to pubkey scheme will result in\nmore storage than pay to address.\n\nIgnoring pruning, pay-to-address + key recovery is quite a bit smaller\nthan pay-to-compressed pubkey.\n\nThe downsides to op-eval2+recovery were the lack of software, but\nwe're in an equal boat with this.\n\nExcitement over key recovery fell was diminished when it was pointed\nout that it only saves space in input scripts which wasn't so\nimportant because they're quickly prunable.  If you accept that\npruning will someday be common on many nodes then you should prefer\npay to address (since its smallest in that case).  If you assume they\nwon't be, you should prefer pay to address plus key recovery (since\nits the smallest without pruning).\n\nPay to non-compressed pubkey is smaller than\npay-to-address-without-recovery assuming you don't prune, and its more\ndeployable because nodes can already recieve it.  It's larger if you\ndo prune, and it's larger than recovery either way.  Pay-to-compressed\nhas all the disadvantages, it still larger than recovery and doesn't\nhave the advantage of already deployed software.\n\nSorry to be curt\u2014 I'm a little irritated that discussion on recovery\nin OP_EVAL was dropped because \"input script size doesn't matter\nbecause of pruning\" and now people are talking about adding another\naddress type which creates seriously bloated transactions where there\nis pruning, because its slightly smaller in the no-pruning case (and\nagain, still not as small for key recovery).", "summary": "The proposal to require full public key addresses to be \"compact\" and use version 21 would introduce another address type that services would have to cope with, and no currently deployed software knows how to spend or receive it. Additionally, pay-to-address + key recovery is smaller than pay-to-compressed pubkey, and pay-to-non-compressed pubkey is smaller than pay-to-address-without-recovery."}, {"author": "Luke-Jr", "date": "2011-12-18T00:28:12", "message_text_only": "On Saturday, December 17, 2011 6:46:34 PM Gregory Maxwell wrote:\n> Sorry to be curt\u2014 I'm a little irritated that discussion on recovery\n> in OP_EVAL was dropped because \"input script size doesn't matter\n> because of pruning\" and now people are talking about adding another\n> address type which creates seriously bloated transactions where there\n> is pruning, because its slightly smaller in the no-pruning case (and\n> again, still not as small for key recovery).\n\nI missed that bit. I'm willing to defer full OP_EVAL support on Eligius in \norder to enable key recovery...", "summary": "Gregory Maxwell expressed frustration over the discussion on recovery in OP_EVAL being dropped and the addition of another address type causing bloated transactions. He is willing to defer full OP_EVAL support for key recovery."}, {"author": "Luke-Jr", "date": "2011-12-18T00:39:32", "message_text_only": "On Saturday, December 17, 2011 7:28:12 PM Luke-Jr wrote:\n> On Saturday, December 17, 2011 6:46:34 PM Gregory Maxwell wrote:\n> > Sorry to be curt\u2014 I'm a little irritated that discussion on recovery\n> > in OP_EVAL was dropped because \"input script size doesn't matter\n> > because of pruning\" and now people are talking about adding another\n> > address type which creates seriously bloated transactions where there\n> > is pruning, because its slightly smaller in the no-pruning case (and\n> > again, still not as small for key recovery).\n> \n> I missed that bit. I'm willing to defer full OP_EVAL support on Eligius in\n> order to enable key recovery...\n\nIn fact, as long as we have this opportunity to enable new opcodes, maybe we \nshould spend some time revisiting what doors that opens...", "summary": "A discussion on enabling new opcodes and revisiting their potential impact on transactions and recovery in the Bitcoin network."}], "thread_summary": {"title": "Pubkey addresses", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Wladimir", "Jordan Mack", "Jorge Tim\u00f3n", "Gregory Maxwell", "Matt Corallo", "Pieter Wuille"], "messages_count": 15, "total_messages_chars_count": 13288, "convo_summary": "Bitcoin developers are proposing changes to the scripting language to reduce the amount of data required to be stored on the blockchain. The changes include using compressed public keys, compact signatures, and pubkey recovery. This could result in several proposed transaction types, including send-to-pubkeys-hash, send-to-recovered-pubkeys-hash-with-compact-signature-inside-op_eval, send-to-pubkey, send-to-compressed-pubkey, and send-to-compressed-pubkeys-hash. The proposed changes would reduce the amount of space required on the blockchain and improve transaction efficiency."}}, {"title": "[Bitcoin-development] Protocol extensions", "thread_messages": [{"author": "Eric Lombrozo", "date": "2011-12-17T07:41:56", "message_text_only": "Hey, guys.\n\nI haven't posted here before so I'll introduce myself. My name's Eric,\nI've been developing cryptocurrency-related\nsoftware for several months now, I've implemented some libraries for\ndealing with core bitcoin datastructures, made\nsome custom builds of bitcoind and interfaced it with a few apps I've written.\n\nIn doing so, I've come to appreciate just how little of the potential\nfor the bitcoin protocol is being exploited right now...\nnot only in terms of the script features but in terms of the potential\ncommands and node types that could exist.\n\nFor instance, the protocol spec at\nhttps://en.bitcoin.it/wiki/Protocol_specification only has 16 commands\nlisted and\nonly one service type...despite having a full 12 bytes for a command\ncode and a full eight bytes for a services\ntype.\n\nThe fact that only one node service type is specified is probably due\nto the fact that the satoshi client was written\nto be a standalone monolithic app that took care of all the essential\nneeds for a network of peers.\ni.e. block chain storage/management, transaction signing/verification,\nkey generation/wallet management, block mining, etc...\nHowever, I think there's an urgent need for breaking up all these\ndifferent tasks into separate components that can run as independent\nservices on different types of devices.\n\nOne of the big issues I'm dealing with now pertains to block chain\nstorage. As of right now, it is implemented as sequential\ndisk files using Berkeley DB in the satoshi client. Then you have\nother projects that have been using SQL tables, etc...\nBut I believe the direction this really needs to move towards is some\nsort of distributed hash table...and the database queries\nshould be performed using the bitcoin protocol itself. Perhaps adding\na few more commands. As things stand right now,\nthe only way to query for transactions or blocks is by their hash. And\nonce a transaction gets incorporated into a block and\nremoved from the transaction pool, one can no longer query it by the\ntransaction hash without stepping outside the bitcoin protocol.\nWe need access to the disk file that stores the blocks whether it be\nvia Berkeley DB or SQL or whatever.\n\nI propose an extension to the bitcoin protocol to provide methods for\nperforming more sophisticated queries, such as \"Give me\nan inventory of transactions involving this particular public key\" or\n\"Give me an inventory all transactions in the last n blocks with\nunredeemed outputs.\" This could be done by adding a few more commands.\n\nFurthermore, I propose a new network services type for nodes that\nserve as block chain/transaction pool storage.\n\nOf couse, any peer that wishes to verify the integrity of the block\nchain would still have to download at the very least\nall the block headers...and to be completely sure, also all the blocks\nthemselves...and verify everything. But it would be\nvery nice to be able to run thin services that can rely on other\nnetwork peers to do this work. It is still possible to attain\na high level of confidence in the integrity by querying multiple peers\nfor similar objects and comparing. It is also possible\nto run your own dedicated block chain storage servers which you trust.\n\nThere are other ideas I have for other types of services, too.\n\nAnyhow, I'm just throwing this out there...if anyone's interested I'd\nlove to develop these ideas further and help put together some\nspecs.\n\n-Eric Lombrozo", "summary": "Eric, a cryptocurrency developer, believes that the potential of the bitcoin protocol is not being fully exploited. He proposes breaking up tasks into separate components and adding more commands to perform sophisticated queries. He also suggests a new network services type for nodes that serve as block chain/transaction pool storage."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-17T13:13:02", "message_text_only": "Hey Eric,\n\nTwo comments.\n\n1.\nThe ability to query for transactions belonging to pubkeys or bitcoin addresses is supported today by several implementations:\n* blockexplorer.com\n* bitcoin-js\n* my own libBTC (will more on this soon)\n\nTo query for transactions you need to use json-rpc and not the bitcoin protocol, however. But still the purpose is the same: to be able to build thin clients that can rely on a server for storing the blockchain and keeping connected on the p2p network.\n\nThe reason for not having these queries part of the standard protocol (I think) are as they breaks anonymity, and that you would actually encourage people to participate in the p2p.\n\n2. The second part you mention, to some how move the storage of the blockchain into a DHT based storage would be quite nice. The benefit of this is that it could be a way to integrate the smaller clients into the network without breaking the anonymity. But it should be thought out quite carefully. Further, if each client only store a fraction of the blockchain we should work out what fraction that need to be in order to ensure a similar service level. I would be happy to work with you on this.\n\nCheers,\n\nMichael\n\nOn 17/12/2011, at 08:41, Eric Lombrozo wrote:\n\n> Hey, guys.\n> \n> I haven't posted here before so I'll introduce myself. My name's Eric,\n> I've been developing cryptocurrency-related\n> software for several months now, I've implemented some libraries for\n> dealing with core bitcoin datastructures, made\n> some custom builds of bitcoind and interfaced it with a few apps I've written.\n> \n> In doing so, I've come to appreciate just how little of the potential\n> for the bitcoin protocol is being exploited right now...\n> not only in terms of the script features but in terms of the potential\n> commands and node types that could exist.\n> \n> For instance, the protocol spec at\n> https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands\n> listed and\n> only one service type...despite having a full 12 bytes for a command\n> code and a full eight bytes for a services\n> type.\n> \n> The fact that only one node service type is specified is probably due\n> to the fact that the satoshi client was written\n> to be a standalone monolithic app that took care of all the essential\n> needs for a network of peers.\n> i.e. block chain storage/management, transaction signing/verification,\n> key generation/wallet management, block mining, etc...\n> However, I think there's an urgent need for breaking up all these\n> different tasks into separate components that can run as independent\n> services on different types of devices.\n> \n> One of the big issues I'm dealing with now pertains to block chain\n> storage. As of right now, it is implemented as sequential\n> disk files using Berkeley DB in the satoshi client. Then you have\n> other projects that have been using SQL tables, etc...\n> But I believe the direction this really needs to move towards is some\n> sort of distributed hash table...and the database queries\n> should be performed using the bitcoin protocol itself. Perhaps adding\n> a few more commands. As things stand right now,\n> the only way to query for transactions or blocks is by their hash. And\n> once a transaction gets incorporated into a block and\n> removed from the transaction pool, one can no longer query it by the\n> transaction hash without stepping outside the bitcoin protocol.\n> We need access to the disk file that stores the blocks whether it be\n> via Berkeley DB or SQL or whatever.\n> \n> I propose an extension to the bitcoin protocol to provide methods for\n> performing more sophisticated queries, such as \"Give me\n> an inventory of transactions involving this particular public key\" or\n> \"Give me an inventory all transactions in the last n blocks with\n> unredeemed outputs.\" This could be done by adding a few more commands.\n> \n> Furthermore, I propose a new network services type for nodes that\n> serve as block chain/transaction pool storage.\n> \n> Of couse, any peer that wishes to verify the integrity of the block\n> chain would still have to download at the very least\n> all the block headers...and to be completely sure, also all the blocks\n> themselves...and verify everything. But it would be\n> very nice to be able to run thin services that can rely on other\n> network peers to do this work. It is still possible to attain\n> a high level of confidence in the integrity by querying multiple peers\n> for similar objects and comparing. It is also possible\n> to run your own dedicated block chain storage servers which you trust.\n> \n> There are other ideas I have for other types of services, too.\n> \n> Anyhow, I'm just throwing this out there...if anyone's interested I'd\n> love to develop these ideas further and help put together some\n> specs.\n> \n> -Eric Lombrozo\n> \n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for \n> developers. It will provide a great way to learn Windows Azure and what it \n> provides. You can attend the event by watching it streamed LIVE online.  \n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Eric Lombrozo discusses the potential for exploiting the Bitcoin protocol, including the need for breaking up tasks into separate components and moving towards a distributed hash table for block chain storage."}, {"author": "Christian Decker", "date": "2011-12-17T13:37:21", "message_text_only": "A while back I had proposed a similar idea to the DHT, although my main\ngoal was to reduce the need for broadcasts.\n\nMy idea was to structure the network in a hypercube and use prefixes to\naddress different parts of the network, and use those prefixes also to find\nthe location where an item (transaction, block, ...) should be stored. Each\nvertex in the hypercube is a small, highly connected, cluster of nodes. The\nstorage would be distributed, messages are routed on behalf of others,\nwhich makes finding the origin of the query hard to find (think Tor), each\nnode would have to store only O(log(p)) items, with p being the prefix\nlength, maximum number of hops is equal to the dimension of the hypercube\nO(log(n)).\n\nNewly created transaction will be sent directly to the location they'll be\nstored and miners retrieve new transactions at regular intervals. It might\nincrease delays to the confirmations, but it reduces the number of\nbroadcasts and storage requirements on nodes greatly.\n\nRegards,\nChris\n\n\nOn Sat, Dec 17, 2011 at 2:13 PM, Michael Gr\u00f8nager <gronager at ceptacle.com>wrote:\n\n> Hey Eric,\n>\n> Two comments.\n>\n> 1.\n> The ability to query for transactions belonging to pubkeys or bitcoin\n> addresses is supported today by several implementations:\n> * blockexplorer.com\n> * bitcoin-js\n> * my own libBTC (will more on this soon)\n>\n> To query for transactions you need to use json-rpc and not the bitcoin\n> protocol, however. But still the purpose is the same: to be able to build\n> thin clients that can rely on a server for storing the blockchain and\n> keeping connected on the p2p network.\n>\n> The reason for not having these queries part of the standard protocol (I\n> think) are as they breaks anonymity, and that you would actually encourage\n> people to participate in the p2p.\n>\n> 2. The second part you mention, to some how move the storage of the\n> blockchain into a DHT based storage would be quite nice. The benefit of\n> this is that it could be a way to integrate the smaller clients into the\n> network without breaking the anonymity. But it should be thought out quite\n> carefully. Further, if each client only store a fraction of the blockchain\n> we should work out what fraction that need to be in order to ensure a\n> similar service level. I would be happy to work with you on this.\n>\n> Cheers,\n>\n> Michael\n>\n> On 17/12/2011, at 08:41, Eric Lombrozo wrote:\n>\n> > Hey, guys.\n> >\n> > I haven't posted here before so I'll introduce myself. My name's Eric,\n> > I've been developing cryptocurrency-related\n> > software for several months now, I've implemented some libraries for\n> > dealing with core bitcoin datastructures, made\n> > some custom builds of bitcoind and interfaced it with a few apps I've\n> written.\n> >\n> > In doing so, I've come to appreciate just how little of the potential\n> > for the bitcoin protocol is being exploited right now...\n> > not only in terms of the script features but in terms of the potential\n> > commands and node types that could exist.\n> >\n> > For instance, the protocol spec at\n> > https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands\n> > listed and\n> > only one service type...despite having a full 12 bytes for a command\n> > code and a full eight bytes for a services\n> > type.\n> >\n> > The fact that only one node service type is specified is probably due\n> > to the fact that the satoshi client was written\n> > to be a standalone monolithic app that took care of all the essential\n> > needs for a network of peers.\n> > i.e. block chain storage/management, transaction signing/verification,\n> > key generation/wallet management, block mining, etc...\n> > However, I think there's an urgent need for breaking up all these\n> > different tasks into separate components that can run as independent\n> > services on different types of devices.\n> >\n> > One of the big issues I'm dealing with now pertains to block chain\n> > storage. As of right now, it is implemented as sequential\n> > disk files using Berkeley DB in the satoshi client. Then you have\n> > other projects that have been using SQL tables, etc...\n> > But I believe the direction this really needs to move towards is some\n> > sort of distributed hash table...and the database queries\n> > should be performed using the bitcoin protocol itself. Perhaps adding\n> > a few more commands. As things stand right now,\n> > the only way to query for transactions or blocks is by their hash. And\n> > once a transaction gets incorporated into a block and\n> > removed from the transaction pool, one can no longer query it by the\n> > transaction hash without stepping outside the bitcoin protocol.\n> > We need access to the disk file that stores the blocks whether it be\n> > via Berkeley DB or SQL or whatever.\n> >\n> > I propose an extension to the bitcoin protocol to provide methods for\n> > performing more sophisticated queries, such as \"Give me\n> > an inventory of transactions involving this particular public key\" or\n> > \"Give me an inventory all transactions in the last n blocks with\n> > unredeemed outputs.\" This could be done by adding a few more commands.\n> >\n> > Furthermore, I propose a new network services type for nodes that\n> > serve as block chain/transaction pool storage.\n> >\n> > Of couse, any peer that wishes to verify the integrity of the block\n> > chain would still have to download at the very least\n> > all the block headers...and to be completely sure, also all the blocks\n> > themselves...and verify everything. But it would be\n> > very nice to be able to run thin services that can rely on other\n> > network peers to do this work. It is still possible to attain\n> > a high level of confidence in the integrity by querying multiple peers\n> > for similar objects and comparing. It is also possible\n> > to run your own dedicated block chain storage servers which you trust.\n> >\n> > There are other ideas I have for other types of services, too.\n> >\n> > Anyhow, I'm just throwing this out there...if anyone's interested I'd\n> > love to develop these ideas further and help put together some\n> > specs.\n> >\n> > -Eric Lombrozo\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> > Microsoft is holding a special Learn Windows Azure training event for\n> > developers. It will provide a great way to learn Windows Azure and what\n> it\n> > provides. You can attend the event by watching it streamed LIVE online.\n> > Learn more at http://p.sf.net/sfu/ms-windowsazure\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/000eef2b/attachment.html>", "summary": "A proposed idea to structure the network in a hypercube and use prefixes to address different parts of the network, reducing the need for broadcasts."}, {"author": "Gregory Maxwell", "date": "2011-12-17T19:28:55", "message_text_only": "On Sat, Dec 17, 2011 at 8:37 AM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> My idea was to structure the network in a hypercube and use prefixes to\n> address different parts of the network, and use those prefixes also to find\n> the location where an item (transaction, block, ...) should be stored. Each\n> vertex in the hypercube is a small, highly connected, cluster of nodes.\n\nI strongly advise people who are not me to use this sort of scheme, so\nthat I may enjoy the benefits of robbing you blind.\n\n\n.... But really, saying \"some sort of DHT\" without basically\npresenting a working implementation that demonstrates the feasibility\nof solving the very difficulty attack resistance problems these\nschemes have basically triggers my time-wasting-idiot filter.  (Or\nlikewise, presenting a fixed network structure that would have a nice\nsmall and easily identifiable min-cut...)\n\nI don't doubt I'm completely alone in this,  though perhaps I'm more\nof a jerk about it.   Even if your actual proposal might have some\nmerit you should be aware that every fool who has operated a\nbittorrent client has heard of \"DHT\" and, although they may not even\nunderstand what a hash table is, many have no reservation going around\nsuggesting them for _every_ distributed systems problem. Want to scale\nmatrix multiples? DHT! Want to validate bitcoin blocks? DHT! Network\nsyncup slow (because It's bound on validation related local IO)? DHT!\nI suggest people solve the real problems first, then worry what name\nto give the solutions. ;)\n\nTo address gavin's tragedy of the commons concern, one useful feature\nwould being able to mutually authenticate a peer... then full nodes\ncould pick and choose which lite nodes they're willing to do (a lot\nof) hard work for. This would also be valuable because some modes of\nlite operation require non-zero trust of the full node being queried.", "summary": "The author suggests structuring a network in a hypercube and using prefixes to address different parts of the network for storing transactions and blocks. They advise against using DHT without a working implementation. Mutual authentication of peers could address concerns about the tragedy of the commons."}, {"author": "Christian Decker", "date": "2011-12-17T20:34:14", "message_text_only": "Criticism accepted, although I'd appreciate it if you supply some reasons\nabout why it's such a bad idea :-)\nThe idea was never really popular and before starting work on a real\nimplementation I wanted to test the water, and should it turn out it's\ncomplete non-sense I'm happy to accept that.\n\nI don't want to have a DHT for the DHTs sake, I was more interested in\nreducing the number of messages that need to be sent around the network,\nsince network load is going to be a major problem if we ever grow beyond a\ncertain point.\n\nJust wanting to brainstorm.\n\nRegards,\nChris\nOn Sat, Dec 17, 2011 at 8:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sat, Dec 17, 2011 at 8:37 AM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n> > My idea was to structure the network in a hypercube and use prefixes to\n> > address different parts of the network, and use those prefixes also to\n> find\n> > the location where an item (transaction, block, ...) should be stored.\n> Each\n> > vertex in the hypercube is a small, highly connected, cluster of nodes.\n>\n> I strongly advise people who are not me to use this sort of scheme, so\n> that I may enjoy the benefits of robbing you blind.\n>\n>\n> .... But really, saying \"some sort of DHT\" without basically\n> presenting a working implementation that demonstrates the feasibility\n> of solving the very difficulty attack resistance problems these\n> schemes have basically triggers my time-wasting-idiot filter.  (Or\n> likewise, presenting a fixed network structure that would have a nice\n> small and easily identifiable min-cut...)\n>\n> I don't doubt I'm completely alone in this,  though perhaps I'm more\n> of a jerk about it.   Even if your actual proposal might have some\n> merit you should be aware that every fool who has operated a\n> bittorrent client has heard of \"DHT\" and, although they may not even\n> understand what a hash table is, many have no reservation going around\n> suggesting them for _every_ distributed systems problem. Want to scale\n> matrix multiples? DHT! Want to validate bitcoin blocks? DHT! Network\n> syncup slow (because It's bound on validation related local IO)? DHT!\n> I suggest people solve the real problems first, then worry what name\n> to give the solutions. ;)\n>\n> To address gavin's tragedy of the commons concern, one useful feature\n> would being able to mutually authenticate a peer... then full nodes\n> could pick and choose which lite nodes they're willing to do (a lot\n> of) hard work for. This would also be valuable because some modes of\n> lite operation require non-zero trust of the full node being queried.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/6edf419e/attachment.html>", "summary": "Chris proposed a hypercube network structure to reduce network load, but Gregory advised presenting a working implementation to solve attack resistance problems."}, {"author": "Stefan Thomas", "date": "2011-12-18T21:19:06", "message_text_only": "Hey Chris,\n\n> The storage would be distributed, messages are routed on behalf of \n> others, which makes finding the origin of the query hard to find \n> (think Tor)\n\nThis type of intermediate routing makes Tor slow \n<https://svn.torproject.org/svn/projects/roadmaps/2009-03-11-performance.pdf>. \nBitcoin does not and imho should not make anonymity guarantees. Many \nusers do not need them.\n\nLet those who want anonymity connect through Tor, Freenet, etc. It's \neasy to add anonymity via an extra layer, but it is impossible to add \nperformance on top of a slow system.\n\nThat's really the only thing I wanted to point out - if you do DHTs, \nfocus on performance, not anonymity. :)\n\nCheers,\n\nStefan\n\nOn 12/17/2011 2:37 PM, Christian Decker wrote:\n> A while back I had proposed a similar idea to the DHT, although my \n> main goal was to reduce the need for broadcasts.\n>\n> My idea was to structure the network in a hypercube and use prefixes \n> to address different parts of the network, and use those prefixes also \n> to find the location where an item (transaction, block, ...) should be \n> stored. Each vertex in the hypercube is a small, highly connected, \n> cluster of nodes. The storage would be distributed, messages are \n> routed on behalf of others, which makes finding the origin of the \n> query hard to find (think Tor), each node would have to store only \n> O(log(p)) items, with p being the prefix length, maximum number of \n> hops is equal to the dimension of the hypercube O(log(n)).\n>\n> Newly created transaction will be sent directly to the location \n> they'll be stored and miners retrieve new transactions at regular \n> intervals. It might increase delays to the confirmations, but it \n> reduces the number of broadcasts and storage requirements on nodes \n> greatly.\n>\n> Regards,\n> Chris\n>\n>\n> On Sat, Dec 17, 2011 at 2:13 PM, Michael Gr\u00f8nager \n> <gronager at ceptacle.com <mailto:gronager at ceptacle.com>> wrote:\n>\n>     Hey Eric,\n>\n>     Two comments.\n>\n>     1.\n>     The ability to query for transactions belonging to pubkeys or\n>     bitcoin addresses is supported today by several implementations:\n>     * blockexplorer.com <http://blockexplorer.com>\n>     * bitcoin-js\n>     * my own libBTC (will more on this soon)\n>\n>     To query for transactions you need to use json-rpc and not the\n>     bitcoin protocol, however. But still the purpose is the same: to\n>     be able to build thin clients that can rely on a server for\n>     storing the blockchain and keeping connected on the p2p network.\n>\n>     The reason for not having these queries part of the standard\n>     protocol (I think) are as they breaks anonymity, and that you\n>     would actually encourage people to participate in the p2p.\n>\n>     2. The second part you mention, to some how move the storage of\n>     the blockchain into a DHT based storage would be quite nice. The\n>     benefit of this is that it could be a way to integrate the smaller\n>     clients into the network without breaking the anonymity. But it\n>     should be thought out quite carefully. Further, if each client\n>     only store a fraction of the blockchain we should work out what\n>     fraction that need to be in order to ensure a similar service\n>     level. I would be happy to work with you on this.\n>\n>     Cheers,\n>\n>     Michael\n>\n>     On 17/12/2011, at 08:41, Eric Lombrozo wrote:\n>\n>     > Hey, guys.\n>     >\n>     > I haven't posted here before so I'll introduce myself. My name's\n>     Eric,\n>     > I've been developing cryptocurrency-related\n>     > software for several months now, I've implemented some libraries for\n>     > dealing with core bitcoin datastructures, made\n>     > some custom builds of bitcoind and interfaced it with a few apps\n>     I've written.\n>     >\n>     > In doing so, I've come to appreciate just how little of the\n>     potential\n>     > for the bitcoin protocol is being exploited right now...\n>     > not only in terms of the script features but in terms of the\n>     potential\n>     > commands and node types that could exist.\n>     >\n>     > For instance, the protocol spec at\n>     > https://en.bitcoin.it/wiki/Protocol_specification only has 16\n>     commands\n>     > listed and\n>     > only one service type...despite having a full 12 bytes for a command\n>     > code and a full eight bytes for a services\n>     > type.\n>     >\n>     > The fact that only one node service type is specified is\n>     probably due\n>     > to the fact that the satoshi client was written\n>     > to be a standalone monolithic app that took care of all the\n>     essential\n>     > needs for a network of peers.\n>     > i.e. block chain storage/management, transaction\n>     signing/verification,\n>     > key generation/wallet management, block mining, etc...\n>     > However, I think there's an urgent need for breaking up all these\n>     > different tasks into separate components that can run as independent\n>     > services on different types of devices.\n>     >\n>     > One of the big issues I'm dealing with now pertains to block chain\n>     > storage. As of right now, it is implemented as sequential\n>     > disk files using Berkeley DB in the satoshi client. Then you have\n>     > other projects that have been using SQL tables, etc...\n>     > But I believe the direction this really needs to move towards is\n>     some\n>     > sort of distributed hash table...and the database queries\n>     > should be performed using the bitcoin protocol itself. Perhaps\n>     adding\n>     > a few more commands. As things stand right now,\n>     > the only way to query for transactions or blocks is by their\n>     hash. And\n>     > once a transaction gets incorporated into a block and\n>     > removed from the transaction pool, one can no longer query it by the\n>     > transaction hash without stepping outside the bitcoin protocol.\n>     > We need access to the disk file that stores the blocks whether it be\n>     > via Berkeley DB or SQL or whatever.\n>     >\n>     > I propose an extension to the bitcoin protocol to provide\n>     methods for\n>     > performing more sophisticated queries, such as \"Give me\n>     > an inventory of transactions involving this particular public\n>     key\" or\n>     > \"Give me an inventory all transactions in the last n blocks with\n>     > unredeemed outputs.\" This could be done by adding a few more\n>     commands.\n>     >\n>     > Furthermore, I propose a new network services type for nodes that\n>     > serve as block chain/transaction pool storage.\n>     >\n>     > Of couse, any peer that wishes to verify the integrity of the block\n>     > chain would still have to download at the very least\n>     > all the block headers...and to be completely sure, also all the\n>     blocks\n>     > themselves...and verify everything. But it would be\n>     > very nice to be able to run thin services that can rely on other\n>     > network peers to do this work. It is still possible to attain\n>     > a high level of confidence in the integrity by querying multiple\n>     peers\n>     > for similar objects and comparing. It is also possible\n>     > to run your own dedicated block chain storage servers which you\n>     trust.\n>     >\n>     > There are other ideas I have for other types of services, too.\n>     >\n>     > Anyhow, I'm just throwing this out there...if anyone's\n>     interested I'd\n>     > love to develop these ideas further and help put together some\n>     > specs.\n>     >\n>     > -Eric Lombrozo\n>     >\n>     >\n>     ------------------------------------------------------------------------------\n>     > Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n>     > Microsoft is holding a special Learn Windows Azure training\n>     event for\n>     > developers. It will provide a great way to learn Windows Azure\n>     and what it\n>     > provides. You can attend the event by watching it streamed LIVE\n>     online.\n>     > Learn more at http://p.sf.net/sfu/ms-windowsazure\n>     > _______________________________________________\n>     > Bitcoin-development mailing list\n>     > Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>     ------------------------------------------------------------------------------\n>     Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n>     Microsoft is holding a special Learn Windows Azure training event for\n>     developers. It will provide a great way to learn Windows Azure and\n>     what it\n>     provides. You can attend the event by watching it streamed LIVE\n>     online.\n>     Learn more at http://p.sf.net/sfu/ms-windowsazure\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/2b6112bd/attachment.html>", "summary": "Stefan suggests that DHTs should focus on performance rather than anonymity, and users who want anonymity can connect through Tor or Freenet. Chris proposes a hypercube structure for the network to reduce the need for broadcasts and storage requirements on nodes."}, {"author": "Jordan Mack", "date": "2011-12-19T21:43:23", "message_text_only": "On 12/18/2011 1:19 PM, Stefan Thomas wrote:\n > Let those who want anonymity connect through Tor, Freenet, etc. It's\n > easy to add anonymity via an extra layer, but it is impossible to add\n > performance on top of a slow system.\n\nThat's a very good point. This is needless complication at the protocol \nlevel. Alternatives, like Tor, could be used to provide the desired \neffect. Developers could even choose to integrate Tor functionality into \nthe client itself at some point.", "summary": "Adding anonymity to a slow system is impossible, so Stefan Thomas suggests using Tor or Freenet for anonymity instead of complicating the protocol."}, {"author": "Wladimir", "date": "2011-12-20T09:10:23", "message_text_only": "On Mon, Dec 19, 2011 at 10:43 PM, Jordan Mack <jordanmack at parhelic.com>wrote:\n\n> On 12/18/2011 1:19 PM, Stefan Thomas wrote:\n>  > Let those who want anonymity connect through Tor, Freenet, etc. It's\n>  > easy to add anonymity via an extra layer, but it is impossible to add\n>  > performance on top of a slow system.\n>\n> That's a very good point. This is needless complication at the protocol\n> level. Alternatives, like Tor, could be used to provide the desired\n>\n\nAgreed. Please don't roll your own onion network. It is very non-trivial to\nget security and anonymity to an acceptable level. Securing cryptocurrency\nitself is a big enough challenge already.\n\nAnother reason it is better to use Tor is because of the mixing effect. A\nbitcoin-specific onion network would be subject to easy traffic analysis if\nit only carries Bitcoin messages.\n\neffect. Developers could even choose to integrate Tor functionality into\n> the client itself at some point.\n>\n\nYes, good idea. I've thought about making a \"bitcoin tor bundle\", analogous\nto the firefox Tor bundle that is available from the Tor site itself.\n\nProbably would need to package the block chain with it, as downloading that\nover Tor takes ages and causes unnecessary load on the network...\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/5d6c4c2e/attachment.html>", "summary": "Developers should not create their own onion network for Bitcoin, as it is difficult to achieve security and anonymity. Instead, they should use Tor."}, {"author": "Nicolas Fischer", "date": "2011-12-20T10:44:35", "message_text_only": "On Tue, 20 Dec 2011 10:10:23 +0100\nWladimir <laanwj at gmail.com> wrote:\n\n> Probably would need to package the block chain with it, as downloading that\n> over Tor takes ages and causes unnecessary load on the network...\n\nI actually started a freenet plugin for blockchain distribution in summer (first rough steps only). Freenet seems really fit for this purpose since its mechanisms to provide wider storage (and thus faster requesting) for much-requested keys should help a lot here. Also freenet storage is decentralized, so that's another plus that goes hand-in-hand with bitcoin principles.\n\nThere's already a specification for \"btcfn\" which was done in 2010: https://bitcointalk.org/index.php?topic=55089.msg655410#msg655410\n\nI stopped work on this because other people were supposedly working on it. I asked da2ce7 about it at the conference and he said progress was \"slow\".\n\nI totally agree with the sentiment that these features should not be implemented in the bitcoin node itself but outsourced to the established systems, both because it's hard and also for \"hiding traffic in the masses\".\n\n-- \nNicolas Fischer <molec at gmx.de>", "summary": "Freenet could be a good fit for blockchain distribution due to its wider storage mechanisms and decentralization, according to a 2011 email from Bitcoin developer Wladimir. A specification for \"btcfn\" was created in 2010, but progress was slow. The features should be outsourced to established systems to hide traffic in the masses."}, {"author": "Kyle Henderson", "date": "2011-12-21T00:47:23", "message_text_only": "> Developers could even choose to integrate Tor functionality into the\n> client itself at some point.\n>\n\nThe \"satoshi\" bitcoin client already supports use over TOR with the proxy\noption - I think this was something Satoshi made regular use of.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/1d579878/attachment.html>", "summary": "Bitcoin client \"satoshi\" supports TOR use with proxy option, and developers may integrate TOR functionality into the client in the future."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-21T08:50:17", "message_text_only": "DHTs and Bitcoin:\n\nFirst, lets define the problem we want to solve: scalability - when bitcoin takes over all credit card transactions (!), and even before that, we will meet a scalability problem. The blockchain will grow rapidly, (1MB/10min or 50GB/yr) and we will constantly have transactions pending to get into a block. Further, the clients will turn into toasters just from validating all transactions. At the same time we have a level of validation and block chain distribution that we really don't need - today txes are validated by 100k clients in the future that could be 100M clients, and they are stored at way more locations than they are today. So... all this calls for a partition of the transaction/block space, and for a more flexible than 1MB / block setup.\n\nFirst things first. The partitioning of the tx space. One way to partition the tx space is through a partition in hash, namely the DHT approach. There might be other schemes, but as we already have both the ability to share addresses and maintain a hash space it seems obvious.\n\nSo we would like a scheme that provides distributed validation and storage keeping a similar level of trust and security as we have today. We hence need to be able to query another node for validation and ensure it is not pulling our leg (Sybil...).\n\nThere are two important aspects of bitcoin:\n1. transaction signing / validation\n2. to avoid double spending\n\n1. Is a a simple and inclusive problem to solve, 2 is more complex and exclusive. 1. can to a large extend be solved by asking for transactions and validating these against the block chain - it is hard to cheat as you can match blocks containing your transaction with the block chain headers, requiring a false node to perform heavy proof of work tasks.\nIf we on the other hand query other nodes for 2. just blocking an answer would be enough to enable a double spend. (at least seen from the one node querying).\n\nToday you can, assuming you have en up to date block chain, only block pending tx'es which gives you an approximate 10 minutes scale for cheating by double spending. If we create a setup where we distribute the block index and the block chain, we can fake any older transaction as well, and leave a node to believe that a tx has not been spend. The obvious way around it is to ensure a high level of connectedness and to query several geographically distributed nodes if a tx has already been spend. But this can be quite hard and also, you don't want to flood the network with to many extra commands.\n\nIf we design the system based on the above conclusions we get:\n\n1. A client is, based on the hash of its ip:port assigned to serve a part of the block chain, a part of the block index and possibly also a part of the bitcoin addresses (hash160).\n\n2. Further, the client can announce that it also serves any other hashspace fractions - e.g. to enable notification of payments to its bitcoin address or use of its coins (txouts).\n\n3. On validation of a tx, the txins are queried for at the clients serving these and a possible double spend can be monitored. We need to query more clients to ensure we are not cheated by one. And we need to maintain the requirement that they come from separate A.B address spaces (so they don't just setup a matching hash from playing with C.D and ports).\n\n4. The proper nodes are found using Chord DHT scheme (other schemes might be suitable as well).\n\nThin clients keep their spendable coins to a minimum and use only one bitcoin address, that way they will only serve and listen to 3 hash fractions. If we split the current space into 4096 parts we get roughly 100 clients for each hash space.\n\nThe (only?) new attack vector, compared to the current system is the possibility that a client has only evil peers within one hash range and hence can be fooled into believing an old tx can be spend again.\n\nThe new scheme will scale well as each client will only serve a part of the hashspace and hence the number of validations and block storage can be kept at a minimum. Further, it scales well for thin clients vs more full clients as you can add as many or as few (down to 1-3) hash space parts as you want, so the new scheme includes the old scheme in the limit of subscribing to all hash space parts.\n\nI might have overlooked something - so please fill in some comments...\n\nCheers,\n\nMichael\n\n\nOn 18/12/2011, at 22:19, Stefan Thomas wrote:\n\n> Hey Chris,\n> \n>> The storage would be distributed, messages are routed on behalf of others, which makes finding the origin of the query hard to find (think Tor)\n> \n> This type of intermediate routing makes Tor slow. Bitcoin does not and imho should not make anonymity guarantees. Many users do not need them.\n> \n> Let those who want anonymity connect through Tor, Freenet, etc. It's easy to add anonymity via an extra layer, but it is impossible to add performance on top of a slow system.\n> \n> That's really the only thing I wanted to point out - if you do DHTs, focus on performance, not anonymity. :)\n> \n> Cheers,\n> \n> Stefan\n> \n> On 12/17/2011 2:37 PM, Christian Decker wrote:\n>> A while back I had proposed a similar idea to the DHT, although my main goal was to reduce the need for broadcasts.\n>> \n>> My idea was to structure the network in a hypercube and use prefixes to address different parts of the network, and use those prefixes also to find the location where an item (transaction, block, ...) should be stored. Each vertex in the hypercube is a small, highly connected, cluster of nodes. The storage would be distributed, messages are routed on behalf of others, which makes finding the origin of the query hard to find (think Tor), each node would have to store only O(log(p)) items, with p being the prefix length, maximum number of hops is equal to the dimension of the hypercube O(log(n)).\n>> \n>> Newly created transaction will be sent directly to the location they'll be stored and miners retrieve new transactions at regular intervals. It might increase delays to the confirmations, but it reduces the number of broadcasts and storage requirements on nodes greatly.\n>> \n>> Regards,\n>> Chris\n>> \n>> \n>> On Sat, Dec 17, 2011 at 2:13 PM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> Hey Eric,\n>> \n>> Two comments.\n>> \n>> 1.\n>> The ability to query for transactions belonging to pubkeys or bitcoin addresses is supported today by several implementations:\n>> * blockexplorer.com\n>> * bitcoin-js\n>> * my own libBTC (will more on this soon)\n>> \n>> To query for transactions you need to use json-rpc and not the bitcoin protocol, however. But still the purpose is the same: to be able to build thin clients that can rely on a server for           storing the blockchain and keeping connected on the p2p network.\n>> \n>> The reason for not having these queries part of the standard protocol (I think) are as they breaks anonymity, and that you would actually encourage people to participate in the p2p.\n>> \n>> 2. The second part you mention, to some how move the storage of the blockchain into a DHT based storage would be quite nice. The benefit of this is that it could be a way to integrate the smaller clients into the network without breaking the anonymity. But it should be thought out quite carefully. Further, if each client only store a fraction of the blockchain we should work out what fraction that need to be in order to ensure a similar service level. I would be           happy to work with you on this.\n>> \n>> Cheers,\n>> \n>> Michael\n>> \n>> On 17/12/2011, at 08:41, Eric Lombrozo wrote:\n>> \n>>> Hey, guys.\n>>> \n>>> I haven't posted here before so I'll introduce myself. My name's Eric,\n>>> I've been developing cryptocurrency-related\n>>> software for several months now, I've implemented some libraries for\n>>> dealing with core bitcoin datastructures, made\n>>> some custom builds of bitcoind and interfaced it with a few apps I've written.\n>>> \n>>> In doing so, I've come to appreciate just how little of the potential\n>>> for the bitcoin protocol is being exploited right now...\n>>> not only in terms of the script features but in terms of the potential\n>>> commands and node types that could exist.\n>>> \n>>> For instance, the protocol spec at\n>>> https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands\n>>> listed and\n>>> only one service type...despite having a full 12 bytes for a command\n>>> code and a full eight bytes for a services\n>>> type.\n>>> \n>>> The fact that only one node service type is specified is probably due\n>>> to the fact that the satoshi client was written\n>>> to be a standalone monolithic app that took care of all the essential\n>>> needs for a network of peers.\n>>> i.e. block chain storage/management, transaction signing/verification,\n>>> key generation/wallet management, block mining, etc...\n>>> However, I think there's an urgent need for breaking up all these\n>>> different tasks into separate components that can run as independent\n>>> services on different types of devices.\n>>> \n>>> One of the big issues I'm dealing with now pertains to block chain\n>>> storage. As of right now, it is implemented as sequential\n>>> disk files using Berkeley DB in the satoshi client. Then you have\n>>> other projects that have been using SQL tables, etc...\n>>> But I believe the direction this really needs to move towards is some\n>>> sort of distributed hash table...and the database queries\n>>> should be performed using the bitcoin protocol itself. Perhaps adding\n>>> a few more commands. As things stand right now,\n>>> the only way to query for transactions or blocks is by their hash. And\n>>> once a transaction gets incorporated into a block and\n>>> removed from the transaction pool, one can no longer query it by the\n>>> transaction hash without stepping outside the bitcoin protocol.\n>>> We need access to the disk file that stores the blocks whether it be\n>>> via Berkeley DB or SQL or whatever.\n>>> \n>>> I propose an extension to the bitcoin protocol to provide methods for\n>>> performing more sophisticated queries, such as \"Give me\n>>> an inventory of transactions involving this particular public key\" or\n>>> \"Give me an inventory all transactions in the last n blocks with\n>>> unredeemed outputs.\" This could be done by adding a few more commands.\n>>> \n>>> Furthermore, I propose a new network services type for nodes that\n>>> serve as block chain/transaction pool storage.\n>>> \n>>> Of couse, any peer that wishes to verify the integrity of the block\n>>> chain would still have to download at the very least\n>>> all the block headers...and to be completely sure, also all the blocks\n>>> themselves...and verify everything. But it would be\n>>> very nice to be able to run thin services that can rely on other\n>>> network peers to do this work. It is still possible to attain\n>>> a high level of confidence in the integrity by querying multiple peers\n>>> for similar objects and comparing. It is also possible\n>>> to run your own dedicated block chain storage servers which you trust.\n>>> \n>>> There are other ideas I have for other types of services, too.\n>>> \n>>> Anyhow, I'm just throwing this out there...if anyone's interested I'd\n>>> love to develop these ideas further and help put together some\n>>> specs.\n>>> \n>>> -Eric Lombrozo\n>>> \n>>> ------------------------------------------------------------------------------\n>>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n>>> Microsoft is holding a special Learn Windows Azure training event for\n>>> developers. It will provide a great way to learn Windows Azure and what it\n>>> provides. You can attend the event by watching it streamed LIVE online.\n>>> Learn more at http://p.sf.net/sfu/ms-windowsazure\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n>> Microsoft is holding a special Learn Windows Azure training event for\n>> developers. It will provide a great way to learn Windows Azure and what it\n>> provides. You can attend the event by watching it streamed LIVE online.\n>> Learn more at http://p.sf.net/sfu/ms-windowsazure\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n>> Microsoft is holding a special Learn Windows Azure training event for \n>> developers. It will provide a great way to learn Windows Azure and what it \n>> provides. You can attend the event by watching it streamed LIVE online.  \n>> Learn more at \n>> http://p.sf.net/sfu/ms-windowsazure\n>> \n>> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> \n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for \n> developers. It will provide a great way to learn Windows Azure and what it \n> provides. You can attend the event by watching it streamed LIVE online.  \n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Bitcoin faces scalability issues due to the rapid growth of the blockchain. Partitioning the transaction/block space through a Distributed Hash Table (DHT) approach can provide distributed validation and storage. However, ensuring trust and security while querying other nodes for validation and avoiding double spending remains a challenge. Designing a system based on assigning clients to serve a part of the block chain, block index, and bitcoin addresses can help address these issues."}, {"author": "Eric Lombrozo", "date": "2011-12-21T11:42:40", "message_text_only": "Is it just me or does it seem inevitable that at some point supernodes\nwill emerge that other nodes trust to validate transactions for them?\nSupernodes needn't even store the entire block chain and transaction\npool...it would be sufficient that they keep lists of IP addresses of\nother trustworthy nodes and partition them into a hashspace.\n\nAnonymous peers have no reputation to defend...but a trusted supernode\nwould, which could provide just enough incentive for the supernode to\ndo its best to ensure the nodes it vouches for are indeed legit. Of\ncourse, unless the supernode is validating the entire block chain and\ntransaction pool itself, it could only assess the trustworthiness of\nother nodes by performing random sampling.\n\nMichael, I really like your ideas and the clarity you bring to the\nissue. Regarding the potential attack vector you mention, would it be\npossible to partition the hashspace to minimize the risk that an\nattacker can manage to disproportionately gain control over a part of\nthe hashspace?", "summary": "Supernodes may emerge to validate transactions for other nodes, keeping lists of trustworthy nodes and partitioning them into a hashspace. Trustworthiness could be incentivized."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-21T12:41:51", "message_text_only": "I find it likely that we will at some point have supernodes. If we have browser based wallets then the server for these automatically becomes supernodes. Further, if we move along that direction, it becomes much simpler to use both the scheme I proposed or to use a a lot of other schemes for sharing the validation work on a farm constituting the supernode.\n\nHowever, if we want to keep bitcoin in a real p2p setup and enable scalability in terms of ensuring both thin and fat client to connect then we need to go along the path I propose.\n\nActually, after thinking a bit more about the possible new attack vector I don't find it that alarming - if you still require 7 confirmations of any bigger transaction before you, as receiver accepts the transaction as payed you will not risk anything. The question is then if it is sufficiently easy to fake small transaction to e.g. gain access to micropayment based web services. I would again say no - the requirement that you have ok from e.g. 8 different A.B nodes will make it extremely difficult to cheat, and that would even require you to gain some level of control over the network that the service you want to cheat is connected through.\n\nThis means that you should not divide the hash space more finely than you would at all times be able to find 8 different A.B nodes. As the number of clients grows you can then divide the hash space further. (with 100000 nodes today and a division into 512 parts you would have approx 200 nodes to choose from).\n\nCheers,\n\nM\n\n\n\nOn 21/12/2011, at 12:42, Eric Lombrozo wrote:\n\n> Is it just me or does it seem inevitable that at some point supernodes\n> will emerge that other nodes trust to validate transactions for them?\n> Supernodes needn't even store the entire block chain and transaction\n> pool...it would be sufficient that they keep lists of IP addresses of\n> other trustworthy nodes and partition them into a hashspace.\n> \n> Anonymous peers have no reputation to defend...but a trusted supernode\n> would, which could provide just enough incentive for the supernode to\n> do its best to ensure the nodes it vouches for are indeed legit. Of\n> course, unless the supernode is validating the entire block chain and\n> transaction pool itself, it could only assess the trustworthiness of\n> other nodes by performing random sampling.\n> \n> Michael, I really like your ideas and the clarity you bring to the\n> issue. Regarding the potential attack vector you mention, would it be\n> possible to partition the hashspace to minimize the risk that an\n> attacker can manage to disproportionately gain control over a part of\n> the hashspace?\n> \n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create \n> new or port existing apps to sell to consumers worldwide. Explore the \n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Supernodes may emerge for validating transactions, but to maintain a real peer-to-peer setup and enable scalability, a proposed path should be followed. The risk of a new attack vector is not alarming, and it would be difficult to cheat with the proposed scheme. The hash space should not be divided more finely than the ability to find eight different nodes at all times."}, {"author": "Christian Decker", "date": "2011-12-21T16:10:45", "message_text_only": "For the future evolution without considering DHTs:\nWhile I think we will sooner or later have supernodes, I don't think they\nwill need to be trusted too much.\nSupernodes will be those nodes that verify all transactions and make them\navailable to miners. Since miners will become more and more specialized\nthese supernodes are likely to be owned by the miners themself. To be a\nminer either you need to verify all the transactions you include (otherwise\nothers might be able to find an error in your block and thus drop it) or\nhave someone that verifies them for you. In the end I think we'll end up\nwith a hierarchical network, with the miners/supernodes tighly\ninterconnected at the top and the lightweight clients that simply verify\ntransactions (or their inputs to be precise) that are destined for them at\nthe bottom.\n\nAs for the DHT we had a few brainstorming sessions a while back on the\nforum http://bit.ly/sc2RLZ (gmaxwell didn't like it then either :D)\nForcing someone to participate in a fixed position in the block storage\nnetwork is a good way to reduce the risk of a sybil attack as Michael said.\nThe hash should include only information that cannot be changed by the\nuser, so IP can be used, but including the port is risky.\n\nBroadcasting the transactions would not need to be done, since miners fetch\nthem from their storage place, alternatively we could use the inv broadcast\nto notify peers about a new block/transaction and let it retrieve them from\nthe permanent storage (DHT or block storage network). If we route traffic\ninternally in the DHT we could even start caching at nodes leading to the\nreal location, since announcements would lead to flashcrowds, putting heavy\nload on the responsible nodes. Caching is not a risk since the hash of the\nobject to be retrieved is already known.\n\nRegards,\nChris\n\nOn Wed, Dec 21, 2011 at 1:41 PM, Michael Gr\u00f8nager <gronager at ceptacle.com>wrote:\n\n> I find it likely that we will at some point have supernodes. If we have\n> browser based wallets then the server for these automatically becomes\n> supernodes. Further, if we move along that direction, it becomes much\n> simpler to use both the scheme I proposed or to use a a lot of other\n> schemes for sharing the validation work on a farm constituting the\n> supernode.\n>\n> However, if we want to keep bitcoin in a real p2p setup and enable\n> scalability in terms of ensuring both thin and fat client to connect then\n> we need to go along the path I propose.\n>\n> Actually, after thinking a bit more about the possible new attack vector I\n> don't find it that alarming - if you still require 7 confirmations of any\n> bigger transaction before you, as receiver accepts the transaction as payed\n> you will not risk anything. The question is then if it is sufficiently easy\n> to fake small transaction to e.g. gain access to micropayment based web\n> services. I would again say no - the requirement that you have ok from e.g.\n> 8 different A.B nodes will make it extremely difficult to cheat, and that\n> would even require you to gain some level of control over the network that\n> the service you want to cheat is connected through.\n>\n> This means that you should not divide the hash space more finely than you\n> would at all times be able to find 8 different A.B nodes. As the number of\n> clients grows you can then divide the hash space further. (with 100000\n> nodes today and a division into 512 parts you would have approx 200 nodes\n> to choose from).\n>\n> Cheers,\n>\n> M\n>\n>\n>\n> On 21/12/2011, at 12:42, Eric Lombrozo wrote:\n>\n> > Is it just me or does it seem inevitable that at some point supernodes\n> > will emerge that other nodes trust to validate transactions for them?\n> > Supernodes needn't even store the entire block chain and transaction\n> > pool...it would be sufficient that they keep lists of IP addresses of\n> > other trustworthy nodes and partition them into a hashspace.\n> >\n> > Anonymous peers have no reputation to defend...but a trusted supernode\n> > would, which could provide just enough incentive for the supernode to\n> > do its best to ensure the nodes it vouches for are indeed legit. Of\n> > course, unless the supernode is validating the entire block chain and\n> > transaction pool itself, it could only assess the trustworthiness of\n> > other nodes by performing random sampling.\n> >\n> > Michael, I really like your ideas and the clarity you bring to the\n> > issue. Regarding the potential attack vector you mention, would it be\n> > possible to partition the hashspace to minimize the risk that an\n> > attacker can manage to disproportionately gain control over a part of\n> > the hashspace?\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Write once. Port to many.\n> > Get the SDK and tools to simplify cross-platform app development. Create\n> > new or port existing apps to sell to consumers worldwide. Explore the\n> > Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> > http://p.sf.net/sfu/intel-appdev\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create\n> new or port existing apps to sell to consumers worldwide. Explore the\n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/c8347296/attachment.html>", "summary": "Supernodes will verify transactions and be owned by miners. A hierarchical network will form with miners/supernodes at the top and lightweight clients at the bottom. DHTs may be used for block storage, but IP addresses should be used with caution. Broadcasting transactions may not be necessary, and caching could be used to reduce load on responsible nodes."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-22T09:18:52", "message_text_only": "> \n> As for the DHT we had a few brainstorming sessions a while back on the forum http://bit.ly/sc2RLZ (gmaxwell didn't like it then either :D)\n> Forcing someone to participate in a fixed position in the block storage network is a good way to reduce the risk of a sybil attack as Michael said. The hash should include only information that cannot be changed by the user, so IP can be used, but including the port is risky.\n\nAgree, that is why we need to keep the different A.B segment requirement as is also imposed in the client today.\n\n> \n> Broadcasting the transactions would not need to be done, since miners fetch them from their storage place, alternatively we could use the inv broadcast to notify peers about a new block/transaction and let it retrieve them from the permanent storage (DHT or block storage network). If we route traffic internally in the DHT we could even start caching at nodes leading to the real location, since announcements would lead to flashcrowds, putting heavy load on the responsible nodes. Caching is not a risk since the hash of the object to be retrieved is already known.\n\nI agree that in practice the thinner nodes would most likely just serve as cache, but they need notification on tx'es involving some of their tx outs or involving some of theirs bitcoin addresses. Today there are some designs that operate with a thin client that connects to a (web)server and subscribe to listen for transactions involving a specific bitcoin address. By letting that be a part of the hash space including that address you would not reveal your address to the server and we would keep a true p2p setup.\n\nBest regards,\n\nMichael\n\n> \n> Regards,\n> Chris\n> \n> On Wed, Dec 21, 2011 at 1:41 PM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> I find it likely that we will at some point have supernodes. If we have browser based wallets then the server for these automatically becomes supernodes. Further, if we move along that direction, it becomes much simpler to use both the scheme I proposed or to use a a lot of other schemes for sharing the validation work on a farm constituting the supernode.\n> \n> However, if we want to keep bitcoin in a real p2p setup and enable scalability in terms of ensuring both thin and fat client to connect then we need to go along the path I propose.\n> \n> Actually, after thinking a bit more about the possible new attack vector I don't find it that alarming - if you still require 7 confirmations of any bigger transaction before you, as receiver accepts the transaction as payed you will not risk anything. The question is then if it is sufficiently easy to fake small transaction to e.g. gain access to micropayment based web services. I would again say no - the requirement that you have ok from e.g. 8 different A.B nodes will make it extremely difficult to cheat, and that would even require you to gain some level of control over the network that the service you want to cheat is connected through.\n> \n> This means that you should not divide the hash space more finely than you would at all times be able to find 8 different A.B nodes. As the number of clients grows you can then divide the hash space further. (with 100000 nodes today and a division into 512 parts you would have approx 200 nodes to choose from).\n> \n> Cheers,\n> \n> M\n> \n> \n> \n> On 21/12/2011, at 12:42, Eric Lombrozo wrote:\n> \n>> Is it just me or does it seem inevitable that at some point supernodes\n>> will emerge that other nodes trust to validate transactions for them?\n>> Supernodes needn't even store the entire block chain and transaction\n>> pool...it would be sufficient that they keep lists of IP addresses of\n>> other trustworthy nodes and partition them into a hashspace.\n>> \n>> Anonymous peers have no reputation to defend...but a trusted supernode\n>> would, which could provide just enough incentive for the supernode to\n>> do its best to ensure the nodes it vouches for are indeed legit. Of\n>> course, unless the supernode is validating the entire block chain and\n>> transaction pool itself, it could only assess the trustworthiness of\n>> other nodes by performing random sampling.\n>> \n>> Michael, I really like your ideas and the clarity you bring to the\n>> issue. Regarding the potential attack vector you mention, would it be\n>> possible to partition the hashspace to minimize the risk that an\n>> attacker can manage to disproportionately gain control over a part of\n>> the hashspace?\n>> \n>> ------------------------------------------------------------------------------\n>> Write once. Port to many.\n>> Get the SDK and tools to simplify cross-platform app development. Create\n>> new or port existing apps to sell to consumers worldwide. Explore the\n>> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n>> http://p.sf.net/sfu/intel-appdev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create\n> new or port existing apps to sell to consumers worldwide. Explore the\n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Proposal for a decentralized block storage network to reduce the risk of a sybil attack. Broadcasting transactions may not be necessary, and thin nodes could serve as cache. The use of supernodes may simplify validation work, but a true p2p setup is necessary for scalability."}, {"author": "Andy Parkins", "date": "2011-12-22T10:12:48", "message_text_only": "On 2011 December 21 Wednesday, Christian Decker wrote:\n\n> Supernodes will be those nodes that verify all transactions and make them\n> available to miners. Since miners will become more and more specialized\n> these supernodes are likely to be owned by the miners themself. To be a\n> miner either you need to verify all the transactions you include (otherwise\n> others might be able to find an error in your block and thus drop it) or\n> have someone that verifies them for you. In the end I think we'll end up\n> with a hierarchical network, with the miners/supernodes tighly\n> interconnected at the top and the lightweight clients that simply verify\n> transactions (or their inputs to be precise) that are destined for them at\n> the bottom.\n\nA thought occurred to me.  We already run a decentralised system, but it's \ndone by making everyone duplicate all other work.  There is no fundamental \nreason why all work needs to be duplicated though.  What about this: every \nnode randomly chooses whether to verify any particular transaction.  If we \nassume the network is large and the random factor is correctly chosen, then we \ncan still guarantee that every transaction is verified.  Then, we simply add a \nprotocol message that is a negative-announce transaction.  That is to say, we \ngive nodes a way of telling other nodes that they think a transaction is \ninvalid.  The other nodes are then free to verify _that_ assertion and forward \nthe negative-announce.\n\nMiners can then listen for negative-announcements and use them to decide were \nto dedicate their verification efforts.  They then don't need to verify all \n(or perhaps even any) transactions themselves and can dedicate their \nprocessing power to mining.\n\n(I've actually mentioned this idea before, but that time I was using it as a \ndouble-spend prevention method).\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/b2825251/attachment.sig>", "summary": "A proposal for a hierarchical network where miners/supernodes are tightly interconnected at the top and lightweight clients verify transactions at the bottom."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-22T10:27:32", "message_text_only": "It is analog to getting assigned a random part (based on IP) of the hashspace and then only verify transactions within this fraction.\n\nBut, there is in fact a subtle difference: If anyone can choose to verify at random, you will see lazy implementations where random means none, and as it is random you cannot, from the outside, judge if a node is taking part in the validation work or if it just benefitting from others announcements. In the hash space part, you can monitor peers and see if they did not tell you about a failed validation and then disconnect from them as they are either malicious or lazy.\n\nBesides from that, I like a setup where we scream about failed verifications, but keep a low profile on things that actually verifies...\n\n/M\n\n\nOn 22/12/2011, at 11:12, Andy Parkins wrote:\n\n> On 2011 December 21 Wednesday, Christian Decker wrote:\n> \n>> Supernodes will be those nodes that verify all transactions and make them\n>> available to miners. Since miners will become more and more specialized\n>> these supernodes are likely to be owned by the miners themself. To be a\n>> miner either you need to verify all the transactions you include (otherwise\n>> others might be able to find an error in your block and thus drop it) or\n>> have someone that verifies them for you. In the end I think we'll end up\n>> with a hierarchical network, with the miners/supernodes tighly\n>> interconnected at the top and the lightweight clients that simply verify\n>> transactions (or their inputs to be precise) that are destined for them at\n>> the bottom.\n> \n> A thought occurred to me.  We already run a decentralised system, but it's \n> done by making everyone duplicate all other work.  There is no fundamental \n> reason why all work needs to be duplicated though.  What about this: every \n> node randomly chooses whether to verify any particular transaction.  If we \n> assume the network is large and the random factor is correctly chosen, then we \n> can still guarantee that every transaction is verified.  Then, we simply add a \n> protocol message that is a negative-announce transaction.  That is to say, we \n> give nodes a way of telling other nodes that they think a transaction is \n> invalid.  The other nodes are then free to verify _that_ assertion and forward \n> the negative-announce.\n> \n> Miners can then listen for negative-announcements and use them to decide were \n> to dedicate their verification efforts.  They then don't need to verify all \n> (or perhaps even any) transactions themselves and can dedicate their \n> processing power to mining.\n> \n> (I've actually mentioned this idea before, but that time I was using it as a \n> double-spend prevention method).\n> \n> \n> \n> Andy\n> \n> -- \n> Dr Andy Parkins\n> andyparkins at gmail.com", "summary": "A decentralized system where every node randomly chooses whether to verify any particular transaction, with negative-announce transactions to flag invalid ones."}, {"author": "Andy Parkins", "date": "2011-12-22T11:52:38", "message_text_only": "On 2011 December 22 Thursday, Michael Gr\u00f8nager wrote:\n\n> But, there is in fact a subtle difference: If anyone can choose to verify\n> at random, you will see lazy implementations where random means none, and\n> as it is random you cannot, from the outside, judge if a node is taking\n> part in the validation work or if it just benefitting from others\n> announcements. In the hash space part, you can monitor peers and see if\n> they did not tell you about a failed validation and then disconnect from\n> them as they are either malicious or lazy.\n\nWhy should they have to?  Joining the network as a node is very low cost to \nthe other nodes.  You can't force any node not to be lazy, since their option \nis to disconnect themselves.  As to maliciousness, that is defended against \nbecause when a node negative announces a transaction, that transaction is \ngoing to be checked (note that there is still no implicit trust) -- if a node \nis incorrectly negative-announcing then it can justifiably be kicked.\n\n> Besides from that, I like a setup where we scream about failed\n> verifications, but keep a low profile on things that actually verifies...\n\nMe too.  It's important though to distinguish between \"you must be verifying\" \nand \"if you do verify, you must be honest about it\".  No node should be forced \nto do any work it doesn't want to; but they should be forced to be truthful \nabout the work they choose to do.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/c6e7a6da/attachment.sig>", "summary": "A node should not be forced to do any work it doesn't want to, but it should be truthful about the work it chooses to do."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-12-22T12:14:43", "message_text_only": "On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:\n> Why should they have to?  Joining the network as a node is very low cost to \n> the other nodes.  You can't force any node not to be lazy, since their option \n> is to disconnect themselves.  As to maliciousness, that is defended against \n> because when a node negative announces a transaction, that transaction is \n> going to be checked (note that there is still no implicit trust) -- if a node \n> is incorrectly negative-announcing then it can justifiably be kicked.\n\na node that is not doing any checking themselves can not reliably\nforward failed verifications without getting the blame for doing faulty\nwork. Those nodes would then have the incentive not to relay the failed\nverifications. This ends up making it important to know which nodes will\nbe checking transactions or not so you don't isolate yourself from other\nnodes that are also checking transactions.\n\n- Joel", "summary": "Nodes joining a network have low cost, but not checking transactions can lead to faulty work, making it important to know which nodes are checking."}, {"author": "Christian Decker", "date": "2011-12-22T12:26:07", "message_text_only": "At first the idea of using negative announces seems attractive, but\nremember that a malicious node might trigger verification for every\ntransaction, which may lead to a DoS.\n\nRegards,\nChris\n\nOn Thu, Dec 22, 2011 at 1:14 PM, Joel Joonatan Kaartinen <\njoel.kaartinen at gmail.com> wrote:\n\n> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:\n> > Why should they have to?  Joining the network as a node is very low cost\n> to\n> > the other nodes.  You can't force any node not to be lazy, since their\n> option\n> > is to disconnect themselves.  As to maliciousness, that is defended\n> against\n> > because when a node negative announces a transaction, that transaction is\n> > going to be checked (note that there is still no implicit trust) -- if a\n> node\n> > is incorrectly negative-announcing then it can justifiably be kicked.\n>\n> a node that is not doing any checking themselves can not reliably\n> forward failed verifications without getting the blame for doing faulty\n> work. Those nodes would then have the incentive not to relay the failed\n> verifications. This ends up making it important to know which nodes will\n> be checking transactions or not so you don't isolate yourself from other\n> nodes that are also checking transactions.\n>\n> - Joel\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create\n> new or port existing apps to sell to consumers worldwide. Explore the\n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/8c9c7828/attachment.html>", "summary": "Using negative announces in Bitcoin may lead to a DoS attack if a malicious node triggers verification for every transaction."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-22T12:42:08", "message_text_only": "Just adding to Joels comment:\n\nThe only one with an incentive to do validations are miners (otherwise they could risk having their mined blocks invalidated later by less lazy miners) and the ones who are to send and accept a transaction. In a distributed stored and validated block chain setup, you would hence need to ask some miners if the inputs to a transaction is valid or download all the chain yourselves.\n\nThe latter is what we do today and will not scale, the former is the logical consequence of a non-enforced random validation approach - so this will give us super nodes, namely miners, and at some point they could choose to also charge for the validations. It might be the direction we are moving towards, but then the p2p network is only for the miners and the rest of us can connect through https and use json-rpc to post transactions etc to them. I do, however, prefer a setup where we keep everything really distributed...\n\n/M\n\nOn 22/12/2011, at 13:14, Joel Joonatan Kaartinen wrote:\n\n> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:\n>> Why should they have to?  Joining the network as a node is very low cost to \n>> the other nodes.  You can't force any node not to be lazy, since their option \n>> is to disconnect themselves.  As to maliciousness, that is defended against \n>> because when a node negative announces a transaction, that transaction is \n>> going to be checked (note that there is still no implicit trust) -- if a node \n>> is incorrectly negative-announcing then it can justifiably be kicked.\n> \n> a node that is not doing any checking themselves can not reliably\n> forward failed verifications without getting the blame for doing faulty\n> work. Those nodes would then have the incentive not to relay the failed\n> verifications. This ends up making it important to know which nodes will\n> be checking transactions or not so you don't isolate yourself from other\n> nodes that are also checking transactions.\n> \n> - Joel\n> \n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "In a distributed blockchain setup, miners are the only ones incentivized to do validations, leading to the possibility of super nodes and charging for validations."}, {"author": "Andy Parkins", "date": "2011-12-22T14:46:54", "message_text_only": "On 2011 December 22 Thursday, Joel Joonatan Kaartinen wrote:\n> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:\n> > Why should they have to?  Joining the network as a node is very low cost\n> > to the other nodes.  You can't force any node not to be lazy, since\n> > their option is to disconnect themselves.  As to maliciousness, that is\n> > defended against because when a node negative announces a transaction,\n> > that transaction is going to be checked (note that there is still no\n> > implicit trust) -- if a node is incorrectly negative-announcing then it\n> > can justifiably be kicked.\n> \n> a node that is not doing any checking themselves can not reliably\n> forward failed verifications without getting the blame for doing faulty\n> work. Those nodes would then have the incentive not to relay the failed\n> verifications. This ends up making it important to know which nodes will\n> be checking transactions or not so you don't isolate yourself from other\n> nodes that are also checking transactions.\n\nYes; I appreciate that.  It's the very point I'm making.  A node can choose \nwhat work to do, and should have a way of forwarding the results of that work \nto other nodes.  Transaction verifification is the main one.\n\nOnce a negative-announce message exists, it wouldn't be hard to have the other \ntwo you need as well: positive-announce and neutral-announce.  At present we \nhave only neutral-announce.  However, as the need for super nodes and \ndistributed verification gets bigger, having the forwarder able to offer an \nopinion on the quality of a transaction seems ideal to me.  Dishonesty will \nget you isolated pretty quickly if you use positive-announce and negative-\nannounce to lie.\n\nThe problem with this is that it requires a web of trust as well as a web of \nconnections.  The only way to gain an advantage from this classified \nforwarding is if you have some way of assigning enough trust so that you can \nforward a classified transaction _without_ checking it yourself.  That doesn't \nsound like an easy problem though.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/49edfc8b/attachment.sig>", "summary": "Nodes in a network have the option to choose what work to do, and should have a way of forwarding the results of that work to other nodes. Transaction verification is the main one. However, it requires a web of trust as well as a web of connections."}, {"author": "Zell Faze", "date": "2011-12-25T02:55:08", "message_text_only": "I may be missing something, but perhaps the simplistic method is the best.  \n\nStart all nodes off with a certain level of trust.  Lets choose an arbitrary number 5.\nIf a node's trust level is high enough (lets say 10) forward transactions it sends you without checking them.\nIf a node's trust level is low enough (lets say 0) discard any transactions they send you (i.e. don't forward them on).\nFor nodes with a trust level between 1 and 9, forward without checking between 1 and 9 out of every 10 transactions.  Check the others, if they are valid, increase the trust level by 1, if they are invalid decrease the trust level by 3.\n\nAll of the numbers mentioned here (1-10, 1, 10, 1, 5, and 3) are arbitrary numbers that should be determined by the client or user-preferences instead of the protocol.  This would allow for clients to have varying amounts of initial trust/paranoia about their peers.\n\nBy decreasing the amount of trust faster than we increase it, we make it harder for untrustworthy clients to cheat us.  By having a cut off point, we make it so that untrustworthy clients can not DDoS us.  By randomly verifying some transactions in the beginning, we make it harder for a new client from DDoSing us, and we prevent our own trust level from being hurt too much for forwarding on invalid transactions.\n\nThe only problem I can personally see with this system is that if Node A trusts Node B with a 10 and Node C connects to Node A, then Node C can send  transactions that are invalid to Node C via Node A without Node C being any the wiser.  This would be stopped fairly quickly as Node B would catch on and stop forwarding transactions, but it would be a problem for new Nodes.\n\nThis could be fixed (somewhat) by having a message that says not to trust a particular node.\n\n--Zell Faze\n\n\n\n--- On Thu, 12/22/11, Andy Parkins <andyparkins at gmail.com> wrote:\n\n> From: Andy Parkins <andyparkins at gmail.com>\n> Subject: Re: [Bitcoin-development] Protocol extensions\n> To: \"Joel Joonatan Kaartinen\" <joel.kaartinen at gmail.com>\n> Cc: bitcoin-development at lists.sourceforge.net\n> Date: Thursday, December 22, 2011, 9:46 AM\n> On 2011 December 22 Thursday, Joel\n> Joonatan Kaartinen wrote:\n> > On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins\n> wrote:\n> > > Why should they have to?\u00a0 Joining the\n> network as a node is very low cost\n> > > to the other nodes.\u00a0 You can't force any\n> node not to be lazy, since\n> > > their option is to disconnect themselves.\u00a0\n> As to maliciousness, that is\n> > > defended against because when a node negative\n> announces a transaction,\n> > > that transaction is going to be checked (note\n> that there is still no\n> > > implicit trust) -- if a node is incorrectly\n> negative-announcing then it\n> > > can justifiably be kicked.\n> > \n> > a node that is not doing any checking themselves can\n> not reliably\n> > forward failed verifications without getting the blame\n> for doing faulty\n> > work. Those nodes would then have the incentive not to\n> relay the failed\n> > verifications. This ends up making it important to\n> know which nodes will\n> > be checking transactions or not so you don't isolate\n> yourself from other\n> > nodes that are also checking transactions.\n> \n> Yes; I appreciate that.\u00a0 It's the very point I'm\n> making.\u00a0 A node can choose \n> what work to do, and should have a way of forwarding the\n> results of that work \n> to other nodes.\u00a0 Transaction verifification is the\n> main one.\n> \n> Once a negative-announce message exists, it wouldn't be\n> hard to have the other \n> two you need as well: positive-announce and\n> neutral-announce.\u00a0 At present we \n> have only neutral-announce.\u00a0 However, as the need for\n> super nodes and \n> distributed verification gets bigger, having the forwarder\n> able to offer an \n> opinion on the quality of a transaction seems ideal to\n> me.\u00a0 Dishonesty will \n> get you isolated pretty quickly if you use\n> positive-announce and negative-\n> announce to lie.\n> \n> The problem with this is that it requires a web of trust as\n> well as a web of \n> connections.\u00a0 The only way to gain an advantage from\n> this classified \n> forwarding is if you have some way of assigning enough\n> trust so that you can \n> forward a classified transaction _without_ checking it\n> yourself.\u00a0 That doesn't \n> sound like an easy problem though.\n> \n> \n> \n> Andy\n> \n> -- \n> Dr Andy Parkins\n> andyparkins at gmail.com\n> \n> -----Inline Attachment Follows-----\n> \n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app\n> development. Create \n> new or port existing apps to sell to consumers worldwide.\n> Explore the \n> Intel AppUpSM program developer opportunity.\n> appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> -----Inline Attachment Follows-----\n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "A trust-based system for nodes in a blockchain network is proposed, where nodes are assigned an initial trust level and transactions are forwarded based on this level. The trust level can be adjusted based on the validity of transactions, and the system can be customized by users. The system aims to prevent untrustworthy nodes from cheating and DDoSing the network. However, there is a potential issue with new nodes being able to send invalid transactions through trusted nodes."}, {"author": "Jordan Mack", "date": "2011-12-21T17:17:01", "message_text_only": "I think it would be a lot more than that. According to the Scalability \npage (https://en.bitcoin.it/wiki/Scalability) if Bitcoin took over all \ncredit card transactions, that would be about 1.14GB per block. I \nbelieve that is 58.5PB per year. (6*24*365*1.14/1024) This would also \nmean the distribution of 2MB of block data per second, which doesn't \ninclude broadcast overhead.\n\nOn 12/21/2011 12:50 AM, Michael Gr\u00f8nager wrote:\n> when bitcoin takes over all credit card transactions (!), and even before that,\n > we will meet a scalability problem. The blockchain will grow rapidly,\n> (1MB/10min  or 50GB/yr)", "summary": "If Bitcoin replaced all credit card transactions, it would require 1.14GB per block and 58.5PB per year, with a distribution of 2MB of block data per second."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-22T09:19:30", "message_text_only": "Agree, but even before that, we will meet problems of the current 1MB/10min limit.\n\nThe calculations from the scalability link surely indicates that there are 2 options for scalability either go for trusted supernodes backed by huge hardware resources or something else would be needed. The supernode approach is simple and easy to implement, but it also breaks a lot of the nice features about bitcoin. So if we want bitcoin to stay p2p we need to deploy other strategies. The hash space partitioning is one of them. And the nice thing is that it can be made to scale even for a javascript based validating and fully connected client running on a smartphone in a bitcoin future with billions of clients and transactions, and still it does not exclude you from running a trusted supernode either. \n\nCheers,\n\nM\n\nOn 21/12/2011, at 18:17, Jordan Mack wrote:\n\n> I think it would be a lot more than that. According to the Scalability \n> page (https://en.bitcoin.it/wiki/Scalability) if Bitcoin took over all \n> credit card transactions, that would be about 1.14GB per block. I \n> believe that is 58.5PB per year. (6*24*365*1.14/1024) This would also \n> mean the distribution of 2MB of block data per second, which doesn't \n> include broadcast overhead.\n> \n> On 12/21/2011 12:50 AM, Michael Gr\u00f8nager wrote:\n>> when bitcoin takes over all credit card transactions (!), and even before that,\n>> we will meet a scalability problem. The blockchain will grow rapidly,\n>> (1MB/10min  or 50GB/yr)\n> \n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create \n> new or port existing apps to sell to consumers worldwide. Explore the \n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Bitcoin's 1MB/10min limit will cause scalability issues. Trusted supernodes or hash space partitioning are options for scalability, but supernodes break P2P features."}, {"author": "Gavin Andresen", "date": "2011-12-17T19:06:56", "message_text_only": "There was a discussion about using DHT's for transactions a while back\non the forums:\n\u00a0https://bitcointalk.org/index.php?topic=723.msg7908#msg7908\n\nIf you can figure out a scheme that is secure from malicious Sybil\nattacks then you're smarter than I am.\n\nAnd additional protocol messages for lightweight clients is a good\nidea, as long as they don't make it a lot easier to pull off a\ndenial-of-service attacks on a \"full\" node.\n\nAlthough I do also wonder if we'll ever run into a problem with full\nnodes refusing to answer requests from lightweight nodes (there might\nbe a tragedy-of-the-commons problem lurking there).\n\n--\n--\nGavin Andresen", "summary": "Gavin Andresen discusses the potential use of DHT's for transactions and the need for a secure scheme against malicious attacks. He also considers the possibility of full nodes refusing requests from lightweight nodes."}, {"author": "theymos", "date": "2011-12-17T21:49:18", "message_text_only": "On Sat, Dec 17, 2011, at 02:06 PM, Gavin Andresen wrote:\n> Although I do also wonder if we'll ever run into a problem with full\n> nodes refusing to answer requests from lightweight nodes (there might\n> be a tragedy-of-the-commons problem lurking there).\n\nThis seems likely. Also, even if many full nodes are willing to donate\nresources, there may simply be too few full nodes to handle the load.\n\nMy preferred solution for handling scalability in the future is to\nhave lightweight clients download only headers and Merkle trees (which\nare both small and easy to distribute), and then require senders to\ncontact recipients directly in order to transmit their transactions.\nThen lightweight clients never need full blocks to build their\nbalances, and full nodes don't have to handle expensive queries from\nlightweight clients.\n\nUnder this scheme, the current broadcast system could be used among full\nnodes for a long time. Since clients wouldn't ever need to talk to full\nnodes, they could form a separate network with less reliable\nbroadcasting and perhaps a fancier network architecture. Members of the\nfull network would connect to the most reliable members of the client\nnetwork in order to broadcast headers and Merkle trees and receive\ntransactions. Full nodes would *not* answer any client queries, so\ndealing with the client network would not require many resources, and\nminers would probably have an incentive to do it. (Creating a \"separate\"\nnetwork like this can be done by using the services field.)\n\nI don't think requiring senders to email some data to the recipient\nwould be too burdensome, though it's probably also possible to design a\nsystem where even offline recipients can receive transactions through\nthe Bitcoin network.", "summary": "The scalability issue in Bitcoin can be solved by having lightweight clients download only headers and Merkle trees, and requiring senders to contact recipients directly to transmit transactions. Full nodes would not answer any client queries, and a separate network could be formed for clients."}, {"author": "Jordan Mack", "date": "2011-12-18T00:44:58", "message_text_only": "While using DHT for storage of the block chain is an intriguing concept, \nI do not see how it is feasible. As Gavin noted, DHT is a system that is \ndifficult to impossible to guarantee against data loss or manipulation.\n\nEven if we found a way to store the block chain in DHT, how would \ntransactions be verified? As Gavin noted, you could ask the network, but \ncannot necessarily trust the peers you are connected to. Verification of \nthe full block chain allows the client to trust no one.\n\nI also do not see how DHT would solve the problem of scalability in \nregards to broadcast messages, although I am definitely interested in \nthe concept.", "summary": "Storing blockchain in DHT is not feasible due to the difficulty in guaranteeing against data loss or manipulation, and verifying transactions. Scalability remains a problem."}, {"author": "Jeff Garzik", "date": "2011-12-18T01:07:55", "message_text_only": "On Sat, Dec 17, 2011 at 7:44 PM, Jordan Mack <jordanmack at parhelic.com> wrote:\n> While using DHT for storage of the block chain is an intriguing concept,\n> I do not see how it is feasible. As Gavin noted, DHT is a system that is\n> difficult to impossible to guarantee against data loss or manipulation.\n>\n> Even if we found a way to store the block chain in DHT, how would\n> transactions be verified? As Gavin noted, you could ask the network, but\n> cannot necessarily trust the peers you are connected to. Verification of\n> the full block chain allows the client to trust no one.\n\nWell, the block chain data itself is internally self-validating.  As\nlong as you know the latest block's hash -- a big \"if\" -- there is no\nproblem downloading all other block chain data from DHT or any other\nuntrusted source.\n\nIn a malicious case, you would notice latest-hash differs from\nnon-malicious and wind up downloading multiple chains, when walking\nhashes backwards through a DHT/lookup table.  So, a bit more work but\nnothing fundamentally less secure _on a trust basis_.\n\nOf course, I was focusing on data validation, which ignores other\nfactors such as DoS'ing the DHT.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Storing the blockchain in a distributed hash table (DHT) is not feasible due to the difficulty in guaranteeing against data loss or manipulation. Verification of the full blockchain allows the client to trust no one. However, the blockchain data is self-validating, and as long as the latest block's hash is known, all other blockchain data can be downloaded from an untrusted source."}, {"author": "Jordan Mack", "date": "2011-12-18T01:27:10", "message_text_only": "theymos' full node and lite node write up got me thinking.\n\nThere are two problems here that we are trying to solve:\n- The scalability of broadcast messages.\n- The resources required to sync and verify the block chain.\n\nI see three distinct groups of clients:\n- Miners (dedicated servers & desktops)\n- Full (desktops)\n- Lite (mobile devices)\n\nTo address scalability of broadcasting, there could be three separate \nmodes of operation (or client types). Mining nodes would retain the \ncomplete block chain, and share all messages between other mining nodes. \nFull nodes would retain the complete block chain, receive new block \ninformation from mining nodes, and share block data between each other. \nLite clients would not contain the block chain, or any broadcast \nmessages, and would query against a full client for all actions.\n\nMining nodes would handle the brunt of the barrage of messages. All \nblock and transaction messages would have to be broadcast across all \nmining nodes. This would be essentially the same as all clients \ncurrently operate today.\n\nA full client would be one step down from a mining client. They only \nneed new block data, and new transactions that pertain to them (for \ninstant notification). All other broadcast data is irrelevant to them. \nThey would get new block data from connections to mining nodes, or from \nother peer nodes. The transaction submission could be sent directly to a \nconnected mining node, or bounced through other connected full nodes, \nwith a random number hops. This would disassociate the IP from the \ntransaction, similarly to Tor.\n\nTo address the need for instant transaction notification, without \nbroadcasting to to everyone, notification messages would be sent \ndirectly from one full client to the other. This is where aliases come \nin. When an alias is resolved, it includes both a Bitcoin address, and a \nlist of IPs to notify of the transaction. This reveals the IP of the \nsender and receiver to each other. If the sender or receiver wishes to \nremain anonymous, then they could opt out of notification, and wait for \nthe transaction to appear in the block chain.\n\nA lite client would connect to a \"trusted\" full client over an encrypted \nconnection. This would essentially function as a remote control to a \nfull client, and allow a user to send, receive, and confirm normally, \nbut without the overhead. A full client could reside on the home \ncomputer or server, which is owned by the user. A hosted wallet could \nalso be used just as easily.\n\nI don't like the idea of a header only client, unless this is just an \ninterim action until the full block chain is downloaded in the \nbackground. Development of these types of clients is probably \ninevitable, but I believe that this breaks the most fundamental aspects \nof Bitcoin's security model. If a client has only headers, it cannot do \nfull verification, and it is trusting the data from random anonymous peers.", "summary": "The scalability of broadcast messages and the resources required to sync and verify the blockchain are two problems that need to be solved. Three distinct groups of clients are miners, full, and lite. To address scalability, there could be three separate modes of operation. Mining nodes would handle the brunt of the barrage of messages, full clients would only need new block data and new transactions that pertain to them, and lite clients would connect to a trusted full client over an encrypted connection."}, {"author": "Andy Parkins", "date": "2011-12-18T14:16:08", "message_text_only": "On Sunday 18 Dec 2011 01:27:10 Jordan Mack wrote:\n\n> I don't like the idea of a header only client, unless this is just an\n> interim action until the full block chain is downloaded in the\n> background. Development of these types of clients is probably\n> inevitable, but I believe that this breaks the most fundamental aspects\n> of Bitcoin's security model. If a client has only headers, it cannot do\n> full verification, and it is trusting the data from random anonymous\n> peers.\n\nI'm working on (slowly) making a client able to download-on-demand.  That is \nto say that the block chain headers would be downloaded and maintained, but \nthe block bodies would be downloaded as needed for full verification.  It's \ncertainly not possible with the current protocol; but it's certainly a \nconceivable application.  I suppose it slots between headers-only and full \nclient conceptually.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "A developer is working on a client that downloads block chain headers and block bodies on demand for full verification, slotting between headers-only and full clients."}, {"author": "theymos", "date": "2011-12-18T17:09:39", "message_text_only": "On Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote:\n> I don't like the idea of a header only client, unless this is just an\n> interim action until the full block chain is downloaded in the\n> background. Development of these types of clients is probably\n> inevitable, but I believe that this breaks the most fundamental\n> aspects of Bitcoin's security model. If a client has only headers, it\n> cannot do full verification, and it is trusting the data from random\n> anonymous peers.\n\nA headers-only client is much better than trusting anyone, since an\nattacker needs >50% of the network's computational power to trick\nsuch clients.\n\nFor everyone to keep being a full node, hardware costs would need to\nconstantly go down enough for all nodes to be able to handle enough\ntransactions to meet demand. If hardware doesn't become cheap enough\nquickly enough, either some people would be unable to handle being full\nnodes, or the max block size wouldn't rise enough to meet demand and\ntransaction fees would become noncompetitive.", "summary": "A headers-only client is a temporary solution until the full blockchain is downloaded, but it breaks Bitcoin's security model. However, it is better than trusting random peers. Full nodes require expensive hardware, which may lead to transaction fees becoming noncompetitive."}, {"author": "Alan Reiner", "date": "2011-12-18T18:06:09", "message_text_only": "The whole point of having headers built at a constant size and \ngeneration rate is to minimize the amount of data needed to \"understand\" \nof the blockchain while simultaneously maximizing integrity/security in \nthe presence of untrusted nodes.  Barring the 50%-attack, you only need \na couple honest nodes out of 50 to stay safe (as long as you're waiting \nfor your 6 confirmations).   In fact, I would argue that a full node \n(Satoshi client), has the same level of security as a headers-only \nclient... because they both base *all* their verification decisions on \ncomputations that end with comparing hashes to the longest-chain headers.\n\nIn the case that an attacker figures out how to isolate your node \nentirely and start feeing you poisoned blocks, then you are vulnerable \nwith any kind of node, full or lightweight.  I don't see where the \nreduced security is.\n\nThe only issue I see is that a truly light-weight, headers-only node \nwill be having to download an entire block to get one transaction it \nneeds.  This would be significantly alleviated if nodes can start \nrequesting merkle-trees directly, even without merkle-branch-pruning.   \nIf a node can ask for a tx and the tx-hash-list of the block that \nincorporated that tx,  he can easily verify his tx against his \nno-need-to-trust-anyone headers, and doesn't have to download MBs for \nevery one.\n\nAs for blockchain pruning... I think it's absolutely critical to find a \nway to do this, /for all nodes/.  I am swayed by Dan Kaminsky's \nscalability warnings, and my instinct tells me that leaving full \nverification to a select few deep-pockets nodes in the future opens up \nall sorts of centralization/power-corporation issues that is contrary to \nthe Bitcoin concept.  It is in everyone's best interest to make it as \neasy as possible for /anyone/ to act as a full node (if possible).  As \nsuch, I believe that the current system of minimizing TxOut size is the \nright one.  TxIns take up 0 bytes space in the long-run when taking into \naccount any blockchain pruning/snapshot idea (except for nLocktime/seq \ntransactions where the TxIn might have to be saved).\n\n-Alan\n\n\n\n\n\nOn 12/18/2011 12:09 PM, theymos wrote:\n> On Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote:\n>> I don't like the idea of a header only client, unless this is just an\n>> interim action until the full block chain is downloaded in the\n>> background. Development of these types of clients is probably\n>> inevitable, but I believe that this breaks the most fundamental\n>> aspects of Bitcoin's security model. If a client has only headers, it\n>> cannot do full verification, and it is trusting the data from random\n>> anonymous peers.\n> A headers-only client is much better than trusting anyone, since an\n> attacker needs>50% of the network's computational power to trick\n> such clients.\n>\n> For everyone to keep being a full node, hardware costs would need to\n> constantly go down enough for all nodes to be able to handle enough\n> transactions to meet demand. If hardware doesn't become cheap enough\n> quickly enough, either some people would be unable to handle being full\n> nodes, or the max block size wouldn't rise enough to meet demand and\n> transaction fees would become noncompetitive.\n>\n> ------------------------------------------------------------------------------\n> Learn Windows Azure Live!  Tuesday, Dec 13, 2011\n> Microsoft is holding a special Learn Windows Azure training event for\n> developers. It will provide a great way to learn Windows Azure and what it\n> provides. You can attend the event by watching it streamed LIVE online.\n> Learn more at http://p.sf.net/sfu/ms-windowsazure\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/e262a49a/attachment.html>", "summary": "Headers-only clients can still maintain the same level of security as full nodes by basing verification decisions on hash comparisons. Blockchain pruning is critical for scalability and decentralization."}, {"author": "Amir Taaki", "date": "2011-12-18T18:47:54", "message_text_only": "Has anyone considered 'snapshot' frames (blocks).\n\nMessage to node:\n\ngetsnapshot: hash\n\nNode responds with a 'block' message.\n\nThen the hash for that particular snapshot is hardcoded into the sourcecode. It would replace the checkpoints and use the last hash in that list.\n\nValidating blocks is pretty fast right up until block 135k, which is where time taken balloons and starts become exponentially slower. As blockchain grows linearly, resources needed grows exponentially if you think about it.\n\n\n\n________________________________\n From: Alan Reiner <etotheipi at gmail.com>\nTo: bitcoin-development at lists.sourceforge.net \nSent: Sunday, December 18, 2011 6:06 PM\nSubject: Re: [Bitcoin-development] Protocol extensions\n \n\nThe whole point of having headers built at a constant size and generation rate is to minimize the amount of data needed to \"understand\" of the blockchain while simultaneously maximizing integrity/security in the presence of untrusted nodes.\u00a0 Barring the 50%-attack, you only need a couple honest nodes out of 50 to stay safe (as long as you're waiting for your 6 confirmations).\u00a0\u00a0 In fact, I would argue that a full node (Satoshi client), has the same level of security as a headers-only client... because they both base all their verification decisions on computations that end with comparing hashes to the longest-chain headers.\n\nIn the case that an attacker figures out how to isolate your node\n    entirely and start feeing you poisoned blocks, then you are\n    vulnerable with any kind of node, full or lightweight.\u00a0 I don't see\n    where the reduced security is.\u00a0 \n\nThe only issue I see is that a truly light-weight, headers-only node\n    will be having to download an entire block to get one transaction it\n    needs.\u00a0 This would be significantly alleviated if nodes can start\n    requesting merkle-trees directly, even without\n    merkle-branch-pruning. \u00a0 If a node can ask for a tx and the\n    tx-hash-list of the block that incorporated that tx,\u00a0 he can easily\n    verify his tx against his no-need-to-trust-anyone headers, and\n    doesn't have to download MBs for every one.\u00a0 \n\nAs for blockchain pruning... I think it's absolutely critical to\n    find a way to do this, for all nodes.\u00a0 I am swayed by Dan Kaminsky's scalability warnings, and my instinct tells me that leaving full verification to a select few deep-pockets nodes in the future opens up all sorts of centralization/power-corporation issues that is contrary to the Bitcoin concept.\u00a0 It is in everyone's best interest to make it as easy as possible for anyone to act as a full node (if possible).\u00a0 As such, I believe that the current system of minimizing TxOut size is the right one.\u00a0 TxIns take up 0 bytes space in the long-run when taking into account any blockchain pruning/snapshot idea (except for nLocktime/seq transactions where the TxIn might have to be saved).\u00a0 \n\n-Alan\n\n\n\n\n\nOn 12/18/2011 12:09 PM, theymos wrote: \nOn Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote: \n>I don't like the idea of a header only client, unless this is just an\ninterim action until the full block chain is downloaded in the\nbackground. Development of these types of clients is probably\ninevitable, but I believe that this breaks the most fundamental\naspects of Bitcoin's security model. If a client has only headers, it\ncannot do full verification, and it is trusting the data from random\nanonymous peers. \n>A headers-only client is much better than trusting anyone, since an\nattacker needs >50% of the network's computational power to trick\nsuch clients. For everyone to keep being a full node, hardware costs would need to\nconstantly go down enough for all nodes to be able to handle enough\ntransactions to meet demand. If hardware doesn't become cheap enough\nquickly enough, either some people would be unable to handle being full\nnodes, or the max block size wouldn't rise enough to meet demand and\ntransaction fees would become noncompetitive. ------------------------------------------------------------------------------\nLearn Windows Azure Live!  Tuesday, Dec 13, 2011\nMicrosoft is holding a special Learn Windows Azure training event for \ndevelopers. It will provide a great way to learn Windows Azure and what it \nprovides. You can attend the event by watching it streamed LIVE online.  \nLearn more at http://p.sf.net/sfu/ms-windowsazure\n_______________________________________________\nBitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development \n\n------------------------------------------------------------------------------\nLearn Windows Azure Live!\u00a0 Tuesday, Dec 13, 2011\nMicrosoft is holding a special Learn Windows Azure training event for \ndevelopers. It will provide a great way to learn Windows Azure and what it \nprovides. You can attend the event by watching it streamed LIVE online.\u00a0 \nLearn more at http://p.sf.net/sfu/ms-windowsazure\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/3d1108f0/attachment.html>", "summary": "A proposal for \"snapshot\" frames (blocks) to replace checkpoints and improve blockchain validation speed and scalability was discussed. Blockchain pruning was also deemed critical for decentralization."}, {"author": "Jorge Tim\u00f3n", "date": "2011-12-18T19:37:16", "message_text_only": "2011/12/17, theymos <theymos at mm.st>:\n> My preferred solution for handling scalability in the future is to\n> have lightweight clients download only headers and Merkle trees (which\n> are both small and easy to distribute), and then require senders to\n> contact recipients directly in order to transmit their transactions.\n> Then lightweight clients never need full blocks to build their\n> balances, and full nodes don't have to handle expensive queries from\n> lightweight clients.\n\nThis idea is really interesting. Is there any drawback I don't see?", "summary": "Lightweight clients could download only headers and Merkle trees, requiring senders to contact recipients directly to transmit transactions, reducing the load on full nodes. No apparent drawbacks."}, {"author": "Eric Lombrozo", "date": "2011-12-21T06:19:46", "message_text_only": "There are other issues besides IP address anonymization that would\nneed to be addressed. I'm sure at least a good number of you have read\nhttp://arxiv.org/abs/1107.4524 and have seen Dan Kaminsky's\nslideshows.\n\ni.e. all fund aggregations (transactions with multiple inputs using\ndifferent public keys) make it easy to associate all the public keys\nto a single entity. Large movements of bitcoin to addresses that\nhaven't been seen before are often interesting events. Then you can\ncorrelate transactions with trades on exchanges or with other data\nsources for time and amount.\n\nHowever, going back to what had been said earlier, the bitcoin\nprotocol itself is not really designed to address these issues. It is\ndesigned with the goal of rapidly propagating transactions over a\nnetwork and getting a bunch of peers to be able to independently\nverify that they occurred in a particular order and that the\nsignatures are valid.\n\nThe subject of how to anonymize cryptocurrencies is a separate one,\nIMHO...and one which needs to address not only how to hide the\nidentity of those who relay transactions but also how to organize and\nmanipulate wallets as to thwart attempts at block chain analysis. And\nthese topics, although interesting in and of themselves, was not what\nthis thread was intended to address. This thread was intended to\naddress the issue of extending the protocol to allow for independently\nrunning thin or specialized services that can all interface via the\nbitcoin protocol without requiring one to step outside the protocol\nwith special gateway access.", "summary": "Bitcoin protocol is not designed to address issues of anonymity and fund aggregation. Extending the protocol is intended to allow independent services to interface via the bitcoin protocol."}], "thread_summary": {"title": "Protocol extensions", "categories": ["Bitcoin-development"], "authors": ["Nicolas Fischer", "Eric Lombrozo", "Jeff Garzik", "Wladimir", "Kyle Henderson", "Amir Taaki", "Zell Faze", "theymos", "Jordan Mack", "Alan Reiner", "Michael Gr\u00f8nager", "Gregory Maxwell", "Andy Parkins", "Gavin Andresen", "Jorge Tim\u00f3n", "Stefan Thomas", "Joel Joonatan Kaartinen", "Christian Decker"], "messages_count": 36, "total_messages_chars_count": 106160, "convo_summary": "Bitcoin developers discuss ways to exploit the protocol's potential, including breaking up tasks into separate components and using a distributed hash table for block chain storage. They propose a hypercube network structure to reduce network load and partition the transaction/block space through a Distributed Hash Table approach to provide distributed validation and storage. Supernodes may emerge to validate transactions, owned by miners, forming a hierarchical network with lightweight clients at the bottom. Broadcasting transactions may not be necessary, and caching could be used to reduce load on responsible nodes."}}, {"title": "[Bitcoin-development] BIP language on normative behavior", "thread_messages": [{"author": "Gregory Maxwell", "date": "2011-12-19T22:29:34", "message_text_only": "I've been arguing with Luke-JR on IRC about the interpenetration of\nBIP_0014\u2014  Gavin's recent commit uses the same version string for the\nGUI interface and the daemon mode.\n\nLuke believes this is a _violation_ of BIP_0014 and an error in\njudgement on Gavin's part, and a failure to conform to the community\nadopted standard. I believe Luke is mistaken: that BIP_0014 actually\ndon't have mandatory requirements for what you put in the version\nfield and even if it did, that they are in fact the same software and\nshould have the same name.\n\nI don't think an agreement is likely on the second point, but the\nfirst point highlights some ambiguity in the interpretation of BIP\nlanguage. E.g. What is permitted vs encouraged vs required.\n\nThere is well established standard language for this purpose:\n\nhttps://www.ietf.org/rfc/rfc2119.txt\n\nI strongly recommend that all BIPs be written using the RFC2119\nkeywords where appropriate.", "summary": "Debate on BIP_0014 interpenetration between Gavin and Luke-JR. Gavin's commit uses the same version string for GUI and daemon mode, which Luke sees as a violation."}, {"author": "Amir Taaki", "date": "2011-12-21T00:59:00", "message_text_only": "A few weeks back I was in discussion with the IANA on getting a bitcoin URI accepted in the standard. As a prerequisite I had to read 5 huge documents. I did not end up writing that RFC.\n\nSkilled developers have even less time than I do. While this particular RFC is really nice for keeping ambiguity at bay, it is one of many small rules that bring marginal improvements. \"Rule creep\" (like feature creep) starts off with good intentions but degenerates into a situation like Wikipedia or any other system with a heavy bureaucracy that can use the rules for lawyering against you.\n\nWe want to encourage skilled developers to help set the standards and participate in discussions. Beyond using good grammar and using the correct formatting (and I even help with those), I defer on the site of trusting common sense and human judgement :)\n\nHowever this is a good RFC, and I will advise any future BIP contributors to read it. It offers good suggestions.\n\nAbout what Luke says:\n\nI kind of agree with him. The intention was to specify software stacks rather than end applications. This allows us to more carefully track software evolution and behaviour throughout the network. bitcoin-qt need not be tied to the Satoshi code-base and may in the future use other core systems through its intermediary layer. BitcoinJava has given rise to a bunch of other application like Android Bitcoin and MultiBit- however they are both BitcoinJava derivatives.\n\nHowever BIPs are a community consensus thing. It depends on the mutual consent of everybody and if there is a commonly agreed sentiment against the wording of an Accepted (or even Active) BIP then it can be amended ad-hoc.\n\nThe purpose of BIPs is to enhance development by 1. providing a stable system environment for programmers to work towards an accepted standard 2. serve as an equaliser for smaller groups (the third party clients vs the current behemoth client) by giving them a voice or platform.\n\nAnd they can only function by those who want them to function.\n\nBut personally, I really do think splitting bitcoin-qt into XXX and bitcoin-qt is a smart idea. Starting from lowest to top part of the system is smart: http://www.useragentstring.com/pages/Firefox/\n\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110613 Firefox/6.0a2\n\nMozilla is the application suite (Mozilla Thunderbird, Mozilla Firefox, ...)\n\nGecko is the rendering engine\nFirefox is the end application\n\nIn the original intention for BIP_0014, that would map to:\n\n/Gecko:20110613/Firefox:6.0a2/Mozilla:5.0/\n\nWith something like WebKit, it becomes easy to see why that would be useful. You can suddenly do a network wide scan of all browsers using WebKit, rather than having to maintain a database of all WebKit enabled browsers.\n\nSo if this is contentious.\n\nThen discuss. I'll update the BIP according to what everyone decides they like.\n\n\n:)\n\n\n\n________________________________\n From: Gregory Maxwell <gmaxwell at gmail.com>\nTo: Bitcoin Development <bitcoin-development at lists.sourceforge.net> \nSent: Monday, December 19, 2011 10:29 PM\nSubject: [Bitcoin-development] BIP language on normative behavior\n \nI've been arguing with Luke-JR on IRC about the interpenetration of\nBIP_0014\u2014\u00a0 Gavin's recent commit uses the same version string for the\nGUI interface and the daemon mode.\n\nLuke believes this is a _violation_ of BIP_0014 and an error in\njudgement on Gavin's part, and a failure to conform to the community\nadopted standard. I believe Luke is mistaken: that BIP_0014 actually\ndon't have mandatory requirements for what you put in the version\nfield and even if it did, that they are in fact the same software and\nshould have the same name.\n\nI don't think an agreement is likely on the second point, but the\nfirst point highlights some ambiguity in the interpretation of BIP\nlanguage. E.g. What is permitted vs encouraged vs required.\n\nThere is well established standard language for this purpose:\n\nhttps://www.ietf.org/rfc/rfc2119.txt\n\nI strongly recommend that all BIPs be written using the RFC2119\nkeywords where appropriate.\n\n------------------------------------------------------------------------------\nWrite once. Port to many.\nGet the SDK and tools to simplify cross-platform app development. Create \nnew or port existing apps to sell to consumers worldwide. Explore the \nIntel AppUpSM program developer opportunity. appdeveloper.intel.com/join\nhttp://p.sf.net/sfu/intel-appdev\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/eb203e2a/attachment.html>", "summary": "Developers should participate in setting standards, but excessive rule-making can lead to bureaucracy. BIPs aim to provide a stable system environment for programmers."}, {"author": "Andy Parkins", "date": "2011-12-21T09:27:05", "message_text_only": "On 2011 December 21 Wednesday, Amir Taaki wrote:\n\n> In the original intention for BIP_0014, that would map to:\n> \n> /Gecko:20110613/Firefox:6.0a2/Mozilla:5.0/\n> \n> With something like WebKit, it becomes easy to see why that would be\n> useful. You can suddenly do a network wide scan of all browsers using\n> WebKit, rather than having to maintain a database of all WebKit enabled\n> browsers.\n\nThis seems excellent to me.\n\nI think most developers want to do the right thing when it comes to standards, \nand it is only the inflexibility or ambiguity of a standard that means they \ndon't.\n\nThis heirarchical method lets every client supply all the information they \nhave -- nobody has to make a decision to leave something out.  The internal \ndebate they would have \"is my gui version more important than my protocol \nengine version?\" is unnecessary.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/c7b379b6/attachment.sig>", "summary": "Amir Taaki suggests using a hierarchical method for mapping browser information, making it easier to scan all browsers using WebKit."}, {"author": "Amir Taaki", "date": "2011-12-21T01:14:10", "message_text_only": "OK, give me a shout on IRC. It is a lot of work though, so be prepared. Bring bags of patience :)\n\n\n\n________________________________\n From: Luke-Jr <luke at dashjr.org>\nTo: Amir Taaki <zgenjix at yahoo.com> \nSent: Wednesday, December 21, 2011 1:07 AM\nSubject: Re: [Bitcoin-development] BIP language on normative behavior\n \nOn Tuesday, December 20, 2011 7:59:00 PM Amir Taaki wrote:\n> A few weeks back I was in discussion with the IANA on getting a bitcoin URI\n> accepted in the standard. As a prerequisite I had to read 5 huge\n> documents. I did not end up writing that RFC.\n\nI also contacted the IANA about getting the bitcoin URI spec accepted on their \nindex, however never heard back. If you want, please have whoever you \ndiscussed it with get in touch with me. Either way, please be sure whatever \nthey index is compliant with the spec on the wiki as-is (especially not being \nBTC unit specific, as this is clearly non-scalable).\n\nLuke\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/90b3ac38/attachment.html>", "summary": "Luke-Jr and Amir Taaki discussed getting the bitcoin URI spec accepted on the IANA index, but never heard back."}], "thread_summary": {"title": "BIP language on normative behavior", "categories": ["Bitcoin-development"], "authors": ["Gregory Maxwell", "Andy Parkins", "Amir Taaki"], "messages_count": 4, "total_messages_chars_count": 8042, "convo_summary": "Gregory Maxwell, Gavin, and Luke-JR debated on BIP_0014 interpenetration. Amir Taaki believes that developers should participate in setting standards, but excessive rule-making can lead to bureaucracy. Andy Parkins suggests using a hierarchical method for mapping browser information. Amir Taaki and Luke-Jr discussed getting the bitcoin URI spec accepted on the IANA index."}}, {"title": "[Bitcoin-development] Lying about User Agent (was: BIP language on normative behavior)", "thread_messages": [{"author": "Luke-Jr", "date": "2011-12-19T22:36:44", "message_text_only": "On Monday, December 19, 2011 5:29:34 PM Gregory Maxwell wrote:\n> I've been arguing with Luke-JR on IRC about the interpenetration of\n> BIP_0014\u2014  Gavin's recent commit uses the same version string for the\n> GUI interface and the daemon mode.\n> \n> Luke believes this is a _violation_ of BIP_0014 and an error in\n> judgement on Gavin's part, and a failure to conform to the community\n> adopted standard. \n\nTo clarify, I believe LYING about the client is a violation. Specifically, \nGavin's commit intentionally reports \"bitcoin-qt\" for bitcoind. A common name \nfor the codebase is compliant, and I don't see anything that says a version \n*must* be reported at all, let alone for a specific component, so it *could* \ncomply by leaving that part off. But if there is a common part, it certainly \nisn't Bitcoin-Qt.\n\nhttps://github.com/bitcoin/bitcoin/pull/715 contains a fix that should fulfil \neveryone's desires (Gavin wants security by obscurity by making bitcoind and \nBitcoin-Qt indistinguishable; this is the default with pull #715).", "summary": "A disagreement between Gregory Maxwell and Luke-JR over Gavin's recent commit using the same version string for the GUI interface and the daemon mode."}], "thread_summary": {"title": "Lying about User Agent (was: BIP language on normative behavior)", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 1034}}, {"title": "[Bitcoin-development] Changes for version 0.6 are being pulled into HEAD", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-12-20T20:49:16", "message_text_only": "FYI for anybody who doesn't hang out in IRC:\n\nI've been busy pulling patches into git HEAD for a Bitcoin version\n0.6, with the goal of having a Release Candidate 1 out in a couple of\nweeks.\n\nSo if you've done all your Christmas shopping and have time to help\ntest, code review, etc. now would be the time.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin version 0.6 Release Candidate 1 is expected in a few weeks. Gavin Andresen is seeking testers and code reviewers."}, {"author": "Luke-Jr", "date": "2011-12-21T01:46:41", "message_text_only": "On Tuesday, December 20, 2011 3:49:16 PM Gavin Andresen wrote:\n> I've been busy pulling patches into git HEAD for a Bitcoin version\n> 0.6, with the goal of having a Release Candidate 1 out in a couple of\n> weeks.\n\nI've rebuilt my 'next' and 'next-test' branches...\n    git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git\n\nAccepted for 0.6:\n* 81807c3 Merge branch 'coinbaser' into next\n* 6ea6db3 Merge remote branch 'laanwj/ui_copy_amount' into next\n* a6ef83e Merge 'QR Code generation via libqrencode' into next\n* e0673bd Merge branch 'signmessage_gui' into next\n\nReady for acceptance?\n* 4783528 Merge remote branch 'matt/keepnode' into next-test\n* 5a11d0f Merge branch 'force_send' into next-test\n* 2cddc71 Merge remote branch 'sipa/comprpubkey' into next-test\n* 73a8ca6 Merge remote branch 'matt/uri' into next-test\n* 9314427 Merge remote branch 'gavin/testnetdifficulty' into next-test\n* 1360e43 Merge branch 'stdint' into next-test\n\nNeeds review:\n* 6ee82ff Merge branch 'forceresendtx' into next-test\n* 8a82ba6 Merge branch 'blknotify' into next-test\n* 674f1a6 Merge 'Temporarily disable \"minimize to tray\" in the startup phase\n          if the \"-min\" option is specified' into next-test\n* 5afd4de Merge branch 'bugfix_client_name' into next-test\n\nCannot be merged cleanly (at least not into next-test at this point):\n* Pull 556 txinfo\n* Pull 568 JSON-RPC multithreading + rpc_keepalive\n* Pull 457 IPv6 JSON-RPC\n* Pull 427 IPv6\n* Pull 565 optimize_FastGetWork\n* Pull 430 joelkatz optimizations\n* Pull 562 optimize_ToHex\n* Pull 452 JSON-RPC API versioning\n\nNot yet written:\n* Treat generation (almost) like normal receive\n* JSON-RPC with integer amounts", "summary": "Gavin Andresen is working on Bitcoin version 0.6 and aims to release a candidate in a few weeks, with several patches already accepted."}, {"author": "Mike Hearn", "date": "2011-12-21T10:12:07", "message_text_only": "Thanks for this summary Luke.\n\nGit does not produce very helpful summaries when every commit is a merge.\nIs there a way to fix that? You have to guess what a change does based on\nthe name of the topic branch currently.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/334ef2b9/attachment.html>", "summary": "Git's merge commits lack helpful summaries, making it difficult to understand changes. Guessing based on topic branch names is necessary."}, {"author": "Luke-Jr", "date": "2011-12-21T15:44:53", "message_text_only": "On Wednesday, December 21, 2011 5:12:07 AM Mike Hearn wrote:\n> Git does not produce very helpful summaries when every commit is a merge.\n> Is there a way to fix that? You have to guess what a change does based on\n> the name of the topic branch currently.\n\nNot sure what you mean. Maybe `git log --no-merges` ?", "summary": "Mike Hearn asks if there is a way to improve Git's summaries for merge commits. Suggestion given to use `git log --no-merges`."}, {"author": "Luke-Jr", "date": "2011-12-21T16:45:42", "message_text_only": "On Tuesday, December 20, 2011 8:46:41 PM Luke-Jr wrote:\n> On Tuesday, December 20, 2011 3:49:16 PM Gavin Andresen wrote:\n> > I've been busy pulling patches into git HEAD for a Bitcoin version\n> > 0.6, with the goal of having a Release Candidate 1 out in a couple of\n> > weeks.\n> \n> I've rebuilt my 'next' and 'next-test' branches...\n>     git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git\n\nAnd here's yet another update, this time with a total of 21 branches merged. \nAnyone want to make binaries to get these branches some wider testing?\n\nAccepted for 0.6:\n* 81807c3 (pull 719) Coinbaser\n* 6ea6db3 (pull 683) Context menu updates for TransactionView and...\n* a6ef83e (pull 629) QR Code generation via libqrencode\n* e0673bd (pull 582) Bitcoin-Qt signmessage GUI\n\nReady for acceptance?\n* 4783528 (pull 454) Add -keepnode which attempts to -addnode and keep a...\n* 5a11d0f (pull 570) Specify fees explicitly via JSON-RPC\n* 2cddc71 (pull 649) Compressed pubkeys\n* 73a8ca6 (pull 593) Full URL Support in bitcoin-qt\n* 27a2460 (pull 721) 'getmininginfo' method\n* e57ccf4 (pull 686) Testnet difficulty calculation changes, to take effect...\n* 5b4a18d (pull 720) Use standard C99 (and Qt) types for 64-bit integers\n\nNeeds review:\n* c7ee97d (pull 421) added option -forceresendtx\n* cff2c28 (pull 714) Execute a command when best block changes...\n* 3ca784f (pull 691) Temporarily disable \"minimize to tray\" in the startup...\n* 59842f5 (pull 568) Multithreaded JSON-RPC with HTTP 1.1 Keep-Alive support\n* d08e8fd (pull 565) FastGetWork optimization\n* 0dc52ac (pull 715) Bugfix: comply with BIP 0014 ...\n* f88dddc (pull 559) -acceptnonstdtxn option to skip \"non-standard...\n* 95d3e7e (pull 552) Typo-tolerant (optimized) Base58 parser\n* 45beffe (pull 553) Parse URIs with non-BTC amounts\n* 74439a5 (pull 562) Optimized binary-to-hex converter (ToHex)\n\nCannot be merged cleanly (at least not into next-test at this point):\n*         (pull 430) joelkatz optimizations\n*         (pull 452) JSON-RPC API versioning\n*         (pull 457) IPv6 JSON-RPC\n*         (pull 427) IPv6\n\nNot yet written:\n*                    Treat generation (almost) like normal receive\n*                    JSON-RPC with integer amounts", "summary": "Bitcoin version 0.6 is being updated with 21 merged branches, including QR code generation and compressed pubkeys, with a release candidate due soon."}, {"author": "Jeff Garzik", "date": "2011-12-21T17:12:43", "message_text_only": "On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:\n> Accepted for 0.6:\n> * 81807c3 (pull 719) Coinbaser\n\nThis is not \"accepted\" as discussed yesterday on IRC.  You need to\nfind buy-in from some other miners to make sure this is what \"they\"\nwant, rather than just what \"you\" want.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Jeff Garzik questions the acceptance of a proposed change in Bitcoin mining and suggests seeking agreement from other miners."}, {"author": "Luke-Jr", "date": "2011-12-21T17:14:00", "message_text_only": "On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:\n> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:\n> > Accepted for 0.6:\n> > * 81807c3 (pull 719) Coinbaser\n> \n> This is not \"accepted\" as discussed yesterday on IRC.  You need to\n> find buy-in from some other miners to make sure this is what \"they\"\n> want, rather than just what \"you\" want.\n\nIt was per Gavin on IRC before yesterday. And there is already buy-in from \nother miners.", "summary": "Jeff Garzik disputes Luke-Jr's claim that a certain proposal has been accepted and insists on getting buy-in from other miners."}, {"author": "Jeff Garzik", "date": "2011-12-21T17:17:57", "message_text_only": "On Wed, Dec 21, 2011 at 12:14 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:\n>> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:\n>> > Accepted for 0.6:\n>> > * 81807c3 (pull 719) Coinbaser\n>>\n>> This is not \"accepted\" as discussed yesterday on IRC. \u00a0You need to\n>> find buy-in from some other miners to make sure this is what \"they\"\n>> want, rather than just what \"you\" want.\n>\n> It was per Gavin on IRC before yesterday.\n\nQuoting IRC yesterday,\n<gavinandresen> jgarzik:  I defer to your judgement on coinbaser, I don't care.\n\n> And there is already buy-in from\n> other miners.\n\nThen post data backing up that vague statement.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Jeff Garzik and Luke-Jr discuss the acceptance of Coinbaser for 0.6, with Garzik requesting data to back up Luke-Jr's claim of miner buy-in."}, {"author": "Luke-Jr", "date": "2011-12-21T17:37:39", "message_text_only": "On Wednesday, December 21, 2011 12:17:57 PM Jeff Garzik wrote:\n> On Wed, Dec 21, 2011 at 12:14 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:\n> >> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:\n> >> > Accepted for 0.6:\n> >> > * 81807c3 (pull 719) Coinbaser\n> >> \n> >> This is not \"accepted\" as discussed yesterday on IRC.  You need to\n> >> find buy-in from some other miners to make sure this is what \"they\"\n> >> want, rather than just what \"you\" want.\n> > \n> > It was per Gavin on IRC before yesterday.\n> \n> Quoting IRC yesterday,\n> <gavinandresen> jgarzik:  I defer to your judgement on coinbaser, I don't\n> care.\n\n[Friday, December 02, 2011] [1:57:14 PM] <gavinandresen> luke-jr: ok-- there \nseems to be general consensus to pull coinbaser for 0.6, so I'll probably pull \nit before op_eval and rework the op_eval code to use coinbaser.\n\n> > And there is already buy-in from other miners.\n> \n> Then post data backing up that vague statement.\n\nAt least Eclipse (235 GH/s) is using it, and slush (1.3 TH/s) intends to.", "summary": "Jeff Garzik questions the acceptance of Coinbaser for Bitcoin 0.6, stating the need for buy-in from other miners. Luke-Jr cites Gavin Andresen's approval."}, {"author": "Wladimir", "date": "2011-12-21T10:30:59", "message_text_only": "Woohoo, 0.6.0 merging time!\n\nI'll merge some GUI pull requests for 0.6.x this/next week.\n\nWladimir\n\nOn Tue, Dec 20, 2011 at 9:49 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> FYI for anybody who doesn't hang out in IRC:\n>\n> I've been busy pulling patches into git HEAD for a Bitcoin version\n> 0.6, with the goal of having a Release Candidate 1 out in a couple of\n> weeks.\n>\n> So if you've done all your Christmas shopping and have time to help\n> test, code review, etc. now would be the time.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Write once. Port to many.\n> Get the SDK and tools to simplify cross-platform app development. Create\n> new or port existing apps to sell to consumers worldwide. Explore the\n> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join\n> http://p.sf.net/sfu/intel-appdev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/2ea0dfbd/attachment.html>", "summary": "Bitcoin version 0.6 is being developed with a goal of having a Release Candidate 1 out in a couple of weeks. Testing and code review help is needed."}], "thread_summary": {"title": "Changes for version 0.6 are being pulled into HEAD", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "Wladimir", "Mike Hearn", "Gavin Andresen"], "messages_count": 10, "total_messages_chars_count": 8864, "convo_summary": "Gavin Andresen is working on Bitcoin version 0.6 and is seeking testers and code reviewers. The release candidate is expected in a few weeks, with several patches already accepted. Bitcoin version 0.6 is being updated with 21 merged branches, including QR code generation and compressed pubkeys. Jeff Garzik disputes Luke-Jr's claim that a certain proposal has been accepted and insists on getting buy-in from other miners."}}, {"title": "[Bitcoin-development] Unsubsribe", "thread_messages": [{"author": "Travell Perkins", "date": "2011-12-20T21:07:17", "message_text_only": "-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/8d327603/attachment.html>", "summary": "No text provided."}], "thread_summary": {"title": "Unsubsribe", "categories": ["Bitcoin-development"], "authors": ["Travell Perkins"], "messages_count": 1, "total_messages_chars_count": 182}}, {"title": "[Bitcoin-development] Why are my posts being put in new threads?", "thread_messages": [{"author": "Eric Lombrozo", "date": "2011-12-21T11:50:47", "message_text_only": "I've made a couple recent posts that were intended for the Protocol\nextensions thread but have been put in new threads. What part of the\nemail message is used to identify the thread to which it belongs? I\nwould have thought the subject, but apparently it isn't.", "summary": "The author questions which part of an email message identifies the thread to which it belongs, as recent posts were misplaced."}, {"author": "Luke-Jr", "date": "2011-12-21T15:46:35", "message_text_only": "On Wednesday, December 21, 2011 6:50:47 AM Eric Lombrozo wrote:\n> I've made a couple recent posts that were intended for the Protocol\n> extensions thread but have been put in new threads. What part of the\n> email message is used to identify the thread to which it belongs? I\n> would have thought the subject, but apparently it isn't.\n\nhttp://cr.yp.to/immhf/thread.html", "summary": "Eric Lombrozo asks how email threads are identified and expresses confusion over his recent posts being put in new threads."}], "thread_summary": {"title": "Why are my posts being put in new threads?", "categories": ["Bitcoin-development"], "authors": ["Eric Lombrozo", "Luke-Jr"], "messages_count": 2, "total_messages_chars_count": 629, "convo_summary": "Eric Lombrozo is questioning how email threads are identified after his recent posts were misplaced. Luke-Jr expresses confusion over the issue."}}, {"title": "[Bitcoin-development] IMPORTANT: if you are running latest git HEAD", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-12-25T16:05:42", "message_text_only": "Reposted from the forums:\n\nmakomk reported a remote vulnerability that I pulled into the master\nbitcoin/bitcoin tree on December 20. If you are running git-HEAD code\non the production network you should pull the latest code to get the\nbug fixed.\n\nThis affects only anybody who has pulled and compiled their own\nbitcoind/bitcoin-qt from the source tree in the last 5 days.\n\nGory details:\n\nI made a mistake.  I refactored the ConnectInputs() function into two\npieces (FetchInputs() and ConnectInputs()), and should have duplicated\na check in ConnectInputs for an out-of-range\nprevious-transaction-output in the FetchInputs() method.  The result\nwas a new method I wrote to help prevent a possible OP_EVAL-related\ndenial-of-service attack (AreInputsStandard()) could crash with an\nout-of-bounds memory access if given an invalid transaction.\n\nThe bug-fix puts a check in FetchInputs and an assertion in\nAreInputsStandard. This does not affect the back-ported \"mining only\"\ncode I wrote that some miners and pools have started using.\n\nThe good news is this was found and reported before binaries with the\nvulnerability were released; the bad news is this was not found before\nthe code was pulled and could have made it into the next release if\nmakomk had not been testing some unrelated code.\n\nBefore releasing 0.6, I would like to have an \"intelligent,\nbitcoin-specific fuzzing tool\" that automatically finds this type of\nbug that we can run before every release. If anybody already has one,\nplease speak up!\n\n-- \n--\nGavin Andresen", "summary": "A remote vulnerability was reported in the master bitcoin/bitcoin tree, affecting those who compiled their own bitcoind/bitcoin-qt in the last 5 days."}, {"author": "bitcoin-list at bluematt.me", "date": "2011-12-25T21:15:22", "message_text_only": "Couldn't your net testing code be modified to do that to some extent?\n\nGavin Andresen <gavinandresen at gmail.com> wrote:\n\n>Reposted from the forums:\n>\n>makomk reported a remote vulnerability that I pulled into the master\n>bitcoin/bitcoin tree on December 20. If you are running git-HEAD code\n>on the production network you should pull the latest code to get the\n>bug fixed.\n>\n>This affects only anybody who has pulled and compiled their own\n>bitcoind/bitcoin-qt from the source tree in the last 5 days.\n>\n>Gory details:\n>\n>I made a mistake.  I refactored the ConnectInputs() function into two\n>pieces (FetchInputs() and ConnectInputs()), and should have duplicated\n>a check in ConnectInputs for an out-of-range\n>previous-transaction-output in the FetchInputs() method.  The result\n>was a new method I wrote to help prevent a possible OP_EVAL-related\n>denial-of-service attack (AreInputsStandard()) could crash with an\n>out-of-bounds memory access if given an invalid transaction.\n>\n>The bug-fix puts a check in FetchInputs and an assertion in\n>AreInputsStandard. This does not affect the back-ported \"mining only\"\n>code I wrote that some miners and pools have started using.\n>\n>The good news is this was found and reported before binaries with the\n>vulnerability were released; the bad news is this was not found before\n>the code was pulled and could have made it into the next release if\n>makomk had not been testing some unrelated code.\n>\n>Before releasing 0.6, I would like to have an \"intelligent,\n>bitcoin-specific fuzzing tool\" that automatically finds this type of\n>bug that we can run before every release. If anybody already has one,\n>please speak up!\n>\n>-- \n>--\n>Gavin Andresen\n>\n>------------------------------------------------------------------------------\n>Write once. Port to many.\n>Get the SDK and tools to simplify cross-platform app development.\n>Create \n>new or port existing apps to sell to consumers worldwide. Explore the \n>Intel AppUpSM program developer opportunity.\n>appdeveloper.intel.com/join\n>http://p.sf.net/sfu/intel-appdev\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "A remote vulnerability was reported and fixed in the master bitcoin/bitcoin tree affecting those who pulled and compiled their own code in the last 5 days."}], "thread_summary": {"title": "IMPORTANT: if you are running latest git HEAD", "categories": ["Bitcoin-development"], "authors": ["bitcoin-list at bluematt.me", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 3777, "convo_summary": "A remote vulnerability was found in the master bitcoin/bitcoin tree, affecting those who compiled their own bitcoind/bitcoin-qt in the last 5 days. The issue has been fixed and reported to the bitcoin-list at bluematt.me."}}, {"title": "[Bitcoin-development] [announce] gobtc -- Bitcoin library and reference client in Go programming language", "thread_messages": [{"author": "dpc at ucore.info", "date": "2011-12-26T13:13:42", "message_text_only": "Hi,\n\nI thought that it will not harm to share the project I've just began\nto work on: gobtc\n\ngobtc aim is to build a flexible FLOSS Bitcoin peer implementation,\nthat people could use in their applications to directly participate in\nBitcoin network.\n\nProject home: http://github.com/dpc/gobtc\n\nAs this is a crosspost to bitcoin-dev and go-nuts  mailinglist, for\nunfaimiliar with any of the terms\n\nBitcoin: http://bitcoin.org/\nGo Language: http://golang.org/\n\nRationale is: Go language seems perfectly fitted for writing efficient\nnetworking applications, and is providing build in standard library\nsupport for a lot technologies used in Bitcoin.\n\nIf anyone is interested in participating, I'm encouraging to get in\ntouch with me. I'm already in touch with one person who is willing to\nshare some working code.\n\nRegards,\n-- \nDawid Ci\u0119\u017carkiewicz", "summary": "Gobtc is a flexible FLOSS Bitcoin peer implementation built using the Go language, aimed at direct participation in the Bitcoin network."}], "thread_summary": {"title": "gobtc -- Bitcoin library and reference client in Go programming language", "categories": ["Bitcoin-development", "announce"], "authors": ["dpc at ucore.info"], "messages_count": 1, "total_messages_chars_count": 842}}, {"title": "[Bitcoin-development] Alternative to OP_EVAL", "thread_messages": [{"author": "roconnor at theorem.ca", "date": "2011-12-29T06:55:03", "message_text_only": "Gavin asked me to come up with an alternative to OP_EVAL, so here is my \nproposal.\n\nOP_CODEHASH Initial Proposal\n\nThe idea is to add third \"codehash\" stack to the scripting engine (or \nalternatively a codehash state variable) and have OP_CODESEPARATOR in \naddition to its current behaviour push the hash of the remaining code in \nthe script onto the codehash stack (or alternatively set the codehash \nstate variable).\n\nThen we add a new OP_CODEHASH operator that pops the codehash stack and \npushes it onto the main stack (or alternatively push the value of the \ncodehash state variable onto the mainstack which is initialized using the \nhash of the sigScript).\n\nThe new send-to-script transaction would be:\n\nOP_CODEHASH OP_HASH160 {20-byte-hash-value} OP_EQUAL\n\nWhich can be redeemed by\n\n{20-byte-code-hash} signatures OP_CODESEPARATOR code\n\n\nWhen run the code will consume all the signatures leaving the \n20-byte-code-hash on the stack.  When OP_CODEHASH is interpreted as a NOP \nit is skipped, then the hash is hashed and compared to the \n20-byte-hash-value and a match is required to succeed.\n\nWhen OP_CODEHASH is interpreted by a new client it pops the codehash stack \nand pushes the value onto the main stack, which in this standard \ntransaction pushes a value identical to the existing {20-byte-code-hash} \non the stack. Then again this hash is hashed and compared to to \n{20-byte-code-hash}.\n\n\nThis proposal covers all the desired behaviour from OP_EVAL proposal but \nwith a less radical change:\n   (1) you get send-to-script addresses\n   (2) you cannot redeem with the old client without knowing the hash of the script\n\nOP_CODEHASH has no dynamically generated code that is executed.  The \nlanguage remains a weak stack based language which is clearly terminating. \nThe number of operations executed is still bounded by the number of \noperations occurring in the script.  With the OP_EVAL proposal the script \nlanguage becomes essentially Turing complete, with only an artificial \nlimit on recursion depth preventing arbitrary computation and there is no \nway to know what code will run without executing it.  With the OP_EVAL \nproposal there is no way to statically analyze the script (say to count \nthe number of uses of OP_CHECKSIG or OP_MULTICHECKSIG or other analysis) \nwithout actually executing the script.\n\nThis is just an initial proposal there are clearly some variations that \ncould be done that would work just as well.\n\nThanks goes to luke-jr and others for their thoughts on this proposal.\n\nGood night everyone.\n\n-- \nRussell O'Connor                                      <http://r6.ca/>\n``All talk about `theft,''' the general counsel of the American Graphophone\nCompany wrote, ``is the merest claptrap, for there exists no property in\nideas musical, literary or artistic, except as defined by statute.''", "summary": "The proposal suggests adding a third \"codehash\" stack to the scripting engine, with a new OP_CODEHASH operator, to enable send-to-script addresses."}, {"author": "theymos", "date": "2011-12-29T08:44:19", "message_text_only": "On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:\n> The number of operations executed is still bounded by the number of\n> operations occurring in the script.  With the OP_EVAL proposal the\n> script language becomes essentially Turing complete, with only an\n> artificial limit on recursion depth preventing arbitrary computation\n> and there is no way to know what code will run without executing it.\n\nEven if OP_EVAL allowed infinite depth, you'd still need to explicitly\nspecify all operations performed, since there is no way of looping.\n\nI think that something like OP_EVAL will eventually be used to improve\nScript in a backward-compatible way (enable the disabled math ops, fix\nbugs, etc.), so the mechanism might as well be used now. The only\nadvantage I see with OP_CODEHASH is that script ops won't need to be in\nScript \"strings\".", "summary": "OP_EVAL proposal makes script language Turing complete with a limit on recursion depth, but all operations still need to be explicitly specified. OP_CODEHASH eliminates the need for script ops to be in strings."}, {"author": "roconnor at theorem.ca", "date": "2011-12-29T16:42:56", "message_text_only": "On Thu, 29 Dec 2011, theymos wrote:\n\n> On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:\n>> The number of operations executed is still bounded by the number of\n>> operations occurring in the script.  With the OP_EVAL proposal the\n>> script language becomes essentially Turing complete, with only an\n>> artificial limit on recursion depth preventing arbitrary computation\n>> and there is no way to know what code will run without executing it.\n>\n> Even if OP_EVAL allowed infinite depth, you'd still need to explicitly\n> specify all operations performed, since there is no way of looping.\n\nThat's not true.  Gavin himself showed how to use OP_EVAL to loop:\nOP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.\n\nBasically OP_DUP lets you duplicate the code on the stack and that is the \nkey to looping.  I'm pretty sure from here we get get Turing completeness. \nUsing the stack operations I expect you can implement the SK-calculus \ngiven an OP_EVAL that allows arbitrary depth.\n\nOP_EVAL adds dangerously expressive power to the scripting language.\n\n-- \nRussell O'Connor                                      <http://r6.ca/>\n``All talk about `theft,''' the general counsel of the American Graphophone\nCompany wrote, ``is the merest claptrap, for there exists no property in\nideas musical, literary or artistic, except as defined by statute.''", "summary": "OP_EVAL proposal makes the script language Turing complete, with no limit on recursion depth, allowing arbitrary computation, and looping."}, {"author": "Chris Double", "date": "2011-12-30T12:01:53", "message_text_only": "On Fri, Dec 30, 2011 at 5:42 AM,  <roconnor at theorem.ca> wrote:\n> Basically OP_DUP lets you duplicate the code on the stack and that is the\n> key to looping. \u00a0I'm pretty sure from here we get get Turing completeness.\n> Using the stack operations I expect you can implement the SK-calculus\n> given an OP_EVAL that allows arbitrary depth.\n>\n> OP_EVAL adds dangerously expressive power to the scripting language.\n\nIf you look at the archives of the concatenative programming mailing\nlist [1] you'll see lots of examples of people creating stack\nlanguages with minimal operations that exploit similar functionality\nto reduce the required built in operations. The discussion on the list\nis mostly about stack based languages where programs can be pushed on\nthe stack and executed (eg. Joy [2]/Factor/Some Forths).\n\nI don't think the scripting engine in bitcoin has the ability to\nconcatenate, append or otherwise manipulate scripts on the stack to be\neval'd though does it?\n\n[1] http://tech.groups.yahoo.com/group/concatenative\n[2] http://tunes.org/~iepos/joy.html\n\nChris.\n-- \nhttp://www.bluishcoder.co.nz", "summary": "OP_EVAL in Bitcoin scripting language adds expressive power, allowing for Turing completeness and implementation of SK-calculus using stack operations."}, {"author": "roconnor at theorem.ca", "date": "2011-12-30T17:19:24", "message_text_only": "On Sat, 31 Dec 2011, Chris Double wrote:\n\n> On Fri, Dec 30, 2011 at 5:42 AM,  <roconnor at theorem.ca> wrote:\n>> Basically OP_DUP lets you duplicate the code on the stack and that is the\n>> key to looping. \u00a0I'm pretty sure from here we get get Turing completeness.\n>> Using the stack operations I expect you can implement the SK-calculus\n>> given an OP_EVAL that allows arbitrary depth.\n>>\n>> OP_EVAL adds dangerously expressive power to the scripting language.\n>\n> If you look at the archives of the concatenative programming mailing\n> list [1] you'll see lots of examples of people creating stack\n> languages with minimal operations that exploit similar functionality\n> to reduce the required built in operations. The discussion on the list\n> is mostly about stack based languages where programs can be pushed on\n> the stack and executed (eg. Joy [2]/Factor/Some Forths).\n>\n> I don't think the scripting engine in bitcoin has the ability to\n> concatenate, append or otherwise manipulate scripts on the stack to be\n> eval'd though does it?\n\nIt will limited ability manipulate scripts on the stack through the use of \narithmetic and hashing operations, and if OP_CAT, OP_SUBSTR and friends \nare ever restored, it will have even more abilities.\n\n-- \nRussell O'Connor                                      <http://r6.ca/>\n``All talk about `theft,''' the general counsel of the American Graphophone\nCompany wrote, ``is the merest claptrap, for there exists no property in\nideas musical, literary or artistic, except as defined by statute.''", "summary": "Bitcoin's scripting language has limited ability to manipulate scripts on the stack, but could gain more abilities if certain operations are restored."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-12-31T09:54:13", "message_text_only": "Wouldn't it work to restrict the number of executions of OP_EVAL allowed\nper transaction? That way it wouldn't allow for unlimited looping. If\nthere's too many OP_EVAL executions during the transaction evaluation,\njust consider the transaction illegal. 3 would be enough for the\npurposes people have been planning for here I think.\n\n- Joel\n\nOn Thu, 2011-12-29 at 11:42 -0500, roconnor at theorem.ca wrote:\n> On Thu, 29 Dec 2011, theymos wrote:\n> \n> > On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:\n> >> The number of operations executed is still bounded by the number of\n> >> operations occurring in the script.  With the OP_EVAL proposal the\n> >> script language becomes essentially Turing complete, with only an\n> >> artificial limit on recursion depth preventing arbitrary computation\n> >> and there is no way to know what code will run without executing it.\n> >\n> > Even if OP_EVAL allowed infinite depth, you'd still need to explicitly\n> > specify all operations performed, since there is no way of looping.\n> \n> That's not true.  Gavin himself showed how to use OP_EVAL to loop:\n> OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.\n> \n> Basically OP_DUP lets you duplicate the code on the stack and that is the \n> key to looping.  I'm pretty sure from here we get get Turing completeness. \n> Using the stack operations I expect you can implement the SK-calculus \n> given an OP_EVAL that allows arbitrary depth.\n> \n> OP_EVAL adds dangerously expressive power to the scripting language.\n>", "summary": "Proposal to restrict the number of executions of OP_EVAL per transaction to prevent unlimited looping and consider transactions with too many executions illegal."}, {"author": "Zell Faze", "date": "2011-12-31T17:28:58", "message_text_only": "I agree with Joel.  I think someone brought this up earlier as well.   Most OP_EVAL transactions won't be complex enough to require more than a few loops.\n\n--Zell\n\n------------------------\n\"It stopped being just a website a long time ago. For many of us, most of us, Wikipedia has become an indispensable part of our daily lives.\"\n\u2014 Jimmy Wales, Founder of Wikipedia \nHelp protect it now. Please make a donation today: http://www.wikimediafoundation.org/wiki/Donate\n\n\n\n--- On Sat, 12/31/11, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:\n\n> From: Joel Joonatan Kaartinen <joel.kaartinen at gmail.com>\n> Subject: Re: [Bitcoin-development] Alternative to OP_EVAL\n> To: roconnor at theorem.ca\n> Cc: bitcoin-development at lists.sourceforge.net\n> Date: Saturday, December 31, 2011, 4:54 AM\n> Wouldn't it work to restrict the\n> number of executions of OP_EVAL allowed\n> per transaction? That way it wouldn't allow for unlimited\n> looping. If\n> there's too many OP_EVAL executions during the transaction\n> evaluation,\n> just consider the transaction illegal. 3 would be enough\n> for the\n> purposes people have been planning for here I think.\n> \n> - Joel\n> \n> On Thu, 2011-12-29 at 11:42 -0500, roconnor at theorem.ca\n> wrote:\n> > On Thu, 29 Dec 2011, theymos wrote:\n> > \n> > > On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca\n> wrote:\n> > >> The number of operations executed is still\n> bounded by the number of\n> > >> operations occurring in the script.\u00a0\n> With the OP_EVAL proposal the\n> > >> script language becomes essentially Turing\n> complete, with only an\n> > >> artificial limit on recursion depth\n> preventing arbitrary computation\n> > >> and there is no way to know what code will\n> run without executing it.\n> > >\n> > > Even if OP_EVAL allowed infinite depth, you'd\n> still need to explicitly\n> > > specify all operations performed, since there is\n> no way of looping.\n> > \n> > That's not true.\u00a0 Gavin himself showed how to use\n> OP_EVAL to loop:\n> > OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.\n> > \n> > Basically OP_DUP lets you duplicate the code on the\n> stack and that is the \n> > key to looping.\u00a0 I'm pretty sure from here we get\n> get Turing completeness. \n> > Using the stack operations I expect you can implement\n> the SK-calculus \n> > given an OP_EVAL that allows arbitrary depth.\n> > \n> > OP_EVAL adds dangerously expressive power to the\n> scripting language.\n> > \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't\n> need a complex\n> infrastructure or vast IT resources to deliver seamless,\n> secure access to\n> virtual desktops. With this all-in-one solution, easily\n> deploy virtual \n> desktops for less than the cost of PCs and save 60% on VDI\n> infrastructure \n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "A proposal to restrict the number of executions of OP_EVAL allowed per transaction to prevent unlimited looping. Wikipedia founder urges donations."}, {"author": "Gavin Andresen", "date": "2011-12-29T16:23:56", "message_text_only": "First, thanks very much to Russell for looking more closely at both\nBIP 12 and the patch than anybody else-- he's found two bugs and two\nthings the BIP isn't clear enough on (so far).\n\nAnd I've got to say, I'm very sympathetic to the \"OP_EVAL starts down\nthe code-as-data path, and There Be Dragons\" argument.\n\nBut:\n\nI don't think the proposed alternative would be, in practice, any\nbetter.  I see two main disadvantages over OP_EVAL:\n\n  about 20-bytes larger\n\n  it means going back to where we were two months ago, writing more\ncode, reviewing it, finding bugs in it, backporting it so miners\nrunning old software can support it, etc.\n\n... and some other minor disadvantages:\n\n  'standard' scripts will need to be slightly different in the\nscriptSig and the scriptPubKey\n   (e.g. <signature> CHECKSIG  becomes  <signature> CHECKSIGVERIFY\nwith OP_CODEHASH)\n\n  OP_EVALs are not executed, and so the code associated with them does\nnot have to be part of the transaction, if they are in the\nnon-executed branch of an OP_IF. That could be good for privacy, and\ncould be good for reducing block-chain size.\n\n----------------------\n\nIn discussions in IRC yesterday, we talked a little about possible\nchanges to the OP_EVAL BIP to make it less subject to abuse. In\nparticular, the big can of worms is allowing arithmetic or bit\noperations on the serialized script that will be EVAL'ed:\n  <serialized script> <other_data> OP_ADD OP_EVAL  <-- Look! Dragons!\n\nIf <serialized script> is more than 4 bytes, that is actually illegal\nright now (all of the arithmetic operations are limited to operating\non numbers that are 4 bytes of less, and I believe we could prove that\nno series of operations will ever produce a value more than 5 bytes\nbig given the current limitations).\n\nWhich leads me to suggest that BIP 12 be amended to state that:\n  OP_EVAL shall cause script validation to fail if the top item on the\nstack is less than 8 bytes long.\n\nI'm tempted to propose a rule:\n  OP_EVAL shall fail if the top item on the stack is the result of any\ncalculation\n\n... but I don't think the extra code it would take to implement that\n(keep track of which items on the stack were the results of\nOP_ADD/etc) is worth it.\n\n\nOn the \"you can't tell how many CHECKSIG operations will be performed\nbefore executing the script\" issue:\n\nThat is already true, because the parameters to CHECKMULTISIG that\ndetermine how many signatures it checks might be computed.\n\nFinally, I would echo theymos' observation that I think we'll\neventually do something very much like OP_EVAL in the future-- maybe\nto support (in a backwards-compatible way) a\nquantum-computing-resistant signature algorithm or SHA3. When that is\ndone, I think it might make sense to do a bottom-up redesign of Script\nbased on what we've learned.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen discusses the proposed alternative to OP_EVAL and suggests amending BIP 12 to make it less subject to abuse."}, {"author": "roconnor at theorem.ca", "date": "2011-12-29T17:01:20", "message_text_only": "Good morning everyone.\n\nOn Thu, 29 Dec 2011, Gavin Andresen wrote:\n\n> First, thanks very much to Russell for looking more closely at both\n> BIP 12 and the patch than anybody else-- he's found two bugs and two\n> things the BIP isn't clear enough on (so far).\n>\n> And I've got to say, I'm very sympathetic to the \"OP_EVAL starts down\n> the code-as-data path, and There Be Dragons\" argument.\n>\n> But:\n>\n> I don't think the proposed alternative would be, in practice, any\n> better.  I see two main disadvantages over OP_EVAL:\n>\n>  about 20-bytes larger\n>\n>  it means going back to where we were two months ago, writing more\n> code, reviewing it, finding bugs in it, backporting it so miners\n> running old software can support it, etc.\n\nWell, given the state that the OP_EVAL proposal was in when I looked at it \nthis week, all your code reviews you have done so far are not adequate \nanyways.\n\nGavin, push the OP_EVAL date back 2 months.  OP_EVAL just is not ready \nyet.\n\n> ... and some other minor disadvantages:\n>\n>  'standard' scripts will need to be slightly different in the\n> scriptSig and the scriptPubKey\n>   (e.g. <signature> CHECKSIG  becomes  <signature> CHECKSIGVERIFY\n> with OP_CODEHASH)\n>\n>  OP_EVALs are not executed, and so the code associated with them does\n> not have to be part of the transaction, if they are in the\n> non-executed branch of an OP_IF. That could be good for privacy, and\n> could be good for reducing block-chain size.\n\nI don't understand the above paragraph.\n\n> ----------------------\n>\n> In discussions in IRC yesterday, we talked a little about possible\n> changes to the OP_EVAL BIP to make it less subject to abuse. In\n> particular, the big can of worms is allowing arithmetic or bit\n> operations on the serialized script that will be EVAL'ed:\n>  <serialized script> <other_data> OP_ADD OP_EVAL  <-- Look! Dragons!\n>\n> If <serialized script> is more than 4 bytes, that is actually illegal\n> right now (all of the arithmetic operations are limited to operating\n> on numbers that are 4 bytes of less, and I believe we could prove that\n> no series of operations will ever produce a value more than 5 bytes\n> big given the current limitations).\n\nThis is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is \nmore than 5 bytes.\n\n> Which leads me to suggest that BIP 12 be amended to state that:\n>  OP_EVAL shall cause script validation to fail if the top item on the\n> stack is less than 8 bytes long.\n>\n> I'm tempted to propose a rule:\n>  OP_EVAL shall fail if the top item on the stack is the result of any\n> calculation\n>\n> ... but I don't think the extra code it would take to implement that\n> (keep track of which items on the stack were the results of\n> OP_ADD/etc) is worth it.\n>\n> On the \"you can't tell how many CHECKSIG operations will be performed\n> before executing the script\" issue:\n>\n> That is already true, because the parameters to CHECKMULTISIG that\n> determine how many signatures it checks might be computed.\n\nYes, but maybe there is other static analysis miners may want to do.  I \ncan't imagine every scenario.\n\n> Finally, I would echo theymos' observation that I think we'll\n> eventually do something very much like OP_EVAL in the future-- maybe\n> to support (in a backwards-compatible way) a\n> quantum-computing-resistant signature algorithm or SHA3. When that is\n> done, I think it might make sense to do a bottom-up redesign of Script\n> based on what we've learned.\n\nIMHO I think the above observation is not very relevant to the merits of \nthe existing OP_EVAL proposal on the table.\n\n-- \nRussell O'Connor                                      <http://r6.ca/>\n``All talk about `theft,''' the general counsel of the American Graphophone\nCompany wrote, ``is the merest claptrap, for there exists no property in\nideas musical, literary or artistic, except as defined by statute.''", "summary": "Gavin Andresen discusses the proposed OP_EVAL feature for Bitcoin and suggests amendments to make it less susceptible to abuse."}, {"author": "Luke-Jr", "date": "2011-12-29T17:06:42", "message_text_only": "On Thursday, December 29, 2011 12:01:20 PM roconnor at theorem.ca wrote:\n> This is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is\n> more than 5 bytes.\n\nSo what? Why shouldn't I be able to run random code? I could always put that \nrandom code in the script verbatim, after all.", "summary": "A user defends the use of random code in a script, despite concerns raised about its adequacy and potential risks."}, {"author": "Gavin Andresen", "date": "2011-12-29T18:00:23", "message_text_only": "RE: preventing OP_EVAL from executing the result of calculations:\n\n> This is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is more> than 5 bytes.\nGood point, the rule should be \"OP_EVAL shall fail if asked to execute\n8 or fewer bytes.\"\n\nRE: this minor disadvantage:\n\n>> \u00a0OP_EVALs are not executed, and so the code associated with them does\n>> not have to be part of the transaction, if they are in the\n>> non-executed branch of an OP_IF. That could be good for privacy, and\n>> could be good for reducing block-chain size.\n\n> I don't understand the above paragraph.\n\nIt is the \"Either This or That can redeem\" case that motivated me to\nallow 2-deep EVAL recursion.\n\nStart with the most straightforward code for doing \"this or that\" (in\npseudocode):\n\nscriptSig:  <sigs> <either the code for This or the code for That>\nscriptPuKey:\n  IF <hash of code> EQUALS hash of This or hash of That:\n    EVAL\n  ELSE\n    fail validation\n  ENDIF\n\nThat can be done with CODESEPARATOR/CODEHASH.\n\nBut if you want to then bundle that up so the scriptPubKey is a\nstandard 'pay to script', you get:\n\nscriptSig:  <sigs> <either the code for This or the code for That>\n<serialized IF... code from above>\nscriptPubKey:  ... standard DUP HASH160 <> EQUALVERIFY EVAL\n\nTo be backwards compatible with old clients the scriptSig would have to be:\n\n<hash1> <hash2> <sigs> CODESEPARATOR this_or_that_code\n CODEHASH\n CODESEPARATOR\n IF <hash of code> does not equal hash2:\n   fail verification\n ENDIF\n\nThat could only be done if the definition of CODEHASH was modified to\nhash only the stuff between CODESEPARATORS instead of hashing from\nCODESEPARATOR to the end of the scriptSig.\n\nRE: static analysis:\n\n> Yes, but maybe there is other static analysis miners may want to do. \u00a0I\n> can't imagine every scenario.\n\nThe vast majority of miners are \"discouraging\" (not relaying or\nputting into blocks) anything besides 'standard' transaction types.\n\nUntil somebody smarter than me (like Russell) has done a deep analysis\nof Script and all of its opcodes, I don't think that should change.\nThe standard transaction types are easy to reason about, and the\nstandard types extended with OP_EVAL are also easy to reason about--\nyou can template-match them to find out how many ECDSA operations a\nCHECKMULTISIG will do, etc.\n\nAgain, in practice, I don't think EVAL as proposed is a danger.\n\nRE: delaying EVAL rollout:  I could live with rolling out just BIP 11\n(up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and\ndelaying EVAL rollout on the main network, but I worry that will just\nencourage people to delay thoroughly reviewing/testing for a couple of\nmonths, and we'll be right back here at the beginning of March.\n\n-- \n--\nGavin Andresen", "summary": "OP_EVAL should fail if asked to execute 8 or fewer bytes. Standard transaction types are easy to reason about, and EVAL as proposed is not a danger."}, {"author": "Stefan Thomas", "date": "2011-12-29T19:54:28", "message_text_only": "> RE: delaying EVAL rollout:  I could live with rolling out just BIP 11\n> (up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and\n> delaying EVAL rollout on the main network, but I worry that will just\n> encourage people to delay thoroughly reviewing/testing for a couple of\n> months, and we'll be right back here at the beginning of March.\n\nHow about releasing it on testnet first? If you want \"less smart\" people \nsuch as myself to help test, well I don't think I would get anywhere if \nI tried to abstractly reason about every possibility. Low-level testing \nis certainly important, but for me \"thorough testing\" requires an actual \nnetwork of nodes (running different clients) and applications capable of \ncreating and verifying real OP_EVAL transactions.\n\nMy suggestion would be: Deploy OP_EVAL on testnet quickly, let's build \nsome real-life applications and if it works well, /then /let's pull the \ntrigger for mainnet. If some issues or improvements arise, we'll have a \nchance to adjust it and try again.\n\nI don't think this is too conservative or paranoid. I think this is a \ntextbook use case for testnet.\n\n\nOn 12/29/2011 7:00 PM, Gavin Andresen wrote:\n> RE: preventing OP_EVAL from executing the result of calculations:\n>\n>> This is not adequate:<data>  OP_SHA256 OP_EVAL runs random code that is more>  than 5 bytes.\n> Good point, the rule should be \"OP_EVAL shall fail if asked to execute\n> 8 or fewer bytes.\"\n>\n> RE: this minor disadvantage:\n>\n>>>   OP_EVALs are not executed, and so the code associated with them does\n>>> not have to be part of the transaction, if they are in the\n>>> non-executed branch of an OP_IF. That could be good for privacy, and\n>>> could be good for reducing block-chain size.\n>> I don't understand the above paragraph.\n> It is the \"Either This or That can redeem\" case that motivated me to\n> allow 2-deep EVAL recursion.\n>\n> Start with the most straightforward code for doing \"this or that\" (in\n> pseudocode):\n>\n> scriptSig:<sigs>  <either the code for This or the code for That>\n> scriptPuKey:\n>    IF<hash of code>  EQUALS hash of This or hash of That:\n>      EVAL\n>    ELSE\n>      fail validation\n>    ENDIF\n>\n> That can be done with CODESEPARATOR/CODEHASH.\n>\n> But if you want to then bundle that up so the scriptPubKey is a\n> standard 'pay to script', you get:\n>\n> scriptSig:<sigs>  <either the code for This or the code for That>\n> <serialized IF... code from above>\n> scriptPubKey:  ... standard DUP HASH160<>  EQUALVERIFY EVAL\n>\n> To be backwards compatible with old clients the scriptSig would have to be:\n>\n> <hash1>  <hash2>  <sigs>  CODESEPARATOR this_or_that_code\n>   CODEHASH\n>   CODESEPARATOR\n>   IF<hash of code>  does not equal hash2:\n>     fail verification\n>   ENDIF\n>\n> That could only be done if the definition of CODEHASH was modified to\n> hash only the stuff between CODESEPARATORS instead of hashing from\n> CODESEPARATOR to the end of the scriptSig.\n>\n> RE: static analysis:\n>\n>> Yes, but maybe there is other static analysis miners may want to do.  I\n>> can't imagine every scenario.\n> The vast majority of miners are \"discouraging\" (not relaying or\n> putting into blocks) anything besides 'standard' transaction types.\n>\n> Until somebody smarter than me (like Russell) has done a deep analysis\n> of Script and all of its opcodes, I don't think that should change.\n> The standard transaction types are easy to reason about, and the\n> standard types extended with OP_EVAL are also easy to reason about--\n> you can template-match them to find out how many ECDSA operations a\n> CHECKMULTISIG will do, etc.\n>\n> Again, in practice, I don't think EVAL as proposed is a danger.\n>\n> RE: delaying EVAL rollout:  I could live with rolling out just BIP 11\n> (up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and\n> delaying EVAL rollout on the main network, but I worry that will just\n> encourage people to delay thoroughly reviewing/testing for a couple of\n> months, and we'll be right back here at the beginning of March.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111229/6e7f0034/attachment.html>", "summary": "OP_EVAL rollout on main network may be delayed, but deploying it on testnet quickly can allow for real-life application testing and adjustments."}, {"author": "Pieter Wuille", "date": "2011-12-29T19:08:39", "message_text_only": "On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:\n> Gavin asked me to come up with an alternative to OP_EVAL, so here is my \n> proposal.\n> \n> OP_CODEHASH Initial Proposal\n\nIf we're again brainstorming about alternatives for OP_EVAL, I'll do my own.\n\nIt is called OP_CHECKEDEVAL, and is specified as follows:\n* It looks at the two elements most recently (in code position) pushed by a literal,\n  and not yet consumed by another OP_CHECKEDEVAL. These are S (the serialized script),\n  and H (its hash). This implies it defines its own literal-only stack, where all\n  literals push to, and only OP_CHECKEDEVAL pops from. This special stack has the\n  advantage of allowing static analysis - one does not need to execute any operations\n  to find out which data will end up on it. Note that \"skipped\" code (inside the\n  ignored part of an IF-THEN-ELSE) can still push to the literal stack.\n* For the \"outer script\", it does not have any effect at all, except for:\n  * 2 elements popped from the literal-only stack\n  * potentially causing failure\n  It does not touch the main stack, alt stack or any other part of the execution state\n  not listed above.\n* Failure is caused when either of these conditions hold:\n  * No two elements remain on the literal-only stack\n  * The Hash(S) != H\n  * The inner script execution caused failure\n* For the execution of the inner script:\n  * It is executed in a completely new and independent execution environnement\n  * It executes the deserialized S\n  * It inherits the main stack and alt stack (without the serialized script and the hash\n    themselves) from the outer execution.\n\nThis requires OP_CHECKEDEVAL to immediately follow the push of script and hash,\nso the code in the pair < <script> OP_CHECKEDEVAL > can be parsed and interpreted as code, \nallowing static analysis.\n\nAs OP_CHECKEDEVAL has absolutely no effects except for potentially causing failure, it\nis very similar to the OP_NOPx it would replace, and guarantees that interpreting\nOP_CHECKEDEVAL as OP_NOPx can never cause the script to become invalid if it wasn't\nalready.\n\nA basic pay-to-script-hash scriptPubKey is very short:\n  \n  <scriptHash> OP_CHECKEDEVAL\n\nAnd it is redeemed using:\n\n  <script inputs> <script>\n\nFurthermore, the implementation is very similar to what was already done for\nOP_EVAL. Modifications:\n* EvalScriptInner needs less by-ref arguments, as it cannot modify the parent's state.\n* A literal-only stack needs to be maintained.\n\n\nI believe this combines all advantages:\n* Easy spend-to-script-hash (shorter than OP_EVAL)\n* Backward compatible (guaranteed by construction, instead of separately enforced like with OP_EVAL)\n* Statically analyzable (though it requires deserializing the script data).\n* Possibility to introduce a new language inside (not done in this proposal)\n\nOnly disadvantages:\n* Slightly less flexible than OP_EVAL, as it disallows dynamic interation with serialized scripts.\n* Static code analyzers need to deserialize script data.\n\nCredits: gmaxwell for the idea of a literal-only stack\n\n-- \nPieter", "summary": "Proposal for OP_CHECKEDEVAL as an alternative to OP_EVAL. It uses a literal-only stack for static analysis and has no effects except for potentially causing failure."}, {"author": "Pieter Wuille", "date": "2011-12-29T21:00:26", "message_text_only": "On Thu, Dec 29, 2011 at 08:08:38PM +0100, Pieter Wuille wrote:\n> On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:\n> > Gavin asked me to come up with an alternative to OP_EVAL, so here is my \n> > proposal.\n> > \n> > OP_CODEHASH Initial Proposal\n> \n> If we're again brainstorming about alternatives for OP_EVAL, I'll do my own.\n> \n> It is called OP_CHECKEDEVAL, and is specified as follows:\n\nI realized this may have been needlessly complicated. All is required to achieve the\nsame properties (plus win half-verification by old clients) is a somewhat more\nrestricted OP_EVAL which:\n* Does not touch the stack or altstack - it looks at the last (code-position wise)\n  literal pushed (and not yet consumed by another OP_EVAL) on the stack and uses\n  that as script to be executed.\n* Executes its subscript in an independent environment, which inherits only the\n  main stack (this allows the outer script to hide information from the\n  inner script by moving it temporarily to the alt stack).\n* OP_EVAL is an effective no-op for the execution state of the outer script,\n  except for:\n  * potentially causing failure (if the subscript doesn't parse or doesn't\n    terminate succesfully)\n  * popping an element from the literal-only stack\n\nA pay-to-script-hash becomes:\n\n  OP_EVAL OP_HASH160 <scriptHash> OP_EQUAL\n\nand is redeemed using\n\n  [script input] <<script>>\n\n-- \nPieter", "summary": "Pieter Wuille proposes a more restricted OP_EVAL as an alternative to OP_EVAL and OP_CODEHASH for Bitcoin's scripting language."}, {"author": "Alan Reiner", "date": "2011-12-29T21:31:11", "message_text_only": "I haven't been much a part of these brainstorming discussions, and so I'm\nreally looking at this from a bird's eye view, without any bias towards any\nparticular idea.\n\nI do see what appears to be relevant concerns, brought up just before new,\npowerful functionality is injected into 50%+ of the nodes on the network.\n I cannot tell from my position if there is/has been consistent concern for\nOP_EVAL proposal, or if it's mostly a transient response to hearing about\nrecursion in the scripting engine, etc (like myself, originally).  I\nhaven't debated this topic much, so I'm not in a position to personally\ncomment on any proposals.  (Though, this all feels very similar to the\nproblem of hash-table collisions in HTTP\nPOST<http://www.securityweek.com/hash-table-collision-attacks-could-trigger-ddos-massive-scale>\n).\n\nHowever, I would like to remind everyone that we/you are messing with a\n$20+ million dollar *thing*.  There's more than just a piece of software at\nstake -- whatever goes in needs to be as hard as diamond.  If we open up a\nhole that allows someone to satisfy arbitrary scripts, or create one-packet\nDoS/crash attacks, that could be devastating for Bitcoin.  Roconner is\npersuasive enough to make *me* think that not all corners of this\nfunctional space has been explored properly.  And while my opinion doesn't\nmatter, I'm concerned that others may feel too invested in the current\ndesign path to want to \"go backwards.\"  Again, I don't know one way or\nanother, I just want to warn against pride getting priority over security.\n\n\nAt the very least, you should consider consequences and recovery path of\nsuch unanticipated problems.  If the things that could go wrong are\ndevastating, let's lean towards a more conservative solution (like\nsandboxing the sub-scripting engine).   Remember, the network is working\njust fine *without *OP_EVAL, and while OP_EVAL provides some really nice\nbenefits, I don't think the benefits over regular multi-sig are worth the\nconsequences of making a mistake in this multi-million dollar beast.\n\nOkay, back to your regularly-scheduled debating...\n-Alan\n\nOn Thu, Dec 29, 2011 at 2:08 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:\n> > Gavin asked me to come up with an alternative to OP_EVAL, so here is my\n> > proposal.\n> >\n> > OP_CODEHASH Initial Proposal\n>\n> If we're again brainstorming about alternatives for OP_EVAL, I'll do my\n> own.\n>\n> It is called OP_CHECKEDEVAL, and is specified as follows:\n> * It looks at the two elements most recently (in code position) pushed by\n> a literal,\n>  and not yet consumed by another OP_CHECKEDEVAL. These are S (the\n> serialized script),\n>  and H (its hash). This implies it defines its own literal-only stack,\n> where all\n>  literals push to, and only OP_CHECKEDEVAL pops from. This special stack\n> has the\n>  advantage of allowing static analysis - one does not need to execute any\n> operations\n>  to find out which data will end up on it. Note that \"skipped\" code\n> (inside the\n>  ignored part of an IF-THEN-ELSE) can still push to the literal stack.\n> * For the \"outer script\", it does not have any effect at all, except for:\n>  * 2 elements popped from the literal-only stack\n>  * potentially causing failure\n>  It does not touch the main stack, alt stack or any other part of the\n> execution state\n>  not listed above.\n> * Failure is caused when either of these conditions hold:\n>  * No two elements remain on the literal-only stack\n>  * The Hash(S) != H\n>  * The inner script execution caused failure\n> * For the execution of the inner script:\n>  * It is executed in a completely new and independent execution\n> environnement\n>  * It executes the deserialized S\n>  * It inherits the main stack and alt stack (without the serialized script\n> and the hash\n>    themselves) from the outer execution.\n>\n> This requires OP_CHECKEDEVAL to immediately follow the push of script and\n> hash,\n> so the code in the pair < <script> OP_CHECKEDEVAL > can be parsed and\n> interpreted as code,\n> allowing static analysis.\n>\n> As OP_CHECKEDEVAL has absolutely no effects except for potentially causing\n> failure, it\n> is very similar to the OP_NOPx it would replace, and guarantees that\n> interpreting\n> OP_CHECKEDEVAL as OP_NOPx can never cause the script to become invalid if\n> it wasn't\n> already.\n>\n> A basic pay-to-script-hash scriptPubKey is very short:\n>\n>  <scriptHash> OP_CHECKEDEVAL\n>\n> And it is redeemed using:\n>\n>  <script inputs> <script>\n>\n> Furthermore, the implementation is very similar to what was already done\n> for\n> OP_EVAL. Modifications:\n> * EvalScriptInner needs less by-ref arguments, as it cannot modify the\n> parent's state.\n> * A literal-only stack needs to be maintained.\n>\n>\n> I believe this combines all advantages:\n> * Easy spend-to-script-hash (shorter than OP_EVAL)\n> * Backward compatible (guaranteed by construction, instead of separately\n> enforced like with OP_EVAL)\n> * Statically analyzable (though it requires deserializing the script data).\n> * Possibility to introduce a new language inside (not done in this\n> proposal)\n>\n> Only disadvantages:\n> * Slightly less flexible than OP_EVAL, as it disallows dynamic interation\n> with serialized scripts.\n> * Static code analyzers need to deserialize script data.\n>\n> Credits: gmaxwell for the idea of a literal-only stack\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex\n> infrastructure or vast IT resources to deliver seamless, secure access to\n> virtual desktops. With this all-in-one solution, easily deploy virtual\n> desktops for less than the cost of PCs and save 60% on VDI infrastructure\n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111229/46ff339a/attachment.html>", "summary": "A warning about the potential consequences of implementing new functionality in Bitcoin, urging caution and prioritizing security over pride."}], "thread_summary": {"title": "Alternative to OP_EVAL", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Chris Double", "theymos", "Zell Faze", "Alan Reiner", "roconnor at theorem.ca", "Gavin Andresen", "Stefan Thomas", "Pieter Wuille", "Joel Joonatan Kaartinen"], "messages_count": 15, "total_messages_chars_count": 36761, "convo_summary": "The proposal suggests adding a third \"codehash\" stack to the scripting engine, with a new OP_CODEHASH operator, to enable send-to-script addresses. OP_EVAL makes the script language Turing complete, with no limit on recursion depth, allowing arbitrary computation and looping. There are concerns about the potential risks of implementing new functionality in Bitcoin, urging caution and prioritizing security over pride."}}, {"title": "[Bitcoin-development] Trickle in CNode::SendMessages", "thread_messages": [{"author": "Michael Gr\u00f8nager", "date": "2011-12-29T22:05:55", "message_text_only": "In CNode::SendMessages there is a trickle algorithm. Judging from the comments it is supposed to:\n\n* at each update round a new (random) trickle node is chosen, with 120 nodes and an average round time of 100ms (the sleep) we will have moved through roughly all nodes every 12-15 seconds.\n* when a node is the trickle node it will get to send all its pending addresses to its corresponding peer.\n* when a node is not trickle node (the rest of the nodes) we send transaction-invs, however, only 1/4 of them - the rest is pushed to wait for the next round and would eventually get sent.\n\nHowever, the way the 1/4 of the invs are chosen is by: \n\t(inv.getHash() ^ hashSalt) & 3 == 0\n\nAs hashSalt is a constant (static, generated on start up) and as the hash of an inv is constant for the inv too, the other 3/4 will never get sent and hence it does not make sense to carry them around from round to round:\n\tif (fTrickleWait) vInvWait.push_back(inv); \nand:\n\tpto->vInventoryToSend = vInvWait;\n\nThe hashSalt will be different for each node in the peer-to-peer network and hence as long as we have much more than 4 nodes all tx'es will be sent around.\n\nIronically, this (wrong?) implementation divides the inv forwarding hash space into 4, along the same lines as we discussed last week for DHTs...\n\nI suggest to either keep the algorithm as is, but remove the redundant vInvWait stuff, or to change the algorithm to e.g. push the tx'es into a multimap (invHash^hashSalt, invHash) and choose the first 25% in each round. \n\nThe last alternative is that I have misunderstood the code... - if so please correct me ;)\n\nHappy New Year!\n\nMichael", "summary": "The trickle algorithm in CNode::SendMessages sends only 1/4 of transaction-invs, but the other 3/4 are carried around from round to round. A suggestion is made to remove the redundant vInvWait stuff or change the algorithm."}, {"author": "Michael Gr\u00f8nager", "date": "2011-12-30T07:38:22", "message_text_only": "Small correction - if the node is the trickle node it gets all invs, not just the special quarter.  This means that everything get distributed everywhere every 12-15seconds, but a special quarter of the hash space is treated earlier, so there is a meaning for vInvWait, but there is still a mismatch between comments and code.\n\nCheers,\n\nM\n\n\nOn 29/12/2011, at 23:05, Michael Gr\u00f8nager wrote:\n\n> In CNode::SendMessages there is a trickle algorithm. Judging from the comments it is supposed to:\n> \n> * at each update round a new (random) trickle node is chosen, with 120 nodes and an average round time of 100ms (the sleep) we will have moved through roughly all nodes every 12-15 seconds.\n> * when a node is the trickle node it will get to send all its pending addresses to its corresponding peer.\n> * when a node is not trickle node (the rest of the nodes) we send transaction-invs, however, only 1/4 of them - the rest is pushed to wait for the next round and would eventually get sent.\n> \n> However, the way the 1/4 of the invs are chosen is by: \n> \t(inv.getHash() ^ hashSalt) & 3 == 0\n> \n> As hashSalt is a constant (static, generated on start up) and as the hash of an inv is constant for the inv too, the other 3/4 will never get sent and hence it does not make sense to carry them around from round to round:\n> \tif (fTrickleWait) vInvWait.push_back(inv); \n> and:\n> \tpto->vInventoryToSend = vInvWait;\n> \n> The hashSalt will be different for each node in the peer-to-peer network and hence as long as we have much more than 4 nodes all tx'es will be sent around.\n> \n> Ironically, this (wrong?) implementation divides the inv forwarding hash space into 4, along the same lines as we discussed last week for DHTs...\n> \n> I suggest to either keep the algorithm as is, but remove the redundant vInvWait stuff, or to change the algorithm to e.g. push the tx'es into a multimap (invHash^hashSalt, invHash) and choose the first 25% in each round. \n> \n> The last alternative is that I have misunderstood the code... - if so please correct me ;)\n> \n> Happy New Year!\n> \n> Michael\n> \n> \n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex\n> infrastructure or vast IT resources to deliver seamless, secure access to\n> virtual desktops. With this all-in-one solution, easily deploy virtual \n> desktops for less than the cost of PCs and save 60% on VDI infrastructure \n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "The trickle algorithm in CNode::SendMessages has a mismatch between comments and code, causing only 1/4 of invs to be sent. A correction is suggested."}], "thread_summary": {"title": "Trickle in CNode::SendMessages", "categories": ["Bitcoin-development"], "authors": ["Michael Gr\u00f8nager"], "messages_count": 2, "total_messages_chars_count": 4513, "convo_summary": "Michael Gr\u00f8nager suggests removing redundant vInvWait or changing the trickle algorithm in CNode::SendMessages, as it currently sends only 1/4 of transaction-invs due to a mismatch between comments and code. A correction is needed."}}, {"title": "[Bitcoin-development] upnp isnt working", "thread_messages": [{"author": "Amir Taaki", "date": "2011-12-30T08:57:16", "message_text_only": "hey,\n\nso sipa/gmaxwell proposed on irc that maybe upnp is not working anymore but there isnt any way to test.\n\nwell i made an alternate chain, and ran the daemon on my vps.\n\nsometimes it accepts connections, sometimes not. It's all very patchy.\n\nanyway just putting this out there", "summary": "Sipa/Gmaxwell suggested that UPnP may not be working, but there's no way to test. An alternate chain was created and the daemon is patchy."}, {"author": "Matt Corallo", "date": "2011-12-30T09:02:22", "message_text_only": "On Fri, 2011-12-30 at 00:57 -0800, Amir Taaki wrote:\n> hey,\n> \n> so sipa/gmaxwell proposed on irc that maybe upnp is not working anymore but there isnt any way to test.\n> \n> well i made an alternate chain, and ran the daemon on my vps.\n> \n> sometimes it accepts connections, sometimes not. It's all very patchy.\n> \n> anyway just putting this out there\n\nI believe the issue isn't lack of working, but lack of re announcing to\nthe router that the port needs to remain open.\n\nMatt", "summary": "Amir Taaki created an alternate chain and ran the daemon on his VPS to test if UPnP is still working, but the results were patchy."}], "thread_summary": {"title": "upnp isnt working", "categories": ["Bitcoin-development"], "authors": ["Matt Corallo", "Amir Taaki"], "messages_count": 2, "total_messages_chars_count": 757, "convo_summary": "Amir Taaki created an alternate chain to test if UPnP is still working, but the results were patchy. Sipa/Gmaxwell suggested that there's no way to test if UPnP is working."}}, {"title": "[Bitcoin-development] version::addr_recv/addrMe does what?", "thread_messages": [{"author": "Amir Taaki", "date": "2011-12-31T21:38:43", "message_text_only": "Hi,\n\nWhat is the purpose for this field? Can I safely ignore it? Currently it isn't used and I can't imagine it being too useful.\n\nIf you want to discover your own IP address from it, then that's ripe for abuse. Maybe it could be used in conjuction with your own IP lookup mechanism kind of how the clock works.\n\nWhat is the main reason for this field existing?", "summary": "The purpose of a certain field is unclear and unused, and its potential use for discovering IP addresses may lead to abuse. Its main reason for existing is unknown."}], "thread_summary": {"title": "version::addr_recv/addrMe does what?", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 361}}]