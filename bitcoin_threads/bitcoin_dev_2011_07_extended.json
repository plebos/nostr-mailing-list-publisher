[{"title": "[Bitcoin-development] 0.3.24", "thread_messages": [{"author": "Matt Corallo", "date": "2011-07-01T00:07:18", "message_text_only": "Due to the flood control limits becoming an issue again, it would appear\nwe need a 0.3.24 release.  The idea is to have sipa's flood limit fix\n(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e), dnsseed on by default, and maybe UPnP enabled by default as well.\n\nI just got a DNSSeed up with reliable hosting which dynamically fills\nits hostname with random nodes known to be up and accepting connections\n(and on port 8333 and on version 0.3.19 or higher) (dnsseed.bluematt.me)\nand I hope others follow suit with\nhttps://github.com/TheBlueMatt/dnsseed (its poorly done but works just\nfine).  This was added to master in 44d16327. Since its no longer a\nstatic list, I think its time to enable dnsseed by default (I have one\nor two connections by the time the GUI opens when I use -dnsseed\n-noirc).\n\nAlso, I think UPnP by default would be a good idea as it could increase\nthe percent of nodes which accept incoming connection (and other P2P\napplications which depend on the ability to accept incoming connections\nhave it on by default as well, such as Skype).  Jgarzik has also\nsuggested this, and I really dont see much of a reason not to.\n\nAlso,\nhttps://github.com/bitcoin/bitcoin/commit/3a3eabb57ae41dd2162ca8230423abf4a90ef644 should be included to fix the no-connections-up segfault.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/2ebe80a5/attachment.sig>", "summary": "Bitcoin may need a 0.3.24 release due to flood control limits; proposed changes include enabling dnsseed and UPnP by default."}, {"author": "Gregory Maxwell", "date": "2011-07-01T02:07:50", "message_text_only": "On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Due to the flood control limits becoming an issue again, it would appear\n> we need a 0.3.24 release. \u00a0The idea is to have sipa's flood limit fix\n> (https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e), dnsseed on by default, and maybe UPnP enabled by default as well.\n\n*Flood fix\n\nI think this is important, slow bringups are problematic and I think\nthe flood disconnects have been contributing to network partitioning\n(you'll disconnect nodes that have the full blockchain but keep ones\nthat don't), adding to the partitioning problems cause elsewhere.\n\nI've been running it for a couple hours on a large public node which\nwas seeing frequent flood disconnects, and it seems to be working\nfine. No more flood disconnects.\n\nSyncing a local node to it (no a not terribly fast core) now takes\n34.5 minutes (I new bringup on the same system a few days ago hadn't\nsynced in over an hour).\n\nIncreasing the nLimit in sipa's code from 500 to 5000 reduced the\nsyncup time for me by about 1.5 minutes, almost all of the speedup\nbeing in the early blocks.  Since it has the 5MB limit now I don't see\nmuch reason for a large per block limit.\n\n*Dnsseed\n\nI've been using this for a while, we need more dnsseed roots but I see\nno reason not to turn it on now.\n\n*UPNP\n\nLfnet now reports 32843.  Presumably there are more bitcoin users than\nthat, because not all use IRC. 32843*8 = 262744 listening sockets.\nMeaning, assuming a nice equal distribution we need 2189 listening\nnodes to support the network\u2014 but the real distribution will be\nsomewhat uneven due to bad luck and the /16 limit.\n\nMatt has estimated that there are around 4000 stable listening nodes.\n\nLinear extrapolation from the two day lfnet growth leave us running\nout of sockets in a little more than a month. While it won't all break\nif it runs out, since we don't strictly need 8 connections, it's still\nnot good.\n\nI think getting more listening nodes is a somewhat urgent matter as a result.\n\n\nI'd also like suggest updating the checkpoint in 0.3.24. Difficulty\nhas increased almost 17x since the highest one currently in there. A\nrather large number of parties could mine pretty nice forks at 1/16th\nthe current difficulty for nodes that they've sibyled.", "summary": "Bitcoin developers plan to release version 0.3.24 to fix flood control limits, enable DNS seed by default, and possibly enable UPnP by default."}, {"author": "Douglas Huff", "date": "2011-07-01T02:44:49", "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nGregory Maxwell <gmaxwell at gmail.com> wrote:\n\n>On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo\n><bitcoin-list at bluematt.me> wrote:\n>> Due to the flood control limits becoming an issue again, it would\n>appear\n>> we need a 0.3.24 release. \u00a0The idea is to have sipa's flood limit fix\n>>\n>(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),\n>dnsseed on by default, and maybe UPnP enabled by default as well.\n>\n>*Flood fix\n>\n>I think this is important, slow bringups are problematic and I think\n>the flood disconnects have been contributing to network partitioning\n>(you'll disconnect nodes that have the full blockchain but keep ones\n>that don't), adding to the partitioning problems cause elsewhere.\n>\n>I've been running it for a couple hours on a large public node which\n>was seeing frequent flood disconnects, and it seems to be working\n>fine. No more flood disconnects.\n\nI can confirm similar results.\n\n\n>I'd also like suggest updating the checkpoint in 0.3.24. Difficulty\n>has increased almost 17x since the highest one currently in there. A\n>rather large number of parties could mine pretty nice forks at 1/16th\n>the current difficulty for nodes that they've sibyled.\n\nIt's about time for another checkpoint, I agree.\n- --\nDouglas Huff\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.8\n\niQIVAwUBTg00oEPHkQabDWHPAQhtIg/+KqgpNzu9pInI4w1QMl/PyGSEUrin6pHq\n94H9UJRtx6kAPbyBDZ2M/DYTAk5logB0jZoZXg5tkYxY+DoGYC5FLYiLV9nfgIa9\noGEOgdSzaVZseINes0FMNcD5DjEmvvW0nDzJyraD7T11R8r+uATEtcPNN9g0aYSF\nWCRWEKZSvf6o9k5sibmDGrWe/Zx9PV5Si59fqo1eglHUGG+9wLjP3Fv904HSQWD/\nzJ+bMTNyddOi0vP23S5rQM4V94HG2wjgOVk804a/2qJlibXyJi0cYRQj/JIibOIt\nKzXHqYAhJK5JcizUcKu3T8YM22ZE04nIqhxg7h8+5vaZHfHgMYjqGrYeEtqx6GUC\n6oXKke2dP8bqdX+JkJ9Zrf5uz8ysPf6Rj+77dA1tYyFZc2CEb5wA0cnW5SSzqMe1\n5q7saRda3P0RvTtWmJKLPyXbr7EqETKhr37E/lc7viLgQCroggQ4wVkUAj4rfjDZ\nHeZtCfBg3U63oe6WPH1MkzuGPBOjdrSK9RlibFanPU/AL+sTYsf5cs+j8WTHa6WA\nee1k01Nke1Pa7ForvWcUXzzLPVk/ikEgmJrrTKcBNAEh5UKq7BveDX0fSw0kQmPO\nXdWjlNfOfcObCVLRcJ7ev8H6fDQOFGxUXH3A98PCVtUx05aVoDVoRvdPAGN0kbTo\nXqa58ov1pQY=\n=jKOB\n-----END PGP SIGNATURE-----", "summary": "Bitcoin developers are planning to release version 0.3.24 to fix flood control limits and enable UPnP by default. They also suggest updating the checkpoint."}, {"author": "Douglas Huff", "date": "2011-07-01T12:41:02", "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nWhy off on Linux? If anything Linux has, historically, had the most testing of the miniupnpc library. So it's the most stable of the three.\n\nGregory Maxwell <gmaxwell at gmail.com> wrote:\n\n>On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo\n><bitcoin-list at bluematt.me> wrote:\n>> Due to the flood control limits becoming an issue again, it would\n>appear\n>> we need a 0.3.24 release. \u00a0The idea is to have sipa's flood limit fix\n>>\n>(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),\n>dnsseed on by default, and maybe UPnP enabled by default as well.\n>\n>*Flood fix\n>\n>I think this is important, slow bringups are problematic and I think\n>the flood disconnects have been contributing to network partitioning\n>(you'll disconnect nodes that have the full blockchain but keep ones\n>that don't), adding to the partitioning problems cause elsewhere.\n>\n>I've been running it for a couple hours on a large public node which\n>was seeing frequent flood disconnects, and it seems to be working\n>fine. No more flood disconnects.\n>\n>Syncing a local node to it (no a not terribly fast core) now takes\n>34.5 minutes (I new bringup on the same system a few days ago hadn't\n>synced in over an hour).\n>\n>Increasing the nLimit in sipa's code from 500 to 5000 reduced the\n>syncup time for me by about 1.5 minutes, almost all of the speedup\n>being in the early blocks.  Since it has the 5MB limit now I don't see\n>much reason for a large per block limit.\n>\n>*Dnsseed\n>\n>I've been using this for a while, we need more dnsseed roots but I see\n>no reason not to turn it on now.\n>\n>*UPNP\n>\n>Lfnet now reports 32843.  Presumably there are more bitcoin users than\n>that, because not all use IRC. 32843*8 = 262744 listening sockets.\n>Meaning, assuming a nice equal distribution we need 2189 listening\n>nodes to support the network\u2014 but the real distribution will be\n>somewhat uneven due to bad luck and the /16 limit.\n>\n>Matt has estimated that there are around 4000 stable listening nodes.\n>\n>Linear extrapolation from the two day lfnet growth leave us running\n>out of sockets in a little more than a month. While it won't all break\n>if it runs out, since we don't strictly need 8 connections, it's still\n>not good.\n>\n>I think getting more listening nodes is a somewhat urgent matter as a\n>result.\n>\n>\n>I'd also like suggest updating the checkpoint in 0.3.24. Difficulty\n>has increased almost 17x since the highest one currently in there. A\n>rather large number of parties could mine pretty nice forks at 1/16th\n>the current difficulty for nodes that they've sibyled.\n>\n>------------------------------------------------------------------------------\n>All of the data generated in your IT infrastructure is seriously\n>valuable.\n>Why? It contains a definitive record of application performance,\n>security\n>threats, fraudulent activity, and more. Splunk takes this data and\n>makes\n>sense of it. IT sense. And common sense.\n>http://p.sf.net/sfu/splunk-d2d-c2\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n- --\nDouglas Huff\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.8\n\niQIVAwUBTg3AXUPHkQabDWHPAQgI8RAAm4Csyc4jqLvJSpopwNKg20273Hk2dhpR\ns0RHerh1TgFDLDeByhzZLX/GC5SzGpPRDllDDlKcXl+E7iS7xtsuB+KbNdjYERmn\neVm67PQnXZ0PaDUnUxywyl55dcM8WAhwAYZKxvY2IzJ5y6oV7aPSDt7+qtXGL5Tx\nEWjtQU06EaLhQkamelEc0KhHWqA72S/1VIgITvW4KVOf8SKyfTkxADdvRJ2iEznZ\nbemdm81nbNFuYjGng9pEzqs9CVkWthANFa8GhxV9yFiqhpT7rCZKktkmqazxw6le\nzog0v0MDfd55eWH59dHd9FbdiU757VMZtjTew3EoKrvIOwj1XQ50aSwaxO2CeTfW\nqfW/xrxo+6VJx2kpLC833rvek4nx/7a0YVSvtypp9R1td9wAPi14IT+wOZ6C6ofs\nCg1VtETit4cS4xeHNx5boMayBvqpS1tmYgrTdi0QjmlWa75RDLIIteWcS7Q6NP0r\nG2BRm3sqTGo/7Vzhmqn3BWNe5lq21NCW9kMs8nzhntnalF13BdIN4ZMimmSmLb5O\nPUzg9OUZ5qfW3rsbYgYXXritzcNSftva+H/sCLIIoFOJO16wpiQXoHjTSY0TwwIT\nXrVAcP2sRQjfT5QzPfwHDBRcYDgpfGJs5+jXtPc1maac7AxRjZ0op7gXFb/3L/W4\nmQFXl6I9hhg=\n=qsYM\n-----END PGP SIGNATURE-----", "summary": "Bitcoin developers discuss the need for a 0.3.24 release due to flood control limits and the urgency of getting more listening nodes."}, {"author": "Pieter Wuille", "date": "2011-07-01T08:00:43", "message_text_only": "On Fri, Jul 01, 2011 at 02:07:18AM +0200, Matt Corallo wrote:\n> Due to the flood control limits becoming an issue again, it would appear\n> we need a 0.3.24 release.  The idea is to have sipa's flood limit fix\n> (https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),\n\nI've cleaned the commit up a bit, and created a pull request (#369) for it.\n\n> dnsseed on by default, and maybe UPnP enabled by default as well.\n\n> I just got a DNSSeed up with reliable hosting which dynamically fills\n> its hostname with random nodes known to be up and accepting connections\n> (and on port 8333 and on version 0.3.19 or higher) (dnsseed.bluematt.me)\n> and I hope others follow suit with\n> https://github.com/TheBlueMatt/dnsseed (its poorly done but works just\n> fine).  This was added to master in 44d16327.\n\nNice, we definitely needed something like that. It wouldn't hurt to have multiple\npeople running such a seed, to prevent problems with occasional outages of DNS seeds,\nonce we move away from IRC entirely.\n\n> Since its no longer a\n> static list, I think its time to enable dnsseed by default (I have one\n> or two connections by the time the GUI opens when I use -dnsseed\n> -noirc).\n\nAgree.\n\n> Also, I think UPnP by default would be a good idea as it could increase\n> the percent of nodes which accept incoming connection (and other P2P\n> applications which depend on the ability to accept incoming connections\n> have it on by default as well, such as Skype).  Jgarzik has also\n> suggested this, and I really dont see much of a reason not to.\n\nGiven that there is no public outcry against these programs automatically\nopening holes in firewalls, I assume it's safe for us to do the same.\n\nIt should be clearly explained in the release notes, though.\n\n> Also,\n> https://github.com/bitcoin/bitcoin/commit/3a3eabb57ae41dd2162ca8230423abf4a90ef644 should be included to fix the no-connections-up segfault.\n\nYes.\n\nSo: I'm in favor of an emergency release 0.3.24 with upnp default enabled,\ndnsseed default enabled, block send limit, no-connect segfault bugfix.\nAnything else?\n\n-- \nPieter", "summary": "Bitcoin developers discuss the need for a 0.3.24 release to address flood control limits, enable DNS seed and UPnP by default, and fix bugs."}, {"author": "Jeff Garzik", "date": "2011-07-01T08:39:24", "message_text_only": "On Fri, Jul 1, 2011 at 4:00 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> So: I'm in favor of an emergency release 0.3.24 with upnp default enabled,\n> dnsseed default enabled, block send limit, no-connect segfault bugfix.\n> Anything else?\n\nNo objections...  I could get out 0.3.24-rc1 post-sleep, presuming\nthis plan (or something like it) receives Holy Alpaca Pee.\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Pieter Wuille suggests an emergency release 0.3.24 with enabled upnp and dnsseed, block send limit, and no-connect segfault bugfix. Jeff Garzik agrees."}, {"author": "Gavin Andresen", "date": "2011-07-01T12:31:29", "message_text_only": "dnsseed on, block send, segfault bugfix:  Agreed.\n\nupnp: I think should be enabled on Windows/Mac, but remain\noff-by-default on Linux.\n\nI think adding another block-chain checkpoint is a good idea, too.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests enabling upnp on Windows/Mac and adding another block-chain checkpoint. Agrees on dnsseed and block send segfault bugfix."}, {"author": "Matt Corallo", "date": "2011-07-01T12:40:16", "message_text_only": "On Fri, 2011-07-01 at 08:31 -0400, Gavin Andresen wrote:\n> dnsseed on, block send, segfault bugfix:  Agreed.\n> \n> upnp: I think should be enabled on Windows/Mac, but remain\n> off-by-default on Linux.\nNot sure about OS differentiation, seems...wrong?  Maybe disabled by\ndefault on bitcoind but on by default on bitcoin?\n> \n> I think adding another block-chain checkpoint is a good idea, too.\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/3227fb95/attachment.sig>", "summary": "Bitcoin developer suggests enabling upnp on Windows/Mac and adding another block-chain checkpoint, but disabling it by default on Linux."}, {"author": "Gavin Andresen", "date": "2011-07-01T15:06:56", "message_text_only": "> Not sure about OS differentiation, seems...wrong? \u00a0Maybe disabled by\n> default on bitcoind but on by default on bitcoin?\n\nOK.  I mis-remembered the poll:\n   http://forum.bitcoin.org/index.php?topic=4392.0\n\nOn by default\t                       8 (20%)\nOff by default\t                       22 (55%)\nOn by default in the GUI, off by default in bitcoind\t 10 (25%)\n\n-- \n--\nGavin Andresen", "summary": "A poll on OS differentiation for Bitcoin showed 55% off by default, 20% on by default, and 25% on by default in the GUI."}, {"author": "jan at uos.de", "date": "2011-07-01T16:35:58", "message_text_only": "On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:\n> > Not sure about OS differentiation, seems...wrong? \u00a0Maybe disabled by\n> > default on bitcoind but on by default on bitcoin?\n> \n> OK.  I mis-remembered the poll:\n>    http://forum.bitcoin.org/index.php?topic=4392.0\n> \n> On by default\t                       8 (20%)\n> Off by default\t                       22 (55%)\n> On by default in the GUI, off by default in bitcoind\t 10 (25%)\n\nI just voted as well and now - with some extra votes in the meantime -\nit's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on\n(9 + 13).\n\nI'm in favor of turning it on by default in the GUI and leaving it off\nin bitcoind.\n\nI don't like UPnP much, I find it exemplifies exactly what is wrong with\ncomputer security today: Convenience trumps security almost every time.\n\nBUT: I don't think this is the moment to fight UPnP. It's the standard\nmechanism in use today to let a computer behind a NAT accept incoming\nconnections. The user has already made the decision in regards to\nconvenience over security. By enabling UPnP (or by buying a product that\ndoes this automatically) they are saying: I want it to \"just work\"\ninstead of having fine-grained but more complicated control.\n\nBitcoin is a P2P application and as such should use this\nmechanism. I think it's pretty clear that participating in a P2P network\nrequires one to receive messages from other peers. At least no one seems\nto be concerned that Bitcoin (by default!) listens on port 8333. So I\nthink it's only logical to extend that to work behind NATs as well.\n\nCheers!\nJan", "summary": "Jan suggests enabling UPnP by default in the GUI but leaving it off in bitcoind. He acknowledges the security risks but believes it's necessary for P2P communication."}, {"author": "Robert McKay", "date": "2011-07-01T16:47:19", "message_text_only": "On Fri, Jul 1, 2011 at 5:35 PM, <jan at uos.de> wrote:\n\n> On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:\n> > > Not sure about OS differentiation, seems...wrong?  Maybe disabled by\n> > > default on bitcoind but on by default on bitcoin?\n> >\n> > OK.  I mis-remembered the poll:\n> >    http://forum.bitcoin.org/index.php?topic=4392.0\n> >\n> > On by default                        8 (20%)\n> > Off by default                               22 (55%)\n> > On by default in the GUI, off by default in bitcoind   10 (25%)\n>\n> I just voted as well and now - with some extra votes in the meantime -\n> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on\n> (9 + 13).\n>\n> I'm in favor of turning it on by default in the GUI and leaving it off\n> in bitcoind.\n>\n> I don't like UPnP much, I find it exemplifies exactly what is wrong with\n> computer security today: Convenience trumps security almost every time.\n>\n> BUT: I don't think this is the moment to fight UPnP. It's the standard\n> mechanism in use today to let a computer behind a NAT accept incoming\n> connections. The user has already made the decision in regards to\n> convenience over security. By enabling UPnP (or by buying a product that\n> does this automatically) they are saying: I want it to \"just work\"\n> instead of having fine-grained but more complicated control.\n>\n> Bitcoin is a P2P application and as such should use this\n> mechanism. I think it's pretty clear that participating in a P2P network\n> requires one to receive messages from other peers. At least no one seems\n> to be concerned that Bitcoin (by default!) listens on port 8333. So I\n> think it's only logical to extend that to work behind NATs as well\n\n\nIf bitcoin listened on IPv6 that might help for alot of people. Windows 7\nusers get a teredo IPv6 address (unless they disable it) when behind NAT on\nIPv4. Take any win7 box and put it on a typical NAT /DSL setup this is what\nhappens. I think this might actually work for more users than have UPNP\nsupport on their DSL gateways. teredo IPs aren't that stable though (they\nchange frequently) and they might tend to flood the address cache with stale\naddresses.\n\nRob\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/195a339b/attachment.html>", "summary": "Discussion on enabling UPnP in Bitcoin. Some are in favor of turning it on by default in the GUI, while others are concerned about security."}, {"author": "Douglas Huff", "date": "2011-07-01T17:47:46", "message_text_only": "On Jul 1, 2011, at 11:35 AM, jan at uos.de wrote:\n\n> On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:\n>>> Not sure about OS differentiation, seems...wrong?  Maybe disabled by\n>>> default on bitcoind but on by default on bitcoin?\n>> \n>> OK.  I mis-remembered the poll:\n>>   http://forum.bitcoin.org/index.php?topic=4392.0\n>> \n>> On by default\t                       8 (20%)\n>> Off by default\t                       22 (55%)\n>> On by default in the GUI, off by default in bitcoind\t 10 (25%)\n> \n> I just voted as well and now - with some extra votes in the meantime -\n> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on\n> (9 + 13).\n> \n> I'm in favor of turning it on by default in the GUI and leaving it off\n> in bitcoind.\n> \n> I don't like UPnP much, I find it exemplifies exactly what is wrong with\n> computer security today: Convenience trumps security almost every time.\n\nI don't think this should be a vote at all. Given Greg/Matt's numbers it is a necessity to ensure network stability over the next 90 days.\n\nAlso: the default will only apply to pre-built binaries, which bitcoind isn't one of, so for people running bitcoind this default doesn't matter at all. Just continue building without UPNP support as you're already doing.\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/945335ad/attachment.sig>", "summary": "A discussion on whether to turn on UPnP by default in Bitcoin's GUI, with some in favor and others against due to security concerns."}, {"author": "Matt Corallo", "date": "2011-07-01T17:50:40", "message_text_only": "Totally agree it really shouldnt be a vote, in the end UPnP is bad for\nan individual (more bandwidth usage, etc), but good for the network.\nThat means people will vote against it, but in the end someone has to\nmake the tough decision and turn it on.\n\nAlso, bitcoind is prebuilt in the daemon folder on the download archives\n(though Im not sure about OSX)\n\nMatt\nOn Fri, 2011-07-01 at 12:47 -0500, Douglas Huff wrote:\n> On Jul 1, 2011, at 11:35 AM, jan at uos.de wrote:\n> \n> > On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:\n> >>> Not sure about OS differentiation, seems...wrong?  Maybe disabled by\n> >>> default on bitcoind but on by default on bitcoin?\n> >> \n> >> OK.  I mis-remembered the poll:\n> >>   http://forum.bitcoin.org/index.php?topic=4392.0\n> >> \n> >> On by default\t                       8 (20%)\n> >> Off by default\t                       22 (55%)\n> >> On by default in the GUI, off by default in bitcoind\t 10 (25%)\n> > \n> > I just voted as well and now - with some extra votes in the meantime -\n> > it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on\n> > (9 + 13).\n> > \n> > I'm in favor of turning it on by default in the GUI and leaving it off\n> > in bitcoind.\n> > \n> > I don't like UPnP much, I find it exemplifies exactly what is wrong with\n> > computer security today: Convenience trumps security almost every time.\n> \n> I don't think this should be a vote at all. Given Greg/Matt's numbers it is a necessity to ensure network stability over the next 90 days.\n> \n> Also: the default will only apply to pre-built binaries, which bitcoind isn't one of, so for people running bitcoind this default doesn't matter at all. Just continue building without UPNP support as you're already doing.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/2d1e6814/attachment.sig>", "summary": "Debate on whether UPnP should be turned on by default in Bitcoin; some argue it's bad for individuals but good for the network."}, {"author": "Douglas Huff", "date": "2011-07-01T17:52:46", "message_text_only": "On Jul 1, 2011, at 12:50 PM, Matt Corallo wrote:\n\n> Also, bitcoind is prebuilt in the daemon folder on the download archives\n> (though Im not sure about OSX)\n\nIt's not on OS X so I assumed it wasn't anywhere else. My bad.\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/26d588a7/attachment.sig>", "summary": "Bitcoind is prebuilt in the daemon folder on download archives, but not on OSX. This was clarified in an email exchange."}, {"author": "Matt Corallo", "date": "2011-07-01T22:03:37", "message_text_only": "It would appear that we are all explaining why we agree...so, can we get\nACKs on UPnP by default on bitcoin and disabled by default on bitcoind\nfrom everyone (specifically Gavin), as well as ACKs in general on 0.3.24\ncoming out with the originally listed things?\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/73d8fb17/attachment.sig>", "summary": "Bitcoin developers are discussing enabling UPnP by default on Bitcoin and disabling it by default on Bitcoind, with general agreement on version 0.3.24."}, {"author": "Douglas Huff", "date": "2011-07-01T22:07:56", "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nMatt Corallo <bitcoin-list at bluematt.me> wrote:\n\n>It would appear that we are all explaining why we agree...so, can we\n>get\n>ACKs on UPnP by default on bitcoin and disabled by default on bitcoind\n>from everyone (specifically Gavin), as well as ACKs in general on\n>0.3.24\n>coming out with the originally listed things?\n\nAll sounds good to me.\n- --\nDouglas Huff\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.8\n\niQIVAwUBTg5FPEPHkQabDWHPAQj1lg/+K+OfHZXNj/Rn4Ei+OmGjEywTZmOWiFVy\n72MvaCNLkx1XW0G3ZJJsy211q5kssvDk4b0qdBraxjT2O7JE6rxEtPkkCaEv8zNv\nASpL1AdQ8PpOsYmot9Kl0XC3Hx4fmt89I18KwgEFqywDMssDQT1bWImE3xr628id\nOHFDRxWv3PQ6unuD0gd0vj4L468il4tzeqnlCCG/bwZACdZAlgxoJDhdGgrpxZf7\nzsUBhFwADqZ+KoQ9PJjonXHQj7g+UG2kdz/n3QGPXjAP0eLsqCLJrpJc5t3YEj8c\n3bSfbKDGA1djKrXVDOhJ3laZGnIjCBbPuWhnPfoP91S23sFlHxIG9qynrfIF0yMU\npMVd9WF98yyjbUEiZon53YGKqBEhjKgx4VLMaYVqT1/kA1vpLDGV4hyqQPsWd3ML\nLAp0kqBGzlosxX0PbcgQKX2gQ+P+9IjYeKb8XA9VbnLHJYdjZw+pSUz0RYYP3Fws\niOrypLgy79dEDyhafllQEAUDQi9XGhgBcpq1r683MD7JL3ip3e1x6LFDZQ9hA9Kk\nMosjgFMMcCe3R+5bozbTE1Lrsz+ycl5hW4Zi5lszilP8duhvj/InLy/JEpS3qsGc\nfeb5hltQqIEcBItTe/XZCFwROdMjczAl/k65Gk1CSBgDCRda8et9img1t9Z9vGK/\nqvwMoWzHcCc=\n=78gQ\n-----END PGP SIGNATURE-----", "summary": "Bitcoin developers are requesting ACKs on UPnP by default on bitcoin and disabled by default on bitcoind, as well as ACKs on 0.3.24 release."}, {"author": "Gregory Maxwell", "date": "2011-07-01T17:59:47", "message_text_only": "On Fri, Jul 1, 2011 at 12:35 PM,  <jan at uos.de> wrote:\n> I just voted as well and now - with some extra votes in the meantime -\n> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on\n> (9 + 13).\n>\n> I'm in favor of turning it on by default in the GUI and leaving it off\n> in bitcoind.\n[snip]\n\nI also don't like upnp, but I strongly support it being on because\nleaving it off is not really an alternative.\n\nIMO a forum poll is the wrong tool to use to decide if bitcoin keeps\nworking or not. ;) If the alternative were upnp vs some other way to\nreasonably increase the number of listeners... e.g. \"upnp always vs\nupnp only if there has been no inbound connections in X minutes\" that\nwould be another matter.\n\nThe bitcoin/bitcoind difference seems confusing to me, since when\nsomeone complains about connectivity I'll have to remember to ask\nwhich they are using... but enabling it for the gui is probably\nsufficient in terms of network health.\n\nBut it'll probably happen anyways: I imagine most bitcoind users build\nlocally and don't bother installing the upnp library. I know I don't.\n\n> At least no one seems\n> to be concerned that Bitcoin (by default!) listens on port 8333. So I\n> think it's only logical to extend that to work behind NATs as well.\n\nYea, listening at all is more interesting than upnp\u2014 though almost any\nharm that listening can cause can also be caused by outgoing\nconnections since the protocol is symmetric.\n\n(e.g. if you have an exploit, you don't need to connect to people, you\ncan just sibyl attack the network and exploit people who connect to\nyou\u2014 not quite as effective but I think enough that UPNP isn't a great\nadditional risk)\n\nIf you want to talk about worrying people about security:  The IRC\nconnections seriously set off alarm bells, especially when someone\nlooks and sees something indistinguishable from a botnet in IRC.  It's\nbeen blocked by major ISP multiple times. So, until we get IRC\ndisabled nothing else is really all that significant from a security\nhebe-geebies perspective.\n\nOn Fri, Jul 1, 2011 at 1:50 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Totally agree it really shouldnt be a vote, in the end UPnP is bad for\n> an individual (more bandwidth usage, etc), but good for the network.\n> That means people will vote against it, but in the end someone has to\n> make the tough decision and turn it on.\n\nWell, users who don't like it can still disable listening\u2014 which is\nhealthier for the network right now than leaving listening on but not\nactually working.\n\nWe can fix the incentive structure somewhat: We should give preference\nin the form of preferred forwarding from/to to nodes that we've\nconnected to vs connected to us, potentially improved relay rules. Not\nonly does this given an incentives to listen (faster txn processing,\nhearing about blocks earlier) but it also would reduce the\neffectiveness of some DOS attacks.   Not something for 0.3.24,\nhowever.", "summary": "Discussion on enabling UPnP in Bitcoin to increase the number of listeners, despite potential security risks and bandwidth usage concerns."}, {"author": "Jeff Garzik", "date": "2011-07-01T23:42:41", "message_text_only": "OK I pulled a couple other minor bits.\n\nThe only remaining question, IMO, is whether or not we should pull\n\n     Make UPnP default on Bitcoin but not on Bitcoind.\n     https://github.com/bitcoin/bitcoin/pull/372\n\nWe are all kicking the can on this decision to Gavin I believe <grin>\nI think the two strong arguments for upnp are\n     - other p2p apps widely deployed, notably skype, use it\n     - it will make a significant positive impact in the number of\n       nodes supporting incoming connections\n\nso my personal (read: not speaking for anyone else) opinion is to turn\non upnp for bitcoin _and_ bitcoind.\n\nOther than that, here's what we're looking at for 0.3.24:\n\nDawid Spiechowicz (1):\n      added polish translation\n\nDoug Huff (1):\n      Add OSX App bundle and correct build instructions to reflect reality.\n\nEric Hosmer (1):\n      Updated Visual C++ makefile.\n\nGavin Andresen (1):\n      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b\n\nGiel van Schijndel (2):\n      rpc server: send '403 Forbidden' to rejected clients\n      rpc: don't send 403 when using SSL to prevent DoS\n\nHan Lin Yap (3):\n      Double check translation and improved a translation string\n      Update swedish translation\n      Consistent Bitcoin example address\n\nJames Burkle (1):\n      Edited init.cpp to include a check that -datadir exists\n\nJeff Garzik (4):\n      FormatFullVersion: build fix related to recent translation improvement\n      doc/release-process.txt: minor updates\n      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t\n      Enable DNS seeding by default.\n\nJoerie de Gram (1):\n      Fix connection failure debug output\n\nJordan Lewis (8):\n      Only include irc.h when needed\n      Only include db.h when we have to.\n      Only included rpc.h when necessary\n      Only include net.h when we have to\n      Only include init.h when we have to\n      Only include strlcpy.h when we have to\n      Remove some globally unused headers from headers.h\n      Only include certain boost headers if necessary.\n\nMatt Corallo (3):\n      Update translations and remove obsolete translations.\n      Add new DNSSeed dnsseed.bluematt.me.\n      Only use dnsseeds and static seeds when not on testnet.\n\nPieter Wuille (5):\n      move wallet code to separate file\n      CWallet class\n      Bugfixes walletclass\n      Fix segfault when creating new wallet\n      Limit response to getblocks to half of output buffer size\n\nShane Wegner (1):\n      Fix missing includes needed for Boost 1.46.\n\nWladimir J. van der Laan (1):\n      add GetTotalBlocksEstimate() function, move magic number to constant\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "The Bitcoin community is considering making UPnP default on Bitcoin but not on Bitcoind to increase the number of nodes supporting incoming connections."}, {"author": "Jeff Garzik", "date": "2011-07-02T00:37:35", "message_text_only": "Hum, it sounds like there was some misunderstanding, on my part at\nleast.  On IRC, people are talking about a cherry-picked release,\nbasically 0.3.23 + a couple specific fixes, rather than what is\ncurrent in upstream git.  I had assumed people meant releasing current\ngit + some specific fixes not yet in git.\n\nWearing the Release Mangler hat, cherry-picked branches have a few\ndisadvantages:\n\n* you're throwing away the testing people have done on upstream git\n* the new branch would have zero testing, as most people have been\ntesting 0.3.23 or upstream git\n* it would be a dead-end branch, never touched after release.  bug\nreports for such a release might not necessarily be applicable to last\nversion or current upstream or anywhere in between.\n\nThat is the convention wisdom, anyway.  But to paraphrase Pirates of\nthe Caribbean, release management rules aren't really rules, they're\nmore like... guidelines.  :)\n\nThe cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't\nhave to worry about shipping CWallet, which needs a fix or two from\nhttps://github.com/bitcoin/bitcoin/pull/358\n\nI can live with, and roll a release for, either (a) 0.3.23 + select\nfixes or (b) current upstream + pull #358.  My preference is (b), but\nthis is a community and Holy Alpaca decision, not just a call I will\nmake on my own.\n\nComments welcome...\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "There was a misunderstanding about the release of a cherry-picked version of 0.3.23 with specific fixes, rather than the current upstream git. The disadvantages of cherry-picked branches were discussed, but a release of either 0.3.23 with select fixes or current upstream with pull #358 was possible."}, {"author": "Matt Corallo", "date": "2011-07-02T00:46:18", "message_text_only": "Personally, I have little preference, sipa and gmaxwell fall on the side\nof cherry-pick, but I think it might be good to do a broad-base test of\nCWallet in 0.3.24 so potential bugs can be found in it before crypto and\n0.4. In either case, I dont think we should spend too much time as this\nis just a minor update release, just get it out the door so we can focus\non 0.4 (hopefully) without interruption.\n\nMatt\n\nOn Fri, 2011-07-01 at 20:37 -0400, Jeff Garzik wrote:\n> Hum, it sounds like there was some misunderstanding, on my part at\n> least.  On IRC, people are talking about a cherry-picked release,\n> basically 0.3.23 + a couple specific fixes, rather than what is\n> current in upstream git.  I had assumed people meant releasing current\n> git + some specific fixes not yet in git.\n> \n> Wearing the Release Mangler hat, cherry-picked branches have a few\n> disadvantages:\n> \n> * you're throwing away the testing people have done on upstream git\n> * the new branch would have zero testing, as most people have been\n> testing 0.3.23 or upstream git\n> * it would be a dead-end branch, never touched after release.  bug\n> reports for such a release might not necessarily be applicable to last\n> version or current upstream or anywhere in between.\n> \n> That is the convention wisdom, anyway.  But to paraphrase Pirates of\n> the Caribbean, release management rules aren't really rules, they're\n> more like... guidelines.  :)\n> \n> The cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't\n> have to worry about shipping CWallet, which needs a fix or two from\n> https://github.com/bitcoin/bitcoin/pull/358\n> \n> I can live with, and roll a release for, either (a) 0.3.23 + select\n> fixes or (b) current upstream + pull #358.  My preference is (b), but\n> this is a community and Holy Alpaca decision, not just a call I will\n> make on my own.\n> \n> Comments welcome...\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/88fd5bb9/attachment.sig>", "summary": "Discussion on releasing Bitcoin version 0.3.24 with cherry-picked fixes or current upstream with CWallet testing before 0.4 release."}, {"author": "Gregory Maxwell", "date": "2011-07-02T00:51:12", "message_text_only": "On Fri, Jul 1, 2011 at 8:46 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Personally, I have little preference, sipa and gmaxwell fall on the side\n> of cherry-pick, but I think it might be good to do a broad-base test of\n> CWallet in 0.3.24 so potential bugs can be found in it before crypto and\n> 0.4. In either case, I dont think we should spend too much time as this\n> is just a minor update release, just get it out the door so we can focus\n> on 0.4 (hopefully) without interruption.\n\nThe fact that this will -rc before full release softens my concern some.\n\nI did a lot of semi-automated testing of cwallet+crypto (in the\nencrypted and non-encrypted states) which I really don't want to redo\nfor cwallet alone.", "summary": "Discussion on testing CWallet in Bitcoin 0.3.24 before the release of 0.4 to find potential bugs, with a preference for cherry-picking."}, {"author": "Douglas Huff", "date": "2011-07-02T01:05:19", "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nMy only concern is: How well have the fixes in pull 358 been tested? Wasn't there an issue with the \"\" account found just last night?\n\nMatt Corallo <bitcoin-list at bluematt.me> wrote:\n\n>Personally, I have little preference, sipa and gmaxwell fall on the\n>side\n>of cherry-pick, but I think it might be good to do a broad-base test of\n>CWallet in 0.3.24 so potential bugs can be found in it before crypto\n>and\n>0.4. In either case, I dont think we should spend too much time as this\n>is just a minor update release, just get it out the door so we can\n>focus\n>on 0.4 (hopefully) without interruption.\n>\n>Matt\n>\n>On Fri, 2011-07-01 at 20:37 -0400, Jeff Garzik wrote:\n>> Hum, it sounds like there was some misunderstanding, on my part at\n>> least.  On IRC, people are talking about a cherry-picked release,\n>> basically 0.3.23 + a couple specific fixes, rather than what is\n>> current in upstream git.  I had assumed people meant releasing\n>current\n>> git + some specific fixes not yet in git.\n>>\n>> Wearing the Release Mangler hat, cherry-picked branches have a few\n>> disadvantages:\n>>\n>> * you're throwing away the testing people have done on upstream git\n>> * the new branch would have zero testing, as most people have been\n>> testing 0.3.23 or upstream git\n>> * it would be a dead-end branch, never touched after release.  bug\n>> reports for such a release might not necessarily be applicable to\n>last\n>> version or current upstream or anywhere in between.\n>>\n>> That is the convention wisdom, anyway.  But to paraphrase Pirates of\n>> the Caribbean, release management rules aren't really rules, they're\n>> more like... guidelines.  :)\n>>\n>> The cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't\n>> have to worry about shipping CWallet, which needs a fix or two from\n>> https://github.com/bitcoin/bitcoin/pull/358\n>>\n>> I can live with, and roll a release for, either (a) 0.3.23 + select\n>> fixes or (b) current upstream + pull #358.  My preference is (b), but\n>> this is a community and Holy Alpaca decision, not just a call I will\n>> make on my own.\n>>\n>> Comments welcome...\n>>\n>\n>------------------------------------------------------------------------------\n>All of the data generated in your IT infrastructure is seriously\n>valuable.\n>Why? It contains a definitive record of application performance,\n>security\n>threats, fraudulent activity, and more. Splunk takes this data and\n>makes\n>sense of it. IT sense. And common sense.\n>http://p.sf.net/sfu/splunk-d2d-c2_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n- --\nDouglas Huff\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.8\n\niQIVAwUBTg5uzkPHkQabDWHPAQhEDRAAikf9NX06CSjHOKRdErIEgixHgrcUJk85\nGuUxmTIm305WNdxswVDwXhPAqi9PBr5jPYgowp4/UoiYprNHN/s9pPwqNyMI3Urn\nSH7rXEA0yYuUU2b2VINY3cxHropu0cGH/EjXOXd+hDf6Dlf/lCsohz3BTcjUho4B\n1esBTvhZngmEXaYSs5Hxd7CdbsJ8TVeib8aVGQN3GYc1H4I/MDFNpIsCVB0lAay2\n93nczwFvkB/0KyU8vzua8atygdyGNTPWr0BOKvuJO39audokbZmpEREjLiqlIfxj\n3MfcUZcOZ9or4Mq8Gq0ZLydpktKSKeZWpbpdzVEk/KQjz+zZhVZ+0jDj4FWIumcS\nsd7AdPpQAVVb5uG4ZnALI9V1gmfdXB+yxo7nKdHPCSOTaYwcbHu2+FI7PVlVlh/4\nIgcRtZT2p4xoNeuDU+QBinuCDsCPq14f0zPhIo7ZCzs/ruV3Y9BtBS7Ez8FnXIRp\nyI06/AX9Bmw2DWBS5Jbu3u32osK1JWBdO9Hh1yVb+O1f9pqDPn7KYroqs4yAPZfx\niz6OaQWtG5Zm+UjoLQiVhPA2cU2Zm42LywtbW3sxm+pmwEx91MeTFCioqOdkz9RI\n4NxkaWOlAcXlpr/WX5QoYVcio9GR9AnIeO6h6p4ov0PPI2WqgobrYQbtjdnqxZXi\nQ12+wZuYiDo=\n=STlK\n-----END PGP SIGNATURE-----", "summary": "Discussion on the release of Bitcoin version 0.3.24, with debate over whether to cherry-pick specific fixes or release current upstream."}, {"author": "Matt Corallo", "date": "2011-07-02T01:12:51", "message_text_only": "> My only concern is: How well have the fixes in pull 358 been tested? Wasn't there an issue with the \"\" account found just last night?\nNo, a bug was found where it no longer opened (\"Error: unable to load\nwallet.dat\") when the ~/.bitcoin folder was empty/not present.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/a4fa1856/attachment.sig>", "summary": "A bug was found in the Bitcoin wallet where it would not open if the folder was empty, but there are no concerns about pull 358."}, {"author": "Gavin Andresen", "date": "2011-07-02T02:05:01", "message_text_only": "I think we should move forwards, not sideways-- git tip + whatever we\nneed to fix bugs in current tip is my preference.\n\nRE: upnp:  I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen prefers to move forward and fix bugs in the current tip with Git tip and other necessary tools. He suggests pulling Matt's patch for UPnP."}, {"author": "Jeff Garzik", "date": "2011-07-02T21:07:25", "message_text_only": "On Fri, Jul 1, 2011 at 10:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I think we should move forwards, not sideways-- git tip + whatever we\n> need to fix bugs in current tip is my preference.\n>\n> RE: upnp: \u00a0I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).\n\nJust tagged v0.3.24rc1...\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Jeff Garzik tagged v0.3.24rc1 and suggests moving forward with git tip and fixing bugs, while pulling Matt's patch for UPnP."}, {"author": "Matt Corallo", "date": "2011-07-03T01:58:40", "message_text_only": "Sorry this took so long, I got distracted...\nAnyway 0.3.24 RC1 builds available at\nhttp://dl.dropbox.com/u/29653426/Bitcoin%200.3.24%20RC1.tar.bz2\nSHA1:\nbb829e037aef86c5d9da384c0ff3c91ce8b11d5a  Bitcoin 0.3.24 RC1.tar.bz2\n\nBuilds gitian signed and email signed as always.\n\nNotes:\nCouple things need fixed up before release wrt build engineering:\nhttp://forum.bitcoin.org/index.php?topic=24841.0 (still haven't had a\nchance to dig up a copy of Win98 and spin up a VM to test any results of\nthis one).\nBuild on Ubuntu 8.04 instead of 10.04 so that oder libcs can work (and\ndo thorough testing of that resulting binary on newer libcs specifically\nopenSUSE 11.04, see http://forum.bitcoin.org/index.php?topic=21767.0 )\n\nSorry to hold up release on this crap that is still unfixed after\n0.3.21...\n\nMatt\n\n\nOn Sat, 2011-07-02 at 17:07 -0400, Jeff Garzik wrote:\n> On Fri, Jul 1, 2011 at 10:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> > I think we should move forwards, not sideways-- git tip + whatever we\n> > need to fix bugs in current tip is my preference.\n> >\n> > RE: upnp:  I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).\n> \n> Just tagged v0.3.24rc1...\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110703/fa27f944/attachment.sig>", "summary": "Bitcoin 0.3.24 RC1 builds are available for download, but some issues need fixing before release, including testing on older libcs."}], "thread_summary": {"title": "0.3.24", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Robert McKay", "Douglas Huff", "jan at uos.de", "Gregory Maxwell", "Matt Corallo", "Gavin Andresen", "Pieter Wuille"], "messages_count": 26, "total_messages_chars_count": 39909, "convo_summary": "Bitcoin developers plan to release version 0.3.24 to fix flood control limits and enable DNS seed and UPnP by default. There is a debate on whether to enable UPnP by default in the GUI due to security concerns. The community is considering making UPnP default on Bitcoin but not on Bitcoind to increase the number of nodes supporting incoming connections. A bug was found in the Bitcoin wallet, but there are no concerns about pull 358. Bitcoin 0.3.24 RC1 builds are available for download, but some issues need fixing before release."}}, {"title": "[Bitcoin-development] Useful bitcoin patches...", "thread_messages": [{"author": "Jeff Garzik", "date": "2011-07-01T03:23:56", "message_text_only": "This was posted to IRC:\nhttp://davids.webmaster.com/~davids/bitcoin-3diff.txt\n\nIncludes several useful features that all the big pools have been\nscreaming for...  notably HTTP/1.1 keep-alive support.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "A new Bitcoin software update includes features requested by major mining pools, including HTTP/1.1 keep-alive support."}, {"author": "Christian Decker", "date": "2011-07-01T16:03:52", "message_text_only": "Some appear to be beneficial to everybody.\nMultithreading the RPC will certainly speed up quite a few services and I\nsee no downside in adding it. The same is true for Keep-Alive.\n\nI'm against including the long polling support because incredibly few people\nwill benefit from it (pool providers) and yet it is included for everyone.\n\nThe Hub mode is good, and I would go a step further and optimize the\nconnection logic for all nodes by default.\n\nJust IMHO\n\nRegards,\nChris\n\n\nOn Fri, Jul 1, 2011 at 5:23 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> This was posted to IRC:\n> http://davids.webmaster.com/~davids/bitcoin-3diff.txt\n>\n> Includes several useful features that all the big pools have been\n> screaming for...  notably HTTP/1.1 keep-alive support.\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n>\n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security\n> threats, fraudulent activity, and more. Splunk takes this data and makes\n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/a67335a5/attachment.html>", "summary": "Chris suggests adding multithreading and Keep-Alive to speed up services, but opposes long polling support due to limited benefits. He supports optimizing connection logic for all nodes."}, {"author": "Gregory Maxwell", "date": "2011-07-01T16:23:59", "message_text_only": "On Fri, Jul 1, 2011 at 12:03 PM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> Some appear to be beneficial to everybody.\n> Multithreading the RPC will certainly speed up quite a few services and I\n> see no downside in adding it. The same is true for Keep-Alive.\n\nThe multithreaded RPC stuff will need very aggressive testing to make\nsure it doesn't expose race conditions elsewhere in the code.\n\nE.g. you don't want to lose change from a send because some txn called\ngetnewaddress concurrently and there was a bug. So far the\nmultithreaded RPC patches have pretty much only been run by miners...\nwho have a different rpc profile than everyone else.\n\n(and the MT RPC that I've been using only multhreaded getwork\u2026)\n\n> The Hub mode is good, and I would go a step further and optimize the\n> connection logic for all nodes by default.\n\nGah. No.\n\nThe 'hub mode' is not good. We're already low on sockets network wide,\nadding a built in DDOS mode flag to bitcoin that makes nodes\naggressively connect to lots of neighbors is a bad idea. People will\nignorantly enable it thinking they are adding resources to the network\nwhen they are really consuming much much more.\n\nI have a big fast node with a higher connection limit and the flood\nfixes and I'm currently seeing 596 inbound connections right now. This\nsuggests the situation is already a lot worse than the rough numbers\nusing lfnet connection counts suggested.\n\n\nMiners, concerned with fast block propagation, should manually addnode\neach other. We should fix the addnode logic so that it reserve\nconnection slots for addnoded nodes and tries to keep connecting to\nthem (or, alternatively, add a peernode flag for that behavior)\ncurrently addnode is oneshot.\n\nThere is a lot of room for longer term improvements to the connection\nand forwarding logic, and I have a couple interesting ones I'm running\non my nodes, but we don't really have any good way to test and\nvalidate changes, so I'm hesitant to publish them.", "summary": "Christian Decker suggests adding multithreading and Keep-Alive to Bitcoin, while the Hub mode is criticized for being a bad idea."}, {"author": "Matt Corallo", "date": "2011-07-01T16:25:27", "message_text_only": "1) Native Long Polling Support\nNot sure about this one, it would be useful, but preferably done once\nBitcoin is cleaned up anyway. A probable good way would be a central\nnotification interface which net, wallets, etc all connect to, including\nthings like a pool server. Thus I'm not sure about merging something\nlike this now.\n\n2) A fix from Luke Dash Jr.\nHis branch is at\nhttps://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin/commits/getwork_dedupe and I would say it would be good to merge. gmaxwell indicated that hes been running this for a while and it is stable.\n\n3) Hub Mode\nWhy? We dont have enough nodes listening to begin with, this generates a\nton of net usage on other listening nodes, which is not good. If you\nopen up your ports, you will get just as many, if not more connections\nvery easily.\n\n4) RPC Turbocharge\nYep, this is something that is needed, there is also the other asio pull\nrequest on github, not sure how/if these compare.\n\n5) Resource Leak Fix\nLooks good to me.\n\nMatt\n\nOn Fri, 2011-07-01 at 18:03 +0200, Christian Decker wrote:\n> Some appear to be beneficial to everybody.\n> Multithreading the RPC will certainly speed up quite a few services\n> and I see no downside in adding it. The same is true for Keep-Alive.\n> \n> I'm against including the long polling support because incredibly few\n> people will benefit from it (pool providers) and yet it is included\n> for everyone.\n> \n> The Hub mode is good, and I would go a step further and optimize the\n> connection logic for all nodes by default. \n> \n> Just IMHO\n> \n> Regards,\n> Chris\n> \n> \n> On Fri, Jul 1, 2011 at 5:23 AM, Jeff Garzik <jgarzik at exmulti.com>\n> wrote:\n>         This was posted to IRC:\n>         http://davids.webmaster.com/~davids/bitcoin-3diff.txt\n>         \n>         Includes several useful features that all the big pools have\n>         been\n>         screaming for...  notably HTTP/1.1 keep-alive support.\n>         \n>         --\n>         Jeff Garzik\n>         exMULTI, Inc.\n>         jgarzik at exmulti.com\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/525f7c65/attachment.sig>", "summary": "Several updates proposed for Bitcoin, including multithreading RPC and fixing resource leaks, but some features are controversial and may not be merged."}, {"author": "Luke-Jr", "date": "2011-07-01T18:59:34", "message_text_only": "On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:\n> This was posted to IRC:\n> http://davids.webmaster.com/~davids/bitcoin-3diff.txt\n> \n> Includes several useful features that all the big pools have been\n> screaming for...  notably HTTP/1.1 keep-alive support.\n\n\"Native Long Polling Support\" should be renamed. Real native long polling \nwould be for solo miners.\n\n\"A fix from Luke Dash Jr.\" -- I have a branch with this; I didn't check that \nhis version is up to date.\n\n\"RPC Turbocharge\" -- If this incorporates only my changes for multithreading, \nit breaks JSON-RPC over SSL.", "summary": "Jeff Garzik shared a link on IRC for a Bitcoin update with features requested by big pools, including HTTP/1.1 keep-alive support and RPC Turbocharge."}, {"author": "Luke-Jr", "date": "2011-07-10T18:42:41", "message_text_only": "On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:\n> This was posted to IRC:\n> http://davids.webmaster.com/~davids/bitcoin-3diff.txt\n> \n> Includes several useful features that all the big pools have been\n> screaming for...  notably HTTP/1.1 keep-alive support.\n\nThere seems to be a new version at:\n\thttp://davids.webmaster.com/~davids/bitcoin-4diff.txt\nI haven't compared them yet.\n\nFor the \"3diff\" version, I extracted and made proper git branches for each \nlogical part:\n  hub_mode\n  threaded_rpc\n  \\-- rpc_keepalive (depends on threaded_rpc, or a single connection would\n                     keep the JSON-RPC interface locked up)\n  signal_blk_notify (generic version of -pollpidfile, with a bugfix)\n  bugfix_CreateThread_leak\n  getwork_dedupe (original branch for my bugfix)\n\nIn addition, I also consider these branches valid candidates for merging:\n  coinbaser (popens a given command and reads coinbase outputs from stdout)\n  gitignore (ignore some common misc files)\n  minfee_modes (internal function changes to allow specifying different fees\n                for relay, send, or accept-in-block)\n  \\-- eligius_relay (relay lower fees only Eligius will accept)\n      \\-- eligius_sendfee (send lower fees only Eligius will accept)\n  txinfo (adds entries to getinfo for transactions accepted for relaying,\n          transactions accepted for the current block-in-progress, and current\n          block-in-progress size)\n  bitcoinuri (compliant support for all bitcoin: URIs)\n\nAll available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git", "summary": "A new version of Bitcoin with useful features, including HTTP/1.1 keep-alive support, has been released and is available for merging."}, {"author": "Matt Corallo", "date": "2011-07-10T19:12:12", "message_text_only": "On Sun, 2011-07-10 at 14:42 -0400, Luke-Jr wrote:\n> On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:\n> > This was posted to IRC:\n> > http://davids.webmaster.com/~davids/bitcoin-3diff.txt\n> > \n> > Includes several useful features that all the big pools have been\n> > screaming for...  notably HTTP/1.1 keep-alive support.\n> \n> There seems to be a new version at:\n> \thttp://davids.webmaster.com/~davids/bitcoin-4diff.txt\n> I haven't compared them yet.\n> \n> For the \"3diff\" version, I extracted and made proper git branches for each \n> logical part:\n>   hub_mode\nNo, no, no, no, no.  This has been discussed several times and provides\nlittle to no advantage for miners and has the potential to severely harm\nthe network.\n>   threaded_rpc\n>   \\-- rpc_keepalive (depends on threaded_rpc, or a single connection would\n>                      keep the JSON-RPC interface locked up)\nSome form of patch that implements these does need to be pulled soon, I\nwould say 0.4.1 or maybe sooner.\n>   signal_blk_notify (generic version of -pollpidfile, with a bugfix)\nSeems to be a feature for such a minority that until the codebase is\ncleaned a ton we shouldn't add features for small minorities.  We have\nseen even one or two line patches cause regressions so I, personally,\nthink we should really focus on cleaning the codebase (CWallet was a\ngreat start) and then add all these minority features once the backend\nstuff is really clean and efficient.\n>   bugfix_CreateThread_leak\nYes, should be in for 0.4 and I think there is a pull request for it.\n>   getwork_dedupe (original branch for my bugfix)\nI think there is already a pull request, which should be merged for 0.4\nIMO.\n> \n> In addition, I also consider these branches valid candidates for merging:\n>   coinbaser (popens a given command and reads coinbase outputs from stdout)\nSeems like you are the only one who would benifit here, as noone else\nbut eligius changes coinbase output to a random set.\n>   gitignore (ignore some common misc files)\n>   minfee_modes (internal function changes to allow specifying different fees\n>                 for relay, send, or accept-in-block)\nWe don't need something that just generically changes the functions to\nallow whatever fee you want, we need something more generalized to allow\nmore custom settings, not just blind accept if fee is x per kb or\nsomething.  Sipa has suggested various things that should allow for more\nfee control by the users while still preventing users from sending\ntransactions that lock their coins in limbo.\n>   \\-- eligius_relay (relay lower fees only Eligius will accept)\n>       \\-- eligius_sendfee (send lower fees only Eligius will accept)\nNo, and no.  Just because you are willing to accept lower fees doesn't\nmean the incentives are right to prevent DDoS.  The fees aren't there to\nsupport the miners (not for a while, at least) they are there to prevent\nstupid users from DDoSing and just generally wasting everyone else's\nresources for no reason.\n>   txinfo (adds entries to getinfo for transactions accepted for relaying,\n>           transactions accepted for the current block-in-progress, and current\n>           block-in-progress size)\nThese are cool numbers to know, but I'm not sure if they have any real\nuses making them just useless feature creep.\n>   bitcoinuri (compliant support for all bitcoin: URIs)\nURI support would be nice.\n> \n> All available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git\n> \n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security \n> threats, fraudulent activity, and more. Splunk takes this data and makes \n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/0282deb8/attachment.sig>", "summary": "Luke-Jr proposes several Bitcoin patches, including HTTP/1.1 keep-alive support, but some are deemed unnecessary or potentially harmful to the network."}, {"author": "Luke-Jr", "date": "2011-07-10T20:30:53", "message_text_only": "On Sunday, July 10, 2011 3:12:12 PM Matt Corallo wrote:\n> On Sun, 2011-07-10 at 14:42 -0400, Luke-Jr wrote:\n> > For the \"3diff\" version, I extracted and made proper git branches for\n> > each logical part:\n> >   hub_mode\n> \n> No, no, no, no, no.  This has been discussed several times and provides\n> little to no advantage for miners and has the potential to severely harm\n> the network.\n\nI just said it exists. I don't expect anyone to promote or merge it.\n\n> > In addition, I also consider these branches valid candidates for merging:\n> >   coinbaser (popens a given command and reads coinbase outputs from\n> >   stdout)\n> \n> Seems like you are the only one who would benifit here, as noone else\n> but eligius changes coinbase output to a random set.\n\nI suspect because they haven't figured out how. Take it or leave it.\n\n> >   minfee_modes (internal function changes to allow specifying different\n> >                 fees for relay, send, or accept-in-block)\n> \n> We don't need something that just generically changes the functions to\n> allow whatever fee you want, we need something more generalized to allow\n> more custom settings, not just blind accept if fee is x per kb or\n> something.  Sipa has suggested various things that should allow for more\n> fee control by the users while still preventing users from sending\n> transactions that lock their coins in limbo.\n\nThis is a step in that direction, at least, by providing the mode as input.\nSince 0.4 is moving to Qt, perhaps moving GetMinFee to QtScript is \nappropriate.\n\n> >   \\-- eligius_relay (relay lower fees only Eligius will accept)\n> >       \\-- eligius_sendfee (send lower fees only Eligius will accept)\n> \n> No, and no.  Just because you are willing to accept lower fees doesn't\n> mean the incentives are right to prevent DDoS.  The fees aren't there to\n> support the miners (not for a while, at least) they are there to prevent\n> stupid users from DDoSing and just generally wasting everyone else's\n> resources for no reason.\n\nAgain, take it or leave it, but in the meantime you're asking for trouble from \nusers who feel they're being forced to pay more than they have to. Or perhaps \nrather than trouble, that decision will increase awareness of other clients \nthat don't try to control the users. That could be good too.", "summary": "Luke-Jr proposed several changes to the Bitcoin network, but Matt Corallo disagreed, stating that they provide little to no advantage for miners and could harm the network."}, {"author": "Matt Corallo", "date": "2011-07-10T22:58:30", "message_text_only": "On Sun, 2011-07-10 at 18:46 -0400, Luke-Jr wrote:\n> On Sunday, July 10, 2011 6:12:43 PM Matt Corallo wrote:\n> > On Sun, 2011-07-10 at 16:30 -0400, Luke-Jr wrote:\n> > > Again, take it or leave it, but in the meantime you're asking for trouble\n> > > from users who feel they're being forced to pay more than they have to.\n> > > Or perhaps rather than trouble, that decision will increase awareness of\n> > > other clients that don't try to control the users. That could be good\n> > > too.\n> > \n> > Its not a question of forcing users to pay anything, its a question of\n> > how best to solve the \"Im just gonna throw random crap in the chain for\n> > the lulz\" problem without causing too many side effects.  As with many\n> > things Bitcoin, the temporary solution was something that was fairly\n> > quickly hacked together to solve the problem without causing too many\n> > problems.  What needs to happen is an actual solution, Bitcoin, in\n> > theory, allows for all kinds of cool things, but the solution here needs\n> > carefully thought out and implemented, not just keep lowering the fees.\n> \n> The point is that we are already accepting lower fees. People (probably) want \n> to pay those lower fees. Yet there's developers writing their software to get \n> in the way between the user and pool willing to do business.\nRead what I wrote again, and don't reply off-list.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110711/2c493353/attachment.sig>", "summary": "Developers should carefully consider and implement a solution to the problem of users throwing random transactions into the Bitcoin chain, rather than just lowering fees."}], "thread_summary": {"title": "Useful bitcoin patches...", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "Gregory Maxwell", "Matt Corallo", "Christian Decker"], "messages_count": 9, "total_messages_chars_count": 16583, "convo_summary": "Bitcoin developers proposed several updates, including multithreading and Keep-Alive support, but some features are controversial and may not be merged. HTTP/1.1 keep-alive support was added to the latest Bitcoin software update, which was requested by major mining pools. Developers are also considering a solution to the problem of users throwing random transactions into the Bitcoin chain."}}, {"title": "[Bitcoin-development] Reconsider build system change?", "thread_messages": [{"author": "John Smith", "date": "2011-07-02T07:29:04", "message_text_only": "Hello,\n\nWhy again did we choose for autotools as future build system instead of\ncmake?\n\n- CMake generates native build scripts for Make (all platforms), XCode,\nVisual Studio. Autoconf only does Make.\n\n- CMake has a clearer syntax, m4/autotools is very convoluted\n\n- CMake is very fast\n\n- CMake is supported natively in Qt Creator in the QT SDK, and is used by\nmany other KDE/QT as well as other open source applications. Many people\ndiscourage the use of autotools for new projects.\n\nA CMake build system for bitcoin is already integrated into rpcminer,\navailable here:\n\nhttp://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/71e0983d/attachment.html>", "summary": "CMake is a better choice than autotools as a build system due to its ability to generate native build scripts for multiple platforms, clearer syntax, and faster speed."}, {"author": "John Smith", "date": "2011-07-02T08:13:52", "message_text_only": "Also important: it supports cross compiling:\n\nhttp://www.cmake.org/Wiki/CMake_Cross_Compiling\n\nJS\n\nOn Sat, Jul 2, 2011 at 7:29 AM, John Smith <witchspace81 at gmail.com> wrote:\n\n> Hello,\n>\n> Why again did we choose for autotools as future build system instead of\n> cmake?\n>\n> - CMake generates native build scripts for Make (all platforms), XCode,\n> Visual Studio. Autoconf only does Make.\n>\n> - CMake has a clearer syntax, m4/autotools is very convoluted\n>\n> - CMake is very fast\n>\n> - CMake is supported natively in Qt Creator in the QT SDK, and is used by\n> many other KDE/QT as well as other open source applications. Many people\n> discourage the use of autotools for new projects.\n>\n> A CMake build system for bitcoin is already integrated into rpcminer,\n> available here:\n>\n> http://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree\n>\n> JS\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/9df8688f/attachment.html>", "summary": "CMake is suggested as a better build system than autotools due to its cross-platform support, clearer syntax, and faster speed."}, {"author": "Matt Corallo", "date": "2011-07-02T11:30:14", "message_text_only": "I dont think anyone really made a conscious decision one way or the\nother, someone submitted an autotools patch and thus people started\ntalking about when we were going to merge autotools.  That said, the\nautotools stuff needs redone before it would be merged anyway. So it\nwould be up to whoever writes the build system. However, autotools is\nmore standard than CMake, and since its a shell script, you dont have to\ninstall CMake which doesnt come standard on almost any distros (AFAIK).\n\nMatt\n\nOn Sat, 2011-07-02 at 08:13 +0000, John Smith wrote:\n> \n> Also important: it supports cross compiling:\n> \n> http://www.cmake.org/Wiki/CMake_Cross_Compiling\n> \n> JS\n> \n> On Sat, Jul 2, 2011 at 7:29 AM, John Smith <witchspace81 at gmail.com>\n> wrote:\n>         Hello,\n>         \n>         Why again did we choose for autotools as future build system\n>         instead of cmake?\n>         \n>         - CMake generates native build scripts for Make (all\n>         platforms), XCode, Visual Studio. Autoconf only does Make.\n>         \n>         - CMake has a clearer syntax, m4/autotools is very convoluted\n>         \n>         - CMake is very fast\n>         \n>         - CMake is supported natively in Qt Creator in the QT SDK, and\n>         is used by many other KDE/QT as well as other open source\n>         applications. Many people discourage the use of autotools for\n>         new projects.\n>         \n>         A CMake build system for bitcoin is already integrated into\n>         rpcminer, available here:\n>         \n>         http://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree\n>         \n>         JS\n> \n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security \n> threats, fraudulent activity, and more. Splunk takes this data and makes \n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2\n> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/0bb0d8a0/attachment.sig>", "summary": "Autotools vs CMake debate for Bitcoin's build system. Autotools is more standard, but CMake has advantages such as cross-compiling and clearer syntax."}, {"author": "John Smith", "date": "2011-07-02T11:49:33", "message_text_only": "On Sat, Jul 2, 2011 at 11:30 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> would be up to whoever writes the build system. However, autotools is\n> more standard than CMake, and since its a shell script, you dont have to\n> install CMake which doesnt come standard on almost any distros (AFAIK).\n>\n\nCMake is also very standard, used by many projects, and is available in many\ndistros.\n\nFor debians it's as simple as apt-get install cmake, which is not a big\nproblem as you need to install the other dependencies (such as boost) as\nwell to build.\n\nFedora/redhat also seems to have the package 'cmake'. I don't think there is\nany modern distro that doesn't have it as a package.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/64f653a8/attachment.html>", "summary": "CMake is a standard build system used by many projects and available in most distros, making it easy to install."}, {"author": "Luke-Jr", "date": "2011-07-02T14:50:08", "message_text_only": "On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:\n> Why again did we choose for autotools as future build system instead of\n> cmake?\n\nI don't really care much either way, but cmake doesn't follow the standard \nbuild procedure (./configure && make && make install), though I imagine \n./configure could be emulated with some script.", "summary": "John Smith questions the decision to use autotools instead of cmake as the future build system, citing cmake's deviation from the standard build procedure."}, {"author": "John Smith", "date": "2011-07-02T16:50:14", "message_text_only": "On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:\n> > Why again did we choose for autotools as future build system instead of\n> > cmake?\n>\n> I don't really care much either way, but cmake doesn't follow the standard\n> build procedure (./configure && make && make install), though I imagine\n> ./configure could be emulated with some script.\n>\n\nIt would change the sequence to\n\ncmake . && make && make install\n\nSo a shell script named 'configure' that starts 'cmake .' is the most easy\ncase :-) Probably it'd also need to pass through some command line args, for\nexample --prefix.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/e5aef2ef/attachment.html>", "summary": "A discussion about the use of autotools versus cmake as a build system for a project, with concerns raised about cmake not following the standard build procedure."}, {"author": "Luke-Jr", "date": "2011-07-02T16:55:52", "message_text_only": "On Saturday, July 02, 2011 12:50:14 PM John Smith wrote:\n> On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:\n> > > Why again did we choose for autotools as future build system instead of\n> > > cmake?\n> > \n> > I don't really care much either way, but cmake doesn't follow the\n> > standard build procedure (./configure && make && make install), though I\n> > imagine ./configure could be emulated with some script.\n> \n> It would change the sequence to\n> \n> cmake . && make && make install\n> \n> So a shell script named 'configure' that starts 'cmake .' is the most easy\n> case :-) Probably it'd also need to pass through some command line args,\n> for example --prefix.\n\nAnd --datadir --mandir --randomobscurecrap CXXFLAGS=-O9, etc\nDon't forget --help listing all the useful options... that's the big thing I \nmiss with CMake-stuff.", "summary": "A discussion about the use of autotools versus cmake as a build system, with concerns about cmake not following the standard build procedure."}, {"author": "Douglas Huff", "date": "2011-07-02T17:05:51", "message_text_only": "Cmake is just as bad as autotools, just with a different syntax and more \"buzz\" behind it right this second. I don't see any advantage to it over autotools unless you're not familiar with either and even then I wouldn't really call it an advantage. It's just different.\n\nIt also requires a dependency that isn't installed by default anywhere, as already mentioned, and is less known outside of some obscure qt/kde circles and so finding people who are familiar with it and are willing to maintain it is more difficult. \n\nAutotools is the devil you know.\n\nYou'll probably throw out that mysql and compiz have switched to it, but really, those projects aren't something that should be emulated by anyone. Ever.\n\nOn Jul 2, 2011, at 11:50 AM, John Smith wrote:\n\n> On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:\n> > Why again did we choose for autotools as future build system instead of\n> > cmake?\n> \n> I don't really care much either way, but cmake doesn't follow the standard\n> build procedure (./configure && make && make install), though I imagine\n> ./configure could be emulated with some script.\n> \n> It would change the sequence to\n> \n> cmake . && make && make install\n> \n> So a shell script named 'configure' that starts 'cmake .' is the most easy case :-) Probably it'd also need to pass through some command line args, for example --prefix.\n> \n> JS\n> \n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security \n> threats, fraudulent activity, and more. Splunk takes this data and makes \n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \nDouglas Huff", "summary": "Cmake is not better than autotools, it just has a different syntax and requires an additional dependency. Autotools is still the preferred choice."}, {"author": "Pieter Wuille", "date": "2011-07-03T10:44:17", "message_text_only": "On Sat, Jul 02, 2011 at 07:29:04AM +0000, John Smith wrote:\n> Hello,\n> \n> Why again did we choose for autotools as future build system instead of\n> cmake?\n\nI have no preference for any particular project build system. If a system\n* is easy enough to set up (included in standard repositories, eg.)\n* allows building of the bitcoin codebase on several linux distro's\n* does cross-compilation to windows\n* supports osx\n* is easy to maintain\n* it is not too hard to adapt other GUI's to use it (bitcoin-qt,\n  maybe others as well, i hear about a cocoabitcoin?)\n* gets implemented and tested to support all of the above\n.. i have no problem with choosing that system for future versions.\n\n-- \nPieter", "summary": "John Smith questions the choice of autotools as the future build system and suggests cmake, but Pieter has no preference as long as it meets certain criteria."}, {"author": "Pieter Wuille", "date": "2011-07-07T08:49:39", "message_text_only": "On Sun, Jul 03, 2011 at 12:44:17PM +0200, Pieter Wuille wrote:\n> I have no preference for any particular project build system. If a system\n> * is easy enough to set up (included in standard repositories, eg.)\n> * allows building of the bitcoin codebase on several linux distro's\n> * does cross-compilation to windows\n> * supports osx\n> * is easy to maintain\n> * it is not too hard to adapt other GUI's to use it (bitcoin-qt,\n>   maybe others as well, i hear about a cocoabitcoin?)\n> * gets implemented and tested to support all of the above\n> .. i have no problem with choosing that system for future versions.\n\nOther opinions? Someone actually interested in writing a cmake configuration\nfor bitcoin?\n\n-- \nPieter", "summary": "Pieter Wuille has no preference for a particular project build system for Bitcoin, as long as it meets certain criteria and is easy to maintain."}, {"author": "Jeff Garzik", "date": "2011-07-07T16:51:08", "message_text_only": "On Thu, Jul 7, 2011 at 4:49 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Sun, Jul 03, 2011 at 12:44:17PM +0200, Pieter Wuille wrote:\n>> I have no preference for any particular project build system. If a system\n>> * is easy enough to set up (included in standard repositories, eg.)\n>> * allows building of the bitcoin codebase on several linux distro's\n>> * does cross-compilation to windows\n>> * supports osx\n>> * is easy to maintain\n>> * it is not too hard to adapt other GUI's to use it (bitcoin-qt,\n>> \u00a0 maybe others as well, i hear about a cocoabitcoin?)\n>> * gets implemented and tested to support all of the above\n>> .. i have no problem with choosing that system for future versions.\n>\n> Other opinions? Someone actually interested in writing a cmake configuration\n> for bitcoin?\n\nautotools is indeed \"the devil we know\" which works automatically on\nall supported platforms save VC++  It is also the easiest to package,\nas all distros already have macros and scripts specifically designed\nto integrate autotools packages into their package build systems.\ncmake simply does not have that level of uptake.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Developers discuss the best project build system for Bitcoin codebase, with autotools being the easiest to package and most compatible."}, {"author": "John Smith", "date": "2011-07-07T17:40:15", "message_text_only": "Hello Pieter,\n\nOther opinions? Someone actually interested in writing a cmake configuration\n> for bitcoin?\n>\n\nI'm willing to do it, but the priority is not that high.\n\nI'm currently sticking with qmake, as apart from boost library name\nauto-detection, I had no problems with it and it works well enough for a\nrelatively small project such as bitcoin.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110707/61f47a76/attachment.html>", "summary": "A developer is willing to write a cmake configuration for Bitcoin, but currently sticking with qmake as it works well for a small project."}, {"author": "Douglas Huff", "date": "2011-07-02T17:45:02", "message_text_only": "On Jul 2, 2011, at 12:31 PM, John Smith wrote:\n> So, what about native build script generation for other platforms? autotools can only generate makefiles (with at least two intermediate code generation steps), which is quite limited. \n\nThis would be true if gmake didn't build/run basically everywhere; but, it does.\n\n> IMO cmake is simple and elegant compared to the autotools monster. I don't see why it would be \"just as bad\". And I have quite some experience with both systems. Autotools is a hell to debug. cmake certainly isn't perfect, but at least it's a leap forward.\n\nDon't get me wrong, I'm not defending autotools' design or implementation. It is; however, more ubiquitous and understood by a much wider audience.\n\n> BTW for cmake there is \"ccmake\" which is even better than configure --help as it offers an interactive interface for configuration.\n\nI would say that's actually a mark against cmake. If you need a gui to select build options because your cli doesn't have proper help output something is wrong.\n\nIf you're willing to setup and maintain a cmake build environment I wouldn't say it should be rejected outright. Speculating about it without an implementation to compare seems like a waste of time.\n\nEspecially when jaromil already has a mostly-functional autotools setup. It needs tweaking still and some changes to catch up and rebase, but it works. He also already did the tedious work to rearrange the source tree to make adding any auto-configuration tool for the build environment easy to drop in place. (Which is already merged.)\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/a842180a/attachment.sig>", "summary": "Discussion on using cmake vs autotools for native build script generation. Autotools is more ubiquitous, but cmake is simpler and easier to debug."}, {"author": "John Smith", "date": "2011-07-02T18:03:49", "message_text_only": "On Sat, Jul 2, 2011 at 5:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n\n> On Jul 2, 2011, at 12:31 PM, John Smith wrote:\n> > So, what about native build script generation for other platforms?\n> autotools can only generate makefiles (with at least two intermediate code\n> generation steps), which is quite limited.\n>\n> This would be true if gmake didn't build/run basically everywhere; but, it\n> does.\n>\n\nIt doesn't for the native build systems on at least Windows and OSX. Yes,\nyou can get gmake to run, but it's a hack.\n\n\n> I would say that's actually a mark against cmake. If you need a gui to\n> select build options because your cli doesn't have proper help output\n> something is wrong.\n>\n\nYou don't need to use the UI. It's just a convenience. Command line can\nsimply be used if you want.\n\n\n> If you're willing to setup and maintain a cmake build environment I\n> wouldn't say it should be rejected outright. Speculating about it without an\n> implementation to compare seems like a waste of time.\n>\n\nAs I said in my opening post, there *is* a cmake build system implemented\nfor bitcoin.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/8f59554f/attachment.html>", "summary": "Discussion about using autotools vs cmake for native build script generation, with some disagreement about the limitations and convenience of each."}, {"author": "Luke-Jr", "date": "2011-07-02T18:12:18", "message_text_only": "On Saturday, July 02, 2011 2:03:49 PM John Smith wrote:\n> As I said in my opening post, there *is* a cmake build system implemented\n> for bitcoin.\n\npuddinpop's stuff is all ancient/obsolete. If you want people to consider it, \nyou should probably make a new branch.", "summary": "John Smith confirms the existence of a cmake build system for Bitcoin and suggests creating a new branch for outdated puddinpop's stuff."}], "thread_summary": {"title": "Reconsider build system change?", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Jeff Garzik", "Douglas Huff", "Matt Corallo", "Pieter Wuille"], "messages_count": 15, "total_messages_chars_count": 15925, "convo_summary": "The debate between using CMake or Autotools as a build system for Bitcoin's codebase is ongoing. John Smith argues that CMake is better due to its cross-platform support, clearer syntax, and faster speed. However, others like Douglas Huff and Pieter Wuille prefer Autotools as it is more standard and easier to package. There is also discussion about the limitations and convenience of each system."}}, {"title": "[Bitcoin-development]  Reconsider build system change?", "thread_messages": [{"author": "John Smith", "date": "2011-07-02T17:31:54", "message_text_only": "On Sat, Jul 2, 2011 at 5:05 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n\n> Cmake is just as bad as autotools, just with a different syntax and more\n> \"buzz\" behind it right this second. I don't see any advantage to it over\n> autotools unless you're not familiar with either and even then I wouldn't\n> really call it an advantage. It's just different.\n>\n\nSo, what about native build script generation for other platforms? autotools\ncan only generate makefiles (with at least two intermediate code generation\nsteps), which is quite limited.\n\nIMO cmake is simple and elegant compared to the autotools monster. I don't\nsee why it would be \"just as bad\". And I have quite some experience with\nboth systems. Autotools is a hell to debug. cmake certainly isn't perfect,\nbut at least it's a leap forward.\n\nIt also requires a dependency that isn't installed by default anywhere, as\n> already mentioned, and is less known outside of some obscure qt/kde circles\n> and so finding people who are familiar with it and are willing to maintain\n> it is more difficult.\n>\n\nYes, apart from that only obscure projects such as LLVM,  Blender, and\nOpenCV are using it. Nothing of any importance.\n\nBTW for cmake there is \"ccmake\" which is even better than configure --help\nas it offers an interactive interface for configuration.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/efd3c1e5/attachment.html>", "summary": "A debate on the advantages of Cmake over autotools for native build script generation, with some arguing that Cmake is simpler and more elegant, while others point out its dependency and limited usage."}], "thread_summary": {"title": "Reconsider build system change?", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 1499}}, {"title": "[Bitcoin-development] Bitcoin v0.3.24 release candidate available", "thread_messages": [{"author": "Jeff Garzik", "date": "2011-07-03T03:09:11", "message_text_only": "Bitcoin v0.3.24 release candidate #1 is now available for download at\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/test/\n\nThis is another bug fix release.  We had hoped to have wallet\nencryption ready for release, but more urgent fixes for existing\nclients were needed.  Wallet encryption is ready for testing at\nhttps://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and\n-hopefully- will follow shortly in the next release, v0.4.\n\nNotable fixes in v0.3.24:\n\nF1) Block downloads were failing or taking unreasonable amounts of\ntime to complete, because the increased size of the block chain was\nbumping up against some earlier buffer-size DoS limits.\nF2) Fix crash caused by loss/lack of network connection.\n\nNotable changes in v0.3.24:\nC1) DNS seeding enabled by default.\nC2) UPNP enabled by default in the GUI client.  The percentage of\nbitcoin clients that accept incoming connections is quite small, and\nthat is a problem.  This should help.  bitcoind, and unofficial\nbuilds, are unchanged (though we encourage use of \"-upnp\" to help the\nnetwork!)\nC3) Initial unit testing framework.  Bitcoin sorely needs automated\ntests, and this is a beginning.  Contributions welcome.\nC4) Internal wallet code cleanup.  While invisible to an end user,\nthis change provides the basis for v0.4's wallet encryption.\n\nFull changelog (\"git shortlog v0.3.23..\"):\n\nDawid Spiechowicz (1):\n      added polish translation\n\nDoug Huff (1):\n      Add OSX App bundle and correct build instructions to reflect reality.\n\nEric Hosmer (3):\n      Updated Visual C++ makefile.\n      Further updated Visual C++ makefile.\n      Add keystore.h to makefile.vs's header list.\n\nGavin Andresen (1):\n      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b\n\nGiel van Schijndel (2):\n      rpc server: send '403 Forbidden' to rejected clients\n      rpc: don't send 403 when using SSL to prevent DoS\n\nHan Lin Yap (3):\n      Double check translation and improved a translation string\n      Update swedish translation\n      Consistent Bitcoin example address\n\nJames Burkle (1):\n      Edited init.cpp to include a check that -datadir exists\n\nJeff Garzik (6):\n      FormatFullVersion: build fix related to recent translation improvement\n      doc/release-process.txt: minor updates\n      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t\n      Enable DNS seeding by default.\n      Bump version to 0.3.24.\n      Bump OSX version to 0.3.24 (missed in previous commit)\n\nJoerie de Gram (1):\n      Fix connection failure debug output\n\nJordan Lewis (8):\n      Only include irc.h when needed\n      Only include db.h when we have to.\n      Only included rpc.h when necessary\n      Only include net.h when we have to\n      Only include init.h when we have to\n      Only include strlcpy.h when we have to\n      Remove some globally unused headers from headers.h\n      Only include certain boost headers if necessary.\n\nMatt Corallo (5):\n      Update translations and remove obsolete translations.\n      Add new DNSSeed dnsseed.bluematt.me.\n      Only use dnsseeds and static seeds when not on testnet.\n      Make UPnP default on Bitcoin but not on Bitcoind.\n      Give more detailed error messages for connection failure.\n\nPieter Wuille (5):\n      move wallet code to separate file\n      CWallet class\n      Bugfixes walletclass\n      Fix segfault when creating new wallet\n      Limit response to getblocks to half of output buffer size\n\nShane Wegner (1):\n      Fix missing includes needed for Boost 1.46.\n\nSt\u00e9phane Gimenez (1):\n      Fix AddressBook syncrhonization between a CWallet and CWalletDB\n\nWladimir J. van der Laan (1):\n      add GetTotalBlocksEstimate() function, move magic number to constant\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n5340ee00a777e5b87a0d742ea931760916a1fac4  bitcoin-0.3.24rc1-linux.tar.gz\nf7f941a4fc33da7225262ccaad6147352dd2b342  bitcoin-0.3.24rc1-src.tar.gz\nefcdf578bb60a056c43f8dd40505461ea7d7c930  bitcoin-0.3.24rc1-win32-setup.exe\n0b2560b3facba4301562441f6b8dea9eb2249d77  bitcoin-0.3.24rc1-win32.zip\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQIVAwUBTg/c7Nodwg8tvwyoAQIptA/+M4fSPxk994B2+CeVGX3lt0MzxQpaNpJN\nelZjgf2E7gp6sBFxkDGeL2ZtWl9Txswco8UzrehVCY8ne7Q2FrBWgXs6wibwLlWb\nLa0ll2rA8iGysyJPgd9exaN97Etq/onBjxDYHmlKYLeH/VFdIj3LfO2CWPBGRayD\nQqQzT59glNqObLN81Bnj0nHChZS682ycsgT+iGppCeynz5URhxO0IZ3FCj0PFnW1\njbUki5gTCgiuDth7ADymfd/lqN3LeZJYppd9BzjrSSUTujwvhyPUppfUMoYV8Tm+\nTg/zskTRiYcTxE182lmTYH1vKGSV8AQ5wT0JkB/HbhXqMRJgMr5Fly8tJqYKKeg9\nXQvP2l0flcsUuzCecFiYeltc74P4dSe04EzYStavfYYdrW6ftkWk08yfeLb7owOI\naPgXGJkUTsWIu/Ld4GrvdXtlSeuowXkjhdjiKTgBzKuWl8KGOLVSFLmFz24LBYjK\nFUxLmc1S2p71kQ2Aq+t97WhA7FKpLbf2TmHAv2KobujWDCIzJ96duGbvZpg1bYNy\nNp58E31x2gGTJ7Wswddhs0ZSnIcEvZ5U6bohlpzPTKXLUxEFtg1ERoYWt/htjTCV\nDKV2I6VpBww2U9atOiIe93+O6f9aYDro9HQXsLeyFHbgx//2fiuHzsvWwIoey/k4\nzeUIPUe5TQk=\n=O8dr\n-----END PGP SIGNATURE-----", "summary": "Bitcoin v0.3.24 release candidate #1 is available for download, featuring bug fixes and notable changes such as DNS seeding enabled by default."}, {"author": "Jeff Garzik", "date": "2011-07-06T20:05:01", "message_text_only": "Bitcoin 0.3.24rc3 has been uploaded.\n\nFixes appeared after -rc2 was tagged, so we just skipped straight to -rc3.\n\nMaybe final release on Friday?\n\nChanges since 0.3.24rc1:\n\nGavin Andresen (2):\n      Block-chain lock-in at 134444\n      Do not use comma as thousands separator     Using the comma as thousands s\n\nMatt Corallo (3):\n      Added a couple minor things to match newer build process.\n      Revert \"Make UPnP default on Bitcoin but not on Bitcoind.\"\n      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)\n\nPieter Wuille (1):\n      Fix synchronization of default key\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\ndec9ff63fe6d0cffb2abc723281a4135c22f19ef  bitcoin-0.3.24rc3-linux.tar.gz\nc171c6e5128d570d5d7d5a6896b672fcab778933  bitcoin-0.3.24rc3-src.tar.gz\nd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24rc3-win32-setup.exe\n0653302ac7f8b052d58667ae30da53c4f6230be5  bitcoin-0.3.24rc3-win32.zip\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQIVAwUBThS+Xdodwg8tvwyoAQINthAAqxOnungGYS1o7IB3D3M1NRPD/O/WNoB4\nANIn+oZLYy5+0yZylckT/gbkPY3PkhsIE8hVqbxGDYaDzUpjwN+DLd+EMPg5/2vr\nTp2b77Lzh6QszZzZhrs9LPLsB8Q/jzCAbbChAekkAAe4sGm0MFkxMEYaXE+RF/uj\nPX36hdtmWYMzeXwf3PtbI8rAE9ESwXVVF8B7/qFvDhy4lrbXaNnGb3hGyowrNVBM\nm1s4jyk/Lq5pPcoKlRN6kiujCbZBIy6VKgc74YaoMOrznHryoeYQVCg4tySfKkuG\ngfiZFEL6EwYeY8ipjcRBVLFGxbwzCbIhBcBO/Je2yC+EwAOplfyy+GBE3rXLuUkn\nAzMiL1i5nX6dNmkYqVE0+pbv81FeT+uc1i63CIjquLdVbxh3omdpYdYHs9q/zN/9\ngeHU4WnpwwZhTFEclzZUOGo8IJ0wiNsTyQv9mwVEjoslnubXh4omqbW7Tpm7cXiP\njlDZ42Ay+Z+AvafdLYP27vfjWJoMbjcu6qU2EXBOhmpkeaIcV43oEAd7suy0OLUq\n8iNMpQHjlLnH0pcN8r38Tq+vuCuhPZtiPZd5dVKSF3PaCB6vAv8MulE0yhP2LEq3\nQ4MzxSlgGNEWCGIv19YfMnURxGMNMKB0cyQ8SMdLDR+IIB3NB5SreeG8c8P97s5p\nVnHOvTnpHyw=\n=vKTJ\n-----END PGP SIGNATURE-----\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Bitcoin 0.3.24rc3 has been released, with fixes since -rc2. Final release may be on Friday. Changes include UPnP enabled by default on Bitcoin."}, {"author": "Mike Hearn", "date": "2011-07-08T09:41:02", "message_text_only": "A quick release would be good. The network is getting really sick:\n\n   http://forum.bitcoin.org/index.php?topic=26894.40\n\nI brought up the latest rc3 on plan99.net.\n\nThough it's not relevant for this release, there seems to be some kind\nof shutdown issue. I did a \"bitcoin stop\" and then waited for the log\nto indicate successful shutdown. But the parent process didn't quit,\nleaving a zombie. I did a kill -9 on the parent to get rid of it, and\nthen the addr.dat file became corrupted. I had to remove it and the\n\"database\" directory as running the db_recover command didn't work.\n\nOn Wed, Jul 6, 2011 at 10:05 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> Bitcoin 0.3.24rc3 has been uploaded.\n>\n> Fixes appeared after -rc2 was tagged, so we just skipped straight to -rc3.\n>\n> Maybe final release on Friday?\n>\n> Changes since 0.3.24rc1:\n>\n> Gavin Andresen (2):\n> \u00a0 \u00a0 \u00a0Block-chain lock-in at 134444\n> \u00a0 \u00a0 \u00a0Do not use comma as thousands separator \u00a0 \u00a0 Using the comma as thousands s\n>\n> Matt Corallo (3):\n> \u00a0 \u00a0 \u00a0Added a couple minor things to match newer build process.\n> \u00a0 \u00a0 \u00a0Revert \"Make UPnP default on Bitcoin but not on Bitcoind.\"\n> \u00a0 \u00a0 \u00a0Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)\n>\n> Pieter Wuille (1):\n> \u00a0 \u00a0 \u00a0Fix synchronization of default key\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> dec9ff63fe6d0cffb2abc723281a4135c22f19ef \u00a0bitcoin-0.3.24rc3-linux.tar.gz\n> c171c6e5128d570d5d7d5a6896b672fcab778933 \u00a0bitcoin-0.3.24rc3-src.tar.gz\n> d4b5425eff673551a326d5326b92a06359dc1a3d \u00a0bitcoin-0.3.24rc3-win32-setup.exe\n> 0653302ac7f8b052d58667ae30da53c4f6230be5 \u00a0bitcoin-0.3.24rc3-win32.zip\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.11 (GNU/Linux)\n>\n> iQIVAwUBThS+Xdodwg8tvwyoAQINthAAqxOnungGYS1o7IB3D3M1NRPD/O/WNoB4\n> ANIn+oZLYy5+0yZylckT/gbkPY3PkhsIE8hVqbxGDYaDzUpjwN+DLd+EMPg5/2vr\n> Tp2b77Lzh6QszZzZhrs9LPLsB8Q/jzCAbbChAekkAAe4sGm0MFkxMEYaXE+RF/uj\n> PX36hdtmWYMzeXwf3PtbI8rAE9ESwXVVF8B7/qFvDhy4lrbXaNnGb3hGyowrNVBM\n> m1s4jyk/Lq5pPcoKlRN6kiujCbZBIy6VKgc74YaoMOrznHryoeYQVCg4tySfKkuG\n> gfiZFEL6EwYeY8ipjcRBVLFGxbwzCbIhBcBO/Je2yC+EwAOplfyy+GBE3rXLuUkn\n> AzMiL1i5nX6dNmkYqVE0+pbv81FeT+uc1i63CIjquLdVbxh3omdpYdYHs9q/zN/9\n> geHU4WnpwwZhTFEclzZUOGo8IJ0wiNsTyQv9mwVEjoslnubXh4omqbW7Tpm7cXiP\n> jlDZ42Ay+Z+AvafdLYP27vfjWJoMbjcu6qU2EXBOhmpkeaIcV43oEAd7suy0OLUq\n> 8iNMpQHjlLnH0pcN8r38Tq+vuCuhPZtiPZd5dVKSF3PaCB6vAv8MulE0yhP2LEq3\n> Q4MzxSlgGNEWCGIv19YfMnURxGMNMKB0cyQ8SMdLDR+IIB3NB5SreeG8c8P97s5p\n> VnHOvTnpHyw=\n> =vKTJ\n> -----END PGP SIGNATURE-----\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security\n> threats, fraudulent activity, and more. Splunk takes this data and makes\n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Bitcoin 0.3.24rc3 has been uploaded with fixes, but there are reports of a shutdown issue and corrupted files. Final release expected soon."}], "thread_summary": {"title": "Bitcoin v0.3.24 release candidate available", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Mike Hearn"], "messages_count": 3, "total_messages_chars_count": 9848, "convo_summary": "Bitcoin v0.3.24 release candidate #1 and #3 are available for download, with notable changes such as DNS seeding and UPnP enabled by default. Fixes have been made, but there are reports of a shutdown issue and corrupted files. Final release expected soon."}}, {"title": "[Bitcoin-development] Speeding up \"getbalance <account>\" calls", "thread_messages": [{"author": "Jan Vornberger", "date": "2011-07-03T16:29:05", "message_text_only": "Hey!\n\nJohn Smith wrote:\n> I think the easiest way to speed this up would be to scan the wallet every\n> time a block comes in or something else changes in the block chain (or, if\n> you prefer, some pre-set interval of N minutes). Then go over the entire\n> wallet and the accumulate balances for all accounts. This could be done in\n> amortized linear time using a hash_map.\n\nThat was a good suggestion - thanks! I implemented it along these lines\nand now the Instawallet server can breath again. Well, more or less at\nleast, as now \"sendfrom\" starts acting up and I have to look into that\nnext.\n\nHere is a branch with the code for the cache:\nhttps://github.com/javgh/bitcoin/tree/balancecache . It's currently based\non a somewhat old version of the codebase as I'm running with a number of\nother modifications. So it won't easily apply to something newer. I hope\nto be able to switch to a recent version at some point (mostly hoping for\nsome improvements in the fee handling area before I do that) and then I\ncan hopefully provide a cleaner version of this patch. For now, I just\ndocument it here for anyone who might need this as well and can piece it\ntogether themselves (I attached a patch file).\n\nBasically I create a list of all account balances every time a new a new\nblock comes in or a transaction that affects my wallet appears. The list\nis stored in a \"map\" right now. This seems fast enough for me. I didn't\nuse a hash map for now, because I'm fairly new to C++ and was a little\nconfused on what to use (is there a \"standard\" hash map to use in the STL?\nor do people use boost or what?). But my VPS is low on memory anyway, so I\nguess that's kind of a justification as well to go for a tree-based\nimplementation of map.\n\nCheers!\nJan\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: balancecache.patch\nType: text/x-patch\nSize: 8184 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110703/16ead949/attachment.bin>", "summary": "Jan implemented a balance cache to speed up the Instawallet server, using a list of all account balances stored in a map."}, {"author": "jan at uos.de", "date": "2011-07-04T11:40:28", "message_text_only": "Another quick update:\n\nOn Sun, Jul 03, 2011 at 06:29:05PM +0200, Jan Vornberger wrote:\n> as now \"sendfrom\" starts acting up and I have to look into that\n> next.\n\nI realized why this happens: Sendfrom triggers a rebuild of the cache\nand couldn't return before the rebuild was complete.\n\nSo I changed the approach slightly: A complete rebuild of the cache will\nonly happen on new blocks (in case reorgs happen) whereas on new wallet\ntransactions the cache will just be adjusted incrementally. Seems to\nwork fine so far (every 4000 calls or so I double check the cache by\nrunning a full calculation and compare the results. No mismatch happened\nso far). The changes are pushed to the github branch I linked to.\n\nOne caveat I realized: The cache will not work correctly with the RPC\ncommand \"move\" as I haven't implemented the necessary adjustments.\nShouldn't be too difficult, but since I don't use that command, I\nhaven't done this (yet).\n\nRegards!\nJan", "summary": "Jan Vornberger updated that he fixed the issue with \"sendfrom\" by changing the cache rebuild approach, and pushed the changes to the Github branch."}], "thread_summary": {"title": "Speeding up \"getbalance <account>\" calls", "categories": ["Bitcoin-development"], "authors": ["Jan Vornberger", "jan at uos.de"], "messages_count": 2, "total_messages_chars_count": 2957, "convo_summary": "Jan Vornberger improved the Instawallet server's speed by implementing a balance cache. He also fixed the \"sendfrom\" issue by changing the cache rebuild approach and updated the Github branch."}}, {"title": "[Bitcoin-development] Encrypted Wallet Backward Compatibility", "thread_messages": [{"author": "Matt Corallo", "date": "2011-07-04T17:52:53", "message_text_only": "joric rightly points out that there are currently backward-compatibility\nissues with Wallet encryption. As it stands now:\nIn version 0.3.23, Bitcoin dies with \"ReserveKeyFromKeyPool() : unknown\nkey in key pool\" after writing one unencrypted private key to the\n(otherwise) encrypted wallet.\nIn version 0.3.22 (and I'd assume prior versions as well), Bitcoin opens\nfine and displays transactions, however shows a total balance of what is\nhelp only in unencrypted keys (of which it also writes a minimum of one\nbefore opening), and each transaction shows only confirmation count,\ndate, no description, and a debit/credit of 0.00.  When you try to\nperform any action which attempts to read keypool, you get the\n\"ReserveKeyFromKeyPool() : unknown key in key pool\" error.\n\nSo, the question is how best to work around Bitcoin's overwillingness to\nload wallets with keys that it has no clue about.\n\nThere were several suggestions of renaming wallet.dat for encrypted\nwallets.  Obviously this has many advantages and disadvantages.  It\nbreaks backup scripts, old clients will now create a new wallet instead\nof using the old one, potentially causing users to (wrongfully) assume\ntheir wallet is encrypted if they accidentally start opening an old\nversion.  Im not a huge fan of this one, mostly because if a user opens\nan old version, they will get a blank transactionless wallet which IMO\nis worse than an odd error message.  \"My wallet is gone, Ive lost\neverything, wtf???\" vs \"My wallet got corrupted, crap need see what I\ncan recover from it, I hope I dont lose much\"\n\nAnother option is to simply do nothing, and let old clients get mad.  If\na user goes back to an old client, it cant spend coins using the\nencrypted keys no matter what is done.  If the new client handles\nmultiple key types gracefully, however, it can simply say \"Hey, I see\nyou have a mix of key types here, can I have your password to encrypt\nthe unencrypted ones?\" and move on with no harm done.  IMO, I would much\nprefer old users see error messages and be unable to use their wallet,\nthen accidentally create multiple wallets, and give them a screen making\nthem think their coins are all gone.  Comments?\n\nPS. to prevent this in the future, Bitcoin really shouldn't continue on\nas if nothing had happened when faced with unknown keys:\nhttps://github.com/bitcoin/bitcoin/pull/378\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/8cb262e3/attachment.sig>", "summary": "Bitcoin has backward-compatibility issues with wallet encryption, causing errors when attempting to read keypool, and suggestions for workarounds."}, {"author": "Luke-Jr", "date": "2011-07-04T18:20:07", "message_text_only": "On Monday, July 04, 2011 1:52:53 PM Matt Corallo wrote:\n> There were several suggestions of renaming wallet.dat for encrypted\n> wallets.  Obviously this has many advantages and disadvantages.  It\n> breaks backup scripts,\n\nIt shouldn't. Backup scripts should make a copy with the JSON-RPC call.\n\nWhat about changing the format of wallet.dat to something that triggers an \nerror in the old clients? ie, maybe a dummy crafted-to-make-old-versions-\ncomplain file that simply means \"use ewallet.dat\"?", "summary": "Renaming wallet.dat for encrypted wallets has pros and cons, including breaking backup scripts. Changing the format could trigger errors in old clients."}, {"author": "Gavin Andresen", "date": "2011-07-04T18:23:53", "message_text_only": "RE: \"You have some unencrypted keys, should I encrypt them for you?\"\n\nThat re-opens an \"attacker packs the keypool with keypairs that they\nknow about\" (if I can read/write wallet.dat, then I can delete\nencrypted keypool keys and insert a bunch of unencrypted keypool keys\nthat I know how to spend, and rely on the user to click \"OK\" because\nusers are trained to just click \"OK\").\n\nRE: breaking backup scripts:  if they use the backupwallet  RPC\ncommand, then they will Just Work.\n\n0.4 and later could, on wallet encryption, create a wallet_e.dat\n(encrypted wallet).  Then truncate wallet.dat and set its\nfile-permissions to 000, so if old versions of bitcoin OR any dumb\nwallet backup scripts try to read it they fail.\n\nRE: future-proofing: wallet.dat contains nFileVersion (version of\nbitcoin that last wrote the wallet).  Adding a nMinVersion that\nspecifies \"you must be at least THIS version to read this file\" seems\nlike a good idea so if you have version 0.4 or later future wallet\nupgrades give you a reasonable message if you try to downgrade after\nan incompatible change.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests encrypting unencrypted keys to prevent attackers from accessing them and recommends creating an encrypted wallet to protect against backup script failures. He also proposes adding a minimum version requirement to future-proof wallet upgrades."}, {"author": "Matt Corallo", "date": "2011-07-04T20:39:32", "message_text_only": "For some reason my mail client let me respond off-list here, didnt mean\nto...\n\nOn Mon, 2011-07-04 at 14:23 -0400, Gavin Andresen wrote:\n> RE: \"You have some unencrypted keys, should I encrypt them for you?\"\n> \n> That re-opens an \"attacker packs the keypool with keypairs that they\n> know about\" (if I can read/write wallet.dat, then I can delete\n> encrypted keypool keys and insert a bunch of unencrypted keypool keys\n> that I know how to spend, and rely on the user to click \"OK\" because\n> users are trained to just click \"OK\").\nNot strictly true, if the keys are loaded, but not added to\nmapAddressBook or setKeyPool, they wont be used for any new\ntransactions, or shown to the user, but the user is still able to\nreceive Bitcoins to those keys.\n> RE: breaking backup scripts:  if they use the backupwallet  RPC\n> command, then they will Just Work.\nNot really, most backupwallet-based scripts will backup wallet.dat,\nencrypt wallet.dat, upload wallet.dat.  Now it backups up wallet.dat and\nthe encrypt part fails because there is no wallet.dat, only\nwallet_e.dat.  If we rename to wallet.dat on output, now the user's\nrestore might not work...\n> \n> 0.4 and later could, on wallet encryption, create a wallet_e.dat\n> (encrypted wallet).  Then truncate wallet.dat and set its\n> file-permissions to 000, so if old versions of bitcoin OR any dumb\n> wallet backup scripts try to read it they fail.\nTrue, but that is only a solution for Linux and Mac and then you are\nback to unreadable error on Windows load and other unforeseeable errors\nfor odd scripts.\n\nI suppose I just really dont like the idea of renaming wallet.dat,\neverything knows the filename and is used to it.\n> \n> RE: future-proofing: wallet.dat contains nFileVersion (version of\n> bitcoin that last wrote the wallet).  Adding a nMinVersion that\n> specifies \"you must be at least THIS version to read this file\" seems\n> like a good idea so if you have version 0.4 or later future wallet\n> upgrades give you a reasonable message if you try to downgrade after\n> an incompatible change.\nYep, just something simple that says, no reading this to old versions is\nneeded, IMO the older version should freak out if it sees keys that it\ndoesn't know about (as it could also indicate wallet corruption in some\nrare cases), but nMinVersion works just as well, in any case this should\nonly very rarely be a problem...how often will we change the wallet\nformat?\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/65711d4e/attachment.sig>", "summary": "Discussion on potential vulnerabilities in Bitcoin wallet.dat file, including the possibility of attackers inserting unencrypted keypool keys. Suggestions for future-proofing the file."}, {"author": "Matt Corallo", "date": "2011-07-05T01:10:39", "message_text_only": "Despite this being quick, I really want to get 0.3.24 out and rolling so\nthat we have us much lead time on 0.4 as possible so that any solution\nto this problem that is better in 0.3.24 can be in as many hands as\npossible, and so that the network issues can be resolved.\n\nAll that needs to happen for that is to agree on either\nhttps://github.com/bitcoin/bitcoin/pull/378 or\nhttps://github.com/bitcoin/bitcoin/pull/381 thus, I would ask that we\nget acks on those and then continue this discussion.  Frankly, I prefer\n378 as it is simpler and means that you dont have to keep track of what\nfeatures you have or have not used in a wallet, but instead just write\nand let the keys take care of themselves.  However, I'm game for either,\nI just want to get 0.3.24 out the door ASAP (ie preferably rc2 tomorrow\nand release by the end of the week).\n\nMatt\n\nOn Mon, 2011-07-04 at 22:39 +0200, Matt Corallo wrote:\n> For some reason my mail client let me respond off-list here, didnt mean\n> to...\n> \n> On Mon, 2011-07-04 at 14:23 -0400, Gavin Andresen wrote:\n> > RE: \"You have some unencrypted keys, should I encrypt them for you?\"\n> > \n> > That re-opens an \"attacker packs the keypool with keypairs that they\n> > know about\" (if I can read/write wallet.dat, then I can delete\n> > encrypted keypool keys and insert a bunch of unencrypted keypool keys\n> > that I know how to spend, and rely on the user to click \"OK\" because\n> > users are trained to just click \"OK\").\n> Not strictly true, if the keys are loaded, but not added to\n> mapAddressBook or setKeyPool, they wont be used for any new\n> transactions, or shown to the user, but the user is still able to\n> receive Bitcoins to those keys.\n> > RE: breaking backup scripts:  if they use the backupwallet  RPC\n> > command, then they will Just Work.\n> Not really, most backupwallet-based scripts will backup wallet.dat,\n> encrypt wallet.dat, upload wallet.dat.  Now it backups up wallet.dat and\n> the encrypt part fails because there is no wallet.dat, only\n> wallet_e.dat.  If we rename to wallet.dat on output, now the user's\n> restore might not work...\n> > \n> > 0.4 and later could, on wallet encryption, create a wallet_e.dat\n> > (encrypted wallet).  Then truncate wallet.dat and set its\n> > file-permissions to 000, so if old versions of bitcoin OR any dumb\n> > wallet backup scripts try to read it they fail.\n> True, but that is only a solution for Linux and Mac and then you are\n> back to unreadable error on Windows load and other unforeseeable errors\n> for odd scripts.\n> \n> I suppose I just really dont like the idea of renaming wallet.dat,\n> everything knows the filename and is used to it.\n> > \n> > RE: future-proofing: wallet.dat contains nFileVersion (version of\n> > bitcoin that last wrote the wallet).  Adding a nMinVersion that\n> > specifies \"you must be at least THIS version to read this file\" seems\n> > like a good idea so if you have version 0.4 or later future wallet\n> > upgrades give you a reasonable message if you try to downgrade after\n> > an incompatible change.\n> Yep, just something simple that says, no reading this to old versions is\n> needed, IMO the older version should freak out if it sees keys that it\n> doesn't know about (as it could also indicate wallet corruption in some\n> rare cases), but nMinVersion works just as well, in any case this should\n> only very rarely be a problem...how often will we change the wallet\n> format?\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110705/888d271e/attachment.sig>", "summary": "Matt Corallo wants to release version 0.3.24 of Bitcoin as soon as possible, and is asking for agreement on two possible solutions to a problem."}, {"author": "Gavin Andresen", "date": "2011-07-05T02:26:17", "message_text_only": "> Despite this being quick, I really want to get 0.3.24 out and rolling so\n> that we have us much lead time on 0.4 as possible\n\nAgreed.\n\n> All that needs to happen for that is to agree on either\n> https://github.com/bitcoin/bitcoin/pull/378 or\n> https://github.com/bitcoin/bitcoin/pull/381'\n\nI don't think 0.3.24 \"needs\" either of those pulls.  Fixing\ndowngrade-to-0.3.24 is low on the priority list, because\ndowngrade-to-something-before-0.3.24 is just about as likely, and that\nhas to do something mostly reasonable.\n\nI just pulled https://github.com/bitcoin/bitcoin/pull/379 \"Do not use\ncomma as thousands separator\", and pulled a block-chain lock-in at\nblock 13444.  Those were the only issues I think really need to be in\n0.3.24.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen plans to release version 0.3.24 of Bitcoin to allow more lead time on version 0.4, with only minor changes needed."}, {"author": "Jeff Garzik", "date": "2011-07-05T02:45:38", "message_text_only": "On Mon, Jul 4, 2011 at 10:26 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> All that needs to happen for that is to agree on either\n>> https://github.com/bitcoin/bitcoin/pull/378 or\n>> https://github.com/bitcoin/bitcoin/pull/381'\n>\n> I don't think 0.3.24 \"needs\" either of those pulls. \u00a0Fixing\n> downgrade-to-0.3.24 is low on the priority list, because\n> downgrade-to-something-before-0.3.24 is just about as likely, and that\n> has to do something mostly reasonable.\n\nYeah, same thoughts here.\n\n> I just pulled https://github.com/bitcoin/bitcoin/pull/379 \"Do not use\n> comma as thousands separator\", and pulled a block-chain lock-in at\n> block 13444. \u00a0Those were the only issues I think really need to be in\n> 0.3.24.\n\nTagged -tip as -rc2.\n\nBug reports are mostly quiet, so maybe we can even get the release\nbefore you leave.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Discussion about the priority of fixing downgrade-to-0.3.24 in Bitcoin software, with a suggestion to agree on a specific pull request."}, {"author": "Matt Corallo", "date": "2011-07-10T14:21:17", "message_text_only": "At Luke's suggestion, I did a bit more digging and was able to find a\ndata structure in wallet settings that should cause all versions (well\nall versions since Bitcoin was in github, and probably before then) to\ncrash on load instead of making a new wallet or opening in some bizarre\nhalf-state.  I just put an empty object in addrIncoming (nfc what it was\nused for, but it will get the desire effect and it isnt used anywhere in\nthe code aside from its definition).\nYou can see the commit at\nhttps://github.com/TheBlueMatt/bitcoin/commit/2e8383469d7e12a495b3a1dbd41a8d211ff34fe8\nDoes anyone disagree and think a different solution would work better?\n\nThis resolves all known issues and suggestions that I know of on newenc\nexcept for the invalid mlock calculations, which I will go fix right\nnow.  So...aside from that bug does anyone have any remaining\nsuggestions/blockers on newenc and, if not, can we get final ACKs on it?\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/58c68c99/attachment.sig>", "summary": "A data structure in wallet settings has been found that should cause all versions to crash on load, resolving known issues on newenc."}, {"author": "Pieter Wuille", "date": "2011-07-10T19:10:07", "message_text_only": "On Sun, Jul 10, 2011 at 04:21:17PM +0200, Matt Corallo wrote:\n> \n> At Luke's suggestion, I did a bit more digging and was able to find a\n> data structure in wallet settings that should cause all versions (well\n> all versions since Bitcoin was in github, and probably before then) to\n> crash on load instead of making a new wallet or opening in some bizarre\n> half-state.  I just put an empty object in addrIncoming (nfc what it was\n> used for, but it will get the desire effect and it isnt used anywhere in\n> the code aside from its definition).\n> You can see the commit at\n> https://github.com/TheBlueMatt/bitcoin/commit/2e8383469d7e12a495b3a1dbd41a8d211ff34fe8\n> Does anyone disagree and think a different solution would work better?\n\nThough giving an mostly incomprehensible/unrelated error is never nice to\nthe user, i believe it's better than creating an empty wallet and letting\nthe user wonder where his wallet went. This way, we fail soon and don't\never get a corrupt wallet.\n\n> This resolves all known issues and suggestions that I know of on newenc\n> except for the invalid mlock calculations, which I will go fix right\n> now.  So...aside from that bug does anyone have any remaining\n> suggestions/blockers on newenc and, if not, can we get final ACKs on it?\n\nACK on newenc, and thanks for all the work you put in it already.\n\n-- \nPieter", "summary": "A data structure in wallet settings has been found that causes all versions of Bitcoin to crash on load, but a fix has been implemented."}, {"author": "Matt Corallo", "date": "2011-07-05T11:03:15", "message_text_only": "On Mon, 2011-07-04 at 22:26 -0400, Gavin Andresen wrote:\n> I don't think 0.3.24 \"needs\" either of those pulls.  Fixing\n> downgrade-to-0.3.24 is low on the priority list, because\n> downgrade-to-something-before-0.3.24 is just about as likely, and that\n> has to do something mostly reasonable.\nReally, well I disagree but OK, 0.3.24 it is.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110705/aa373173/attachment.sig>", "summary": "Gavin Andresen disagrees that 0.3.24 needs certain pulls, stating that fixing downgrade-to-0.3.24 is low on the priority list."}, {"author": "Gregory Maxwell", "date": "2011-07-04T20:59:07", "message_text_only": "On Mon, Jul 4, 2011 at 2:23 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> 0.4 and later could, on wallet encryption, create a wallet_e.dat\n> (encrypted wallet). \u00a0Then truncate wallet.dat and set its\n> file-permissions to 000, so if old versions of bitcoin OR any dumb\n> wallet backup scripts try to read it they fail.\n[snip]\n\nRewriting the old one before erasing it and replacing it with a\nplaceholder might increase the chances that the old unencrypted keying\nmaterial was not left on disk.", "summary": "A new feature in Bitcoin 0.4 allows for the creation of an encrypted wallet, which can replace the old unencrypted keying material."}, {"author": "Douglas Huff", "date": "2011-07-04T21:18:36", "message_text_only": "On Jul 4, 2011, at 1:23 PM, Gavin Andresen wrote:\n> RE: breaking backup scripts:  if they use the backupwallet  RPC\n> command, then they will Just Work.\n\nI'd go a step further and say that, since import/export is planned to get merged at about the same time, intentionally breaking unsafe/badly designed backup mechanisms is actually desirable.\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/a85cd314/attachment.sig>", "summary": "Breaking unsafe backup mechanisms is desirable as import/export is planned to be merged, and backupwallet RPC command will still work."}, {"author": "Gregory Maxwell", "date": "2011-07-04T22:30:12", "message_text_only": "On Mon, Jul 4, 2011 at 5:18 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n>\n> On Jul 4, 2011, at 1:23 PM, Gavin Andresen wrote:\n>> RE: breaking backup scripts: \u00a0if they use the backupwallet \u00a0RPC\n>> command, then they will Just Work.\n>\n> I'd go a step further and say that, since import/export is planned to get merged at about the same time, intentionally breaking unsafe/badly designed backup mechanisms is actually desirable.\n\nSilently breaking them, not so much.\n\nOr do you think people are going to notice that they've started\nbacking up a zero byte file?", "summary": "Breaking unsafe backup mechanisms is desirable, but silently breaking them is not. The import/export feature is planned to merge at the same time."}], "thread_summary": {"title": "Encrypted Wallet Backward Compatibility", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "Douglas Huff", "Gregory Maxwell", "Gavin Andresen", "Matt Corallo", "Pieter Wuille"], "messages_count": 13, "total_messages_chars_count": 17244, "convo_summary": "Bitcoin developers discussed potential vulnerabilities in the wallet.dat file and suggested solutions to future-proof it. They also discussed the priority of fixing downgrade-to-0.3.24 in Bitcoin software and the pros and cons of renaming wallet.dat for encrypted wallets. A new feature in Bitcoin 0.4 allows for the creation of an encrypted wallet to replace the old unencrypted keying material. Breaking unsafe backup mechanisms is desirable, but silently breaking them is not."}}, {"title": "[Bitcoin-development] 0.3.24 RC3 Build", "thread_messages": [{"author": "Matt Corallo", "date": "2011-07-06T00:56:35", "message_text_only": "0.3.24 RC3 tar uploaded to http://dl.dropbox.com/u/29653426/Bitcoin%\n200.3.24%20RC3.tar.bz2\n\nI still disagree that 0.3.24 shouldn't handle incompatible wallets\ncleanly, but I digress.\n\nSHA1:\naf85f46201bfffaf38fe4d64f3aa357ac03b51e1 Bitcoin 0.3.24 RC3.tar.bz2\n\nNotes:\ngitian-win32.yml is broken (my fault) just remove the lines\n  cp WSPiApi.h $HOME/build\n  #\nand you should be on the same one as me.\n\nBuild gitian signed and email signed as always,\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110706/5c26037d/attachment.sig>", "summary": "Bitcoin 0.3.24 RC3 tar has been uploaded with SHA1 af85f46201bfffaf38fe4d64f3aa357ac03b51e1, and a broken gitian-win32.yml."}], "thread_summary": {"title": "0.3.24 RC3 Build", "categories": ["Bitcoin-development"], "authors": ["Matt Corallo"], "messages_count": 1, "total_messages_chars_count": 751}}, {"title": "[Bitcoin-development] Suggestion for enhancements to getblock", "thread_messages": [{"author": "Andy Parkins", "date": "2011-07-07T09:49:47", "message_text_only": "Hello,\n\nThis is a suggestion with a mind to the future.  In particular, I'm slowly \nworking on an alternative client and library (I know, everyone says that).  \nI've got a feature that I'd like to have that would need a change in the \nprotocol.  It's a change that I think would improve the official client as \nwell, so I'm bringing it up here.\n\nIt's actually two changes; and both could be acheived by adding new commands \nto the protocol.  I think that would be overkill though; as they fit quite \nnicely into an extended getblocks command.\n\n(1) The getblocks message is a list of inventory items (type MSG_BLOCK) being \nrequested.\n\nImagine this situation though.  I am a light weight client.  I store the block \nheaders only.  I am only interested in the history of my own wallet addresses.  \nI receive a block broadcast with a transaction that sends coins to one of my \naddresses.  That transaction references other transactions (of course), but I \nhaven't stored any transactions.  So; I want to request those transactions and \nensure they are all valid and in blocks.  I can't.\n\nI can request the transactions themselves; but I have no way of finding out \nwhat block they were in without downloading the entire full block chain \nmyself.  The thing is, a peer with the full block chain is able to do this \ninstantly.\n\nHere then is my suggestion:  getblocks should accept inventory items of type \nMSG_TX as well as MSG_BLOCK.  When it finds a MSG_TX request, it shouldn't \nsend the transaction (after all that is what the getdata message is for); \ninstead it should return the block that contains that transaction.  It's an \nalternative way of requesting a block -- by transaction in that block.\n\nIt should be obvious then that it would be easy for a lightweight client to \nrequest the transaction chain transactions its interested in to create a list \nof relevant hashes for the history it's after; and then put those hashes in a \ngetblocks request and have to look only at a few full blocks instead of the \nfull block chain.\n\n\n(2) If you are offline when new transactions are broadcast, there is no way to \nknow they are pending.\n\nTransactions that have been broadcast but not yet accepted into a block are \nnever resent (nor should they be).  But if I am on a mobile client say, or a \nlight-weight, intermittently used client; I have no way of checking if a \ntransaction sending coins to one of my addresses is pending.\n\nIt should be possible to request the current pending transaction list.\n\nMy sugestion then is that a special virtual block request be possible.  The \nall zero block hash can never exist (it's used as the parent for the genesis \nblock, so it had better not).  If I send a getblocks that contains an all-zero \nhash, then the virtual block should be returned in a block message.  That \nvirtual block will list all the current pending transactions.  Obviously there \nwould be a problem that it's actual hash would not be zero; so it would have \nto be marked as the virtual block in some other way (perhaps a zero timestamp \nplus a zero parent hash, or similar).\n\n\n\nThe combination of the above two protocol changes makes it possible for any \nclient to have a large chunk of the facilities available in blockexplorer.com \nand the very useful http://bitcoincharts.com/bitcoin/ information.\n\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "A proposal for two changes to the Bitcoin protocol, including the ability for lightweight clients to request transactions and a virtual block for pending transactions."}, {"author": "Mike Hearn", "date": "2011-07-07T15:42:12", "message_text_only": "On Thu, Jul 7, 2011 at 11:49 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> Imagine this situation though. \u00a0I am a light weight client. \u00a0I store the block\n> headers only. \u00a0I am only interested in the history of my own wallet addresses.\n> I receive a block broadcast with a transaction that sends coins to one of my\n> addresses. \u00a0That transaction references other transactions (of course), but I\n> haven't stored any transactions. \u00a0So; I want to request those transactions and\n> ensure they are all valid and in blocks. \u00a0I can't.\n\nEveryone writing an alternative client goes through this thought\nprocess :-) There's no point in doing it, you cannot prove your\ntransaction is not a double spend. That requires knowledge (ie, an\nindex) of all transactions.\n\nYou have to treat appearing deep in the chain as ipso-facto proof of\nvalidity. Lightweight/SPV clients simply must have that trust, it\ncannot be done any other way. See this article:\n\nhttp://code.google.com/p/bitcoinj/wiki/SecurityModel\n\nCurrently this is pretty safe due to the crazy speeds. In future when\nspeeds are likely to be lower, it will be less safe and you'd have to\nwait longer or use a trusted node.\n\n> It should be possible to request the current pending transaction list.\n\nI think it'd be better to implement the filtering suggestions that\nhave been made. It doesn't scale to download the entire memory pool -\na better approach is to give the remote node a filter to match against\ntransactions then have it only relay those. After setting a filter,\ntransactions pending and matching would be sent in one big inv and you\ncan then keep the connection open to learn about new transactions\nwithout needing to \"drink from the firehose\". Filters can be\nprobabilistic and set on many different nodes to reduce the privacy\nimplications.", "summary": "A lightweight client can't prove a transaction is not a double spend without knowledge of all transactions, but appearing deep in the chain is currently considered safe. Implementing filtering suggestions is a better approach to downloading the entire memory pool."}, {"author": "Andy Parkins", "date": "2011-07-07T16:19:39", "message_text_only": "On 2011 July 07 Thursday, Mike Hearn wrote:\n> On Thu, Jul 7, 2011 at 11:49 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> > Imagine this situation though.  I am a light weight client.  I store the\n> > block headers only.  I am only interested in the history of my own\n> > wallet addresses. I receive a block broadcast with a transaction that\n> > sends coins to one of my addresses.  That transaction references other\n> > transactions (of course), but I haven't stored any transactions.  So; I\n> > want to request those transactions and ensure they are all valid and in\n> > blocks.  I can't.\n> \n> Everyone writing an alternative client goes through this thought\n> process :-) There's no point in doing it, you cannot prove your\n> transaction is not a double spend. That requires knowledge (ie, an\n> index) of all transactions.\n\nAh; you mistake me.  I'm not interested in double spend prevention, in this \ncase I'd be willing to trust the full node to return whatever block it thinks \ncontains that transaction, and that it has already done double spend \nprevention.\n\nWhat I want to be able to do though is calculate a balance for an aribtrary \naddress.  Not every address; just the particular ones that the client is \ninterested in.  It's complete overkill to require the whole block chain just \nto calculate the balance of a few addresses.\n\n> You have to treat appearing deep in the chain as ipso-facto proof of\n> validity. Lightweight/SPV clients simply must have that trust, it\n> cannot be done any other way. See this article:\n\nNot entirely.  If I ask for \"the block that contains transaction with hash \n12345678abcd...\" then when I get that full block, I can verify the merkle tree \nmyself.  I do have to trust that the peer hasn't been adding double spends in, \nbut not that the transaction is actually in the chain.\n\n> > It should be possible to request the current pending transaction list.\n> \n> I think it'd be better to implement the filtering suggestions that\n> have been made. It doesn't scale to download the entire memory pool -\n\nI'm sorry, I've only started watching this list in the last few days.  I'm not \nfamiliar with the filter suggestions.\n\nI'm not entirely sure I see how a filter helps.  If I've been offline for ten \nminutes then I need all the transactions pending in the last ten minutes.  No \namount of filtering makes that list any smaller.\n\n> a better approach is to give the remote node a filter to match against\n> transactions then have it only relay those. After setting a filter,\n> transactions pending and matching would be sent in one big inv and you\n> can then keep the connection open to learn about new transactions\n> without needing to \"drink from the firehose\". Filters can be\n> probabilistic and set on many different nodes to reduce the privacy\n> implications.\n\nThat would be fine.  My reason for suggesting using getblocks was that it \ndidn't introduce a new command.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110707/0c3f8d5e/attachment.sig>", "summary": "A lightweight client only interested in the history of its own wallet addresses cannot request transactions and ensure they are all valid and in blocks."}, {"author": "Mike Hearn", "date": "2011-07-07T16:44:48", "message_text_only": "> What I want to be able to do though is calculate a balance for an aribtrary\n> address. \u00a0Not every address; just the particular ones that the client is\n> interested in. \u00a0It's complete overkill to require the whole block chain just\n> to calculate the balance of a few addresses.\n\nBut what is that for? You said it's for a lightweight client to do\nthat when it receives a transaction, to verify that all the\ndependencies are in blocks recursively. But why?\n\n> Not entirely. \u00a0If I ask for \"the block that contains transaction with hash\n> 12345678abcd...\" then when I get that full block, I can verify the merkle tree\n> myself.\n\nWell, it's more efficient to just verify the merkle branch. But yes.\n\n> I'm not entirely sure I see how a filter helps. \u00a0If I've been offline for ten\n> minutes then I need all the transactions pending in the last ten minutes. \u00a0No\n> amount of filtering makes that list any smaller.\n\nWhy do you need all of them? You just care about the ones sending\ncoins to you, surely?\n\n> That would be fine. \u00a0My reason for suggesting using getblocks was that it\n> didn't introduce a new command.\n\nIMHO it's fine to introduce new commands. They'll just be ignored by\nold clients in any event.", "summary": "The client wants to calculate the balance of specific addresses without requiring the entire blockchain, and introducing new commands is acceptable."}, {"author": "Andy Parkins", "date": "2011-07-07T19:02:04", "message_text_only": "On Thursday 07 July 2011 17:44:48 Mike Hearn wrote:\n> > What I want to be able to do though is calculate a balance for an\n> > aribtrary address.  Not every address; just the particular ones that\n> > the client is interested in.  It's complete overkill to require the\n> > whole block chain just to calculate the balance of a few addresses.\n> \n> But what is that for? You said it's for a lightweight client to do\n> that when it receives a transaction, to verify that all the\n> dependencies are in blocks recursively. But why?\n\nThere is no way for a client to know in advance whether any broadcast \ntransaction contains a send to an address in its wallet.  So every incoming \ntransaction has to be examined.\n\nThen, there is no way to know if while you were offline any of the \ntransactions in the blocks you missed contained transactions for an address \nin your wallet.\n\nAlso, a feature I am interested in supporting is a split wallet -- where the \nprivate key is held elsewhere.  I'd still want to be able to report the \ncurrent balance in a particular address though.  That address can be added \nat any time.\n\nAlso, I would like to make some blockexplorer-like facilities available to \nlightweight clients.\n\n> > Not entirely.  If I ask for \"the block that contains transaction with\n> > hash 12345678abcd...\" then when I get that full block, I can verify\n> > the merkle tree myself.\n> \n> Well, it's more efficient to just verify the merkle branch. But yes.\n\nWe're only talking about one verifying one (or minimal numbers of) blocks; \n\"efficient\" isn't really going to matter much in that context.  Also, if \nwe're talking about a situation where we don't necessarily trust the remote, \nwe've got to verify the whole block, not just the one transaction we're \ninterested in, since we told the remote which one we were interested in when \nwe requested it.\n\n> > I'm not entirely sure I see how a filter helps.  If I've been offline\n> > for ten minutes then I need all the transactions pending in the last\n> > ten minutes.  No amount of filtering makes that list any smaller.\n> \n> Why do you need all of them? You just care about the ones sending\n> coins to you, surely?\n\nIs the filter going to be filter-by-address then?  I misunderstood in that \ncase, I thought you were talking about filter-by-hash, which obviously tells \nyou nothing about the contents of the transaction.\n\n> > That would be fine.  My reason for suggesting using getblocks was that\n> > it didn't introduce a new command.\n> \n> IMHO it's fine to introduce new commands. They'll just be ignored by\n> old clients in any event.\n\nThat's good to know.  I'm trying to be circumspect in what my client does; I \nwant to be 100% compatible, which means if I need a new feature, it's got to \nbe in the official client first.\n\nI accept that this is all big talk, and there are plenty of people who start \nnew clients and then give up; which might still happen to me.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "A lightweight client needs to calculate the balance of an arbitrary address without requiring the whole blockchain. A filter-by-address could help."}, {"author": "Gregory Maxwell", "date": "2011-07-07T17:45:31", "message_text_only": "On Thu, Jul 7, 2011 at 11:42 AM, Mike Hearn <mike at plan99.net> wrote:\n[snip]\n> You have to treat appearing deep in the chain as ipso-facto proof of\n> validity. Lightweight/SPV clients simply must have that trust, it\n> cannot be done any other way. See this article:\n>\n> http://code.google.com/p/bitcoinj/wiki/SecurityModel\n\n\nIt _could_ be done another way, with a protocol change:\nhttp://forum.bitcoin.org/index.php?topic=21995.0", "summary": "Bitcoin's security model requires trust in the validity of appearing deep in the chain; a protocol change could offer an alternative."}], "thread_summary": {"title": "Suggestion for enhancements to getblock", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Andy Parkins", "Gregory Maxwell"], "messages_count": 6, "total_messages_chars_count": 13043, "convo_summary": "Andy Parkins proposed two changes to the Bitcoin protocol: allowing lightweight clients to request transactions and implementing a virtual block for pending transactions. Mike Hearn argued that lightweight clients cannot prove a transaction is not a double spend without knowledge of all transactions, but filtering suggestions could be a better approach. Gregory Maxwell noted that Bitcoin's security model requires trust in the validity of appearing deep in the chain, but a protocol change could offer an alternative."}}, {"title": "[Bitcoin-development] Version bytes", "thread_messages": [{"author": "Pieter Wuille", "date": "2011-07-07T11:15:58", "message_text_only": "Hello everyone,\n\nafter a discussion on IRC, we decided to try to standardize the version bytes\nused by bitcoin for several applications.\n\nThere are 3 components that seem meaningful:\n* network? (realnet, testnet, alternate chains?)\n* data class? (address, private key, master key, ...?)\n* version? (real version, per data class defined)\n\nThere is no technical reason why different network and different data classes\nwould need separate version bytes, but i think it is a good thing to keep\nthem from colliding. People will mix them up, and when things are well\ndefined, a nice warning message could help a lot (\"Oops it seems you entered\na private key instead of an address!\").\n\nSo, first of all, there is already one actually used alternate chain, namely\nnamecoin, using version byte 52 for addresses. For this reason, i'd like to\nreserve bit 16 in the version byte for \"alternate chain\". When bit 16 is set,\neverything is up to the network itself, and no further semantics are defined.\n\nWhen bit 16 isn't set:\n\nThen remains the rest of the network. The problem is that testnet already uses\nversion 111, which is not a single bit. We can use a trick though, namely\nchoosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the version\nnumber with 111. Otherwise, we could reset testnet (not actually reset, just\nchange its addresses a bit), and simply state odd=testnet, even=realnet.\n\nThat leaves use with 6 more bits to play with, namely 128,64,32 and 8,4,2.\nAs 128 is already used for private keys, let's use (128,64,32) for data classes,\nand (8,4,2) for versions.\n\nSo, in full:\n* Bits 128/64/32 define data class\n** 0 = address\n** 32,64,96,160,192 = reserved for future use\n** 128 = private key\n** 224 = extended data class, another \"data class\" byte follows\n* Bit 16 defines \"private\"\n** 0 = bitcoin\n** 16 = alternate chain\n* Bits 8/4/2 define version number\n** 0 = only thing used for now\n** 2,4,6,8,10,12 = reserved for future use\n** 14 = extended version, another version byte follows\n* Bit 1 defines testnet\n** 0 = realnet\n** 1 = testnet (possibly using XOR 111, if not reset)\n\nThis whole discussion started when Stefan wanted to define a format for master keys from which\nto derive deterministic wallet keys, i suggest using data class 192 for that, leaving the\nlower numbers for more basic data, like public keys.\n\nAny comments?\n\n-- \nPieter", "summary": "Bitcoin is standardizing version bytes for different applications, including network, data class, and version, to prevent collisions and confusion."}, {"author": "Pieter Wuille", "date": "2011-07-07T19:40:08", "message_text_only": "On Thu, Jul 07, 2011 at 01:15:57PM +0200, Pieter Wuille wrote:\n> Hello everyone,\n> \n> after a discussion on IRC, we decided to try to standardize the version bytes\n> used by bitcoin for several applications.\n\nI realize my mail may have been a bit unclear. This is about the version bytes\nused in addresses and other base58-encoded data structures. I'd like to see some\nconvention adopted before everyone starts defining their own.\n\nThe proposal in the previous mail could be summarized by the following functions\n(for non-alternate chains). It is compatible with all currently-used version bytes\nthat i know of (testnet, realnet, addresses, private keys, namecoin, multicoin):\n\nenum dataclass_t \n{\n    address = 0,\n    privkey = 4,\n    masterkey = 6,\n    extended = 7\n}\n\nint EncodeVersionByte(dataclass_t class, int nVersion, bool fTestNet)\n{\n    return (class << 5 + nVersion << 1) ^ fTestNet*111;\n}\n\nvoid DecodeVersionByte(int nByte, dataclass_t& class, int& nVersion, bool& fTestNet)\n{\n    fTestNet = false;\n    if (nByte & 1)\n    {\n        fTestNet = true;\n        nByte ^= 111;\n    }\n    class = (nByte & 224) >> 5;\n    nVersion = (nByte & 14) >> 1;\n}\n\n-- \nPieter", "summary": "Bitcoin aims to standardize the version bytes used in addresses and other base58-encoded data structures to avoid confusion."}, {"author": "Stefan Thomas", "date": "2011-07-08T06:36:23", "message_text_only": "Hey Pieter,\n\n> Otherwise, we could reset testnet (not actually reset, just\n> change its addresses a bit), and simply state odd=testnet, even=realnet.\n\nWe could use the XOR hack for now and remove it the next time we reset \ntestnet. But I do think the 111 is baggage we want to get rid of. Using \nthe lsb as a simple flag is much cleaner.\n\nCheers,\n\nStefan\n\n\nOn 7/7/2011 1:15 PM, Pieter Wuille wrote:\n> Hello everyone,\n>\n> after a discussion on IRC, we decided to try to standardize the version bytes\n> used by bitcoin for several applications.\n>\n> There are 3 components that seem meaningful:\n> * network? (realnet, testnet, alternate chains?)\n> * data class? (address, private key, master key, ...?)\n> * version? (real version, per data class defined)\n>\n> There is no technical reason why different network and different data classes\n> would need separate version bytes, but i think it is a good thing to keep\n> them from colliding. People will mix them up, and when things are well\n> defined, a nice warning message could help a lot (\"Oops it seems you entered\n> a private key instead of an address!\").\n>\n> So, first of all, there is already one actually used alternate chain, namely\n> namecoin, using version byte 52 for addresses. For this reason, i'd like to\n> reserve bit 16 in the version byte for \"alternate chain\". When bit 16 is set,\n> everything is up to the network itself, and no further semantics are defined.\n>\n> When bit 16 isn't set:\n>\n> Then remains the rest of the network. The problem is that testnet already uses\n> version 111, which is not a single bit. We can use a trick though, namely\n> choosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the version\n> number with 111. Otherwise, we could reset testnet (not actually reset, just\n> change its addresses a bit), and simply state odd=testnet, even=realnet.\n>\n> That leaves use with 6 more bits to play with, namely 128,64,32 and 8,4,2.\n> As 128 is already used for private keys, let's use (128,64,32) for data classes,\n> and (8,4,2) for versions.\n>\n> So, in full:\n> * Bits 128/64/32 define data class\n> ** 0 = address\n> ** 32,64,96,160,192 = reserved for future use\n> ** 128 = private key\n> ** 224 = extended data class, another \"data class\" byte follows\n> * Bit 16 defines \"private\"\n> ** 0 = bitcoin\n> ** 16 = alternate chain\n> * Bits 8/4/2 define version number\n> ** 0 = only thing used for now\n> ** 2,4,6,8,10,12 = reserved for future use\n> ** 14 = extended version, another version byte follows\n> * Bit 1 defines testnet\n> ** 0 = realnet\n> ** 1 = testnet (possibly using XOR 111, if not reset)\n>\n> This whole discussion started when Stefan wanted to define a format for master keys from which\n> to derive deterministic wallet keys, i suggest using data class 192 for that, leaving the\n> lower numbers for more basic data, like public keys.\n>\n> Any comments?\n>", "summary": "Bitcoin is standardizing version bytes for different applications, with reserved bits for network, data class, and version number. Testnet may use XOR hack or reset."}, {"author": "John Smith", "date": "2011-07-08T08:16:46", "message_text_only": "I agree. I think breaking compatiblity with older address (even testnet) is\nnot a\n\nOn Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:\n\n> Hey Pieter,\n>\n> > Otherwise, we could reset testnet (not actually reset, just\n> > change its addresses a bit), and simply state odd=testnet, even=realnet.\n>\n> We could use the XOR hack for now and remove it the next time we reset\n> testnet. But I do think the 111 is baggage we want to get rid of. Using\n> the lsb as a simple flag is much cleaner.\n>\n> Cheers,\n>\n> Stefan\n>\n>\n> On 7/7/2011 1:15 PM, Pieter Wuille wrote:\n> > Hello everyone,\n> >\n> > after a discussion on IRC, we decided to try to standardize the version\n> bytes\n> > used by bitcoin for several applications.\n> >\n> > There are 3 components that seem meaningful:\n> > * network? (realnet, testnet, alternate chains?)\n> > * data class? (address, private key, master key, ...?)\n> > * version? (real version, per data class defined)\n> >\n> > There is no technical reason why different network and different data\n> classes\n> > would need separate version bytes, but i think it is a good thing to keep\n> > them from colliding. People will mix them up, and when things are well\n> > defined, a nice warning message could help a lot (\"Oops it seems you\n> entered\n> > a private key instead of an address!\").\n> >\n> > So, first of all, there is already one actually used alternate chain,\n> namely\n> > namecoin, using version byte 52 for addresses. For this reason, i'd like\n> to\n> > reserve bit 16 in the version byte for \"alternate chain\". When bit 16 is\n> set,\n> > everything is up to the network itself, and no further semantics are\n> defined.\n> >\n> > When bit 16 isn't set:\n> >\n> > Then remains the rest of the network. The problem is that testnet already\n> uses\n> > version 111, which is not a single bit. We can use a trick though, namely\n> > choosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the\n> version\n> > number with 111. Otherwise, we could reset testnet (not actually reset,\n> just\n> > change its addresses a bit), and simply state odd=testnet, even=realnet.\n> >\n> > That leaves use with 6 more bits to play with, namely 128,64,32 and\n> 8,4,2.\n> > As 128 is already used for private keys, let's use (128,64,32) for data\n> classes,\n> > and (8,4,2) for versions.\n> >\n> > So, in full:\n> > * Bits 128/64/32 define data class\n> > ** 0 = address\n> > ** 32,64,96,160,192 = reserved for future use\n> > ** 128 = private key\n> > ** 224 = extended data class, another \"data class\" byte follows\n> > * Bit 16 defines \"private\"\n> > ** 0 = bitcoin\n> > ** 16 = alternate chain\n> > * Bits 8/4/2 define version number\n> > ** 0 = only thing used for now\n> > ** 2,4,6,8,10,12 = reserved for future use\n> > ** 14 = extended version, another version byte follows\n> > * Bit 1 defines testnet\n> > ** 0 = realnet\n> > ** 1 = testnet (possibly using XOR 111, if not reset)\n> >\n> > This whole discussion started when Stefan wanted to define a format for\n> master keys from which\n> > to derive deterministic wallet keys, i suggest using data class 192 for\n> that, leaving the\n> > lower numbers for more basic data, like public keys.\n> >\n> > Any comments?\n> >\n>\n>\n>\n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security\n> threats, fraudulent activity, and more. Splunk takes this data and makes\n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2d-c2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110708/5a883209/attachment.html>", "summary": "A proposal to standardize the version bytes used by Bitcoin for different applications, including network, data class, and version."}, {"author": "John Smith", "date": "2011-07-08T08:18:19", "message_text_only": "Sorry, that last message got broken off.\n\nOn Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:\n>\n>> Hey Pieter,\n>>\n>> > Otherwise, we could reset testnet (not actually reset, just\n>> > change its addresses a bit), and simply state odd=testnet, even=realnet.\n>>\n>> We could use the XOR hack for now and remove it the next time we reset\n>> testnet. But I do think the 111 is baggage we want to get rid of. Using\n>> the lsb as a simple flag is much cleaner.\n>>\n>\n\nI agree it is cleaner, but I think breaking compatiblity with older address\n(even testnet) is not a good idea right now. It is important to build an\nimage of stability and backward compatibility.\n\nSo I vote for the XOR 111 hack :)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110708/498b8905/attachment.html>", "summary": "Discussion on changing testnet addresses. XOR hack suggested, but some argue for maintaining backward compatibility for stability."}, {"author": "Pieter Wuille", "date": "2011-07-08T09:25:07", "message_text_only": "On Fri, Jul 08, 2011 at 08:18:19AM +0000, John Smith wrote:\n> \n> On Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:\n> >\n> >> Hey Pieter,\n> >>\n> >> > Otherwise, we could reset testnet (not actually reset, just\n> >> > change its addresses a bit), and simply state odd=testnet, even=realnet.\n> >>\n> >> We could use the XOR hack for now and remove it the next time we reset\n> >> testnet. But I do think the 111 is baggage we want to get rid of. Using\n> >> the lsb as a simple flag is much cleaner.\n> \n> I agree it is cleaner, but I think breaking compatiblity with older address\n> (even testnet) is not a good idea right now. It is important to build an\n> image of stability and backward compatibility.\n> \n> So I vote for the XOR 111 hack :)\n\nIt does have another advantage: it makes testnet codes visually (after base58\nencoding) different from realnet ones, which is probably the reason why the\nrelatively large number 111 was chosen.\n\nThe only small change that can cause the first base58 character to remain equal,\nis a modification to nVersion of less than 5 in absolute value.\n\nPS: +/- 111 is also possible, instead of XOR 111.\n\n-- \nPieter", "summary": "A discussion about changing the addresses of testnet and realnet in Bitcoin, with a suggestion to use XOR 111 hack."}], "thread_summary": {"title": "Version bytes", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Stefan Thomas", "Pieter Wuille"], "messages_count": 6, "total_messages_chars_count": 12387, "convo_summary": "Bitcoin is standardizing version bytes for different applications, including network, data class, and version, to prevent collisions and confusion. Testnet may use XOR hack or reset. Discussion on changing testnet addresses, with some arguing for maintaining backward compatibility for stability."}}, {"title": "[Bitcoin-development] Bitcoin v0.3.24 released", "thread_messages": [{"author": "Jeff Garzik", "date": "2011-07-08T21:35:36", "message_text_only": "Bitcoin v0.3.24 is now available for download at\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/\n\nThis is another bug fix release.  We had hoped to have wallet\nencryption ready for release, but more urgent fixes for existing\nclients were needed -- most notably block download problems were\ngetting severe.  Wallet encryption is ready for testing at\nhttps://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and\n-hopefully- will follow shortly in the next release, v0.4.\n\nNotable fixes in v0.3.24, and the main reasons for this release:\n\nF1) Block downloads were failing or taking unreasonable amounts of\ntime to complete, because the increased size of the block chain was\nbumping up against some earlier buffer-size DoS limits.\nF2) Fix crash caused by loss/lack of network connection.\n\nNotable changes in v0.3.24:\n\nC1) DNS seeding enabled by default.\nC2) UPNP enabled by default in the GUI client.  The percentage of\nbitcoin clients that accept incoming connections is quite small, and\nthat is a problem.  This should help.  bitcoind, and unofficial\nbuilds, are unchanged (though we encourage use of \"-upnp\" to help the\nnetwork!)\nC3) Initial unit testing framework.  Bitcoin sorely needs automated\ntests, and this is a beginning.  Contributions welcome.\nC4) Internal wallet code cleanup.  While invisible to an end user,\nthis change provides the basis for v0.4's wallet encryption.\n\nFull changelog (\"git shortlog v0.3.23..\"):\n\nDawid Spiechowicz (1):\n      added polish translation\n\nDoug Huff (1):\n      Add OSX App bundle and correct build instructions to reflect reality.\n\nEric Hosmer (3):\n      Updated Visual C++ makefile.\n      Further updated Visual C++ makefile.\n      Add keystore.h to makefile.vs's header list.\n\nGavin Andresen (3):\n      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b\n      Block-chain lock-in at 134444\n      Do not use comma as thousands separator     Using the comma as thousands s\n\nGiel van Schijndel (2):\n      rpc server: send '403 Forbidden' to rejected clients\n      rpc: don't send 403 when using SSL to prevent DoS\n\nHan Lin Yap (3):\n      Double check translation and improved a translation string\n      Update swedish translation\n      Consistent Bitcoin example address\n\nJames Burkle (1):\n      Edited init.cpp to include a check that -datadir exists\n\nJeff Garzik (6):\n      FormatFullVersion: build fix related to recent translation improvement\n      doc/release-process.txt: minor updates\n      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t\n      Enable DNS seeding by default.\n      Bump version to 0.3.24.\n      Bump OSX version to 0.3.24 (missed in previous commit)\n\nJoerie de Gram (1):\n      Fix connection failure debug output\n\nJordan Lewis (8):\n      Only include irc.h when needed\n      Only include db.h when we have to.\n      Only included rpc.h when necessary\n      Only include net.h when we have to\n      Only include init.h when we have to\n      Only include strlcpy.h when we have to\n      Remove some globally unused headers from headers.h\n      Only include certain boost headers if necessary.\n\nMatt Corallo (8):\n      Update translations and remove obsolete translations.\n      Add new DNSSeed dnsseed.bluematt.me.\n      Only use dnsseeds and static seeds when not on testnet.\n      Make UPnP default on Bitcoin but not on Bitcoind.\n      Give more detailed error messages for connection failure.\n      Added a couple minor things to match newer build process.\n      Revert \"Make UPnP default on Bitcoin but not on Bitcoind.\"\n      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)\n\nPieter Wuille (6):\n      move wallet code to separate file\n      CWallet class\n      Bugfixes walletclass\n      Fix segfault when creating new wallet\n      Limit response to getblocks to half of output buffer size\n      Fix synchronization of default key\n\nShane Wegner (1):\n      Fix missing includes needed for Boost 1.46.\n\nSt\u00e9phane Gimenez (1):\n      Fix AddressBook syncrhonization between a CWallet and CWalletDB\n\nWladimir J. van der Laan (1):\n      add GetTotalBlocksEstimate() function, move magic number to constant\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n4909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gz\n58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gz\nd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe\n520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQIVAwUBThd13todwg8tvwyoAQKnVhAAnQzWKk5HrY5eMIprWwtsFZL0VOxAV2nV\nKn8NISmYk7PtfhzRm2sf0YYr369e7NtKAzdVNTRl+9m4RwQ6HhvzrChWG3OXxueA\nAYg2JkS3oXbU2p4zOQT0/0ILp7iiHGhXCrEyd3bU5KkWOJhUnV0lS3ZzsELf8sab\nI5MYQsrpZ9HZUI13e1ak/E0cub2gvxl+4D5Eg7EkNP71APR1MXGGzcfF7vlDYf4/\nj1JTtkrBVZU6yFi8fNUxMQ/8G/0vyWLOOoCxaSvl5u5kssbI4rklhTA+BaqE1apx\nxZN9Re0KjQ8cZiLQnVG9RhJsPhWe5tJRGqnKmaKF0gDELihFw9JLBDQkeSlhkhGx\nwYtOfMClTDbd2qj5+dmvIrJPmDYHpGvmEO6xPsiv0qaNMZ1X/yMd9pp7nyCYosWB\nu/vcPF0i4I27SDgRZ1TCPSgJgDQ4gEwKgzO69HywJw4KSkJq5MdecJDGRqTaYaf2\nQI757pBXzFF3qORECSt5QIOjV1+bUc+1pB6450OfrZ+fTMMyWGF8t9t+TMAOwqoR\nE0AMx2V+g+w6AXtpar4vsh0erexissREf6g1tW5ogy21Cv91MbIGZA9lUKNeU0Np\nOgYSTNd5DvlbF7VpRZemSIz9gGWayqEi0G1oBQDo6DFcjeCS0okrIWPep4o1uoYz\nxhxoauT2XEM=\n=hgmn\n-----END PGP SIGNATURE-----\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Bitcoin v0.3.24 is available for download, featuring bug fixes and improvements, including DNS seeding enabled by default and UPNP enabled in the GUI client. Wallet encryption is ready for testing."}, {"author": "Mike Hearn", "date": "2011-07-09T12:18:04", "message_text_only": "If there haven't been lots of upgrades in a few days, I think it's\ntime to use the alert function again.", "summary": "Suggests using alert function if no upgrades in a few days."}, {"author": "Jeff Garzik", "date": "2011-07-19T00:17:21", "message_text_only": "Mac OSX version of bitcoin client finally posted at\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/\n\nUpdated sums (stored as SHA1SUMS.asc on SF):\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n4909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gz\nfed0afebe0b0c0f77a637600ac4abecbe5d098ed  bitcoin-0.3.24-macosx.zip\n58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gz\nd4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe\n520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQIVAwUBTiTMHNodwg8tvwyoAQL8CRAAgraSWP12lbwrhpiElvB7LIWoPbiE1dUx\ni2ZO4MVJYKMbyuHu55j1Uq7a4ZqpNhXqq7U6efnoDTCl9sdpyhKxiql0SpsYBLs1\nIehX4UEVGVMUE5uepmOs+cYnYuAhNzvxNqKFPv3D7uEOXPmSxlUa4s0GEnTgVR1l\n0GFYf2T615MoGAak3+afahp4WB4XlHshttHT2P3o2/7N4Oh7iwFFtkmOj/Sb3Prc\nC8skW83kUZ4i8W1HlZTmtr4YlQbKnx6bF6mbkTY1aQa1AV/8htenALkmR2+eCgsd\nEY9WM8qruxnVLt/ao+VYw5jYLSYVKHt31ZD4rJM+5lKcTtU1NmNsGloen+hdLwC+\nhggqnUQmvBzM7SKqvg4zI9SbgGR5fS3poTrFX7yDKZyLSPcjBND/lWi8evRiSEP0\nyftCKL7zotdRy6QTG7tI1Fye1fyYuQdTB1nimE+7VJ8Q2O4DwE0iZKMuXm3GfaOr\nT20Znvns9caMKED9T1gg42QgYM6EMMbeukBUkIXPt2tloDnn2tMzvvrKzgGBS1Lc\nqv2ndhBCunBxNCQCHly4T2Rz8TJnm2XglS0d/VygcMuMSL0San5DwXYNnN4P0xD/\nMXOdqrxcusIzKBbSHWPqInRmYUTymDtcqXWK3Cz6kRUXjBkRoSvDs8PBAvnaC236\n1xol6uyMqZo=\n=aMy0\n-----END PGP SIGNATURE-----", "summary": "Bitcoin client version 0.3.24 for Mac OSX is now available for download on SourceForge, along with versions for Linux and Windows."}], "thread_summary": {"title": "Bitcoin v0.3.24 released", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Mike Hearn"], "messages_count": 3, "total_messages_chars_count": 6865, "convo_summary": "Bitcoin v0.3.24 is out with bug fixes and improvements, including DNS seeding and UPNP enabled in the GUI client. Wallet encryption is ready for testing. Mike Hearn suggests using alert function if no upgrades in a few days. The client is available for download on SourceForge for Mac OSX, Linux, and Windows."}}, {"title": "[Bitcoin-development] Metadata for transactions / address book records", "thread_messages": [{"author": "John Smith", "date": "2011-07-09T09:45:54", "message_text_only": "Hello devs,\n\nFor UI purposes I'd like to be able to associate metadata to transactions\nand address book records.\n\nTo be clear, this is completely client-side and will never see the block\nchain.\n\nFor transactions:\n\n-   std::string description; // A description that the user can give to a\ntransaction, after he sent/received it, for example \"ordered eggs\"\n\nFor addresses:\n\n-   bool visibleInInterface; // Visible in interface; useful to hide old\naddresses/labels from the lists, without removing them for lookup purposes\n\nThese are my current ideas; probably, more metadata can be useful later on\n(accounting category, links to 3rd party services, etc), so an extensible\nsystem would be nice.\n\nAny ideas as to what would be the best place to put this, while minimizing\nthe core changes?\n\nI'm aware that this could also be implemented completely inside the UI code,\nbut I'm not sure this is nice, as it would put database handling etc there\nand would mean even more data files for the user to backup/track.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110709/e9f67971/attachment.html>", "summary": "The author seeks to add metadata to transactions and address book records for UI purposes, with ideas for extensible systems. Implementation options are discussed."}], "thread_summary": {"title": "Metadata for transactions / address book records", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 1191}}, {"title": "[Bitcoin-development] overall bitcoin client code quality", "thread_messages": [{"author": "Michael Offel", "date": "2011-07-10T22:37:15", "message_text_only": "Hello,\n\u00a0\nI would like to start a discussion about code quality to catch some opinions and create an codebase cleanup plan.\n\u00a0\nLet me just start with some points I've seen while reading and stepping throw bitcoin:\n\u00a0\n\u00a0\n1. nearly no code documentation\n\u00a0\nAll I found was the original paper and some partial wiki pages and the overall coding style does not help much here. I would love to see some class hierarchy, method descriptions and thoughts in the code. Instead one can find comments like this...\n\u00a0\n>\u00a0\u00a0\u00a0 // Map ports with UPnP\n>\u00a0\u00a0\u00a0 if (fHaveUPnP)\n>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 MapPort(fUseUPnP);\n\u00a0\nThis comment is just waste of valuable disk space and time for anyone who reads it. While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and why Berkeley db 4 is used at all.\n\u00a0\n\u00a0\n2. isolation of modules\n\u00a0\nIt would be a lot easier to understand parts of the code if they would use well defined interfaces to communicate. Bitcoin makes use of global variables, public member variables in classes and global external functions what makes understanding the code a lot harder. To give an example here, the irc module has no interface at use it or to use. It gets some kind of magic thread started and pushes received addresses directly to some global function in net.cpp. The code is full of concepts like this. A well defined interface would be an bitcoin unrelated IRC module interface and some kind of translation class between the IRC and peer2peer network interface.\n\u00a0\n\u00a0\n3. poor use of threads\n\u00a0\nBitcoin starts a new thread for every little module it has and as soon as there is some serious work to do, it locks some kind of global mutex. While this eliminates nearly every performance advantage, it introduces a high difficulty in writing bug free code. Not only that one has to know which mutex to lock when, there is no documentation about that, one may also accidently add dead locks. This kind of bug is very hard to find, it may run well for a million of tests and crash or just hang on the next one. And my experience tells me that it will not be an developer nor an little user when it occurs. The fist user who hit's the bug will be mt gox doing an emergency transfer. ;) My suggestion is to remove all threads and critical sections and build a sequential easy to follow model. Some modules like the cpu miner may still require to spawn threads, but he should do this internally and hide any synchronization.\n\u00a0\n\u00a0\n4. long build times\n\u00a0\nIt takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files. While the rest is just bad coding style the use of boost is arguable. As far as I can see it is mainly used for threading and FOREACH. I already put threading on the table, but using pthread or making an platform dependent startthread and mutex would be much more lightweight and nobody needs FOREACH. Boost is also an heavy non standard dependency that is an unnecessary barrier for new developers.\n\u00a0\n\u00a0\n5. style guide\n\u00a0\nThere is a style guide but it does not include anything about readability.\nI'm talking about one file per class, no methods and single code line longer than a screen page. It should be natural to write code like this and I dislike having a lot of rules but the code shows that there is a need for such thing.\n\u00a0\n\u00a0\n6. hardcoded values\n\u00a0\nThere are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.\n\u00a0\n\u00a0\nAll this is just the tip of the iceberg. Bitcoin is a widely used application and users are transferring millions of dollars. The current code quality is very prone to bug's. To be clear I'm not saying there are a lot of bugs nor do I blame someone for the code quality. It is still a beta version and it was necessary to bring out a working version to attract more developers. And it is hard to analyze the code or just see a bug during development. One can be happy to understand what a method does, but this gives not the confidence to see and report obvious bugs.\n\u00a0\nLet me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.\nMy overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of \"known to be somehow functional\" around.\nThe official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.\n\u00a0\nHopefully I did not hurt someone's feelings.\n\u00a0\nMichael\n\u00a0\n\u00a0\n\n___________________________________________________________\nSchon geh\u00f6rt? WEB.DE hat einen genialen Phishing-Filter in die\nToolbar eingebaut! http://produkte.web.de/go/toolbar", "summary": "A discussion about code quality for Bitcoin is needed due to poor documentation, module isolation, thread usage, long build times, style guide, and hardcoded values. A complete rewrite is suggested."}, {"author": "Douglas Huff", "date": "2011-07-10T23:07:29", "message_text_only": "On Jul 10, 2011, at 5:37 PM, Michael Offel wrote:\n\n> 4. long build times\n>  \n> It takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files. \n\nI've actually offered (on irc) to fix the latter a few times and been told that a pull removing implementations from the headers would not be merged so have not wasted the effort. (Because it's a rather large one.) Not only does this cause long build times it makes adding new code in the logically \"right\" places nearly impossible due to the build deps.\n\nI agree with pretty much the entirety of your post and think all of it needs to be discussed further and addressed.\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/8da88a61/attachment.sig>", "summary": "Bitcoin's long build times are due to the use of boost, lack of module isolation, and implementations in header files, making adding new code difficult."}, {"author": "Jeff Garzik", "date": "2011-07-10T23:31:20", "message_text_only": "On Sun, Jul 10, 2011 at 6:37 PM, Michael Offel <Michael.Offel at web.de> wrote:\n> 1. nearly no code documentation\n\nagreed -- contributions welcome\n\n\n> 2. isolation of modules\n\nIt is a long term goal to move towards 'libbitcoin\"\n\n> 3. poor use of threads\n\nagreed -- contributions welcome\n\n> 4. long build times\n\nvery low priority.\n\n> 5. style guide\n\ncontributions to existing style guide welcome\n\n> 6. hardcoded values\n\nvery low priority\n\n\n> Let me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.\n> My overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of \"known to be somehow functional\" around.\n> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.\n>\n> Hopefully I did not hurt someone's feelings.\n\nWe know the code isn't what people would prefer, but that's what we've\ninherited.  Everybody has suggestions, but given limited development\nresources we're swamped as is.  (hence all the \"contributions welcome\"\nresponses)\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "A developer suggests a complete rewrite of the Bitcoin client due to poor code documentation, module isolation, and poor use of threads. Contributions are welcome."}, {"author": "Matt Corallo", "date": "2011-07-10T23:36:53", "message_text_only": "On Mon, 2011-07-11 at 00:37 +0200, Michael Offel wrote:\n> Hello,\n>  \n> I would like to start a discussion about code quality to catch some opinions and create an codebase cleanup plan.\n>  \n> Let me just start with some points I've seen while reading and stepping throw bitcoin:\n>  \n>  \n> 1. nearly no code documentation\nYep, anyone with the time can gladly comment up the code, it would be\nmuch appreciated, but as it stands now there are more important things\nto do...like many of the things here:\n\n> All I found was the original paper and some partial wiki pages and the overall coding style does not help much here. I would love to see some class hierarchy, method descriptions and thoughts in the code. \nYes, thats one of the general development goal, sipa's CWallet was an\nexcellent start, but much more work needs done in terms of clear\nsplitting of the code.\n\n> Instead one can find comments like this...\n>  \n> >    // Map ports with UPnP\n> >    if (fHaveUPnP)\n> >        MapPort(fUseUPnP);\n>  \n> This comment is just waste of valuable disk space and time for anyone who reads it.\nMy bad, was just following the previous comments...\n> While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and \n> why Berkeley db 4 is used at all.\nAt the time Bitcoin began being built, Ubuntu 9.04 (or was it 9.10?) was\nused, as it offered the oldest libc on the newest OS.  Ubuntu 9.04 just\nhappened to only have db4.7.  For backward compatibility, db4.7 has been\nused ever since (except, for some reason, the osx builds).  In 0.4,\ndb4.8 will be used.  If you are asking why bdb was used to begin with,\nwhy not? its an excellent db and why reinvent the wheel?\n\n>  \n> 2. isolation of modules\n>  \n> It would be a lot easier to understand parts of the code if they would use well defined interfaces to communicate. Bitcoin makes use of global variables, public member variables in classes and global external functions what makes understanding the code a lot harder.\n> To give an example here, the irc module has no interface at use it or to use. It gets some kind of magic thread started and pushes received addresses directly to some global function in net.cpp. The code is full of concepts like this.\n> A well defined interface would be an bitcoin unrelated IRC module interface and some kind of translation class between the IRC and peer2peer network interface.\nThough satoshi was clearly brilliant, he didn't care much for code\ncleanliness.  This is one of the next development goals (IMO).\n\n>  \n> 3. poor use of threads\n>  \n> Bitcoin starts a new thread for every little module it has and as soon as there is some serious work to do, it locks some kind of global mutex. While this eliminates nearly every performance advantage, it introduces a high difficulty in writing bug free code.\n> Not only that one has to know which mutex to lock when, there is no documentation about that, one may also accidently add dead locks.\n> This kind of bug is very hard to find, it may run well for a million of tests and crash or just hang on the next one. And my experience tells me that it will not be an developer nor an little user when it occurs.\n> The fist user who hit's the bug will be mt gox doing an emergency transfer. ;)\nThis is something that will come with general code cleanup and\nmodularization.  The locks will become specific to the object (as they\nshould be) and the performance and clarity will be fixed.\n\n> My suggestion is to remove all threads and critical sections and build a sequential easy to follow model.\n> Some modules like the cpu miner may still require to spawn threads, but he should do this internally and hide any synchronization.\nThough it would be ideal to rewrite 90% of Bitcoin just to fix code\nclarity, that is way more work than anyone has time for, in the mean\ntime there is more than just code cleanup that needs done.  It has to be\ndone in chunks.\n\n>  \n> 4. long build times\n>  \n> It takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files.\n> While the rest is just bad coding style the use of boost is arguable. As far as I can see it is mainly used for threading and FOREACH. I already put threading on the table,\n> but using pthread or making an platform dependent startthread and mutex would be much more lightweight and nobody needs FOREACH. Boost is also an heavy non standard dependency that is an unnecessary barrier for new developers.\nHeader files could stand to be cleaned up a bit, though all the\nimplementation stuff is limited to one or two lines (though sometimes\nthats too much).  If you want to rewrite Bitcoin sans-boost, please do,\nhowever Boost really isnt a huge barrier as its a build-once thing.  If\nyou are on Linux, all you have to do is install a bunch of packages and\nbuild wx.  If you are on Windows, why are you on Windows? ;)\n\n>  \n> 5. style guide\n>  \n> There is a style guide but it does not include anything about readability.\n> I'm talking about one file per class, no methods and single code line longer than a screen page. It should be natural to write code like this and I dislike having a lot of rules but the code shows that there is a need for such thing.\nIts not due to the current coders, its due to how it was originally\nwritten.\n\n>  \n> 6. hardcoded values\n>  \n> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.\nThis one is an interesting debate.  There is no real reason to do this\naside from some questionable code cleanup.  Also, there is no reason to\nencourage improperly-implemented alternate chains.  Alternate chains\nshould be designed in such a way as to share the main chain's difficulty\nas described by Mike on the forum, not just make a new chain and hope it\nsticks.\n\n>  \n> All this is just the tip of the iceberg. Bitcoin is a widely used application and users are transferring millions of dollars. The current code quality is very prone to bug's.\n> To be clear I'm not saying there are a lot of bugs nor do I blame someone for the code quality. It is still a beta version and it was necessary to bring out a working version to attract more developers.\n> And it is hard to analyze the code or just see a bug during development. One can be happy to understand what a method does, but this gives not the confidence to see and report obvious bugs.\n>  \n> Let me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.\n> My overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of \"known to be somehow functional\" around.\nReally no reason to do that.  Although the code is messy in terms of\nglobal usage and poorly-implemented RPC/net/etc, most of the code is\nabsolutely fine.  Just throw it in clearly-defined methods and classes\nand it would be much more readable and less prone to mistakes.\nAdditionally, the things that are poorly-implemented can be slowly\nchanged over time in a clean and independent fashion instead of having\nto rewrite massive chunks at a time.  Even if we had a full-time\ndevelopment team of many, many developers, this isn't the right way to\ndo it.  The code itself is cleaner that it first appears, even if its\nglobal structure is not.\n\n> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.\nTrue, but it is much higher priority to clean up the code than comment\nit better, plus there are various other features/more user-facing issues\nthat need fixed as well, so...\n>  \n> Hopefully I did not hurt someone's feelings.\nDon't think so, the code sucks in terms of cleanliness, everyone knows\nit, its just a question of who is going to and when its going to get\nfixed.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110711/6a60bf07/attachment.sig>", "summary": "A discussion about code quality in Bitcoin is needed, as the current code is prone to bugs, lacks documentation, and has poor use of threads. A complete rewrite is not necessary, but a cleanup plan is needed to make the code more readable and less prone to mistakes."}, {"author": "Luke-Jr", "date": "2011-07-11T02:01:51", "message_text_only": "On Sunday, July 10, 2011 6:37:15 PM Michael Offel wrote:\n> why Berkeley db 4 is used at all.\n\nBecause it's a good tool for the job? Or you mean the version?\nDebian stable: 4.8\nGentoo stable: 4.8\nUbuntu LTS   : 4.8\n\n> Boost is also an heavy non standard dependency that is an unnecessary\n> barrier for new developers. \n\nBoost is pretty much standard C++ nowadays.\n\n> I'm talking about one file per class, no methods and single code line\n> longer than a screen page. It should be natural to write code like this\n> and I dislike having a lot of rules but the code shows that there is a\n> need for such thing. \n\nBlame your text editor if it can't show long lines sanely. The only problem I \nsee with the style itself is the use of spaces instead of tabs.\n\n> My overall suggestion is to begin a complete rewrite, inspired by the old\n> code rather than moving a lot of \"known to be somehow functional\" around.\n\nThere are many rewrites in progress, often with much better designs.\n\n> The official Bitcoin client should be some kind of an reference project\n> for other clients and must therefore be extra clean and well documented. \n\nBitcoin is supposed to be an authorityless project. There is no official.\n\n> *everything else*\n\nFix it yourself and submit the changes. If they don't get merged, fork.", "summary": "A developer questions the use of Berkeley db 4 and Boost in Bitcoin's code and suggests a complete rewrite for better documentation and cleanliness."}, {"author": "Alan Grimes", "date": "2011-07-12T04:13:04", "message_text_only": "Yeah, I'm starting to run into real design problems in my attempt to \nwrite a bitcoin daemon, namely I'm trying to figure out how to manage \nconnections and peers and how to interpret and coordinate messages from \npeers.\n\nWhile spying on the old code, I noticed one major problem that could be \nfixed quite easily. That is, the 1 class-per .h/.cpp rule is completely \nignored in main.h/cpp and net.h/cpp If all of the classes in the project \nwere re-factored to their own files, it would be much easier to audit \nwhat was interacting with what. I think this work could be done within \n16 programmer hours.\n\nThe old codebase doesn't build on my system but I'd be willing to rough \nit in anyway.\n\nI think this should be done in parallel to efforts, such as mine, to \nre-implement major functionality.\n\n-- \nE T F\nN H E\nD E D\n\nPowers are not rights.", "summary": "The writer is facing design problems while writing a bitcoin daemon and suggests refactoring the codebase to make it easier to audit and manage."}, {"author": "Jeff Garzik", "date": "2011-07-12T05:19:28", "message_text_only": "On Tue, Jul 12, 2011 at 12:13 AM, Alan Grimes <agrimes at speakeasy.net> wrote:\n> While spying on the old code, I noticed one major problem that could be\n> fixed quite easily. That is, the 1 class-per .h/.cpp rule is completely\n> ignored in main.h/cpp and net.h/cpp If all of the classes in the project\n> were re-factored to their own files,\n\nThis is about the last thing we should do, and it's one of the worst\ncoding practices of many C++ projects (and unfortunately carried over\nto Java by force).  See Knuth and his work on literate programming.\nPutting logically similar code -together- is often more impactful and\nmeaningful than splitting up files into dozens (hundreds or thousands,\nin large projects) of tiny, 20-line files.\n\nA project attains zen in the -balance-.  Bitcoin was not well served\nby \"everything in main.cpp\" approach -- but neither is it well served\nby splitting wallet / transaction / etc. logic across a great many\nfiles.  We should not have to ask ourselves, Is This Code In\nWalletFactory.cpp, WalletTx.cpp, WalletStore.cpp, WalletKey.cpp,\nWalletCrypt.cpp, or in s/$F.cpp/$F.h/ ?\n\nStrict, unthinking rules do not buy anything, and can cost us much.\n\nPlus, no matter how you slice it, bitcoin is Hard To Learn and there's\nno getting around that.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "A suggestion was made to refactor all classes in a project to their own files, but Jeff Garzik argues that putting logically similar code together is often more impactful and meaningful."}, {"author": "Mike Hearn", "date": "2011-07-11T09:33:04", "message_text_only": "> My overall suggestion is to begin a complete rewrite, inspired by the old\n> code rather than moving a lot of \"known to be somehow functional\" around.\n\nThis essay is old but still relevant, I think:\n\n  http://www.joelonsoftware.com/articles/fog0000000069.html\n\nDespite that, there are efforts to write a fresh implementation. For\nexample, BitCoinJ:\n\n  http://code.google.com/p/bitcoinj/\n\nIt is not a complete implementation. It's targeting the \"simplified\npayment verification\" mode as a first base, and is mostly intended for\nmobile phones today as that's a niche the current codebase can't meet.\nIn the (very) long run, it may evolve into a full node.\n\n> Hopefully I did not hurt someone's feelings.\n\nThe code was written by Satoshi who is long gone, and I doubt he would\ncare much for this type of list anyway. He was a do-er rather than a\ntalker.", "summary": "The suggestion is to rewrite the code from scratch, inspired by the old code, rather than moving functional code around. Check out BitCoinJ for a fresh implementation."}, {"author": "Gavin Andresen", "date": "2011-07-12T03:31:07", "message_text_only": "It is SO tempting to start over from scratch, isn't it?\n\nWe'll just tell everybody to stop using bitcoin so much for six months\nor so while we implement a much better client.  It will be exactly\nlike the bitcoin we have now, except with a much nicer internal\narchitecture and much cleaner code-base, and we're pretty sure we can\nget it done in six months if everything goes exactly as planned.\n\nI think incremental improvement of the \"devil we know\" is the right\nthing to do right now, although I'm going to spend more time thinking\nabout how to make sure different bitcoin implementations work well\ntogether (I've started working on network-protocol-level testing).\n\nRegarding Michael's specific suggestions:  the\nlots-of-threads-and-mutexes architecture of the client bothers me\nbecause it is too easy to change code and create a deadlock that is\nvery hard to debug and fix. Switching to asynchronous IO might be the\nright thing to do.  Then again, it might be easier to modify the\nCRITICAL_SECTION code to detect and report deadlocks (anybody have\nexperience doing that?).\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin's client needs a much better internal architecture and cleaner code-base, but incremental improvement of the current system is the right thing to do."}, {"author": "John Smith", "date": "2011-07-12T07:21:12", "message_text_only": "On Mon, Jul 11, 2011 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> > My overall suggestion is to begin a complete rewrite, inspired by the old\n> > code rather than moving a lot of \"known to be somehow functional\" around.\n>\n> This essay is old but still relevant, I think:\n>\n>  http://www.joelonsoftware.com/articles/fog0000000069.html\n>\n\n\n+1\n\nMore code documentation would be helpful, and so would making the interfaces\nmore understandable/readable, and getting rid of the manual locking\n(especially in client code!), but I don't see how that would warrant a\ncomplete rewrite.\n\nSome refactoring would be much safer than trying to reproduce every nook and\ncranny in a rewrite.\n\nre:4) I also don't see why boost would be a 'nonstandard dependency'. From\nwhat I understand, a large part of the new C++0x standard is derived from\nboost. Also C++ compilers are getting faster and more smart all the time, so\nI absolutely don't see \"build speed\" as a goal.\n\nre:6) I've already submitted a few pull requests that replace hardcoded\nmagic values with constants. Moving the constants to a config file is not\nneeded IMO because the end-user doesn't need to change them.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110712/ba5c759d/attachment.html>", "summary": "A suggestion to rewrite Bitcoin's codebase is met with some disagreement, with some suggesting refactoring instead of a complete rewrite. Boost is defended as a nonstandard dependency."}, {"author": "Michael Offel", "date": "2011-07-12T22:50:48", "message_text_only": "Monday, July 11, 2011, 10:33:04 AM, Mike Hearn wrote:\n\n>> My overall suggestion is to begin a complete rewrite, inspired by the old\n>> code rather than moving a lot of \"known to be somehow functional\" around.\n\n> This essay is old but still relevant, I think:\n\n>   http://www.joelonsoftware.com/articles/fog0000000069.html\n\nIt is indeed a very good one but I disagree in two points. First\n\n> As  a  corollary  of  this  axiom, you can ask almost any programmer\n> today  about  the code they are working on. \"It's a big hairy mess,\"\n> they will tell you. \"I'd like nothing better than to throw it out and start over.\"\nIf  someone  asks  me  this  question  about the project I'm currently\nworking  on  I  would never answer like that. This is important in the\nthreads  context  because  it  gives  me the confidence to say you can\nbuild  very  large  C++ projects with lots of programers attached over\nmultiple years and still have a very clean and nice code base. And the\narticle does also accidently points to one of the roots of messy code.\n\n\n> Back  to  that  two  page  function. Yes, I know, it's just a simple\n> function  to  display  a  window,  but it has grown little hairs and\n> stuff on it and nobody knows why. Well, I'll tell you why: those are\n> bug  fixes. One of them fixes that bug that Nancy had when she tried\n> to  install  the  thing  on  a  computer  that  didn't have Internet\n> Explorer.  Another  one  fixes  that  bug  that occurs in low memory\n> conditions.  Another  one fixes that bug that occurred when the file\n> is  on  a floppy disk and the user yanks out the disk in the middle.\n> That  LoadLibrary  call  is  ugly  but it makes the code work on old\n> versions of Windows 95.\nWell,   if   you  can not identify the meaning of some hairs, they are\neither  attached  to  the  wrong  place, in an unclear way or are just\nmissing  a  line  of  comment.  There  are  studies about what size of\nfunction  and  up  to  what  number  of  variables per function can be\ncovered  by  the average code reading programer. And these numbers are\nlow.\n\n\nSecond,  I  agree  with the point that you can not give up your market\nleadership by beginning from scratch and you will if you do so. Unless\nyou  do  it like microsoft did in his example by simultaneously extend\nthe  old code base. And microsoft does this all the time, just look at\nWindows 9x compared to Windows NT and the dead object oriented Windows\nkernel. (They did buy lots of that but that is not the point here)\nThe  mistake  is  to  compare  a  small  project  like  Bitcoin to any\napplication  like  Word  or  Netscape. The author did explicitly write\nthat  he  does  not  mean  that  partial  rewrite  is a bad thing. And\nrewriting  the  Bitcoin  client with three or four guys is like a tiny\nrewrite in a real world application like Word.\n> It's important to remember that when you start from scratch there is\n> absolutely  no  reason  to believe that you are going to do a better\n> job than you did the first time.\nIn  case of Bitcoin there is reason to believe that a rewrite would be\nbetter.  The first version was hacked together by far less programmers\nand  by at least one who did not care about readability, what tells me\nthat  he  possibly did never work on a real project before. And we now\nhave  a  known  to  work  protocol,  what  did  for sure slow down the\ndevelopment a lot and caused rewrites.\n\n\n\nMichael", "summary": "A programmer suggests a complete rewrite of Bitcoin's codebase, citing the need for clean and readable code, but disagrees with the idea of starting from scratch."}, {"author": "Michael Offel", "date": "2011-07-12T21:47:12", "message_text_only": "Monday, July 11, 2011, 12:31:20 AM, Jeff Garzik wrote:\n>> 2. isolation of modules\n> It is a long term goal to move towards 'libbitcoin\"\nWhat  about creating a branch and start libbtc by implementing a small\nmodule  like irc or p2p connection handling and use the new lib in the\nclient. I think this would be a proper start for a new clean code base\nwithout  having  a  non  functional  client  for some time and it also\nprovides  some  kind  of red line between libbtc (cleaned up code) and\nthe old code base, making it easy to maintain order.\nWould this approach be accepted for a merge?\n\n\nMonday, July 11, 2011, 12:36:53 AM, Matt Corallo wrote:\n>> While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and \n>> why Berkeley db 4 is used at all.\n> At the time Bitcoin began being built, Ubuntu 9.04 (or was it 9.10?) was\n> used, as it offered the oldest libc on the newest OS.  Ubuntu 9.04 just\n> happened to only have db4.7.  For backward compatibility, db4.7 has been\n> used ever since (except, for some reason, the osx builds).  In 0.4,\n> db4.8 will be used.  If you are asking why bdb was used to begin with,\n> why not? its an excellent db and why reinvent the wheel?\nIt  was  more  meant  as an rhetorical question. A documented decision\nwould give anyone the chance of arguing against the usage of a library\ninstead  of asking stupid questions. A mailing list archive suits well\nfor  this  type  of information, so let me try to get some information\nhere.  Db4  is  an  excellent  choice  if  you  need  indexed database\nfunctionality without SQL interface. But compared to an stl map lookup\nand  fopen,  fwrite  and  fclose  it  is much harder to understand and\nbrings  a  lot  performance  overhead.  This  is  true as long as your\ninformation are small enough to stay in main memory. A stl map storing\nfile  offsets  is  also  not that hard to write and understand. On the\nother  side  using  an  SQL  interface  would  bring  the advantage of\nswapping  database  providers.  An enterprise website could use oracle\nwhile the average user could use sqlite. Also is db4 used for any type\nof disk storage, this makes files like wallet.dat some kind of hard to\nread. It is in no way more secure than storing private key's in an xml\nfile. But it is much harder to maintain and understand by the user and\nthe average programer.\n\n> If you are on Windows, why are you on Windows? ;)\nI'm  forced  to to use windows by the type of clients I'm working for.\nAnd  during  leisure  I  like  to use a System that does not need much\neffort to simply do what it is made for. ;)\n\n>>\n>> 6. hardcoded values\n>>  \n>> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.\n> This one is an interesting debate.  There is no real reason to do this\n> aside from some questionable code cleanup.  Also, there is no reason to\n> encourage improperly-implemented alternate chains.  Alternate chains\n> should be designed in such a way as to share the main chain's difficulty\n> as described by Mike on the forum, not just make a new chain and hope it\n> sticks.\nIt  is  not  that  interesting  as it looks first. There is no good in\nrunning multiple chains for production use. To share the difficulty is\nindeed  a  good  start  to  solve  the problem. That's also one of the\nthings  I  don't  like  off  the QBitcoin client. What I meant is just\nto have the possibility to have all adjustable parameters in one place\nand  to  be  able  to  quickly build an internal testnet without crazy\nfirewalling  to prevent it from dying. The first would allow to detect\nproblematic ddos protection settings early and giving the average user\nthe  possibility  to adjust all important settings if he knows what he\ndoes.  That  includes  not  only alternate chains. One could choose to\ninclude  transactions  only  at  a  higher  fee  or  at no fee at all.\nEveryone could do such things by changing the code anyway. But not all\nbrilliant administrators or users are programmers.\n\n>> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.\n> True, but it is much higher priority to clean up the code than comment\n> it better, plus there are various other features/more user-facing issues\n> that need fixed as well, so...\nGood code is the best documentation anyway.\n\nMonday, July 11, 2011, 3:01:51 AM, Luke-Jr wrote:\n>> My overall suggestion is to begin a complete rewrite, inspired by the old\n>> code rather than moving a lot of \"known to be somehow functional\" around.\n> There are many rewrites in progress, often with much better designs.\nThere  is  no  other  client  that  uses  C  and is meant to be a full\nimplementation  and platform independent except QBitcoin. QBitcoin seems\nto  have  no  public repository to work on or I have overlooked it ?!?\nStarting  a  new client on my own is just like starting an other never\nending and never used open source project.\n\n>> The official Bitcoin client should be some kind of an reference project\n>> for other clients and must therefore be extra clean and well documented.\n> Bitcoin is supposed to be an authorityless project. There is no official.\nWhile there is no authority, there is just one fully working client to\nlook  at.  This  may  lead to an working but instable network if other\nclients are trying to interpret net.cpp and fail on it in details.\n\n>> *everything else*\n> Fix it yourself and submit the changes. If they don't get merged, fork.\nAs  I  said, there is no need for an other never ending story. I would\nlike  to  know  if  my affords have a chance to get merged or accepted\nbefore I start to work on it.\n\nTuesday, July 12, 2011, 4:31:07 AM, Gavin Andresen wrote:\n> We'll just tell everybody to stop using bitcoin so much for six months\n> or so while we implement a much better client.  It will be exactly\n> like the bitcoin we have now, except with a much nicer internal\n> architecture and much cleaner code-base, and we're pretty sure we can\n> get it done in six months if everything goes exactly as planned.\nIt  is  some  kind of arrogant to believe that anyone would stop using\nbitcoin  if some programers decide to stop working for some month. And\nit  is  also fond to not fix bugs in the old code base if they appear.\nAlso  there are lots of people out there using old clients anyway. The\nimportant  improvement is more about quick extendibility and therefore\nmore  feature  rich secure code. This would not only help the official\ncode  base,  it would also improve trust and result in better external\nbitcoin related projects.\n\n> Then again, it might be easier to modify the\n> CRITICAL_SECTION code to detect and report deadlocks (anybody have\n> experience doing that?).\nThat  would be true if possible, but I'm pretty sure that the only way\nto  detect  deadlocks  is  by either analyzing the code or single step\nsimulating it, what is really tricky on network applications.\n\nTuesday, July 12, 2011, 6:19:28 AM, Jeff Garzik wrote:\n>> While spying on the old code, I noticed one major problem that could be\n>> fixed quite easily. That is, the 1 class-per .h/.cpp rule is completely\n>> ignored in main.h/cpp and net.h/cpp If all of the classes in the project\n>> were re-factored to their own files,\n> This is about the last thing we should do, and it's one of the worst\n> coding practices of many C++ projects (and unfortunately carried over\n> to Java by force).  See Knuth and his work on literate programming.\n> Putting logically similar code -together- is often more impactful and\n> meaningful than splitting up files into dozens (hundreds or thousands,\n> in large projects) of tiny, 20-line files.\nWe  seem  to have very different opinions on that, but let's try to be\nobjective.  I  belive  that every class should be able to stand on its\nown.  That way it can be reused in other projects or situations in the\nsame  project.  And  it  is  much  more easy to catch and extend class\nbehavior  if  it  is isolated to one file instead of multiple files or\nmixed between other class methods in one file. On the other hand, what\nis  bad  on  having  50-80  code  files in bitcoin? In terms of source\ncontrol  it  even  gives some kind of easier to read history and fewer\nmerge  conflicts.  When  you  start  writing  a  class for exactly one\npropose  in  one specific situation used by one other class you should\nthink   about  writing  a  nested  class,  which  can  and  should  be\nimplemented in the same cpp file. That way you can achieve you similar\ncode in one location while accepting the rule others like.\nAnother nice side effect is the ability to see a class dependency list\nbe looking at the include listing.\n\nTuesday, July 12, 2011, 8:21:12 AM, John Smith wrote:\n> re:4) I also don't see why boost would be a 'nonstandard\n> dependency'. From what I understand, a large part of the new C++0x\n> standard is derived from boost. Also C++ compilers are getting\n> faster and more smart all the time, so I absolutely don't see \"build speed\" as a goal.\nDon't  get  me  wrong. If boost would be used for something meaningful\nthere  would  be  no point in removing it. Everything non questionable\nabout boost does already find its way into most stl implementations.\nAnd  everything  that find it's way into C++ 0x does it for the reason\nthat  it  is  better handled by an language extension than by an boost\nconstruct. Otherwise there would be no point in extending the language.\n\nMichael", "summary": "A discussion on the Bitcoin client's codebase, including suggestions for a new clean code base, moving hardcoded values to a chain description file, and the use of boost and Berkeley db. The importance of clean and well-documented code is emphasized."}, {"author": "Gregory Maxwell", "date": "2011-07-12T23:40:46", "message_text_only": "On Tue, Jul 12, 2011 at 5:47 PM, Michael Offel <michael.offel at web.de> wrote:\n> We \u00a0seem \u00a0to have very different opinions on that, but let's try to be\n> objective. \u00a0I \u00a0belive \u00a0that every class should be able to stand on its\n> own. \u00a0That way it can be reused in other projects or situations in the\n> same \u00a0project. \u00a0And \u00a0it \u00a0is \u00a0much \u00a0more easy to catch and extend class\n\nObjectively, your believes have only the weight of the electrons they are\nprinted on, so long as you're talking and not coding.\n\nI don't mean that as an insult\u2014 I'm sure many people value your ideas\nbut when you disagree with someone who is actually coding you'll\neventually lose every time.  Talk is cheap.\n\n(And I'm guilty of this too\u2014 but aware of my lacking commits I'm\ncertainly not going to expect anyone to listen to _coding style_ advice.\n I try to keep my comments to crap I can measure and speculate about.)\n\n[snip]\n> In terms of source\n> control \u00a0it \u00a0even \u00a0gives some kind of easier to read history and fewer\n> merge \u00a0conflicts. \u00a0When \u00a0you \u00a0start \u00a0writing \u00a0a \u00a0class for exactly one\n> propose \u00a0in \u00a0one specific situation used by one other class you should\n\nCertainly no modern SCM has major issues with merge conflicts due to\nshared files.\n\nBitcoin is a _tiny_ piece of software... on the order of 20kloc. It's a\na scale where someone competent can read it in a day and have a basic\noverall understanding of it in a few.\n\nThis fact makes the aesthetics talk seem like pointless shed-painting\nespecially coming from people who are yet doing substantial work.\n\nThe proposal about reimplementing parts as libraries and the switching\nto them after validating them is a fine one.  I suggest you do it.\nHaving multiple work on such projects would not be wasted effort,\nas we'd all learn from the competition in designs/APIs/and targets for\ncomparative testing.\n\nThe interesting logic, however, is not net.cpp... because nothing too\nawful happens if peers get confused and drop their connections here\nand there. The critical logic is the blockchain validation logic. Which\nmust make absolutely identical decisions on all nodes and which has a\nlot of corner cases which are difficult to test and might expose\nbehavioral differences.\n\nThere is also a lot of neat functionality in the scripts which is\ncurrently disabled because of a lack of confidence about the\nsecurity of that code.\n\nSo not only are new, clean, secondary implementations of this logic\nneeded, but good automatic testing shims which can find\ninconsistencies between implementations.\n\n(Testing rigs are often an excellent area of work for people new to\na project.)", "summary": "A discussion about coding style and reusability in software development, with a suggestion to reimplement parts as libraries and focus on blockchain validation logic."}, {"author": "Matt Corallo", "date": "2011-07-13T00:17:59", "message_text_only": "On Tue, 2011-07-12 at 22:47 +0100, Michael Offel wrote:\n> Monday, July 11, 2011, 12:31:20 AM, Jeff Garzik wrote:\n> >> 2. isolation of modules\n> > It is a long term goal to move towards 'libbitcoin\"\n> What  about creating a branch and start libbtc by implementing a small\n> module  like irc or p2p connection handling and use the new lib in the\n> client. I think this would be a proper start for a new clean code base\n> without  having  a  non  functional  client  for some time and it also\n> provides  some  kind  of red line between libbtc (cleaned up code) and\n> the old code base, making it easy to maintain order.\n> Would this approach be accepted for a merge?\nI had been planning on, and putting off starting work on, a central hub\ninfrastructure to Bitcoin until fairly recently.  Its a central hub\nwhere net/main/wallet/etc can subscribe to get notified of new\nblocks/txes/etc, push new blocks/txes/etc and can get information about\nblocks/txes/etc.  I started work fairly recently, but hopefully it will\nbe functional sometime in the not-too-distant future.\nAs I said earlier, the Bitcoin code base really isn't all that messy,\nits only its lack of clear lines between classes that makes it seem that\nway.  It does some things inefficiently, however its general algorithms\nare quite good the way they stand.  (though net could probably stand a\nground-up rewrite of the backend).  If you want to rewrite for a more\noptimized handling of p2p connections/etc, it would be apprecitated and\n(assuming its done well) certainly merged.\n> \n> It  was  more  meant  as an rhetorical question. A documented decision\n> would give anyone the chance of arguing against the usage of a library\n> instead  of asking stupid questions. A mailing list archive suits well\n> for  this  type  of information, so let me try to get some information\n> here.  Db4  is  an  excellent  choice  if  you  need  indexed database\n> functionality without SQL interface. But compared to an stl map lookup\n> and  fopen,  fwrite  and  fclose  it  is much harder to understand and\n> brings  a  lot  performance  overhead.  This  is  true as long as your\n> information are small enough to stay in main memory. A stl map storing\n> file  offsets  is  also  not that hard to write and understand. On the\n> other  side  using  an  SQL  interface  would  bring  the advantage of\n> swapping  database  providers.  An enterprise website could use oracle\n> while the average user could use sqlite. Also is db4 used for any type\n> of disk storage, this makes files like wallet.dat some kind of hard to\n> read. It is in no way more secure than storing private key's in an xml\n> file. But it is much harder to maintain and understand by the user and\n> the average programer.\nI can't speak for satoshi here, but I would agree with his decision on\nthe grounds that BDB offers a good mix.  Compared to a sql-driven\nlibrary, it offers a much lighter-weight footprint.  Compared to rolling\nour own, its much, much simpler to use the existing code that people\nhave spent years writing/optimizing/fixing/etc.  It also provides good\nDatabase transactioning which Bitcoin does depend on on some (rare,\nthough hopefully less so as time goes on) circumstances.\n> \n> >>\n> >> 6. hardcoded values\n> >>  \n> >> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.\n> > This one is an interesting debate.  There is no real reason to do this\n> > aside from some questionable code cleanup.  Also, there is no reason to\n> > encourage improperly-implemented alternate chains.  Alternate chains\n> > should be designed in such a way as to share the main chain's difficulty\n> > as described by Mike on the forum, not just make a new chain and hope it\n> > sticks.\n> It  is  not  that  interesting  as it looks first.\nInteresting might have been the wrong word.  Let me rephrase that too\n\"of hot topic if you ask several people who incessantly create new\nchains for no reason other than to create new chains\".\n> There is no good in\n> running multiple chains for production use. To share the difficulty is\n> indeed  a  good  start  to  solve  the problem. That's also one of the\n> things  I  don't  like  off  the QBitcoin client. \nNeither the original client nor any other client or patch currently\nimplements work-sharing, I don't think you understood my statement here.\nI was referring to http://forum.bitcoin.org/?topic=7219.0\n\n> What I meant is just\n> to have the possibility to have all adjustable parameters in one place\n> and  to  be  able  to  quickly build an internal testnet without crazy\n> firewalling  to prevent it from dying. The first would allow to detect\n> problematic ddos protection settings early and giving the average user\n> the  possibility  to adjust all important settings if he knows what he\n> does.\nThose parameters are available, though I don't think they show up in\n--help output.  If someone had the time to go back and document the\nparameters not in --help, it would be much appreciated ;)\n> That  includes  not  only alternate chains. One could choose to\n> include  transactions  only  at  a  higher  fee  or  at no fee at all.\n> Everyone could do such things by changing the code anyway. But not all\n> brilliant administrators or users are programmers.\nThat is yet another debated issue.  The transaction (relay) fees are\nthere for a reason much more than just for the hell of it.  If\ntransaction (relay) fees were easily changeable, they would serve no\npurpose as they would all be set to 0.  Transaction fee handling needs a\nrethinking and recoding, but offering each user the option to just relay\nevery transaction off the wire is not an option.\n\n> \n> Tuesday, July 12, 2011, 4:31:07 AM, Gavin Andresen wrote:\n> > We'll just tell everybody to stop using bitcoin so much for six months\n> > or so while we implement a much better client.  It will be exactly\n> > like the bitcoin we have now, except with a much nicer internal\n> > architecture and much cleaner code-base, and we're pretty sure we can\n> > get it done in six months if everything goes exactly as planned.\n> It  is  some  kind of arrogant to believe that anyone would stop using\n> bitcoin  if some programers decide to stop working for some month. And\n> it  is  also fond to not fix bugs in the old code base if they appear.\n> Also  there are lots of people out there using old clients anyway. The\n> important  improvement is more about quick extendibility and therefore\n> more  feature  rich secure code. This would not only help the official\n> code  base,  it would also improve trust and result in better external\n> bitcoin related projects.\nThat was not at all the point of that comment.  Trying to fix bugs on an\nold codebase while rewriting a new one is worthless and just creating\nway more effort than is necessary.\n\nMatt\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110713/9d27706e/attachment.sig>", "summary": "Developers discuss the possibility of creating a new clean code base for Bitcoin, with a central hub infrastructure and a new library."}, {"author": "Mike Hearn", "date": "2011-07-13T11:50:38", "message_text_only": "For what it's worth,\u00a0BitCoinJ has a NetworkParameters abstraction that\ndoes what you suggest (groups all the constants together):\n\n  http://code.google.com/p/bitcoinj/source/browse/trunk/src/com/google/bitcoin/core/NetworkParameters.java\n\nIt exists primarily to make unit testing easier. In the test suite, we\noften build small chains and other structures. We do this by using a\nNetworkParameters that has the easiest difficulty possible. It means\nyou can solve blocks in a few attempts, easily fast enough to build\ntest chains of any length you like.\n\nI suspect that as the test suite expands, a similar abstraction will\nbe introduced to the Satoshi client.", "summary": "BitCoinJ has a NetworkParameters abstraction that groups constants together, primarily to make unit testing easier, and may be introduced to the Satoshi client."}, {"author": "Andy Parkins", "date": "2011-07-13T13:04:09", "message_text_only": "On 2011 July 13 Wednesday, Mike Hearn wrote:\n> For what it's worth, BitCoinJ has a NetworkParameters abstraction that\n> does what you suggest (groups all the constants together):\n\n\"all\" is a strong word :-)\n\nI'm doing a similar thing, and so far I have (and it's definitely incomplete) \nthe following for these magic-constants that are often literals in the offical \nclient:\n\n\tTBlock *GenesisBlock;\n\tTBitcoinHash ProofOfWorkLimit;\n\tuint16_t DefaultTCPPort;\n\tuint32_t Magic;\n\tuint8_t BitcoinAddressPrefix;\n\n\tunsigned int COINBASE_MATURITY;\n\tunsigned int COINBASE_MINIMUM_SCRIPT_SIZE;\n\tunsigned int COINBASE_MAXIMUM_SCRIPT_SIZE;\n\tunsigned int MAX_BLOCK_SIZE;\n\tunsigned int MAX_BLOCK_SIZE_GEN;\n\tunsigned int MAX_BLOCK_SIGOPS;\n\tunsigned int MINIMUM_TRANSACTION_SIZE;\n\tTCoinsElement MIN_MONEY;\n\tTCoinsElement MAX_MONEY;\n\tTCoinsElement MIN_TX_FEE;\n\n\tTCoinsElement INITIAL_MINING_REWARD;\n\tunsigned int INFLATION_PERIOD;\n\n\tunsigned int BLOCK_TIMESTAMP_WINDOW;\n\tunsigned int DIFFICULTY_TIMESPAN;\n\tunsigned int NEW_BLOCK_PERIOD;\n\n\tunsigned int INV_MAX;\n\tunsigned int GETDATA_MAX;\n\tunsigned int GETBLOCKS_RESPONSES_MAX;\n\tunsigned int GETHEADERS_RESPONSES_MAX;\n\tunsigned int ADDR_MAX;\n\tunsigned int ADDR_MIN_TIME;\n\tunsigned int ADDR_MAX_TIME_OFFSET;\n\tunsigned int ADDR_DEFAULT_TIME_PENALTY;\n\tunsigned int ASSUME_OFFLINE_AFTER;\n\tunsigned int OFFLINE_UPDATE_INTERVAL;\n\tunsigned int ONLINE_UPDATE_INTERVAL;\n\n\tmap<unsigned int, TBitcoinHash> Checkpoints;\n\n\tstatic const TBitcoinHash NULL_REFERENCE_HASH;\n\tstatic const unsigned int NULL_REFERENCE_INDEX;\n\nAny suggestions for others gratefully received.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110713/ae0f506a/attachment.sig>", "summary": "Dr. Andy Parkins is working on a similar project to BitCoinJ's NetworkParameters abstraction, which groups together constants used in the official client."}, {"author": "Luke-Jr", "date": "2011-07-13T18:37:57", "message_text_only": "On Wednesday, July 13, 2011 9:04:09 AM Andy Parkins wrote:\n> \tTCoinsElement MAX_MONEY;\n\nThis isn't an arbitrary constant, it's the result of a calculation...", "summary": "A programmer defines a constant value based on a calculation, not just an arbitrary number."}, {"author": "Andy Parkins", "date": "2011-07-13T21:41:29", "message_text_only": "On Wednesday 13 July 2011 19:37:57 Luke-Jr wrote:\n> On Wednesday, July 13, 2011 9:04:09 AM Andy Parkins wrote:\n> > \tTCoinsElement MAX_MONEY;\n> \n> This isn't an arbitrary constant, it's the result of a calculation...\n\nDon't tell me:\n\nbitcoin/src/main.h:41\nstatic const int64 MAX_MONEY = 21000000 * COIN\n\n21,000,000 seems pretty arbitrary to me.\n\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com", "summary": "A debate over the arbitrary nature of the constant value of 21 million in Bitcoin's code, which represents the maximum number of coins that can be mined."}], "thread_summary": {"title": "overall bitcoin client code quality", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "John Smith", "Douglas Huff", "Michael Offel", "Mike Hearn", "Alan Grimes", "Gregory Maxwell", "Andy Parkins", "Matt Corallo", "Gavin Andresen"], "messages_count": 18, "total_messages_chars_count": 48766, "convo_summary": "Developers discuss the need for a discussion on code quality for Bitcoin due to poor documentation, module isolation, thread usage, long build times, style guide, and hardcoded values. Suggestions for a complete rewrite are met with disagreement, with some suggesting refactoring instead. The importance of clean and well-documented code is emphasized, with suggestions for creating a new clean code base and introducing NetworkParameters abstraction. There is a debate over the arbitrary nature of the constant value of 21 million in Bitcoin's code."}}, {"title": "[Bitcoin-development] Wallet crypto merged", "thread_messages": [{"author": "Jeff Garzik", "date": "2011-07-13T02:47:05", "message_text_only": "Merged wallet crypto.  Test (and review) away...\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Jeff Garzik invites testing and reviewing of merged wallet crypto technology developed by exMULTI, Inc."}], "thread_summary": {"title": "Wallet crypto merged", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik"], "messages_count": 1, "total_messages_chars_count": 102}}, {"title": "[Bitcoin-development] Notifications from client/wallet", "thread_messages": [{"author": "John Smith", "date": "2011-07-14T05:19:11", "message_text_only": "Hello all,\n\nI'd like to add notifications to the client and wallet, to decouple UI and\ncore communication, and especially so that UIs no longer have to poll for\nchanges.\n\nI propose to use the boost::signal mechanism for that. It is basically a\nglorified callback system, but allows decoupled delivery of 'signals' from\nan object. Multiple other objects can listen in on an event without the\nemitting object having to care.\n\nWallet:\n\nclass CWallet { ...\n    boost::signal<void(int64)> balanceChanged;\n}\n\nvoid CWallet::newTx (...) {\n    ...\n    balanceChanged(new_balance);\n    ...\n}\n\n\nUI:\n\nGUI::GUI(CWallet *wallet) {\n   ...\n   wallet->balanceChanged.connect(boost::bind(&GUI::balanceChanged, this,\n_1));\n}\nGUI::balanceChanged(int64 new_balance) {\n   someWidget->setValue(new_balance);\n}\n\nSpecific notifications that would be useful:\n\nWallet:\n\n   - balanceChanged(int64): spendable balance changed\n   - transactionAdded(int256): new transaction added to wallet\n   - transactionUpdated(int256): transaction info changed\n   - transactionRemoved(int256): transaction removed from wallet (can this\n   happen? for completeness)\n   - addressAdded(int160): address was added to address book\n   - addressUpdated(int160): address label/other metadata was modified\n   - addressRemoved(int160): address was removed from address book\n   - notification(std::string message, int severity): warning/error occured\n   in wallet processing, notify user\n   - int askFee(std::string message, ...): ask user for fee\n\nNetwork client:\n\n   - numConnectionsChanged(int): new connections / connections broken\n   - numBlocksChanged(int): new blocks came in or other changes to block\n   chain\n   - notification(std::string message, int severity): warning/error occured\n   in network processing, notify user\n\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110714/f39ec2f5/attachment.html>", "summary": "Proposal to use boost::signal mechanism to add notifications to decouple UI and core communication in the client and wallet. Specific notifications listed."}, {"author": "Pieter Wuille", "date": "2011-07-14T09:10:42", "message_text_only": "On Thu, Jul 14, 2011 at 05:19:11AM +0000, John Smith wrote:\n> Hello all,\n> \n> I'd like to add notifications to the client and wallet, to decouple UI and\n> core communication, and especially so that UIs no longer have to poll for\n> changes.\n> \n> I propose to use the boost::signal mechanism for that. It is basically a\n> glorified callback system, but allows decoupled delivery of 'signals' from\n> an object. Multiple other objects can listen in on an event without the\n> emitting object having to care.\n\nI like this idea. Matt and I were considering a similar system for the internal\ncommunication between net/wallet/blockdb/mempool, but weren't really aware of\nboost::signal. I looked at it, and really seems to provide everything necessary.\n\n> Specific notifications that would be useful:\n> \n> Wallet:\n> \n>    - balanceChanged(int64): spendable balance changed\n\nMaybe even per-account?\n\n>    - transactionAdded(int256): new transaction added to wallet\n>    - transactionUpdated(int256): transaction info changed\n\nDoes that include more confirmations? I think we'd first need to define what\nexactly is relevant information for transactions. It could be defined in\nterms of a/some high-level information request functions for transactions, so\nGUI/RPC don't inspect the wallet datastructures themselves anymore:\n* GetTransactionState(): return state (immature, generated, unconfirmed,\n                         rejected, confirmed), and number of confirmations.\n                         (possibly using the negative number of confirmations\n                         semantics as described here:\n               http://forum.bitcoin.org/index.php?topic=5920.msg328468#msg328468.\n* GetBroadcasts(): return either -1 (unknown) or some integer denoting how often\n                   this tx was broadcast. The \"0/offline\" state is equal to \n                   unconfirmed + 0 broadcasts\n* GetInputs(): return a list of pairs (uint256 txId, int nOffset, int64 nAmount)\n* GetOutputsToMe(): return a list of pairs (address addr, string label, fBool isChange,\n                int64 nAmount, bool fGenerated, bool fAvailable) describing all\n                To-Me outputs\n* GetOutputsToOthers(): return a list of pairs (address addr, string label,\n                        int64 nAmount)\n* GetFee(): get the fee paid\n\nThe only things that can change while the transaction is already in the wallet seems\nto be GetTransactionState() and GetBroadcasts(), so those would cause a\ntransactionUpdated event?\n\nAdding/removing private keys from the wallet may change the other outputs, so i suppose\nthose are also candidates for causing this event.\n\n     - transactionRemoved(int256): transaction removed from wallet (can this\n>    happen? for completeness)\nfor now, that can't happen, but if something like unspending/rejecting/detection\nof conflicting transactions is added, it may.\n\n>    - addressAdded(int160): address was added to address book\n>    - addressUpdated(int160): address label/other metadata was modified\n>    - addressRemoved(int160): address was removed from address book\n>    - notification(std::string message, int severity): warning/error occured\n>    in wallet processing, notify user\n\nOk.\n\n>    - int askFee(std::string message, ...): ask user for fee\n\nYou simply mean the \"Transaction requires fee of ..., agree?\" message?\n\nRegarding wallet encryption, we could use a\n\n     - string askPassphrase()\n\nmaybe?\n\n> Network client:\n> \n>    - numConnectionsChanged(int): new connections / connections broken\n>    - numBlocksChanged(int): new blocks came in or other changes to block\n>    chain\n>    - notification(std::string message, int severity): warning/error occured\n>    in network processing, notify user\n\nOk; those would need to be implemented as globals until a more modular structure\nis implemented.\n\n-- \nPieter", "summary": "Proposal to use boost::signal for notifications in Bitcoin client and wallet, allowing decoupled delivery of signals from an object. Specific notifications suggested."}, {"author": "Matt Corallo", "date": "2011-07-14T14:13:04", "message_text_only": "This sounds cool, I started implementing the other half of this a couple\ndays ago.  My broad idea of a source cleanup (that sipa largely wrote)\nis to have a central notification interface which wallet(s)/net/block\nstore/etc all communicate with, and then an interface, like the one\nproposed here, which GUI/RPC/etc use to communicate with wallet/net.\nThis should allow for very clean separation of pieces and large-scale\nrewrites of one or another part (or drop-in replacements) without\ntouching anything but the parts that are being redone.  This should also\nallow for cool programs (like pushpoold/a block notification server/etc)\nto use Bitcoin as a library fairly efficiently.\n\nMatt\n\nOn Thu, 2011-07-14 at 05:19 +0000, John Smith wrote:\n> Hello all,\n> \n> I'd like to add notifications to the client and wallet, to decouple UI\n> and core communication, and especially so that UIs no longer have to\n> poll for changes. \n> \n> I propose to use the boost::signal mechanism for that. It is basically\n> a glorified callback system, but allows decoupled delivery of\n> 'signals' from an object. Multiple other objects can listen in on an\n> event without the emitting object having to care. \n> \n> Wallet:\n> \n> class CWallet { ...\n>     boost::signal<void(int64)> balanceChanged;\n> }\n> \n> \n> void CWallet::newTx (...) {\n> \n>     ...\n>     balanceChanged(new_balance);\n>     ...\n> }\n> \n> \n> \n> UI:\n> \n> GUI::GUI(CWallet *wallet) {\n>    ...\n>    wallet->balanceChanged.connect(boost::bind(&GUI::balanceChanged,\n> this, _1));\n> }\n> GUI::balanceChanged(int64 new_balance) {\n>    someWidget->setValue(new_balance);\n> }\n> \n> \n> Specific notifications that would be useful:\n> \n> Wallet:\n>       * balanceChanged(int64): spendable balance changed\n>       * transactionAdded(int256): new transaction added to wallet\n>       * transactionUpdated(int256): transaction info changed\n>       * transactionRemoved(int256): transaction removed from wallet\n>         (can this happen? for completeness)\n>       * addressAdded(int160): address was added to address book\n>       * addressUpdated(int160): address label/other metadata was\n>         modified\n>       * addressRemoved(int160): address was removed from address book\n>       * notification(std::string message, int severity): warning/error\n>         occured in wallet processing, notify user\n>       * int askFee(std::string message, ...): ask user for fee\n> Network client:\n>       * numConnectionsChanged(int): new connections / connections\n>         broken\n>       * numBlocksChanged(int): new blocks came in or other changes to\n>         block chain\n>       * notification(std::string message, int severity): warning/error\n>         occured in network processing, notify user\n> \n> JS\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110714/efb85581/attachment.sig>", "summary": "Proposal to add notifications to Bitcoin client and wallet using boost::signal mechanism for decoupled delivery of signals from an object."}], "thread_summary": {"title": "Notifications from client/wallet", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Pieter Wuille", "Matt Corallo"], "messages_count": 3, "total_messages_chars_count": 8801, "convo_summary": "The group discussed using boost::signal to add notifications to the Bitcoin client and wallet, allowing for decoupled communication between the UI and core. Specific notifications were suggested and the proposal was well received."}}, {"title": "[Bitcoin-development] Listing of generation transactions", "thread_messages": [{"author": "St\u00e9phane Gimenez", "date": "2011-07-15T00:48:24", "message_text_only": "Hello all,\n\nAfter reading pull/417, I'm noticing that generation transactions\nalways appear twice in listtransaction output:\n\n * one item with account \"\" and category \"generate\"/\"imature\"/\"orphan\",\n   plus some transaction data.\n\n * one with the account associated to the destination address and\n   category \"received\", plus the same transaction data.\n\nBoth items have the same txid.\n\nIs this the intended behavior or should the second be removed?\n\nAlso, why is account \"\" enforced in the first item?\n(Wrong assumption that coinbase is always built from the client\nitself?).\n\nLast, it happens that {list,get}receivedby{address,account} commands\nnever list or take into account generation transactions. I'm not sure\nhow the help message associated to those commands should be\nunderstood. As a user, I would assume that generated transaction are\nincluded in these listings/amounts.\n\nIs all this related with some issues encountered by E-wallet\nproviders?\n\nThanks,\nSt\u00e9phane", "summary": "The author questions the behavior of generation transactions appearing twice in listtransaction output and why account \"\" is enforced in the first item."}, {"author": "St\u00e9phane Gimenez", "date": "2011-07-15T16:08:34", "message_text_only": "> After reading pull/417, I'm noticing that generation transactions\n> always appear twice in listtransaction output:\n>\n>  * one item with account \"\" and category \"generate\"/\"imature\"/\"orphan\",\n>    plus some transaction data.\n>\n>  * one with the account associated to the destination address and\n>    category \"received\", plus the same transaction data.\n\nSorry! the item duplication was due to the pull. (very stupid me)\n\nThe issue with account \"\" remains.\n\nFor coinbase transactions, we may list one \"generated\" item per txout\nthat corresponds to an owned address. Accounts would be associated\naccordingly, in the same way as for usual \"received\" amounts. Account\nbalances would also take into account these generated amounts in the\nobvious way.\n\nWould that be ok? I think few people rely on these specific details,\nand they would be happy with such a change. Moreover, this would\nactually simplify the code a little bit.\n\n\n> Last, it happens that {list,get}receivedby{address,account} commands\n> never list or take into account generation transactions. I'm not sure\n> how the help message associated to those commands should be\n> understood. As a user, I would assume that generated transaction are\n> included in these listings/amounts.\n>\n> Is all this related with some issues encountered by E-wallet\n> providers?", "summary": "Generation transactions appear twice in listtransaction output. For coinbase transactions, one \"generated\" item per txout that corresponds to an owned address may be listed. The issue with account \"\" remains. The {list,get}receivedby{address,account} commands never list or take into account generation transactions."}], "thread_summary": {"title": "Listing of generation transactions", "categories": ["Bitcoin-development"], "authors": ["St\u00e9phane Gimenez"], "messages_count": 2, "total_messages_chars_count": 2286, "convo_summary": "The author questions why generation transactions appear twice in listtransaction output and why account \"\" is enforced in the first item. Generation transactions appear twice in listtransaction output, and the {list,get}receivedby{address,account} commands never list or take into account generation transactions."}}, {"title": "[Bitcoin-development] Wallet encryption migration", "thread_messages": [{"author": "Luke-Jr", "date": "2011-07-15T02:50:42", "message_text_only": "Just wanted to get these suggestions out here:\n1. Write over the old, unencrypted wallet.dat a couple of times with pseudo-\n   random data in an attempt to secure-delete it.\n2. Mark all the keys imported from an unencrypted file (wallet or otherwise)\n   as \"potentially compromised\" and never use them for new addresses\n   (basically, don't use the old keypool for getnewaddress, change, and such).", "summary": "Securely delete old wallet.dat by overwriting with random data. Mark keys from unencrypted files as potentially compromised and avoid using them for new addresses."}, {"author": "Arthur Britto", "date": "2011-07-16T22:38:02", "message_text_only": "On Thu, Jul 14, 2011 at 7:50 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> Just wanted to get these suggestions out here:\n> 1. Write over the old, unencrypted wallet.dat a couple of times with\n> pseudo-\n>   random data in an attempt to secure-delete it.\n>\n\nWriting zeros just once should be sufficient:\nhttp://cmrr.ucsd.edu/people/Hughes/DataSanitizationTutorial.pdf\n\n-Arthur\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/53d6f237/attachment.html>", "summary": "Luke-Jr suggests overwriting old wallet.dat with random data to secure-delete it. Arthur suggests writing zeros once is sufficient."}, {"author": "Gregory Maxwell", "date": "2011-07-17T08:01:47", "message_text_only": "On Thu, Jul 14, 2011 at 10:50 PM, Luke-Jr <luke at dashjr.org> wrote:\n> Just wanted to get these suggestions out here:\n> 1. Write over the old, unencrypted wallet.dat a couple of times with pseudo-\n> \u00a0 random data in an attempt to secure-delete it.\n> 2. Mark all the keys imported from an unencrypted file (wallet or otherwise)\n> \u00a0 as \"potentially compromised\" and never use them for new addresses\n> \u00a0 (basically, don't use the old keypool for getnewaddress, change, and such).\n\nOn Sat, Jul 16, 2011 at 6:38 PM, Arthur Britto <ahbritto at gmail.com> wrote:\n> Writing zeros just once should be sufficient:\n\nOn many (most?) modern Unix file systems writing zeros just once is\nnot sufficient because the data won't be written in place, but\nmultiple writes aren't any better.\n\nMoving the keypool addresses aside so they won't be used sounds like a\ngood idea.\n\nThe lamest thing is that there is no way for wallet to be\nborn-encrypted. So the only way to prevent a leak is to build the\nwallet initially on a ramdisk or the like, then move it over after\nencrypting it.\n\nAt least luke-jr's (2) would make the key leak on a new wallet\ninconsequential\u2014 since all keys in it are keypool keys at that point.\nSo I really think it ought to be done.", "summary": "Suggestions for securing wallet.dat: overwrite with random data, mark imported keys as compromised, move keypool addresses aside, build wallet on encrypted ramdisk."}], "thread_summary": {"title": "Wallet encryption migration", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Arthur Britto", "Gregory Maxwell"], "messages_count": 3, "total_messages_chars_count": 2187, "convo_summary": "Luke-Jr recommends securely deleting old wallet.dat by overwriting it with random data and marking keys from unencrypted files as potentially compromised. Arthur Britto suggests writing zeros once is enough. Gregory Maxwell suggests overwriting with random data, marking imported keys as compromised, moving keypool addresses aside, and building the wallet on an encrypted ramdisk for added security."}}, {"title": "[Bitcoin-development] The forums...", "thread_messages": [{"author": "John Smith", "date": "2011-07-16T09:34:15", "message_text_only": "I'm getting really, really annoyed by the forums.\n\nCan we please please remove the link to them from bitcoin.org, and replace\nit with a forum that has but one goal: help users of bitcoin (and merchants,\nand developers)?\n\nNo speculation about economic or political futures, no philosophical pissing\ncontests, no \"I trust/distrust this/that exchange/company\" FUD, no repeated\ndiscussion of things already answered in the FAQ, etc.\n\nThere is a place for all of those, but not in the official forums of an open\nsource project. IMO, if we link an official forum from bitcoin.org at all,\nit should be a neutral place for helping people adopt the technology (a bit\nlike the Ubuntu forums, for example).\n\nJust my two bitcents...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/5637b7fb/attachment.html>", "summary": "A request to remove the link to the forums from bitcoin.org and replace it with a neutral forum that helps users, merchants, and developers adopt the technology."}, {"author": "Matt Corallo", "date": "2011-07-16T10:54:39", "message_text_only": "If we had the moding power, yes, but we don't have nearly enough people\nwho could mod such a forum.\n\nMatt\n\nOn Sat, 2011-07-16 at 09:34 +0000, John Smith wrote:\n> \n> I'm getting really, really annoyed by the forums.\n> \n> Can we please please remove the link to them from bitcoin.org, and\n> replace it with a forum that has but one goal: help users of bitcoin\n> (and merchants, and developers)?\n> \n> No speculation about economic or political futures, no philosophical\n> pissing contests, no \"I trust/distrust this/that exchange/company\"\n> FUD, no repeated discussion of things already answered in the FAQ,\n> etc. \n> \n> There is a place for all of those, but not in the official forums of\n> an open source project. IMO, if we link an official forum from\n> bitcoin.org at all, it should be a neutral place for helping people\n> adopt the technology (a bit like the Ubuntu forums, for example). \n> \n> Just my two bitcents...\n> \n> JS\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/a0006723/attachment.sig>", "summary": "A forum user suggests removing the link to the Bitcoin forums from the official website and replacing it with a more helpful and neutral forum."}, {"author": "John Smith", "date": "2011-07-16T11:07:02", "message_text_only": "On Sat, Jul 16, 2011 at 10:54 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> If we had the moding power, yes, but we don't have nearly enough people\n> who could mod such a forum.\n>\n\n\nI think a simpler forum would also be easier to moderate. Main criterion: is\nit helpful to users? If not, lock/remove it.\n\nTwo categories: Technical Support, Development (which can be split up\nbetween client work, and other software/websites integrating bitcoin).\n\nThose two can be replicated per language if a large enough group exists in\nthat country that is also willing to maintain order.\n\nI have no problems with volunteering some time moderating, but not on the\ncurrent forums.\n\nIf this is really a capacity issue then IMO we should simply remove the link\nand come up with an alternative medium to address user issues (such as a\nmoderated mailing list).  But I don't really believe this. There's a ton of\nsuccessful forums that did pick the right structure and helpful moderators,\nand a lot of them are volunteer-driven.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/75d09834/attachment.html>", "summary": "Matt Corallo suggests creating a simpler forum with two categories: Technical Support and Development, which can be replicated per language."}, {"author": "John Smith", "date": "2011-07-16T11:20:05", "message_text_only": "I know most of the people actively working on bitcoin (and active on this\nlist) ignore the forums, for good reason. But there's a lot of people\n(everyone new?) that think the most active members of the forum have a major\ninfluence on the project's direction. Which is making us as developers look\nreally bad. As if we're some political faction that wants to bring down\nworld governments and unleash a global anarchistic doomsday scenario.\n\nIt really needs to be more down-to-earth. Ideally, the forum would simply be\na way to communicate with the *actual* users. For example, I use it for\nsoliciting user feedback on UI features.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/064ef97b/attachment.html>", "summary": "Bitcoin developers ignore forums, but new users think forum members influence project direction, making developers look bad. Forums should be for user feedback."}, {"author": "Jeff Garzik", "date": "2011-07-16T23:35:17", "message_text_only": "On Sat, Jul 16, 2011 at 7:20 AM, John Smith <witchspace81 at gmail.com> wrote:\n> I know most of the people actively working on bitcoin (and active on this\n> list) ignore the forums, for good reason. But there's a lot of people\n> (everyone new?) that think the most active members of the forum have a major\n> influence on the project's direction. Which is making us as developers look\n> really bad. As if we're some political faction that wants to bring down\n> world governments and unleash a global anarchistic doomsday scenario.\n>\n> It really needs to be more down-to-earth. Ideally, the forum would simply be\n> a way to communicate with the *actual* users. For example, I use it for\n> soliciting user feedback on UI features.\n\nI agree completely.\n\nWhile the owner of the forums and bitcoin.org is Missing In Action and\nhas not responded to emails in more than a week, we do have access to\nchange the main www.bitcoin.org home page, to link to another forum.\n\nOr we could simply de-link the current forum, as a first step.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Developers are concerned that the most active members of the Bitcoin forum are influencing the project's direction, making them look bad."}, {"author": "Douglas Huff", "date": "2011-07-17T01:16:55", "message_text_only": "On Jul 16, 2011, at 6:35 PM, Jeff Garzik wrote:\n\n> On Sat, Jul 16, 2011 at 7:20 AM, John Smith <witchspace81 at gmail.com> wrote:\n>> I know most of the people actively working on bitcoin (and active on this\n>> list) ignore the forums, for good reason. But there's a lot of people\n>> (everyone new?) that think the most active members of the forum have a major\n>> influence on the project's direction. Which is making us as developers look\n>> really bad. As if we're some political faction that wants to bring down\n>> world governments and unleash a global anarchistic doomsday scenario.\n>> \n>> It really needs to be more down-to-earth. Ideally, the forum would simply be\n>> a way to communicate with the *actual* users. For example, I use it for\n>> soliciting user feedback on UI features.\n> \n> I agree completely.\n> \n> While the owner of the forums and bitcoin.org is Missing In Action and\n> has not responded to emails in more than a week, we do have access to\n> change the main www.bitcoin.org home page, to link to another forum.\n> \n> Or we could simply de-link the current forum, as a first step.\n\nI say just kill the forum.bitcoin.org DNS entry along with it.\n\n-- \nDouglas Huff\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PGP.sig\nType: application/pgp-signature\nSize: 881 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/bad72c74/attachment.sig>", "summary": "Developers discuss the negative perception of Bitcoin forums and consider removing or replacing them to improve the project's image."}, {"author": "Jeff Garzik", "date": "2011-07-17T02:00:01", "message_text_only": "On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n> I say just kill the forum.bitcoin.org DNS entry along with it.\n\nHopefully sirius will do this when he moves forum.bitcoin.org to\nforum.bitcointalk.org.\n\nBut sirius is the only one with keys to bitcoin.org DNS, so....\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Jeff Garzik suggests removing the forum.bitcoin.org DNS entry, but only Sirius has the keys to bitcoin.org DNS."}, {"author": "Robert McKay", "date": "2011-07-17T02:12:42", "message_text_only": "On 7/17/11, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n>> I say just kill the forum.bitcoin.org DNS entry along with it.\n>\n> Hopefully sirius will do this when he moves forum.bitcoin.org to\n> forum.bitcointalk.org.\n>\n> But sirius is the only one with keys to bitcoin.org DNS, so....\n\nAt the risk of making myself very unpopular, perhaps it's the\ndevelopment project that should move to a new URL?\n\nRob", "summary": "Discussion about potentially moving the Bitcoin development project to a new URL due to issues with the current domain ownership."}, {"author": "Matt Corallo", "date": "2011-07-17T10:46:20", "message_text_only": "On Sun, 2011-07-17 at 03:12 +0100, Robert McKay wrote:\n> On 7/17/11, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> > On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n> >> I say just kill the forum.bitcoin.org DNS entry along with it.\n> >\n> > Hopefully sirius will do this when he moves forum.bitcoin.org to\n> > forum.bitcointalk.org.\n> >\n> > But sirius is the only one with keys to bitcoin.org DNS, so....\n> \n> At the risk of making myself very unpopular, perhaps it's the\n> development project that should move to a new URL?\n> \n> Rob\nIts not that people dislike the forums or dislike having the forums.\nIts that they are giving bitcoin a very, very bad name with all the\nillegal crap, etc in them to the point of even possibly creating legal\nrisk in the future.  So its best that the forums are marked as\nunofficial and not part of Bitcoin proper but just some group of kids\nwho for some reason think Bitcoin is good for their drug-buying habits.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/467e48a6/attachment.sig>", "summary": "A suggestion was made to move the Bitcoin development project to a new URL due to the illegal content on the forums."}, {"author": "Douglas Huff", "date": "2011-07-17T17:12:42", "message_text_only": "On Jul 17, 2011 5:46 AM, \"Matt Corallo\" <bitcoin-list at bluematt.me> wrote:\n> Its not that people dislike the forums or dislike having the forums.\nSpeak for yourself. I think they're a cesspool.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/21caa5db/attachment.html>", "summary": "Matt Corallo expressed his dislike for forums and called them a \"cesspool\" in an email to the Bitcoin mailing list."}, {"author": "John Smith", "date": "2011-07-18T04:36:49", "message_text_only": "On Sun, Jul 17, 2011 at 5:12 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n\n> On Jul 17, 2011 5:46 AM, \"Matt Corallo\" <bitcoin-list at bluematt.me> wrote:\n> > Its not that people dislike the forums or dislike having the forums.\n> Speak for yourself. I think they're a cesspool.\n\n\nYes they are. Which is why the current forums will be moved to another\ndomain. It grew into a monstrosity.\n\nOn the other hand, I do like forums in general.  It would be nice have an\nofficial help forum dedicated to just the client software (and protocol) and\nhow to use/integrate/modify it.  It should come with a link to the FAQ\nbefore posting.\n\nAlso, as a mailing list is (kind of) limited to text only, a forum makes it\neasier to discuss graphical subjects such as UI.\n\nThen again given the kind of people bitcoin seems to attract, it might be\nunrealistic to think a normal forum can be maintained... On the other hand,\npeople that misbehave can then be sent to the bitcointalk forums :-)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110718/0ed00591/attachment.html>", "summary": "Bitcoin forums are moving to another domain due to their current state as a \"cesspool.\" An official help forum for client software is suggested."}, {"author": "Luke-Jr", "date": "2011-07-17T12:30:50", "message_text_only": "On Sunday, July 17, 2011 6:59:58 AM John Smith wrote:\n> > At the risk of making myself very unpopular, perhaps it's the\n> > development project that should move to a new URL?\n> \n> So you'd want to rename the project?\n> \n> I'm not sure that'd be a good idea. For better or worse, even though most\n> people don't get it because they think it's about mining or investments,\n> the 'bitcoin' name has become pretty well-known.\n\nThe \"Satoshi Client\" doesn't really have a formal name yet.\nDon't confuse an implementation with the network itself.", "summary": "A suggestion was made to rename the Bitcoin development project, but it was met with resistance due to the well-known brand name."}, {"author": "Chris Acheson", "date": "2011-07-18T20:08:46", "message_text_only": "I've been pushing for the Bitcoin Stack-Exchange as our main\nuser/merchant support site:\n\n<http://area51.stackexchange.com/proposals/30763/bitcoin-crypto-currency>\n\nI think the Stack Exchange format is ideal, since the\nacceptable/unacceptable topics are defined in advance, and it has a good\nuser moderation/reputation system.  The site will be for technical and\nconceptual questions only, no politics or philosophy, and obviously no\nbuying and selling.  This makes it unattractive to the kooks and\nhucksters, and therefore unattractive to the trolls as well.\n\nAt the time of this writing, we still need 64 more people to commit to\nusing the site before it will launch, 48 of which need to be established\nStack Exchange users.  At the rate we've been going, the site should be\nup around the end of August.  I'd like to make it happen before then, so\nplease join up!\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 900 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110718/e9d5292e/attachment.sig>", "summary": "Bitcoin needs 64 more people to commit to using the Stack Exchange site for technical and conceptual questions before it launches."}, {"author": "John Smith", "date": "2011-07-19T06:54:45", "message_text_only": "Ah, right, I think stackexchange is pretty good for that. I committed.\n\nJS\n\nOn Mon, Jul 18, 2011 at 8:08 PM, Chris Acheson <chris_acheson at lavabit.com>wrote:\n\n> I've been pushing for the Bitcoin Stack-Exchange as our main\n> user/merchant support site:\n>\n> <http://area51.stackexchange.com/proposals/30763/bitcoin-crypto-currency>\n>\n> I think the Stack Exchange format is ideal, since the\n> acceptable/unacceptable topics are defined in advance, and it has a good\n> user moderation/reputation system.  The site will be for technical and\n> conceptual questions only, no politics or philosophy, and obviously no\n> buying and selling.  This makes it unattractive to the kooks and\n> hucksters, and therefore unattractive to the trolls as well.\n>\n> At the time of this writing, we still need 64 more people to commit to\n> using the site before it will launch, 48 of which need to be established\n> Stack Exchange users.  At the rate we've been going, the site should be\n> up around the end of August.  I'd like to make it happen before then, so\n> please join up!\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Storage Efficiency Calculator\n> This modeling tool is based on patent-pending intellectual property that\n> has been used successfully in hundreds of IBM storage optimization engage-\n> ments, worldwide.  Store less, Store more with what you own, Move data to\n> the right place. Try It Now!\n> http://www.accelacomm.com/jaw/sfnl/114/51427378/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110719/ab0207d0/attachment.html>", "summary": "Chris Acheson suggests using Bitcoin Stack-Exchange as the main user/merchant support site, citing its defined topics and user moderation system."}, {"author": "Chris Acheson", "date": "2011-07-19T17:07:53", "message_text_only": "Could we just get the forum link removed entirely?  The current Google\nsearch link does very little to disassociate the forum from the Bitcoin\nproject.  There's no need to have a forum link anyway, as there's\nalready a link to the wiki, which links to the forum, and can be edited\nto link to other unofficial forums as well.\n\nI just came across a thread by someone offering to sell a bitcoin mining\nvirus:\n\n<http://forum.bitcoin.org/index.php?topic=21524.0>\n\nI know there'd been complaints about illegal activity, but this is a\nwhole new level of bad PR compared to people just offering to sell\ndrugs.  Especially when there are responses like:\n\n\"Excuse me while I put this on every computer at my school.\"\n\n\"This would be so awesome if I could install it at every computer in my\ncollege lab. So many bitcoins for me.\"\n\nIt doesn't just look like some one-off cybercriminal spam, it looks like\nforum members in general support this kind of thing.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 900 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110719/2dd67f7f/attachment.sig>", "summary": "A request to remove the forum link from Google search results due to bad PR caused by a thread offering to sell a bitcoin mining virus."}], "thread_summary": {"title": "The forums...", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Jeff Garzik", "Luke-Jr", "Robert McKay", "Douglas Huff", "Chris Acheson", "Matt Corallo"], "messages_count": 15, "total_messages_chars_count": 15158, "convo_summary": "Bitcoin developers discuss the negative perception of forums and consider removing or replacing them to improve the project's image. Suggestions include creating a simpler forum with two categories, moving the Bitcoin development project to a new URL, and using Bitcoin Stack-Exchange as the main user/merchant support site. There is also a request to remove the forum link from Google search results due to bad PR caused by a thread offering to sell a bitcoin mining virus."}}, {"title": "[Bitcoin-development] [RFC] listtransactions reformatting", "thread_messages": [{"author": "Luke-Jr", "date": "2011-07-16T17:14:11", "message_text_only": "Example patch: http://tinyurl.com/6679go5\n\nChanges:\n* Additions to your wallet always are category:\"receive\", no matter what kind\n  of transaction\n* Generated coins have an extra key, from:\"generation\"\n* All transactions have a new key, status:\n  * \"orphan\" -- Another block chain invalidated this transaction (only for\n                generation?)\n  * \"validating\" -- Default stage for transactions; 0-2 confirmations for\n                    ordinary sends, and 0-100 for generated coins\n  * \"processing\" -- 3-6 confirms for ordinary sends; 101-120 for generated\n  * \"confirmed\" -- over 6/120 confirmations\n  * \"expired\" -- for ordinary sends that have timed out without getting into a\n                 block, or had its inputs otherwise respent\n\nThis change is proposed to fix webservices being ignorant of generated \ntransactions by keeping a standard category/format for all similar types of \nentries.\n\nThoughts?", "summary": "Wallet additions categorized as \"receive\", generated coins have \"generation\" key, transactions have new \"status\" keys for tracking confirmation progress. Proposed to fix web service issues."}, {"author": "St\u00e9phane Gimenez", "date": "2011-07-16T19:59:07", "message_text_only": "Hi,\n\nYou may have a look at the following proposal. It associates\ngenerations txouts with the appropriate addresses and accounts.\n(See my previous mail)\n\nhttps://github.com/sgimenez/bitcoin/commit/a8e6510042f2f7f951414c7da124668b30da4acd\n\n> * Additions to your wallet always are category:\"receive\", no matter\n>   what kind of transaction\n\nEither this, or maybe webservices should be told to forget about\ncategories and to rely only on the sign of the amounts. Maybe a \"type\"\nfield with values \"credit\"/\"debit\" could help them? This way, more\ncategories could be added later (escrow transactions, or other scripts\nthat might be standardized).\n\nAn official API guide (not just a technical reference) would be very\nvaluable here.\n\nLast, I agree that {list,get}receivedby* should include generated\namounts, because there is currently no way to do this for\ngenerations. (This issue is not addressed by my patch yet)\n\nBest,\nSt\u00e9phane", "summary": "Proposal to associate generation txouts with addresses and accounts in Bitcoin wallet. Suggestion to add a \"type\" field for transactions and an official API guide."}, {"author": "Luke-Jr", "date": "2011-07-16T20:03:06", "message_text_only": "On Saturday, July 16, 2011 3:59:07 PM St\u00e9phane Gimenez wrote:\n> Hi,\n> \n> You may have a look at the following proposal. It associates\n> generations txouts with the appropriate addresses and accounts.\n> (See my previous mail)\n> \n> https://github.com/sgimenez/bitcoin/commit/a8e6510042f2f7f951414c7da124668b\n> 30da4acd\n\nIt is also very broken, which is why I took the time to come up with something \nworkable when I needed it ;)\n\n> > * Additions to your wallet always are category:\"receive\", no matter\n> >   what kind of transaction\n> \n> Either this, or maybe webservices should be told to forget about\n> categories and to rely only on the sign of the amounts. Maybe a \"type\"\n> field with values \"credit\"/\"debit\" could help them? This way, more\n> categories could be added later (escrow transactions, or other scripts\n> that might be standardized).\n\n\"move\" is positive amount, but doesn't change the actual value in the wallet.", "summary": "A proposal to associate generations txouts with appropriate addresses and accounts in Bitcoin was shared, along with suggestions for adding more categories in the future."}, {"author": "Gavin Andresen", "date": "2011-07-17T03:02:51", "message_text_only": "Fixing listtransactions (and listreceivedby/etc) so coin generation\ntransactions to particular addresses/accounts are credited to that\naddress/account is a good idea.\n\nI don't think changing listtransactions output would be on the\npriority list for any web services operators (in fact, I think most\nwould scream bloody murder if the output changed in a way that forced\nthem to change their code). The accounts-related things that I think\nARE on their high-priority list are:\n\n1) Fixing getbalance and listtransactions performance problems when\nyou have hundreds of thousands of transactions and thousands of\naccounts.\n\n2) push-notification of coins received to accounts, so they don't have\nto poll for changes.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests fixing listtransactions to credit coin generation transactions to specific addresses/accounts, but acknowledges it may not be a priority for web services operators. Instead, he recommends prioritizing fixing performance issues with getbalance and listtransactions, and implementing push-notification for received coins."}, {"author": "Amir Taaki", "date": "2011-07-17T11:53:05", "message_text_only": "Oops, sorry Gavin. Meant to reply to the mailing list.\n\n---------------\n\n\nPeople should not be using accounts for receiving funds on \nmerchant sites. There are too many bugs associated with it, and it has \ninnumerable problems. Like not being able to merge wallets or lack of \nfind grained control when moving funds around.\n\nhttps://gitorious.org/intersango/bitcoind/commit/50a6ab79ed8c5398648c52fbdc4be07f70dedadb\n\nThis is the recommended & most safest way to receive funds on a merchant site ATM.\n\nlistreceivedsince <timest> is called every so often by a cron job.\nThe output is parsed and placed into another table and then another job \nwill go and create a deposit request from that table. The next call to listreceivedsince <timest> will call with the time of the last \ntransaction, and doubles must be discarded using the txid.\nPolling listtransactions is less convenient since you always repeat old \ntransactions that you may not need, get generated transactions and have \nto pick a good number that goes back far enough, but not too far.\n\n\n________________________________\nFrom: Gavin Andresen <gavinandresen at gmail.com>\nTo: bitcoin-development at lists.sourceforge.net\nSent: Sunday, July 17, 2011 5:02 AM\nSubject: Re: [Bitcoin-development] [RFC] listtransactions reformatting\n\nFixing listtransactions (and listreceivedby/etc) so coin generation\ntransactions to particular addresses/accounts are credited to that\naddress/account is a good idea.\n\nI don't think changing listtransactions output would be on the\npriority list for any web services operators (in fact, I think most\nwould scream bloody murder if the output changed in a way that forced\nthem to change their code). The accounts-related things that I think\nARE on their high-priority list are:\n\n1) Fixing getbalance and listtransactions performance problems when\nyou have hundreds of thousands of transactions and thousands of\naccounts.\n\n2) push-notification of coins received to accounts, so they don't have\nto poll for changes.\n\n-- \n--\nGavin Andresen\n\n------------------------------------------------------------------------------\nAppSumo Presents a FREE Video for the SourceForge Community by Eric \nRies, the creator of the Lean Startup Methodology on \"Lean Startup \nSecrets Revealed.\" This video shows you how to validate your ideas, \noptimize your ideas and identify your business strategy.\nhttp://p.sf.net/sfu/appsumosfdev2dev\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/508d6415/attachment.html>", "summary": "Using accounts for receiving funds on merchant sites is problematic due to bugs and lack of control. Polling listreceivedsince is recommended for safety."}], "thread_summary": {"title": "listtransactions reformatting", "categories": ["Bitcoin-development", "RFC"], "authors": ["Luke-Jr", "St\u00e9phane Gimenez", "Gavin Andresen", "Amir Taaki"], "messages_count": 5, "total_messages_chars_count": 6275, "convo_summary": "The group discussed proposals to improve Bitcoin wallet functionality, including categorizing wallet additions and transactions, associating generation transactions with addresses and accounts, and adding a \"type\" field for transactions. Gavin Andresen suggested prioritizing performance issues and implementing push-notification for received coins. Amir Taaki recommended using polling for safety when receiving funds on merchant sites."}}, {"title": "[Bitcoin-development]  The forums...", "thread_messages": [{"author": "John Smith", "date": "2011-07-17T10:59:58", "message_text_only": "> At the risk of making myself very unpopular, perhaps it's the\n> development project that should move to a new URL?\n>\n\nSo you'd want to rename the project?\n\nI'm not sure that'd be a good idea. For better or worse, even though most\npeople don't get it because they think it's about mining or investments, the\n'bitcoin' name has become pretty well-known.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/172bfcbc/attachment.html>", "summary": "Proposal to rename the Bitcoin development project is suggested, but the name has become well-known despite misconceptions."}], "thread_summary": {"title": "The forums...", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 540}}, {"title": "[Bitcoin-development] libbitcoin", "thread_messages": [{"author": "Amir Taaki", "date": "2011-07-21T03:35:42", "message_text_only": "Check it out,\n\n\nhttp://forum.bitcoin.org/index.php?topic=30646.0\n\nBest to post questions on the forum. I don't often check this email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110720/92dbe8f4/attachment.html>", "summary": "The author suggests posting questions on the Bitcoin forum as they do not frequently check their email. No further information is provided."}], "thread_summary": {"title": "libbitcoin", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 317}}, {"title": "[Bitcoin-development] Discussion related to pull 349 and pull 319 (escrow transactions)", "thread_messages": [{"author": "Gregory Maxwell", "date": "2011-07-23T23:39:13", "message_text_only": "Pull 349 (https://github.com/bitcoin/bitcoin/pull/349)\nimplements a pretty nice implementation of multiple signature escrowed\ntransactions. Especially with clearcoin gone I think that this is\nsomething we ought to have sooner rather than later.\n\nI've tested it on a private network and it appears to work pretty well.\n\nIt probably needs more testing and discussion before it is actually\nadded to the client, but one challenge is that because it requires a\nnew transaction type it won't be deployable until _after_ an updated\nisStandard is widely used in the network.\n\nSo I think that makes a good argument for separating out the\nIsStandard part of the patch and getting it out in 0.4.\n\nUnfortunately, the patch exposes an issue with multisig validation: If\nI understand it correctly, the problem is that due to redundancy in\n the script length coding opcodes it's possible to code a script\nmultiple ways. The signature validation code creates new template\nscripts in order to evaluate signatures for one output, and the code\nin bitcoin is not careful to code the new script the same way the\noriginal one was coded, causing the signature validation to fail when\nsomething used OP_PUSHDATA when a direct length could have been used.\n\nPull 349 (https://github.com/bitcoin/bitcoin/pull/349) contains one\ncandidate fix for this: Excluding the length opcodes from the\ncomparison.\n\nThis fix carries a risk of creating differences in how nodes validate\ntransactions leading to lasting forks. (e.g. Old clients will reject a\nblock which new clients would have accepted).  I do also wonder about\nstrange effects arising from multiple valid TXN which are identical in\nmeaning but have different hashes, but I guess thats already possible\nin a number of different ways.\n\nAnother way of fixing this would be to just define that OP_PUSHDATA*\n_cannot_ be used to push the smaller lengths which could be more\nefficiently encoded with the direct length opcodes.  I think this\nwould have the benefit of being consistent with the current behavior\nand carry no severe split risk.\n\nYet way of fixing it would be to change out the templating code works\nto make sure it codes the template the same way the original was\ncoded. This seems tricky to implement to me, tricky to validate, but\nit would potentially be beneficial if this same class of problem\nexists for things other than the length coding.", "summary": "Pull 349 on Github proposes a multiple signature escrowed transaction implementation, but requires more testing and discussion before being added to the client. The patch exposes an issue with multisig validation, and a candidate fix carries a risk of creating differences in how nodes validate transactions leading to lasting forks."}], "thread_summary": {"title": "Discussion related to pull 349 and pull 319 (escrow transactions)", "categories": ["Bitcoin-development"], "authors": ["Gregory Maxwell"], "messages_count": 1, "total_messages_chars_count": 2377}}, {"title": "[Bitcoin-development] bitcoin DNS addresses", "thread_messages": [{"author": "Rick Wesson", "date": "2011-07-26T00:29:21", "message_text_only": "I've just joined the list with the goals of producing a patch to\nsendtoaddress in rpc.cpp to support DNS lookups so that one could publish a\nTXT record in the DNS with their wallet address to facilitate sending of\ncoin.\n\nI'm proposing something like the code below, which works but needs\nadditional error handling.\n\nalso working on a internet-draft to describe how to put bitcoin addresses in\nthe DNS which I hope to post the first draft of this week.\n\nI'd appreciate comments on issues around annomity, community push back and\nany other issues you might have with leveraging the DNS for bitcoin\ntransactions.\n\nthanks,\n\n-rick\n\n\nValue sendtoaddress(const Array& params, bool fHelp)\n{\n   if (fHelp || params.size() < 2 || params.size() > 4)\n       throw runtime_error(\n           \"sendtoaddress <bitcoinaddress> <amount> [comment]\n[comment-to]\\n\"\n           \"<amount> is a real and is rounded to the nearest 0.00000001\");\n\n/**\n; <<>> DiG 9.7.3 <<>> _btc.rick.wesson.us txt\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 43754\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;_btc.rick.wesson.us.           IN      TXT\n\n;; ANSWER SECTION:\n_btc.rick.wesson.us.    300     IN      TXT     \"BTC=1;\n1GCVXLfF1TcpnnDLJRHk845NZhuJWQTnUD\"\n\n;; Query time: 143 msec\n**/\n\n\n   string strAddress = params[0].get_str();\n   string dname=\"_btc.\";\n   if(strAddress.find(\"@\")){\n      unsigned char answer[255];\n      int len=0;\n      dname.append(strAddress);\n      dname.replace(dname.find(\"@\"), 1, \".\");\n\n      if((len = res_query(dname.c_str(), C_IN, T_TXT, answer, PACKETSZ)) <\n0) {\n        string dnsAnswer=(char*)answer;\n        int i=dnsAnswer.find(\"BTC=1;\");\n        if( i < 0) throw runtime_error( dname + \" is not associated with a\nbitcoin address\");\n        i += 6;\n        i = dnsAnswer.find(\"1\", 6) ; // address start with a one (1)\n        dnsAnswer.erase(0,i);\n        strAddress=dnsAnswer;\n      }\n\n   }\n   // Amount\n   int64 nAmount = AmountFromValue(params[1]);\n...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110725/56cd48d3/attachment.html>", "summary": "A proposal to support DNS lookups for publishing a TXT record in the DNS with a wallet address to facilitate sending of coin."}, {"author": "Matt Corallo", "date": "2011-07-26T01:35:56", "message_text_only": "On Mon, 2011-07-25 at 17:29 -0700, Rick Wesson wrote:\n> I've just joined the list with the goals of producing a patch to\n> sendtoaddress in rpc.cpp to support DNS lookups so that one could\n> publish a TXT record in the DNS with their wallet address to\n> facilitate sending of coin.\n\nBut...why?\nUsing URIs is much simpler and can be more useful in terms of being able\nto give different addresses and/or values per user.\nAlso, despite DNSSec being \"out there\" DNS is still very insecure to\ntransmit something that will result in money transfer...some idiot tries\nit on public WiFi and a MITM steals your coins...DNS is really just not\nwell suited for this kind of thing.\nIf you want nice name->address mapping, a simple HTTPS server with\naddresses and client support (there are some patches around for this)\nworks much better in the end.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/77d7dd56/attachment.sig>", "summary": "A member of a Bitcoin development list proposed a patch to support DNS lookups to publish a wallet address in a TXT record in the DNS. However, using URIs is simpler and more secure."}, {"author": "Rick Wesson", "date": "2011-07-26T03:35:34", "message_text_only": "Matt,\n\nI started from the premise that I can't remember a bitcoin address but\nI can/do remember email addresses which, as an identity are easy\nlabels for humans to remember. The IPv4 address is the metaphor I\nconsider. As someone who actually worked on parts of DNSSEC I do\nbelieve in it -- and that it offers reasonable security for\ntransactions.\n\nRemember MITM attacks on DNS for a transaction are for the sender\nagainst the merchant, and it is only the wallet ID that would be\navailable. These identifiers are something people use \"like\" an\nidentity in that they are frequently shared in public spaces.\n\nAlso, a DNS mapping does not prevent or deny anyone from leveraging\nHTTP(S) for simular mapping. My point is that DNS is designed for name\nto thing mapping and its done a decent job. What I like about the DNS\nis that it is frequently leveraged as a proxy for identity and http\nURIs are not. Where https://wesson.us/ricks-bitcoin-address doesn't\nfeel like and identity (to me) and rick.wesson.us does.\n\nMy point is about usability and user experience. Bitcoin if used in\nthe DNS might make DNSSEC more popular which IMHO is a good thing.\n\n-rick\n\n\nOn Mon, Jul 25, 2011 at 6:35 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> On Mon, 2011-07-25 at 17:29 -0700, Rick Wesson wrote:\n>> I've just joined the list with the goals of producing a patch to\n>> sendtoaddress in rpc.cpp to support DNS lookups so that one could\n>> publish a TXT record in the DNS with their wallet address to\n>> facilitate sending of coin.\n>\n> But...why?\n> Using URIs is much simpler and can be more useful in terms of being able\n> to give different addresses and/or values per user.\n> Also, despite DNSSec being \"out there\" DNS is still very insecure to\n> transmit something that will result in money transfer...some idiot tries\n> it on public WiFi and a MITM steals your coins...DNS is really just not\n> well suited for this kind of thing.\n> If you want nice name->address mapping, a simple HTTPS server with\n> addresses and client support (there are some patches around for this)\n> works much better in the end.\n>\n> ------------------------------------------------------------------------------\n> Magic Quadrant for Content-Aware Data Loss Prevention\n> Research study explores the data loss prevention market. Includes in-depth\n> analysis on the changes within the DLP market, and the criteria used to\n> evaluate the strengths and weaknesses of these DLP solutions.\n> http://www.accelacomm.com/jaw/sfnl/114/51385063/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>", "summary": "A proposal was made to support DNS lookups to publish a TXT record in the DNS with a wallet address to facilitate sending of coin. However, using URIs is simpler and more secure."}, {"author": "Luke-Jr", "date": "2011-07-26T04:22:21", "message_text_only": "On Monday, July 25, 2011 11:35:34 PM Rick Wesson wrote:\n> I started from the premise that I can't remember a bitcoin address but\n> I can/do remember email addresses which, as an identity are easy\n> labels for humans to remember. The IPv4 address is the metaphor I\n> consider. As someone who actually worked on parts of DNSSEC I do\n> believe in it -- and that it offers reasonable security for\n> transactions.\n\n1. Right now you practically need a unique Bitcoin address per transaction.\n2. DNSSEC is on the edge of becoming illegal in the US.\n3. Emails aren't merely domains.\n\nI would propose something like resolving foo at bar.net to a SRV lookup for \n_bitcoinaddressresolution._tcp.foo.bar.net, expecting a cert for bar.net, \nmaking a HTTPS request for /bitcoinaddressresolution?foo at bar.net, and also \nsending an email to foo at bar.net (the usual way) signed with the keys used for \nthe transaction. ;)", "summary": "The author suggests using email addresses as a more memorable identity for Bitcoin transactions, and proposes a method for resolving addresses using DNSSEC and HTTPS."}, {"author": "Rick Wesson", "date": "2011-07-26T04:54:23", "message_text_only": ">\n> 1. Right now you practically need a unique Bitcoin address per transaction.\n\nI'd like to find ways to alievate this requirement.\n\n> 2. DNSSEC is on the edge of becoming illegal in the US.\n\nreally, pointers please. DHS was a huge funder for DNSSEC asn .mil was\nthe first domain to deploy it. I think you may be miss-informed.\n\n> 3. Emails aren't merely domains.\n\ncorrect, I was speaking about an \"address\" that used the same/simular\nformatting but did not use the SMTP protocol.\n\n-rick\n\n> I would propose something like resolving foo at bar.net to a SRV lookup for\n> _bitcoinaddressresolution._tcp.foo.bar.net, expecting a cert for bar.net,\n> making a HTTPS request for /bitcoinaddressresolution?foo at bar.net, and also\n> sending an email to foo at bar.net (the usual way) signed with the keys used for\n> the transaction. ;)\n>", "summary": "Proposal to alleviate the need for unique Bitcoin addresses per transaction by using a SRV lookup and HTTPS request for Bitcoin address resolution."}, {"author": "Luke-Jr", "date": "2011-07-26T06:18:56", "message_text_only": "On Tuesday, July 26, 2011 12:54:23 AM Rick Wesson wrote:\n> > 1. Right now you practically need a unique Bitcoin address per\n> > transaction.\n> \n> I'd like to find ways to alievate this requirement.\n\nAdmittedly, my proposal to email a signed message allows one to reuse \naddresses, but there is still a privacy concern.\n\n> > 2. DNSSEC is on the edge of becoming illegal in the US.\n> \n> really, pointers please. DHS was a huge funder for DNSSEC asn .mil was\n> the first domain to deploy it. I think you may be miss-informed.\n\nhttp://www.google.com/search?q=%22PROTECT+IP+act%22+DNSSEC\n\n> > 3. Emails aren't merely domains.\n> \n> correct, I was speaking about an \"address\" that used the same/simular\n> formatting but did not use the SMTP protocol.\n\nI only meant that foo.bar.net is not the same formatting.\nfoo at bar.net would be.", "summary": "Rick Wesson proposes ways to alleviate the requirement of a unique Bitcoin address per transaction, while addressing privacy concerns. DNSSEC legality in the US is questioned."}, {"author": "John Smith", "date": "2011-07-26T08:04:17", "message_text_only": "> I only meant that foo.bar.net is not the same formatting.\n> foo at bar.net would be.\n>\n\nYes please use email-like addresses, whatever is decided on the underlying\nprotocol.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/2f7cf73c/attachment.html>", "summary": "Use email-like addresses for consistency in formatting, regardless of the underlying protocol, as foo.bar.net and foo@bar.net differ."}, {"author": "Matt Corallo", "date": "2011-07-26T13:23:39", "message_text_only": "On Mon, 2011-07-25 at 20:35 -0700, Rick Wesson wrote:\n> Matt,\n> \n> I started from the premise that I can't remember a bitcoin address but\n> I can/do remember email addresses which, as an identity are easy\n> labels for humans to remember. The IPv4 address is the metaphor I\n> consider. As someone who actually worked on parts of DNSSEC I do\n> believe in it -- and that it offers reasonable security for\n> transactions.\n\n> Remember MITM attacks on DNS for a transaction are for the sender\n> against the merchant, and it is only the wallet ID that would be\n> available. These identifiers are something people use \"like\" an\n> identity in that they are frequently shared in public spaces.\n> \nYes, DNSSEC is great if you are running your own recursive name server.\nHowever, that is probably something like 0.01% of the people out there.\nIf this were to be made secure, one would have to implement a full\nrecursive nameserver inside of Bitcoin with the root trust anchors\nhardcoded in.  This seems like way overkill to do name->address mapping.\n(My attack scenario here is coffee shop wifi with the default DNS\nresolvers being somewhere at the ISP and a ARP (or other) MITM attack\nintercepting and playing with your DNS queries).\nAdditionally, HTTPS mapping offers some advantages such as ease of\noffering up different to different people by eg. IP address (could be\ndone by setting DNS TTL to 0 and assuming all users will be using a\nbuilt-in resolver, but its still not guaranteed that other clients would\nuse a built-in resolver and then the IP of the resolver is not the same\nas the IP of the Bitcoin node).  \nNot that DNS is a terrible idea, but there are clear advantages for\nusing HTTPS (or similar) mapping over DNS and I see no clear advantage\nfor using DNS over HTTPS (aside from the \"that is what it is designed\nfor\" argument, which I would claim is an invalid argument as you have to\nconsider the technology, not its intent).\n> Also, a DNS mapping does not prevent or deny anyone from leveraging\n> HTTP(S) for simular mapping. My point is that DNS is designed for name\n> to thing mapping and its done a decent job. What I like about the DNS\n> is that it is frequently leveraged as a proxy for identity and http\n> URIs are not. Where https://wesson.us/ricks-bitcoin-address doesn't\n> feel like and identity (to me) and rick.wesson.us does.\n> \n> My point is about usability and user experience. Bitcoin if used in\n> the DNS might make DNSSEC more popular which IMHO is a good thing.\nHold on there, Bitcoin is still tiny, I highly, highly doubt it will\nmake a difference to DNSSEC adoption.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/fee91db9/attachment.sig>", "summary": "The use of DNS for Bitcoin address mapping may improve usability, but HTTPS mapping offers advantages and DNSSEC adoption is unlikely to be affected."}, {"author": "Mike Hearn", "date": "2011-07-30T11:34:38", "message_text_only": "This was already discussed on the forums, but clear use cases would be helpful.\n\nI originally thought this feature seemed like a no-brainer, but\nrandomly emailing money to people out of the blue is not a very common\noperation. You almost always have contact with them first, if only to\nsay \"hey, I'm going to send you some money\", but more commonly to\nfigure out how much you're going to pay and what for.\n\nOnce you have communication, providing an address in-band isn't very\nhard, and it has the advantage of always working. Doing anything with\nDNS or magic HTTPS endpoints means that 90% of the time, your feature\n*will not work* (eg it won't work for any gmail/yahoo/hotmail account)\nand users will rapidly learn not to bother trying as they have no way\nof knowing if any given address will work or not.\n\nIt's not smart UI design to provide users with a feature that will\nnormally never work, and for which they can't even guess at whether it\nwill.\n\nWhat would be better to see is a standardized (probably HTTPS based)\nprotocol in which a Bitcoin URI could contain a domain name, and then\nyour client would challenge the domain to sign a nonce with the key\ncorresponding to the address (or raw pubkey). This means in your\nclient the payment can be rendered and recorded as a payment to\n\"foobar.com\", which is much more helpful. That protocol could then be\nextended to support \"user at foobar.com\" type challenges so when a\nbitcoin: link is provided, the server is challenged to prove ownership\nby that user of that public key. It means the details are hidden and\nwhen the feature is present, the UI gets silently better, but there's\nnever any demand on any users to do anything different. The \"copy\nBitcoin address\" button in the UI can provide the clipboard with both\ntext/plain and text/html content so the right one is picked depending\non context.", "summary": "Randomly emailing money is not common, and providing an address in-band is easier. A standardized HTTPS protocol for Bitcoin URI could be helpful."}, {"author": "Rick Wesson", "date": "2011-07-30T13:42:35", "message_text_only": "I'm offering patches for DNS lookup, which seems good enough to locate\nthe irc server but not good enough for the folks that use copy/paste.\n\nfrom a usability standpoint, the clipboard isn't a UI element in flow\ndesign. Its also subject to MITM attacks for the most popular OSes.\n\nFinally, think beyond you and your friends to how you can buy coffee\nat starbucks easier and faster than with a starbucks card. Thats how\nyou make successful apps and protocols.\n\nHas anyone offered to write the mythical\nhttps-address-resolver-easy-button for bitcoind?\n\n-rick\n\n\nOn Sat, Jul 30, 2011 at 4:34 AM, Mike Hearn <mike at plan99.net> wrote:\n> This was already discussed on the forums, but clear use cases would be helpful.\n>\n> I originally thought this feature seemed like a no-brainer, but\n> randomly emailing money to people out of the blue is not a very common\n> operation. You almost always have contact with them first, if only to\n> say \"hey, I'm going to send you some money\", but more commonly to\n> figure out how much you're going to pay and what for.\n>\n> Once you have communication, providing an address in-band isn't very\n> hard, and it has the advantage of always working. Doing anything with\n> DNS or magic HTTPS endpoints means that 90% of the time, your feature\n> *will not work* (eg it won't work for any gmail/yahoo/hotmail account)\n> and users will rapidly learn not to bother trying as they have no way\n> of knowing if any given address will work or not.\n>\n> It's not smart UI design to provide users with a feature that will\n> normally never work, and for which they can't even guess at whether it\n> will.\n>\n> What would be better to see is a standardized (probably HTTPS based)\n> protocol in which a Bitcoin URI could contain a domain name, and then\n> your client would challenge the domain to sign a nonce with the key\n> corresponding to the address (or raw pubkey). This means in your\n> client the payment can be rendered and recorded as a payment to\n> \"foobar.com\", which is much more helpful. That protocol could then be\n> extended to support \"user at foobar.com\" type challenges so when a\n> bitcoin: link is provided, the server is challenged to prove ownership\n> by that user of that public key. It means the details are hidden and\n> when the feature is present, the UI gets silently better, but there's\n> never any demand on any users to do anything different. The \"copy\n> Bitcoin address\" button in the UI can provide the clipboard with both\n> text/plain and text/html content so the right one is picked depending\n> on context.\n>", "summary": "The author offers patches for DNS lookup, but suggests a standardized HTTPS protocol for Bitcoin URI containing a domain name for better usability."}, {"author": "Matt Corallo", "date": "2011-07-30T14:07:01", "message_text_only": "On Sat, 2011-07-30 at 06:42 -0700, Rick Wesson wrote:\n> Has anyone offered to write the mythical\n> https-address-resolver-easy-button for bitcoind?\n\nThat was my point, it already has been written...twice IIRC.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110730/b84a6e13/attachment.sig>", "summary": "Someone asked if anyone has written an easy button for resolving https addresses in bitcoind, but it has already been written twice."}, {"author": "Matt Corallo", "date": "2011-07-26T16:24:36", "message_text_only": "For some reason my mail client is being thick and not responding\non-list, sorry about that...\n\nOn Tue, 2011-07-26 at 08:34 -0700, Rick Wesson wrote:\n> > Most OSes dont do any resolving at all, they just query upstream\n> > resolvers.  In the case of the coffee shop, that upstream resolver is\n> > the attacker.  This attacker can easily just claim that the zone you\n> > requested is not DNSSEC signed and return their data and the OS will not\n> > be any wiser.  AFAIK, most OSes dont have a mechanism to require the\n> > zone queried is DNSSEC signed meaning you have to implement a full DNS\n> > resolver in Bitcoin in order for it to be secure.\n> \n> Matt,\n> \n> The same attack can apply to https with a self signed cert where it is\n> the A record that is replaced by the attacker and the https request is\n> sent to evil.com's server which responds to the request with an answer\n> in the form you expect. This is what lots of malware does on windows\n> to steel bank login credentials, securing http doesn't prevent such an\n> attack.\nIf you are using a self-signed cert to do any kind of important data\ntransfer you are just being stupid.  Here I am assuming your computer\nisnt actually compromised, but only the network is, which I think is a\nfairly good assumption.\n> \n> Windows has supported DNSSEC since 2008 as have most of the unix\n> variants, mac osx since 10.3 Android also seems to include DNSSEC\n> capable resolvers.\n> \n> If this thread is really about DNSSEC then we might move it to a more\n> appropriate forum for discussing how applications leverage DNS\n> security extensions.  Its taken some years to get the specs done and\n> the root signed I expect it to take many more to enable the\n> applications to leverage the deployed infrastructure.\nNo, DNSSEC is very well done, this thread is specifically about the\nsecurity implications of using DNSSEC for Bitcoin address communication.\nIMO it is not a good idea, as for it to be secure against a coffee-shop\nnetwork MITMer you have to implement a full resolver with root trust\nanchors and knowledge of root servers in Bitcoin, which does not seem\nlike a good idea.\n> \n> I am interested in working on the issues surrounding usability and I\n> find that remembering and communicating a bitcoin address are current\n> limiting factors in the acceptance and deployment of this software. My\n> goal is for simpler user experience.\nI totally agree, however I don't think DNS-based resolving is a good\nidea here.  HTTPS does have several advantages over a DNSSEC-based\nsolution without any significant drawbacks that I can see.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/640c60b1/attachment.sig>", "summary": "The email discusses the security implications of using DNSSEC for Bitcoin address communication and suggests that a full resolver with root trust anchors is necessary for security."}, {"author": "Rick Wesson", "date": "2011-07-26T16:50:58", "message_text_only": "[snip]\n\n> I totally agree, however I don't think DNS-based resolving is a good\n> idea here. \u00a0HTTPS does have several advantages over a DNSSEC-based\n> solution without any significant drawbacks that I can see.\n\nTo restate your (con dnssec) points:\n   o DNS resolution of bitcoin addresses is bad because of potential\nMITM attacks\n   o DNSSEC is not a security measure for mitigating DNS resolution of\nbitcoin addresses\n      because the application would require its own dnssec enabled stub resolver\n\nPlease restate\n   o HTTPS is your preferred method for resolution because?\n\nIf you can enumerate your advantages so I can develop a proper\nresponse to the points you have raised.\n\nthanks,\n\n-rick", "summary": "DNS-based resolving for Bitcoin addresses is risky due to potential MITM attacks. DNSSEC is not a solution. HTTPS is a better option with no significant drawbacks."}, {"author": "Matt Corallo", "date": "2011-07-26T17:18:42", "message_text_only": "On Tue, 2011-07-26 at 09:50 -0700, Rick Wesson wrote:\n> [snip]\n> \n> > I totally agree, however I don't think DNS-based resolving is a good\n> > idea here.  HTTPS does have several advantages over a DNSSEC-based\n> > solution without any significant drawbacks that I can see.\n> \n> To restate your (con dnssec) points:\n>    o DNS resolution of bitcoin addresses is bad because of potential\n> MITM attacks\n>    o DNSSEC is not a security measure for mitigating DNS resolution of\n> bitcoin addresses\n>       because the application would require its own dnssec enabled stub resolver\nThat is one point, but yes.\n> \n> Please restate\n>    o HTTPS is your preferred method for resolution because?\nBecause it allows for the giving of different addresses to each client\nbased on IP much easier.  Its possible with DNS by setting TTL to 0 and\nhoping that Bitcoin clients will be using their own resolver, but that\nis far from guaranteed.  Additionally, HTTPS stuff has already been\ncoded and implemented, so there's that...\n\nFrankly, HTTPS' advantages are very small here, but since they exist,\nand DNS has no advantages that I can see, I don't see any reason to go\nwith DNS here.  I much prefer using a HTTPS library (of which there are\nmany which have had much more thorough security audits) than a\nDNSSEC-implementing DNS recursion library with the root trust anchors\nand root servers built-in (are there any?).\n\nMaybe I'm missing something here?\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/1587466a/attachment-0001.sig>", "summary": "HTTPS is preferred over DNS for resolving Bitcoin addresses due to its ability to give different addresses to each client based on IP."}, {"author": "phantomcircuit", "date": "2011-07-26T16:32:17", "message_text_only": "dns resolution is far simpler to implement than properly checking the https certificate chain\n\nMatt Corallo <bitcoin-list at bluematt.me> wrote:\n\n>For some reason my mail client is being thick and not responding\n>on-list, sorry about that...\n>\n>On Tue, 2011-07-26 at 08:34 -0700, Rick Wesson wrote:\n>> > Most OSes dont do any resolving at all, they just query upstream\n>> > resolvers.  In the case of the coffee shop, that upstream resolver is\n>> > the attacker.  This attacker can easily just claim that the zone you\n>> > requested is not DNSSEC signed and return their data and the OS will not\n>> > be any wiser.  AFAIK, most OSes dont have a mechanism to require the\n>> > zone queried is DNSSEC signed meaning you have to implement a full DNS\n>> > resolver in Bitcoin in order for it to be secure.\n>> \n>> Matt,\n>> \n>> The same attack can apply to https with a self signed cert where it is\n>> the A record that is replaced by the attacker and the https request is\n>> sent to evil.com's server which responds to the request with an answer\n>> in the form you expect. This is what lots of malware does on windows\n>> to steel bank login credentials, securing http doesn't prevent such an\n>> attack.\n>If you are using a self-signed cert to do any kind of important data\n>transfer you are just being stupid.  Here I am assuming your computer\n>isnt actually compromised, but only the network is, which I think is a\n>fairly good assumption.\n>> \n>> Windows has supported DNSSEC since 2008 as have most of the unix\n>> variants, mac osx since 10.3 Android also seems to include DNSSEC\n>> capable resolvers.\n>> \n>> If this thread is really about DNSSEC then we might move it to a more\n>> appropriate forum for discussing how applications leverage DNS\n>> security extensions.  Its taken some years to get the specs done and\n>> the root signed I expect it to take many more to enable the\n>> applications to leverage the deployed infrastructure.\n>No, DNSSEC is very well done, this thread is specifically about the\n>security implications of using DNSSEC for Bitcoin address communication.\n>IMO it is not a good idea, as for it to be secure against a coffee-shop\n>network MITMer you have to implement a full resolver with root trust\n>anchors and knowledge of root servers in Bitcoin, which does not seem\n>like a good idea.\n>> \n>> I am interested in working on the issues surrounding usability and I\n>> find that remembering and communicating a bitcoin address are current\n>> limiting factors in the acceptance and deployment of this software. My\n>> goal is for simpler user experience.\n>I totally agree, however I don't think DNS-based resolving is a good\n>idea here.  HTTPS does have several advantages over a DNSSEC-based\n>solution without any significant drawbacks that I can see.\n>\n>Matt\n>\n>------------------------------------------------------------------------------\n>Magic Quadrant for Content-Aware Data Loss Prevention\n>Research study explores the data loss prevention market. Includes in-depth\n>analysis on the changes within the DLP market, and the criteria used to\n>evaluate the strengths and weaknesses of these DLP solutions.\n>http://www.accelacomm.com/jaw/sfnl/114/51385063/\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Implementing DNS resolution is easier than properly checking HTTPS certificate chains, which is vulnerable to attacks like self-signed certificates. DNSSEC is not a good solution for Bitcoin address communication."}], "thread_summary": {"title": "bitcoin DNS addresses", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Rick Wesson", "Luke-Jr", "Mike Hearn", "phantomcircuit", "Matt Corallo"], "messages_count": 15, "total_messages_chars_count": 25490, "convo_summary": "The group discussed proposals for using DNS lookups to publish wallet addresses for Bitcoin transactions. While some suggested using email-like addresses or SRV lookups, others argued that HTTPS mapping was simpler and more secure than DNSSEC. The group also discussed the potential risks of using DNS-based resolving for Bitcoin addresses, including the possibility of MITM attacks."}}, {"title": "[Bitcoin-development] \"To:\" addresses missing", "thread_messages": [{"author": "John Smith", "date": "2011-07-26T14:41:07", "message_text_only": "I first thought it was a problem in my UI, after syncing to the latest git\nversion. But the following screenshot says enough:\n\nhttp://img24.imageshack.us/img24/7363/screencpf.png\n\nThe address are also missing in the detailed transaction view. It appears\nthat the problem is in script.cpp:\n\n        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n        {\n            uint160 hash160;\n            if (item.first == OP_PUBKEY)\n                addressRet.SetPubKey(item.second);\n            else if (item.first == OP_PUBKEYHASH)\n                addressRet.SetHash160((uint160)item.second);\n            if (keystore == NULL || keystore->HaveKey(addressRet))\n                return true;\n        }\n\nIt will only return \"true\" on keys that are in the keystore (your own\nprivate keys...). After commenting out the \"if (keystore == NULL ...\" line,\nthe display is fixed.\n\nBut that simple solution might have impact somewhere else.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/84ca2e10/attachment.html>", "summary": "A bug in script.cpp is causing missing addresses in the detailed transaction view, which can be fixed by commenting out a line of code."}], "thread_summary": {"title": "\"To:\" addresses missing", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 1123}}, {"title": "[Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-07-27T01:31:14", "message_text_only": "Anybody have advice on how to encourage more bug-fixing and testing of\nexisting functionality instead of yet-more-features?\n\nWhen I get back home from here in Australia I plan on trying to\nlead-by-example by starting to tackle the huge backlog of reported bugs, but\nI'd like to know if anybody has seen other open source projects successfully\nget people to fix bugs instead of constantly adding features. Would policies\nlike \"that spiffy new feature you want won't be considered until you've\nhelped close some open bugs\" be effective (or would it just encourage people\nto create shill accounts to open trivial-to-fix issues)?\n\nIf this was your run-of-the-mill open source project I would be much\nmore lackadaisical about letting in new features... but when people lose\nmoney because bugs slip through (and several people HAVE recently lost money\nbecause of bugs slipping through) we obviously have a pretty big problem\njust making sure that the features we have now work properly.\n\n(Thanks VERY much to those of you have HAVE been helping test and have been\nsubmitting bug fixes; I don't mean to imply that everybody has been\nfeature-happy, just that it seems like a lot of potential bitcoin\ncontributors start out by submitting a nifty new feature that sure would be\nnice to have if we weren't so busy trying to make sure the features we\nalready have work properly all the time).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/9192a372/attachment.html>", "summary": "Gavin Andresen, a Bitcoin developer, seeks advice on how to encourage more bug-fixing and testing of existing functionality instead of adding new features."}, {"author": "John Smith", "date": "2011-07-27T06:40:12", "message_text_only": "On Wed, Jul 27, 2011 at 1:31 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Anybody have advice on how to encourage more bug-fixing and testing of\n> existing functionality instead of yet-more-features?\n\n\nMake a list of bugs. Offer BTC bounties for fixing each one according to how\nserious/difficult it is. They don't have to be high, just a few BTC. It'll\nalso help people get interested in the project and *current* source base\n(instead of wanting to implement Yet Another Incomplete Client from\nscratch).\n\nOr we could do the same as the mozilla/chrome projects, offer bounties for\nfinding new security holes and serious bugs.\n\nA policy like \"that spiffy new feature you want won't be considered until\nyou've helped close some open bugs\" won't work. This is open source, people\ncan just make their own fork with the spiffy new feature without fixing any\nbugs.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/6d2d3f7d/attachment.html>", "summary": "Gavin Andresen asks for advice on how to encourage more bug-fixing and testing of existing functionality instead of adding more features. Suggestions include offering BTC bounties for fixing bugs and finding security holes."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-07-27T11:14:34", "message_text_only": "Perhaps even add a way for anyone add to the bounty attached to a bug on\nthe bug tracker? Also, a listing page for bugs with their bounties might\nbe nice too.\n\n- Joel\n\nOn Wed, 2011-07-27 at 06:40 +0000, John Smith wrote:\n> \n> On Wed, Jul 27, 2011 at 1:31 AM, Gavin Andresen\n> <gavinandresen at gmail.com> wrote:\n>         Anybody have advice on how to encourage more bug-fixing and\n>         testing of existing functionality instead of\n>         yet-more-features? \n> \n> Make a list of bugs. Offer BTC bounties for fixing each one according\n> to how serious/difficult it is. They don't have to be high, just a few\n> BTC. It'll also help people get interested in the project and\n> *current* source base (instead of wanting to implement Yet Another\n> Incomplete Client from scratch).\n> \n> Or we could do the same as the mozilla/chrome projects, offer bounties\n> for finding new security holes and serious bugs.\n> \n> A policy like \"that spiffy new feature you want won't be considered\n> until you've helped close some open bugs\" won't work. This is open\n> source, people can just make their own fork with the spiffy new\n> feature without fixing any bugs.\n> \n> JS\n> \n> \n> ------------------------------------------------------------------------------\n> Got Input?   Slashdot Needs You.\n> Take our quick survey online.  Come on, we don't ask for help often.\n> Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n> http://p.sf.net/sfu/slashdot-survey\n> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Suggestion to offer BTC bounties for fixing bugs on the bug tracker to encourage more bug-fixing and testing of existing functionality."}, {"author": "John Smith", "date": "2011-07-27T14:20:07", "message_text_only": "On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen <\njoel.kaartinen at gmail.com> wrote:\n\n> Perhaps even add a way for anyone add to the bounty attached to a bug on\n> the bug tracker? Also, a listing page for bugs with their bounties might\n> be nice too.\n>\n\nGood idea. I'm not sure if the github bug tracker supports extension\nattributes, but it'd be a great place to add it. Also, people can let know\nthat they're already working on a feature using a comment, to prevent double\nwork.\n\nThe biggest problem will be organizational, in getting the BTC together for\nbounties; only a high profile member such as Gavin will have enough trust to\nask for support. Or maybe there's something left in the faucet? :-)\n\nUnrelated: what also might help is publishing a roadmap. Plan a few \"bug fix\nonly\" releases before scheduling addition of new features. It's also helpful\nfor people that wonder that direction the project is going in...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/b57f8cf1/attachment.html>", "summary": "A suggestion to add a way for anyone to add to the bounty attached to a bug on the bug tracker and a listing page for bugs with their bounties. A roadmap could also help."}, {"author": "Luke-Jr", "date": "2011-07-27T14:28:24", "message_text_only": "On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:\n> On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen \n> <joel.kaartinen at gmail.com> wrote:\n> > Perhaps even add a way for anyone add to the bounty attached to a bug on\n> > the bug tracker? Also, a listing page for bugs with their bounties might\n> > be nice too.\n> \n> Good idea. I'm not sure if the github bug tracker supports extension\n> attributes, but it'd be a great place to add it. Also, people can let know\n> that they're already working on a feature using a comment, to prevent\n> double work.\n\nI'm not sure a few small bounties would justify agreeing to GitHub's steep \ndemand for potentially unlimited money in their terms of service...", "summary": "A suggestion to add a way for anyone to add to the bounty attached to a bug on the bug tracker and a listing page for bugs with their bounties was made. Concerns were raised about GitHub's steep demand for potentially unlimited money."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-07-27T14:42:54", "message_text_only": "As it's unlikely to be an automated system anyway, I do not see why\npeople claiming the bounties would need to agree with the GitHub TOS.\nBesides which, I suspect most people contributing to bitcoin already\nhave agreed to it.\n\nAlthough, if GitHub can't support the feature, it could be an argument\nfor setting up a bug tracker unrelated to GitHub.\n\n- Joel\n\nOn Wed, 2011-07-27 at 10:28 -0400, Luke-Jr wrote:\n> On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:\n> > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen \n> > <joel.kaartinen at gmail.com> wrote:\n> > > Perhaps even add a way for anyone add to the bounty attached to a bug on\n> > > the bug tracker? Also, a listing page for bugs with their bounties might\n> > > be nice too.\n> > \n> > Good idea. I'm not sure if the github bug tracker supports extension\n> > attributes, but it'd be a great place to add it. Also, people can let know\n> > that they're already working on a feature using a comment, to prevent\n> > double work.\n> \n> I'm not sure a few small bounties would justify agreeing to GitHub's steep \n> demand for potentially unlimited money in their terms of service...\n>", "summary": "Proposal to add a bounty feature to GitHub's bug tracker. Concerns raised about agreeing to GitHub's TOS and potential need for a separate bug tracker."}, {"author": "John Smith", "date": "2011-07-27T14:53:03", "message_text_only": "On Wed, Jul 27, 2011 at 2:42 PM, Joel Joonatan Kaartinen <joel.kaartine\n\nAlthough, if GitHub can't support the feature, it could be an argument\n> for setting up a bug tracker unrelated to GitHub.\n>\n\nWell if signing up with github is such a big problem we could make a list of\nbounties on our own site with a trivial web application, and link from there\nto github issues (if neccesary) for a description. It really doesn't matter\nhow it's implemented. I think it is useless to discuss technical details or\nGitHub TOS right now, let's discuss the merit of ideas...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/2552af74/attachment.html>", "summary": "The discussion is about whether to use GitHub for bug tracking or set up a separate bug tracker, with a suggestion to create a list of bounties on a separate site."}, {"author": "Douglas Huff", "date": "2011-07-27T16:02:06", "message_text_only": "Don't worry Luke will basically say that about anything not related to\na crazy base16 number representation system that no decent modern font\ncan display.\n\nTo contribute:\n\nI think the separated-from-github bounty system would be great. BUT:\nThe bounties need to go into some form of escrow. There have been way\nto many bounties that weren't paid since BTC broke the $1USD boundary.\n\nOn Wed, Jul 27, 2011 at 9:53 AM, John Smith <witchspace81 at gmail.com> wrote:\n> On Wed, Jul 27, 2011 at 2:42 PM, Joel Joonatan Kaartinen <joel.kaartine\n>\n>> Although, if GitHub can't support the feature, it could be an argument\n>> for setting up a bug tracker unrelated to GitHub.\n>\n> Well if signing up with github is such a big problem we could make a list of\n> bounties on our own site with a trivial web application, and link from there\n> to github issues (if neccesary) for a description. It really doesn't matter\n> how it's implemented. I think it is useless to discuss technical details or\n> GitHub TOS right now, let's discuss the merit of ideas...\n>\n> JS\n>\n>\n> ------------------------------------------------------------------------------\n> Got Input? \u00a0 Slashdot Needs You.\n> Take our quick survey online. \u00a0Come on, we don't ask for help often.\n> Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n> http://p.sf.net/sfu/slashdot-survey\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>", "summary": "Discussion on implementing a separated-from-GitHub bounty system for Bitcoin development, with concerns raised about unpaid bounties and the need for escrow."}, {"author": "Rick Wesson", "date": "2011-07-27T16:07:39", "message_text_only": "personally, if the software works better (less bugs) then btc will be more\nvaluable. offering bounty is orthorginal to finding the right technical lead\nthat will hurd the effort.\n\nput a bounty (salary) on the person to lead the effort, not the bugs\n\n-rick\n\n\nOn Wed, Jul 27, 2011 at 7:28 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:\n> > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen\n> > <joel.kaartinen at gmail.com> wrote:\n> > > Perhaps even add a way for anyone add to the bounty attached to a bug\n> on\n> > > the bug tracker? Also, a listing page for bugs with their bounties\n> might\n> > > be nice too.\n> >\n> > Good idea. I'm not sure if the github bug tracker supports extension\n> > attributes, but it'd be a great place to add it. Also, people can let\n> know\n> > that they're already working on a feature using a comment, to prevent\n> > double work.\n>\n> I'm not sure a few small bounties would justify agreeing to GitHub's steep\n> demand for potentially unlimited money in their terms of service...\n>\n>\n> ------------------------------------------------------------------------------\n> Got Input?   Slashdot Needs You.\n> Take our quick survey online.  Come on, we don't ask for help often.\n> Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n> http://p.sf.net/sfu/slashdot-survey\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/3b860209/attachment.html>", "summary": "Offering a bounty for a technical lead to improve software functionality could increase Bitcoin's value, rather than offering bounties for bug fixes."}, {"author": "Matt Corallo", "date": "2011-07-27T16:47:22", "message_text_only": "On Wed, 2011-07-27 at 09:07 -0700, Rick Wesson wrote:\n> personally, if the software works better (less bugs) then btc will be\n> more valuable. offering bounty is orthorginal to finding the right\n> technical lead that will hurd the effort.\n> \n> \n> put a bounty (salary) on the person to lead the effort, not the bugs\n> \nGavin leads the effort just fine (when he's not on vacation or in\nAustralia...) but I do agree with paying him, though I'm not sure how\nmuch time he has to spend on development over PR and other\nproject-building efforts.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/035aa7fc/attachment.sig>", "summary": "Rick suggests offering a bounty for a technical lead to improve Bitcoin's software, rather than for finding bugs."}, {"author": "John Smith", "date": "2011-07-27T17:11:13", "message_text_only": "On Wed, Jul 27, 2011 at 4:07 PM, Rick Wesson\n<rick at support-intelligence.com>wrote:\n\n> personally, if the software works better (less bugs) then btc will be more\n> valuable. offering bounty is orthorginal to finding the right technical lead\n> that will hurd the effort.\n>\n> put a bounty (salary) on the person to lead the effort, not the bugs\n>\n\nBounties would be much less than a developer salary. The idea is not to pay\nfor people full time, but it would be more of a symbolic gesture to attract\ndevelopers and get them some coins.  People with coins are also more\nmotivated to make the project more valuable, otherwise you have a \"tragedy\nof the commons\" problem.\n\nNot that I don't agree Gavin with getting a salary but that's a completely\nindependent issue :)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/339660fb/attachment.html>", "summary": "Offering bounties for developers to fix bugs in Bitcoin software could increase its value, but should be a symbolic gesture rather than a full-time salary."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-07-27T17:15:44", "message_text_only": "When I first found bitcoin, I was a bit surprised there were no paid by\ncommunity developers working on it. However, the bounties would be a\nmore democratic way of guiding the progress as well as allow things to\nhappen without a stable flow of money.\n\nHaving said that, if it's feasible, having someone hired full time to\nwork on the software would be great. I'm too much of a newcomer myself\nto be able to provide any financial support for that though. I could\nmost likely contribute towards some bug bounties but if there was a bug\nI'd want to offer bounty for, I'd be fixing it myself already.\n\n- Joel\n\nOn Wed, 2011-07-27 at 09:07 -0700, Rick Wesson wrote:\n> personally, if the software works better (less bugs) then btc will be\n> more valuable. offering bounty is orthorginal to finding the right\n> technical lead that will hurd the effort.\n> \n> \n> put a bounty (salary) on the person to lead the effort, not the bugs\n> \n> \n> -rick\n> \n> \n> On Wed, Jul 27, 2011 at 7:28 AM, Luke-Jr <luke at dashjr.org> wrote:\n>         On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:\n>         > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen\n>         > <joel.kaartinen at gmail.com> wrote:\n>         > > Perhaps even add a way for anyone add to the bounty\n>         attached to a bug on\n>         > > the bug tracker? Also, a listing page for bugs with their\n>         bounties might\n>         > > be nice too.\n>         >\n>         > Good idea. I'm not sure if the github bug tracker supports\n>         extension\n>         > attributes, but it'd be a great place to add it. Also,\n>         people can let know\n>         > that they're already working on a feature using a comment,\n>         to prevent\n>         > double work.\n>         \n>         \n>         I'm not sure a few small bounties would justify agreeing to\n>         GitHub's steep\n>         demand for potentially unlimited money in their terms of\n>         service...\n>         \n>         \n>         ------------------------------------------------------------------------------\n>         Got Input?   Slashdot Needs You.\n>         Take our quick survey online.  Come on, we don't ask for help\n>         often.\n>         Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n>         http://p.sf.net/sfu/slashdot-survey\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>         \n> \n> \n> ------------------------------------------------------------------------------\n> Got Input?   Slashdot Needs You.\n> Take our quick survey online.  Come on, we don't ask for help often.\n> Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n> http://p.sf.net/sfu/slashdot-survey\n> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Discussion on implementing bug bounties for Bitcoin development, with suggestions for a more democratic approach and hiring a full-time developer."}, {"author": "Gavin Andresen", "date": "2011-07-27T22:45:37", "message_text_only": "RE: bounties:\n\n\"A couple of bitcoins to fix a bug\" sounds to me like nothing but trouble\nfor whoever is in charge of awarding the bounties, but maybe I'm just\nanti-bounty because spending 2 or 3 hours and getting $30 worth of bitcoins\nfor fixing a bug wouldn't motivate me.\n\nAnybody know how cash bounties have worked for other projects?  Have any\nothers paid bounties on run-of-the-mill bugs, and did that cause any\nproblems?  I'm worried that if contributors start getting bounties that will\nchange the dynamic from cooperative to competitive.  For example, if\nsomebody has figured out how to solve 90% of some tricky bug I don't want\nthem to hesitate to ask for help on the last 10% because they're worried \"if\nI describe the progress I've made so far somebody might swoop in and steal\nmy bounty....\"\n\nRE: road-map and bug-fix-only-releases:  Great ideas.\n\nRE: paid full-time project lead:  I arranged to get paid to work on bitcoin\nfull-time before I left for Australia; more details when I get back\nweek-after-next.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/1390ad74/attachment.html>", "summary": "Concerns raised about the potential negative impact of offering bounties for bug fixes, and support for a roadmap and bug-fix-only releases. A paid full-time project lead has been arranged."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-07-27T22:54:52", "message_text_only": "On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:\n>  For example, if somebody has figured out how to solve 90% of some\n> tricky bug I don't want them to hesitate to ask for help on the last\n> 10% because they're worried \"if I describe the progress I've made so\n> far somebody might swoop in and steal my bounty....\"\n\nWell, the bounty thing can't be automated, so, wouldn't publishing the\nwork you've done up to then by, for example, mailing this list, pretty\nmuch guarantee someone else couldn't claim they fixed it all by\nthemselves anymore?\n\nIt could, however, end up with some quarrels about how much of the\nbounty to give and to whom. Those are not nice things to have.\n\n- Joel", "summary": "A developer expresses concern about sharing progress on a tricky bug for fear of losing credit or reward, but others suggest sharing to avoid duplication."}, {"author": "Matt Corallo", "date": "2011-07-27T23:07:39", "message_text_only": "On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:\n> \"A couple of bitcoins to fix a bug\" sounds to me like nothing but\n> trouble for whoever is in charge of awarding the bounties, but maybe\n> I'm just anti-bounty because spending 2 or 3 hours and getting $30\n> worth of bitcoins for fixing a bug wouldn't motivate me.\n\nI do think it would motivate some people to fix a bug or two, though I\nwould say it wouldn't encourage long-term contributors, just a bunch of\nhacked together patches which \"fix\" a bug.\n\n> RE: road-map and bug-fix-only-releases:  Great ideas.\nI know jgarzik hates the idea of branching for releases, but quite a few\nprojects do that, and it seems to work fairly well.  I would support the\nidea of starting with 0.4 and branching for bugfixes to an 0.4 branch,\nthen adding new features to a head branch to be eventually called 0.5.\n> \n> \n> RE: paid full-time project lead:  I arranged to get paid to work on\n> bitcoin full-time before I left for Australia; more details when I get\n> back week-after-next.\nAwesome.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/e437d205/attachment.sig>", "summary": "Bitcoin developers discuss the idea of offering bounties for bug fixes, but some express concerns about the effectiveness of such a system."}, {"author": "John Smith", "date": "2011-07-28T06:31:58", "message_text_only": "On Wed, Jul 27, 2011 at 11:07 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:\n> > \"A couple of bitcoins to fix a bug\" sounds to me like nothing but\n> > trouble for whoever is in charge of awarding the bounties, but maybe\n> > I'm just anti-bounty because spending 2 or 3 hours and getting $30\n> > worth of bitcoins for fixing a bug wouldn't motivate me.\n>\n> I do think it would motivate some people to fix a bug or two, though I\n> would say it wouldn't encourage long-term contributors, just a bunch of\n> hacked together patches which \"fix\" a bug.\n>\n\nWhich, in many cases, is enough. Many times, fixing a bug is a few hours of\ndebugging, then fixing three lines of codes.\n\nSometimes it just takes a monkey to sit behind a PC and bash on it frantic\nenough (with a debugger) to find and fix bugs :-) Competition to fix bugs is\n(up to a certain level) good, it gets people off their ass. But I think the\ncompetition problem is very hypothetical. It assumes there will suddenly be\n*a lot* of people that want to fix the same bug. That's unrealistic...\n\nWriting a few test-cases (which is better than the 0 we have now) also won't\ntake a Linus-level developer to work on it full time. A reasonable dev just\nneeds to put some time into it.\n\nThat leaves the more difficult work to the lead devs.\n\nFor a distributed currency I must say there is very little belief here in a\ndistributed process. Yes, you can also start a company and hire people to\nwork on it full time, but then they'll be working on helping customer not\nsolving bugs of the issue tracker (which might have an overlap, but not\nnecessarily). And it also isn't clear whether changes are contributed back\nto the project.\n\nYou should not underestimate the open source community. There's a lot of\nsmart students eager to work on interesting, high-impact projects. Bitcoin\ncertainly fits that description, but the problem is that Bitcoin isn't\nreally that known yet with devs, and they need a little push to get\ninvolved. And to work on the current code-base, because usually they will\nlook at the code and decide it's a piece of crap and want to rewrite it (new\npeople syndrome).\n\nYes, there might be one-time-and-run-off flakes, but hey that's life... you\nonly need to gain a few (semi)dedicated devs from it anyway, not recruit an\narmy of loyal minions.\n\nI'm not saying this push has to be bounties. It could be a nice page, for\nexample just posting the bounties on the forum is a start, but certainly not\nenough. They just get buried in troll poop, and a lot of the forum users are\n... *psychological analysis removed*. You really want to reach out somehow.\n\nIt should at least have a nice page that attracts people on the\nbitcoin.orgsite, and explains why you should work on Bitcoin (because\nthe project is so\nawesome and fun) and some form of attribution (not just a mention in the\ngitlog, but bounties is only one option) if you do manage to fix a bug.\n\nHeck a scoreboard with \"number of bugs squished\" could be a start :-) We\nneed to be creative here...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/88846e1b/attachment.html>", "summary": "The idea of offering bounties to fix bugs in Bitcoin's codebase is discussed, with some arguing it would motivate people to fix bugs, while others suggest it may only encourage quick fixes rather than long-term contributions. The importance of attracting new developers to the project is also highlighted."}, {"author": "Jeff Garzik", "date": "2011-07-28T00:15:44", "message_text_only": "Linux kernel has not solved this problem; developers simply want to\nwork on interesting stuff, rather than debug, I think.\n\nThe best Linus has done so far it making certain periods of time\nbugfix-only, refusing to take new feature pushes during the stability\nperiod.  If there are critical bugs, refusing to release the kernel\nuntil a developer fixes the regressions they added.\n\nLinux is large enough, though, that the ecosystem has grown a support\nnetwork, where companies pay for support (one big way my employer\nstays in business), which includes bug fixes.  So the paid support\norgs, like Red Hat, wind up going a lot of grunt work fixing because\nthey are the closest contact to actual users in the field encountering\nproblems with the Wonderful New Features bestowed upon them by\ndevelopers.\n\n\"drop and run\" coding is a term for developers who appear, commit a\nnew feature, and then disappear without addressing bug reports or\nother feedback regarding their contribution.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Developers prefer working on interesting stuff rather than debugging, leading to \"drop and run\" coding. Linux kernel has periods of bugfix-only and paid support for bug fixes."}, {"author": "Caleb James DeLisle", "date": "2011-07-28T15:37:21", "message_text_only": "Bitcoin seems to have a relatively unique problem, there is a perception that there are early adopters who still have large stashes of btc.\nNot that this is wrong, they knew a good thing early, the problem is that it is hard for someone (me) to justify volunteering work on a codebase which will directly benefit other people even if they do nothing.\n>From my brief observation it appears that the developers now are split between early adopters who are working on their investment, ambitious people who are working on alt clients to satisfy certain requirements for their own projects and hobby developers donating code to alt chain clients because chains which have not taken off don't benefit anyone yet.\nAs far as trying to bring these people together, I don't have any silver bullet answers but I think there needs to be some kind of sponsorship of developers. I2P uses bounties but they are indeed a small community, I can see bounties going very wrong but I suppose it doesn't hurt to experiment. I think grants for active developers make more sense, then we only need someone to decide who is active enough.\nAlso moving in the direction of seperating bitcoin the program from Bitcoin the blockchain and accepting patches for merged mining and alt chain stuff which doesn't directly benefit Bitcoin would help decrease the \"people are making money off of my back\" feeling that (IMO) stands in the way of new developers.\n\nCaleb\n\n\nOn 07/27/2011 08:15 PM, Jeff Garzik wrote:\n> Linux kernel has not solved this problem; developers simply want to\n> work on interesting stuff, rather than debug, I think.\n> \n> The best Linus has done so far it making certain periods of time\n> bugfix-only, refusing to take new feature pushes during the stability\n> period.  If there are critical bugs, refusing to release the kernel\n> until a developer fixes the regressions they added.\n> \n> Linux is large enough, though, that the ecosystem has grown a support\n> network, where companies pay for support (one big way my employer\n> stays in business), which includes bug fixes.  So the paid support\n> orgs, like Red Hat, wind up going a lot of grunt work fixing because\n> they are the closest contact to actual users in the field encountering\n> problems with the Wonderful New Features bestowed upon them by\n> developers.\n> \n> \"drop and run\" coding is a term for developers who appear, commit a\n> new feature, and then disappear without addressing bug reports or\n> other feedback regarding their contribution.\n>", "summary": "Bitcoin developers are split between early adopters, ambitious people, and hobby developers, making it hard to justify volunteering work. Sponsorship and grants for active developers could help. Separating Bitcoin the program from the blockchain and accepting patches for merged mining and alt chain stuff could also decrease the feeling of \"people making money off my back.\""}, {"author": "Mike Hearn", "date": "2011-07-30T11:49:04", "message_text_only": "I've worked on open source projects for over 10 years now. This\ndynamic always exists but I've never seen it seriously kill a project.\n\nThoughts:\n\n - People who start out with features often stick around and become\ncore contributors.\n - Unit tests are critical.\n\nNow there's a basic skeleton for unit tests, the bug debt can start to\nbe paid down by insisting that anyone who touches a piece of code\nintroduces tests, whether it be for new features or refactorings.\nInsist patches won't be accepted without some new tests. In an\nuntested codebase, adding or improving tests often reveals other bugs\nthat then get fixed at the same time.\n\nPeople usually don't want to write tests if there's nothing there\nalready. So I'd suggest seeding the test suite with a small number of\nsimple tests for each part (wallet, net, db, etc). Once there are a\nfew tests already it's easier to get people to add more. It's tempting\nto say, well, the wallet or re-org handling or whatever is the most\ncritical so we'll write lots of tests for that first and do the rest\nlater, but that's not as conducive to getting people to help.\n\nMost complex projects need some unit testing infrastructure to assist.\nFor instance, the ability to use mock network connections or minimal\ndifficulty chains. So if you build up that infrastructure and plant\nthose seeds, it'll be easier for other people to flesh it out.\n\nFinal thought - big test suites take a long time to grow, especially\nin codebases developed without them. A good start is a manually\nwritten test plan, that just walks you through the apps features.\nInsisting that a patch be signed off as passing the test plan is a\ngood way to avoid gigantic breakages like the wallet encryption bug\nfrom cold start, at the cost of slowing down development (nobody likes\ndoing manual test work over and over).\n\nI don't always follow my own advice on this and usually end up\nregretting it ....", "summary": "Unit tests are critical for open source projects. Seed the test suite with simple tests and insist on new tests for patches. A manually written test plan is a good start."}, {"author": "Rick Wesson", "date": "2011-07-30T14:06:28", "message_text_only": "+1\n\nPutting a bounty on the test framework might put some loose change to work.\n\nhttp://code.google.com/p/googletest/ would be my choice\n\nthe list of c++ frameworks is at\nhttp://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B\n\n-rick\n\nOn Sat, Jul 30, 2011 at 4:49 AM, Mike Hearn <mike at plan99.net> wrote:\n> I've worked on open source projects for over 10 years now. This\n> dynamic always exists but I've never seen it seriously kill a project.\n>\n> Thoughts:\n>\n> \u00a0- People who start out with features often stick around and become\n> core contributors.\n> \u00a0- Unit tests are critical.\n>\n> Now there's a basic skeleton for unit tests, the bug debt can start to\n> be paid down by insisting that anyone who touches a piece of code\n> introduces tests, whether it be for new features or refactorings.\n> Insist patches won't be accepted without some new tests. In an\n> untested codebase, adding or improving tests often reveals other bugs\n> that then get fixed at the same time.\n>\n> People usually don't want to write tests if there's nothing there\n> already. So I'd suggest seeding the test suite with a small number of\n> simple tests for each part (wallet, net, db, etc). Once there are a\n> few tests already it's easier to get people to add more. It's tempting\n> to say, well, the wallet or re-org handling or whatever is the most\n> critical so we'll write lots of tests for that first and do the rest\n> later, but that's not as conducive to getting people to help.\n>\n> Most complex projects need some unit testing infrastructure to assist.\n> For instance, the ability to use mock network connections or minimal\n> difficulty chains. So if you build up that infrastructure and plant\n> those seeds, it'll be easier for other people to flesh it out.\n>\n> Final thought - big test suites take a long time to grow, especially\n> in codebases developed without them. A good start is a manually\n> written test plan, that just walks you through the apps features.\n> Insisting that a patch be signed off as passing the test plan is a\n> good way to avoid gigantic breakages like the wallet encryption bug\n> from cold start, at the cost of slowing down development (nobody likes\n> doing manual test work over and over).\n>\n> I don't always follow my own advice on this and usually end up\n> regretting it ....\n>\n> ------------------------------------------------------------------------------\n> Got Input? \u00a0 Slashdot Needs You.\n> Take our quick survey online. \u00a0Come on, we don't ask for help often.\n> Plus, you'll get a chance to win $100 to spend on ThinkGeek.\n> http://p.sf.net/sfu/slashdot-survey\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "The author suggests seeding the test suite with simple tests for each part of the codebase to encourage contributors to add more tests."}, {"author": "Matt Corallo", "date": "2011-07-30T14:07:54", "message_text_only": "On Sat, 2011-07-30 at 07:06 -0700, Rick Wesson wrote:\n> +1\n> \n> Putting a bounty on the test framework might put some loose change to work.\n> \n> http://code.google.com/p/googletest/ would be my choice\n> \n> the list of c++ frameworks is at\n> http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B\n\nWe already have boost testing framework implemented, it just doesn't\nhave many tests.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110730/61a256ea/attachment.sig>", "summary": "Rick suggests putting a bounty on the test framework and recommends googletest, while noting that boost testing framework is already implemented."}], "thread_summary": {"title": "Seeking advice: Encouraging bug-fixing over new features", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Rick Wesson", "Jeff Garzik", "Douglas Huff", "Caleb James DeLisle", "Mike Hearn", "Gavin Andresen", "Matt Corallo", "Joel Joonatan Kaartinen"], "messages_count": 21, "total_messages_chars_count": 31569, "convo_summary": "Bitcoin developers discussed ways to encourage more bug-fixing and testing of existing functionality, including offering BTC bounties for fixing bugs and finding security holes. Suggestions were made to add a way for anyone to add to the bounty attached to a bug on the bug tracker and a listing page for bugs with their bounties. Concerns were raised about GitHub's steep demand for potentially unlimited money, and the discussion also touched on the importance of attracting new developers to the project."}}, {"title": "[Bitcoin-development] Fw: Seeking advice: Encouraging bug-fixing over new features", "thread_messages": [{"author": "Amir Taaki", "date": "2011-07-28T00:02:13", "message_text_only": "----- Forwarded Message -----\nFrom: Amir Taaki <zgenjix at yahoo.com>\nTo: John Smith <witchspace81 at gmail.com>\nSent: Thursday, July 28, 2011 2:01 AM\nSubject: Re: [Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features\n\n\nI already tried the bounties route- made a forum thread offering $4000 worth of bounties and it got very few\u00a0 responses before dropping off the page.\n\n\nAlso, http://forum.bitcoin.org/?topic=4761.0 and http://forum.bitcoin.org/?topic=4543.0\n\nIn the end I came to the conclusion that the only was is to bring in projects and pay people to work fulltime on Bitcoin under an organisation.\n\n\n\n________________________________\nFrom: John Smith <witchspace81 at gmail.com>\nTo: Joel Joonatan Kaartinen <joel.kaartinen at gmail.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nSent: Wednesday, July 27, 2011 4:20 PM\nSubject: Re: [Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features\n\n\nOn Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:\n\nPerhaps even add a way for anyone add to the bounty attached to a bug on\n>the bug tracker? Also, a listing page for bugs with their bounties might\n>be nice too.\n>\n\nGood idea. I'm not sure if the github bug tracker supports extension attributes, but it'd be a great place to add it. Also, people can let know that they're already working on a feature using a comment, to prevent double work.\n\nThe biggest problem will be organizational, in getting the BTC together for bounties; only a high profile member such as Gavin will have enough trust to ask for support. Or maybe there's something left in the faucet? :-)\n\nUnrelated: what also might help is publishing a roadmap. Plan a few \"bug fix only\" releases before scheduling addition of new features. It's also helpful for people that wonder that direction the project is going in...\n\nJS \n\n\n------------------------------------------------------------------------------\nGot Input?\u00a0  Slashdot Needs You.\nTake our quick survey online.\u00a0 Come on, we don't ask for help often.\nPlus, you'll get a chance to win $100 to spend on ThinkGeek.\nhttp://p.sf.net/sfu/slashdot-survey\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/da06568f/attachment.html>", "summary": "Amir Taaki suggests that the only way to encourage bug-fixing over new features is to bring in projects and pay people to work full-time on Bitcoin under an organization."}], "thread_summary": {"title": "Fw: Seeking advice: Encouraging bug-fixing over new features", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 2552}}, {"title": "[Bitcoin-development] Bitcoin components.", "thread_messages": [{"author": "Alan Grimes", "date": "2011-07-28T05:25:46", "message_text_only": "Lets look at:\n\nhttps://en.bitcoin.it/wiki/Infrastructure\n\nThis is OK as a super high-level overview, but it leaves a great deal to \nbe explained.\n\nFirst what is the status of this? Is it fully implemented? A working \nproposal? An approved proposal? etc...\n\nI am working on the peer and the wallet boxes in this diagram. I want to \nimplement my own version because the existing code is completely \nuntrustworthy, it is totally slap-dash and almost completely uncommented.\n\nMy questions related to the peer are these:\n\nIt is taken for granted that the peer will have a listening component \nthat accepts connections from other peers.\n\nDoes it also have an active component? If so, what operations does it \nperform autonomously?\n\n/me looks at wallet.h and GAH!! Someone reversed the concept of debit \nand credit! =( (GetDebit(), GetCredit())\n\nInteresting... What is the exact relationship between the wallet and the \nminer? (The miner is irrelevant to me until I have a wallet I can trust \nenough to experiment with...)\n\nAfter reading the dox on libdb, I'm leaning towards an inetd \nimplementation. That is, inetd handles all the dirty work with regards \nto connections, and spawns off a server for each client. This minimizes \nthe quantity of code at the cost of a wee bit of overhead (maybe 10k per \nprocess). Basically, the penguin acts like the KoAC in Katamari Damacy, \nif you don't do it in the regal old-fashioned way, he rains down \nthunderbolts on you and you get to write 3 or 4 times as much code.\n\nThe upside is that each peer is served by a single completely isolated \nprocess with extremely simple and highly auditable code.\n\nA general problem that I haven't seen any documentation on yet is that \nmost of today's operating systems are properly multi-user systems. \nNaturally, each user would keep his wallet in an encrypted store in his \nhome directory. Are there any standards yet for users to set up their \npersonal wallet daemon that connects to a system-wide peer node and \nprovides an interface for only their own GUI?\n\n-- \nE T F\nN H E\nD E D\n\nPowers are not rights.", "summary": "The author is working on implementing their own version of the peer and wallet boxes in the Bitcoin infrastructure diagram due to the existing code being untrustworthy. They question the exact relationship between the wallet and the miner and suggest an inetd implementation to minimize the quantity of code. They also raise the issue of multi-user systems and personal wallet daemons."}, {"author": "Luke-Jr", "date": "2011-07-28T05:56:50", "message_text_only": "On Thursday, July 28, 2011 1:25:46 AM Alan Grimes wrote:\n> https://en.bitcoin.it/wiki/Infrastructure\n> \n> This is OK as a super high-level overview, but it leaves a great deal to\n> be explained.\n> \n> First what is the status of this? Is it fully implemented? A working\n> proposal? An approved proposal? etc...\n\nI put the page together a while ago with logical segregation of the current \nBitcoin concept. wxBitcoin originally implemented the entire thing as one big \nblob. Miners got moved out first. Spesmilo took the next step of separating \nout a GUI. Wallet and node are currently tightly tied together in bitcoind, \nthough it can function as only one of the two just as well. So in practice, it \nis fully possible to run it like that, but I'm not aware of any de facto use \nyet.\n\n> It is taken for granted that the peer will have a listening component\n> that accepts connections from other peers.\n> \n> Does it also have an active component? If so, what operations does it\n> perform autonomously?\n\nGenerally, nodes need to make outbound connections too, at least to get \nstarted.\n\n> Interesting... What is the exact relationship between the wallet and the\n> miner? (The miner is irrelevant to me until I have a wallet I can trust\n> enough to experiment with...)\n\nThe miner can really get by with just an address from the wallet--\nit needs somewhere to put its generated coins ;)\n\n> A general problem that I haven't seen any documentation on yet is that\n> most of today's operating systems are properly multi-user systems.\n> Naturally, each user would keep his wallet in an encrypted store in his\n> home directory. Are there any standards yet for users to set up their\n> personal wallet daemon that connects to a system-wide peer node and\n> provides an interface for only their own GUI?\n\nYou can run a system-wide bitcoind (or equivalent) to handle p2p connectivity, \nand have each user run a dedicated wallet bitcoind (with the -connect option) \nwith a unique JSON-RPC port (for Spesmilo) or wx GUI. I don't think there is \nany automated setup for this kind of arrangement. I personally foresee the p2p \nbeing implemented on a SOHO router as the end goal (or even better-- \nmulticast).", "summary": "Discussion on the current status and implementation of Bitcoin infrastructure, including the relationship between the wallet and miner, and multi-user system considerations."}, {"author": "Matt Corallo", "date": "2011-07-28T11:21:06", "message_text_only": "On Thu, 2011-07-28 at 01:25 -0400, Alan Grimes wrote:\n> I am working on the peer and the wallet boxes in this diagram. I want to \n> implement my own version because the existing code is completely \n> untrustworthy, it is totally slap-dash and almost completely uncommented.\nYay, yet another person who wants to write their own client from scratch\nwho will get the net code done, work a bit on wallet code and move on to\nsomething more exciting.  Seriously, at this point it seems everyone and\ntheir mother are writing their own, or planning to write their own,\nclient.\nBitcoin's code actually can be fairly well segmented into the necessary\npieces (CWallet was the first big chunk, more are coming) and comments\nare being added as a part of that effort.\nThe current code is much, much more trustworthy than anything someone\nnew will start to code, even if they have 20 lines of comments for each\nline of code.  If you want to help the project, please dont write yet\nanother new client library, just look for an existing one you can help\nwith, or help with the original client.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/3f64dd0d/attachment.sig>", "summary": "A developer wants to implement their own version of Bitcoin's peer and wallet boxes due to the existing code being untrustworthy and uncommented. However, the current code is more trustworthy than anything new."}], "thread_summary": {"title": "Bitcoin components.", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Alan Grimes", "Matt Corallo"], "messages_count": 3, "total_messages_chars_count": 5645, "convo_summary": "The convo discussed the implementation of Bitcoin infrastructure, particularly the relationship between the wallet and miner, and multi-user system considerations. The author plans to create their own version of the peer and wallet boxes due to untrustworthy existing code, but Matt Corallo suggests the current code is more trustworthy than anything new."}}, {"title": "[Bitcoin-development] Forking personal \"vanity\" versions...", "thread_messages": [{"author": "Alan Grimes", "date": "2011-07-28T18:43:22", "message_text_only": "To those who think there are too many vanity versions of bitcoin, all I \nhave to say is this:\n\n\natg at tortoise ~/source/bitcoin/src $ make -f makefile.unix\ng++ -c -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DNOPCH \n-DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=0 \n-I/usr/lib64/wx/include/gtk2-unicode-2.9 -I/usr/include/wx-2.9 \n-DwxDEBUG_LEVEL=2 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ \n-pthread -DGUI -o obj/util.o util.cpp\nIn file included from util.cpp:4:0:\nheaders.h:43:20: fatal error: db_cxx.h: No such file or directory\ncompilation terminated.\nmake: *** [obj/util.o] Error 1\natg at tortoise ~/source/bitcoin/src $\n\n\n'nuff said.\n\n\n-- \nE T F\nN H E\nD E D\n\nPowers are not rights.", "summary": "A technical error message is used to argue against the idea that there are too many versions of Bitcoin, emphasizing the importance of technical expertise."}, {"author": "Gregory Maxwell", "date": "2011-07-28T18:49:07", "message_text_only": "On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net> wrote:\n> To those who think there are too many vanity versions of bitcoin, all I\n> have to say is this:\n\nThere is a 'vanity version' that removes the use of libdb or somehow\nmagically requires you to not have its development headers installed\non your system?", "summary": "Alan Grimes defends the existence of \"vanity versions\" of Bitcoin, which offer unique features and customization options."}, {"author": "John Smith", "date": "2011-07-28T18:58:20", "message_text_only": "On Thu, Jul 28, 2011 at 6:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net>\n> wrote:\n> > To those who think there are too many vanity versions of bitcoin, all I\n> > have to say is this:\n>\n> There is a 'vanity version' that removes the use of libdb or somehow\n> magically requires you to not have its development headers installed\n> on your system?\n>\n\nMaybe they have magic build instructions in the readme file! :-)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/e730d57e/attachment.html>", "summary": "A discussion about a \"vanity version\" of Bitcoin that removes the use of libdb or requires not having its development headers installed."}, {"author": "Luke-Jr", "date": "2011-07-28T19:08:08", "message_text_only": "On Thursday, July 28, 2011 2:49:07 PM Gregory Maxwell wrote:\n> On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net> wrote:\n> > To those who think there are too many vanity versions of bitcoin, all I\n> > have to say is this:\n>\n> There is a 'vanity version' that removes the use of libdb or somehow\n> magically requires you to not have its development headers installed\n> on your system?\n\nYou'll get that error even with the headers installed, because the makefile \ndoesn't add the proper include paths to GCC.\n\nTo build, I first: sed -i s/static/dynamic/ makefile.unix # because static \nlibraries aren't standard on my OS (nor should they be)\n\nThen: make -f makefile.unix DEBUGFLAGS=\"-I/usr/include/db4.8 -ggdb -O0\" \\\n      -j4 USE_UPNP=1 bitcoind", "summary": "A user encounters an error while building a vanity version of Bitcoin due to the makefile not adding proper include paths to GCC."}, {"author": "Matt Corallo", "date": "2011-07-28T19:28:29", "message_text_only": "On Thu, 2011-07-28 at 14:43 -0400, Alan Grimes wrote:\n> To those who think there are too many vanity versions of bitcoin, all I \n> have to say is this:\n> 'nuff said.\n> \n> \n\nSeriously? This is the very reason most people dont use the forums\nanymore.  This is just a one-off email that says nothing, doesn't ask a\nquestion doesn't make a statement, and doesn't do anything remotely\nuseful, keep this kind of crap to yourself.", "summary": "A forum user criticizes a vague and useless email about bitcoin vanity versions, stating it is the reason people don't use forums anymore."}, {"author": "Gavin Andresen", "date": "2011-07-28T22:41:12", "message_text_only": "Matt:  First I agree with you.  Second: your should have sent your message\ndirectly to Alan instead of to the entire bitcoin-development list.\n\nAll: The idea is for this mailing list to be CONSTRUCTIVE discussion of\nbitcoin development.  Please ask yourself \"will my message help move the\nbitcoin project forward or will it just make somebody angry\" before posting.\n And assume that at least someone on the list just broke up with their\ngirlfriend and is in a crappy mood.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110729/c9ce4ccb/attachment.html>", "summary": "The bitcoin-development list should be used for constructive discussion, and messages should be evaluated before posting to avoid causing unnecessary anger."}], "thread_summary": {"title": "Forking personal \"vanity\" versions...", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Alan Grimes", "Gregory Maxwell", "Matt Corallo", "Gavin Andresen"], "messages_count": 6, "total_messages_chars_count": 3566, "convo_summary": "The convo discussed the existence of \"vanity versions\" of Bitcoin, which offer unique features and customization options. Technical errors were encountered while building these versions, and a vague email about them was criticized. The importance of technical expertise and constructive discussion was emphasized."}}, {"title": "[Bitcoin-development]  Unit tests", "thread_messages": [{"author": "John Smith", "date": "2011-07-31T11:21:34", "message_text_only": "Oops, should have gone to the list\n\nOn Sat, Jul 30, 2011 at 2:07 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> On Sat, 2011-07-30 at 07:06 -0700, Rick Wesson wrote:\n> > +1\n> >\n> > Putting a bounty on the test framework might put some loose change to\n> work.\n> >\n> > http://code.google.com/p/googletest/ would be my choice\n> >\n> > the list of c++ frameworks is at\n> > http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B\n>\n> We already have boost testing framework implemented, it just doesn't\n> have many tests.\n>\n\nBTW, talking about the unit testframework: It doesn't build here by default:\n\n$ make -f makefile.unix test_bitcoin  USE_UPNP=\n\ng++ -static  -o test_bitcoin  obj/test/test_bitcoin.o -Wl,-Bstatic -l\nboost_system -l boost_filesystem -l boost_program_options -l boost_thread -l\ndb_cxx -l ssl -l crypto -Wl,-Bdynamic -l gthread-2.0 -l z -l dl -l pthread\n-lboost_unit_test_framework\n/usr/lib/gcc/x86_64-linux-gnu/4.4.5/../../../../lib/crt1.o: In function\n`_start':\n(.text+0x20): undefined reference to `main'\ncollect2: ld returned 1 exit status\nmake: *** [test_bitcoin] Error 1\n\nTwo ways to fix this:\n\n1) Add #define BOOST_TEST_DYN_LINK  to the top of test_bitcoin.cpp. This is\nneeded for dynamic linking.\n\n2) Link boost_unit_test_framework statically\n\ntest_bitcoin: obj/test/test_bitcoin.o\n        $(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -Wl,-Bstatic\n-lboost_unit_test_framework -Wl,-Bdynamic\n\n(yes, it needs the switch to dynamic again at the end, otherwise libgcc will\nbe linked statically which results in an error ...)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110731/7d5c23f6/attachment.html>", "summary": "Discussion on Bitcoin's boost testing framework implementation and issues with building it by default. Suggestions made for fixing the issue."}], "thread_summary": {"title": "Unit tests", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 1751}}, {"title": "[Bitcoin-development] Unit tests", "thread_messages": [{"author": "Matt Corallo", "date": "2011-07-31T12:24:10", "message_text_only": "On Sun, 2011-07-31 at 11:21 +0000, John Smith wrote:\n> \n> BTW, talking about the unit testframework: It doesn't build here by\n> default:\n> \n> $ make -f makefile.unix test_bitcoin  USE_UPNP=\n> \n> g++ -static  -o test_bitcoin  obj/test/test_bitcoin.o -Wl,-Bstatic -l\n> boost_system -l boost_filesystem -l boost_program_options -l\n> boost_thread -l db_cxx -l ssl -l crypto -Wl,-Bdynamic -l gthread-2.0\n> -l z -l dl -l pthread -lboost_unit_test_framework\n> /usr/lib/gcc/x86_64-linux-gnu/4.4.5/../../../../lib/crt1.o: In\n> function `_start':\n> (.text+0x20): undefined reference to `main'\n> collect2: ld returned 1 exit status\n> make: *** [test_bitcoin] Error 1\n> \n> Two ways to fix this:\n> \n> 1) Add #define BOOST_TEST_DYN_LINK  to the top of test_bitcoin.cpp.\n> This is needed for dynamic linking.\n> \n> 2) Link boost_unit_test_framework statically\n> \n> test_bitcoin: obj/test/test_bitcoin.o\n>         $(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -Wl,-Bstatic\n> -lboost_unit_test_framework -Wl,-Bdynamic\n> \n> (yes, it needs the switch to dynamic again at the end, otherwise\n> libgcc will be linked statically which results in an error ...)\n> \n> JS\n\nSee pull 363 and 442 :)\n\nMatt", "summary": "John Smith reports an issue with the unit test framework not building by default and suggests two ways to fix it."}, {"author": "John Smith", "date": "2011-07-31T12:46:54", "message_text_only": ">\n> See pull 363 and 442 :)\n>\n\nGreat. I really hope these get pulled ASAP, having the tests all over the\nplace in different forks is really confusing :(\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110731/e0b47936/attachment.html>", "summary": "The author hopes that pull requests 363 and 442 will be pulled soon to avoid confusion caused by tests in different forks."}], "thread_summary": {"title": "Unit tests", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Matt Corallo"], "messages_count": 2, "total_messages_chars_count": 1513, "convo_summary": "John Smith reported an issue with the unit test framework not building by default and suggested two ways to fix it. He hopes that pull requests 363 and 442 will be pulled soon to avoid confusion caused by tests in different forks."}}]