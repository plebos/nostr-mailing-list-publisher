[
    {
        "title": "[Bitcoin-development] Positive and negative feedback on certificate validation errors",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2014-03-01T06:26:39",
                "message_text_only": "We currently have subtle positive feedback of a signed payment request in  \nthe form of the green background. Unsigned requests simply show up without  \nthe green background, as well as requests which provide a certificate but  \nhave a missing or invalid signature.\n\nThere's a open bug (#3628) and pull request (#3684) to provide negative  \nfeedback (yellow background) for a missing or invalid signature, but it  \nseems like there's some debate on whether bitcoind should do that...\n\nIf an attacker can avoid the negative feedback by just stripping the  \nsignature and setting pki_type to none, then arguably there's no security  \nbenefit by singling out badly signed payment requests from unsigned  \npayment requests.\n\nSo perhaps the root problem is that the positive feedback (green  \nbackground) is not strong enough to make its absence highly conspicuous to  \nthe end user.\n\nAs an aside, how could we go about implementing the equivalent of HTTP  \nStrict Transport Security for payment protocol to prevent this trivial  \nsignature stripping attack? Is this a possible extension field merchants  \nare interested in?"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-01T07:26:57",
                "message_text_only": "On Sat, Mar 1, 2014 at 7:26 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> There's a open bug (#3628) and pull request (#3684) to provide negative\n> feedback (yellow background) for a missing or invalid signature, but it\n> seems like there's some debate on whether bitcoind should do that...\n>\n\nThe consensus there is to treat invalid and unsigned payment requests the\nsame (apart from debug error logging). After all, the cost to the attacker\nto remove the signature or corrupt it is exactly the same.\n\nI do recommend testing that pull request (#3684) to see if it improves\npayment request reporting, and provide testing reports or suggestions in\nthe github comments.\n\nI've been very busy the last few weeks with integrating and testing other\npre-0.9 changes so I have been unable to look at the visual side of payment\nrequest stuff much. We could use some help there.\n\nIf an attacker can avoid the negative feedback by just stripping the\n> signature and setting pki_type to none, then arguably there's no security\n> benefit by singling out badly signed payment requests from unsigned\n> payment requests.\n>\n\nExactly.\n\n\n> So perhaps the root problem is that the positive feedback (green\n> background) is not strong enough to make its absence highly conspicuous to\n> the end user.\n>\n\nWell, ideas to make the difference more conspicuous are welcome. The green\nbackground is just to make a basic distinction.\n\nIf it involves any imagery or graphics we do need contributions (with the\nappropriate MIT license), no one of us is an artist.\n\n\n> As an aside, how could we go about implementing the equivalent of HTTP\n> Strict Transport Security for payment protocol to prevent this trivial\n> signature stripping attack? Is this a possible extension field merchants\n> are interested in?\n>\n\nSuch a thing would be interesting for a future BIP standard. I see one\nproblem here: for an unsigned payment request there isn't really an\n\"origin\". Browser URI handlers don't send the referrer either.\n\nThis rules out adding a field to the Bitcoin URI 'requests from us must be\nsigned from now on' (there's no us).\n\nThe server that serves the payment requests *could* serve an HSTS-like\nheader 'only accept signed payment requests from us from now on'. The\nclient needs to remember this for this server. Then if someone has\ncompromised that server (or hijacked DNS) to serve fake and unsigned\npayment requests, the client can block these.\n\nNeither scenario will help in the case in which the server serving the\nBitcoin URIs is compromised.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/93b80bf0/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-03-01T07:50:32",
                "message_text_only": "On Fri, 28 Feb 2014 23:26:57 -0800, Wladimir <laanwj at gmail.com> wrote:\n\n> Such a thing would be interesting for a future BIP standard. I see one  \n> problem here: for an unsigned payment request there isn't really an  \n> \"origin\". >Browser URI handlers don't send the referrer either.\n\nYeah, good point. If you have a cert, we have the CN from the cert, which  \nbecomes the string displayed as 'Pay To' and alternatively 'Merchant'.\n\nBut if there's no cert then all you have is memo.\n\nSo the best way to differentiate signed requests is by prominently  \ndisplaying that Merchant string. Really the green part should just be the  \n'Pay To' line, the rest is content. If it showed a BLANK 'Pay To' that  \nwould make the lack of certificate highly apparent.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140228/4ceb93c0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T10:37:48",
                "message_text_only": "I'm hoping I can convince Saivann to do a bit of graphics work for this at\nsome point :-)\n\nSomething like a green stamp that appears (like a watermark) in the\nbackground, might be good.\n\n\nOn Sat, Mar 1, 2014 at 8:50 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n>  On Fri, 28 Feb 2014 23:26:57 -0800, Wladimir <laanwj at gmail.com> wrote:\n>\n> Such a thing would be interesting for a future BIP standard. I see one\n> problem here: for an unsigned payment request there isn't really an\n> \"origin\". Browser URI handlers don't send the referrer either.\n>\n>\n> Yeah, good point. If you have a cert, we have the CN from the cert, which\n> becomes the string displayed as 'Pay To' and alternatively 'Merchant'.\n>\n> But if there's no cert then all you have is memo.\n>\n> So the best way to differentiate signed requests is by prominently\n> displaying that Merchant string. Really the green part should just be the\n> 'Pay To' line, the rest is content. If it showed a BLANK 'Pay To' that\n> would make the lack of certificate highly apparent.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/8bc71fa8/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-02T18:18:18",
                "message_text_only": "On Fri, Feb 28, 2014 at 10:26:39PM -0800, Jeremy Spilman wrote:\n> We currently have subtle positive feedback of a signed payment request in  \n> the form of the green background. Unsigned requests simply show up without  \n> the green background, as well as requests which provide a certificate but  \n> have a missing or invalid signature.\n\nAre we talking a third-party 'root certificate'?\n\nI don't quite see why a cryptographic currency that has the most widely \ndeployed ECDSA public/private key infrastructure ever needs to use external\ncertificates. That seems like a significant reduction in security to pretend\nthat a 'signed' certificate is any good when it's pretty easy to buy a\ncompromised cert, or just hack the server its on.\n\nIf it's 'signed' by the ECDSA private key that you are sending the payment\nto, by all means, make it bright green.\n\nI mean if you want to make it expensive for small businesses to take secure\npayments, why don't you add a native 'signing fee' extension and have a \n(more) transparent market for the price of perceived security, or at least\na compile time option so i can turn this nonsense off for my customers.\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            }
        ],
        "thread_summary": {
            "title": "Positive and negative feedback on certificate validation errors",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Mike Hearn",
                "Jeremy Spilman",
                "Wladimir"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 8172
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol Hash Comments",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2014-03-02T07:52:40",
                "message_text_only": "From BIP70:\n\n   If pki_type is \"x509+sha256\", then the Payment message is hashed using  \nthe\n   SHA256 algorithm to produce the message digest that is signed. If  \npki_type\n   is \"x509+sha1\", then the SHA1 algorithm is used.\n\nA couple minor comments;\n\n  - I think it meant to say the field to be hashed is 'PaymentRequest' not  \n'Payment' message -- probably got renamed at some point and this is an old  \nreference calling it by its original name.\n\n  - Could be a bit more explicit about the hashing, e.g. 'copy the  \nPaymentRequest, set the signature field to the empty string, serialize to  \na byte[] and hash.\n\n  - SHA1 is retiring, any particular reason to even have it in there at all?\n\n  - Should there any way for the end-user to see details like the pki_type  \nand the certificate chain, like browser do?\n\n\nThanks,\nJeremy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T08:44:21",
                "message_text_only": "SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.\nOn 2 Mar 2014 08:53, \"Jeremy Spilman\" <jeremy at taplink.co> wrote:\n\n>  From BIP70:\n>\n>    If pki_type is \"x509+sha256\", then the Payment message is hashed using\n> the\n>    SHA256 algorithm to produce the message digest that is signed. If\n> pki_type\n>    is \"x509+sha1\", then the SHA1 algorithm is used.\n>\n> A couple minor comments;\n>\n>   - I think it meant to say the field to be hashed is 'PaymentRequest' not\n> 'Payment' message -- probably got renamed at some point and this is an old\n> reference calling it by its original name.\n>\n>   - Could be a bit more explicit about the hashing, e.g. 'copy the\n> PaymentRequest, set the signature field to the empty string, serialize to\n> a byte[] and hash.\n>\n>   - SHA1 is retiring, any particular reason to even have it in there at\n> all?\n>\n>   - Should there any way for the end-user to see details like the pki_type\n> and the certificate chain, like browser do?\n>\n>\n> Thanks,\n> Jeremy\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/35e640c6/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-03-02T08:52:41",
                "message_text_only": "Not true, PHP does support sha2\n\nhttp://php.net/manual/en/mhash.constants.php\nhttp://php.net/manual/en/function.hash-algos.php#refsect1-function.hash-algos-examples\nOn 2 Mar 2014 08:44, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.\n> On 2 Mar 2014 08:53, \"Jeremy Spilman\" <jeremy at taplink.co> wrote:\n>\n>>  From BIP70:\n>>\n>>    If pki_type is \"x509+sha256\", then the Payment message is hashed using\n>> the\n>>    SHA256 algorithm to produce the message digest that is signed. If\n>> pki_type\n>>    is \"x509+sha1\", then the SHA1 algorithm is used.\n>>\n>> A couple minor comments;\n>>\n>>   - I think it meant to say the field to be hashed is 'PaymentRequest' not\n>> 'Payment' message -- probably got renamed at some point and this is an old\n>> reference calling it by its original name.\n>>\n>>   - Could be a bit more explicit about the hashing, e.g. 'copy the\n>> PaymentRequest, set the signature field to the empty string, serialize to\n>> a byte[] and hash.\n>>\n>>   - SHA1 is retiring, any particular reason to even have it in there at\n>> all?\n>>\n>>   - Should there any way for the end-user to see details like the pki_type\n>> and the certificate chain, like browser do?\n>>\n>>\n>> Thanks,\n>> Jeremy\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Flow-based real-time traffic analytics software. Cisco certified tool.\n>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> Customize your own dashboards, set traffic alerts and generate reports.\n>> Network behavioral analysis & security monitoring. All-in-one tool.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/f8fc2a2c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T10:39:18",
                "message_text_only": "I'm just repeating the rationale Gavin gave me for adding this to the spec\nlast year when he was implementing it. Perhaps it only applied to some\nversions of PHP or something like that.\n\nJeremy, good comments. A pull request to fix those would be good.\n\nOne issue I seem looming on the horizon is that we'll need a version of the\npayment protocol document that's living. Trying to reverse engineer the\ncurrent spec by manually reading all the BIPs and layering them in your\nhead is a non starter.\n\n\n\n\nOn Sun, Mar 2, 2014 at 9:52 AM, Drak <drak at zikula.org> wrote:\n\n> Not true, PHP does support sha2\n>\n> http://php.net/manual/en/mhash.constants.php\n>\n> http://php.net/manual/en/function.hash-algos.php#refsect1-function.hash-algos-examples\n> On 2 Mar 2014 08:44, \"Mike Hearn\" <mike at plan99.net> wrote:\n>\n>> SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.\n>> On 2 Mar 2014 08:53, \"Jeremy Spilman\" <jeremy at taplink.co> wrote:\n>>\n>>>  From BIP70:\n>>>\n>>>    If pki_type is \"x509+sha256\", then the Payment message is hashed using\n>>> the\n>>>    SHA256 algorithm to produce the message digest that is signed. If\n>>> pki_type\n>>>    is \"x509+sha1\", then the SHA1 algorithm is used.\n>>>\n>>> A couple minor comments;\n>>>\n>>>   - I think it meant to say the field to be hashed is 'PaymentRequest'\n>>> not\n>>> 'Payment' message -- probably got renamed at some point and this is an\n>>> old\n>>> reference calling it by its original name.\n>>>\n>>>   - Could be a bit more explicit about the hashing, e.g. 'copy the\n>>> PaymentRequest, set the signature field to the empty string, serialize to\n>>> a byte[] and hash.\n>>>\n>>>   - SHA1 is retiring, any particular reason to even have it in there at\n>>> all?\n>>>\n>>>   - Should there any way for the end-user to see details like the\n>>> pki_type\n>>> and the certificate chain, like browser do?\n>>>\n>>>\n>>> Thanks,\n>>> Jeremy\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Flow-based real-time traffic analytics software. Cisco certified tool.\n>>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>>> Customize your own dashboards, set traffic alerts and generate reports.\n>>> Network behavioral analysis & security monitoring. All-in-one tool.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Flow-based real-time traffic analytics software. Cisco certified tool.\n>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> Customize your own dashboards, set traffic alerts and generate reports.\n>> Network behavioral analysis & security monitoring. All-in-one tool.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/6ec02843/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-03-03T12:39:36",
                "message_text_only": "On 2 March 2014 10:39, Mike Hearn <mike at plan99.net> wrote:\n\n> I'm just repeating the rationale Gavin gave me for adding this to the spec\n> last year when he was implementing it. Perhaps it only applied to some\n> versions of PHP or something like that.\n>\n\nOK, but certainly now, SHA-2 is available as standard in PHP and has been\nsince PHP 5.1.2 as part of the hash() function. You can see from usage\nstats that means practically every installation\nhttp://w3techs.com/technologies/details/pl-php/5/all is PHP 5.2 and above.\n\nUnless there is some other compelling reason, I would suggest removing\nSHA-1 from the specification.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/620472ea/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol Hash Comments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Jeremy Spilman",
                "Drak"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9701
        }
    },
    {
        "title": "[Bitcoin-development] Making the H in HD keychains useful",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2014-03-01T12:29:48",
                "message_text_only": "I've been trying to find ways to make HD keychain wallets (BIP0032) really usable from an application development perspective. I think we all know a number of solid use cases and possible applications for the D in HD, but nobody seems to have really found a way to make use of the H in a way that is actually manageable from a usability standpoint.\n\nAfter pondering it a bit more, I think I've stumbled upon at least a couple issues that seem to give hints as to how we can change this.\n\nHierarchical organizations do not generally tend to be designed up front, cast in stone. In the real world, hierarchies tend to evolve organically, growing new branches as entities differentiate themselves to different purposes. Organizations grow over time. Sometimes branches merge, sometimes branches die. This means that for HD keychains to be truly useful, they too need to be sufficiently flexible to adapt to the needs of a growing and evolving organization. It needs to be simple to create and move branches around as the need for them arises without having to plan the structure a priori.\n\nA significant problem I'm runnign into in trying to build applications around the BIP0032 standard is the lack of a clear separation between signing keys and hierarchical nodes. That's to say, a child of a node can either be used as a signing key or as a parent for new branches to the tree. From a usability standpoint, what this means is that one must be very careful in how one allocates keys from the very beginning - if one mixes signing keys with new branching nodes in the same generation, the whole thing becomes a horrendous mess. Moreover, it is impossible to generally distinguish these two fundamentally different types of objects (at least from a use model perspective) just from the extended key representation, something that is certain to create significant confusion as we try to design applications that can share these types of objects.\n\nAn organization might begin as a single individual who just wants to generate signing keys for him/herself. Later on, this individual might bring on another individual or two and create new branches for them. With the current HD keychain structure, unless this individual made sure to set aside these new branches from the start, the individual is now forced to mix the new branches in at the same level of the hierarchy as the signing keys. Instead, it should be possible to branch off any node without having to worry at all about whether or not that node has been used to generate signing keys at all.\n\nA possible workaround to this issue is to always allocate a specific child for hierarchical derivation and the rest of the children for signing keys. Then to create subbranches, the specific child would be used as the new parent, effectively alternating generations between signing keys and organizational nodes. However, this solution seems pretty ugly.\n\nA better solution, IMO, is to only use BIP0032 for organizational hierarchy and have a different mechanism for generating a sequence of signing keys from a given node. This different mechanism could be used standalone by those not needing the full set of hierarchical features. For those who do want to use the hierarchical features, it could be seeded by the keys in the BIP0032 hierarchy. These individual signing keys would NEVER be represented in the same format as the organizational hierarchy nodes, thus ensuring applications can share these structures without risk of confusion.\n\nUntil we make this clear distinction between organizational hierarchy (which parallels real-world organizations) and signing keys (which are merely cryptographic primitives, preferably never even shown directly to most endusers), I think we'll fail to find good ways to make the H in HD keychains useful.\n\n-Eric Lombrozo\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/7425caea/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Making the H in HD keychains useful",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4115
        }
    },
    {
        "title": "[Bitcoin-development] Decentralized digital asset exchange with honest pricing and market depth",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-01T17:45:13",
                "message_text_only": "> > You can make the same argument against Bitcoin itself you know...\n> >\n> > A Bitmessage-like network would be trivial to front-run via a sybil\n> > attack. It's the fundemental problem with marketplaces - the data\n> > they're trying to publish has to be public.\n> \n> I don't see the Bitcoin analogy...\n> Anyway, I still don't think the seller cares, if he sells at the price\n> he was asking, what would he care about \"front running\" those parallel\n> networks.\n> I've seen many street markets without \"public information\" and they\n> work just well.\n\nThe spot price for ammonia fertilizer, refined gasoline at terminals, \nand price of tea in china are not 'public information', yet these are\nsome of the largest traded commodities in the world, far exceeding \nthe drop in the bucket that all cryptocoin transactions make.\n\nI'd further argue that the *actual* price of corn (cash bid price at\nelevators and ethanol plants) is not public information either. There\nis a great deal of money traded in collecting and then distributing the\n'cleared price' information. Have a look at \nhttp://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n\n \n> >> I don't think this will be a tragedy, because like we discussed on\n> >> IRC, I don't think the primary goal of markets is price discovery, but\n> >> trade itself.\n> >>\n> >> About historic data, the actual trades are always public, and some\n> >> kind of \"archivers\" could collect and maintain old orders for historic\n> >> bid and asks, etc.\n> >\n> > And again, how do you know that record is honest? Fact is without\n> > proof-of-publication you just don't.\n> \n> Well, the trades that appeared in the chain actually occurred.\n> Buying to yourself at fake prices? Be careful, the miner could just\n> separate the order and fill it himself. Or anyone paying a higher fee,\n> for that matter.\n\nYou just made my long-term strategic argument for investing in my own\nmining hardware so I can be sure to trade reliably.\n\n> Again, you haven't addressed why the seller cares more about \"accurate\n> historic market data\" than just his own fees and sell.\n> \n> > You mean a reverse nLockTime that makes a transaction invalid after a\n> > certain amount of time - that's dangerous in a reorg unfortunately as it\n> > can make transactions permenantly invalid.\n \nPeople who take money from buyers and sellers care most about 'accurate \nhistoric market data'. I just want to exchange my corn for e85, fertilizer,\nand electricity, and audit the code that runs accounting for the exchange.\n\nI really don't give a shit if there is 'accurate historic market data' as\nlong as **MY** personal trade data is accurate and I got a good enough price,\nand I know who I'm dealing with.\n\nI know someone smarter than me and with more money, market leverage, and \npolitical connections **WILL** game the system and distort the market data\nhistory so they can take more money from buyers and sellers without actually\ndoing some usefull market function. \n\nAs long as use buyers and sellers can see the code, and have a good eye for\nknowing when someone's pushing the market around, we can just put our orders\nin and relieve some speculators of their money.\n\nJust get me working code for cross-chain trades, and we'll work on the \naccurate historic data problem later.\n\n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-01T18:22:56",
                "message_text_only": "This is wandering far off-topic for this mailing list.\n\nOn Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n>> > You can make the same argument against Bitcoin itself you know...\n>> >\n>> > A Bitmessage-like network would be trivial to front-run via a sybil\n>> > attack. It's the fundemental problem with marketplaces - the data\n>> > they're trying to publish has to be public.\n>>\n>> I don't see the Bitcoin analogy...\n>> Anyway, I still don't think the seller cares, if he sells at the price\n>> he was asking, what would he care about \"front running\" those parallel\n>> networks.\n>> I've seen many street markets without \"public information\" and they\n>> work just well.\n>\n> The spot price for ammonia fertilizer, refined gasoline at terminals,\n> and price of tea in china are not 'public information', yet these are\n> some of the largest traded commodities in the world, far exceeding\n> the drop in the bucket that all cryptocoin transactions make.\n>\n> I'd further argue that the *actual* price of corn (cash bid price at\n> elevators and ethanol plants) is not public information either. There\n> is a great deal of money traded in collecting and then distributing the\n> 'cleared price' information. Have a look at\n> http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n>\n>\n>> >> I don't think this will be a tragedy, because like we discussed on\n>> >> IRC, I don't think the primary goal of markets is price discovery, but\n>> >> trade itself.\n>> >>\n>> >> About historic data, the actual trades are always public, and some\n>> >> kind of \"archivers\" could collect and maintain old orders for historic\n>> >> bid and asks, etc.\n>> >\n>> > And again, how do you know that record is honest? Fact is without\n>> > proof-of-publication you just don't.\n>>\n>> Well, the trades that appeared in the chain actually occurred.\n>> Buying to yourself at fake prices? Be careful, the miner could just\n>> separate the order and fill it himself. Or anyone paying a higher fee,\n>> for that matter.\n>\n> You just made my long-term strategic argument for investing in my own\n> mining hardware so I can be sure to trade reliably.\n>\n>> Again, you haven't addressed why the seller cares more about \"accurate\n>> historic market data\" than just his own fees and sell.\n>>\n>> > You mean a reverse nLockTime that makes a transaction invalid after a\n>> > certain amount of time - that's dangerous in a reorg unfortunately as it\n>> > can make transactions permenantly invalid.\n>\n> People who take money from buyers and sellers care most about 'accurate\n> historic market data'. I just want to exchange my corn for e85, fertilizer,\n> and electricity, and audit the code that runs accounting for the exchange.\n>\n> I really don't give a shit if there is 'accurate historic market data' as\n> long as **MY** personal trade data is accurate and I got a good enough price,\n> and I know who I'm dealing with.\n>\n> I know someone smarter than me and with more money, market leverage, and\n> political connections **WILL** game the system and distort the market data\n> history so they can take more money from buyers and sellers without actually\n> doing some usefull market function.\n>\n> As long as use buyers and sellers can see the code, and have a good eye for\n> knowing when someone's pushing the market around, we can just put our orders\n> in and relieve some speculators of their money.\n>\n> Just get me working code for cross-chain trades, and we'll work on the\n> accurate historic data problem later.\n>\n> ----------------------------------------------------------------------------\n> Troy Benjegerdes                 'da hozer'                  hozer at hozed.org\n> 7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n>\n>       Never pick a fight with someone who buys ink by the barrel,\n>          nor try buy a hacker who makes money by the megahash\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-01T18:28:22",
                "message_text_only": "Only if you view bitcoin as no more than a payment network.\nOn Mar 1, 2014 10:24 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> This is wandering far off-topic for this mailing list.\n>\n> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> >> > You can make the same argument against Bitcoin itself you know...\n> >> >\n> >> > A Bitmessage-like network would be trivial to front-run via a sybil\n> >> > attack. It's the fundemental problem with marketplaces - the data\n> >> > they're trying to publish has to be public.\n> >>\n> >> I don't see the Bitcoin analogy...\n> >> Anyway, I still don't think the seller cares, if he sells at the price\n> >> he was asking, what would he care about \"front running\" those parallel\n> >> networks.\n> >> I've seen many street markets without \"public information\" and they\n> >> work just well.\n> >\n> > The spot price for ammonia fertilizer, refined gasoline at terminals,\n> > and price of tea in china are not 'public information', yet these are\n> > some of the largest traded commodities in the world, far exceeding\n> > the drop in the bucket that all cryptocoin transactions make.\n> >\n> > I'd further argue that the *actual* price of corn (cash bid price at\n> > elevators and ethanol plants) is not public information either. There\n> > is a great deal of money traded in collecting and then distributing the\n> > 'cleared price' information. Have a look at\n> >\n> http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n> >\n> >\n> >> >> I don't think this will be a tragedy, because like we discussed on\n> >> >> IRC, I don't think the primary goal of markets is price discovery,\n> but\n> >> >> trade itself.\n> >> >>\n> >> >> About historic data, the actual trades are always public, and some\n> >> >> kind of \"archivers\" could collect and maintain old orders for\n> historic\n> >> >> bid and asks, etc.\n> >> >\n> >> > And again, how do you know that record is honest? Fact is without\n> >> > proof-of-publication you just don't.\n> >>\n> >> Well, the trades that appeared in the chain actually occurred.\n> >> Buying to yourself at fake prices? Be careful, the miner could just\n> >> separate the order and fill it himself. Or anyone paying a higher fee,\n> >> for that matter.\n> >\n> > You just made my long-term strategic argument for investing in my own\n> > mining hardware so I can be sure to trade reliably.\n> >\n> >> Again, you haven't addressed why the seller cares more about \"accurate\n> >> historic market data\" than just his own fees and sell.\n> >>\n> >> > You mean a reverse nLockTime that makes a transaction invalid after a\n> >> > certain amount of time - that's dangerous in a reorg unfortunately as\n> it\n> >> > can make transactions permenantly invalid.\n> >\n> > People who take money from buyers and sellers care most about 'accurate\n> > historic market data'. I just want to exchange my corn for e85,\n> fertilizer,\n> > and electricity, and audit the code that runs accounting for the\n> exchange.\n> >\n> > I really don't give a shit if there is 'accurate historic market data' as\n> > long as **MY** personal trade data is accurate and I got a good enough\n> price,\n> > and I know who I'm dealing with.\n> >\n> > I know someone smarter than me and with more money, market leverage, and\n> > political connections **WILL** game the system and distort the market\n> data\n> > history so they can take more money from buyers and sellers without\n> actually\n> > doing some usefull market function.\n> >\n> > As long as use buyers and sellers can see the code, and have a good eye\n> for\n> > knowing when someone's pushing the market around, we can just put our\n> orders\n> > in and relieve some speculators of their money.\n> >\n> > Just get me working code for cross-chain trades, and we'll work on the\n> > accurate historic data problem later.\n> >\n> >\n> ----------------------------------------------------------------------------\n> > Troy Benjegerdes                 'da hozer'\n> hozer at hozed.org\n> > 7 elements      earth::water::air::fire::mind::spirit::soul\n> grid.coop\n> >\n> >       Never pick a fight with someone who buys ink by the barrel,\n> >          nor try buy a hacker who makes money by the megahash\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Flow-based real-time traffic analytics software. Cisco certified tool.\n> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> > Customize your own dashboards, set traffic alerts and generate reports.\n> > Network behavioral analysis & security monitoring. All-in-one tool.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/cbe7ec2a/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-01T18:33:25",
                "message_text_only": "This is not bitcoin-philosophy, it's bitcoin-development.  Existential\nphilosophy belongs on IRC or the forums.\n\n\nOn Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Only if you view bitcoin as no more than a payment network.\n>\n> On Mar 1, 2014 10:24 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n>>\n>> This is wandering far off-topic for this mailing list.\n>>\n>> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n>> >> > You can make the same argument against Bitcoin itself you know...\n>> >> >\n>> >> > A Bitmessage-like network would be trivial to front-run via a sybil\n>> >> > attack. It's the fundemental problem with marketplaces - the data\n>> >> > they're trying to publish has to be public.\n>> >>\n>> >> I don't see the Bitcoin analogy...\n>> >> Anyway, I still don't think the seller cares, if he sells at the price\n>> >> he was asking, what would he care about \"front running\" those parallel\n>> >> networks.\n>> >> I've seen many street markets without \"public information\" and they\n>> >> work just well.\n>> >\n>> > The spot price for ammonia fertilizer, refined gasoline at terminals,\n>> > and price of tea in china are not 'public information', yet these are\n>> > some of the largest traded commodities in the world, far exceeding\n>> > the drop in the bucket that all cryptocoin transactions make.\n>> >\n>> > I'd further argue that the *actual* price of corn (cash bid price at\n>> > elevators and ethanol plants) is not public information either. There\n>> > is a great deal of money traded in collecting and then distributing the\n>> > 'cleared price' information. Have a look at\n>> >\n>> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n>> >\n>> >\n>> >> >> I don't think this will be a tragedy, because like we discussed on\n>> >> >> IRC, I don't think the primary goal of markets is price discovery,\n>> >> >> but\n>> >> >> trade itself.\n>> >> >>\n>> >> >> About historic data, the actual trades are always public, and some\n>> >> >> kind of \"archivers\" could collect and maintain old orders for\n>> >> >> historic\n>> >> >> bid and asks, etc.\n>> >> >\n>> >> > And again, how do you know that record is honest? Fact is without\n>> >> > proof-of-publication you just don't.\n>> >>\n>> >> Well, the trades that appeared in the chain actually occurred.\n>> >> Buying to yourself at fake prices? Be careful, the miner could just\n>> >> separate the order and fill it himself. Or anyone paying a higher fee,\n>> >> for that matter.\n>> >\n>> > You just made my long-term strategic argument for investing in my own\n>> > mining hardware so I can be sure to trade reliably.\n>> >\n>> >> Again, you haven't addressed why the seller cares more about \"accurate\n>> >> historic market data\" than just his own fees and sell.\n>> >>\n>> >> > You mean a reverse nLockTime that makes a transaction invalid after a\n>> >> > certain amount of time - that's dangerous in a reorg unfortunately as\n>> >> > it\n>> >> > can make transactions permenantly invalid.\n>> >\n>> > People who take money from buyers and sellers care most about 'accurate\n>> > historic market data'. I just want to exchange my corn for e85,\n>> > fertilizer,\n>> > and electricity, and audit the code that runs accounting for the\n>> > exchange.\n>> >\n>> > I really don't give a shit if there is 'accurate historic market data'\n>> > as\n>> > long as **MY** personal trade data is accurate and I got a good enough\n>> > price,\n>> > and I know who I'm dealing with.\n>> >\n>> > I know someone smarter than me and with more money, market leverage, and\n>> > political connections **WILL** game the system and distort the market\n>> > data\n>> > history so they can take more money from buyers and sellers without\n>> > actually\n>> > doing some usefull market function.\n>> >\n>> > As long as use buyers and sellers can see the code, and have a good eye\n>> > for\n>> > knowing when someone's pushing the market around, we can just put our\n>> > orders\n>> > in and relieve some speculators of their money.\n>> >\n>> > Just get me working code for cross-chain trades, and we'll work on the\n>> > accurate historic data problem later.\n>> >\n>> >\n>> > ----------------------------------------------------------------------------\n>> > Troy Benjegerdes                 'da hozer'\n>> > hozer at hozed.org\n>> > 7 elements      earth::water::air::fire::mind::spirit::soul\n>> > grid.coop\n>> >\n>> >       Never pick a fight with someone who buys ink by the barrel,\n>> >          nor try buy a hacker who makes money by the megahash\n>> >\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > Flow-based real-time traffic analytics software. Cisco certified tool.\n>> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> > Customize your own dashboards, set traffic alerts and generate reports.\n>> > Network behavioral analysis & security monitoring. All-in-one tool.\n>> >\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Flow-based real-time traffic analytics software. Cisco certified tool.\n>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> Customize your own dashboards, set traffic alerts and generate reports.\n>> Network behavioral analysis & security monitoring. All-in-one tool.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-02T18:08:39",
                "message_text_only": "I'm asking for how to DEVELOP THE CODE so I can trade between two block \nchains, and then I'm going to start trading cats and dogs and bits.\n\nSomewhere in trying to figure out the design spec we got caught up in existential\nconcern about 'globally knowable and accurate price history', and I'm telling you\nit doesn't matter.\n\nI'm the customer and the developer, someone give me a clear design document to\ntrade between two chains and I can write it, and then we can debate improvements.\n \n\nOn Sat, Mar 01, 2014 at 01:33:25PM -0500, Jeff Garzik wrote:\n> This is not bitcoin-philosophy, it's bitcoin-development.  Existential\n> philosophy belongs on IRC or the forums.\n> \n> \n> On Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> > Only if you view bitcoin as no more than a payment network.\n> >\n> > On Mar 1, 2014 10:24 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n> >>\n> >> This is wandering far off-topic for this mailing list.\n> >>\n> >> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> >> >> > You can make the same argument against Bitcoin itself you know...\n> >> >> >\n> >> >> > A Bitmessage-like network would be trivial to front-run via a sybil\n> >> >> > attack. It's the fundemental problem with marketplaces - the data\n> >> >> > they're trying to publish has to be public.\n> >> >>\n> >> >> I don't see the Bitcoin analogy...\n> >> >> Anyway, I still don't think the seller cares, if he sells at the price\n> >> >> he was asking, what would he care about \"front running\" those parallel\n> >> >> networks.\n> >> >> I've seen many street markets without \"public information\" and they\n> >> >> work just well.\n> >> >\n> >> > The spot price for ammonia fertilizer, refined gasoline at terminals,\n> >> > and price of tea in china are not 'public information', yet these are\n> >> > some of the largest traded commodities in the world, far exceeding\n> >> > the drop in the bucket that all cryptocoin transactions make.\n> >> >\n> >> > I'd further argue that the *actual* price of corn (cash bid price at\n> >> > elevators and ethanol plants) is not public information either. There\n> >> > is a great deal of money traded in collecting and then distributing the\n> >> > 'cleared price' information. Have a look at\n> >> >\n> >> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n> >> >\n> >> >\n> >> >> >> I don't think this will be a tragedy, because like we discussed on\n> >> >> >> IRC, I don't think the primary goal of markets is price discovery,\n> >> >> >> but\n> >> >> >> trade itself.\n> >> >> >>\n> >> >> >> About historic data, the actual trades are always public, and some\n> >> >> >> kind of \"archivers\" could collect and maintain old orders for\n> >> >> >> historic\n> >> >> >> bid and asks, etc.\n> >> >> >\n> >> >> > And again, how do you know that record is honest? Fact is without\n> >> >> > proof-of-publication you just don't.\n> >> >>\n> >> >> Well, the trades that appeared in the chain actually occurred.\n> >> >> Buying to yourself at fake prices? Be careful, the miner could just\n> >> >> separate the order and fill it himself. Or anyone paying a higher fee,\n> >> >> for that matter.\n> >> >\n> >> > You just made my long-term strategic argument for investing in my own\n> >> > mining hardware so I can be sure to trade reliably.\n> >> >\n> >> >> Again, you haven't addressed why the seller cares more about \"accurate\n> >> >> historic market data\" than just his own fees and sell.\n> >> >>\n> >> >> > You mean a reverse nLockTime that makes a transaction invalid after a\n> >> >> > certain amount of time - that's dangerous in a reorg unfortunately as\n> >> >> > it\n> >> >> > can make transactions permenantly invalid.\n> >> >\n> >> > People who take money from buyers and sellers care most about 'accurate\n> >> > historic market data'. I just want to exchange my corn for e85,\n> >> > fertilizer,\n> >> > and electricity, and audit the code that runs accounting for the\n> >> > exchange.\n> >> >\n> >> > I really don't give a shit if there is 'accurate historic market data'\n> >> > as\n> >> > long as **MY** personal trade data is accurate and I got a good enough\n> >> > price,\n> >> > and I know who I'm dealing with.\n> >> >\n> >> > I know someone smarter than me and with more money, market leverage, and\n> >> > political connections **WILL** game the system and distort the market\n> >> > data\n> >> > history so they can take more money from buyers and sellers without\n> >> > actually\n> >> > doing some usefull market function.\n> >> >\n> >> > As long as use buyers and sellers can see the code, and have a good eye\n> >> > for\n> >> > knowing when someone's pushing the market around, we can just put our\n> >> > orders\n> >> > in and relieve some speculators of their money.\n> >> >\n> >> > Just get me working code for cross-chain trades, and we'll work on the\n> >> > accurate historic data problem later.\n> >> >\n> >> >\n> >> > ----------------------------------------------------------------------------\n> >> > Troy Benjegerdes                 'da hozer'\n> >> > hozer at hozed.org\n> >> > 7 elements      earth::water::air::fire::mind::spirit::soul\n> >> > grid.coop\n> >> >\n> >> >       Never pick a fight with someone who buys ink by the barrel,\n> >> >          nor try buy a hacker who makes money by the megahash\n> >> >\n> >> >\n> >> >\n> >> > ------------------------------------------------------------------------------\n> >> > Flow-based real-time traffic analytics software. Cisco certified tool.\n> >> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> >> > Customize your own dashboards, set traffic alerts and generate reports.\n> >> > Network behavioral analysis & security monitoring. All-in-one tool.\n> >> >\n> >> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> >> > _______________________________________________\n> >> > Bitcoin-development mailing list\n> >> > Bitcoin-development at lists.sourceforge.net\n> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >>\n> >> --\n> >> Jeff Garzik\n> >> Bitcoin core developer and open source evangelist\n> >> BitPay, Inc.      https://bitpay.com/\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Flow-based real-time traffic analytics software. Cisco certified tool.\n> >> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> >> Customize your own dashboards, set traffic alerts and generate reports.\n> >> Network behavioral analysis & security monitoring. All-in-one tool.\n> >>\n> >> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-02T19:03:06",
                "message_text_only": "Again, the two best ways are here:\n\nhttps://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\nhttps://bitcointalk.org/index.php?topic=321228\n\nBut this is off-topic, Peter wasn't talking about cross-chain trade.\n\n\nOn 3/2/14, Troy Benjegerdes <hozer at hozed.org> wrote:\n> I'm asking for how to DEVELOP THE CODE so I can trade between two block\n> chains, and then I'm going to start trading cats and dogs and bits.\n>\n> Somewhere in trying to figure out the design spec we got caught up in\n> existential\n> concern about 'globally knowable and accurate price history', and I'm\n> telling you\n> it doesn't matter.\n>\n> I'm the customer and the developer, someone give me a clear design document\n> to\n> trade between two chains and I can write it, and then we can debate\n> improvements.\n>\n>\n> On Sat, Mar 01, 2014 at 01:33:25PM -0500, Jeff Garzik wrote:\n>> This is not bitcoin-philosophy, it's bitcoin-development.  Existential\n>> philosophy belongs on IRC or the forums.\n>>\n>>\n>> On Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io>\n>> wrote:\n>> > Only if you view bitcoin as no more than a payment network.\n>> >\n>> > On Mar 1, 2014 10:24 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n>> >>\n>> >> This is wandering far off-topic for this mailing list.\n>> >>\n>> >> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org>\n>> >> wrote:\n>> >> >> > You can make the same argument against Bitcoin itself you know...\n>> >> >> >\n>> >> >> > A Bitmessage-like network would be trivial to front-run via a\n>> >> >> > sybil\n>> >> >> > attack. It's the fundemental problem with marketplaces - the data\n>> >> >> > they're trying to publish has to be public.\n>> >> >>\n>> >> >> I don't see the Bitcoin analogy...\n>> >> >> Anyway, I still don't think the seller cares, if he sells at the\n>> >> >> price\n>> >> >> he was asking, what would he care about \"front running\" those\n>> >> >> parallel\n>> >> >> networks.\n>> >> >> I've seen many street markets without \"public information\" and they\n>> >> >> work just well.\n>> >> >\n>> >> > The spot price for ammonia fertilizer, refined gasoline at\n>> >> > terminals,\n>> >> > and price of tea in china are not 'public information', yet these\n>> >> > are\n>> >> > some of the largest traded commodities in the world, far exceeding\n>> >> > the drop in the bucket that all cryptocoin transactions make.\n>> >> >\n>> >> > I'd further argue that the *actual* price of corn (cash bid price at\n>> >> > elevators and ethanol plants) is not public information either.\n>> >> > There\n>> >> > is a great deal of money traded in collecting and then distributing\n>> >> > the\n>> >> > 'cleared price' information. Have a look at\n>> >> >\n>> >> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1\n>> >> >\n>> >> >\n>> >> >> >> I don't think this will be a tragedy, because like we discussed\n>> >> >> >> on\n>> >> >> >> IRC, I don't think the primary goal of markets is price\n>> >> >> >> discovery,\n>> >> >> >> but\n>> >> >> >> trade itself.\n>> >> >> >>\n>> >> >> >> About historic data, the actual trades are always public, and\n>> >> >> >> some\n>> >> >> >> kind of \"archivers\" could collect and maintain old orders for\n>> >> >> >> historic\n>> >> >> >> bid and asks, etc.\n>> >> >> >\n>> >> >> > And again, how do you know that record is honest? Fact is without\n>> >> >> > proof-of-publication you just don't.\n>> >> >>\n>> >> >> Well, the trades that appeared in the chain actually occurred.\n>> >> >> Buying to yourself at fake prices? Be careful, the miner could just\n>> >> >> separate the order and fill it himself. Or anyone paying a higher\n>> >> >> fee,\n>> >> >> for that matter.\n>> >> >\n>> >> > You just made my long-term strategic argument for investing in my\n>> >> > own\n>> >> > mining hardware so I can be sure to trade reliably.\n>> >> >\n>> >> >> Again, you haven't addressed why the seller cares more about\n>> >> >> \"accurate\n>> >> >> historic market data\" than just his own fees and sell.\n>> >> >>\n>> >> >> > You mean a reverse nLockTime that makes a transaction invalid\n>> >> >> > after a\n>> >> >> > certain amount of time - that's dangerous in a reorg unfortunately\n>> >> >> > as\n>> >> >> > it\n>> >> >> > can make transactions permenantly invalid.\n>> >> >\n>> >> > People who take money from buyers and sellers care most about\n>> >> > 'accurate\n>> >> > historic market data'. I just want to exchange my corn for e85,\n>> >> > fertilizer,\n>> >> > and electricity, and audit the code that runs accounting for the\n>> >> > exchange.\n>> >> >\n>> >> > I really don't give a shit if there is 'accurate historic market\n>> >> > data'\n>> >> > as\n>> >> > long as **MY** personal trade data is accurate and I got a good\n>> >> > enough\n>> >> > price,\n>> >> > and I know who I'm dealing with.\n>> >> >\n>> >> > I know someone smarter than me and with more money, market leverage,\n>> >> > and\n>> >> > political connections **WILL** game the system and distort the\n>> >> > market\n>> >> > data\n>> >> > history so they can take more money from buyers and sellers without\n>> >> > actually\n>> >> > doing some usefull market function.\n>> >> >\n>> >> > As long as use buyers and sellers can see the code, and have a good\n>> >> > eye\n>> >> > for\n>> >> > knowing when someone's pushing the market around, we can just put\n>> >> > our\n>> >> > orders\n>> >> > in and relieve some speculators of their money.\n>> >> >\n>> >> > Just get me working code for cross-chain trades, and we'll work on\n>> >> > the\n>> >> > accurate historic data problem later.\n>> >> >\n>> >> >\n>> >> > ----------------------------------------------------------------------------\n>> >> > Troy Benjegerdes                 'da hozer'\n>> >> > hozer at hozed.org\n>> >> > 7 elements      earth::water::air::fire::mind::spirit::soul\n>> >> > grid.coop\n>> >> >\n>> >> >       Never pick a fight with someone who buys ink by the barrel,\n>> >> >          nor try buy a hacker who makes money by the megahash\n>> >> >\n>> >> >\n>> >> >\n>> >> > ------------------------------------------------------------------------------\n>> >> > Flow-based real-time traffic analytics software. Cisco certified\n>> >> > tool.\n>> >> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow\n>> >> > Analyzer\n>> >> > Customize your own dashboards, set traffic alerts and generate\n>> >> > reports.\n>> >> > Network behavioral analysis & security monitoring. All-in-one tool.\n>> >> >\n>> >> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> >> > _______________________________________________\n>> >> > Bitcoin-development mailing list\n>> >> > Bitcoin-development at lists.sourceforge.net\n>> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >>\n>> >>\n>> >> --\n>> >> Jeff Garzik\n>> >> Bitcoin core developer and open source evangelist\n>> >> BitPay, Inc.      https://bitpay.com/\n>> >>\n>> >>\n>> >> ------------------------------------------------------------------------------\n>> >> Flow-based real-time traffic analytics software. Cisco certified tool.\n>> >> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> >> Customize your own dashboards, set traffic alerts and generate\n>> >> reports.\n>> >> Network behavioral analysis & security monitoring. All-in-one tool.\n>> >>\n>> >> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>\n> --\n> ----------------------------------------------------------------------------\n> Troy Benjegerdes                 'da hozer'\n> hozer at hozed.org\n> 7 elements      earth::water::air::fire::mind::spirit::soul\n> grid.coop\n>\n>       Never pick a fight with someone who buys ink by the barrel,\n>          nor try buy a hacker who makes money by the megahash\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            }
        ],
        "thread_summary": {
            "title": "Decentralized digital asset exchange with honest pricing and market depth",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Troy Benjegerdes",
                "Jorge Tim\u00f3n",
                "Mark Friedenbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 36243
        }
    },
    {
        "title": "[Bitcoin-development] BIP70 extension to allow for identity delegation",
        "thread_messages": [
            {
                "author": "Kevin Greene",
                "date": "2014-03-01T20:42:18",
                "message_text_only": "Another example use-case to back up devrandom's point is using a twitter\nhandle as the \"merchant name\". In that example, a 3rd party service hosts\nand signs the PaymentRequest, but when someone opens that PaymentRequest in\ntheir wallet, they should know that they are paying the specified twitter\nuser.\n\n\nOn Sat, Mar 1, 2014 at 12:07 PM, Dev Random <c1.devrandom at niftybox.net>wrote:\n\n> This looks like a good solution of the delegation use case for\n> medium/large businesses.\n>\n> I'm wondering about the small business case.  A small business or an\n> individual might not have the technical expertise to perform the\n> delegation signature.  Normally the X509 keys are squirreled away on the\n> merchant's web server and are not accessible through ordinary means.\n> And actually, the merchant might not even have a standalone web\n> presence.\n>\n> Do you think it makes sense to have another scheme where a merchant can\n> be name spaced under the payment processor?  This would require just one\n> additional field - the merchant identifier.  In effect, the PP would\n> certify that \"PP / merchant-id\" generated this invoice directly on the\n> PP system.\n>\n> On Fri, 2014-02-28 at 12:46 +0100, Mike Hearn wrote:\n> > Now we're starting to see the first companies deploy BIP70, we're\n> > encountering a need for identity delegation. This need was long\n> > foreseen by the way: it's not in BIP70 because, well, we had to draw\n> > the line for v1 somewhere, and this is an issue that mostly affects\n> > payment processors. But I figured I'd start a thread anyway because\n> > people keep asking me about it :)\n> >\n> >\n> > Objective\n> >\n> >\n> > Identity delegation means that a payment request can be signed by\n> > someone who is not holding the certified private key. The most obvious\n> > use case for this is payment processors like BitPay and Coinbase who\n> > currently have to sign payment requests as themselves. Other use cases\n> > might involve untrusted sales agents who want to be able to accept\n> > payment as their employer, but cannot be trusted with a long-term\n> > valuable secret, e.g. because they take their phone into areas with\n> > high crime rates.\n> >\n> >\n> > The lack of this is ok for v1 but not great, because:\n> >\n> >\n> > 1) It requires the name of the *actual* recipient to be put in the\n> > memo field, otherwise you don't have the nice receipt-like properties.\n> > The memo field is just plain text though, it doesn't have any\n> > exploitable structure.\n> >\n> >\n> > 2) It gives a confusing UI, the user thinks they're paying e.g.\n> > Overstock but their wallet UI tells them they're paying Coinbase\n> >\n> >\n> > 3) Whilst these payment processors currently verify merchants so the\n> > security risk is low, in future a lighter-weight model or competing\n> > sites that allow open signups would give a weak security situation:  a\n> > hacker who compromised your computer could sign up for some popular\n> > payment processor under a false identity (or no identity), and wait\n> > until you use your hacked computer to make a payment to someone else\n> > using the same payment processor. They could then do an identity swap\n> > of the real payment request for one of their own, and your Trezor\n> > would still look the same. Avoiding this is a major motivation for the\n> > entire system!\n> >\n> >\n> > Also it just looks more professional if the name you see in the wallet\n> > UI is correct.\n> >\n> >\n> > Proposed implementation\n> >\n> >\n> > We can fix this with a simple extension:\n> >\n> >\n> > enum KeyType {\n> >   SECP256K1 = 1\n> > }\n> >\n> >\n> > message ExtensionCert {\n> >   required bytes signature = 1;\n> >   required bytes public_key = 2;\n> >   required KeyType key_type = 3;\n> >   required uint32 expiry_time = 4;\n> >   optional string memo = 5;\n> > }\n> >\n> >\n> > // modification\n> > message X509Certificates {\n> >   repeated bytes certificate = 1;\n> >   repeated ExtensionCert extended_certs = 2;\n> > }\n> >\n> >\n> > message PaymentRequest {\n> >   // new field\n> >   optional bytes extended_signature = 6;\n> > }\n> >\n> >\n> > This allow us to define a so-called extended certificate, which is\n> > conceptually the same as an X.509 certificate except simpler and\n> > Bitcoin specific. To create one, you just format a ExtensionCert\n> > message with an ECDSA public key from the payment processor (PP), set\n> > signature to an empty array and then sign it using your SSL private\n> > key. Obviously the resulting (most likely RSA) signature then goes\n> > into the signature field of the ExtensionCert. The memo field could\n> > optionally indicate the purpose of this cert, like \"Delegation to\n> > BitPay\" but I don't think it'd ever appear in the UI, rather, it\n> > should be there for debugging purposes.\n> >\n> >\n> > The new ExtensionCert can then be provided back to the PP who adds it\n> > to the X509Certificates message. In the PaymentRequest, there are now\n> > two signature fields (this is for backwards compatibility). Because of\n> > how the mechanism is designed they should not interfere with each\n> > other - old implementations that don't understand the new\n> > extended_signature field will drop it during reserialization to set\n> > signature to the empty array, and thus signature should not cover that\n> > field. On the other hand, extended_signature would cover signature.\n> > Thus, for full backwards compatibility, you would:\n> >\n> >\n> > 1) Sign the payment request using the PP's SSL cert, i.e. sign as\n> > coinbase.com\n> >\n> >\n> > 2) Then sign again using the PP's delegated ECDSA key, i.e. sign as\n> > the merchant\n> >\n> >\n> > The finished protobuf would show up in old clients as signed by\n> > coinbase.com and by new clients as signed by overstock.com even though\n> > Overstock did not provide their SSL key to coinbase.\n> >\n> >\n> > If you have only an ExtensionCert and not any X.509 cert of your own,\n> > then you cannot of course make backwards compatible signatures in this\n> > way, and in that case you would miss out the signature field and set\n> > the pki_type to a new value:  \"x509+sha256+excert\". Old wallets would\n> > see that they don't understand this pki_type and treat the request as\n> > unverified.\n> >\n> >\n> > For maximum security the merchant may choose to set very short expiry\n> > times (like, a day) and then have a cron job that uploads a new\n> > ExtensionCert at the end of each expiry period. This means in the case\n> > of PP compromise, the system reseals very fast.\n> >\n> >\n> > Alternatives considered\n> >\n> >\n> > We could always use a new pki_type and not bother with the two\n> > signature fields. However, this means old wallets will show payment\n> > requests as untrusted during the transition period. Some signing is\n> > still better than none, security-wise.\n> >\n> >\n> > We could attempt to fix the above by introducing a use of User-Agent\n> > field to the case where a payment request is fetched via HTTP, so the\n> > server can customise the PaymentRequest according to the capabilities\n> > of the client. However, sometimes payment requests are not fetched via\n> > HTTP, for example, they may be attached to an email, sent via an IM\n> > network or sent over a Bluetooth socket. Nonetheless this may be a\n> > useful thing to consider for future cases where the protocol may not\n> > be extended in a backwards compatible manner.\n> >\n> >\n> > We could create the extension cert as an X.509 cert, rather than a\n> > custom type. However most CA's set path length constraints on their\n> > intermediate certs that forbid this kind of extension (I forgot why,\n> > possibly some kind of anti-DoS mitigation). Also re-using X.509 for\n> > the extension cert would open up the risk of it being accepted by a\n> > bogus SSL stack that didn't check the key usage constraints extension,\n> > and that would allow for SSL delegation as well. It seems safer to\n> > just use a different format that definitely won't be accepted.\n> >\n> >\n> >\n> >\n> >\n> >\n> > Feedback welcome.\n> >\n> ------------------------------------------------------------------------------\n> > Flow-based real-time traffic analytics software. Cisco certified tool.\n> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> > Customize your own dashboards, set traffic alerts and generate reports.\n> > Network behavioral analysis & security monitoring. All-in-one tool.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> --\n> Miron\n>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/2dd1527c/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-03-02T10:38:04",
                "message_text_only": "On Fri, 28 Feb 2014 03:46:49 -0800, Mike Hearn <mike at plan99.net> wrote:\n\n> 3) Whilst these payment processors currently verify merchants so the  \n> security risk is low, in future a lighter-weight model or competing  \n> sites that >allow open signups would give a weak security situation: a  \n> hacker who compromised your computer could sign up for some popular  \n> payment >processor under a false identity (or no identity), and wait  \n> until you use your hacked computer to make a payment to someone else  \n> using the same >payment processor. They could then do an identity swap  \n> of the real payment request for one of their own, and your Trezor would  \n> still look the same. >Avoiding this is a major motivation for the entire  \n> system!\n\nLet me restate that, it's a huge problem...\n\nAlice's system is compromised,\nMallory intercepts a payment request being sent to Alice from payment  \nprocessor X on behaf of merchant X.\nMallory regenerates a spoof payment request which pays to M, from the same  \npayment processor\nAlice can't tell Mallory's spoofed PR apart from Merchant X's and thinks  \nshe's paying Merchant X\n\nIt might be a bit challenging for M to generate the new PR on-the-fly  \nwithout being noticed, but that's not a security guarantee.\n\nPerhaps the UI just isn't expressive enough currently to expose this  \nsituation in any way, let alone reliably alert the user to the issue,  \nbecause there's no way for the payment processor to get authenticated  \nfields other than memo into the UI.\n\nToday the only solution is for the payment processor to strictly control  \nthe 'memo' field so Mallory wouldn't be able to make his own PR that  \nlooked exactly like merchant Y's. But maybe it's too subtle to make  \npayment processors embed that kind of information.\n\nSo is the main goal is to provide a structured way to embed this  \ninformation in the PR and expect that user interfaces will display them to  \nend users? If that's the case, I don't think we need an entirely secondary  \ncertificate, or cross signing from a secondary ECDSA key.\n\nA poor solution: If the UI included some sort of certificate viewer, even  \njust tied to the OS certificate viewer, and made the cert available for  \ninspection, at least the merchant would have a chance to put some fields  \nin there which a very advanced user might actually find. But this was  \ndiscussed a while ago and I think the primary problem is the difficulty in  \ngetting a CA to let you embed any additional fields in your certificate in  \nthe first place, plus you don't want to generate a new cert for each  \nmerchant.\n\nA somewhat better option: Some additional fields defined in an extension  \nwhich are reliably shown in the UI. We could try to define specific  \nfields, like 'DelegateCN' which would possibly override the primary CN...  \nAs an aside, I think you can never allow actually overriding the CN  \ndisplayed in the UI directly, the most you can do is add another field in  \nthe UI to show this string. First I need to know it's from Payment  \nProcessor X, and then maybe we can let the payment processor make some  \nadditional claim, like yes you are paying irs.gov. You can't give the  \nimpression that Payment Processor X is not actually man-in-the-middle.\n\nMaybe the simplest would be a single field expected to contain a delimited  \nkey/value string (of course JSON) which could be shown as additional lines  \nof labeled text in the UI. I don't want to give the \"merchant\" too much  \ndynamic control over what the user's screen will display, but making it  \nsomewhat dynamic might add some future proofing.\n\nI think any additional extension fields should be hashed using the hash  \nfunction specified in pki_type and signed by X509Certificates.certifcate  \nprivate key. No extended_certs required -- I'm thinking something like;\n\nmessage PaymentRequest {\n// new field\n  optional bytes extended_properties = 6;\n  optional bytes extended_properties_sig = 7;\n}\n\n\nThanks,\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/1195f53c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T10:44:00",
                "message_text_only": ">\n> Perhaps the UI just isn't expressive enough currently to expose this\n> situation in any way, let alone reliably alert the user to the issue,\n> because there's no way for the payment processor to get authenticated\n> fields other than memo into the UI.\n>\n\nI think for now as long as payment processors include the merchant name in\nthe memo, that's good - as long as hardware devices or second factor\nwallets display the memo as well! Trezor has a small screen, I don't know\nhow feasible displaying the whole memo is there though - hence an interest\nin something better. For now we can probably muddle through.\n\n\n> A poor solution: If the UI included some sort of certificate viewer, even\n> just tied to the OS certificate viewer, and made the cert available for\n> inspection, at least the merchant would have a chance to put some fields in\n> there which a very advanced user might actually find.\n>\n\nNot really interested in solutions that only help very advanced users.\nBesides, my understanding is that most PKI CA's will not sign certs that\ninclude arbitrary data they don't understand for I guess the obvious\nsecurity reasons (generally signing things you don't understand is a bad\nidea). But I've never actually tried it.\n\nWe don't want anyone to have to go back to their CA anyway, especially not\nwith special requests.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/05a453e0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T10:57:39",
                "message_text_only": "On Sat, Mar 1, 2014 at 9:07 PM, Dev Random <c1.devrandom at niftybox.net>wrote:\n\n> I'm wondering about the small business case.  A small business or an\n> individual might not have the technical expertise to perform the\n> delegation signature.\n\n\nIf they take delivery of an SSL cert from the CA themselves, I don't see\nwhy it'd be an issue. A simple GUI app can be produced that let's you open\nthe CA cert files and spits out the ExtendedCert file, which you then send\nto the PP.\n\nHowever, for small businesses like local shops, yes we don't expect them to\nhave a CA cert at the moment. Many of them do have small websites but for\nthose that don't, I don't think any great solutions exist yet. A virgin\nmarket waiting to be tapped, perhaps ...\n\n\n> Do you think it makes sense to have another scheme where a merchant can\n> be name spaced under the payment processor?  This would require just one\n> additional field - the merchant identifier.\n>\n\nWhat is \"the merchant identifier\" exactly, and what does it mean? If this\nquestion is left unresolved, then it doesn't mean anything and as such it's\nequivalent to putting the merchant name in the memo field, which is fine\nand what I expect to happen for now.\n\nIf it's resolved, then it makes payment processors into certificate\nauthorities themselves. I think such a solution would be spiffy, but it can\nbe done within the same framework we have today by just having wallets add\nsome Bitcoin specific roots to their trust store before PKI verification.\nFor example, BitPay could become their own CA that doesn't issue SSL certs\nbut rather \"local business certs\" that contain a verified street address.\nIndeed X.509 certs include X.520 names, that's one reason they're so damn\ncomplicated, and that's already got ways to express organisation names.\n\nActually setting such a scheme up requires real work though. If we want a\nwallet to display something like:\n\n   \"Pay to:  Room 77, Graefestra\u00dfe 77, Berlin\"\n\nthen the question is, how is that verified and what does it mean when a\npayment processor issues a cert containing it? Did someone physically visit\nthem? Did they just check on Google Maps? Does it mean it's a real\nincorporated business or could it just be the address of a childs lemonade\nstand?\n\nMy inclination would be to say that the ID requirements should be low and\ncheap; for our primary use case of making hardware wallets secure, you\ndon't need robust ID verification, you just need to ensure a MITM can't\nissue themselves duplicated ID's on the fly. Just posting a postcard with a\nnonce on it would be sufficient IMO (or making a phone call to a number\nobtained from a previously verified business listing).\n\nAlternatively, a bitcoin payment processor CA could make visiting a\nbusiness, gathering photo evidence and issuing a cert into a kind of\nmicrowork task with the PP/CA acting as a broker.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/67b6c21a/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-02T15:20:34",
                "message_text_only": "I somehow think that it is too early for this heavy kind of extension,\ngiven that the first version of BIP70 isn't even deployed widely let\nalone *used*.\n\nBy reading your proposal I get the idea that the current spec doesn't\nallow two (or three) different PKIs at once -- we would want this for\nmigration purposes as you wrote and also because different people prefer\ndifferent kinds of PKIs. And that's perhaps something we want to fix in\nthe current (version 1) spec to prevent us running into a wall and be\ndoomed to patch around the spec. Note I assume a potential PGP or\nBitcoin-based infrastructure would also be called 'PKI'.\n\nI would prefer if your fix would stay local to X.509 (and thus only\nchange X.509 specific structs rather than the top-level PaymentRequest).\nAnd for a future PKI we would implement identity delegation in a\nstraight forward, non-kludgy way.\n\n\nOn 02/28/2014 12:46 PM, Mike Hearn wrote:\n\n> Now we're starting to see the first companies deploy BIP70, we're\n> encountering a need for identity delegation. This need was long foreseen\n> by the way: it's not in BIP70 because, well, we had to draw the line for\n> v1 somewhere, and this is an issue that mostly affects payment\n> processors. But I figured I'd start a thread anyway because people keep\n> asking me about it :)\n> \n> *_Objective_*\n> \n> Identity delegation means that a payment request can be signed by\n> someone who is not holding the certified private key. The most obvious\n> use case for this is payment processors like BitPay and Coinbase who\n> currently have to sign payment requests as themselves. Other use cases\n> might involve untrusted sales agents who want to be able to accept\n> payment as their employer, but cannot be trusted with a long-term\n> valuable secret, e.g. because they take their phone into areas with high\n> crime rates. \n> \n> The lack of this is ok for v1 but not great, because:\n> \n> 1) It requires the name of the *actual* recipient to be put in the memo\n> field, otherwise you don't have the nice receipt-like properties. The\n> memo field is just plain text though, it doesn't have any exploitable\n> structure.\n> \n> 2) It gives a confusing UI, the user thinks they're paying e.g.\n> Overstock but their wallet UI tells them they're paying Coinbase\n> \n> 3) Whilst these payment processors currently verify merchants so the\n> security risk is low, in future a lighter-weight model or competing\n> sites that allow open signups would give a weak security situation:  a\n> hacker who compromised your computer could sign up for some popular\n> payment processor under a false identity (or no identity), and wait\n> until you use your hacked computer to make a payment to someone else\n> using the same payment processor. They could then do an identity swap of\n> the real payment request for one of their own, and your Trezor would\n> still look the same. Avoiding this is a major motivation for the entire\n> system!\n> \n> Also it just looks more professional if the name you see in the wallet\n> UI is correct.\n> \n> *_Proposed implementation_*\n> \n> We can fix this with a simple extension:\n> \n> enum KeyType {\n>   SECP256K1 = 1\n> }\n> \n> message ExtensionCert {\n>   required bytes signature = 1;\n>   required bytes public_key = 2;\n>   required KeyType key_type = 3;\n>   required uint32 expiry_time = 4;\n>   optional string memo = 5;\n> }\n> \n> // modification\n> message X509Certificates {\n>   repeated bytes certificate = 1;\n>   repeated ExtensionCert extended_certs = 2;\n> }\n> \n> message PaymentRequest {\n>   // new field\n>   optional bytes extended_signature = 6;\n> }\n> \n> This allow us to define a so-called /extended certificate/, which is\n> conceptually the same as an X.509 certificate except simpler and Bitcoin\n> specific. To create one, you just format a ExtensionCert message with an\n> ECDSA public key from the payment processor (PP), set signature to an\n> empty array and then sign it using your SSL private key. Obviously the\n> resulting (most likely RSA) signature then goes into the signature field\n> of the ExtensionCert. The memo field could optionally indicate the\n> purpose of this cert, like \"Delegation to BitPay\" but I don't think it'd\n> ever appear in the UI, rather, it should be there for debugging purposes.\n> \n> The new ExtensionCert can then be provided back to the PP who adds it to\n> the X509Certificates message. In the PaymentRequest, there are now\n> /two/ signature fields (this is for backwards compatibility). Because of\n> how the mechanism is designed they should not interfere with each other\n> - old implementations that don't understand the new extended_signature\n> field will drop it during reserialization to set signature to the empty\n> array, and thus signature should not cover that field. On the other\n> hand, extended_signature would cover signature. Thus, for full backwards\n> compatibility, you would:\n> \n> 1) Sign the payment request using the PP's SSL cert, i.e. sign as\n> coinbase.com <http://coinbase.com>\n> \n> 2) Then sign again using the PP's delegated ECDSA key, i.e. sign as the\n> merchant\n> \n> The finished protobuf would show up in old clients as signed by\n> coinbase.com <http://coinbase.com> and by new clients as signed by\n> overstock.com <http://overstock.com> even though Overstock did not\n> provide their SSL key to coinbase.\n> \n> If you have /only/ an ExtensionCert and not any X.509 cert of your own,\n> then you cannot of course make backwards compatible signatures in this\n> way, and in that case you would miss out the signature field and set the\n> pki_type to a new value:  \"x509+sha256+excert\". Old wallets would see\n> that they don't understand this pki_type and treat the request as\n> unverified.\n> \n> For maximum security the merchant may choose to set very short expiry\n> times (like, a day) and then have a cron job that uploads a new\n> ExtensionCert at the end of each expiry period. This means in the case\n> of PP compromise, the system reseals very fast.\n> \n> *_Alternatives considered_*\n> *_\n> _*\n> We could always use a new pki_type and not bother with the two signature\n> fields. However, this means old wallets will show payment requests as\n> untrusted during the transition period. Some signing is still better\n> than none, security-wise.\n> \n> We could attempt to fix the above by introducing a use of User-Agent\n> field to the case where a payment request is fetched via HTTP, so the\n> server can customise the PaymentRequest according to the capabilities of\n> the client. However, sometimes payment requests are not fetched via\n> HTTP, for example, they may be attached to an email, sent via an IM\n> network or sent over a Bluetooth socket. Nonetheless this may be a\n> useful thing to consider for future cases where the protocol may not be\n> extended in a backwards compatible manner.\n> \n> We could create the extension cert as an X.509 cert, rather than a\n> custom type. However most CA's set path length constraints on their\n> intermediate certs that forbid this kind of extension (I forgot why,\n> possibly some kind of anti-DoS mitigation). Also re-using X.509 for the\n> extension cert would open up the risk of it being accepted by a bogus\n> SSL stack that didn't check the key usage constraints extension, and\n> that would allow for SSL delegation as well. It seems safer to just use\n> a different format that definitely won't be accepted.\n> \n> \n> \n> Feedback welcome.\n> \n> \n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T16:14:43",
                "message_text_only": "On Sun, Mar 2, 2014 at 4:20 PM, Andreas Schildbach <andreas at schildbach.de>wrote:\n\n> I somehow think that it is too early for this heavy kind of extension,\n> given that the first version of BIP70 isn't even deployed widely let\n> alone *used*.\n>\n\nDefinitely agree - like I said, I publish this only because I keep getting\nasked about it.\n\n\n> By reading your proposal I get the idea that the current spec doesn't\n> allow two (or three) different PKIs at once\n\n\nThat's right. There's little point in having multiple PKI's simultaneously,\nthat's why it doesn't allow it.\n\nThis one is a special case because it doesn't replace but rather\nspecialises and extends the existing PKI. Old clients that don't understand\nit would still show something useful and by upgrading you get better\noutput. Actually you get closer to the output you're supposed to get.\n\nThat's going to be rare though, I think. Generally you wouldn't want to\nhave multiple PKIs in use simultaneously for the same payment request.\n\n\n> I would prefer if your fix would stay local to X.509 (and thus only\n> change X.509 specific structs rather than the top-level PaymentRequest).\n>\n\nIt can be done but only by sacrificing backwards compatibility, which\ndoesn't seem worth it to me. It's hardly a big deal to have two signature\nfields. The rest is all localised to the X509 parts.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/48d10322/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70 extension to allow for identity delegation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin Greene",
                "Mike Hearn",
                "Jeremy Spilman",
                "Andreas Schildbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 27042
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol for Face-to-face Payments",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-02T09:47:48",
                "message_text_only": "I've written up a document about all the different methods on how the\npayment protocol (both the old one and BIP70) is used in Bitcoin Wallet.\nIt only provides an overview -- I plan to go into details with separate\n(BIP?) documents where needed.\n\nhttps://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests\n\nIf you have any questions about compatibility, don't hesitate to contact me.\n\n\nOn 01/27/2014 12:59 PM, Andreas Schildbach wrote:\n\n> As promised I'd like to present my work done on leveraging the payment\n> protocol for face-to-face payments.\n> [...]"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-02T11:50:59",
                "message_text_only": "Thanks Andreas.\n\nFor BIP standardisation, I think the VIEW intent seems like an obvious one.\nBluetooth support probably should come later if/when we put encryption/auth\non the RFCOMM link (probably SSL).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/17be30e1/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-20T02:22:19",
                "message_text_only": "Hi Andreas\n\n\nI'm implementing support for BIP70 in my POS at the moment, and I've just\nrealized that with options you're proposing usecase I'm looking for is not\ncovered.\n\nRight now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I\nneed to still be able to use it for backwards compatibility. But at the\nsame time I want to be able to support BIP70. And also I want to avoid\nusing external servers, the concept of my POS is that everything is\nhappening between just payer's phone and payee's POS device. This means\nthat BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.\n\nYou're also offering an option to include Base43 encoded PR body right\ninside the Bitcoin URI, but in a way that is not backwards compatible with\nBIP21.\n\nIn the end this all means that there is no way for me to at the same time\nkeep backwards compatibility with all wallets not supporting NFC and BIP70\n(all other wallets right now), and keep things inside POS without need for\nexternal servers.\n\nI understand your intention behind base43 encoding and noncompatible URI -\nyou want to make most possible use of QR codes. But I wonder - did you\ncompare this base43 to base64 encoded request in a binary QR code format?\nHow much do we actually win in total bytes capacity at a price of\nnoncompatibility and increased complexity?\n\nAnd also maybe we can extend BIP72 to include encoded payment request in\nthe URL directly in a backwards compatible way?\n\n\nBest regards,\nAlex Kotenko\n\n\n2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net>:\n\n> Thanks Andreas.\n>\n> For BIP standardisation, I think the VIEW intent seems like an obvious\n> one. Bluetooth support probably should come later if/when we put\n> encryption/auth on the RFCOMM link (probably SSL).\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/bc8cc362/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-20T03:31:36",
                "message_text_only": "Take a look at BIP 73:\nhttps://github.com/bitcoin/bips/blob/master/bip-0073.mediawiki\n\n\n\n\nOn Wed, Mar 19, 2014 at 10:22 PM, Alex Kotenko <alexykot at gmail.com> wrote:\n\n> Hi Andreas\n>\n>\n> I'm implementing support for BIP70 in my POS at the moment, and I've just\n> realized that with options you're proposing usecase I'm looking for is not\n> covered.\n>\n> Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I\n> need to still be able to use it for backwards compatibility. But at the\n> same time I want to be able to support BIP70. And also I want to avoid\n> using external servers, the concept of my POS is that everything is\n> happening between just payer's phone and payee's POS device. This means\n> that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.\n>\n> You're also offering an option to include Base43 encoded PR body right\n> inside the Bitcoin URI, but in a way that is not backwards compatible with\n> BIP21.\n>\n> In the end this all means that there is no way for me to at the same time\n> keep backwards compatibility with all wallets not supporting NFC and BIP70\n> (all other wallets right now), and keep things inside POS without need for\n> external servers.\n>\n> I understand your intention behind base43 encoding and noncompatible URI -\n> you want to make most possible use of QR codes. But I wonder - did you\n> compare this base43 to base64 encoded request in a binary QR code format?\n> How much do we actually win in total bytes capacity at a price of\n> noncompatibility and increased complexity?\n>\n> And also maybe we can extend BIP72 to include encoded payment request in\n> the URL directly in a backwards compatible way?\n>\n>\n> Best regards,\n> Alex Kotenko\n>\n>\n> 2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net>:\n>\n>>  Thanks Andreas.\n>>\n>> For BIP standardisation, I think the VIEW intent seems like an obvious\n>> one. Bluetooth support probably should come later if/when we put\n>> encryption/auth on the RFCOMM link (probably SSL).\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Flow-based real-time traffic analytics software. Cisco certified tool.\n>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n>> Customize your own dashboards, set traffic alerts and generate reports.\n>> Network behavioral analysis & security monitoring. All-in-one tool.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/d93fa9b0/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-20T08:09:39",
                "message_text_only": "Afaik, BIP73 needs an external server (the web server).\n\n\nOn 03/20/2014 04:31 AM, Jeff Garzik wrote:\n> Take a look at BIP 73:\n> https://github.com/bitcoin/bips/blob/master/bip-0073.mediawiki\n> \n> \n> \n> \n> On Wed, Mar 19, 2014 at 10:22 PM, Alex Kotenko <alexykot at gmail.com\n> <mailto:alexykot at gmail.com>> wrote:\n> \n>     Hi Andreas\n> \n> \n>     I'm implementing support for BIP70 in my POS at the moment, and I've\n>     just realized that with options you're proposing usecase I'm looking\n>     for is not covered.\n> \n>     Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code,\n>     and I need to still be able to use it for backwards compatibility.\n>     But at the same time I want to be able to support BIP70. And also I\n>     want to avoid using external servers, the concept of my POS is that\n>     everything is happening between just payer's phone and payee's POS\n>     device. This means that BIP72 HTTP(S) link inside Bitcoin URI is not\n>     suitable for me. \n> \n>     You're also offering an option to include Base43 encoded PR body\n>     right inside the Bitcoin URI, but in a way that is not backwards\n>     compatible with BIP21. \n> \n>     In the end this all means that there is no way for me to at the same\n>     time keep backwards compatibility with all wallets not supporting\n>     NFC and BIP70 (all other wallets right now), and keep things inside\n>     POS without need for external servers. \n> \n>     I understand your intention behind base43 encoding and noncompatible\n>     URI - you want to make most possible use of QR codes. But I wonder -\n>     did you compare this base43 to base64 encoded request in a binary QR\n>     code format? How much do we actually win in total bytes capacity at\n>     a price of noncompatibility and increased complexity?\n> \n>     And also maybe we can extend BIP72 to include encoded payment\n>     request in the URL directly in a backwards compatible way?\n> \n> \n>     Best regards, \n>     Alex Kotenko\n> \n> \n>     2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net\n>     <mailto:mike at plan99.net>>:\n> \n>         Thanks Andreas.\n> \n>         For BIP standardisation, I think the VIEW intent seems like an\n>         obvious one. Bluetooth support probably should come later\n>         if/when we put encryption/auth on the RFCOMM link (probably SSL).\n> \n>         ------------------------------------------------------------------------------\n>         Flow-based real-time traffic analytics software. Cisco certified\n>         tool.\n>         Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow\n>         Analyzer\n>         Customize your own dashboards, set traffic alerts and generate\n>         reports.\n>         Network behavioral analysis & security monitoring. All-in-one tool.\n>         http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> \n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Learn Graph Databases - Download FREE O'Reilly Book\n>     \"Graph Databases\" is the definitive new guide to graph databases and\n>     their\n>     applications. Written by three acclaimed leaders in the field,\n>     this first edition is now available. Download your free book today!\n>     http://p.sf.net/sfu/13534_NeoTech\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-20T10:36:09",
                "message_text_only": "Encoding entire payment requests into qrcodes is definitely not the way to\ngo. They can already be large when signed and we're just at the start of\nadding features.\n\nFinishing off and standardising the bluetooth support is the way to go\n(r=bt:mac). Andreas' app already has some support for this I believe, so\nAlex you could prototype with that, but we need to:\n\n1) Add an encryption/auth layer on top, because it runs over RFCOMM\nsockets. The authentication would require proof of owning the Bitcoin key\nthat's in the address part of the URI (which is needed for backwards compat\nanyway).\n\n2) Write a BIP for it and make sure it's interoperable\n\nFor the auth layer we could either use SSL and then just ignore the server\ncertificate and require signing of the session public key with the Bitcoin\nkey, which should be easy to code up but is rather heavy on the air, or\nroll a custom lightweight thing where we just do a basic ECDH, with the\nservers key being the same as the address key. But rolling such protocols\nis subtle and I guess it'd need to be reviewed by people familiar with such\nthings.\n\nThis feels like a good opportunity to grow the community - perhaps we can\nfind a volunteer in the forums who enjoys crypto.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/ad3cb0fd/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-03-20T12:12:21",
                "message_text_only": "Whats a sensible limit on practical/convenient QR code size?\n\nHow much of the payment protocol message size comes from use of x509?\n\n(Just exploring what the options are).\n\nAdam\n\nOn Thu, Mar 20, 2014 at 11:36:09AM +0100, Mike Hearn wrote:\n>   Encoding entire payment requests into qrcodes is definitely not the way\n>   to go. They can already be large when signed and we're just at the\n>   start of adding features.\n>   Finishing off and standardising the bluetooth support is the way to go\n>   (r=bt:mac). Andreas' app already has some support for this I believe,\n>   so Alex you could prototype with that, but we need to:\n>   1) Add an encryption/auth layer on top, because it runs over RFCOMM\n>   sockets. The authentication would require proof of owning the Bitcoin\n>   key that's in the address part of the URI (which is needed for\n>   backwards compat anyway).\n>   2) Write a BIP for it and make sure it's interoperable\n>   For the auth layer we could either use SSL and then just ignore the\n>   server certificate and require signing of the session public key with\n>   the Bitcoin key, which should be easy to code up but is rather heavy on\n>   the air, or roll a custom lightweight thing where we just do a basic\n>   ECDH, with the servers key being the same as the address key. But\n>   rolling such protocols is subtle and I guess it'd need to be reviewed\n>   by people familiar with such things.\n>   This feels like a good opportunity to grow the community - perhaps we\n>   can find a volunteer in the forums who enjoys crypto."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-20T12:20:20",
                "message_text_only": "Very, very limited. The more data you stuff in them, the less reliable and\nslower scanning becomes. A URL is about the limit of what's practically\nachievable. Even with that, BitPay have been complaining about the\nincreased character length from adding the https url to download the\npayment request (though not escaping reduces character count by a lot and\nis valid).\n\nX.509 is extremely bloated, partly due to the number of features it\nsupports, partly due to its history but mostly due to the widespread use of\nRSA which generates giant keys and signatures. Of course you can get ECC\ncerts as well, but in practice most merchants don't seem to use them yet.\nThere's no way you can fit a cert chain into a QR code.\n\nHowever, this is no big deal, because for the serverless PoS device case\nAlex cares about you need a backchannel to submit the transaction and\nrefund address anyway, so Bluetooth is already useful/required. Downloading\nthe payment request via it as well as uploading the response is not a big\nchange and - as mentioned - already implemented by Andreas and myself some\ntime ago.\n\n\n\nOn Thu, Mar 20, 2014 at 1:12 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> Whats a sensible limit on practical/convenient QR code size?\n>\n> How much of the payment protocol message size comes from use of x509?\n>\n> (Just exploring what the options are).\n>\n> Adam\n>\n>\n> On Thu, Mar 20, 2014 at 11:36:09AM +0100, Mike Hearn wrote:\n>\n>>   Encoding entire payment requests into qrcodes is definitely not the way\n>>   to go. They can already be large when signed and we're just at the\n>>   start of adding features.\n>>   Finishing off and standardising the bluetooth support is the way to go\n>>   (r=bt:mac). Andreas' app already has some support for this I believe,\n>>   so Alex you could prototype with that, but we need to:\n>>   1) Add an encryption/auth layer on top, because it runs over RFCOMM\n>>   sockets. The authentication would require proof of owning the Bitcoin\n>>   key that's in the address part of the URI (which is needed for\n>>   backwards compat anyway).\n>>   2) Write a BIP for it and make sure it's interoperable\n>>   For the auth layer we could either use SSL and then just ignore the\n>>   server certificate and require signing of the session public key with\n>>   the Bitcoin key, which should be easy to code up but is rather heavy on\n>>   the air, or roll a custom lightweight thing where we just do a basic\n>>   ECDH, with the servers key being the same as the address key. But\n>>   rolling such protocols is subtle and I guess it'd need to be reviewed\n>>   by people familiar with such things.\n>>   This feels like a good opportunity to grow the community - perhaps we\n>>   can find a volunteer in the forums who enjoys crypto.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/d9962f3d/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-20T17:31:44",
                "message_text_only": "On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:\n> Whats a sensible limit on practical/convenient QR code size?\n\nExtremely limited.  Preferably under 100 bytes.  You will see\nincreasingly poor operating in varying light conditions, such as\npaying via QR code on a printed receipt in a pub at night.  That was\none of the motivations for BIP 73.\n\n\nOn Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Afaik, BIP73 needs an external server (the web server).\n\nYes.  Internet connectivity is not a rarity these days.  Near-field\nweb servers also work fine.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-20T17:42:26",
                "message_text_only": "2014-03-20 17:31 GMT+00:00 Jeff Garzik <jgarzik at bitpay.com>:\n\n> On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:\n> > Whats a sensible limit on practical/convenient QR code size?\n>\n> Extremely limited.  Preferably under 100 bytes.  You will see\n> increasingly poor operating in varying light conditions, such as\n> paying via QR code on a printed receipt in a pub at night.  That was\n> one of the motivations for BIP 73.\n>\n\u200bHmm, in this case I think base43 discussion is irrelevant. Even with best\nspace utilization we can get \u200bwe will not be able to fit in anything bigger\nthan a smallest unsigned payment certificate. And that is not so useful. So\nprobably we should stick with BIP73 approach and bluetooth URI scheme we're\ninventing.\n\n\n\n>\n>\n> On Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach\n> <andreas at schildbach.de> wrote:\n> > Afaik, BIP73 needs an external server (the web server).\n>\n> Yes.  Internet connectivity is not a rarity these days.  Near-field\n> web servers also work fine.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/f588a88a/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-20T18:01:48",
                "message_text_only": "It really depends on the physical, real world size of the QR code.\n\nIf you have a big screen, and security permits displaying a larger QR\ncode, you can afford more bytes.  If you are displaying a tiny postage\nstamp 1-2cm in size, the practical byte limit is very low.\n\nIdeally, you test your QR codes in real world conditions, before\npicking the best path.\n\n\n\nOn Thu, Mar 20, 2014 at 1:42 PM, Alex Kotenko <alexykot at gmail.com> wrote:\n> 2014-03-20 17:31 GMT+00:00 Jeff Garzik <jgarzik at bitpay.com>:\n>>\n>> On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:\n>> > Whats a sensible limit on practical/convenient QR code size?\n>>\n>> Extremely limited.  Preferably under 100 bytes.  You will see\n>> increasingly poor operating in varying light conditions, such as\n>> paying via QR code on a printed receipt in a pub at night.  That was\n>> one of the motivations for BIP 73.\n>\n> Hmm, in this case I think base43 discussion is irrelevant. Even with best\n> space utilization we can get we will not be able to fit in anything bigger\n> than a smallest unsigned payment certificate. And that is not so useful. So\n> probably we should stick with BIP73 approach and bluetooth URI scheme we're\n> inventing.\n>\n>\n>>\n>>\n>>\n>> On Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach\n>> <andreas at schildbach.de> wrote:\n>> > Afaik, BIP73 needs an external server (the web server).\n>>\n>> Yes.  Internet connectivity is not a rarity these days.  Near-field\n>> web servers also work fine.\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T10:28:22",
                "message_text_only": "On 03/20/2014 06:31 PM, Jeff Garzik wrote:\n\n>> Afaik, BIP73 needs an external server (the web server).\n> \n> Yes.  Internet connectivity is not a rarity these days.  Near-field\n> web servers also work fine.\n\nUnfortunately it still is. At least here in Germany."
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-21T13:59:28",
                "message_text_only": "2014-03-21 10:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n\n> On 03/20/2014 06:31 PM, Jeff Garzik wrote:\n>\n> >> Afaik, BIP73 needs an external server (the web server).\n> >\n> > Yes.  Internet connectivity is not a rarity these days.  Near-field\n> > web servers also work fine.\n>\n> Unfortunately it still is. At least here in Germany.\n\nYes, it is a problem. Even in the middle of London you often can get into\nsituation when cellphone network connectivity is not good enough for quick\nand reliable payment. Basement pubs, old buildings with thick walls,\novercrowded places with overloaded radio environment. We should not rely on\nmobile connectivity in things like making payments.\n\n\n\n>\n\n\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/6bbc9e09/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-22T16:35:43",
                "message_text_only": "Let's not pull out silly examples.  Of course you can find locations\nthat lack Internet.\n\nThose locations are completely unsuitable to bitcoin transactions,\nsince the receiver cannot verify double-spending or anything else\nabout the transaction.\n\n\nOn Fri, Mar 21, 2014 at 9:59 AM, Alex Kotenko <alexykot at gmail.com> wrote:\n> 2014-03-21 10:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n>>\n>> On 03/20/2014 06:31 PM, Jeff Garzik wrote:\n>>\n>> >> Afaik, BIP73 needs an external server (the web server).\n>> >\n>> > Yes.  Internet connectivity is not a rarity these days.  Near-field\n>> > web servers also work fine.\n>>\n>> Unfortunately it still is. At least here in Germany.\n>\n> Yes, it is a problem. Even in the middle of London you often can get into\n> situation when cellphone network connectivity is not good enough for quick\n> and reliable payment. Basement pubs, old buildings with thick walls,\n> overcrowded places with overloaded radio environment. We should not rely on\n> mobile connectivity in things like making payments.\n>\n>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-22T16:45:03",
                "message_text_only": ">\n> Those locations are completely unsuitable to bitcoin transactions,\n> since the receiver cannot verify double-spending or anything else\n> about the transaction.\n\n\nThe usual issue is that they lack internet *for some customers*. The place\nmay well have private wifi or hardwired connections that work. Even mobile\nnetworks may vary so some customers will have mobile connectivity and\nothers won't.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/817f967d/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-22T16:55:18",
                "message_text_only": "Jeff, there are *plenty* of places that lack local Internet access for\none or both participants.\n\nObviously making the case where both participants lack access to the\nbitcoin network is difficult to secure, but not impossible (e.g. use a\ntelephany-based system to connect to a centralized double-spend\ndatabase, as VISA does).\n\nI expect the case where one participant has Internet access (the\nmerchant) and the other does not to be very, very common. The majority\nof transactions I do on a daily basis are like this, and I live in\nSilicon Valley!\n\nOn 03/22/2014 09:35 AM, Jeff Garzik wrote:\n> Let's not pull out silly examples.  Of course you can find locations\n> that lack Internet.\n> \n> Those locations are completely unsuitable to bitcoin transactions,\n> since the receiver cannot verify double-spending or anything else\n> about the transaction."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-22T17:24:43",
                "message_text_only": "One participant, yes.  Two participants lacking net would require a\nserious revisit of BIP 70's security assumptions and some design, at a\nminimum.\n\nOn Sat, Mar 22, 2014 at 12:55 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Jeff, there are *plenty* of places that lack local Internet access for\n> one or both participants.\n>\n> Obviously making the case where both participants lack access to the\n> bitcoin network is difficult to secure, but not impossible (e.g. use a\n> telephany-based system to connect to a centralized double-spend\n> database, as VISA does).\n>\n> I expect the case where one participant has Internet access (the\n> merchant) and the other does not to be very, very common. The majority\n> of transactions I do on a daily basis are like this, and I live in\n> Silicon Valley!\n>\n> On 03/22/2014 09:35 AM, Jeff Garzik wrote:\n>> Let's not pull out silly examples.  Of course you can find locations\n>> that lack Internet.\n>>\n>> Those locations are completely unsuitable to bitcoin transactions,\n>> since the receiver cannot verify double-spending or anything else\n>> about the transaction.\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-22T17:30:03",
                "message_text_only": "I think it's mostly a UI issue. The recipient needs to understand that what\nhe received is nothing more than an IOU that can be revoked at any time. If\nthe UI makes it clear and the user trusts the sender, no problem. BIP70\nwould work as before.\n\n\nOn Sat, Mar 22, 2014 at 6:24 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> One participant, yes.  Two participants lacking net would require a\n> serious revisit of BIP 70's security assumptions and some design, at a\n> minimum.\n>\n> On Sat, Mar 22, 2014 at 12:55 PM, Mark Friedenbach <mark at monetize.io>\n> wrote:\n> > Jeff, there are *plenty* of places that lack local Internet access for\n> > one or both participants.\n> >\n> > Obviously making the case where both participants lack access to the\n> > bitcoin network is difficult to secure, but not impossible (e.g. use a\n> > telephany-based system to connect to a centralized double-spend\n> > database, as VISA does).\n> >\n> > I expect the case where one participant has Internet access (the\n> > merchant) and the other does not to be very, very common. The majority\n> > of transactions I do on a daily basis are like this, and I live in\n> > Silicon Valley!\n> >\n> > On 03/22/2014 09:35 AM, Jeff Garzik wrote:\n> >> Let's not pull out silly examples.  Of course you can find locations\n> >> that lack Internet.\n> >>\n> >> Those locations are completely unsuitable to bitcoin transactions,\n> >> since the receiver cannot verify double-spending or anything else\n> >> about the transaction.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/13534_NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/dd188d63/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-23T03:47:35",
                "message_text_only": "I know that general approach to interaction design in Bitcoin assumes\nminimal to no difference between payer and payee, and generally I agree\nwith this approach.\nHowever, for the sake of my PoS development this assumption is wrong by\ndefault, as PoS is a specialized hardware, and one who cared to buy and\ninstall it is probably not in the same situation as the other party that\ndidn't care to by anything dedicated.\n\nIn short - from PoS point of view there is a customer and a merchant. And\nmy goal is to make thing work in assumption of fast and reliable connection\non merchant side and no connection requirement at all from customer side.\n\nI didn't put a silly example, as of my experience there are really a lot of\nplaces where cellphone connection isn't good enough for reliable Bitcoin\noperation. However, if we're talking about merchant establishments - we can\nhope for private local WiFi or wired connection on PoS side, so PoS\ninternet connection shouldn't be an issue. So this is the use case I'm\ndesigning around and this is why bluetooth based BIP70 implementation is\nimportant for me.\n\nI partly agree with Mike on user interface and IOU idea, but I have no\nintention to implement anything like that right now.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140323/de4912b2/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T10:25:59",
                "message_text_only": "On 03/20/2014 01:12 PM, Adam Back wrote:\n\n> Whats a sensible limit on practical/convenient QR code size?\n\nTechnically 3 KB. In my experience codes above 1.5 KB become impossible\nto scan (ZXing scanner, 3 years ago). You will want to stay below 500\nbytes for convenient scanning. That said, I'm convinced there is a lot\nof room for scanning improvements.\n\n> How much of the payment protocol message size comes from use of x509?\n\nAs said in the OP, a minimal PR uses 50 bytes. X.509 seems to put about\n4000 bytes on top of that.\n\nAs you can see, we have quite some room for improvements to PR payload\n(PaymentDetails). X.509 certification will probably not be possible via\nQR, at least not until specialized CA's will issue space-efficient certs\n(using ECDSA?)."
            },
            {
                "author": "Adam Back",
                "date": "2014-03-21T10:59:06",
                "message_text_only": "Maybe its time to explore raw ECDSA signed message based certs.\n\nbtw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in der\nformat.  And they contain a 2048-bit RSA server key, and 2048-bit RSA\nsignatures (256byte each right there = 512bytes).  And even 2048 is weaker\nthan 256-bit ECDSA.\n\nAdam\n\nOn Fri, Mar 21, 2014 at 11:25:59AM +0100, Andreas Schildbach wrote:\n>On 03/20/2014 01:12 PM, Adam Back wrote:\n>\n>> Whats a sensible limit on practical/convenient QR code size?\n>\n>Technically 3 KB. In my experience codes above 1.5 KB become impossible\n>to scan (ZXing scanner, 3 years ago). You will want to stay below 500\n>bytes for convenient scanning. That said, I'm convinced there is a lot\n>of room for scanning improvements.\n>\n>> How much of the payment protocol message size comes from use of x509?\n>\n>As said in the OP, a minimal PR uses 50 bytes. X.509 seems to put about\n>4000 bytes on top of that.\n>\n>As you can see, we have quite some room for improvements to PR payload\n>(PaymentDetails). X.509 certification will probably not be possible via\n>QR, at least not until specialized CA's will issue space-efficient certs\n>(using ECDSA?)."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-21T11:08:08",
                "message_text_only": "On Fri, Mar 21, 2014 at 11:59 AM, Adam Back <adam at cypherspace.org> wrote:\n\n> Maybe its time to explore raw ECDSA signed message based certs.\n>\n\nIf you want to create and run a new CA, by all means. But I bet you don't.\nSo we're stuck with the current system for now.\n\n\n> btw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in der\n> format.  And they contain a 2048-bit RSA server key, and 2048-bit RSA\n> signatures (256byte each right there = 512bytes).  And even 2048 is weaker\n> than 256-bit ECDSA.\n\n\nBut you have to chain up to the root.\n\nThe only reason more certs aren't ECC is backwards compatibility. Some old\nbrowsers don't know how to handle them. It wasn't so long ago that Fedora\nand Android were deleting ECC code from upstream libraries before shipping\nthem, either for patent reasons for disk space saving measures.\n\nBut it's possible to get ECC certs if you want. For example, Entrust is\nstarting to sell them:\n\nhttp://www.entrust.net/ecc-certs/index.htm\n\nBut their intermediate cert is still RSA. My understanding is that ECC\nroots for many CA's have been submitted and are now included, but of course\n\"give up compatibility with lots of users\" vs \"save a bit of cpu time and a\nhandful of bytes\" is no real competition so it will be a long time until\nmost websites are using ECC certs.\n\nRegardless, it's all irrelevant. Who knows when we might want to add\nanother feature that uses some bytes into PaymentRequests. Stuffing them\ninto a QR code will never make much sense IMO - it's far more sensible to\njust use Bluetooth where the data size constraints are so much easier.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/a4fc4e27/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-21T11:33:57",
                "message_text_only": "Oh, one other reason I found - apparently RIM, at least in the past, has\nbeen telling CA's that they need to pay mad bux for the Certicom ECC\npatents. So that's another reason why most certs are still using RSA.\n\n\nOn Fri, Mar 21, 2014 at 12:08 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> On Fri, Mar 21, 2014 at 11:59 AM, Adam Back <adam at cypherspace.org> wrote:\n>\n>> Maybe its time to explore raw ECDSA signed message based certs.\n>>\n>\n> If you want to create and run a new CA, by all means. But I bet you don't.\n> So we're stuck with the current system for now.\n>\n>\n>> btw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in\n>> der\n>> format.  And they contain a 2048-bit RSA server key, and 2048-bit RSA\n>> signatures (256byte each right there = 512bytes).  And even 2048 is weaker\n>> than 256-bit ECDSA.\n>\n>\n> But you have to chain up to the root.\n>\n> The only reason more certs aren't ECC is backwards compatibility. Some old\n> browsers don't know how to handle them. It wasn't so long ago that Fedora\n> and Android were deleting ECC code from upstream libraries before shipping\n> them, either for patent reasons for disk space saving measures.\n>\n> But it's possible to get ECC certs if you want. For example, Entrust is\n> starting to sell them:\n>\n> http://www.entrust.net/ecc-certs/index.htm\n>\n> But their intermediate cert is still RSA. My understanding is that ECC\n> roots for many CA's have been submitted and are now included, but of course\n> \"give up compatibility with lots of users\" vs \"save a bit of cpu time and a\n> handful of bytes\" is no real competition so it will be a long time until\n> most websites are using ECC certs.\n>\n> Regardless, it's all irrelevant. Who knows when we might want to add\n> another feature that uses some bytes into PaymentRequests. Stuffing them\n> into a QR code will never make much sense IMO - it's far more sensible to\n> just use Bluetooth where the data size constraints are so much easier.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/4938b65f/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-03-21T12:25:42",
                "message_text_only": "According to Bernstein it's patent FUD (expired, ancient and solid prior\nart).\n\nhttp://lists.randombit.net/pipermail/cryptography/2013-August/005126.html\n\nAdam\n\nOn Fri, Mar 21, 2014 at 12:33:57PM +0100, Mike Hearn wrote:\n>   Oh, one other reason I found - apparently RIM, at least in the past,\n>   has been telling CA's that they need to pay mad bux for the Certicom\n>   ECC patents. So that's another reason why most certs are still using\n>   RSA."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-21T13:07:31",
                "message_text_only": "Maybe so, but given the relatively minor advantages of ECC certs I can see\nwhy a CA might not want to take any risks. They are sitting ducks for\npatent trolls.\n\nI think ECC will still happen, though we end up back into NSA fear\nterritory thanks to the stupid way secp256r1 was defined. *Hopefully* there's\nno back door.\n\n\nOn Fri, Mar 21, 2014 at 1:25 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> According to Bernstein it's patent FUD (expired, ancient and solid prior\n> art).\n>\n> http://lists.randombit.net/pipermail/cryptography/2013-August/005126.html\n>\n> Adam\n>\n>\n> On Fri, Mar 21, 2014 at 12:33:57PM +0100, Mike Hearn wrote:\n>\n>>   Oh, one other reason I found - apparently RIM, at least in the past,\n>>   has been telling CA's that they need to pay mad bux for the Certicom\n>>   ECC patents. So that's another reason why most certs are still using\n>>   RSA.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/802d380b/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-20T18:20:36",
                "message_text_only": "Hmm, is there any other way to do it? Can we provide a signed payment\nrequest and verify the sign on receiving side and this way protect from\nbluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't\na very well developed area, and my own skills are not enough to quickly\nimplement a reliable secure solution here.\n\n\n2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:\n\n> Encoding entire payment requests into qrcodes is definitely not the way to\n> go. They can already be large when signed and we're just at the start of\n> adding features.\n>\n> Finishing off and standardising the bluetooth support is the way to go\n> (r=bt:mac). Andreas' app already has some support for this I believe, so\n> Alex you could prototype with that, but we need to:\n>\n> 1) Add an encryption/auth layer on top, because it runs over RFCOMM\n> sockets. The authentication would require proof of owning the Bitcoin key\n> that's in the address part of the URI (which is needed for backwards compat\n> anyway).\n>\n> 2) Write a BIP for it and make sure it's interoperable\n>\n> For the auth layer we could either use SSL and then just ignore the server\n> certificate and require signing of the session public key with the Bitcoin\n> key, which should be easy to code up but is rather heavy on the air, or\n> roll a custom lightweight thing where we just do a basic ECDH, with the\n> servers key being the same as the address key. But rolling such protocols\n> is subtle and I guess it'd need to be reviewed by people familiar with such\n> things.\n>\n> This feels like a good opportunity to grow the community - perhaps we can\n> find a volunteer in the forums who enjoys crypto.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/83e79cbf/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-20T18:31:27",
                "message_text_only": "With Java, in theory, you can use SSLSocketFactory.createSocket(btsocket,\naddress, 1234, true) to wrap a bluetooth socket in SSL. However I have not\ntried it.\n\nFor now, just prototype and build your product without the security. We can\nfind someone to experiment with this, if you don't want to .\n\nBluetooth needs encryption and MACs as well as signing to be secure,\nbecause there could be radio MITM. Yes, this overlaps somewhat with the PKI\nsigning in BIP70, but not entirely - you might want to serve unsigned\npayment requests, but still have confidentiality and authenticity for a\nlocal face to face transaction. The signing and encryption does different\nthings.\n\n\nOn Thu, Mar 20, 2014 at 7:20 PM, Alex Kotenko <alexykot at gmail.com> wrote:\n\n> Hmm, is there any other way to do it? Can we provide a signed payment\n> request and verify the sign on receiving side and this way protect from\n> bluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't\n> a very well developed area, and my own skills are not enough to quickly\n> implement a reliable secure solution here.\n>\n>\n> 2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:\n>\n>> Encoding entire payment requests into qrcodes is definitely not the way\n>> to go. They can already be large when signed and we're just at the start of\n>> adding features.\n>>\n>> Finishing off and standardising the bluetooth support is the way to go\n>> (r=bt:mac). Andreas' app already has some support for this I believe, so\n>> Alex you could prototype with that, but we need to:\n>>\n>> 1) Add an encryption/auth layer on top, because it runs over RFCOMM\n>> sockets. The authentication would require proof of owning the Bitcoin key\n>> that's in the address part of the URI (which is needed for backwards compat\n>> anyway).\n>>\n>> 2) Write a BIP for it and make sure it's interoperable\n>>\n>> For the auth layer we could either use SSL and then just ignore the\n>> server certificate and require signing of the session public key with the\n>> Bitcoin key, which should be easy to code up but is rather heavy on the\n>> air, or roll a custom lightweight thing where we just do a basic ECDH, with\n>> the servers key being the same as the address key. But rolling such\n>> protocols is subtle and I guess it'd need to be reviewed by people familiar\n>> with such things.\n>>\n>> This feels like a good opportunity to grow the community - perhaps we can\n>> find a volunteer in the forums who enjoys crypto.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/6e2defd4/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-20T18:50:02",
                "message_text_only": "We'll see how it will go, maybe I will get to implement this somewhere soon.\n\nYes, I'm thinking exactly about radio MitM attacks possible with bluetooth.\nI'll also look into using PKI inside the PoS for the merchant. It would be\ngreat user experience if we would be able to provide a signed payment\nrequest with human recognizable merchant identity name in the way you\ndescribed much earlier in Bitcoin 0.9 FAQ. \u200b\n\n\n2014-03-20 18:31 GMT+00:00 Mike Hearn <mike at plan99.net>:\n\n> With Java, in theory, you can use SSLSocketFactory.createSocket(btsocket,\n> address, 1234, true) to wrap a bluetooth socket in SSL. However I have not\n> tried it.\n>\n> For now, just prototype and build your product without the security. We\n> can find someone to experiment with this, if you don't want to .\n>\n> Bluetooth needs encryption and MACs as well as signing to be secure,\n> because there could be radio MITM. Yes, this overlaps somewhat with the PKI\n> signing in BIP70, but not entirely - you might want to serve unsigned\n> payment requests, but still have confidentiality and authenticity for a\n> local face to face transaction. The signing and encryption does different\n> things.\n>\n>\n> On Thu, Mar 20, 2014 at 7:20 PM, Alex Kotenko <alexykot at gmail.com> wrote:\n>\n>> Hmm, is there any other way to do it? Can we provide a signed payment\n>> request and verify the sign on receiving side and this way protect from\n>> bluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't\n>> a very well developed area, and my own skills are not enough to quickly\n>> implement a reliable secure solution here.\n>>\n>>\n>> 2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:\n>>\n>>> Encoding entire payment requests into qrcodes is definitely not the way\n>>> to go. They can already be large when signed and we're just at the start of\n>>> adding features.\n>>>\n>>> Finishing off and standardising the bluetooth support is the way to go\n>>> (r=bt:mac). Andreas' app already has some support for this I believe, so\n>>> Alex you could prototype with that, but we need to:\n>>>\n>>> 1) Add an encryption/auth layer on top, because it runs over RFCOMM\n>>> sockets. The authentication would require proof of owning the Bitcoin key\n>>> that's in the address part of the URI (which is needed for backwards compat\n>>> anyway).\n>>>\n>>> 2) Write a BIP for it and make sure it's interoperable\n>>>\n>>> For the auth layer we could either use SSL and then just ignore the\n>>> server certificate and require signing of the session public key with the\n>>> Bitcoin key, which should be easy to code up but is rather heavy on the\n>>> air, or roll a custom lightweight thing where we just do a basic ECDH, with\n>>> the servers key being the same as the address key. But rolling such\n>>> protocols is subtle and I guess it'd need to be reviewed by people familiar\n>>> with such things.\n>>>\n>>> This feels like a good opportunity to grow the community - perhaps we\n>>> can find a volunteer in the forums who enjoys crypto.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and\n>>> their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/13534_NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/018d3730/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-20T21:52:08",
                "message_text_only": "On Thu, Mar 20, 2014 at 07:31:27PM +0100, Mike Hearn wrote:\n\n> Yes, this overlaps somewhat with the PKI signing in BIP70, but not\n> entirely - you might want to serve unsigned payment requests, but\n> still have confidentiality and authenticity for a local face to face\n> transaction. The signing and encryption does different things\n\nI'm not sure if this what you're getting at, but in a common\nface-to-face scenario, it really doesn't overlap so much (in that the\nPKI in BIP70 isn't really helpful).\n\nIt's not unusual, in a face-to-face transaction at a bricks-and-mortar\nestablishment, that you know neither the legal name of the entity\nrunning the establishment, nor any electronic identifier (domain name,\nemail address) that might be presented to you in an X.509 certificate,\neven if such a certificate is presented in the PaymentRequest.\n\nIn many cases I want/need to simply be assured that I am paying \"the\nperson/organisation which operates that machine behind the counter,\nright there\".\n\nIn many ways I'll miss the simplicity of BIP21 QR codes for\nface-to-face transactions - because in this use case the payment\nprotocol complicates (and in many cases weakens) the assurance that\nyou really are paying the entity that prepared the QR code.\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-20T23:02:44",
                "message_text_only": ">\n> It's not unusual, in a face-to-face transaction at a bricks-and-mortar\n> establishment, that you know neither the legal name of the entity\n> running the establishment\n\n\nI'd hope that people can get certs for their actual business name, but\nsometimes it does differ yes.\n\nHowever remember that signing in BIP70 is about more than just security,\nthough that's the driving factor. It's also needed for things like dispute\nmediation, receipts, etc.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/afec1ced/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-26T22:48:26",
                "message_text_only": "On Fri, Mar 21, 2014 at 12:02:44AM +0100, Mike Hearn wrote:\n> >\n> > It's not unusual, in a face-to-face transaction at a bricks-and-mortar\n> > establishment, that you know neither the legal name of the entity\n> > running the establishment\n> \n> \n> I'd hope that people can get certs for their actual business name, but\n> sometimes it does differ yes.\n\nThe actual example I was thinking of is that of traditional British\npubs.  Often a company will own several pubs - however the pubs\nthemselves will typically have individual traditional pub names.  The\nname of the company might not be at all prominently advertised in the\npubs.\n\nTraders at music festivals are another example that comes to mind (they\noften accept credit cards if they sell higher value items so why not\nBitcoin?)  In this example there often are no clearly advertised\nbusiness names - at least, that the customer will be aware of.\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-26T22:56:57",
                "message_text_only": "Yeah, for those cases we'd need to think of something else. That gets into\nthe realm of creating our own infrastructure though ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/d11a9f65/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-26T23:20:49",
                "message_text_only": "But these cases are the norm, rather than the exception. Of all these\nplaces I spend my money at during the day I hardly ever know their\nofficial name. I'm thinking in terms of \"bakery\", \"indian restaurant\" or\n\"snack vending machine\".\n\nIn Germany usually businesses are named like the people that run it.\nThat usually just one or two random family names plus the legal form of\nthe company.\n\n\nOn 03/26/2014 11:56 PM, Mike Hearn wrote:\n> Yeah, for those cases we'd need to think of something else. That gets\n> into the realm of creating our own infrastructure though ...\n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T10:08:22",
                "message_text_only": ">\n> But these cases are the norm, rather than the exception.\n>\n\nWell, you're lucky, you live in Berlin. Most of the payments I make with\nBitcoin are online, to websites. So this will differ between people.\n\nI wonder how critical it is. Let's say you are paying for a meal. In your\nhead the place you're at is just \"the little Indian restaurant on the\ncorner\". In the companies register and therefore certificate it's something\nlike \"Singh Food GmbH\". That's probably good enough to prevent shenanigans.\nEven if there's a virus on your phone, it can't really replace the cert\nwith a random stolen one, otherwise your meal could show up like \"IronCore\nSteel Inc\" or something that's obviously bogus. It'd have to be an\nincredibly smart virus that knew how to substitute one name for a different\none, from a large library of stolen identities, such that the swap seemed\nplausible. That sounds very hard, certainly too hard to bother with for\nstealing restaurant fees.\n\nAnd if a waiter at the restaurant is corrupt and they replace the cert with\none that's for their own 1-man business \"BP-Gupta\" or something, OK, you\nmight pay the wrong person by mistake. But eventually the corrupt waiter\nwill be discovered and then someone will have proof of what they did. It's\nFAR more likely they'd just strip the signature entirely and try to\nconvince you the restaurant doesn't use BIP70 at all.\n\nStill, if we want to fix this, one approach I was thinking about is to have\na super-cheesy CA just for us that issues certs with addresses in them, for\nany name you ask for. That is, if you say you want a cert for \"Shamrock\nIrish Pub, Wollishofen, Zurich, CH\" then it either sends a postcard to that\naddress with a code to check ownership of the address, or it checks\nownership of the place on Google Maps (which does the same postcard trick\nbut for free!).\n\nThat doesn't work for vending machines, but perhaps we just don't care\nabout those. If a MITM steals your lunch money, boo hoo.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/f46de8de/attachment.html>"
            },
            {
                "author": "vv01f",
                "date": "2014-03-27T13:31:53",
                "message_text_only": "Companies can have a Cert with their name via CAcert. It requires some work though to get assured as an organisation.\nDid you already think about what CA is to be trusted or do users need to do that. The least good decision in my POV would be to accept OS/browser built in CAs only.\n\nAm 27.03.2014 um 11:08 schrieb Mike Hearn <mike at plan99.net>:\n\n>> But these cases are the norm, rather than the exception.\n> \n> Well, you're lucky, you live in Berlin. Most of the payments I make with Bitcoin are online, to websites. So this will differ between people.\n> \n> I wonder how critical it is. Let's say you are paying for a meal. In your head the place you're at is just \"the little Indian restaurant on the corner\". In the companies register and therefore certificate it's something like \"Singh Food GmbH\". That's probably good enough to prevent shenanigans. Even if there's a virus on your phone, it can't really replace the cert with a random stolen one, otherwise your meal could show up like \"IronCore Steel Inc\" or something that's obviously bogus. It'd have to be an incredibly smart virus that knew how to substitute one name for a different one, from a large library of stolen identities, such that the swap seemed plausible. That sounds very hard, certainly too hard to bother with for stealing restaurant fees.\n> \n> And if a waiter at the restaurant is corrupt and they replace the cert with one that's for their own 1-man business \"BP-Gupta\" or something, OK, you might pay the wrong person by mistake. But eventually the corrupt waiter will be discovered and then someone will have proof of what they did. It's FAR more likely they'd just strip the signature entirely and try to convince you the restaurant doesn't use BIP70 at all.\n> \n> Still, if we want to fix this, one approach I was thinking about is to have a super-cheesy CA just for us that issues certs with addresses in them, for any name you ask for. That is, if you say you want a cert for \"Shamrock Irish Pub, Wollishofen, Zurich, CH\" then it either sends a postcard to that address with a code to check ownership of the address, or it checks ownership of the place on Google Maps (which does the same postcard trick but for free!).\n> \n> That doesn't work for vending machines, but perhaps we just don't care about those. If a MITM steals your lunch money, boo hoo.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/5d27c649/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T10:43:27",
                "message_text_only": "+1\n\nI couldn't do a better job at describing my motivation behind trying to\nstuff payment requests into QR codes.\n\n\nOn 03/20/2014 10:52 PM, Roy Badami wrote:\n> On Thu, Mar 20, 2014 at 07:31:27PM +0100, Mike Hearn wrote:\n> \n>> Yes, this overlaps somewhat with the PKI signing in BIP70, but not\n>> entirely - you might want to serve unsigned payment requests, but\n>> still have confidentiality and authenticity for a local face to face\n>> transaction. The signing and encryption does different things\n> \n> I'm not sure if this what you're getting at, but in a common\n> face-to-face scenario, it really doesn't overlap so much (in that the\n> PKI in BIP70 isn't really helpful).\n> \n> It's not unusual, in a face-to-face transaction at a bricks-and-mortar\n> establishment, that you know neither the legal name of the entity\n> running the establishment, nor any electronic identifier (domain name,\n> email address) that might be presented to you in an X.509 certificate,\n> even if such a certificate is presented in the PaymentRequest.\n> \n> In many cases I want/need to simply be assured that I am paying \"the\n> person/organisation which operates that machine behind the counter,\n> right there\".\n> \n> In many ways I'll miss the simplicity of BIP21 QR codes for\n> face-to-face transactions - because in this use case the payment\n> protocol complicates (and in many cases weakens) the assurance that\n> you really are paying the entity that prepared the QR code.\n> \n> roy\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-20T08:08:45",
                "message_text_only": "On 03/20/2014 03:22 AM, Alex Kotenko wrote:\n> Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I\n> need to still be able to use it for backwards compatibility. But at the\n> same time I want to be able to support BIP70. And also I want to avoid\n> using external servers, the concept of my POS is that everything is\n> happening between just payer's phone and payee's POS device. This means\n> that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.\n\nWe could use Bluetooth in the \"r\" parameter, not unlike we use Bluetooth\nin the payment_url. However, since multiple devices could access your\nmachine at the same time, we need some for of adressibility of different\npayment requests. Something like\n\"bt:<btmac>-<random_id_of_payment_request>\".\n\n> You're also offering an option to include Base43 encoded PR body right\n> inside the Bitcoin URI, but in a way that is not backwards compatible\n> with BIP21.\n\nWell, do we need to be compatible? If the dev community decides Base43\nPR QR's (or whatever other self-contained format) is the way to go, we\njust implement, roll it out and use it.\n\n> I understand your intention behind base43 encoding and noncompatible URI\n> - you want to make most possible use of QR codes. But I wonder - did you\n> compare this base43 to base64 encoded request in a binary QR code\n> format? How much do we actually win in total bytes capacity at a price\n> of noncompatibility and increased complexity?\n\nAlphanumeric QR codes have an alphabet of 45 chars, of which I am using\n43. I skipped Space and '%' because they're not allowed in URIs. When I\ninvented the Base43 format back in 2011, wanted it to be URI compatible\nso we can use the Android intent dispatcher.\n\nIf we let go of the URI requirement, we can use binary QR codes as well.\nThis means users will always have to manually start their Bitcoin app\nfirst. (Also, there is an implementation issue with the ZXing scanner\nI'm using, it returns Strings rather than a byte array so it will choke\non \\0 characters.)\n\n> And also maybe we can extend BIP72 to include encoded payment request in\n> the URL directly in a backwards compatible way?\n\nI took this into consideration. It would be space inefficient.\n\nThe Base58-encoded address from BIP21 forces the QR code into binary\nmode. Still you can't encode the payment request extension (probably an\nURL parameter) as binary because it needs to stay compatible to the URI\nstandard (RFC 3986). You could use one of the Base64 variants for the PR\nin this case, but still it would be inefficient."
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-20T16:14:27",
                "message_text_only": "2014-03-20 8:08 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n\n> On 03/20/2014 03:22 AM, Alex Kotenko wrote:\n> > Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I\n> > need to still be able to use it for backwards compatibility. But at the\n> > same time I want to be able to support BIP70. And also I want to avoid\n> > using external servers, the concept of my POS is that everything is\n> > happening between just payer's phone and payee's POS device. This means\n> > that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.\n>\n> We could use Bluetooth in the \"r\" parameter, not unlike we use Bluetooth\n> in the payment_url. However, since multiple devices could access your\n> machine at the same time, we need some for of adressibility of different\n> payment requests. Something like\n> \"bt:<btmac>-\n> \u200b\u200b\n> <random_id_of_payment_request>\".\n\n\u200bI guess this would be best option\u200b. I'm also worried about potential QR\ncode capacity, since as I imagine we can encounter device that has your\nWallet installed and bluetooth enabled, but no NFC available, so we will\nhave to operate via onscreen QR codes + bluetooth.\nHmm, if we're inventing an URI for bluetooth, I'd rather follow existing\nURI's patterns. BT is strictly point-to-point connection, so BT MAC should\nbe considered as server address, and payment request ID can be considered\nas request path. Probably \"bt:<bt-mac>/\u200b<random_id_of_payment_request>\"\nwould be more usual and easily understandable.\nReally I don't think my PoS will now support multiple simultaneous\npayments, but it's good to have this thing in place for the time I will\nneed it.\nI wonder how complex it would be to implement HTTP-over-Bluetooth. Not like\nI'm willing to do that now, but HTTP is well known and proven to be quite\ngood for tasks like this, so in theory it would be handy to have such\ncapacities in here.\n\n\n\n>  > You're also offering an option to include Base43 encoded PR body right\n> > inside the Bitcoin URI, but in a way that is not backwards compatible\n> > with BIP21.\n>\n> Well, do we need to be compatible? If the dev community decides Base43\n> PR QR's (or whatever other self-contained format) is the way to go, we\n> just implement, roll it out and use it.\n>\nMy PoS needs to be compatible with BIP21, as when I'm presenting QR code or\nsending NFC message - I have no way to tell what wallet/phone is \u200b\u200bon the\naccepting side, so I have to be compatible to existing widely supported\ntechnologies.\n\n\n> I understand your intention behind base43 encoding and noncompatible URI\n> > - you want to make most possible use of QR codes. But I wonder - did you\n> > compare this base43 to base64 encoded request in a binary QR code\n> > format? How much do we actually win in total bytes capacity at a price\n> > of noncompatibility and increased complexity?\n>\n> Alphanumeric QR codes have an alphabet of 45 chars, of which I am using\n> 43. I skipped Space and '%' because they're not allowed in URIs. When I\n> invented the Base43 format back in 2011, wanted it to be URI compatible\n> so we can use the Android intent dispatcher.\n>\n> If we let go of the URI requirement, we can use binary QR codes as well.\n> This means users will always have to manually start their Bitcoin app\n> first. (Also, there is an implementation issue with the ZXing scanner\n> I'm using, it returns Strings rather than a byte array so it will choke\n> on \\0 characters.)\n>\n\n\n> > And also maybe we can extend BIP72 to include encoded payment request in\n> > the URL directly in a backwards compatible way?\n>\n> I took this into consideration. It would be space inefficient.\n>\n> The Base58-encoded address from BIP21 forces the QR code into binary\n> mode. Still you can't encode the payment request extension (probably an\n> URL parameter) as binary because it needs to stay compatible to the URI\n> standard (RFC 3986). You could use one of the Base64 variants for the PR\n> in this case, but still it would be inefficient.\n\n\u200bWell, yes, it would be less efficient than base43. But did you calculate\nhow much less? \u200bIt's a compatible and already widely used way and loosing\ncompatibility needs to have serious reasons, so would be great to know\nexact figures here.\n\nI can find out base64 size, but I don't have a working base43\nimplementation (since the only existing is in Java, and I don't speak it).\nCan you give me a sample uncompressed PR file of moderate size and a base43\nencoded version of it? And I'll convert it into base64 and compare.\n\n\n\n------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/748182e6/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T09:47:03",
                "message_text_only": "On 03/20/2014 05:14 PM, Alex Kotenko wrote:\n\n> Hmm, if we're inventing an URI for bluetooth, I'd rather follow existing\n> URI's patterns. BT is strictly point-to-point connection, so BT MAC\n> should be considered as server address, and payment request ID can be\n> considered as request path. Probably \"bt:<bt-mac>/\u200b\n> <random_id_of_payment_request>\" would be more usual and easily\n> understandable.\n\nAgreed. I used the dash because I feared a slash would need to be\nescaped if used in an URL parameter.\n\n> I wonder how complex it would be to implement HTTP-over-Bluetooth. Not\n> like I'm willing to do that now, but HTTP is well known and proven to be\n> quite good for tasks like this, so in theory it would be handy to have\n> such capacities in here.\n\nThought of that as well. On the other hand, HTTP might be overkill and\nwe inherit its potential downsides as well.\n\n>     Well, do we need to be compatible? If the dev community decides Base43\n>     PR QR's (or whatever other self-contained format) is the way to go, we\n>     just implement, roll it out and use it.\n> \n> My PoS needs to be compatible with BIP21, as when I'm presenting QR code\n> or sending NFC message - I have no way to tell what wallet/phone is \u200b\u200bon\n> the accepting side, so I have to be compatible to existing widely\n> supported technologies.\n\nAgreed. All I wanted to say support for QR is still small enough that we\nmight be able to switch to an incompatible standard. If we're determined\nthat is.\n\n> \u200bWell, yes, it would be less efficient than base43. But did you\n> calculate how much less? \u200bIt's a compatible and already widely used way\n> and loosing compatibility needs to have serious reasons, so would be\n> great to know exact figures here.\n\nBase 64 via binary QR:   64 chars / 256 chars\n                         ==> 6 bit / 8 bit = 0.75\n\nBase 43 via alphanum QR: 43 chars / 45 chars\n                         ==> 5.43 bit / 5.49 bit = 0.99\n\nThat would be efficiency in terms of PR data size vs. amount space used\nin a QR code. Of course, the visual QR encoding also plays a role, for\nexample its size is increased in discrete steps."
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-21T13:54:25",
                "message_text_only": "2014-03-21 9:47 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n\n> On 03/20/2014 05:14 PM, Alex Kotenko wrote:\n>\n> > Hmm, if we're inventing an URI for bluetooth, I'd rather follow existing\n> > URI's patterns. BT is strictly point-to-point connection, so BT MAC\n> > should be considered as server address, and payment request ID can be\n> > considered as request path. Probably \"bt:<bt-mac>/\u200b\n> > <random_id_of_payment_request>\" would be more usual and easily\n> > understandable.\n>\n> Agreed. I used the dash because I feared a slash would need to be\n> escaped if used in an URL parameter.\n>\n\u200bIt will need to be \u200bescaped, but HTTP URLs used in BIP72 have it already,\nso don't see why we should bother.\n\n\n\n> > I wonder how complex it would be to implement HTTP-over-Bluetooth. Not\n> > like I'm willing to do that now, but HTTP is well known and proven to be\n> > quite good for tasks like this, so in theory it would be handy to have\n> > such capacities in here.\n>\n> Thought of that as well. On the other hand, HTTP might be overkill and\n> we inherit its potential downsides as well.\n>\n\u200bIt definitely is an overkill. Don't think we should do it now unless we\nwill see later during implementation that we really have to.\n\n\n\n> >     Well, do we need to be compatible? If the dev community decides\n> Base43\n> >     PR QR's (or whatever other self-contained format) is the way to go,\n> we\n> >     just implement, roll it out and use it.\n> >\n> > My PoS needs to be compatible with BIP21, as when I'm presenting QR code\n> > or sending NFC message - I have no way to tell what wallet/phone is \u200b\u200bon\n> > the accepting side, so I have to be compatible to existing widely\n> > supported technologies.\n>\n> Agreed. All I wanted to say support for QR is still small enough that we\n> might be able to switch to an incompatible standard. If we're determined\n> that is.\n\nOk. Btw, I've tested \u200bQR possibilities on my PoS screen, in binary mode\nit's limited to about 600 chars, so really I can include only unsigned and\nrather short payment request. Signed requests longer than few hundred bytes\nwill not work.\n\n\n\n> > \u200bWell, yes, it would be less efficient than base43. But did you\n> > calculate how much less? \u200bIt's a compatible and already widely used way\n> > and loosing compatibility needs to have serious reasons, so would be\n> > great to know exact figures here.\n>\n> Base 64 via binary QR:   64 chars / 256 chars\n>                          ==> 6 bit / 8 bit = 0.75\n>\n> Base 43 via alphanum QR: 43 chars / 45 chars\n>                          ==> 5.43 bit / 5.49 bit = 0.99\n>\n> That would be efficiency in terms of PR data size vs. amount space used\n> in a QR code. Of course, the visual QR encoding also plays a role, for\n> example its size is increased in discrete steps.\n>\nOk, so base43-aphanum is winning about a quarter of capacity against\nbase64-binary. I probably will skip this anyway and go with bluetooth URI\nscheme we've just agreed + old style payments over p2p network as fallback.\nSo no payment requests in QR codes at all from my side.\n\n\n\n\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/e73d4f4a/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T14:51:42",
                "message_text_only": ">     > Hmm, if we're inventing an URI for bluetooth, I'd rather follow\n>     existing\n>     > URI's patterns. BT is strictly point-to-point connection, so BT MAC\n>     > should be considered as server address, and payment request ID\ncan be\n>     > considered as request path. Probably \"bt:<bt-mac>/\u200b\n>     > <random_id_of_payment_request>\" would be more usual and easily\n>     > understandable.\n>\n>     Agreed. I used the dash because I feared a slash would need to be\n>     escaped if used in an URL parameter.\n>\n> \u200bIt will need to be \u200bescaped, but HTTP URLs used in BIP72 have it\n> already, so don't see why we should bother.\n\nQuoting from RFC 3986, Section 3.4. Query:  \"The characters slash (\"/\")\nand question mark (\"?\") may represent data within the query component.\"\n\n> Ok. Btw, I've tested \u200bQR possibilities on my PoS screen, in binary mode\n> it's limited to about 600 chars, so really I can include only unsigned\n> and rather short payment request. Signed requests longer than few\n> hundred bytes will not work.\n\nThanks for testing this. It would be interesting to know what device and\nsoftware you used for scanning. But anyway, it falls into the same\nballpark as my tests.\n\n> I probably will skip this anyway and go with bluetooth\n> URI scheme we've just agreed + old style payments over p2p network as\n> fallback. So no payment requests in QR codes at all from my side.\n\nSo BIP72 with a BT URI in the 'r' parameter?"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-21T15:38:17",
                "message_text_only": "2014-03-21 14:51 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n>\n> Quoting from RFC 3986, Section 3.4. Query:  \"The characters slash (\"/\")\n> and question mark (\"?\") may represent data within the query component.\"\n>\nOk.\u200b\u200b\n\n\nSo BIP72 with a BT URI in the 'r' parameter?\n\nYes.\u200b\u200b\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/7b851dbb/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T15:20:40",
                "message_text_only": "On 03/21/2014 02:54 PM, Alex Kotenko wrote:\n\n>     > I wonder how complex it would be to implement HTTP-over-Bluetooth. Not\n>     > like I'm willing to do that now, but HTTP is well known and proven\n>     to be\n>     > quite good for tasks like this, so in theory it would be handy to have\n>     > such capacities in here.\n> \n>     Thought of that as well. On the other hand, HTTP might be overkill and\n>     we inherit its potential downsides as well.\n> \n> \u200bIt definitely is an overkill. Don't think we should do it now unless we\n> will see later during implementation that we really have to.\n\nBtw. we could also consider SPDY. I'm not sure about the advantages, but\nits probably quicker and leaner."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-21T15:24:24",
                "message_text_only": "SPDY requires SSL and is even more complex than HTTP.\n\nReally, the current protocol we've got (length prefixed protobufs) is just\nfine except for the lack of encryption/authentication. For that you need to\ndo ECDH to establish a shared AES session key, and MAC each packet. Like I\nsaid, it's not entirely trivial which is why it's worth trying SSL too, but\nit's also not a massive effort.\n\n\nOn Fri, Mar 21, 2014 at 4:20 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> On 03/21/2014 02:54 PM, Alex Kotenko wrote:\n>\n> >     > I wonder how complex it would be to implement HTTP-over-Bluetooth.\n> Not\n> >     > like I'm willing to do that now, but HTTP is well known and proven\n> >     to be\n> >     > quite good for tasks like this, so in theory it would be handy to\n> have\n> >     > such capacities in here.\n> >\n> >     Thought of that as well. On the other hand, HTTP might be overkill\n> and\n> >     we inherit its potential downsides as well.\n> >\n> > \u200bIt definitely is an overkill. Don't think we should do it now unless we\n> > will see later during implementation that we really have to.\n>\n> Btw. we could also consider SPDY. I'm not sure about the advantages, but\n> its probably quicker and leaner.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/dc8080b3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol for Face-to-face Payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Alex Kotenko",
                "Andreas Schildbach",
                "Adam Back",
                "Mike Hearn",
                "Roy Badami",
                "vv01f",
                "Mark Friedenbach"
            ],
            "messages_count": 44,
            "total_messages_chars_count": 80108
        }
    },
    {
        "title": "[Bitcoin-development] 0.9.0 release candidate two",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2014-03-02T13:54:12",
                "message_text_only": "Please download and help test 0.9.0rc2; binaries are available from:\n   https://bitcoin.org/bin/0.9.0/test/\n\nIf no serious bugs are found in this release candidate, it will be the\nfinal 0.9.0 release.\n\nRelease notes (please help proofread/improve these, too):\n---------------------------------------------------------------------------\n\nBitcoin Core version 0.9.0rc2 is now available from:\n\n  https://bitcoin.org/bin/0.9.0/test/\n\nThis is a release candidate for a new major version. A major version brings\nboth new features and bug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n  https://github.com/bitcoin/bitcoin/issues\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has\ncompletely\nshut down (which might take a few minutes for older versions), uninstall all\nearlier versions of Bitcoin, then run the installer (on Windows) or just\ncopy\nover /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n\nIf you are upgrading from version 0.7.2 or earlier, the first time you run\n0.9.0 your blockchain files will be re-indexed, which will take anywhere\nfrom\n30 minutes to several hours, depending on the speed of your machine.\n\nOn Windows, do not forget to uninstall all earlier versions of the Bitcoin\nclient first, especially if you are switching to the 64-bit version.\n\nWindows 64-bit installer\n-------------------------\n\nNew in 0.9.0 is the Windows 64-bit version of the client. There have been\nfrequent reports of users running out of virtual memory on 32-bit systems\nduring the initial sync. Because of this it is recommended to install the\n64-bit version if your system supports it.\n\nNOTE: Release candidate 2 windows binaries are not code-signed; use pgp\nand the SHA256SUMS.asc file to make sure your binaries are correct.\nThe final 0.9.0 release Windows setup.exe binaries will be code-signed.\n\nOSX 10.5 / 32-bit no longer supported\n-------------------------------------\n\n0.9.0 drops support for older Macs. The minimum requirements are now\na 64-bit-capable CPU running OSX 10.6 or later.\n\nRebranding to Bitcoin Core\n---------------------------\n\nTo reduce confusion between Bitcoin-the-network and Bitcoin-the-software we\nhave renamed the reference client to Bitcoin Core.\n\nAutotools build system\n-----------------------\n\nFor 0.9.0 we switched to an autotools-based build system instead of\nindividual\n(q)makefiles.\n\nUsing the standard \"./autogen.sh; ./configure; make\" to build Bitcoin-Qt and\nbitcoind makes it easier for experienced open source developers to\ncontribute\nto the project.\n\nBe sure to check doc/build-*.md for your platform before building from\nsource.\n\nBitcoin-cli\n-------------\n\nAnother change in the 0.9 release is moving away from the bitcoind\nexecutable\nfunctioning both as a server and as a RPC client. The RPC client\nfunctionality\n(\"tell the running bitcoin daemon to do THIS\") was split into a separate\nexecutable, 'bitcoin-cli'. The RPC client code will eventually be removed\nfrom\nbitcoind, but will be kept for backwards compatibility for a release or two.\n\n`walletpassphrase` RPC\n-----------------------\n\nThe behavior of the `walletpassphrase` RPC when the wallet is already\nunlocked\nhas changed between 0.8 and 0.9.\n\nThe 0.8 behavior of `walletpassphrase` is to fail when the wallet is\nalready unlocked:\n\n    > walletpassphrase 1000\n    walletunlocktime = now + 1000\n    > walletpassphrase 10\n    Error: Wallet is already unlocked (old unlock time stays)\n\nThe new behavior of `walletpassphrase` is to set a new unlock time\noverriding\nthe old one:\n\n    > walletpassphrase 1000\n    walletunlocktime = now + 1000\n    > walletpassphrase 10\n    walletunlocktime = now + 10 (overriding the old unlock time)\n\nTransaction malleability-related fixes\n--------------------------------------\n\nThis release contains a few fixes for transaction id malleability issues:\n\n- -nospendzeroconfchange command-line option, to avoid spending\n  zero-confirmation change\n- IsStandard() transaction rules tightened to prevent relaying and mining of\n  mutated transactions\n- Additional information in listtransactions/gettransaction output to\n  report wallet transactions that conflict with each other because\n  they spend the same outputs.\n- Bug fixes to the getbalance/listaccounts RPC commands, which would report\n  incorrect balances for double-spent (or mutated) transactions.\n- New option: -zapwallettxes to rebuild the wallet's transaction information\n\nTransaction Fees\n----------------\n\nThis release drops the default fee required to relay transactions across the\nnetwork to 0.01mBTC per kilobyte. Note that getting a transaction relayed\nacross the network does NOT guarantee that the transaction will be\naccepted by a miner and included in a block, and the default fee accepted\nby miners remains 0.1mBTC per kilobyte.\n\nAs in previous releases, the relay fee may be changed with the\n-minrelaytxfee\ncommand-line option, and miners may change the default minimum fee they\naccept\nwith the -mintxfee command-line option.\n\n0.9.0rc2 Release notes\n=======================\n\nRPC:\n\n- New notion of 'conflicted' transactions, reported as\n  confirmations: -1\n- 'listreceivedbyaddress' now provides tx ids\n- Add raw transaction hex to 'gettransaction' output\n- Updated help and tests for 'getreceivedby(account|address)'\n- In 'getblock', accept 2nd 'verbose' parameter, similar to\ngetrawtransaction,\n  but defaulting to 1 for backward compatibility\n- Add 'verifychain', to verify chain database at runtime\n- Add 'dumpwallet' and 'importwallet' RPCs\n- 'keypoolrefill' gains optional size parameter\n- Add 'getbestblockhash', to return tip of best chain\n- Add 'chainwork' (the total work done by all blocks since the genesis\nblock)\n  to 'getblock' output\n- Make RPC password resistant to timing attacks\n- Clarify help messages and add examples\n- Add 'getrawchangeaddress' call for raw transaction change destinations\n- Reject insanely high fees by default in 'sendrawtransaction'\n- Add RPC call 'decodescript' to decode a hex-encoded transaction script\n- Make 'validateaddress' provide redeemScript\n- Add 'getnetworkhashps' to get the calculated network hashrate\n- New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'\nfields\n  in 'getpeerinfo' output\n- Adding new 'addrlocal' field to 'getpeerinfo' output\n- Add verbose boolean to 'getrawmempool'\n- Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed\nbalance\n- Explicitly ensure that wallet is unlocked in `importprivkey`\n- Add check for valid keys in `importprivkey`\n\nCommand-line options:\n\n- New option: -nospendzeroconfchange to never spend unconfirmed change\noutputs\n- New option: -zapwallettxes to rebuild the wallet's transaction information\n- Rename option '-tor' to '-onion' to better reflect what it does\n- Add '-disablewallet' mode to let bitcoind run entirely without wallet\n(when\n  built with wallet)\n- Update default '-rpcsslciphers' to include TLSv1.2\n- make '-logtimestamps' default on and rework help-message\n- RPC client option: '-rpcwait', to wait for server start\n- Remove '-logtodebugger'\n- Allow `-noserver` with bitcoind\n\nBlock-chain handling and storage:\n\n- Update leveldb to 1.15\n- Check for correct genesis (prevent cases where a datadir from the wrong\n  network is accidentally loaded)\n- Allow txindex to be removed and add a reindex dialog\n- Log aborted block database rebuilds\n- Store orphan blocks in serialized form, to save memory\n- Limit the number of orphan blocks in memory to 750\n- Fix non-standard disconnected transactions causing mempool orphans\n- Add a new checkpoint at block 279,000\n\nWallet:\n\n- Bug fixes and new regression tests to correctly compute\n  the balance of wallets containing double-spent (or mutated) transactions\n- Store key creation time. Calculate whole-wallet birthday.\n- Optimize rescan to skip blocks prior to birthday\n- Let user select wallet file with -wallet=foo.dat\n- Consider generated coins mature at 101 instead of 120 blocks\n- Improve wallet load time\n- Don't count txins for priority to encourage sweeping\n- Don't create empty transactions when reading a corrupted wallet\n- Fix rescan to start from beginning after importprivkey\n- Only create signatures with low S values.\n\nMining:\n\n- Increase default -blockmaxsize/prioritysize to 750K/50K\n- 'getblocktemplate' does not require a key to create a block template\n\nProtocol and network:\n\n- Drop the fee required to relay a transaction to 0.01mBTC per kilobyte\n- Send tx relay flag with version\n- New 'reject' P2P message (BIP 0061, see\nhttps://gist.github.com/gavinandresen/7079034 for draft)\n- Dump addresses every 15 minutes instead of 10 seconds\n- Relay OP_RETURN data TxOut as standard transaction type\n- Remove CENT-output free transaction rule when relaying\n- Lower maximum size for free transaction creation\n- Send multiple inv messages if mempool.size > MAX_INV_SZ\n- Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION\n- Do not treat fFromMe transaction differently when broadcasting\n- Process received messages one at a time without sleeping between messages\n- Improve logging of failed connections\n- Bump protocol version to 70002\n- Add some additional logging to give extra network insight\n- Added new DNS seed from bitcoinstats.com\n\nValidation:\n\n- Log reason for non-standard transaction rejection\n- Prune provably-unspendable outputs, and adapt consistency check for it.\n- Detect any sufficiently long fork and add a warning\n- Call the -alertnotify script when we see a long or invalid fork\n- Fix multi-block reorg transaction resurrection\n- Reject non-canonically-encoded serialization sizes\n- Reject dust amounts during validation\n- Accept nLockTime transactions that finalize in the next block\n\nBuild system:\n\n- Switch to autotools-based build system\n- Build without wallet by passing `--disable-wallet` to configure, this\nremoves\n  the BerkeleyDB dependency\n- Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to\nmore\n  recent versions\n- Windows 64-bit build support\n- Solaris compatibility fixes\n- Check integrity of gitian input source tarballs\n- Enable full GCC Stack-smashing protection for all OSes\n\nGUI:\n\n- Switch to Qt 5.2.0 for Windows build\n- Add payment request (BIP 0070) support\n- Improve options dialog\n- Show transaction fee in new send confirmation dialog\n- Add total balance in overview page\n- Allow user to choose data directory on first start, when data directory is\n  missing, or when the -choosedatadir option is passed\n- Save and restore window positions\n- Add vout index to transaction id in transactions details dialog\n- Add network traffic graph in debug window\n- Add open URI dialog\n- Add Coin Control Features\n- Improve receive coins workflow: make the 'Receive' tab into a form to\nrequest\n  payments, and move historical address list functionality to File menu.\n- Rebrand to `Bitcoin Core`\n- Move initialization/shutdown to a thread. This prevents \"Not responding\"\n  messages during startup. Also show a window during shutdown.\n- Don't regenerate autostart link on every client startup\n- Show and store message of normal bitcoin:URI\n- Fix richtext detection hang issue on very old Qt versions\n- osx: Make use of the 10.8+ user notification center to display growl like\n       notifications\n- osx: Added NSHighResolutionCapable flag to Info.plist for better font\n       rendering on Retina displays.\n- osx: Fix bitcoin-qt startup crash when clicking dock icon\n- linux: Fix Gnome bitcoin: URI handler\n\nMiscellaneous:\n\n- Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth\n- Add '-regtest' mode, similar to testnet but private with instant block\n  generation with 'setgenerate' RPC.\n- Add 'linearize.py' script to contrib, for creating bootstrap.dat\n- Add separate bitcoin-cli client\n\nCredits\n--------\n\nThanks to everyone who contributed to this release:\n\n- Andrey\n- Ashley Holman\n- b6393ce9-d324-4fe1-996b-acf82dbc3d53\n- bitsofproof\n- Brandon Dahler\n- Calvin Tam\n- Christian Decker\n- Christopher Latham\n- Chuck\n- coblee\n- constantined\n- Cory Fields\n- Cozz Lovan\n- Daniel Larimer\n- David Hill\n- Dmitry Smirnov\n- Drak\n- Eric Lombrozo\n- fanquake\n- fcicq\n- Florin\n- frewil\n- Gavin Andresen\n- Gregory Maxwell\n- gubatron\n- Guillermo C\u00e9spedes Tab\u00e1rez\n- Haakon Nilsen\n- HaltingState\n- Han Lin Yap\n- harry\n- Ian Kelling\n- Jeff Garzik\n- Johnathan Corgan\n- Jonas Schnelli\n- Josh Lehan\n- Josh Triplett\n- Julian Langschaedel\n- Kangmo\n- Lake Denman\n- Luke Dashjr\n- Mark Friedenbach\n- Matt Corallo\n- Michael Bauer\n- Michael Ford\n- Michagogo\n- Midnight Magic\n- Mike Hearn\n- Nils Schneider\n- Noel Tiernan\n- Olivier Langlois\n- patrick s\n- Patrick Strateman\n- Peter Todd\n- phantomcircuit\n- phelixbtc\n- Philip Kaufmann\n- Pieter Wuille\n- Rav3nPL\n- regergregregerrge\n- Robert Backhaus\n- Roman Mindalev\n- Rune K. Svendsen\n- Ryan Niebur\n- Scott Ellis\n- Scott Willeke\n- Sergey Kazenyuk\n- Shawn Wilkinson\n- Sined\n- sje\n- Subo1978\n- super3\n- Tamas Blummer\n- theuni\n- Thomas Holenstein\n- Timon Rapp\n- Timothy Stranex\n- Vaclav Vobornik\n- vhf / victor felder\n- Vinnie Falco\n- Warren Togami\n- Wil Bown\n- Wladimir J. van der Laan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/d199384e/attachment.html>"
            },
            {
                "author": "James Hartig",
                "date": "2014-03-02T18:34:46",
                "message_text_only": "Heads up... downloaded the linux tar.gz to my OVH box and got my server\nterminated. Screenshot from the email:\nhttp://cl.ly/image/3q0C2a3Y0T0V\n\nThey claimed I was attacking 88.198.199.140 over port 443.\n\nThanks,\n--\nJames Hartig\nSoftware Engineer @ Grooveshark.com\nhttp://twitter.com/jameshartig\n\n\n\n\n\nOn Sun, Mar 2, 2014 at 8:54 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Please download and help test 0.9.0rc2; binaries are available from:\n>    https://bitcoin.org/bin/0.9.0/test/\n>\n> If no serious bugs are found in this release candidate, it will be the\n> final 0.9.0 release.\n>\n> Release notes (please help proofread/improve these, too):\n> ---------------------------------------------------------------------------\n>\n> Bitcoin Core version 0.9.0rc2 is now available from:\n>\n>   https://bitcoin.org/bin/0.9.0/test/\n>\n> This is a release candidate for a new major version. A major version brings\n> both new features and bug fixes.\n>\n> Please report bugs using the issue tracker at github:\n>\n>   https://github.com/bitcoin/bitcoin/issues\n>\n> How to Upgrade\n> --------------\n>\n> If you are running an older version, shut it down. Wait until it has\n> completely\n> shut down (which might take a few minutes for older versions), uninstall\n> all\n> earlier versions of Bitcoin, then run the installer (on Windows) or just\n> copy\n> over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n>\n> If you are upgrading from version 0.7.2 or earlier, the first time you run\n> 0.9.0 your blockchain files will be re-indexed, which will take anywhere\n> from\n> 30 minutes to several hours, depending on the speed of your machine.\n>\n> On Windows, do not forget to uninstall all earlier versions of the Bitcoin\n> client first, especially if you are switching to the 64-bit version.\n>\n> Windows 64-bit installer\n> -------------------------\n>\n> New in 0.9.0 is the Windows 64-bit version of the client. There have been\n> frequent reports of users running out of virtual memory on 32-bit systems\n> during the initial sync. Because of this it is recommended to install the\n> 64-bit version if your system supports it.\n>\n> NOTE: Release candidate 2 windows binaries are not code-signed; use pgp\n> and the SHA256SUMS.asc file to make sure your binaries are correct.\n> The final 0.9.0 release Windows setup.exe binaries will be code-signed.\n>\n> OSX 10.5 / 32-bit no longer supported\n> -------------------------------------\n>\n> 0.9.0 drops support for older Macs. The minimum requirements are now\n> a 64-bit-capable CPU running OSX 10.6 or later.\n>\n> Rebranding to Bitcoin Core\n> ---------------------------\n>\n> To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we\n> have renamed the reference client to Bitcoin Core.\n>\n> Autotools build system\n> -----------------------\n>\n> For 0.9.0 we switched to an autotools-based build system instead of\n> individual\n> (q)makefiles.\n>\n> Using the standard \u201c./autogen.sh; ./configure; make\u201d to build Bitcoin-Qt\n> and\n> bitcoind makes it easier for experienced open source developers to\n> contribute\n> to the project.\n>\n> Be sure to check doc/build-*.md for your platform before building from\n> source.\n>\n> Bitcoin-cli\n> -------------\n>\n> Another change in the 0.9 release is moving away from the bitcoind\n> executable\n> functioning both as a server and as a RPC client. The RPC client\n> functionality\n> (\u201ctell the running bitcoin daemon to do THIS\u201d) was split into a separate\n> executable, 'bitcoin-cli'. The RPC client code will eventually be removed\n> from\n> bitcoind, but will be kept for backwards compatibility for a release or\n> two.\n>\n> `walletpassphrase` RPC\n> -----------------------\n>\n> The behavior of the `walletpassphrase` RPC when the wallet is already\n> unlocked\n> has changed between 0.8 and 0.9.\n>\n> The 0.8 behavior of `walletpassphrase` is to fail when the wallet is\n> already unlocked:\n>\n>     > walletpassphrase 1000\n>     walletunlocktime = now + 1000\n>     > walletpassphrase 10\n>     Error: Wallet is already unlocked (old unlock time stays)\n>\n> The new behavior of `walletpassphrase` is to set a new unlock time\n> overriding\n> the old one:\n>\n>     > walletpassphrase 1000\n>     walletunlocktime = now + 1000\n>     > walletpassphrase 10\n>     walletunlocktime = now + 10 (overriding the old unlock time)\n>\n> Transaction malleability-related fixes\n> --------------------------------------\n>\n> This release contains a few fixes for transaction id malleability issues:\n>\n> - -nospendzeroconfchange command-line option, to avoid spending\n>   zero-confirmation change\n> - IsStandard() transaction rules tightened to prevent relaying and mining\n> of\n>   mutated transactions\n> - Additional information in listtransactions/gettransaction output to\n>   report wallet transactions that conflict with each other because\n>   they spend the same outputs.\n> - Bug fixes to the getbalance/listaccounts RPC commands, which would report\n>   incorrect balances for double-spent (or mutated) transactions.\n> - New option: -zapwallettxes to rebuild the wallet's transaction\n> information\n>\n> Transaction Fees\n> ----------------\n>\n> This release drops the default fee required to relay transactions across\n> the\n> network to 0.01mBTC per kilobyte. Note that getting a transaction relayed\n> across the network does NOT guarantee that the transaction will be\n> accepted by a miner and included in a block, and the default fee accepted\n> by miners remains 0.1mBTC per kilobyte.\n>\n> As in previous releases, the relay fee may be changed with the\n> -minrelaytxfee\n> command-line option, and miners may change the default minimum fee they\n> accept\n> with the -mintxfee command-line option.\n>\n> 0.9.0rc2 Release notes\n> =======================\n>\n> RPC:\n>\n> - New notion of 'conflicted' transactions, reported as\n>   confirmations: -1\n> - 'listreceivedbyaddress' now provides tx ids\n> - Add raw transaction hex to 'gettransaction' output\n> - Updated help and tests for 'getreceivedby(account|address)'\n> - In 'getblock', accept 2nd 'verbose' parameter, similar to\n> getrawtransaction,\n>   but defaulting to 1 for backward compatibility\n> - Add 'verifychain', to verify chain database at runtime\n> - Add 'dumpwallet' and 'importwallet' RPCs\n> - 'keypoolrefill' gains optional size parameter\n> - Add 'getbestblockhash', to return tip of best chain\n> - Add 'chainwork' (the total work done by all blocks since the genesis\n> block)\n>   to 'getblock' output\n> - Make RPC password resistant to timing attacks\n> - Clarify help messages and add examples\n> - Add 'getrawchangeaddress' call for raw transaction change destinations\n> - Reject insanely high fees by default in 'sendrawtransaction'\n> - Add RPC call 'decodescript' to decode a hex-encoded transaction script\n> - Make 'validateaddress' provide redeemScript\n> - Add 'getnetworkhashps' to get the calculated network hashrate\n> - New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'\n> fields\n>   in 'getpeerinfo' output\n> - Adding new 'addrlocal' field to 'getpeerinfo' output\n> - Add verbose boolean to 'getrawmempool'\n> - Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed\n> balance\n> - Explicitly ensure that wallet is unlocked in `importprivkey`\n> - Add check for valid keys in `importprivkey`\n>\n> Command-line options:\n>\n> - New option: -nospendzeroconfchange to never spend unconfirmed change\n> outputs\n> - New option: -zapwallettxes to rebuild the wallet's transaction\n> information\n> - Rename option '-tor' to '-onion' to better reflect what it does\n> - Add '-disablewallet' mode to let bitcoind run entirely without wallet\n> (when\n>   built with wallet)\n> - Update default '-rpcsslciphers' to include TLSv1.2\n> - make '-logtimestamps' default on and rework help-message\n> - RPC client option: '-rpcwait', to wait for server start\n> - Remove '-logtodebugger'\n> - Allow `-noserver` with bitcoind\n>\n> Block-chain handling and storage:\n>\n> - Update leveldb to 1.15\n> - Check for correct genesis (prevent cases where a datadir from the wrong\n>   network is accidentally loaded)\n> - Allow txindex to be removed and add a reindex dialog\n> - Log aborted block database rebuilds\n> - Store orphan blocks in serialized form, to save memory\n> - Limit the number of orphan blocks in memory to 750\n> - Fix non-standard disconnected transactions causing mempool orphans\n> - Add a new checkpoint at block 279,000\n>\n> Wallet:\n>\n> - Bug fixes and new regression tests to correctly compute\n>   the balance of wallets containing double-spent (or mutated) transactions\n> - Store key creation time. Calculate whole-wallet birthday.\n> - Optimize rescan to skip blocks prior to birthday\n> - Let user select wallet file with -wallet=foo.dat\n> - Consider generated coins mature at 101 instead of 120 blocks\n> - Improve wallet load time\n> - Don't count txins for priority to encourage sweeping\n> - Don't create empty transactions when reading a corrupted wallet\n> - Fix rescan to start from beginning after importprivkey\n> - Only create signatures with low S values.\n>\n> Mining:\n>\n> - Increase default -blockmaxsize/prioritysize to 750K/50K\n> - 'getblocktemplate' does not require a key to create a block template\n>\n> Protocol and network:\n>\n> - Drop the fee required to relay a transaction to 0.01mBTC per kilobyte\n> - Send tx relay flag with version\n> - New 'reject' P2P message (BIP 0061, see\n> https://gist.github.com/gavinandresen/7079034 for draft)\n> - Dump addresses every 15 minutes instead of 10 seconds\n> - Relay OP_RETURN data TxOut as standard transaction type\n> - Remove CENT-output free transaction rule when relaying\n> - Lower maximum size for free transaction creation\n> - Send multiple inv messages if mempool.size > MAX_INV_SZ\n> - Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and\n> MIN_PEER_PROTO_VERSION\n> - Do not treat fFromMe transaction differently when broadcasting\n> - Process received messages one at a time without sleeping between messages\n> - Improve logging of failed connections\n> - Bump protocol version to 70002\n> - Add some additional logging to give extra network insight\n> - Added new DNS seed from bitcoinstats.com\n>\n> Validation:\n>\n> - Log reason for non-standard transaction rejection\n> - Prune provably-unspendable outputs, and adapt consistency check for it.\n> - Detect any sufficiently long fork and add a warning\n> - Call the -alertnotify script when we see a long or invalid fork\n> - Fix multi-block reorg transaction resurrection\n> - Reject non-canonically-encoded serialization sizes\n> - Reject dust amounts during validation\n> - Accept nLockTime transactions that finalize in the next block\n>\n> Build system:\n>\n> - Switch to autotools-based build system\n> - Build without wallet by passing `--disable-wallet` to configure, this\n> removes\n>   the BerkeleyDB dependency\n> - Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to\n> more\n>   recent versions\n> - Windows 64-bit build support\n> - Solaris compatibility fixes\n> - Check integrity of gitian input source tarballs\n> - Enable full GCC Stack-smashing protection for all OSes\n>\n> GUI:\n>\n> - Switch to Qt 5.2.0 for Windows build\n> - Add payment request (BIP 0070) support\n> - Improve options dialog\n> - Show transaction fee in new send confirmation dialog\n> - Add total balance in overview page\n> - Allow user to choose data directory on first start, when data directory\n> is\n>   missing, or when the -choosedatadir option is passed\n> - Save and restore window positions\n> - Add vout index to transaction id in transactions details dialog\n> - Add network traffic graph in debug window\n> - Add open URI dialog\n> - Add Coin Control Features\n> - Improve receive coins workflow: make the 'Receive' tab into a form to\n> request\n>   payments, and move historical address list functionality to File menu.\n> - Rebrand to `Bitcoin Core`\n> - Move initialization/shutdown to a thread. This prevents \u201cNot responding\u201d\n>   messages during startup. Also show a window during shutdown.\n> - Don't regenerate autostart link on every client startup\n> - Show and store message of normal bitcoin:URI\n> - Fix richtext detection hang issue on very old Qt versions\n> - osx: Make use of the 10.8+ user notification center to display growl like\n>        notifications\n> - osx: Added NSHighResolutionCapable flag to Info.plist for better font\n>        rendering on Retina displays.\n> - osx: Fix bitcoin-qt startup crash when clicking dock icon\n> - linux: Fix Gnome bitcoin: URI handler\n>\n> Miscellaneous:\n>\n> - Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth\n> - Add '-regtest' mode, similar to testnet but private with instant block\n>   generation with 'setgenerate' RPC.\n> - Add 'linearize.py' script to contrib, for creating bootstrap.dat\n> - Add separate bitcoin-cli client\n>\n> Credits\n> --------\n>\n> Thanks to everyone who contributed to this release:\n>\n> - Andrey\n> - Ashley Holman\n> - b6393ce9-d324-4fe1-996b-acf82dbc3d53\n> - bitsofproof\n> - Brandon Dahler\n> - Calvin Tam\n> - Christian Decker\n> - Christopher Latham\n> - Chuck\n> - coblee\n> - constantined\n> - Cory Fields\n> - Cozz Lovan\n> - Daniel Larimer\n> - David Hill\n> - Dmitry Smirnov\n> - Drak\n> - Eric Lombrozo\n> - fanquake\n> - fcicq\n> - Florin\n> - frewil\n> - Gavin Andresen\n> - Gregory Maxwell\n> - gubatron\n> - Guillermo C\u00e9spedes Tab\u00e1rez\n> - Haakon Nilsen\n> - HaltingState\n> - Han Lin Yap\n> - harry\n> - Ian Kelling\n> - Jeff Garzik\n> - Johnathan Corgan\n> - Jonas Schnelli\n> - Josh Lehan\n> - Josh Triplett\n> - Julian Langschaedel\n> - Kangmo\n> - Lake Denman\n> - Luke Dashjr\n> - Mark Friedenbach\n> - Matt Corallo\n> - Michael Bauer\n> - Michael Ford\n> - Michagogo\n> - Midnight Magic\n> - Mike Hearn\n> - Nils Schneider\n> - Noel Tiernan\n> - Olivier Langlois\n> - patrick s\n> - Patrick Strateman\n> - Peter Todd\n> - phantomcircuit\n> - phelixbtc\n> - Philip Kaufmann\n> - Pieter Wuille\n> - Rav3nPL\n> - regergregregerrge\n> - Robert Backhaus\n> - Roman Mindalev\n> - Rune K. Svendsen\n> - Ryan Niebur\n> - Scott Ellis\n> - Scott Willeke\n> - Sergey Kazenyuk\n> - Shawn Wilkinson\n> - Sined\n> - sje\n> - Subo1978\n> - super3\n> - Tamas Blummer\n> - theuni\n> - Thomas Holenstein\n> - Timon Rapp\n> - Timothy Stranex\n> - Vaclav Vobornik\n> - vhf / victor felder\n> - Vinnie Falco\n> - Warren Togami\n> - Wil Bown\n> - Wladimir J. van der Laan\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/2604d884/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-02T20:56:06",
                "message_text_only": "On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:\n\n> Heads up... downloaded the linux tar.gz to my OVH box and got my server\n> terminated. Screenshot from the email:\n> http://cl.ly/image/3q0C2a3Y0T0V\n>\n> They claimed I was attacking 88.198.199.140 over port 443.\n>\n\nSounds very unlikely that bitcoind would connect to port 443, let alone\n'attack' anything.\n\nAnything in debug.log regarding that IP?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/bc9e544a/attachment.html>"
            },
            {
                "author": "James Hartig",
                "date": "2014-03-02T20:59:43",
                "message_text_only": "Didn't mean that bitcoind was connecting over port 443. I didn't even get a\nchance to compile. I was literally just finished downloading the tar.gz\nfile when my server was terminated.\n\nStill trying to convince them I wasn't attacking anyone so they can\nre-enable the server.\n\nThanks,\n--\nJames Hartig\nSoftware Engineer @ Grooveshark.com\nhttp://twitter.com/jameshartig\n\n\n\n\n\nOn Sun, Mar 2, 2014 at 3:56 PM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:\n>\n>> Heads up... downloaded the linux tar.gz to my OVH box and got my server\n>> terminated. Screenshot from the email:\n>> http://cl.ly/image/3q0C2a3Y0T0V\n>>\n>> They claimed I was attacking 88.198.199.140 over port 443.\n>>\n>\n> Sounds very unlikely that bitcoind would connect to port 443, let alone\n> 'attack' anything.\n>\n> Anything in debug.log regarding that IP?\n>\n> Wladimir\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/c3b35489/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2014-03-02T21:11:01",
                "message_text_only": "The domain bitcoin.org resolves to that IP address. Could it be some\nupdate check together with a circular redirect? That could at least\nexplain the large number of connection attempts.\n--\nChristian Decker\n\n\nOn Sun, Mar 2, 2014 at 9:56 PM, Wladimir <laanwj at gmail.com> wrote:\n>\n> On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:\n>>\n>> Heads up... downloaded the linux tar.gz to my OVH box and got my server\n>> terminated. Screenshot from the email:\n>> http://cl.ly/image/3q0C2a3Y0T0V\n>>\n>> They claimed I was attacking 88.198.199.140 over port 443.\n>\n>\n> Sounds very unlikely that bitcoind would connect to port 443, let alone\n> 'attack' anything.\n>\n> Anything in debug.log regarding that IP?\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "0.9.0 release candidate two",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "James Hartig",
                "Gavin Andresen",
                "Christian Decker"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 31396
        }
    },
    {
        "title": "[Bitcoin-development] Procedure for non-tech contributions",
        "thread_messages": [
            {
                "author": "Tom Geller",
                "date": "2014-03-02T20:10:09",
                "message_text_only": "Hey, folks. Sorry if this is documented somewhere -- if so, just point me at it. I couldn't find it, though.\n\nI'm a (non-developer) writer with experience in open-source communities, and I'd like to contribute with writing/editing/marketing. What's the procedure? Is there someone in charge of that area?\n\nTwo examples:\n\n1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear how to send the changes. (There are many possibilities, some better than others. Git? Google Docs with revisioning? Microsoft Word with Track Changes? The Bitcoin wiki?)\n\n2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that \"the wiki receiving wallet (for the wiki itself) is also MtGox\". Umm, I rather doubt that. :-P But I'm not sure what the current info is, or whom to alert.\n\nOff-list replies welcome. Thanks,\n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-02T20:40:29",
                "message_text_only": "On Sun, Mar 02, 2014 at 03:10:09PM -0500, Tom Geller wrote:\n> Hey, folks. Sorry if this is documented somewhere -- if so, just point me at it. I couldn't find it, though.\n> \n> I'm a (non-developer) writer with experience in open-source communities, and I'd like to contribute with writing/editing/marketing. What's the procedure? Is there someone in charge of that area?\n> \n> Two examples:\n> \n> 1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear how to send the changes. (There are many possibilities, some better than others. Git? Google Docs with revisioning? Microsoft Word with Track Changes? The Bitcoin wiki?)\n\nI proof-read rc1 and simply submitted my changes via pull-req:\n\n    https://github.com/bitcoin/bitcoin/pull/3642\n\nI'd say to encourage that method. If someone doesn't know how to use\ngit, yet still wants to proof-read, just send us a text-file with all\nyour corrections applied. We've got the tools to diff those changes\nourselves; no fancy software is required.\n\n\n> 2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that \"the wiki receiving wallet (for the wiki itself) is also MtGox\". Umm, I rather doubt that. :-P But I'm not sure what the current info is, or whom to alert.\n\nMtGox does host the bitcoin wiki, so yes, the funds probably do go to a\nwallet held by MtGox in some fashion.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/94cc186a/attachment.sig>"
            },
            {
                "author": "Drak",
                "date": "2014-03-02T22:11:25",
                "message_text_only": "On 2 March 2014 20:40, Peter Todd <pete at petertodd.org> wrote:\n\n> I proof-read rc1 and simply submitted my changes via pull-req:\n>\n>     https://github.com/bitcoin/bitcoin/pull/3642\n>\n> I'd say to encourage that method. If someone doesn't know how to use\n> git, yet still wants to proof-read, just send us a text-file with all\n> your corrections applied. We've got the tools to diff those changes\n> ourselves; no fancy software is required.\n\n\nActually, this is unnecessary since github allows editing of files directly\non the site and the it will submit as a pull request. You can even update\nby visiting your fork (it creates this automatically and a topic branch)\nand make more edits and it will add to your PR. There is basically no\nbarrier for non techy people to contribute.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/3e12d3e3/attachment.html>"
            },
            {
                "author": "Tom Geller",
                "date": "2014-03-02T23:02:14",
                "message_text_only": "Peter Todd <pete at petertodd.org> wrote:\n>> I proof-read rc1 and simply submitted my changes via pull-req:\n>> \n>>     https://github.com/bitcoin/bitcoin/pull/3642\n\nDrak responded:\n> Actually, this is unnecessary since github allows editing of files directly on the site and the it will submit as a pull request. You can even update by visiting your fork (it creates this automatically and a topic branch) and make more edits and it will add to your PR. There is basically no barrier for non techy people to contribute.\n\nOoo, I like this. I *can* use git, but would love to be able to avoid it -- as would most non-technical contributors.\n\nAnyway, this particular solution doesn't appear to be possible in this case, as the file isn't at https://github.com/bitcoin/bitcoin/tree/0.9.0/doc/release-notes , and I don't believe I could copy it to the repository without going the whole git route. Suggestions welcome, here or privately.\n\nPeter writes:\n> MtGox does host the bitcoin wiki, so yes, the funds probably do go to a wallet held by MtGox in some fashion.\n\nThe foolishness of sending a payment to a Mt. Gox-held wallet -- which is required to edit the wiki -- strikes me as a pressing issue. If I understand it correctly, this is a hard blocker that'll stop *all* new contributors. Further, I registered for the wiki and never got my confirmation email. Methinks the whole thing is broken. :(\n\nAgain, please to redirect me if this is inappropriate for this list. (I'm new here.) Cheers,\n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-03-03T06:04:44",
                "message_text_only": "On Sunday, March 02, 2014 11:02:14 PM Tom Geller wrote:\n> Peter writes:\n> > MtGox does host the bitcoin wiki, so yes, the funds probably do go to a\n> > wallet held by MtGox in some fashion.\n> \n> The foolishness of sending a payment to a Mt. Gox-held wallet -- which is\n> required to edit the wiki -- strikes me as a pressing issue. If I\n> understand it correctly, this is a hard blocker that'll stop *all* new\n> contributors. Further, I registered for the wiki and never got my\n> confirmation email. Methinks the whole thing is broken. :(\n\nWe've been working on moving the wiki to new hosting, but it isn't a very high \npriority (at least for MtGox). PM SomeoneWeird on IRC, as he is currently \nhandling manually approving new accounts for editing.\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-03T07:56:55",
                "message_text_only": "On Mon, Mar 3, 2014 at 12:02 AM, Tom Geller <tom at tomgeller.com> wrote:\n\n> Anyway, this particular solution doesn't appear to be possible in this\n> case, as the file isn't at\n> https://github.com/bitcoin/bitcoin/tree/0.9.0/doc/release-notes , and I\n> don't believe I could copy it to the repository without going the whole git\n> route. Suggestions welcome, here or privately.\n>\n\nIt's not entirely trivial as you have to make sure you're editing on the\n0.9 branch not the master branch, but can be done like this:\n\n- Go to https://github.com/bitcoin/bitcoin/blob/0.9.0/doc/release-notes.md\n- Click \"edit\"\n- Make your changes and add a commit message describing the change, usually\nsomething like 'doc: Add missing foowidget to release notes'.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/e36aef3a/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-03T09:59:08",
                "message_text_only": "Hi, you may want to check this out:\n\nhttp://www.reddit.com/r/Bitcoin/comments/1rh2h0/developers_core_developers_contributors/\n\nCheers,\n\n-Odinn\n http://abis.io\n\n> Hey, folks. Sorry if this is documented somewhere -- if so, just point me\n> at it. I couldn't find it, though.\n>\n> I'm a (non-developer) writer with experience in open-source communities,\n> and I'd like to contribute with writing/editing/marketing. What's the\n> procedure? Is there someone in charge of that area?\n>\n> Two examples:\n>\n> 1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear\n> how to send the changes. (There are many possibilities, some better than\n> others. Git? Google Docs with revisioning? Microsoft Word with Track\n> Changes? The Bitcoin wiki?)\n>\n> 2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that \"the\n> wiki receiving wallet (for the wiki itself) is also MtGox\". Umm, I rather\n> doubt that. :-P But I'm not sure what the current info is, or whom to\n> alert.\n>\n> Off-list replies welcome. Thanks,\n>\n> ---\n>           Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n>            Writer/Presenter * http://www.tomgeller.com\n>          articles, marketing, videos, user guides, books\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Flow-based real-time traffic analytics software. Cisco certified tool.\n> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer\n> Customize your own dashboards, set traffic alerts and generate reports.\n> Network behavioral analysis & security monitoring. All-in-one tool.\n> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tom Geller",
                "date": "2014-03-03T18:46:26",
                "message_text_only": "Thanks to everyone with advice re: editing text on github, and Mt. Gox' control of the wiki. Regarding the latter, \"SerajewelKS\" and \"gmaxwell\" in IRC/bitcoin confirmed that fixes are underway, but didn't give specifics. I'll wait.\n\nRegarding text editing, special thanks to Wladimir for the simplest solution:\n\n> - Go to https://github.com/bitcoin/bitcoin/blob/0.9.0/doc/release-notes.md\n> - Click \"edit\"\n> - Make your changes and add a commit message describing the change, usually something like 'doc: Add missing foowidget to release notes'.\n\nI'll try to make time to go over the 0.9.0rc2 text soon. Cheers,\n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Tom Geller",
                "date": "2014-03-03T19:13:20",
                "message_text_only": "FYI, I made my edits to the release notes of 0.9.0rc2; the pull request is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome corrections as needed.\n\nFirst contribution! :)\n\nCheers,\n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Tom Geller",
                "date": "2014-03-03T19:40:33",
                "message_text_only": "On Mar 3, 2014, at 2:13 PM, Tom Geller wrote:\n\n> FYI, I made my edits to the release notes of 0.9.0rc2; the pull request is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome corrections as needed.\n\nIt failed testing. I assume I'll get emails as others add comments; please contact me privately if it doesn't, and you're willing to help this n00b. Thanks, \n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-03T21:18:43",
                "message_text_only": "Hey Tom,\n\nThanks for getting involved! It's great to see someone who would like to\nfocus on docs.\n\nOne project I've been thinking about recently is a \"Bitcoin Developer\nNetwork\" subsection of our website. Right now bitcoin.org is entirely\nconsumer focused. And as you noted, the wiki is undergoing some kind of\nheart attack - it's not an ideal medium for professional docs anyway.\n\nSo it's too hard to learn how to work with Bitcoin as a developer, and we\ncould really benefit from professionally curated web content. We have a\ngreat web dev in the form of Saivann, who recently got some sponsorship\nfrom the Foundation to spend time on the website, so I'm hoping that if we\nfind people to produce the content then he can with the visual design and\nwe could create something really special.\n\nIf you're interested in this let me know.\n\n\nOn Mon, Mar 3, 2014 at 8:40 PM, Tom Geller <tom at tomgeller.com> wrote:\n\n> On Mar 3, 2014, at 2:13 PM, Tom Geller wrote:\n>\n> > FYI, I made my edits to the release notes of 0.9.0rc2; the pull request\n> is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome\n> corrections as needed.\n>\n> It failed testing. I assume I'll get emails as others add comments; please\n> contact me privately if it doesn't, and you're willing to help this n00b.\n> Thanks,\n>\n> ---\n>           Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n>            Writer/Presenter * http://www.tomgeller.com\n>          articles, marketing, videos, user guides, books\n>\n>\n>\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/31939639/attachment.html>"
            },
            {
                "author": "Tom Geller",
                "date": "2014-03-04T19:10:08",
                "message_text_only": "I'm taking this private. Thanks again to all for your help getting me involved!\n\n---\n         Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n          Writer/Presenter * http://www.tomgeller.com\n        articles, marketing, videos, user guides, books\n\n\n\n\n\nOn Mar 3, 2014, at 4:18 PM, Mike Hearn wrote:\n\n> Hey Tom,\n> \n> Thanks for getting involved! It's great to see someone who would like to focus on docs.\n> \n> One project I've been thinking about recently is a \"Bitcoin Developer Network\" subsection of our website. Right now bitcoin.org is entirely consumer focused. And as you noted, the wiki is undergoing some kind of heart attack - it's not an ideal medium for professional docs anyway.\n> \n> So it's too hard to learn how to work with Bitcoin as a developer, and we could really benefit from professionally curated web content. We have a great web dev in the form of Saivann, who recently got some sponsorship from the Foundation to spend time on the website, so I'm hoping that if we find people to produce the content then he can with the visual design and we could create something really special.\n> \n> If you're interested in this let me know.\n\n[snip remainder of thread]"
            }
        ],
        "thread_summary": {
            "title": "Procedure for non-tech contributions",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Wladimir",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "Peter Todd",
                "Tom Geller",
                "Drak"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 14111
        }
    },
    {
        "title": "[Bitcoin-development] New to this list",
        "thread_messages": [
            {
                "author": "Kevin",
                "date": "2014-03-03T03:34:27",
                "message_text_only": "Hello.  I am a developer and I wish to contribute to bitcoin.  Where is \nthe best place to start?\n\n-- \nKevin"
            },
            {
                "author": "William Yager",
                "date": "2014-03-03T03:45:10",
                "message_text_only": "On Mar 2, 2014, at 21:34, Kevin <kevinsisco61784 at gmail.com> wrote:\n\n> Hello.  I am a developer and I wish to contribute to bitcoin.  Where is \n> the best place to start?\n> \n> -- \n> Kevin\n\n\n\nReading and learning the reference client\u2019s source code, or doing the same for any number of non-reference-client Bitcoin projects.\n\nWill\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/997c3241/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-03-03T06:09:01",
                "message_text_only": "On Monday, March 03, 2014 3:34:27 AM Kevin wrote:\n> Hello.  I am a developer and I wish to contribute to bitcoin.  Where is\n> the best place to start?\n\nUnit tests. This will be valuable to the projects and also help you learn how \nthings work."
            }
        ],
        "thread_summary": {
            "title": "New to this list",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Kevin",
                "William Yager"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 984
        }
    },
    {
        "title": "[Bitcoin-development] Is this a safe thing to be doing with ECC addition? (Oracle protocol)",
        "thread_messages": [
            {
                "author": "Edmund Edgar",
                "date": "2014-03-04T02:59:48",
                "message_text_only": "Some people may have seen my service Reality Keys, which can perform a role\na bit like an External State Oracle as described previously by Mike Hearn\nand others. (I like to think of it as a Certificate Authority for\npropositions, doing for facts what Verisign do for identities.) You\nregister a possible outcome with us, we publish a public key for \"yes\" and\nanother for \"no\", and once the outcome happens or fails to happen, we\npublish the appropriate private key.\n\nA few people have been asking for advice on the best way to use our keys to\nmake m-of-n contracts, where each party locks up their stake in a\ntransaction, then the winner gets their private key from Reality Keys and\nuses it to release the funds. Peter Todd suggested what seems like a very\nnice way to do this without needing non-standard transactions or refund\ntransactions. I've had a go at implementing it and it seems to work, but I\ndon't know enough about this to distinguish the ECC bit of it from magic,\nso I'm wondering if people who do understand it could comment on whether\nit's a safe thing to be doing.\n\nWhat I'm trying to do here is to combine the public key of each party with\nthe public key of the outcome they're representing, eg I make a public key\nwith:\n <alice-pub> + <reality-key-yes-pub>\n...and another with:\n <bob-pub> + <reality-key-no-pub>\n\nThat goes into a 1/2 P2SH address (in the simplest possible case), which is\nspendable by one of Alice or Bob after the outcome occurs with either:\n <alice-priv> + <reality-key-yes-priv>\n...or\n <bob-priv> + <reality-key-no-priv>\n\nI'm making the transaction with add_pubkeys, then spending it with\nadd_privkeys, both from:\nhttps://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173\n\nWhat's worrying my superstitious mind is that knowing <reality-key-no-pub>\nbefore he has to produce <bob-pub>, I'm wondering if there's something Bob\ncould do with <bob-pub> to intentionally weaken the resulting (<bob-pub> +\n<reality-key-no-pub>) so that he could sign a transaction with it without\nneeding to know <reality-key-no-priv>.\n\nMy example script (and specifically the bit that's scaring me) is here:\nhttps://github.com/edmundedgar/realitykeys-examples/blob/master/realitykeysdemo.py#L247\n\nPS. I hope I'm not too far off-topic. Peter Todd suggested it might be\nworth talking about here as it potentially has implications for other\nprotocols. If people prefer to respond at bitcointalk instead, we've been\ndiscussing it here:\nhttps://bitcointalk.org/index.php?topic=260898.60\n\n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\ned at realitykeys.com\nhttps://www.realitykeys.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140304/868b6814/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-04T05:07:45",
                "message_text_only": "Nothing is safe.\n\nTake risks.  Engage one trouble at a time.\n\nPerform unexpected actions.\n\nObserve the results.\n\nRinse and repeat.\n\nIgnore the lions.  They too shall pass.\n\n\"Do not sleep under a roof. Carry no money or food. Go alone to places\nfrightening to the common brand of men. Become a criminal of purpose. Be\nput in jail, and extricate yourself by your own wisdom.\"\n\n-- Miyamoto Musashi (Niten Ichi-ry\u016b)\n\n\n\n> Some people may have seen my service Reality Keys, which can perform a\n> role\n> a bit like an External State Oracle as described previously by Mike Hearn\n> and others. (I like to think of it as a Certificate Authority for\n> propositions, doing for facts what Verisign do for identities.) You\n> register a possible outcome with us, we publish a public key for \"yes\" and\n> another for \"no\", and once the outcome happens or fails to happen, we\n> publish the appropriate private key.\n>\n> A few people have been asking for advice on the best way to use our keys\n> to\n> make m-of-n contracts, where each party locks up their stake in a\n> transaction, then the winner gets their private key from Reality Keys and\n> uses it to release the funds. Peter Todd suggested what seems like a very\n> nice way to do this without needing non-standard transactions or refund\n> transactions. I've had a go at implementing it and it seems to work, but I\n> don't know enough about this to distinguish the ECC bit of it from magic,\n> so I'm wondering if people who do understand it could comment on whether\n> it's a safe thing to be doing.\n>\n> What I'm trying to do here is to combine the public key of each party with\n> the public key of the outcome they're representing, eg I make a public key\n> with:\n>  <alice-pub> + <reality-key-yes-pub>\n> ...and another with:\n>  <bob-pub> + <reality-key-no-pub>\n>\n> That goes into a 1/2 P2SH address (in the simplest possible case), which\n> is\n> spendable by one of Alice or Bob after the outcome occurs with either:\n>  <alice-priv> + <reality-key-yes-priv>\n> ...or\n>  <bob-priv> + <reality-key-no-priv>\n>\n> I'm making the transaction with add_pubkeys, then spending it with\n> add_privkeys, both from:\n> https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173\n>\n> What's worrying my superstitious mind is that knowing <reality-key-no-pub>\n> before he has to produce <bob-pub>, I'm wondering if there's something Bob\n> could do with <bob-pub> to intentionally weaken the resulting (<bob-pub> +\n> <reality-key-no-pub>) so that he could sign a transaction with it without\n> needing to know <reality-key-no-priv>.\n>\n> My example script (and specifically the bit that's scaring me) is here:\n> https://github.com/edmundedgar/realitykeys-examples/blob/master/realitykeysdemo.py#L247\n>\n> PS. I hope I'm not too far off-topic. Peter Todd suggested it might be\n> worth talking about here as it potentially has implications for other\n> protocols. If people prefer to respond at bitcointalk instead, we've been\n> discussing it here:\n> https://bitcointalk.org/index.php?topic=260898.60\n>\n> --\n> Edmund Edgar\n> Founder, Social Minds Inc (KK)\n> Twitter: @edmundedgar\n> Linked In: edmundedgar\n> Skype: edmundedgar\n> http://www.socialminds.jp\n>\n> Reality Keys\n> @realitykeys\n> ed at realitykeys.com\n> https://www.realitykeys.com\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Edmund Edgar",
                "date": "2014-03-08T06:55:18",
                "message_text_only": "On 4 March 2014 14:07, Odinn Cyberguerrilla <odinn.cyberguerrilla at riseup.net\n> wrote:\n\n> Nothing is safe.\n>\n\nThis is true. To rephrase, imagine I gave you an ECC public key <ed_pub>,\nyou gave me back a public key <odinn_pub> of your own devising, then I paid\nsome money to the address resulting from add_pubkeys(<ed_pub>,<odinn_pub>)\n[1]. Can anyone either:\n\na) Think of a way that Odinn could make an <odinn_pub> such that they could\nspend the resulting money without having <ed_priv>.\nb) Opine, somewhat knowledgeably, that this probably wouldn't be an easy\nthing to do, and they wouldn't be alarmed to see people running software\nthat did this kind of thing.\n\n[1]\nhttps://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173\n\n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\ned at realitykeys.com\nhttps://www.realitykeys.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/5bc2b0c7/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-08T08:10:40",
                "message_text_only": "On 03/08/2014 01:55 AM, Edmund Edgar wrote:\n> On 4 March 2014 14:07, Odinn Cyberguerrilla\n> <odinn.cyberguerrilla at riseup.net\n> <mailto:odinn.cyberguerrilla at riseup.net>> wrote:\n>\n>     Nothing is safe.\n>\n>\n> This is true. To rephrase, imagine I gave you an ECC public key\n> <ed_pub>, you gave me back a public key <odinn_pub> of your own\n> devising, then I paid some money to the address resulting from\n> add_pubkeys(<ed_pub>,<odinn_pub>) [1]. Can anyone either:\n>\n> a) Think of a way that Odinn could make an <odinn_pub> such that they\n> could spend the resulting money without having <ed_priv>.\n> b) Opine, somewhat knowledgeably, that this probably wouldn't be an\n> easy thing to do, and they wouldn't be alarmed to see people running\n> software that did this kind of thing.\n>\n> [1] https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173\n\nConsider that I see your public key <a_pub> before I create and send you\nmy public key <b_pub>.\n\nI create a new keypair, <c_pub> with <c_priv> which I know (it can be\nany arbitrary key pair).  But I don't give you <c_pub>, I give you \n<b_pub> = <c_pub> minus <a_pub> (which I can do because I've seen\n<a_pub> before doing this). \n\nSure, I don't know the private key for <b_pub>, but it doesn't matter...\nbecause what\n\n<b_pub> + <a_pub> = <c_pub> (mine)\n\nYou have no way to detect this condition, because you don't know what\nc_pub/c_priv I created, so you can only detect this after it's too late\n(after I abuse the private key)\n\n-Alan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/7cfbe3a0/attachment.html>"
            },
            {
                "author": "Edmund Edgar",
                "date": "2014-03-08T08:51:37",
                "message_text_only": "On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com> wrote:\n\n\n> I create a new keypair, <c_pub> with <c_priv> which I know (it can be any\n> arbitrary key pair).  But I don't give you <c_pub>, I give you  <b_pub> =\n> <c_pub> minus <a_pub> (which I can do because I've seen <a_pub> before\n> doing this).\n>\n> Sure, I don't know the private key for <b_pub>, but it doesn't matter...\n> because what\n>\n> <b_pub> + <a_pub> = <c_pub> (mine)\n>\n> You have no way to detect this condition, because you don't know what\n> c_pub/c_priv I created, so you can only detect this after it's too late\n> (after I abuse the private key)\n>\n\nThanks Alan and Forrest, that makes sense. So to salvage the situation in\nthe original case, we have to make sure the parties exchange their public\nkeys first, before they're allowed to see the public keys they'll be\ncombining them with.\n\n-- \n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\ned at realitykeys.com\nhttps://www.realitykeys.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/ef8e3571/attachment.html>"
            },
            {
                "author": "Joel Kaartinen",
                "date": "2014-03-08T10:37:30",
                "message_text_only": "If both parties insist on seeing a hash of the other party's public key\nbefore they'll show their own public key, they can be sure that the\npublic key is not chosen based on the public key they themselves presented.\n\nAlthough, I have to wonder, why not just use multisig?\n\n- Joel\n\nOn 08.03.2014 10:51, Edmund Edgar wrote:\n> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com\n> <mailto:etotheipi at gmail.com>> wrote:\n>  \n>\n>     I create a new keypair, <c_pub> with <c_priv> which I know (it can\n>     be any arbitrary key pair).  But I don't give you <c_pub>, I give\n>     you  <b_pub> = <c_pub> minus <a_pub> (which I can do because I've\n>     seen <a_pub> before doing this). \n>\n>     Sure, I don't know the private key for <b_pub>, but it doesn't\n>     matter... because what\n>\n>     <b_pub> + <a_pub> = <c_pub> (mine)\n>\n>     You have no way to detect this condition, because you don't know\n>     what c_pub/c_priv I created, so you can only detect this after\n>     it's too late (after I abuse the private key)\n>\n>\n> Thanks Alan and Forrest, that makes sense. So to salvage the situation\n> in the original case, we have to make sure the parties exchange their\n> public keys first, before they're allowed to see the public keys\n> they'll be combining them with. \n>\n> -- \n> -- \n> Edmund Edgar\n> Founder, Social Minds Inc (KK)\n> Twitter: @edmundedgar\n> Linked In: edmundedgar\n> Skype: edmundedgar\n> http://www.socialminds.jp\n>\n> Reality Keys\n> @realitykeys\n> ed at realitykeys.com <mailto:ed at realitykeys.com>\n> https://www.realitykeys.com\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/a1e71327/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-03-08T17:41:01",
                "message_text_only": "Also the other limitation for ECDSA is that there is no known protocol to\ncreate a signture with a+b (where keys P=aG, Q=bG, R=P+Q=(a+b)G). without\neither a sending its private key to b or viceversa (or both to a third\nparty).\n\nWith Schnorr sigs you can do it, but the k^-1 term in ECDSA makes a (secure)\ndirect multiparty signature quite difficult.\n\nps probably only 1 party needs to hash their key\n\nP=aG      \n            H(P) ->\n\n\t\t<- Q=bG\n\n\t   P ->\n\nAdam\n\nOn Sat, Mar 08, 2014 at 12:37:30PM +0200, Joel Kaartinen wrote:\n>   If both parties insist on seeing a hash of the other party's public key\n>   before they'll show their own public key, they can be sure that the\n>   public key is not chosen based on the public key they themselves\n>   presented."
            },
            {
                "author": "Natanael",
                "date": "2014-03-08T18:15:47",
                "message_text_only": "You can always use a secure multiparty computation algorithm to do it.\n\nhttps://en.wikipedia.org/wiki/Secure_multi-party_computation\n\nBut those aren't the fastest algorithms in the world, and usually both\nparticipants needs to be online at the same time. I guess most people would\nprefer a two-step algorithm that can be performed asynchronously.\n\n- Sent from my phone\nDen 8 mar 2014 18:44 skrev \"Adam Back\" <adam at cypherspace.org>:\n\n> Also the other limitation for ECDSA is that there is no known protocol to\n> create a signture with a+b (where keys P=aG, Q=bG, R=P+Q=(a+b)G). without\n> either a sending its private key to b or viceversa (or both to a third\n> party).\n>\n> With Schnorr sigs you can do it, but the k^-1 term in ECDSA makes a\n> (secure)\n> direct multiparty signature quite difficult.\n>\n> ps probably only 1 party needs to hash their key\n>\n> P=aG\n>             H(P) ->\n>\n>                 <- Q=bG\n>\n>            P ->\n>\n> Adam\n>\n> On Sat, Mar 08, 2014 at 12:37:30PM +0200, Joel Kaartinen wrote:\n> >   If both parties insist on seeing a hash of the other party's public key\n> >   before they'll show their own public key, they can be sure that the\n> >   public key is not chosen based on the public key they themselves\n> >   presented.\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/7bff5314/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-08T23:13:10",
                "message_text_only": "Note that one of the reasons why this is insecure is because EC point\naddition is invertible.  EC-scalar multiplication is not, thus why EC\nDiffie-Hellman is secure even when this asymmetry exists.\n\nA good cryptosystem doesn't have strange restrictions, like \"your public\nkey can only be public sometimes, but needs to protected like your\nprivate key other times.\"  If you have to worry about things like that,\nyou're doing it wrong :)\n\n-Alan\n\n\nOn 03/08/2014 05:37 AM, Joel Kaartinen wrote:\n> If both parties insist on seeing a hash of the other party's public\n> key before they'll show their own public key, they can be sure that\n> the public key is not chosen based on the public key they themselves\n> presented.\n>\n> Although, I have to wonder, why not just use multisig?\n>\n> - Joel\n>\n> On 08.03.2014 10:51, Edmund Edgar wrote:\n>> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com\n>> <mailto:etotheipi at gmail.com>> wrote:\n>>  \n>>\n>>     I create a new keypair, <c_pub> with <c_priv> which I know (it\n>>     can be any arbitrary key pair).  But I don't give you <c_pub>, I\n>>     give you  <b_pub> = <c_pub> minus <a_pub> (which I can do because\n>>     I've seen <a_pub> before doing this). \n>>\n>>     Sure, I don't know the private key for <b_pub>, but it doesn't\n>>     matter... because what\n>>\n>>     <b_pub> + <a_pub> = <c_pub> (mine)\n>>\n>>     You have no way to detect this condition, because you don't know\n>>     what c_pub/c_priv I created, so you can only detect this after\n>>     it's too late (after I abuse the private key)\n>>\n>>\n>> Thanks Alan and Forrest, that makes sense. So to salvage the\n>> situation in the original case, we have to make sure the parties\n>> exchange their public keys first, before they're allowed to see the\n>> public keys they'll be combining them with. \n>>\n>> -- \n>> -- \n>> Edmund Edgar\n>> Founder, Social Minds Inc (KK)\n>> Twitter: @edmundedgar\n>> Linked In: edmundedgar\n>> Skype: edmundedgar\n>> http://www.socialminds.jp\n>>\n>> Reality Keys\n>> @realitykeys\n>> ed at realitykeys.com <mailto:ed at realitykeys.com>\n>> https://www.realitykeys.com\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n>> With Perforce, you get hassle-free workflows. Merge that actually works. \n>> Faster operations. Version large binaries.  Built-in WAN optimization and the\n>> freedom to use Git, Perforce or both. Make the move to Perforce.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/eb6e7e08/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-08T20:30:19",
                "message_text_only": "Note that one of the reasons why this is insecure is because EC point\naddition is invertible.  EC-scalar multiplication is not, thus why EC\nDiffie-Hellman is secure even when this timing asymmetry exists.\n\nA good cryptosystem doesn't have strange restrictions, like \"your public\nkey can only be public sometimes, but needs to protected like your\nprivate key other times.\"  If you have to worry about things like that,\nyou're doing it wrong :)  And why we always recommend sticking to\nwell-known, well-studied operations.\n\n-Alan\n\n\nOn 03/08/2014 03:51 AM, Edmund Edgar wrote:\n> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com\n> <mailto:etotheipi at gmail.com>> wrote:\n>  \n>\n>     I create a new keypair, <c_pub> with <c_priv> which I know (it can\n>     be any arbitrary key pair).  But I don't give you <c_pub>, I give\n>     you  <b_pub> = <c_pub> minus <a_pub> (which I can do because I've\n>     seen <a_pub> before doing this). \n>\n>     Sure, I don't know the private key for <b_pub>, but it doesn't\n>     matter... because what\n>\n>     <b_pub> + <a_pub> = <c_pub> (mine)\n>\n>     You have no way to detect this condition, because you don't know\n>     what c_pub/c_priv I created, so you can only detect this after\n>     it's too late (after I abuse the private key)\n>\n>\n> Thanks Alan and Forrest, that makes sense. So to salvage the situation\n> in the original case, we have to make sure the parties exchange their\n> public keys first, before they're allowed to see the public keys\n> they'll be combining them with. \n>\n> -- \n> -- \n> Edmund Edgar\n> Founder, Social Minds Inc (KK)\n> Twitter: @edmundedgar\n> Linked In: edmundedgar\n> Skype: edmundedgar\n> http://www.socialminds.jp\n>\n> Reality Keys\n> @realitykeys\n> ed at realitykeys.com <mailto:ed at realitykeys.com>\n> https://www.realitykeys.com\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/5fcca4b8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Is this a safe thing to be doing with ECC addition? (Oracle protocol)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Natanael",
                "Odinn Cyberguerrilla",
                "Adam Back",
                "Alan Reiner",
                "Edmund Edgar",
                "Joel Kaartinen"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 22531
        }
    },
    {
        "title": "[Bitcoin-development] BIP70 proposed changes",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-05T10:18:41",
                "message_text_only": ">\n> On an unrelated note, X.509 is a terrible standard that should be\n> abandoned as quickly as possible. BitPay is working on a new standard\n> based on bitcoin-like addresses for authentication. It would be great if\n> we could work with the community to establish a complete, decentralized\n> authentication protocol. The sooner we can evolve beyond X.509 the better.\n\n\nBecause this is such a common sentiment, I wrote a couple of articles on\nthe matter.\n\nThe first is about why BIP 70 uses the SSL PKI and an examination of the\nmost commonly proposed alternative ideas:\n\n   https://medium.com/p/b64cf5912aa7\n\n... including the web of trust, using bitcoin addresses/the block chain,\nallowing multiple certs, trust-on-first-use and (for SSL only)\nperspectives/convergence.\n\nThe second is a summary of some of the most famous crypto-usability\nresearch papers published in the past 10-15 years. They cover SSL and PGP.\nIf you're interested in designing alternatives, reading these papers would\nbe a good place to start:\n\n    https://medium.com/p/d04ea6a2c771\n\nThere's a book from O'Reilly called Security & Usability that contains 34\npapers and essays. It's very good:\n\n   http://shop.oreilly.com/product/9780596008277.do\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/544be4ef/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70 proposed changes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1401
        }
    },
    {
        "title": "[Bitcoin-development] New side channel attack that can recover Bitcoin keys",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-05T12:49:22",
                "message_text_only": "A new practical technique has been published that can recover secp256k1\nprivate keys after observing OpenSSL calculate as little as 200 signatures:\n\nhttp://eprint.iacr.org/2014/161.pdf\n\nThis attack is based on the FLUSH+RELOAD technique published last year. It\nworks by observing L3 CPU cache timings and forcing cache line flushes\nusing the clflush opcode. As a result, it is applicable to any x86\nenvironment where an attacker may be able to run on the same hardware i.e.\nvirtualised hosting environments where keys are being reused.\n\nI am not currently aware of any efforts to make OpenSSL's secp256k1\nimplementation completely side channel free in all aspects. Also,\nunfortunately many people have reimplemented ECDSA themselves and even if\nOpenSSL gets fixed, the custom implementations probably won't.\n\nSo, IMHO this is a sign for hot wallet users to start walking (but not\nrunning) towards the exits of these shared cloud services:  it doesn't feel\nsafe to sign transactions on these platforms, so hot wallets should be\nmanaged by dedicated hardware. Of course other parts of the service, like\nthe website, are less sensitive and can still run in the cloud. I doubt the\nresearchers will release their code to do the side channel attack and it's\nrather complex to reimplement, so this gives some time for mitigation.\nUnfortunately the huge sums being held in some \"bitbank\" style hot wallets\nmean that attackers are well motivated to pull off even quite complex\nattacks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/174ed1d2/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-03-05T12:56:05",
                "message_text_only": "On Wed, Mar 5, 2014 at 1:49 PM, Mike Hearn <mike at plan99.net> wrote:\n> I am not currently aware of any efforts to make OpenSSL's secp256k1\n> implementation completely side channel free in all aspects. Also,\n> unfortunately many people have reimplemented ECDSA themselves and even if\n> OpenSSL gets fixed, the custom implementations probably won't.\n\nAs far as I know, judging from the implementation, there is hardly any\neffort to try to prevent timing attacks.\n\n-- \nPieter"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-05T13:18:31",
                "message_text_only": "> On Mar 5, 2014, at 8:56 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> \n>> On Wed, Mar 5, 2014 at 1:49 PM, Mike Hearn <mike at plan99.net> wrote:\n>> I am not currently aware of any efforts to make OpenSSL's secp256k1\n>> implementation completely side channel free in all aspects. Also,\n>> unfortunately many people have reimplemented ECDSA themselves and even if\n>> OpenSSL gets fixed, the custom implementations probably won't.\n> \n> As far as I know, judging from the implementation, there is hardly any\n> effort to try to prevent timing attacks.\n> \n\nIs it safe to assume that this is also true for your secp256k1 implementation?\n\njp\n\n\n> -- \n> Pieter\n> \n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-03-05T14:04:41",
                "message_text_only": "On Wed, Mar 5, 2014 at 2:18 PM, Jean-Paul Kogelman\n<jeanpaulkogelman at me.com> wrote:\n>> As far as I know, judging from the implementation, there is hardly any\n>> effort to try to prevent timing attacks.\n>>\n>\n> Is it safe to assume that this is also true for your secp256k1 implementation?\n\nI've done some preliminary work on making it leak less, but it's by no\nmeans guaranteed to be constant time either (so better assume it is\nnot).\n\n-- \nPieter"
            },
            {
                "author": "Kevin",
                "date": "2014-03-05T16:21:52",
                "message_text_only": "On 3/5/2014 7:49 AM, Mike Hearn wrote:\n> A new practical technique has been published that can recover \n> secp256k1 private keys after observing OpenSSL calculate as little as \n> 200 signatures:\n>\n> http://eprint.iacr.org/2014/161.pdf\n>\n> This attack is based on the FLUSH+RELOAD technique published last \n> year. It works by observing L3 CPU cache timings and forcing cache \n> line flushes using the clflush opcode. As a result, it is applicable \n> to any x86 environment where an attacker may be able to run on the \n> same hardware i.e. virtualised hosting environments where keys are \n> being reused.\n>\n> I am not currently aware of any efforts to make OpenSSL's secp256k1 \n> implementation completely side channel free in all aspects. Also, \n> unfortunately many people have reimplemented ECDSA themselves and even \n> if OpenSSL gets fixed, the custom implementations probably won't.\n>\n> So, IMHO this is a sign for hot wallet users to start walking (but not \n> running) towards the exits of these shared cloud services:  it doesn't \n> feel safe to sign transactions on these platforms, so hot wallets \n> should be managed by dedicated hardware. Of course other parts of the \n> service, like the website, are less sensitive and can still run in the \n> cloud. I doubt the researchers will release their code to do the side \n> channel attack and it's rather complex to reimplement, so this gives \n> some time for mitigation. Unfortunately the huge sums being held in \n> some \"bitbank\" style hot wallets mean that attackers are well \n> motivated to pull off even quite complex attacks.\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nHow can we patch this issue?\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/64ceb7da/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-05T19:39:10",
                "message_text_only": "On Wed, Mar 05, 2014 at 11:21:52AM -0500, Kevin wrote:\n> On 3/5/2014 7:49 AM, Mike Hearn wrote:\n> >A new practical technique has been published that can recover\n> >secp256k1 private keys after observing OpenSSL calculate as little\n> >as 200 signatures:\n>\n> How can we patch this issue?\n\nIf you're following good practices you're not particularly vulneable to\nit, if at all, even if you make use of shared hosting. First of all you\nshouldn't be re-using addresses, which means you won't be passing that\n~200 sig threshold.\n\nMore important though is you shouldn't be using single factor Bitcoin\naddresses. Use n-of-m multisig instead and architect your system such\nthat that every transaction that happens in your service has to be\nauthorized by both the \"online\" server(s) that host your website as well\nas a second \"hardened\" server with an extremely limited interface\nbetween it and the online server. The hardened second factor *should*\nuse a separate codebase, ideally even a second language, to authenticate\nactions that withdraw funds or generate new addresses based on data\ngiven to it by the online server. In the best case your customers are\nPGP-signing requests so you can verify their intent independently and\ncryptographically on both servers. Mircea Popescu's MPEx exchange is an\nexample of this model, although I don't think they're doing any multisig\nstuff. Failing that you can at least use the second server to do things\nlike limit losses by flagging higher-than-expected withdrawl volumes and\nunusual events.\n\nSince this second-factor server only deals with business logic - not the\nwebsite - you can certainly find a secure hosting arrangement for it\nwith physical control. I recommend you stick the machine in your\napartment and use tor + hidden services to connect to it from your VM\ninstances.\n\nNote too that even if all you're doing is accepting Bitcoins from\ncustomers, perhaps in exchange for goods, all of the above *still*\napplies modulo the fact that the payment protocol is very incomplete.\n\n\nWith P2SH (finally!) supported in all the major Bitcoin wallets there\nsimply is no excuse not to have such an architecture other than lazyness\nand transaction fees; if you fall into the latter category you're\nbusiness may very well be wiped out anyway by increased fees.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/f42ea4b1/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-05T19:51:25",
                "message_text_only": "On Wed, Mar 5, 2014 at 11:39 AM, Peter Todd <pete at petertodd.org> wrote:\n> If you're following good practices you're not particularly vulneable to\n> it, if at all, even if you make use of shared hosting. First of all you\n> shouldn't be re-using addresses, which means you won't be passing that\n> ~200 sig threshold.\n>\n> More important though is you shouldn't be using single factor Bitcoin\n> addresses. Use n-of-m multisig instead and architect your system such\n\nBoth of these things have long been promoted as virtuous in part\nbecause they increase robustness against this sort of thing.\n\nBut while I don't disagree with these things the reality is that many\npeople do not follow either of these piece of advice and following\nthem requires behavioral changes that will not be adopted quickly...\nso I don't think that advice is especially useful.\n\nAnd even if it were\u2014, good security involves defense in depth, so\nadding on top of them things like side-channel resistant signing is\nimportant.\n\nI haven't had a chance to sit down and think through it completely but\nI believe oleganza's recent blind signature scheme for ECDSA may be\nhelpful (http://oleganza.com/blind-ecdsa-draft-v2.pdf):\n\nThe idea is that instead of (or in addition to\u2014 belt and suspenders)\nmaking the signing constant time, you use the blinding scheme to first\nlocally blind the private key and point being signed, then sign, then\nunblind.  This way even if you are reusing a key every signing\noperation is handling different private data... and the only point\nwhere unblinded private data is handled is a simple scalar addition."
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-05T20:32:22",
                "message_text_only": "On Wed, Mar 05, 2014 at 11:51:25AM -0800, Gregory Maxwell wrote:\n> On Wed, Mar 5, 2014 at 11:39 AM, Peter Todd <pete at petertodd.org> wrote:\n> > If you're following good practices you're not particularly vulneable to\n> > it, if at all, even if you make use of shared hosting. First of all you\n> > shouldn't be re-using addresses, which means you won't be passing that\n> > ~200 sig threshold.\n> >\n> > More important though is you shouldn't be using single factor Bitcoin\n> > addresses. Use n-of-m multisig instead and architect your system such\n> \n> Both of these things have long been promoted as virtuous in part\n> because they increase robustness against this sort of thing.\n> \n> But while I don't disagree with these things the reality is that many\n> people do not follow either of these piece of advice and following\n> them requires behavioral changes that will not be adopted quickly...\n> so I don't think that advice is especially useful.\n> \n> And even if it were\u2014, good security involves defense in depth, so\n> adding on top of them things like side-channel resistant signing is\n> important.\n> \n> I haven't had a chance to sit down and think through it completely but\n> I believe oleganza's recent blind signature scheme for ECDSA may be\n> helpful (http://oleganza.com/blind-ecdsa-draft-v2.pdf):\n> \n> The idea is that instead of (or in addition to\u2014 belt and suspenders)\n> making the signing constant time, you use the blinding scheme to first\n> locally blind the private key and point being signed, then sign, then\n> unblind.  This way even if you are reusing a key every signing\n> operation is handling different private data... and the only point\n> where unblinded private data is handled is a simple scalar addition.\n\nThat's nice, but I wrote my advice to show people how even if they don't\nknow any crypto beyond what the \"black boxes\" do - the absolute minimum\nyou need to know to write any Bitcoin software - you can still defend\nyourself against that attack and many others.\n\nPoint is you can architect systems that remain secure even when parts of\nthem fail, and you don't need any special cryptographic background to do\nso - any competent programmer can.\n\nMeanwhile, if you're not willing to take those simple steps, the Bitcoin\ncommunity damn well should look down on your amateur efforts, e.g.\nCoinbase and EasyWallet.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/ab65b44f/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-05T20:54:04",
                "message_text_only": "On Wed, Mar 5, 2014 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:\n> That's nice, but I wrote my advice to show people how even if they don't\n> know any crypto beyond what the \"black boxes\" do - the absolute minimum\n> you need to know to write any Bitcoin software - you can still defend\n> yourself against that attack and many others.\n\nBut it's still incomplete.\n\nSay you have an address\u2014 used only once!\u2014 with a txout with a lot of value.\n\nSomeone starts paying you small amounts to that address over and over\nagain. You haven't asked them to, they're just doing it.\n\nDo you ignore the funds?\u2014 maybe tell some customer that was ignorantly\npaying you over and over again to a single address \"sorry, those are\nmy rules: I only acknowledge the first payment, those funds are\nlost!\".\n\nNo, of course not.  You spend the darn coins and if you're on a shared\nhost perhaps you disclose a private key.\n\nThe probability of an attack actually going on is low enough compared\nto the cost of spending the coins in that case that even someone with\ngood knoweldge of the risks will choose to do so.\n\nSo absolutely, not reusing addresses massively increases your safety\nand limits losses when there is theft. But it isn't enough alone. (Nor\nis smarter signing, considering complex software like this has bugs\nand its hard to be confident that something is side channel free\u2014 esp\nwhen you allow attacker interference)."
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-12T09:44:24",
                "message_text_only": "On Wed, Mar 05, 2014 at 12:54:04PM -0800, Gregory Maxwell wrote:\n> On Wed, Mar 5, 2014 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:\n> > That's nice, but I wrote my advice to show people how even if they don't\n> > know any crypto beyond what the \"black boxes\" do - the absolute minimum\n> > you need to know to write any Bitcoin software - you can still defend\n> > yourself against that attack and many others.\n> \n> But it's still incomplete.\n> \n> Say you have an address\u2014 used only once!\u2014 with a txout with a lot of value.\n> \n> Someone starts paying you small amounts to that address over and over\n> again. You haven't asked them to, they're just doing it.\n> \n> Do you ignore the funds?\u2014 maybe tell some customer that was ignorantly\n> paying you over and over again to a single address \"sorry, those are\n> my rules: I only acknowledge the first payment, those funds are\n> lost!\".\n> \n> No, of course not.  You spend the darn coins and if you're on a shared\n> host perhaps you disclose a private key.\n> \n> The probability of an attack actually going on is low enough compared\n> to the cost of spending the coins in that case that even someone with\n> good knoweldge of the risks will choose to do so.\n> \n> So absolutely, not reusing addresses massively increases your safety\n> and limits losses when there is theft. But it isn't enough alone. (Nor\n> is smarter signing, considering complex software like this has bugs\n> and its hard to be confident that something is side channel free\u2014 esp\n> when you allow attacker interference).\n\nI think you're misunderstanding me: I'm assuming one of the n parties\nsigning transactions in my multi-factor authentication scheme is\nuncompromised - much easier to do when it's a low-bandwidth box sitting\nin a secure location.\n\nNot re-using keys is nice too of course, and while not perfect - your\nabove scenario - certainely helps limit losses.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000afcad9265e8b44bf1171a08165c09b329fab2893bf13ec69\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/5cbcef28/attachment.sig>"
            },
            {
                "author": "James Hartig",
                "date": "2014-03-05T22:17:54",
                "message_text_only": "On Wed, Mar 5, 2014 at 2:39 PM, Peter Todd <pete at petertodd.org> wrote:\n> More important though is you shouldn't be using single factor Bitcoin\n> addresses. Use n-of-m multisig instead and architect your system such\n> that that every transaction that happens in your service has to be\n> authorized by both the \"online\" server(s) that host your website as well\n> as a second \"hardened\" server with an extremely limited interface\n> between it and the online server.\n\nThis adds a very minor amount of security, if any, if someone manages to\nhack into your \"hot wallet\" server they can just initiate a non-multisig\ntransaction and still steal all your bitcoins in that wallet. You can't\ngive the argument that the RPC API is password protected because the\npassword is stored in plain-text in the config so all someone has to do is\nfirst grep for the file. There doesn't appear to be a way to force ALL\noutgoing transactions to be multisig and even if there was one, would you\nbe able to force one of the addresses to be the \"hardened\" server? That\nstill wouldn't prevent anyone from just stopping bitcoind, changing the\nconfig, then restarting it.\n\nUnless you're using your own custom wallet software there doesn't seem to\nbe any sufficient way to prevent someone from stealing all your money once\nthey have access to your server. Other software, like MySQL has access\ncontrols so I can prevent ALTERs, DROPs, DELETEs, etc for all \"live\"\naccounts limiting the scope of any attack if they manage to get into the\nserver. Maybe this is beyond the scope of bitcoind, not sure.\n\nThanks,\n--\nJames Hartig\nSoftware Engineer @ Grooveshark.com\nhttp://twitter.com/jameshartig\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cb5a68a9/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2014-03-05T22:26:31",
                "message_text_only": "Oh, I absolutely agree that this type of attack is NOT the weakest link in security. There are MANY far easier targets in bitcoind and typical use scenarios of it. If we want to dramatically improve the security of a typical bitcoin wallet, the FLUSH+RELOAD attack is probably not where our efforts would be best rewarded trying to prevent.\n\nHowever, this thread IS about this particular attack vector - and my suggestion IS specific to this thread.\n\n-Eric Lombrozo\n\n\nOn Mar 5, 2014, at 2:17 PM, James Hartig <fastest963 at gmail.com> wrote:\n\n> On Wed, Mar 5, 2014 at 2:39 PM, Peter Todd <pete at petertodd.org> wrote:\n> > More important though is you shouldn't be using single factor Bitcoin\n> > addresses. Use n-of-m multisig instead and architect your system such\n> > that that every transaction that happens in your service has to be\n> > authorized by both the \"online\" server(s) that host your website as well\n> > as a second \"hardened\" server with an extremely limited interface\n> > between it and the online server.\n> \n> This adds a very minor amount of security, if any, if someone manages to hack into your \"hot wallet\" server they can just initiate a non-multisig transaction and still steal all your bitcoins in that wallet. You can't give the argument that the RPC API is password protected because the password is stored in plain-text in the config so all someone has to do is first grep for the file. There doesn't appear to be a way to force ALL outgoing transactions to be multisig and even if there was one, would you be able to force one of the addresses to be the \"hardened\" server? That still wouldn't prevent anyone from just stopping bitcoind, changing the config, then restarting it.\n> \n> Unless you're using your own custom wallet software there doesn't seem to be any sufficient way to prevent someone from stealing all your money once they have access to your server. Other software, like MySQL has access controls so I can prevent ALTERs, DROPs, DELETEs, etc for all \"live\" accounts limiting the scope of any attack if they manage to get into the server. Maybe this is beyond the scope of bitcoind, not sure.\n> \n> Thanks,\n> --\n> James Hartig\n> Software Engineer @ Grooveshark.com\n> http://twitter.com/jameshartig\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/72a1223e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/72a1223e/attachment.sig>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-06T07:02:51",
                "message_text_only": "One wonders also re. bitmessage, though that may not be relevant to this\nparticular list.\n\n> On Wed, Mar 05, 2014 at 11:21:52AM -0500, Kevin wrote:\n>> On 3/5/2014 7:49 AM, Mike Hearn wrote:\n>> >A new practical technique has been published that can recover\n>> >secp256k1 private keys after observing OpenSSL calculate as little\n>> >as 200 signatures:\n>>\n>> How can we patch this issue?\n>\n> If you're following good practices you're not particularly vulneable to\n> it, if at all, even if you make use of shared hosting. First of all you\n> shouldn't be re-using addresses, which means you won't be passing that\n> ~200 sig threshold.\n>\n> More important though is you shouldn't be using single factor Bitcoin\n> addresses. Use n-of-m multisig instead and architect your system such\n> that that every transaction that happens in your service has to be\n> authorized by both the \"online\" server(s) that host your website as well\n> as a second \"hardened\" server with an extremely limited interface\n> between it and the online server. The hardened second factor *should*\n> use a separate codebase, ideally even a second language, to authenticate\n> actions that withdraw funds or generate new addresses based on data\n> given to it by the online server. In the best case your customers are\n> PGP-signing requests so you can verify their intent independently and\n> cryptographically on both servers. Mircea Popescu's MPEx exchange is an\n> example of this model, although I don't think they're doing any multisig\n> stuff. Failing that you can at least use the second server to do things\n> like limit losses by flagging higher-than-expected withdrawl volumes and\n> unusual events.\n>\n> Since this second-factor server only deals with business logic - not the\n> website - you can certainly find a secure hosting arrangement for it\n> with physical control. I recommend you stick the machine in your\n> apartment and use tor + hidden services to connect to it from your VM\n> instances.\n>\n> Note too that even if all you're doing is accepting Bitcoins from\n> customers, perhaps in exchange for goods, all of the above *still*\n> applies modulo the fact that the payment protocol is very incomplete.\n>\n>\n> With P2SH (finally!) supported in all the major Bitcoin wallets there\n> simply is no excuse not to have such an architecture other than lazyness\n> and transaction fees; if you fall into the latter category you're\n> business may very well be wiped out anyway by increased fees.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-03-08T19:34:10",
                "message_text_only": "On Wednesday, March 05, 2014 4:21:52 PM Kevin wrote:\n> How can we patch this issue?\n\nNo need, it is not an issue for Bitcoin.\n\nProperly used, there is only ever one signature per public key.\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-09T01:57:46",
                "message_text_only": "On Sat, Mar 8, 2014 at 11:34 AM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, March 05, 2014 4:21:52 PM Kevin wrote:\n>> How can we patch this issue?\n> No need, it is not an issue for Bitcoin.\n> Properly used, there is only ever one signature per public key.\n\nSecurity shouldn't depend on perfect use.  There are many things that\nresult in multiple key use: Bitcoin address authentication (something\nwhich the pool you created uses!), someone spamming you with multiple\npayments to a common address which you didn't solicit (what, are you\njust going to ignore the extra coins?), ... or just practical\nconsiderations\u2014 I note the mining pool you founded continually pays a\nsingle address for 'fall back' payments when it can't pay in the\ncoinbase transact, I know you consider that a bug, but its the reality\ntoday.\n\nMost security issues aren't the result of one problem but several\nproblems combined, so it's important to make each layer strong even if\nthe strength shouldn't be important due to proper use in other layers.\n\nFortunately, libsecp256k1 has a nearly constant time/constant memory\naccess multiply for signing which should reduce exposure substantially\n(and is generally built in a way that reduces vulnerabilities)."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2014-03-05T21:31:01",
                "message_text_only": "If we don't mind sacrificing some performance when signing, there's a fairly simple way to implement a constant-time constant-cache-access-pattern secp256k1.\nIt is based on the idea of branchless implementations of the field and group operations.\n\nMultiprecision arithmetic can be implemented branch-free by assuming fixed sized limbs and always performing dummy carry operations even when they aren't needed.\n\nThe most critical field operation that could potentially leak data is the modular inverse. Again, if we don't mind a slow implementation, a simple constant-time implementation involves exponentiation by the field modulus minus two - which is a known constant.\n\nAs for group operations in secp256k1, the main sources of leaks are the branchings that exist in typical implementations as well as optimizations for special inputs,\ni.e. http://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates\nTo avoid leaking any information, we can use the most general operation, Point Addition, in the following way:\n\nAlways carry through the full point addition algorithm even if we get POINT_AT_INFINITY. Also, always carry through the POINT_DOUBLE operation even on unequal inputs. Store the three possible results (POINT_ADDITION, POINT_AT_INFINITY, and POINT_DOUBLE) and then do a branchless conditional swap with the output location as a final step.\n\nBranchless swaps can be performed using bitwise operations such as the examples here: https://github.com/CodeShark/cmp/blob/master/src/constant-time.h\n\n--------------\n\nIn the case of bitcoin, signature verification is where performance optimization is really helpful - and here there are no risks of sidechannel leaks, so we can go ahead and use the most optimal implementations. But for signing, the amount of throughput required is generally not that large and constant-time implementations will be more than adequate on typical hardware.\n\n-Eric Lombrozo\n\nOn Mar 5, 2014, at 4:49 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> A new practical technique has been published that can recover secp256k1 private keys after observing OpenSSL calculate as little as 200 signatures:\n> \n> http://eprint.iacr.org/2014/161.pdf\n> \n> This attack is based on the FLUSH+RELOAD technique published last year. It works by observing L3 CPU cache timings and forcing cache line flushes using the clflush opcode. As a result, it is applicable to any x86 environment where an attacker may be able to run on the same hardware i.e. virtualised hosting environments where keys are being reused.\n> \n> I am not currently aware of any efforts to make OpenSSL's secp256k1 implementation completely side channel free in all aspects. Also, unfortunately many people have reimplemented ECDSA themselves and even if OpenSSL gets fixed, the custom implementations probably won't. \n> \n> So, IMHO this is a sign for hot wallet users to start walking (but not running) towards the exits of these shared cloud services:  it doesn't feel safe to sign transactions on these platforms, so hot wallets should be managed by dedicated hardware. Of course other parts of the service, like the website, are less sensitive and can still run in the cloud. I doubt the researchers will release their code to do the side channel attack and it's rather complex to reimplement, so this gives some time for mitigation. Unfortunately the huge sums being held in some \"bitbank\" style hot wallets mean that attackers are well motivated to pull off even quite complex attacks.\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cd3b088f/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cd3b088f/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-05T21:44:30",
                "message_text_only": "On Wed, Mar 5, 2014 at 1:31 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> If we don't mind sacrificing some performance when signing, there's a fairly\n> simple way to implement a constant-time constant-cache-access-pattern\n> secp256k1.\n> It is based on the idea of branchless implementations of the field and group\n> operations.\n\nDo take care that branchless doesn't mean side-channel free: On\nnon-trivial hardware you must have uniform memory accesses too.\n\n(and that itself isn't enough for sidechannel freeness against an\nattacker that can do power analysis... then you star worrying about\nthe internal structure your primitive adders and the hamming weight of\nyour numbers, and needing to build hardware that uses differential\nlogic, and yuck yuck yuck:  This is why you still shouldn't reuse\naddresses, and why a blinding approach may still be sensible, even if\nyou believe your implementation is hardened against side-channels)"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2014-03-05T22:14:20",
                "message_text_only": "Everything you say is true.\n\nHowever, branchless does reduce the attack surface considerably - if nothing else, it significantly ups the difficulty of an attack for a relatively low cost in program complexity, and that might still make it worth doing.\n\nAs for uniform memory access, if we avoided any kind of heap allocation, wouldn't we avoid such issues?\n\nAnyhow, without having gone into the full details of this particular attack, it seems the main attack point is differences in how squaring and multiplication (in the case of field exponentiation) or doubling and point addition (in the case of ECDSA) are performed. I believe using a branchless implementation where each phase of the operation executes the exact same code and accesses the exact same stack frames would not be vulnerable to FLUSH+RELOAD.\n\n\"To be able to recover the sequence of point additions and doublings, the spy program should distinguish\nbetween consecutive doubling operations and must be able to order them with respect to point additions.\nOur spy program achieves this by setting the time slot to less than half the length of the group operations.\nWith the selected curve, group add operations take 7,928 cycles on average, while group double operation\ntake 7,601 cycles. Setting the time slot to 3,000 cycles ensures that there is an empty time slot within any\ngroup operation, allowing our spy to correctly distinguish consecutive doubles\"\n\nThe approach I've suggested makes doubling operations indistinguishable from point additions from the perspective of cache access.\n\nOn Mar 5, 2014, at 1:44 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Mar 5, 2014 at 1:31 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> If we don't mind sacrificing some performance when signing, there's a fairly\n>> simple way to implement a constant-time constant-cache-access-pattern\n>> secp256k1.\n>> It is based on the idea of branchless implementations of the field and group\n>> operations.\n> \n> Do take care that branchless doesn't mean side-channel free: On\n> non-trivial hardware you must have uniform memory accesses too.\n> \n> (and that itself isn't enough for sidechannel freeness against an\n> attacker that can do power analysis... then you star worrying about\n> the internal structure your primitive adders and the hamming weight of\n> your numbers, and needing to build hardware that uses differential\n> logic, and yuck yuck yuck:  This is why you still shouldn't reuse\n> addresses, and why a blinding approach may still be sensible, even if\n> you believe your implementation is hardened against side-channels)\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/c62ea6e7/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-05T22:25:02",
                "message_text_only": "On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> Everything you say is true.\n>\n> However, branchless does reduce the attack surface considerably - if nothing else, it significantly ups the difficulty of an attack for a relatively low cost in program complexity, and that might still make it worth doing.\n\nAbsolutely. I believe these things are worth doing.\n\nMy comment on it being insufficient was only that \"my signer is\nbranchless\" doesn't make other defense measures (avoiding reuse,\nmultsig with multiple devices, not sharing hardware, etc.)\nunimportant.\n\n> As for uniform memory access, if we avoided any kind of heap allocation, wouldn't we avoid such issues?\n\nNo. At a minimum to hide a memory timing side-channel you must perform\nno data dependent loads (e.g. no operation where an offset into memory\nis calculated). A strategy for this is to always load the same values,\nbut then mask out the ones you didn't intend to read... even that I'd\nworry about on sufficiently advanced hardware, since I would very much\nnot be surprised if the processor was able to determine that the load\nhad no effect and eliminate it! :) )\n\nMaybe in practice if your data dependencies end up only picking around\nin the same cache-line it doesn't actually matter... but it's hard to\nbe sure, and unclear when a future optimization in the rest of the\nsystem might leave it exposed again.\n\n(In particular, you can't generally write timing sign-channel immune\ncode in C (or other high level language) because the compiler is\nfreely permitted to optimize things in a way that break the property.\n... It may be _unlikely_ for it to do this, but its permitted\u2014 and\nwill actually do so in some cases\u2014, so you cannot be completely sure\nunless you check and freeze the toolchain)\n\n> Anyhow, without having gone into the full details of this particular attack, it seems the main attack point is differences in how squaring and multiplication (in the case of field exponentiation) or doubling and point addition (in the case of ECDSA) are performed. I believe using a branchless implementation where each phase of the operation executes the exact same code and accesses the exact same stack frames would not be vulnerable to FLUSH+RELOAD.\n\nI wouldn't be surprised."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T08:38:40",
                "message_text_only": "I'm wondering about whether (don't laugh) moving signing into the kernel\nand then using the MTRRs to disable caching entirely for a small scratch\nregion of memory would also work. You could then disable pre-emption and\nprevent anything on the same core from interrupting or timing the signing\noperation.\n\nHowever I suspect just making a hardened secp256k1 signer implementation in\nuserspace would be of similar difficulty, in which case it  would naturally\nbe preferable.\n\n\nOn Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> > Everything you say is true.\n> >\n> > However, branchless does reduce the attack surface considerably - if\n> nothing else, it significantly ups the difficulty of an attack for a\n> relatively low cost in program complexity, and that might still make it\n> worth doing.\n>\n> Absolutely. I believe these things are worth doing.\n>\n> My comment on it being insufficient was only that \"my signer is\n> branchless\" doesn't make other defense measures (avoiding reuse,\n> multsig with multiple devices, not sharing hardware, etc.)\n> unimportant.\n>\n> > As for uniform memory access, if we avoided any kind of heap allocation,\n> wouldn't we avoid such issues?\n>\n> No. At a minimum to hide a memory timing side-channel you must perform\n> no data dependent loads (e.g. no operation where an offset into memory\n> is calculated). A strategy for this is to always load the same values,\n> but then mask out the ones you didn't intend to read... even that I'd\n> worry about on sufficiently advanced hardware, since I would very much\n> not be surprised if the processor was able to determine that the load\n> had no effect and eliminate it! :) )\n>\n> Maybe in practice if your data dependencies end up only picking around\n> in the same cache-line it doesn't actually matter... but it's hard to\n> be sure, and unclear when a future optimization in the rest of the\n> system might leave it exposed again.\n>\n> (In particular, you can't generally write timing sign-channel immune\n> code in C (or other high level language) because the compiler is\n> freely permitted to optimize things in a way that break the property.\n> ... It may be _unlikely_ for it to do this, but its permitted\u2014 and\n> will actually do so in some cases\u2014, so you cannot be completely sure\n> unless you check and freeze the toolchain)\n>\n> > Anyhow, without having gone into the full details of this particular\n> attack, it seems the main attack point is differences in how squaring and\n> multiplication (in the case of field exponentiation) or doubling and point\n> addition (in the case of ECDSA) are performed. I believe using a branchless\n> implementation where each phase of the operation executes the exact same\n> code and accesses the exact same stack frames would not be vulnerable to\n> FLUSH+RELOAD.\n>\n> I wouldn't be surprised.\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/6d66fa81/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2014-03-06T10:00:14",
                "message_text_only": "You've heard of TRESOR?\n\nNo, not Trezor.\n\nhttps://en.wikipedia.org/wiki/TRESOR\n\nSigning on the CPU, without touching RAM.\n\n- Sent from my phone\nDen 6 mar 2014 09:41 skrev \"Mike Hearn\" <mike at plan99.net>:\n\n> I'm wondering about whether (don't laugh) moving signing into the kernel\n> and then using the MTRRs to disable caching entirely for a small scratch\n> region of memory would also work. You could then disable pre-emption and\n> prevent anything on the same core from interrupting or timing the signing\n> operation.\n>\n> However I suspect just making a hardened secp256k1 signer implementation\n> in userspace would be of similar difficulty, in which case it  would\n> naturally be preferable.\n>\n>\n> On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>\n>> wrote:\n>> > Everything you say is true.\n>> >\n>> > However, branchless does reduce the attack surface considerably - if\n>> nothing else, it significantly ups the difficulty of an attack for a\n>> relatively low cost in program complexity, and that might still make it\n>> worth doing.\n>>\n>> Absolutely. I believe these things are worth doing.\n>>\n>> My comment on it being insufficient was only that \"my signer is\n>> branchless\" doesn't make other defense measures (avoiding reuse,\n>> multsig with multiple devices, not sharing hardware, etc.)\n>> unimportant.\n>>\n>> > As for uniform memory access, if we avoided any kind of heap\n>> allocation, wouldn't we avoid such issues?\n>>\n>> No. At a minimum to hide a memory timing side-channel you must perform\n>> no data dependent loads (e.g. no operation where an offset into memory\n>> is calculated). A strategy for this is to always load the same values,\n>> but then mask out the ones you didn't intend to read... even that I'd\n>> worry about on sufficiently advanced hardware, since I would very much\n>> not be surprised if the processor was able to determine that the load\n>> had no effect and eliminate it! :) )\n>>\n>> Maybe in practice if your data dependencies end up only picking around\n>> in the same cache-line it doesn't actually matter... but it's hard to\n>> be sure, and unclear when a future optimization in the rest of the\n>> system might leave it exposed again.\n>>\n>> (In particular, you can't generally write timing sign-channel immune\n>> code in C (or other high level language) because the compiler is\n>> freely permitted to optimize things in a way that break the property.\n>> ... It may be _unlikely_ for it to do this, but its permitted\u2014 and\n>> will actually do so in some cases\u2014, so you cannot be completely sure\n>> unless you check and freeze the toolchain)\n>>\n>> > Anyhow, without having gone into the full details of this particular\n>> attack, it seems the main attack point is differences in how squaring and\n>> multiplication (in the case of field exponentiation) or doubling and point\n>> addition (in the case of ECDSA) are performed. I believe using a branchless\n>> implementation where each phase of the operation executes the exact same\n>> code and accesses the exact same stack frames would not be vulnerable to\n>> FLUSH+RELOAD.\n>>\n>> I wouldn't be surprised.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Subversion Kills Productivity. Get off Subversion & Make the Move to\n>> Perforce.\n>> With Perforce, you get hassle-free workflows. Merge that actually works.\n>> Faster operations. Version large binaries.  Built-in WAN optimization and\n>> the\n>> freedom to use Git, Perforce or both. Make the move to Perforce.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0e7136db/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-25T13:39:25",
                "message_text_only": "This *could* be a useful feature, but only if it's generalizable to\nother processor architectures, and **in particular** has an implementation\nusing dedicated silicon that has a **public** open-source hardware layout,\nso you can X-ray the chip, and confirm with a thermal imager that yes, the\nencryption code is actually running where you think it's running.\n\nI was *almost* convinced that the 'new key per address' was a good idea\nto mitigate ECDSA side channel attacks. Now, however, I find it quite \nplausible that intelligence agencies are promoting 'new key per transaction'\nas a way to make sure all your keys are leaked all over RAM and the nearby\nelectromagnetic spectrum with side channels intentionally embedded in\ncommodity hardware.\n\nIf you want to convince me otherwise, then help me crowdfund an open-source\nhardware Bitcoin ASIC that does the crypto and stores your private keys. \n\nI expect the 'new key per transaction' crowd will be in for a rude awakening\nwhen they finally understand the silicon area cost to do this securely.\n\nConclusion: Not only is 'de-prioritizing address re-use' BAD privacy, it \nprovides a social engineering/key leakage attack vector where someone can\ntrack you down from the EMF generated by your bitcoin wallet when they send\nyou money.\n\nIf you think otherwise, let's build some ficking open-source hardware and \nfind out how much silicon this will cost.\n\nAlthough it's probably more profitable to just build a bitcoin wallet \ndetector and keep your mouth shut.\n\nOn Thu, Mar 06, 2014 at 11:00:14AM +0100, Natanael wrote:\n> You've heard of TRESOR?\n> \n> No, not Trezor.\n> \n> https://en.wikipedia.org/wiki/TRESOR\n> \n> Signing on the CPU, without touching RAM.\n> \n> - Sent from my phone\n> Den 6 mar 2014 09:41 skrev \"Mike Hearn\" <mike at plan99.net>:\n> \n> > I'm wondering about whether (don't laugh) moving signing into the kernel\n> > and then using the MTRRs to disable caching entirely for a small scratch\n> > region of memory would also work. You could then disable pre-emption and\n> > prevent anything on the same core from interrupting or timing the signing\n> > operation.\n> >\n> > However I suspect just making a hardened secp256k1 signer implementation\n> > in userspace would be of similar difficulty, in which case it  would\n> > naturally be preferable.\n> >\n> >\n> > On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n> >\n> >> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>\n> >> wrote:\n> >> > Everything you say is true.\n> >> >\n> >> > However, branchless does reduce the attack surface considerably - if\n> >> nothing else, it significantly ups the difficulty of an attack for a\n> >> relatively low cost in program complexity, and that might still make it\n> >> worth doing.\n> >>\n> >> Absolutely. I believe these things are worth doing.\n> >>\n> >> My comment on it being insufficient was only that \"my signer is\n> >> branchless\" doesn't make other defense measures (avoiding reuse,\n> >> multsig with multiple devices, not sharing hardware, etc.)\n> >> unimportant.\n> >>\n> >> > As for uniform memory access, if we avoided any kind of heap\n> >> allocation, wouldn't we avoid such issues?\n> >>\n> >> No. At a minimum to hide a memory timing side-channel you must perform\n> >> no data dependent loads (e.g. no operation where an offset into memory\n> >> is calculated). A strategy for this is to always load the same values,\n> >> but then mask out the ones you didn't intend to read... even that I'd\n> >> worry about on sufficiently advanced hardware, since I would very much\n> >> not be surprised if the processor was able to determine that the load\n> >> had no effect and eliminate it! :) )\n> >>\n> >> Maybe in practice if your data dependencies end up only picking around\n> >> in the same cache-line it doesn't actually matter... but it's hard to\n> >> be sure, and unclear when a future optimization in the rest of the\n> >> system might leave it exposed again.\n> >>\n> >> (In particular, you can't generally write timing sign-channel immune\n> >> code in C (or other high level language) because the compiler is\n> >> freely permitted to optimize things in a way that break the property.\n> >> ... It may be _unlikely_ for it to do this, but its permitted\u2014 and\n> >> will actually do so in some cases\u2014, so you cannot be completely sure\n> >> unless you check and freeze the toolchain)\n> >>\n> >> > Anyhow, without having gone into the full details of this particular\n> >> attack, it seems the main attack point is differences in how squaring and\n> >> multiplication (in the case of field exponentiation) or doubling and point\n> >> addition (in the case of ECDSA) are performed. I believe using a branchless\n> >> implementation where each phase of the operation executes the exact same\n> >> code and accesses the exact same stack frames would not be vulnerable to\n> >> FLUSH+RELOAD.\n> >>\n> >> I wouldn't be surprised.\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> >> Perforce.\n> >> With Perforce, you get hassle-free workflows. Merge that actually works.\n> >> Faster operations. Version large binaries.  Built-in WAN optimization and\n> >> the\n> >> freedom to use Git, Perforce or both. Make the move to Perforce.\n> >>\n> >> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > Subversion Kills Productivity. Get off Subversion & Make the Move to\n> > Perforce.\n> > With Perforce, you get hassle-free workflows. Merge that actually works.\n> > Faster operations. Version large binaries.  Built-in WAN optimization and\n> > the\n> > freedom to use Git, Perforce or both. Make the move to Perforce.\n> >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-25T13:50:02",
                "message_text_only": "Y'all are getting deep into tinfoil-wearing-hat-conspiracy-theory territory.\n\nIf you are worried about the NSA compromising your hardware or software,\nthen use multisig transactions and\nsign on diverse hardware/software stacks. Generate the multiple private\nkeys on different hardware/software\nstacks, too.\n\nOr, in other words, eliminate the single point of failure and you will\nmitigate whole families of possible attacks,\nfrom \"NSA compromised the hardware random number generator in my CPU\" to\n\"NSA is listening to EMF\nradiation coming from my dedicated server in my data center\" to the much\nmore likely \"data center employee\nis tricked into letting somebody have access to my dedicated server.\"\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/b9e8b67a/attachment.html>"
            },
            {
                "author": "Gustav Simonsson",
                "date": "2014-03-08T19:29:15",
                "message_text_only": "While there is no mention of virtualization in the side-channel article,\nthe FLUSH+RELOAD paper [1] mentions virtualization and claims the clflush\ninstruction works not only towards processes on the same OS, but also\nagainst processes in a separate guest OS if executed on the host OS (type 2\nhypervisor) [2]. It also works if executed from within another guest OS\n(though that reduces the efficiency of the attack) [3].\n\nBoth the authors [4] and Vulnerability Note VU#976534 [5] claim disabling\nhypervisor memory page de-duplication prevents the attack. This could\nperhaps be a first step for bitcoin companies running their software on\nshared hosts; demand their allocated instances to be on hosts with this\ndisabled. Question is how common it is for virtualization providers to\noffer that as an option.\n\nTRESOR is is only applicable if running in a non-virtualized OS [6].\n\nWhile TRESOR only implements AES, it seems it could work for ECDSA as well,\nas they use the four x86 debug registers to fit a 256 bit privkey [7] for\nthe entire machine uptime, and then use other registers when doing the\nactual AES ops. They use the Intel AES-NI instruction set though, and since\nthere is no corresponding instruction set for EC extra work would be\nrequired to manually implement EC math in assembler.\n\nThey actually do what Mike Hearn mentioned and disable preemption in Linux\n(their code runs in kernel space; they patched the kernel) to ensure\natomicity. Not only do they manage to protect against memory attacks (and\nRAM/cache timing attacks) from other processes running on the same host,\nbut even from root on the same host (from userland, the debug registers are\nonly accessible through ptrace, which they patched, and they also disabled\nLKM & KMEM).\n\nOne could imagine different levels of TRESOR-like ECDSA with different\ntradeoffs of complexity vs security. For example, if one is fine with\nkeeping the privkey(s) in RAM but want to avoid cache timing attacks, the\nsigning could be implemented as a userspace program holding key(s) in RAM\ntogether with a kernel module providing a syscall for signing. Signing is\nthen run with preemption using only x86 registers for intermediate data and\nthen using e.g. movntps [8] to write to RAM without data being cached. The\nbenefit of this compared with the full TRESOR approach is that it would not\nrequire a patched kernel, only a kernel module. It would also be simpler to\nimplement compared to keeping the privkey in the debug registers for the\nentire machine uptime, especially if multiple privkeys are used. It would\nnot protect against root though, since an adversary getting root could load\ntheir own kernel module and read the registers.\n\nTo handle multiple keys (maybe as one-time-use) and get full TRESOR\nbenefits, one could perhaps (with the original TRESOR approach, i.e. with\npatched kernel) store a BIP 0032 starting string / seed + counter in the\ndebug registers and have the atomic kernel code generate new keys and do\nthe signing.\n\nCheers,\nGustav Simonsson\n\n1. http://eprint.iacr.org/2013/448.pdf\n2. Page 1 of [1]\n3. page 5 of [1]\n4. page 8 (end of conclusions section) of [1]\n5. http://www.kb.cert.org/vuls/id/976534\n6. page 8, \"3.2 Hardware compatibility\",\nhttps://www.usenix.org/legacy/event/sec11/tech/full_papers/Muller.pdf\n7. page 3, \"2.2 Key Management\" of [6]\n8. page 1041 of\nhttp://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf\n\n\n\nOn Thu, Mar 6, 2014 at 9:38 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I'm wondering about whether (don't laugh) moving signing into the kernel\n> and then using the MTRRs to disable caching entirely for a small scratch\n> region of memory would also work. You could then disable pre-emption and\n> prevent anything on the same core from interrupting or timing the signing\n> operation.\n>\n> However I suspect just making a hardened secp256k1 signer implementation\n> in userspace would be of similar difficulty, in which case it  would\n> naturally be preferable.\n>\n>\n> On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>\n>> wrote:\n>> > Everything you say is true.\n>> >\n>> > However, branchless does reduce the attack surface considerably - if\n>> nothing else, it significantly ups the difficulty of an attack for a\n>> relatively low cost in program complexity, and that might still make it\n>> worth doing.\n>>\n>> Absolutely. I believe these things are worth doing.\n>>\n>> My comment on it being insufficient was only that \"my signer is\n>> branchless\" doesn't make other defense measures (avoiding reuse,\n>> multsig with multiple devices, not sharing hardware, etc.)\n>> unimportant.\n>>\n>> > As for uniform memory access, if we avoided any kind of heap\n>> allocation, wouldn't we avoid such issues?\n>>\n>> No. At a minimum to hide a memory timing side-channel you must perform\n>> no data dependent loads (e.g. no operation where an offset into memory\n>> is calculated). A strategy for this is to always load the same values,\n>> but then mask out the ones you didn't intend to read... even that I'd\n>> worry about on sufficiently advanced hardware, since I would very much\n>> not be surprised if the processor was able to determine that the load\n>> had no effect and eliminate it! :) )\n>>\n>> Maybe in practice if your data dependencies end up only picking around\n>> in the same cache-line it doesn't actually matter... but it's hard to\n>> be sure, and unclear when a future optimization in the rest of the\n>> system might leave it exposed again.\n>>\n>> (In particular, you can't generally write timing sign-channel immune\n>> code in C (or other high level language) because the compiler is\n>> freely permitted to optimize things in a way that break the property.\n>> ... It may be _unlikely_ for it to do this, but its permitted-- and\n>> will actually do so in some cases--, so you cannot be completely sure\n>> unless you check and freeze the toolchain)\n>>\n>> > Anyhow, without having gone into the full details of this particular\n>> attack, it seems the main attack point is differences in how squaring and\n>> multiplication (in the case of field exponentiation) or doubling and point\n>> addition (in the case of ECDSA) are performed. I believe using a branchless\n>> implementation where each phase of the operation executes the exact same\n>> code and accesses the exact same stack frames would not be vulnerable to\n>> FLUSH+RELOAD.\n>>\n>> I wouldn't be surprised.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Subversion Kills Productivity. Get off Subversion & Make the Move to\n>> Perforce.\n>> With Perforce, you get hassle-free workflows. Merge that actually works.\n>> Faster operations. Version large binaries.  Built-in WAN optimization and\n>> the\n>> freedom to use Git, Perforce or both. Make the move to Perforce.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/71b3ea80/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New side channel attack that can recover Bitcoin keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo",
                "Luke-Jr",
                "Natanael",
                "Troy Benjegerdes",
                "Gustav Simonsson",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "Peter Todd",
                "Jean-Paul Kogelman",
                "Kevin",
                "Gregory Maxwell",
                "James Hartig",
                "Gavin Andresen",
                "Pieter Wuille"
            ],
            "messages_count": 24,
            "total_messages_chars_count": 62537
        }
    },
    {
        "title": "[Bitcoin-development] Process for getting a patch aproved?",
        "thread_messages": [
            {
                "author": "Kevin",
                "date": "2014-03-05T22:17:54",
                "message_text_only": "Hello.  How would I submit a patch?  Could it be sent through the list \nas an attachment?\n\n-- \nKevin"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-05T22:27:13",
                "message_text_only": "On Wed, Mar 5, 2014 at 2:17 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> Hello.  How would I submit a patch?  Could it be sent through the list\n> as an attachment?\n\nTo the reference software?  Normally you'd open a github account and\nsubmit there.\n\nThough if for some reason you can't\u2014 though its strongly preferred\u2014\nsending a git-format-patch via email might be an acceptable fallback."
            },
            {
                "author": "Wladimir",
                "date": "2014-03-06T07:56:30",
                "message_text_only": "On Wed, Mar 5, 2014 at 11:17 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n\n> Hello.  How would I submit a patch?  Could it be sent through the list\n> as an attachment?\n>\n\nYou can, but as reviewing can take a while, the github model works better\nfor this project.\n\nIn my experience people lose track of patches sent to mailing lists, at\nleast when posted to github there will be a nagging 'issue' appearing until\nit is either merged or closed otherwise.\n\nIf it concerns a proposed protocol change do discuss it on the mailing\nlist, as people building other implementations read here and not on github.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0265788c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Process for getting a patch aproved?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin",
                "Gregory Maxwell",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1287
        }
    },
    {
        "title": "[Bitcoin-development] Instant / contactless payments",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T09:45:31",
                "message_text_only": "I just did my first contactless nfc payment with a MasterCard. It worked\nvery well and was quite delightful - definitely want to be doing more of\nthese in future. I think people will come to expect this kind of\nno-friction payment experience and Bitcoin will need to match it, so here\nare some notes on what's involved.\n\nThere are two aspects that can be implemented independently of each other:\n\n1) The physical/NFC layer.\n2) The risk analysis layer.\n\nA contactless payment needs two things to work: one is a VERY fast, low\nlatency communication between payment device (phone in our case) and\nterminal. I couldn't find actual latency specs yet but it felt like using\nan Oyster card, which aims for <400msec.\n\nThe other is that obviously the payment device has to decide to sign the\ntransaction without any user interaction, i.e. the payment is at low risk\nof being unintentional. If you nail this it can be used for one-click web\npayments too.\n\nAndreas already did some work on embedding full blown payment requests into\nan NFC tag, but I think we need to switch this to being a packet based\nprotocol (via ISO-DEP), otherwise you can't submit the Payment/tx messages\nback via NFC as well. This isn't a very complicated task and would make a\nfun project for a newbie who has Android and knows some Java. The resulting\nISO-DEP protocol can be turned into a BIP without too much trouble.\n\nThe risk analysis is the more complicated part. The real value\nVisa/MasterCard provide with NFC payments is not so much the tech (the\nclever part is the batteryless nature of the cards rather than the\ncrypto/comms), but the fact that merchants are all verified and can be\nfined or evicted if they abuse the system and try to steal money. Bitcoin\ndoesn't have anything like that.\n\nI think we have a few options to make it safe:\n\n1) Require some very lightweight user confirmation, like pressing the power\nbutton to reach the lock screen and only allowing small payments. The\ncombination of physical proximity and pressing the power button is probably\ngood enough for now to avoid problems. Someone should try it out and see\nhow it feels.\n\n2) Have some kind of semi-centralised merchant verification/approval\nprograms, like what the card networks do. The easiest way to start would be\nto piggyback on the work BitPay/Coinbase do and just auto-sign if payment\namount is <X mBTC and the payment is via one of these processors. But this\nis hardly in the spirit of Bitcoin and is generally unsatisfying.\n\n3) Have some kind of decentralised reputation network. I spent some time\nthinking about this, but it rapidly became very complicated and feels like\nan entirely separate project that should stand alone from Bitcoin itself.\nPerhaps rather than try to make a global system, social data could be\nexchanged (using some fancy privacy preserving protocols?) so if your\nfriends have decided to trust seller X, your phone automatically trusts\nthem too.\n\n4) Have the touch trigger a delayed payment and the phone tries to attract\nattention to itself so the user can cancel. This way if someone tries to\nswipe money out of your pocket by getting up close on a subway or\nsomething, you have a chance to cancel. But it's quite hard for a small\ndevice to reliably attract attention quickly and it opens up the merchant\nto fraud where the user pays, leaves and then cancels the payment.\nEspecially it'd be useless for things like mass transit. So I think such a\nsystem would have to be opt-in by the seller.\n\n5) A combination of all the above.\n\nTo get the very fast light feel the actual contact period has to be quite\nshort, so I bet we'd need to optimise the bootup process of the Android\nwallet app. Right now it does slow things like deserialising giant protocol\nbuffers and is just generally not optimised for startup time. Loading the\nwallet, reading the payment request over NFC, checking the cert signatures,\nmaking the trust decision, calculating a transaction, signing it, sending\nit back to the recipient all in under 400 msec would be a tough (but fun)\nprogramming challenge. Some of the steps can be parallelised and modern\nphones are mostly multicore.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0d93269c/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-06T11:26:20",
                "message_text_only": "I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick\nup the phone the connection breaks. It's ok if some people decide to let\nthe app do risk analysis, but you cannot force it onto users by picking\na protocol that cannot deal with manual verification. Users should\nalways have the choice to verify their payment without time pressure and\nby holding the device of their choice at their individual viewing distance.\n\nBesides, how do you plan to risk-analyse the memo field?\n\nIn current phone implementations, the screen must be on already for NFC\nto be active. Also it must be unlocked, although I certainly hope future\nOSes will allow payment apps on the lock screen, just like they allow\nmusic players.\n\n> To get the very fast light feel the actual contact period has to be\n> quite short, so I bet we'd need to optimise the bootup process of the\n> Android wallet app.\n\nIt's already very short if you can do without Android Beam, e.g. on\nAndroid 2.3. I'd say <200 ms for an BIP21 payment request. Bootup of the\napp and everything else happens after -- no need to continue contact.\nIndeed most of the bootup time goes into loading complex wallets. Our\nlong standing plans to clean up the wallet and archieve transactions\nshould help. Also, if Bitcoin catches on the app will just stay in memory.\n\nThe most obvious optimization to speed up signature checking is to make\nit lazy. The user can already inspect the payment while signatures are\nbeing checked. Even transaction signing could already happen in advance,\nif it can be made sure that no signed transaction \"escapes\" the dialog\nwithout the users consent.\n\nEven the current ~10 second roundtrip is a huge improvement to the\nstatus quo. I recently tried to buy a subway ticket and it took me 7\nfull minutes (just for the payment process)!"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T13:44:26",
                "message_text_only": "On Thu, Mar 6, 2014 at 12:26 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick\n> up the phone the connection breaks.\n\n\nIf the phone isn't willing to immediately authorise then it'd have to fall\nback to HTTPS or Bluetooth as normal.\n\n\n> Besides, how do you plan to risk-analyse the memo field?\n>\n\nI guess only the amount and destination are relevant for risk analysis.\n\n\n> It's already very short if you can do without Android Beam, e.g. on\n> Android 2.3.\n\n\nI think IsoDep based protocols must bypass Beam - when I scan my e-passport\nthere's no beam animation.\n\n\n> The most obvious optimization to speed up signature checking is to make\n> it lazy. The user can already inspect the payment while signatures are\n> being checked.\n\n\nWell, for <400msec there can't be any user interaction. But checking\nsignatures on the payment request and constructing and signing the inputs\ncan all be done in parallel - you should be able to max out every core, at\nleast for a brief moment.\n\n\n> Even the current ~10 second roundtrip is a huge improvement to the\n> status quo. I recently tried to buy a subway ticket and it took me 7\n> full minutes (just for the payment process)!\n\n\nThen that subway kind of sucks ;) Have you been to London and used Oyster?\nI think the capital wouldn't work at all without the low latency Oyster\ncards. The tube would have stopped scaling some time ago.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/f3881a64/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-06T14:51:09",
                "message_text_only": "On 03/06/2014 02:44 PM, Mike Hearn wrote:\n\n>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick\n>     up the phone the connection breaks.\n> \n> If the phone isn't willing to immediately authorise then it'd have to\n> fall back to HTTPS or Bluetooth as normal.\n\nOk, that would be an option.\n\n>     Besides, how do you plan to risk-analyse the memo field?\n> \n> I guess only the amount and destination are relevant for risk analysis.\n\nThe memo field (and its logical evolution, an invoice) also needs to be\nverified, since its part of the contract. Imagine sitting in a\nrestaurant and you're being presented the bill, most people will do a\nquick scan of the meals and drinks consumed (and non-malignant errors\nare frequent in that business).\n\n>     It's already very short if you can do without Android Beam, e.g. on\n>     Android 2.3.\n> \n> I think IsoDep based protocols must bypass Beam - when I scan my\n> e-passport there's no beam animation.\n\nEverything except Beam bypasses Beam (-:  Beam is an Android-specific\nprotocol. I assume it would also be possible to write an own NDEF\nimplementation on top of the low level NFC APIs. I want to try as soon\nas I have a second NFC-capable phone, preferably Android 4.4.\n\n>     Even the current ~10 second roundtrip is a huge improvement to the\n>     status quo. I recently tried to buy a subway ticket and it took me 7\n>     full minutes (just for the payment process)!\n> \n> Then that subway kind of sucks ;)\n\nYou can't really blame the subway for a broken payment process.\n\n> Have you been to London and used Oyster?\n\nYes, it was a complete disaster. Obtaining a ticket took even longer --\nca. 45 minutes. Boarding the train took some additional seconds,\ncompared to no overhead in Germany where we simply don't have any gates.\n\nOn top of that, you walk more (in tunnels) than you get driven around,\nget tracked on each movement and if you want to get your (monetary)\nchange, you need to wait for another 45 minutes.\n\nThe upside is, when going by public transport in England I always feel\nlike Mr. Freeman in City 17  (-:"
            },
            {
                "author": "Johannes Zweng",
                "date": "2014-03-07T09:26:03",
                "message_text_only": "2014-03-06 12:26 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:\n\n\n> In current phone implementations, the screen must be on already for NFC\n> to be active. Also it must be unlocked, although I certainly hope future\n> OSes will allow payment apps on the lock screen, just like they allow\n> music players.\n\n\nJust a small input to this point:\nOn Android 4.4 the new host card emulation (HCE) feature (aka: the phone\nemulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like a\nSmartcard would do) only works when the display is on, but even when the\nscreen is locked (can be changed with \"android:requireDeviceUnlock\" in\nManifest). See here for detailled specification:\nhttp://developer.android.com/guide/topics/connectivity/nfc/hce.html\n\nUsing the HCE API on Android 4.4 also has the beauty that any app that\nregisters itself for HCE and sets its category to CATEGORY_PAYMENT in the\nManifest automatically shows up in Adroid's system settings under \"Tap &\nPay\" (where a user would expect payment applications).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/a4a84190/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-07T10:00:21",
                "message_text_only": "HCE is a bit scary. It's like the card companies tried the secure element\nthing, decided the security was too hard and were like \"screw it, let's\njust use regular apps after all\". Not that we're any better :)\n\nAt any rate, Bitcoin doesn't have any need to emulate smartcards as we\ndon't have any pre-existing infrastructure. We can just use a regular\nnon-smarcard-emulation ISO-DEP protocol. The new UI in Android 4.4 provides\nsome way to choose the default payment app, but I think it's only intended\nto disambiguate between credit card providers. Everything else gets dumped\ninto CATEGORY_OTHER and I dunno what happens if you have multiple Bitcoin\nwallet apps doing the same thing. Worst case, we can add some\ndisambiguation code on top, inside the apps themselves.\n\n\n\nOn Fri, Mar 7, 2014 at 10:26 AM, Johannes Zweng <johannes at zweng.at> wrote:\n\n>\n> 2014-03-06 12:26 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:\n>\n>\n>\n>> In current phone implementations, the screen must be on already for NFC\n>> to be active. Also it must be unlocked, although I certainly hope future\n>> OSes will allow payment apps on the lock screen, just like they allow\n>> music players.\n>\n>\n> Just a small input to this point:\n> On Android 4.4 the new host card emulation (HCE) feature (aka: the phone\n> emulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like a\n> Smartcard would do) only works when the display is on, but even when the\n> screen is locked (can be changed with \"android:requireDeviceUnlock\" in\n> Manifest). See here for detailled specification:\n> http://developer.android.com/guide/topics/connectivity/nfc/hce.html\n>\n> Using the HCE API on Android 4.4 also has the beauty that any app that\n> registers itself for HCE and sets its category to CATEGORY_PAYMENT in the\n> Manifest automatically shows up in Adroid's system settings under \"Tap &\n> Pay\" (where a user would expect payment applications).\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/49ed8d6b/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-07T10:23:28",
                "message_text_only": "On 03/07/2014 10:26 AM, Johannes Zweng wrote:\n\n>     In current phone implementations, the screen must be on already for NFC\n>     to be active. Also it must be unlocked, although I certainly hope future\n>     OSes will allow payment apps on the lock screen, just like they allow\n>     music players.\n> \n> Just a small input to this point:\n> On Android 4.4 the new host card emulation (HCE) feature (aka: the phone\n> emulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like\n> a Smartcard would do) only works when the display is on, but even when\n> the screen is locked (can be changed with \"android:requireDeviceUnlock\"\n> in Manifest). See here for detailled\n> specification: http://developer.android.com/guide/topics/connectivity/nfc/hce.html\n> \n> Using the HCE API on Android 4.4 also has the beauty that any app that\n> registers itself for HCE and sets its category to CATEGORY_PAYMENT in\n> the Manifest automatically shows up in Adroid's system settings under\n> \"Tap & Pay\" (where a user would expect payment applications).\n\nThanks for the pointer! Good to hear there is finally a decent\ndocumentation for HCE.\n\nGood news: HCE offers the required dispatch ability -- they call it AID\n(Application ID).\n\nBad news: It seems - at least CATEGORY_PAYMENT - very credit card centric.\n\nHCE seems to cover only the payer side. I wonder if there is also an API\nfor \"reader emulation\" which we would need for apps to support the payee\nside.\n\nSince Android 4.4 market penetration is quite far off, I suggest we\nfocus on the already established NFC payment protocol(s) for now, it\nworks pretty well. I will investigate into IsoDep and HCE and see if we\ncan make it enhance usability.\n\nInteresting side note: They recommend messages transmitted via NFC to\nnot exceed 1 KB in order for a snappy experience. This (again) questions\nusage of bulky X.509 certificates in our payment request messages.\nBitcoin Wallet currently does not sign payment requests, so I could not\ntry how it would feel."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-07T11:01:15",
                "message_text_only": ">\n> Interesting side note: They recommend messages transmitted via NFC to\n> not exceed 1 KB in order for a snappy experience. This (again) questions\n> usage of bulky X.509 certificates in our payment request messages.\n> Bitcoin Wallet currently does not sign payment requests, so I could not\n> try how it would feel.\n\n\nI think you could just put a signed PaymentRequest into an NFC tag and try\nreading it from that. It's the same underlying radio tech so the transfer\nspeeds should be similar, I'd think.\n\nCommon X.509 certs are bigger than they need to be for sure, but a lot of\nthe bulk comes from the use of RSA rather than ECC. An RSA signature alone\ncan be 256 bytes! There's nothing that states you have to use RSA for\ncertificates and ECC certs are out there (Google uses one), but I think\nthey are harder to get hold of. I guess over time SSL will migrate to\nmostly ECC (secp256r1) based certs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/5b262a28/attachment.html>"
            },
            {
                "author": "Johannes Zweng",
                "date": "2014-03-07T12:00:33",
                "message_text_only": "2014-03-07 11:23 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:\n\n\n> Good news: HCE offers the required dispatch ability -- they call it AID\n> (Application ID).\n>\n\nYes, that's also something adopted from the existing Smartcard world.\nExisting smartcards can contain different payment applications (for example\nin Germany the \"Maestro\" and the \"Geldkarte\" application on the same card).\nSo the terminal can actively request one specific application within the\nSmartcard.\n\nBut as Mike correctly said, we have no pre-existing infrastructure to\nsupport. So decisions should only be based on what makes sense for the\nfuture.\n\n\nBad news: It seems - at least CATEGORY_PAYMENT - very credit card centric.\n>\n\nI'm not sure about this. I've built several HCE test apps and tested them\nwith readers (and other phones used as reader) but I did not notice any\ndifference to using CATEGORY_OTHER (besides that the apps using\nCATEGORY_PAYMENT appear in KitKat's new shiny \"Tap & Pay\" menu).\n\n\nHCE seems to cover only the payer side. I wonder if there is also an API\n> for \"reader emulation\" which we would need for apps to support the payee\n> side.\n>\n\nYou are free to implement whatever protocol you want. On the reader side\nyou simply do a IseDep \"connect()\" and send your commands with\n\"transceive()\" (\nhttps://developer.android.com/reference/android/nfc/tech/IsoDep.html#transceive(byte[])).\nAfter sending the initial ISO 7816-4 \"SELECT APPLICATION\" command (see here\nfor some ISO 7816-4 doc:\nhttp://www.cardwerk.com/smartcards/smartcard_standard_ISO7816-4_6_basic_interindustry_commands.aspx#chap6_11)\nwhich triggers Android HCE routing mechanism to route all following PDUs to\nyour HCE app, you are free to send whatever you want.\n\nAnything you send with \"transceve()\" on the sender side, will be received\nwithin your HCE application in the \"processCommandApdu\" method:\nhttps://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#processCommandApdu(byte[],\nandroid.os.Bundle)\n\nThe only limitation is that you have a strict request/response model. The\nreader terminal (or the reading phone) sends a request, the HCE phone sends\na response.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/c8eeac9b/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-03-06T14:20:17",
                "message_text_only": "On Mar 6, 2014 3:47 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n>\n> I just did my first contactless nfc payment with a MasterCard. It worked\nvery well and was quite delightful - definitely want to be doing more of\nthese in future. I think people will come to expect this kind of\nno-friction payment experience and Bitcoin will need to match it, so here\nare some notes on what's involved.\n>\n> 3) Have some kind of decentralised reputation network. I spent some time\nthinking about this, but it rapidly became very complicated and feels like\nan entirely separate project that should stand alone from Bitcoin itself.\nPerhaps rather than try to make a global system, social data could be\nexchanged (using some fancy privacy preserving protocols?) so if your\nfriends have decided to trust seller X, your phone automatically trusts\nthem too.\n\nA reputation network might be an interesting idea, or several different\nnetworks with different curators (to prevent complete centralization), like\nhow the US credit score system has three main companies who track your\nscore. Something like a GPG ring of trust, with addresses signing other\naddresses would work well, if some sort of Stealth address or HD wallet\nroot was the identity gaining the reputation, then address re-use wouldn't\nhave to be mandatory.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/566df540/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T17:07:18",
                "message_text_only": ">\n> if some sort of Stealth address or HD wallet root was the identity gaining\n> the reputation, then address re-use wouldn't have to be mandatory.\n>\nThe identity would be the X.520 name in the signing cert that signed the\npayment request. It doesn't have to be a difficult to obtain cert. It could\neven be self signed for this use case, but then you lose the security\nbenefits and a key rotation would delete your reputation, so in practice I\nthink most people would want the reputation to accrue to the name itself.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/862d156e/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-03-06T18:08:51",
                "message_text_only": "On Thu, Mar 6, 2014 at 11:07 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> if some sort of Stealth address or HD wallet root was the identity gaining\n>> the reputation, then address re-use wouldn't have to be mandatory.\n>>\n> The identity would be the X.520 name in the signing cert that signed the\n> payment request. It doesn't have to be a difficult to obtain cert. It could\n> even be self signed for this use case, but then you lose the security\n> benefits and a key rotation would delete your reputation, so in practice I\n> think most people would want the reputation to accrue to the name itself.\n>\n\nThat makes sense, to have self-signed certificates as a basic start, but\nthen is it possible to have a Bitcoin user (address) add reputation/sign\nsuch a certificate, rather than having a central signing authority? If\nthere was a way for a Bitcoin user to provide feedback on a payment (ECDSA\nsignature from one of the addresses involved in the payment, signing an\nidentifier of the payment and a feedback score) such that any user can add\nto the reputation with just the Bitcoin infrastructure, without having to\nlearn X.500 certificate signing on top of EC signatures? If there was a\nstandard structure for a message to be EC-signed with your Bitcoin client,\nand then a distributed store of those signed messages, could that form a\nreputation score?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/3f35eb4a/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T18:12:01",
                "message_text_only": ">\n> If there was a way for a Bitcoin user to provide feedback on a payment\n> (ECDSA signature from one of the addresses involved in the payment, signing\n> an identifier of the payment and a feedback score)\n>\n\nWell now you're getting into the area that I said \"rapidly got very\ncomplicated\".\n\nDefine bitcoin user? What stops me paying myself to accrue positive\nreputation? Etc.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/83e811cd/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-03-06T18:20:24",
                "message_text_only": "On Thu, Mar 6, 2014 at 12:12 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> If there was a way for a Bitcoin user to provide feedback on a payment\n>> (ECDSA signature from one of the addresses involved in the payment, signing\n>> an identifier of the payment and a feedback score)\n>>\n>\n> Well now you're getting into the area that I said \"rapidly got very\n> complicated\".\n>\n> Define bitcoin user? What stops me paying myself to accrue positive\n> reputation? Etc.\n>\n\nYes, I could see how that could get hairy; it would also need some ability\nto rate those giving the feedback, such that if you generate a whole bunch\nof payments to yourself, those payees don't have reputation on their own,\nso their review of you as a payer isn't weighted that highly. Then you have\nthat ring-of-trust possibility where Alice thinks Eve is bad, so the fact\nthat Eve thinks Bob is good doesn't impact Alice. But if Carol thinks Eve\nis good, Carol thinks Bob is good too, so Bob's reputation is different\nbased on who's asking, and it's the responsibility of the individual\nmembers to maintain their own good/bad user lists. Would you think that's a\ngood thing or a bad thing to give the individual players that level of\ncontrol/responsibility?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/be0073a8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T18:24:04",
                "message_text_only": ">\n> it's the responsibility of the individual members to maintain their own\n> good/bad user lists. Would you think that's a good thing or a bad thing to\n> give the individual players that level of control/responsibility?\n>\n\nIf it's explicit, I think it's a non starter and nobody will bother with\nit, especially not just for instant payments.\n\nIf it's just a case of \"link your wallet with your Facebook account\" and\nrequires no more effort than that, some people might, but of course the\nuser experience would be rather random. Hey why did that guy in front of me\nget instant payments and I had to confirm even though we bought the same\nthings?\n\nI'm not a big fan of UX's that appear totally random to the user.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/3b53d97e/attachment.html>"
            },
            {
                "author": "Joel Kaartinen",
                "date": "2014-03-07T18:07:57",
                "message_text_only": "I think a reputation network is more complicated than is needed for\nthis. This can be solved by the market.\n\nWhat is needed is a simple method for each individual user to mark\ncertain merchant as trusted. For example, if your device gets an\nuntrusted payment request, it'll make a small sound, light up the screen\nand ask the user to authorize the payment. The user then has the choice\nof adding the merchant to trust list, authorizing just a single\ntransaction or not paying (and perhaps adding to the user's publicly\nshared untrusted list?).\n\nThis way, even lacking a trust architecture, only the first payment to a\nmerchant needs to take several seconds. If trust is granted, the next\npayments will be swift.\n\nThe lack of chargebacks presents a clear risk to the customer, though,\nso a need for a third party that can keep the merchants honest exists.\nThis opens up markets for transaction insurance companies. Even though\nbitcoin transactions are final, if a transaction insurance company\noffers to cover your losses in the event of fraudulent charge, the risk\nis practically eliminated.\n\nSuch an insurance company would have a strong incentive to make sure the\nmerchants they insure for behave. Otherwise they'll suffer the losses. I\nthink this would result in an equally trustworthy but more decentralized\nsystem than with credit cards.\n\n- Joel\n\nOn 06.03.2014 16:20, Brooks Boyd wrote:\n>\n>\n> On Mar 6, 2014 3:47 AM, \"Mike Hearn\" <mike at plan99.net\n> <mailto:mike at plan99.net>> wrote:\n> >\n> > I just did my first contactless nfc payment with a MasterCard. It\n> worked very well and was quite delightful - definitely want to be\n> doing more of these in future. I think people will come to expect this\n> kind of no-friction payment experience and Bitcoin will need to match\n> it, so here are some notes on what's involved.\n> >\n> > 3) Have some kind of decentralised reputation network. I spent some\n> time thinking about this, but it rapidly became very complicated and\n> feels like an entirely separate project that should stand alone from\n> Bitcoin itself. Perhaps rather than try to make a global system,\n> social data could be exchanged (using some fancy privacy preserving\n> protocols?) so if your friends have decided to trust seller X, your\n> phone automatically trusts them too.\n>\n> A reputation network might be an interesting idea, or several\n> different networks with different curators (to prevent complete\n> centralization), like how the US credit score system has three main\n> companies who track your score. Something like a GPG ring of trust,\n> with addresses signing other addresses would work well, if some sort\n> of Stealth address or HD wallet root was the identity gaining the\n> reputation, then address re-use wouldn't have to be mandatory.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/335b10cd/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-06T14:39:52",
                "message_text_only": "Hi Mike\n\n\nNot sure if you've seen it, but here is how we do NFC right now\nhttp://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.\nFor now this is just an NDEF URI message with Bitcoin URI inside, and then\ntransaction itself propagated to the network by the phone using it's own\nInternet connection. Far not ideal, but even this is supported only by\nAndreas' Wallet, so we cannot move ahead alot really until other wallets\nwill have some support in this area.\nAs you see - it's taking just few seconds, most of which is manual payment\nconfirmation. Btw, ignore my first screen tap, where I'm selecting wallets\n- it's an unlikely thing to happen IRL to have several wallets installed at\nthe same time.\n\n\u200bAlso, I think many people may not know about Oyster cards, so this might\nneed little bit of explanation. And btw, have you been to London lately?\nOyster readers now accept contactless cards directly along with Oyster\ncards itself. I wonder if eventually in future we could add bitcoin support\ninto that system directly, without hardware replacements.\n\nI cannot put much into the actual protocol discussion, but I'm happy to\nprovide feedback on the side of actual POS implementation needed and\ntestbase if required.\n\nHave an \u200bidea - it's a good thing to cap confirmationless payments, but the\nactual cap value definition can be tricky considering Bitcoin volatility.\nInless you want to tie it to some external price definition thirdparty\nservice it could be tied to transaction fees. I mean - if with Bitcoin v0.9\ntransaction fees will become really floating, and it should eventually\nreach equilibrium that will reflect some real world value. Probably a tiny\nvalue, but probably also rather stable value. So confirmationless payment\ncap may be defined as <current_average_transaction_fee>x10000.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/38cc0863/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-06T16:46:53",
                "message_text_only": "> Not sure if you've seen it, but here is how we do NFC right\n> now http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal. \n\nThanks for the video! It's always good to see these things in action so\nyou can start believing in it.\n\n> For now this is just an NDEF URI message with Bitcoin URI inside, and\n> then transaction itself propagated to the network by the phone using\n> it's own Internet connection. Far not ideal, but even this is supported\n> only by Andreas' Wallet, so we cannot move ahead alot really until other\n> wallets will have some support in this area.\n\nSupporting Bluetooth is optional in the sense that if a wallet should\nnot support it, you will still receive the transaction via the P2P\nnetwork. So I'd say definately go for Bluetooth.\n\n> As you see - it's taking just few seconds, most of which is manual\n> payment confirmation.\n\nI wonder about the receipt step -- are you generating a PDF on device\nand sending it via NFC? This is something that could be supported by the\nBIP70 payment protocol. We should try to avoid the second tap, its not\nintuitive.\n\n> And btw, have you been to London\n> lately? Oyster readers now accept contactless cards directly along with\n> Oyster cards itself.\n\nContactless cards? Last I was to London, the Oyster card was already\ncontactless. Have there ever been magnet-strip-based Oyster cards?\n\n> I wonder if eventually in future we could add\n> bitcoin support into that system directly, without hardware replacements.\n\nNeat thought (-:"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T16:52:20",
                "message_text_only": ">\n> I wonder about the receipt step -- are you generating a PDF on device\n> and sending it via NFC? This is something that could be supported by the\n> BIP70 payment protocol. We should try to avoid the second tap, its not\n> intuitive.\n>\n\nTogether, the signed PaymentRequest and the transactions in the block chain\nshould act like a receipt: it's proof you requested payment in a certain\nway, and I satisfied that payment. So it's proof of payment and the memo\nfield can describe what I bought.\n\n\n> Contactless cards? Last I was to London, the Oyster card was already\n> contactless. Have there ever been magnet-strip-based Oyster cards?\n>\n\nHe means, contactless credit cards can be used too. No need to enroll for\nOyster specifically. I guess in the long run Oyster and its equivalents in\nother cities (octopus etc) will be phased out.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/e870034c/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-06T18:03:20",
                "message_text_only": "2014-03-06 16:46 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n\n> Supporting Bluetooth is optional in the sense that if a wallet should\n> not support it, you will still receive the transaction via the P2P\n> network. So I'd say definately go for Bluetooth.\n>\n\u200bYes, it's part of the\u200b plan. Just again - I need to make sure we support\nall major wallets. And no other wallets actually support NFC by now, not\ntalking about bluetooth. So I imagine we will decide and implement together\nsome solution here, both on the wallet and POS sides, but I will have to\nkeep URI method and even QR codes for backwards compatibility, and wait for\nother main wallets to accept innovations before we will be able to\ncompletely switch to it.\nAs I said earlier - bluetooth support for my POS is not a problem, we can\nplug it in easily and make it work. Support among all hardware/software and\npolished user experience - this is a main thing here really.\n\n I wonder about the receipt step -- are you generating a PDF on device\n\n>  and sending it via NFC? This is something that could be supported by the\n> BIP70 payment protocol. We should try to avoid the second tap, its not\n> intuitive.\n>\n\u200bNo, I'm generating it on server and sending only URL via NFC. I think this\narea will change before we launch in production. Ideally I want \u200bthe device\nto be completely autonomous, controlled on site by the merchant, probably\nwith an app on his phone. But right now we have a backend server that gives\nmerchant a dashboard with device configuration control, transactions\nhistory, daily reconciliation data and copies of receipts. So the PDF is\nsent from that server.\n\n\u200bWe should avoid second \u200btap ideally, but we need to make sure receipts and\npayment proofs are usable and understandable for both payers and payees.\nRight now a paperless PDF-only process is already a huge leap ahead\ncomparing to numerous paper receipts printed for each transaction by\nexisting POS systems.\nImplementing proof of payment based on BIP70 payment request+transaction in\nthe blockchain+memo will require even bigger shift in the merchant's view\non how business runs. Also it will need additional software on his side to\nactually be able to view and confirm these proofs of payment. In theory -\nyes, BIP70 will create a way to implement proof of payment. In practice in\nreal life right now I don't see it viable, it will take time to adopt and\nfew intermediary steps like PDF based paperless process I've implemented.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/a287f682/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-07T08:59:43",
                "message_text_only": "On 03/06/2014 07:03 PM, Alex Kotenko wrote:\n\n>     Supporting Bluetooth is optional in the sense that if a wallet should\n>     not support it, you will still receive the transaction via the P2P\n>     network. So I'd say definately go for Bluetooth.\n> \n> \u200bYes, it's part of the\u200b plan. Just again - I need to make sure we\n> support all major wallets. And no other wallets actually support NFC by\n> now, not talking about bluetooth. So I imagine we will decide and\n> implement together some solution here, both on the wallet and POS sides,\n> but I will have to keep URI method and even QR codes for backwards\n> compatibility, and wait for other main wallets to accept innovations\n> before we will be able to completely switch to it.\n> As I said earlier - bluetooth support for my POS is not a problem, we\n> can plug it in easily and make it work. Support among all\n> hardware/software and polished user experience - this is a main thing\n> here really.\n\nSure, take all the time you need.\n\nAll I wanted to say is you don't need to break Bitcoin URI compatibility\nin order to support direct payments via Bluetooth. It's simply an\nadd-on, both in the BIP21 and the BIP70 cases."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T17:03:27",
                "message_text_only": "Thanks Alex!\n\nAbout the video - I'm curious how your device is better than just a regular\ntablet. Could you give us the elevator pitch? :)\n\nOn Thu, Mar 6, 2014 at 3:39 PM, Alex Kotenko <alexykot at gmail.com> wrote:\n\n> I mean - if with Bitcoin v0.9 transaction fees will become really\n> floating, and it should eventually reach equilibrium that will reflect some\n> real world value. Probably a tiny value, but probably also rather stable\n> value. So confirmationless payment cap may be defined as\n> <current_average_transaction_fee>x10000.\n>\n\nI guess fees will wander up and down depending on system load rather than\nreal world value - but maybe you're right. That said, all wallets sync\nexchange rates automatically already.\n\nIn some Star Trek future, perhaps we would want Bitcoin to be independent\nof other value units. But I'm not convinced such a world will ever exist.\nArguably, a stable currency would slowly become worth more over time in\nline with economic growth. But then for stable prices you would need\nsomething like a fake currency that was \"backed by\" (really: represented\nby) a basket of goods. Otherwise over time your rent would go up in real\nterms, for good real reason.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/608da23e/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-06T18:49:06",
                "message_text_only": "2014-03-06 17:03 GMT+00:00 Mike Hearn <mike at plan99.net>:\n\n> About the video - I'm curious how your device is better than just a\n> regular tablet. Could you give us the elevator pitch? :)\n\n\nsure, here:\n- tougher than phone/tablet. Phone dropped on the tiled floor is likely to\ndie instantly. Our device is designed to survive everyday intense use and\ndrops on the floor also.\n- cheaper than phone/tablet. Usual phone/tablet costs few hundred bucks,\nour device on mass scale will be definitely cheaper than that. Maybe a\nnoname chinese tablet will match on price, but then again what about\nreliability?\n- simpler than phone/tablet. Phone app needs some basic understanding to\noperate. Cheap cashier employees hired by small corner shops might find\nthis a challenge.\n- safer than phone/tablet. No option to install random apps on it. And no\ntemptation to steal it from the counter.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/c800007f/attachment.html>"
            },
            {
                "author": "Jan Vornberger",
                "date": "2014-03-08T08:52:42",
                "message_text_only": "On Thu, Mar 06, 2014 at 02:39:52PM +0000, Alex Kotenko wrote:\n> Not sure if you've seen it, but here is how we do NFC right now\n> http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.\n\nVery interesting, thanks for sharing! Are the two devices on the same\nwifi network in the demo? In my experience transaction propagation\nthrough the Bitcoin network takes a couple of seconds longer on average,\nso I'm surprised it's that fast here.\n\nYou probably share this view, but I just wanted to repeat, that from my\nexperiments, I think that sending the transaction only over the Bitcoin\nnetwork should be a rarely-used fallback. It usually takes a little\nlonger than you would like for a POS solution and every so often you\ndon't get the transaction at all until the next block. And then what do\nyou do? Maybe you would need to ask the customer to pay again, to get\nthings done now, and put the previous transaction in some kind of refund\nmode, where - when you finally get it - you send it back somewhere. But\nit's really a problematic corner case - but yet it will happen\noccasionally with network-only propagation.\n\nIn the context of this discussion, I would also like to share a video of\na prototype system:\n\n  https://www.youtube.com/watch?v=mguRpvf3aMc\n\nHere shown is the (currently no longer working) Bridgewalker client, but\nit is also fully compatible with Andreas' wallet. The client picks up\nthe payment details via NFC (as a Bitcoin URI - could and should be\nupdated to use payment protocol) and transmits a copy of the transaction\nvia Bluetooth (using the simple convention first implemented by\nAndreas). One optimization I did in the Bridgewalker client is, that it\nalready opens the Bluetooth connection when presenting the user with the\nconfirmation dialog. This results in a little additional speed-up, as\nthe connection is already \"warmed up\", when the user confirms. All code\nof this prototype is open source, as is the Bridgewalker client.\n\n>From my testing, I can say that NFC for getting the payment details +\nBluetooth for transmitting the transaction back works well. I'm a bit\nskeptical about using NFC also for the back-channel, but maybe for cases\nwhere there is no additional user confirmation it could work.\n\nOne problem with Bluetooth I see is, that it seems to be mostly turned\noff by users and many seem to perceive it as \"insecure\", to have it\nactive, as a result of earlier Bluetooth hacks. So I'm not sure if that\nwill turn out to be a problem for usability when rolled-out in practice."
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-10T15:09:00",
                "message_text_only": "2014-03-08 8:52 GMT+00:00 Jan Vornberger <jan at uos.de>:\n\u200b\u200b\n\n> On Thu, Mar 06, 2014 at 02:39:52PM +0000, Alex Kotenko wrote:\n> > Not sure if you've seen it, but here is how we do NFC right now\n> > http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.\n>\n> Very interesting, thanks for sharing! Are the two devices on the same\n> wifi network in the demo? In my experience transaction propagation\n> through the Bitcoin network takes a couple of seconds longer on average,\n> so I'm surprised it's that fast here.\n>\nNo, devices on this video are not on the same network, and even if they\nwould - I cannot control what \u200b\u200bremote hosts my phone would connect to, so\ntransaction may anyway travel around the globe before coming to the POS\neven if they would be on one LAN.\nAs for transaction times - I'd say it varies. \u200bFrom my extensive testing\nmost of transactions usually come through within 2-5 seconds, but roughly\none in ten transactions may take more time, sometimes much more time.\n\n\nYou probably share this view, but I just wanted to repeat, that from my\n> experiments, I think that sending the transaction only over the Bitcoin\n> network should be a rarely-used fallback. It usually takes a little\n> longer than you would like for a POS solution and every so often you\n> don't get the transaction at all until the next block. And then what do\n> you do? Maybe you would need to ask the customer to pay again, to get\n> things done now, and put the previous transaction in some kind of refund\n> mode, where - when you finally get it - you send it back somewhere. But\n> it's really a problematic corner case - but yet it will happen\n> occasionally with network-only propagation.\n>\n\u200bYes, \u200bI'm certain about that we need to switch to BIP70 asap. As I said\nearlier - support among the wallets is the biggest problem here really.\nOnly Andreas' Wallet supports it right now AFAIK, and even in there it's\nonly as \"LABS feature\", so will be turned off for most of users.\n\n\nIn the context of this discussion, I would also like to share a video of\n> a prototype system:\n>\n>   https://www.youtube.com/watch?v=mguRpvf3aMc\n>\n> Here shown is the (currently no longer working) Bridgewalker client, but\n> it is also fully compatible with Andreas' wallet. The client picks up\n> the payment details via NFC (as a Bitcoin URI - could and should be\n> updated to use payment protocol) and transmits a copy of the transaction\n> via Bluetooth (using the simple convention first implemented by\n> Andreas). One optimization I did in the Bridgewalker client is, that it\n> already opens the Bluetooth connection when presenting the user with the\n> confirmation dialog. This results in a little additional speed-up, as\n> the connection is already \"warmed up\", when the user confirms. All code\n> of this prototype is open source, as is the Bridgewalker client.\n>\nYes, I've seen this demonstration, I think it was on reddit about two\nmonth\u200b\u200b ago. Looks interesting, but by that time most of my client software\nwas already done, so I couldn't really use this.\n\n\n\n> >From my testing, I can say that NFC for getting the payment details +\n> Bluetooth for transmitting the transaction back works well. I'm a bit\n> skeptical about using NFC also for the back-channel, but maybe for cases\n> where there is no additional user confirmation it could work.\n\n\u200bNFC\n\u200bas \u200b\nback channel\n\u200bdefinitely \u200b\nwill not work\n\u200b. Mike proposed something \u200blike a threshold to define minimal amount\navailable for spending without confirmation, but I don't see this thing\nbecoming widely used any time soon, and before that we will need to have\n\"confirm\" button tap.\n\n\nOne problem with Bluetooth I see is, that it seems to be mostly turned\n> off by users and many seem to perceive it as \"insecure\", to have it\n> active, as a result of earlier Bluetooth hacks. So I'm not sure if that\n> will turn out to be a problem for usability when rolled-out in practice.\n>\nYes, this is a problem, I think bluetooth is offline on many devices, and\nkeeping it on all the time will harm security (if not real security, then\nat least perceived by users) and also harm battery life, which will be seen\nas huge problem by the users.\n\u200bWould be great to be \u200bable to control BT state automatically from within\nthe wallet app with user permission given once on installation time, but\nnot sure if it's possible in Android.\n\n\n\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/3d2ced81/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-10T19:28:53",
                "message_text_only": "On 03/10/2014 04:09 PM, Alex Kotenko wrote:\n\n> \u200bYes, \u200bI'm certain about that we need to switch to BIP70 asap. As I said\n> earlier - support among the wallets is the biggest problem here really.\n> Only Andreas' Wallet supports it right now AFAIK, and even in there it's\n> only as \"LABS feature\", so will be turned off for most of users.\n\nJust a small clarification here. Bitcoin Wallet supports the customer\nside of the protocol since 2011, without any \"Labs enabling\"! This means\nyou've got an install base of half a million devices that you can\ninteroperate with. Sure, a lot of users will have Bluetooth switched\noff. The UI flow to enable it while paying is pretty smooth though.\n\nThe merchant side used to have the Labs enabling but this is gone since\na few weeks."
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-10T19:47:55",
                "message_text_only": "Ah, I see, so it's only payee who has to enable it, payer side is on by\ndefault. Then fine, situation is better than I thought. We'll look at\nimplementing BIP70 asap.\n\nBest regards,\nAlex Kotenko\n\n\n2014-03-10 19:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:\n\n> On 03/10/2014 04:09 PM, Alex Kotenko wrote:\n>\n> > \u200bYes, \u200bI'm certain about that we need to switch to BIP70 asap. As I said\n> > earlier - support among the wallets is the biggest problem here really.\n> > Only Andreas' Wallet supports it right now AFAIK, and even in there it's\n> > only as \"LABS feature\", so will be turned off for most of users.\n>\n> Just a small clarification here. Bitcoin Wallet supports the customer\n> side of the protocol since 2011, without any \"Labs enabling\"! This means\n> you've got an install base of half a million devices that you can\n> interoperate with. Sure, a lot of users will have Bluetooth switched\n> off. The UI flow to enable it while paying is pretty smooth though.\n>\n> The merchant side used to have the Labs enabling but this is gone since\n> a few weeks.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/9051f674/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-07T19:08:04",
                "message_text_only": "On Thu, Mar 06, 2014 at 10:45:31AM +0100, Mike Hearn wrote:\n> I just did my first contactless nfc payment with a MasterCard. It worked\n> very well and was quite delightful - definitely want to be doing more of\n> these in future. I think people will come to expect this kind of\n> no-friction payment experience and Bitcoin will need to match it, so here\n> are some notes on what's involved.\n> \n> There are two aspects that can be implemented independently of each other:\n> \n> 1) The physical/NFC layer.\n> 2) The risk analysis layer.\n> \n> A contactless payment needs two things to work: one is a VERY fast, low\n> latency communication between payment device (phone in our case) and\n> terminal. I couldn't find actual latency specs yet but it felt like using\n> an Oyster card, which aims for <400msec.\n\nWhat matters more than the latency is the *variability*. I would spec this\nsystem for no less than 200ms, and no more than 250ms to be 'standard'.\n\n> ..... so I bet we'd need to optimise the bootup process of the Android\n> wallet app. Right now it does slow things like deserialising giant protocol\n> buffers and is just generally not optimised for startup time. Loading the\n> wallet, reading the payment request over NFC, checking the cert signatures,\n> making the trust decision, calculating a transaction, signing it, sending\n> it back to the recipient all in under 400 msec would be a tough (but fun)\n> programming challenge. Some of the steps can be parallelised and modern\n> phones are mostly multicore.\n\nIf you have to invoke a java/ios/etc app you are never going to be consistent,\nhowever if you have a GPL linux kernel module (like I proposed for my still\nhypothetical 7coin), you should have no trouble meeting those specs. \n\nI'd like to be able to load my java app, tell it to put $50 on my 'instant'/nfc\nwallet, and then let the kernel module spend out the $50 whenever the phone \ngets swiped by somehting.\n\nIf you do this right, every device has a well-known payment address for it's\n'instant' wallet, and it should be trivial for merchants to just look at the\nblockchain and confirm the instant wallet has a sufficient balance to cover\nthe transaction.\n\nOne more comment... having a bitcoin payment application 'check certs' seems\nlike a great way to ensure that Visa maintains their market share. \n\nIf it's my phone, and I press the hardware payment button, and I only put \n$50 on it, I frankly don't care if there's a cert or not. The last thing I\nwant is a 'certificate validation error' when I'm trying to buy a soda.\n\n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-10T16:04:02",
                "message_text_only": ">\n> I just did my first contactless nfc payment with a MasterCard. It worked\n> very well and was quite delightful - definitely want to be doing more of\n> these in future.\n>\n\nA bit more competitive intelligence - turns out that the experience isn't\nquite so good after all. After trying a few more times to use contactless\npayments, I found it has a ~75% failure rate based on my usage.\n\nBy far the biggest problem is also the most predictable - it's very common\nhere for merchants to require minimum payment sizes before they'll accept\ncredit cards, often quite high, like 20 CHF or more. But the PIN-less mode\nonly works for payments below a certain threshold, I haven't quite figured\nout what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF.\nSo there turns out to be an incredibly thin price range in which the simple\ntouch-to-pay system actually works. Most of the time, either they:\n\na) Reject cards entirely because the payment is too small\nb) Don't have the right hardware, or the hardware just mysteriously fails\nto work.\nc) Require a PIN because the payment is too large\n\nI'm sure Bitcoin can do better than this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/50aa9765/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-10T16:14:10",
                "message_text_only": "Just to add some more numbers, in Canada, the maximum is $50 and I've used it for transactions of $5, even less.\n\nI use it every day to pay for breakfast and it works through my wallet, even with multiple NFC enabled cards in there (though not overlapping). The experience is quite smooth; simply tap my wallet on the POS and a few seconds later it's approved.\n\njp\n\nOn Mar 10, 2014, at 9:04 AM, Mike Hearn <mike at plan99.net> wrote:\n\n>> I just did my first contactless nfc payment with a MasterCard. It worked very well and was quite delightful - definitely want to be doing more of these in future.\n> \n> A bit more competitive intelligence - turns out that the experience isn't quite so good after all. After trying a few more times to use contactless payments, I found it has a ~75% failure rate based on my usage.\n> \n> By far the biggest problem is also the most predictable - it's very common here for merchants to require minimum payment sizes before they'll accept credit cards, often quite high, like 20 CHF or more. But the PIN-less mode only works for payments below a certain threshold, I haven't quite figured out what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF. So there turns out to be an incredibly thin price range in which the simple touch-to-pay system actually works. Most of the time, either they:\n> \n> a) Reject cards entirely because the payment is too small\n> b) Don't have the right hardware, or the hardware just mysteriously fails to work.\n> c) Require a PIN because the payment is too large\n> \n> I'm sure Bitcoin can do better than this.\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/936d80e9/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-03-10T16:27:12",
                "message_text_only": "It heavily depends on where you use it. Here in UK any card payments are\noften limited to minimum of \u00a35 in small shops that have heavy transaction\nfees burden and low margins. Big networks with more resources often let you\npay as little as you want by card, and they more often have NFC enabled POS\ndevices.\nSo it's not an NFC or POS limit, but a business decision for these small\nmerchants. Bitcoin can address this issue for sure, but this doesn't\nconcern NFC.\n\u200b\u200b\n\n\n2014-03-10 16:14 GMT+00:00 Jean-Paul Kogelman <jeanpaulkogelman at me.com>:\n\n>\n> Just to add some more numbers, in Canada, the maximum is $50 and I've used\n> it for transactions of $5, even less.\n>\n> I use it every day to pay for breakfast and it works through my wallet,\n> even with multiple NFC enabled cards in there (though not overlapping). The\n> experience is quite smooth; simply tap my wallet on the POS and a few\n> seconds later it's approved.\n>\n> jp\n>\n> On Mar 10, 2014, at 9:04 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n> I just did my first contactless nfc payment with a MasterCard. It worked\n>> very well and was quite delightful - definitely want to be doing more of\n>> these in future.\n>>\n>\n> A bit more competitive intelligence - turns out that the experience isn't\n> quite so good after all. After trying a few more times to use contactless\n> payments, I found it has a ~75% failure rate based on my usage.\n>\n> By far the biggest problem is also the most predictable - it's very common\n> here for merchants to require minimum payment sizes before they'll accept\n> credit cards, often quite high, like 20 CHF or more. But the PIN-less mode\n> only works for payments below a certain threshold, I haven't quite figured\n> out what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF.\n> So there turns out to be an incredibly thin price range in which the simple\n> touch-to-pay system actually works. Most of the time, either they:\n>\n> a) Reject cards entirely because the payment is too small\n> b) Don't have the right hardware, or the hardware just mysteriously fails\n> to work.\n> c) Require a PIN because the payment is too large\n>\n> I'm sure Bitcoin can do better than this.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/049dfc3a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Instant / contactless payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Jan Vornberger",
                "Alex Kotenko",
                "Andreas Schildbach",
                "Mike Hearn",
                "Brooks Boyd",
                "Jean-Paul Kogelman",
                "Joel Kaartinen",
                "Johannes Zweng"
            ],
            "messages_count": 31,
            "total_messages_chars_count": 60676
        }
    },
    {
        "title": "[Bitcoin-development] Instant / contactless payments, IsoDep",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-06T16:55:53",
                "message_text_only": "On 03/06/2014 03:51 PM, Andreas Schildbach wrote:\n\n>>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick\n>>     up the phone the connection breaks.\n>>\n>> If the phone isn't willing to immediately authorise then it'd have to\n>> fall back to HTTPS or Bluetooth as normal.\n> \n> Ok, that would be an option.\n\nOne of the first things to explore is if its possible to dispatch\ndifferent isodep applications to different apps. I know you can add an\nintent filter matching action=android.nfc.action.TECH_DISCOVERED and a\ncustom \"tech filter\" android.nfc.tech.IsoDep. However, as long as there\nis no mime type or similar concept, apps will always fight for access to\nIsoDep endpoints. We will want to avoid that situation."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T17:00:05",
                "message_text_only": "I think maybe the way you do it is to have a NDEF tag that triggers the\napp, and then that starts an IsoDep protocol once opened. I *think*.\n\n\nOn Thu, Mar 6, 2014 at 5:55 PM, Andreas Schildbach <andreas at schildbach.de>wrote:\n\n> On 03/06/2014 03:51 PM, Andreas Schildbach wrote:\n>\n> >>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you\n> pick\n> >>     up the phone the connection breaks.\n> >>\n> >> If the phone isn't willing to immediately authorise then it'd have to\n> >> fall back to HTTPS or Bluetooth as normal.\n> >\n> > Ok, that would be an option.\n>\n> One of the first things to explore is if its possible to dispatch\n> different isodep applications to different apps. I know you can add an\n> intent filter matching action=android.nfc.action.TECH_DISCOVERED and a\n> custom \"tech filter\" android.nfc.tech.IsoDep. However, as long as there\n> is no mime type or similar concept, apps will always fight for access to\n> IsoDep endpoints. We will want to avoid that situation.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to\n> Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works.\n> Faster operations. Version large binaries.  Built-in WAN optimization and\n> the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/142a76ba/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-07T08:45:43",
                "message_text_only": "I doubt that this is possible (with the Android API). But I'll try.\n\n\nOn 03/06/2014 06:00 PM, Mike Hearn wrote:\n> I think maybe the way you do it is to have a NDEF tag that triggers the\n> app, and then that starts an IsoDep protocol once opened. I *think*.\n> \n> \n> On Thu, Mar 6, 2014 at 5:55 PM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     On 03/06/2014 03:51 PM, Andreas Schildbach wrote:\n> \n>     >>     I'm not sure if iso-dep is the way to go here. Afaik as soon\n>     as you pick\n>     >>     up the phone the connection breaks.\n>     >>\n>     >> If the phone isn't willing to immediately authorise then it'd have to\n>     >> fall back to HTTPS or Bluetooth as normal.\n>     >\n>     > Ok, that would be an option.\n> \n>     One of the first things to explore is if its possible to dispatch\n>     different isodep applications to different apps. I know you can add an\n>     intent filter matching action=android.nfc.action.TECH_DISCOVERED and a\n>     custom \"tech filter\" android.nfc.tech.IsoDep. However, as long as there\n>     is no mime type or similar concept, apps will always fight for access to\n>     IsoDep endpoints. We will want to avoid that situation.\n> \n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Subversion Kills Productivity. Get off Subversion & Make the Move to\n>     Perforce.\n>     With Perforce, you get hassle-free workflows. Merge that actually works.\n>     Faster operations. Version large binaries.  Built-in WAN\n>     optimization and the\n>     freedom to use Git, Perforce or both. Make the move to Perforce.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.\n> With Perforce, you get hassle-free workflows. Merge that actually works. \n> Faster operations. Version large binaries.  Built-in WAN optimization and the\n> freedom to use Git, Perforce or both. Make the move to Perforce.\n> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Instant / contactless payments, IsoDep",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andreas Schildbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5293
        }
    },
    {
        "title": "[Bitcoin-development] Stealth Addresses",
        "thread_messages": [
            {
                "author": "Dan Carter",
                "date": "2014-03-06T12:23:40",
                "message_text_only": "I think stealth addresses combined with zk-snarks would obviate the need \nfor CoinJoin.  zk-snarks could be used to hide the coin's value and \nstealth addresses could be used to hide the recipient for payments and \neven mined coins.  More info on zero-knowledge snarks:\n\nhttp://cs.tau.ac.il/~tromer/papers/vnsnark-20131230.pdf\nhttp://cs.tau.ac.il/~tromer/papers/csnark-20131007.pdf\n\nStart with a mined coin: generate a coin secret, create a coinbase \ntransaction with an output to your stealth address and send \nhash(coin-secret + reward-value) + encrypt(coin-secret + reward-value) \nwhere only the recipient (you) can decrypt. (The reward value is known \npublicly but just assume it isn't here for generality). You also embed \nthe 0.2KB zk-snark proof + 3KB verifying key that the hash result is in \nfact SHA256(coin-secret + reward-value), where your private witnesses \nare (coin-secret, reward-value).\n\nNow you could split a coin into as many pieces as you want in a single \ntransaction and send to multiple recipients, some pieces go to yourself \n(change) and others to the payee, every piece would have a different \nrecipient address thanks to stealth addresses, and all values hidden \nthanks to zk-snarks.\n\nSo lets say you want to split the mined coin into two new ones.  You \ncreate a transaction where the input redeems the mined coin using mined \ntx out + your stealth address, and there are two new coins as outputs to \nyour own stealth address each having: hash(new-coin-secret + \nnew-hidden-value) + encrypt(new-coin-secret + new-hidden-value).  You \nalso embed the zk-snark proof that the two new hidden values add up to \nthe original hidden value, and that the two new hash results are in fact \nSHA256(new-coin-secret + new-hidden-value), where your private witnesses \nare (original-coin-secret, original-hidden-value, new-coin-secrets, \nnew-hidden-values).\n\nIf you want to merge two coins into one it's just a split backwards, two \ninputs one output, zk-snark proof that two original hidden values add up \nto the new hidden value and that the new hash result is \nSHA256(new-coin-secret + new-hidden-value).\n\nIf you want to transfer ownership of a coin then just redeem at input, \nand output same as mined coin except using recipient stealth address \n(which is a public key) to encrypt(coin-secret + hidden-value).\n\n- Dan\n\n\n\nOn 2014-01-06 4:03 AM, Peter Todd wrote:\n> * Abstract\n>\n> A Stealth Address is a new type of Bitcoin address and related\n> scriptPubKey/transaction generation scheme that allowers payees to\n> publish a single, fixed, address that payors can send funds efficiently,\n> privately, reliably and non-interactively. Payors do not learn what\n> other payments have been made to the stealth address, and third-parties\n> learn nothing at all. (both subject to an adjustable anonymity set)"
            }
        ],
        "thread_summary": {
            "title": "Stealth Addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Dan Carter"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2817
        }
    },
    {
        "title": "[Bitcoin-development] bip-0021 and bip-0072 ambiguities & mistakes",
        "thread_messages": [
            {
                "author": "William Swanson",
                "date": "2014-03-06T22:38:40",
                "message_text_only": "Hello,\nI am attempting to write a parser for bip-0021 URI's, including\nsupport for the new bip-0072 payment parameters. My goal is absolute\ncorrectness. Unfortunately, these BIP's have a few ambiguities and\nmistakes which ought to be corrected.\n\nFirst, I would like to point out that internet RFC 3986 governs the\ngeneral syntax for URI's. It obsoletes RFC 1738 and various other\nearly RFC's. Since RFC 3986 came out in 2005, I think we can agree\nthat any bitcoin URI scheme should use this and not the earlier ones.\n\nUnfortunately, bip-0021 never actually mentions RFC 3986, which is a\nbig omission. Even worse, bip-0072 explicitly refers to RFC 1738,\nwhich is obsolete. This is a problem, since the old, obsolete standard\nrequires more escapes than are actually necessary. Updating bip-0072\nto refer to RFC 3986 instead would allow shorter, more readable\nbitcoin URI's (things like slashes in payment addresses wouldn't need\nto be escaped).\n\nSecondly, neither of the bip's describe what to do with international\ncharacters. I doubt anybody wants to limit the \"label\" and \"message\"\nparameters to 7-bit ASCII, so a character encoding needs to be\ndefined. RFC reccomends that all new URI schemes use UTF-8 as their\nencoding, which is perfectly reasonable. The bip-0021 standard just\nneeds to actually say so.\n\nFinally, there is an error in the bip-0021 BNF grammar, which never\nmentions the '&' separator between query elements.\n\nWhat is the procedure for getting these BIP's corrected? Submit a pull\nrequest with the changes? Hopefully we can all agree that these fixes\nare useful and necessary.\n\n-William\n\nP.S. The bitcoin-qt client uses QUrl to parse bitcoin uri's, and that\nis based on RFC 3986. Thus, the bitcoin-qt client is probably already\nimplementing these suggestions."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-06T22:59:46",
                "message_text_only": "Yes please, pull req would be great! I also noticed that escaping doesn't\nseem to be necessary, and the resultant de-escaped QRcodes are certainly\nmuch nicer! Thanks!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/a3273152/attachment.html>"
            },
            {
                "author": "William Swanson",
                "date": "2014-03-07T02:16:14",
                "message_text_only": "On Thu, Mar 6, 2014 at 2:59 PM, Mike Hearn <mike at plan99.net> wrote:\n> Yes please, pull req would be great! I also noticed that escaping doesn't\n> seem to be necessary, and the resultant de-escaped QRcodes are certainly\n> much nicer! Thanks!\n\nAll right, I have submitted the pull request. Hopefully, the specified\nbehavior now corresponds more closely to what the bitcoin-qt client is\nactually doing, and to what the RFC recommends.\n\n-William"
            }
        ],
        "thread_summary": {
            "title": "bip-0021 and bip-0072 ambiguities & mistakes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "William Swanson",
                "Mike Hearn"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2571
        }
    },
    {
        "title": "[Bitcoin-development] New IRC name: aschildbach",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-08T19:08:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI just renamed myself on IRC (freenode) to aschildbach. The old name\nwas Goonie. I will most likely only use the new name from now on, at\nleast for Bitcoin-related purposes (-:\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\n\niEYEARECAAYFAlMbarAACgkQymYr4YuHemCjRwCgmjiod+yXeUg5Mtn83k9pXY9U\nrfAAoMxBaNL0e+BuGSXWDCrAtb+77w69\n=UhVB\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "New IRC name: aschildbach",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andreas Schildbach"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 421
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin wiki is down",
        "thread_messages": [
            {
                "author": "Tom Geller",
                "date": "2014-03-08T20:59:49",
                "message_text_only": "Just an FYI: The Bitcoin wiki (https://en.bitcoin.it) is down.\n\nIs there a communication procedure or point person for such things?\n\n---\n          Tom Geller  *  Oberlin, Ohio  *  415-317-1805\n           Writer/Presenter * http://www.tomgeller.com\n         articles, marketing, videos, user guides, books"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-08T23:13:33",
                "message_text_only": "On Sat, Mar 8, 2014 at 12:59 PM, Tom Geller <tom at tomgeller.com> wrote:\n> Just an FYI: The Bitcoin wiki (https://en.bitcoin.it) is down.\n>\n> Is there a communication procedure or point person for such things?\n\nThis works.  The wiki is in the process of changing control/operation.\nNothing to fear."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin wiki is down",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tom Geller",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 603
        }
    },
    {
        "title": "[Bitcoin-development] Multisign payment protocol?",
        "thread_messages": [
            {
                "author": "Drak",
                "date": "2014-03-10T17:39:03",
                "message_text_only": "I was wondering if there would be merit in a kind of BIP for a payment\nprotocol using multisig?\n\nCurrently, setting up a multisig is quite a feat. Users have to exchange\npublic keys, work out how to get the public keys from their addresses. If\none of the parties are not savvy enough, an malicious party could easily be\nsetup that was 2 of 3 instead of 2 of 2 where the malicious party generates\nthe multisig address+script and thus be able to run off with funds anyway.\n\nIt's also terribly complex to generate and keep track of. There's been a\nnice attempt at creating an browser interface at coinb.in/multisig but it\nstill lacks the kind of ease with created by the payment protocol. If there\nwas a BIP then it would go a long way to aiding future usability of\nmultisig wallet implementations.\n\nWhat are your thoughts?\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/0b5ecd92/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-10T17:49:04",
                "message_text_only": "In my experience, best process for standardizing something is:\n\n1) Somebody has a great idea\n2) They implement it\n3) Everybody agrees, \"Great idea!\" and they copy it.\n4) Idea gets refined by the people copying it.\n5) It gets standardized.\n\nMutisig wallets are at step 2 right now. BIP is step 5, in my humble\nopinion...\n\n\n\n\nOn Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:\n\n> I was wondering if there would be merit in a kind of BIP for a payment\n> protocol using multisig?\n>\n> Currently, setting up a multisig is quite a feat. Users have to exchange\n> public keys, work out how to get the public keys from their addresses. If\n> one of the parties are not savvy enough, an malicious party could easily be\n> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates\n> the multisig address+script and thus be able to run off with funds anyway.\n>\n> It's also terribly complex to generate and keep track of. There's been a\n> nice attempt at creating an browser interface at coinb.in/multisig but it\n> still lacks the kind of ease with created by the payment protocol. If there\n> was a BIP then it would go a long way to aiding future usability of\n> multisig wallet implementations.\n>\n> What are your thoughts?\n>\n> Drak\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/b72ac2aa/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-10T18:01:28",
                "message_text_only": "Then of course I tried to do this with BIP 10 \n<https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when\nArmory implemented offline-transactions two years ago.  I got some\npositive feedback, but no one wanted to help improve it, etc.  I guess\nnobody else was doing it and/or cared at the time.  So I continue to use\nBIP 10 even though it's pretty crappy.  I wanted it to be useful for\nmultisig, too, but it has some deficiencies there (it was done when\nArmory was extremely young and OP_EVAL was still on the table).\n\nHowever, with all this activity, we should start thinking about that and\ndiscussing it.  Otherwise, I'll just do my own thing again and probably\nend up with something that fits my own needs, but not anyone else's. \nReally though, multisig shouldn't require all the same app to work.\n\n-Alan\n\n\nOn 03/10/2014 01:49 PM, Gavin Andresen wrote:\n> In my experience, best process for standardizing something is:\n>\n> 1) Somebody has a great idea\n> 2) They implement it\n> 3) Everybody agrees, \"Great idea!\" and they copy it.\n> 4) Idea gets refined by the people copying it.\n> 5) It gets standardized.\n>\n> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble\n> opinion...\n>\n>\n>\n>\n> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org\n> <mailto:drak at zikula.org>> wrote:\n>\n>     I was wondering if there would be merit in a kind of BIP for a\n>     payment protocol using multisig?\n>\n>     Currently, setting up a multisig is quite a feat. Users have to\n>     exchange public keys, work out how to get the public keys from\n>     their addresses. If one of the parties are not savvy enough, an\n>     malicious party could easily be setup that was 2 of 3 instead of 2\n>     of 2 where the malicious party generates the multisig\n>     address+script and thus be able to run off with funds anyway.\n>\n>     It's also terribly complex to generate and keep track of. There's\n>     been a nice attempt at creating an browser interface at\n>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks\n>     the kind of ease with created by the payment protocol. If there\n>     was a BIP then it would go a long way to aiding future usability\n>     of multisig wallet implementations.\n>\n>     What are your thoughts?\n>\n>     Drak\n>\n>     ------------------------------------------------------------------------------\n>     Learn Graph Databases - Download FREE O'Reilly Book\n>     \"Graph Databases\" is the definitive new guide to graph databases\n>     and their\n>     applications. Written by three acclaimed leaders in the field,\n>     this first edition is now available. Download your free book today!\n>     http://p.sf.net/sfu/13534_NeoTech\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> -- \n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/2e157654/attachment.html>"
            },
            {
                "author": "kjj",
                "date": "2014-03-11T00:04:14",
                "message_text_only": "I was trying to use bip10 for multisig and coinjoin, but there was a \nproblem with it.  I'll have to look back at my notes, but I thought I \nsent you a message about it. And then real life swallowed my bitcoin time...\n\nI think the bottom line was that it would be useful in the generic case \nwith just one minor change.  If there is interest, and it sounds like \nthere just may be, I can dust off my notes and see where I left it.  \nProbably should do it soon before someone implements it in PB or XML.\n\nAlan Reiner wrote:\n> Then of course I tried to do this with BIP 10 \n> <https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when \n> Armory implemented offline-transactions two years ago.  I got some \n> positive feedback, but no one wanted to help improve it, etc.  I guess \n> nobody else was doing it and/or cared at the time.  So I continue to \n> use BIP 10 even though it's pretty crappy.  I wanted it to be useful \n> for multisig, too, but it has some deficiencies there (it was done \n> when Armory was extremely young and OP_EVAL was still on the table).\n>\n> However, with all this activity, we should start thinking about that \n> and discussing it.  Otherwise, I'll just do my own thing again and \n> probably end up with something that fits my own needs, but not anyone \n> else's.  Really though, multisig shouldn't require all the same app to \n> work.\n>\n> -Alan\n>\n>\n> On 03/10/2014 01:49 PM, Gavin Andresen wrote:\n>> In my experience, best process for standardizing something is:\n>>\n>> 1) Somebody has a great idea\n>> 2) They implement it\n>> 3) Everybody agrees, \"Great idea!\" and they copy it.\n>> 4) Idea gets refined by the people copying it.\n>> 5) It gets standardized.\n>>\n>> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble \n>> opinion...\n>>\n>>\n>>\n>>\n>> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org \n>> <mailto:drak at zikula.org>> wrote:\n>>\n>>     I was wondering if there would be merit in a kind of BIP for a\n>>     payment protocol using multisig?\n>>\n>>     Currently, setting up a multisig is quite a feat. Users have to\n>>     exchange public keys, work out how to get the public keys from\n>>     their addresses. If one of the parties are not savvy enough, an\n>>     malicious party could easily be setup that was 2 of 3 instead of\n>>     2 of 2 where the malicious party generates the multisig\n>>     address+script and thus be able to run off with funds anyway.\n>>\n>>     It's also terribly complex to generate and keep track of. There's\n>>     been a nice attempt at creating an browser interface at\n>>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks\n>>     the kind of ease with created by the payment protocol. If there\n>>     was a BIP then it would go a long way to aiding future usability\n>>     of multisig wallet implementations.\n>>\n>>     What are your thoughts?\n>>\n>>     Drak\n>>\n>>     ------------------------------------------------------------------------------\n>>     Learn Graph Databases - Download FREE O'Reilly Book\n>>     \"Graph Databases\" is the definitive new guide to graph databases\n>>     and their\n>>     applications. Written by three acclaimed leaders in the field,\n>>     this first edition is now available. Download your free book today!\n>>     http://p.sf.net/sfu/13534_NeoTech\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> -- \n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/7a45e78c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-10T17:50:12",
                "message_text_only": "No, this doesn't make any sense. Multisig outputs are a tool you use to\nbuild helpful features, not a feature in and of themselves.\n\nBy all means create a nice protocol, implementation and BIP for something\nlike:\n\n- Creation of multi-user money pools for managing an organisations funds\n- Dispute mediated transactions\n- Watchdog services that provide a third party risk analysis of transactions\n- Micropayment channels (actually me and Matt already did this, sans BIP)\n\nbut trying to do just \"multisig\" won't work well.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/15a41f5c/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-10T18:12:49",
                "message_text_only": "Payment protocol currently supports payments to multi-sig addresses.\n\nIn general, almost all wallet software sucks RE multisig.  Just try\nany of these actions in Bitcoin-Qt or another wallet:\n* obtain a public key you control, given a bitcoin address\n* easily share public keys\n* easily share partially signed transactions\n* build a P2SH multisig address from public keys, reliably.  Right\nnow, participants have no idea about pubkey order, leading various N\npossible P2SH addresses, given a list of public keys.  Reproducing the\nP2SH address is harder than it should be.\n* track \"partially controlled\" balance (balance of coins of which you\nmay sign at least 1 of N)\n* support for remote oracles and services that provide 1-of-N signatures\netc.\n\n\n\n\nOn Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:\n> I was wondering if there would be merit in a kind of BIP for a payment\n> protocol using multisig?\n>\n> Currently, setting up a multisig is quite a feat. Users have to exchange\n> public keys, work out how to get the public keys from their addresses. If\n> one of the parties are not savvy enough, an malicious party could easily be\n> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates\n> the multisig address+script and thus be able to run off with funds anyway.\n>\n> It's also terribly complex to generate and keep track of. There's been a\n> nice attempt at creating an browser interface at coinb.in/multisig but it\n> still lacks the kind of ease with created by the payment protocol. If there\n> was a BIP then it would go a long way to aiding future usability of multisig\n> wallet implementations.\n>\n> What are your thoughts?\n>\n> Drak\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-11T00:09:56",
                "message_text_only": "As far as I'm concerned, the way forward is to scrap BIP 10 and build up\nsomething new that is flexible and extensible.  Also, my understanding\nis that there may be room in the payment protocol for this stuff though\nI'm not sure if it is really adapted well to all the steps: exchanging\npublic keys, creating multi-sig/P2SH addresses, proposing multi-sig\nspends, bundling meta-data needed for lite/offline nodes, aggregating\nsignatures, and any other details.\n\nWhen I start multisig integration into Armory (very soon!) I'll write a\nlist of requirements for the new format/process and post it here for a\nwider discussion.  Certainly, if the payment protocol can already handle\nall this, that would be awesome.\n\n-Alan\n\n\nOn 03/10/2014 08:04 PM, kjj wrote:\n> I was trying to use bip10 for multisig and coinjoin, but there was a\n> problem with it.  I'll have to look back at my notes, but I thought I\n> sent you a message about it.  And then real life swallowed my bitcoin\n> time...\n>\n> I think the bottom line was that it would be useful in the generic\n> case with just one minor change.  If there is interest, and it sounds\n> like there just may be, I can dust off my notes and see where I left\n> it.  Probably should do it soon before someone implements it in PB or XML.\n>\n> Alan Reiner wrote:\n>> Then of course I tried to do this with BIP 10 \n>> <https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when\n>> Armory implemented offline-transactions two years ago.  I got some\n>> positive feedback, but no one wanted to help improve it, etc.  I\n>> guess nobody else was doing it and/or cared at the time.  So I\n>> continue to use BIP 10 even though it's pretty crappy.  I wanted it\n>> to be useful for multisig, too, but it has some deficiencies there\n>> (it was done when Armory was extremely young and OP_EVAL was still on\n>> the table).\n>>\n>> However, with all this activity, we should start thinking about that\n>> and discussing it.  Otherwise, I'll just do my own thing again and\n>> probably end up with something that fits my own needs, but not anyone\n>> else's.  Really though, multisig shouldn't require all the same app\n>> to work.\n>>\n>> -Alan\n>>\n>>\n>> On 03/10/2014 01:49 PM, Gavin Andresen wrote:\n>>> In my experience, best process for standardizing something is:\n>>>\n>>> 1) Somebody has a great idea\n>>> 2) They implement it\n>>> 3) Everybody agrees, \"Great idea!\" and they copy it.\n>>> 4) Idea gets refined by the people copying it.\n>>> 5) It gets standardized.\n>>>\n>>> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble\n>>> opinion...\n>>>\n>>>\n>>>\n>>>\n>>> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org\n>>> <mailto:drak at zikula.org>> wrote:\n>>>\n>>>     I was wondering if there would be merit in a kind of BIP for a\n>>>     payment protocol using multisig?\n>>>\n>>>     Currently, setting up a multisig is quite a feat. Users have to\n>>>     exchange public keys, work out how to get the public keys from\n>>>     their addresses. If one of the parties are not savvy enough, an\n>>>     malicious party could easily be setup that was 2 of 3 instead of\n>>>     2 of 2 where the malicious party generates the multisig\n>>>     address+script and thus be able to run off with funds anyway.\n>>>\n>>>     It's also terribly complex to generate and keep track of.\n>>>     There's been a nice attempt at creating an browser interface at\n>>>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks\n>>>     the kind of ease with created by the payment protocol. If there\n>>>     was a BIP then it would go a long way to aiding future usability\n>>>     of multisig wallet implementations.\n>>>\n>>>     What are your thoughts?\n>>>\n>>>     Drak\n>>>\n>>>     ------------------------------------------------------------------------------\n>>>     Learn Graph Databases - Download FREE O'Reilly Book\n>>>     \"Graph Databases\" is the definitive new guide to graph databases\n>>>     and their\n>>>     applications. Written by three acclaimed leaders in the field,\n>>>     this first edition is now available. Download your free book today!\n>>>     http://p.sf.net/sfu/13534_NeoTech\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>>\n>>> -- \n>>> --\n>>> Gavin Andresen\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/13534_NeoTech\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/0f32ee9e/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-11T00:14:56",
                "message_text_only": "All of that only melds with the payment protocol under an extremely\nexpansive definition of \"payment.\"  The payment protocol is really\ngeared towards a direct one-to-one relationship.\n\nWe can make the payment protocol do all this, if you squeeze and push\nand try reall hard; it is mainly a question of protocol design and\nintended usage:  is PP intended to be, ultimately, an expansive,\nuniversal protocol for gossiping with other parties about bitcoin\ntransactions in a not-flood-fill manner?\n\n\n\n\nOn Mon, Mar 10, 2014 at 8:09 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> As far as I'm concerned, the way forward is to scrap BIP 10 and build up\n> something new that is flexible and extensible.  Also, my understanding is\n> that there may be room in the payment protocol for this stuff though I'm not\n> sure if it is really adapted well to all the steps: exchanging public keys,\n> creating multi-sig/P2SH addresses, proposing multi-sig spends, bundling\n> meta-data needed for lite/offline nodes, aggregating signatures, and any\n> other details.\n>\n> When I start multisig integration into Armory (very soon!) I'll write a list\n> of requirements for the new format/process and post it here for a wider\n> discussion.  Certainly, if the payment protocol can already handle all this,\n> that would be awesome.\n>\n> -Alan\n>\n>\n> On 03/10/2014 08:04 PM, kjj wrote:\n>\n> I was trying to use bip10 for multisig and coinjoin, but there was a problem\n> with it.  I'll have to look back at my notes, but I thought I sent you a\n> message about it.  And then real life swallowed my bitcoin time...\n>\n> I think the bottom line was that it would be useful in the generic case with\n> just one minor change.  If there is interest, and it sounds like there just\n> may be, I can dust off my notes and see where I left it.  Probably should do\n> it soon before someone implements it in PB or XML.\n>\n> Alan Reiner wrote:\n>\n> Then of course I tried to do this with BIP 10  when Armory implemented\n> offline-transactions two years ago.  I got some positive feedback, but no\n> one wanted to help improve it, etc.  I guess nobody else was doing it and/or\n> cared at the time.  So I continue to use BIP 10 even though it's pretty\n> crappy.  I wanted it to be useful for multisig, too, but it has some\n> deficiencies there (it was done when Armory was extremely young and OP_EVAL\n> was still on the table).\n>\n> However, with all this activity, we should start thinking about that and\n> discussing it.  Otherwise, I'll just do my own thing again and probably end\n> up with something that fits my own needs, but not anyone else's.  Really\n> though, multisig shouldn't require all the same app to work.\n>\n> -Alan\n>\n>\n> On 03/10/2014 01:49 PM, Gavin Andresen wrote:\n>\n> In my experience, best process for standardizing something is:\n>\n> 1) Somebody has a great idea\n> 2) They implement it\n> 3) Everybody agrees, \"Great idea!\" and they copy it.\n> 4) Idea gets refined by the people copying it.\n> 5) It gets standardized.\n>\n> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble\n> opinion...\n>\n>\n>\n>\n> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:\n>>\n>> I was wondering if there would be merit in a kind of BIP for a payment\n>> protocol using multisig?\n>>\n>> Currently, setting up a multisig is quite a feat. Users have to exchange\n>> public keys, work out how to get the public keys from their addresses. If\n>> one of the parties are not savvy enough, an malicious party could easily be\n>> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates\n>> the multisig address+script and thus be able to run off with funds anyway.\n>>\n>> It's also terribly complex to generate and keep track of. There's been a\n>> nice attempt at creating an browser interface at coinb.in/multisig but it\n>> still lacks the kind of ease with created by the payment protocol. If there\n>> was a BIP then it would go a long way to aiding future usability of multisig\n>> wallet implementations.\n>>\n>> What are your thoughts?\n>>\n>> Drak\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-11T01:15:28",
                "message_text_only": "Multisig is orthogonal to the payment protocol (but payment protocol is\nneeded first).\n\nThere need to be protocols for:\n\na) Establishing multisig wallets of various sorts. See:\n  https://moqups.com/gavinandresen/no8mzUDB/\n  https://moqups.com/gavinandresen/no8mzUDB/p:ab18547e0\n... etc.  for a UI mock-up.\n  There needs to be some protocol so all participants in a multisig wallet\ncontribute keys (actually, we should just assume everybody uses BIP32 HD\npublic keys so we get privacy from the start).\n\nMulti-person shared wallets, escrows, and \"wallet protection service\"\nwallets (which might be protected with two-factor authentication) are\ndifferent use cases and probably use slightly different protocols (and will\nprobably need different BIPs eventually).\n\n\nb) Gathering signatures for a multisig spend. Here is where the payment\nprotocol is useful; the PaymentRequest message should be passed around so\nall participants know what is being paid for, and maybe a partially-signed\nPayment message is where the signatures are gathered (or maybe the\nsignatures are sent separately and one of the participants creates and\nsubmits the Payment and gets the PaymentACK... \"to be designed\").\n  See:\n    https://moqups.com/gavinandresen/no8mzUDB/p:a7e81be96\n    https://moqups.com/gavinandresen/no8mzUDB/p:af7339204\n... for UI mock-up for the multi-person-spend case.\n\nAnd maybe a protocol for \"I don't want to be part of this multisig any more\n/ I lost control of my private key don't trust me in this multisig any\nmore\".\n\n\n\nOn Mon, Mar 10, 2014 at 8:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> All of that only melds with the payment protocol under an extremely\n> expansive definition of \"payment.\"  The payment protocol is really\n> geared towards a direct one-to-one relationship....\n\n\n\n>\n>\n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/1ce818ae/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-03-11T11:43:20",
                "message_text_only": "Gavin,\n\nYou have pretty much nailed my intent in both respects. This sets up a way\nto negotiate the address and abstract away the nasty details of finding\npublic keys from bitcoin addresses, and provides a nice clean way for\nredemption abstracting away the long strings of hex.\n\nFor redemption, I think as each party signs the tx if the script returns\ntrue, it would be acceptable to just go right ahead and broadcast it, or\nmaybe as you suggest all signatures go back to the initiating party and\nthey do the final work.\n\nI very much like the idea of assuming each party uses HD wallets, that\ncertainly simplifies things greatly. I also like the use of email addresses\nas a negotiation medium, but I also wonder if this could be made agnostic\nin any BIP proposal so it could work with other communication mediums like\nbitmessage for example (just forward thinking anonymity a little).\n\nI definitely think there is a need for a protocol because multisig,\nregardless of the application has two technically involved steps:\nnegotiation of an address, and redemption of any subsequently encumbered\nfunds. A protocol would enable different wallet implementations to\nparticipate in such a transaction and make wide-spread use much more likely\nand possible.\n\nDrak\n\n\nOn 11 March 2014 01:15, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> Multisig is orthogonal to the payment protocol (but payment protocol is\n> needed first).\n>\n> There need to be protocols for:\n>\n> a) Establishing multisig wallets of various sorts. See:\n>   https://moqups.com/gavinandresen/no8mzUDB/\n>   https://moqups.com/gavinandresen/no8mzUDB/p:ab18547e0\n> ... etc.  for a UI mock-up.\n>   There needs to be some protocol so all participants in a multisig wallet\n> contribute keys (actually, we should just assume everybody uses BIP32 HD\n> public keys so we get privacy from the start).\n>\n> Multi-person shared wallets, escrows, and \"wallet protection service\"\n> wallets (which might be protected with two-factor authentication) are\n> different use cases and probably use slightly different protocols (and will\n> probably need different BIPs eventually).\n>\n>\n> b) Gathering signatures for a multisig spend. Here is where the payment\n> protocol is useful; the PaymentRequest message should be passed around so\n> all participants know what is being paid for, and maybe a partially-signed\n> Payment message is where the signatures are gathered (or maybe the\n> signatures are sent separately and one of the participants creates and\n> submits the Payment and gets the PaymentACK... \"to be designed\").\n>   See:\n>     https://moqups.com/gavinandresen/no8mzUDB/p:a7e81be96\n>     https://moqups.com/gavinandresen/no8mzUDB/p:af7339204\n> ... for UI mock-up for the multi-person-spend case.\n>\n> And maybe a protocol for \"I don't want to be part of this multisig any\n> more / I lost control of my private key don't trust me in this multisig any\n> more\".\n>\n>\n>\n> On Mon, Mar 10, 2014 at 8:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> All of that only melds with the payment protocol under an extremely\n>> expansive definition of \"payment.\"  The payment protocol is really\n>> geared towards a direct one-to-one relationship....\n>\n>\n>\n>>\n>>\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/5b55c4d3/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-11T12:38:55",
                "message_text_only": "On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:\n> I very much like the idea of assuming each party uses HD wallets, that\n> certainly simplifies things greatly.\n\nIt also assumes a reality different from our current one.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-11T13:51:36",
                "message_text_only": "On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:\n> > I very much like the idea of assuming each party uses HD wallets, that\n> > certainly simplifies things greatly.\n>\n> It also assumes a reality different from our current one.\n>\n\nMultisig wallets are a different reality from our current one, so when we\nmove to that new reality we should do it correctly from the beginning.\n\n-- \n--\nGavin Andrese\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/b7b38273/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-11T14:13:48",
                "message_text_only": "Sure, but I don't see wallets being able to _assume_ _remote_ parties\nhave an HD wallet for a long, long time.  Interoperability common\nsense implies the environment will be heterogenous, perhaps forever,\ninvalidating assume-each-party-uses-HD logic.\n\nOn Tue, Mar 11, 2014 at 9:51 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:\n>> > I very much like the idea of assuming each party uses HD wallets, that\n>> > certainly simplifies things greatly.\n>>\n>> It also assumes a reality different from our current one.\n>\n>\n> Multisig wallets are a different reality from our current one, so when we\n> move to that new reality we should do it correctly from the beginning.\n>\n> --\n> --\n> Gavin Andrese\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-11T14:23:32",
                "message_text_only": "On Tue, Mar 11, 2014 at 10:13 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Sure, but I don't see wallets being able to _assume_ _remote_ parties\n> have an HD wallet for a long, long time.  Interoperability common\n> sense implies the environment will be heterogenous, perhaps forever,\n> invalidating assume-each-party-uses-HD logic.\n\n\nIf the remote party is one of the parties involved in a multisig, and\nspeaks the \"Lets set up a multisig wallet together / Lets spend from a\nmultisig\" protocols, then it should be perfectly reasonable to assume that\nthey're HD-capable.\n\nRemote parties paying into a multisig, or receiving funds from a multisig,\ndon't have to support it (that's what P2SH gives us).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/2aba3b81/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-11T14:34:50",
                "message_text_only": "On Tue, Mar 11, 2014 at 10:23 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> If the remote party is one of the parties involved in a multisig, and speaks\n> the \"Lets set up a multisig wallet together / Lets spend from a multisig\"\n> protocols, then it should be perfectly reasonable to assume that they're\n> HD-capable.\n\nDisagree.  It is an unnecessary restriction.  People are already\nwriting and starting to deploy multisig wallets in the field, that do\nnot match this assumption.\n\nIn general, HD is really cool, but even the barest amount of\ninfrastructure is lacking.  Popular libraries and the reference client\nall lack support.  Building a protocol that assumes HD is optimistic\nat this stage.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-11T14:44:28",
                "message_text_only": "(#include <rant.h>)\n\nRight now, HD is hot air.  Let us end the pie-in-the-sky assumptions\nabout how HD will save the day, with zero code to back it up.  Bitcoin\nWallet purportedly fails to rotate addresses, a privacy ugly, because\nof this Waiting For Godot situation.  An attempt to add a simple,\nstateless RPC stalled because we are all Waiting For Godot, also:\nhttps://github.com/bitcoin/bitcoin/pull/3520\n\nUntil the major user wallets and bitcoind have -basic- HD support, it\nis premature to build anything on top of HD.  We really have no clue\nat this juncture how difficult will be the HD rollout.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-03-11T14:53:39",
                "message_text_only": "Speaking from the MultiBit perspective, all future protocol development\n(with the exception of critical security and network compatibility fixes)\nwill be put into a HD wallet. Over time we want to see \"MultiBit Classic\"\ngracefully retire and be fully superseded.\n\nRight now, HD is not out there but there is a lot of work going on between\nwallet developers to harmonise on HD implementation through BIP32/39. The\nresult of that work should see a significant migration away from random\nprivate keys.\n\nThus it would appear likely that by the time this protocol sees widespread\nuse the presence of HD is likely to be rising fast or possibly dominant.\n\nAt MultiBit we anticipate a release of HD code within 2 months, with\nprivate beta occurring within weeks. Trezor and Electrum may be earlier\nthan this. As far as I am aware both Hive and Haskoin are committed to HD.\n\nIf anyone wants early access to the alpha code, let me know and I'll make\nthe arrangements.\n\n\nOn 11 March 2014 14:44, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> (#include <rant.h>)\n>\n> Right now, HD is hot air.  Let us end the pie-in-the-sky assumptions\n> about how HD will save the day, with zero code to back it up.  Bitcoin\n> Wallet purportedly fails to rotate addresses, a privacy ugly, because\n> of this Waiting For Godot situation.  An attempt to add a simple,\n> stateless RPC stalled because we are all Waiting For Godot, also:\n> https://github.com/bitcoin/bitcoin/pull/3520\n>\n> Until the major user wallets and bitcoind have -basic- HD support, it\n> is premature to build anything on top of HD.  We really have no clue\n> at this juncture how difficult will be the HD rollout.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/bc37f8d9/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-11T15:18:50",
                "message_text_only": "You can follow HDW progress in bitcoinj on this branch:\n\n  https://github.com/bitcoinj/bitcoinj/commits/keychain\n\nI've been working on it for a couple of months now. Electrum (Thomas V) is\nalso making good progress, and Trezor already uses HD wallets. I think most\npopular end user wallets except blockchain.info and Bitcoin Core will\nsupport HDW soon enough.\n\nAt any rate, as Gavin said already, the best way to make a feature you want\nhappen is just to write it. Devrandom is already working on a watchdog\nservice, as is another group (TrustedCoin), and that's an obvious use for\nmultisig/p2sh. They have API's already, it's just a case of standardising\nthem once we get more experience.\n\n\n\n\nOn Tue, Mar 11, 2014 at 3:53 PM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> Speaking from the MultiBit perspective, all future protocol development\n> (with the exception of critical security and network compatibility fixes)\n> will be put into a HD wallet. Over time we want to see \"MultiBit Classic\"\n> gracefully retire and be fully superseded.\n>\n> Right now, HD is not out there but there is a lot of work going on between\n> wallet developers to harmonise on HD implementation through BIP32/39. The\n> result of that work should see a significant migration away from random\n> private keys.\n>\n> Thus it would appear likely that by the time this protocol sees widespread\n> use the presence of HD is likely to be rising fast or possibly dominant.\n>\n> At MultiBit we anticipate a release of HD code within 2 months, with\n> private beta occurring within weeks. Trezor and Electrum may be earlier\n> than this. As far as I am aware both Hive and Haskoin are committed to HD.\n>\n> If anyone wants early access to the alpha code, let me know and I'll make\n> the arrangements.\n>\n>\n> On 11 March 2014 14:44, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> (#include <rant.h>)\n>>\n>> Right now, HD is hot air.  Let us end the pie-in-the-sky assumptions\n>> about how HD will save the day, with zero code to back it up.  Bitcoin\n>> Wallet purportedly fails to rotate addresses, a privacy ugly, because\n>> of this Waiting For Godot situation.  An attempt to add a simple,\n>> stateless RPC stalled because we are all Waiting For Godot, also:\n>> https://github.com/bitcoin/bitcoin/pull/3520\n>>\n>> Until the major user wallets and bitcoind have -basic- HD support, it\n>> is premature to build anything on top of HD.  We really have no clue\n>> at this juncture how difficult will be the HD rollout.\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/80c7821c/attachment.html>"
            },
            {
                "author": "Miron",
                "date": "2014-03-11T17:11:48",
                "message_text_only": "On Tue, 2014-03-11 at 16:18 +0100, Mike Hearn wrote:\n> You can follow HDW progress in bitcoinj on this branch:\n> \n> \n>   https://github.com/bitcoinj/bitcoinj/commits/keychain\n> \n>    \n> I've been working on it for a couple of months now. Electrum (Thomas\n> V) is also making good progress, and Trezor already uses HD wallets. I\n> think most popular end user wallets except blockchain.info and Bitcoin\n> Core will support HDW soon enough.\n\nInterestingly, Blockchain's android wallet is based on Android Wallet /\nbitcoinj.  So with HD in bitcoinj we would get Multibit, Android Wallet\n(Andreas Schildbach's) and remove one roadblock to Blockchain going HD.\nElectrum HD seems more or less ready.  So I'm optimistic that we'll see\na pretty fast transition to HD for the majority of the user base.\n\nHD is important for some multisig flows, including the watchdog type\nwhere you want to detect change going back to the wallet.\n\n> \n> At any rate, as Gavin said already, the best way to make a feature you\n> want happen is just to write it. Devrandom is already working on a\n> watchdog service, as is another group (TrustedCoin), and that's an\n> obvious use for multisig/p2sh. They have API's already, it's just a\n> case of standardising them once we get more experience.\n\nWe have a proposed flow for watchdog type multisig\nhere:\n\nhttps://cryptocorp.co/technology.htm\n\nand a reference implementation off the Electrum 2.0 branch.\n\nIt actually works just like a regular spend from a UX point of view,\nunless the watchdog decides that it needs a second factor for a risky\ntransaction.  With a risky transaction, the user just gets a\ncallback or enters an OTP.\n\n-- \nMiron"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-11T15:37:42",
                "message_text_only": "> Trezor and Electrum may be earlier than this.\n\nSorry for not joining the discussion earlier.\n\nI have postponed the release of bip32 features in Electrum due to \nongoing discussions with Trezor and bitcoinj developers.\nI planned to post a summary in a separate thread, but this info is also \nrelevant for this thread, so I'm posting here.\n(sorry if this is a bit offtopic, though)\n\nI plan to create a 2-factor authentication service that uses p2sh \naddresses in Electrum.\nAll addresses are derived from the wallet root seed, and should be \nrecoverable from it.\n(of course this departs from scenarios where master keys are generated \nindependently;\nmy opinion is that both should be possible)\n\nSo, when the user activates 2fa protection, the root private key is \ndeleted from their hard drive, as well as the\nmaster private key of one of the branches used to create p2sh addresses \n(which is sent to a remote server).\n\nSee this (fairly old) description here for more details: \nhttps://bitcointalk.org/index.php?topic=274182.0\n\nSince I still want to be able to generate 1of1 accounts after the 2fa \nprotection is activated,\n1of 1 accounts should not be generated directly from the root of the tree.\nThus, an extra level must be inserted in the tree.\n\nFor example, 1of1 addresses can be derived as follows:\n\nm/reserved'/n'\n\nwhere n is the account index, and \"reserved\" is an index that indicates \nthe type of address.\n(0 would be reserved for 1of1 addresses)\n\nslush suggested that another layer of derivation would be useful, in \norder to use wallets\nwith altcoins on the same seed. This lead to this type of derivation:\n\nm/coin'/reserved'/n'\n\nwhere \"coin\" would be 0 for Bitcoin, and \"reserved\" would be 0 for 1of1 \naddresses\n\nThomas"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-11T21:12:45",
                "message_text_only": "On Tue, Mar 11, 2014 at 10:13:48AM -0400, Jeff Garzik wrote:\n> Sure, but I don't see wallets being able to _assume_ _remote_ parties\n> have an HD wallet for a long, long time.  Interoperability common\n> sense implies the environment will be heterogenous, perhaps forever,\n> invalidating assume-each-party-uses-HD logic.\n\nMaybe never: you can implement a wallet that uses stealth addresses for\nchange, and doing appears to be advantageous in some scenarious with\nregard to privacy.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000a636d318d7384d2891c788af10e50b8d1e27b64df847f9117b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/cb72c940/attachment.sig>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-11T17:41:44",
                "message_text_only": "Hello,\n\nI wanted to just add a very brief note to this discussion, that presently\nfor multisignature creation and management (new transaction etc) I've been\nusing this: https://coinb.in/multisig/\n\nThere were some initial bumps in the road but they were worked out,\n\nsee full thread more or less beginning from here:\n\nhttps://bitcointalk.org/index.php?topic=390046.msg4687868#msg4687868\n\nCurious as to what wallets actually support multisig / P2SH at this point?\nUnsure.  Am assuming more than previously.\n\n\n\n> On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:\n>> > I very much like the idea of assuming each party uses HD wallets, that\n>> > certainly simplifies things greatly.\n>>\n>> It also assumes a reality different from our current one.\n>>\n>\n> Multisig wallets are a different reality from our current one, so when we\n> move to that new reality we should do it correctly from the beginning.\n>\n> --\n> --\n> Gavin Andrese\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2014-03-12T00:29:09",
                "message_text_only": "Hello people,\n\nWe are working on some of this stuff. We had some very early draft on\nhow we envisioned multisig happening. It is all implemented in Haskoin\navailable as multiple repositories in Github. I am happy to see this\ngathering momentum.\n\nOur multisig system uses BIP-0032 HD wallets, and there will soon be\nBIP-0039 support for keys compatibility.\n\nOur wallet uses synced trees rooted at the extended pubkeys of the\nparticipants. Currently we are sorting public keys in the scripts to\navoid ambiguity.\n\nDownload haskoin-wallet:\n\ncabal install haskoin-wallet\n\nCheck out the hw command (installed in ~/.cabal/bin/hw). Use importtx to\nbring transactions into the wallet. You must initialize first with a\nseed and create an account. It supports both regular and multisig accounts.\n\nPerhaps this can lead to interesting discussions on key exchange, and\nthe appropriate handling of wallet metadata. I\u2019d love to work on a\nproper standard that could lead us to compatible implementations.\n\nThis document explains how we do it now:\n\nhttp://haskoin.com/~xeno/hd-multisig-wallet.html\n\nCheers!\n\n-- \nBe Happy :)\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xFF4BF34C.asc\nType: application/pgp-keys\nSize: 20270 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xFF4BF34C.asc\nType: application/pgp-keys\nSize: 20269 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 901 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-12T02:35:52",
                "message_text_only": "I might as well throw in a word about Armory.  After our next release in\na couple weeks, we will be going full-speed at new wallets and BIP32\nintegration.  Just like Jean-Pierre mentioned, we'll be using parallel\ntrees to generate P2SH addresses after sorting the keys\nlexicographically.  We plan to introduce the concept of a wallet\n\"bundle\" (that name is far from concrete... I'd love a better word). \nAll wallets in a bundle are protected by the same backup, and stored in\nthe same file.  The default behavior will be use new branches in the\nsame BIP32 tree when a user creates a new \"wallet\", though we will allow\nmultiple bundles in advanced and expert usermode (which is needed to\nhave watching-only wallets from a different seed created from an offline\ncomputer).\n\nHowever, we do plan to allow separate parties to create\nmultisig-intended wallets with public parts that can be exported and\ncombined with other users.  We feel this is critical, as it allows for\nlinked wallets in which there was never a single-point of failure from\nkey-generation to signing.  This is especially important for contexts\nwhere employees may be handling a company's Bitcoins wallets.\n\nOn this topic, I have gotten a lot of inquiries into BIP 38 and 39.  I\nwas not clear whether those BIPs were worth prioritizing ... i.e. is\nthere a general consensus from a variety of wallet developers that they\nshould be supported?  Rather, I'm happy to start prioritizing them if\nothers do too, but I haven't spent much time trying to understand them\nto even know if they're mature, yet.\n\n-Alan\n\n\nOn 03/11/2014 08:29 PM, Jean-Pierre Rupp wrote:\n> Hello people,\n>\n> We are working on some of this stuff. We had some very early draft on\n> how we envisioned multisig happening. It is all implemented in Haskoin\n> available as multiple repositories in Github. I am happy to see this\n> gathering momentum.\n>\n> Our multisig system uses BIP-0032 HD wallets, and there will soon be\n> BIP-0039 support for keys compatibility.\n>\n> Our wallet uses synced trees rooted at the extended pubkeys of the\n> participants. Currently we are sorting public keys in the scripts to\n> avoid ambiguity.\n>\n> Download haskoin-wallet:\n>\n> cabal install haskoin-wallet\n>\n> Check out the hw command (installed in ~/.cabal/bin/hw). Use importtx to\n> bring transactions into the wallet. You must initialize first with a\n> seed and create an account. It supports both regular and multisig accounts.\n>\n> Perhaps this can lead to interesting discussions on key exchange, and\n> the appropriate handling of wallet metadata. I?d love to work on a\n> proper standard that could lead us to compatible implementations.\n>\n> This document explains how we do it now:\n>\n> http://haskoin.com/~xeno/hd-multisig-wallet.html\n>\n> Cheers!\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/ed33704b/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2014-03-12T02:48:13",
                "message_text_only": "Ciphrex CoinVault (https://ciphrex.com) is currently using parallel trees with lexicographic sorting of keys.\n\nCoinVault is also using a partially signed transaction format whereby 0-length placeholders are used for missing signatures in the transaction scripts. Once all the required signatures to satisfy the policy are present, the remaining zero-length placeholders are removed so the transaction can be broadcast to the network. These partially signed transactions can be shared with other parties to an account or other signing devices for the purpose of requesting additional signatures.\n\n-Eric\n\n\nOn Mar 11, 2014, at 7:35 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> I might as well throw in a word about Armory.  After our next release in a couple weeks, we will be going full-speed at new wallets and BIP32 integration.  Just like Jean-Pierre mentioned, we'll be using parallel trees to generate P2SH addresses after sorting the keys lexicographically.  We plan to introduce the concept of a wallet \"bundle\" (that name is far from concrete... I'd love a better word).  All wallets in a bundle are protected by the same backup, and stored in the same file.  The default behavior will be use new branches in the same BIP32 tree when a user creates a new \"wallet\", though we will allow multiple bundles in advanced and expert usermode (which is needed to have watching-only wallets from a different seed created from an offline computer).\n> \n> However, we do plan to allow separate parties to create multisig-intended wallets with public parts that can be exported and combined with other users.  We feel this is critical, as it allows for linked wallets in which there was never a single-point of failure from key-generation to signing.  This is especially important for contexts where employees may be handling a company's Bitcoins wallets.\n> \n> On this topic, I have gotten a lot of inquiries into BIP 38 and 39.  I was not clear whether those BIPs were worth prioritizing ... i.e. is there a general consensus from a variety of wallet developers that they should be supported?  Rather, I'm happy to start prioritizing them if others do too, but I haven't spent much time trying to understand them to even know if they're mature, yet.\n> \n> -Alan\n> \n> \n> On 03/11/2014 08:29 PM, Jean-Pierre Rupp wrote:\n>> Hello people,\n>> \n>> We are working on some of this stuff. We had some very early draft on\n>> how we envisioned multisig happening. It is all implemented in Haskoin\n>> available as multiple repositories in Github. I am happy to see this\n>> gathering momentum.\n>> \n>> Our multisig system uses BIP-0032 HD wallets, and there will soon be\n>> BIP-0039 support for keys compatibility.\n>> \n>> Our wallet uses synced trees rooted at the extended pubkeys of the\n>> participants. Currently we are sorting public keys in the scripts to\n>> avoid ambiguity.\n>> \n>> Download haskoin-wallet:\n>> \n>> cabal install haskoin-wallet\n>> \n>> Check out the hw command (installed in ~/.cabal/bin/hw). Use importtx to\n>> bring transactions into the wallet. You must initialize first with a\n>> seed and create an account. It supports both regular and multisig accounts.\n>> \n>> Perhaps this can lead to interesting discussions on key exchange, and\n>> the appropriate handling of wallet metadata. I\u2019d love to work on a\n>> proper standard that could lead us to compatible implementations.\n>> \n>> This document explains how we do it now:\n>> \n>> http://haskoin.com/~xeno/hd-multisig-wallet.html\n>> \n>> Cheers!\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> \n>> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/d91af01e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/d91af01e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-12T09:48:01",
                "message_text_only": "Good to see so much activity! But please do remember, there's more to \n\"multisig\" than just keys - you need the whole user experience to be \nplanned out and specced for fully interoperable implementations.\n\nFor the \"group account for an organisation\" feature, you don't really \nwant to expose end users to the notion of a key. Historically this has \njust led to confusion (and an ugly visual explosion of padlocks and \nsmall metal objects :) It'd be much better for the UI to be designed in \nterms of people, perhaps with a bit of social network integration to \navoid having to set up profiles, and then a \"group spend\" feature would \nbehind the scenes rendezvous with the others and swap signatures around, \netc.  So for interop, you'd need to define all the rendezvous protocols \nas well.\n> CoinVault is also using a partially signed transaction format whereby \n> 0-length placeholders are used for missing signatures in the \n> transaction scripts.\nI don't know how you are implementing this/what framework you're using, \nbut I suggest using placeholders that are the length of an actual \nexpected signature, at least when forming the transaction. This is what \nbitcoinj will do because otherwise you could end up miscalculating the \nfee, which is based on the final size. See TransactionSignature.dummy() \n<http://plan99.net/%7Emike/bitcoinj/0.11/com/google/bitcoin/crypto/TransactionSignature.html#dummy%28%29> \nin the API.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/257756f4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 5971 bytes\nDesc: S/MIME Cryptographic Signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/257756f4/attachment.p7s>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-12T15:35:45",
                "message_text_only": "On Wed, Mar 12, 2014 at 5:48 AM, Mike Hearn <mike at plan99.net> wrote:\n> CoinVault is also using a partially signed transaction format whereby\n> 0-length placeholders are used for missing signatures in the transaction\n> scripts.\n>\n> I don't know how you are implementing this/what framework you're using, but\n> I suggest using placeholders that are the length of an actual expected\n> signature, at least when forming the transaction. This is what bitcoinj will\n> do because otherwise you could end up miscalculating the fee, which is based\n> on the final size. See TransactionSignature.dummy() in the API.\n\nThe zero-length placeholder is not a new invention.\n\nThis is what bitcoind produces and expects by default, for a partially\nsigned transaction.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-12T16:02:52",
                "message_text_only": ">\n> This is what bitcoind produces and expects by default, for a partially\n> signed transaction.\n\n\nWhat happens if the act of filling out the signature pushes the transaction\ninto a higher fee level?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/ce19655f/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-03-12T16:09:11",
                "message_text_only": "On 12 March 2014 16:02, Mike Hearn <mike at plan99.net> wrote:\n\n> This is what bitcoind produces and expects by default, for a partially\n>> signed transaction.\n>\n>\n> What happens if the act of filling out the signature pushes the\n> transaction into a higher fee level?\n>\n\nCan this be calculated in advance knowing the initial transaction size and\nthe number of signatures required? Should be quite easy to make an\nestimation from that? It's probably more of an implementation detail\nthough...\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/b876e8cb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-12T16:14:25",
                "message_text_only": ">\n> Can this be calculated in advance knowing the initial transaction size and\n> the number of signatures required?\n>\n\nSure of course. You assume each signature to be placed in the tx is 73\nbytes. Not very hard, but if the tx you get back from the API doesn't\ncontain such a 73-byte sentinel value then it's harder to be sure that this\npart was done correctly.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/ef758ce4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-12T16:24:58",
                "message_text_only": "On Wed, Mar 12, 2014 at 05:14:25PM +0100, Mike Hearn wrote:\n> >\n> > Can this be calculated in advance knowing the initial transaction size and\n> > the number of signatures required?\n> >\n> \n> Sure of course. You assume each signature to be placed in the tx is 73\n> bytes. Not very hard, but if the tx you get back from the API doesn't\n> contain such a 73-byte sentinel value then it's harder to be sure that this\n> part was done correctly.\n\nMultisig signing is an example of untrusted input from an adversary;\nthis is a good example where you'd be better off just handling it\ncorrectly rather than trying to \"make it easier\". (although handling it\ncorrectly may include internally converting every not-yet-signed dummy\nsignature into a 73 bytes pushdata prior to calculating the size)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000e18643801741dc70db6fda175230012b0f697024218cd9ef\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/9677d48c/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-12T16:33:12",
                "message_text_only": "On Wed, Mar 12, 2014 at 12:02 PM, Mike Hearn <mike at plan99.net> wrote:\n>> This is what bitcoind produces and expects by default, for a partially\n>> signed transaction.\n\n> What happens if the act of filling out the signature pushes the transaction\n> into a higher fee level?\n\nPartially signed and multisig transactions within bitcoind go through\nthe raw transaction API, which does absolutely nothing if the sig\npushes the TX to a higher fee level.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-12T16:41:33",
                "message_text_only": ">\n> Partially signed and multisig transactions within bitcoind go through\n> the raw transaction API, which does absolutely nothing if the sig\n> pushes the TX to a higher fee level.\n\n\nWell, we'll have to make sure this is carefully and loudly documented in\nthe new developer part of the website that's being worked on. Because this\nseems like a recipe for people writing flaky apps. In practice it would\nseem like you need to implement the fee loop in your own app:\n\n1) Create tx with an estimated fee level\n2) Add signatures\n3) Submit. If REJECT for too low fees, increment, go to 1 and try again.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/d3156729/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-12T16:47:50",
                "message_text_only": "On Wed, Mar 12, 2014 at 05:41:33PM +0100, Mike Hearn wrote:\n> >\n> > Partially signed and multisig transactions within bitcoind go through\n> > the raw transaction API, which does absolutely nothing if the sig\n> > pushes the TX to a higher fee level.\n> \n> \n> Well, we'll have to make sure this is carefully and loudly documented in\n> the new developer part of the website that's being worked on. Because this\n> seems like a recipe for people writing flaky apps. In practice it would\n> seem like you need to implement the fee loop in your own app:\n> \n> 1) Create tx with an estimated fee level\n> 2) Add signatures\n> 3) Submit. If REJECT for too low fees, increment, go to 1 and try again.\n\nWhy?\n\nIt's the raw transaction API and Bitcoin Core wallet. What should be\ncarefully and loudly documented is the simple advice \"Don't use to hold\ncustomer funds; use Bitcoinj or something instead.\" followed by a\nwarning that SPV isn't secure enough for a business unless you run your\nown full node.\n\nThe raw transaction API has no support to handle fees at all.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000008aebcc3db3f73302ba290392eb783c509c5c7c4dd3971136\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/e0fd8170/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-12T16:57:28",
                "message_text_only": "On Wed, Mar 12, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:\n>> Partially signed and multisig transactions within bitcoind go through\n>> the raw transaction API, which does absolutely nothing if the sig\n>> pushes the TX to a higher fee level.\n>\n>\n> Well, we'll have to make sure this is carefully and loudly documented in the\n> new developer part of the website that's being worked on. Because this seems\n> like a recipe for people writing flaky apps. In practice it would seem like\n> you need to implement the fee loop in your own app:\n\nIt's the raw transaction API.  If you break something, you get to keep\nboth pieces.\n\nOn a related note, sipa has proposed a more useful raw transaction API\ncall, that figures out fees, change and other details:\nhttps://github.com/bitcoin/bitcoin/issues/3794\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Multisign payment protocol?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Miron",
                "Eric Lombrozo",
                "kjj",
                "Thomas Voegtlin",
                "Jean-Pierre Rupp",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Gavin Andresen",
                "Gary Rowe",
                "Drak"
            ],
            "messages_count": 35,
            "total_messages_chars_count": 69892
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet root key with optional encryption",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-12T03:17:50",
                "message_text_only": "Hi everyone,\n\nWe've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.\n\n\nKind regards,\n\n\nJean-Paul Kogelman\n\n\n---\n\nRecent changes:\n\n15-02-2014 - Updated wording of various parts.\n06-02-2014 - Added Will Yager's implementation as reference.\n05-02-2014 - Changed prefix to 2 bytes, 'RK' and 'rk' for clear version and encrypted version respectively.\n05-02-2014 - Added entropy field to encrypted version, moved KDF field from prefix into entropy field.\n05-02-2014 - Changed computation of H to use PBKDF2-HMAC-SHA512 instead of Scrypt.\n05-02-2014 - Changed checksum field to bloom field in encrypted version. Now supports 2 passwords.\n27-12-2013 - Added some clarifications such as password character set (UTF-8) and endianness of fields.\n26-12-2013 - Changed checksum to double SHA256 of private key, added 3rd party KDF support.\n01-10-2013 - Expanded the salt to be prefix + date + checksum and renamed 'master seed' to 'root key'.\n24-07-2013 - Added user selectable KDF + parameters, encoded in the prefix.\n22-07-2013 - Added 2 byte creation date field, as a result, the prefix is expanded to 3 bytes.\n\n\nBIP: \nTitle: Base58 encoded HD Wallet root key with optional encryption\nAuthor: Jean-Paul Kogelman\nStatus: Draft\nType: Informational\nCreated: 18-07-2013\n\nAbstract\n\nThis proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet root key. Encoded root keys are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrases. The encrypted version uses salting and a user selectable key derivation function (KDF) + parameters to resist brute-force attacks at varying degrees and optionally a second password for plausible deniability.\n\nThe method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte root keys). One is a clear version of the root key with verification information for integrity checking and the other is an encrypted representation.\n\nAdditionally a 2 byte compressed date field is present to limit the block chain rescan on wallet import.\n\n\nMotivation\n\nThe extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The root key used to generate the HD wallet is typically shorter than the extended master private key that results from it. \n\nA compact representation of the root key is easier to handle and a 2-factor version of the root key record allows for safe storage and the creation of paper wallets by 3rd parties. The KDF and its parameters are user selectable, allowing for a varying level of resistance against brute force attacks. This proposal currently defines 5 sets of parameters with room for 27 more that can be defined at a later date. Implementors are advised to contact the author with new KDF proposals.\n\nCopyright\n\nThis proposal is hereby placed in the public domain.\n\nRationale\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet root key in a compact form as a paper wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my root key in it, without having access to the funds stored in the wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the root key depending on my security requirements and how I wish to store it. \n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to import a root key into a simplified payment verification (SPV) client without having to redownload the entire block chain, but rater a limited range, to find associated transactions.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like to choose the KDF and its parameters that is used to hash the passphrase that protects my root key to fit my security needs and available processing power. \n\nUser story: As a Bitcoin user who uses HD wallets, I would like to outsource the KDF computation to a 3rd party with more processing power.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like to have a second password that can decrypt a second root key.\n\nSpecification\n\nThis proposal makes use of the following functions and definitions:\n\nAll input/output text is to be UTF-8 encoded\n\nAES256Encrypt, AES256Decrypt: The AES block cipher, applied in ECB mode.\n\nSHA256, SHA512: The hash algorithms of the same name. \n\nHMAC-SHA512: The HMAC message authentication code algorithm, using SHA512 as the hash function\n\nPBKDF2-HMAC-SHA512: The PBKDF2 key derivation algorithm, described in PKCS #5 v2.0 and RFC 2898, using HMAC-SHA512 as the pseudorandom function\n\nScrypt: The key stretching algorithm of the same name\n\nBase58Check: The textual data encoding frequently used by various Bitcoin-related systems\n\n\"Root Key\": The 16/32/64 byte value encoded in the wallet. This value is used to derive the private keys for addresses in the Bitcoin Wallet\n\n\"Master Key\": The primary Bitcoin private key, which is derived from the Root Key\n\n\"||\" refers to concatenation, not the logical OR operation\n\n\"G\", \"N\": Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.\n\nPrefix\n\nThe Base58Check representation of the wallet will start with \"RK\" (Root Key) if the wallet is unencrypted, and will start with \"rk\" if the wallet is encrypted.\n\nProposed specification\n\nUnencrypted wallet:\n\nPrefixes:\n0x28C1: 16 byte root key, no encryption. 24 byte total length\n0x4AC5: 32 byte root key, no encryption. 40 byte total length\n0xFBB3: 64 byte root key, no encryption. 72 byte total length\n\nThese are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.\n\n\"date\" is a 2-byte, little endian field containing the number of weeks since jan 1st 2013. It is used to optimize blockchain scan upon wallet import.\n\n\"checksum\" is the first 4 bytes of SHA256(SHA256(master_secret)), where master_secret is the \"Master Secret Key (IL)\" from the BIP32 specification. In other words, \"checksum\"=SHA256(SHA256(HMAC-SHA512(\"Bitcoin seed\", root_key)[0:32]))[0:4].\n\n\"root_key\" is the 16/32/64 byte root key used for the HD wallet\n\nIn summary, the clear wallet looks like this:\n[prefix, 2 bytes][date, 2 bytes][checksum, 4 bytes][root_key, 16/32/64 bytes]\n\nRange in Base58Check encoding for clear 16 byte root key (prefix RK):\nMinimum value: RK52zvuD3xRhwto8JDTonxhru6awsFfNqKCTmT (based on 0x28 0xC1 plus twenty-two 0x00's)\nMaximum value: RKCsfF9RpLnrxo1kp2o7mfWYeAV1NNYxWSMRym (based on 0x28 0xC1 plus twenty-two 0xFF's)\n\nRange in Base58Check encoding for clear 32 byte root key (prefix RK):\nMinimum value: RK15fXAj9BEMooghtx2gY5YrSh23LYKS8mZnaz8oYf1EDnqAwtAADGMVUDHG (based on 0x4A 0xC5 plus thirty-eight 0x00's)\nMaximum value: RK5MUEoFU24QARcsX5HR2ieCjem468hDeQm4J2aH5zsCVJXUCGn6nsVQEFhN (based on 0x4A 0xC5 plus thirty-eight 0xFF's)\n\nRange in Base58Check encoding for clear 64 byte root key (prefix RK):\nMinimum value: RK1uXsCQAKqaa2s7YBDeaLS2KTqZcNjjQSgdSfDv4fqGkTw8KBfZ2ND4Cp7vHdzhjJ2C2Jtf4CwgScRnXvpzuQT2W4Vj2SgCyfBgpTzF (based on 0xFB 0xB3 plus seventy 0x00's)\nMaximum value: RK3B9TMn55dey3an1oHpwB81FPZboakivYtqFvCaeknPzPK4iTvoFKzxVWKcD9YfJwjkyS36bqnSqjibUurcQ7J2EsQww5zPpJNzqjkw (based on 0xFB 0xB3 plus seventy 0xFF's)\n\n\nEncrypted wallet:\n\nPrefixes:\n\n0xF83F: 16 byte root key, encrypted. 26 byte total length\n0x6731: 32 byte root key, encrypted. 43 byte total length\n0x4EB4: 64 byte root key, encrypted. 76 byte total length\n\nThese are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.\n\n\"date\" is a 2-byte, little endian field containing the number of weeks since jan 1st 2013. It is used to optimize blockchain scan upon wallet import. The maximum value of 0xFFFF results in: jan 1st 3269\n\n\"entropy\" is a 2/3/4 byte (corresponding to whether the key is 16/32/64 bytes) field. The first five bits contain the KDF type, and all other bits contain random data. This is used as a salt to make cracking the wallet password harder.\n\n\"bloom_filter\" is a 4 byte little-endian field containing a bloom filter to check that the user entered their password correctly.\n\n\"encrypted_root_key\" is the 16/32/64 byte encrypted root key used for the HD wallet\n\nIn summary, the encrypted wallet looks like this:\n[prefix, 2 bytes][date, 2 bytes][entropy, 2/3/4 bytes][bloom_filter, 4 bytes][encrypted_root_key, 16/32/64 bytes]\n\n\nRange in Base58Check encoding for encrypted 16 byte root key (prefix rk):\nMinimum value: rk2V4R2ys91WigNPL5nots6a97rfMnwTkPAb2XgNo (based on 0xF8 0x3F plus twenty-four 0x00's)\nMaximum value: rk57mv9oertBLsHfncAvqnbetCBdNS1gFHQaFsD3p (based on 0xF8 0x3F plus twenty-four 0xFF's)\n\nRange in Base58Check encoding for encrypted 32 byte root key (prefix rk):\nMinimum value: rk1CYsqKjsbXa7uvncEaW4XSeVzcpq1U9yDMxd2cWwfkGf1FMjENaVThYpLRNwqo (based on 0x67 0x31 plus fourty-one 0x00's)\nMaximum value: rk7Xw5b6fidaCk489LhaiMqHkZo7RYGTmzvJY9A5joxe8KXAn8BC66cmQPYYYvy8 (based on 0x67 0x31 plus fourty-one 0xFF's)\n\nRange in Base58Check encoding for encrypted 64 byte root key (prefix rk):\nMinimum value: rk48BmQWeQbATSXbP5U6XVsXRJTs4Ea1TVZBbHLPPsboCFyxDj2Jaz2JAJno97hq6dq2bANLuWydY8QSZgKVGhPRZazXt1swPXwzVLw1QnVAz (based on 0x4E 0xB4 plus seventy-four 0x00's)\nMaximum value: rkCRtT9R9kuAapCaLQFif5uo8gUrjgKsvYmGGTpX2ZTjTfwe9M7A6KezTh7f4FDxfZFVbHypodMNnNdmWYb8mzTokHXVR1u7KicrLLFFu7GJW (based on 0x4E 0xB4 plus seventy-four 0xFF's)\n\n\nEncoding of KDF + parameters:\n\nA number of KDF functions are available, to accommodate a wide range of possible use cases. The KDFs are defined as follows:\n\nID\tKDF\tParameters\n0x00\tscrypt\tn = 2^14, r = 8, p = 8\n0x01\tscrypt\tn = 2^16, r = 16, p = 16\n0x02\tscrypt\tn = 2^18, r = 16, p = 16\n0x08\tPBKDF2-HMAC-SHA512\titerations = 216\n0x09\tPBKDF2-HMAC-SHA512\titerations = 221\n\nAll other possible values (3-7 and 10-31) are reserved.\n\nPlease note that KDFs 1 and 2 will probably not run on mobile devices. KDFs 8 and 9 are very memory efficient.\n\nGeneration of date:\n\nThe purpose of the date field is to make scanning the blockchain for transactions to/from this wallet faster. The date *must* be on or before the date of the first transaction to/from the wallet. If the date is unknown (e.g. on an embedded device) or the user does not wish to reveal the wallet creation date, this field can be set to zero (which may incur a performance penalty for the wallet software). When importing, it is advised to start scanning from a few days before the encoded date. The date field is a little-endian integer containing the number of weeks, rounded down, since Jan 1st 2013. \n\nExamples: \n\nsep 18th 2013 - jan 1st 2013 =  260 days =  37 weeks 1 day = rounded down becomes 0x0025\nmar  3rd 2027 - jan 1st 2013 = 5174 days = 739 weeks 1 day = rounded down becomes 0x02E3\n\nDerivation of Master Key from Root Key (please see BIP 0032 for a full description of HD wallets):\n\n1. Take 16/32/64 byte Root Key. Call it S\n2. Calculate I = HMAC-SHA512(key = \"Bitcoin seed\", msg = S)\n3. Let IL = I[0:32]. IL is the Master Key\n4. If IL is 0 or IL >= N, where N is the curve order of Secp256k1 (the elliptic curve used by Bitcoin), the Root Key is invalid and a new one should be chosen.\n\nEncryption:\n\nLet \"passphrase\" be the user's chosen passphrase\nLet \"fake_passphrase\" be the user's chosen second passphrase, or a randomly generated string if the user chose not to use a second passphrase\nLet \"KDF\" be the chosen key derivation function\nLet \"root_key\" be the 16/32/64 byte Root Key\n\n1. Create the correct \"Prefix\" and \"Date\" field\n2. Create the random \"Entropy\" field and encode the KDF number in the top 5 bits\n3. Let \"salt\" = Prefix || Date || Entropy\n4. Calculate \"preH\" = HMAC-SHA512(key = salt, msg = passphrase)\n5. Calculate \"strongH\" = KDF(msg = preH, salt = preH, output_len = 64) This step can be outsourced to a 3rd party, if desired.\n6. Calculate \"postH\" = HMAC-SHA512(key = passphrase, msg = salt)\n7. Calculate \"H\" = PBKDF-HMAC-SHA512(msg = postH, salt = strongH, iterations = 210, output_len = len(root_key) + 32)\n8. Calculate \"whitened_key\" = root_key XOR H[0:len(root_key)]\n9. Calculate \"encrypted_key\" = AES256Encrypt(message = whitened_key, key = HR), where HR is the last 32 bytes of H\n10. Calculate \"fake_key\" by decrypting encrypted_key with fake_passphrase\n11. Calculate \"bloom_filter\", containing root_key and fake_key. See the \"Bloom Filter\" section for more info.\n\nencrypted_wallet = Prefix || Date || Entropy || bloom_filter || encrypted_key\n\nDecryption of Root Key:\n\nLet \"passphrase\" be the passphrase provided by the user\n\n1. Extract \"Prefix\", \"Date\", \"Entropy\", \"bloom_filter\", and \"encrypted_key\" from the encrypted wallet\n2. Determine the correct KDF from the top 5 bits of Entropy.\n3. Let \"salt\" = Prefix || Date || Entropy\n4. Perform steps 4 through 7 of Encryption to derive \"H\"\n5. Calculate \"whitened_key\" = AES256Decrypt(message = encrypted_key, key = HR), where HR is the last 32 bytes of H\n6. Calculate \"root_key\" = whitened_key XOR H[0:len(whitened_key)]\n7. Verify that root_key is a member of bloom_filter\n\nBloom Filter:\n\nThe Bloom Filter is a data structure that allows us to check, within a range of probability, whether or not some piece of data has been added to it. In this case, we want to make sure that the user entered their password correctly, so we're checking that the decrypted root_key corresponds to the one that was added to the bloom filter when the wallet was created.\n\nBloom Filter Creation:\n\n1. Let \"bloom_filter\" be an empty (set to all zeros) 32-bit, little-endian integer\n2. To add an element \"X\" to bloom_filter, \n3. Calculate \"E\" = SHA256(SHA256(HMAC-SHA512(\"Bitcoin seed\", X)[0:32]))[0:11]. Note, this corresponds to the same algorithm used as a checksum for un-encrypted wallets. It also corresponds to the double-SHA of the Master Key.\n4. For each of the 11 bytes in E (call each byte \"B\"):\n4a.   calculate \"N\" = B & 0x1F. N will range from 0 to 31. Set the Nth bit in bloom_filter to 1\n\nYou can add more items to the bloom filter, if desired. However, the filter parameters are optimized for 2 items (one \"real\" password/wallet, and one \"fake\" password/wallet). Please note that adding more items will drastically increase the chance of a false positive when entering a password. The chance of a password similar to a correct password passing the filter becomes more likely. This will generate a different Root Key and not the original one the user intended to decrypt.\n\nBloom Filter Verification:\n\nLet \"X\" be some item\nLet \"bloom_filter\" be the Bloom Filter you want to check if X belongs to\n\n1. Calculate \"x_only_filter\", which is a Bloom Filter with X added to it\n2. Ensure that any bit that is set in x_only_filter is also set in bloom_filter (i.e. x_only_filter & bloom_filter == x_only_filter)\n3. If all bits set in x_only_filter are also set in bloom_filter, you know X is probably a member of bloom_filter. If not, X is definitely *not* a member of bloom_filter.\n\nSuggestions for implementers of proposal with alt-chains\n\nThis proposal is network and coin agnostic (so long as the coin in question uses SECP256K1 ECC). Alt-coin implementors are advised to change the prefixes so that encoded root keys do not start with \u201cRK\" or \u201crk\u201d.\n\nReference implementation\n\nPython reference implementation: https://github.com/wyager/Encrypted-HD-wallet\n\nAcknowledgements\n\nWill Yager for the Python reference implementation and rewording of parts of this specification.\nMike Caldwell for BIP 0038, which this proposal borrows heavily from.\n\nSee Also\n\nBIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032\nBIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038\n\nTest vectors\n\nThe primary password will always decrypt the same root key, regardless of KDF selection, however, the secondary password will generate a different root key for every KDF.\n\nTest 1:\n\nRoot Key\t000102030405060708090a0b0c0d0e0f\nCreation\t04-02-2014\nClear\tRK6nEaou4eFQC4SfrHtdh9jpnEme4K9dt2jBmG\nPassword\tSatoshi\nPublic Address\t15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma\nPrivate extended key\txprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\nPublic extended key\txpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\nSecond password\tAlpaca\nEncrypted (KDF0)\trk354bXH1JsXTwWmuvRskFWoeUX8hMjQiseNM7wj6\nPublic Address\t1Ndr6DnQm5EefVhTdKjXC3vH5qGRa1FCng\nPrivate extended key\txprv9s21ZrQH143K3TxQaa6hd8mPR9Bw2ue1H5TMjUYuUEPEDUTxK7PZ191poMob8zbU5hsckCQoBFYtQZzbgxtYz1acbLmFQtjcbWSYhQ7kSZE\nPublic extended key\txpub661MyMwAqRbcFx2sgbdhzGi7yB2RSNMreJNxXrxX2ZvD6Go6rehoYwLJecVAuhHhMPSuMStnLHbzQ4CCyPqbVyLP4F2SmiLTcE3oicmA81M\nEncrypted (KDF1)\trk354bq4dXW8VB67XSZzQdVLFJFz64v1Dh1i12VTY\nPublic Address\t12cbi9vTjpZ8RjinLc2fJp1iDkL96xMQoe\nPrivate extended key\txprv9s21ZrQH143K4JxBYKwi5dGE59G4vtRGLiyinEPxMdgYdPe6UqMrgJneacME8JQuoskvEzEZ1vnHwW8i1h4Mwm5wj5BUPJWf764QfkkvFAQ\nPublic extended key\txpub661MyMwAqRbcGo2eeMUiSmCxdB6ZLM97hwuKacoZuyDXWByF2Ng7E778RrYidat9n9Ht5cYrdS4gwVBA2g8VHAro7b4Gbvo2NKTLP9STuvP\nEncrypted (KDF8)\trk354dUN5yrKvrMQRneKJvdJFf77WDJw5ZfeeRt4H\nPublic Address\t14z6Vm4TRxd9ueasFahwBxYJ8jfhwhX4bt\nPrivate extended key\txprv9s21ZrQH143K2AaodGyHvDBQFrFcDdHVJj15zqJUkU1wuLS5kFxgE9rGBvh8rAUeenfhhwC91efxn8kHbhKGeTaQkkyGFvbKiAuLcx8t8qP\nPublic extended key\txpub661MyMwAqRbcEefGjJWJHM88ot66d61LfwvgoDi6JoYvn8mEHoGvmxAk3DfcWWuDBqMUmPoXA28pa2uMnQFxKQe21Df5uQAGADCpcdZHAGe\nEncrypted (KDF9)\trk354dedikaytYJ7D4btpcVfGuakfixf5yj2SnTcX\nPublic Address\t17tzY2huzjbcRNV7e7BshxQ8UPrZhznBgn\nPrivate extended key\txprv9s21ZrQH143K3Xt1wRGXFZ6D76dGLyGTWxvPv1QhkRcyPCbi6kM7WJG9dH6X9UMmzoTwoix3BsnzKf7ZkkpinPw8hyGaNLWzmcbemJVUWTj\nPublic extended key\txpub661MyMwAqRbcG1xV3SoXch2wf8TkkRzJtBqziPpKJm9xFzvreHfN46adUXfeFiVokTrKsBvK3zBgDJcUThjDtXAZ2dw9SYg74YMFjENB4aa\n\nTest 2:\n\nRoot Key\t7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844\nCreation\t04-02-2014\nClear\tRK22qqMb3CozsQfTTbSVsLEgXcjekut99SuSHn6urU4vWxjiQneHWVYabWgv\nPassword\tNakamoto\nPublic Address\t1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz\nPrivate extended key\txprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3\nPublic extended key\txpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP\nSecond password\thunter2\nEncrypted (KDF0)\trk2cMHki73WbrYgo7XK9kSr6CGBPsMjU3uZf3f3qxCv4QoGy63DkBoGJKhPdvUtp\nPublic Address\t16UCUo31Y7qDMWSs68FBAW759X4K3PZ9kN\nPrivate extended key\txprv9s21ZrQH143K2dojoDyxmK7SLnyqSvn56oysqu2Ctf24Rdux6JFLReRgcH5KAM1GxCTVxjpc13Mh18kSmYqUep5EkbDvQJfEEVeLZXhyuYj\nPublic extended key\txpub661MyMwAqRbcF7tCuFWy8T4AtppKrPVvU2uUeHRpSzZ3JSF6dqZaySkATZEZWFcAMxqhD7oTdcaufofFy1WGLF7U21rztvTv6qmGrPq7s2W\nEncrypted (KDF1)\trk2cMJ1KizRTPbBv8zaECpcQEY66SiZcfM2yAuCpdjDbJsdgZu9xdoFDpGuTVRYe\nPublic Address\t15PXuaVAiU2fEEAsUjxWYHtzoM4D6FaC5F\nPrivate extended key\txprv9s21ZrQH143K35ajB7SFjQJAzrmGbAJyp7iBYxhB3DcY9CC8XW5GkAHXDe2HXG6hUS3iquPbGAPuZygXm43BgYamWxiDN5sFm7w12db4uvU\nPublic extended key\txpub661MyMwAqRbcFZfCH8yG6YEuYtbkzd2qBLdnMM6nbZ9X1zXH53PXHxc14vcMHtfJRGTZVgj2gz8sc6sUuYoFub9HaBzkfaxguH4Byqo9NhK\nEncrypted (KDF8)\trk2cMNSiQsAATQ19Y12nhGuL2uksZVASxNXAdjqrU3KaVcLH71No442sH1YvcwDL\nPublic Address\t13jQ3pnGznGNTC2LVxJz1m27opav8WPVvH\nPrivate extended key\txprv9s21ZrQH143K3aA9djUAAX1ASAcdqtuHEXmypDNd8gNy5PH4nm7y4QrieVdw7iQgA46LCJJAxdcN4qrP87Tp8XzJQbw7aeH3LPK8G7Zj6YT\nPublic extended key\txpub661MyMwAqRbcG4Ecjm1AXewtzCT8FMd8bkhacbnEh1uwxBcDLJSDcDBCVnvvrsENPhxpCZ3FYVokSvwfJJFVU9KF3ctQQJp229pgcFLavKJ\nEncrypted (KDF9)\trk2cMPALytexkDuxm6QREojvgzoKcgKNeURPXDTVzPdZmbfzM2R3RX75Qqu4Yk5r\nPublic Address\t1NBQsYC1vhfbkEoiPWmUb1QN36cCsMxcti\nPrivate extended key\txprv9s21ZrQH143K4X6wJWAQbDawhqb2DaQT7mjbPhqNBHmspzrD1J5kcnb5syHr9LQggN3PtmvkjbMVs4zgTyjWmqKS4ix7J92z59cvbkF5W1s\nPublic extended key\txpub661MyMwAqRbcH1BQQXhQxMXgFsRWd38JUzfCC6EyjdJrhoBMYqQ1AauZjGev413kscEPLn4s3XmiDoL1pevGUKACx5ZhhPHvujKaVpe5TRt\n\nTest 3:\n\nRoot Key\tfffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8 a8784817e7b7875726f6c696663605d5a5754514e4b484542\nCreation\t04-02-2014\nClear\tRK2BvY13FUD6bX25tA7XDyfAn7zbXSL8pR6TRE3EHZZ8qBm9qEyZRih8x1XhhcZwjcTfpe1Qjydn4KU dia8Wf1NshUusP1D38i88MLU9\nPassword\tVires In Numeris\nPublic Address\t1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg\nPrivate extended key\txprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U\nPublic extended key\txpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB\nSecond password\tQuis Custodiet Ipsos Custodes?\nEncrypted (KDF0)\trk5ySVmNtFzgWZFXAehk6Akvf5PanApA5Y12arynxXZF7Lhc1YqaudukJFngEBXkpc4RGqqkM3ZW4RjE7HwhWTB5Uxi7pXy7vuKouQuZZzoTP\nPublic Address\t1AbB8okTm3SgcHnqKskQFfBd1MndDq1G75\nPrivate extended key\txprv9s21ZrQH143K4PUz4iSDMmUE9uovNGnZE6jZdKPDqozk8nBHBk3FRXo3tJEt4TFfo7Tkhnc9TAzUFvg7hsg7M1SddHF6nX9bBw9Tn968Aki\nPublic extended key\txpub661MyMwAqRbcGsZTAjyDiuQxhweQmjWQbKfARhnqQ9Xj1aWRjHMVyL7XjaDV9SNrb7S8YvGtTGUkrRLS3kTDbRKRq26khyJDyKDuquaBqRM\nEncrypted (KDF1)\trk5ySWZriEipJWKyL6X8Rd86cgKn9qgGC7C4QYLVCjhyuBZiKXezzf6vjyJBXtFmP1f4qzaAAP5baRhKP4yCGo6LAU9keJCvRXoU77SUNmg1o\nPublic Address\t1Fzh1NoMtYUBAoKQ2Lsb6rA81bKFfNx2az\nPrivate extended key\txprv9s21ZrQH143K4KmLN9WLjPsVmKgVXPUfAScqkGeifQpTeXFw2X4ijfWNMDMtu4qfbbHZ69VSLcCMiGLHSLaQQY7Rb3PzHMRLLqVN6mjrGHP\nPublic extended key\txpub661MyMwAqRbcGoqoUB3M6XpEKMWyvrCWXfYSYf4LDkMSXKb5a4NyHTprCW3JAJ66rn947iM9iyzUoS4CSXhsDZyuaks5hueT9wtDSdm91ga\nEncrypted (KDF8)\trk5ySbwggFoh8MZ1CnxqSeKwzag9ifrECtToowiRYKRgcueyMGX39yBGwxbY7ExKeTSmCRHokToThN8pxYWA9WQKrouVuatCMjcvX8PZ16tPf\nPublic Address\t1AiALvRHrWwjViJn5Q6oki4qVZ5p7SepfB\nPrivate extended key\txprv9s21ZrQH143K3CHptaD7aNZBUAYhjmCe5ceDLttwqKoQ3F73DRHNrSAVphAX2okZDWK82Eznf4bpmv9qjHZ7nzQjv2qNqXV8YwCWQEw2jiA\nPublic extended key\txpub661MyMwAqRbcFgNHzbk7wWVv2CPC9DvVSqZp9HJZPfLNv3SBkxbdQEUyfwf9rtzBwBvKTV2WDejdPupDmihidJmDTTgXpar3r48kNiGhEzC\nEncrypted (KDF9)\trk5ySd2iHrVJ1CZ86Pyt6zerNzzBHfZo2rcBAX4MKNzX7doCZnNpBMc3pPf6igTCnk796isqtaEdcfagrN8Pced9VAtENVBtpugBLnjiGd28h\nPublic Address\t1Gazv3FH8oDxUUzgrRmWL14X3oBY5myDdQ\nPrivate extended key\txprv9s21ZrQH143K3YMD7T6LoFVGttrMKj9jxGAxfCv3pv6ZQfWcuBV5pqdcjyooGrqa8NeraYUuiTWJSWuz4fVMiCuEK8tWggZ6yMZZK7xLBkx\nPublic extended key\txpub661MyMwAqRbcG2RgDUdMAPS1SvgqjBsbKV6ZTbKfPFdYHTqmSioLNdx6bH6v4uA4MWygDxbDDbVGPCurrTm5RwMnh14jEaswhA6nFK1bFd2\n\nTest 4:\n\nRoot Key\t6ca4a27ac660c683340f59353b1375a9\nCreation\t04-02-2014\nClear\tRK6nEmXZj2nqgtCVWk3s7Suvz2XtWrdhDPpJqS\nPassword\t\u8061\u4e2d\u672c\nPublic Address\t1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9\nPrivate extended key\txprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA\nPublic extended key\txpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o\nSecond password\tBitcoin\nEncrypted (KDF0)\trk354bYQBax15mmBSLTpaVuLRb9nDuaVbEseqBWpG\nPublic Address\t1AGXnLksHQgovEyQvj8kY9QtFV2x8D1Nm\nPrivate extended key\txprv9s21ZrQH143K3BMoPfivq74do9mxCnKRTZHWScTvVyrxGtCNvGd8bCZJk1Npwnds3ghiy4TTwmwtbSkpzTFcqLup57AWqm3NvRr6sNs7ZVt\nPublic extended key\txpub661MyMwAqRbcFfSGVhFwCF1NMBcScF3GpnD7EzsY4KPw9gXXTowP8zsnbJTDhU9o9Sj9M63Qx6bZhZ7gS6AzNjNehPUbqdhc6th1VA1FGVg\nEncrypted (KDF1)\trk354bi6JiGeb5suvydsNtTosocEbpWcjoK7VL9Xv\nPublic Address\t1DkoSDVN7aYZnGe3wUCXAjqc3cXT9oiHhG\nPrivate extended key\txprv9s21ZrQH143K2Su2mQR7u6pweA8kwv4y3bKkvUeJUanC4eT7VVp64VxNH5uzwY12wE315rZMMf5XJQLcNLPBF7zcgoFv29UM3R9ctDqdshr\nPublic extended key\txpub661MyMwAqRbcEvyVsRx8GEmgCByFMNnpQpFMis3v2vKAwSnG338LcJGr8NDyhCcF7QV65cmybwrhCkYre87pkG3NCpckbc2itaJknWnwGGX\nEncrypted (KDF8)\trk354dLtDHN3mPNSFABTNrhKmweKPZ55LJ31EM3k6\nPublic Address\t1QShZTrKPJPBcstuYX5JKRHPs1HUtD7y8\nPrivate extended key\txprv9s21ZrQH143K43FPi9awkCScXaAY4mEJje4PhS5uk2R67QU6p7bHXbvwgRdcwU9xZozYZ9hqfjm6ccAbGgU5eN4fp7uMY59MGq8swJVQPKW\nPublic extended key\txpub661MyMwAqRbcGXKrpB7x7LPM5c12UDxA6ryzVpVXJMx4zCoFMeuY5QFRXfg1tnVaP3Fv1tmhoV8jrRG29Gip9FwW7j3vGLNneaMepS1QuHP\nEncrypted (KDF9)\trk354diEYQb4EdNjyosAZGNAB8L1spefWdz7RmZfX\nPublic Address\t1NLVhK8AQn7p2edvTtFJgTz6itrBeHZ4Wa\nPrivate extended key\txprv9s21ZrQH143K2stwSFWe4rPabNH1k1EVwQKwr7poayVZNPJup716aWVjDBVRVRh8gSgZhTP4uiaNuCkFbXXJCbDSnmvwNbnCuvQqHDDj7Ew\nPublic extended key\txpub661MyMwAqRbcFMyQYH3eRzLK9Q7W9TxMJdFYeWER9K2YFBe4MeKM8JpD4RrrKNRrTMT9T7FvDbvWhzAXT68HxuyZGJ9BkC6G3ZiMjj1UT76\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/fba653b4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/fba653b4/attachment.sig>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T13:11:58",
                "message_text_only": "On 03/12/2014 04:17 AM, Jean-Paul Kogelman wrote:\n> We've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.\n\nAre you aware of BIP-0039?\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-12T15:45:50",
                "message_text_only": "On Mar 12, 2014, at 6:11 AM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 04:17 AM, Jean-Paul Kogelman wrote:\n>> We've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.\n> \n> Are you aware of BIP-0039?\n> \n> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n> \n> \n\nYes I am. There are some differences between BIP 39 and my proposal though. \n\n- BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.\n- BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.\n- BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.\n- BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.\n- BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512. \n- BIP 39 can't outsource the KDF computation to a 3rd party.\n- BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.\n\n\njp\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/0e89e648/attachment.sig>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T15:55:02",
                "message_text_only": "On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:\n> Yes I am. There are some differences between BIP 39 and my proposal though. \n> \n> - BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.\n\nWhich is better IMO. I can't imagine anyone writing down a long Base58\nencoded string.\n\n> - BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.\n\nNot true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).\n\n> - BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.\n\nThis is nice addition, indeed. But we needed to limit the data as\npossible in order not to increase the number of words needed to be noted\ndown.\n\n> - BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.\n\nIt has a detection. Not correction though.\n\n> - BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512. \n> - BIP 39 can't outsource the KDF computation to a 3rd party.\n\nTrue, but having one or two solid options are better than having\ngazillions of possible options.\n\n> - BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.\n\nTrue, but they are encouraged to use the list provided. Possibility to\noutsource KDF outside of your \"standard\" breaks much more compatibility\nthan this.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-03-12T16:49:09",
                "message_text_only": "Jean-Paul, it may be worth noting that the BIP39 word list is integrated\ninto Bitcoinj so will likely become the de facto standard for Android,\nTrezor web and several desktop wallets. Anyone deviating from that word\nlist would likely find themselves in an isolated pocket.\n\nRegarding the timestamp, MultiBit HD uses a simple timestamp of \"number of\ndays since midnight of Bitcoin genesis block in UTC with modulo 97 checksum\nappended\". Thus a new seed generated on 27 January 2014 would have\n\"1850/01\" as its checksum. When creating a new wallet the users are tested\nthat they have written the timestamp down along with the associated\n12/18/24 words.\n\nModulo 97 was chosen since it catches about 99% of errors.\n\n\nOn 12 March 2014 15:55, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:\n> > Yes I am. There are some differences between BIP 39 and my proposal\n> though.\n> >\n> > - BIP 39 offers an easy list of words, no gnarly string of case\n> sensitive letters and numbers.\n>\n> Which is better IMO. I can't imagine anyone writing down a long Base58\n> encoded string.\n>\n> > - BIP 39 only offers one fixed length of entropy, always 12 words, no\n> option to increase or decrease the length.\n>\n> Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).\n>\n> > - BIP 39 doesn't have a genesis date field, so no optimization during\n> blockchain rescan.\n>\n> This is nice addition, indeed. But we needed to limit the data as\n> possible in order not to increase the number of words needed to be noted\n> down.\n>\n> > - BIP 39 doesn't have password typo detection. No easy way to recover a\n> password if you know most of it.\n>\n> It has a detection. Not correction though.\n>\n> > - BIP 39 does not have a user selectable KDF, only 2048 round\n> PBKDF2-HMAC-SHA512.\n> > - BIP 39 can't outsource the KDF computation to a 3rd party.\n>\n> True, but having one or two solid options are better than having\n> gazillions of possible options.\n>\n> > - BIP 39 wallet implementors can use their own word lists, breaking\n> cross wallet compatibility.\n>\n> True, but they are encouraged to use the list provided. Possibility to\n> outsource KDF outside of your \"standard\" breaks much more compatibility\n> than this.\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol Rusnak <stick at gk2.sk>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/f5fb6f0d/attachment.html>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T18:00:58",
                "message_text_only": "This spec offers a lot of benefits over BIP 0038:\n\n* Multiple KDFs (I think the chosen list is reasonable and fits all\nrequired use cases)\n* Multiple seed lengths\n* Explicit BIP 0032 support\n* Creation date field\n* Plausible deniability (via the multiple-password mechanism)\n\nI don't think it makes any sense to compare this to BIP 0039. BIP 0039 is\nfor key import/export, but it doesn't deal with anything like encryption,\nwallet creation date, etc. The use cases are completely different.\n\nI don't think we should let BIP 0039 (which is perfectly good for its\nintended use case) hold us back from improving on BIP 0038 (which is also\ngood, but could use some changes).\n\nWill\n\n\n\n\nOn Wed, Mar 12, 2014 at 11:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> Jean-Paul, it may be worth noting that the BIP39 word list is integrated\n> into Bitcoinj so will likely become the de facto standard for Android,\n> Trezor web and several desktop wallets. Anyone deviating from that word\n> list would likely find themselves in an isolated pocket.\n>\n> Regarding the timestamp, MultiBit HD uses a simple timestamp of \"number of\n> days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum\n> appended\". Thus a new seed generated on 27 January 2014 would have\n> \"1850/01\" as its checksum. When creating a new wallet the users are tested\n> that they have written the timestamp down along with the associated\n> 12/18/24 words.\n>\n> Modulo 97 was chosen since it catches about 99% of errors.\n>\n>\n> On 12 March 2014 15:55, Pavol Rusnak <stick at gk2.sk> wrote:\n>\n>> On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:\n>> > Yes I am. There are some differences between BIP 39 and my proposal\n>> though.\n>> >\n>> > - BIP 39 offers an easy list of words, no gnarly string of case\n>> sensitive letters and numbers.\n>>\n>> Which is better IMO. I can't imagine anyone writing down a long Base58\n>> encoded string.\n>>\n>> > - BIP 39 only offers one fixed length of entropy, always 12 words, no\n>> option to increase or decrease the length.\n>>\n>> Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).\n>>\n>> > - BIP 39 doesn't have a genesis date field, so no optimization during\n>> blockchain rescan.\n>>\n>> This is nice addition, indeed. But we needed to limit the data as\n>> possible in order not to increase the number of words needed to be noted\n>> down.\n>>\n>> > - BIP 39 doesn't have password typo detection. No easy way to recover a\n>> password if you know most of it.\n>>\n>> It has a detection. Not correction though.\n>>\n>> > - BIP 39 does not have a user selectable KDF, only 2048 round\n>> PBKDF2-HMAC-SHA512.\n>> > - BIP 39 can't outsource the KDF computation to a 3rd party.\n>>\n>> True, but having one or two solid options are better than having\n>> gazillions of possible options.\n>>\n>> > - BIP 39 wallet implementors can use their own word lists, breaking\n>> cross wallet compatibility.\n>>\n>> True, but they are encouraged to use the list provided. Possibility to\n>> outsource KDF outside of your \"standard\" breaks much more compatibility\n>> than this.\n>>\n>> --\n>> Best Regards / S pozdravom,\n>>\n>> Pavol Rusnak <stick at gk2.sk>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/95b8706a/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-12T19:35:23",
                "message_text_only": "On Mar 12, 2014, at 09:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\nJean-Paul, it may be worth noting that the BIP39 word list is integrated into Bitcoinj so will likely become the de facto standard for Android, Trezor web and several desktop wallets. Anyone deviating from that word list would likely find themselves in an isolated pocket.\n\nRegarding the timestamp, MultiBit HD uses a simple timestamp of \"number of days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum appended\". Thus a new seed generated on 27 January 2014 would have \"1850/01\" as its checksum.\n\u00a0\nI'm a bit confused, are you changing the way the checksum is calculated, or fudging the input seed to produce a specific checksum? Or is checksum in this case another value calculated over the mnemonic list?\n\n\nWhen creating a new wallet the users are tested that they have written the timestamp down along with the associated 12/18/24 words.\n\nSo this is specific to MultiBit HD? Wouldn't it be better to include this into the BIP?\u00a0\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/98bf75f9/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-03-12T19:41:06",
                "message_text_only": "This is purely a MultiBit HD thing. Nothing to do with the BIP, unless the\nwider community felt that it would be generally useful.\n\nIt has nothing to do with internal word list checking and is purely an\nadditional check to reduce the blockchain search load for SPV clients when\nrestoring wallets.\n\n\nOn 12 March 2014 19:35, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n\n>\n>\n> On Mar 12, 2014, at 09:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n>\n> Jean-Paul, it may be worth noting that the BIP39 word list is integrated\n> into Bitcoinj so will likely become the de facto standard for Android,\n> Trezor web and several desktop wallets. Anyone deviating from that word\n> list would likely find themselves in an isolated pocket.\n>\n> Regarding the timestamp, MultiBit HD uses a simple timestamp of \"number of\n> days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum\n> appended\". Thus a new seed generated on 27 January 2014 would have\n> \"1850/01\" as its checksum.\n>\n>\n> I'm a bit confused, are you changing the way the checksum is calculated,\n> or fudging the input seed to produce a specific checksum? Or is checksum in\n> this case another value calculated over the mnemonic list?\n>\n>\n> When creating a new wallet the users are tested that they have written the\n> timestamp down along with the associated 12/18/24 words.\n>\n>\n> So this is specific to MultiBit HD? Wouldn't it be better to include this\n> into the BIP?\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/389055f9/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-12T19:26:39",
                "message_text_only": "On Mar 12, 2014, at 08:55 AM, Pavol Rusnak <stick at gk2.sk> wrote:\n\nOn 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:\nYes I am. There are some differences between BIP 39 and my proposal though.\n- BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.\n\nWhich is better IMO. I can't imagine anyone writing down a long Base58\nencoded string.\n\u00a0\nThat depends on your use case. A list of words is totally fine for someone to write down, a long string of case sensitive letters is easier to put into a QR code.\n\n\n- BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.\n\nNot true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).\n\u00a0\nI stand corrected.\n\n\n- BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.\n\nThis is nice addition, indeed. But we needed to limit the data as\npossible in order not to increase the number of words needed to be noted\ndown.\n\u00a0\nMy proposal didn't have this either initially, but it was deemed an essential feature for SPV clients.\n\n\n- BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.\n\nIt has a detection. Not correction though.\n\u00a0\nIf I understand the code correctly (and please correct me if I'm wrong), the validation only happens on the mnemonic list, not on the password:\n\n\"Described method also provides plausible deniability, because every passphrase generates a valid seed (and thus deterministic wallet) but only the correct one will make the desired wallet available\"\n\nSo upon entering a password with a typo, the user will not be notified of an error, but be presented with a wallet balance of 0, after the blockchain has been scanned. I'm sorry, but that's not the kind of experience I would want to present to my users.\n\n\n- BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512.\n- BIP 39 can't outsource the KDF computation to a 3rd party.\n\nTrue, but having one or two solid options are better than having\ngazillions of possible options.\n\u00a0\n5 defined KDFs out of a possible 32 is hardly \"gazillions\".\n\n- BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.\n\nTrue, but they are encouraged to use the list provided. Possibility to\noutsource KDF outside of your \"standard\" breaks much more compatibility\nthan this.\n\u00a0\nWould you care to elaborate how optional outsourcing of the KDF breaks compatibility?\n\njp\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/c685124f/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T19:39:29",
                "message_text_only": "On 03/12/2014 08:26 PM, Jean-Paul Kogelman wrote:\n> So upon entering a password with a typo, the user will not be notified of an \n> error, but be presented with a wallet balance of 0, after the blockchain has \n> been scanned. I'm sorry, but that's not the kind of experience I would want to \n> present to my users.\n\nSure, you can have either plausible deniability or typo checking, not\nboth at the same time.\n\n> Would you care to elaborate how optional outsourcing of the KDF breaks \n> compatibility?\n\nI'm afraid one would end up with code generated in one client that is\nunusable in a different client, because the client's developer thought\nthat using fancier algorithm instead of the proposed ones was a good idea.\n\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T19:55:39",
                "message_text_only": "On Wed, Mar 12, 2014 at 2:39 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 08:26 PM, Jean-Paul Kogelman wrote:\n> > So upon entering a password with a typo, the user will not be notified\n> of an\n> > error, but be presented with a wallet balance of 0, after the blockchain\n> has\n> > been scanned. I'm sorry, but that's not the kind of experience I would\n> want to\n> > present to my users.\n>\n> Sure, you can have either plausible deniability or typo checking, not\n> both at the same time.\n>\n>\nThe proposed BIP uses a bloom filter, so it has both plausible deniability *and\n*typo checking. The bloom filter is optimized for two elements and will\ncatch something like 99.9975% of typos, despite allowing two different\npasswords.\n\n> Would you care to elaborate how optional outsourcing of the KDF breaks\n> > compatibility?\n>\n> I'm afraid one would end up with code generated in one client that is\n> unusable in a different client, because the client's developer thought\n> that using fancier algorithm instead of the proposed ones was a good idea.\n>\n>\nThis is clearly in violation of the spec. You could argue this about\nanything in Bitcoin. What if a developer decided to replace SHA256 with\nSHA3 in their implementation of a Bitcoin client? Obviously this would\ncause issues.\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/46fa5b6b/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T20:04:33",
                "message_text_only": "On 03/12/2014 08:55 PM, William Yager wrote:\n> The proposed BIP uses a bloom filter, so it has both plausible deniability *and\n> *typo checking. The bloom filter is optimized for two elements and will\n> catch something like 99.9975% of typos, despite allowing two different\n> passwords.\n\nOk, I see. So the spec allows one real and one fake password. That is\nsomething I don't consider plausible deniability. I am not saying that\nthis solution is wrong, I find it quite interesting, but it's not\nplausible deniability. ;-)\n\n>> I'm afraid one would end up with code generated in one client that is\n>> unusable in a different client, because the client's developer thought\n>> that using fancier algorithm instead of the proposed ones was a good idea.\n>>\n>>\n> This is clearly in violation of the spec. \n\nAh, I misunderstood. I thought that outsourcing the KDF means allowing\nthe 3rd party to use any KDF instead of the specified ones. What would\nbe the reason to outsource if this is not possible, anyway?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T20:10:27",
                "message_text_only": "On Wed, Mar 12, 2014 at 3:04 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 08:55 PM, William Yager wrote:\n> > The proposed BIP uses a bloom filter, so it has both plausible\n> deniability *and\n> > *typo checking. The bloom filter is optimized for two elements and will\n> > catch something like 99.9975% of typos, despite allowing two different\n> > passwords.\n>\n> Ok, I see. So the spec allows one real and one fake password. That is\n> something I don't consider plausible deniability. I am not saying that\n> this solution is wrong, I find it quite interesting, but it's not\n> plausible deniability. ;-)\n>\n\nIt's a little more nuanced than that. There are *always* at least two\npasswords. If the user doesn't want a second password, a random one is\ngenerated for them. A wallet with two known encryption keys and only one\nknown encryption key are indistinguishable. If compelled to decrypt, there\nis no way to prove that the user actually knows a second password.\n\n\n>\n> >> I'm afraid one would end up with code generated in one client that is\n> >> unusable in a different client, because the client's developer thought\n> >> that using fancier algorithm instead of the proposed ones was a good\n> idea.\n> >>\n> >>\n> > This is clearly in violation of the spec.\n>\n> Ah, I misunderstood. I thought that outsourcing the KDF means allowing\n> the 3rd party to use any KDF instead of the specified ones. What would\n> be the reason to outsource if this is not possible, anyway?\n>\n>\nYes, the \"outsourcing\" terminology is a little confusing. The idea is this:\nYou have a little device, like a Trezor. It has very little RAM and very\nlittle CPU power. However, you want to use a powerful key-stretching\nalgorithm (like the maximum Scrypt KDF defined in the spec). One way to\nimplement this is to allow semi-trusted devices (like desktop PCs) to do\nall the \"heavy lifting\". The way the spec is defined, it is easy to have a\nmore powerful device do all the tough key stretching work without\nsignificantly compromising the security of the wallet.\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/437c157a/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T20:24:27",
                "message_text_only": "On 03/12/2014 09:10 PM, William Yager wrote:\n> implement this is to allow semi-trusted devices (like desktop PCs) to do\n> all the \"heavy lifting\". The way the spec is defined, it is easy to have a\n> more powerful device do all the tough key stretching work without\n> significantly compromising the security of the wallet.\n\nBy disclosing \"preH\" to compromised computer (between steps 4 and 5) you\nmake further steps 5-9 quite less important.\n\nToo bad you started to work on spec just recently. :-/\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T20:37:35",
                "message_text_only": "On Wed, Mar 12, 2014 at 3:24 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 09:10 PM, William Yager wrote:\n> > implement this is to allow semi-trusted devices (like desktop PCs) to do\n> > all the \"heavy lifting\". The way the spec is defined, it is easy to have\n> a\n> > more powerful device do all the tough key stretching work without\n> > significantly compromising the security of the wallet.\n>\n> By disclosing \"preH\" to compromised computer (between steps 4 and 5) you\n> make further steps 5-9 quite less important.\n>\n>\nYes, that was my chief complaint as well. A compromised computer removes\nmost of the extra security offered by key stretching (should you choose to\noutsource the bulk of your key stretching).\n\nHowever, I think we have a good compromise, which is the inclusion of a\nnumber of PBKDF2-HMAC-SHA512 based KDFs. For anyone who doesn't want to\ntrust any external device, but also wants to use memory-contrained devices\n(that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to\nimplement even on devices that only have a few kB of RAM, and even though\nour number of rounds is very aggressive (2^16 and 2^21), it will still run\nin reasonable time even on very slow embedded ARM processors.\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/7fa33c79/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-12T20:42:47",
                "message_text_only": "On 03/12/2014 09:37 PM, William Yager wrote:\n> (that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to\n> implement even on devices that only have a few kB of RAM, and even though\n> our number of rounds is very aggressive (2^16 and 2^21), it will still run\n> in reasonable time even on very slow embedded ARM processors.\n\nTo give you some numbers: TREZOR (120MHz ARM) does 1024 rounds of\nPBKDF2-HMAC-SHA512 in around 1 second.\n\nSo 2^16 is around one minute, 2^21 is around half an hour.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T20:49:43",
                "message_text_only": "On Wed, Mar 12, 2014 at 3:42 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/12/2014 09:37 PM, William Yager wrote:\n> > (that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to\n> > implement even on devices that only have a few kB of RAM, and even though\n> > our number of rounds is very aggressive (2^16 and 2^21), it will still\n> run\n> > in reasonable time even on very slow embedded ARM processors.\n>\n> To give you some numbers: TREZOR (120MHz ARM) does 1024 rounds of\n> PBKDF2-HMAC-SHA512 in around 1 second.\n>\n> So 2^16 is around one minute, 2^21 is around half an hour.\n>\n>\nPrecisely. And since the target of this BIP is generally storage wallets\n(just like BIP 0038), we figured these were reasonable time scales for\nencryption/decryption on slow devices.\n\nLet's say you're implementing a Raspberry Pi based cold wallet printer.\nHaving the user wait 10 seconds to several minutes is not unreasonable for\na one-time activity, especially when at least this much time is used to\ngenerate entropy, print the wallet, etc.\n\nThe same goes for phones. If you're importing a heavily encrypted wallet\ninto your device, the user won't mind waiting a few seconds or even a few\nminutes.\n\nPlus, as an added bonus, the amount of time it will take to encrypt/decrypt\nis highly deterministic, so it's easy to add a nice progress bar to a UI.\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/4bd9b204/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-03-12T21:08:33",
                "message_text_only": "On Mar 12, 2014, at 01:24 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\nOn 03/12/2014 09:10 PM, William Yager wrote:\nimplement this is to allow semi-trusted devices (like desktop PCs) to do\nall the \"heavy lifting\". The way the spec is defined, it is easy to have a\nmore powerful device do all the tough key stretching work without\nsignificantly compromising the security of the wallet.\n\nBy disclosing \"preH\" to compromised computer (between steps 4 and 5) you\nmake further steps 5-9 quite less important.\n\u00a0\nAgreed, this is a valid concern. This could possibly allow a 3rd party to crack the password, but then again, they would not gain access to any key material. So yes, you could expose your password, but your key would still be safe.\n\nIf people feel strongly about this vulnerability, we can revisit step 4 and adjust it to make password recovery more expensive.\n\njp\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/d6e4f9ca/attachment.html>"
            },
            {
                "author": "William Yager",
                "date": "2014-03-12T21:15:01",
                "message_text_only": "On Wed, Mar 12, 2014 at 4:08 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com\n> wrote:\n\n>\n> Agreed, this is a valid concern. This could possibly allow a 3rd party to\n> crack the password, but then again, they would not gain access to any key\n> material. So yes, you could expose your password, but your key would still\n> be safe.\n>\n> If people feel strongly about this vulnerability, we can revisit step 4\n> and adjust it to make password recovery more expensive.\n>\n>\nJust to clarify on J.P.'s comments:\n\n*If* you choose to outsource StrongH calculation, and *If* that machine is\ncompromised, then the security of your password is reduced to a single\nround of salted PBKDF2-HMAC-SHA512. Your private key remains on the trusted\ndevice, no matter what.\n\nRegrettable, but not catastrophic.\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/1929a5bc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Base58 encoded HD Wallet root key with optional encryption",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Gary Rowe",
                "Jean-Paul Kogelman",
                "Pavol Rusnak",
                "William Yager"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 53414
        }
    },
    {
        "title": "[Bitcoin-development] sorting public keys for p2sh multisig transactions",
        "thread_messages": [
            {
                "author": "Ryan X. Charles",
                "date": "2014-03-12T17:10:36",
                "message_text_only": "For a p2sh multisig transaction, the serialized script looks like this:\n\nm [pubkey] ... [pubkey] n OP_CHECKMULTISIG\n\nThe p2sh address is the hash of this script. The public keys can come in\nany order, but the hash depends on the order. If you have a list of\npublic keys, to which address do you send your money? We need a standard\nway of sorting the public keys so that the address generated is always\nthe same for the same public keys and m.\n\nThere are two kinds of public keys: compressed and uncompressed.\nUncompressed are longer than compressed.\n\nThere are a few obvious ways we could sort the public keys: as strings,\nas big endian numbers, as little endian numbers.\n\nThe difference is this. Suppose one public key is 59234 (uncompressed),\nand the other is 6903 (compressed). If we sort these as strings, then\n6903 > 59234. But if we sort them as big endian numbers, then 6903 is\nreally 06903, and then 06903 < 59234. So it makes a critical difference.\nSorting as little endian is yet another option that is not the same as\nthe other two.\n\nI noticed Alan Reiner's comment in an earlier message:\n\n\"Just like Jean-Pierre mentioned, we'll be using parallel\ntrees to generate P2SH addresses after sorting the keys\nlexicographically.\"\n\nIt sounds like \"lexicographically\" probably means sorting as strings. I\nhave made an implementation of public key sorting in javascript where I\nsort them as big endian numbers and fill in the 0s. IMO, the simpler\nmethod is to sort them as strings, which has a simpler implementation\nsince it doesn't require filling in 0s first. However, I don't actually\ncare what method we use so long as everyone in the bitcoin world uses\nthe same standard. Which is the best way to sort public keys?\n\n-- \nRyan X. Charles\nSoftware Engineer, BitPay\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA11B4DDE.asc\nType: application/pgp-keys\nSize: 5627 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/15ec41e6/attachment.bin>"
            },
            {
                "author": "devrandom",
                "date": "2014-03-12T19:42:44",
                "message_text_only": "Hi Ryan,\n\nProbably the most neutral way to go about this is to lexicographically\nsort by encoded representation bytes.  In java, that would be\nECPoint.getEncoded.\n\nThis is what we currently do in our watchdog Oracle.\n\nOn Wed, 2014-03-12 at 13:10 -0400, Ryan X. Charles wrote:\n> For a p2sh multisig transaction, the serialized script looks like this:\n> \n> m [pubkey] ... [pubkey] n OP_CHECKMULTISIG\n> \n> The p2sh address is the hash of this script. The public keys can come in\n> any order, but the hash depends on the order. If you have a list of\n> public keys, to which address do you send your money? We need a standard\n> way of sorting the public keys so that the address generated is always\n> the same for the same public keys and m.\n> \n> There are two kinds of public keys: compressed and uncompressed.\n> Uncompressed are longer than compressed.\n> \n> There are a few obvious ways we could sort the public keys: as strings,\n> as big endian numbers, as little endian numbers.\n> \n> The difference is this. Suppose one public key is 59234 (uncompressed),\n> and the other is 6903 (compressed). If we sort these as strings, then\n> 6903 > 59234. But if we sort them as big endian numbers, then 6903 is\n> really 06903, and then 06903 < 59234. So it makes a critical difference.\n> Sorting as little endian is yet another option that is not the same as\n> the other two.\n> \n> I noticed Alan Reiner's comment in an earlier message:\n> \n> \"Just like Jean-Pierre mentioned, we'll be using parallel\n> trees to generate P2SH addresses after sorting the keys\n> lexicographically.\"\n> \n> It sounds like \"lexicographically\" probably means sorting as strings. I\n> have made an implementation of public key sorting in javascript where I\n> sort them as big endian numbers and fill in the 0s. IMO, the simpler\n> method is to sort them as strings, which has a simpler implementation\n> since it doesn't require filling in 0s first. However, I don't actually\n> care what method we use so long as everyone in the bitcoin world uses\n> the same standard. Which is the best way to sort public keys?\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "sorting public keys for p2sh multisig transactions",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ryan X. Charles",
                "devrandom"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4694
        }
    },
    {
        "title": "[Bitcoin-development] zapwallettxes problem and wallet DB ordering",
        "thread_messages": [
            {
                "author": "Travis Johansen",
                "date": "2014-03-12T19:30:49",
                "message_text_only": "Most of the issue seems to be because of\nCWalletDB::ReorderTransactions. After applying zapwallettxes, I\nnoticed that listtransactions was no longer listing new transactions.\nAfter further investigation, new tx records were being given a low\nnOrderPos number while old acentry records were high enough that they\nwere being ordered at the end of listtransactions all the time. My\ntheory is that after the malleability attacks, the wallet DB got\nfilled with dead transactions that were removed by zapwallettxes, then\nsomehow ReorderTransactions got invoked and reset nOrderPosNext. This\nleft the acentry records with high nOrderPos and the new transactions\nbeing added near the beginning.\n\nI believe this is due to two issues:\n\n1. ReorderTransactions only collects the acentry records from \"\":\n\n    ListAccountCreditDebit(\"\", acentries);\n\n   which should probably be:\n\n    ListAccountCreditDebit(\"*\", acentries);\n\n2. ReorderTransactions seems to try too hard to maintain previous\nordering and likely fails. Or at least it did after I applied the fix\nabove. Would it not be better to just reorder the records with:\n\n    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n    {\n        CWalletTx *const pwtx = (*it).second.first;\n        CAccountingEntry *const pacentry = (*it).second.second;\n        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos :\npacentry->nOrderPos;\n\n        nOrderPos = ++nOrderPosNext;\n        if (pwtx)\n        {\n            if (!WriteTx(pwtx->GetHash(), *pwtx))\n              return DB_LOAD_FAIL;\n        }\n        else\n            if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n              return DB_LOAD_FAIL;\n    }\n\n    if (!WriteOrderPosNext(nOrderPosNext))\n        return DB_LOAD_FAIL;\n\n   Perhaps I'm missing something here but this seems to be a better\nsolution given the simplicity of the ordering system.\n\nUnsurprisingly, applying the two fixes (and hacking one entry to an\nnOrderPos of -1 to trigger ReorderTransactions) corrects the ordering\nin my wallet DB. Or at least I think it does. Does anyone know why\nthis might be a bad idea? I'm new to the code and would like to know\nif I'm potentially breaking something else."
            }
        ],
        "thread_summary": {
            "title": "zapwallettxes problem and wallet DB ordering",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Travis Johansen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2194
        }
    },
    {
        "title": "[Bitcoin-development] 0.9.0rc3 tagged",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-03-13T11:11:52",
                "message_text_only": "Haven't seen any message about this on the mailing list yet, so FYI:\n0.9.0rc3 has been tagged.\n\nThe significant change compared to rc2 is that the mining code fee policy\nnow matches relay fee policy.\n\nAlso a rare crash in the wallet code was fixed.\n\nThere are some further small build system, documentation and GUI changes.\n\nPlease start your gitian builds.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/fe6ba3c9/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-13T12:25:32",
                "message_text_only": "Binaries for 0.9.0rc3 are available at:\n\n    https://bitcoin.org/bin/0.9.0/test/\n\nPlease help sanity test.\n\nWe will also need more 'gitian builders' for the final 0.9.0 release\n(Wladimir and I are the only builders so far for the rc3 binaries), so if\nyou are running Linux or OSX and are willing to help please start up those\nvirtual machines and start building dependencies.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/bb76052e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.9.0rc3 tagged",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1109
        }
    },
    {
        "title": "[Bitcoin-development] moving the default display to mbtc",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T12:56:01",
                "message_text_only": "Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\nago, which was disappointing -- it sounded like the consensus was\nuBTC, and moving to uBTC later --which will happen-- may result in\nadditional user confusion, thanks to yet another decimal place\ntransition.\n\n\n\nOn Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:\n> We're with uBTC too. Been waiting for the signal to do this, let's do it right after the fee system is improved.\n>\n> -wendell\n>\n> grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n>\n> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>\n>> Go straight to uBTC. Humans and existing computer systems handle numbers to\n>> the left of the decimals just fine (HK Dollars, Yen). The opposite is\n>> untrue (QuickBooks really does not like 3+ decimal places).\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-03-13T13:29:46",
                "message_text_only": "The MultiBit HD view is that this is a locale-sensitive presentation issue.\nAs a result we offer a simple configuration panel giving pretty much every\npossible combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\nmXBT,  \u03bcXBT, sat along\nwith settings for leading/trailing symbol, commas, spaces and points. This\nallows anyone to customise to meet their own needs beyond the offered\ndefault.\n\nWe apply the NIST guidelines for representation of SI unit symbols (i.e no\nconversion to native language, no RTL giving icon+m etc).\n\nRight now MultiBit HD is configured to use m+icon taken from the Font\nAwesome icon set. However reading earlier posts it seems that \u03bc+icon is\nmore sensible.\n\nLet us know what you'd like.\n\nLinks:\nm+icon screenshot: http://imgur.com/a/WCDoG\nFont Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/\nNIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n\n\nOn 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n> ago, which was disappointing -- it sounded like the consensus was\n> uBTC, and moving to uBTC later --which will happen-- may result in\n> additional user confusion, thanks to yet another decimal place\n> transition.\n>\n>\n>\n> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:\n> > We're with uBTC too. Been waiting for the signal to do this, let's do it\n> right after the fee system is improved.\n> >\n> > -wendell\n> >\n> > grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n> >\n> > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n> >\n> >> Go straight to uBTC. Humans and existing computer systems handle\n> numbers to\n> >> the left of the decimals just fine (HK Dollars, Yen). The opposite is\n> >> untrue (QuickBooks really does not like 3+ decimal places).\n> >\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/1eeb631f/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T13:31:24",
                "message_text_only": "The standard has become mBTC and that's what was adopted. It's too late to\ntry and sway this on a mailing list thread now.\n\n\nOn Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> The MultiBit HD view is that this is a locale-sensitive presentation\n> issue. As a result we offer a simple configuration panel giving pretty much\n> every possible combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n> mXBT,  \u03bcXBT, sat along with settings for leading/trailing symbol, commas,\n> spaces and points. This allows anyone to customise to meet their own needs\n> beyond the offered default.\n>\n> We apply the NIST guidelines for representation of SI unit symbols (i.e no\n> conversion to native language, no RTL giving icon+m etc).\n>\n> Right now MultiBit HD is configured to use m+icon taken from the Font\n> Awesome icon set. However reading earlier posts it seems that \u03bc+icon is\n> more sensible.\n>\n> Let us know what you'd like.\n>\n> Links:\n> m+icon screenshot: http://imgur.com/a/WCDoG\n> Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/\n> NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>\n>\n> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>> ago, which was disappointing -- it sounded like the consensus was\n>> uBTC, and moving to uBTC later --which will happen-- may result in\n>> additional user confusion, thanks to yet another decimal place\n>> transition.\n>>\n>>\n>>\n>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:\n>> > We're with uBTC too. Been waiting for the signal to do this, let's do\n>> it right after the fee system is improved.\n>> >\n>> > -wendell\n>> >\n>> > grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n>> >\n>> > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>> >\n>> >> Go straight to uBTC. Humans and existing computer systems handle\n>> numbers to\n>> >> the left of the decimals just fine (HK Dollars, Yen). The opposite is\n>> >> untrue (QuickBooks really does not like 3+ decimal places).\n>> >\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/e80d4e59/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-13T13:40:12",
                "message_text_only": "Indeed. And users were crying for mBTC. Nobody was asking for \u00b5BTC.\n\nI must admit I was not aware if this thread. I just watched other\nwallets and at some point decided its time to switch to mBTC.\n\n\nOn 03/13/2014 02:31 PM, Mike Hearn wrote:\n> The standard has become mBTC and that's what was adopted. It's too late\n> to try and sway this on a mailing list thread now.\n> \n> \n> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk\n> <mailto:g.rowe at froot.co.uk>> wrote:\n> \n>     The MultiBit HD view is that this is a locale-sensitive presentation\n>     issue. As a result we offer a simple configuration panel giving\n>     pretty much every possible combination: icon, m+icon,  \u03bc+icon, BTC,\n>     mBTC,  \u03bcBTC, XBT, mXBT,  \u03bcXBT, sat along with settings for\n>     leading/trailing symbol, commas, spaces and points. This allows\n>     anyone to customise to meet their own needs beyond the offered default. \n> \n>     We apply the NIST guidelines for representation of SI unit symbols\n>     (i.e no conversion to native language, no RTL giving icon+m etc).\n> \n>     Right now MultiBit HD is configured to use m+icon taken from the\n>     Font Awesome icon set. However reading earlier posts it seems\n>     that \u03bc+icon is more sensible. \n> \n>     Let us know what you'd like.\n> \n>     Links:\n>     m+icon screenshot: http://imgur.com/a/WCDoG\n>     Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/\n>     NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n> \n> \n>     On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>     <mailto:jgarzik at bitpay.com>> wrote:\n> \n>         Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>         ago, which was disappointing -- it sounded like the consensus was\n>         uBTC, and moving to uBTC later --which will happen-- may result in\n>         additional user confusion, thanks to yet another decimal place\n>         transition.\n> \n> \n> \n>         On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n>         <mailto:w at grabhive.com>> wrote:\n>         > We're with uBTC too. Been waiting for the signal to do this,\n>         let's do it right after the fee system is improved.\n>         >\n>         > -wendell\n>         >\n>         > grabhive.com <http://grabhive.com> | twitter.com/hivewallet\n>         <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>         >\n>         > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>         >\n>         >> Go straight to uBTC. Humans and existing computer systems\n>         handle numbers to\n>         >> the left of the decimals just fine (HK Dollars, Yen). The\n>         opposite is\n>         >> untrue (QuickBooks really does not like 3+ decimal places).\n>         >\n> \n> \n> \n>         --\n>         Jeff Garzik\n>         Bitcoin core developer and open source evangelist\n>         BitPay, Inc.      https://bitpay.com/\n> \n>         ------------------------------------------------------------------------------\n>         Learn Graph Databases - Download FREE O'Reilly Book\n>         \"Graph Databases\" is the definitive new guide to graph databases\n>         and their\n>         applications. Written by three acclaimed leaders in the field,\n>         this first edition is now available. Download your free book today!\n>         http://p.sf.net/sfu/13534_NeoTech\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Learn Graph Databases - Download FREE O'Reilly Book\n>     \"Graph Databases\" is the definitive new guide to graph databases and\n>     their\n>     applications. Written by three acclaimed leaders in the field,\n>     this first edition is now available. Download your free book today!\n>     http://p.sf.net/sfu/13534_NeoTech\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-14T14:05:25",
                "message_text_only": "btw. None of Bitcoin Wallet's users complained about confusion because\nof the mBTC switch. In contrast, I get many mails and questions if\nexchange rates happen to differ by >10%.\n\nI suspect nobody looks at the Bitcoin price. It's the amount in local\ncurrency that matters to the users.\n\n\nOn 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n> Indeed. And users were crying for mBTC. Nobody was asking for \u00b5BTC.\n> \n> I must admit I was not aware if this thread. I just watched other\n> wallets and at some point decided its time to switch to mBTC.\n> \n> \n> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>> The standard has become mBTC and that's what was adopted. It's too late\n>> to try and sway this on a mailing list thread now.\n>>\n>>\n>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk\n>> <mailto:g.rowe at froot.co.uk>> wrote:\n>>\n>>     The MultiBit HD view is that this is a locale-sensitive presentation\n>>     issue. As a result we offer a simple configuration panel giving\n>>     pretty much every possible combination: icon, m+icon,  \u03bc+icon, BTC,\n>>     mBTC,  \u03bcBTC, XBT, mXBT,  \u03bcXBT, sat along with settings for\n>>     leading/trailing symbol, commas, spaces and points. This allows\n>>     anyone to customise to meet their own needs beyond the offered default. \n>>\n>>     We apply the NIST guidelines for representation of SI unit symbols\n>>     (i.e no conversion to native language, no RTL giving icon+m etc).\n>>\n>>     Right now MultiBit HD is configured to use m+icon taken from the\n>>     Font Awesome icon set. However reading earlier posts it seems\n>>     that \u03bc+icon is more sensible. \n>>\n>>     Let us know what you'd like.\n>>\n>>     Links:\n>>     m+icon screenshot: http://imgur.com/a/WCDoG\n>>     Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/\n>>     NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>\n>>\n>>     On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>>     <mailto:jgarzik at bitpay.com>> wrote:\n>>\n>>         Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>>         ago, which was disappointing -- it sounded like the consensus was\n>>         uBTC, and moving to uBTC later --which will happen-- may result in\n>>         additional user confusion, thanks to yet another decimal place\n>>         transition.\n>>\n>>\n>>\n>>         On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n>>         <mailto:w at grabhive.com>> wrote:\n>>         > We're with uBTC too. Been waiting for the signal to do this,\n>>         let's do it right after the fee system is improved.\n>>         >\n>>         > -wendell\n>>         >\n>>         > grabhive.com <http://grabhive.com> | twitter.com/hivewallet\n>>         <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>>         >\n>>         > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>         >\n>>         >> Go straight to uBTC. Humans and existing computer systems\n>>         handle numbers to\n>>         >> the left of the decimals just fine (HK Dollars, Yen). The\n>>         opposite is\n>>         >> untrue (QuickBooks really does not like 3+ decimal places).\n>>         >\n>>\n>>\n>>\n>>         --\n>>         Jeff Garzik\n>>         Bitcoin core developer and open source evangelist\n>>         BitPay, Inc.      https://bitpay.com/\n>>\n>>         ------------------------------------------------------------------------------\n>>         Learn Graph Databases - Download FREE O'Reilly Book\n>>         \"Graph Databases\" is the definitive new guide to graph databases\n>>         and their\n>>         applications. Written by three acclaimed leaders in the field,\n>>         this first edition is now available. Download your free book today!\n>>         http://p.sf.net/sfu/13534_NeoTech\n>>         _______________________________________________\n>>         Bitcoin-development mailing list\n>>         Bitcoin-development at lists.sourceforge.net\n>>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>     ------------------------------------------------------------------------------\n>>     Learn Graph Databases - Download FREE O'Reilly Book\n>>     \"Graph Databases\" is the definitive new guide to graph databases and\n>>     their\n>>     applications. Written by three acclaimed leaders in the field,\n>>     this first edition is now available. Download your free book today!\n>>     http://p.sf.net/sfu/13534_NeoTech\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-14T14:14:15",
                "message_text_only": "You give them a hard to interpret thing like mBTC and then wonder why\nthey rather look at local currency. Because the choices you gave them are bad.\n\nI think Bitcoin would have a better chance to be percieved as a currency\nof its own if it had prices and fractions like currencies do. \n\n3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits would be.\n\n\nTamas Blummer\nBits of Proof\n\nOn 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> btw. None of Bitcoin Wallet's users complained about confusion because\n> of the mBTC switch. In contrast, I get many mails and questions if\n> exchange rates happen to differ by >10%.\n> \n> I suspect nobody looks at the Bitcoin price. It's the amount in local\n> currency that matters to the users.\n> \n> \n> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>> Indeed. And users were crying for mBTC. Nobody was asking for \u00b5BTC.\n>> \n>> I must admit I was not aware if this thread. I just watched other\n>> wallets and at some point decided its time to switch to mBTC.\n>> \n>> \n>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>> The standard has become mBTC and that's what was adopted. It's too late\n>>> to try and sway this on a mailing list thread now.\n>>> \n>>> \n>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk\n>>> <mailto:g.rowe at froot.co.uk>> wrote:\n>>> \n>>>    The MultiBit HD view is that this is a locale-sensitive presentation\n>>>    issue. As a result we offer a simple configuration panel giving\n>>>    pretty much every possible combination: icon, m+icon,  \u03bc+icon, BTC,\n>>>    mBTC,  \u03bcBTC, XBT, mXBT,  \u03bcXBT, sat along with settings for\n>>>    leading/trailing symbol, commas, spaces and points. This allows\n>>>    anyone to customise to meet their own needs beyond the offered default. \n>>> \n>>>    We apply the NIST guidelines for representation of SI unit symbols\n>>>    (i.e no conversion to native language, no RTL giving icon+m etc).\n>>> \n>>>    Right now MultiBit HD is configured to use m+icon taken from the\n>>>    Font Awesome icon set. However reading earlier posts it seems\n>>>    that \u03bc+icon is more sensible. \n>>> \n>>>    Let us know what you'd like.\n>>> \n>>>    Links:\n>>>    m+icon screenshot: http://imgur.com/a/WCDoG\n>>>    Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/\n>>>    NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>> \n>>> \n>>>    On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>>>    <mailto:jgarzik at bitpay.com>> wrote:\n>>> \n>>>        Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>>>        ago, which was disappointing -- it sounded like the consensus was\n>>>        uBTC, and moving to uBTC later --which will happen-- may result in\n>>>        additional user confusion, thanks to yet another decimal place\n>>>        transition.\n>>> \n>>> \n>>> \n>>>        On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n>>>        <mailto:w at grabhive.com>> wrote:\n>>>> We're with uBTC too. Been waiting for the signal to do this,\n>>>        let's do it right after the fee system is improved.\n>>>> \n>>>> -wendell\n>>>> \n>>>> grabhive.com <http://grabhive.com> | twitter.com/hivewallet\n>>>        <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>>>> \n>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>>> \n>>>>> Go straight to uBTC. Humans and existing computer systems\n>>>        handle numbers to\n>>>>> the left of the decimals just fine (HK Dollars, Yen). The\n>>>        opposite is\n>>>>> untrue (QuickBooks really does not like 3+ decimal places).\n>>>> \n>>> \n>>> \n>>> \n>>>        --\n>>>        Jeff Garzik\n>>>        Bitcoin core developer and open source evangelist\n>>>        BitPay, Inc.      https://bitpay.com/\n>>> \n>>>        ------------------------------------------------------------------------------\n>>>        Learn Graph Databases - Download FREE O'Reilly Book\n>>>        \"Graph Databases\" is the definitive new guide to graph databases\n>>>        and their\n>>>        applications. Written by three acclaimed leaders in the field,\n>>>        this first edition is now available. Download your free book today!\n>>>        http://p.sf.net/sfu/13534_NeoTech\n>>>        _______________________________________________\n>>>        Bitcoin-development mailing list\n>>>        Bitcoin-development at lists.sourceforge.net\n>>>        <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>        https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> \n>>> \n>>>    ------------------------------------------------------------------------------\n>>>    Learn Graph Databases - Download FREE O'Reilly Book\n>>>    \"Graph Databases\" is the definitive new guide to graph databases and\n>>>    their\n>>>    applications. Written by three acclaimed leaders in the field,\n>>>    this first edition is now available. Download your free book today!\n>>>    http://p.sf.net/sfu/13534_NeoTech\n>>>    _______________________________________________\n>>>    Bitcoin-development mailing list\n>>>    Bitcoin-development at lists.sourceforge.net\n>>>    <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> \n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/13534_NeoTech\n>>> \n>>> \n>>> \n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/bb5a622e/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-14T14:49:40",
                "message_text_only": "How much do you pay for an Espresso in your local currency?\n\nAt least for the Euro and the Dollar, mBTC 3.56 is very close to what\npeople would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n0.003578.\n\nAnyway, I was just sharing real-world experience: nobody is confused.\n\n\nOn 03/14/2014 03:14 PM, Tamas Blummer wrote:\n> You give them a hard to interpret thing like mBTC and then wonder\n> why they rather look at local currency. Because the choices you\n> gave them are bad.\n> \n> I think Bitcoin would have a better chance to be percieved as a\n> currency of its own if it had prices and fractions like currencies\n> do.\n> \n> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n> would be.\n> \n> \n> Tamas Blummer Bits of Proof\n> \n> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n> wrote:\n> \n>> btw. None of Bitcoin Wallet's users complained about confusion\n>> because of the mBTC switch. In contrast, I get many mails and\n>> questions if exchange rates happen to differ by >10%.\n>> \n>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>> local currency that matters to the users.\n>> \n>> \n>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>> \u00b5BTC.\n>>> \n>>> I must admit I was not aware if this thread. I just watched\n>>> other wallets and at some point decided its time to switch to\n>>> mBTC.\n>>> \n>>> \n>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>> The standard has become mBTC and that's what was adopted.\n>>>> It's too late to try and sway this on a mailing list thread\n>>>> now.\n>>>> \n>>>> \n>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n>>>> \n>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>> presentation issue. As a result we offer a simple\n>>>> configuration panel giving pretty much every possible\n>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>> symbol, commas, spaces and points. This allows anyone to\n>>>> customise to meet their own needs beyond the offered default.\n>>>> \n>>>> \n>>>> We apply the NIST guidelines for representation of SI unit\n>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>> icon+m etc).\n>>>> \n>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>> the Font Awesome icon set. However reading earlier posts it\n>>>> seems that \u03bc+icon is more sensible.\n>>>> \n>>>> Let us know what you'd like.\n>>>> \n>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>> Awesome icon:\n>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>> \n>>>> \n>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com \n>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>> \n>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>> several weeks ago, which was disappointing -- it sounded like\n>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>> happen-- may result in additional user confusion, thanks to\n>>>> yet another decimal place transition.\n>>>> \n>>>> \n>>>> \n>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com \n>>>> <mailto:w at grabhive.com>> wrote:\n>>>>> We're with uBTC too. Been waiting for the signal to do\n>>>>> this,\n>>>> let's do it right after the fee system is improved.\n>>>>> \n>>>>> -wendell\n>>>>> \n>>>>> grabhive.com <http://grabhive.com> |\n>>>>> twitter.com/hivewallet\n>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>>>>> \n>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>>>> \n>>>>>> Go straight to uBTC. Humans and existing computer\n>>>>>> systems\n>>>> handle numbers to\n>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n>>>>>> The\n>>>> opposite is\n>>>>>> untrue (QuickBooks really does not like 3+ decimal\n>>>>>> places).\n>>>>> \n>>>> \n>>>> \n>>>> \n>>>> -- Jeff Garzik Bitcoin core developer and open source\n>>>> evangelist BitPay, Inc.      https://bitpay.com/\n>>>> \n>>>> ------------------------------------------------------------------------------\n>>>>\n>>>> \nLearn Graph Databases - Download FREE O'Reilly Book\n>>>> \"Graph Databases\" is the definitive new guide to graph\n>>>> databases and their applications. Written by three acclaimed\n>>>> leaders in the field, this first edition is now available.\n>>>> Download your free book today! \n>>>> http://p.sf.net/sfu/13534_NeoTech \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> \n------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>> Databases\" is the definitive new guide to graph databases\n>>>> and their applications. Written by three acclaimed leaders in\n>>>> the field, this first edition is now available. Download your\n>>>> free book today! http://p.sf.net/sfu/13534_NeoTech \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> \n------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>> Databases\" is the definitive new guide to graph databases and\n>>>> their applications. Written by three acclaimed leaders in the\n>>>> field, this first edition is now available. Download your\n>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n>>>> \n>>>> \n>>>> \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>>\n>>>\n>>>> \n------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>> Databases\" is the definitive new guide to graph databases and\n>>> their applications. Written by three acclaimed leaders in the\n>>> field, this first edition is now available. Download your free\n>>> book today! http://p.sf.net/sfu/13534_NeoTech \n>>> _______________________________________________ \n>>> Bitcoin-development mailing list \n>>> Bitcoin-development at lists.sourceforge.net \n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>>\n>>> \n------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>> Databases\" is the definitive new guide to graph databases and\n>> their applications. Written by three acclaimed leaders in the\n>> field, this first edition is now available. Download your free\n>> book today! http://p.sf.net/sfu/13534_NeoTech \n>> _______________________________________________ \n>> Bitcoin-development mailing list \n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nLearn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases\n> and their applications. Written by three acclaimed leaders in the\n> field, this first edition is now available. Download your free book\n> today! http://p.sf.net/sfu/13534_NeoTech\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-14T14:57:37",
                "message_text_only": "you miss the point Andreas. It is not about the magnitude but about\nthe form of a price.\n\nA number with no decimals or with two decimals is percieved as a\nprice in some currency. \n\nA number with more than two decimals is just not percieved as a price\nbut as a geeky something that you rather convert to local currency.\n\nTamas Blummer\nBits of Proof\n\nOn 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> How much do you pay for an Espresso in your local currency?\n> \n> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n> 0.003578.\n> \n> Anyway, I was just sharing real-world experience: nobody is confused.\n> \n> \n> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>> You give them a hard to interpret thing like mBTC and then wonder\n>> why they rather look at local currency. Because the choices you\n>> gave them are bad.\n>> \n>> I think Bitcoin would have a better chance to be percieved as a\n>> currency of its own if it had prices and fractions like currencies\n>> do.\n>> \n>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>> would be.\n>> \n>> \n>> Tamas Blummer Bits of Proof\n>> \n>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n>> wrote:\n>> \n>>> btw. None of Bitcoin Wallet's users complained about confusion\n>>> because of the mBTC switch. In contrast, I get many mails and\n>>> questions if exchange rates happen to differ by >10%.\n>>> \n>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>>> local currency that matters to the users.\n>>> \n>>> \n>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>>> \u00b5BTC.\n>>>> \n>>>> I must admit I was not aware if this thread. I just watched\n>>>> other wallets and at some point decided its time to switch to\n>>>> mBTC.\n>>>> \n>>>> \n>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>>> The standard has become mBTC and that's what was adopted.\n>>>>> It's too late to try and sway this on a mailing list thread\n>>>>> now.\n>>>>> \n>>>>> \n>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n>>>>> \n>>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>>> presentation issue. As a result we offer a simple\n>>>>> configuration panel giving pretty much every possible\n>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>>> symbol, commas, spaces and points. This allows anyone to\n>>>>> customise to meet their own needs beyond the offered default.\n>>>>> \n>>>>> \n>>>>> We apply the NIST guidelines for representation of SI unit\n>>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>>> icon+m etc).\n>>>>> \n>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>>> the Font Awesome icon set. However reading earlier posts it\n>>>>> seems that \u03bc+icon is more sensible.\n>>>>> \n>>>>> Let us know what you'd like.\n>>>>> \n>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>>> Awesome icon:\n>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>>> \n>>>>> \n>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com \n>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>>> \n>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>>> several weeks ago, which was disappointing -- it sounded like\n>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>>> happen-- may result in additional user confusion, thanks to\n>>>>> yet another decimal place transition.\n>>>>> \n>>>>> \n>>>>> \n>>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com \n>>>>> <mailto:w at grabhive.com>> wrote:\n>>>>>> We're with uBTC too. Been waiting for the signal to do\n>>>>>> this,\n>>>>> let's do it right after the fee system is improved.\n>>>>>> \n>>>>>> -wendell\n>>>>>> \n>>>>>> grabhive.com <http://grabhive.com> |\n>>>>>> twitter.com/hivewallet\n>>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>>>>>> \n>>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>>>>> \n>>>>>>> Go straight to uBTC. Humans and existing computer\n>>>>>>> systems\n>>>>> handle numbers to\n>>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n>>>>>>> The\n>>>>> opposite is\n>>>>>>> untrue (QuickBooks really does not like 3+ decimal\n>>>>>>> places).\n>>>>>> \n>>>>> \n>>>>> \n>>>>> \n>>>>> -- Jeff Garzik Bitcoin core developer and open source\n>>>>> evangelist BitPay, Inc.      https://bitpay.com/\n>>>>> \n>>>>> ------------------------------------------------------------------------------\n>>>>> \n>>>>> \n> Learn Graph Databases - Download FREE O'Reilly Book\n>>>>> \"Graph Databases\" is the definitive new guide to graph\n>>>>> databases and their applications. Written by three acclaimed\n>>>>> leaders in the field, this first edition is now available.\n>>>>> Download your free book today! \n>>>>> http://p.sf.net/sfu/13534_NeoTech \n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> \n>>>>> \n>>>>> \n>>>>> \n>>>>> \n> ------------------------------------------------------------------------------\n>>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>>> Databases\" is the definitive new guide to graph databases\n>>>>> and their applications. Written by three acclaimed leaders in\n>>>>> the field, this first edition is now available. Download your\n>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech \n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> \n>>>>> \n>>>>> \n>>>>> \n>>>>> \n>>>>> \n> ------------------------------------------------------------------------------\n>>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>>> Databases\" is the definitive new guide to graph databases and\n>>>>> their applications. Written by three acclaimed leaders in the\n>>>>> field, this first edition is now available. Download your\n>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n>>>>> \n>>>>> \n>>>>> \n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> \n>>>> \n>>>> \n>>>> \n>>>> \n>>>>> \n> ------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>> Databases\" is the definitive new guide to graph databases and\n>>>> their applications. Written by three acclaimed leaders in the\n>>>> field, this first edition is now available. Download your free\n>>>> book today! http://p.sf.net/sfu/13534_NeoTech \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> \n>>> \n>>> \n>>> \n>>> \n>>>> \n> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>> Databases\" is the definitive new guide to graph databases and\n>>> their applications. Written by three acclaimed leaders in the\n>>> field, this first edition is now available. Download your free\n>>> book today! http://p.sf.net/sfu/13534_NeoTech \n>>> _______________________________________________ \n>>> Bitcoin-development mailing list \n>>> Bitcoin-development at lists.sourceforge.net \n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> \n>> \n> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases\n>> and their applications. Written by three acclaimed leaders in the\n>> field, this first edition is now available. Download your free book\n>> today! http://p.sf.net/sfu/13534_NeoTech\n>> \n>> \n>> \n>> _______________________________________________ Bitcoin-development\n>> mailing list Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/1777aac4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/1777aac4/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-14T15:02:59",
                "message_text_only": "By that definition 3.56 is a price. Maybe I misunderstood you and you're\nlobbying for mBTC?\n\n\nOn 03/14/2014 03:57 PM, Tamas Blummer wrote:\n> you miss the point Andreas. It is not about the magnitude but about\n> the form of a price.\n> \n> A number with no decimals or with two decimals is percieved as a\n> price in some currency. \n> \n> A number with more than two decimals is just not percieved as a price\n> but as a geeky something that you rather convert to local currency.\n> \n> Tamas Blummer\n> Bits of Proof\n> \n> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de\n> <mailto:andreas at schildbach.de>> wrote:\n> \n>> How much do you pay for an Espresso in your local currency?\n>>\n>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n>> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n>> 0.003578.\n>>\n>> Anyway, I was just sharing real-world experience: nobody is confused.\n>>\n>>\n>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>>> You give them a hard to interpret thing like mBTC and then wonder\n>>> why they rather look at local currency. Because the choices you\n>>> gave them are bad.\n>>>\n>>> I think Bitcoin would have a better chance to be percieved as a\n>>> currency of its own if it had prices and fractions like currencies\n>>> do.\n>>>\n>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>>> would be.\n>>>\n>>>\n>>> Tamas Blummer Bits of Proof\n>>>\n>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de\n>>> <mailto:andreas at schildbach.de>>\n>>> wrote:\n>>>\n>>>> btw. None of Bitcoin Wallet's users complained about confusion\n>>>> because of the mBTC switch. In contrast, I get many mails and\n>>>> questions if exchange rates happen to differ by >10%.\n>>>>\n>>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>>>> local currency that matters to the users.\n>>>>\n>>>>\n>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>>>> \u00b5BTC.\n>>>>>\n>>>>> I must admit I was not aware if this thread. I just watched\n>>>>> other wallets and at some point decided its time to switch to\n>>>>> mBTC.\n>>>>>\n>>>>>\n>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>>>> The standard has become mBTC and that's what was adopted.\n>>>>>> It's too late to try and sway this on a mailing list thread\n>>>>>> now.\n>>>>>>\n>>>>>>\n>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>\n>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:\n>>>>>>\n>>>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>>>> presentation issue. As a result we offer a simple\n>>>>>> configuration panel giving pretty much every possible\n>>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>>>> symbol, commas, spaces and points. This allows anyone to\n>>>>>> customise to meet their own needs beyond the offered default.\n>>>>>>\n>>>>>>\n>>>>>> We apply the NIST guidelines for representation of SI unit\n>>>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>>>> icon+m etc).\n>>>>>>\n>>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>>>> the Font Awesome icon set. However reading earlier posts it\n>>>>>> seems that \u03bc+icon is more sensible.\n>>>>>>\n>>>>>> Let us know what you'd like.\n>>>>>>\n>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>>>> Awesome icon:\n>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>>>>\n>>>>>>\n>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>>>>>> <mailto:jgarzik at bitpay.com>\n>>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>>>>\n>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>>>> several weeks ago, which was disappointing -- it sounded like\n>>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>>>> happen-- may result in additional user confusion, thanks to\n>>>>>> yet another decimal place transition."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-14T15:12:45",
                "message_text_only": "I think you want to misunderstand me Andreas.\n\nIt is astonishing arrogance to define the units because we in Bitcoin are used to\nsome wierd notation and ignore that the vast majority of population and \n financial software in existence does not have a notion of prices\nwith more than two decimals.\n\nWith 1 bit = 100 satoshi, we would solve this problem for good. \nInstead mBTC is a confusing step in-between.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 14.03.2014, at 16:02, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> By that definition 3.56 is a price. Maybe I misunderstood you and you're\n> lobbying for mBTC?\n> \n> \n> On 03/14/2014 03:57 PM, Tamas Blummer wrote:\n>> you miss the point Andreas. It is not about the magnitude but about\n>> the form of a price.\n>> \n>> A number with no decimals or with two decimals is percieved as a\n>> price in some currency. \n>> \n>> A number with more than two decimals is just not percieved as a price\n>> but as a geeky something that you rather convert to local currency.\n>> \n>> Tamas Blummer\n>> Bits of Proof\n>> \n>> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de\n>> <mailto:andreas at schildbach.de>> wrote:\n>> \n>>> How much do you pay for an Espresso in your local currency?\n>>> \n>>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n>>> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n>>> 0.003578.\n>>> \n>>> Anyway, I was just sharing real-world experience: nobody is confused.\n>>> \n>>> \n>>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>>>> You give them a hard to interpret thing like mBTC and then wonder\n>>>> why they rather look at local currency. Because the choices you\n>>>> gave them are bad.\n>>>> \n>>>> I think Bitcoin would have a better chance to be percieved as a\n>>>> currency of its own if it had prices and fractions like currencies\n>>>> do.\n>>>> \n>>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>>>> would be.\n>>>> \n>>>> \n>>>> Tamas Blummer Bits of Proof\n>>>> \n>>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de\n>>>> <mailto:andreas at schildbach.de>>\n>>>> wrote:\n>>>> \n>>>>> btw. None of Bitcoin Wallet's users complained about confusion\n>>>>> because of the mBTC switch. In contrast, I get many mails and\n>>>>> questions if exchange rates happen to differ by >10%.\n>>>>> \n>>>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>>>>> local currency that matters to the users.\n>>>>> \n>>>>> \n>>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>>>>> \u00b5BTC.\n>>>>>> \n>>>>>> I must admit I was not aware if this thread. I just watched\n>>>>>> other wallets and at some point decided its time to switch to\n>>>>>> mBTC.\n>>>>>> \n>>>>>> \n>>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>>>>> The standard has become mBTC and that's what was adopted.\n>>>>>>> It's too late to try and sway this on a mailing list thread\n>>>>>>> now.\n>>>>>>> \n>>>>>>> \n>>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>\n>>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:\n>>>>>>> \n>>>>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>>>>> presentation issue. As a result we offer a simple\n>>>>>>> configuration panel giving pretty much every possible\n>>>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>>>>> symbol, commas, spaces and points. This allows anyone to\n>>>>>>> customise to meet their own needs beyond the offered default.\n>>>>>>> \n>>>>>>> \n>>>>>>> We apply the NIST guidelines for representation of SI unit\n>>>>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>>>>> icon+m etc).\n>>>>>>> \n>>>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>>>>> the Font Awesome icon set. However reading earlier posts it\n>>>>>>> seems that \u03bc+icon is more sensible.\n>>>>>>> \n>>>>>>> Let us know what you'd like.\n>>>>>>> \n>>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>>>>> Awesome icon:\n>>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>>>>> \n>>>>>>> \n>>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>>>>>>> <mailto:jgarzik at bitpay.com>\n>>>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>>>>> \n>>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>>>>> several weeks ago, which was disappointing -- it sounded like\n>>>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>>>>> happen-- may result in additional user confusion, thanks to\n>>>>>>> yet another decimal place transition.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/605b143c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/605b143c/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-14T15:30:00",
                "message_text_only": "I don't know about financial software.\n\nI really don't get what you mean by weird notation? Bitcoin Wallet is\nmade for ordinary users. They are used to real-world prices like EUR\n1.63 / USD 2.26 (that would be the Espresso example). How can mBTC 3.56\nbe weird to these people?\n\nGranted, there are exceptions, like in Japan. Maybe those would be\nbetter served with \u00b5BTC as default. Maybe. Up to now, outside of this\nmailing list nobody requested \u00b5BTC. Then again, Japanese userbase is\ntiny compared to US.\n\n\nOn 03/14/2014 04:12 PM, Tamas Blummer wrote:\n> I think you want to misunderstand me Andreas.\n> \n> It is astonishing arrogance to define the units because we in Bitcoin\n> are used to\n> some wierd notation and ignore that the vast majority of population and \n>  financial software in existence does not have a notion of prices\n> with more than two decimals.\n> \n> With 1 bit = 100 satoshi, we would solve this problem for good. \n> Instead mBTC is a confusing step in-between.\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> \n> On 14.03.2014, at 16:02, Andreas Schildbach <andreas at schildbach.de\n> <mailto:andreas at schildbach.de>> wrote:\n> \n>> By that definition 3.56 is a price. Maybe I misunderstood you and you're\n>> lobbying for mBTC?\n>>\n>>\n>> On 03/14/2014 03:57 PM, Tamas Blummer wrote:\n>>> you miss the point Andreas. It is not about the magnitude but about\n>>> the form of a price.\n>>>\n>>> A number with no decimals or with two decimals is percieved as a\n>>> price in some currency.\n>>>\n>>> A number with more than two decimals is just not percieved as a price\n>>> but as a geeky something that you rather convert to local currency.\n>>>\n>>> Tamas Blummer\n>>> Bits of Proof\n>>>\n>>> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de\n>>> <mailto:andreas at schildbach.de>\n>>> <mailto:andreas at schildbach.de>> wrote:\n>>>\n>>>> How much do you pay for an Espresso in your local currency?\n>>>>\n>>>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n>>>> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n>>>> 0.003578.\n>>>>\n>>>> Anyway, I was just sharing real-world experience: nobody is confused.\n>>>>\n>>>>\n>>>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>>>>> You give them a hard to interpret thing like mBTC and then wonder\n>>>>> why they rather look at local currency. Because the choices you\n>>>>> gave them are bad.\n>>>>>\n>>>>> I think Bitcoin would have a better chance to be percieved as a\n>>>>> currency of its own if it had prices and fractions like currencies\n>>>>> do.\n>>>>>\n>>>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>>>>> would be.\n>>>>>\n>>>>>\n>>>>> Tamas Blummer Bits of Proof\n>>>>>\n>>>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de\n>>>>> <mailto:andreas at schildbach.de>\n>>>>> <mailto:andreas at schildbach.de>>\n>>>>> wrote:\n>>>>>\n>>>>>> btw. None of Bitcoin Wallet's users complained about confusion\n>>>>>> because of the mBTC switch. In contrast, I get many mails and\n>>>>>> questions if exchange rates happen to differ by >10%.\n>>>>>>\n>>>>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>>>>>> local currency that matters to the users.\n>>>>>>\n>>>>>>\n>>>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>>>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>>>>>> \u00b5BTC.\n>>>>>>>\n>>>>>>> I must admit I was not aware if this thread. I just watched\n>>>>>>> other wallets and at some point decided its time to switch to\n>>>>>>> mBTC.\n>>>>>>>\n>>>>>>>\n>>>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>>>>>> The standard has become mBTC and that's what was adopted.\n>>>>>>>> It's too late to try and sway this on a mailing list thread\n>>>>>>>> now.\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>\n>>>>>>>> <mailto:g.rowe at froot.co.uk>\n>>>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:\n>>>>>>>>\n>>>>>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>>>>>> presentation issue. As a result we offer a simple\n>>>>>>>> configuration panel giving pretty much every possible\n>>>>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>>>>>> symbol, commas, spaces and points. This allows anyone to\n>>>>>>>> customise to meet their own needs beyond the offered default.\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> We apply the NIST guidelines for representation of SI unit\n>>>>>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>>>>>> icon+m etc).\n>>>>>>>>\n>>>>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>>>>>> the Font Awesome icon set. However reading earlier posts it\n>>>>>>>> seems that \u03bc+icon is more sensible.\n>>>>>>>>\n>>>>>>>> Let us know what you'd like.\n>>>>>>>>\n>>>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>>>>>> Awesome icon:\n>>>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>>>>>>>> <mailto:jgarzik at bitpay.com>\n>>>>>>>> <mailto:jgarzik at bitpay.com>\n>>>>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>>>>>>\n>>>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>>>>>> several weeks ago, which was disappointing -- it sounded like\n>>>>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>>>>>> happen-- may result in additional user confusion, thanks to\n>>>>>>>> yet another decimal place transition.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-14T15:32:55",
                "message_text_only": "The issue here is that most people are producing prices in BTC by just\nmultiplying through the spot rate with full precision. Obviously if you\nconverted dollar prices to Euro prices with the same technique, you'd also\nend up with lots of numbers after the decimal point, but in the real world\nnobody actually does this. They always \"prettify\" the price.\n\nThis practice often annoys people because they feel like they get short\nchanged. The most notorious example is Apple which likes (liked?) to charge\n99 cents per iTunes song in the USA, and 99 pennies per song in the UK,\ndespite that the British pound is worth a lot more than the dollar. It\nshould be more like 60 pence.\n\nNothing stops BitPay rounding the mBTC price to look more natural, but\nright now it's not common practice.\n\n\nOn Fri, Mar 14, 2014 at 4:02 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> By that definition 3.56 is a price. Maybe I misunderstood you and you're\n> lobbying for mBTC?\n>\n>\n> On 03/14/2014 03:57 PM, Tamas Blummer wrote:\n> > you miss the point Andreas. It is not about the magnitude but about\n> > the form of a price.\n> >\n> > A number with no decimals or with two decimals is percieved as a\n> > price in some currency.\n> >\n> > A number with more than two decimals is just not percieved as a price\n> > but as a geeky something that you rather convert to local currency.\n> >\n> > Tamas Blummer\n> > Bits of Proof\n> >\n> > On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de\n> > <mailto:andreas at schildbach.de>> wrote:\n> >\n> >> How much do you pay for an Espresso in your local currency?\n> >>\n> >> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n> >> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n> >> 0.003578.\n> >>\n> >> Anyway, I was just sharing real-world experience: nobody is confused.\n> >>\n> >>\n> >> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n> >>> You give them a hard to interpret thing like mBTC and then wonder\n> >>> why they rather look at local currency. Because the choices you\n> >>> gave them are bad.\n> >>>\n> >>> I think Bitcoin would have a better chance to be percieved as a\n> >>> currency of its own if it had prices and fractions like currencies\n> >>> do.\n> >>>\n> >>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n> >>> would be.\n> >>>\n> >>>\n> >>> Tamas Blummer Bits of Proof\n> >>>\n> >>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de\n> >>> <mailto:andreas at schildbach.de>>\n> >>> wrote:\n> >>>\n> >>>> btw. None of Bitcoin Wallet's users complained about confusion\n> >>>> because of the mBTC switch. In contrast, I get many mails and\n> >>>> questions if exchange rates happen to differ by >10%.\n> >>>>\n> >>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n> >>>> local currency that matters to the users.\n> >>>>\n> >>>>\n> >>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n> >>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n> >>>>> \u00b5BTC.\n> >>>>>\n> >>>>> I must admit I was not aware if this thread. I just watched\n> >>>>> other wallets and at some point decided its time to switch to\n> >>>>> mBTC.\n> >>>>>\n> >>>>>\n> >>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n> >>>>>> The standard has become mBTC and that's what was adopted.\n> >>>>>> It's too late to try and sway this on a mailing list thread\n> >>>>>> now.\n> >>>>>>\n> >>>>>>\n> >>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n> >>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>\n> >>>>>> <mailto:g.rowe at froot.co.uk>> wrote:\n> >>>>>>\n> >>>>>> The MultiBit HD view is that this is a locale-sensitive\n> >>>>>> presentation issue. As a result we offer a simple\n> >>>>>> configuration panel giving pretty much every possible\n> >>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n> >>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n> >>>>>> symbol, commas, spaces and points. This allows anyone to\n> >>>>>> customise to meet their own needs beyond the offered default.\n> >>>>>>\n> >>>>>>\n> >>>>>> We apply the NIST guidelines for representation of SI unit\n> >>>>>> symbols (i.e no conversion to native language, no RTL giving\n> >>>>>> icon+m etc).\n> >>>>>>\n> >>>>>> Right now MultiBit HD is configured to use m+icon taken from\n> >>>>>> the Font Awesome icon set. However reading earlier posts it\n> >>>>>> seems that \u03bc+icon is more sensible.\n> >>>>>>\n> >>>>>> Let us know what you'd like.\n> >>>>>>\n> >>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n> >>>>>> Awesome icon:\n> >>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n> >>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n> >>>>>>\n> >>>>>>\n> >>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n> >>>>>> <mailto:jgarzik at bitpay.com>\n> >>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n> >>>>>>\n> >>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n> >>>>>> several weeks ago, which was disappointing -- it sounded like\n> >>>>>> the consensus was uBTC, and moving to uBTC later --which will\n> >>>>>> happen-- may result in additional user confusion, thanks to\n> >>>>>> yet another decimal place transition.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/0a34753f/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-14T15:56:23",
                "message_text_only": "Indeed, rounding is the obvious easy fix. Bitcoin Wallet rounds all\namounts except if you type amounts with a higher precision.\n\n\nOn 03/14/2014 04:32 PM, Mike Hearn wrote:\n> The issue here is that most people are producing prices in BTC by just\n> multiplying through the spot rate with full precision. Obviously if you\n> converted dollar prices to Euro prices with the same technique, you'd\n> also end up with lots of numbers after the decimal point, but in the\n> real world nobody actually does this. They always \"prettify\" the price.\n> \n> This practice often annoys people because they feel like they get short\n> changed. The most notorious example is Apple which likes (liked?) to\n> charge 99 cents per iTunes song in the USA, and 99 pennies per song in\n> the UK, despite that the British pound is worth a lot more than the\n> dollar. It should be more like 60 pence.\n> \n> Nothing stops BitPay rounding the mBTC price to look more natural, but\n> right now it's not common practice.\n> \n> \n> On Fri, Mar 14, 2014 at 4:02 PM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     By that definition 3.56 is a price. Maybe I misunderstood you and you're\n>     lobbying for mBTC?\n> \n> \n>     On 03/14/2014 03:57 PM, Tamas Blummer wrote:\n>     > you miss the point Andreas. It is not about the magnitude but about\n>     > the form of a price.\n>     >\n>     > A number with no decimals or with two decimals is percieved as a\n>     > price in some currency.\n>     >\n>     > A number with more than two decimals is just not percieved as a price\n>     > but as a geeky something that you rather convert to local currency.\n>     >\n>     > Tamas Blummer\n>     > Bits of Proof\n>     >\n>     > On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de\n>     <mailto:andreas at schildbach.de>\n>     > <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:\n>     >\n>     >> How much do you pay for an Espresso in your local currency?\n>     >>\n>     >> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n>     >> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n>     >> 0.003578.\n>     >>\n>     >> Anyway, I was just sharing real-world experience: nobody is confused.\n>     >>\n>     >>\n>     >> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>     >>> You give them a hard to interpret thing like mBTC and then wonder\n>     >>> why they rather look at local currency. Because the choices you\n>     >>> gave them are bad.\n>     >>>\n>     >>> I think Bitcoin would have a better chance to be percieved as a\n>     >>> currency of its own if it had prices and fractions like currencies\n>     >>> do.\n>     >>>\n>     >>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>     >>> would be.\n>     >>>\n>     >>>\n>     >>> Tamas Blummer Bits of Proof\n>     >>>\n>     >>> On 14.03.2014, at 15:05, Andreas Schildbach\n>     <andreas at schildbach.de <mailto:andreas at schildbach.de>\n>     >>> <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>>\n>     >>> wrote:\n>     >>>\n>     >>>> btw. None of Bitcoin Wallet's users complained about confusion\n>     >>>> because of the mBTC switch. In contrast, I get many mails and\n>     >>>> questions if exchange rates happen to differ by >10%.\n>     >>>>\n>     >>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>     >>>> local currency that matters to the users.\n>     >>>>\n>     >>>>\n>     >>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>     >>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>     >>>>> \u00b5BTC.\n>     >>>>>\n>     >>>>> I must admit I was not aware if this thread. I just watched\n>     >>>>> other wallets and at some point decided its time to switch to\n>     >>>>> mBTC.\n>     >>>>>\n>     >>>>>\n>     >>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>     >>>>>> The standard has become mBTC and that's what was adopted.\n>     >>>>>> It's too late to try and sway this on a mailing list thread\n>     >>>>>> now.\n>     >>>>>>\n>     >>>>>>\n>     >>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>     >>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>\n>     <mailto:g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>>\n>     >>>>>> <mailto:g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>>> wrote:\n>     >>>>>>\n>     >>>>>> The MultiBit HD view is that this is a locale-sensitive\n>     >>>>>> presentation issue. As a result we offer a simple\n>     >>>>>> configuration panel giving pretty much every possible\n>     >>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>     >>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>     >>>>>> symbol, commas, spaces and points. This allows anyone to\n>     >>>>>> customise to meet their own needs beyond the offered default.\n>     >>>>>>\n>     >>>>>>\n>     >>>>>> We apply the NIST guidelines for representation of SI unit\n>     >>>>>> symbols (i.e no conversion to native language, no RTL giving\n>     >>>>>> icon+m etc).\n>     >>>>>>\n>     >>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>     >>>>>> the Font Awesome icon set. However reading earlier posts it\n>     >>>>>> seems that \u03bc+icon is more sensible.\n>     >>>>>>\n>     >>>>>> Let us know what you'd like.\n>     >>>>>>\n>     >>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>     >>>>>> Awesome icon:\n>     >>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>     >>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>     >>>>>>\n>     >>>>>>\n>     >>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>     <mailto:jgarzik at bitpay.com>\n>     >>>>>> <mailto:jgarzik at bitpay.com <mailto:jgarzik at bitpay.com>>\n>     >>>>>> <mailto:jgarzik at bitpay.com <mailto:jgarzik at bitpay.com>>> wrote:\n>     >>>>>>\n>     >>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>     >>>>>> several weeks ago, which was disappointing -- it sounded like\n>     >>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>     >>>>>> happen-- may result in additional user confusion, thanks to\n>     >>>>>> yet another decimal place transition.\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Learn Graph Databases - Download FREE O'Reilly Book\n>     \"Graph Databases\" is the definitive new guide to graph databases and\n>     their\n>     applications. Written by three acclaimed leaders in the field,\n>     this first edition is now available. Download your free book today!\n>     http://p.sf.net/sfu/13534_NeoTech\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-14T16:01:33",
                "message_text_only": "A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude\nnumbers in both Chinas, Thailand, and other economically important East\nAsian countries. Expect to pay hundreds of rupees in India, or thousands\nof rupees in Indonesia.\n\nThis concept that money should have low, single digits for everyday\nprices is not just Western-centric, it's English-centric. An expresso in\nRome would have cost you a few (tens of?) thousand lira in recent\nmemory. It was pegging of the Euro to the U.S. dollar that brought\nEuropean states in line with the English-speaking world (who themselves\ntrace lineage to the pound sterling).\n\nNo, there is no culturally-neutral common standards for currency and\npricing. But there are ill-advised, ill-informed \"standards\" in\naccounting software that we nevertheless must live with. These software\npackages do not handle more than two decimal places gracefully. That\ngives technical justifications for moving to either uBTC or accounting\nin Satoshis directly. An argument for uBTC is that it retains alignment\nwith the existing kBTC/BTC/mBTC/uBTC conventions.\n\nHowever another limitation of these accounting software practices is\nthat they do not always handle SI notation very well, particularly\nsub-unit prefixes. By relabeling uBTC to be a new three-digit symbol\n(XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully\ncompliant with any software accounting package out there.\n\nWe are still very, very early in the adoption period. These are changes\nthat could be made now simply by a few big players and/or the bitcoin\nfoundation changing their practice and their users following suit.\n\nOn 03/14/2014 07:49 AM, Andreas Schildbach wrote:\n> How much do you pay for an Espresso in your local currency?\n> \n> At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n> people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n> 0.003578.\n> \n> Anyway, I was just sharing real-world experience: nobody is confused.\n> \n> \n> On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>> You give them a hard to interpret thing like mBTC and then wonder\n>> why they rather look at local currency. Because the choices you\n>> gave them are bad.\n>>\n>> I think Bitcoin would have a better chance to be percieved as a\n>> currency of its own if it had prices and fractions like currencies\n>> do.\n>>\n>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>> would be.\n>>\n>>\n>> Tamas Blummer Bits of Proof\n>>\n>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n>> wrote:\n>>\n>>> btw. None of Bitcoin Wallet's users complained about confusion\n>>> because of the mBTC switch. In contrast, I get many mails and\n>>> questions if exchange rates happen to differ by >10%.\n>>>\n>>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>>> local currency that matters to the users.\n>>>\n>>>\n>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>>>> \u00b5BTC.\n>>>>\n>>>> I must admit I was not aware if this thread. I just watched\n>>>> other wallets and at some point decided its time to switch to\n>>>> mBTC.\n>>>>\n>>>>\n>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>>>>> The standard has become mBTC and that's what was adopted.\n>>>>> It's too late to try and sway this on a mailing list thread\n>>>>> now.\n>>>>>\n>>>>>\n>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n>>>>>\n>>>>> The MultiBit HD view is that this is a locale-sensitive\n>>>>> presentation issue. As a result we offer a simple\n>>>>> configuration panel giving pretty much every possible\n>>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>>>>> symbol, commas, spaces and points. This allows anyone to\n>>>>> customise to meet their own needs beyond the offered default.\n>>>>>\n>>>>>\n>>>>> We apply the NIST guidelines for representation of SI unit\n>>>>> symbols (i.e no conversion to native language, no RTL giving\n>>>>> icon+m etc).\n>>>>>\n>>>>> Right now MultiBit HD is configured to use m+icon taken from\n>>>>> the Font Awesome icon set. However reading earlier posts it\n>>>>> seems that \u03bc+icon is more sensible.\n>>>>>\n>>>>> Let us know what you'd like.\n>>>>>\n>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>>>>> Awesome icon:\n>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>>>>>\n>>>>>\n>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com \n>>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>>>>>\n>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>>>>> several weeks ago, which was disappointing -- it sounded like\n>>>>> the consensus was uBTC, and moving to uBTC later --which will\n>>>>> happen-- may result in additional user confusion, thanks to\n>>>>> yet another decimal place transition.\n>>>>>\n>>>>>\n>>>>>\n>>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com \n>>>>> <mailto:w at grabhive.com>> wrote:\n>>>>>> We're with uBTC too. Been waiting for the signal to do\n>>>>>> this,\n>>>>> let's do it right after the fee system is improved.\n>>>>>>\n>>>>>> -wendell\n>>>>>>\n>>>>>> grabhive.com <http://grabhive.com> |\n>>>>>> twitter.com/hivewallet\n>>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>>>>>>\n>>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>>>>>\n>>>>>>> Go straight to uBTC. Humans and existing computer\n>>>>>>> systems\n>>>>> handle numbers to\n>>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n>>>>>>> The\n>>>>> opposite is\n>>>>>>> untrue (QuickBooks really does not like 3+ decimal\n>>>>>>> places).\n>>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>> -- Jeff Garzik Bitcoin core developer and open source\n>>>>> evangelist BitPay, Inc.      https://bitpay.com/\n>>>>>\n>>>>> ------------------------------------------------------------------------------\n>>>>>\n>>>>>\n> Learn Graph Databases - Download FREE O'Reilly Book\n>>>>> \"Graph Databases\" is the definitive new guide to graph\n>>>>> databases and their applications. Written by three acclaimed\n>>>>> leaders in the field, this first edition is now available.\n>>>>> Download your free book today! \n>>>>> http://p.sf.net/sfu/13534_NeoTech \n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n> ------------------------------------------------------------------------------\n>>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>>> Databases\" is the definitive new guide to graph databases\n>>>>> and their applications. Written by three acclaimed leaders in\n>>>>> the field, this first edition is now available. Download your\n>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech \n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n> ------------------------------------------------------------------------------\n>>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>>> Databases\" is the definitive new guide to graph databases and\n>>>>> their applications. Written by three acclaimed leaders in the\n>>>>> field, this first edition is now available. Download your\n>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n>>>>>\n>>>>>\n>>>>>\n>>>>> _______________________________________________ \n>>>>> Bitcoin-development mailing list \n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>\n>>>>\n>>>>\n>>>>\n>>>>\n>>>>>\n> ------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>>> Databases\" is the definitive new guide to graph databases and\n>>>> their applications. Written by three acclaimed leaders in the\n>>>> field, this first edition is now available. Download your free\n>>>> book today! http://p.sf.net/sfu/13534_NeoTech \n>>>> _______________________________________________ \n>>>> Bitcoin-development mailing list \n>>>> Bitcoin-development at lists.sourceforge.net \n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>>\n>>>\n>>>>\n> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>>> Databases\" is the definitive new guide to graph databases and\n>>> their applications. Written by three acclaimed leaders in the\n>>> field, this first edition is now available. Download your free\n>>> book today! http://p.sf.net/sfu/13534_NeoTech \n>>> _______________________________________________ \n>>> Bitcoin-development mailing list \n>>> Bitcoin-development at lists.sourceforge.net \n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>>\n> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases\n>> and their applications. Written by three acclaimed leaders in the\n>> field, this first edition is now available. Download your free book\n>> today! http://p.sf.net/sfu/13534_NeoTech\n>>\n>>\n>>\n>> _______________________________________________ Bitcoin-development\n>> mailing list Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alex Morcos",
                "date": "2014-03-14T16:15:30",
                "message_text_only": "I think Mark makes some good arguments.\nI realize this would only add to the confusion, but...\nWhat if we did relabel 100 satoshis to be some new kind of unit (\"bit\" or\nwhatever else), with a proper 3 letter code, and then from a user\nstandpoint, where people are using mBTC, they could switch to using Kbits\n(ok thats obviously bad, but you get the idea) at the same nominal price.\n But accounting backends and so forth would operate in the \"bit\" base unit\nwith 2 decimals of precision.\n\n\n\n\nOn Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude\n> numbers in both Chinas, Thailand, and other economically important East\n> Asian countries. Expect to pay hundreds of rupees in India, or thousands\n> of rupees in Indonesia.\n>\n> This concept that money should have low, single digits for everyday\n> prices is not just Western-centric, it's English-centric. An expresso in\n> Rome would have cost you a few (tens of?) thousand lira in recent\n> memory. It was pegging of the Euro to the U.S. dollar that brought\n> European states in line with the English-speaking world (who themselves\n> trace lineage to the pound sterling).\n>\n> No, there is no culturally-neutral common standards for currency and\n> pricing. But there are ill-advised, ill-informed \"standards\" in\n> accounting software that we nevertheless must live with. These software\n> packages do not handle more than two decimal places gracefully. That\n> gives technical justifications for moving to either uBTC or accounting\n> in Satoshis directly. An argument for uBTC is that it retains alignment\n> with the existing kBTC/BTC/mBTC/uBTC conventions.\n>\n> However another limitation of these accounting software practices is\n> that they do not always handle SI notation very well, particularly\n> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol\n> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully\n> compliant with any software accounting package out there.\n>\n> We are still very, very early in the adoption period. These are changes\n> that could be made now simply by a few big players and/or the bitcoin\n> foundation changing their practice and their users following suit.\n>\n> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:\n> > How much do you pay for an Espresso in your local currency?\n> >\n> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n> > people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n> > 0.003578.\n> >\n> > Anyway, I was just sharing real-world experience: nobody is confused.\n> >\n> >\n> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n> >> You give them a hard to interpret thing like mBTC and then wonder\n> >> why they rather look at local currency. Because the choices you\n> >> gave them are bad.\n> >>\n> >> I think Bitcoin would have a better chance to be percieved as a\n> >> currency of its own if it had prices and fractions like currencies\n> >> do.\n> >>\n> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n> >> would be.\n> >>\n> >>\n> >> Tamas Blummer Bits of Proof\n> >>\n> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n> >> wrote:\n> >>\n> >>> btw. None of Bitcoin Wallet's users complained about confusion\n> >>> because of the mBTC switch. In contrast, I get many mails and\n> >>> questions if exchange rates happen to differ by >10%.\n> >>>\n> >>> I suspect nobody looks at the Bitcoin price. It's the amount in\n> >>> local currency that matters to the users.\n> >>>\n> >>>\n> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n> >>>> Indeed. And users were crying for mBTC. Nobody was asking for\n> >>>> \u00b5BTC.\n> >>>>\n> >>>> I must admit I was not aware if this thread. I just watched\n> >>>> other wallets and at some point decided its time to switch to\n> >>>> mBTC.\n> >>>>\n> >>>>\n> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n> >>>>> The standard has become mBTC and that's what was adopted.\n> >>>>> It's too late to try and sway this on a mailing list thread\n> >>>>> now.\n> >>>>>\n> >>>>>\n> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n> >>>>>\n> >>>>> The MultiBit HD view is that this is a locale-sensitive\n> >>>>> presentation issue. As a result we offer a simple\n> >>>>> configuration panel giving pretty much every possible\n> >>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n> >>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n> >>>>> symbol, commas, spaces and points. This allows anyone to\n> >>>>> customise to meet their own needs beyond the offered default.\n> >>>>>\n> >>>>>\n> >>>>> We apply the NIST guidelines for representation of SI unit\n> >>>>> symbols (i.e no conversion to native language, no RTL giving\n> >>>>> icon+m etc).\n> >>>>>\n> >>>>> Right now MultiBit HD is configured to use m+icon taken from\n> >>>>> the Font Awesome icon set. However reading earlier posts it\n> >>>>> seems that \u03bc+icon is more sensible.\n> >>>>>\n> >>>>> Let us know what you'd like.\n> >>>>>\n> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n> >>>>> Awesome icon:\n> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n> >>>>>\n> >>>>>\n> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n> >>>>> <mailto:jgarzik at bitpay.com>> wrote:\n> >>>>>\n> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n> >>>>> several weeks ago, which was disappointing -- it sounded like\n> >>>>> the consensus was uBTC, and moving to uBTC later --which will\n> >>>>> happen-- may result in additional user confusion, thanks to\n> >>>>> yet another decimal place transition.\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n> >>>>> <mailto:w at grabhive.com>> wrote:\n> >>>>>> We're with uBTC too. Been waiting for the signal to do\n> >>>>>> this,\n> >>>>> let's do it right after the fee system is improved.\n> >>>>>>\n> >>>>>> -wendell\n> >>>>>>\n> >>>>>> grabhive.com <http://grabhive.com> |\n> >>>>>> twitter.com/hivewallet\n> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n> >>>>>>\n> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n> >>>>>>\n> >>>>>>> Go straight to uBTC. Humans and existing computer\n> >>>>>>> systems\n> >>>>> handle numbers to\n> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n> >>>>>>> The\n> >>>>> opposite is\n> >>>>>>> untrue (QuickBooks really does not like 3+ decimal\n> >>>>>>> places).\n> >>>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>> -- Jeff Garzik Bitcoin core developer and open source\n> >>>>> evangelist BitPay, Inc.      https://bitpay.com/\n> >>>>>\n> >>>>>\n> ------------------------------------------------------------------------------\n> >>>>>\n> >>>>>\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> >>>>> \"Graph Databases\" is the definitive new guide to graph\n> >>>>> databases and their applications. Written by three acclaimed\n> >>>>> leaders in the field, this first edition is now available.\n> >>>>> Download your free book today!\n> >>>>> http://p.sf.net/sfu/13534_NeoTech\n> >>>>> _______________________________________________\n> >>>>> Bitcoin-development mailing list\n> >>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >\n> ------------------------------------------------------------------------------\n> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >>>>> Databases\" is the definitive new guide to graph databases\n> >>>>> and their applications. Written by three acclaimed leaders in\n> >>>>> the field, this first edition is now available. Download your\n> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n> >>>>> _______________________________________________\n> >>>>> Bitcoin-development mailing list\n> >>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>>\n> >\n> ------------------------------------------------------------------------------\n> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >>>>> Databases\" is the definitive new guide to graph databases and\n> >>>>> their applications. Written by three acclaimed leaders in the\n> >>>>> field, this first edition is now available. Download your\n> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>> _______________________________________________\n> >>>>> Bitcoin-development mailing list\n> >>>>> Bitcoin-development at lists.sourceforge.net\n> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>>\n> >>>>\n> >>>>\n> >>>>\n> >>>>\n> >>>>>\n> >\n> ------------------------------------------------------------------------------\n> >>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >>>> Databases\" is the definitive new guide to graph databases and\n> >>>> their applications. Written by three acclaimed leaders in the\n> >>>> field, this first edition is now available. Download your free\n> >>>> book today! http://p.sf.net/sfu/13534_NeoTech\n> >>>> _______________________________________________\n> >>>> Bitcoin-development mailing list\n> >>>> Bitcoin-development at lists.sourceforge.net\n> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>\n> >>>\n> >>>\n> >>>\n> >>>\n> >>>>\n> >\n> ------------------------------------------------------------------------------\n> >>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >>> Databases\" is the definitive new guide to graph databases and\n> >>> their applications. Written by three acclaimed leaders in the\n> >>> field, this first edition is now available. Download your free\n> >>> book today! http://p.sf.net/sfu/13534_NeoTech\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >>\n> >>\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases\n> >> and their applications. Written by three acclaimed leaders in the\n> >> field, this first edition is now available. Download your free book\n> >> today! http://p.sf.net/sfu/13534_NeoTech\n> >>\n> >>\n> >>\n> >> _______________________________________________ Bitcoin-development\n> >> mailing list Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/13534_NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/b6d600bc/attachment.html>"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-03-14T16:51:14",
                "message_text_only": "so much discussion for a visual update...\n\nmake this a user experiment:\n-give the user the possibility to use BTC/mBTC/uMTC\n-retrieve the results after some time\n-make the default the most used option\n\n\n2014-03-14 16:15 GMT+00:00 Alex Morcos <morcos at gmail.com>:\n> I think Mark makes some good arguments.\n> I realize this would only add to the confusion, but...\n> What if we did relabel 100 satoshis to be some new kind of unit (\"bit\" or\n> whatever else), with a proper 3 letter code, and then from a user\n> standpoint, where people are using mBTC, they could switch to using Kbits\n> (ok thats obviously bad, but you get the idea) at the same nominal price.\n> But accounting backends and so forth would operate in the \"bit\" base unit\n> with 2 decimals of precision.\n>\n>\n>\n>\n> On Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io> wrote:\n>>\n>> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude\n>> numbers in both Chinas, Thailand, and other economically important East\n>> Asian countries. Expect to pay hundreds of rupees in India, or thousands\n>> of rupees in Indonesia.\n>>\n>> This concept that money should have low, single digits for everyday\n>> prices is not just Western-centric, it's English-centric. An expresso in\n>> Rome would have cost you a few (tens of?) thousand lira in recent\n>> memory. It was pegging of the Euro to the U.S. dollar that brought\n>> European states in line with the English-speaking world (who themselves\n>> trace lineage to the pound sterling).\n>>\n>> No, there is no culturally-neutral common standards for currency and\n>> pricing. But there are ill-advised, ill-informed \"standards\" in\n>> accounting software that we nevertheless must live with. These software\n>> packages do not handle more than two decimal places gracefully. That\n>> gives technical justifications for moving to either uBTC or accounting\n>> in Satoshis directly. An argument for uBTC is that it retains alignment\n>> with the existing kBTC/BTC/mBTC/uBTC conventions.\n>>\n>> However another limitation of these accounting software practices is\n>> that they do not always handle SI notation very well, particularly\n>> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol\n>> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully\n>> compliant with any software accounting package out there.\n>>\n>> We are still very, very early in the adoption period. These are changes\n>> that could be made now simply by a few big players and/or the bitcoin\n>> foundation changing their practice and their users following suit.\n>>\n>> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:\n>> > How much do you pay for an Espresso in your local currency?\n>> >\n>> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n>> > people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n>> > 0.003578.\n>> >\n>> > Anyway, I was just sharing real-world experience: nobody is confused.\n>> >\n>> >\n>> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n>> >> You give them a hard to interpret thing like mBTC and then wonder\n>> >> why they rather look at local currency. Because the choices you\n>> >> gave them are bad.\n>> >>\n>> >> I think Bitcoin would have a better chance to be percieved as a\n>> >> currency of its own if it had prices and fractions like currencies\n>> >> do.\n>> >>\n>> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n>> >> would be.\n>> >>\n>> >>\n>> >> Tamas Blummer Bits of Proof\n>> >>\n>> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n>> >> wrote:\n>> >>\n>> >>> btw. None of Bitcoin Wallet's users complained about confusion\n>> >>> because of the mBTC switch. In contrast, I get many mails and\n>> >>> questions if exchange rates happen to differ by >10%.\n>> >>>\n>> >>> I suspect nobody looks at the Bitcoin price. It's the amount in\n>> >>> local currency that matters to the users.\n>> >>>\n>> >>>\n>> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n>> >>>> Indeed. And users were crying for mBTC. Nobody was asking for\n>> >>>> \u00b5BTC.\n>> >>>>\n>> >>>> I must admit I was not aware if this thread. I just watched\n>> >>>> other wallets and at some point decided its time to switch to\n>> >>>> mBTC.\n>> >>>>\n>> >>>>\n>> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n>> >>>>> The standard has become mBTC and that's what was adopted.\n>> >>>>> It's too late to try and sway this on a mailing list thread\n>> >>>>> now.\n>> >>>>>\n>> >>>>>\n>> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n>> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n>> >>>>>\n>> >>>>> The MultiBit HD view is that this is a locale-sensitive\n>> >>>>> presentation issue. As a result we offer a simple\n>> >>>>> configuration panel giving pretty much every possible\n>> >>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n>> >>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n>> >>>>> symbol, commas, spaces and points. This allows anyone to\n>> >>>>> customise to meet their own needs beyond the offered default.\n>> >>>>>\n>> >>>>>\n>> >>>>> We apply the NIST guidelines for representation of SI unit\n>> >>>>> symbols (i.e no conversion to native language, no RTL giving\n>> >>>>> icon+m etc).\n>> >>>>>\n>> >>>>> Right now MultiBit HD is configured to use m+icon taken from\n>> >>>>> the Font Awesome icon set. However reading earlier posts it\n>> >>>>> seems that \u03bc+icon is more sensible.\n>> >>>>>\n>> >>>>> Let us know what you'd like.\n>> >>>>>\n>> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n>> >>>>> Awesome icon:\n>> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n>> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n>> >>>>>\n>> >>>>>\n>> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n>> >>>>> <mailto:jgarzik at bitpay.com>> wrote:\n>> >>>>>\n>> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n>> >>>>> several weeks ago, which was disappointing -- it sounded like\n>> >>>>> the consensus was uBTC, and moving to uBTC later --which will\n>> >>>>> happen-- may result in additional user confusion, thanks to\n>> >>>>> yet another decimal place transition.\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n>> >>>>> <mailto:w at grabhive.com>> wrote:\n>> >>>>>> We're with uBTC too. Been waiting for the signal to do\n>> >>>>>> this,\n>> >>>>> let's do it right after the fee system is improved.\n>> >>>>>>\n>> >>>>>> -wendell\n>> >>>>>>\n>> >>>>>> grabhive.com <http://grabhive.com> |\n>> >>>>>> twitter.com/hivewallet\n>> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n>> >>>>>>\n>> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>> >>>>>>\n>> >>>>>>> Go straight to uBTC. Humans and existing computer\n>> >>>>>>> systems\n>> >>>>> handle numbers to\n>> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n>> >>>>>>> The\n>> >>>>> opposite is\n>> >>>>>>> untrue (QuickBooks really does not like 3+ decimal\n>> >>>>>>> places).\n>> >>>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>> -- Jeff Garzik Bitcoin core developer and open source\n>> >>>>> evangelist BitPay, Inc.      https://bitpay.com/\n>> >>>>>\n>> >>>>>\n>> >>>>> ------------------------------------------------------------------------------\n>> >>>>>\n>> >>>>>\n>> > Learn Graph Databases - Download FREE O'Reilly Book\n>> >>>>> \"Graph Databases\" is the definitive new guide to graph\n>> >>>>> databases and their applications. Written by three acclaimed\n>> >>>>> leaders in the field, this first edition is now available.\n>> >>>>> Download your free book today!\n>> >>>>> http://p.sf.net/sfu/13534_NeoTech\n>> >>>>> _______________________________________________\n>> >>>>> Bitcoin-development mailing list\n>> >>>>> Bitcoin-development at lists.sourceforge.net\n>> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >\n>> > ------------------------------------------------------------------------------\n>> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>> >>>>> Databases\" is the definitive new guide to graph databases\n>> >>>>> and their applications. Written by three acclaimed leaders in\n>> >>>>> the field, this first edition is now available. Download your\n>> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n>> >>>>> _______________________________________________\n>> >>>>> Bitcoin-development mailing list\n>> >>>>> Bitcoin-development at lists.sourceforge.net\n>> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >\n>> > ------------------------------------------------------------------------------\n>> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>> >>>>> Databases\" is the definitive new guide to graph databases and\n>> >>>>> their applications. Written by three acclaimed leaders in the\n>> >>>>> field, this first edition is now available. Download your\n>> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n>> >>>>>\n>> >>>>>\n>> >>>>>\n>> >>>>> _______________________________________________\n>> >>>>> Bitcoin-development mailing list\n>> >>>>> Bitcoin-development at lists.sourceforge.net\n>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>>>>\n>> >>>>\n>> >>>>\n>> >>>>\n>> >>>>\n>> >>>>>\n>> >\n>> > ------------------------------------------------------------------------------\n>> >>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>> >>>> Databases\" is the definitive new guide to graph databases and\n>> >>>> their applications. Written by three acclaimed leaders in the\n>> >>>> field, this first edition is now available. Download your free\n>> >>>> book today! http://p.sf.net/sfu/13534_NeoTech\n>> >>>> _______________________________________________\n>> >>>> Bitcoin-development mailing list\n>> >>>> Bitcoin-development at lists.sourceforge.net\n>> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>>>\n>> >>>\n>> >>>\n>> >>>\n>> >>>\n>> >>>>\n>> >\n>> > ------------------------------------------------------------------------------\n>> >>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n>> >>> Databases\" is the definitive new guide to graph databases and\n>> >>> their applications. Written by three acclaimed leaders in the\n>> >>> field, this first edition is now available. Download your free\n>> >>> book today! http://p.sf.net/sfu/13534_NeoTech\n>> >>> _______________________________________________\n>> >>> Bitcoin-development mailing list\n>> >>> Bitcoin-development at lists.sourceforge.net\n>> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >>\n>> >>\n>> >>\n>> >> ------------------------------------------------------------------------------\n>> >>\n>> >>\n>> > Learn Graph Databases - Download FREE O'Reilly Book\n>> >> \"Graph Databases\" is the definitive new guide to graph databases\n>> >> and their applications. Written by three acclaimed leaders in the\n>> >> field, this first edition is now available. Download your free book\n>> >> today! http://p.sf.net/sfu/13534_NeoTech\n>> >>\n>> >>\n>> >>\n>> >> _______________________________________________ Bitcoin-development\n>> >> mailing list Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >\n>> >\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > Learn Graph Databases - Download FREE O'Reilly Book\n>> > \"Graph Databases\" is the definitive new guide to graph databases and\n>> > their\n>> > applications. Written by three acclaimed leaders in the field,\n>> > this first edition is now available. Download your free book today!\n>> > http://p.sf.net/sfu/13534_NeoTech\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-14T16:58:39",
                "message_text_only": "Fairly useless experiment, since the vast majority of users will almost\nalways stay at the default.  The winner will always be whatever was\nselected as the default initially.  This might work if the default was\nrandomly chosen, and you see what actually annoyed users enough to switch\noff of it most often.\n\n\nOn Fri, Mar 14, 2014 at 11:51 AM, Ricardo Filipe\n<ricardojdfilipe at gmail.com>wrote:\n\n> so much discussion for a visual update...\n>\n> make this a user experiment:\n> -give the user the possibility to use BTC/mBTC/uMTC\n> -retrieve the results after some time\n> -make the default the most used option\n>\n>\n> 2014-03-14 16:15 GMT+00:00 Alex Morcos <morcos at gmail.com>:\n> > I think Mark makes some good arguments.\n> > I realize this would only add to the confusion, but...\n> > What if we did relabel 100 satoshis to be some new kind of unit (\"bit\" or\n> > whatever else), with a proper 3 letter code, and then from a user\n> > standpoint, where people are using mBTC, they could switch to using Kbits\n> > (ok thats obviously bad, but you get the idea) at the same nominal price.\n> > But accounting backends and so forth would operate in the \"bit\" base unit\n> > with 2 decimals of precision.\n> >\n> >\n> >\n> >\n> > On Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io>\n> wrote:\n> >>\n> >> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude\n> >> numbers in both Chinas, Thailand, and other economically important East\n> >> Asian countries. Expect to pay hundreds of rupees in India, or thousands\n> >> of rupees in Indonesia.\n> >>\n> >> This concept that money should have low, single digits for everyday\n> >> prices is not just Western-centric, it's English-centric. An expresso in\n> >> Rome would have cost you a few (tens of?) thousand lira in recent\n> >> memory. It was pegging of the Euro to the U.S. dollar that brought\n> >> European states in line with the English-speaking world (who themselves\n> >> trace lineage to the pound sterling).\n> >>\n> >> No, there is no culturally-neutral common standards for currency and\n> >> pricing. But there are ill-advised, ill-informed \"standards\" in\n> >> accounting software that we nevertheless must live with. These software\n> >> packages do not handle more than two decimal places gracefully. That\n> >> gives technical justifications for moving to either uBTC or accounting\n> >> in Satoshis directly. An argument for uBTC is that it retains alignment\n> >> with the existing kBTC/BTC/mBTC/uBTC conventions.\n> >>\n> >> However another limitation of these accounting software practices is\n> >> that they do not always handle SI notation very well, particularly\n> >> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol\n> >> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully\n> >> compliant with any software accounting package out there.\n> >>\n> >> We are still very, very early in the adoption period. These are changes\n> >> that could be made now simply by a few big players and/or the bitcoin\n> >> foundation changing their practice and their users following suit.\n> >>\n> >> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:\n> >> > How much do you pay for an Espresso in your local currency?\n> >> >\n> >> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what\n> >> > people would expect. Certainly more familiar than \u00b5BTC 3558 or BTC\n> >> > 0.003578.\n> >> >\n> >> > Anyway, I was just sharing real-world experience: nobody is confused.\n> >> >\n> >> >\n> >> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:\n> >> >> You give them a hard to interpret thing like mBTC and then wonder\n> >> >> why they rather look at local currency. Because the choices you\n> >> >> gave them are bad.\n> >> >>\n> >> >> I think Bitcoin would have a better chance to be percieved as a\n> >> >> currency of its own if it had prices and fractions like currencies\n> >> >> do.\n> >> >>\n> >> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits\n> >> >> would be.\n> >> >>\n> >> >>\n> >> >> Tamas Blummer Bits of Proof\n> >> >>\n> >> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>\n> >> >> wrote:\n> >> >>\n> >> >>> btw. None of Bitcoin Wallet's users complained about confusion\n> >> >>> because of the mBTC switch. In contrast, I get many mails and\n> >> >>> questions if exchange rates happen to differ by >10%.\n> >> >>>\n> >> >>> I suspect nobody looks at the Bitcoin price. It's the amount in\n> >> >>> local currency that matters to the users.\n> >> >>>\n> >> >>>\n> >> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n> >> >>>> Indeed. And users were crying for mBTC. Nobody was asking for\n> >> >>>> \u00b5BTC.\n> >> >>>>\n> >> >>>> I must admit I was not aware if this thread. I just watched\n> >> >>>> other wallets and at some point decided its time to switch to\n> >> >>>> mBTC.\n> >> >>>>\n> >> >>>>\n> >> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n> >> >>>>> The standard has become mBTC and that's what was adopted.\n> >> >>>>> It's too late to try and sway this on a mailing list thread\n> >> >>>>> now.\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe\n> >> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n> >> >>>>>\n> >> >>>>> The MultiBit HD view is that this is a locale-sensitive\n> >> >>>>> presentation issue. As a result we offer a simple\n> >> >>>>> configuration panel giving pretty much every possible\n> >> >>>>> combination: icon, m+icon,  \u03bc+icon, BTC, mBTC,  \u03bcBTC, XBT,\n> >> >>>>> mXBT,  \u03bcXBT, sat along with settings for leading/trailing\n> >> >>>>> symbol, commas, spaces and points. This allows anyone to\n> >> >>>>> customise to meet their own needs beyond the offered default.\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> We apply the NIST guidelines for representation of SI unit\n> >> >>>>> symbols (i.e no conversion to native language, no RTL giving\n> >> >>>>> icon+m etc).\n> >> >>>>>\n> >> >>>>> Right now MultiBit HD is configured to use m+icon taken from\n> >> >>>>> the Font Awesome icon set. However reading earlier posts it\n> >> >>>>> seems that \u03bc+icon is more sensible.\n> >> >>>>>\n> >> >>>>> Let us know what you'd like.\n> >> >>>>>\n> >> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font\n> >> >>>>> Awesome icon:\n> >> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI\n> >> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n> >> >>>>> <mailto:jgarzik at bitpay.com>> wrote:\n> >> >>>>>\n> >> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC\n> >> >>>>> several weeks ago, which was disappointing -- it sounded like\n> >> >>>>> the consensus was uBTC, and moving to uBTC later --which will\n> >> >>>>> happen-- may result in additional user confusion, thanks to\n> >> >>>>> yet another decimal place transition.\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n> >> >>>>> <mailto:w at grabhive.com>> wrote:\n> >> >>>>>> We're with uBTC too. Been waiting for the signal to do\n> >> >>>>>> this,\n> >> >>>>> let's do it right after the fee system is improved.\n> >> >>>>>>\n> >> >>>>>> -wendell\n> >> >>>>>>\n> >> >>>>>> grabhive.com <http://grabhive.com> |\n> >> >>>>>> twitter.com/hivewallet\n> >> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411\n> >> >>>>>>\n> >> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n> >> >>>>>>\n> >> >>>>>>> Go straight to uBTC. Humans and existing computer\n> >> >>>>>>> systems\n> >> >>>>> handle numbers to\n> >> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).\n> >> >>>>>>> The\n> >> >>>>> opposite is\n> >> >>>>>>> untrue (QuickBooks really does not like 3+ decimal\n> >> >>>>>>> places).\n> >> >>>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> -- Jeff Garzik Bitcoin core developer and open source\n> >> >>>>> evangelist BitPay, Inc.      https://bitpay.com/\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> ------------------------------------------------------------------------------\n> >> >>>>>\n> >> >>>>>\n> >> > Learn Graph Databases - Download FREE O'Reilly Book\n> >> >>>>> \"Graph Databases\" is the definitive new guide to graph\n> >> >>>>> databases and their applications. Written by three acclaimed\n> >> >>>>> leaders in the field, this first edition is now available.\n> >> >>>>> Download your free book today!\n> >> >>>>> http://p.sf.net/sfu/13534_NeoTech\n> >> >>>>> _______________________________________________\n> >> >>>>> Bitcoin-development mailing list\n> >> >>>>> Bitcoin-development at lists.sourceforge.net\n> >> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >\n> >> >\n> ------------------------------------------------------------------------------\n> >> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >> >>>>> Databases\" is the definitive new guide to graph databases\n> >> >>>>> and their applications. Written by three acclaimed leaders in\n> >> >>>>> the field, this first edition is now available. Download your\n> >> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n> >> >>>>> _______________________________________________\n> >> >>>>> Bitcoin-development mailing list\n> >> >>>>> Bitcoin-development at lists.sourceforge.net\n> >> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >\n> >> >\n> ------------------------------------------------------------------------------\n> >> >>>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >> >>>>> Databases\" is the definitive new guide to graph databases and\n> >> >>>>> their applications. Written by three acclaimed leaders in the\n> >> >>>>> field, this first edition is now available. Download your\n> >> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech\n> >> >>>>>\n> >> >>>>>\n> >> >>>>>\n> >> >>>>> _______________________________________________\n> >> >>>>> Bitcoin-development mailing list\n> >> >>>>> Bitcoin-development at lists.sourceforge.net\n> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>>>>\n> >> >>>>\n> >> >>>>\n> >> >>>>\n> >> >>>>\n> >> >>>>>\n> >> >\n> >> >\n> ------------------------------------------------------------------------------\n> >> >>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >> >>>> Databases\" is the definitive new guide to graph databases and\n> >> >>>> their applications. Written by three acclaimed leaders in the\n> >> >>>> field, this first edition is now available. Download your free\n> >> >>>> book today! http://p.sf.net/sfu/13534_NeoTech\n> >> >>>> _______________________________________________\n> >> >>>> Bitcoin-development mailing list\n> >> >>>> Bitcoin-development at lists.sourceforge.net\n> >> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>>>\n> >> >>>\n> >> >>>\n> >> >>>\n> >> >>>\n> >> >>>>\n> >> >\n> >> >\n> ------------------------------------------------------------------------------\n> >> >>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph\n> >> >>> Databases\" is the definitive new guide to graph databases and\n> >> >>> their applications. Written by three acclaimed leaders in the\n> >> >>> field, this first edition is now available. Download your free\n> >> >>> book today! http://p.sf.net/sfu/13534_NeoTech\n> >> >>> _______________________________________________\n> >> >>> Bitcoin-development mailing list\n> >> >>> Bitcoin-development at lists.sourceforge.net\n> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>\n> >> >>\n> >> >>\n> >> >>\n> >> >>\n> ------------------------------------------------------------------------------\n> >> >>\n> >> >>\n> >> > Learn Graph Databases - Download FREE O'Reilly Book\n> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n> >> >> and their applications. Written by three acclaimed leaders in the\n> >> >> field, this first edition is now available. Download your free book\n> >> >> today! http://p.sf.net/sfu/13534_NeoTech\n> >> >>\n> >> >>\n> >> >>\n> >> >> _______________________________________________ Bitcoin-development\n> >> >> mailing list Bitcoin-development at lists.sourceforge.net\n> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>\n> >> >\n> >> >\n> >> >\n> >> >\n> >> >\n> ------------------------------------------------------------------------------\n> >> > Learn Graph Databases - Download FREE O'Reilly Book\n> >> > \"Graph Databases\" is the definitive new guide to graph databases and\n> >> > their\n> >> > applications. Written by three acclaimed leaders in the field,\n> >> > this first edition is now available. Download your free book today!\n> >> > http://p.sf.net/sfu/13534_NeoTech\n> >> > _______________________________________________\n> >> > Bitcoin-development mailing list\n> >> > Bitcoin-development at lists.sourceforge.net\n> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/13534_NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/13534_NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/32c3a2d7/attachment.html>"
            },
            {
                "author": "Tyler",
                "date": "2014-03-14T15:10:09",
                "message_text_only": ">You give them a hard to interpret thing like mBTC and then wonder why\n>they rather look at local currency. Because the choices you gave them are\nbad.\n\nI don't think this is particularly true. The options people are given are\nall good in this case and all have their merits. The reason people are\nconverting to fiat using the exchange rates is because right now the\nexchanges define its value. People have no intuitive idea that a loaf of\nbread cost X BTC. This isn't going to change anytime soon.\n\nIn my opinion it doesn't really matter what denomination you use.  If we\nswitched to micro we would have 3 extra digits we would be working with on\na daily basis which have very little significance. But thats just a western\npoint of view and people could adapt.\n\nThe real problems are that millibitcoin and microbitcoin are hard to say\nloud and the both start with 'm' not too many people have a mu key on their\nkeyboard. Even Bitcoin is not nice to say. it has two very hard sounds\ntogether in the middle of the word.\n\nIt would be far easier if we had a system like one ham is 1000 bits, one\nbacon is 1000 hams.\n\nClearly a ridiculous example but try saying and you'll realize how much\neasier it is to describe things not that they are clearly differentiable\nwords that are easy to say.\n\nI like bits as the lowest one. But its not something you can decide. The\ncommon names will have to develop naturally and in all likelihood will\ndiffer between regions (I know I know we must keep it standardized but what\nmight be easy to say in North America probably isn't as easy elsewhere.)\n\nSo give people the options (Let them transact on their own terms). I would\nsay restrict it to BTC milli and micro in the settings that will help nudge\npeople towards even different regions simply having different names for the\nsame quantity as opposed to some place having 10 hams as a pixie.\n\n\nOn 14 March 2014 10:14, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n> You give them a hard to interpret thing like mBTC and then wonder why\n> they rather look at local currency. Because the choices you gave them are\n> bad.\n>\n> I think Bitcoin would have a better chance to be percieved as a currency\n> of its own if it had prices and fractions like currencies do.\n>\n> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits would be.\n>\n>\n> Tamas Blummer\n> Bits of Proof\n>\n> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de> wrote:\n>\n> > btw. None of Bitcoin Wallet's users complained about confusion because\n> > of the mBTC switch. In contrast, I get many mails and questions if\n> > exchange rates happen to differ by >10%.\n> >\n> > I suspect nobody looks at the Bitcoin price. It's the amount in local\n> > currency that matters to the users.\n> >\n> >\n> > On 03/13/2014 02:40 PM, Andreas Schildbach wrote:\n> >> Indeed. And users were crying for mBTC. Nobody was asking for \u00b5BTC.\n> >>\n> >> I must admit I was not aware if this thread. I just watched other\n> >> wallets and at some point decided its time to switch to mBTC.\n> >>\n> >>\n> >> On 03/13/2014 02:31 PM, Mike Hearn wrote:\n> >>> The standard has become mBTC and that's what was adopted. It's too late\n> >>> to try and sway this on a mailing list thread now.\n> >>>\n> >>>\n> >>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk\n> >>> <mailto:g.rowe at froot.co.uk>> wrote:\n> >>>\n> >>>    The MultiBit HD view is that this is a locale-sensitive presentation\n> >>>    issue. As a result we offer a simple configuration panel giving\n> >>>    pretty much every possible combination: icon, m+icon,  \u03bc+icon, BTC,\n> >>>    mBTC,  \u03bcBTC, XBT, mXBT,  \u03bcXBT, sat along with settings for\n> >>>    leading/trailing symbol, commas, spaces and points. This allows\n> >>>    anyone to customise to meet their own needs beyond the offered\n> default.\n> >>>\n> >>>    We apply the NIST guidelines for representation of SI unit symbols\n> >>>    (i.e no conversion to native language, no RTL giving icon+m etc).\n> >>>\n> >>>    Right now MultiBit HD is configured to use m+icon taken from the\n> >>>    Font Awesome icon set. However reading earlier posts it seems\n> >>>    that \u03bc+icon is more sensible.\n> >>>\n> >>>    Let us know what you'd like.\n> >>>\n> >>>    Links:\n> >>>    m+icon screenshot: http://imgur.com/a/WCDoG\n> >>>    Font Awesome icon:\n> http://fortawesome.github.io/Font-Awesome/icon/btc/\n> >>>    NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html\n> >>>\n> >>>\n> >>>    On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com\n> >>>    <mailto:jgarzik at bitpay.com>> wrote:\n> >>>\n> >>>        Resurrecting this topic.  Bitcoin Wallet moved to mBTC several\n> weeks\n> >>>        ago, which was disappointing -- it sounded like the consensus\n> was\n> >>>        uBTC, and moving to uBTC later --which will happen-- may result\n> in\n> >>>        additional user confusion, thanks to yet another decimal place\n> >>>        transition.\n> >>>\n> >>>\n> >>>\n> >>>        On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com\n> >>>        <mailto:w at grabhive.com>> wrote:\n> >>>> We're with uBTC too. Been waiting for the signal to do this,\n> >>>        let's do it right after the fee system is improved.\n> >>>>\n> >>>> -wendell\n> >>>>\n> >>>> grabhive.com <http://grabhive.com> | twitter.com/hivewallet\n> >>>        <http://twitter.com/hivewallet> | gpg: 6C0C9411\n> >>>>\n> >>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n> >>>>\n> >>>>> Go straight to uBTC. Humans and existing computer systems\n> >>>        handle numbers to\n> >>>>> the left of the decimals just fine (HK Dollars, Yen). The\n> >>>        opposite is\n> >>>>> untrue (QuickBooks really does not like 3+ decimal places).\n> >>>>\n> >>>\n> >>>\n> >>>\n> >>>        --\n> >>>        Jeff Garzik\n> >>>        Bitcoin core developer and open source evangelist\n> >>>        BitPay, Inc.      https://bitpay.com/\n> >>>\n> >>>\n>  ------------------------------------------------------------------------------\n> >>>        Learn Graph Databases - Download FREE O'Reilly Book\n> >>>        \"Graph Databases\" is the definitive new guide to graph databases\n> >>>        and their\n> >>>        applications. Written by three acclaimed leaders in the field,\n> >>>        this first edition is now available. Download your free book\n> today!\n> >>>        http://p.sf.net/sfu/13534_NeoTech\n> >>>        _______________________________________________\n> >>>        Bitcoin-development mailing list\n> >>>        Bitcoin-development at lists.sourceforge.net\n> >>>        <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>>\n> >>>\n> >>>\n>  ------------------------------------------------------------------------------\n> >>>    Learn Graph Databases - Download FREE O'Reilly Book\n> >>>    \"Graph Databases\" is the definitive new guide to graph databases and\n> >>>    their\n> >>>    applications. Written by three acclaimed leaders in the field,\n> >>>    this first edition is now available. Download your free book today!\n> >>>    http://p.sf.net/sfu/13534_NeoTech\n> >>>    _______________________________________________\n> >>>    Bitcoin-development mailing list\n> >>>    Bitcoin-development at lists.sourceforge.net\n> >>>    <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>>\n> >>>\n> >>>\n> >>>\n> ------------------------------------------------------------------------------\n> >>> Learn Graph Databases - Download FREE O'Reilly Book\n> >>> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >>> applications. Written by three acclaimed leaders in the field,\n> >>> this first edition is now available. Download your free book today!\n> >>> http://p.sf.net/sfu/13534_NeoTech\n> >>>\n> >>>\n> >>>\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/13534_NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/13534_NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nTyler Jackson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/a867efc9/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-14T14:18:47",
                "message_text_only": "On Fri, Mar 14, 2014 at 03:05:25PM +0100, Andreas Schildbach wrote:\n> btw. None of Bitcoin Wallet's users complained about confusion because\n> of the mBTC switch. In contrast, I get many mails and questions if\n> exchange rates happen to differ by >10%.\n\nAt the moment, I imagine the vast majority of Bitcoin users are\nfamilliar with SI units and know what milli- and micro- mean.\n\nI doubt that is true of the general population, though.\n\nroy"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T19:38:17",
                "message_text_only": "On Thu, Mar 13, 2014 at 9:31 AM, Mike Hearn <mike at plan99.net> wrote:\n> The standard has become mBTC and that's what was adopted. It's too late to\n> try and sway this on a mailing list thread now.\n\nJust saying that doesn't make it so, nor does it make it a good idea.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-13T13:34:19",
                "message_text_only": "On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n> ago, which was disappointing -- it sounded like the consensus was\n> uBTC, and moving to uBTC later --which will happen-- may result in\n> additional user confusion, thanks to yet another decimal place\n> transition.\n>\n\nI've kind of given up getting any consensus about this, or even getting\npeople to care.\n\nEveryone agrees that a decimal shift would be good, but it's the same\nboring shed painting discussion every time on how many decimals. In the end\nnothing happens.\n\nI can't really blame Andreas for finally taking action and making the\nchange to mBTC. People in the community are familiar with mBTC because some\nexchanges and price sites used mBTC (at least for a while when >$1000),\nalso mBTC seems to be catching on on reddit etc.\n\nMoving to muBTC (which in itself would be better because it is the final\nunit change ever needed without hardfork) would require more coordinated\neducation effort.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/ff0ee5e1/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T13:45:54",
                "message_text_only": "<vendor hat: on>\n\nBased on this seeming consensus, BitPay was headed towards uBTC\ninternally, and hoped to coordinate messaging and rollout with others\nin the community.  Ah well, proceed apace, and Bitcoin Wallet will\ncatch up, I suppose.\n\nMultiple unit changes negatively impact users, but we are already there :/\n\n\nOn Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:\n>\n> On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>> ago, which was disappointing -- it sounded like the consensus was\n>> uBTC, and moving to uBTC later --which will happen-- may result in\n>> additional user confusion, thanks to yet another decimal place\n>> transition.\n>\n>\n> I've kind of given up getting any consensus about this, or even getting\n> people to care.\n>\n> Everyone agrees that a decimal shift would be good, but it's the same boring\n> shed painting discussion every time on how many decimals. In the end nothing\n> happens.\n>\n> I can't really blame Andreas for finally taking action and making the change\n> to mBTC. People in the community are familiar with mBTC because some\n> exchanges and price sites used mBTC (at least for a while when >$1000), also\n> mBTC seems to be catching on on reddit etc.\n>\n> Moving to muBTC (which in itself would be better because it is the final\n> unit change ever needed without hardfork) would require more coordinated\n> education effort.\n>\n> Wladimir\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T13:53:29",
                "message_text_only": "BitPay should use mBTC as well. Unless you can point to any major wallets,\nexchanges or price watching sites that use uBTC by default?\n\nI think it is highly optimistic to assume we'll need another 1000x shift\nany time soon. By now Bitcoin isn't obscure anymore. Lots of people have\nheard about it. Getting from $1 to $1000 was amazing, but it was possible\nthrough huge media coverage. Getting from $1000 to $1,000,000 would take\nmassive adoption of the kind Bitcoin isn't ready for yet.\n\n\n\nOn Thu, Mar 13, 2014 at 2:45 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> <vendor hat: on>\n>\n> Based on this seeming consensus, BitPay was headed towards uBTC\n> internally, and hoped to coordinate messaging and rollout with others\n> in the community.  Ah well, proceed apace, and Bitcoin Wallet will\n> catch up, I suppose.\n>\n> Multiple unit changes negatively impact users, but we are already there :/\n>\n>\n> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:\n> >\n> > On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >>\n> >> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n> >> ago, which was disappointing -- it sounded like the consensus was\n> >> uBTC, and moving to uBTC later --which will happen-- may result in\n> >> additional user confusion, thanks to yet another decimal place\n> >> transition.\n> >\n> >\n> > I've kind of given up getting any consensus about this, or even getting\n> > people to care.\n> >\n> > Everyone agrees that a decimal shift would be good, but it's the same\n> boring\n> > shed painting discussion every time on how many decimals. In the end\n> nothing\n> > happens.\n> >\n> > I can't really blame Andreas for finally taking action and making the\n> change\n> > to mBTC. People in the community are familiar with mBTC because some\n> > exchanges and price sites used mBTC (at least for a while when >$1000),\n> also\n> > mBTC seems to be catching on on reddit etc.\n> >\n> > Moving to muBTC (which in itself would be better because it is the final\n> > unit change ever needed without hardfork) would require more coordinated\n> > education effort.\n> >\n> > Wladimir\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/a782ced9/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T14:32:06",
                "message_text_only": "On Thu, Mar 13, 2014 at 9:53 AM, Mike Hearn <mike at plan99.net> wrote:\n> BitPay should use mBTC as well. Unless you can point to any major wallets,\n> exchanges or price watching sites that use uBTC by default?\n>\n> I think it is highly optimistic to assume we'll need another 1000x shift any\n> time soon. By now Bitcoin isn't obscure anymore. Lots of people have heard\n\nSuch hand-wavy, data-free logic is precisely why community\ncoordination is preferred to random apps making random decisions in\nthis manner.\n\nmBTC is problematic because you do not need 1000x shift in value to\nproduce annoyances for major accounting packages that are hard-limited\nto two decimal places.  Further, spreadsheets hide information if\nformatting is configured naively -- that is, if formatting is\nconfigured for bitcoin the way it is configured for other currencies.\n\nFundamentally, more than two decimal places tends to violate the\nPrinciple Of Least Astonishment with many humans, and as a result,\npopular software systems have been written with that assumption.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T15:50:14",
                "message_text_only": "On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Such hand-wavy, data-free logic is precisely why community\n> coordination is preferred to random apps making random decisions in\n> this manner.\n>\n\nThat ship sailed months ago. If you wanted a big push for uBTC, then would\nhave been the time. Though given that it'd have made lots of normal\nbalances incredibly huge, perhaps it's a good thing that didn't happen.\nAlso \"milli\" is a unit people encounter in daily life whereas micro isn't.\nIs it milli / micro / nano or milli / nano / micro? I bet a lot of people\nwould get that wrong.\n\nIf you have to export to financial packages that can't handle fractional\npennies, then by all means represent prices in whatever units you like for\nthat purpose, but in software designed for ordinary people in everyday life\nmBTC is a pretty good fit.\n\nBesides, fractional pennies crop up in existing currencies too (the famous\nVerizon Math episode showed this), so if a financial package insists on\nrounding to 2dp then I guess it may sometimes do the wrong thing in some\nbusiness cases already.\n\nFundamentally, more than two decimal places tends to violate the\n> Principle Of Least Astonishment with many humans, and as a result,\n> popular software systems have been written with that assumption.\n\n\nLots of people use currencies that don't have any fractional components at\nall ! So perhaps all prices should be denominated in satoshis to ensure\nthat they're not surprised :)\n\nThe (number) line has to be drawn somewhere. Wallets are free to suppress\nmore than 2dp of precision and actually Andreas' app lets you choose your\npreferred precision. So I think in the end it won't matter a whole lot, if\nthe defaults end up being wrong people can change them until wallet authors\ncatch up.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/70575f0a/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-13T16:17:53",
                "message_text_only": "On Thu, Mar 13, 2014 at 04:50:14PM +0100, Mike Hearn wrote:\n> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n> > Such hand-wavy, data-free logic is precisely why community\n> > coordination is preferred to random apps making random decisions in\n> > this manner.\n> >\n> \n> That ship sailed months ago. If you wanted a big push for uBTC, then would\n> have been the time. Though given that it'd have made lots of normal\n> balances incredibly huge, perhaps it's a good thing that didn't happen.\n> Also \"milli\" is a unit people encounter in daily life whereas micro isn't.\n> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people\n> would get that wrong.\n\nI think the ship of hand-wavy, data-free logic sailed with \n'money supply == 21 million', so why not enjoy the ride? If we care about\nreal people and real use cases, then let's talk about indexing the money \nsupply to some blockchain-observable value and add demurrage instead of \nof bikeshedding the color of the latest coat of paint.\n\n> \n> If you have to export to financial packages that can't handle fractional\n> pennies, then by all means represent prices in whatever units you like for\n> that purpose, but in software designed for ordinary people in everyday life\n> mBTC is a pretty good fit.\n> \n> Besides, fractional pennies crop up in existing currencies too (the famous\n> Verizon Math episode showed this), so if a financial package insists on\n> rounding to 2dp then I guess it may sometimes do the wrong thing in some\n> business cases already.\n> \n> Fundamentally, more than two decimal places tends to violate the\n> > Principle Of Least Astonishment with many humans, and as a result,\n> > popular software systems have been written with that assumption.\n> \n> \n> Lots of people use currencies that don't have any fractional components at\n> all ! So perhaps all prices should be denominated in satoshis to ensure\n> that they're not surprised :)\n\nI'm surprised every time I pull up to a gas pump and the price is 3.249999\nper gallon. But I don't really care what the price is, as long as there's \nan e85 pump. If I could pay at the pump with bitcoin, I wouldn't even look\nat the price, I'd only care if my tank got filled up or if I have to drive\nslower to get better mileage.\n\nHell, I'd have an app that would tell me what gas station to go to that got\nme the best miles per bitcoin based on where I actually wanted to go."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-03-13T16:39:00",
                "message_text_only": "On 13 March 2014 16:50, Mike Hearn <mike at plan99.net> wrote:\n\n> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> Such hand-wavy, data-free logic is precisely why community\n>> coordination is preferred to random apps making random decisions in\n>> this manner.\n>>\n>\n> That ship sailed months ago. If you wanted a big push for uBTC, then would\n> have been the time. Though given that it'd have made lots of normal\n> balances incredibly huge, perhaps it's a good thing that didn't happen.\n> Also \"milli\" is a unit people encounter in daily life whereas micro isn't.\n> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people\n> would get that wrong.\n>\n> If you have to export to financial packages that can't handle fractional\n> pennies, then by all means represent prices in whatever units you like for\n> that purpose, but in software designed for ordinary people in everyday life\n> mBTC is a pretty good fit.\n>\n> Besides, fractional pennies crop up in existing currencies too (the famous\n> Verizon Math episode showed this), so if a financial package insists on\n> rounding to 2dp then I guess it may sometimes do the wrong thing in some\n> business cases already.\n>\n> Fundamentally, more than two decimal places tends to violate the\n>> Principle Of Least Astonishment with many humans, and as a result,\n>> popular software systems have been written with that assumption.\n>\n>\n> Lots of people use currencies that don't have any fractional components at\n> all ! So perhaps all prices should be denominated in satoshis to ensure\n> that they're not surprised :)\n>\n> The (number) line has to be drawn somewhere. Wallets are free to suppress\n> more than 2dp of precision and actually Andreas' app lets you choose your\n> preferred precision. So I think in the end it won't matter a whole lot, if\n> the defaults end up being wrong people can change them until wallet authors\n> catch up.\n>\n\n+1 agree with Mike on everything\n\nA couple of points:\n\n1. bitcoinity already switched to mbtc aka millitbits (\nhttps://en.bitcoin.it/wiki/MilliBit ) and it was positively recieved, they\ngot quite a few donations\n\n2. If you watch Gavin's talk at the CFR he suggests the community comes to\na consensus through implementations rather than top down decision making\n(If I understood correctly)\n\nI think it's up to wallet maintainers whether to switch the default.\n\n\n\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/8d9f087b/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-13T16:55:58",
                "message_text_only": "Mike is making an assumption that is not necessary, which is the price of\nthe most commonly used unit should be between is $.50 and $1000.  The issue\nto revisit or not shouldn't require $1,000,000 Bitcoin price.  Typing a ton\nof decimals is incredibly annoying.  Doing the mental math in my head is\nannoying.  Even if a cup of coffee costs 3.12345 mBTC, that's a lot more\nannoying than 3123.45 uBTC.\n\nThe points that people liked mBTC better than BTC doesn't mean anything\nwhen comparing uBTC to mBTC.  Many people just stopped thinking at the mBTC\nlevel, do not understand the implications involved in switching to uBTC, or\neven considered uBTC.  The idea that we can just poll what people want to\ngive them the ideal experience is also flawed, in that users often don't\nknow what they want until they have it in front of them.\n\nThere is basically no downside to uBTC, except a few places already\nswitched to mBTC.  For exchanges, which are dealing with decimals since\nthey will do BTC/USD rather than the opposite, it might make sense for them\nto continue to use mBTC or BTC.  For wallets and prices for users,\nespecially when there are large decimals since the price is still based on\nmore stable currencies, then converted to Bitcoin, let's switch to what is\neasiest.\n\nI haven't seen a single good argument for keeping it in mBTC (other than\nsome people already did it).  On the other hand, I've seen numerous great\nreasons for switching to uBTC.\n\nMy two cents.\n\n\nOn Thu, Mar 13, 2014 at 11:39 AM, Melvin Carvalho\n<melvincarvalho at gmail.com>wrote:\n\n>\n>\n>\n> On 13 March 2014 16:50, Mike Hearn <mike at plan99.net> wrote:\n>\n>> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>>> Such hand-wavy, data-free logic is precisely why community\n>>> coordination is preferred to random apps making random decisions in\n>>> this manner.\n>>>\n>>\n>> That ship sailed months ago. If you wanted a big push for uBTC, then\n>> would have been the time. Though given that it'd have made lots of normal\n>> balances incredibly huge, perhaps it's a good thing that didn't happen.\n>> Also \"milli\" is a unit people encounter in daily life whereas micro isn't.\n>> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people\n>> would get that wrong.\n>>\n>> If you have to export to financial packages that can't handle fractional\n>> pennies, then by all means represent prices in whatever units you like for\n>> that purpose, but in software designed for ordinary people in everyday life\n>> mBTC is a pretty good fit.\n>>\n>> Besides, fractional pennies crop up in existing currencies too (the\n>> famous Verizon Math episode showed this), so if a financial package insists\n>> on rounding to 2dp then I guess it may sometimes do the wrong thing in some\n>> business cases already.\n>>\n>> Fundamentally, more than two decimal places tends to violate the\n>>> Principle Of Least Astonishment with many humans, and as a result,\n>>> popular software systems have been written with that assumption.\n>>\n>>\n>> Lots of people use currencies that don't have any fractional components\n>> at all ! So perhaps all prices should be denominated in satoshis to ensure\n>> that they're not surprised :)\n>>\n>> The (number) line has to be drawn somewhere. Wallets are free to suppress\n>> more than 2dp of precision and actually Andreas' app lets you choose your\n>> preferred precision. So I think in the end it won't matter a whole lot, if\n>> the defaults end up being wrong people can change them until wallet authors\n>> catch up.\n>>\n>\n> +1 agree with Mike on everything\n>\n> A couple of points:\n>\n> 1. bitcoinity already switched to mbtc aka millitbits (\n> https://en.bitcoin.it/wiki/MilliBit ) and it was positively recieved,\n> they got quite a few donations\n>\n> 2. If you watch Gavin's talk at the CFR he suggests the community comes to\n> a consensus through implementations rather than top down decision making\n> (If I understood correctly)\n>\n> I think it's up to wallet maintainers whether to switch the default.\n>\n>\n>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/81bbaea1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T17:13:11",
                "message_text_only": ">\n> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying\n> than 3123.45 uBTC.\n>\n\nThis is subjective though. To me the first price looks like the price of a\ncup of coffee (or I just mentally double it). The second looks like the\nprice of an expensive holiday.\n\nIf users really find this so terrible, merchants have a simple solution: do\nthe rounding before presenting the price. Then the price looks like \"3.12\nmBTC\" which is sort of what I'd expect it to look like. But some wallets\nalready make digits >2dp smaller so visually you can get precision whilst\nstill looking similar to what you might expect (this is what Bitcoin Wallet\ndoes).\n\n\n> I haven't seen a single good argument for keeping it in mBTC (other than\n> some people already did it).\n>\n\nThat's the good argument!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/33379c7b/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-13T17:23:44",
                "message_text_only": "It certainly is not subjective, in that people are far more used to dealing\nwith whole numbers than decimals.  Try reading the first one, then reading\nthe second one.  Tell those numbers to someone else, have them write it\ndown, and see how many people screw up the first vs. the second.  This has\nnothing to do with whether it \"looks expensive\".  There are reasons for\nwanting the numbers to be higher as well, as evidenced by the number of\nDogecoin enthusiasts who like \"having more\", even if it doesn't matter.\n That part gets more subjective, but still favors micros in most cases.\n Sure, 3000 may sound like a lot, but if you have a lot more, it's all a\ndifferent scale.\n\nIf the argument is for keeping things based on what is already done, why\neven switch to millis?  After all, everyone is used to full Bitcoins, why\neven change to millis?  Whatever your arguments are there, for switching\nbase bitcoins to millis, try to see why they fail at micros (other than the\nsubjective argument that I'm used to decimal units of currency being worth\na cup of coffee, even though numerous people all over the world don't have\nthat conditioning).\n\n\nOn Thu, Mar 13, 2014 at 12:13 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying\n>> than 3123.45 uBTC.\n>>\n>\n> This is subjective though. To me the first price looks like the price of a\n> cup of coffee (or I just mentally double it). The second looks like the\n> price of an expensive holiday.\n>\n> If users really find this so terrible, merchants have a simple solution:\n> do the rounding before presenting the price. Then the price looks like\n> \"3.12 mBTC\" which is sort of what I'd expect it to look like. But some\n> wallets already make digits >2dp smaller so visually you can get precision\n> whilst still looking similar to what you might expect (this is what Bitcoin\n> Wallet does).\n>\n>\n>> I haven't seen a single good argument for keeping it in mBTC (other than\n>> some people already did it).\n>>\n>\n> That's the good argument!\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/447f16cf/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-13T16:14:20",
                "message_text_only": "On 03/13/2014 10:32 AM, Jeff Garzik wrote:\n> On Thu, Mar 13, 2014 at 9:53 AM, Mike Hearn <mike at plan99.net> wrote:\n>> BitPay should use mBTC as well. Unless you can point to any major wallets,\n>> exchanges or price watching sites that use uBTC by default?\n>>\n>> I think it is highly optimistic to assume we'll need another 1000x shift any\n>> time soon. By now Bitcoin isn't obscure anymore. Lots of people have heard\n> Such hand-wavy, data-free logic is precisely why community\n> coordination is preferred to random apps making random decisions in\n> this manner.\n>\n> mBTC is problematic because you do not need 1000x shift in value to\n> produce annoyances for major accounting packages that are hard-limited\n> to two decimal places.  Further, spreadsheets hide information if\n> formatting is configured naively -- that is, if formatting is\n> configured for bitcoin the way it is configured for other currencies.\n>\n> Fundamentally, more than two decimal places tends to violate the\n> Principle Of Least Astonishment with many humans, and as a result,\n> popular software systems have been written with that assumption.\n>\n\nI whole-heartedly agree with Jeff.  micro-BTC was the way to go to end\nuser confusion and make things easier for software systems which are\ndesigned to handle money (i.e. two decimal places).  I also echo the\nsentiment about people being able to handle large numbers well. \n\nWe've been working with Marty Zigman who's creating a Bitcoin plugin for\nNetSuite accounting platform, and he was already forced to switch\nmicro-BTC long ago for exactly the reasons described above.  I think the\nsystem will track up to 3 decimal places without causing all sorts of\nheartache and automatic rounding.\n\nOf course, as Mike said, this ship may have already sailed, but if\nthere's any way to revisit this, I'm there.  We're just about to do\nanother Armory release and could support this very easily."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-13T16:23:07",
                "message_text_only": "On 13.03.2014, at 17:14, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> We've been working with Marty Zigman who's creating a Bitcoin plugin for\n> NetSuite accounting platform, and he was already forced to switch\n> micro-BTC long ago for exactly the reasons described above.  I think the\n> system will track up to 3 decimal places without causing all sorts of\n> heartache and automatic rounding.\n> \n> Of course, as Mike said, this ship may have already sailed, but if\n> there's any way to revisit this, I'm there.  We're just about to do\n> another Armory release and could support this very easily.\n> \n\nNot suprised that people dealing with real world finance problems \nand people who are not engineers come to the same conclusion. \nWelcome Alan!\n\nWhy not add 'bit' as an option or even default to Armory?\n\nRegards,\n\nTamas Blummer\nFounder, CEO\nBits of Proof\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/3594aaa8/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/3594aaa8/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T16:29:03",
                "message_text_only": "On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Of course, as Mike said, this ship may have already sailed, but if\n> there's any way to revisit this, I'm there.  We're just about to do\n> another Armory release and could support this very easily.\n\nmBTC now just means the issue -will- be revisited in the future.  Just\na question of when, not if.\n\nPeople and software in various nations handle big numbers for small\nvalues (e.g. Yen) just fine.\nPeople and software do -not- handle extra decimal places well, field\nexperience shows.\n\n<vendor hat: on>  To roll out QuickBooks support --without converting\nany numbers, a key financial attribute-- mBTC is simply insufficient\ntoday, not in the future.\n\nI also argue that it is a security risk, as follows:  To support\naccounting packages limited to 2 decimal places, decimal point\nconversion must be performed.  This produces a situation where your\naccounting system shows numbers that do not visually match the numbers\nin the bitcoin software.  That, in turn, making auditing more\ndifficult, particularly for outsiders.\n\nShipping with mBTC defaults was decidedly unwise, considering that --\nlike BTC -- it fails to solve existing, known problems that uBTC can\nsolve, and considering the inevitable mBTC->uBTC switch.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-13T17:18:51",
                "message_text_only": "This ship may have already sailed, but...\n\nUsing milli- and micro- notation for currency units is also not very\nwell supported. Last time this thread was active, I believe there was a\nsuggestion to use 1 XBT == 1 uBTC. This would bring us completely within\nthe realm of supported behavior in accounting applications.\n\nOn 03/13/2014 09:29 AM, Jeff Garzik wrote:\n> On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>> Of course, as Mike said, this ship may have already sailed, but if\n>> there's any way to revisit this, I'm there.  We're just about to do\n>> another Armory release and could support this very easily.\n> \n> mBTC now just means the issue -will- be revisited in the future.  Just\n> a question of when, not if.\n> \n> People and software in various nations handle big numbers for small\n> values (e.g. Yen) just fine.\n> People and software do -not- handle extra decimal places well, field\n> experience shows.\n> \n> <vendor hat: on>  To roll out QuickBooks support --without converting\n> any numbers, a key financial attribute-- mBTC is simply insufficient\n> today, not in the future.\n> \n> I also argue that it is a security risk, as follows:  To support\n> accounting packages limited to 2 decimal places, decimal point\n> conversion must be performed.  This produces a situation where your\n> accounting system shows numbers that do not visually match the numbers\n> in the bitcoin software.  That, in turn, making auditing more\n> difficult, particularly for outsiders.\n> \n> Shipping with mBTC defaults was decidedly unwise, considering that --\n> like BTC -- it fails to solve existing, known problems that uBTC can\n> solve, and considering the inevitable mBTC->uBTC switch.\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-13T17:21:52",
                "message_text_only": "On Thu, Mar 13, 2014 at 1:18 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Using milli- and micro- notation for currency units is also not very\n> well supported. Last time this thread was active, I believe there was a\n> suggestion to use 1 XBT == 1 uBTC. This would bring us completely within\n> the realm of supported behavior in accounting applications.\n\nYes.  That was in Tamas's recursive link, and also brought up on\ngithub by jcorgan.  +1\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T17:24:25",
                "message_text_only": ">\n> Using milli- and micro- notation for currency units is also not very\n> well supported. Last time this thread was active, I believe there was a\n> suggestion to use 1 XBT == 1 uBTC.\n\n\nUnfortunately I think some people already started using XBT to mean the\nsame as BTC (another ship that sailed: somehow Bhutan will have to live\nwith it). So if some software started to redefine it to mean something\nelse, that seems like a recipe for accidentally sending far too much or too\nlittle money by mistake.\n\nThe whole area of symbols, denominations etc is a confusing mess right now,\nit opens up the potential for mistakes and makes Bitcoin look\nunprofessional. Part of the reason I don't want us to revisit this at the\nmoment is we need to grab onto any consistency we can get. People want to\nthink in terms of a single unit. BTC vs mBTC is already bad enough, it'd be\neasy to miss the denomination and do some sums wrong. Introducing a third\nunit, especially one that skips the intervening nanoBTC, seems like a way\nto make mistakes even more common!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/1238dc0f/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-13T17:36:09",
                "message_text_only": "On 03/13/2014 01:24 PM, Mike Hearn wrote:\n>\n>     Using milli- and micro- notation for currency units is also not very\n>     well supported. Last time this thread was active, I believe there\n>     was a\n>     suggestion to use 1 XBT == 1 uBTC.\n>\n>\n> Unfortunately I think some people already started using XBT to mean\n> the same as BTC (another ship that sailed: somehow Bhutan will have to\n> live with it). So if some software started to redefine it to mean\n> something else, that seems like a recipe for accidentally sending far\n> too much or too little money by mistake.\n>\n\nThere is also the benefit that if someone screws up BTC and uBTC, it's\nlikely to fail.  Most people don't have 1e6 times as much money in their\nwallet as they attempted to send in a single transaction.  Similarly,\nsending one-millionth of what you meant to is likely invalid or below\nthe dust limit. \n\nWell it looks like the consensus is to do it, instead of talking about\nit.  I'm going to make sure we get uBTC into the next Armory release. \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/be24b2d1/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-13T17:43:26",
                "message_text_only": "On Thu, Mar 13, 2014 at 6:36 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>\n> On 03/13/2014 01:24 PM, Mike Hearn wrote:\n> Well it looks like the consensus is to do it, instead of talking about\n> it.  I'm going to make sure we get uBTC into the next Armory release.\n>\n\nAs default?\n\nIf so, only for new installs? Or will all current users automatically be\nswitched over?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/80e3f13d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T17:51:12",
                "message_text_only": ">\n> Well it looks like the consensus is to do it, instead of talking about\n> it.  I'm going to make sure we get uBTC into the next Armory release.\n>\n\nHmm - be careful with the word \"consensus\" here. A bunch of people on a\nmailing list does not make consensus ;)\n\nIf you survey other wallets, you'll find most already switched to mBTC,\nthat it took some effort to do so (look at the size of the patches for\ninstance) and that probably, nobody is super-keen to change again so soon.\nSo uBTC would make you different to most of the other wallets and services\nin wide usage.\n\nIf Armory wants to do that, that's no problem, maybe it will be a\ncompetitive advantage - just saying, don't quote this thread as indicating\nsome kind of community consensus.\n\nWallets and services that are using mBTC (that I know of)\n\nblockchain.info\nMultiBit\nBitcoin Wallet (Android)\nHive\nBitcoinity\nKnC Wallet (defaults to BTC but can be switched to mBTC in settings, uBTC\nnot an option)\nMullvad\nbtcstore.eu\n\nDoing a google search for [bitcoin \"mBTC\"] and [bitcoin \"uBTC\"], the former\nhas a bunch of sites and services with prices in mBTC. The latter only has\nfaucets, as far as I can tell, which sort of makes sense.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/17fbe703/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-13T17:58:05",
                "message_text_only": "On 03/13/2014 01:51 PM, Mike Hearn wrote:\n>\n>     Well it looks like the consensus is to do it, instead of talking\n>     about it.  I'm going to make sure we get uBTC into the next Armory\n>     release.\n>\n>\n> Hmm - be careful with the word \"consensus\" here. A bunch of people on\n> a mailing list does not make consensus ;)\n>\n> If you survey other wallets, you'll find most already switched to\n> mBTC, that it took some effort to do so (look at the size of the\n> patches for instance) and that probably, nobody is super-keen to\n> change again so soon. So uBTC would make you different to most of the\n> other wallets and services in wide usage. \n>\n> If Armory wants to do that, that's no problem, maybe it will be a\n> competitive advantage - just saying, don't quote this thread as\n> indicating some kind of community consensus.\n>\n> Wallets and services that are using mBTC (that I know of)\n>\n> blockchain.info <http://blockchain.info>\n> MultiBit\n> Bitcoin Wallet (Android)\n> Hive\n> Bitcoinity\n> KnC Wallet (defaults to BTC but can be switched to mBTC in settings,\n> uBTC not an option)\n> Mullvad\n> btcstore.eu <http://btcstore.eu>\n>\n> Doing a google search for [bitcoin \"mBTC\"] and [bitcoin \"uBTC\"], the\n> former has a bunch of sites and services with prices in mBTC. The\n> latter only has faucets, as far as I can tell, which sort of makes sense.\n\nI actually was not aware that so many had already switched to mBTC.   I\nguess it shows how much I use other wallets. \n\nYou misunderstood my \"consensus\" comment.   I was simply stating the\n\"consensus\" of debating on the mailing list endlessly is not as\neffective as doing it.  Thus I was just going to do it and see who\nfollows.  But that also assumed there was not a critical mass who'd\nalready switched -- I must admit I'm not so confident anymore...\n\nI am/so strongly opposed //to mBTC /compared to uBTC, I was ready to\ntake a small leap of faith (with associated risks), to help push the\n\"consensus\".  Of course it would still remain configurable, but the\ndefault will make a big difference.\n\n-Alan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/d0586965/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-03-13T19:26:42",
                "message_text_only": "I agree with you Jeff. The unit switch needs to happen once and once only,\nbut that is exactly why I said the defaults really need to change in\nBitcoin-Qt since that is still the main reference implementation and it\nwill influence others.\n\nBitpay could also take the lead here and make the switch to their defaults.\nThat would greatly assist the uBTC movement.\n\nRegardless of what anyone says, Bitcoin-Qt is still the main reference\nimplementation and the best way to encourage a change in the community at\nlarge is for the default units to be changed here. Core devs can surely\ngarner enough consensus among themselves to accept and merge a PR to that\neffect. That will send a message, more than anything else that can be done.\n\nMy two satoshi.\n\nDrak\n\n\nOn 13 March 2014 16:29, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> > Of course, as Mike said, this ship may have already sailed, but if\n> > there's any way to revisit this, I'm there.  We're just about to do\n> > another Armory release and could support this very easily.\n>\n> mBTC now just means the issue -will- be revisited in the future.  Just\n> a question of when, not if.\n>\n> People and software in various nations handle big numbers for small\n> values (e.g. Yen) just fine.\n> People and software do -not- handle extra decimal places well, field\n> experience shows.\n>\n> <vendor hat: on>  To roll out QuickBooks support --without converting\n> any numbers, a key financial attribute-- mBTC is simply insufficient\n> today, not in the future.\n>\n> I also argue that it is a security risk, as follows:  To support\n> accounting packages limited to 2 decimal places, decimal point\n> conversion must be performed.  This produces a situation where your\n> accounting system shows numbers that do not visually match the numbers\n> in the bitcoin software.  That, in turn, making auditing more\n> difficult, particularly for outsiders.\n>\n> Shipping with mBTC defaults was decidedly unwise, considering that --\n> like BTC -- it fails to solve existing, known problems that uBTC can\n> solve, and considering the inevitable mBTC->uBTC switch.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/ed4f62d7/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-13T16:08:50",
                "message_text_only": "<cynic hat: on>\n\nEvery volatility bump messes up expectations of what a bitcoin is worth,\nso why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC\nnow, and plan uBTC for just after the next price spike to $10KUSD or whatever, \nand then plan on rolling back to mBTC when the price crashes from altcoin\nmoney supply inflation competition.\n\n\nOn Thu, Mar 13, 2014 at 09:45:54AM -0400, Jeff Garzik wrote:\n> <vendor hat: on>\n> \n> Based on this seeming consensus, BitPay was headed towards uBTC\n> internally, and hoped to coordinate messaging and rollout with others\n> in the community.  Ah well, proceed apace, and Bitcoin Wallet will\n> catch up, I suppose.\n> \n> Multiple unit changes negatively impact users, but we are already there :/\n> \n> \n> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:\n> >\n> > On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >>\n> >> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n> >> ago, which was disappointing -- it sounded like the consensus was\n> >> uBTC, and moving to uBTC later --which will happen-- may result in\n> >> additional user confusion, thanks to yet another decimal place\n> >> transition.\n> >\n> >\n> > I've kind of given up getting any consensus about this, or even getting\n> > people to care.\n> >\n> > Everyone agrees that a decimal shift would be good, but it's the same boring\n> > shed painting discussion every time on how many decimals. In the end nothing\n> > happens.\n> >\n> > I can't really blame Andreas for finally taking action and making the change\n> > to mBTC. People in the community are familiar with mBTC because some\n> > exchanges and price sites used mBTC (at least for a while when >$1000), also\n> > mBTC seems to be catching on on reddit etc.\n> >\n> > Moving to muBTC (which in itself would be better because it is the final\n> > unit change ever needed without hardfork) would require more coordinated\n> > education effort.\n> >\n> > Wladimir\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-13T16:30:20",
                "message_text_only": "BTW, its not like this would be the first time this was raised, instead the \"ship left\" while ignoring arguments.\n\nThe idea of is up there for votes since March 2013 https://bitcointalk.org/index.php?topic=149150.0\nand received the most votes. \n\nI remembered this last time on this list here:\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/31640769/\n\nRegards,\n\nTamas Blummer\nFounder, CEO\nBits of Proof\nhttp://bitsofproof.com\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/97375e0e/attachment.sig>"
            },
            {
                "author": "slush",
                "date": "2014-03-13T16:37:02",
                "message_text_only": "Internal accounting in satoshis.\nDisplay based on locale.\n\nProblem solved.\n\n\nOn Thu, Mar 13, 2014 at 5:30 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> BTW, its not like this would be the first time this was raised, instead\n> the \"ship left\" while ignoring arguments.\n>\n> The idea of is up there for votes since March 2013\n> https://bitcointalk.org/index.php?topic=149150.0\n> and received the most votes.\n>\n> I remembered this last time on this list here:\n>\n> http://sourceforge.net/p/bitcoin/mailman/message/31640769/\n>\n> Regards,\n>\n> Tamas Blummer\n> Founder, CEO\n> Bits of Proof\n> http://bitsofproof.com\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/bdd70ddb/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-03-13T17:48:17",
                "message_text_only": "On Thursday, March 13, 2014 4:37:02 PM slush wrote:\n> Display based on locale.\n\nPlease don't bring locale into this. Bitcoin has always been intentionally \nlocale-independent (hence BTC using xxx,xxx,xxx.xx format even in locales \nwhich swap the commas and periods). Localising display makes different locales \nmore or less incompatible at a human level, even if they use the same \nblockchain.\n\nLuke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-13T18:23:04",
                "message_text_only": "On 3/13/14, Troy Benjegerdes <hozer at hozed.org> wrote:\n> <cynic hat: on>\n>\n> Every volatility bump messes up expectations of what a bitcoin is worth,\n> so why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC\n> now, and plan uBTC for just after the next price spike to $10KUSD or\n> whatever,\n> and then plan on rolling back to mBTC when the price crashes from altcoin\n> money supply inflation competition.\n\nNo, even if bitcoin crashes to 1 usd you don't need to change back to\nBTC, you can keep the existing-accounting-tools friendly micro. That's\nthe whole point, having \"one true only unit change\". You would only\nneed to change it if there was a sub-satoshi hardfork, which doesn't\nseem necessary anytime soon.\n\nOn 3/13/14, Mike Hearn <mike at plan99.net> wrote:\n> I think it is highly optimistic to assume we'll need another 1000x shift\n> any time soon. By now Bitcoin isn't obscure anymore. Lots of people have\n> heard about it. Getting from $1 to $1000 was amazing, but it was possible\n> through huge media coverage. Getting from $1000 to $1,000,000 would take\n> massive adoption of the kind Bitcoin isn't ready for yet.\n\nWe shouldn't make any assumptions about the future price of bitcoin to\nmake the decision.\n\nOn 3/13/14, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying\n>> than 3123.45 uBTC.\n>>\n>\n> This is subjective though. To me the first price looks like the price of a\n> cup of coffee (or I just mentally double it). The second looks like the\n> price of an expensive holiday.\n\nThis sounds very US-centric to me. Aren't you thinking in usd?\n\nIt won't look like an expensive holiday to, say, someone used to Viet\nNam Dong (VND), Uzbekistani Som (UZS) or Mongolian Tugrik (MNT).\n\nhttp://coinmill.com/BTC_calculator.html#BTC= 0.00312345\n\n\n\"People seem to like mBTC\" is just an ad populum fallacy: millions of\nflies can actually be wrong. Also you haven't showed them micros,\nmaybe they like it too.\n\nSo the only valid argument I've heard in favor of mBTC so far is \"some\nwallets/services are doing it wrong already\"."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-13T18:29:40",
                "message_text_only": ">\n> You would only need to change it if there was a sub-satoshi hardfork,\n> which doesn't seem necessary anytime soon.\n>\n\n+\n\nWe shouldn't make any assumptions about the future price of bitcoin to make\n> the decision.\n>\n\nHmmm ;) Didn't you just make an assumption about the future price?\n\n\n> This sounds very US-centric to me. Aren't you thinking in usd?\n>\n\nThe currencies I'm familiar with are CHF, USD, EUR and GBP, which all have\nroughly similar values. I guess such currencies make up the bulk of the\nBitcoin userbase at the moment.\n\n\n> \"People seem to like mBTC\" is just an ad populum fallacy: millions of\n> flies can actually be wrong. Also you haven't showed them micros,\n> maybe they like it too.\n\n\nSaying \"it's already popular and would take work to change\" is not really a\nfallacy now, is it?\n\nBut anyway, this is getting silly. You don't have to convince me. Go visit\nall the services I listed above, plus all the ones I didn't find in my five\nminutes of searching, and convince them they're wrong like the flies and\nswitching is the best use of their time :o\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/b9f41466/attachment.html>"
            },
            {
                "author": "Ben Davenport",
                "date": "2014-03-13T18:51:14",
                "message_text_only": "Another vote in support of uBTC. I made my position clear in May of last\nyear. Since then, Dogecoin has essentially PROVEN the psychological value\nof a low-valued large-balance currency.\n\n(From: https://bitcointalk.org/index.php?topic=220322.msg2334059#msg2334059)\n\n\"The whole unit change seems so disruptive and difficult to coordinate now\n-- do we really want to have to deal with another one later when there are\nway more people to try to coordinate? I really think we should look to the\nendgame and figure out where we want to be.\n\n\"I'd propose moving to uB (micro-bitcoin = 1e-6) as the standard unit now\nand forever. For now, it can be referred to as uB or uBTC, but over time,\nonce it's ubiquitous, it should just be called a bitcoin. Because the\nsmallest unit is the satoshi (1e-8), this means uB-denominated prices would\nget 2 decimal places maximum, which is the most that any consumer wants to\ndeal with anyway.\n\n\"At the same time, I'd propose inverting the exchange rate, so instead of\nquoting uB/USD = .00013, it would be quoted as USD/uB = 7692. This is\nexactly the same way Yen are quoted relative to USD (USDJPY = 100.66), and\nis also the same way other private virtual currencies such as WoW gold are\nquoted.\"\n\n\n\n\n\nOn Thu, Mar 13, 2014 at 11:29 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> You would only need to change it if there was a sub-satoshi hardfork,\n>> which doesn't seem necessary anytime soon.\n>>\n>\n> +\n>\n> We shouldn't make any assumptions about the future price of bitcoin to\n>> make the decision.\n>>\n>\n> Hmmm ;) Didn't you just make an assumption about the future price?\n>\n>\n>> This sounds very US-centric to me. Aren't you thinking in usd?\n>>\n>\n> The currencies I'm familiar with are CHF, USD, EUR and GBP, which all have\n> roughly similar values. I guess such currencies make up the bulk of the\n> Bitcoin userbase at the moment.\n>\n>\n>> \"People seem to like mBTC\" is just an ad populum fallacy: millions of\n>> flies can actually be wrong. Also you haven't showed them micros,\n>> maybe they like it too.\n>\n>\n> Saying \"it's already popular and would take work to change\" is not really\n> a fallacy now, is it?\n>\n> But anyway, this is getting silly. You don't have to convince me. Go visit\n> all the services I listed above, plus all the ones I didn't find in my five\n> minutes of searching, and convince them they're wrong like the flies and\n> switching is the best use of their time :o\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/9a96164a/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-14T00:34:15",
                "message_text_only": "On 3/13/14, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> You would only need to change it if there was a sub-satoshi hardfork,\n>> which doesn't seem necessary anytime soon.\n>>\n>\n> +\n>\n> We shouldn't make any assumptions about the future price of bitcoin to make\n>> the decision.\n>>\n>\n> Hmmm ;) Didn't you just make an assumption about the future price?\n\nYou can just remove my assertion about the likeliness of the need of\nsub-satoshis and the main claim still stands.\n\n> The currencies I'm familiar with are CHF, USD, EUR and GBP, which all have\n> roughly similar values. I guess such currencies make up the bulk of the\n> Bitcoin userbase at the moment.\n\nFair enough, not US-centric but western-centric then.\nIn any case the \"3000 micros will look like expensive\" claim is still\nvery relative.\n\n>> \"People seem to like mBTC\" is just an ad populum fallacy: millions of\n>> flies can actually be wrong. Also you haven't showed them micros,\n>> maybe they like it too.\n>\n>\n> Saying \"it's already popular and would take work to change\" is not really a\n> fallacy now, is it?\n\nNo, it's not. That's what I said the current adoption by some wallets\nand services was the only valid argument immediately after dismantling\nthe actual fallacy.\nDid you missed that last sentence or are you intentionally using a\nstraw man argument?\n\nIn summary, yes, that's point is valid, I'm not saying it isn't. I\njust wanted to keep us away from the rest argument but pointing out\nthey are not logic.\nI repeat, that's the ONLY valid argument I've heard so far."
            },
            {
                "author": "vv01f",
                "date": "2014-03-14T17:14:05",
                "message_text_only": "I think\n* if we change to mBTC because your state currencys price for bitcoin\nmake this a valid option we will change again in future\n* users do not like changes\n* we should keep a good standard\n\nA good standard should be\n* built on standards (e.g. SI)\n* backed by best practice: never force the user to take an option he\ncannot change\n* do not make changes without users permission\n* take care of users at fault when entering 5.967 ot should be pointed\nout before sending that e.g.\nthe sw understood 5967.000 000 00 BTC\ninstead of 5.967 000 00 BTC\nbecause the user failed to use the correct delimiter.\n\nFor now a good standard is\n* simply bitcoin as BTC with eight decimal places\nor could be\n* uBTC as SI prefix, probably using XBT as a symbol for compatibility\nwith other software\n* satoshis (w. SI prefixes if numbers are to big) for regions where\ndecimal places in prices are uncommon\n\nSo I'd prefer:\nMake the choice transparent to users and set a standard that the user\nalway should be empowered to use all available decimal places.\nAnd there should be a set of official test-cases for wallet software and\nthe desired behavior."
            },
            {
                "author": "Natanael",
                "date": "2014-03-14T20:13:18",
                "message_text_only": "Regarding (ISO standards) currency symbols, XBT is already used as\nequivalent to 1 Bitcoin in numerous places, and XBC is taken and BT*\nbelongs to Bhutan (and X** is already the default for non-national currency\ncommon items of trade), so IMHO we should define something like XUB as\nmicrobitcoins so we can have a symbol that doesn't require changing any\nexisting systems and that can be standardized globally. Then those with\naccounting software that needs to deal with something that has two decimals\nmaximum without losing precision can use that while following well defined\nstandards. And those who don't like large numbers can still chose to show\nmBTC.\n\n- Sent from my phone\nDen 14 mar 2014 18:18 skrev \"vv01f\" <vv01f at riseup.net>:\n\n> I think\n> * if we change to mBTC because your state currencys price for bitcoin\n> make this a valid option we will change again in future\n> * users do not like changes\n> * we should keep a good standard\n>\n> A good standard should be\n> * built on standards (e.g. SI)\n> * backed by best practice: never force the user to take an option he\n> cannot change\n> * do not make changes without users permission\n> * take care of users at fault when entering 5.967 ot should be pointed\n> out before sending that e.g.\n> the sw understood 5967.000 000 00 BTC\n> instead of 5.967 000 00 BTC\n> because the user failed to use the correct delimiter.\n>\n> For now a good standard is\n> * simply bitcoin as BTC with eight decimal places\n> or could be\n> * uBTC as SI prefix, probably using XBT as a symbol for compatibility\n> with other software\n> * satoshis (w. SI prefixes if numbers are to big) for regions where\n> decimal places in prices are uncommon\n>\n> So I'd prefer:\n> Make the choice transparent to users and set a standard that the user\n> alway should be empowered to use all available decimal places.\n> And there should be a set of official test-cases for wallet software and\n> the desired behavior.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/563f1dde/attachment.html>"
            },
            {
                "author": "Un Ix",
                "date": "2014-03-14T01:26:19",
                "message_text_only": "Second this comment.\n\nA change like this so soon after mt gox debacle would be one more sign of bitcoins 'instability' for skeptics and average folk who read only headlines.\n\nIn general, it seems some people are looking to try and change the publics mental price of BTC which is more of a non-technical challenge. \n\nGavin\n\n> On 14/03/2014, at 12:21 am, \"Troy Benjegerdes\" <hozer at hozed.org> wrote:\n> \n> <cynic hat: on>\n> \n> Every volatility bump messes up expectations of what a bitcoin is worth,\n> so why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC\n> now, and plan uBTC for just after the next price spike to $10KUSD or whatever, \n> and then plan on rolling back to mBTC when the price crashes from altcoin\n> money supply inflation competition.\n> \n> \n>> On Thu, Mar 13, 2014 at 09:45:54AM -0400, Jeff Garzik wrote:\n>> <vendor hat: on>\n>> \n>> Based on this seeming consensus, BitPay was headed towards uBTC\n>> internally, and hoped to coordinate messaging and rollout with others\n>> in the community.  Ah well, proceed apace, and Bitcoin Wallet will\n>> catch up, I suppose.\n>> \n>> Multiple unit changes negatively impact users, but we are already there :/\n>> \n>> \n>>> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:\n>>> \n>>>> On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>>> \n>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n>>>> ago, which was disappointing -- it sounded like the consensus was\n>>>> uBTC, and moving to uBTC later --which will happen-- may result in\n>>>> additional user confusion, thanks to yet another decimal place\n>>>> transition.\n>>> \n>>> \n>>> I've kind of given up getting any consensus about this, or even getting\n>>> people to care.\n>>> \n>>> Everyone agrees that a decimal shift would be good, but it's the same boring\n>>> shed painting discussion every time on how many decimals. In the end nothing\n>>> happens.\n>>> \n>>> I can't really blame Andreas for finally taking action and making the change\n>>> to mBTC. People in the community are familiar with mBTC because some\n>>> exchanges and price sites used mBTC (at least for a while when >$1000), also\n>>> mBTC seems to be catching on on reddit etc.\n>>> \n>>> Moving to muBTC (which in itself would be better because it is the final\n>>> unit change ever needed without hardfork) would require more coordinated\n>>> education effort.\n>>> \n>>> Wladimir\n>> \n>> \n>> \n>> -- \n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> -- \n> ----------------------------------------------------------------------------\n> Troy Benjegerdes                 'da hozer'                  hozer at hozed.org\n> 7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n> \n>      Never pick a fight with someone who buys ink by the barrel,\n>         nor try buy a hacker who makes money by the megahash\n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-14T21:56:11",
                "message_text_only": "Hello,\n\nI see a lot of talk on this topic and get the senst that it is focused on\ndefault display only regarding the mBTC / uBTC questions.  However, if the\nfocus is broader, involving whether or how to express other currencies or\nmoving further along to what that might even mean (since many people have\ndifferent ideas about what a currency is) perhaps there is another issue\nto open, or a process BIP to address how to display other concepts, for\nexample:\n\nother currencies\n\nmicrodonations\n\netc.\n\nI sense however that may be outside the scope of this thread, so I'll just\nstop here and try to read samples of the other stuff going on here.\n\n-Odinn\nhttp://abis.io\n\n> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks\n> ago, which was disappointing -- it sounded like the consensus was\n> uBTC, and moving to uBTC later --which will happen-- may result in\n> additional user confusion, thanks to yet another decimal place\n> transition.\n>\n>\n>\n> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:\n>> We're with uBTC too. Been waiting for the signal to do this, let's do it\n>> right after the fee system is improved.\n>>\n>> -wendell\n>>\n>> grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n>>\n>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n>>\n>>> Go straight to uBTC. Humans and existing computer systems handle\n>>> numbers to\n>>> the left of the decimals just fine (HK Dollars, Yen). The opposite is\n>>> untrue (QuickBooks really does not like 3+ decimal places).\n>>\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-13T15:17:13",
                "message_text_only": "Jeff's arguments are understood and supported by those who worked in finance.\n\nExisting financial applications have often problems dealing with more than 2 decimals.\nPeople who work in finance are used to two decimals.\n\nNeither systems nor people in finance have a problem with large numbers though.\n\nFor above practical reasons I am also for moving to a unit that equals 100 satoshi.\nI heard the name bit for it which I like.\n\nRegards,\n\nTam\u00e1s Blummer\nFounder, CEO\nBits of Proof\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/a8226de1/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-03-13T15:37:56",
                "message_text_only": "I second the name 'bit' for \u03bcBTC.\nOn Mar 13, 2014 11:19 AM, \"Tamas Blummer\" <tamas at bitsofproof.com> wrote:\n\n> Jeff's arguments are understood and supported by those who worked in\n> finance.\n>\n> Existing financial applications have often problems dealing with more than\n> 2 decimals.\n> People who work in finance are used to two decimals.\n>\n> Neither systems nor people in finance have a problem with large numbers\n> though.\n>\n> For above practical reasons I am also for moving to a unit that equals 100\n> satoshi.\n> I heard the name bit for it which I like.\n>\n> Regards,\n>\n> Tam\u00e1s Blummer\n> Founder, CEO\n> Bits of Proof\n> http://bitsofproof.com\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/2d59a175/attachment.html>"
            },
            {
                "author": "Andrew Smith",
                "date": "2014-03-14T16:25:56",
                "message_text_only": "Well, not sure I wanted to subscribe the mbtc vs ubtc list... its a\ndefault, not a big deal.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/0dbd9adb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "moving the default display to mbtc",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Andreas Schildbach",
                "Roy Badami",
                "Un Ix",
                "Andrew Smith",
                "Allen Piscitello",
                "Troy Benjegerdes",
                "Mike Hearn",
                "vv01f",
                "Alan Reiner",
                "Ricardo Filipe",
                "Jorge Tim\u00f3n",
                "Mark Friedenbach",
                "Melvin Carvalho",
                "Gary Rowe",
                "Jeff Garzik",
                "Tamas Blummer",
                "Natanael",
                "slush",
                "Tyler",
                "Luke-Jr",
                "Odinn Cyberguerrilla",
                "Alex Morcos",
                "Ben Davenport",
                "Chris Pacia",
                "Drak"
            ],
            "messages_count": 56,
            "total_messages_chars_count": 201317
        }
    },
    {
        "title": "[Bitcoin-development] seanmcmahon18 at gmail.com",
        "thread_messages": [
            {
                "author": "Sean Mc",
                "date": "2014-03-13T15:02:23",
                "message_text_only": "-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/67e4fbd5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "seanmcmahon18 at gmail.com",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sean Mc"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 182
        }
    },
    {
        "title": "[Bitcoin-development] Physical key / edge detection software and PIN to generate private key",
        "thread_messages": [
            {
                "author": "Jack Scott",
                "date": "2014-03-14T02:38:42",
                "message_text_only": "BIP: XX\nTitle: Physical key / edge detection software and PIN to generate a Bitcoin\nprivate key\nAuthor: Jack Scott\nStatus: Idea\nType: Standard Track\nCreated: 13-3-2014\n\nAbstract:\nA method is proposed to generate a Bitcoin private key by using a physical\nkey in conjunction with image recognition software and a PIN.  Use edge\ndetection software applied to incoming video feed to convert the shape of a\nphysical key into an equation that describes the key.  The hash of the\nkey's equation plus a user generated five digit pin can then be used to\ncreate a Bitcoin private key.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/f24ce696/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-14T03:19:56",
                "message_text_only": "On Fri, Mar 14, 2014 at 3:38 AM, Jack Scott <jack.scott.public at gmail.com>wrote:\n\n> A method is proposed to generate a Bitcoin private key by using a physical\n> key in conjunction with image recognition software and a PIN.  Use edge\n> detection software applied to incoming video feed to convert the shape of a\n> physical key into an equation that describes the key.  The hash of the\n> key's equation plus a user generated five digit pin can then be used to\n> create a Bitcoin private key.\n>\n\nSome practical nits:\n\n- Physical keys are vulnerable to photography-based reproduction attacks.\nThat gets even worse if you use them to identify to a digital system as you\ncan leave out the tiresome manual reproduction step.\n\n- The output from computer vision algorithms is notoriously noisy. If you\nuse that as input for hashing a private key, it may become hard/impossible\nto reproduce (also, physical objects may deform over time).\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/7fca85eb/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-03-14T17:49:19",
                "message_text_only": "On Thu, Mar 13, 2014 at 9:38 PM, Jack Scott <jack.scott.public at gmail.com>wrote:\n\n> BIP: XX\n> Title: Physical key / edge detection software and PIN to generate a\n> Bitcoin private key\n> Author: Jack Scott\n> Status: Idea\n> Type: Standard Track\n> Created: 13-3-2014\n>\n> Abstract:\n> A method is proposed to generate a Bitcoin private key by using a physical\n> key in conjunction with image recognition software and a PIN.  Use edge\n> detection software applied to incoming video feed to convert the shape of a\n> physical key into an equation that describes the key.  The hash of the\n> key's equation plus a user generated five digit pin can then be used to\n> create a Bitcoin private key.\n>\n>\nInteresting idea, though as Wladimir mentioned, a real-world \"key\" is much\nless secure than a Bitcoin/PGP \"key\", though in this case, I could see your\nphysical/visual \"key\" being any complex, high-contrast image (like a Motion\nTracking Target: https://www.google.com/search?q=tracking+markers&tbm=isch),\nif just using edge-detection (a high-contrast image would help make\nlow-light or out-of-focus shots still able to be detected), though like a\nQR-code, it should probably have calibration markers in the corners to\nspecify orientation (would help decoding a skewed or rotated image) and the\nstandard should enforce some minimum level of complexity to prevent really\nsimple and easy-to-reproduce/steal keys .\n\nThough if you're getting to that level of complexity, you might as well\njust have a QR code of the private key.\n\nBrooks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/8a14c327/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Physical key / edge detection software and PIN to generate private key",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jack Scott",
                "Wladimir",
                "Brooks Boyd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3584
        }
    },
    {
        "title": "[Bitcoin-development] python-bitcoinlib v0.1 release - a low-level Python2/3 interface to the Bitcoin protocol",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-03-15T13:43:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nI noticed that the ngccbase Colored Coin client(1) added a\npython-bitcoinlib dependency, specifically my fork. In addition there is\nalso now a rudementary python-bitcoinlib package in archlinux.\n\nSo with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:\n\n    https://github.com/petertodd/python-bitcoinlib/tree/v0.1\n\nThis Python2/3 library provides an easy interface to the bitcoin data\nstructures and protocol. The approach is low-level and \"ground up\", with\na focus on providing tools to manipulate the internals of how Bitcoin\nworks in a Pythonic way, without straying far from the Bitcoin Core\nimplementation.\n\nThe current status of the library as of v0.1 is that the support for\ndata-structures related to transactions, scripting, addresses, and keys\nare all quite usable and the API is probably not going to change that\nmuch. Bitcoin Core RPC support is included and automatically converts\nthe JSON to/from Python objects when appropriate.  EvalScript(),\nVerifyScript(), and SignatureHash() are all functional and pass all the\nBitcoin Core unittests, as well as a few that are still yet to be\nmerged.(2) You'll find some examples for signing pay2script-hash and\np2sh txouts in the examples/ directory; I personally used the\ntransaction signing functionality to make up a set of unittests related\nto OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone\nscript(3) is another good example, specifically of the RPC\nfunctionality.\n\nI personally haven't had any need for the p2p network related code for\nsome time, so I'm sure it's not in a good state and it lacks unittests;\nBloom filters for one are missing the merkle-block support to actually\nmake them useful. But the RPC support makes up for that for many uses.\n\nThis release and others in the future are signed by my PGP key, as well\nas every publicly pushed commit. You can verify the key via WoT, my\nbitcointalk account, signing history in the Bitcoin Core repo, and\nmailing list records among other sources.\n\nDisclaimer: This is alpha code in a language not known for type-safety.\n            I wouldn't personally use python-bitcoinlib for anything\n            other than experiments and neither should you.\n\n1) https://github.com/bitcoinx/ngcccbase\n2) https://github.com/bitcoin/bitcoin/pull/3861\n3) https://github.com/petertodd/dust-b-gone\n\n- -- \n'peter'[:-1]@petertodd.org\n000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\n\niQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3\nNGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk\nUZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY\nPyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv\ni9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1\neIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx\nz8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==\n=k1pi\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-15T14:34:14",
                "message_text_only": "On Sat, Mar 15, 2014 at 09:43:40AM -0400, Peter Todd wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n> \n> I noticed that the ngccbase Colored Coin client(1) added a\n> python-bitcoinlib dependency, specifically my fork. In addition there is\n> also now a rudementary python-bitcoinlib package in archlinux.\n\nAlso, for those who don't know the history of python-bitcoinlib, credit\nwhere credit is due: my fork is based on Jeff Garzik's implementation(1)\nand the bulk of the code structure is his work, modulo \"pythonizing\"\nthat I have done.\n\n1) https://github.com/jgarzik/python-bitcoinlib\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000090aa23d86521312897686912946b38e93a71a98a8c287d4a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/81b3fba5/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-15T16:47:00",
                "message_text_only": "Thanks -- though credit is really due to ArtForz, who kicked off this\nproject with his half-a-node: http://pastebin.com/ZSM7iHZw\n\nOn Sat, Mar 15, 2014 at 10:34 AM, Peter Todd <pete at petertodd.org> wrote:\n> On Sat, Mar 15, 2014 at 09:43:40AM -0400, Peter Todd wrote:\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>> I noticed that the ngccbase Colored Coin client(1) added a\n>> python-bitcoinlib dependency, specifically my fork. In addition there is\n>> also now a rudementary python-bitcoinlib package in archlinux.\n>\n> Also, for those who don't know the history of python-bitcoinlib, credit\n> where credit is due: my fork is based on Jeff Garzik's implementation(1)\n> and the bulk of the code structure is his work, modulo \"pythonizing\"\n> that I have done.\n>\n> 1) https://github.com/jgarzik/python-bitcoinlib\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000090aa23d86521312897686912946b38e93a71a98a8c287d4a\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-15T16:47:53",
                "message_text_only": "Sounds great.  I'm glad to see this with a more active maintainer.\nMaintaining -three- client libs was a bit much for me.\n\nOn Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> I noticed that the ngccbase Colored Coin client(1) added a\n> python-bitcoinlib dependency, specifically my fork. In addition there is\n> also now a rudementary python-bitcoinlib package in archlinux.\n>\n> So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:\n>\n>     https://github.com/petertodd/python-bitcoinlib/tree/v0.1\n>\n> This Python2/3 library provides an easy interface to the bitcoin data\n> structures and protocol. The approach is low-level and \"ground up\", with\n> a focus on providing tools to manipulate the internals of how Bitcoin\n> works in a Pythonic way, without straying far from the Bitcoin Core\n> implementation.\n>\n> The current status of the library as of v0.1 is that the support for\n> data-structures related to transactions, scripting, addresses, and keys\n> are all quite usable and the API is probably not going to change that\n> much. Bitcoin Core RPC support is included and automatically converts\n> the JSON to/from Python objects when appropriate.  EvalScript(),\n> VerifyScript(), and SignatureHash() are all functional and pass all the\n> Bitcoin Core unittests, as well as a few that are still yet to be\n> merged.(2) You'll find some examples for signing pay2script-hash and\n> p2sh txouts in the examples/ directory; I personally used the\n> transaction signing functionality to make up a set of unittests related\n> to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone\n> script(3) is another good example, specifically of the RPC\n> functionality.\n>\n> I personally haven't had any need for the p2p network related code for\n> some time, so I'm sure it's not in a good state and it lacks unittests;\n> Bloom filters for one are missing the merkle-block support to actually\n> make them useful. But the RPC support makes up for that for many uses.\n>\n> This release and others in the future are signed by my PGP key, as well\n> as every publicly pushed commit. You can verify the key via WoT, my\n> bitcointalk account, signing history in the Bitcoin Core repo, and\n> mailing list records among other sources.\n>\n> Disclaimer: This is alpha code in a language not known for type-safety.\n>             I wouldn't personally use python-bitcoinlib for anything\n>             other than experiments and neither should you.\n>\n> 1) https://github.com/bitcoinx/ngcccbase\n> 2) https://github.com/bitcoin/bitcoin/pull/3861\n> 3) https://github.com/petertodd/dust-b-gone\n>\n> - --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.14 (GNU/Linux)\n>\n> iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\n> MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3\n> NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\n> ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk\n> UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY\n> PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv\n> i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1\n> eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx\n> z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==\n> =k1pi\n> -----END PGP SIGNATURE-----\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Drak",
                "date": "2014-03-15T17:12:42",
                "message_text_only": "Would it make sense to pull that stuff in and add Peter with commit access\nsince your repo is top of the fork tree.\n\nDrak\n\n\nOn 15 March 2014 16:47, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Sounds great.  I'm glad to see this with a more active maintainer.\n> Maintaining -three- client libs was a bit much for me.\n>\n> On Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:\n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA256\n> >\n> > I noticed that the ngccbase Colored Coin client(1) added a\n> > python-bitcoinlib dependency, specifically my fork. In addition there is\n> > also now a rudementary python-bitcoinlib package in archlinux.\n> >\n> > So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:\n> >\n> >     https://github.com/petertodd/python-bitcoinlib/tree/v0.1\n> >\n> > This Python2/3 library provides an easy interface to the bitcoin data\n> > structures and protocol. The approach is low-level and \"ground up\", with\n> > a focus on providing tools to manipulate the internals of how Bitcoin\n> > works in a Pythonic way, without straying far from the Bitcoin Core\n> > implementation.\n> >\n> > The current status of the library as of v0.1 is that the support for\n> > data-structures related to transactions, scripting, addresses, and keys\n> > are all quite usable and the API is probably not going to change that\n> > much. Bitcoin Core RPC support is included and automatically converts\n> > the JSON to/from Python objects when appropriate.  EvalScript(),\n> > VerifyScript(), and SignatureHash() are all functional and pass all the\n> > Bitcoin Core unittests, as well as a few that are still yet to be\n> > merged.(2) You'll find some examples for signing pay2script-hash and\n> > p2sh txouts in the examples/ directory; I personally used the\n> > transaction signing functionality to make up a set of unittests related\n> > to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone\n> > script(3) is another good example, specifically of the RPC\n> > functionality.\n> >\n> > I personally haven't had any need for the p2p network related code for\n> > some time, so I'm sure it's not in a good state and it lacks unittests;\n> > Bloom filters for one are missing the merkle-block support to actually\n> > make them useful. But the RPC support makes up for that for many uses.\n> >\n> > This release and others in the future are signed by my PGP key, as well\n> > as every publicly pushed commit. You can verify the key via WoT, my\n> > bitcointalk account, signing history in the Bitcoin Core repo, and\n> > mailing list records among other sources.\n> >\n> > Disclaimer: This is alpha code in a language not known for type-safety.\n> >             I wouldn't personally use python-bitcoinlib for anything\n> >             other than experiments and neither should you.\n> >\n> > 1) https://github.com/bitcoinx/ngcccbase\n> > 2) https://github.com/bitcoin/bitcoin/pull/3861\n> > 3) https://github.com/petertodd/dust-b-gone\n> >\n> > - --\n> > 'peter'[:-1]@petertodd.org\n> > 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe\n> > -----BEGIN PGP SIGNATURE-----\n> > Version: GnuPG v1.4.14 (GNU/Linux)\n> >\n> > iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\n> > MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3\n> > NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\n> > ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk\n> > UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY\n> > PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv\n> > i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1\n> > eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx\n> > z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==\n> > =k1pi\n> > -----END PGP SIGNATURE-----\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/ba78b661/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-15T17:21:36",
                "message_text_only": "I am happy to do whatever makes the new maintainer and users most\nhappy.  That includes giving the new maintainer commit privs in my\nrepo.\n\n\nOn Sat, Mar 15, 2014 at 1:12 PM, Drak <drak at zikula.org> wrote:\n> Would it make sense to pull that stuff in and add Peter with commit access\n> since your repo is top of the fork tree.\n>\n> Drak\n>\n>\n> On 15 March 2014 16:47, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> Sounds great.  I'm glad to see this with a more active maintainer.\n>> Maintaining -three- client libs was a bit much for me.\n>>\n>> On Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:\n>> > -----BEGIN PGP SIGNED MESSAGE-----\n>> > Hash: SHA256\n>> >\n>> > I noticed that the ngccbase Colored Coin client(1) added a\n>> > python-bitcoinlib dependency, specifically my fork. In addition there is\n>> > also now a rudementary python-bitcoinlib package in archlinux.\n>> >\n>> > So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:\n>> >\n>> >     https://github.com/petertodd/python-bitcoinlib/tree/v0.1\n>> >\n>> > This Python2/3 library provides an easy interface to the bitcoin data\n>> > structures and protocol. The approach is low-level and \"ground up\", with\n>> > a focus on providing tools to manipulate the internals of how Bitcoin\n>> > works in a Pythonic way, without straying far from the Bitcoin Core\n>> > implementation.\n>> >\n>> > The current status of the library as of v0.1 is that the support for\n>> > data-structures related to transactions, scripting, addresses, and keys\n>> > are all quite usable and the API is probably not going to change that\n>> > much. Bitcoin Core RPC support is included and automatically converts\n>> > the JSON to/from Python objects when appropriate.  EvalScript(),\n>> > VerifyScript(), and SignatureHash() are all functional and pass all the\n>> > Bitcoin Core unittests, as well as a few that are still yet to be\n>> > merged.(2) You'll find some examples for signing pay2script-hash and\n>> > p2sh txouts in the examples/ directory; I personally used the\n>> > transaction signing functionality to make up a set of unittests related\n>> > to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone\n>> > script(3) is another good example, specifically of the RPC\n>> > functionality.\n>> >\n>> > I personally haven't had any need for the p2p network related code for\n>> > some time, so I'm sure it's not in a good state and it lacks unittests;\n>> > Bloom filters for one are missing the merkle-block support to actually\n>> > make them useful. But the RPC support makes up for that for many uses.\n>> >\n>> > This release and others in the future are signed by my PGP key, as well\n>> > as every publicly pushed commit. You can verify the key via WoT, my\n>> > bitcointalk account, signing history in the Bitcoin Core repo, and\n>> > mailing list records among other sources.\n>> >\n>> > Disclaimer: This is alpha code in a language not known for type-safety.\n>> >             I wouldn't personally use python-bitcoinlib for anything\n>> >             other than experiments and neither should you.\n>> >\n>> > 1) https://github.com/bitcoinx/ngcccbase\n>> > 2) https://github.com/bitcoin/bitcoin/pull/3861\n>> > 3) https://github.com/petertodd/dust-b-gone\n>> >\n>> > - --\n>> > 'peter'[:-1]@petertodd.org\n>> > 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe\n>> > -----BEGIN PGP SIGNATURE-----\n>> > Version: GnuPG v1.4.14 (GNU/Linux)\n>> >\n>> > iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\n>> > MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3\n>> > NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\n>> > ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk\n>> > UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY\n>> > PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv\n>> > i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1\n>> > eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx\n>> > z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==\n>> > =k1pi\n>> > -----END PGP SIGNATURE-----\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-15T17:22:54",
                "message_text_only": "On Sat, Mar 15, 2014 at 05:12:42PM +0000, Drak wrote:\n> Would it make sense to pull that stuff in and add Peter with commit access\n> since your repo is top of the fork tree.\n\nI've noticed it looks like people actually using my 'pythonize' code\nhave been linking directly to my tree in things like documentation and\nbuild scripts, so the URL is probably not a problem.\n\nI did open a pull-req on the bitcoin.org repo to change that URL\nhowever: https://github.com/bitcoin/bitcoin.org/pull/346\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000ef4a047ecc7077b7855626b9c9bf07e528e0c6ace2da30a8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/b1940acd/attachment.sig>"
            },
            {
                "author": "Drak",
                "date": "2014-03-15T18:04:37",
                "message_text_only": "Yes. I think the problem is your fork has been under more development and\nupstream has stalled. The problem with this is it becomes unclear which\nrepo is the main one as it really has become a fork and of course then\ndevelopment really does fork properly which is a shame because it doesn't\nnurture community contributions around the project which is really\nimportant.\n\nDrak\n\n\n\nOn 15 March 2014 17:22, Peter Todd <pete at petertodd.org> wrote:\n\n> On Sat, Mar 15, 2014 at 05:12:42PM +0000, Drak wrote:\n> > Would it make sense to pull that stuff in and add Peter with commit\n> access\n> > since your repo is top of the fork tree.\n>\n> I've noticed it looks like people actually using my 'pythonize' code\n> have been linking directly to my tree in things like documentation and\n> build scripts, so the URL is probably not a problem.\n>\n> I did open a pull-req on the bitcoin.org repo to change that URL\n> however: https://github.com/bitcoin/bitcoin.org/pull/346\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000ef4a047ecc7077b7855626b9c9bf07e528e0c6ace2da30a8\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/c00ca7df/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "python-bitcoinlib v0.1 release - a low-level Python2/3 interface to the Bitcoin protocol",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Drak",
                "Peter Todd"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 20504
        }
    },
    {
        "title": "[Bitcoin-development] External IP Address",
        "thread_messages": [
            {
                "author": "Sam Michaels",
                "date": "2014-03-16T07:04:13",
                "message_text_only": "Hello devs.\n\nI was poking around in the code for a small project and I came across the\nfunction GetMyExternalIP() in net.cpp.  The comment says you'd like to\nphase out the current method.\n\nI threw together exactly what was asked in the comments: it's a site that\nhas PHP echo the IP address.  Additionally, it captures the IP, user agent,\nand time for analysis (a client with the same IP and user agent just\nupdates the entry).\n\nThe site for the client is: ip.bitcheck.us.  It does a quick search for\n\"Mozilla\" in the user agent to redirect browers that go there.\n\nThe following information is sent:\n\n---\nGET / HTTP/1.1\nHost: ip.bitcheck.us\nUser-Agent: /Satoshi:0.8.6/\nConnection: close\n---\n\nAnd following is received:\n\n---\nHTTP/1.1 200 OK\nDate: Sun, 16 Mar 2014 05:31:51 GMT\nServer: Apache mod_fcgid/2.3.10-dev\nX-Powered-By: Satoshi v1.0\nX-Client-Update: yes\nContent-Length: 9\nConnection: close\nContent-Type: text/html\n\n127.0.0.1\n---\n\nYou can look for X-Client-Update to see if the check in was logged.  Other\ninformation can be passed in the header, too.\n\nErrors are trapped so that it will always display the IP address and any\nerror information is contained in the headers.\n\nHope you find this useful.\n\nSam\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/8acf5218/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-16T10:22:25",
                "message_text_only": "Sam,\n\nOn Sun, Mar 16, 2014 at 8:04 AM, Sam Michaels <sam at samtheham.org> wrote:\n\n> You can look for X-Client-Update to see if the check in was logged.  Other\n> information can be passed in the header, too.\n>\n> Errors are trapped so that it will always display the IP address and any\n> error information is contained in the headers.\n>\n> Hope you find this useful.\n>\n\nThanks for your effort.\n\nHowever the current idea is to phase out reliance on centralized external\nservices completely in favor of peer-based address detection.\n\nSee https://github.com/bitcoin/bitcoin/pull/3461\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/cbd99de9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "External IP Address",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sam Michaels",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2164
        }
    },
    {
        "title": "[Bitcoin-development] Electrum 1.9.8 release",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-16T13:24:43",
                "message_text_only": "I am happy to announce the release of Electrum 1.9.8.\nThis release includes some features initially planned for version 2.0.\n\nPackages are available on https://electrum.org/download.html (signed by me)\nBinaries for windows and mac will be available in the coming days\n\nenjoy\n\nThomas\n-----------------------\n\nRELEASE NOTES\n\n# Release 1.9.8\n\n(This release includes features initially planned for version 2.0)\n\n* Electrum servers were upgraded to version 0.9. The new server stores\n   a Patrica tree of all UTXOs, an idea proposed by Alan Reiner in the\n   bitcointalk forum. This property allows the client to directly\n   request the balance of any address. The new commands are:\n      1. getaddressbalance <address>\n      2. getaddressunspent <address>\n      3. getutxoaddress <txid> <pos>\n\n* In addition, two commands for message encryption were added:\n      1. encrypt <pubkey> <message>\n      2. decrypt <pubkey> <message>\n\n   The encryption algorithm is ECIES, and code was was borrowed from\n   https://github.com/jackjack-jj/jeeq.  In order to know the public\n   key corresponding to a Bitcoin address in your wallet, you can use\n   the 'getpubkeys' command. The 'decrypt' command assumes that the\n   wallet has the private key corresponding to the public key passed as\n   argument.\n\n* The encrypt and decrypt functions are available in the Qt GUI (from\n   the menubar, or right click on one of your addresses if you want to\n   use its public key).\n\n* Command-line commands that require a connection to the network spawn\n   a daemon, that remains connected and handles subsequent\n   commands. The daemon terminates itself if it remains unused for more\n   than one minute. The purpose of this is to make scripting more\n   efficient. For example, a bash script using many electrum commands\n   will open only one connection."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-16T13:54:49",
                "message_text_only": "On Sun, Mar 16, 2014 at 6:24 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>    The encryption algorithm is ECIES, and code was was borrowed from\n>    https://github.com/jackjack-jj/jeeq.  In order to know the public\n>    key corresponding to a Bitcoin address in your wallet, you can use\n>    the 'getpubkeys' command. The 'decrypt' command assumes that the\n>    wallet has the private key corresponding to the public key passed as\n>    argument.\n\nThe cryptosystem in that repository appears to be insecure in several\nways and is not actually implementing ECIES.\n\nThe most important of which is that instead of using a\ncryptographically strong mac tied to the ephemeral secret it uses a\ntrivial 16 bit check value.  This means that that I can decode an\narbitrary message encrypted to a third person if they allow me to make\nno more than 65536 queries to a decryption oracle to decrypt some\nother message.\n\nAlso, in the event that a random query to a decryption oracle yields a\nresult (1:2^16 times) the result directly reveals the ECDH value\nbecause it is only additively combined with the message value. If the\nimplementation does not check if the nonce point is on the curve (an\neasy implementation mistake) the result can yield a point on the twist\ninstead of the curve which is far more vulnerable to recovery of the\nprivate key.  ECIES uses a KDF instead of using the ECDH result\ndirectly to avoid this.\n\nThere may be other problems (or mitigating factors) as it was very\nhard for me to follow what it was actually doing.\n\n(The particular implementation has a number of other issues, like\napparently not using a cryptographically strong RNG for its EC nonce..\nbut I assume you didn't copy that particular flaw)"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-16T14:31:24",
                "message_text_only": "thanks for your feedback!\n\nI was not aware that that implementation was flawed.\nI will see how I can fix that code and get back to you.\n\nThomas\n\n\n\nLe 16/03/2014 14:54, Gregory Maxwell a \u00e9crit :\n> On Sun, Mar 16, 2014 at 6:24 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>>     The encryption algorithm is ECIES, and code was was borrowed from\n>>     https://github.com/jackjack-jj/jeeq.  In order to know the public\n>>     key corresponding to a Bitcoin address in your wallet, you can use\n>>     the 'getpubkeys' command. The 'decrypt' command assumes that the\n>>     wallet has the private key corresponding to the public key passed as\n>>     argument.\n> The cryptosystem in that repository appears to be insecure in several\n> ways and is not actually implementing ECIES.\n>\n> The most important of which is that instead of using a\n> cryptographically strong mac tied to the ephemeral secret it uses a\n> trivial 16 bit check value.  This means that that I can decode an\n> arbitrary message encrypted to a third person if they allow me to make\n> no more than 65536 queries to a decryption oracle to decrypt some\n> other message.\n>\n> Also, in the event that a random query to a decryption oracle yields a\n> result (1:2^16 times) the result directly reveals the ECDH value\n> because it is only additively combined with the message value. If the\n> implementation does not check if the nonce point is on the curve (an\n> easy implementation mistake) the result can yield a point on the twist\n> instead of the curve which is far more vulnerable to recovery of the\n> private key.  ECIES uses a KDF instead of using the ECDH result\n> directly to avoid this.\n>\n> There may be other problems (or mitigating factors) as it was very\n> hard for me to follow what it was actually doing.\n>\n> (The particular implementation has a number of other issues, like\n> apparently not using a cryptographically strong RNG for its EC nonce..\n> but I assume you didn't copy that particular flaw)"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-16T14:39:11",
                "message_text_only": "On Sun, Mar 16, 2014 at 7:31 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n> thanks for your feedback!\n>\n> I was not aware that that implementation was flawed.\n> I will see how I can fix that code and get back to you.\n\nIt also leaks on the order of 7 bits of data about the message per\nmessage chunk.  I'm also think it's likely that there are some\nmessages which are just incorrectly decrypted.   ... it's really\nscrewy and suspect."
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-16T15:48:21",
                "message_text_only": "Thanks again for having a look.\n\nGiven these problems, I have decided to remove\nthe encryption methods from the current release.\nI retagged 1.9.8 and updated the packages.\n\nThomas\n\n\n\nLe 16/03/2014 15:39, Gregory Maxwell a \u00e9crit :\n> On Sun, Mar 16, 2014 at 7:31 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>> thanks for your feedback!\n>>\n>> I was not aware that that implementation was flawed.\n>> I will see how I can fix that code and get back to you.\n> It also leaks on the order of 7 bits of data about the message per\n> message chunk.  I'm also think it's likely that there are some\n> messages which are just incorrectly decrypted.   ... it's really\n> screwy and suspect."
            }
        ],
        "thread_summary": {
            "title": "Electrum 1.9.8 release",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Thomas Voegtlin"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6626
        }
    },
    {
        "title": "[Bitcoin-development] mailing list to get news ONLY about new releases",
        "thread_messages": [
            {
                "author": "spameden",
                "date": "2014-03-16T13:31:31",
                "message_text_only": "Hi everyone.\n\nIs there a mailing list where I can get only notifications about NEW\nreleases of bitcoin-qt client?\n\nSo far I've found only RSS subscription here:\nhttps://bitcoin.org/en/rss/releases.rss\n\nRSS is not convinient at all for me..\n\nMany thanks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/f489aa54/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "mailing list to get news ONLY about new releases",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "spameden"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 436
        }
    },
    {
        "title": "[Bitcoin-development] 2-way pegging (Re: is there a way to do bitcoin-staging?)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-03-16T22:58:19",
                "message_text_only": "So an update on 1-way pegging (aka bitcoin staging, explained in quoted text\nat bottom): it turns out secure 2-way pegging is also possible (with some\nbitcoin change to help support it).  The interesting thing is this allows\ninteroperability in terms of being able to move bitcoin into and out of a\nside chain.  The side chains may have some different parameters, or\nexperimental things people might want to come up with (subject to some\nminimum compatibility at the level of being able to produce an SPV proof of\na given form).\n\nAt the time of the 1-way peg discussion I considered 2-way peg as desirable\nand it seemed plausible with bitcoin changes, but the motivation for 1-way\npeg was to make it less risky to make changes on bitcoin, so that seemed\nlike a catch-22 loop.  Also in the 2-way peg thought experiment I had not\nrealized how simple it was to still impose a security firewall in the 2-way\npeg also.\n\n\nSo Greg Maxwell proposed in Dec last year a practically compact way to do\n2-way pegging using SPV proofs.  And also provided a simple argument of how\nthis can provide a security firewall.  (Security firewall means the impact\nof security bugs on the side-chain is limited to the people with coins in\nit; bitcoin holders who did not use it are unaffected). [1]\n\nHow it works:\n\n1. to maintain the 21m coins promise, you start a side-chain with no\nin-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as\nwith 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1\npeg should be possible, but this is the base case).\n\n2. you move coins to the side-chain by spending them to a fancy script,\nwhich suspends them, and allows them to be reanimated by the production of\nan SPV proof of burn on the side-chain.\n\n3. the side-chain has no mining reward, but it allows you to mint coins at\nno mining cost by providing an SPV proof that the coin has been suspended as\nin 2 on bitcoin.  The SPV proof must be buried significantly before being\nused to reduce risk of reorganization.  The side-chain is an SPV client to\nthe bitcoin network, and so maintains a view of the bitcoin hash chain (but\nnot the block data).\n\n4. the bitcoin chain is firewalled from security bugs on the side chain,\nbecause bitcoin imposes the rule that no more coins can be reanimated than\nare currently suspend (with respect to a given chain).\n\n5. to simplify what they hypothetical bitcoin change would need to consider\nand understand, after a coin is reanimated there is a maturity period\nimposed (say same as fresh mined coins).  During the maturity period the\nreanimation script allows a fraud proof to spend the coins back.  A fraud\nbounty fee (equal to the reanimate fee) can be offered by the mover to\nincentivize side-chain full nodes to watch reanimations and search for fraud\nproofs.\n\n6. a fraud proof is an SPV proof with a longer chain showing that the proof\nof burn was orphaned.\n\nThere are a few options to compress the SPV proof, via Fiat-Shamir transform\nto provide a compact proof of amount work contained in a merkle tree of\nproofs of work (as proposed by Fabien Coelho link on\nhttp://hashcash.org/papers/) with params like 90% of work is proven.  But\nbetter is something Greg proposed based on skip-lists organized in a tree,\nwhere 'lucky' proofs of work are used to skip back further.  (Recalling that\nif you search for a 64-bit leading-0 proof-of-work, half the time you get a\n65-bit, quarter 66-bit etc.)  With this mechanism you can accurately\nprove the amount of proof of work in a compressed tree (rather than ~90%).\n\n\nApart from pegging from bitcoin to a side-chain, if a private chain is made\nwith same rules to the side-chain it becomes possible with some\nmodifications to the above algorithm to peg the side-chain to a private\nchain.  Private chain meaning a chain with the same format but signature of\nsingle server in place of hashing, and timestamping of the block signatures\nin the mined side chain.  And then reactive security on top of that by full\nnodes/auditors trying to find fraud proofs (rewrites of history relative to\nside-chain mined time-stamp or approved double-spends).  The reaction is to\npublish a fraud proof and move coins back to the side chain, and then\nregroup on a new server.  (Open transactions has this audit + reactive model\nbut as far as I know does it via escrow, eg the voting pools for k of n\nescrow of the assets on the private server.) I also proposed the same\nreactive audit model but for auditable namespaces [4].\n\nPrivate chains add some possiblity for higher scaling, while retaining\nbitcoin security properties.  (You need to add the ability for a user to\nunilaterally move his coins to the side-chain they came from in event the\nchain server refuses to process transactions involving them.  This appears\nto be possible if you have compatible formats on the private chain and\nside-chain).\n\n\nThis pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,\nMatt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. \nThe 2-way peg seems to have first been described by Greg.  Greg thought of\n2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2]. \n(As a ZK-SNARK could compactly prove full validation of a side chain rules).\n\nThere was also something seemingly similar sounding but not described in\ndetail by Alex Mizrahi in the context of color coins in this post [3].\n\nAdam\n\n[1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt\n[2] https://bitcointalk.org/index.php?topic=277389.40\n[3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554\n[4] http://www.cypherspace.org/p2p/auditable-namespace.html\n\nOn Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:\n>Coming back to the staging idea, maybe this is a realistic model that could\n>work.  The objective being to provide a way for bitcoin to move to a live\n>beta and stable being worked on in parallel like fedora vs RHEL or odd/even\n>linux kernel versions.\n>\n>Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x\n>stable and leap-frogs as beta becomes stable after testing.\n>\n>Its a live beta, meaning real value, real contracts.  But we dont want it to\n>be an alt-coin with a floating value exactly, we want it to be bitcoin, but\n>the bleeding edge bitcoin so we want to respect the 21 million coin limit,\n>and allow coins to move between bitcoin and betacoin with some necessary\n>security related restrictions.\n>\n>There is no mining reward on the betacoin network (can be merge mined for\n>security), and the way you opt to move a bitcoin into the betacoin network\n>is to mark it as transferred in some UTXO recognized way.  It cant be\n>reanimated, its dead.  (eg spend to a specific recognized invalid address on\n>the bitcoin network).  In this way its not really a destruction, but a move,\n>moving the coin from bitcoin to betacoin network.\n>\n>This respects the 21 million coin cap, and avoids betacoin bugs flowing back\n>and affecting bitcoin security or value-store properties.  Users may buy or\n>swap betacoin for bitcoin to facilitate moving money back from betacoin to\n>bitcoin.  However that is market priced so the bitcoin network is security\n>insulated from beta.  A significant security bug in beta would cause a\n>market freeze, until it is rectified.\n>\n>The cost of a betacoin is capped at one BTC because no one will pay more\n>than one bitcoin for a betacoin because they could alternatively move their\n>own coin.  The reverse is market priced.\n>\n>Once bitcoin beta stabalizes, eg say year or two type of time-frame, a\n>decision is reached to promote 1.0 beta to 2.0 stable, the remaining\n>bitcoins can be moved, and the old network switched off, with mining past a\n>flag day moving to the betacoin.\n>\n>During the beta period betacoin is NOT an alpha, people can rely on it and\n>use it in anger for real value transactions.  eg if it enables more script\n>features, or coin coloring, scalabity tweaks etc people can use it. \n>Probably for large value store they are always going to prefer\n>bitcoin-stable, but applications that need the coloring features, or\n>advanced scripting etc can go ahead and beta.\n>\n>Bitcoin-stable may pull validated changes and merge them, as a way to pull\n>in any features needed in the shorter term and benefit from the betacoin\n>validation.  (Testing isnt as much validation as real-money at stake\n>survivability).\n>\n>The arguments are I think that:\n>\n>- it allows faster development allowing bitcoin to progress features faster,\n>\n>- it avoids mindshare dilution if alternatively an alt-coin with a hit\n>  missing feature takes off;\n>\n>- it concentrates such useful-feature alt activities into one OPEN source\n>  and OPEN control foundation mediated area (rather than suspected land\n>  grabs on colored fees or such like bitcoin respun as a business model\n>  things),\n>\n>- maybe gets the developers that would've been working on their pet\n>  alt-coin, or their startup alt-coin to work together putting more\n>  developers, testers and resources onto something with open control (open\n>  source does not necessarily mean that much) and bitcoin mindshare\n>  branding, its STILL bitcoin, its just the beta network.\n>\n>- it respects the 21 million limit, starting new mining races probably\n>  dillutes the artificial scarcity semantic\n>\n>- while insulating bitcoin from betacoin security defects (I dont mean\n>  betacoin as a testnet, it should have prudent rigorous testing like\n>  bitcoin, just the very act of adding a feature creates risk that bitcoin\n>  stable can be hesitant to take).\n>\n>Probably the main issue as always is more (trustable) very high caliber\n>testers and developers.  Maybe if the alt-coin minded startups and\n>developers donate their time to bitcoin-beta (or bitcoin-stable) for the\n>bits they are missing, we'll get more hands to work on something of reusable\n>value to humanity, in parallel with their startup's objectives and as a way\n>for them to get their needed features, while giving back to the bitcoin\n>community, and helping bitcoin progress faster.\n>\n>Maybe bitcoin foundation could ask for BTC donations to hire more developers\n>and testers full time.  $1.5b of stored value should be interested to safe\n>guard their value store, and develop the transaction features.\n>\n>Adam\n>\n>On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n>>  This is exactly what I was planning to do with the\n>>  inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n>>\n>>  For it to really work, it's gotta be part of the mainnet validation\n>>  rules, but no way it can be evaluated realistically without some kind of\n>>  \"staging\".\n>\n>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>>\n>>  I think this is a very interesting idea. As Bitcoiners, we often stuff\n>>  things into the 'alt chain' bucket in our heads; I wonder if this idea\n>>  works better as a curing period, essentially an extended version of the\n>>  current 100 block wait for mined coins."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-16T23:22:32",
                "message_text_only": "Some comments.\n\nOn 3/16/14, Adam Back <adam at cypherspace.org> wrote:\n> 6. a fraud proof is an SPV proof with a longer chain showing that the proof\n> of burn was orphaned.\n\nAs discussed, \"reorg proof\" it's a more appropriate term since the\nreorg can happen without any fraud. It also prevents the term from\nbeing confused with the fraud proof that auditors (full nodes that\ncan't create blocks) produce for private chains.\n\n> Apart from pegging from bitcoin to a side-chain, if a private chain is made\n> with same rules to the side-chain it becomes possible with some\n> modifications to the above algorithm to peg the side-chain to a private\n> chain.  Private chain meaning a chain with the same format but signature of\n> single server in place of hashing, and timestamping of the block signatures\n> in the mined side chain.  And then reactive security on top of that by full\n> nodes/auditors trying to find fraud proofs (rewrites of history relative to\n> side-chain mined time-stamp or approved double-spends).  The reaction is to\n> publish a fraud proof and move coins back to the side chain, and then\n> regroup on a new server.  (Open transactions has this audit + reactive\n> model\n> but as far as I know does it via escrow, eg the voting pools for k of n\n> escrow of the assets on the private server.) I also proposed the same\n> reactive audit model but for auditable namespaces [4].\n>\n> Private chains add some possiblity for higher scaling, while retaining\n> bitcoin security properties.  (You need to add the ability for a user to\n> unilaterally move his coins to the side-chain they came from in event the\n> chain server refuses to process transactions involving them.  This appears\n> to be possible if you have compatible formats on the private chain and\n> side-chain).\n\nIn this case you can't require a side chain proof of burn to move back\nto the side chain or the funds could be locked by the dishonest\nprivate chain operator (accountant in freimarkets[1] terminology). By\nallowing unilateral withdrawals, you impose on the private chain the\ntask of observing the side chain looking for double-spends, censoring\nthose transactions or maybe updating its committed utxo when it has\nproofs that the coins have been withdrawn.\n\n[1] http://freico.in/docs/freimarkets.pdf\nhttps://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#private-ledgers\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-17T15:55:41",
                "message_text_only": "On Sun, Mar 16, 2014 at 3:58 PM, Adam Back <adam at cypherspace.org> wrote:\n> 2. you move coins to the side-chain by spending them to a fancy script,\n> which suspends them, and allows them to be reanimated by the production of\n> an SPV proof of burn on the side-chain.\n\nOne point to note here is that the if the whole move and quieting\nperiod stuff sounds\ncumbersome\u2014 thats because it is. Even with the best efficiency optimizations the\nsecurity requirements result in somewhat large and slow transactions\u2014\nand thats totally fine!\n\nA key point here is that normally someone who needs to use coins on one chain or\nthe other can use fast atomic cross-chain transactions[1][2] and not\nbother with the\nslow direct movement across. The cross chain swapping, however, requires an\n(untrusted) counterparty on the other chain, while the 2-way peg migrations can\nbe performed alone in order to provide liquidity and balance demand.\n\n\n[1] https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\n(Hm the citation there is weird, that predates TierNolan's post)\n[2] https://bitcointalk.org/index.php?topic=321228.0\nCoinSwap: Transaction graph disjoint trustless trading\n(private version)"
            }
        ],
        "thread_summary": {
            "title": "2-way pegging (Re: is there a way to do bitcoin-staging?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 14557
        }
    },
    {
        "title": "[Bitcoin-development] Compact SPV proofs via block header commitments",
        "thread_messages": [
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-17T17:24:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==Abstract==\n\nIn simple payment verification (SPV) proofs it is currently necessary\nthat every intervening block header be provided between two blocks in\norder to establish both connectivity and proof of work. By committing to\na hash tree of past block headers in each block, these back references\ncan be exploited to demonstrate in logarithmic space that an elided\nsequence of block headers actually represents the claimed work. This is\nparticularly useful in the construction of 2-way pegging between chains,\nand as an efficiency optimization for SPV clients and headers-first\nsynchronization.\n\n==Overview==\n\nThe miner of a block is allowed to choose some subset of the block\nhistory which it creates direct links back to. These links include the\nblock hash, height, and work distance from the new block, and are\norganized into a hash tree structure. The root of this hash tree is\ncommitted to the coinbase string, or some other identifiable position in\nthe block. Bitcoin is soft-forked to include verification of the\naccuracy of the contents of this structure - if present - as a\nvalidation rule.\n\nWhen constructing an SPV proof, the prover is allowed to choose\nback-links from this structure whose relative work distance is less than\nor equal to the apparent work of the proof-of-work which contains the\nback-link structure. Apparent work in this context means the expected\nwork that would be required to meet or exceed the actual block hash.\nSince back-links can only be used if the apparent work is greater than\nor equal to the distance back, constructing such a fraudulent proof is\nexpected to require just as much or more work as recreating the\nunderlying sequence of blocks.\n\nThe result is skip list structure where \"lucky\" proofs of work are used\nto skip back further than a single block (recall that if you search for\na 64-bit leading-0 proof of work, half the time you get 65 leading-0's,\na quarter of those cases have 66 leading-0's, and so on). When\nconstructing very long proofs, the solver will follow links back to the\nnearest lucky block, then use the back-links contained within that block\nto skip back to a prior lucky block, and so on until it reaches a block\nwhich points directly to the desired target block. Given the\ndistribution of \"lucky\" blocks, it is expected that such compact proofs\nrequire revelation of log2 N links in order to prove the work required\nto build a chain of length N.\n\n==Back link selection==\n\nIn fully general form, this compact SPV proof scheme works no matter the\nback-links chosen by miners, so long as they are either revealed or\nselected in a deterministic way such that full nodes can check their\nvalidity. In choosing which back-links to include, the primary trade-off\nis that more back-links results in better connectivity, whereas a\nlimited number of links results in smaller tree structures and therefore\nfewer hashes.\n\nAt one extreme you can commit to every single header in the entire\nhistory of the block chain, by building an incremental data structure\nsuch as a binary heap. Such a structure would require log N storage per\nchain and log N hash operations per block update, where N is the total\nnumber of blocks in the chain. The root hash of this structure is then\ncommitted to the block chain in a known location.\n\nAt the other extreme one could allow the miner instead to commit\nwhatever back-links he or she desires, and force these the hash tree\nstructure to be revealed prior to block validation. This allows the\nminer to be selective in choosing back-links which provide the most\nvalue, although there is not yet a clearly optimal mechanism for\nchoosing these links.\n\nThis is an area which requires more research with the purpose of\ndetermining the best structure for the hash tree of block header\ncommitments, and the selection of back-links.\n\n==Use cases==\n\nFor SPV clients, a client that has just come online could quickly\nascertain which block represents the most work, and retrieve compact\nproofs-of-inclusion for its transactions without having to download\nevery intervening block header. This further eliminates the need for\ncheckpoints in an SPV client as it can instead obtain very compact\nproofs back to the genesis block instead of the most recent checkpoint,\nat a comparable cost. Similar optimizations apply to the initial stages\nof headers-first synchronization of full nodes.\n\nAssuming the availability of (U)TxO hash-tree commitments, a compact SPV\nproof would allow a mobile client to very quickly fast-forward to the\ncurrent most-work block from which it could then query the spend status\nof its wallet outputs.\n\nFor merged-mined or slow proof-of-work side chains, the savings from\nnot including every intervening block header could be very significant\nin bandwidth and processing time.\n\nCompact SPV proofs allow side chains or private accounting servers to\nexperiment with very short block intervals without having a detrimental\neffect on SPV proof sizes, as the compact proofs scale logarithmically\nwith the number of blocks.\n\nFinally the most important and driving use case: symmetrical two-way\npegging between bitcoin and side-chains is made efficient enough to be\nreduced to practice by the availability of compact SPV proofs[1]. The\ncompact SPV proofs allow both the necessary proofs-of-spend and\nproofs-of-reorg to fit within current blockchain size limitations, and\nprovide incentives for keeping this data out of the block chain until it\nis absolutely necessary.\n\n==References==\n\nThis specific compact SPV proof proposal arose from pegging discussion\ninvolving a number of people #bitcoin-wizards: Greg Maxwell, Matt\nCorallo, Pieter Wuille, Luke-Jr, Jorge Timon, and Mark Friedenbach. It\nis believed that the first explanation of this general idea is due to\nAndrew Miller in his 7 Aug 2012 forum post titled \"The High-Value-Hash\nHighway\"[2].\n\n[1]http://sourceforge.net/p/bitcoin/mailman/message/32108143/\n[2]https://bitcointalk.org/index.php?topic=98986.0\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJTJy/eAAoJEAdzVfsmodw4zC4P/izBRTutwypwQ70TxPxxHYfH\nI4QOpf+MgWHxrD+DKKyqkC2icgUBQz96K1vEhA86PrmK8DITs5yGHLSw7CEF/rlG\nhZErVY65IpowPt+JnlwOqHcqaoJ277s+4qpd/D9F7L1ROAMUDzzonf7V1Znr/fax\nlL4b8whfUI5jeRQby/tMiGPUB/1YJcbGmFccTW9gkGWMvoqZiiXcW7ZKuLrq5tbW\nRFIsrSt7rv3D0Cp2Fiyaxnryr2F0QOTqahHLn50+585eHpVFrA9A5T6xiBcEMzlQ\nl5cHRZb+lVIktWuYomBiqWljPLo5qercVDrehIq9FFSYuJqzudNx9ZXrpF1ZR4in\nUfZvlYqMFO/ZOTG33JWeeMonKlVwfHH2WreggzSq/JD/cH8dUj63A266Gaf6cl83\nvEfhgVBDTXZnl5H9Z7wymja6R9m9Eo/Xf+GwRV4vyx1b9gcZXML4Zm4bTp4EXFHA\nStBGrYKmMpEb/gguk/hxJLsm0i9pVaQpMC0u3kClHTA5o0IFF9F5+mVjOb59HlDX\nAQx96TSwJzhl0l0jcxYye8bXmZFJvpzpsKRPwNISllLEagjplwK2Ub8q5du27lH5\nR2qukcso6N5weGggUu1f7NrqcBALdz4E80SSpwu4YtJ6wdI4zsypaq4leqbSRSKh\n/hLKeOV5fEGNmwTtrDmN\n=j9cm\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Compact SPV proofs via block header commitments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mark Friedenbach"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6941
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core version 0.9.0 released",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2014-03-19T13:26:15",
                "message_text_only": "Bitcoin Core version 0.9.0 is now available from:\n\n  https://bitcoin.org/bin/0.9.0/\n\nThis is a release candidate for a new major version. A major version brings\nboth new features and bug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n  https://github.com/bitcoin/bitcoin/issues\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has\ncompletely\nshut down (which might take a few minutes for older versions), uninstall all\nearlier versions of Bitcoin, then run the installer (on Windows) or just\ncopy\nover /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n\nIf you are upgrading from version 0.7.2 or earlier, the first time you run\n0.9.0 your blockchain files will be re-indexed, which will take anywhere\nfrom\n30 minutes to several hours, depending on the speed of your machine.\n\nOn Windows, do not forget to uninstall all earlier versions of the Bitcoin\nclient first, especially if you are switching to the 64-bit version.\n\nWindows 64-bit installer\n-------------------------\n\nNew in 0.9.0 is the Windows 64-bit version of the client. There have been\nfrequent reports of users running out of virtual memory on 32-bit systems\nduring the initial sync. Because of this it is recommended to install the\n64-bit version if your system supports it.\n\nNOTE: Release candidate 2 Windows binaries are not code-signed; use PGP\nand the SHA256SUMS.asc file to make sure your binaries are correct.\nIn the final 0.9.0 release, Windows setup.exe binaries will be code-signed.\n\nOSX 10.5 / 32-bit no longer supported\n-------------------------------------\n\n0.9.0 drops support for older Macs. The minimum requirements are now:\n* A 64-bit-capable CPU (see http://support.apple.com/kb/ht3696);\n* Mac OS 10.6 or later (see https://support.apple.com/kb/ht1633).\n\nDowngrading warnings\n--------------------\n\nThe 'chainstate' for this release is not always compatible with previous\nreleases, so if you run 0.9 and then decide to switch back to a\n0.8.x release you might get a blockchain validation error when starting the\nold release (due to 'pruned outputs' being omitted from the index of\nunspent transaction outputs).\n\nRunning the old release with the -reindex option will rebuild the chainstate\ndata structures and correct the problem.\n\nAlso, the first time you run a 0.8.x release on a 0.9 wallet it will rescan\nthe blockchain for missing spent coins, which will take a long time (tens\nof minutes on a typical machine).\n\nRebranding to Bitcoin Core\n---------------------------\n\nTo reduce confusion between Bitcoin-the-network and Bitcoin-the-software we\nhave renamed the reference client to Bitcoin Core.\n\nAutotools build system\n-----------------------\n\nFor 0.9.0 we switched to an autotools-based build system instead of\nindividual\n(q)makefiles.\n\nUsing the standard \"./autogen.sh; ./configure; make\" to build Bitcoin-Qt and\nbitcoind makes it easier for experienced open source developers to\ncontribute\nto the project.\n\nBe sure to check doc/build-*.md for your platform before building from\nsource.\n\nBitcoin-cli\n-------------\n\nAnother change in the 0.9 release is moving away from the bitcoind\nexecutable\nfunctioning both as a server and as a RPC client. The RPC client\nfunctionality\n(\"tell the running bitcoin daemon to do THIS\") was split into a separate\nexecutable, 'bitcoin-cli'. The RPC client code will eventually be removed\nfrom\nbitcoind, but will be kept for backwards compatibility for a release or two.\n\n`walletpassphrase` RPC\n-----------------------\n\nThe behavior of the `walletpassphrase` RPC when the wallet is already\nunlocked\nhas changed between 0.8 and 0.9.\n\nThe 0.8 behavior of `walletpassphrase` is to fail when the wallet is\nalready unlocked:\n\n    > walletpassphrase 1000\n    walletunlocktime = now + 1000\n    > walletpassphrase 10\n    Error: Wallet is already unlocked (old unlock time stays)\n\nThe new behavior of `walletpassphrase` is to set a new unlock time\noverriding\nthe old one:\n\n    > walletpassphrase 1000\n    walletunlocktime = now + 1000\n    > walletpassphrase 10\n    walletunlocktime = now + 10 (overriding the old unlock time)\n\nTransaction malleability-related fixes\n--------------------------------------\n\nThis release contains a few fixes for transaction ID (TXID) malleability\nissues:\n\n- -nospendzeroconfchange command-line option, to avoid spending\n  zero-confirmation change\n- IsStandard() transaction rules tightened to prevent relaying and mining of\n  mutated transactions\n- Additional information in listtransactions/gettransaction output to\n  report wallet transactions that conflict with each other because\n  they spend the same outputs.\n- Bug fixes to the getbalance/listaccounts RPC commands, which would report\n  incorrect balances for double-spent (or mutated) transactions.\n- New option: -zapwallettxes to rebuild the wallet's transaction information\n\nTransaction Fees\n----------------\n\nThis release drops the default fee required to relay transactions across the\nnetwork and for miners to consider the transaction in their blocks to\n0.01mBTC per kilobyte.\n\nNote that getting a transaction relayed across the network does NOT\nguarantee\nthat the transaction will be accepted by a miner; by default, miners fill\ntheir blocks with 50 kilobytes of high-priority transactions, and then with\n700 kilobytes of the highest-fee-per-kilobyte transactions.\n\nThe minimum relay/mining fee-per-kilobyte may be changed with the\nminrelaytxfee option. Note that previous releases incorrectly used\nthe mintxfee setting to determine which low-priority transactions should\nbe considered for inclusion in blocks.\n\nThe wallet code still uses a default fee for low-priority transactions of\n0.1mBTC per kilobyte. During periods of heavy transaction volume, even this\nfee may not be enough to get transactions confirmed quickly; the mintxfee\noption may be used to override the default.\n\n0.9.0 Release notes\n=======================\n\nRPC:\n\n- New notion of 'conflicted' transactions, reported as confirmations: -1\n- 'listreceivedbyaddress' now provides tx ids\n- Add raw transaction hex to 'gettransaction' output\n- Updated help and tests for 'getreceivedby(account|address)'\n- In 'getblock', accept 2nd 'verbose' parameter, similar to\ngetrawtransaction,\n  but defaulting to 1 for backward compatibility\n- Add 'verifychain', to verify chain database at runtime\n- Add 'dumpwallet' and 'importwallet' RPCs\n- 'keypoolrefill' gains optional size parameter\n- Add 'getbestblockhash', to return tip of best chain\n- Add 'chainwork' (the total work done by all blocks since the genesis\nblock)\n  to 'getblock' output\n- Make RPC password resistant to timing attacks\n- Clarify help messages and add examples\n- Add 'getrawchangeaddress' call for raw transaction change destinations\n- Reject insanely high fees by default in 'sendrawtransaction'\n- Add RPC call 'decodescript' to decode a hex-encoded transaction script\n- Make 'validateaddress' provide redeemScript\n- Add 'getnetworkhashps' to get the calculated network hashrate\n- New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'\nfields\n  in 'getpeerinfo' output\n- Adding new 'addrlocal' field to 'getpeerinfo' output\n- Add verbose boolean to 'getrawmempool'\n- Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed\nbalance\n- Explicitly ensure that wallet is unlocked in `importprivkey`\n- Add check for valid keys in `importprivkey`\n\nCommand-line options:\n\n- New option: -nospendzeroconfchange to never spend unconfirmed change\noutputs\n- New option: -zapwallettxes to rebuild the wallet's transaction information\n- Rename option '-tor' to '-onion' to better reflect what it does\n- Add '-disablewallet' mode to let bitcoind run entirely without wallet\n(when\n  built with wallet)\n- Update default '-rpcsslciphers' to include TLSv1.2\n- make '-logtimestamps' default on and rework help-message\n- RPC client option: '-rpcwait', to wait for server start\n- Remove '-logtodebugger'\n- Allow `-noserver` with bitcoind\n\nBlock-chain handling and storage:\n\n- Update leveldb to 1.15\n- Check for correct genesis (prevent cases where a datadir from the wrong\n  network is accidentally loaded)\n- Allow txindex to be removed and add a reindex dialog\n- Log aborted block database rebuilds\n- Store orphan blocks in serialized form, to save memory\n- Limit the number of orphan blocks in memory to 750\n- Fix non-standard disconnected transactions causing mempool orphans\n- Add a new checkpoint at block 279,000\n\nWallet:\n\n- Bug fixes and new regression tests to correctly compute\n  the balance of wallets containing double-spent (or mutated) transactions\n- Store key creation time. Calculate whole-wallet birthday.\n- Optimize rescan to skip blocks prior to birthday\n- Let user select wallet file with -wallet=foo.dat\n- Consider generated coins mature at 101 instead of 120 blocks\n- Improve wallet load time\n- Don't count txins for priority to encourage sweeping\n- Don't create empty transactions when reading a corrupted wallet\n- Fix rescan to start from beginning after importprivkey\n- Only create signatures with low S values\n\nMining:\n\n- Increase default -blockmaxsize/prioritysize to 750K/50K\n- 'getblocktemplate' does not require a key to create a block template\n- Mining code fee policy now matches relay fee policy\n\nProtocol and network:\n\n- Drop the fee required to relay a transaction to 0.01mBTC per kilobyte\n- Send tx relay flag with version\n- New 'reject' P2P message (BIP 0061, see\n  https://gist.github.com/gavinandresen/7079034 for draft)\n- Dump addresses every 15 minutes instead of 10 seconds\n- Relay OP_RETURN data TxOut as standard transaction type\n- Remove CENT-output free transaction rule when relaying\n- Lower maximum size for free transaction creation\n- Send multiple inv messages if mempool.size > MAX_INV_SZ\n- Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION\n- Do not treat fFromMe transaction differently when broadcasting\n- Process received messages one at a time without sleeping between messages\n- Improve logging of failed connections\n- Bump protocol version to 70002\n- Add some additional logging to give extra network insight\n- Added new DNS seed from bitcoinstats.com\n\nValidation:\n\n- Log reason for non-standard transaction rejection\n- Prune provably-unspendable outputs, and adapt consistency check for it.\n- Detect any sufficiently long fork and add a warning\n- Call the -alertnotify script when we see a long or invalid fork\n- Fix multi-block reorg transaction resurrection\n- Reject non-canonically-encoded serialization sizes\n- Reject dust amounts during validation\n- Accept nLockTime transactions that finalize in the next block\n\nBuild system:\n\n- Switch to autotools-based build system\n- Build without wallet by passing `--disable-wallet` to configure, this\n  removes the BerkeleyDB dependency\n- Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to\nmore\n  recent versions\n- Windows 64-bit build support\n- Solaris compatibility fixes\n- Check integrity of gitian input source tarballs\n- Enable full GCC Stack-smashing protection for all OSes\n\nGUI:\n\n- Switch to Qt 5.2.0 for Windows build\n- Add payment request (BIP 0070) support\n- Improve options dialog\n- Show transaction fee in new send confirmation dialog\n- Add total balance in overview page\n- Allow user to choose data directory on first start, when data directory is\n  missing, or when the -choosedatadir option is passed\n- Save and restore window positions\n- Add vout index to transaction id in transactions details dialog\n- Add network traffic graph in debug window\n- Add open URI dialog\n- Add Coin Control Features\n- Improve receive coins workflow: make the 'Receive' tab into a form to\nrequest\n  payments, and move historical address list functionality to File menu.\n- Rebrand to `Bitcoin Core`\n- Move initialization/shutdown to a thread. This prevents \"Not responding\"\n  messages during startup. Also show a window during shutdown.\n- Don't regenerate autostart link on every client startup\n- Show and store message of normal bitcoin:URI\n- Fix richtext detection hang issue on very old Qt versions\n- OS X: Make use of the 10.8+ user notification center to display\nGrowl-like\n  notifications\n- OS X: Added NSHighResolutionCapable flag to Info.plist for better font\n  rendering on Retina displays.\n- OS X: Fix bitcoin-qt startup crash when clicking dock icon\n- Linux: Fix Gnome bitcoin: URI handler\n\nMiscellaneous:\n\n- Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth\n- Add '-regtest' mode, similar to testnet but private with instant block\n  generation with 'setgenerate' RPC.\n- Add 'linearize.py' script to contrib, for creating bootstrap.dat\n- Add separate bitcoin-cli client\n\nCredits\n--------\n\nThanks to everyone who contributed to this release:\n\n- Andrey\n- Ashley Holman\n- b6393ce9-d324-4fe1-996b-acf82dbc3d53\n- bitsofproof\n- Brandon Dahler\n- Calvin Tam\n- Christian Decker\n- Christian von Roques\n- Christopher Latham\n- Chuck\n- coblee\n- constantined\n- Cory Fields\n- Cozz Lovan\n- daniel\n- Daniel Larimer\n- David Hill\n- Dmitry Smirnov\n- Drak\n- Eric Lombrozo\n- fanquake\n- fcicq\n- Florin\n- frewil\n- Gavin Andresen\n- Gregory Maxwell\n- gubatron\n- Guillermo C\u00e9spedes Tab\u00e1rez\n- Haakon Nilsen\n- HaltingState\n- Han Lin Yap\n- harry\n- Ian Kelling\n- Jeff Garzik\n- Johnathan Corgan\n- Jonas Schnelli\n- Josh Lehan\n- Josh Triplett\n- Julian Langschaedel\n- Kangmo\n- Lake Denman\n- Luke Dashjr\n- Mark Friedenbach\n- Matt Corallo\n- Michael Bauer\n- Michael Ford\n- Michagogo\n- Midnight Magic\n- Mike Hearn\n- Nils Schneider\n- Noel Tiernan\n- Olivier Langlois\n- patrick s\n- Patrick Strateman\n- paveljanik\n- Peter Todd\n- phantomcircuit\n- phelixbtc\n- Philip Kaufmann\n- Pieter Wuille\n- Rav3nPL\n- R E Broadley\n- regergregregerrge\n- Robert Backhaus\n- Roman Mindalev\n- Rune K. Svendsen\n- Ryan Niebur\n- Scott Ellis\n- Scott Willeke\n- Sergey Kazenyuk\n- Shawn Wilkinson\n- Sined\n- sje\n- Subo1978\n- super3\n- Tamas Blummer\n- theuni\n- Thomas Holenstein\n- Timon Rapp\n- Timothy Stranex\n- Tom Geller\n- Torstein Huseb\u00f8\n- Vaclav Vobornik\n- vhf / victor felder\n- Vinnie Falco\n- Warren Togami\n- Wil Bown\n- Wladimir J. van der Laan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/3570598d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core version 0.9.0 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 14241
        }
    },
    {
        "title": "[Bitcoin-development] [QT] how to disable block verification for faster UI testing?",
        "thread_messages": [
            {
                "author": "Angel Leon",
                "date": "2014-03-19T17:27:08",
                "message_text_only": "the command line options mention a -checklevel  parameter.\nI've been passing 0 assuming there'd be little to no verification, but it's\nhappened a few times that when I open the official binary (while not doing\ndevelopment) there's some sort of database corruption and Bitcoin-Qt needs\nto reindex blocks on disk, a process that can take probably a whole day.\n\nhow do you guys develop the UI and avoid these issues?\n\nCheers,\nAngel\n\nhttp://twitter.com/gubatron\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/7a70d8e5/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-19T18:22:55",
                "message_text_only": "On Wed, Mar 19, 2014 at 6:27 PM, Angel Leon <gubatron at gmail.com> wrote:\n\n> the command line options mention a -checklevel  parameter.\n> I've been passing 0 assuming there'd be little to no verification, but\n> it's happened a few times that when I open the official binary (while not\n> doing development) there's some sort of database corruption and Bitcoin-Qt\n> needs to reindex blocks on disk, a process that can take probably a whole\n> day.\n>\n> how do you guys develop the UI and avoid these issues?\n>\n\nIn general I do very little with the database while developing the UI. I\nhave various seperate bitcoin data directories (both testnet and mainnet)\nto try things out. Before doing something risky I just make a copy.\n\nThese days I also do a lot of development with -regtest, as it allows\nquickly setting up test scenarios.\n\nWhat are you trying to test specifically? The progress bar while reindexing?\n\nIf you have database problems are you perhaps switching between 0.8.x and\n0.9.x with the same directory? In that case see the downgrading warning\nhere: https://bitcoin.org/bin/0.9.0/README.txt .\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/6f920807/attachment.html>"
            },
            {
                "author": "Angel Leon",
                "date": "2014-03-19T18:36:31",
                "message_text_only": "\"If you have database problems are you perhaps switching between 0.8.x and\n0.9.x with the same directory?\"\nI think that may have been the issue.\n\nMaybe now that I have a 0.9.0 official binary, when I switch to the source\nbuilds I won't have the issue.\n\nHowever, I think I'll do what you do and have separate bitcoin data\ndirectories, that's probably the best.\n\nnot trying to test anything specifically, just codign, building, launching\nover and over, would like to make the startup of the Qt client faster.\n\nhttp://twitter.com/gubatron\n\n\nOn Wed, Mar 19, 2014 at 2:22 PM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Wed, Mar 19, 2014 at 6:27 PM, Angel Leon <gubatron at gmail.com> wrote:\n>\n>> the command line options mention a -checklevel  parameter.\n>> I've been passing 0 assuming there'd be little to no verification, but\n>> it's happened a few times that when I open the official binary (while not\n>> doing development) there's some sort of database corruption and Bitcoin-Qt\n>> needs to reindex blocks on disk, a process that can take probably a whole\n>> day.\n>>\n>> how do you guys develop the UI and avoid these issues?\n>>\n>\n> In general I do very little with the database while developing the UI. I\n> have various seperate bitcoin data directories (both testnet and mainnet)\n> to try things out. Before doing something risky I just make a copy.\n>\n> These days I also do a lot of development with -regtest, as it allows\n> quickly setting up test scenarios.\n>\n> What are you trying to test specifically? The progress bar while\n> reindexing?\n>\n> If you have database problems are you perhaps switching between 0.8.x and\n> 0.9.x with the same directory? In that case see the downgrading warning\n> here: https://bitcoin.org/bin/0.9.0/README.txt .\n>\n> Wladimir\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/0908e03b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "how to disable block verification for faster UI testing?",
            "categories": [
                "Bitcoin-development",
                "QT"
            ],
            "authors": [
                "Wladimir",
                "Angel Leon"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3885
        }
    },
    {
        "title": "[Bitcoin-development] HEADS UP: Bitcoin 0.9.0 doesn't work on old Linux",
        "thread_messages": [
            {
                "author": "Jesus Cea",
                "date": "2014-03-19T18:28:58",
                "message_text_only": "I just upgraded to Bitcoin 0.9.0 and I got this:\n\n\"\"\"\n$ ./bitcoind\n./bitcoind: /lib/libc.so.6: version `GLIBC_2.15' not found (required by\n./bitcoind)\n./bitcoind: /lib/libc.so.6: version `GLIBC_2.14' not found (required by\n./bitcoind)\n\n$ ./bitcoin-qt\n./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.15' not found (required\nby ./bitcoin-qt)\n./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.14' not found (required\nby ./bitcoin-qt)\n\"\"\"\n\nSniff.\n\nRed Hat Enterprise Linux uses glibc 2.12.\n\n-- \nJes\u00fas Cea Avi\u00f3n                         _/_/      _/_/_/        _/_/_/\njcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/\nTwitter: @jcea                        _/_/    _/_/          _/_/_/_/_/\njabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/\n\"Things are not so easy\"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/\n\"My name is Dump, Core Dump\"   _/_/_/        _/_/_/      _/_/  _/_/\n\"El amor es poner tu felicidad en la felicidad de otro\" - Leibniz\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 538 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/4f62e0e6/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-19T18:57:47",
                "message_text_only": "On Wed, Mar 19, 2014 at 7:28 PM, Jesus Cea <jcea at jcea.es> wrote:\n\n> I just upgraded to Bitcoin 0.9.0 and I got this:\n>\n> \"\"\"\n> $ ./bitcoind\n> ./bitcoind: /lib/libc.so.6: version `GLIBC_2.15' not found (required by\n> ./bitcoind)\n> ./bitcoind: /lib/libc.so.6: version `GLIBC_2.14' not found (required by\n> ./bitcoind)\n>\n> $ ./bitcoin-qt\n> ./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.15' not found (required\n> by ./bitcoin-qt)\n> ./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.14' not found (required\n> by ./bitcoin-qt)\n> \"\"\"\n>\n\nThis a a known issue: https://github.com/bitcoin/bitcoin/issues/3803\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/0b1f44c9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "HEADS UP: Bitcoin 0.9.0 doesn't work on old Linux",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jesus Cea",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2057
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin for W3C Payments Workshop, March 24-25",
        "thread_messages": [
            {
                "author": "Brent Shambaugh",
                "date": "2014-03-19T21:23:20",
                "message_text_only": "Hello Bitcoiners,\n\nI have been working on some use cases for the W3C payments workshop. I'd\nlike to include Bitcoin, but I might not have the time:\n\nHere is what I have:\n\nhttps://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases\n\nWhich is editable with a w3c username and password. Just be a member of the\nwebpayments community group: http://www.w3.org/community/webpayments/\n\nMore formally you can submit a pull request to:\n\nhttps://github.com/w3c-webmob/payments-use-cases\n\n-------------\n\nDue to discussions with others am attempting to apply the following\ntemplate:\n\n\nName: name of the solution\nUse Cases: Key use cases for the solution\nRegions and currencies: Any SDKs or APIs which are available to developers\n\nwith the following things to consider (for use cases):\n(1) add real money to the service\n(2) buy a physical good in the real wold (e.g., a cup of coffee)\n(3) pay for physical service (e.g., gym membership)?\n(4) convert virtual money back into paper money\n(5) transfer money from one person to another (even if the second person is\nnot signed up for the service)?\n(6) buy product online\n(7) resolve disputes?\n(8) view transactions?\n(9) secure the wallet\n(10) etc.\n\nThanks for your time and have a great day!\n\n-Brent Shambaugh\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/e0ce0658/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-03-20T01:41:50",
                "message_text_only": "I wish to state that I fundamentally disagree with this proposal of use\ncases for W3C payments workshop.  Please read my following explanation and\nthen do what you will:\n\nAt one time I was invited to join the Web Payments conference calls.  I\nconsidered it and then declined due to the very CLAs that Brent mentioned\nin the message that started this thread.\n\nI was trying to remember the language that I objected to relating to the\nW3C CLA.  Found it: https://web-payments.org/minutes/ As mentioned, I was\noffered to join these calls but I declined due to, in part, the following:\nUpon review of  the page at  web-payments.org, I noticed that it provides\na means to connect with web payments group by teleconference.  However,\nthere is an agreement that the site would require me to accept merely to\njoin the teleconference and collaborate with others in the web payments\ngroup.  I would say \"unfortunately,\" but in my case I will say\nfortunately, I don't agree with the required agreement as shown here at\nhttp://www.w3.org/community/about/agreements/cla/ which is shown as\nfollows at https://web-payments.org/minutes/ \"There are no costs\nassociated with joining the group or limitations on who may join the\nteleconference as long as they agree to the Web Payments community \"\n\nSome of the things I don't like about the proposed agreement /\n\"requirement\" are fundamental.  At the core, it should be understood that\ncollaborative efforts, or teleconferences involving innovators who strive\nto develop concepts for eventual development of a social good, for\nexample, should not be subject to a \"requirement\" that anyone agree to a\nlicense in relation to their participation or contribution.  Such\n\"requirements\" inhibit innovation and free thought.  For example, the web\npayments group provides that in order for me to participate, I must first\n\"agree to license my Essential Claims under the W3C CLA RF Licensing\nRequirements\" and numerous other requirements.\n\nAlthough I was interested in some sort of collaboration with the Web\nPayments Community Group, these CLAs - lengthy, burdensome, and in my\npersonal view, highly dubious and potentially restricting with respect to\ninnovation and free thought - caused me to reconsider, and thus I will not\nbe entering into web or telephone conferences or related collaborations\nwith the W3C / Web Payments folks until such time as they remove these\nburdensome requirements which are applied merely to join a call.\ufeff\n\n> Hello Bitcoiners,\n>\n> I have been working on some use cases for the W3C payments workshop. I'd\n> like to include Bitcoin, but I might not have the time:\n>\n> Here is what I have:\n>\n> https://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases\n>\n> Which is editable with a w3c username and password. Just be a member of\n> the\n> webpayments community group: http://www.w3.org/community/webpayments/\n>\n> More formally you can submit a pull request to:\n>\n> https://github.com/w3c-webmob/payments-use-cases\n>\n> -------------\n>\n> Due to discussions with others am attempting to apply the following\n> template:\n>\n>\n> Name: name of the solution\n> Use Cases: Key use cases for the solution\n> Regions and currencies: Any SDKs or APIs which are available to developers\n>\n> with the following things to consider (for use cases):\n> (1) add real money to the service\n> (2) buy a physical good in the real wold (e.g., a cup of coffee)\n> (3) pay for physical service (e.g., gym membership)?\n> (4) convert virtual money back into paper money\n> (5) transfer money from one person to another (even if the second person\n> is\n> not signed up for the service)?\n> (6) buy product online\n> (7) resolve disputes?\n> (8) view transactions?\n> (9) secure the wallet\n> (10) etc.\n>\n> Thanks for your time and have a great day!\n>\n> -Brent Shambaugh\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-03-20T02:03:09",
                "message_text_only": "On 20 March 2014 02:41, Odinn Cyberguerrilla <\nodinn.cyberguerrilla at riseup.net> wrote:\n\n> I wish to state that I fundamentally disagree with this proposal of use\n> cases for W3C payments workshop.  Please read my following explanation and\n> then do what you will:\n>\n> At one time I was invited to join the Web Payments conference calls.  I\n> considered it and then declined due to the very CLAs that Brent mentioned\n> in the message that started this thread.\n>\n> I was trying to remember the language that I objected to relating to the\n> W3C CLA.  Found it: https://web-payments.org/minutes/ As mentioned, I was\n> offered to join these calls but I declined due to, in part, the following:\n> Upon review of  the page at  web-payments.org, I noticed that it provides\n> a means to connect with web payments group by teleconference.  However,\n> there is an agreement that the site would require me to accept merely to\n> join the teleconference and collaborate with others in the web payments\n> group.  I would say \"unfortunately,\" but in my case I will say\n> fortunately, I don't agree with the required agreement as shown here at\n> http://www.w3.org/community/about/agreements/cla/ which is shown as\n> follows at https://web-payments.org/minutes/ \"There are no costs\n> associated with joining the group or limitations on who may join the\n> teleconference as long as they agree to the Web Payments community \"\n>\n> Some of the things I don't like about the proposed agreement /\n> \"requirement\" are fundamental.  At the core, it should be understood that\n> collaborative efforts, or teleconferences involving innovators who strive\n> to develop concepts for eventual development of a social good, for\n> example, should not be subject to a \"requirement\" that anyone agree to a\n> license in relation to their participation or contribution.  Such\n> \"requirements\" inhibit innovation and free thought.  For example, the web\n> payments group provides that in order for me to participate, I must first\n> \"agree to license my Essential Claims under the W3C CLA RF Licensing\n> Requirements\" and numerous other requirements.\n>\n> Although I was interested in some sort of collaboration with the Web\n> Payments Community Group, these CLAs - lengthy, burdensome, and in my\n> personal view, highly dubious and potentially restricting with respect to\n> innovation and free thought - caused me to reconsider, and thus I will not\n> be entering into web or telephone conferences or related collaborations\n> with the W3C / Web Payments folks until such time as they remove these\n> burdensome requirements which are applied merely to join a call.\n>\n\nFair point, but you need to understand that all specs created by the W3C\nare committed to be royalty free.  That's why there's a CLA, but I can\ntotally see if you or your employer feels uncomfortable with that.  You\nmight have the best possible interests, but not everyone may be as honest.\n\nPersonally, have participated as an unaffiliated volunteer and hobbyist at\nthe W3C for a few years, I've never seen an issue with this.  In fact, I'm\nreally happy that they have a bullet proof intellectual property framework\nthat guarantees all my contributions will never be encumbered by patents or\nbe charged royalties for.\n\n\n>\n> > Hello Bitcoiners,\n> >\n> > I have been working on some use cases for the W3C payments workshop. I'd\n> > like to include Bitcoin, but I might not have the time:\n> >\n> > Here is what I have:\n> >\n> > https://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases\n> >\n> > Which is editable with a w3c username and password. Just be a member of\n> > the\n> > webpayments community group: http://www.w3.org/community/webpayments/\n> >\n> > More formally you can submit a pull request to:\n> >\n> > https://github.com/w3c-webmob/payments-use-cases\n> >\n> > -------------\n> >\n> > Due to discussions with others am attempting to apply the following\n> > template:\n> >\n> >\n> > Name: name of the solution\n> > Use Cases: Key use cases for the solution\n> > Regions and currencies: Any SDKs or APIs which are available to\n> developers\n> >\n> > with the following things to consider (for use cases):\n> > (1) add real money to the service\n> > (2) buy a physical good in the real wold (e.g., a cup of coffee)\n> > (3) pay for physical service (e.g., gym membership)?\n> > (4) convert virtual money back into paper money\n> > (5) transfer money from one person to another (even if the second person\n> > is\n> > not signed up for the service)?\n> > (6) buy product online\n> > (7) resolve disputes?\n> > (8) view transactions?\n> > (9) secure the wallet\n> > (10) etc.\n> >\n> > Thanks for your time and have a great day!\n> >\n> > -Brent Shambaugh\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> >\n> http://p.sf.net/sfu/13534_NeoTech_______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/75b1eebc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin for W3C Payments Workshop, March 24-25",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Brent Shambaugh",
                "Odinn Cyberguerrilla"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 11857
        }
    },
    {
        "title": "[Bitcoin-development] Post to list request",
        "thread_messages": [
            {
                "author": "Chris D'Costa",
                "date": "2014-03-21T09:11:59",
                "message_text_only": "Hello \n\nI wonder if I could be granted access to post to the dev list. My project is the Meek hardware wallet, and we are working on a solution to avoid MITM attacks when communicating a pay-to information over a non-secure transport mechanism. \n\nRegards\n\nChris"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-21T10:58:32",
                "message_text_only": "Access granted. Welcome! (-:\n\n\nOn 03/21/2014 10:11 AM, Chris D'Costa wrote:\n> Hello \n> \n> I wonder if I could be granted access to post to the dev list. My project is the Meek hardware wallet, and we are working on a solution to avoid MITM attacks when communicating a pay-to information over a non-secure transport mechanism. \n> \n> Regards\n> \n> Chris\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-21T11:09:33",
                "message_text_only": "Sounds very relevant to what we were just discussing on the other thread,\nabout securing Bluetooth connections and BIP70.\n\n\nOn Fri, Mar 21, 2014 at 11:58 AM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Access granted. Welcome! (-:\n>\n>\n> On 03/21/2014 10:11 AM, Chris D'Costa wrote:\n> > Hello\n> >\n> > I wonder if I could be granted access to post to the dev list. My\n> project is the Meek hardware wallet, and we are working on a solution to\n> avoid MITM attacks when communicating a pay-to information over a\n> non-secure transport mechanism.\n> >\n> > Regards\n> >\n> > Chris\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/13534_NeoTech\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/7d58203b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Post to list request",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Chris D'Costa",
                "Andreas Schildbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2758
        }
    },
    {
        "title": "[Bitcoin-development] Transifex administration",
        "thread_messages": [
            {
                "author": "Felipe Micaroni Lalli",
                "date": "2014-03-22T04:57:00",
                "message_text_only": "G'day great devs,\n\nHow can I gain status of maintainer, admin or / and reviewer in https://www.transifex.com/organization/bitcoin/dashboard ?\n\nI'd like to set the description, project logo and whatever is missing on Bitcoin project inside Transifex. I believe if it is better configured it can attract more contributors. Of course my English is not perfect how you can see, but surely I'll copy the description from wiki, source code docs and other fonts written in native English. The logo I'll set the official one.\n\nAlso, I want to be able to make review in Portuguese BR. Unapologetically my Portuguese is perfect, I studied the grammar several years and I am native speaker. I've been contributing in Portuguese BR and yesterday I completed the 35% missing translations.\n\nThank you so much in advance,\n\n\nFelipe Micaroni Lalli\n\nWalltime - https://walltime.info\nBitcoin Paranoid Android developer\nPGP ID: 0x4c0afccfed5cde14 - ED5CDE14\nBTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/0caca22f/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Transifex administration",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Felipe Micaroni Lalli"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1279
        }
    },
    {
        "title": "[Bitcoin-development] Handling miner adoption gracefully for embedded consensus systems via double-spending/replace-by-fee",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-03-22T08:47:02",
                "message_text_only": "There's been a lot of recent hoopla over proof-of-publication, with the\nOP_RETURN <data> length getting reduced to a rather useless 40 bytes at\nthe last minute prior to the 0.9 release. Secondly I noticed a\noverlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken\ninto account, making it possible to broadcast unminable transactions and\nbloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG\noutputs given that the sigops limit and the way they use up a fixed 20\nsigops per op makes them hard to do fee calculations for. They also make\nit easy to bloat the UTXO set, potentially a bad thing. This would of\ncourse require things using them to change. Currently that's just\nCounterparty, so I gave them the heads up in my email.\n\nTo make a long story short, it was soon suggested that Bitcoin Core be\nforked - the software, not the protocol - and miners encouraged to\nsupport it. This isn't actually as trivial as it sounds, as you need to\nadd some anti-DoS stuff to deal with the fact that the hashing power\nmining the transations you are relaying may be quite small. The second\nissue is you need to add preferential peering, so the nodes in the\nnetwork with a broader idea of what is a \"allowed\" transaction can find\neach other. (likely with a new service flag) It'd be a good time to\nimplement replace-by-fee, partly for its anti-DoS properties.\n\nWhich leaves us with a practical question: How do you gracefully handle\na switchover? First of all I suggest that proof-of-publication\napplications adopt format flexibility, similar to how Mastercoin can\nencode its data in pay-to-pubkeyhash, bare multisig, or op_return\noutputs. Given the possibility of bare multisig going away, I'd suggest\nthat P2SH multisig scriptSig encoding be added as well. Note that a\nreally good implementation of all this is actually format agnostic, and\nwill let PUSHDATA's used for encoding data be specified arbitrarily. I\nwrote up some code to do so awhile back as an experiment. It used the\nLSB's of the nValue field in the txouts to specify what was and wasn't\ndata, along with some stenographic encryption of data and nValue. I'd be\nhappy to dig that up if anyone is interested.\n\nAll these methods have some overhead compared to just using OP_RETURN\nand thus cost more. So I suggest you have your software simultaneously\ndouble-spend the inputs to any proof-of-publication transaction with a\nsecond transaction that just makes use of efficient OP_RETURN. That\nsecond one can go to more enlightened miners. Only one or the other will\nget mined of course and the cost to publish data will be proportional to\nthe relative % of hashing power in the two camps.\n\nFinally I'll be writing something more detailed soon about why\nproof-of-publication is essential and miners would be smart to support\nit. But the tl;dr: of it is if you need proof-of-publication for what\nyour system does you're much more secure if you're embedded within\nBitcoin rather than alongside of it. There's a lot of very bad advise\ngetting thrown around lately for things like Mastercoin, Counterparty,\nand for that matter, Colored Coins, to use a separate PoW blockchain or\na merge-mined one. The fact is if you go with pure PoW, you risk getting\nattacked while your still growing, and if you go for merge-mined PoW,\nthe attacker can do so for free. We've got a real-world example of the\nformer with Twister, among many others, usually resulting in a switch to\na centralized checkpointing scheme. For the latter we have Coiledcoin,\nan alt that made the mistake of using SHA256 merge-mining and got killed\noff early at birth with a zero-cost 51% attack. There is of course a\ncensorship risk to going the embedded route, but at least we know that\nfor the forseeable future doing so will require explicit blacklists,\nsomething most people here are against.\n\nTo MSC, XCP and others: Now I'm not going to say you shouldn't take\nadvice from people who call your finance 2.0 systems scams, or maybe if\nthey're nice, indistinguishable from a scam. But when you do, you should\nthink for yourself before just trusting that some authority figure has\nyour best interests in mind.\n\n\n1) Yes, this was responsibly disclosed to the security mailing list. It\n   was revealed to the public a few hours later on the -dev IRC channel\n   without a fix.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000009065ab15f4a036e9ec13d2e788e0ede69472e0ec396b097f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/a6b454c7/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-22T13:53:41",
                "message_text_only": "On 3/22/14, Peter Todd <pete at petertodd.org> wrote:\n> There's been a lot of recent hoopla over proof-of-publication, with the\n> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n> the last minute prior to the 0.9 release.\n\n\nI'm not against about miners accepting transactions that have longer\ndata  in non-utxo polluting OP_RETURN than whatever is specified as\nstandard by the reference implementation, maybe it should be risen in\nstandard but I think it was assumed that the most common case would be\nto include the root hash of some \"merklized\" structure.\nMy only argument against non-validated proof of publication is that in\nthe long run it will be very expensive since they will have to compete\nwith transactions that actually use the utxo, a feature that is more\nvaluable. But that's mostly speculation and doesn't imply the need for\nany action against it. I would strongly opposed to against a\nlimitation on OP_RETURN at the protocol level (other than the block\nsize limit itself, that is) and wouldn't mind if they're removed from\nisStandard. I didn't payed much attention to that and honestly I don't\ncare enough.\nMaybe this encourages miners to adopt their own policies, which could\nbe good for things like replace-by-fee, the rational policy for\nminers, which I strongly support (combined with game theory can\nprovide \"instant\" transactions as you pointed out in another thread).\n\nMaybe the right approach to keep improving modularity and implement\ndifferent and configurable mining policies.\n\n> All these methods have some overhead compared to just using OP_RETURN\n> and thus cost more.\n\nI thought the consensus was that op_return was the right way to put\nnon-validated data in the chain, but limiting it in standard policies\ndoesn't seem consistent with that.\n\n> Finally I'll be writing something more detailed soon about why\n> proof-of-publication is essential and miners would be smart to support\n> it. But the tl;dr: of it is if you need proof-of-publication for what\n> your system does you're much more secure if you're embedded within\n> Bitcoin rather than alongside of it. There's a lot of very bad advise\n> getting thrown around lately for things like Mastercoin, Counterparty,\n> and for that matter, Colored Coins, to use a separate PoW blockchain or\n> a merge-mined one. The fact is if you go with pure PoW, you risk getting\n> attacked while your still growing, and if you go for merge-mined PoW,\n> the attacker can do so for free. We've got a real-world example of the\n> former with Twister, among many others, usually resulting in a switch to\n> a centralized checkpointing scheme. For the latter we have Coiledcoin,\n> an alt that made the mistake of using SHA256 merge-mining and got killed\n> off early at birth with a zero-cost 51% attack. There is of course a\n> censorship risk to going the embedded route, but at least we know that\n> for the forseeable future doing so will require explicit blacklists,\n> something most people here are against.\n\nThe \"proof of publication vs separate chain\" discussion is orthogonal\nto the \"merged mining vs independent chain\" one.\nIf I remember correctly, last time you admitted after my example that\nmerged mining was comparatively better than a separate chain, that it\nwas economically harder to attack. I guess ecological arguments won't\nhelp here, but you're confusing people developing independent chains\nand thus pushing them to a less secure (apart from more wasteful\nsetup) system design.\nCoiledcoin just proofs that merged mining may not be the best way to\nbootstrap a currency, but you can also start separated and then switch\nto merged mining once you have sufficient independent support.\nAs far as I can tell twister doesn't have a realistic reward mechanism\nfor miners so the incentives are broken before considering merged\nmining.\nProof of work is irreversible and it's a good thing to share it.\nThanks Satoshi for proposing this great idea of merged mining and\nthanks vinced for a first implementation with a data structure that\ncan be improved.\n\nPeter Todd, I don't think you're being responsible or wise saying\nnonsense like \"merged mined chains can be attacked for free\" and I\nsuggest that you prove your claims by attacking namecoin \"for free\",\nplease, enlighten us, how that's done?\nIt should be easier with the scamcoin ixcoin, with a much lower\nsubsidy to miners so I don't feel bad about the suggestion if your\n\"free attack\" somehow works (certainly using some magic I don't know\nabout).\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-22T19:34:35",
                "message_text_only": "On Sat, Mar 22, 2014 at 02:53:41PM +0100, Jorge Tim\u00f3n wrote:\n> On 3/22/14, Peter Todd <pete at petertodd.org> wrote:\n> > There's been a lot of recent hoopla over proof-of-publication, with the\n> > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n> > the last minute prior to the 0.9 release.\n> \n> \n> I'm not against about miners accepting transactions that have longer\n> data  in non-utxo polluting OP_RETURN than whatever is specified as\n> standard by the reference implementation, maybe it should be risen in\n> standard but I think it was assumed that the most common case would be\n> to include the root hash of some \"merklized\" structure.\n> My only argument against non-validated proof of publication is that in\n> the long run it will be very expensive since they will have to compete\n> with transactions that actually use the utxo, a feature that is more\n> valuable. But that's mostly speculation and doesn't imply the need for\n\nWell remember that my thinking re: UTXO is that we need to move to a\nsystem like TXO commitments where storing the entirety of the UTXO set\nfor all eternity is *not* required. Of course, that doesn't necessarily\nmean you can't have the advantages of UTXO commitments, but they need to\nbe limited in some reasonable way so that long-term storage requirements\ndo not grow without bound unreasonably. For example, having TXO\ncommitments with a bounded size committed UTXO set seems reasonable; old\nUTXO's can be dropped from the bounded sized set, but can still be spent\nvia the underlying TXO commitment mechanism.\n\n> any action against it. I would strongly opposed to against a\n> limitation on OP_RETURN at the protocol level (other than the block\n> size limit itself, that is) and wouldn't mind if they're removed from\n> isStandard. I didn't payed much attention to that and honestly I don't\n> care enough.\n>\n> Maybe this encourages miners to adopt their own policies, which could\n> be good for things like replace-by-fee, the rational policy for\n> miners, which I strongly support (combined with game theory can\n> provide \"instant\" transactions as you pointed out in another thread).\n> \n> Maybe the right approach to keep improving modularity and implement\n> different and configurable mining policies.\n\nLike I said the real issue is making it easy to get those !IsStandard()\ntransactions to the miners who are interested in them. The service bit\nflag I proposed + preferential peering - reserve, say, 50% of your\npeering slots for nodes advertising non-std tx relaying - is simple\nenough, but it is vulnerable to sybil attacks if done naively.\n\n> > All these methods have some overhead compared to just using OP_RETURN\n> > and thus cost more.\n> \n> I thought the consensus was that op_return was the right way to put\n> non-validated data in the chain, but limiting it in standard policies\n> doesn't seem consistent with that.\n\nRight, but there's also a lot of the community who thinks\nproof-of-publication applications are bad and should be discouraged. I\nargued before that the way OP_RETURN was being deployed didn't actually\ngive any reason to use it vs. other data encoding methods.\n\nUnfortunately underlying all this is a real ignorance about how Bitcoin\nactually works and what proof-of-publication actually is:\n\n    14-03-20.log:12:47 < gavinandresen> jgarzik: RE: mastercoin/OP_RETURN:\n    what's the current thinking on Best Way To Do It?  Seems if I was to do\n    it I'd just embed 20-byte RIPEMD160 hashes in OP_RETURN, and fetch the\n    real data from a DHT or website (or any-of-several websites).\n    Blockchain as reference ledger, not as data storage.\n\n> Peter Todd, I don't think you're being responsible or wise saying\n> nonsense like \"merged mined chains can be attacked for free\" and I\n> suggest that you prove your claims by attacking namecoin \"for free\",\n> please, enlighten us, how that's done?\n\nI think we're just going to have to agree to disagree on our\ninterpretations of the economics with regard to attacking merge-mined\nchains. Myself, I'm very, very wary of systems that have poor security\nagainst economically irrational attackers regardless of how good the\nsecurity is, in theory, against economically rational ones.\n\nAgain, what it comes down to in the end is that when I'm advising\nMastercoin, Counterparty, Colored Coins, etc. on how they should design\ntheir systems I know that if they do proof-of-publication on the Bitcoin\nblockchain, it may cost a bit more money than possible alternatives per\ntransaction, but the security is very well understood and robust. Fact\nis, these applications can certainly afford to pay the higher\ntransaction fees - they're far from the least economically valuable use\nof Blockchain space. Meanwhile the alternatives have, at best, much more\ndubious security properties and at worse no security at all.\n(announce/commit sacrifices is a great example of this, and very easy to\nunderstand)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000bbcc531d48bea8d67597e275b5abcff18e18f46266723e91\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/bd3215c5/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-22T20:12:20",
                "message_text_only": "On 3/22/14, Peter Todd <pete at petertodd.org> wrote:\n> Well remember that my thinking re: UTXO is that we need to move to a\n> system like TXO commitments where storing the entirety of the UTXO set\n> for all eternity is *not* required. Of course, that doesn't necessarily\n> mean you can't have the advantages of UTXO commitments, but they need to\n> be limited in some reasonable way so that long-term storage requirements\n> do not grow without bound unreasonably. For example, having TXO\n> commitments with a bounded size committed UTXO set seems reasonable; old\n> UTXO's can be dropped from the bounded sized set, but can still be spent\n> via the underlying TXO commitment mechanism.\n\nAlthough not having to download the whole blockchain to operate a\ntrust-less full node is theoretically possible it is not clear that\nthey will work in practice or would be accepted, and we certainly\ndon't have that now.\nSo I don't think future potential theoretical scalability improvements\nare solid arguments in favor of supporting proof of publication now.\n\n> Like I said the real issue is making it easy to get those !IsStandard()\n> transactions to the miners who are interested in them. The service bit\n> flag I proposed + preferential peering - reserve, say, 50% of your\n> peering slots for nodes advertising non-std tx relaying - is simple\n> enough, but it is vulnerable to sybil attacks if done naively.\n\nMy point is that this seems relevant to competing mining policies in general.\n\n> Right, but there's also a lot of the community who thinks\n> proof-of-publication applications are bad and should be discouraged. I\n> argued before that the way OP_RETURN was being deployed didn't actually\n> give any reason to use it vs. other data encoding methods.\n>\n> Unfortunately underlying all this is a real ignorance about how Bitcoin\n> actually works and what proof-of-publication actually is:\n\nI understand that proof of publication is not the same thing as\nregular timestamping, but requiring permanent storage in the\nblockchain is not the only way you can implement proof of publication.\nMark Friedenbach proposes this:\n\nStore hashes, or a hash root, and soft-fork that blocks are only\naccepted if (a) the data tree is provided, or (b) sufficient work is\nbuilt on it and/or sufficient time has passed\n\nThis way full nodes can ignore the published data until is sufficiently buried.\n\n> I think we're just going to have to agree to disagree on our\n> interpretations of the economics with regard to attacking merge-mined\n> chains. Myself, I'm very, very wary of systems that have poor security\n> against economically irrational attackers regardless of how good the\n> security is, in theory, against economically rational ones.\n\nThe attacker was of course economically irrational in my previous\nexample for which you didn't have any complain. So I think we can\nagree that a merged mined separated chain is more secure than a\nnon-merged mined separated chain and that attacking a merged mined\nchain is not free.\nBy not being clear on this you're indirectly promoting non-merged\nmined altchains as a better option than merged mined altchains, which\nis what I don't think is responsible on your part.\n\n> Again, what it comes down to in the end is that when I'm advising\n> Mastercoin, Counterparty, Colored Coins, etc. on how they should design\n> their systems I know that if they do proof-of-publication on the Bitcoin\n> blockchain, it may cost a bit more money than possible alternatives per\n> transaction, but the security is very well understood and robust. Fact\n> is, these applications can certainly afford to pay the higher\n> transaction fees - they're far from the least economically valuable use\n> of Blockchain space. Meanwhile the alternatives have, at best, much more\n> dubious security properties and at worse no security at all.\n> (announce/commit sacrifices is a great example of this, and very easy to\n> understand)\n\nI agree that we disagree on additional non-validated data in the main\nchain vs merged mined chains as the best way to implement additional\nfeatures.\nBut please, you don't need to spread and maintain existing myths about\nmerged mining to make your case. If you insist on doing it I will\nstart to think that the honesty of your arguments is not something\nimportant to you, and you just prefer to try to get people on your\nside by any means, which would be very disappointing."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-23T23:17:37",
                "message_text_only": "> > Right, but there's also a lot of the community who thinks\n> > proof-of-publication applications are bad and should be discouraged. I\n> > argued before that the way OP_RETURN was being deployed didn't actually\n> > give any reason to use it vs. other data encoding methods.\n> >\n> > Unfortunately underlying all this is a real ignorance about how Bitcoin\n> > actually works and what proof-of-publication actually is:\n> \n> I understand that proof of publication is not the same thing as\n> regular timestamping, but requiring permanent storage in the\n> blockchain is not the only way you can implement proof of publication.\n> Mark Friedenbach proposes this:\n> \n> Store hashes, or a hash root, and soft-fork that blocks are only\n> accepted if (a) the data tree is provided, or (b) sufficient work is\n> built on it and/or sufficient time has passed\n> \n> This way full nodes can ignore the published data until is sufficiently buried.\n> \n> > I think we're just going to have to agree to disagree on our\n> > interpretations of the economics with regard to attacking merge-mined\n> > chains. Myself, I'm very, very wary of systems that have poor security\n> > against economically irrational attackers regardless of how good the\n> > security is, in theory, against economically rational ones.\n> \n> The attacker was of course economically irrational in my previous\n> example for which you didn't have any complain. So I think we can\n> agree that a merged mined separated chain is more secure than a\n> non-merged mined separated chain and that attacking a merged mined\n> chain is not free.\n> By not being clear on this you're indirectly promoting non-merged\n> mined altchains as a better option than merged mined altchains, which\n> is what I don't think is responsible on your part.\n> \n\nI can't speak for Peter, but *I* am currently of the opinion that non-merged\nmined altchains using memory-hard proof-of-work are a far better option than\nsha-256 merged-mined altchains. This is not a popular position on this list,\nand I would like to respectfully disagree, but still collaborate on all the\nother things where bitcoin-core *is* the best-in-class code available.\n\nA truly 'distributed' system must support multiple alchains, and multiple \nproof-of-work hash algorithms, and probably support proof-of-stake as well.\n\nIf sha-256 is the only game in town the only advantage over the federal\nreserve is I can at least audit the code that controls the money supply,\nbut it's not in any way distributed if the hash power is concentrated\namong 5-10 major pools and 5-10 sha-256 asic vendors.\n\nI find it very irresponsible for Bitcoiners to on one hand extol the virtues\nof distributed systems and then in the same message claim any discussion\nabout alternate chains as 'off-topic'.\n\nIf bitcoin-core is for *distributed systems*, then all the different altcoins\nwith different hash algorithms should be viable topics for discussion.\n\n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-23T23:53:48",
                "message_text_only": "This isn't distributed-systems-development, it is bitcoin-development.\nDiscussion over chain parameters is a fine thing to have among people\nwho are interested in that sort of thing. But not here.\n\nOn 03/23/2014 04:17 PM, Troy Benjegerdes wrote:\n> I find it very irresponsible for Bitcoiners to on one hand extol the virtues\n> of distributed systems and then in the same message claim any discussion\n> about alternate chains as 'off-topic'.\n> \n> If bitcoin-core is for *distributed systems*, then all the different altcoins\n> with different hash algorithms should be viable topics for discussion."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-24T20:34:03",
                "message_text_only": "I think that's fair, so long as we limit bitcoin-development discussion to\nissues that are relevant to the owners of the hashrate and companies that\npay developer salaries.\n\nWhat I'm asking for is some honesty that Bitcoin is a centralized system\nand to stop arguing technical points on the altar of distributed/decentralized\nwhatever. It's pretty clear if you want decentralized you should go with \naltchains.\n\nI'm here because I want to sell corn for bitcoin, and I believe it will be\nmore profitable for me to do that with a bitcoin-blockchain-based system\nin which I have the capability to audit the code that executes the trade.\n\n\nOn Sun, Mar 23, 2014 at 04:53:48PM -0700, Mark Friedenbach wrote:\n> This isn't distributed-systems-development, it is bitcoin-development.\n> Discussion over chain parameters is a fine thing to have among people\n> who are interested in that sort of thing. But not here.\n> \n> On 03/23/2014 04:17 PM, Troy Benjegerdes wrote:\n> > I find it very irresponsible for Bitcoiners to on one hand extol the virtues\n> > of distributed systems and then in the same message claim any discussion\n> > about alternate chains as 'off-topic'.\n> > \n> > If bitcoin-core is for *distributed systems*, then all the different altcoins\n> > with different hash algorithms should be viable topics for discussion."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-24T20:57:14",
                "message_text_only": "On 03/24/2014 01:34 PM, Troy Benjegerdes wrote:\n> I'm here because I want to sell corn for bitcoin, and I believe it will be\n> more profitable for me to do that with a bitcoin-blockchain-based system\n> in which I have the capability to audit the code that executes the trade.\n\nA discussion over such a system would be on-topic. Indeed I have made my\nown proposals for systems with that capability in the past:\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/31322676/\n\nThere's no reason to invoke alts however. There are ways where this can\nbe done within the bitcoin ecosystem, using bitcoins:\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/32108143/\n\n> I think that's fair, so long as we limit bitcoin-development discussion to\n> issues that are relevant to the owners of the hashrate and companies that\n> pay developer salaries.\n> \n> What I'm asking for is some honesty that Bitcoin is a centralized system\n> and to stop arguing technical points on the altar of distributed/decentralized\n> whatever. It's pretty clear if you want decentralized you should go with \n> altchains.\n\nBitcoin is not a centralized system, and neither is its development. I\ndon't even know how to respond to that. Bringing up altchains is a total\nred herring.\n\nThis is *bitcoin*-development. Please don't make it have to become a\nmoderated mailing list."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-25T22:10:54",
                "message_text_only": "On Mon, Mar 24, 2014 at 01:57:14PM -0700, Mark Friedenbach wrote:\n> On 03/24/2014 01:34 PM, Troy Benjegerdes wrote:\n> > I'm here because I want to sell corn for bitcoin, and I believe it will be\n> > more profitable for me to do that with a bitcoin-blockchain-based system\n> > in which I have the capability to audit the code that executes the trade.\n> \n> A discussion over such a system would be on-topic. Indeed I have made my\n> own proposals for systems with that capability in the past:\n> \n> http://sourceforge.net/p/bitcoin/mailman/message/31322676/\n> \n> There's no reason to invoke alts however. There are ways where this can\n> be done within the bitcoin ecosystem, using bitcoins:\n> \n> http://sourceforge.net/p/bitcoin/mailman/message/32108143/\n> \n> > I think that's fair, so long as we limit bitcoin-development discussion to\n> > issues that are relevant to the owners of the hashrate and companies that\n> > pay developer salaries.\n> > \n> > What I'm asking for is some honesty that Bitcoin is a centralized system\n> > and to stop arguing technical points on the altar of distributed/decentralized\n> > whatever. It's pretty clear if you want decentralized you should go with \n> > altchains.\n> \n> Bitcoin is not a centralized system, and neither is its development. I\n> don't even know how to respond to that. Bringing up altchains is a total\n> red herring.\n> \n> This is *bitcoin*-development. Please don't make it have to become a\n> moderated mailing list.\n\nWhen I can pick up a miner at Best Buy and pay it off in 9 months I'll \nagree with you that bitcoin *might* be decentralized. Maybe there's a \nchance this *will* happen eventually, but right now we have a couple of\nmining cartels that control most of the hashrate.\n\nThere are plenty of interesting alt-hash-chains for which mass produced,\ngeneral purpose (or gpgpu-purpose) hardware exists and is in high volume\nmass production."
            },
            {
                "author": "kjj",
                "date": "2014-03-26T01:09:01",
                "message_text_only": "Troy Benjegerdes wrote:\n> Mark Friedenbach wrote:\n>> Bitcoin is not a centralized system, and neither is its development. I\n>> don't even know how to respond to that. Bringing up altchains is a total\n>> red herring.\n>>\n>> This is *bitcoin*-development. Please don't make it have to become a\n>> moderated mailing list.\n> When I can pick up a miner at Best Buy and pay it off in 9 months I'll\n> agree with you that bitcoin *might* be decentralized. Maybe there's a\n> chance this *will* happen eventually, but right now we have a couple of\n> mining cartels that control most of the hashrate.\n>\n> There are plenty of interesting alt-hash-chains for which mass produced,\n> general purpose (or gpgpu-purpose) hardware exists and is in high volume\n> mass production.\nDecentralized doesn't mean \"everyone is doing it\", it means \"no one can \nstop you from doing it\".  Observe bitcoin development.  A few people do \nthe bulk of the work, a bunch more people (like me) do work ranging from \nminor to trivial, and millions do nothing.  And yet, it is still totally \ndecentralized because no one can stop anyone from making whatever \nchanges they want.\n\nSo it is also with mining.  The world overall may make it impractical, \nperhaps even foolish, for you to fire up your CPU and mine solo, but no \none is stopping you, and more to the point, no one is capable of \nstopping you.  There is no center from which you must ask permission.\n\nOn moderation, I note that moderation can also be done in a \ndecentralized fashion.  I offer this long overdue example:\n\n:0\n* ^From.*hozer at hozed.org\n/dev/null"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-22T15:08:36",
                "message_text_only": "On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:\n> There's been a lot of recent hoopla over proof-of-publication, with the\n> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n> the last minute prior to the 0.9 release. Secondly I noticed a\n> overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken\n> into account, making it possible to broadcast unminable transactions and\n> bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG\n> outputs given that the sigops limit and the way they use up a fixed 20\n> sigops per op makes them hard to do fee calculations for. They also make\n> it easy to bloat the UTXO set, potentially a bad thing. This would of\n> course require things using them to change. Currently that's just\n> Counterparty, so I gave them the heads up in my email.\n\nI've spend some time looking at the Datacoin code, and I've come to the \nconclusion the next copycatcoin I release will have an explicit 'data' \nfield with something like 169 bytes (a bakers dozen squared), which will \nadd 1 byte to each transaction if unused, and provide a small, but usable\ndata field for proof of publication. As a new coin, I can also do a\nhardfork that increases the data size limit much easier if there is a\ncompelling reason to make it bigger.\n\nI think this will prove to be a much more reliable infrastructure for \nproof of publication than various hacks to overcome 40 byte limits with\nBitcoin.\n\nI am disclosing this here so the bitcoin 1% has plenty of time to evaluate\nthe market risk they face from the 40 byte limit, and put some pressure to\nimplement some of the alternatives Todd proposes.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-22T17:04:30",
                "message_text_only": "Please, by all means: ignore our well-reasoned arguments about\nexternalized storage and validation cost and alternative solutions.\nPlease re-discover how proof of publication doesn't require burdening\nthe network with silly extra data that must be transmitted, kept, and\nvalidated from now until the heat death of the universe. Your failure\nwill make my meager bitcoin holdings all the more valuable! As despite\npersistent assertions to the contrary, making quality software freely\navailable at zero cost does not pay well, even in finance. You will not\nfind core developers in the Bitcoin 1%.\n\nPlease feel free to flame me back, but off-list. This is for *bitcoin*\ndevelopment.\n\nOn 03/22/2014 08:08 AM, Troy Benjegerdes wrote:\n> On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:\n>> There's been a lot of recent hoopla over proof-of-publication, with the\n>> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n>> the last minute prior to the 0.9 release. Secondly I noticed a\n>> overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken\n>> into account, making it possible to broadcast unminable transactions and\n>> bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG\n>> outputs given that the sigops limit and the way they use up a fixed 20\n>> sigops per op makes them hard to do fee calculations for. They also make\n>> it easy to bloat the UTXO set, potentially a bad thing. This would of\n>> course require things using them to change. Currently that's just\n>> Counterparty, so I gave them the heads up in my email.\n> \n> I've spend some time looking at the Datacoin code, and I've come to the \n> conclusion the next copycatcoin I release will have an explicit 'data' \n> field with something like 169 bytes (a bakers dozen squared), which will \n> add 1 byte to each transaction if unused, and provide a small, but usable\n> data field for proof of publication. As a new coin, I can also do a\n> hardfork that increases the data size limit much easier if there is a\n> compelling reason to make it bigger.\n> \n> I think this will prove to be a much more reliable infrastructure for \n> proof of publication than various hacks to overcome 40 byte limits with\n> Bitcoin.\n> \n> I am disclosing this here so the bitcoin 1% has plenty of time to evaluate\n> the market risk they face from the 40 byte limit, and put some pressure to\n> implement some of the alternatives Todd proposes.\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-22T19:08:25",
                "message_text_only": "On Sat, Mar 22, 2014 at 10:08:36AM -0500, Troy Benjegerdes wrote:\n> On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:\n> > There's been a lot of recent hoopla over proof-of-publication, with the\n> > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n> > the last minute prior to the 0.9 release. Secondly I noticed a\n> > overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken\n> > into account, making it possible to broadcast unminable transactions and\n> > bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG\n> > outputs given that the sigops limit and the way they use up a fixed 20\n> > sigops per op makes them hard to do fee calculations for. They also make\n> > it easy to bloat the UTXO set, potentially a bad thing. This would of\n> > course require things using them to change. Currently that's just\n> > Counterparty, so I gave them the heads up in my email.\n> \n> I've spend some time looking at the Datacoin code, and I've come to the \n> conclusion the next copycatcoin I release will have an explicit 'data' \n> field with something like 169 bytes (a bakers dozen squared), which will \n> add 1 byte to each transaction if unused, and provide a small, but usable\n> data field for proof of publication. As a new coin, I can also do a\n> hardfork that increases the data size limit much easier if there is a\n> compelling reason to make it bigger.\n> \n> I think this will prove to be a much more reliable infrastructure for \n> proof of publication than various hacks to overcome 40 byte limits with\n> Bitcoin.\n> \n> I am disclosing this here so the bitcoin 1% has plenty of time to evaluate\n> the market risk they face from the 40 byte limit, and put some pressure to\n> implement some of the alternatives Todd proposes.\n\nLol! Granted, I guess I should \"disclose\" that I'm working on tree\nchains, which just improve the scalability of blockchains directly. I'm\nthink tree-chains could be implemented as a soft-fork; if applied to\nBitcoin the datacoin 1% might face market risk.  :P\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000bbcc531d48bea8d67597e275b5abcff18e18f46266723e91\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/fad79c8c/attachment.sig>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-23T22:37:52",
                "message_text_only": "On Sat, Mar 22, 2014 at 03:08:25PM -0400, Peter Todd wrote:\n> On Sat, Mar 22, 2014 at 10:08:36AM -0500, Troy Benjegerdes wrote:\n> > On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:\n> > > There's been a lot of recent hoopla over proof-of-publication, with the\n> > > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at\n> > > the last minute prior to the 0.9 release. Secondly I noticed a\n> > > overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken\n> > > into account, making it possible to broadcast unminable transactions and\n> > > bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG\n> > > outputs given that the sigops limit and the way they use up a fixed 20\n> > > sigops per op makes them hard to do fee calculations for. They also make\n> > > it easy to bloat the UTXO set, potentially a bad thing. This would of\n> > > course require things using them to change. Currently that's just\n> > > Counterparty, so I gave them the heads up in my email.\n> > \n> > I've spend some time looking at the Datacoin code, and I've come to the \n> > conclusion the next copycatcoin I release will have an explicit 'data' \n> > field with something like 169 bytes (a bakers dozen squared), which will \n> > add 1 byte to each transaction if unused, and provide a small, but usable\n> > data field for proof of publication. As a new coin, I can also do a\n> > hardfork that increases the data size limit much easier if there is a\n> > compelling reason to make it bigger.\n> > \n> > I think this will prove to be a much more reliable infrastructure for \n> > proof of publication than various hacks to overcome 40 byte limits with\n> > Bitcoin.\n> > \n> > I am disclosing this here so the bitcoin 1% has plenty of time to evaluate\n> > the market risk they face from the 40 byte limit, and put some pressure to\n> > implement some of the alternatives Todd proposes.\n> \n> Lol! Granted, I guess I should \"disclose\" that I'm working on tree\n> chains, which just improve the scalability of blockchains directly. I'm\n> think tree-chains could be implemented as a soft-fork; if applied to\n> Bitcoin the datacoin 1% might face market risk.  :P\n\nSoft-fork tree chains with reasonable data/memo/annotation storage would be\nextremely interesting. The important question, however, is how does one \nbuild a *business* around such a thing, including getting paid as a developer.\n\nWhat I find extremely relevant to the **bitcoin-dev** list are discussions\nabout how to motivate the people who own the hashrate and bulk of the coins\n(aka, the bitcoin 1%) to PAY DEVELOPERS, and thus it is good marketing FOR\nBITCOIN DEVELOPERS to remind the people who profit from our efforts they need\nto make it profitable for developers to work on bitcoin.\n\nIf it's more profitable for innovative developers to premine and release\n$NEWCOIN-blockchain than it is to work on Bitcoin-blockchain, is that a valid\ndiscussion for this list? Or do you just want to stick your heads in the sand\nwhile VC's look to disrupt Bitcoin?"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-03-24T21:17:13",
                "message_text_only": "On Saturday, March 22, 2014 8:47:02 AM Peter Todd wrote:\n> To make a long story short, it was soon suggested that Bitcoin Core be\n> forked - the software, not the protocol - and miners encouraged to\n> support it.\n\nThere's been at least one public miner-oriented fork of Bitcoin Core since 0.7 \nor earlier. Miners still running vanilla Bitcoin Core are neglecting their \nduty to the community. That being said, the more forks, the better for \ndecentralisation.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Handling miner adoption gracefully for embedded consensus systems via double-spending/replace-by-fee",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Troy Benjegerdes",
                "kjj",
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Mark Friedenbach"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 39288
        }
    },
    {
        "title": "[Bitcoin-development] Fake PGP key for Gavin",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-22T17:03:03",
                "message_text_only": "In case you didn't see this yet,\n\nhttp://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html\n\nIf you're using PGP to verify Bitcoin downloads, it's very important that\nyou check you are using the right key. Someone seems to be creating fake\nPGP keys that are used to sign popular pieces of crypto software, probably\nto make a MITM attack (e.g. from an intelligence agency) seem more\nlegitimate.\n\nI think the Mac DMG's of Core are signed for Gatekeeper, but do we codesign\nthe Windows binaries? If not it'd be a good idea, if only because AV\nscanners learn key reputations to reduce false positives. Of course this is\nnot a panacea, and Linux unfortunately does not support X.509 code signing,\nbut having extra signing can't really hurt.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/c95184e6/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-22T17:33:02",
                "message_text_only": "On Sat, Mar 22, 2014 at 1:03 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> do we codesign the Windows binaries?\n\n\nYes, the -setup.exe installers are Authenticode (or whatever Microsoft is\ncalling that these days) code-signed.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/c5ac3e26/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-22T18:21:53",
                "message_text_only": "On Sat, Mar 22, 2014 at 06:03:03PM +0100, Mike Hearn wrote:\n> In case you didn't see this yet,\n> \n> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html\n> \n> If you're using PGP to verify Bitcoin downloads, it's very important that\n> you check you are using the right key. Someone seems to be creating fake\n> PGP keys that are used to sign popular pieces of crypto software, probably\n> to make a MITM attack (e.g. from an intelligence agency) seem more\n> legitimate.\n\nNote that Bitcoin source and binary downloads are protected by both the\nPGP WoT and the certificate authority PKI system. The binaries are\nhosted on bitcoin.org, which is https and protected by a the PKI system,\nand the source code is hosted on github, again, https protected. A MITM\nattack would need to compromise the PKI system as well, at least\nprovided users aren't fooled into downloading over http.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000657de91df7a64d25adfd3ff117bc30d00f5aa3065894f4a5\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/ac41c6e2/attachment.sig>"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-03-23T00:59:50",
                "message_text_only": "Am 22.03.2014 18:03, schrieb Mike Hearn:\n> In case you didn't see this yet,\n> \n> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html\n> \n> If you're using PGP to verify Bitcoin downloads, it's very important\n> that you check you are using the right key. Someone seems to be creating\n> fake PGP keys that are used to sign popular pieces of crypto software,\n> probably to make a MITM attack (e.g. from an intelligence agency) seem\n> more legitimate.\n\n>From the user's perspective: In the beginning I found it difficult to\nfind the keys. At last I have made this side for documentation:\n\nhttps://www.olivere.de/blog/archives/2013/06/02/install_bitcoin_client/\n\nOkay, is outdated meanwhile ...\n\nNormally people fetch the keys by key-id from a well known key server.\nNot because they are paranoid, but because it is the most convenient\nmethod under Linux.\n\nA Google search for Gavin+Andresen+gpg brings me herein:\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/30551147/\n\nKey-Id?\n\nNevertheless, I'm glad that you guys signed anything. That makes me\nsleep better. I really check this.\n\n- oliver\n\nGPG: https://olivere.de/gpg"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-23T22:12:21",
                "message_text_only": "On Sat, Mar 22, 2014 at 06:03:03PM +0100, Mike Hearn wrote:\n> In case you didn't see this yet,\n> \n> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html\n> \n> If you're using PGP to verify Bitcoin downloads, it's very important that\n> you check you are using the right key. Someone seems to be creating fake\n> PGP keys that are used to sign popular pieces of crypto software, probably\n> to make a MITM attack (e.g. from an intelligence agency) seem more\n> legitimate.\n\nI find it more likely that fake PGP keys are from corporate industrial \nespionage and/or organized crime outfits. Intelligence agencies will stick\nto compromised X509, network cards, and binary code blobs.\n\nBesides, why would an intelligence agency want your bitcoin when they can \njust intercept ASIC miners and make their own?\n \n> I think the Mac DMG's of Core are signed for Gatekeeper, but do we codesign\n> the Windows binaries? If not it'd be a good idea, if only because AV\n> scanners learn key reputations to reduce false positives. Of course this is\n> not a panacea, and Linux unfortunately does not support X.509 code signing,\n> but having extra signing can't really hurt.\n\nUhhmm, real operating system use package managers with PGP instead of pre-\ncompromised X.509 nonsense. https://wiki.debian.org/SecureApt\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "The Doctor",
                "date": "2014-03-24T19:44:24",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn 03/23/2014 03:12 PM, Troy Benjegerdes wrote:\n\n> I find it more likely that fake PGP keys are from corporate\n> industrial espionage and/or organized crime outfits. Intelligence\n> agencies will stick to compromised X509, network cards, and binary\n> code blobs.\n\nWe're seeing the same thing happen to a couple of developers active in\nthe censorship circumvention problem space as well (though it's not\nfor the first time it's happened).\n\n> Besides, why would an intelligence agency want your bitcoin when\n> they can just intercept ASIC miners and make their own?\n\nPerhaps they have other motives for attempting a cybil attack against\ndevelopers than trying to acquire Bitcoins.  Say, by making it easier\nto subtitute alternate versions which are instrumented to make the\nusers easier to spy upon and later take down?\n\n- -- \nThe Doctor [412/724/301/703] [ZS]\nDeveloper, Project Byzantium: http://project-byzantium.org/\n\nPGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1\nWWW: https://drwho.virtadpt.net/\n\n\"The enemies know the system. The allies do not.\" --Jay Jacobs\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEAREKAAYFAlMwixgACgkQO9j/K4B7F8FQEACfQG8+5rYDuJd+6P50Bgc8RRfU\nQ28AoNdyUbR2k05wTka30OcUUQNK5FcN\n=IeMU\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Fake PGP key for Gavin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Mike Hearn",
                "Peter Todd",
                "Oliver Egginger",
                "Gavin Andresen",
                "The Doctor"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 6848
        }
    },
    {
        "title": "[Bitcoin-development] Tree-chains preliminary summary",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-03-25T12:28:51",
                "message_text_only": "On Sat, Mar 22, 2014 at 12:43:34PM -0700, Mark Friedenbach wrote:\n> Btw, any chance we could get a summary description of tree-chains\n> posted to bitcoin-development?\n\nSure:\n\nIntroduction\n============\n\nBitcoin doesn't scale. There's a lot of issues at hand here, but the\nmost fundemental of them is that to create a block you need to update\nthe state of the UTXO set, and the way Bitcoin is designed means that\nupdating that state requires bandwidth equal to all the transaction\nvolume to keep up with the changes to what set. Long story short, we get\nO(n^2) scaling, which is just plain infeasible.\n\nSo let's split up the transaction volume so every individual miner only\nneeds to keep up with some portion. In a rough sense that's what\nalt-coins do - all the tipping microtransactions on Doge never have to\nhit the Bitcoin blockchain for instance, reducing pressure on the\nlatter. But moving value between chains is inconvenient; right now\nmoving value requires trusted third parties. Two-way atomic chain\ntransfers does help here, but as recent discussions on the topic showed\nthere's all sorts of edge cases with reorganizations that are tricky to\nhandle; at worst they could lead to inflation.\n\nSo what's the underlying issue there? The chains are too independent.\nEven with merge-mining there's no real link between one chain and\nanother with regard to the order of transactions. Secondly merge-mining\nsuffers from 51% attacks if the chain being merge-mined doesn't have a\nmajority of total hashing power... which kinda defeats the point if\nwe're worried about miner scalability.\n\n\nBlocks and the TXO set as a binary radix tree\n=============================================\n\nSo how can we do better? Start with the \"big picture\" idea and take the\nlinear blockchain and turn it into a tree:\n\n           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n     \u250c\u2500\u2534\u2500\u2510   \u250c\u2500\u2534\u2500\u2510   \u250c\u2500\u2534\u2500\u2510   \u250c\u2500\u2534\u2500\u2510\n    \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510 \u250c\u2534\u2510\n\nObviously if we could somehow split up the UTXO set such that individual\nminers/full nodes only had to deal with subsets of this tree we could\nsignificantly reduce the bandwidth that any one miner would need to\nprocess. Every transaction output would get a unique identifier, say\ntxoutid=H(txout) and we put those outputs in blocks appropriately.\n\nWe can't just wave a magic wand and say that every block has the above\nstructure and all miners co-ordinate to generate all blocks in one go.\nInstead we'll do something akin to merge mining. Start with a linear\nblockchain with ten blocks. Arrows indicate hashing:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4 \u21fd a5 \u21fd a6 \u21fd a7 \u21fd a8 \u21fd a9\n\nThe following data structure could be the block header in this scheme.\nWe'll simplify things a bit and make up our own; obviously with some\nmore effort the standard Satoshi structures can be used too:\n\n    struct BlockHeader:\n        uint256 prevBlockHash\n        uint256 blockContentsHash\n        uint256 target\n        uint256 nonce\n        uint time\n\nFor now we'll say this is a pure-proof-of-publication chain, so our\nblock contents are very simple:\n\n    struct BlockContents:\n        uint256 merkleRoot\n\nAs usual the PoW is valid if H(blockHeader) < blockHeader.target. Every\nblock creates new txouts, and the union of all such txouts is the txout\nset. As shown previously(1) this basic proof-of-publication\nfunctionality is sufficient to build a crypto-currency even without\nactually validating the contents of the so-called transaction outputs.\n\nThe scalability of this sucks, so let's add two more chains below the\nroot to start forming a tree. For fairness we'll only allow miners to\neither mine a, a+b, or a+c; attempting to mine a block with both the b\nand c chains simultaneously is not allowed.\n\n    struct BlockContents:\n        uint256 childBlockHash # may be null\n        bool childSide # left or right\n        uint256 merkleRoot\n\nFurthermore we shard the TXO space by defining txoid = H(txout) and\nallowing any txout in chain a, and only txouts with LSB=0 in b, LSB=1 in\nc; the beginning of a binary radix tree. With some variance thrown in we\nget the following:\n\n       b0 \u21fd\u21fd b1 \u21fd\u21fd\u21fd\u21fd\u21fd b2 \u21fd b3 \u21fd b4 \u21fd b5 \u21fd b6 \u21fd b7 \u21fd b8\n                     \u2199                        \u2199\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd a4 \u21fd a5 \u21fd a6 \u21fd a7 \u21fd a8\n           \u2196    \u2196              \u2196         \u2196         \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd c4 \u21fd c5 \u21fd c6 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd c7\n\n\nWe now have three different versions of the TXO set: \u2211a, \u2211a + \u2211b, and\n\u2211a+\u2211c. Each of these versions is consistent in that for a given txoutid\nprefix we can achieve consensus over the contents of the TXO set. Of\ncourse, this definition is recursive:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd a4 \u21fd a5 \u21fd a6 \u21fd a7 \u21fd a8\n           \u2196    \u2196              \u2196         \u2196         \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd c4 \u21fd c5 \u21fd c6 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd c7\n               \u2196         \u2196         \u2196    \u2196              \u2196\n           d0 \u21fd d1 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd d2 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd d3 \u21fd d4 \u21fd\u21fd\u21fd d5 \u21fd\u21fd\u21fd\u21fd d6\n\nUnicode unfortunately lacks 3D box drawing at present, so I've only\nshown left-sided child chains.\n\n\nHerding the child-chains\n========================\n\nIf all we were doing was publishing data, this would suffice. But what\nif we want to syncronize our actions? For instance, we may want a new\ntxout to only be published in one chain if the corresponding txout in\nanother is marked spent. What we want is a reasonable rule for\nchild-chains to be invalidated when their parents are invalidated so as\nto co-ordinate actions across distant child chains by relying on the\nexistance of their parents.\n\nWe start by removing the per-chain difficulties, leaving only a single\nmaster proof-of-work target. Solutions less than target itself are\nconsidered valid in the root chain, less than the target << 1 in the\nroot's children, << 2 in the children's children etc. In children that\nmeans the header no longer contains a time, nonce, or target; the values\nin the root block header are used instead:\n\n    struct ChildBlockHeader:\n        uint256 prevChildBlockHash\n        uint256 blockContentsHash\n\nFor a given chain we always choose the one with the most total work. But\nto get our ordering primitive we'll add a second, somewhat brutal, rule:\nParent always wins.\n\nWe achieve this moving the child block header into the parent block\nitself:\n\n    struct BlockContents:\n       ChildBlockHeader childHeader # may be null (zeroed out)\n       bool childSide # left or right\n       bytes txout\n\nLet's look at how this works. We start with a parent and a child chain:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3\n           \u2196         \u2196\n       b0 \u21fd b1 \u21fd b2 \u21fd b3 \u21fd b4 \u21fd b5\n\nFirst there is the obvious scenario where the parent chain is\nreorganized. Here our node learns of a2 \u21fd a3' \u21fd a4':\n\n                 \u21fd a3' \u21fd a4'\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd X\n           \u2196         \u2196\n       b0 \u21fd b1 \u21fd b2 \u21fd b3 \u21fd X\n\nBlock a3 is killed, resulting in the orphaning of b3, b4, and b5:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3' \u21fd a4'\n           \u2196\n       b0 \u21fd b1 \u21fd b2\n\nThe second case is when a parent has a conflicting idea about what the\nchild chian is. Here our node receives block a5, which has a conflicting\nidea of what child b2 is:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3' \u21fd a4' \u21fd a5\n           \u2196                     \u2196\n       b0 \u21fd b1 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b2'\n               \u21fd b2 \u21fd X\n\nAs the parent always wins, even multiple blocks can get killed off this\nway:\n\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4\n           \u2196\n       b0 \u21fd b1 \u21fd b2 \u21fd b3 \u21fd b4 \u21fd b5 \u21fd b6 \u21fd b7\n\nto:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4 \u21fd a5\n           \u2196                   \u2196\n       b0 \u21fd b1 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b2'\n               \u21fd b2 \u21fd b3 \u21fd b4 \u21fd b5 \u21fd X\n\nThis behavior is easier to understand if you say instead that the node\nlearned about block b2', which had more total work than b2 as the sum\ntotal of work done in the parent chain in blocks specifying the that\nparticular child chain is considered before comparing the total work\ndone in only the child chain.\n\nIt's important to remember that the parent blockchain has and validates\nboth childrens' block headers; it is not possible to mine a block with\nan invalid secret of child headers. For instance with the following:\n\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4\n           \u2196         \u2196    \u2196\n       b0 \u21fd b1 \u21fd b2 \u21fd b3 \u21fd b4 \u21fd b5 \u21fd b6 \u21fd b7\n\nI can't mine block a5 that says following b2 is b2' in an attempt to\nkill off b2 through b7.\n\n\nToken transfer with tree-chains\n===============================\n\nHow can we make use of this? Lets start with a simple discrete token\ntransfer system. Transactions are simply:\n\n    struct Transaction:\n        uint256 prevTxHash\n        script prevPubKey\n        script scriptSig\n        uint256 scriptPubKeyHash\n\nWe'll say transactions go in the tree-chain according to their\nprevTxHash, with the depth in the tree equal to the depth of the\nprevious output. This means that you can prove an output was created by\nthe existance of that transaction in the block with prefix matching\nH(tx.prevTxHash), and you can prove the transaction output is unspent by\nthe non-existance of a transaction in the block with prefix matching\nH(tx).\n\nWith our above re-organization rule everything is consistent too: if\nblock b_i contains tx1, then the corresponding block c_j can contain a\nvalid tx2 spending tx1 provided that c_j depends on a_p and there is a\npath from a_p to b_(i+k). Here's an example, starting with tx1 in c2:\n\n       b0 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b1\n                \u2199\n    a0 \u21fd a1 \u21fd a2\n           \u2196\n       c0 \u21fd c1 \u21fd c2\n\nBlock b2 below can't yet contain tx2 because there is no path:\n\n       b0 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b1 \u21fd b2\n                \u2199\n    a0 \u21fd a1 \u21fd a2\n           \u2196\n       c0 \u21fd c1 \u21fd c2\n\nHowever now c3 is found, whose PoW solution was also valid for a3:\n\n       b0 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b1 \u21fd b2\n                \u2199\n    a0 \u21fd a1 \u21fd a2 \u21fd a3\n           \u2196         \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3\n\nNow b3 can contain tx2, as b3 will also attempt to create a4, which\ndepends on a3:\n\n       b0 \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd b1 \u21fd b2 \u21fd b3\n                \u2199\n    a0 \u21fd a1 \u21fd a2 \u21fd a3\n           \u2196         \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3\n\nNow that a3 exists, block c2 can only be killed if a3 is, which would\nalso kill b3 and thus destroy tx2.\n\n\nProving transaction output validity in a token transfer system\n==============================================================\n\nHow cheap is it to prove the entire history of a token is valid from\ngenesis?  Perhaps surprisingly, without any cryptographic moon-math the\ncost is only linear!\n\nRemember that a transaction in a given chain has committed to the chain\nthat it can be spent in. If Alice is to prove to Bob that the output she\ngave him is valid, she simply needs to prove that for every transaction\nin the histroy of the token the token was created, remained unspent,\nthen finally was spent. Proving a token remained unspent between blocks\nb_n and b_m is trivially possible in linear size. Once the token is\nspent nothing about blocks beyond b_m is required. Even if miners do not\nvalidate transactions at all the proof size remains linear provided\nblocks themselves have a maximum size - at worst the proof contains some\ninvalid transactions that can be shown to be false spends.\n\nWhile certainly inconvenient, it is interesting how such a simple system\nappears to in theory scale to unlimited numbers of transactions and with\nan appropriate exchange rate move unlimited amounts of value. A possible\nmodel would be for the the tokens themselves to have power of two\nvalues, and be split and combined as required.\n\n\nThe lost data problem\n=====================\n\nThere is however a catch: What happens when blocks get lost? Parent\nblocks only contain their childrens' headers, not the block contents.\nAt some point the difficulty of producing a block will drop sufficiently\nfor malicious or accidental data loss to be possible. With the \"parent\nchain wins\" rule it must be possible to recover from that event for\nmining on the child to continue.\n\nConcretely, suppose you have tx1 in block c2, which can be spent on\nchain b. The contents of chain a is known to you, but the full contents\nof chain b are unavailable:\n\n        b0 \u21fd b1      (b)  (b)\n           \u2199         \u2199    \u2199\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4 \u21fd a5\n                \u2196              \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3 \u21fd c4 \u21fd c5\n\nBlocks a3 and a4 are known to have children on b, but the contents of\nthose children are unavailable. We can define some ratio of unknown to\nknown blocks that must be proven for the proof to be valid. Here we\nshow a 1:1 ratio:\n\n                \u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\u21fd\n        b0 \u21fd b1      (b)  (b)   b2 \u21fd b3 \u21fd b4 \u21fd b5 \u21fd b6 \u21fd b7\n           \u2199         \u2199    \u2199         \u2199         \u2199    \u2199\n    a0 \u21fd a1 \u21fd a2 \u21fd a3 \u21fd a4 \u21fd a5 \u21fd a6 \u21fd a7 \u21fd a8 \u21fd a9\n                \u2196              \u2196         \u2196\n       c0 \u21fd c1 \u21fd c2 \u21fd c3 \u21fd c4 \u21fd c5 \u21fd c6 \u21fd c7 \u21fd c8 \u21fd c9\n\n\nThe proof of now shows that while a3 and a4 has b-side blocks, by the\ntime you reach b6 those two lost blocks were in the minority. Of course\na real system needs to be careful that mining blocks and then discarding\nthem isn't a profitably way to create coins out of thin air - ratios\nwell in excess of 1:1 are likely to be required.\n\n\nChallenge-response resolution\n=============================\n\nAnother idea is to say if the parent blockchain's contents are known we\ncan insert a challenge into it specifying that a particular child block\nbe published verbatim in the parent. Once the challenge is published\nfurther parent blocks may not reference that children on that side until\neither the desired block is re-republished or some timeout is reached.\nIf the timeout is reached, mining backtracks to some previously known\nchild specified in the challenge. In the typical case the block is known\nto a majority of miners, and is published, essentially allowing new\nminers to force the existing ones to \"cough up\" blocks they aren't\npublishing and allow the new ones to continue mining. (obviously some\ncare needs to be taken with regard to incentives here)\n\nWhile an attractive idea, this is our first foray into moon math.\nSuppose such a challenge was issued in block a2, asking for the contents\nof b1 to be published. Meanwhile tx1 is created in block c3, and can\nonly be spent on a b-side chain:\n\n        b0 \u21fd b1\n           \u2199\n    a0 \u21fd a1 \u21fd (a2) \u21fd a3\n                       \u2196\n         c0 \u21fd c1 \u21fd c2 \u21fd c3\n\nThe miners of the b-chain can violate the protocol by mining a4/b1',\nwhere b1' appears to contain valid transaction tx2:\n\n\n        b0 \u21fd b1              b1'\n           \u2199                \u2199\n    a0 \u21fd a1 \u21fd (a2) \u21fd a3 \u21fd a4\n                       \u2196\n         c0 \u21fd c1 \u21fd c2 \u21fd c3\n\nA proof of tx2 as valid payment would entirely miss fact that the\nchallenge was published and thus not know that b1' was invalid. While\nI'm sure the reader can come up with all kinds of complex and fragile\nway of proving fraud to cause chain a to be somehow re-organized, what\nwe really want is some sub-linear proof of honest computation.  Without\ngetting into details, this is probably possible via some flavor of\nsub-linear moon-math proof-of-execution. But this paper is too long\nalready to start getting snarky.\n\n\nBeyond token transfer systems\n=============================\n\nWe can extend our simple one txin, one txout token transfer transactions\nwith merkle (sum) trees. Here's a rough sketch of the concept:\n\n    input #1\u2500\u2510   \u250c\u2500output #1\n             \u251c\u2510 \u250c\u2524\n    input #2\u2500\u2518\u2502 \u2502\u2514\u2500output #2\n              \u251c\u2500\u2524\n    input #3\u2500\u2510\u2502 \u2502\u250c\u2500output #3\n             \u251c\u2518 \u2514\u2524\n    input #4\u2500\u2518   \u2514\u2500output #4\n\nWhere previously a transaction committed to a specific transaction\noutput, we can make our transactions commit to a merkle-sum-tree of\ntransaction outputs. To then redeem a transaction output you prove that\nenough prior outputs were spend to add up to the new output's value. The\nentire process can happen incrementally without any specific\nco-operation between miners on different parts of the chain, and inputs\nand outputs can come from any depth in the tree provided that care is\ntaken to ensure that reorganization is not profitable.\n\nLike the token transfer system proving a given output is valid has cost\nlinear with history. However we can improve on that using\nnon-interactive proof techniques. For instance in the linear token\ntransfer example the history only needs to be proven to a point where\nthe transaction fees are higher than the value of the output. (easiest\nwhere the work required to spend a txout of a given value is well\ndefined) A similar approach can be easily taken with the\ndirected-acyclic-graph of mutliple-input-output transactions. Secondly\nnon-interactive proof techniques can also be used, again out of the\nscope of this already long preliminary paper.\n\n\n1) \"Disentangling Crypto-Coin Mining: Timestamping,\n   Proof-of-Publication, and Validation\",\n   http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg03307.html\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000002fd949770524eea54446adb70603a90a4c493d345f890e04\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5368d5f1/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-25T12:45:00",
                "message_text_only": "On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> Bitcoin doesn't scale. There's a lot of issues at hand here, but the\n> most fundemental of them is that to create a block you need to update\n> the state of the UTXO set, and the way Bitcoin is designed means that\n> updating that state requires bandwidth equal to all the transaction\n> volume to keep up with the changes to what set. Long story short, we get\n> O(n^2) scaling, which is just plain infeasible.\n>\n\nWe have a fundamental disagreement here.\n\nIf you go back and read Satoshi's original thoughts on scaling, it is clear\nthat he imagined tens of thousands of mining nodes and hundreds of millions\nof lightweight SPV users.\n\nScaling is a problem if every person is a fully validating node; then,\nindeed, you get an O(n^2) problem.  Which can be solved by extending some\ntentative trust to your peers, but lets put all those possible solutions\naside.\n\nGiven tens of thousands of fully validating nodes, you get O(m*n), where m\nis the number of fully validating peers and is a large constant (10s of\nthousands).\n\nWe don't know how large m can or will be; we have only just started to\nscale up.\n\n\"Bitcoin doesn't scale\" is pure FUD. It might not scale in exactly the way\nyou want, but it WILL scale.\n\n-- \n--\nGavin Andresen\nChief Scientist, Bitcoin Foundation\nhttps://www.bitcoinfoundation.org/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5c1439bf/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-25T13:49:18",
                "message_text_only": "On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:\n> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the\n> > most fundemental of them is that to create a block you need to update\n> > the state of the UTXO set, and the way Bitcoin is designed means that\n> > updating that state requires bandwidth equal to all the transaction\n> > volume to keep up with the changes to what set. Long story short, we get\n> > O(n^2) scaling, which is just plain infeasible.\n> >\n> \n> We have a fundamental disagreement here.\n> \n> If you go back and read Satoshi's original thoughts on scaling, it is clear\n> that he imagined tens of thousands of mining nodes and hundreds of millions\n> of lightweight SPV users.\n\nYeah, about that...\n\nhttps://blockchain.info/pools\n\nFor someone with 'Chief Scientist' as their job title, I'm surprised you\nthink so little of hard evidence and so much of idol worshipping.\n\n\nP.S. A year or so ago you complained that if I cared so much about\ndecentralization, I should make P2Pool better. Your homework: What do\ntree-chains and Andrew Miller's non-outsourcable puzzles(1) have to do\nwith that? What about the cube-square law? And why don't I think TXO\ncommitments solve the blocksize problem?\n\n1) https://bitcointalk.org/index.php?topic=309073.0;all\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000020366a15799010ae0432be831c197e06b19133028a9aa6f3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/067aed8a/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-25T15:20:05",
                "message_text_only": "A few months ago I had a conversation with an executive at a Bitcoin\ncompany, and I suggested their developers should get involved with the\ndevelopment list. I was told that they are all subscribed but refuse to\npost. Puzzled, I asked why, maybe the process isn't clear or we didn't talk\nabout what they were interested in? No, it's because in that executives\nwords \"They see how Peter Todd shoots people down in flames and want\nnothing to do with that\".\n\nPeter, you were named explicitly as the source of the problem. Your\nimmediate knee-jerk reaction to anyone who disagrees with you is making\nthis forum aggressive and ugly - it puts other people off from\ncontributing. For what it's worth, if I were the moderator of this list I\nwould have banned you a long time ago because I value a friendly atmosphere\nmore than your \"insights\", which are often deeply suspect (as in this case).\n\nBesides, ground up redesigns of Bitcoin like what you propose are more\nappropriate for bitcointalk. So please take it there.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/fae160ae/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-25T16:47:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nFor the record, tree chains is designed to be a soft-fork upgrade to bitcoin, at least if we can get the economics to work out. Assuming it does, you would do this by defining bitcoin itself to be the top level chain, and carrying what appear to be anyone can spend txouts from block to block so that transaction outputs can be created when funds are redeemed in the top block chain from children lower in the tree. Very similar ideas as the chain to chain stuff via spv proofs that Mark and Adam were talking about here earlier, although I think the order and reorganisation guarantees is a big advantage over their unsynched chain model. Most of the other ideas are identical, and they deserve credit.\n\nI'm on the currency design panel at the Princeton Bitcoin Research Conference this week - tree chains will be discussed informally if not on the panel itself.\n\nRegarding cryptocurrency research related posts, the feedback I've gotten has always been quite positive. You are in the minority as far as I can tell, and anyway the volume of such posts is a small part of the total list volume.\n\n\nAs for the rest of your email, doctor, heal thyself. Gavin's constant namecalling of legit and well accepted scaling concerns as FUD has irritated many people for over a year now,  among many other things. Statements similar to what you claim are said about me are also often said to me about you and Gavin.\n\nBut anyway, reply off list please.\n\nOn 25 March 2014 11:20:05 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:\n>A few months ago I had a conversation with an executive at a Bitcoin\n>company, and I suggested their developers should get involved with the\n>development list. I was told that they are all subscribed but refuse to\n>post. Puzzled, I asked why, maybe the process isn't clear or we didn't\n>talk\n>about what they were interested in? No, it's because in that executives\n>words \"They see how Peter Todd shoots people down in flames and want\n>nothing to do with that\".\n>\n>Peter, you were named explicitly as the source of the problem. Your\n>immediate knee-jerk reaction to anyone who disagrees with you is making\n>this forum aggressive and ugly - it puts other people off from\n>contributing. For what it's worth, if I were the moderator of this list\n>I\n>would have banned you a long time ago because I value a friendly\n>atmosphere\n>more than your \"insights\", which are often deeply suspect (as in this\n>case).\n>\n>Besides, ground up redesigns of Bitcoin like what you propose are more\n>appropriate for bitcointalk. So please take it there.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.9\n\niQFQBAEBCAA6BQJTMbMyMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwheooB/9pKwUKLni8ZBPfe7qQ\ne3dTTWXeottw1dOT1iUDvk2VVRe0ou38UZhqVQTr9KL3sf6OKsijwb7mgPdoSolA\nZJ30mPk68KPMdmESfDeXvl8l/hdXCdI1mHmeAcUwirH85eVc9olBL5AKOpfIFtPx\nReagvnMVy5nWguGnRNq4O3A5G7BBcFWnIhTjj656Hsqywf0j2l9P+JcgSpHhOupF\nq/v6Ybeae5UJHmINMA9Mw5isZT1uFGDxYPoG6xvz0/O/gaPVTXNQiQJa9rq9v0wp\n+EQEF5br+wN1VmBQOYV+6ig5Ttz4s4i+tCyVIZPF5HKmipBuK+mtDT81dqxRqh7q\ndF86\n=37x3\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-25T17:37:00",
                "message_text_only": "On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:\n> For someone with 'Chief Scientist' as their job title, I'm surprised you\n> think so little of hard evidence and so much of idol worshipping.\n\nPeter, take this unprofessional, personal crap off-list.\n\nMike's anecdote of hostility is not an isolated one.  Just today, a\nbitcore developer commented on \"Peter Todd's ..apocalyptic vision\nand... negative view on bitcoin\" which turned off some other\ndevelopers from participating more interactively.\n\nAs I commented on IRC, open source projects are no strangers to people\nwho simultaneously (a) make useful contributions and (b) turn\npotential contributors away with an abrasive or hostile attitude\ntoward others.  It's an unsolved problem in OSS, that I saw for 15+\nyears in the Linux kernel community.\n\nFor this list, as Mike suggested on IRC, introducing an openly stated\nmoderation policy may be the one route.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-25T18:02:03",
                "message_text_only": "I would echo the need for some kind of moderation. \n\nI believe Peter Todd is an extremely intelligent individual, who has a\nlot to offer the Bitcoin community.  He has a firm grasp of a lot of\nreally deep Bitcoin concepts and his *technical* insight is generally\npositive.  Technically.  But the way he communicates on this list is\n*extremely* corrosive and breeds hostility.  It makes it a scary place\nto discuss things, with frequent, public ridicule of everything posted. \n\nI agree that I would rather have a friendly environment to discuss\ntechnicals, even if it means losing additional technical insight. \nPeople who would explicitly insult other contributors intelligence and\ncharacter on a public list should be subject to some kind of negative\nreinforcement.   Maybe there's solutions other than outright banning.\n\n-Alan\n\n\n\nOn 03/25/2014 01:37 PM, Jeff Garzik wrote:\n> On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:\n>> For someone with 'Chief Scientist' as their job title, I'm surprised you\n>> think so little of hard evidence and so much of idol worshipping.\n> Peter, take this unprofessional, personal crap off-list.\n>\n> Mike's anecdote of hostility is not an isolated one.  Just today, a\n> bitcore developer commented on \"Peter Todd's ..apocalyptic vision\n> and... negative view on bitcoin\" which turned off some other\n> developers from participating more interactively.\n>\n> As I commented on IRC, open source projects are no strangers to people\n> who simultaneously (a) make useful contributions and (b) turn\n> potential contributors away with an abrasive or hostile attitude\n> toward others.  It's an unsolved problem in OSS, that I saw for 15+\n> years in the Linux kernel community.\n>\n> For this list, as Mike suggested on IRC, introducing an openly stated\n> moderation policy may be the one route.\n>"
            },
            {
                "author": "slush",
                "date": "2014-03-25T18:13:36",
                "message_text_only": "I fully agree, please keep friendly environment on this list. Btw I also\nmet people who were making fun about Peter's reactions on bitcoin-dev.\n\nslush\n\n\nOn Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> I would echo the need for some kind of moderation.\n>\n> I believe Peter Todd is an extremely intelligent individual, who has a\n> lot to offer the Bitcoin community.  He has a firm grasp of a lot of\n> really deep Bitcoin concepts and his *technical* insight is generally\n> positive.  Technically.  But the way he communicates on this list is\n> *extremely* corrosive and breeds hostility.  It makes it a scary place\n> to discuss things, with frequent, public ridicule of everything posted.\n>\n> I agree that I would rather have a friendly environment to discuss\n> technicals, even if it means losing additional technical insight.\n> People who would explicitly insult other contributors intelligence and\n> character on a public list should be subject to some kind of negative\n> reinforcement.   Maybe there's solutions other than outright banning.\n>\n> -Alan\n>\n>\n>\n> On 03/25/2014 01:37 PM, Jeff Garzik wrote:\n> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:\n> >> For someone with 'Chief Scientist' as their job title, I'm surprised you\n> >> think so little of hard evidence and so much of idol worshipping.\n> > Peter, take this unprofessional, personal crap off-list.\n> >\n> > Mike's anecdote of hostility is not an isolated one.  Just today, a\n> > bitcore developer commented on \"Peter Todd's ..apocalyptic vision\n> > and... negative view on bitcoin\" which turned off some other\n> > developers from participating more interactively.\n> >\n> > As I commented on IRC, open source projects are no strangers to people\n> > who simultaneously (a) make useful contributions and (b) turn\n> > potential contributors away with an abrasive or hostile attitude\n> > toward others.  It's an unsolved problem in OSS, that I saw for 15+\n> > years in the Linux kernel community.\n> >\n> > For this list, as Mike suggested on IRC, introducing an openly stated\n> > moderation policy may be the one route.\n> >\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5e203215/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-25T19:47:15",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOK, deal. You guys stop calling my concerns FUD, accusing me of having ulterior motives, etc. and I'll pay the same respect to you.\n\n\nOn 25 March 2014 14:13:36 GMT-04:00, slush <slush at centrum.cz> wrote:\n>I fully agree, please keep friendly environment on this list. Btw I\n>also\n>met people who were making fun about Peter's reactions on bitcoin-dev.\n>\n>slush\n>\n>\n>On Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com>\n>wrote:\n>\n>> I would echo the need for some kind of moderation.\n>>\n>> I believe Peter Todd is an extremely intelligent individual, who has\n>a\n>> lot to offer the Bitcoin community.  He has a firm grasp of a lot of\n>> really deep Bitcoin concepts and his *technical* insight is generally\n>> positive.  Technically.  But the way he communicates on this list is\n>> *extremely* corrosive and breeds hostility.  It makes it a scary\n>place\n>> to discuss things, with frequent, public ridicule of everything\n>posted.\n>>\n>> I agree that I would rather have a friendly environment to discuss\n>> technicals, even if it means losing additional technical insight.\n>> People who would explicitly insult other contributors intelligence\n>and\n>> character on a public list should be subject to some kind of negative\n>> reinforcement.   Maybe there's solutions other than outright banning.\n>>\n>> -Alan\n>>\n>>\n>>\n>> On 03/25/2014 01:37 PM, Jeff Garzik wrote:\n>> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org>\n>wrote:\n>> >> For someone with 'Chief Scientist' as their job title, I'm\n>surprised you\n>> >> think so little of hard evidence and so much of idol worshipping.\n>> > Peter, take this unprofessional, personal crap off-list.\n>> >\n>> > Mike's anecdote of hostility is not an isolated one.  Just today, a\n>> > bitcore developer commented on \"Peter Todd's ..apocalyptic vision\n>> > and... negative view on bitcoin\" which turned off some other\n>> > developers from participating more interactively.\n>> >\n>> > As I commented on IRC, open source projects are no strangers to\n>people\n>> > who simultaneously (a) make useful contributions and (b) turn\n>> > potential contributors away with an abrasive or hostile attitude\n>> > toward others.  It's an unsolved problem in OSS, that I saw for 15+\n>> > years in the Linux kernel community.\n>> >\n>> > For this list, as Mike suggested on IRC, introducing an openly\n>stated\n>> > moderation policy may be the one route.\n>> >\n>>\n>>\n>>\n>>\n>------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and\n>their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/13534_NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Learn Graph Databases - Download FREE O'Reilly Book\n>\"Graph Databases\" is the definitive new guide to graph databases and\n>their\n>applications. Written by three acclaimed leaders in the field,\n>this first edition is now available. Download your free book today!\n>http://p.sf.net/sfu/13534_NeoTech\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.9\n\niQFQBAEBCAA6BQJTMd1DMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhb89B/98Tb0Xncho+1cbja1K\nR9xYOKPhWU5EIuPr7zbpuQxufuM8hZsyFSo/ptnQnJ8EAJ2GvUUEnE2vDDjvqqJm\nvy5URtOwKc6ztBDrjtWToKCgBwpJTektWrJMu2FQaO5CV/4sHhVM4By8BoDvCNLt\nxeN7BccjvlDZ+2ggRaYt4P/QKctEyt9qZrdDmIsNxUa+bLzplHoqdoQMjQ2CUcUA\nT+/Lq7MH+vROJXqx7d3JSsZAQ59evQDyorvCrxNgfVbB7j10t1zr5r5viWUEDtZ5\n/9DAP92vpSCokmKWfSlysHbC4KEqWglWka7aSBLXmAVrJeFxJRojsLQbCKUUFrG0\nIigO\n=91oy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-25T21:41:17",
                "message_text_only": "Peter,\n\nI think you and I both know there is WAAYY to much MONEY to be taken\nfrom naive end-users by the companies that employ people who call\nyour concerns FUD.\n\nAnd for everyone else, I want to apologize in advance for anything\nI might happen to say that might be abrasive, arrogant, angry, or \n'in need of moderation'. So for those who do not wish to hear or \nread such things, delete my message now.\n\n===================\ndisclaimer: strong language follows\n===================\n\n\n\n\n\nWhat the fuck Groupthink?\ncommittee for GROUPTHINKPROFIT?\n\nI'd rather have Peter Todd calling some developers idiots on the \nlist than some fucking idiots who get paid way to fucking much \ncalling 'end-users' stupid for believing MtGox. Hell, I was one\nof these idiots that fell for a marketing scam by a company that\nhad a good story.\n\n\nBut here is the damn point. The Excecutive who was whining about \nhow his devs won't show up should probably consider hiring people\nwho make VOCAL points on the mailing list. Or maybe he should \nconsider that his developers might know his business model is\nshit and if they DID say something, it would be CLEAR to the \nworld that only an idiot would use their companies services, and\nkill the company.\n\nWould you rather hear of vulnerabilities and scaling limits on \nbitcoin-development, or would you rather hear about them by a \nchorus of \"They got hacked, their code must suck\", but AFTER \nthe fact.\n\nIt seems to be an unfortunate fact of life that sleazy people\ntake a shitload of money from nice people. Moderate Peter and\nI into oblivion at your own risk. Wouldn't you rather have us\npointing out obvious flaws than ignoring shit?\n\n... But just remember, your employers probably make more money\nby ignoring shit....\n\nOn Tue, Mar 25, 2014 at 03:47:15PM -0400, Peter Todd wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n> \n> OK, deal. You guys stop calling my concerns FUD, accusing me of having ulterior motives, etc. and I'll pay the same respect to you.\n> \n> \n> On 25 March 2014 14:13:36 GMT-04:00, slush <slush at centrum.cz> wrote:\n> >I fully agree, please keep friendly environment on this list. Btw I\n> >also\n> >met people who were making fun about Peter's reactions on bitcoin-dev.\n> >\n> >slush\n> >\n> >\n> >On Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com>\n> >wrote:\n> >\n> >> I would echo the need for some kind of moderation.\n> >>\n> >> I believe Peter Todd is an extremely intelligent individual, who has\n> >a\n> >> lot to offer the Bitcoin community.  He has a firm grasp of a lot of\n> >> really deep Bitcoin concepts and his *technical* insight is generally\n> >> positive.  Technically.  But the way he communicates on this list is\n> >> *extremely* corrosive and breeds hostility.  It makes it a scary\n> >place\n> >> to discuss things, with frequent, public ridicule of everything\n> >posted.\n> >>\n> >> I agree that I would rather have a friendly environment to discuss\n> >> technicals, even if it means losing additional technical insight.\n> >> People who would explicitly insult other contributors intelligence\n> >and\n> >> character on a public list should be subject to some kind of negative\n> >> reinforcement.   Maybe there's solutions other than outright banning.\n> >>\n> >> -Alan\n> >>\n> >>\n> >>\n> >> On 03/25/2014 01:37 PM, Jeff Garzik wrote:\n> >> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org>\n> >wrote:\n> >> >> For someone with 'Chief Scientist' as their job title, I'm\n> >surprised you\n> >> >> think so little of hard evidence and so much of idol worshipping.\n> >> > Peter, take this unprofessional, personal crap off-list.\n> >> >\n> >> > Mike's anecdote of hostility is not an isolated one.  Just today, a\n> >> > bitcore developer commented on \"Peter Todd's ..apocalyptic vision\n> >> > and... negative view on bitcoin\" which turned off some other\n> >> > developers from participating more interactively.\n> >> >\n> >> > As I commented on IRC, open source projects are no strangers to\n> >people\n> >> > who simultaneously (a) make useful contributions and (b) turn\n> >> > potential contributors away with an abrasive or hostile attitude\n> >> > toward others.  It's an unsolved problem in OSS, that I saw for 15+\n> >> > years in the Linux kernel community.\n> >> >\n> >> > For this list, as Mike suggested on IRC, introducing an openly\n> >stated\n> >> > moderation policy may be the one route.\n> >> >\n> >>\n> >>\n> >>\n> >>\n> >------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> >their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/13534_NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >------------------------------------------------------------------------\n> >\n> >------------------------------------------------------------------------------\n> >Learn Graph Databases - Download FREE O'Reilly Book\n> >\"Graph Databases\" is the definitive new guide to graph databases and\n> >their\n> >applications. Written by three acclaimed leaders in the field,\n> >this first edition is now available. Download your free book today!\n> >http://p.sf.net/sfu/13534_NeoTech\n> >\n> >------------------------------------------------------------------------\n> >\n> >_______________________________________________\n> >Bitcoin-development mailing list\n> >Bitcoin-development at lists.sourceforge.net\n> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.0.9\n> \n> iQFQBAEBCAA6BQJTMd1DMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhb89B/98Tb0Xncho+1cbja1K\n> R9xYOKPhWU5EIuPr7zbpuQxufuM8hZsyFSo/ptnQnJ8EAJ2GvUUEnE2vDDjvqqJm\n> vy5URtOwKc6ztBDrjtWToKCgBwpJTektWrJMu2FQaO5CV/4sHhVM4By8BoDvCNLt\n> xeN7BccjvlDZ+2ggRaYt4P/QKctEyt9qZrdDmIsNxUa+bLzplHoqdoQMjQ2CUcUA\n> T+/Lq7MH+vROJXqx7d3JSsZAQ59evQDyorvCrxNgfVbB7j10t1zr5r5viWUEDtZ5\n> /9DAP92vpSCokmKWfSlysHbC4KEqWglWka7aSBLXmAVrJeFxJRojsLQbCKUUFrG0\n> IigO\n> =91oy\n> -----END PGP SIGNATURE-----\n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-03-25T20:40:40",
                "message_text_only": "2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:\n> On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:\n>> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:\n>>\n>> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the\n>> > most fundemental of them is that to create a block you need to update\n>> > the state of the UTXO set, and the way Bitcoin is designed means that\n>> > updating that state requires bandwidth equal to all the transaction\n>> > volume to keep up with the changes to what set. Long story short, we get\n>> > O(n^2) scaling, which is just plain infeasible.\n>> >\n>>\n>> We have a fundamental disagreement here.\n>>\n>> If you go back and read Satoshi's original thoughts on scaling, it is clear\n>> that he imagined tens of thousands of mining nodes and hundreds of millions\n>> of lightweight SPV users.\n>\n> Yeah, about that...\n>\n> https://blockchain.info/pools\n>\n\nOn-topic:\nThis argument is quite the fallacy. The only reason we have that few\npools is because each of their miners doesn't find it feasible to mine\n\"on their own\". if you count the individual miners on those pools you\nwill get to the scale Gavin was trying to point out.\n\nNevertheless i think that is just a minor disagreement, since tree\nchains help decentralization.\n\n> For someone with 'Chief Scientist' as their job title, I'm surprised you\n> think so little of hard evidence and so much of idol worshipping.\n>\n>\n> P.S. A year or so ago you complained that if I cared so much about\n> decentralization, I should make P2Pool better. Your homework: What do\n> tree-chains and Andrew Miller's non-outsourcable puzzles(1) have to do\n> with that? What about the cube-square law? And why don't I think TXO\n> commitments solve the blocksize problem?\n>\n> 1) https://bitcointalk.org/index.php?topic=309073.0;all\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000020366a15799010ae0432be831c197e06b19133028a9aa6f3\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/13534_NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-25T22:00:02",
                "message_text_only": "On Tue, Mar 25, 2014 at 08:40:40PM +0000, Ricardo Filipe wrote:\n> 2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:\n> > On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:\n> >> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:\n> >>\n> >> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the\n> >> > most fundemental of them is that to create a block you need to update\n> >> > the state of the UTXO set, and the way Bitcoin is designed means that\n> >> > updating that state requires bandwidth equal to all the transaction\n> >> > volume to keep up with the changes to what set. Long story short, we get\n> >> > O(n^2) scaling, which is just plain infeasible.\n> >> >\n> >>\n> >> We have a fundamental disagreement here.\n> >>\n> >> If you go back and read Satoshi's original thoughts on scaling, it is clear\n> >> that he imagined tens of thousands of mining nodes and hundreds of millions\n> >> of lightweight SPV users.\n> >\n> > Yeah, about that...\n> >\n> > https://blockchain.info/pools\n> >\n> \n> On-topic:\n> This argument is quite the fallacy. The only reason we have that few\n> pools is because each of their miners doesn't find it feasible to mine\n> \"on their own\". if you count the individual miners on those pools you\n> will get to the scale Gavin was trying to point out.\n> \n> Nevertheless i think that is just a minor disagreement, since tree\n> chains help decentralization.\n\nI think is actually a major fundamental disagreement, and opinions\ntend to correlate strongly with salary considerations.\n\n\"It is difficult to get a man to understand something, when his salary\ndepends upon his not understanding it!\" -- Upton Sinclair\n\nLet us either agree to disagree, or get on with moderating this list \nso that only sensible salaried discussions can take place."
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-26T10:58:02",
                "message_text_only": "On Tue, Mar 25, 2014 at 08:40:40PM +0000, Ricardo Filipe wrote:\n> 2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:\n> > On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:\n> >> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:\n> >>\n> >> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the\n> >> > most fundemental of them is that to create a block you need to update\n> >> > the state of the UTXO set, and the way Bitcoin is designed means that\n> >> > updating that state requires bandwidth equal to all the transaction\n> >> > volume to keep up with the changes to what set. Long story short, we get\n> >> > O(n^2) scaling, which is just plain infeasible.\n> >> >\n> >>\n> >> We have a fundamental disagreement here.\n> >>\n> >> If you go back and read Satoshi's original thoughts on scaling, it is clear\n> >> that he imagined tens of thousands of mining nodes and hundreds of millions\n> >> of lightweight SPV users.\n> >\n> > Yeah, about that...\n> >\n> > https://blockchain.info/pools\n> >\n> \n> On-topic:\n> This argument is quite the fallacy. The only reason we have that few\n> pools is because each of their miners doesn't find it feasible to mine\n> \"on their own\". if you count the individual miners on those pools you\n> will get to the scale Gavin was trying to point out.\n\nYeah, that's part of my fundemental disagreement with him: I draw a\nsharp line between mining - the act of validating and constructing new\nblocks - and hashing - the act of solving proof-of-work problems. The\nlatter definitely has incentives to decentralize due to simple physics:\nit's cheaper per unit hashing power to get rid of a small amount of\nwaste heat than a large amount. The former requires a full node, and\nthat full node is a fixed cost overhead related to the number of\ntransactions per second. Any fixed cost overhead discourages\ndecentralization, and encourages centralization.\n\n> Nevertheless i think that is just a minor disagreement, since tree\n> chains help decentralization.\n\nYup. Quite importantly, the model is for any one miner to be able to\nfully participate at the same level as any other miner by mining some\nsection of the tree. As your reward is linked to blocks mined, there\nwill always be some level at which you are mining blocks at a reasonably\nlow variance and you don't need to join a pool to achieve that low\nvarience. Equally your resources to keep up with that part of the tree\ncan be made reasonably low, and that cost only grows at the log of the\ntotal transaction volume.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/c336d5ee/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-25T12:50:58",
                "message_text_only": "On Tue, Mar 25, 2014 at 08:28:51AM -0400, Peter Todd wrote:\n> On Sat, Mar 22, 2014 at 12:43:34PM -0700, Mark Friedenbach wrote:\n> > Btw, any chance we could get a summary description of tree-chains\n> > posted to bitcoin-development?\n> \n> Sure:\n> \n> Introduction\n> ============\n\nBTW for those whose email clients have problems with unicode:\n\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04388.html\n\nAlso, I was in a bit of a rush - catching a flight - and know I should\nhave cited a few things, including, but not limited to, various peoples'\nwork on chain-to-chain transfers and SPV proofs.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000005f3189269d2c39711d6a340a617267d72f95848a9ab8e7ba\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/4d014a37/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-25T21:03:57",
                "message_text_only": "I'm afraid I'm going to be the jerk that requested more details and then\nonly nitpicks seemingly minor points in your introduction. But its\nbecause I need more time to digest the contents of your proposal. Until\nthen:\n\n> But moving value between chains is inconvenient; right now moving\n> value requires trusted third parties. Two-way atomic chain transfers\n> does help here, but as recent discussions on the topic showed there's\n> all sorts of edge cases with reorganizations that are tricky to \n> handle; at worst they could lead to inflation.\n\nThis isn't true. The re-org issue is fairly handled in the 2-way pegging\nscheme that Greg Maxwell developed and Adam Back described a week ago on\nthis list. Depending on the implementation it could even be configurable\nby the person performing the peg too - allowing the transfer to specify\nthe confirmation depth required during the quieting period in order to\nprotect against re-orgs up to a sufficient depth. I think this is worked\nout quite well with sufficient enumeration of edge cases, and I don't\nthink they are particularly tricky to handle or lead to money-losing\nsituations under the explicit security assumptions.\n\nMore importantly, to your last point there is absolutely no way this\nscheme can lead to inflation. The worst that could happen is theft of\ncoins willingly put into the pegging pool. But in no way is it possible\nto inflate the coin supply.\n\nI will look at your proposal in more depth. But I also think you should\ngive 2-way pegging a fair shake as pegging to side chains and private\naccounting servers may eliminate the need."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-25T22:34:31",
                "message_text_only": "On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> More importantly, to your last point there is absolutely no way this\n> scheme can lead to inflation. The worst that could happen is theft of\n> coins willingly put into the pegging pool. But in no way is it possible\n> to inflate the coin supply.\n\nI don't think it would be entirely unfair to describe one of the\npossible ways a secondary coin becoming unbacked can play out as\ninflation\u2014 after all, people have described altcoins as inflation. In\nthe worst case its no _worse_ inflation, I think, than an altcoin is\u2014\nhowever.\n\n> I will look at your proposal in more depth. But I also think you should\n> give 2-way pegging a fair shake as pegging to side chains and private\n> accounting servers may eliminate the need.\n\nI think that chain geometries which improve the scale/decentralization\ntrade-off are complementary. If PT's ideas here do amount to something\nthat gives better scaling without ugly compromise I believe it would\nstill be useful no matter how well the 2-way peg stuff works simply\nbecause scaling and decenteralization are both good things which we\nwould pretty much always want more of..."
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-26T10:48:52",
                "message_text_only": "On Tue, Mar 25, 2014 at 02:03:57PM -0700, Mark Friedenbach wrote:\n> > But moving value between chains is inconvenient; right now moving\n> > value requires trusted third parties. Two-way atomic chain transfers\n> > does help here, but as recent discussions on the topic showed there's\n> > all sorts of edge cases with reorganizations that are tricky to \n> > handle; at worst they could lead to inflation.\n> \n> This isn't true. The re-org issue is fairly handled in the 2-way pegging\n> scheme that Greg Maxwell developed and Adam Back described a week ago on\n> this list. Depending on the implementation it could even be configurable\n> by the person performing the peg too - allowing the transfer to specify\n> the confirmation depth required during the quieting period in order to\n> protect against re-orgs up to a sufficient depth. I think this is worked\n> out quite well with sufficient enumeration of edge cases, and I don't\n> think they are particularly tricky to handle or lead to money-losing\n> situations under the explicit security assumptions.\n> \n> More importantly, to your last point there is absolutely no way this\n> scheme can lead to inflation. The worst that could happen is theft of\n> coins willingly put into the pegging pool. But in no way is it possible\n> to inflate the coin supply.\n\nI see your point, but gmaxwell accurately guesses below that when I'm\ntalking about inflation, I'm including the inflation of the alt too.\nWith tree-chains that's particularly obvious as the scheme doesn't try\nto privilege one chain over another beyond parent-child relationships.\n\n\nIncidentally, I understand that the pegged chains are meant to be\nmerge-mined. To me this seems problematic and cheap to attack. Consider\na merge-mined zerocoin sidechain: Can you profit from depositing some\ncoins, taking them out again, then reorging the zerocoin chain to undo\nthat withdrawl on the zerocoin side, and performing it all over again?\nIt'd be easy to drain the pegging pool that way, and with merge-mining\nthere's no inherent cost to you to do so. Not unique to zerocoin either\nof course, just in that case who actually double-spent is unknowable.\n\n> I will look at your proposal in more depth. But I also think you should\n> give 2-way pegging a fair shake as pegging to side chains and private\n> accounting servers may eliminate the need.\n\nWell I'll certainly raid 2-way pegging for ideas. :) I think the big\ndifference between the two is how I'd like to see tree-chains reduce\ndependence on miner validation - ideally miners wouldn't validate at all\nif the efficiency can be regained with ZK-SNARKS or something. Dropping\nvalidation from mining could also avoid the problem of how in Bitcoin\nthere is no explicit mechanism that actually forces miners to validate\nthe chain. Not unlike gmaxwell's \"firedrill\" ideas, you would be able to\n\"firedrill\" clients at any point by just mining some invalid garage.\n\n(not to say miners would certainly not do validation - you still want to\nbe able to pay them transaction fees, but in that case they're doing the\nvalidation only for themselves)\n\n\nOn Tue, Mar 25, 2014 at 03:34:31PM -0700, Gregory Maxwell wrote:\n> On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> > More importantly, to your last point there is absolutely no way this\n> > scheme can lead to inflation. The worst that could happen is theft of\n> > coins willingly put into the pegging pool. But in no way is it possible\n> > to inflate the coin supply.\n> \n> I don't think it would be entirely unfair to describe one of the\n> possible ways a secondary coin becoming unbacked can play out as\n> inflation\u2014 after all, people have described altcoins as inflation. In\n> the worst case its no _worse_ inflation, I think, than an altcoin is\u2014\n> however.\n\nYup, and in the tree-chains model, every single chain is, from that\nperspective, an altcoin.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/bf85169b/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-03-27T16:14:04",
                "message_text_only": "I'll make sure I understand your proposal better before commenting\nmuch on it, but at a first glance, I don't see how it is incompatible\nwith 2 way peg and merged mining itself.\nWhy wouldn't you want merged mining for the root of your tree?\nA miner could only chose a leaf block at a time, but it could merged\nmine with other leafs in other independent trees.\nAnyway, I'll better comment on the 2 way peg and merged mining issues\nraised so far.\n\nOn 3/25/14, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:\n>> More importantly, to your last point there is absolutely no way this\n>> scheme can lead to inflation. The worst that could happen is theft of\n>> coins willingly put into the pegging pool. But in no way is it possible\n>> to inflate the coin supply.\n>\n> I don't think it would be entirely unfair to describe one of the\n> possible ways a secondary coin becoming unbacked can play out as\n> inflation-- after all, people have described altcoins as inflation. In\n> the worst case its no _worse_ inflation, I think, than an altcoin is--\n> however.\n\nI think that's an obscure corner case that is not likely going to ever\nbe implemented.\nIf you produce real inflation there will likely be a \"bank run\".\nIf you're going to implement something equivalent to demurrage you\nshould call it demurrage instead of inflation.\nAnd that's only for the pegged coin in the side chain: BITCOINS IN THE\nMAIN CHAIN WILL NEVER BE INFLATED USING 2P2.\n\nSo I think it's less confusing if we just say that 2-way peg can't\nproduce inflation in general, and leave \"unless you explicitly\nintroduce an inflation mechanism\" as a probably unnecessary\nclarification.\n\n> I see your point, but gmaxwell accurately guesses below that when I'm\n> talking about inflation, I'm including the inflation of the alt too.\n\nYou don't need inflation on the side chain. You don't need to create\nanother currency to create another chain with different and maybe\nexperimental features, that's the whole point.\n\nWith merged mining, you're adding up the different created seigniorage\nsubsidies to the same fire to share the heat.\nWith 2-way peg, you don't even need to create a new p2p currency with\na seigniorage to burn on hashes or be accused of \"pre-mining\" as the\nmore ecological alternative in existence.\nYour chain can secure itself on fees, just like bitcoin in the future.\nMerged mining will help, but it's not the panacea and you will need to\nreward miners because that's what your security ultimately depends on.\nThis is mostly about not burning the world, it may not be as\ninteresting to you as improving bitcoin's scalability but you're not\ndoing anyone a favor by presenting both concepts as being\nincompatible, not even yourself.\n\n> With tree-chains that's particularly obvious as the scheme doesn't try\n> to privilege one chain over another beyond parent-child relationships.\n\nIf I understand it correctly, all the utxo nodes in the tree implement\nthe same rules so doesn't seem suitable to solve the same problems.\nI understand that merged mining IS NOT a solution to scalability on\nits own, having 10 independent 1MB blocks is no worse than 1 10MB\nblock in terms of performance vs centralization.\nBut maybe it's possible to have a 10 GB sharded side-chain (your\nproposal) that it's merged mined with the main chain and where the\ncurrency of the side-chain comes from.\nSo merged mining could help solve the scalability problem indirectly.\nAnd 2-way peg could be a useful previous step for your proposal to be\ndeployed \"on production\", with real bitcoins without forcing all\nbitcoin users to take the associated risks, only the people who opt\nin.\n\n> Incidentally, I understand that the pegged chains are meant to be\n> merge-mined.\n\n2 way peg doesn't require merged mining but it is assumed that merged\nmining will be used since it provides more security than independent\nmining.\nI thought you agreed with this and your claim was just that merged\nmining is less secure than \"embedded consensus\", something I have\nnever denied, my complain against \"embedded consensus\" is that it\ndoesn't seem to scale (with Bitcoin as it is today) and can't offer\nmany features that a hardfork merged mined chain could offer (like\nthose explained on our freimarkets proposal).\nBut since you're implying again that \"merged mining is superior to\nindependent mining\" is generally false, I invite you again to\ndismantle my example\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/31806950/\n\nor to prove your hypothesis that \"is free to attack merged mining\nchains\" by attacking namecoin for free. Either one will serve, my\nyou're not responding to any of the suggestions.\nInstead, you're saying that \"people defending merged mining assume\nthat attackers are economically rational\". I think you're referring to\nme and it's false.\nOf course the attacker doesn't need to be economically rational. For\nsome unknown reason he's attacking a chain, without questioning the\nrationality of the attack, I just sum costs, including opportunity\ncosts, because costs are all what proof of work security is about.\nPlease, do one of the two before continuing your merged mining\ndefamation campaign.\n\n> merge-mined. To me this seems problematic and cheap to attack. Consider\n> a merge-mined zerocoin sidechain: Can you profit from depositing some\n> coins, taking them out again, then reorging the zerocoin chain to undo\n> that withdrawl on the zerocoin side, and performing it all over again?\n\nThat's what the quieting periods are for.\nAfter the widrawal, the coins are blocked until they reach maturity or\nsomeone else provides a reorg proof invalidating the withdrawal.\n\n> It'd be easy to drain the pegging pool that way, and with merge-mining\n> there's no inherent cost to you to do so. Not unique to zerocoin either\n> of course, just in that case who actually double-spent is unknowable.\n\nWe could talk about this in the 2-way peg thread, but anyway...\nLet's say 80% of bitcoin miners also mine Zerocoin.\nLet's say zerocoin's reward ZR is 1% of Bitcoin's Reward BR\nLet's say \"megahash\" hashes 40% of Bitcoin's mining and is our attacker.\nPreviously megahash rented its hardware for 0.41 BR for each GHash/s,\nbecause that was the market price at the time.\nNow it will mine bitcoin and attack zerocoin, so it will recover 0.4\nBR, leaving the costs of the attack at 0.01 BR per GHash/s (assuming\nit doesn't rent additional hardware, which could also do).\nSince it controls 40% of Bitcoins hashing, it controls approximately\n50% of zerocoin hashing.\nSo megahash tries to withdraw AR coins (attack reward) and then double spend.\n>From block N in zerocoin (ZN), it starts building an alternative\nchain that doesn't reveal with the double spend.\nAfter X blocks, he publishes a withdraw on zerocoin.\nTo collect coins from the pegged pool on bitcoin's chain, he provides\na proof that a chain including the withdraw with length at least X +\nZM (maturity in zerocoin)\nTo access those funds, he will have to wait BM (Bitcoin maturity)\nblocks in main chain during which anyone can recover the funds to the\npegged pool in exchange of a fee that megahash has to provide itself,\nby providing a chain with the same root, more work and in which the\ncommitted utxo doesn't include the withdrawal transaction.\nSo with merged mining, megahash has been spending 0.01 BR per GHash/s\nfrom block ZN to block ZN + X + ZM and the attack will still likely\nfail unless it is willing to also censor all reorg proofs in the main\nchain, otherwise it will has to start again when such a proof appears.\n\nWithout merged mining and maintaining the rewards, the numbers would\nbe practically the same, with the difference that the attacker could\nsacrifice its bitcoin income (there's no reason to do it with merged\nmining) to attack the independent chain more brutally (40% of bitcoin\nwould be 4000% of the independent chain instead of 50% like in the example).\n\nAnyway the particular situation in which a single entity controls 40%\nof the hashing power should be rare. That's potentially dangerous for\nbitcoin and although changing the hashing algorithm would be painful\nand risky, I would be terribly scared of that happening if I was that\nentity. Letting my percentage of hash rate dilute as others grow would\ndefinitely be part of my plan.\n\nAlthough this is again completely orthogonal to the merged mining or\nnot discussion, hashing algorithms are often mixed in the discussions\nagainst merged mining. If you had to introduce that hashing algorithm\nhardfork change you will probably chose something with similar\nproperties than those of SHA256, like being easy to implement\nspecialized hardware for it. You could even chose a memory-hard\nalgorithm if you want to promote ASIC production centralization, but\nyou can't chose an \"anti-ASIC\" algorithm because those don't exist.\nIt is well known that any information machine that can be built with\nsoftware can also be built with specialized hardware and viceversa.\nSadly that kind of fallacy is often used to justify the ecological\ncrime that starting a new chain with no plans of doing merged mining\nrepresents.\n\nBut as said this is orthogonal to sharded chains, 2 way peg and\nmerged mining, which are also only indirectly related with each other.\n\n> Well I'll certainly raid 2-way pegging for ideas. :) I think the big\n> difference between the two is how I'd like to see tree-chains reduce\n> dependence on miner validation - ideally miners wouldn't validate at all\n> if the efficiency can be regained with ZK-SNARKS or something. Dropping\n> validation from mining could also avoid the problem of how in Bitcoin\n> there is no explicit mechanism that actually forces miners to validate\n> the chain. Not unlike gmaxwell's \"firedrill\" ideas, you would be able to\n> \"firedrill\" clients at any point by just mining some invalid garage.\n\nYes, snarks could do wonders. For 2-way peg too, SPV proofs could\nbecome full proofs and headers compression could probably improve a\nlot as well.\nBut let's find out everything that can be done without snarks first.\n\n> (not to say miners would certainly not do validation - you still want to\n> be able to pay them transaction fees, but in that case they're doing the\n> validation only for themselves)\n\nMhmm, if miners don't validate, they risk to mine on top of\ninvalid blocks. Are you saying they don't care about that?"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-28T15:10:30",
                "message_text_only": "> Anyway the particular situation in which a single entity controls 40%\n> of the hashing power should be rare. That's potentially dangerous for\n> bitcoin and although changing the hashing algorithm would be painful\n> and risky, I would be terribly scared of that happening if I was that\n> entity. Letting my percentage of hash rate dilute as others grow would\n> definitely be part of my plan.\n\nI think *your* plan is an ecologically and socially rational plan. My \nobservations of irrational responses on this list lead me to believe\nthere is a single entity (which may be a cartel) which *effectively*\ncontrols between 30% and 50% of the sha-256 hashing power and is quite\nterrified of any alternative, and attempts to purchase, consume, or \neliminate any entities that might dilute it's controlled hash rate or\npose a risk of switching to a new algorithm.\n\nWe must have a system in which 1 to 10% of the hashrate can provide a\nreasonable check-and-balance and competitive pressure to 90% of the\nhash rate, or it's going to be fundamentally unstable, and we will\njust re-create 'to big to fail' all over again.\n \n> Although this is again completely orthogonal to the merged mining or\n> not discussion, hashing algorithms are often mixed in the discussions\n> against merged mining. If you had to introduce that hashing algorithm\n> hardfork change you will probably chose something with similar\n> properties than those of SHA256, like being easy to implement\n> specialized hardware for it. You could even chose a memory-hard\n> algorithm if you want to promote ASIC production centralization, but\n> you can't chose an \"anti-ASIC\" algorithm because those don't exist.\n> It is well known that any information machine that can be built with\n> software can also be built with specialized hardware and viceversa.\n> Sadly that kind of fallacy is often used to justify the ecological\n> crime that starting a new chain with no plans of doing merged mining\n> represents.\n\nYou speak of ecological crime without proposing any mechanism in which \nthe ecologically correct thing is also the economically rational thing.\n\nIf I could get real-time MISO market pricing for wind energy, I could \ndo this http://grid.coop/smartgridcmp-long.png and run a mining farm\non my farm.\n\nI would like to propose we collaborate on developing secure mechanism\nto audit energy sources for miners on a new chain called 'Ecocoin' in\nwhich the block reward is proportional to how much energy the owner\nof the newly generated block reward personally harvested from renewable\nsources.\n\nThe reward curve will have to be calibrated and adjusted to minimize\nthe over all costs and fraud risk of auditing the energy input sources.\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            }
        ],
        "thread_summary": {
            "title": "Tree-chains preliminary summary",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Troy Benjegerdes",
                "slush",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Ricardo Filipe",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 70796
        }
    },
    {
        "title": "[Bitcoin-development] Privacy-Protecting Proof of Reserves without the Moon-Math and without the backup angst",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-03-25T22:05:07",
                "message_text_only": "Introduction\n------------\n\nIn the wake of the Mt. Gox debacle merkle-sum-trees for\nproof-of-reserve(1) have been getting attention again. A serious\nobjection to using them is exchange privacy as the merkle-sum-tree\ninherently reveals the sum total of all deposits held by a given\nservice. A second, lesser, consideration is the privacy of the users'\nbalances, as changes to those balances are reflected in the tree and\nvarious levels of aggregate information can be extracted from the\nsolvency proofs. For instance consider how an attacker who had knowledge\nof a few balance changes to a particular user's account - perhaps\nbecause that attacker had deposited funds themselves - could then\ncorrolate those balance changes with changes in merkle path proofs to\ndetermine an upper bound on the victim's total balance. With some effort\nand/or luck that upper bound could be even improved to the exact account\nbalance by obtaining a solvency proof from an account adjacent to the\nvictim's account.\n\nReal or imagined the privacy problems with merkle-sum-trees pose a\nbarrier to adoption. Jesse from the exchange Kraken stated recently(2)\non reddit:\n\n    This is asking a lot of an exchange, and I don't think information\n    is worth the price you're paying in security and privacy. Your\n    interests would be better served by a private auditor's report.\n\nWhile there has been much discussion recently on #bitcoin-wizards and\nother places about applying advanced cryptographic techniques - so\ncalled \"Moon Math\" - generate zero-knowledge-proofs of blinded account\nsum trees so as to not leak any information, these techniques all suffer\nfrom implementation complexity. Fortunately private proof-of-solvency\nwithout moon math is possible without significant increase in\ncomplexity.\n\n\nObjectives\n----------\n\nFirst let's look at what exactly it is that our proof-of-solvency is\nsupposed to achieve. For expediency we'll refer to the third-parties\nproving solvency as 'banks' and start with the big picture:\n\n0) No more banks stealing everyone's money!\n\nOf course, since the banks have the private keys to the bitcoins in\nquestion the best we can actually do is much weaker:\n\n1) Prove that at some point in the past, the bank had access to a\n   private key that can be used to spend unspent txout(s) that still\n   exists now.\n\nNote how the bank may have since lost that key! But objective #1 isn't\ngood enough by itself; we also need to:\n\n2) Prove that those txout(s) have no been re-used in any other proof of\n   solvency or ownership.\n\nMost discussions about merkle-sum-trees miss this critical point. To see\nwhy it matters, consider the example of BigBank. They have a very simple\nproof-of-solvency scheme where they simply allocate one address per\ncustomer, holding at least their entire balance. To prove their solvency\nto Alice they simply sign a message:\n\n    $ btc verifymessage 13pPCfupiDhWadEXTZDnqSHm5Cy2rdUDho \\\n      ID6Wk3SDsg3os4cSWRtG13lODY84zoVYpfEC2Y4kfHqGqqZV9hy1xD5yRKCyjL0II3UwPirEVKxm5meJ3VVDW/0= \\\n      \"Hi Alice\"\n\n    true\n\nAlice checks that the txouts with that address sum up to at least as\nmany Bitcoins as her balance, sees that it does, and is satisfied\nBigBank is solvent.\n\nMeanwhile LittleBank is running short of funds, so they decide to\n\"borrow\" some from BigBank. One of their customers, Bob, asks for a\nproof-of-solvency for his balance, and LittleBank happily obliges:\n\n    $ btc verifymessage 13pPCfupiDhWadEXTZDnqSHm5Cy2rdUDho \\\n      H9af7wCdJrVIPG5Z0qrSviwAsElPkGw9v5FrUBAdaBtpeEtP/G8UdwN6KxKOytqyU7ObzcQs3qa6urHceZIXDg4= \\\n      \"Hi Bob\"\n\n    true\n\nIt's rather unlikely that Alice and Bob will compare notes so this\nreuse-fraud goes undetected.\n\n\nSolving txout reuse-fraud with per-txout commitments\n----------------------------------------------------\n\nBy committing the txout to one and only one purpose we can ensure that\nthey can't be reused for more than one proof-of-solvency. Take the\nfollowing scriptPubKey:\n\n    H(\"bigbank.com\") DROP <pubkey> CHECKSIG\n\nLittleBank in our above example can't reuse that txout as it is\nobviously not committed to them. The additional data is kinda ugly and\nlacks privacy but can be replaced with the same math used in BIP32 HD\nwallet derivation:\n\n    <pubkey + H(domain)*G> CHECKSIG\n\nor in the multisig case:\n\n    n <pubkey_1 + H(domain)*G> ... <pubkey_m + H(domain)*G> m CHECKMULTISIG\n\nThe \"domain\" must be provably globally unique; the URL of the third-party\nwould be appropriate in most cases. A simple random UUID is *not*\nsufficient as there is no good way to be sure that these UUIDs have not\nbeen reused.\n\n\nInternal reuse-fraud\n--------------------\n\nSuppose BigBank gains a second customer, Bob. After depositing some\nfunds he asks for a proof-of-solvency. BigBank has since added\nanti-reuse-fraud to their very simple one-address-per-customer scheme:\n\n    $ btc verifymessage 1HHuBBExHYqPwfgmKiBEHAGFSaLSdVayh5 \\\n      H6IJztw/QM4WjbtHl51WFo5L8rXn5aONZZvpQIo/8ORz7Yx0puLD68Z2WOCmAEvFQfpz0wYSX3D28RhevYBexpQ= \\\n      \"Hi Bob\"\n\n    true\n\nBob then goes and verifies that the address 1HHuBBE was derived from the\ndomain \"bigbank.com\", and finally verifies that the funds held at that\naddress are sufficient to cover his balance.\n\nAlice does the same thing:\n\n    $ btc verifymessage 1HHuBBExHYqPwfgmKiBEHAGFSaLSdVayh5 \\\n      H5Z1LEwagAx7s1Kj21sy98/i6/DEZpyyGDfauDVfwOUE2ewsuHqSAE1txRi5VltBs5zVoMExxMw/m4JAyXBSa+s= \\\n      \"Hi Alice\"\n\n    true\n\nNote that the addresses are the same! Again, BigBank has committed\nre-use fraud, this time internal to the service. In our simplistic\nexample of one address per customer the domain the funds are committed\nto could be extended to include Alice and Bob's usernames or email\naddresses. Again, most discussions of merkle-sum-trees gloss over this\nimportant point, and assume that \"somehow\" the bank will publish the\nmerkle root publicly, e.g. at a URL.\n\n\nMerkle-sum-forests for proof-of-solvency\n----------------------------------------\n\nRather than having a single massive tree for all accounts we can instead\nuse a forrest of merkle-sum-trees, each committed to by a single txout.\nThe leaves of that tree are still the hash of a customer ID and nonce,\nand a balance. However now the root of the tree and the bank domain is\ncommitted to in a txout. To prove solvency the bank gives the customer\nmultiple merkle-paths that together sum up to the total balance held on\ntheir behalf. Both internal and external reuse-fraud are impossible as\nthe funds are committed to the customer in question on the blockchain.\nPrivacy is protected for both the exchange and the customer. The former\nbecause there is no need to reveal total holdings. The latter by\nsplitting up the holdings among multiple tree - in many cases a given\ntree might only have one or two customers funds committed by it as well.\n\nHowever the requirement to actually make a transaction to change the\nbalances committed to is inconvenient, potentially expensive, and makes\nthe so-called \"cold storage\" warmer.\n\n\nIndirect merkle-sum-forest solvency proofs\n------------------------------------------\n\nBy adding indirection we can get the privacy of the merkle-sum-forest\napproach without the requirement of creating blockchain transactions on\nevery proof. Simply stated, if the above merkle-sum-forest is just\ncommitting to arbitrary nonces, we can create a second, ordered,\nmerklized binary radix tree whose keys are those nonces, and whose\nvalues are what customers have been assigned to the funds committed to\nby the txouts associated with the nonces. Proving to the customer their\nfunds are backed by actual Bitcoins is then a matter of given them a\nlist of nonce inclusion proofs, as well as the merkle-paths proving\nthose nonces lead to actual blockchain funds. Since the lookup tree is\nordered each nonce may only be assigned to one specific customer.\n\nLets look at this in detail with BigBank as the exchange, and Alice and\nBob as the customers. For clarity we'll use OP_DROP as before. We'll say\nBigBank has one txout:\n\n    <h1> DROP <pubkey1> CHECKSIG\n\nWhere h1 commits to (v1,H(n1 | 'BigBank')), (v2, H(n2 | 'BigBank')),\n(v3, H(n3 | BigBank)) with v's being values and n's being nonces.\nAlices's total balance is equal to v1+v2, and Bob's equal to v3, so she\ncreates nonce->customer radix tree mapping n1->Alice, n2->Alice, and\nn3->Chalie. She publishes the root of this tree publicly and\nnon-repudatably.\n\nBigBank's proof for Bob is now the two following subproofs:\n\n    Merkle path proving that n3 in nonce->customer tree\n    Merkle sum path proving that v3 allocated in txout\n\nFor Alice the proof is as above, except for n1,v1 and n2,v2.\n\n\nPractical Considerations\n------------------------\n\n1) Customers request deposit addresses, but the exchange doesn't know in\n   advance how much they are going to deposit. Those addresses should\n   commit values and nonces for use in the solvency proof, so we need to\n   define a merkle-sum-tree that operates on relative amounts rather\n   than absolute.\n\n2) We'd rather not have to spend a txout just to \"make change\" when a\n   customer's balance changes internally. Thus rather than, say, a\n   simple binary of two value decomposition in a txout, consider making\n   available duplicate values. Q) What's optimal here? Real world data\n   would help.\n\n\nDeterministic nonces and backups\n--------------------------------\n\nThere needs to be care taken in how nonces are generated - losing a\nnonce can mean losing the ability to spend the txout. What should be\ndone is for the merkle-sum-trees per txout be generated deterministicly\nusing \"sufficient\" sub values to allocate change... Which leads to a\ncurious final conclusion: we can in reality skip the actual\nmerkle-sum-trees, so to speak, and derive the actual nonces committed to\nin the nonce->customer tree from some deterministic splitting algorithm\nand the globally unique txout, specifically H(\"nonce\" | txid:n).\nEssentially the nonce->customer mapping is actually a \"part of a\ntxout\"->customer mapping, where every txout value is split into\nconvenient-sized change. We still get the privacy we want, because the\ncustomer-containing tree is not a merkle-sum tree, and we completely\nprevent fraudulent reuse, and we don't risk losing coins in the event of\na backup failure as all txout scriptPubKeys can be regenerated\ndeterministicly from a seed.\n\n\nFuture work\n-----------\n\nImplement this.\n\n\nReferences\n----------\n\n1) https://iwilcox.me.uk/2014/proving-bitcoin-reserves\n2) http://www.reddit.com/r/Bitcoin/comments/1yk4nv/please_ask_your_favorite_exchange_to_prove_that/cflqtn0\n3) Homomorphic Payment Addresses and the Pay-to-Contract Protocol,\n   Ilja Gerhardt, Timo Hanke, 13 Dec 2012\n\n\nCopyright\n---------\n\nThis document is placed in the public domain.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000039d6ffee2cd4a4162ad9bdb665abeb5f916af96dbd0b83f9\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/e21dd655/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Privacy-Protecting Proof of Reserves without the Moon-Math and without the backup angst",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 11111
        }
    },
    {
        "title": "[Bitcoin-development] Sudden temporary drop in reachable nodes?",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-26T13:07:10",
                "message_text_only": "Hey Addy,\n\nI am seeing a big drop in reachable nodes on\nhttp://getaddr.bitnodes.io/dashboard/ starting from about March 25th 7:20pm\nand coming back 9:35pm. Is this a glitch in the monitoring system or did\nsome real network event happen then?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/fcc49608/attachment.html>"
            },
            {
                "author": "Addy Yeow",
                "date": "2014-03-26T20:10:56",
                "message_text_only": "Hi Mike,\n\nThat was because I had to restart the crawler for update. This disconnects\nthe crawler from all reachable nodes temporarily and it will take about 15\nminutes (3 snapshots) before the crawler stabilize again. I will look into\nannotating these drops with a note.\n\nCheers,\nAddy\n\n\nOn Thu, Mar 27, 2014 at 12:07 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Hey Addy,\n>\n> I am seeing a big drop in reachable nodes on\n> http://getaddr.bitnodes.io/dashboard/ starting from about March 25th\n> 7:20pm and coming back 9:35pm. Is this a glitch in the monitoring system or\n> did some real network event happen then?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/77d802c0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Sudden temporary drop in reachable nodes?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Addy Yeow",
                "Mike Hearn"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1222
        }
    },
    {
        "title": "[Bitcoin-development] New BIP32 structure",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-26T20:49:39",
                "message_text_only": "Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\nour BIP32 wallet structures would be compatible - and I discovered that\nonly I was planning to use the default structure.\n\nBecause I'm hopeful that we can get a lot of interoperability between\nwallets with regards to importing 12-words paper wallets, we brainstormed\nto find a structure acceptable to everyone and ended up with:\n\n  /m/cointype/reserved'/account'/change/n\n\nThe extra levels require some explanation:\n\n   - cointype:  This is zero for Bitcoin. This is here to support two\n   things, one is supporting alt coins based off the same root seed. Right now\n   nobody seemed very bothered about alt coins but sometimes feature requests\n   do come in for this. Arguably there is no need and alt coins could just use\n   the same keys as Bitcoin, but it may help avoid confusion if they don't.\n\n   More usefully, cointype can distinguish between keys intended for things\n   like multisig outputs, e.g. for watchdog services. This means if your\n   wallet does not know about the extra protocol layers involved in this, it\n   can still import the \"raw\" money and it will just ignore/not see the keys\n   used in more complex transactions.\n\n   - reserved is for \"other stuff\". I actually don't recall why we ended up\n   with this. It may have been intended to split out multisig outputs etc from\n   cointype. Marek, Thomas?\n\n   - account is for keeping essentially wallets-within-a-wallet to avoid\n   mixing of coins. If you want that.\n\n   - change is 0 for receiving addresses, 1 for change addresses.\n\n   - n is the actual key index\n\nFor bitcoinj we're targeting a deliberately limited feature set for hdw v1\nso I would just set the first three values all to zero and that is a\nperfectly fine way to be compatible.\n\nThe goal here is that the same seed can be written down once, and meet all\nthe users needs, whilst still allowing some drift between what wallets\nsupport.\n\nPieter made the I think valid point that you can't really encode how keys\nare meant to be used into just an HDW hierarchy and normally you'd need\nsome metadata as well. However, I feel interop between wallets is more\nimportant than arriving at the most perfect possible arrangement, which\nfeels a little like bikeshedding, so I'm happy to just go with the flow on\nthis one.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/ed7506b1/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-26T23:37:46",
                "message_text_only": "Thanks for starting the discussion on finding a better structure.\n\nFor me, the most important thing is either we're 100% interoperable or\n0%. There should not be anything inbetween, as users will delete seeds\nwithout knowing there is still money in them on another implementation.\nI heard from multiple sources that using this standard some wallets will\nonly see a subset of the addresses/keys of some other wallets.\nImplementation differences can always happen (and should addresses as\nbugs), but I think its unacceptable that this source of issues is by design.\n\nI suggest we agree on an even simpler least common denominator and\nwallets that want to implement some feature on top of that can do but\nare encouraged to pick a totally different \"cointype\". I guess that\nwould mean removing reserved and account.\n\nI'm still thinking it might be a good idea to have a separate chain for\n\"refunds\". Refunds will be rarely used and thus need a much slower\nmoving window than receiving addresses or change.\n\n\nOn 03/26/2014 09:49 PM, Mike Hearn wrote:\n> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n> our BIP32 wallet structures would be compatible - and I discovered that\n> only I was planning to use the default structure.\n> \n> Because I'm hopeful that we can get a lot of interoperability between\n> wallets with regards to importing 12-words paper wallets, we\n> brainstormed to find a structure acceptable to everyone and ended up with:\n> \n>   /m/cointype/reserved'/account'/change/n\n> \n> The extra levels require some explanation:\n> \n>   * cointype:  This is zero for Bitcoin. This is here to support two\n>     things, one is supporting alt coins based off the same root seed.\n>     Right now nobody seemed very bothered about alt coins but sometimes\n>     feature requests do come in for this. Arguably there is no need and\n>     alt coins could just use the same keys as Bitcoin, but it may help\n>     avoid confusion if they don't.\n> \n>     More usefully, cointype can distinguish between keys intended for\n>     things like multisig outputs, e.g. for watchdog services. This means\n>     if your wallet does not know about the extra protocol layers\n>     involved in this, it can still import the \"raw\" money and it will\n>     just ignore/not see the keys used in more complex transactions.\n> \n>   * reserved is for \"other stuff\". I actually don't recall why we ended\n>     up with this. It may have been intended to split out multisig\n>     outputs etc from cointype. Marek, Thomas?\n> \n>   * account is for keeping essentially wallets-within-a-wallet to avoid\n>     mixing of coins. If you want that.\n> \n>   * change is 0 for receiving addresses, 1 for change addresses.\n> \n>   * n is the actual key index\n> \n> For bitcoinj we're targeting a deliberately limited feature set for hdw\n> v1 so I would just set the first three values all to zero and that is a\n> perfectly fine way to be compatible.\n> \n> The goal here is that the same seed can be written down once, and meet\n> all the users needs, whilst still allowing some drift between what\n> wallets support.\n> \n> Pieter made the I think valid point that you can't really encode how\n> keys are meant to be used into just an HDW hierarchy and normally you'd\n> need some metadata as well. However, I feel interop between wallets is\n> more important than arriving at the most perfect possible arrangement,\n> which feels a little like bikeshedding, so I'm happy to just go with the\n> flow on this one.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-27T01:01:40",
                "message_text_only": "This might be tangential, but the comment about \"refund\" chains reminded\nme.  Armory will be implementing multi-sig/linked wallets where a each\ndevice has a parallel HDW branch and produces P2SH addresses.  For those\ntypes of wallets, I plan to allocate two chains /per signing\nauthority/.  If you have a shared 2-of-2 wallet split between your phone\nand your spouse's phone, your phone would distribute addresses on P2SH\nchain 0 and generate change addresses on P2SH chain 1.  Your spouse's\nphone would use chains 2 and 3.\n\nSo if you and your spouse switch to a new app that supports M-of-N\nlinked wallets, it should search for coin history along the first 2*N\nchains.\n-Alan\n\n\n\nOn 03/26/2014 07:37 PM, Andreas Schildbach wrote:\n> Thanks for starting the discussion on finding a better structure.\n>\n> For me, the most important thing is either we're 100% interoperable or\n> 0%. There should not be anything inbetween, as users will delete seeds\n> without knowing there is still money in them on another implementation.\n> I heard from multiple sources that using this standard some wallets will\n> only see a subset of the addresses/keys of some other wallets.\n> Implementation differences can always happen (and should addresses as\n> bugs), but I think its unacceptable that this source of issues is by design.\n>\n> I suggest we agree on an even simpler least common denominator and\n> wallets that want to implement some feature on top of that can do but\n> are encouraged to pick a totally different \"cointype\". I guess that\n> would mean removing reserved and account.\n>\n> I'm still thinking it might be a good idea to have a separate chain for\n> \"refunds\". Refunds will be rarely used and thus need a much slower\n> moving window than receiving addresses or change.\n>\n>\n> On 03/26/2014 09:49 PM, Mike Hearn wrote:\n>> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n>> our BIP32 wallet structures would be compatible - and I discovered that\n>> only I was planning to use the default structure.\n>>\n>> Because I'm hopeful that we can get a lot of interoperability between\n>> wallets with regards to importing 12-words paper wallets, we\n>> brainstormed to find a structure acceptable to everyone and ended up with:\n>>\n>>   /m/cointype/reserved'/account'/change/n\n>>\n>> The extra levels require some explanation:\n>>\n>>   * cointype:  This is zero for Bitcoin. This is here to support two\n>>     things, one is supporting alt coins based off the same root seed.\n>>     Right now nobody seemed very bothered about alt coins but sometimes\n>>     feature requests do come in for this. Arguably there is no need and\n>>     alt coins could just use the same keys as Bitcoin, but it may help\n>>     avoid confusion if they don't.\n>>\n>>     More usefully, cointype can distinguish between keys intended for\n>>     things like multisig outputs, e.g. for watchdog services. This means\n>>     if your wallet does not know about the extra protocol layers\n>>     involved in this, it can still import the \"raw\" money and it will\n>>     just ignore/not see the keys used in more complex transactions.\n>>\n>>   * reserved is for \"other stuff\". I actually don't recall why we ended\n>>     up with this. It may have been intended to split out multisig\n>>     outputs etc from cointype. Marek, Thomas?\n>>\n>>   * account is for keeping essentially wallets-within-a-wallet to avoid\n>>     mixing of coins. If you want that.\n>>\n>>   * change is 0 for receiving addresses, 1 for change addresses.\n>>\n>>   * n is the actual key index\n>>\n>> For bitcoinj we're targeting a deliberately limited feature set for hdw\n>> v1 so I would just set the first three values all to zero and that is a\n>> perfectly fine way to be compatible.\n>>\n>> The goal here is that the same seed can be written down once, and meet\n>> all the users needs, whilst still allowing some drift between what\n>> wallets support.\n>>\n>> Pieter made the I think valid point that you can't really encode how\n>> keys are meant to be used into just an HDW hierarchy and normally you'd\n>> need some metadata as well. However, I feel interop between wallets is\n>> more important than arriving at the most perfect possible arrangement,\n>> which feels a little like bikeshedding, so I'm happy to just go with the\n>> flow on this one.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/35055a7c/attachment.html>"
            },
            {
                "author": "Mike Belshe",
                "date": "2014-03-27T06:15:50",
                "message_text_only": "On Wed, Mar 26, 2014 at 6:01 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>  This might be tangential, but the comment about \"refund\" chains reminded\n> me.  Armory will be implementing multi-sig/linked wallets where a each\n> device has a parallel HDW branch and produces P2SH addresses.  For those\n> types of wallets, I plan to allocate two chains *per signing authority*.\n> If you have a shared 2-of-2 wallet split between your phone and your\n> spouse's phone, your phone would distribute addresses on P2SH chain 0 and\n> generate change addresses on P2SH chain 1.  Your spouse's phone would use\n> chains 2 and 3.\n>\n> So if you and your spouse switch to a new app that supports M-of-N linked\n> wallets, it should search for coin history along the first 2*N chains.\n>\n\nIn general with multisig, we should probably discourage using a common root\nkeychain for multiple keys in the same P2SH address.  The reason is because\nif you have the single, root private key, you can sign them all. This\ngenerally goes against the point of multisig - which was trying to\nintroduce a system which had multiple keys required to unlock :-)\n\nFor the BitGo BIP32 implementation we are doing the following:\n   - users create 2 extended keys\n   - bitgo creates 1 extended key for that user\n   - the user can create any number of separate branches (accounts) of P2SH\naddresses from those extended keys.\n   - change/public addresses are generated from the 0/1 branches\n   - new addresses are generated from there.\n   - each time a new change address is generated, all 3 keys in the P2SH\nare rotated.  This makes it so that for any chain depth *i* of the P2SH\naddress, we're using the *i*th key in each keychain.  For privacy reasons,\nwe don't need to rotate all keys.  But I think it makes management simpler\nand probably more ready for interop.\n\nSo the paths in a user's keychain look exactly like BIP32's layout:\n     m/<AccountIndex>/<ExternalOrInternal>/<AddressIndex>\n\nAnother issue unique to P2SH addresses is order of the keys. There has been\ntalk in this list of how to sort them.  While sorting is simplifying for\ninterop if you never use new change addresses, I believe sorting makes\nwallet management more difficult when BIP32 is introduced.\n\nSpecifically, imagine a P2SH address with keys held by Bob, Charlie, and\nDana.  If you sort the pubkeys, then with each BIP32 chain, the order of\nthe keys could be different.  By maintaining key order, we always know\nwhich of the pubkeys belongs to which user without having to do any lookups.\n\nObviously this can all be calculated too.  But the sorting seems gratuitous\nto me - it adds complexity but offers little value.  On the other hand, it\ncan be really handy to know that key #0 for this address is always Bob's\nkey, regardless of how deep the chaining goes.\n\nMike\n\n\n\n>\n> -Alan\n>\n>\n>\n>\n> On 03/26/2014 07:37 PM, Andreas Schildbach wrote:\n>\n> Thanks for starting the discussion on finding a better structure.\n>\n> For me, the most important thing is either we're 100% interoperable or\n> 0%. There should not be anything inbetween, as users will delete seeds\n> without knowing there is still money in them on another implementation.\n> I heard from multiple sources that using this standard some wallets will\n> only see a subset of the addresses/keys of some other wallets.\n> Implementation differences can always happen (and should addresses as\n> bugs), but I think its unacceptable that this source of issues is by design.\n>\n> I suggest we agree on an even simpler least common denominator and\n> wallets that want to implement some feature on top of that can do but\n> are encouraged to pick a totally different \"cointype\". I guess that\n> would mean removing reserved and account.\n>\n> I'm still thinking it might be a good idea to have a separate chain for\n> \"refunds\". Refunds will be rarely used and thus need a much slower\n> moving window than receiving addresses or change.\n>\n>\n> On 03/26/2014 09:49 PM, Mike Hearn wrote:\n>\n>  Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n> our BIP32 wallet structures would be compatible - and I discovered that\n> only I was planning to use the default structure.\n>\n> Because I'm hopeful that we can get a lot of interoperability between\n> wallets with regards to importing 12-words paper wallets, we\n> brainstormed to find a structure acceptable to everyone and ended up with:\n>\n>   /m/cointype/reserved'/account'/change/n\n>\n> The extra levels require some explanation:\n>\n>   * cointype:  This is zero for Bitcoin. This is here to support two\n>     things, one is supporting alt coins based off the same root seed.\n>     Right now nobody seemed very bothered about alt coins but sometimes\n>     feature requests do come in for this. Arguably there is no need and\n>     alt coins could just use the same keys as Bitcoin, but it may help\n>     avoid confusion if they don't.\n>\n>     More usefully, cointype can distinguish between keys intended for\n>     things like multisig outputs, e.g. for watchdog services. This means\n>     if your wallet does not know about the extra protocol layers\n>     involved in this, it can still import the \"raw\" money and it will\n>     just ignore/not see the keys used in more complex transactions.\n>\n>   * reserved is for \"other stuff\". I actually don't recall why we ended\n>     up with this. It may have been intended to split out multisig\n>     outputs etc from cointype. Marek, Thomas?\n>\n>   * account is for keeping essentially wallets-within-a-wallet to avoid\n>     mixing of coins. If you want that.\n>\n>   * change is 0 for receiving addresses, 1 for change addresses.\n>\n>   * n is the actual key index\n>\n> For bitcoinj we're targeting a deliberately limited feature set for hdw\n> v1 so I would just set the first three values all to zero and that is a\n> perfectly fine way to be compatible.\n>\n> The goal here is that the same seed can be written down once, and meet\n> all the users needs, whilst still allowing some drift between what\n> wallets support.\n>\n> Pieter made the I think valid point that you can't really encode how\n> keys are meant to be used into just an HDW hierarchy and normally you'd\n> need some metadata as well. However, I feel interop between wallets is\n> more important than arriving at the most perfect possible arrangement,\n> which feels a little like bikeshedding, so I'm happy to just go with the\n> flow on this one.\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>  ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/3f6fcb3b/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T10:57:42",
                "message_text_only": "Le 27/03/2014 00:37, Andreas Schildbach a \u00e9crit :\n> Thanks for starting the discussion on finding a better structure.\n>\n> For me, the most important thing is either we're 100% interoperable or\n> 0%. There should not be anything inbetween, as users will delete seeds\n> without knowing there is still money in them on another implementation.\n\nI believe you have a good point here: we should not advertise wallets as\ncompatible if they are not 100% compatible.\n\nOne issue that I have is bandwidth: Electrum (and mycelium) cannot\nwatch as many addresses as they want, because this will create too\nmuch traffic on the servers. (especially when servers send utxo merkle\nproofs for each address, which is not the case yet, but is planned)\n\nFor this reason Electrum imposes a constraint on the number of virgin\naddresses provided to the user. Although the current strategy used by\nElectrum can certainly be improved, it will not scale up to having every\nclient watching thousands of addresses.\n\nThis constraint is not so important for bloom-filter clients. So I guess \nthat\nit makes sense for Multibit to provide hundreds, or even thousands of \nvirgin\naddresses to the user, regardless of how they are used. Such a wallet will\nin general not be recoverable in Electrum, unless the user \"helps\" the\nrecovery procedure. (or the seed has metadata telling the software that\nthis is a Multibit wallet). So we have a problem here, if we advertise \nthese\nwallets as compatible.\n\nMy opinion, as far as Electrum is concerned, is that merchant accounts\nshould behave differently from regular user accounts: While merchants\nneed to generate an unlimited number of receiving addresses, it is also\nacceptable for them to have a slightly more complex wallet recovery \nprocedure\n(for example, the wallet might show an option to \"search for more \naddresses\",\nand it might not need to watch \"old\" addresses anymore)\n\nOTOH, I don't think we can ask regular users to do this, not only \nbecause it\nadds complexity to the wallet recovery procedure (which makes it scarier),\nbut also because we want fully automated synchronization between different\ninstances of a wallet, using only no other source of information than \nthe blockchain.\n\nThe first versions of Electrum allowed users to set the \"gap limit\" \nparameter\nin their GUI preferences, but I removed it from GUI after I realized it \nwas a bad\nidea (users messed with it and did not understand what happened..)\n\nWith bloom filter clients I guess the distinction between these two use \ncases\nis not really necessary, because watching addresses is cheap. So it \nwould be\ngood to hear what you and Mike think about this problem. If you decide \nto let\nthe user create hundreds of unused addresses (and I think it perfectly \nmakes\nsense for you), then I guess it would be better for Electrum to give up on\ncompatibility, rather than running the risk of seeing only a subset of \naddresses.\nAnother option is to handle these seeds as \"merchant\" accounts.\n\n\n\n\n> I heard from multiple sources that using this standard some wallets will\n> only see a subset of the addresses/keys of some other wallets.\n> Implementation differences can always happen (and should addresses as\n> bugs), but I think its unacceptable that this source of issues is by design.\n>\n> I suggest we agree on an even simpler least common denominator and\n> wallets that want to implement some feature on top of that can do but\n> are encouraged to pick a totally different \"cointype\". I guess that\n> would mean removing reserved and account.\n\n>\n> I'm still thinking it might be a good idea to have a separate chain for\n> \"refunds\". Refunds will be rarely used and thus need a much slower\n> moving window than receiving addresses or change.\n>\n>\n> On 03/26/2014 09:49 PM, Mike Hearn wrote:\n>> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n>> our BIP32 wallet structures would be compatible - and I discovered that\n>> only I was planning to use the default structure.\n>>\n>> Because I'm hopeful that we can get a lot of interoperability between\n>> wallets with regards to importing 12-words paper wallets, we\n>> brainstormed to find a structure acceptable to everyone and ended up with:\n>>\n>>    /m/cointype/reserved'/account'/change/n\n>>\n>> The extra levels require some explanation:\n>>\n>>    * cointype:  This is zero for Bitcoin. This is here to support two\n>>      things, one is supporting alt coins based off the same root seed.\n>>      Right now nobody seemed very bothered about alt coins but sometimes\n>>      feature requests do come in for this. Arguably there is no need and\n>>      alt coins could just use the same keys as Bitcoin, but it may help\n>>      avoid confusion if they don't.\n>>\n>>      More usefully, cointype can distinguish between keys intended for\n>>      things like multisig outputs, e.g. for watchdog services. This means\n>>      if your wallet does not know about the extra protocol layers\n>>      involved in this, it can still import the \"raw\" money and it will\n>>      just ignore/not see the keys used in more complex transactions.\n>>\n>>    * reserved is for \"other stuff\". I actually don't recall why we ended\n>>      up with this. It may have been intended to split out multisig\n>>      outputs etc from cointype. Marek, Thomas?\n>>\n>>    * account is for keeping essentially wallets-within-a-wallet to avoid\n>>      mixing of coins. If you want that.\n>>\n>>    * change is 0 for receiving addresses, 1 for change addresses.\n>>\n>>    * n is the actual key index\n>>\n>> For bitcoinj we're targeting a deliberately limited feature set for hdw\n>> v1 so I would just set the first three values all to zero and that is a\n>> perfectly fine way to be compatible.\n>>\n>> The goal here is that the same seed can be written down once, and meet\n>> all the users needs, whilst still allowing some drift between what\n>> wallets support.\n>>\n>> Pieter made the I think valid point that you can't really encode how\n>> keys are meant to be used into just an HDW hierarchy and normally you'd\n>> need some metadata as well. However, I feel interop between wallets is\n>> more important than arriving at the most perfect possible arrangement,\n>> which feels a little like bikeshedding, so I'm happy to just go with the\n>> flow on this one.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T11:39:21",
                "message_text_only": ">\n> One issue that I have is bandwidth: Electrum (and mycelium) cannot\n> watch as many addresses as they want, because this will create too\n> much traffic on the servers. (especially when servers send utxo merkle\n> proofs for each address, which is not the case yet, but is planned)\n>\n\nThis is surprising and the first time I've heard about this. Surely your\nconstraint is CPU or disk seeks? Addresses are small, I find it hard to\nbelieve that clients uploading them is a big drain, and mostly addresses\nthat are in the lookahead region won't have any hits and so won't result in\nany downloads?\n\nThis constraint is not so important for bloom-filter clients.\n\n\nBloom filters are a neat way to encode addresses and keys but they don't\nmagically let clients save bandwidth. A smaller filter results in less\nupload bandwidth but more download (from the wallets perspective). So I'm\nworried if you think this will be an issue for your clients: I haven't\ninvestigated bandwidth usage deeply yet, perhaps I should.\n\nFWIW the current bitcoinj HDW alpha preview pre-gens 100 addresses on both\nreceive and change branches. But I'm not sure what the right setting is.\n\nWe also have to consider latency. The simplest implementation from a\nwallets POV is to step through each transaction in the block chain one at a\ntime, and each time you see an address that is yours, calculate the next\nones in the chain. But that would be fantastically slow, so we must instead\npre-generate a larger lookahead region and request more data in one batch.\nThen you have to recover if that batch ends up using all the pre-genned\naddresses. It's just painful.\n\n\n> My opinion, as far as Electrum is concerned, is that merchant accounts\n> should behave differently from regular user accounts: While merchants\n> need to generate an unlimited number of receiving addresses, it is also\n> acceptable for them to have a slightly more complex wallet recovery\n> procedure\n>\n\nMaybe. I dislike any distinction between users and merchants though. I\ndon't think it's really safe to assume merchants are more sophisticated\nthan end users.\n\n\n> but also because we want fully automated synchronization between different\n> instances of a wallet, using only no other source of information than\n> the blockchain.\n>\n\nI think such synchronization won't be possible as we keep adding features,\nbecause the block chain cannot sync all the relevant data. For instance\nElectrum already has a label sync feature. Other wallets need to compete\nwith that, somehow, so we need to build a way to do cross-device wallet\nsync with non-chain data.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/41aaeab9/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T13:30:18",
                "message_text_only": "Le 27/03/2014 12:39, Mike Hearn a \u00e9crit :\n>     One issue that I have is bandwidth: Electrum (and mycelium) cannot\n>     watch as many addresses as they want, because this will create too\n>     much traffic on the servers. (especially when servers send utxo merkle\n>     proofs for each address, which is not the case yet, but is planned)\n>\n>\n> This is surprising and the first time I've heard about this. Surely your\n> constraint is CPU or disk seeks? Addresses are small, I find it hard to\n> believe that clients uploading them is a big drain, and mostly addresses\n> that are in the lookahead region won't have any hits and so won't result\n> in any downloads?\n\n\nTo be honest, I have not carried out a comprehensive examination of \nserver performance. What I can see is that Electrum servers are often \nslowed down when a wallet with a large number (thousands) of addresses \nshows up, and this is caused by disk seeks (especially on my slow VPS).\n\nThe master branch of electrum-server is also quite wasteful in terms of \nCPU, because it uses client threads. I have another branch that uses a \nsocket poller, but that branch is not widely deployed yet.\n\nI reckon that I might have been a bit too conservative, in setting the \nnumber of unused receiving addresses watched by Electrum clients (until \nnow, the default \"gap limit\" has always been 5). The reason is that, if \nI increase that number, then there is no way to go back to a smaller \nvalue, because it needs to be compatible with all previously released \nversions. However, Electrum servers performance has improved over time, \nso I guess it could safely be raised to 20 (see previous post to slush).\n\nIn terms of bandwidth, I am referring to my Android version of Electrum. \nWhen it runs on a 3G connection, it sometimes takes up to 1 minute to \nsynchronize (with a wallet that has hundreds of addresses). However, I \nhave not checked if this was caused by addresses or block headers.\n\n\n\n>\n>     This constraint is not so important for bloom-filter clients.\n>\n>\n> Bloom filters are a neat way to encode addresses and keys but they don't\n> magically let clients save bandwidth. A smaller filter results in less\n> upload bandwidth but more download (from the wallets perspective). So\n> I'm worried if you think this will be an issue for your clients: I\n> haven't investigated bandwidth usage deeply yet, perhaps I should.\n>\n> FWIW the current bitcoinj HDW alpha preview pre-gens 100 addresses on\n> both receive and change branches. But I'm not sure what the right\n> setting is.\n\n\nHeh, may I suggest 20 in the receive branch?\n\nFor the change branch, there is no need to watch a large number of \nunused addresses, because the wallet should try to fill all the gaps in \nthe sequence of change.\n\n(Electrum does that. It also watches 3 unused addresses at the end of \nthat sequence, in order to cope with possible blockchain reorgs causing \ngaps. As an extra safety, it also waits for 3 confirmations before using \na new change address, which sometimes results in address reuse, but I \nguess a smarter strategy could avoid that).\n\n\n\n>\n> We also have to consider latency. The simplest implementation from a\n> wallets POV is to step through each transaction in the block chain one\n> at a time, and each time you see an address that is yours, calculate the\n> next ones in the chain. But that would be fantastically slow, so we must\n> instead pre-generate a larger lookahead region and request more data in\n> one batch. Then you have to recover if that batch ends up using all the\n> pre-genned addresses. It's just painful.\n\n\n\n>\n>     My opinion, as far as Electrum is concerned, is that merchant accounts\n>     should behave differently from regular user accounts: While merchants\n>     need to generate an unlimited number of receiving addresses, it is also\n>     acceptable for them to have a slightly more complex wallet recovery\n>     procedure\n>\n>\n> Maybe. I dislike any distinction between users and merchants though. I\n> don't think it's really safe to assume merchants are more sophisticated\n> than end users.\n\nwell, it depends what we mean by \"merchant\". I was thinking more of a \nwebsite running a script, rather than a brick and mortar ice cream \nseller. :)\n\n\n>\n>     but also because we want fully automated synchronization between\n>     different\n>     instances of a wallet, using only no other source of information than\n>     the blockchain.\n>\n>\n> I think such synchronization won't be possible as we keep adding\n> features, because the block chain cannot sync all the relevant data. For\n> instance Electrum already has a label sync feature. Other wallets need\n> to compete with that, somehow, so we need to build a way to do\n> cross-device wallet sync with non-chain data.\n\nOh, I was not referring to label sync, but only to the synchronization \nof the list of addresses in the wallet. Label sync is an Electrum plugin \nthat relies on a centralized server. Using a third party server is \nacceptable in that case, IMO, because you will not lose your coins if \nthe server fails."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T13:38:36",
                "message_text_only": ">\n> To be honest, I have not carried out a comprehensive examination of\n> server performance. What I can see is that Electrum servers are often\n> slowed down when a wallet with a large number (thousands) of addresses\n> shows up, and this is caused by disk seeks (especially on my slow VPS).\n>\n\nYes that sounds more like what I expected.\n\n\n> In terms of bandwidth, I am referring to my Android version of Electrum.\n> When it runs on a 3G connection, it sometimes takes up to 1 minute to\n> synchronize (with a wallet that has hundreds of addresses). However, I\n> have not checked if this was caused by addresses or block headers.\n>\n\nAn address is 160 bits. (1000 * 160) / 8 / 1024 = 19.5 kilobytes of data\nwhich 3G should be able to transfer in <1 second easily. Of course the\nencoding may not be optimal. But if it is, I suspect the issue is elsewhere.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/70f4cdce/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-27T01:13:16",
                "message_text_only": "For every branch (say multiple accounts), how would a new wallet be able to\nknow how many sequence items to scan?  It seems like not only do you need\nto have standard rules for the hierarchy, but how the usage can be\ndetected.  The other scanning seems pretty straightforward.  For accounts,\nit seems like you could have a situation where you want to initially set up\n10 different accounts, but only account #10 gets any transactions.  If a\nnew wallet was trying to scan with this seed, it would have to know to keep\nscanning each account until it found the account.  The user would have to\nbe responsible for knowing how many accounts there are, or some rules would\nneed to be in place to not allow creating accounts until earlier accounts\ncan be proven to have existed in the blockchain.  Or I am missing something.\n\n-Allen\n\nOn Wed, Mar 26, 2014 at 3:49 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n> our BIP32 wallet structures would be compatible - and I discovered that\n> only I was planning to use the default structure.\n>\n> Because I'm hopeful that we can get a lot of interoperability between\n> wallets with regards to importing 12-words paper wallets, we brainstormed\n> to find a structure acceptable to everyone and ended up with:\n>\n>   /m/cointype/reserved'/account'/change/n\n>\n> The extra levels require some explanation:\n>\n>    - cointype:  This is zero for Bitcoin. This is here to support two\n>    things, one is supporting alt coins based off the same root seed. Right now\n>    nobody seemed very bothered about alt coins but sometimes feature requests\n>    do come in for this. Arguably there is no need and alt coins could just use\n>    the same keys as Bitcoin, but it may help avoid confusion if they don't.\n>\n>    More usefully, cointype can distinguish between keys intended for\n>    things like multisig outputs, e.g. for watchdog services. This means if\n>    your wallet does not know about the extra protocol layers involved in this,\n>    it can still import the \"raw\" money and it will just ignore/not see the\n>    keys used in more complex transactions.\n>\n>    - reserved is for \"other stuff\". I actually don't recall why we ended\n>    up with this. It may have been intended to split out multisig outputs etc\n>    from cointype. Marek, Thomas?\n>\n>    - account is for keeping essentially wallets-within-a-wallet to avoid\n>    mixing of coins. If you want that.\n>\n>    - change is 0 for receiving addresses, 1 for change addresses.\n>\n>    - n is the actual key index\n>\n> For bitcoinj we're targeting a deliberately limited feature set for hdw v1\n> so I would just set the first three values all to zero and that is a\n> perfectly fine way to be compatible.\n>\n> The goal here is that the same seed can be written down once, and meet all\n> the users needs, whilst still allowing some drift between what wallets\n> support.\n>\n> Pieter made the I think valid point that you can't really encode how keys\n> are meant to be used into just an HDW hierarchy and normally you'd need\n> some metadata as well. However, I feel interop between wallets is more\n> important than arriving at the most perfect possible arrangement, which\n> feels a little like bikeshedding, so I'm happy to just go with the flow on\n> this one.\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/48a94563/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-27T05:34:46",
                "message_text_only": "On Wed, Mar 26, 2014 at 09:49:39PM +0100, Mike Hearn wrote:\n> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n> our BIP32 wallet structures would be compatible - and I discovered that\n> only I was planning to use the default structure.\n> \n> Because I'm hopeful that we can get a lot of interoperability between\n> wallets with regards to importing 12-words paper wallets, we brainstormed\n> to find a structure acceptable to everyone and ended up with:\n> \n>   /m/cointype/reserved'/account'/change/n\n> \n> The extra levels require some explanation:\n> \n>    - cointype:  This is zero for Bitcoin. This is here to support two\n>    things, one is supporting alt coins based off the same root seed. Right now\n>    nobody seemed very bothered about alt coins but sometimes feature requests\n>    do come in for this. Arguably there is no need and alt coins could just use\n>    the same keys as Bitcoin, but it may help avoid confusion if they don't.\n\nUsing the same keys across different altcoins seems like an exceedingly bad opsec\npractice. Cointype is critical, as well as having a predictable and deterministic\nmapping of alt coins to Cointype.\n\nWhat should I be using for Catcoin, for instance? the CAT symbol all the \nexchanges use, or do we set up a 'registry', or some other mechanism?\n\nI'd venture to guess the altcoin market is, or soon will be larger in US\ndollar value trade volume than Bitcoin, so *some* of us are quite bothered\nby the wailing and gnashing of teeth that occurs on this list at mere thought\nof such heresy.\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-27T07:09:06",
                "message_text_only": "We had a similar meeting with Andreas Schildbach (Android Bitcoin Wallet), Jan Moller, Andreas  Petersson (Mycelium), Thomas V (Electrum), Tamas Blummer, Tamas Bartfai (Bits of Proof)\nat the Inside Bitcoin Conference in Berlin.\n\nI remember that there were different opinions on how to use a hierarchy and it did seem to me they could eventually be \"standardized\" for the retail customer but definitelly not for corporate use,\nwhere hierarchy will certainly map to organisational hierarchy or cost centres.\n\nA notable suggestion was to instead of building a directory of magic numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word \"Bitcoin\", \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\ncetral directory is not needed.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 26.03.2014, at 21:49, Mike Hearn <mike at plan99.net> wrote:\n\n> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure our BIP32 wallet structures would be compatible - and I discovered that only I was planning to use the default structure.\n> \n> Because I'm hopeful that we can get a lot of interoperability between wallets with regards to importing 12-words paper wallets, we brainstormed to find a structure acceptable to everyone and ended up with:\n> \n>   /m/cointype/reserved'/account'/change/n\n> \n> The extra levels require some explanation:\n> cointype:  This is zero for Bitcoin. This is here to support two things, one is supporting alt coins based off the same root seed. Right now nobody seemed very bothered about alt coins but sometimes feature requests do come in for this. Arguably there is no need and alt coins could just use the same keys as Bitcoin, but it may help avoid confusion if they don't.\n> \n> More usefully, cointype can distinguish between keys intended for things like multisig outputs, e.g. for watchdog services. This means if your wallet does not know about the extra protocol layers involved in this, it can still import the \"raw\" money and it will just ignore/not see the keys used in more complex transactions.\n> \n> reserved is for \"other stuff\". I actually don't recall why we ended up with this. It may have been intended to split out multisig outputs etc from cointype. Marek, Thomas?\n> \n> account is for keeping essentially wallets-within-a-wallet to avoid mixing of coins. If you want that.\n> \n> change is 0 for receiving addresses, 1 for change addresses.\n> \n> n is the actual key index\n> For bitcoinj we're targeting a deliberately limited feature set for hdw v1 so I would just set the first three values all to zero and that is a perfectly fine way to be compatible.\n> \n> The goal here is that the same seed can be written down once, and meet all the users needs, whilst still allowing some drift between what wallets support.\n> \n> Pieter made the I think valid point that you can't really encode how keys are meant to be used into just an HDW hierarchy and normally you'd need some metadata as well. However, I feel interop between wallets is more important than arriving at the most perfect possible arrangement, which feels a little like bikeshedding, so I'm happy to just go with the flow on this one.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/6c47bae7/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/6c47bae7/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T09:42:19",
                "message_text_only": "At this point I'm not sure how much further work people want to do on this:\nI got the impression that Trezor will ship soon, and Thomas V seemed\nsatisfied too. I'm not sure we can get all wallets to be fully\ninteroperable given the flexibility inherent in BIP32 and people's\ndiffering use cases.\n\nAndreas: good point but I really hope nobody ever deletes a seed after all\nthis work we put in to make backups so easy! I'm not sure we can really\nstop it anyway: not unless we make the seed a full blown data structure\nwith hints to other apps that they should refuse to load it. And it's a bit\nlate for that now.\n\n\n\nOn Thu, Mar 27, 2014 at 8:09 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> We had a similar meeting with Andreas Schildbach (Android Bitcoin Wallet),\n> Jan Moller, Andreas  Petersson (Mycelium), Thomas V (Electrum), Tamas\n> Blummer, Tamas Bartfai (Bits of Proof)\n> at the Inside Bitcoin Conference in Berlin.\n>\n> I remember that there were different opinions on how to use a hierarchy\n> and it did seem to me they could eventually be \"standardized\" for the\n> retail customer but definitelly not for corporate use,\n> where hierarchy will certainly map to organisational hierarchy or cost\n> centres.\n>\n> A notable suggestion was to instead of building a directory of magic\n> numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word\n> \"Bitcoin\", \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n> cetral directory is not needed.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 26.03.2014, at 21:49, Mike Hearn <mike at plan99.net> wrote:\n>\n> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure\n> our BIP32 wallet structures would be compatible - and I discovered that\n> only I was planning to use the default structure.\n>\n> Because I'm hopeful that we can get a lot of interoperability between\n> wallets with regards to importing 12-words paper wallets, we brainstormed\n> to find a structure acceptable to everyone and ended up with:\n>\n>   /m/cointype/reserved'/account'/change/n\n>\n> The extra levels require some explanation:\n>\n>    - cointype:  This is zero for Bitcoin. This is here to support two\n>    things, one is supporting alt coins based off the same root seed. Right now\n>    nobody seemed very bothered about alt coins but sometimes feature requests\n>    do come in for this. Arguably there is no need and alt coins could just use\n>    the same keys as Bitcoin, but it may help avoid confusion if they don't.\n>\n>    More usefully, cointype can distinguish between keys intended for\n>    things like multisig outputs, e.g. for watchdog services. This means if\n>    your wallet does not know about the extra protocol layers involved in this,\n>    it can still import the \"raw\" money and it will just ignore/not see the\n>    keys used in more complex transactions.\n>\n>    - reserved is for \"other stuff\". I actually don't recall why we ended\n>    up with this. It may have been intended to split out multisig outputs etc\n>    from cointype. Marek, Thomas?\n>\n>    - account is for keeping essentially wallets-within-a-wallet to avoid\n>    mixing of coins. If you want that.\n>\n>    - change is 0 for receiving addresses, 1 for change addresses.\n>\n>    - n is the actual key index\n>\n> For bitcoinj we're targeting a deliberately limited feature set for hdw v1\n> so I would just set the first three values all to zero and that is a\n> perfectly fine way to be compatible.\n>\n> The goal here is that the same seed can be written down once, and meet all\n> the users needs, whilst still allowing some drift between what wallets\n> support.\n>\n> Pieter made the I think valid point that you can't really encode how keys\n> are meant to be used into just an HDW hierarchy and normally you'd need\n> some metadata as well. However, I feel interop between wallets is more\n> important than arriving at the most perfect possible arrangement, which\n> feels a little like bikeshedding, so I'm happy to just go with the flow on\n> this one.\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/29aa93a8/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T11:35:15",
                "message_text_only": "On 03/27/2014 08:09 AM, Tamas Blummer wrote:\n> A notable suggestion was to instead of building a directory of magic numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word \"Bitcoin\", \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n> cetral directory is not needed.\n\nNice idea, but keep in mind that you are hashing into 2^32 space, so\ncollisions will occur, unfortunately and we'll end up with directory\nagain :-/\n\nEven if they did not occur you would need to keep up the registry of\nnames anyway (is it Peercoin or PPCoin, Testnet or TestNet ...)?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-27T15:43:09",
                "message_text_only": "On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> A notable suggestion was to instead of building a directory of magic numbers\n> (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word \"Bitcoin\",\n> \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n> cetral directory is not needed.\n\n+1 good idea\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-27T15:57:51",
                "message_text_only": "Don't most of these coins have a magic number already assigned that is\nunique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for\nLitecoin, etc...).  This seems like a good candidate for identifying coins,\nand also supports Testnet cases well.  Maybe there are some alts without\nsuch a magic number that might prevent that?\n\n-Allen\n\n\nOn Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com>\n> wrote:\n> > A notable suggestion was to instead of building a directory of magic\n> numbers\n> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word\n> \"Bitcoin\",\n> > \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n> > cetral directory is not needed.\n>\n> +1 good idea\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/acb6e25e/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T16:06:20",
                "message_text_only": "On 03/27/2014 04:57 PM, Allen Piscitello wrote:\n> Don't most of these coins have a magic number already assigned that is\n> unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for\n> Litecoin, etc...).  This seems like a good candidate for identifying coins,\n> and also supports Testnet cases well.  Maybe there are some alts without\n> such a magic number that might prevent that?\n\nThat magic number is something I find very unfortunate and superflous in\nBIP-32 design. Its only purpose is to distinguish BIP-32 trees for\nvarious altcoins, but it doesn't make sense at all once you start\nstoring various altcoins in the same tree using the proposed\n/m/cointype/reserved'/account'/change/n scheme.\n\nI would love to see that removed from BIP-32 and use always\n0x0488B21E/0x0488ADE4 (xpub/xpriv), but that is for different discussion\nI guess.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-27T16:13:46",
                "message_text_only": "The idea was to use the magic number as the source for cointype.  If it's\ntoo big, as Tamas showed, perhaps a hash of it, and for coins without a\nmagic number, a hash of their name (or some unique identifier).\n\nThat being said, I agree with Andreas that something that is 90%\ninter-operable seems very dangerous and will give people false expectations\nwhen they miss the corner cases.  If the structure isn't going to be shared\ncompletely and have all support shared, having it completely incompatible\nalong with a mechanism for converting part of it to another wallet seems\nsuperior.  The worst types of losses will occur when someone tests out\nsomething with a limited use case, sees that it appears to work, makes\ndangerous assumptions, then gets burned when it's too late.\n\n-Allen\n\n\nOn Thu, Mar 27, 2014 at 11:06 AM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n> On 03/27/2014 04:57 PM, Allen Piscitello wrote:\n> > Don't most of these coins have a magic number already assigned that is\n> > unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for\n> > Litecoin, etc...).  This seems like a good candidate for identifying\n> coins,\n> > and also supports Testnet cases well.  Maybe there are some alts without\n> > such a magic number that might prevent that?\n>\n> That magic number is something I find very unfortunate and superflous in\n> BIP-32 design. Its only purpose is to distinguish BIP-32 trees for\n> various altcoins, but it doesn't make sense at all once you start\n> storing various altcoins in the same tree using the proposed\n> /m/cointype/reserved'/account'/change/n scheme.\n>\n> I would love to see that removed from BIP-32 and use always\n> 0x0488B21E/0x0488ADE4 (xpub/xpriv), but that is for different discussion\n> I guess.\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol Rusnak <stick at gk2.sk>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/e7aa5555/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-27T16:07:26",
                "message_text_only": "I think not all alts (will) have magic numbers, at least not those defined e.g. with colored coins on top of an other chain.\n\nAlso note that the index should have MSB cleared as it would otherwise indicate private derivation. \n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 27.03.2014, at 16:57, Allen Piscitello <allen.piscitello at gmail.com> wrote:\n\n> Don't most of these coins have a magic number already assigned that is unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for Litecoin, etc...).  This seems like a good candidate for identifying coins, and also supports Testnet cases well.  Maybe there are some alts without such a magic number that might prevent that?\n> \n> -Allen\n> \n> \n> On Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> > A notable suggestion was to instead of building a directory of magic numbers\n> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word \"Bitcoin\",\n> > \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n> > cetral directory is not needed.\n> \n> +1 good idea\n> \n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1242a957/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1242a957/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-03-27T16:14:05",
                "message_text_only": "Just chiming in...\n\nI'm not opposed to a more generic default key tree, but we need to\nstandardize this soon I believe. There are already existing code bases\nthat implement BIP32 wallets (and more are popping up...); just using\na separate one will result in lots of incompibilities.\n\nThat said, I'm not convinced about the extra layers. The \"cointype\" in\nmy opinion isn't necessary inside the derivation. There is already\nsupport (4 bytes!) for magic bytes in the serialized form. Inside\napplications/p2p it should always be known to which chain it applies,\nand outside of that you shouldn't transfer raw keys. Maybe seeds need\nsome marker, but that's a separate case anyway. Mainnet and testnet\nhave specified magics here already - alts can define what they want\nimho.\n\nA 'reserved' field for future extensions may be useful, but as already\nsuggested by Mike, I don't believe we can encode how key chains are to\nbe used inside the derivation structure anyway. The most basic case\n(not losing money in a wallet without special structure) can perhaps\nbe supported with just \"the blockchain is your wallet\", but I don't\nbelieve this principle can scale to more advanced uses anyway, and you\nneed metadata in the wallet to deal with it.\n\nIn my view, your wallet just has a bunch of chains, and each chain\ngets used for a particular purpose, fixing how the derivation beneath\nit works. Either that is as a wallet, as part of a pair of multisig\nkeys, as a recurring payment receiver, ... or more complex things.\nSome of these will require extra layers beneath, but that is\napplication specific. You would import a chain into your (advanced)\nwallet with a particular extpub/extpriv code, and some metadata on how\nto use it. Serialization formats for such designated extra uses sounds\nbetter to me than trying to fit it into the derivation structure.\n\n-- \nPieter\n\n\nOn Thu, Mar 27, 2014 at 4:57 PM, Allen Piscitello\n<allen.piscitello at gmail.com> wrote:\n> Don't most of these coins have a magic number already assigned that is\n> unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for\n> Litecoin, etc...).  This seems like a good candidate for identifying coins,\n> and also supports Testnet cases well.  Maybe there are some alts without\n> such a magic number that might prevent that?\n>\n> -Allen\n>\n>\n> On Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com>\n>> wrote:\n>> > A notable suggestion was to instead of building a directory of magic\n>> > numbers\n>> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word\n>> > \"Bitcoin\",\n>> > \"Litecoin\", \"Dogecoin\", so collosion is unlikely and\n>> > cetral directory is not needed.\n>>\n>> +1 good idea\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T16:21:12",
                "message_text_only": "On 03/27/2014 05:14 PM, Pieter Wuille wrote:\n> That said, I'm not convinced about the extra layers. The \"cointype\" in\n> my opinion isn't necessary inside the derivation. There is already\n> support (4 bytes!) for magic bytes in the serialized form. Inside\n\nCointype in path is for separation purposes, not for identification.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-03-27T16:28:23",
                "message_text_only": "On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> Cointype in path is for separation purposes, not for identification.\n\nI don't understand what that gains you.\n\n-- \nPieter"
            },
            {
                "author": "Allen Piscitello",
                "date": "2014-03-27T17:49:44",
                "message_text_only": "The benefit I see is avoiding reuse of keys between coins while not having\neach wallet implementation have to know about each coin in order to scan\nfor transactions.  Wallet X supports Doge and Bitcoin.  If both used a\nshared sequence of keys, say the first two end up Bitcoin, then 10 Doge,\nthen some more Bitcoin.  If you took this seed to Wallet Y, which only\nsupports Bitcoin (either the wallet's support or what is installed on the\nsystem it's being used), it will see a gap of 10 addresses, and presume no\nmore scanning with a 5 gap limit.  The alternative is to reuse keys for\neach coin.\n\nIt also seems like a solution might be to only expect interoperability on a\nsingle sequence, and provide backups of each final sequence to use between\ndifferent wallet implementations.  This allows flexibility in hierarchies\ndepending on needs and support of wallet, but allows sharing.  The short\nseed would only be useful for the same wallet, but sharing between wallets\nwould use the longer keys.  That will give predictable behavior for users\n(although less friendly) and lead to less errors.\n\n-Allen\n\n\nOn Thu, Mar 27, 2014 at 11:28 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> > Cointype in path is for separation purposes, not for identification.\n>\n> I don't understand what that gains you.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/0e05360a/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-03-28T14:59:47",
                "message_text_only": "I agree that 'version' field of bip32 is not necessary and xpriv/xpub\nshould be enough for all cases; there's actually no need to use different\nBIP32 roots for different altcoins.\n\nI'm happily using one xpub for Bitcoin/Testnet/Litecoin at once, and by\nhaving the \"cointype\" distinction in the bip32 path itself, I'm sure that I\ndon't reuse the same pubkey across blockchains which may be a privacy issue\notherwise.\n\nMarek\n\n\nOn Thu, Mar 27, 2014 at 5:28 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> > Cointype in path is for separation purposes, not for identification.\n>\n> I don't understand what that gains you.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/8b081833/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T11:20:57",
                "message_text_only": "Le 26/03/2014 21:49, Mike Hearn a \u00e9crit :\n>\n>   * reserved is for \"other stuff\". I actually don't recall why we ended\n>     up with this. It may have been intended to split out multisig\n>     outputs etc from cointype. Marek, Thomas?\n>\n\n\nyes, this was intended to create multisig addresses from the same seed.\ncointype was proposed after that."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T11:36:43",
                "message_text_only": "On 03/26/2014 09:49 PM, Mike Hearn wrote:\n>    - cointype:  This is zero for Bitcoin. This is here to support two\n>    things, one is supporting alt coins based off the same root seed. Right now\n>    nobody seemed very bothered about alt coins but sometimes feature requests\n\nThere is one \"altcoin\" that is pretty important even today and it is\nTestnet.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T12:06:34",
                "message_text_only": "Le 27/03/2014 12:30, Marek Palatinus a \u00e9crit :\n> Ah, I forget to two things, which should be into the BIP as well:\n>\n> a) Gap factor for addresses; as Thomas mentioned, although some software\n> can watch almost unlimited amount of unused addresses, this is serious\n> concern for lightweight or server-based wallets like Electrum or\n> myTREZOR. myTREZOR currently uses gap factor 10, which is (from my\n> experience so far) quite sane for most of users.\n\n\nYes, I was planning to increase the number of available unused addresses \nto 10 or 20 in the bip32 version of Electrum.\n\nRelated to this, here is another idea I would like to submit:\n\nInstead of using a \"gap limit\" (maximal number of consecutive unused \naddresses), I think we should get rid of the topology, and simply count \nthe number of unused addresses since the beginning of the sequence. \nIndeed, the topology of the sequence of addresses is of no interest to \nthe user. Users often misinterpret \"gap limit\" as the \"number of unused \naddresses available\", so I think we should just give them what they want \n:) This is easier to understand, and it makes things more predictable, \nbecause the wallet will always display the same number of unused \naddresses (except when it is waiting for confirmations)."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T12:28:49",
                "message_text_only": "By the way, I just noticed that greenaddress.it is creating seeds that have\n24 words instead of 12. Does anyone know what's up with that? They claim to\nbe using BIP32 wallets so I wanted to see if they were using the default\nstructure and if so, whether bitcoinj was compatible with it (before I\nswitch to the one discussed here). But it seems we fall at the first hurdle\n...\n\n\nOn Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n\n>\n>\n> Le 27/03/2014 12:30, Marek Palatinus a \u00e9crit :\n> > Ah, I forget to two things, which should be into the BIP as well:\n> >\n> > a) Gap factor for addresses; as Thomas mentioned, although some software\n> > can watch almost unlimited amount of unused addresses, this is serious\n> > concern for lightweight or server-based wallets like Electrum or\n> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my\n> > experience so far) quite sane for most of users.\n>\n>\n> Yes, I was planning to increase the number of available unused addresses\n> to 10 or 20 in the bip32 version of Electrum.\n>\n> Related to this, here is another idea I would like to submit:\n>\n> Instead of using a \"gap limit\" (maximal number of consecutive unused\n> addresses), I think we should get rid of the topology, and simply count\n> the number of unused addresses since the beginning of the sequence.\n> Indeed, the topology of the sequence of addresses is of no interest to\n> the user. Users often misinterpret \"gap limit\" as the \"number of unused\n> addresses available\", so I think we should just give them what they want\n> :) This is easier to understand, and it makes things more predictable,\n> because the wallet will always display the same number of unused\n> addresses (except when it is waiting for confirmations).\n>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/4dc427dd/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T12:49:37",
                "message_text_only": "Ah, BIP32 allows for a range of entropy sizes and it so happens that they\npicked 256 bits instead of 128 bits.\n\nI'd have thought that there is a right answer for this. 2^128 should not be\nbrute forceable, and longer sizes have a cost in terms of making the seeds\nharder to write down on paper. So should this be a degree of freedom?\n\n\nOn Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> By the way, I just noticed that greenaddress.it is creating seeds that\n> have 24 words instead of 12. Does anyone know what's up with that? They\n> claim to be using BIP32 wallets so I wanted to see if they were using the\n> default structure and if so, whether bitcoinj was compatible with it\n> (before I switch to the one discussed here). But it seems we fall at the\n> first hurdle ...\n>\n>\n> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>\n>>\n>>\n>> Le 27/03/2014 12:30, Marek Palatinus a \u00e9crit :\n>> > Ah, I forget to two things, which should be into the BIP as well:\n>> >\n>> > a) Gap factor for addresses; as Thomas mentioned, although some software\n>> > can watch almost unlimited amount of unused addresses, this is serious\n>> > concern for lightweight or server-based wallets like Electrum or\n>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my\n>> > experience so far) quite sane for most of users.\n>>\n>>\n>> Yes, I was planning to increase the number of available unused addresses\n>> to 10 or 20 in the bip32 version of Electrum.\n>>\n>> Related to this, here is another idea I would like to submit:\n>>\n>> Instead of using a \"gap limit\" (maximal number of consecutive unused\n>> addresses), I think we should get rid of the topology, and simply count\n>> the number of unused addresses since the beginning of the sequence.\n>> Indeed, the topology of the sequence of addresses is of no interest to\n>> the user. Users often misinterpret \"gap limit\" as the \"number of unused\n>> addresses available\", so I think we should just give them what they want\n>> :) This is easier to understand, and it makes things more predictable,\n>> because the wallet will always display the same number of unused\n>> addresses (except when it is waiting for confirmations).\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/2aa515be/attachment.html>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2014-03-27T13:12:07",
                "message_text_only": "Isn't the length of the seed arbitrary anyway? Once decoded using whatever\nmnemonic implementation (electrums, or BIP0039) the bytestream is\nimmediately passed to HMAC-SHA256 to generate the master key. No matter\nwhat your initial entropy is, it would be hashed anyway.\n\n\nOn Thu, Mar 27, 2014 at 12:49 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Ah, BIP32 allows for a range of entropy sizes and it so happens that they\n> picked 256 bits instead of 128 bits.\n>\n> I'd have thought that there is a right answer for this. 2^128 should not\n> be brute forceable, and longer sizes have a cost in terms of making the\n> seeds harder to write down on paper. So should this be a degree of freedom?\n>\n>\n> On Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> By the way, I just noticed that greenaddress.it is creating seeds that\n>> have 24 words instead of 12. Does anyone know what's up with that? They\n>> claim to be using BIP32 wallets so I wanted to see if they were using the\n>> default structure and if so, whether bitcoinj was compatible with it\n>> (before I switch to the one discussed here). But it seems we fall at the\n>> first hurdle ...\n>>\n>>\n>> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>>\n>>>\n>>>\n>>> Le 27/03/2014 12:30, Marek Palatinus a \u00e9crit :\n>>> > Ah, I forget to two things, which should be into the BIP as well:\n>>> >\n>>> > a) Gap factor for addresses; as Thomas mentioned, although some\n>>> software\n>>> > can watch almost unlimited amount of unused addresses, this is serious\n>>> > concern for lightweight or server-based wallets like Electrum or\n>>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my\n>>> > experience so far) quite sane for most of users.\n>>>\n>>>\n>>> Yes, I was planning to increase the number of available unused addresses\n>>> to 10 or 20 in the bip32 version of Electrum.\n>>>\n>>> Related to this, here is another idea I would like to submit:\n>>>\n>>> Instead of using a \"gap limit\" (maximal number of consecutive unused\n>>> addresses), I think we should get rid of the topology, and simply count\n>>> the number of unused addresses since the beginning of the sequence.\n>>> Indeed, the topology of the sequence of addresses is of no interest to\n>>> the user. Users often misinterpret \"gap limit\" as the \"number of unused\n>>> addresses available\", so I think we should just give them what they want\n>>> :) This is easier to understand, and it makes things more predictable,\n>>> because the wallet will always display the same number of unused\n>>> addresses (except when it is waiting for confirmations).\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1de2fe0e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T13:19:54",
                "message_text_only": "Obviously, SHA256 can't magically generate more entropy out of nothing, it\njust stretches whatever is put in. If your seed was only 32 bits then\nhashing wouldn't save you: every possible private key could easily be\ncalculated in advance.\n\n\nOn Thu, Mar 27, 2014 at 2:12 PM, Thomas Kerin <thomas.kerin at gmail.com>wrote:\n\n> Isn't the length of the seed arbitrary anyway? Once decoded using whatever\n> mnemonic implementation (electrums, or BIP0039) the bytestream is\n> immediately passed to HMAC-SHA256 to generate the master key. No matter\n> what your initial entropy is, it would be hashed anyway.\n>\n>\n> On Thu, Mar 27, 2014 at 12:49 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Ah, BIP32 allows for a range of entropy sizes and it so happens that they\n>> picked 256 bits instead of 128 bits.\n>>\n>> I'd have thought that there is a right answer for this. 2^128 should not\n>> be brute forceable, and longer sizes have a cost in terms of making the\n>> seeds harder to write down on paper. So should this be a degree of freedom?\n>>\n>>\n>> On Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>> By the way, I just noticed that greenaddress.it is creating seeds that\n>>> have 24 words instead of 12. Does anyone know what's up with that? They\n>>> claim to be using BIP32 wallets so I wanted to see if they were using the\n>>> default structure and if so, whether bitcoinj was compatible with it\n>>> (before I switch to the one discussed here). But it seems we fall at the\n>>> first hurdle ...\n>>>\n>>>\n>>> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de>wrote:\n>>>\n>>>>\n>>>>\n>>>> Le 27/03/2014 12:30, Marek Palatinus a \u00e9crit :\n>>>> > Ah, I forget to two things, which should be into the BIP as well:\n>>>> >\n>>>> > a) Gap factor for addresses; as Thomas mentioned, although some\n>>>> software\n>>>> > can watch almost unlimited amount of unused addresses, this is serious\n>>>> > concern for lightweight or server-based wallets like Electrum or\n>>>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my\n>>>> > experience so far) quite sane for most of users.\n>>>>\n>>>>\n>>>> Yes, I was planning to increase the number of available unused addresses\n>>>> to 10 or 20 in the bip32 version of Electrum.\n>>>>\n>>>> Related to this, here is another idea I would like to submit:\n>>>>\n>>>> Instead of using a \"gap limit\" (maximal number of consecutive unused\n>>>> addresses), I think we should get rid of the topology, and simply count\n>>>> the number of unused addresses since the beginning of the sequence.\n>>>> Indeed, the topology of the sequence of addresses is of no interest to\n>>>> the user. Users often misinterpret \"gap limit\" as the \"number of unused\n>>>> addresses available\", so I think we should just give them what they want\n>>>> :) This is easier to understand, and it makes things more predictable,\n>>>> because the wallet will always display the same number of unused\n>>>> addresses (except when it is waiting for confirmations).\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/2c5954bd/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T13:49:32",
                "message_text_only": "Le 27/03/2014 13:49, Mike Hearn a \u00e9crit :\n> Ah, BIP32 allows for a range of entropy sizes and it so happens that\n> they picked 256 bits instead of 128 bits.\n>\n> I'd have thought that there is a right answer for this. 2^128 should not\n> be brute forceable, and longer sizes have a cost in terms of making the\n> seeds harder to write down on paper. So should this be a degree of freedom?\n>\n\n\nHere is what I understand:\n\n2^128 iterations is not brute forcable today, and will not be for the \nforeseeable future.\n\nAn EC pubkey of length n can be forced in approximately 2^(n/2) \niterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which \nare 256 bits, would require 2^128 iterations. This is why unused \naddresses (160 bits hash) are better protected than already used ones.\n\nHowever, people tend to believe that a public key of size n requires 2^n \niterations. This belief might have been spread by this popular image:\nhttps://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146"
            },
            {
                "author": "Jim",
                "date": "2014-03-27T13:58:19",
                "message_text_only": "Good to hear the bip32 wallet structure is _so_ close to being standardised.\nFor MultiBit HD, we have put in support for 12/18/24 words but have the UI 'suggest' to use 12.\nYou can see this on the wallet creation wizard Gary recently blogged about:\nhttps://multibit.org/blog/2014/03/26/multibit-hd-welcome-wizard.html\n\nThere's a little combo for the seed length, with 12 as the default.\n\n\n@Thomas. You mention gaps. We are creating new addresses on the UI in a panel marked 'Request' where the user also types in a QR code label and a note to themselves. This gets stored away as a first class 'PaymentRequest'. The UI 'suggests' that each address is used once. There will be some gaps (where the payment request is never paid) but we aren't bulk creating addresses. I am hoping this shouldn't cause Electrum a problem.\n\nWe are also storing a timestamp (the number of days since the genesis block) to help wallet restore but that is SPV specific.\n\n\nOn Thu, Mar 27, 2014, at 01:49 PM, Thomas Voegtlin wrote:\n> \n> \n> Le 27/03/2014 13:49, Mike Hearn a \u00e9crit :\nIP32 allows for a range of entropy sizes and it so happens that\n> > they picked 256 bits instead of 128 bits.\n> >\n> > I'd have thought that there is a right answer for this. 2^128 should not\n> > be brute forceable, and longer sizes have a cost in terms of making the\n> > seeds harder to write down on paper. So should this be a degree of freedom?\n> >\n> \n> \n> Here is what I understand:\n> \n> 2^128 iterations is not brute forcable today, and will not be for the \n> foreseeable future.\n> \n> An EC pubkey of length n can be forced in approximately 2^(n/2) \n> iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which \n> are 256 bits, would require 2^128 iterations. This is why unused \n> addresses (160 bits hash) are better protected than already used ones.\n> \n> However, people tend to believe that a public key of size n requires 2^n \n> iterations. This belief might have been spread by this popular image:\n> https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttp://bitcoin-solutions.co.uk"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-27T14:20:32",
                "message_text_only": "For SPV wallets it's more complicated. There must always be a large\nlookahead window for latency reasons. We can't query the entire database\nbecause we don't know how far ahead the user is. So we have to assume there\nmight be a lot of transaction traffic and create a large window, to reduce\nthe chances that we run out whilst syncing and have to abort/restart the\nsync after resetting the Bloom filter.\n\nIf you have a full db index then you can calculate some addresses, query,\nif they all get hits, calculate some more, requery, etc. It's a bit simpler.\n\n\nOn Thu, Mar 27, 2014 at 2:58 PM, Jim <jim618 at fastmail.co.uk> wrote:\n\n> Good to hear the bip32 wallet structure is _so_ close to being\n> standardised.\n> For MultiBit HD, we have put in support for 12/18/24 words but have the UI\n> 'suggest' to use 12.\n> You can see this on the wallet creation wizard Gary recently blogged about:\n> https://multibit.org/blog/2014/03/26/multibit-hd-welcome-wizard.html\n>\n> There's a little combo for the seed length, with 12 as the default.\n>\n>\n> @Thomas. You mention gaps. We are creating new addresses on the UI in a\n> panel marked 'Request' where the user also types in a QR code label and a\n> note to themselves. This gets stored away as a first class\n> 'PaymentRequest'. The UI 'suggests' that each address is used once. There\n> will be some gaps (where the payment request is never paid) but we aren't\n> bulk creating addresses. I am hoping this shouldn't cause Electrum a\n> problem.\n>\n> We are also storing a timestamp (the number of days since the genesis\n> block) to help wallet restore but that is SPV specific.\n>\n>\n> On Thu, Mar 27, 2014, at 01:49 PM, Thomas Voegtlin wrote:\n> >\n> >\n> > Le 27/03/2014 13:49, Mike Hearn a \u00e9crit :\n> IP32 allows for a range of entropy sizes and it so happens that\n> > > they picked 256 bits instead of 128 bits.\n> > >\n> > > I'd have thought that there is a right answer for this. 2^128 should\n> not\n> > > be brute forceable, and longer sizes have a cost in terms of making the\n> > > seeds harder to write down on paper. So should this be a degree of\n> freedom?\n> > >\n> >\n> >\n> > Here is what I understand:\n> >\n> > 2^128 iterations is not brute forcable today, and will not be for the\n> > foreseeable future.\n> >\n> > An EC pubkey of length n can be forced in approximately 2^(n/2)\n> > iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which\n> > are 256 bits, would require 2^128 iterations. This is why unused\n> > addresses (160 bits hash) are better protected than already used ones.\n> >\n> > However, people tend to believe that a public key of size n requires 2^n\n> > iterations. This belief might have been spread by this popular image:\n> > https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> --\n> http://bitcoin-solutions.co.uk\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/0df83769/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-03-27T15:17:58",
                "message_text_only": "On Thu, Mar 27, 2014 at 02:49:32PM +0100, Thomas Voegtlin wrote:\n> \n> \n> Le 27/03/2014 13:49, Mike Hearn a \u00e9crit :\n> > Ah, BIP32 allows for a range of entropy sizes and it so happens that\n> > they picked 256 bits instead of 128 bits.\n> >\n> > I'd have thought that there is a right answer for this. 2^128 should not\n> > be brute forceable, and longer sizes have a cost in terms of making the\n> > seeds harder to write down on paper. So should this be a degree of freedom?\n> >\n> \n> \n> Here is what I understand:\n> \n> 2^128 iterations is not brute forcable today, and will not be for the \n> foreseeable future.\n\nI foresee 2^128 being brute forceable in 20-25 years. See below.\n \n> An EC pubkey of length n can be forced in approximately 2^(n/2) \n> iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which \n> are 256 bits, would require 2^128 iterations. This is why unused \n> addresses (160 bits hash) are better protected than already used ones.\n> \n> However, people tend to believe that a public key of size n requires 2^n \n> iterations. This belief might have been spread by this popular image:\n> https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146\n\nSo I assume this image is using the Landauer principle for minimum \nenergy ( http://en.wikipedia.org/wiki/Landauer%27s_principle ), however\nit is unknown (to me at least) if a reversible computing ecdsa forcing\nalgorithm could be implemented. (this may or may not be a quantum\ncomputing device)\n\nLet's suppose for a moment you could, and get a million times better \nthan the Landauer pinciple limit of 2.85 zJ per bit, so we have total\nenergy to cycle through 128 bits of address space of:\n\nunits \"2**128 * 2.85zJ / 1e6\" \"megawatt*hours\"\n        * 269.39021\n\nAn attacker with a sub-Landauer limit/1e6  cracker would need a lot of\nsilicon area, and a couple of hours energy from a large wind farm, and\ncould siphon that energy out in a rural area without anyone noticing \nanything other than a few shipping containers and that the wind turbines\nare running more on windy days.\n\nIf we go back to just Landauer limit, and assume a 10MW system that \nruns 24x7 (much like the NCSA Blue Waters Cray machine), we need:\n(please check my math, or point out any stupid assumptions I've made)\n\nunits \"2**128 * 2.85zJ / 10 megawatts\" \" years\"\n        * 3073.1914\n\nOr 3000 years. Well that still sounds pretty safe. How about 250MW?\nunits \"2**128 * 2.85zJ / 250 megawatts\" \" years\"\n        * 122.92766\n\nNow I'm starting to get worried, because when I started computing, it\nwas on an 8-bit CPU that was measured in thousand operations-per-second.\nIn 1996 the largest supercomputer in the world was ASCII Red, with an\namazing 1 trillion floating-point operations per second. This morning\nI have a 1-2 Teraflop water-cooled graphics processor sitting next to\nme warming the room.\n\nI expect in 5-10 years we'll have silicon with 256 bit registers that\nmay be able to do thousands or millions of ECDSA calculations per\nsecond per computation unit.\n\nSo if you stop hearing from me here, it's because I found a better \nmailing list, or a got a contract to develop and ECDSA cracker, in \nwhich case you probably won't hear from me again until I have a talk\nat DEFCON showing it off.\n\n\n-- Troy Benjegerdes"
            },
            {
                "author": "Matias Alejo Garcia",
                "date": "2014-03-27T13:07:23",
                "message_text_only": "On Thu, Mar 27, 2014 at 9:28 AM, Mike Hearn <mike at plan99.net> wrote:\n> By the way, I just noticed that greenaddress.it is creating seeds that have 24\n> words instead of 12. Does anyone know what's up with that? They claim to be\n> using BIP32 wallets so I wanted to see if they were using the default structure\n> and if so, whether bitcoinj was compatible with it (before I switch to the one\n> discussed here). But it seems we fall at the first hurdle ...\n>\n\nThey replied this on reddit: \"Good question! We use 256-bit BIP39\nseeds for our 512-bit extended HD wallet keypairs, as advised by\nBIP32. We are aware that 128 is considered ok in Electrum but we\nwanted to follow BIP32 spec, in particular because we are working with\nhardware wallets that have been design with BIP32 in mind and wanted\nto avoid any incompatibility issue.\"\n\nhttp://www.reddit.com/r/Bitcoin/comments/20puhg/while_blockchaininfo_is_down_what_about_testing/cg5mr54\n\n\nBTW, thanks for starting this thread. I am with the bitcore team,\nworking on a new multisig only wallet (Cosign).\n\nThe schema originally proposed be Mike (/m/cointype/reserved'/account'/change/n\n) seems flexible enough for our needs. I wonder, tough, if we can\nagree also on a format to exchange the tips (n) of each branch on the\ntree when the user export/backup the wallet, as  Allen suggested.\n\n\nOn Wed, Mar 26, 2014 at 8:37 PM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> For me, the most important thing is either we're 100% interoperable or\n> 0%. There should not be anything inbetween, as users will delete seeds\n> without knowing there is still money in them on another implementation.\n\nIs the ideal schema that the user should be able to use two different\nwallets at the same time? Does a wallet need to assume that derivate\nkeys could had been used already? That seems complicated. Maybe we\ncould add a  /(hash of the wallet name)/ on the BIP32 path.\n\n\n--\nmatias\n\n\n\n-- \nMat\u00edas Alejo Garcia\nSkype/Twitter: @ematiu\nRoads? Where we're going, we don't need roads!"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T13:44:30",
                "message_text_only": "On 03/27/2014 01:06 PM, Thomas Voegtlin wrote:\n> Yes, I was planning to increase the number of available unused addresses \n> to 10 or 20 in the bip32 version of Electrum.\n\nAlso, we'd need to specify a \"gap limit\" for accounts as well. In TREZOR\nwe currently use 0, which means that the scan will stop as soon as we\nhit first account with no transaction history (meaning that its first\nX=10 addresses are unused).\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T13:53:35",
                "message_text_only": "Le 27/03/2014 14:44, Pavol Rusnak a \u00e9crit :\n> On 03/27/2014 01:06 PM, Thomas Voegtlin wrote:\n>> Yes, I was planning to increase the number of available unused addresses\n>> to 10 or 20 in the bip32 version of Electrum.\n>\n> Also, we'd need to specify a \"gap limit\" for accounts as well. In TREZOR\n> we currently use 0, which means that the scan will stop as soon as we\n> hit first account with no transaction history (meaning that its first\n> X=10 addresses are unused).\n>\n\nI agree with that. I was planning to do the same (no gap)\n\nNote: Maybe we could just look at the first address of each account, \ninstead of the first 10 ?"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-03-27T14:03:23",
                "message_text_only": "On 03/27/2014 02:53 PM, Thomas Voegtlin wrote:\n> Note: Maybe we could just look at the first address of each account, \n> instead of the first 10 ?\n\nThis is a possible optimization, but it adds unnecessary logic. Also it\ndoes not decrease the number of required requests between a client and a\nserver (e.g. when backend sends responses in \"bulks\" of 10 addresses or\nmore).\n\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-03-27T15:04:31",
                "message_text_only": ">\n>     Related to this, here is another idea I would like to submit:\n>\n>     Instead of using a \"gap limit\" (maximal number of consecutive unused\n>     addresses), I think we should get rid of the topology, and simply count\n>     the number of unused addresses since the beginning of the sequence.\n>     Indeed, the topology of the sequence of addresses is of no interest to\n>     the user. Users often misinterpret \"gap limit\" as the \"number of unused\n>     addresses available\", so I think we should just give them what they want\n>     :) This is easier to understand, and it makes things more predictable,\n>     because the wallet will always display the same number of unused\n>     addresses (except when it is waiting for confirmations).\n>\n>\n> I'm not convinced that it is either simpler to implement nor simpler to\n> understand. I considering every \"account\" as completely independent\n> structure (except that it has been derived from master seed). Because of\n> this, I don't see a reason why number of generated addresses in one\n> account should affect available addresses of other account.\n\n\nSorry if I was not clear, but no, I was not proposing that... I propose \nto count the number of unused addresses in each account, independently.\n\nHere is an explanation with pictures:\n\nCurrently, Electrum does this:\n\nx = used address\no = unused address\n\nx x x o o x x x x o o o o o\n       |           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 5 unused addresses at the end (gap limit =5)\n      existing gap, size 2\n\nCase 1:\nSuppose the user decides to use the 4th address starting from the end:\nx x x o o x x x x x o o o o\n\nAfter 3 confirmations, Electrum will create one extra address:\nx x x o o x x x x x o o o o o\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 5 final address (one new)\n\nCase 2:\nThe user, who understands nothing about topology, decides to use the \nfinal address:\nx x x o o x x x x o o o o x\n\nAfter 3 confirmations, Electrum will create 5 new addresses:\nx x x o o x x x x o o o o x o o o o o\n                     |        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 5 new addresses\n                  new gap (size 4)\n\n\nYou see that this leads to a number of newly created addresses that \ndepends on the address picked by the user. This is the behaviour that I \nwant to fix. I think it is bad for two reasons: First, because it is \nunpredictable (I had a user who set his gap limit to 100, and then was \nsystematically using the last address of the list, ending up with a lot \nof wasted addresses). Second, because the worst case scenario (case 2) \ncreates large gaps, which are less robust to blockchain reorgs than in \ncase 1. A reorg in case 1, where the last tx is cancelled will create no \ngap. A reorg in case 2 can result in a gap that is larger than the limit \n(5), if another transaction uses the final addresses. (this is why \nElectrum has to wait for a few confirmations before adding addresses)\n\n\nSo, what I propose is to always have a constant number of unused \naddresses in each account, instead of something that depends on the \ntopology. (this number can be 10 or 20, I don't mind, but I guess Mike \nmight prefer 20...)"
            }
        ],
        "thread_summary": {
            "title": "New BIP32 structure",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Matias Alejo Garcia",
                "Troy Benjegerdes",
                "Tamas Blummer",
                "Jim",
                "Thomas Voegtlin",
                "slush",
                "Andreas Schildbach",
                "Thomas Kerin",
                "Mike Hearn",
                "Pavol Rusnak",
                "Pieter Wuille",
                "Alan Reiner",
                "Allen Piscitello",
                "Mike Belshe"
            ],
            "messages_count": 39,
            "total_messages_chars_count": 94313
        }
    },
    {
        "title": "[Bitcoin-development] BIP 70 refund field",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T11:07:04",
                "message_text_only": "Modern devices like smartphones and tablets do not have swap files. This\ndesign is chosen to ensure responsive, fluid UI that can avoid blocking on\ndisk regardless of how much multi-tasking is done, but it creates ripples\nthat impact everything else.\n\nOne implication of this is that on these devices, we cannot store all keys\nor transactions in memory forever. BIP 70 has an expiry field for\nPaymentRequests that we can use to allow us to eventually stop loading\nthose keys into RAM - at that point payments to those keys would no longer\nbe recognised. But there's no equivalent for refund addresses.\n\nMore generally, though we re-used the output structure to define the\nrefund, we didn't (for some reason that I forgot) reuse PaymentDetails,\neven though the payment details for a refund are indeed PaymentDetails.\n\nThough I am loathe to go back and redesign this part of BIP 70 so soon\nafter we shipped v1, it seems to me like the refund feature may be hard to\nimplement on phones if there's no time limit for when you can receive a\nrefund. Otherwise a wallet has to be looking out for refunds for payments\nyou may have made years ago. So perhaps we should add a new refund field\nthat embeds a PaymentDetails structure instead of being just a list of\noutputs.\n\nWe could try and solve this problem some other way purely internally, by\ndoing a kind of wallet-specific swapping process in which things like Bloom\nfilters are calculated without all keys in them being held in memory at\nonce (perhaps caching filters for old parts of the key chain on disk), so\nyou can have \"infinite\" wallets, but eventually the huge Bloom filters that\nwould result would hurt efficiency in other ways. So key expiry seems\npretty fundamental to scalability.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9b190fa7/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-28T11:25:53",
                "message_text_only": "I see the problem.\n\nHowever, I don't see how PaymentDetails can be an answer. None of the\nfields (other than outputs and network) can be known in advance (at the\ntime of the initial payment).\n\nYou're probably aiming for an expires field? How would you refund a\npayment after expiry? Note its not your choice wether to refund a\npayment -- it can be ordered by a court years after the payment happened.\n\nBtw. another problem is that the refund address is currently unprotected.\n\n\nOn 03/28/2014 12:07 PM, Mike Hearn wrote:\n> Modern devices like smartphones and tablets do not have swap files. This\n> design is chosen to ensure responsive, fluid UI that can avoid blocking\n> on disk regardless of how much multi-tasking is done, but it creates\n> ripples that impact everything else.\n> \n> One implication of this is that on these devices, we cannot store all\n> keys or transactions in memory forever. BIP 70 has an expiry field for\n> PaymentRequests that we can use to allow us to eventually stop loading\n> those keys into RAM - at that point payments to those keys would no\n> longer be recognised. But there's no equivalent for refund addresses.\n> \n> More generally, though we re-used the output structure to define the\n> refund, we didn't (for some reason that I forgot) reuse PaymentDetails,\n> even though the payment details for a refund are indeed PaymentDetails.\n> \n> Though I am loathe to go back and redesign this part of BIP 70 so soon\n> after we shipped v1, it seems to me like the refund feature may be hard\n> to implement on phones if there's no time limit for when you can receive\n> a refund. Otherwise a wallet has to be looking out for refunds for\n> payments you may have made years ago. So perhaps we should add a new\n> refund field that embeds a PaymentDetails structure instead of being\n> just a list of outputs.\n> \n> We could try and solve this problem some other way purely internally, by\n> doing a kind of wallet-specific swapping process in which things like\n> Bloom filters are calculated without all keys in them being held in\n> memory at once (perhaps caching filters for old parts of the key chain\n> on disk), so you can have \"infinite\" wallets, but eventually the huge\n> Bloom filters that would result would hurt efficiency in other ways. So\n> key expiry seems pretty fundamental to scalability.\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T11:31:35",
                "message_text_only": "On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> However, I don't see how PaymentDetails can be an answer. None of the\n> fields (other than outputs and network) can be known in advance (at the\n> time of the initial payment).\n>\n\nYou don't need all the fields indeed, but they're mostly optional (except\ntime). So for the refund you'd fill out:\n\noutputs (same as today)\ntime\nexpiry_time\n\nYou're probably aiming for an expires field? How would you refund a\n> payment after expiry?\n>\n\nIt'd have to be ad-hoc at that point. OK, you don't get the nice UI that\nthe refund field provides. Oh well. It should be rare to get refunds very\nvery late after the purchase.\n\n\n> Btw. another problem is that the refund address is currently unprotected.\n>\n\nYes indeed as is the rest of the Payment structure. We talked about signing\nit with one of the keys that's signing the Bitcoin transaction as well. But\nit seems like a bit overkill. Usually it'll be submitted over HTTPS or a\n(secured!) Bluetooth channel though so tampering with it should not be\npossible.\n\nHowever this does raise the question of whether a refund should be a full\nblown PaymentRequest with optional PKI signing. Normally, I think, a seller\ndoes not know or care about the identity of a buyer for refunds, outside of\ntheir own tracking system.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/e3ec4be5/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-28T16:59:52",
                "message_text_only": "Ok, why don't fix this in the spec for now, by defining a fixed expiry\ntime. In the EU, most products are covered by a 2 years warranty, so it\nseems appropriate to pick 2.5 years (30 months) -- allowing for some\ntime to ship the product back and forth.\n\n\nOn 03/28/2014 12:31 PM, Mike Hearn wrote:\n> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     However, I don't see how PaymentDetails can be an answer. None of the\n>     fields (other than outputs and network) can be known in advance (at the\n>     time of the initial payment).\n> \n> \n> You don't need all the fields indeed, but they're mostly optional\n> (except time). So for the refund you'd fill out:\n> \n> outputs (same as today)\n> time\n> expiry_time\n> \n>     You're probably aiming for an expires field? How would you refund a\n>     payment after expiry?\n> \n> \n> It'd have to be ad-hoc at that point. OK, you don't get the nice UI that\n> the refund field provides. Oh well. It should be rare to get refunds\n> very very late after the purchase.\n>  \n> \n>     Btw. another problem is that the refund address is currently\n>     unprotected.\n> \n> \n> Yes indeed as is the rest of the Payment structure. We talked about\n> signing it with one of the keys that's signing the Bitcoin transaction\n> as well. But it seems like a bit overkill. Usually it'll be submitted\n> over HTTPS or a (secured!) Bluetooth channel though so tampering with it\n> should not be possible.\n> \n> However this does raise the question of whether a refund should be a\n> full blown PaymentRequest with optional PKI signing. Normally, I think,\n> a seller does not know or care about the identity of a buyer for\n> refunds, outside of their own tracking system.\n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T18:19:03",
                "message_text_only": "On 28/03/2014 17:59, Andreas Schildbach wrote:\n> Ok, why don't fix this in the spec for now, by defining a fixed expiry\n> time. In the EU, most products are covered by a 2 years warranty, so it\n> seems appropriate to pick 2.5 years (30 months) -- allowing for some\n> time to ship the product back and forth.\nYeah I was thinking something like that on the walk home. But 2 years is\na long time. Do we have enough RAM for that? Plus warranties usually\nresult in the defective goods being replaced rather than a monetary\nrefund, right?\n\nBut adjusting the spec so there's a fixed time limit, and allowing a\nfuture version of the protocol to make it configurable, does indeed feel\nlike the right way to go.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 5971 bytes\nDesc: S/MIME Cryptographic Signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/66e42ad9/attachment.p7s>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-28T20:56:57",
                "message_text_only": "On 03/28/2014 07:19 PM, Mike Hearn wrote:\n\n>> Ok, why don't fix this in the spec for now, by defining a fixed expiry\n>> time. In the EU, most products are covered by a 2 years warranty, so it\n>> seems appropriate to pick 2.5 years (30 months) -- allowing for some\n>> time to ship the product back and forth.\n>\n> Yeah I was thinking something like that on the walk home. But 2 years is\n> a long time. Do we have enough RAM for that?\n\nIt depends on usage stats, script size, etc...\n\n> Plus warranties usually\n> result in the defective goods being replaced rather than a monetary\n> refund, right?\n\nUsually yes. The next smaller \"unit of time\" in Germany would be two\nweeks, the so-called \"Fernabsatzgesetz\". It allows you to send back\nmail-orders and usually you want the money back. Don't know if that made\nit into EU law or how it applies to other countries."
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-29T09:27:22",
                "message_text_only": "On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:\n> On 03/28/2014 07:19 PM, Mike Hearn wrote:\n> \n> >> Ok, why don't fix this in the spec for now, by defining a fixed expiry\n> >> time. In the EU, most products are covered by a 2 years warranty, so it\n> >> seems appropriate to pick 2.5 years (30 months) -- allowing for some\n> >> time to ship the product back and forth.\n> >\n> > Yeah I was thinking something like that on the walk home. But 2 years is\n> > a long time. Do we have enough RAM for that?\n> \n> It depends on usage stats, script size, etc...\n> \n> > Plus warranties usually\n> > result in the defective goods being replaced rather than a monetary\n> > refund, right?\n> \n> Usually yes. The next smaller \"unit of time\" in Germany would be two\n> weeks, the so-called \"Fernabsatzgesetz\". It allows you to send back\n> mail-orders and usually you want the money back. Don't know if that made\n> it into EU law or how it applies to other countries.\n\nIt's EU law, but the Distance Selling Directive only says \"at least\nseven days\", so the exact period probably varies by country (in the UK\nit is 7 days).\n\nBut the clock only starts ticking when you receive the goods, and the\nDistance Selling Directive allows the supplier 30 days \"to execute the\norder\" (I *think* the 30 days always has to include shipping, because\nfor consumer contracts title doesn't pass until the goods are\ndelivered, so the order wouldn't be considered complete until then).\n\nSo I think latest possible deadline for returning the goods for refund\ncould be up to 30 days to execute the order plus \"at least 7 days\"\n(with some countries allowing more).  Plus, conceivably, shipping\ntime, if some member states have chosen to interpret the 30 day\nexecution differently.\n\nSo I think this adds up to \"a couple of months, give or take\".  In\npractice, though, even a couple of months is a bit on the short time.\nWhat if the goods are delayed.  How many people have had miner orders\noutstanding for the best part of a year?\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-29T13:29:47",
                "message_text_only": "So how about we say two months? That way it's easy for merchants to comply\nwith the EU DSD and we keep RAM usage in check until we come up with a more\nsophisticated refund scheme.\n\nThere's another issue with BIP 70 and refunds that I noticed. The\nPaymentRequest doesn't specify whether refunds are possible. So wallets\nhave to either never submit refund data, or always submit it even if it\nmakes no sense. Because setting things up to get refunds has a non-zero\ncost for the sender, it'd help if we could optimise it away for merchants\nthat simply refuse to issue refunds for whatever reason.\n\n\n\nOn Sat, Mar 29, 2014 at 10:27 AM, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:\n> > On 03/28/2014 07:19 PM, Mike Hearn wrote:\n> >\n> > >> Ok, why don't fix this in the spec for now, by defining a fixed expiry\n> > >> time. In the EU, most products are covered by a 2 years warranty, so\n> it\n> > >> seems appropriate to pick 2.5 years (30 months) -- allowing for some\n> > >> time to ship the product back and forth.\n> > >\n> > > Yeah I was thinking something like that on the walk home. But 2 years\n> is\n> > > a long time. Do we have enough RAM for that?\n> >\n> > It depends on usage stats, script size, etc...\n> >\n> > > Plus warranties usually\n> > > result in the defective goods being replaced rather than a monetary\n> > > refund, right?\n> >\n> > Usually yes. The next smaller \"unit of time\" in Germany would be two\n> > weeks, the so-called \"Fernabsatzgesetz\". It allows you to send back\n> > mail-orders and usually you want the money back. Don't know if that made\n> > it into EU law or how it applies to other countries.\n>\n> It's EU law, but the Distance Selling Directive only says \"at least\n> seven days\", so the exact period probably varies by country (in the UK\n> it is 7 days).\n>\n> But the clock only starts ticking when you receive the goods, and the\n> Distance Selling Directive allows the supplier 30 days \"to execute the\n> order\" (I *think* the 30 days always has to include shipping, because\n> for consumer contracts title doesn't pass until the goods are\n> delivered, so the order wouldn't be considered complete until then).\n>\n> So I think latest possible deadline for returning the goods for refund\n> could be up to 30 days to execute the order plus \"at least 7 days\"\n> (with some countries allowing more).  Plus, conceivably, shipping\n> time, if some member states have chosen to interpret the 30 day\n> execution differently.\n>\n> So I think this adds up to \"a couple of months, give or take\".  In\n> practice, though, even a couple of months is a bit on the short time.\n> What if the goods are delayed.  How many people have had miner orders\n> outstanding for the best part of a year?\n>\n> roy\n>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6ebb0510/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-03-30T17:21:26",
                "message_text_only": "I'd prefer 3 months to 2 just because a quarter of year is a more common\ntimespan.\n\nBut of course its just paint shedding, so 2 sounds good for me too (-:\n\n\nOn 03/29/2014 02:29 PM, Mike Hearn wrote:\n> So how about we say two months? That way it's easy for merchants to\n> comply with the EU DSD and we keep RAM usage in check until we come up\n> with a more sophisticated refund scheme.\n> \n> There's another issue with BIP 70 and refunds that I noticed. The\n> PaymentRequest doesn't specify whether refunds are possible. So wallets\n> have to either never submit refund data, or always submit it even if it\n> makes no sense. Because setting things up to get refunds has a non-zero\n> cost for the sender, it'd help if we could optimise it away for\n> merchants that simply refuse to issue refunds for whatever reason.\n> \n> \n> \n> On Sat, Mar 29, 2014 at 10:27 AM, Roy Badami <roy at gnomon.org.uk\n> <mailto:roy at gnomon.org.uk>> wrote:\n> \n>     On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:\n>     > On 03/28/2014 07:19 PM, Mike Hearn wrote:\n>     >\n>     > >> Ok, why don't fix this in the spec for now, by defining a fixed\n>     expiry\n>     > >> time. In the EU, most products are covered by a 2 years\n>     warranty, so it\n>     > >> seems appropriate to pick 2.5 years (30 months) -- allowing for\n>     some\n>     > >> time to ship the product back and forth.\n>     > >\n>     > > Yeah I was thinking something like that on the walk home. But 2\n>     years is\n>     > > a long time. Do we have enough RAM for that?\n>     >\n>     > It depends on usage stats, script size, etc...\n>     >\n>     > > Plus warranties usually\n>     > > result in the defective goods being replaced rather than a monetary\n>     > > refund, right?\n>     >\n>     > Usually yes. The next smaller \"unit of time\" in Germany would be two\n>     > weeks, the so-called \"Fernabsatzgesetz\". It allows you to send back\n>     > mail-orders and usually you want the money back. Don't know if\n>     that made\n>     > it into EU law or how it applies to other countries.\n> \n>     It's EU law, but the Distance Selling Directive only says \"at least\n>     seven days\", so the exact period probably varies by country (in the UK\n>     it is 7 days).\n> \n>     But the clock only starts ticking when you receive the goods, and the\n>     Distance Selling Directive allows the supplier 30 days \"to execute the\n>     order\" (I *think* the 30 days always has to include shipping, because\n>     for consumer contracts title doesn't pass until the goods are\n>     delivered, so the order wouldn't be considered complete until then).\n> \n>     So I think latest possible deadline for returning the goods for refund\n>     could be up to 30 days to execute the order plus \"at least 7 days\"\n>     (with some countries allowing more).  Plus, conceivably, shipping\n>     time, if some member states have chosen to interpret the 30 day\n>     execution differently.\n> \n>     So I think this adds up to \"a couple of months, give or take\".  In\n>     practice, though, even a couple of months is a bit on the short time.\n>     What if the goods are delayed.  How many people have had miner orders\n>     outstanding for the best part of a year?\n> \n>     roy\n> \n> \n>     ------------------------------------------------------------------------------\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-03-28T11:38:51",
                "message_text_only": "On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> I see the problem.\n>\n> However, I don't see how PaymentDetails can be an answer. None of the\n> fields (other than outputs and network) can be known in advance (at the\n> time of the initial payment).\n>\n> You're probably aiming for an expires field? How would you refund a\n> payment after expiry? Note its not your choice wether to refund a\n> payment -- it can be ordered by a court years after the payment happened.\n>\n\nCommunication between the merchant and buyer would be needed in this case.\n\nI'd say that would be not unreasonable if something is to be refunded after\na year or more. After all, people may have moved, bank accounts changed,\neven outside the bitcoin world.\n\nIt should probably not be accepted to set a very low expiration time for\nthe refund address, like <3 months, as it's as bad as not providing a\nrefund address at all and brings back all the pre-BIP70 confusion.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/330c229c/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T11:45:03",
                "message_text_only": "Yes, you begin to see that the payment protocol, as is has a too narrow scope of a web cart - customer, and does not even fit that.\n\nIt is not about payment requests but about business relationships. We need a protocol that deals with that concept instead of individual requests,\nso we really get out of the hell of addresses. Business relationships are terminated by the parties at their own and not bey algorithms and timeouts.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 28.03.2014, at 12:38, Wladimir <laanwj at gmail.com> wrote:\n\n> \n> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach <andreas at schildbach.de> wrote:\n> I see the problem.\n> \n> However, I don't see how PaymentDetails can be an answer. None of the\n> fields (other than outputs and network) can be known in advance (at the\n> time of the initial payment).\n> \n> You're probably aiming for an expires field? How would you refund a\n> payment after expiry? Note its not your choice wether to refund a\n> payment -- it can be ordered by a court years after the payment happened.\n> \n> Communication between the merchant and buyer would be needed in this case.\n> \n> I'd say that would be not unreasonable if something is to be refunded after a year or more. After all, people may have moved, bank accounts changed, even outside the bitcoin world.\n> \n> It should probably not be accepted to set a very low expiration time for the refund address, like <3 months, as it's as bad as not providing a refund address at all and brings back all the pre-BIP70 confusion.\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9fd03d99/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9fd03d99/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T11:46:53",
                "message_text_only": "I don't want to manage a \"business relationship\" with every shop I buy\nsomething from. That's way too much effort. There can certainly be cases\nwhere a more complicated relationship is created by bootstrapping off\nBIP70, perhaps with an extension, but nailing the ordinary buyer-to-seller\nrelationship seems like a good scope for BIP70 for now.\n\n\nOn Fri, Mar 28, 2014 at 12:45 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> Yes, you begin to see that the payment protocol, as is has a too narrow\n> scope of a web cart - customer, and does not even fit that.\n>\n> It is not about payment requests but about business relationships. We need\n> a protocol that deals with that concept instead of individual requests,\n> so we really get out of the hell of addresses. Business relationships are\n> terminated by the parties at their own and not bey algorithms and timeouts.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 28.03.2014, at 12:38, Wladimir <laanwj at gmail.com> wrote:\n>\n>\n> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach <\n> andreas at schildbach.de> wrote:\n>\n>> I see the problem.\n>>\n>> However, I don't see how PaymentDetails can be an answer. None of the\n>> fields (other than outputs and network) can be known in advance (at the\n>> time of the initial payment).\n>>\n>> You're probably aiming for an expires field? How would you refund a\n>> payment after expiry? Note its not your choice wether to refund a\n>> payment -- it can be ordered by a court years after the payment happened.\n>>\n>\n> Communication between the merchant and buyer would be needed in this case.\n>\n> I'd say that would be not unreasonable if something is to be refunded\n> after a year or more. After all, people may have moved, bank accounts\n> changed, even outside the bitcoin world.\n>\n> It should probably not be accepted to set a very low expiration time for\n> the refund address, like <3 months, as it's as bad as not providing a\n> refund address at all and brings back all the pre-BIP70 confusion.\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/ac302555/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T11:54:31",
                "message_text_only": "On 28.03.2014, at 12:46, Mike Hearn <mike at plan99.net> wrote:\n\n> I don't want to manage a \"business relationship\" with every shop I buy something from. That's way too much effort. There can certainly be cases where a more complicated relationship is created by bootstrapping off BIP70, perhaps with an extension, but nailing the ordinary buyer-to-seller relationship seems like a good scope for BIP70 for now.\n> \n\nIt is not more effort than an auto remembered call-in phone number. You delete if you do not care. The difference however is that it would be a clean protocol for repeated payments in both directions for whatever reason, where \"refund\" is and \"payment\" are not special compared to \"1st installment\", \"overpayed back\" or \"tip\"  or whatever extra charge arises later.\n\n\n> \n> On Fri, Mar 28, 2014 at 12:45 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> Yes, you begin to see that the payment protocol, as is has a too narrow scope of a web cart - customer, and does not even fit that.\n> \n> It is not about payment requests but about business relationships. We need a protocol that deals with that concept instead of individual requests,\n> so we really get out of the hell of addresses. Business relationships are terminated by the parties at their own and not bey algorithms and timeouts.\n> \n> Regards,\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> istinfo/bitcoin-development\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77731fc6/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77731fc6/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T12:27:18",
                "message_text_only": ">\n> It is not more effort than an auto remembered call-in phone number. You\n> delete if you do not care. The difference however is that it would be a\n> clean protocol for repeated payments in both directions for whatever\n> reason, where \"refund\" is and \"payment\" are not special compared to \"1st\n> installment\", \"overpayed back\" or \"tip\"  or whatever extra charge arises\n> later.\n>\n\nI think that'd be too abstract. The purpose of the refund field is that so\nif/when you receive a payment there, the wallet UI can do something\nintelligent, like show you in your transactions list that a certain payment\nwas refunded using language the user will understand. If it's modelled at\nthe protocol level without that then it makes producing good UI's harder.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2bde42f3/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T12:55:57",
                "message_text_only": "On 28.03.2014, at 13:27, Mike Hearn <mike at plan99.net> wrote:\n\n> It is not more effort than an auto remembered call-in phone number. You delete if you do not care. The difference however is that it would be a clean protocol for repeated payments in both directions for whatever reason, where \"refund\" is and \"payment\" are not special compared to \"1st installment\", \"overpayed back\" or \"tip\"  or whatever extra charge arises later.\n> \n> I think that'd be too abstract. The purpose of the refund field is that so if/when you receive a payment there, the wallet UI can do something intelligent, like show you in your transactions list that a certain payment was refunded using language the user will understand. If it's modelled at the protocol level without that then it makes producing good UI's harder.\n\nWhat is too abstract in a contact list ? If the payment comes with a tag like refund the UI could display as such and if it comes with e.g. VAT then that. \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/f0e320ee/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/f0e320ee/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T13:00:27",
                "message_text_only": ">\n> What is too abstract in a contact list ? If the payment comes with a tag\n> like refund the UI could display as such and if it comes with e.g. VAT then\n> that.\n>\n\nHow is this any different? The tag in this case is the address and the\npayment is being delivered by the block chain (direct submission for\nuser->merchant is easier than merchant->user) so we can't stuff extra data\nanywhere else. Then the UI knows it was a refund payment and not for\nanything else.\n\nI don't see the relevance of VAT here.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/e99c3d41/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T13:09:34",
                "message_text_only": "On 28.03.2014, at 14:00, Mike Hearn <mike at plan99.net> wrote:\n\n> What is too abstract in a contact list ? If the payment comes with a tag like refund the UI could display as such and if it comes with e.g. VAT then that. \n> \n> How is this any different? The tag in this case is the address and the payment is being delivered by the block chain (direct submission for user->merchant is easier than merchant->user) so we can't stuff extra data anywhere else. Then the UI knows it was a refund payment and not for anything else.\n> \n\nThe difference is the concept of setting up a channel that allows both parties to create valid addresses of the other by exchanging some kind of master keys. The initial handshake with the protocol would agree on tags of individual address indexes if used. The wallets would have to observe those agreed inidices and evtl. extend range. Payments could go back and forth. Either party might delete the channel information and stop observing keys as soon as he does no longer expect a payment from the other. This would be an explicit operation, like deleting a contact.\n\n> I don't see the relevance of VAT here.\n\nIt was an example label. I would not be suprised if with widespread use of payments some government would require VAT collected separately. It is just a guess and has no weight in my prior arguments. \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2d5aca1a/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2d5aca1a/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T11:30:39",
                "message_text_only": "Instead of a payment request and refund, businesses would actually need a payment channel, that once established allows for multiple payments back and forth between counterparties.\n\nOne might have a number of open channels until the business relationship is assumed. The customer might decide to close the channel explicitelly once he does no longer expect a payment. \n\nRegards,\n\nTam\u00e1s Blummer\nhttp://bitsofproof.com\n\nOn 28.03.2014, at 12:07, Mike Hearn <mike at plan99.net> wrote:\n\n> Modern devices like smartphones and tablets do not have swap files. This design is chosen to ensure responsive, fluid UI that can avoid blocking on disk regardless of how much multi-tasking is done, but it creates ripples that impact everything else.\n> \n> One implication of this is that on these devices, we cannot store all keys or transactions in memory forever. BIP 70 has an expiry field for PaymentRequests that we can use to allow us to eventually stop loading those keys into RAM - at that point payments to those keys would no longer be recognised. But there's no equivalent for refund addresses.\n> \n> More generally, though we re-used the output structure to define the refund, we didn't (for some reason that I forgot) reuse PaymentDetails, even though the payment details for a refund are indeed PaymentDetails.\n> \n> Though I am loathe to go back and redesign this part of BIP 70 so soon after we shipped v1, it seems to me like the refund feature may be hard to implement on phones if there's no time limit for when you can receive a refund. Otherwise a wallet has to be looking out for refunds for payments you may have made years ago. So perhaps we should add a new refund field that embeds a PaymentDetails structure instead of being just a list of outputs.\n> \n> We could try and solve this problem some other way purely internally, by doing a kind of wallet-specific swapping process in which things like Bloom filters are calculated without all keys in them being held in memory at once (perhaps caching filters for old parts of the key chain on disk), so you can have \"infinite\" wallets, but eventually the huge Bloom filters that would result would hurt efficiency in other ways. So key expiry seems pretty fundamental to scalability.\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0b3f63c9/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0b3f63c9/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T13:18:10",
                "message_text_only": "May I ask how the current payment protocol is supposed to handle salaries? I hope you do not assume the employee creates a payment request, since he does not\neven calculate the amount. There you go where a channel I described is definitelly needed.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 28.03.2014, at 12:30, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n> Instead of a payment request and refund, businesses would actually need a payment channel, that once established allows for multiple payments back and forth between counterparties.\n> \n> One might have a number of open channels until the business relationship is assumed. The customer might decide to close the channel explicitelly once he does no longer expect a payment. \n> \n> Regards,\n> \n> Tam\u00e1s Blummer\n> http://bitsofproof.com\n> \n> On 28.03.2014, at 12:07, Mike Hearn <mike at plan99.net> wrote:\n> \n>> Modern devices like smartphones and tablets do not have swap files. This design is chosen to ensure responsive, fluid UI that can avoid blocking on disk regardless of how much multi-tasking is done, but it creates ripples that impact everything else.\n>> \n>> One implication of this is that on these devices, we cannot store all keys or transactions in memory forever. BIP 70 has an expiry field for PaymentRequests that we can use to allow us to eventually stop loading those keys into RAM - at that point payments to those keys would no longer be recognised. But there's no equivalent for refund addresses.\n>> \n>> More generally, though we re-used the output structure to define the refund, we didn't (for some reason that I forgot) reuse PaymentDetails, even though the payment details for a refund are indeed PaymentDetails.\n>> \n>> Though I am loathe to go back and redesign this part of BIP 70 so soon after we shipped v1, it seems to me like the refund feature may be hard to implement on phones if there's no time limit for when you can receive a refund. Otherwise a wallet has to be looking out for refunds for payments you may have made years ago. So perhaps we should add a new refund field that embeds a PaymentDetails structure instead of being just a list of outputs.\n>> \n>> We could try and solve this problem some other way purely internally, by doing a kind of wallet-specific swapping process in which things like Bloom filters are calculated without all keys in them being held in memory at once (perhaps caching filters for old parts of the key chain on disk), so you can have \"infinite\" wallets, but eventually the huge Bloom filters that would result would hurt efficiency in other ways. So key expiry seems pretty fundamental to scalability.\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77dcc289/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77dcc289/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-03-28T14:01:11",
                "message_text_only": "On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> May I ask how the current payment protocol is supposed to handle salaries?\n>\n\nIt doesn't.\n\n\"walk before you run\" and all that; lets see what problems we run into with\nthe minimal payment protocol we have now (like refund outputs you have to\nremember forever) before we create an insurmountable set of problems by\ntrying to solve everything we can think of all at once.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/88d9c789/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T14:06:31",
                "message_text_only": "Yeah. Though there's actually a proposal for recurring payments from the\nKillBill folks. I keep bugging BitPay to review it but it seems they're\nlagging behind there, so perhaps we should just move ahead with that\ncandidate extension.\n\n\nOn Fri, Mar 28, 2014 at 3:01 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n>\n>> May I ask how the current payment protocol is supposed to handle salaries?\n>>\n>\n> It doesn't.\n>\n> \"walk before you run\" and all that; lets see what problems we run into\n> with the minimal payment protocol we have now (like refund outputs you have\n> to remember forever) before we create an insurmountable set of problems by\n> trying to solve everything we can think of all at once.\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0936e4ad/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T14:27:35",
                "message_text_only": "I have nothing against incremental development. This will however not pick up until it offers some incremental benefit compared to current payment processor solutions, \nsuch as e.g.\n\n1. Symmetrical. One can also offer a payment.\n2. Aggregating and Netting. Handle multiple installments and/or net with previous cash flows.\n3. More secure. One has a check not only on the payment address (which already has one with https:// in the web shop scenario it is currently able support) but not on the refund.\n\n\nOn 28.03.2014, at 15:01, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> May I ask how the current payment protocol is supposed to handle salaries?\n> \n> It doesn't.\n> \n> \"walk before you run\" and all that; lets see what problems we run into with the minimal payment protocol we have now (like refund outputs you have to remember forever) before we create an insurmountable set of problems by trying to solve everything we can think of all at once.\n> \n> -- \n> --\n> Gavin Andresen\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/19ae087e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/19ae087e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T15:23:10",
                "message_text_only": "So I take it BOPShop won't be supporting BIP70 then? :(\n\n\nOn Fri, Mar 28, 2014 at 3:27 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> I have nothing against incremental development. This will however not pick\n> up until it offers some incremental benefit compared to current payment\n> processor solutions,\n> such as e.g.\n>\n> 1. Symmetrical. One can also offer a payment.\n> 2. Aggregating and Netting. Handle multiple installments and/or net with\n> previous cash flows.\n> 3. More secure. One has a check not only on the payment address (which\n> already has one with https:// in the web shop scenario it is currently\n> able support) but not on the refund.\n>\n>\n> On 28.03.2014, at 15:01, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>\n> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n>\n>> May I ask how the current payment protocol is supposed to handle salaries?\n>>\n>\n> It doesn't.\n>\n> \"walk before you run\" and all that; lets see what problems we run into\n> with the minimal payment protocol we have now (like refund outputs you have\n> to remember forever) before we create an insurmountable set of problems by\n> trying to solve everything we can think of all at once.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/a23dd348/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T15:26:57",
                "message_text_only": "On 28.03.2014, at 16:23, Mike Hearn <mike at plan99.net> wrote:\n> So I take it BOPShop won't be supporting BIP70 then? :(\n> \n\nSupporting BIP70 by BitPay or BopShop is a cake since it does no more then they did without it.\nI am not in opposition but see no reason to be enthusiastic about it. I will once the spec goes\nfurther than what was possible before.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/236c5059/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-28T16:34:59",
                "message_text_only": ">\n> Supporting BIP70 by BitPay or BopShop is a cake since it does no more then\n> they did without it.\n> I am not in opposition but see no reason to be enthusiastic about it. I\n> will once the spec goes\n> further than what was possible before.\n>\n\nSo, if e.g. Trezor ships a firmware update that uses BIP70 to present\nsigned payment identities on the screen, would you support it then?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/08b946b1/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-28T16:45:40",
                "message_text_only": "On 28.03.2014, at 17:34, Mike Hearn <mike at plan99.net> wrote:\n> Supporting BIP70 by BitPay or BopShop is a cake since it does no more then they did without it.\n> I am not in opposition but see no reason to be enthusiastic about it. I will once the spec goes\n> further than what was possible before.\n> \n> So, if e.g. Trezor ships a firmware update that uses BIP70 to present signed payment identities on the screen, would you support it then?\n\nYes that would be neat and I would not want to spoil the show. I wish the established identity could be re-used though to send and much more.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/c823ed30/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/c823ed30/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-31T09:23:09",
                "message_text_only": "On Fri, Mar 28, 2014 at 12:07:04PM +0100, Mike Hearn wrote:\n> Though I am loathe to go back and redesign this part of BIP 70 so soon\n> after we shipped v1, it seems to me like the refund feature may be hard to\n> implement on phones if there's no time limit for when you can receive a\n> refund. Otherwise a wallet has to be looking out for refunds for payments\n> you may have made years ago. So perhaps we should add a new refund field\n> that embeds a PaymentDetails structure instead of being just a list of\n> outputs.\n> \n> We could try and solve this problem some other way purely internally, by\n> doing a kind of wallet-specific swapping process in which things like Bloom\n> filters are calculated without all keys in them being held in memory at\n> once (perhaps caching filters for old parts of the key chain on disk), so\n> you can have \"infinite\" wallets, but eventually the huge Bloom filters that\n> would result would hurt efficiency in other ways. So key expiry seems\n> pretty fundamental to scalability.\n\nOne of the main goals of steath addresses is actually scalability. In\nparticular in the refund address case you would use stealth addresses\nwith a per-order UUID so that refunds can be detected cheaply by just\nscanning for payments to your (single) stealth address, then when those\npayments are detected, check the UUID against a on-disk database. A\n64-bit \"UUID\" is probably fine, although unfortunately with OP_RETURN\nquite unexpectedly dropped to 40 bytes the standard needs to change;\nmight have to compromise on privacy and re-use a txin pubkey to make\nthings fit.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/9c53067e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP 70 refund field",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tamas Blummer",
                "Wladimir",
                "Andreas Schildbach",
                "Mike Hearn",
                "Roy Badami",
                "Peter Todd",
                "Gavin Andresen"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 47458
        }
    },
    {
        "title": "[Bitcoin-development] BIP 70 and OP_RETURN",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2014-03-28T21:40:11",
                "message_text_only": "The description of the Output message states that the payment request\ncan specify any standard TxOut script, and that OP_RETURN is a standard\ntransaction type that would imply the ability to specify OP_RETURN\noutputs in BIP 70 payment requests.\n\nIf the creator of a payment request wanted the sender to include a small\namount of data as an OP_RETURN output, how would they specify this?\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/b5b42f1e/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/b5b42f1e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-29T13:30:47",
                "message_text_only": "They would just encode the OP_RETURN script into an Output structure. I'm\nnot sure about the question - you seem to give the answer yourself in the\nfirst paragraph?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/900626a1/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-03-29T15:02:22",
                "message_text_only": "On 03/29/2014 01:30 PM, Mike Hearn wrote:\n> They would just encode the OP_RETURN script into an Output structure. I'm\n> not sure about the question - you seem to give the answer yourself in the\n> first paragraph?\n> \n\nI guess what I was asking is whether or not all BIP70 compatible clients\nwill support the creation of all standard output types, including\nOP_RETURN outputs.\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2744deda/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2744deda/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-29T15:06:04",
                "message_text_only": "They should do. If they don't they're not spec compliant. I'm not sure what\nthey actually do though. Currently only Bitcoin Core and Android Bitcoin\nWallet implement BIP 70 so you can just create such a request and then try\nit out and see what happens.\n\n\nOn Sat, Mar 29, 2014 at 4:02 PM, Justus Ranvier <justusranvier at gmail.com>wrote:\n\n> On 03/29/2014 01:30 PM, Mike Hearn wrote:\n> > They would just encode the OP_RETURN script into an Output structure. I'm\n> > not sure about the question - you seem to give the answer yourself in the\n> > first paragraph?\n> >\n>\n> I guess what I was asking is whether or not all BIP70 compatible clients\n> will support the creation of all standard output types, including\n> OP_RETURN outputs.\n>\n> --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/4cf79140/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 70 and OP_RETURN",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Justus Ranvier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3535
        }
    },
    {
        "title": "[Bitcoin-development] Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
        "thread_messages": [
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T08:05:17",
                "message_text_only": "Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.\n\nComplete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n\nI am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T08:34:25",
                "message_text_only": "Great stuff Matt!\n\nI have an implementation of Shamir's Secret Sharing here: https://github.com/bitsofproof/bop-bitcoin-client-misc/blob/master/src/main/java/com/bitsofproof/supernode/misc/ShamirsSecretSharing.java\n\nWhat was missing was nice serialization. Thanks a lot for defining and starting the process.\n\n I will shortly adapt my code and check your test vectors.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 29.03.2014, at 09:05, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.\n> \n> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8a7b3715/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8a7b3715/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T08:44:53",
                "message_text_only": "Hi Matt,\n\nI used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.\nTherefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 29.03.2014, at 09:05, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.\n> \n> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/954dee5e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/954dee5e/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T08:51:09",
                "message_text_only": "On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:\n> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.\n> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.\n\nMaster keys of 32 bytes would work as-is, as ordinary private keys are also 32 bytes. Secrets of other lengths could be supported if the function that generates a[i] from a[i-1] (which is presently SHA-256) were replaced with a function having parameterized output length, such as scrypt.\n\nBase58Check encodings of shares for secrets of lengths other than 32 bytes would have prefixes other than \"SS\", but that's not a huge concern. I suspect 32 bytes would be the most common secret length anyway, wouldn't you?"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T16:54:11",
                "message_text_only": "On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:\n> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.\n> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.\n\nI have expanded the BIP so that it additionally applies to BIP32 master seeds of sizes 128, 256, and 512 bits.\n\nhttps://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n\nThe most significant change versus the previous version is how the coefficients of the polynomials are constructed. Previously they were SHA-256 digests. Now they are SHA-512 digests, modulo a prime number that is selected depending on the size of the secret."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T17:37:44",
                "message_text_only": "I had Matt's answer already, see below, but then I recognized that the group was not cc:-d, so I repeat:\n\nIt would help on the user interface to include into individual shares:\n\n1. Number of shares needed\n2. A few bytes fingerprint of the secret so shares that likely belong together can be identified.\n\nI wonder how others weight security vs. usability in these questions.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn Saturday, 29 March 2014, at 6:22 pm, Tamas Blummer wrote:\n> It might make sense to store the number of shares needed. I know it is not needed by math, but could help on user interface to say,\n> you need x more shares..\n\nI intentionally omitted that information because it's a security risk. If an adversary gains control of one share and can see exactly how many more shares he needs, he may be able to plan a better attack. If he is clueless about how many shares he needs, then he may not be able to execute an attack at all because he may not know whether his information about what shares exist and where is complete.\n\nOn 29.03.2014, at 17:54, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:\n>> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.\n>> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.\n> \n> I have expanded the BIP so that it additionally applies to BIP32 master seeds of sizes 128, 256, and 512 bits.\n> \n> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> The most significant change versus the previous version is how the coefficients of the polynomials are constructed. Previously they were SHA-256 digests. Now they are SHA-512 digests, modulo a prime number that is selected depending on the size of the secret.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d985b90/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d985b90/attachment.sig>"
            },
            {
                "author": "Chris Beams",
                "date": "2014-03-29T09:08:47",
                "message_text_only": "Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n\nOn Mar 29, 2014, at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.\n> \n> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f9a99d19/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T09:31:12",
                "message_text_only": "On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n\nOkay, yes, I will address these questions."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T11:16:34",
                "message_text_only": "On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n\nI have added two new sections to address your questions.\n\nhttps://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki"
            },
            {
                "author": "Chris Beams",
                "date": "2014-03-29T11:54:27",
                "message_text_only": "Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.\n\nOn Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n> \n> I have added two new sections to address your questions.\n> \n> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6d447c6b/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-29T13:27:36",
                "message_text_only": "The comparison with multisig fails to mention that multi-signature\ntransactions explicitly define security at the transaction level.\nThis permits fine-grained specificity of what a key holder may\napprove.\n\nShamir is much more coarse-grained.  You reconstitute a private key,\nwhich may then be used to control anything that key controls.  Thus,\nin addition to Shamir itself, you need policies such as \"no key\nreuse.\"\n\nMy first impression of Shamir many moons ago was \"cool!\" but that's\nsince been tempered by thinking through the use cases.  Shamir has a\nhigher D.I.Y. factor, with a correspondingly larger surface of\nthings-that-could-go-wrong, IMO.\n\n(None of this implies making an informational BIP lacks value; I'm all\nfor an informational BIP)\n\n\n\n\nOn Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:\n> Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.\n>\n> On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n>\n>> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n>>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n>>\n>> I have added two new sections to address your questions.\n>>\n>> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-29T13:36:07",
                "message_text_only": "Right - the explanation in the BIP about the board of  directors is IMO a\nlittle misleading. The problem is with splitting a private key is that at\nsome point, *someone* has to get the full private key back and they can\nthen just remember the private key to undo the system. CHECKMULTISIG avoids\nthis.\n\nI can imagine that there may be occasional uses for splitting a wallet seed\nlike this, like for higher security cold wallets, but I suspect an ongoing\nshared account like a corporate account is still best off using\nCHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.\n\n\nOn Sat, Mar 29, 2014 at 2:27 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> The comparison with multisig fails to mention that multi-signature\n> transactions explicitly define security at the transaction level.\n> This permits fine-grained specificity of what a key holder may\n> approve.\n>\n> Shamir is much more coarse-grained.  You reconstitute a private key,\n> which may then be used to control anything that key controls.  Thus,\n> in addition to Shamir itself, you need policies such as \"no key\n> reuse.\"\n>\n> My first impression of Shamir many moons ago was \"cool!\" but that's\n> since been tempered by thinking through the use cases.  Shamir has a\n> higher D.I.Y. factor, with a correspondingly larger surface of\n> things-that-could-go-wrong, IMO.\n>\n> (None of this implies making an informational BIP lacks value; I'm all\n> for an informational BIP)\n>\n>\n>\n>\n> On Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:\n> > Enlightening; thanks, Matt. And apologies to the list for my earlier\n> inadvertent double-post.\n> >\n> > On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name>\n> wrote:\n> >\n> >> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n> >>> Matt, could you expand on use cases for which you see Shamir's Secret\n> Sharing Scheme as the best tool for the job? In particular, when do you see\n> that it would be superior to simply going with multisig in the first place?\n> Perhaps you see these as complimentary approaches, toward defense-in-depth?\n> In any case, the Motivation and Rationale sections of the BIP in its\n> current form are silent on these questions.\n> >>\n> >> I have added two new sections to address your questions.\n> >>\n> >> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2bdbbda6/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T13:38:53",
                "message_text_only": "This is why my motivation is rather secure backup, not multisig. Instead of storing encrypted seed in one location and the passphrase for it in an other location, one can just store two shares in two places.\n\n\n> Right - the explanation in the BIP about the board of  directors is IMO a little misleading. The problem is with splitting a private key is that at some point, someone has to get the full private key back and they can then just remember the private key to undo the system. CHECKMULTISIG avoids this.\n> \n> I can imagine that there may be occasional uses for splitting a wallet seed like this, like for higher security cold wallets, but I suspect an ongoing shared account like a corporate account is still best off using CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.\n> \n> \n> On Sat, Mar 29, 2014 at 2:27 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> The comparison with multisig fails to mention that multi-signature\n> transactions explicitly define security at the transaction level.\n> This permits fine-grained specificity of what a key holder may\n> approve.\n> \n> Shamir is much more coarse-grained.  You reconstitute a private key,\n> which may then be used to control anything that key controls.  Thus,\n> in addition to Shamir itself, you need policies such as \"no key\n> reuse.\"\n> \n> My first impression of Shamir many moons ago was \"cool!\" but that's\n> since been tempered by thinking through the use cases.  Shamir has a\n> higher D.I.Y. factor, with a correspondingly larger surface of\n> things-that-could-go-wrong, IMO.\n> \n> (None of this implies making an informational BIP lacks value; I'm all\n> for an informational BIP)\n> \n> \n> \n> \n> On Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:\n> > Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.\n> >\n> > On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> >\n> >> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:\n> >>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n> >>\n> >> I have added two new sections to address your questions.\n> >>\n> >> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> >\n> >\n> > ------------------------------------------------------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> \n> \n> \n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6c333492/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6c333492/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T14:10:38",
                "message_text_only": "On Saturday, 29 March 2014, at 2:36 pm, Mike Hearn wrote:\n> Right - the explanation in the BIP about the board of  directors is IMO a\n> little misleading. The problem is with splitting a private key is that at\n> some point, *someone* has to get the full private key back and they can\n> then just remember the private key to undo the system. CHECKMULTISIG avoids\n> this.\n\nThe implication is that every director would want to retain the board's private key for himself but also would want to prevent every other director from successfully retaining the private key for himself, leading to a perpetual stalemate in which no director ever gets to retain the private key.\n\n> I can imagine that there may be occasional uses for splitting a wallet seed\n> like this, like for higher security cold wallets, but I suspect an ongoing\n> shared account like a corporate account is still best off using\n> CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.\n\nMultisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired)."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-29T14:19:20",
                "message_text_only": "On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).\n\nDisagree with \"does not allow\"  Review bitcoin's script language.\n\nBitcoin script can handle the use case you describe.  Add conditionals\nto the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'\ntype boolean logic entirely in script, and be far more flexible than a\nsingle CHECKMULTISIG affords.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T14:55:54",
                "message_text_only": "On Saturday, 29 March 2014, at 10:19 am, Jeff Garzik wrote:\n> On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).\n> \n> Disagree with \"does not allow\"  Review bitcoin's script language.\n> \n> Bitcoin script can handle the use case you describe.  Add conditionals\n> to the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'\n> type boolean logic entirely in script, and be far more flexible than a\n> single CHECKMULTISIG affords.\n\nDepends on your definition of \"can.\" Bitcoin's scripting language is awesome, but it's mostly useless due to the requirement that scripts match one of a select few \"standard\" templates in order to be allowed to propagate across the network and be mined into blocks. I really hate IsStandard and wish it would die."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-03-29T15:04:52",
                "message_text_only": "Nobody is exactly thrilled by IsStandard, but it's not a deal-killer. If\nyou have a use for a new type of script it can be added, and people do\nupgrade:\n\nhttp://getaddr.bitnodes.io/dashboard/chart/?days=30\n\nAs you can see the 0.9 rollout is going OK. If a new script type had been\nmade standard for 0.9 like OP_RETURN was, I'm guessing it'll only be\nanother month or so and it'll be quite usable.\n\n\nOn Sat, Mar 29, 2014 at 3:55 PM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Saturday, 29 March 2014, at 10:19 am, Jeff Garzik wrote:\n> > On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name>\n> wrote:\n> > > Multisig does not allow for the topology I described. Say the board\n> has seven directors, meaning the majority threshold is four. This means the\n> organization needs the consent of six individuals in order to sign a\n> transaction: the president, the CFO, and any four of the board members. A\n> 6-of-9 multisig would not accomplish the same policy, as then any six board\n> members could successfully sign a transaction without the consent of the\n> president or CFO. Of course the multi-signature scheme could be expanded to\n> allow for hierarchical threshold topologies, or Shamir's Secret Sharing can\n> be used to distribute keys at the second level (and further, if desired).\n> >\n> > Disagree with \"does not allow\"  Review bitcoin's script language.\n> >\n> > Bitcoin script can handle the use case you describe.  Add conditionals\n> > to the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'\n> > type boolean logic entirely in script, and be far more flexible than a\n> > single CHECKMULTISIG affords.\n>\n> Depends on your definition of \"can.\" Bitcoin's scripting language is\n> awesome, but it's mostly useless due to the requirement that scripts match\n> one of a select few \"standard\" templates in order to be allowed to\n> propagate across the network and be mined into blocks. I really hate\n> IsStandard and wish it would die.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/a39febd9/attachment.html>"
            },
            {
                "author": "Watson Ladd",
                "date": "2014-03-29T14:28:20",
                "message_text_only": "On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> On Saturday, 29 March 2014, at 2:36 pm, Mike Hearn wrote:\n>> Right - the explanation in the BIP about the board of  directors is IMO a\n>> little misleading. The problem is with splitting a private key is that at\n>> some point, *someone* has to get the full private key back and they can\n>> then just remember the private key to undo the system. CHECKMULTISIG avoids\n>> this.\n>\n> The implication is that every director would want to retain the board's private key for himself but also would want to prevent every other director from successfully retaining the private key for himself, leading to a perpetual stalemate in which no director ever gets to retain the private key.\n\nThis is not the case: one can use MPC techniques to compute a\nsignature from shares without reconstructing the private key. There is\na paper on this for bitcoin, but I don't know where it is.\n\n>\n>> I can imagine that there may be occasional uses for splitting a wallet seed\n>> like this, like for higher security cold wallets, but I suspect an ongoing\n>> shared account like a corporate account is still best off using\n>> CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.\n>\n> Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \n\"Those who would give up Essential Liberty to purchase a little\nTemporary Safety deserve neither  Liberty nor Safety.\"\n-- Benjamin Franklin"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-29T14:36:58",
                "message_text_only": "On Sat, Mar 29, 2014 at 7:28 AM, Watson Ladd <wbl at uchicago.edu> wrote:\n> This is not the case: one can use MPC techniques to compute a\n> signature from shares without reconstructing the private key. There is\n> a paper on this for bitcoin, but I don't know where it is.\n\nPractically speaking you cannot unless the technique used is one\ncarefully selected to make it possible. This proposal isn't such a\nscheme I beleieve, however,  and I think I'd strongly prefer that we\nBIP standardize a formulation which also has this property.\n\nThe paper you want is\nhttp://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.67.9913\n\nThere will soon be a paper coming out from some princeton folks about\nrefining that and applying it to Bitcoin.\n\nYou can use the secret sharing from threshold ecdsa in the\nnot-super-useful way where you just recombine the private key and\nsign... but you can also use it to compute a secret shared signature\nand then interpolate back the signature... avoiding the need for any\ntrusted device in holding the signature."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T15:01:45",
                "message_text_only": "On Saturday, 29 March 2014, at 7:36 am, Gregory Maxwell wrote:\n> On Sat, Mar 29, 2014 at 7:28 AM, Watson Ladd <wbl at uchicago.edu> wrote:\n> > This is not the case: one can use MPC techniques to compute a\n> > signature from shares without reconstructing the private key. There is\n> > a paper on this for bitcoin, but I don't know where it is.\n> \n> Practically speaking you cannot unless the technique used is one\n> carefully selected to make it possible. This proposal isn't such a\n> scheme I beleieve, however,  and I think I'd strongly prefer that we\n> BIP standardize a formulation which also has this property.\n\nI too would prefer that, but I do not believe there exists a method for computing a traditional signature from decomposed private key shares. Unless I'm mistaken, the composed signature has a different formula and requires a different verification algorithm from the ECDSA signatures we're using today. Thus, such a scheme would require a change to the Bitcoin scripting language. I specifically did not want to address that in my BIP because changes like that take too long. I am aiming to be useful in the present."
            },
            {
                "author": "Chris Beams",
                "date": "2014-03-29T09:21:16",
                "message_text_only": "Matt, could you expand on use cases for which you see Shamir's Secret Sharing as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense in depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.\n\nOn Mar 29, 2014, at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.\n> \n> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d13e0ea/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T08:54:03",
                "message_text_only": "On Saturday, 29 March 2014, at 4:51 am, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:\n> > I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.\n> > Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.\n> \n> Master keys of 32 bytes would work as-is, as ordinary private keys are also 32 bytes. Secrets of other lengths could be supported if the function that generates a[i] from a[i-1] (which is presently SHA-256) were replaced with a function having parameterized output length, such as scrypt.\n\nActually, secrets with value greater than secp256k1_N cannot be supported because the modular arithmetic would destroy them. But any secret smaller than 256 bits would be fine."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T15:44:05",
                "message_text_only": "On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n\nThanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.\n\nA distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes."
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-29T16:59:19",
                "message_text_only": "Armory has had \"Fragmented Backups\" for over a year, now.  Advanced\nusers love it.  Though, I would say it's kind of difficult to\nstandardize the way I did it since I was able to implement all the\nfinite field math with recursion, list comprehensions and python\narbitrary-big-integers in about 100 lines.  I'm not sure how \"portable\"\nit is to other languages.  There's obviously better ways to do it, but I\ndidn't need a better way, because I don't need to support fragmentation\nabove M=8 and this was 100% sufficient for it.  And I was the only one\ndoing it, so there was no one to be compatible with.\n\nI won't lie, there's a lot of work that goes into making an interface\nthat makes this feature \"usable.\"  The user needs clear ways to identify\nwhich fragments are associated with which wallet, and which fragments\nare compatible with each other.  They need a way to save some fragments\nto file, print them, or simply write them down.  They need a way to\nre-enter fragment, reject duplicates, identify errors, etc.  Without it,\nthe math fails silently, and you end up restoring a different wallet.   \nAnd they need a way to test that it all works.   Armory did all this,\nbut it was no trivial task.  Including an interface that will test up to\n50 subsets of make sure the math produces the same values every time\n(which still is not sufficient for some users, who won't be satisified\ntil they see they're wallet actually restored from fragments.\n\nAlso I put the secret in the highest-order coefficient of the\npolynomial, and made sure that the other coefficients were\ndeterministic.  This meant that if print out an M-of-N wallet, I can\nlater print out an M-of-(N+1) wallet and the first N fragments will be\nthe same.  I'm not sure how many users would trust this, but we felt it\nwas important in case a user needs to export some fragments, even if\nthey don't increase N.\n\nYou might consider loading Armory in offline mode, create a wallet, and\nthen do a fragmented backup to see how we did it.  I am extremely\nsatisfied with the interface, but it's most definitely an \"advanced\"\ntool.  But so is Armory ... which made it a good fit.  But it might not\nbe for everyone.\n\n-Alan\n\n\n\nOn 03/29/2014 11:44 AM, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n>> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n> Thanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.\n>\n> A distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes.\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T17:19:29",
                "message_text_only": "On Saturday, 29 March 2014, at 12:59 pm, Alan Reiner wrote:\n> I won't lie, there's a lot of work that goes into making an interface\n> that makes this feature \"usable.\"  The user needs clear ways to identify\n> which fragments are associated with which wallet, and which fragments\n> are compatible with each other.\n\nThe same is true of the multiple private keys involved in a multi-signature addresses.\n\n> They need a way to save some fragments\n> to file, print them, or simply write them down.\n\nI proposed a share encoding scheme for exactly this purpose.\n\n> They need a way to\n> re-enter fragment, reject duplicates, identify errors, etc.  Without it,\n> the math fails silently, and you end up restoring a different wallet.\n\nI intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.\n\n> Also I put the secret in the highest-order coefficient of the\n> polynomial,\n\nDoes it make any difference which coefficient holds the secret? It's convenient to put it in the lowest-order coefficient to simply the recovery code.\n\n> and made sure that the other coefficients were\n> deterministic.  This meant that if print out an M-of-N wallet, I can\n> later print out an M-of-(N+1) wallet and the first N fragments will be\n> the same.  I'm not sure how many users would trust this, but we felt it\n> was important in case a user needs to export some fragments, even if\n> they don't increase N.\n\nMy BIP likewise deterministically chooses the coefficients so that the shares of a secret are consistent across all runs of the algorithm having the same M. As I'm sure you're aware, N (the number of shares to output) plays no part in the calculation and merely controls how many times the outermost loop is executed. My BIP doesn't even mention this parameter."
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-29T17:52:20",
                "message_text_only": "On 03/29/2014 01:19 PM, Matt Whitlock wrote:\n> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.\n\nI do not believe this is a good tradeoff.  It's basically obfuscation of\nsomething that is already considered secure at the expense of\nusability.  It's much more important to me that the user understands\nwhat is in their hands (or their family members after they get hit by a\nbus), than to obfuscate the parameters of the secret sharing to provide\na tiny disadvantage to an adversary who gets ahold of one. \n\nThe fact that it fails silently is really all downside, not a benefit. \nIf I have enough fragments, I can reconstruct the seed and see that it\nproduces addresses with money.  If not, I know I need more fragments. \nI'm much more concerned about my family having all the info they need to\nrecover the money, than an attacker knowing that he needs two more\nfragments instead of which are well-secured anyway."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T18:00:15",
                "message_text_only": "On Saturday, 29 March 2014, at 1:52 pm, Alan Reiner wrote:\n> On 03/29/2014 01:19 PM, Matt Whitlock wrote:\n> > I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.\n> \n> I do not believe this is a good tradeoff.  It's basically obfuscation of\n> something that is already considered secure at the expense of\n> usability.  It's much more important to me that the user understands\n> what is in their hands (or their family members after they get hit by a\n> bus), than to obfuscate the parameters of the secret sharing to provide\n> a tiny disadvantage to an adversary who gets ahold of one. \n> \n> The fact that it fails silently is really all downside, not a benefit. \n> If I have enough fragments, I can reconstruct the seed and see that it\n> produces addresses with money.  If not, I know I need more fragments. \n> I'm much more concerned about my family having all the info they need to\n> recover the money, than an attacker knowing that he needs two more\n> fragments instead of which are well-secured anyway.\n\nFor what it's worth, ssss also omits from the shares any information about the threshold. It will happily return a garbage secret if too few shares are combined. (And actually, it will happily return a garbage secret if too *many* shares are combined, too. My implementation does not have that problem.)"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-29T18:08:17",
                "message_text_only": "On 03/29/2014 02:00 PM, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 1:52 pm, Alan Reiner wrote:\n>> On 03/29/2014 01:19 PM, Matt Whitlock wrote:\n>>> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.\n>> I do not believe this is a good tradeoff.  It's basically obfuscation of\n>> something that is already considered secure at the expense of\n>> usability.  It's much more important to me that the user understands\n>> what is in their hands (or their family members after they get hit by a\n>> bus), than to obfuscate the parameters of the secret sharing to provide\n>> a tiny disadvantage to an adversary who gets ahold of one. \n>>\n>> The fact that it fails silently is really all downside, not a benefit. \n>> If I have enough fragments, I can reconstruct the seed and see that it\n>> produces addresses with money.  If not, I know I need more fragments. \n>> I'm much more concerned about my family having all the info they need to\n>> recover the money, than an attacker knowing that he needs two more\n>> fragments instead of which are well-secured anyway.\n> For what it's worth, ssss also omits from the shares any information about the threshold. It will happily return a garbage secret if too few shares are combined. (And actually, it will happily return a garbage secret if too *many* shares are combined, too. My implementation does not have that problem.)\n\nRegardless of how SSSS does it, I believe that obfuscating that\ninformation is bad news from a usability perspective.  Undoubtedly,\nusers will make lots of backups of lots of wallets and think they\nremember the M-parameter but don't.  They will accidentally mix in some\n3-of-5 fragments with their 2-of-4 not realizing they are incompatible,\nor not able to distinguish them.   Or they'll distribute too many\nthinking the threshold is higher and end up insecure, or possibly not\nhave enough fragments to restore their wallet thinking the M-value was\nlower than it actually was.   \n\nI just don't see the value in adding such complexity for the benefit of\nobfuscating information an attacker might be able to figure out anyway\n(most backups will be 2-of-N or 3-of-N) and can't act on anyway (because\nhe doesn't know where the other frags are and they are actually in\nsafe-deposit boxes)"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T18:10:54",
                "message_text_only": "On Saturday, 29 March 2014, at 2:08 pm, Alan Reiner wrote:\n> Regardless of how SSSS does it, I believe that obfuscating that\n> information is bad news from a usability perspective.  Undoubtedly,\n> users will make lots of backups of lots of wallets and think they\n> remember the M-parameter but don't.  They will accidentally mix in some\n> 3-of-5 fragments with their 2-of-4 not realizing they are incompatible,\n> or not able to distinguish them.   Or they'll distribute too many\n> thinking the threshold is higher and end up insecure, or possibly not\n> have enough fragments to restore their wallet thinking the M-value was\n> lower than it actually was.   \n> \n> I just don't see the value in adding such complexity for the benefit of\n> obfuscating information an attacker might be able to figure out anyway\n> (most backups will be 2-of-N or 3-of-N) and can't act on anyway (because\n> he doesn't know where the other frags are and they are actually in\n> safe-deposit boxes)\n\nOkay, you've convinced me. However, it looks like the consensus here is that my BIP is unneeded, so I'm not sure it would be worth the effort for me to improve it with your suggestions."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T18:16:28",
                "message_text_only": "I also think that we can add usability features if the underlying secret remains well protected.\nI do not think there is any reason to assume that the knowledge of the degree of the polynomial, would aid an attacker.\n\nSimilarly a fingerprint of the secret if it is unrelated to the hash used in the polinomyal should leak no useful information,\n\nThe length of such fingerpring (say 4 bytes) and the degree (1 byte) does not seem a big overhead for me.\n\nRemember that the biggest obstacle of Bitcoin is usability not security.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 29.03.2014, at 18:52, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> On 03/29/2014 01:19 PM, Matt Whitlock wrote:\n>> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.\n> \n> I do not believe this is a good tradeoff.  It's basically obfuscation of\n> something that is already considered secure at the expense of\n> usability.  It's much more important to me that the user understands\n> what is in their hands (or their family members after they get hit by a\n> bus), than to obfuscate the parameters of the secret sharing to provide\n> a tiny disadvantage to an adversary who gets ahold of one. \n> \n> The fact that it fails silently is really all downside, not a benefit. \n> If I have enough fragments, I can reconstruct the seed and see that it\n> produces addresses with money.  If not, I know I need more fragments. \n> I'm much more concerned about my family having all the info they need to\n> recover the money, than an attacker knowing that he needs two more\n> fragments instead of which are well-secured anyway.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/ad76bea3/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/ad76bea3/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-03-29T18:41:17",
                "message_text_only": "Armory does exactly this: it defines the \"Fragment ID\" as the first few\nbytes of the hash of the root pubKey + M-parameter, converted to\nbase58.  Then it explains to the user \"All fragments with the same\nfragment ID are compatible\" (which only works if you use deterministic\ncoefficients).  Each fragment is then labeled with \"[FragID]-#1\",\n\"[FragID]-#2\", etc.  It became quite useful for organizing the fragments\nand documenting how I was distributing them, especially if I had printed\nor saved the same fragment twice by accident.\n\n\n\nOn 03/29/2014 02:16 PM, Tamas Blummer wrote:\n> I also think that we can add usability features if the underlying\n> secret remains well protected.\n> I do not think there is any reason to assume that the knowledge of the\n> degree of the polynomial, would aid an attacker.\n>\n> Similarly a fingerprint of the secret if it is unrelated to the hash\n> used in the polinomyal should leak no useful information,\n>\n> The length of such fingerpring (say 4 bytes) and the degree (1 byte)\n> does not seem a big overhead for me.\n>\n> Remember that the biggest obstacle of Bitcoin is usability not security.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 29.03.2014, at 18:52, Alan Reiner <etotheipi at gmail.com\n> <mailto:etotheipi at gmail.com>> wrote:\n>\n>> On 03/29/2014 01:19 PM, Matt Whitlock wrote:\n>>> I intentionally omitted the parameter M (minimum subset size) from\n>>> the shares because including it would give an adversary a vital\n>>> piece of information. Likewise, including any kind of information\n>>> that would allow a determination of whether the secret has been\n>>> correctly reconstituted would give an adversary too much\n>>> information. Failing silently when given incorrect shares or an\n>>> insufficient number of shares is intentional.\n>>\n>> I do not believe this is a good tradeoff.  It's basically obfuscation of\n>> something that is already considered secure at the expense of\n>> usability.  It's much more important to me that the user understands\n>> what is in their hands (or their family members after they get hit by a\n>> bus), than to obfuscate the parameters of the secret sharing to provide\n>> a tiny disadvantage to an adversary who gets ahold of one.\n>>\n>> The fact that it fails silently is really all downside, not a benefit.\n>> If I have enough fragments, I can reconstruct the seed and see that it\n>> produces addresses with money.  If not, I know I need more fragments.\n>> I'm much more concerned about my family having all the info they need to\n>> recover the money, than an attacker knowing that he needs two more\n>> fragments instead of which are well-secured anyway.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8e874f60/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-29T17:28:16",
                "message_text_only": "Right now there are also people simply taking base58-encoded private\nkeys and running them through ssss-split.\n\nIt has a lot going for it, since it can easily be reassembled on any\nLinux machine without special software (B Poettering's Linux command\nline SSSS implementation[1] seems to be included in most Linux distros).\n\nroy\n\n[1] http://point-at-infinity.org/ssss/\n\nOn Sat, Mar 29, 2014 at 12:59:19PM -0400, Alan Reiner wrote:\n> \n> Armory has had \"Fragmented Backups\" for over a year, now.  Advanced\n> users love it.  Though, I would say it's kind of difficult to\n> standardize the way I did it since I was able to implement all the\n> finite field math with recursion, list comprehensions and python\n> arbitrary-big-integers in about 100 lines.  I'm not sure how \"portable\"\n> it is to other languages.  There's obviously better ways to do it, but I\n> didn't need a better way, because I don't need to support fragmentation\n> above M=8 and this was 100% sufficient for it.  And I was the only one\n> doing it, so there was no one to be compatible with.\n> \n> I won't lie, there's a lot of work that goes into making an interface\n> that makes this feature \"usable.\"  The user needs clear ways to identify\n> which fragments are associated with which wallet, and which fragments\n> are compatible with each other.  They need a way to save some fragments\n> to file, print them, or simply write them down.  They need a way to\n> re-enter fragment, reject duplicates, identify errors, etc.  Without it,\n> the math fails silently, and you end up restoring a different wallet.   \n> And they need a way to test that it all works.   Armory did all this,\n> but it was no trivial task.  Including an interface that will test up to\n> 50 subsets of make sure the math produces the same values every time\n> (which still is not sufficient for some users, who won't be satisified\n> til they see they're wallet actually restored from fragments.\n> \n> Also I put the secret in the highest-order coefficient of the\n> polynomial, and made sure that the other coefficients were\n> deterministic.  This meant that if print out an M-of-N wallet, I can\n> later print out an M-of-(N+1) wallet and the first N fragments will be\n> the same.  I'm not sure how many users would trust this, but we felt it\n> was important in case a user needs to export some fragments, even if\n> they don't increase N.\n> \n> You might consider loading Armory in offline mode, create a wallet, and\n> then do a fragmented backup to see how we did it.  I am extremely\n> satisfied with the interface, but it's most definitely an \"advanced\"\n> tool.  But so is Armory ... which made it a good fit.  But it might not\n> be for everyone.\n> \n> -Alan\n> \n> \n> \n> On 03/29/2014 11:44 AM, Matt Whitlock wrote:\n> > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n> >> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n> > Thanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.\n> >\n> > A distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes.\n> >\n> > ------------------------------------------------------------------------------\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T17:42:01",
                "message_text_only": "On Saturday, 29 March 2014, at 5:28 pm, Roy Badami wrote:\n> Right now there are also people simply taking base58-encoded private\n> keys and running them through ssss-split.\n> \n> It has a lot going for it, since it can easily be reassembled on any\n> Linux machine without special software (B Poettering's Linux command\n> line SSSS implementation[1] seems to be included in most Linux distros).\n> \n> roy\n> \n> [1] http://point-at-infinity.org/ssss/\n\nRespectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38."
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-29T17:51:30",
                "message_text_only": "On Sat, Mar 29, 2014 at 01:42:01PM -0400, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 5:28 pm, Roy Badami wrote:\n> > Right now there are also people simply taking base58-encoded private\n> > keys and running them through ssss-split.\n> > \n> > It has a lot going for it, since it can easily be reassembled on any\n> > Linux machine without special software (B Poettering's Linux command\n> > line SSSS implementation[1] seems to be included in most Linux distros).\n> > \n> > roy\n> > \n> > [1] http://point-at-infinity.org/ssss/\n> \n> Respectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38.\n\nAnd yet, how many wallets can import BIP38 keys?  If someone gave me\none I would have no idea what software (if any) can understand it (nor\nwould I have any idea how to generate one in the first place).\n\nAnyway, I'm not arguing against standardising these things - if people\nare going to implement this then of course it's beneficial that they\nimplement it compatibly.  It was just a simple observation - make of\nit what you will.\n\nroy"
            },
            {
                "author": "devrandom",
                "date": "2014-03-29T17:28:56",
                "message_text_only": "On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n> > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n> \n> Thanks. This is great, although it makes some critical references to an\n> ACM paper for which no URL is provided, and thus I cannot implement it.\n> \n> A distributed ECDSA notwithstanding, we still need a way to decompose a\n> BIP32 master seed into shares. I am envisioning a scenario in which I\n\nIt would seem that threshold ECDSA with keys derived from separate seeds\nhas better security properties than one seed that is then split up.  The\nmain thing is that there is no single point of attack in the generation\nor signing.\n\n> might meet my sudden and untimely demise, and I wish to allow my\n> beneficiaries to reconstruct my wallet's master seed after my death. I\n> would like to distribute seed shares to each of my beneficiaries and\n> some close friends, such that some subset of the shares must be joined\n> together to reconstitute my master seed. Shamir's Secret Sharing Scheme\n> is perfect for this use case. I am presently working on extending my\n> draft BIP so that it also applies to BIP32 master seeds of various\n> sizes.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \n--\nMiron / devrandom\n\n\n\n-- \n--\nMiron / devrandom"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T17:38:10",
                "message_text_only": "On Saturday, 29 March 2014, at 10:25 am, Dev Random wrote:\n> On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:\n> > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n> > > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n> > \n> > Thanks. This is great, although it makes some critical references to an\n> > ACM paper for which no URL is provided, and thus I cannot implement it.\n> > \n> > A distributed ECDSA notwithstanding, we still need a way to decompose a\n> > BIP32 master seed into shares. I am envisioning a scenario in which I\n> \n> It would seem that threshold ECDSA with keys derived from separate seeds\n> has better security properties than one seed that is then split up.  The\n> main thing is that there is no single point of attack in the generation\n> or signing.\n\nNo contest here. But can threshold ECDSA work with BIP32? In other words, can a threshold ECDSA public key be generated from separate, precomputed private keys, or can it only be generated interactively? Maybe the BIP32 master seeds have to be generated interactively, and then all sets of corresponding derived keys are valid signing groups?\n\nThreshold ECDSA certainly sounds nice, but is anyone working on a BIP for it? I would take it on myself, but I don't understand it well enough yet, and publicly available information on it seems lacking. I proposed this Shamir Secret Sharing BIP as an easily understood, easily implemented measure that we can use today, with no changes to existing Bitcoin software. It's low-hanging fruit."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-29T17:46:41",
                "message_text_only": "On Sat, Mar 29, 2014 at 10:38 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> But can threshold ECDSA work with BIP32?\n\nYes.\n\n>In other words, can a threshold ECDSA public key be generated from separate, precomputed private keys,\nNo.\n\n> can it only be generated interactively?\n\nYes.\n\nBut see the first question.  Basically you can do an interactive step\nto generate a master pubkey and then use BIP32 non-hardened derivation\nto build thresholded children.\n\nOn Sat, Mar 29, 2014 at 10:42 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Respectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38.\n\nBIP38 is a bad example (because it was created without public\ndiscussion due to a technical snafu).\n\nIn this case I don't see anything wrong with specifying secret\nsharing, but I think\u2014 if possible\u2014 it should be carefully constructed\nso that the same polynomials and interpolation code can be used for\nthreshold signatures (when encoding compatible data).\n\nIf it requires entirely different code than the code for threshold\nsigning it might as well be a file generic tool like SSSS."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-03-29T19:49:23",
                "message_text_only": "On 29.03.2014, at 18:46, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> In this case I don't see anything wrong with specifying secret\n> sharing, but I think\u2014 if possible\u2014 it should be carefully constructed\n> so that the same polynomials and interpolation code can be used for\n> threshold signatures (when encoding compatible data).\n\nThe paper http://www.cs.princeton.edu/~stevenag/bitcoin_threshold_signatures.pdf\ndoes not mention anything special about the polynomial to use other than:\n \"random polynomial f of degree t - 1 such that d = f(0)\"\n\nDo you have reasons to assume that there is more to this? Since this is compatible\nwith Matt's proposal.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/83b9bfba/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/83b9bfba/attachment.sig>"
            },
            {
                "author": "devrandom",
                "date": "2014-03-29T17:48:25",
                "message_text_only": "On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 10:25 am, Dev Random wrote:\n> > On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:\n> > > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:\n> > > > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/\n> > > \n> > > Thanks. This is great, although it makes some critical references to an\n> > > ACM paper for which no URL is provided, and thus I cannot implement it.\n> > > \n> > > A distributed ECDSA notwithstanding, we still need a way to decompose a\n> > > BIP32 master seed into shares. I am envisioning a scenario in which I\n> > \n> > It would seem that threshold ECDSA with keys derived from separate seeds\n> > has better security properties than one seed that is then split up.  The\n> > main thing is that there is no single point of attack in the generation\n> > or signing.\n> \n> No contest here. But can threshold ECDSA work with BIP32? In other\n> words, can a threshold ECDSA public key be generated from separate,\n> precomputed private keys, or can it only be generated interactively?\n> Maybe the BIP32 master seeds have to be generated interactively, and\n> then all sets of corresponding derived keys are valid signing groups?\n\nThat's a good point. In the paper, they have a deterministic wallet\nscheme in section 3.3.  It is non-interactive, so that's good.  On the\nother hand, it's not BIP32, so that adds complexity.\n\n> \n> Threshold ECDSA certainly sounds nice, but is anyone working on a BIP\n> for it? I would take it on myself, but I don't understand it well\n> enough yet, and publicly available information on it seems lacking. I\n> proposed this Shamir Secret Sharing BIP as an easily understood, easily\n> implemented measure that we can use today, with no changes to existing\n> Bitcoin software. It's low-hanging fruit.\n\nGood points, although multisig is catching on quickly in the ecosystem.\nAFAIK, all production wallets can send to p2sh addresses.\n\n-- \nMiron / devrandom"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-03-29T17:51:10",
                "message_text_only": "On Saturday, 29 March 2014, at 10:48 am, devrandom wrote:\n> On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:\n> > Threshold ECDSA certainly sounds nice, but is anyone working on a BIP\n> > for it? I would take it on myself, but I don't understand it well\n> > enough yet, and publicly available information on it seems lacking. I\n> > proposed this Shamir Secret Sharing BIP as an easily understood, easily\n> > implemented measure that we can use today, with no changes to existing\n> > Bitcoin software. It's low-hanging fruit.\n> \n> Good points, although multisig is catching on quickly in the ecosystem.\n> AFAIK, all production wallets can send to p2sh addresses.\n\nAs far as I know, Blockchain.info wallets still can't send to P2SH addresses. This was a *major* roadblock in the Bitcoin project that I've been working on for the past several months, and it was the impetus for my creating this Shamir Secret Sharing implementation in the first place."
            },
            {
                "author": "devrandom",
                "date": "2014-03-29T17:56:52",
                "message_text_only": "On Sat, 2014-03-29 at 13:51 -0400, Matt Whitlock wrote:\n> On Saturday, 29 March 2014, at 10:48 am, devrandom wrote:\n> > On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:\n> > > Threshold ECDSA certainly sounds nice, but is anyone working on a BIP\n> > > for it? I would take it on myself, but I don't understand it well\n> > > enough yet, and publicly available information on it seems lacking. I\n> > > proposed this Shamir Secret Sharing BIP as an easily understood, easily\n> > > implemented measure that we can use today, with no changes to existing\n> > > Bitcoin software. It's low-hanging fruit.\n> > \n> > Good points, although multisig is catching on quickly in the ecosystem.\n> > AFAIK, all production wallets can send to p2sh addresses.\n> \n> As far as I know, Blockchain.info wallets still can't send to P2SH\n> addresses. This was a *major* roadblock in the Bitcoin project that\n> I've been working on for the past several months, and it was the\n> impetus for my creating this Shamir Secret Sharing implementation in\n> the first place.\n\nThat was true until they merged in my pull request a month ago ;)\n\nhttps://github.com/blockchain/My-Wallet/pull/59\n\n \n--\nMiron / devrandom"
            },
            {
                "author": "Natanael",
                "date": "2014-03-29T19:34:27",
                "message_text_only": "Den 29 mar 2014 19:15 skrev \"Matt Whitlock\" <bip at mattwhitlock.name>:\n>\n> On Saturday, 29 March 2014, at 2:08 pm, Alan Reiner wrote:\n> > Regardless of how SSSS does it, I believe that obfuscating that\n> > information is bad news from a usability perspective.  Undoubtedly,\n> > users will make lots of backups of lots of wallets and think they\n> > remember the M-parameter but don't.  They will accidentally mix in some\n> > 3-of-5 fragments with their 2-of-4 not realizing they are incompatible,\n> > or not able to distinguish them.   Or they'll distribute too many\n> > thinking the threshold is higher and end up insecure, or possibly not\n> > have enough fragments to restore their wallet thinking the M-value was\n> > lower than it actually was.\n> >\n> > I just don't see the value in adding such complexity for the benefit of\n> > obfuscating information an attacker might be able to figure out anyway\n> > (most backups will be 2-of-N or 3-of-N) and can't act on anyway (because\n> > he doesn't know where the other frags are and they are actually in\n> > safe-deposit boxes)\n>\n> Okay, you've convinced me. However, it looks like the consensus here is\nthat my BIP is unneeded, so I'm not sure it would be worth the effort for\nme to improve it with your suggestions.\n\nI think it should be made an option (with the default being that the\nthreshold is given and verification is applied. There could certainly be a\nfew cases where the threshold is set high, you maybe don't have access to a\ngreat enough variety of hiding spots or secure enough hiding spots, and you\nwant deter an attempt to find all the shares (with the idea being that the\nrisk of detection would be too high, in particular when you use tamper\nevident seals). But for the majority it would be better to find a few\ndifferent safeboxes to put the shares in and rely on physical security.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/d96201a7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Tamas Blummer",
                "Natanael",
                "Watson Ladd",
                "Mike Hearn",
                "Roy Badami",
                "Matt Whitlock",
                "Alan Reiner",
                "Gregory Maxwell",
                "devrandom",
                "Chris Beams"
            ],
            "messages_count": 42,
            "total_messages_chars_count": 72070
        }
    },
    {
        "title": "[Bitcoin-development] Best practices for dust remining",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2014-03-29T19:42:59",
                "message_text_only": "Suppose am m-of-n multisig wallet receives a bunch of dust deposits due\nto somebody advertising the Olympics, or any other reason, and the users\nof the wallet don't want the few satoshis involved.\n\nWhat is the best way to allow all these dust outputs to be re-mined in\norder to clean up the utxo set, keeping in mind the scripts may include\nlarge values of n?\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f87dea40/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f87dea40/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-03-29T20:10:00",
                "message_text_only": "NONE|ANYONECANPAY. This is what dust-be-gone does.\nOn Mar 29, 2014 12:46 PM, \"Justus Ranvier\" <justusranvier at gmail.com> wrote:\n\n> Suppose am m-of-n multisig wallet receives a bunch of dust deposits due\n> to somebody advertising the Olympics, or any other reason, and the users\n> of the wallet don't want the few satoshis involved.\n>\n> What is the best way to allow all these dust outputs to be re-mined in\n> order to clean up the utxo set, keeping in mind the scripts may include\n> large values of n?\n>\n> --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/1ad49c7f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Best practices for dust remining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Justus Ranvier",
                "Mark Friedenbach"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2161
        }
    },
    {
        "title": "[Bitcoin-development] Dust recycling",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2014-03-29T19:59:01",
                "message_text_only": "On 03/29/2014 07:55 PM, Goss, Brian C., M.D. wrote:\n> Could you collect the dust into a transaction with no outputs (thus making it all tx fees) or putting in to an anyone can spend tx?\n> \n> The large number of signatures (for large n) would make the tx size large...but, if enough dust were out there, it might be worth propagating to a pools hash power. \n\nWhat would make it easier is if there was a standard output type for\nsending the entire transaction to miner fees, that would make even large\ntransactions propagate that would normally be dropped by fee/kB rules.\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/90e12506/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/90e12506/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-29T20:05:05",
                "message_text_only": "On Sat, Mar 29, 2014 at 12:59 PM, Justus Ranvier\n<justusranvier at gmail.com> wrote:\n> What would make it easier is if there was a standard output type for\n> sending the entire transaction to miner fees,\n\nHm. maybe it could be called a \"return operator\" or something like that? :)\n\n> that would make even large\n> transactions propagate that would normally be dropped by fee/kB rules.\n\nUse dust-b-gone and make it someone elses problem to get it relayed. :)"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-03-29T20:20:36",
                "message_text_only": "On 03/29/2014 08:05 PM, Gregory Maxwell wrote:\n> Use dust-b-gone and make it someone elses problem to get it relayed. :)\n> \n\nThat's a sub-optimal solution, as it introduces a third party. What if\nhis server goes down?\n\nAn universal solution is preferable.\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/59b6356f/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/59b6356f/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-03-29T20:33:13",
                "message_text_only": "On Sat, Mar 29, 2014 at 1:20 PM, Justus Ranvier <justusranvier at gmail.com> wrote:\n> On 03/29/2014 08:05 PM, Gregory Maxwell wrote:\n>> Use dust-b-gone and make it someone elses problem to get it relayed. :)\n> That's a sub-optimal solution, as it introduces a third party. What if\n> his server goes down?\n> An universal solution is preferable.\n\nThen start the server yourself. There is no replacement for\naggregating multiple bits of dust in single transactions. Other ways\nare less efficient.\n\nYou can already OP_RETURN to include your dust, but miners aren't\ngoing to automatically take that over transactions paying more in\nterms of fee/byte."
            }
        ],
        "thread_summary": {
            "title": "Dust recycling",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Justus Ranvier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3302
        }
    },
    {
        "title": "[Bitcoin-development] Securing hardware wallets",
        "thread_messages": [
            {
                "author": "devrandom",
                "date": "2014-03-30T20:12:01",
                "message_text_only": "I would like to solicit feedback on a whitepaper I wrote about securing\nhardware wallets even if the hardware or software is compromised.  Let's\nconsider turning this into a BIP.\n\nAbstract: With wide adoption hardware wallets present a very tempting\ntarget. Once enough wealth is controlled by a specific hardware wallet\nmodel, attacking the supply chain of the wallet becomes attractive.\nMalware could be inserted in hardware or software. The random seed could\nbe generated in a way that is predictable to the attacker or the seed\ncould be leaked.\n\nThe paper describes a way for a \"Warden\" computer to manage a hardware\nwallet in a way that protects the resulting private keys from\ncompromise.\n\nhttps://github.com/devrandom/btc-papers/blob/master/hardware-wallet-security.md\n\n-- \nMiron / devrandom"
            }
        ],
        "thread_summary": {
            "title": "Securing hardware wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "devrandom"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 798
        }
    },
    {
        "title": "[Bitcoin-development] Anyone using bitcoind that needs RPC bound to interface? [testing needed]",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-03-31T08:07:53",
                "message_text_only": "A while ago I created a patch to make it possible to bind the RPC port to a\nspecific address or even multiple address/port pairs.\n\nhttps://github.com/bitcoin/bitcoin/pull/3695\n\nI'm fairly confident that it works, but it cannot hurt if some people that\nneed this functionality tested it before merge. Test results from normal\nsetups as well as weird corner cases (IPv4+IPv6, VPNs, ...) are welcome.\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/6e664d9c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Anyone using bitcoind that needs RPC bound to interface? ",
            "categories": [
                "Bitcoin-development",
                "testing needed"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 599
        }
    },
    {
        "title": "[Bitcoin-development] secure assigned bitcoin address directory",
        "thread_messages": [
            {
                "author": "vv01f",
                "date": "2014-03-31T10:21:03",
                "message_text_only": "Some users on bitcointalk[0] would like to have their vanity addresses\navailable for others easily to find and verify the ownership over a kind\nof WoT. Right now they sign their own addresses and quote them in the\nforums.\nAs I pointed out there already the centralized storage in the forums is\nnot secury anyhow and signed messages could be swapped easily with the\nnext hack of the forums.\n\nIs that use case taken care of in any plans already?\n\nI thought about abusing pgp keyservers but that would suit for single\nvanity addresses only.\nIt seems webfinger could be part of a solution where servers of a\nbusiness can tell and proof you if a specific address is owned by them.\n\n[0] https://bitcointalk.org/index.php?topic=502538\n[1] https://bitcointalk.org/index.php?topic=505095\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 897 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/9ec544af/attachment.sig>"
            },
            {
                "author": "Natanael",
                "date": "2014-03-31T10:49:14",
                "message_text_only": "Does't BIP70 cover this already via Certificate Authorities?\n\nOn Mon, Mar 31, 2014 at 12:21 PM, vv01f <vv01f at riseup.net> wrote:\n> Some users on bitcointalk[0] would like to have their vanity addresses\n> available for others easily to find and verify the ownership over a kind\n> of WoT. Right now they sign their own addresses and quote them in the\n> forums.\n> As I pointed out there already the centralized storage in the forums is\n> not secury anyhow and signed messages could be swapped easily with the\n> next hack of the forums.\n>\n> Is that use case taken care of in any plans already?\n>\n> I thought about abusing pgp keyservers but that would suit for single\n> vanity addresses only.\n> It seems webfinger could be part of a solution where servers of a\n> business can tell and proof you if a specific address is owned by them.\n>\n> [0] https://bitcointalk.org/index.php?topic=502538\n> [1] https://bitcointalk.org/index.php?topic=505095\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-03-31T11:21:14",
                "message_text_only": "On Mon, Mar 31, 2014 at 12:21:03PM +0200, vv01f wrote:\n> Some users on bitcointalk[0] would like to have their vanity addresses\n> available for others easily to find and verify the ownership over a kind\n> of WoT. Right now they sign their own addresses and quote them in the\n> forums.\n> As I pointed out there already the centralized storage in the forums is\n> not secury anyhow and signed messages could be swapped easily with the\n> next hack of the forums.\n> \n> Is that use case taken care of in any plans already?\n> \n> I thought about abusing pgp keyservers but that would suit for single\n> vanity addresses only.\n> It seems webfinger could be part of a solution where servers of a\n> business can tell and proof you if a specific address is owned by them.\n\nGood timing! I'm at a hackathon right now working with a group to come\nup with a standard for adding Bitcoin addresses to OpenPGP keys. You're\ncorrect in thinking that doing so with standard Bitcoin addresses is a\nprivacy problem, however we can also define new types of Bitcoin\naddresses that address the privacy issue; stealth addresses can handle\nthe case where you want to pay someone without a formal payment request,\nand integrating OpenPGP into the payment protocol handles the scenario\nwhere you want to send or pay to a formal payment request.\n\n\nOn Mon, Mar 31, 2014 at 12:49:14PM +0200, Natanael wrote:\n> Does't BIP70 cover this already via Certificate Authorities?\n\nIncidentally on my todo list is to come up for a reasonable standard for\ntaking X.509 certificates and using them to sign OpenPGP user IDs.\nEssentially the certificate authority is then making the statement that\na keypair is authorized to sign on behalf of a domain-name, and in turn\nthat keypair signs that the email address on the user ID is correct.\nIt's a best of both worlds option in the same spirit of keybase.io\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/6994a7da/attachment.sig>"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-03-31T11:14:49",
                "message_text_only": "Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet. \n\nI have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\". \n\nThese keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n\nAs I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n\nThere is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n\nOk there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n\nRegards\n\nChris D'Costa\n\n\n> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n> \n> Some users on bitcointalk[0] would like to have their vanity addresses\n> available for others easily to find and verify the ownership over a kind\n> of WoT. Right now they sign their own addresses and quote them in the\n> forums.\n> As I pointed out there already the centralized storage in the forums is\n> not secury anyhow and signed messages could be swapped easily with the\n> next hack of the forums.\n> \n> Is that use case taken care of in any plans already?\n> \n> I thought about abusing pgp keyservers but that would suit for single\n> vanity addresses only.\n> It seems webfinger could be part of a solution where servers of a\n> business can tell and proof you if a specific address is owned by them.\n> \n> [0] https://bitcointalk.org/index.php?topic=502538\n> [1] https://bitcointalk.org/index.php?topic=505095\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Natanael",
                "date": "2014-03-31T11:46:49",
                "message_text_only": "This sounds like Namecoin. You can already register profiles with it,\nincluding keypairs. onename.io is a web-based client you can use to\nregister on the Namecoin blockchain.\n\nOn Mon, Mar 31, 2014 at 1:14 PM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.\n>\n> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\".\n>\n> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n>\n> As I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n>\n> There is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n>\n> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n>\n> Regards\n>\n> Chris D'Costa\n>\n>\n>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n>>\n>> Some users on bitcointalk[0] would like to have their vanity addresses\n>> available for others easily to find and verify the ownership over a kind\n>> of WoT. Right now they sign their own addresses and quote them in the\n>> forums.\n>> As I pointed out there already the centralized storage in the forums is\n>> not secury anyhow and signed messages could be swapped easily with the\n>> next hack of the forums.\n>>\n>> Is that use case taken care of in any plans already?\n>>\n>> I thought about abusing pgp keyservers but that would suit for single\n>> vanity addresses only.\n>> It seems webfinger could be part of a solution where servers of a\n>> business can tell and proof you if a specific address is owned by them.\n>>\n>> [0] https://bitcointalk.org/index.php?topic=502538\n>> [1] https://bitcointalk.org/index.php?topic=505095\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-03-31T16:53:34",
                "message_text_only": "The idea was not to register profiles or any human identity, or associate it with any other identity directly. Neither was it to have a massive BlockChain, or use proof of work. In this case proof of work is detrimental to security - you want as many people to know about your keys as quickly as possible. I want to add that this implies a shadow p2p network.\n\nAlso it's just a point if view, but I thought it better not to have any specific link to a person's identity, or their Bitcoin \"identity\" by which I mean no connection to their public addresses. The device keys are not meant to be a permanent identity or to store encrypted data either (think what happens if the device changes hands), so the use case is only to establish secure communications, and to verify signatures whilst still in use by the owner. A new owner would need to establish a new device key - again this is in the details and probably more specific to the project.\n\nRegards\n\nChris D'Costa\n\n\n\n\n> On 31 Mar 2014, at 13:46, Natanael <natanael.l at gmail.com> wrote:\n> \n> This sounds like Namecoin. You can already register profiles with it,\n> including keypairs. onename.io is a web-based client you can use to\n> register on the Namecoin blockchain.\n> \n>> On Mon, Mar 31, 2014 at 1:14 PM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n>> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.\n>> \n>> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\".\n>> \n>> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n>> \n>> As I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n>> \n>> There is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n>> \n>> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n>> \n>> Regards\n>> \n>> Chris D'Costa\n>> \n>> \n>>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n>>> \n>>> Some users on bitcointalk[0] would like to have their vanity addresses\n>>> available for others easily to find and verify the ownership over a kind\n>>> of WoT. Right now they sign their own addresses and quote them in the\n>>> forums.\n>>> As I pointed out there already the centralized storage in the forums is\n>>> not secury anyhow and signed messages could be swapped easily with the\n>>> next hack of the forums.\n>>> \n>>> Is that use case taken care of in any plans already?\n>>> \n>>> I thought about abusing pgp keyservers but that would suit for single\n>>> vanity addresses only.\n>>> It seems webfinger could be part of a solution where servers of a\n>>> business can tell and proof you if a specific address is owned by them.\n>>> \n>>> [0] https://bitcointalk.org/index.php?topic=502538\n>>> [1] https://bitcointalk.org/index.php?topic=505095\n>>> \n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-03-31T17:07:46",
                "message_text_only": "namecoin + SIN[1] or namecoin + PGP identity.\n\n[1] https://en.bitcoin.it/wiki/Identity_protocol_v1\n\nOn Mon, Mar 31, 2014 at 6:21 AM, vv01f <vv01f at riseup.net> wrote:\n> Some users on bitcointalk[0] would like to have their vanity addresses\n> available for others easily to find and verify the ownership over a kind\n> of WoT. Right now they sign their own addresses and quote them in the\n> forums.\n> As I pointed out there already the centralized storage in the forums is\n> not secury anyhow and signed messages could be swapped easily with the\n> next hack of the forums.\n>\n> Is that use case taken care of in any plans already?\n>\n> I thought about abusing pgp keyservers but that would suit for single\n> vanity addresses only.\n> It seems webfinger could be part of a solution where servers of a\n> business can tell and proof you if a specific address is owned by them.\n>\n> [0] https://bitcointalk.org/index.php?topic=502538\n> [1] https://bitcointalk.org/index.php?topic=505095\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Roy Badami",
                "date": "2014-03-31T18:57:51",
                "message_text_only": "On Mon, Mar 31, 2014 at 01:07:46PM -0400, Jeff Garzik wrote:\n> namecoin + SIN[1] or namecoin + PGP identity.\n\nIs namecoin actively maintained these days?\n\nroy"
            }
        ],
        "thread_summary": {
            "title": "secure assigned bitcoin address directory",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Natanael",
                "Chris D'Costa",
                "Roy Badami",
                "Peter Todd",
                "vv01f"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 16144
        }
    }
]