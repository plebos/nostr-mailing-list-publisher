[
    {
        "title": "[bitcoin-dev] Bitcoin Knots 0.21.0.knots20210130 released",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2021-02-01T02:28:36",
                "message_text_only": "Bitcoin Knots version 0.21.0.knots20210130 is now available from:\n\n  https://bitcoinknots.org/files/0.21.x/0.21.0.knots20210130/\n\nThis release includes new features, various bug fixes and performance\nimprovements, as well as updated translations.\n\nPlease report bugs using the issue tracker at GitHub:\n\n  https://github.com/bitcoinknots/bitcoin/issues\n\nTo receive security and update notifications, please subscribe to:\n\n  https://bitcoinknots.org/list/announcements/join/\n\nFor the full release notes and change log, see:\n\nhttps://github.com/bitcoinknots/bitcoin/blob/v0.21.0.knots20210130/doc/release-notes.md\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1528 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210201/78dfe7a2/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Knots 0.21.0.knots20210130 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 911
        }
    },
    {
        "title": "[bitcoin-dev] Libre/Open blockchain / cryptographic ASICs",
        "thread_messages": [
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-03T02:06:46",
                "message_text_only": "Good morning Luke,\n\nI happen to have experience designing digital ASICs, mostly pipelined data processing.\nHowever my experience is limited to larger geometries and in SystemVerilog.\n\nOn the technical side, as I understand it (I have been out of that industry for 4 years now, so my knowledge may be obsolete) as you approach lower geometries, you also start approaching analog design.\nIn our case we were already manually laying out gates and flip-flops (or replacing flip-flops with level-triggered latches and being extra careful with clocks) to squeeze performance (and area) for some of the more boring parts (i.e. just deserialization of data from a high-frequency low bus width to a lower-frequency wide bus width).\n\nFormal correctness proofs are nice, but we were impeded from using those because of the need to manually lay out devices, meaning the netlist did not correspond exactly to an RTL that formal correctness could understand.\nThough to be fair most of the circuit was standard RTL->synthesized netlist and formal correctness proofs worked perfectly well for those.\nMany of the formal correctness proofs were really about the formal equivalence of the netlist to the RTL; the correctness of the RTL was \"proved\" by simulation testing.\n(to be fair, there were tools to force you to improve coverage by injecting faults to your RTL, e.g. it would virtually flip an `&&` to an `||` and if none of your tests signaled an error it would complain that your test coverage sucked.)\nThings might have changed.\n\nA good RTL would embed SystemVerilog Assertions or PSL Assertions as well.\nSome formal verification tools can understand a subset of SystemVerilog Assertions / PSL assertions and validate that your RTL conformed to the assertions, which would probably help cut down on the need for RTL simulation.\n\nOverall, my understanding is that smaller geometries are needed only if you want to target a really high performance / unit cost and performance / energy consumption ratios.\nThat is, you would target smaller geometries for mining.\n\nIf you need a secure tr\\*sted computing module that does not need to be fast or cheap, just very accurate to the required specification, the larger geometries should be fine and you would be able to live almost entirely in RTL-land without diving into netlist and layout specifications.\n\nA wrinkle here is that licenses for tools from tr\\*sted vendors like Synopsys or Cadence are ***expensive***.\nWhat is more, you should really buy two sets of licenses, e.g. do logic synthesis with Synopsys and then formal verification with Cadence, because you do not want to fully tr\\*st just one vendor.\nSynthesis in particular is a black box and each vendor keeps their particular implementations and tricks secret.\n\nPointing some funding at the open-source Icarus Verilog might also fit, as it lost its ability to do synthesis more than a decade ago due to inability to maintain.\nIcarus Verilog only supports Verilog-2001 and only has very very partial support for SystemVerilog (though to be fair, there is little that SystemVerilog adds that can be used in RTL --- `always_comb` and `always_ff` come to mind, as well as assertions, and I think recent Icarus has started experimental support for those for `always` variants).\nNote as well that I heard (at the time when I was in the industry) that some foundries will not even accept a netlist unless it was created by a synthesis tool from one of the major vendors (Synopsys, Cadence, Mentor Graphics, maybe more I have forgotten since).\n\nRegards,\nZmnSCPxj\n\n> folks, hi, please do cc me as i am subscribed \"digest\", apologies for the inconvenience.\n>\n> i've been speaking on and off with kanzure, asking his advice about a libre / transparently-developed ASIC / SoC, for some time, since meeting a very interesting person at the Barcelona RISC-V Workshop in 2018.\n>\n> this person pointed out that FIPS-approved algorithms, implemented in FIPS-approved crypto-chips used in hardware wallets to protect billions to trillions in cryptocurrency assets world-wide are basically asking for trouble.\u00a0 i heard 3rd-hand that the constants used in the original bitcoin protocol were very deliberately changed from those approved by FIPS and the NSA for exactly the reasons that drive people to question whether it is a good idea to trust closed and secretive crypto-chips, no matter how well-intentioned the company that manufactures them.\u00a0 the person i met was there to \"sound out\" interested parties willing to help with such a venture, even to the extent of actually buying a Foundry, in order to guarantee that the crypto-chip they would like to see made had not been tampered with at any point during manufacturing.\n>\n> at FOSDEM2019 i was also approached by a team that also wanted to do a basic \"embedded\" processor, entirely libre-licensed, only in 350nm or 180nm, with just enough horsepower to do digital signing and so on.\u00a0 since then, fascinatingly, NLnet has obtained a new EU Horizon Grant and started their \"Assure\" Programme:\n> https://nlnet.nl/assure/\n>\n> (our application may be found here):\n> https://libre-soc.org/nlnet_2021_crypto_router/\n>\n> in addition, betrusted (headed by Bunnie Huang) is also funded by NLnet and is along similar lines:\n> https://betrusted.io/\n>\n> NLnet is even funding LibreSOC with a 180nm test chip tape-out of the LibreSOC Core, with help from Sorbonne University and https://chips4makers.io\n> https://bugs.libre-soc.org/show_bug.cgi?id=199\n>\n> and we also have funding to do Formal Correctness Proofs for the low-level portions of the HDL (similar to c++ and python \"assert\", but for hardware)\n> https://bugs.libre-soc.org/show_bug.cgi?id=158\n>\n> the point being that where even one year ago the idea of an open source developer creating and paying for an actual ASIC was so ridiculous they would be laughed at and viewed in a derisive fashion thereafter, reality is that things are opening up to the point where even Foundry PDKs are now open source:\n> https://github.com/google/skywater-pdk\n>\n> technically it is possible to use Open Hardware to create commercial (closed) products.\u00a0 Richard Herveille, most well-known for his early involvement in Opencores, was the Open Hardware developer responsible for the HDL behind the first Antminer product by Bitmain, for example.\u00a0 It used his RV32 core and i believe he also developed the SHA256 HDL for them.\u00a0 however that is different in that it was a closed product, not open for independent public audit and review.\n>\n> what i am therefore trying to say is that it is a genuinely achievable goal, now, to create fully transparently-openly-developed ASICs that could perform crytographic tasks such as mining and hardware wallet key protection *and have a full audit trail* even to the extent of having mathematical Formal Correctness Proofs.\n>\n> my question is - therefore - with all that background in mind - is: is this something that is of interest?\n>\n> now, before getting all excited about the possibilities, it's critically important to provide a reality-check on the costs involved:\n>\n> * 350nm ASICs: https://chips4makers.io - EUR 1750 for 20 samples\n> * 180nm ASICs: EUR $600 per mm^2 MPW Shuttle (test ASICs) and EUR 50,000 for production masks\n> * ... exponential curve going through 130nm, 65nm, 45nm gets to around $500k...\n> * 28nm ASICs: USD 100,000 for MPW and USD $1 million for production masks\n> * 22nm ASICs: double 28nm\n> * 14nm: double 22nm\n> * 7nm: quadruple 14nm\n>\n> you get where that is going.\u00a0 where higher geometries are now easily within reach even of a hobbyist ASIC developer, USD 20 million is a bare minimum to design, develop and bring to manufacture a 7nm Custom ASIC.\u00a0 full-custom silicon, as carried out regularly by Intel, is USD 100 million.\n>\n> this is not to say that it is completely outside the realm of possibility to do something in these lower geometries: you either simply have to have a damn good reason, or a hell of a lot of money, or a product that's so compelling that customers really *really* want it, or you have OEMs lining up to sign LOIs or put up cash-with-preorder.\n>\n> [my personal favourite is a focus on power-efficiency: battery-operated hand-held devices at or below 3.5 watts (thus not requiring thermal pipes or fans - which tend to break). i have to admit i am a little alarmed at the world-wide energy consumption of bitcoin: personally i would very much prefer to be involved in eco-conscious blockchain and crypto-currency products].\n>\n> so - as an open question: what would people really like to see happen, here, what do people feel would be of interest to the wider bitcoin community, and, crucially, is there a realistic way to bridge (fund) the gap and actually deliver to the bitcoin user community?\n>\n> best,\n>\n> l.\n>\n> ---\n> crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68\n>\n> --\n> ---\n> crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-03T03:17:48",
                "message_text_only": "Good morning again Luke,\n\n\n\n> [my personal favourite is a focus on power-efficiency: battery-operated hand-held devices at or below 3.5 watts (thus not requiring thermal pipes or fans - which tend to break). i have to admit i am a little alarmed at the world-wide energy consumption of bitcoin: personally i would very much prefer to be involved in eco-conscious blockchain and crypto-currency products].\n\nIf you mean miner power usage, then power efficiency will not reduce energy consumption.\n\nSuppose you are a miner.\nSuppose you have access to 1 watt of energy at a particular fixed cost of 1 BTC per watt, and you have a current hardware that gives 1 Exahash for 1 watt of energy usage.\nSuppose this 1 Exahash earns 2 BTC (and that is why you mine, you earn 1 BTC).\n\nNow suppose there is a new technology where a hardware can give 1 Exohash for only 0.5 watt of energy usage.\nYour choices are:\n\n* Buy only one unit, get 1 Exohash for 0.5 watt, thus getting 2.0 BTC while only paying 0.5 BTC in electricity fees for a net of 1.5 BTC.\n* Buy two units, get 2 Exohash for 1.0 watt, thus getting 4.0 BTC while only paying 1.0 BTC in electricity fees for a net of 3.0 BTC.\n\nWhat do you think your better choice is?\n\nThat assumes that difficulty adjustments do not occur.\nIf difficulty adjustments are put into consideration, then if everyone *else* does the second choice, global mining hashrate doubles and the difficulty adjustment matches, and if you took the first choice, you would end up earning far less than 2.0 BTC after the difficulty adjustment.\n\nThus, any rational miner will just pack more miners in the same number of watts rather than reduce their watt consumption.\nThere may be physical limits involved (only so many miners you can put in an amount of space, or whatever other limits) but absent those, a rational miner will not reduce their energy expenditure with higher-efficiency units, they will buy more units.\n\nThus, increasing power efficiency for mining does not reduce the amount of actual energy that will be consumed by Bitcoin mining.\n\nIf you are not referring to mining energy, then I think a computer running BitTorrent software 24/7 would consume about the same amount of energy as a fullnode running Bitcoin software 24/7, and I do not think the energy consumed thus is actually particularly high relative to a lot of other things.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-02-03T14:07:24",
                "message_text_only": "On Wednesday, February 3, 2021, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> Good morning again Luke,\n\n:)\n\n> If you mean miner power usage, then power efficiency will not reduce\nenergy consumption.\n\n\n> Thus, any rational miner will just pack more miners in the same number of\nwatts rather than reduce their watt consumption.\n\nyes, of course.  the same non-consumer-computing-intuitive logic applies to\npurchasing decisions for beowulf clusters.\n\n\n> Thus, increasing power efficiency for mining does not reduce the amount\nof actual energy that will be consumed by Bitcoin mining.\n\narse.\n\nand if everybody does that, then no matter the performance/watt nobody\n\"wins\".  in fact a case could be made that everybody \"loses\".\n\nmy biggest concern here is that the inherent \"arms race\" results in very\nfew players being able to create bitcoin mining ASICs *at all*.\n\ni mentioned earlier that geometry costs are an exponential scale.  3nm must\nbe somewhere around USD 16 million for production masks.\n\nif there are only a few players that leaves the entirety of bitcoin open to\nhardware backdoors.\n\nl.\n\n\n\n\n\n\n-- \n---\ncrowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/e5c225c5/attachment.html>"
            },
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-02-03T13:24:13",
                "message_text_only": "(hi folks do cc me, i am subscribed digest, thank you for doing that,\nZmnSCPxj)\n\nOn Wednesday, February 3, 2021, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> Good morning Luke,\n>\n> I happen to have experience designing digital ASICs, mostly pipelined\ndata processing.\n> However my experience is limited to larger geometries and in\nSystemVerilog.\n\nlarger geometries for a hardware wallet ASIC is ok (as long as it is not\nretail based and trying to run e.g. RSA, taking so long to complete that\nthe retail customer walks out)\n\n> On the technical side, as I understand it (I have been out of that\nindustry for 4 years now, so my knowledge may be obsolete)\n\nnot at all! still very valuable\n\n> as you approach lower geometries, you also start approaching analog\ndesign.\n\nyyeah i could intuitively tell/guess there might be something like this\nwhich would throw a spanner in the works, it is why the grant request i put\nin specifically excluded data-dependent constant time analysis and also\npower analysis.\n\n\n> In our case we were already manually laying out gates and flip-flops (or\nreplacing flip-flops with level-triggered latches and being extra careful\nwith clocks) to squeeze performance (and area) ...\n\nya-howw :)\n\n\n> Many of the formal correctness proofs were really about the formal\nequivalence of the netlist to the RTL; the correctness of the RTL was\n\"proved\" by simulation testing.\n\nthanks to Symbiyosys we are using formal proofs much more extensively, as\neffectively a 100% coverage replacement for unit tests.\n\nan example is popcount.  we did two versions.  one is a recursive tree\nalgorithm, almost impossible to read and understand what the hell it does.\n\nthe other is a total braindead 1-liner \"x = x + input[i]\", rubbish\nperformance though.\n\nrunning a formal proof on these gave us 100% confidence that the complex\noptimised version does the damn job.\n\n\nyes we still do unit tests, these are more \"demo code\".\n\nnow, the caveat is that you have to have a model of the \"dut\" (device under\ntest) against which to compare, and if the dut is ridiculously complex then\nthe formal model variant, which has to do the same job, ends up equally as\ncomplex (or effectively a duplicate of the dut) and the exercise is a bit\nof a waste of time...\n\n...*unless*... there happens to be other implementations out there.  then\nthe proof can be run against those and everybody wins through collaboration.\n\n\n\nnow, here's why i put in the NLnet Grant request to explore going back to\nthe mathematics of crypto-primitives.\n\nmany ISAs e.g. intel AVX2 have added GFMULT8 etc etc because that does\nS-Boxes for Rijndael.  they have gone mad by analysing algorithms trying to\nfit them to standard ISAs.\n\nnobody does Rijndael S-Boxes any way other than 256-entry lookup tables\nbecause no standard ISA has general-purpose Galois Field Multiply.\n\nconsequently implementations in assembler get completely divorced from the\noriginal mathematics on which the cryptographic algorithm was based.\n\nthe approach i would like to take is, \"hang on a minute: how far would you\nget if you actually added *general-purpose* instructions that *directly*\nprovided the underlying mathematical principles, and then wrapped a\nVector-Matrix Engine around them?\".\n\nwould this drastically simplify algorithms to the point where *READABLE* c\ncode compiles directly to opcodes that run screamingly fast, outperforming\nhand-optimised SIMD code using standard ISAs?\n\nthen, given the Formal Correctness approach above, can we verify that the\nmathematically-related opcodes do the job?\n\n\n> (to be fair, there were tools to force you to improve coverage by\ninjecting faults to your RTL, e.g. it would virtually flip an `&&` to an\n`||` and if none of your tests signaled an error it would complain that\nyour test coverage sucked.)\n\nnice!\n\n> Things might have changed.\n\nnah.  this is such a complex area, run by few incumbent players, that\ninnovation is rare.  not least, innovation is different and cannot be\ntrusted by the Foundries!\n\n\n> A good RTL would embed SystemVerilog Assertions or PSL Assertions as well.\n> Some formal verification tools can understand a subset of SystemVerilog\nAssertions / PSL assertions and validate that your RTL conformed to the\nassertions, which would probably help cut down on the need for RTL\nsimulation.\n\ninteresting.\n\n> Overall, my understanding is that smaller geometries are needed only if\nyou want to target a really high performance / unit cost and performance /\nenergy consumption ratios.\n> That is, you would target smaller geometries for mining.\n\nyes.\n\n> If you need a secure tr\\*sted computing module that does not need to be\nfast or cheap, just very accurate to the required specification, the larger\ngeometries should be fine and you would be able to live almost entirely in\nRTL-land without diving into netlist and layout specifications.\n\nhardware wallet ASICs.\n\ni concur.\n\n> A wrinkle here is that licenses for tools from tr\\*sted vendors like\nSynopsys or Cadence are ***expensive***.\n\nyes they are :)  we are currently working with Sorbonne University LIP6.fr\nand Staf Verhaegen from Chips4Makers, trying a different approach:\ncoriolis2.\n\nthis will do fine up to 130nm (skywater).  beyond that, mmm, we need a few\nmore years.\n\n> What is more, you should really buy two sets of licenses, e.g. do logic\nsynthesis with Synopsys and then formal verification with Cadence, because\nyou do not want to fully tr\\*st just one vendor.\n\ninteresting, good advice.\n\n> Synthesis in particular is a black box and each vendor keeps their\nparticular implementations and tricks secret.\n\nsigh.  i think that's partly because they have to insert diodes, and\nbuffers, and generally mess with the netlist.\n\ni was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!\n\nplus, they make an awful lot of money, it is good business.\n\n> Pointing some funding at the open-source Icarus Verilog might also fit,\nas it lost its ability to do synthesis more than a decade ago due to\ninability to maintain.\n\nah i didn't know it could do synthesis at all! i thought it was simulation\nonly.\n\n> Note as well that I heard (at the time when I was in the industry) that\nsome foundries will not even accept a netlist unless it was created by a\nsynthesis tool from one of the major vendors (Synopsys, Cadence, Mentor\nGraphics, maybe more I have forgotten since).\n\nyes i heard this too, they don't want their time wasted: after all they\nonly make money by selling wafers, and if they can't sell any they have to\nrun empty wafers to keep the equipment at operating temperature.\n\nif you book a slot 18 months in advance and the RTL doesn't work during\ntesting 3 months before the deadline they may not be able to find someone\nelse in time.\n\nanything to reduce the risk there is good, so i totally get why.\n\nthank you for the insights and the discussion, really appreciated.\n\nl.\n\n\n-- \n---\ncrowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/855e015c/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-11T08:20:54",
                "message_text_only": "Good morning Luke,\n\n> > (to be fair, there were tools to force you to improve coverage by injecting faults to your RTL, e.g. it would virtually flip an `&&` to an `||` and if none of your tests signaled an error it would complain that your test coverage sucked.)\n>\n> nice!\n\nIt should be possible for a tool to be developed to parse a Verilog RTL design, then generate a new version of it with one change.\nThen you could add some automation to run a set of testcases around mutated variants of the design.\nFor example, it could create a \"wrapper\" module that connects to an unmutated differently-named version of the design, and various mutated versions, wire all their inputs together, then compare outputs.\nIf the testcase could trigger an output of a mutated version to be different from the reference version, then we would consider that mutation covered by that testcase.\nPossibly that could be done with Verilog-2001 file writing code in the wrapper module to dump out which mutations were covered, then a summary program could just read in the generated file.\nOr Verilog plugins could be used as well (Icarus supports this, that is how it implements all `$` functions).\n\nA drawback is that just because an output is different does not mean the testcase actually ***checks*** that output.\nIf the testcase does not detect the diverging output it could still not be properly covering that.\n\nThe point of this is to check coverage of the tests.\nNot sure how well this works with formal validation.\n\n\n\n> > Synthesis in particular is a black box and each vendor keeps their particular implementations and tricks secret.\n>\n> sigh. \u00a0i think that's partly because they have to insert diodes, and buffers, and generally mess with the netlist.\n>\n> i was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!\n\nWell, that surprises me as well.\n\nOn the other hand, smaller technologies consistently have lower raw output current driving capability due to the smaller size, and as trace width goes down and frequency goes up they stop acting like ideal 0-impedance traces and start acting more like transmission lines.\nSo I suppose at some point something like that would occur and I should not actually be surprised.\n(Maybe I am more surprised that it reached that level at that technology size, I would have thought 33% at 7nm.)\n\nIn the modules where we were doing manual netlist+layout, we used inverting buffers instead (slightly smaller than non-inverrting buffers, in most technologies a non-inverting buffer is just an inverter followed by an inverting buffer), it was an advantage of manual design since it looks like synthesis tools are not willing to invert the contents of intermediate flip-lfops even if it could give theoretical speed+size advantage to use an inverting buffer rather than an non-inverting one (it looks like synthesis optimization starts at the output of flip-flops and ends at their input, so a manual designer could achieve slightly better performance if they were willing to invert an intermediate flip-flop).\nAnother was that inverting latches were smaller in the technology we were using than non-inverting latches, so it was perfectly natural for us to use an inverting latch and an inverting buffer on those parts where we needed higher fan-out (t was equivalent to a \"custom\" latch that had higher-than-normal driving capability).\n\nScan chain test generation was impossible though, as those require flip-flops, not latches.\nFortunately this was \"just\" deserialization of high-frequency low-width data with no transformation of the data (that was done after the deserialization, at lower clock speeds but higher data width, in pure RTL so flip-flops), so it was judged acceptable that it would not be covered by scan chain, since scan chain is primarily for testing combinational logic between flip-flops.\nSo we just had flip-flops at the input, and flip-flops at the output, and forced all latches to pass-through mode, during scan mode.\nWe just needed to have enough coverage to uncover stuck-at faults (which was still a pain, since additional test vectors slow down manufacturing so we had to reduce the test vectors to the minimum possible) in non-scan-momde testing.\n\nMan, making ASICs was tough.\n\n\n>\n> plus, they make an awful lot of money, it is good business.\n>\n> > Pointing some funding at the open-source Icarus Verilog might also fit, as it lost its ability to do synthesis more than a decade ago due to inability to maintain.\n>\n> ah i didn't know it could do synthesis at all! i thought it was simulation only.\n\nIcarus was the only open-source synthesis tool I could find back then, and it dropped synthesis capability fairly early due to maintenance burden (I never managed to get the old version with synthesis compiled and never managed actual synthesis on it, so my knowledge of it is theoretical).\n\n\nThere is an argument that open-source software is not truly open-source unless it can be compiled by open-source compilers or executed by open-source interpreters.\nSimilarly, I think open-source hardware RTL designs are not truly open-source if there are no open-source synthesis tools that can synthesize it to netlist and then lay it out.\n\nIcarus can interpret most Veriog RTL designs, though.\nHowever, at the time I left, I had already mandated that new code should use `always_comb` and `always_ff` (previously I had mandated that new code should use `always @*` for combinational logic) and was encouraging my subordinates to use loops and `generate`.\nIcarus did not support `always_comb` and `always_ff` at the time (though worked perfectly fine with loops and `generate`).\nIn addition, at the time, we (actually just me in that company haha) were dabbling in object-oriented testing methodologies (which Icarus has no plans on ever implementing, which is understandable since it is a massive increase in complexity, it is much much harder than the scheduling shenanigans of `always_comb` and the \"just treat it as `always`\" of `always_ff`).\n\n(Particularly, you need object-oriented testbenches since SystemVerilog includes a fuzz-testing framework to randomize fields of objects according to certain engineer-provided constraints, and then you would use those object fields to derive the test vectors your test framework would feed into the DUT, this was a massive increase in code coverage for a largish up-front cost but once you built the test framework you could just dump various constraints on your test specification objects, I actually caught a few bugs that we would not have otherwise found with our previous checklist-based testing methodology.)\n(Unfortunately it turned out that it required a more expensive license and I ended up hogging the only one we had of that more expensive license (which, if I remember correctly, was the same license needed for formal verification of netlist<->RTL equivalence) for this, which killed enthusiasm for this technique, sigh, this is another argument for getting open-source hardware design tools developed; not much sense in having open-source RTL for a crypto device if you have to pay through the nose for a license just to synthesize it, never mind the manufacturing cost.)\n\n\n-----------------------\n\n\nAnother point to ponder is test modes.\n\nIn mass production you **need** test modes.\nThere will always be some number of manufacturing defects because even the cleanest of cleanrooms *will* have a tiny amount of contaminants (what can go wrong will go wrong).\nTest modes are run in manufacturing to filter out chips with failing circuitry due to contamination.\n\nNow, a typical way of implementing test modes is to have a special command sent over, say, the \"normal\" serial port interface of a chip, which then enters various test modes to allow, say, scan chain testing.\nOf course, scan chain testing is done by pushing test vectors into all flip-flops, and then the test is validated by pulsing global clock once (often the test mode forces all flip-flops on the same clock), then pulling data from all flip-flops to verify that all the circuitry works as designed.\n\nThe \"pulling data from all flip-flops\" is of course just another way of saying that all mass-produced chips have a way of letting ***anyone*** exfiltrate data from their flip-flops via test modes.\n\nThus, for a secure environment, you need to ensure that test modes cannot be entered after the device enters normal operation.\nFor example, you might have a dedicated pad which is normally pulled-down, but if at reset it is pulled up, the device enters test mode.\nIf at reset the pad is pulled down, the device is in normal mode and even if the pad is pulled up afterwards the device will not enter test mode.\nThis ensures that only reset data can be read from the device, without possibility of exfiltration of sensitive (key material or midstate) data.\nThe pad should also not be exposed as a package pinout except perhaps on DS and ES packages, and the pulldown resistor has to be on-chip.\n\nAs an additional precaution, we can also create a small secure memory (maybe 256 octet addressable would be more than enough).\nIt is possible to exempt flip-flops from scan chain generation (usually by explicitly instantiating flip-flops in a separate module and telling post-synthesis tools to exempt the module from scan chain synthesis).\nThis gives an extra layer of protection against test mode accessing sensitive data; even if we manage to screw up test mode and it is possible to force reset on the test mode circuit without resetting the rest of the design, sensitive data is still out of the scan chain.\nOf course, since they are not on scan, it is possible they have undetectable manufacturing defects, so you would need to use some kind of ECC, or better triple-redundancy best-of-three, to protect against manufacturing defects on the non-scan flip-flops.\nFortunately non-scan flip-flops are often a good bit smaller than scan flip-flops, so the redundancy is not so onerous.\nSince the ECC / best-of-three circuit itself would need to be tested, you would multiplex their inputs, in normal mode they get inputs from the non-scan-chain flip-flops, in test mode they get inputs from separate scan-chain flip-flops, so that the ECC / best-of-three circuit is testable at scan mode.\nYou would also need a separate test of the secure memory, this time running in normal mode with a special test program in the CPU, just in case.\nFinally, you would explicitly lay them out \"distributed\" around the chip, since manufacturing defects tend to correlate in space (they are usually from dust, and dust particles can be large relative to cell size), you do not want all three of the best-of-three to have manufacturing defects.\nFor example, you could have a 256 x 8 non-scan-chain flip-flop module, instantiate three of those, and explicitly place them in corners of the digital area, then use a best-of-three circuit to resolve the \"correct\" value.\n\nThe test mode circuit itself could ensure that the device enters test mode if and only if the secure memory contains all 0 data after the test mode circuit is reset.\nFor example, the 256 x 8 non-scan-chain flip-flop module could have a large OR circuit that ORs all the flip-flops, then outputs a single bit that is the bitwise OR of all the flip-flop contents.\nThen the test mode circuit gets the `in_use` outputs fo the three secure flip-flop modules, and if at reset any of them are `1` then it will refuse to enter test mode even if the test mode pad is pulled high.\nThis ensures that even if an attacker is somehow able to reset *only* the test mode circuit somehow (this is basic engineering, always assume something will go wrong), if the secure memory has any non-0 data (we presume it resets to 0), the device will still not enter test mode.\n\nOf course, if the secure memory itself is accessible from the CPU, then it remains possible that a CPU program is reading from the secure area, keeping raw data in CPU registers, from which a test-mode might be able to extract if the device is somehow forced into test mode even after normal mode.\nYou could redesign your implementations of field multiplication and SHA midstate computation so that they directly read from the secure memory and write to the secure memory without using any flip-flops along the way, and have only the cryptographic circuit have access to the secure memory.\nThat way there is reduced possibility that intermediate flip-flops (that are part of the scan chain) outside the secure memory having sensitive key material or midstate data.\nYou would need to use a custom bus with separate read and write addresses, and non-pipelined unbuffered access, and since you want to distribute your secure memory physically distant, that translates to wide and long buses (it might be better to use 64 x 32 or 32 x 64 addressable memories, to increase what the cryptographic circuit has access to per clock cycle) screwing with your layout, and probably having to run the secure memory + crypto circuit at a ***much*** slower clock domain (but more secure is a good tradeoff for slowness).\nOf course, that is a major design headache (the crypto circuit has to act mostly as a reduced-functionality processor), so you might just want to have the CPU directly access the secure memory and in early boot poke a `0x01` in some part of the memory, in the hope that the `in_use` flag in the previous paragraph is enough to suppress test modes from exfiltrating CPU registers.\n\nDo note that with enough power-cycles and ESD noise you can put digital circuitry into really weird and unexpected states (seen it happen, though fairly hard to replicate, we had an ESD gun you could point at a chip to make it go into weird states), so being extra paranoid about test modes is important.\nWhat can go wrong will go wrong!\nIn particular with \"`TESTMODE_PAD` is only checked at reset\" you would have to store `TESTMODE` in a non-scan flip-flop, and with enough targeted ESD that flip-flop can be jostled, setting `TESTMODE` even after normal operation.\nYou might instead want to use, say, a byte pattern instead of a single bit to represent `TESTMODE`, so the `TESTMODE` register has to have a specific value such as `0xA5`, so that targeted ESD has to be very lucky in order to force your device into test mode.\nFor example, since you need to check the `TESTMODE` pad at reset anyway, you could do something like this:\n\n    input CLK, RESET_N, TESTMODE_PAD, IN_USE0, IN_USE1, IN_USE2;\n    output reg TESTMODE;\n\n    wire in_use = IN_USE0 || IN_USE1 || IN_USE2;\n\n    reg [7:0] testmode_ff;\n    wire [7:0] next_testmode_ff =\n        (testmode_ff == 8'hA5 || testmode_ff == 8'h00) ?\n          (TESTMODE_PAD && !in_use) ?                      8'hA5 :\n          /*otherwise*/                                    8'h5A :\n        /*otherwise*/                                      testmode_ff ;\n    always_ff @(posedge CLK, negedge RESET_N) begin\n        if (!RESET_N) testmode_ff <= 0x00;\n        else          testmode_ff <= next_testmode_ff; end\n\n    wire next_TESTMODE = (testmode_ff == 8'hA5);\n    always_ff @(posedge CLK, negedge RESET_N) begin\n        if (!RESET_N) TESTMODE <= 1'b0;\n        else          TESTMODE <= next_TESTMODE; end\n\nDo note that the `TESTMODE` is a flip-flop, since you do ***not*** want glitches on the `TESTMODE` signal line, it would be horribly unsafe to output it from combinational circuitry directly, please do not do that.\nOf course that flip-flop can instead be the target of ESD gunnery, but since you need many clock pulses to read the scan chain, it should with good probability also get set to `0` on the next clock pulse and leave test mode (and probably crash the device as well until full reset, but this \"fails safe\" since at least sensitive data cannot be extracted).\n`TESTMODE` has no feedback, thus cannot be stuck in a state loop.\n`testmode_ff` *can* be stuck in a state loop, but that is deliberate, as it would \"fail safe\" if it gets a value other than `0xA5`, it would not enter test mode (and if it enters `0xA5` it can easily leave test mode by either `TESTMODE_PAD` or `in_use`).\n\n(Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)\n\nIf you are really going to open-source the hardware design then the layout is also open and attackers can probably target specific chip area for ESD pulse to try a flip-flop upset, so you need to be extra careful.\nNote as well that even closed-source \"secure\" elements can be reverse-engineered (I used to do this in the IC design job as a junior engineer, it was the sort of shitty brain-numbing work forced on new hires), so security-by-obscurity does have a limit as well, it should be possible to try to figure out the testmode circuitry on \"secure\" elements and try to get targeted ESD upsets at flip-flops on the testmode circuit.\n\nTest mode design is something of an arcane art, especially if you are trying to build a security device, on the one hand you need to ensure you deliver devices without manufacturing defects, on the other hand you need to ensure that the test mode is not entered inadvertently by strange conditions.\n\nIn general, because test modes are such a pain to deal with securely, and are an absolute necessity for mass production, you should assume that any \"secure\" chip can be broken by physical access and shooting short-range ESD pulses at it to try to get it into some test mode, unless it is openly designed to prevent test mode from persisting after entering normal mode, as above.\n\n(No idea how that ESD gun thing worked or what it was formally called, we just called it the ESD gun, it was an amusing toy, you point it at the DUT and pull the trigger and suddenly it would switch modes, this of course was a bad thing since you want to make sure that as much as possible such upsets do not cause the chip to enter an irrecoverable mode but an amusing thing to do still, we even had small amounts of flash memory containing register settings that we would load into the settings registers periodically at the end of each display frame to protect against this kind of ESD gun thing since the flip-flops backing the settings registers were vulnerable to it and we needed a way to preserve the settings of the customer for the IC, the expected effect would be to cause the display to flicker.)\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-13T06:10:08",
                "message_text_only": "Good morning Luke,\n\nAnother thing we can do with scan mode would be something like the below masking:\n\n    input CLK, RESET_N;\n    input TESTMODE;\n    input SCANOUT_INTERNAL;\n    output SCANOUT_PAD;\n\n    reg gating;\n    wire n_gating = gating && TESTMODE;\n    always_ff @(posedge CLK, negedge RESET_N) begin\n      if (!RESET_N)   gating <= 1'b1; /*RESET-HIGH*/\n      else            gating <= n_gating; end\n\n    assign SCANOUT_PAD = SCANOUT_INTERNAL && gating;\n\nThe `gating` means that after reset, if we are not in test mode, `gating` becomes 0 permanently and prevents any scan data from being extracted.\nAssuming scan is not used in normal operation (it should not) then inadvertent ESD noise on the `gating` flip-flop would not have an effect.\n\nOutput being combinational should be fine as the output is \"just\" an AND gate, as long as `gating` does not transition from 0->1 (impossible in normal operation, only at reset condition) then glitching is impossible, and when scan is running then `TESTMODE` should not be exited which means `gating` should remain high as well, thus output is still glitch-free.\n\nSince the flip-flop resets to 1, and in some technologies I have seen a reset-to-0 FF is slightly smaller than a reset-to-1 FF, it might do good to invert the sense of `gating` instead, and use a NOR gate at the output (which might also be smaller than an AND gate, look it up in the technology you are targeting).\nOn the other hand the above is a tiny circuit already and it is unlikely you need more than one of it (well for large enough ICs you might want more than one scan chain but still, even the largest ICs we handled never had more than 8 scan chains, usually just 4 to 6) so overoptimizing this is not necessary.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-02-13T09:29:38",
                "message_text_only": "On Sat, Feb 13, 2021 at 6:10 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>\n> Good morning Luke,\n\nmorning - can i ask you a favour because moderated (off-topic)\nmessages are being forwarded\nhttps://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/\n\ncould you send these instead to libre-soc-dev at lists.libre-soc.org?\n\nmany thanks,\n\nl.\n\n> Another thing we can do with scan mode would be something like the below masking:\n>\n>     input CLK, RESET_N;\n>     input TESTMODE;\n>     input SCANOUT_INTERNAL;\n>     output SCANOUT_PAD;\n>\n>     reg gating;\n>     wire n_gating = gating && TESTMODE;\n>     always_ff @(posedge CLK, negedge RESET_N) begin\n>       if (!RESET_N)   gating <= 1'b1; /*RESET-HIGH*/\n>       else            gating <= n_gating; end\n>\n>     assign SCANOUT_PAD = SCANOUT_INTERNAL && gating;\n>\n> The `gating` means that after reset, if we are not in test mode, `gating` becomes 0 permanently and prevents any scan data from being extracted.\n> Assuming scan is not used in normal operation (it should not) then inadvertent ESD noise on the `gating` flip-flop would not have an effect.\n>\n> Output being combinational should be fine as the output is \"just\" an AND gate, as long as `gating` does not transition from 0->1 (impossible in normal operation, only at reset condition) then glitching is impossible, and when scan is running then `TESTMODE` should not be exited which means `gating` should remain high as well, thus output is still glitch-free.\n>\n> Since the flip-flop resets to 1, and in some technologies I have seen a reset-to-0 FF is slightly smaller than a reset-to-1 FF, it might do good to invert the sense of `gating` instead, and use a NOR gate at the output (which might also be smaller than an AND gate, look it up in the technology you are targeting).\n> On the other hand the above is a tiny circuit already and it is unlikely you need more than one of it (well for large enough ICs you might want more than one scan chain but still, even the largest ICs we handled never had more than 8 scan chains, usually just 4 to 6) so overoptimizing this is not necessary.\n>\n>\n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "Bryan Bishop",
                "date": "2021-02-13T14:59:29",
                "message_text_only": "On Sat, Feb 13, 2021 at 4:18 AM Luke Kenneth Casson Leighton <lkcl at lkcl.net>\nwrote:\n\n> ... actually i don't see them in the bounces.  what's happening there?\n>\n> On Saturday, February 13, 2021, Luke Kenneth Casson Leighton <\n> lkcl at lkcl.net> wrote:\n> > On Sat, Feb 13, 2021 at 6:10 AM ZmnSCPxj <ZmnSCPxj at protonmail.com>\n> wrote:\n> >> Good morning Luke,\n> >\n> > morning - can i ask you a favour because moderated (off-topic)\n> > messages are being forwarded\n> > https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/\n> >\n> > could you send these instead to libre-soc-dev at lists.libre-soc.org?\n>\n\nI don't see what you're talking about? None of your February emails were\nsent to ozlabs according to the archives there. Threads for the bitcoin-dev\nmailing list are stored here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/thread.html\n\n- Bryan\nhttps://twitter.com/kanzure\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210213/5275abae/attachment.html>"
            },
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-02-13T16:44:27",
                "message_text_only": "On Sat, Feb 13, 2021 at 3:01 PM Bryan Bishop <kanzure at gmail.com> wrote:\n\n> I don't see what you're talking about? None of your February emails\n> were sent to ozlabs according to the archives there. Threads for the\n> bitcoin-dev mailing list are stored here:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/thread.html\n\n... i am very confused, and also did not mean to send this to the list\nat all!  with many apologies for taking up peoples' time here.\n\nl."
            },
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-02-13T17:19:01",
                "message_text_only": "(cc'ing over to libre-soc-dev)\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018392.html\n\nOn Thu, Feb 11, 2021 at 8:21 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> > i was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!\n>\n> Well, that surprises me as well.\n> [...]\n> So I suppose at some point something like that would occur and I should not actually be surprised.\n> (Maybe I am more surprised that it reached that level at that technology size, I would have thought 33% at 7nm.)\n\nit's about line-drive strength: lower geometries are even *less* able\nto line-drive long distances.\n\n> Another point to ponder is test modes.\n> In mass production you **need** test modes.\n\n> (Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)\n\nif however the ASIC can be flipped into TESTMODE and yet it carries on\notherwise working, an algorithm can be re-run and the exposed data\nwill be clean.\n\n> If you are really going to open-source the hardware design then the layout\n> is also open and attackers can probably target specific chip area for ESD\n> pulse to try a flip-flop upset, so you need to be extra careful.\n\nthis is extremely valuable advice.  in the followup [1] you describe a\ngating method: this we have already deployed on a couple of places in\ncase the Libre Cell Library (also being developed at the same time by\nStaf Verhaegen of Chips4Makers) causes errors: we do not want, for\nexample, an error in a Cell Library to cause a permanent HI which\nlocks us from being able to perform testing of other areas of the\nASIC.\n\nthe idea of being able to actually randomly flip bits inside an ASIC\nfrom outside is both hilarious and entirely news to me, yet it sounds\nto be exactly the kind of thing that would allow an attacker to\ncompromise a hardware wallet.  potentially destructively, mind, but\ncompromise all the same.\n\nbeyond even what the trezor team discovered [2] it makes it even more\nimportant that wallet ASICs be Libre/Open.\n\nl.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018412.html\n[2] https://blog.trezor.io/introducing-tropic-square-why-transparency-matters-a895dab12dd3"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-14T00:27:36",
                "message_text_only": "Good morning Luke,\n\n> > Another point to ponder is test modes.\n> > In mass production you need test modes.\n>\n> > (Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)\n>\n> if however the ASIC can be flipped into TESTMODE and yet it carries on\n> otherwise working, an algorithm can be re-run and the exposed data\n> will be clean.\n\nBut in most testmodes I have seen (and designed) all clocks are driven externally from a different pin (usually the serial interface) when in testmode.\nIf the CPU clock is now controlled by the attacker, how do you run any kind of algorithm?\n\n(This could be an artifact of how my old design company designed testmodes, YMMV.)\n\nReally the concern here is that testmode is entered while the CPU has key material loaded into registers, or caches, then it is possible, if those registers/caches are in the scan chain, to exfiltrate data.\nDoes not matter if the chip is now in a mode that cannot execute algorithms, if it was doing any kind of computation involving privkeys (including say deriving its public key so that PC-side hardware can get the `xpub`) then key material may be in scan chain registers, clock is now controlled by the attacker, and possibly scan mode as well (which disables combinational circuitry thus none of your algorithms can run).\n\n>\n> > If you are really going to open-source the hardware design then the layout\n> > is also open and attackers can probably target specific chip area for ESD\n> > pulse to try a flip-flop upset, so you need to be extra careful.\n>\n> this is extremely valuable advice. in the followup [1] you describe a\n> gating method: this we have already deployed on a couple of places in\n> case the Libre Cell Library (also being developed at the same time by\n> Staf Verhaegen of Chips4Makers) causes errors: we do not want, for\n> example, an error in a Cell Library to cause a permanent HI which\n> locks us from being able to perform testing of other areas of the\n> ASIC.\n>\n> the idea of being able to actually randomly flip bits inside an ASIC\n> from outside is both hilarious and entirely news to me, yet it sounds\n> to be exactly the kind of thing that would allow an attacker to\n> compromise a hardware wallet. potentially destructively, mind, but\n> compromise all the same.\n\nCertainly outside of the the old company design philosophy I have seen many experts strongly protest against a design philosophy which assumes that any flip-flop could randomly switch.\n\nYet the design philosophy within the old company always had this assumption, supposedly (according to in-company lore) because previous engineers had actually found the hard way that random bitflips did occur, and for e.g. automobile chips the risk was too great to not have strong mitigations:\n\n* State machines had to force unused states into known states.\n  For example a state machine with 3 states needs 2 bits of state, but 2 bits of state is actually 4 states, so there is a 4th unused state.\n  * Not all state machines needed this rule but during planning we had to identify state machines that needed this rule, and often we just targeted having 2^n states just to ensure that there were no unused states.\n  * I even suggested the use of ECC encoding for important state machines and it was something being investigated at the time I left.\n* State machines that otherwise did not need the above rule were strongly encouraged to clear state at display frame vsync.\n  This ensured that any unexpected states they had would only last up to one display frame, which was considered acceptable.\n* Flip-flops that held settings were periodically reloaded at each display frame vsync from a flash memory (which apparently as a lot more immune to bitflips).\n\nIt could be an artifact as well that the company had its own in-house foundry rather than delegate out to TSMC or whatnot --- maybe the technology we had was just suckier than state-of-the-art so bitflips were more common.\n\nThe reason why this stuck to mind is because at one time we had a DS test where shooting the ESD gun could sometimes cause the chip to fail (blank display) until reset, when the expectation was that at most it would flicker for one display frame.\nAnd afterwards we had to go through the entire RTL looking for which state machine or settings register was the culprit.\nI even wrote a little Verilog-PLI plugin that would inject deterministically random data into flip-flops in the model to try to catch it.\nEventually we found a bunch of possible root causes, and on the next DS iteration testing we had fun shooting the chip with the ESD gun over and over again and sighing in relief that the display was not failing for more than one frame.\n\nThe chip was a display driver for automotive, apparently at the time cars were starting to transition to using LCD for things like speedometer and accelerometer rather than physical dials.\nAnd of course the display suddenly switching off while the car is running at high speed due to some extra-powerful pulse elsewhere was potentially dangerous and could distract the driver, so that is why we were paranoid about such sudden bitflips potentially leading to such massive cascade of upsets as to make the display fail permanently.\n\nI think being excessively cautious for cryptographic chips should be standard as well.\nAnd certainly test mode exfiltration of data is always an issue, JTAG is very standard way of reading memory.\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Libre/Open blockchain / cryptographic ASICs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Bryan Bishop",
                "Luke Kenneth Casson Leighton"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 51679
        }
    },
    {
        "title": "[bitcoin-dev] Yesterday's Taproot activation meeting on IRC",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-02-03T14:24:59",
                "message_text_only": "Yesterday (February 2nd) we held a relatively unstructured meeting on\nTaproot activation on IRC which was open to all.\n\n\nThe conversation log is here:\nhttp://gnusha.org/taproot-activation/2021-02-02.log\n\n\nThe meeting was previously announced here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018370.html\n\n\nI will summarize what was discussed as best I can. Please revert to the\nconversation log if you have the time as any summary is going to be\nimperfect. Any errors or biases are my own and corrections will be\ngratefully accepted.\n\n\nI\u2019ll start with Rusty Russell\u2019s takeaways (many thanks to our Asia Pacific\nrepresentatives for joining in the middle of the night by the way) on\nMastodon:\n\n\n1. Unanimous support for BIP 8. RIP BIP 9.\n\n2. Overwhelming consensus that 1 year is the correct timeout value (it\u2019s\nactually defined in blocks, so 26x2016 or maybe 87600).\n\n3. Majority consensus for lockinontimeout false, though Luke Dashjr\nstrongly opposed.\n\n4. No decision I could see on start time, but 2 months was done for SegWit\nand that didn\u2019t seem too objectionable.\n\n\nhttps://bitcoinhackers.org/@rusty/105664386728806153\n\n\nI personally think this is a solid summary though I do want to point out it\nwasn\u2019t only Luke that opposed lockinontimeout=false. There were other\nindividuals who also opposed lockinontimeout=false but at least from my\nreading that was the minority opinion. Luke concluded there wasn\u2019t clear\nconsensus on it and that even if lockinontimeout=false was eventually\nchosen as a Bitcoin Core default he would be running lockinontimeout=true\non his node.\n\n\nIn terms of the PRs, the following BIP 8 PRs were merged following the\nmeeting.\n\n\nhttps://github.com/bitcoin/bips/pull/1020\n\n\nhttps://github.com/bitcoin/bips/pull/1021\n\n\nThe latter was merged due to an observation from Jonas Nick in the PR\ncomments and during the meeting that without it nodes could end up on the\nwrong chain in a scenario where they run lockinontimeout=true with most\nnodes running lockinontimeout=false.\n\n\nThe Bitcoin Core PR #19573 requires additional work from its author and\nfurther review before it can be considered for merging.\n\n\nI do want to thank the large number of participants for engaging in the\ndiscussion in the spirit of wanting to make progress on Taproot activation\nand for gracefully allowing me to interrupt them and keep the discussion on\ntopic. The vast majority of the time this level of bluntness (and pushing\naway slightly off topic questions) is not desired or required in Bitcoin\ntechnical meetings. I hope those who were interrupted during this meeting\nwill return and ask their questions now a meeting of that sheer size is\nover.\n\n\nWe are in the process of attempting to organize a follow up more closely\nfollowing the format of John Newbery\u2019s Bitcoin Core PR review club which\nwill be lower level, technical and focused on the Bitcoin Core PR #19573.\nThe Bitcoin Core PR review club is also open to all but given its more\ntechnical nature it shouldn\u2019t present the same challenges as yesterday\u2019s\nmeeting.\n\n\nThanks to Alejandro De La Torre for providing an update on his website (\ntaprootactivation.com) following the meeting. Chun Wang (co-founder of\nF2Pool, ~ 16 percent of global hash rate) has decided to support BIP\n8(false,1 year).\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/ab887d1d/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Yesterday's Taproot activation meeting on IRC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3607
        }
    },
    {
        "title": "[bitcoin-dev] Taproot activation meeting 2 - Tuesday 16th February 19:00 UTC",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-02-05T12:43:57",
                "message_text_only": "A summary of the first Taproot activation meeting (February 3rd) is here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018379.html\n\n\nIt appears there is one (hopefully) last stumbling block before we are\nready to propose Taproot activation parameters to the mailing list.\n\n\nHence we are organizing a follow up meeting on IRC on the\n##taproot-activation channel on Tuesday 16th February at 19:00 UTC.\n\n\nAs I said in the summary of the first Taproot activation meeting whether\nlockinontimeout (LOT) is set to true or false in a Bitcoin Core release\nattracted discussion during the meeting and has continued to attract\ndiscussion afterwards.\n\n\nI will weigh up the arguments I have seen for both true and false here. I\nwon\u2019t comment on the strength of the arguments, merely attempt to summarize\nthem. Any errors are my own.\n\n\nArguments for setting lockinontimeout (LOT) to true in a Core release\n\nT1) This entirely eradicates the possibility (however unlikely) that\nTaproot fails to activate within a year. Although approximately 90 percent\nof mining pools have already pledged to activate Taproot there is no reason\nto open the door to possible delays and political shenanigans for no\nreason, however unlikely.\n\nT2) Given users can change LOT=true at any point (and some have declared\nthey will be setting LOT=true regardless), setting LOT=false in Core opens\nup edge case scenarios where different proportions of users on the network\nchange to LOT=true at different points in time in an uncoordinated fashion.\nGiven the end state we all want is Taproot activated it doesn\u2019t make sense\nto open the door to these edge cases. Setting LOT=true in Core would mean\nthere is no motivation for users to change LOT in the software they are\nrunning.\n\nT3) We should not be putting users in a place where they feel they need to\nchange LOT. The urge to change LOT will be strong if miners delay for an\nunreasonable period. We are then in a situation where a decision has to be\nmade on whether Core releases a new version with LOT=true and this whole\ndiscussion kicks off again. We should definitely seek to avoid the need to\nrehash this discussion later in the year.\n\nT4) LOT is only relevant if miners fail to activate. It doesn\u2019t make sense\nto set it to false as that is essentially saying if miners fail to activate\nearly, LOT should also let them not activate.\n\nT5) Activation should only be attempted once community consensus for the\nsoft fork has been reached. Miner signaling is not voting for the changes,\nit is signaling readiness. There is no reasonable rationale for not being\nready within a year.\n\nT6) An argument belcher outlined on IRC. If LOT was set to true and a chain\nsplit happened then the Taproot chain doesn\u2019t have wipeout risk so there\u2019s\na really strong incentive to be on the Taproot activating LOT=true chain\nand therefore using LOT=true means the risk of a chain split is actually\nlower.\n\n\n\nArguments for setting lockinontimeout (LOT) to false in a Core release\n\nF1) The probability of Taproot not being activated by miners is small. This\nis not 2017, this is not SegWit, there is no need to worry.\n\nF2) The worst case scenario is we have to wait over a year for Taproot to\nbe activated. Even the worst case scenario is not a disaster.\n\nF3) If in the unlikely scenario miners did not activate Taproot for a year\nfor no apparent reason we would never set LOT to false again for any\npotential future soft fork. If miners fail to activate Taproot despite\npledging support and there being overwhelming community consensus for it,\nit would set a precedent that miners cannot be relied upon *at all* to\nactivate soft forks.\n\nF4) If in the highly unlikely scenario that a bug or some problem with the\nTaproot implementation was found during the signaling period miners could\nchoose not to activate it which is cleaner than needing an emergency Core\nrelease.\n\n\nThen some additional arguments nullc posted on Reddit\n\nhttps://old.reddit.com/r/Bitcoin/comments/lcjhl6/taproot_activation_pools_will_be_able_to_veto/gm2l02w/\n\nF5) LOT = false is more similar to what was done previously (unless you go\nway back to the earliest soft forks which were more similar to LOT = true)\n\nF6) It is more important that no rules that harm users are deployed than it\nis that new useful rules are deployed quickly. If there is a choice between\n\u201cfaster\u201d and \u201cmore clear that this isn\u2019t a mechanism to force bad things on\nusers\u201d we should prefer the latter. Plenty of people just don\u2019t like\nLOT=true very much absent evidence that miners are blocking deployment. To\nsome it just feels needlessly antagonistic and distrusting towards part of\nour community.\n\n\nThere are some additional parameters other than LOT we will discuss in this\nmeeting such as activation threshold, start time etc but personally I don\u2019t\nthink they will attract the same discussion as LOT.\n\n\nAs I\u2019ve stated before please continue to engage productively and in good\nfaith. I can see arguments with merit on both sides of the LOT discussion\nbut there appears to be overwhelming consensus that Taproot is activated\nthis year and there appears to be no reason it shouldn\u2019t be. This\ndiscussion on LOT really should not derail that.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210205/75f486c6/attachment.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-02-13T16:32:57",
                "message_text_only": "On Fri, Feb 05, 2021 at 12:43:57PM +0000, Michael Folkson via bitcoin-dev wrote:\n> https://old.reddit.com/r/Bitcoin/comments/lcjhl6/taproot_activation_pools_will_be_able_to_veto/gm2l02w/\n> [...] \n> F6) It is more important that no rules that harm users are deployed\n> than it is that new useful rules are deployed quickly. If there is a\n> choice between \u201cfaster\u201d and \u201cmore clear that this isn\u2019t a mechanism to\n> force bad things on users\u201d we should prefer the latter. Plenty of\n> people just don\u2019t like LOT=true very much absent evidence that miners\n> are blocking deployment. To some it just feels needlessly antagonistic\n> and distrusting towards part of our community.\n\nI think F6, above, bundles together several of Maxwell's points and\nmaybe loses something in summary.  I'd encourage interested readers to\nview the original post that Folkson referenced.  I'd like to extract one\npart as a separate point and write about it a bit in my own words:\n\nF7) defaulting to LOT=false makes non-activation possible even if people\n    run the code that developers provide, meaning a successful\n    activation proves that at least some people (e.g. miners or UASFers)\n    voluntarily took actions that were well outside the scope of\n    developer control.\n\n    This makes it clear that developers don't control changes to the\n    system.  There are other arguments that demonstrate that developers\n    aren't in control[1], but they aren't as clear as simply pointing\n    out that a rule change won't go into effect until at least several\n    non-developers independently act of their own accord.\n\n    Having such a clear argument that developers aren't in control\n    bolsters the decentralized ethos of Bitcoin and reduces the chance\n    that bad actors will pressure Bitcoin developers to attempt future\n    unwanted changes.  \n\n-Dave\n\n[1] IMO, the main evidence we have that developers aren't in control of\n    the system is that Bitcoin Core is free software which gives anyone\n    who obtains a copy of it the legal right to run it, learn from it,\n    modify it, and share additional copies of it for any purpose.  Each\n    time someone uses those rights to create alternative Bitcoin\n    implementations, altcoins, or forkcoins, they demonstrate that users\n    could change the system---or resist changes to it---in opposition to\n    the current developer team, should that become necessary.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210213/47a055ac/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-02-28T19:45:23",
                "message_text_only": "Answering the F1-F7 arguments for LOT=False...\n\n> F1) The probability of Taproot not being activated by miners is small. This\n> is not 2017, this is not SegWit, there is no need to worry.\n\nWhile we believe miners have no reason to sabotage Taproot activation, this \nwas also the belief leading up to Segwit\u2019s activation in 2017, and regardless \nit is not desirable to create such a risk forcing the community to place \nextra trust in miners. Miners might very well not exploit an inflation bug, \nbut that is no reason to purposefully add an inflation bug.\n\n> F2) The worst case scenario is we have to wait over a year for Taproot to\n> be activated. Even the worst case scenario is not a disaster.\n\nWhile it is true that a second activation can be deployed in the event of the \nfirst one failing, doing so would not necessarily change the situation unless \nLOT were changed to true anyway - in which case, it might as well be true for \nthe initial deployment as well. Furthermore, a re-deployment could create a \nsituation where users believe they have already upgraded for Taproot, but do \nnot enforce it due to not understanding the need to upgrade yet again.\n\n> F3) If in the unlikely scenario miners did not activate Taproot for a year\n> for no apparent reason we would never set LOT to false again for any\n> potential future soft fork. If miners fail to activate Taproot despite\n> pledging support and there being overwhelming community consensus for it,\n> it would set a precedent that miners cannot be relied upon *at all* to\n> activate soft forks.\n\nSetting LOT=false with a threat to change it to true later is antagonistic \nagainst miners. With LOT=true, expectations are simply made clear and miners \ncan simply cooperate by making valid blocks as they do day-to-day already.\n\n> F4) If in the highly unlikely scenario that a bug or some problem with the\n> Taproot implementation was found during the signaling period miners could\n> choose not to activate it which is cleaner than needing an emergency Core\n> release.\n\nThe risk that a bug in Taproot is discovered this late yet before activation, \nto warrant aborting the deployment, is extremely low (much lower than the \nrisks created by LOT=false). Even if such a scenario occurred, and even with \nLOT=false, users would still need to upgrade to back out the deployment. In \nthe best-case scenario, users would need to upgrade to deploy the fixed \nTaproot. So in the end, nothing is to be gained from relying on a miner abort \nfor such scenarios.\n\n> F5) LOT = false is more similar to what was done previously (unless you go\n> way back to the earliest soft forks which were more similar to LOT = true)\n\nThe behaviour of LOT=false has proven problematic and caused failure of Segwit \nactivation in 2017. LOT=true behaviour has a long history of success, and was \nused to resolve and activate Segwit in 2017 after LOT=false\u2019s failure.\n\n> F6) It is more important that no rules that harm users are deployed than it\n> is that new useful rules are deployed quickly. If there is a choice between\n> \u201cfaster\u201d and \u201cmore clear that this isn\u2019t a mechanism to force bad things on\n> users\u201d we should prefer the latter. Plenty of people just don\u2019t like\n> LOT=true very much absent evidence that miners are blocking deployment. To\n> some it just feels needlessly antagonistic and distrusting towards part of\n> our community.\n\nAny deployment, or even status quo, can be falsely portrayed/spun in a way to \nharm Bitcoin. As such, only objective criteria should be considered.\n\nBIP 8 makes it explicitly easy for people to reject the softfork if they don't \nlike it, so any claim of being \"forced\" is a non-starter to an honest person.\n\n> F7) defaulting to LOT=false makes non-activation possible even if people\n>     run the code that developers provide, meaning a successful\n>     activation proves that at least some people (e.g. miners or UASFers)\n>     voluntarily took actions that were well outside the scope of\n>     developer control.\n>\n>     This makes it clear that developers don't control changes to the\n>     system.  There are other arguments that demonstrate that developers\n>     aren't in control[1], but they aren't as clear as simply pointing\n>     out that a rule change won't go into effect until at least several\n>     non-developers independently act of their own accord.\n>\n>     Having such a clear argument that developers aren't in control\n>     bolsters the decentralized ethos of Bitcoin and reduces the chance\n>     that bad actors will pressure Bitcoin developers to attempt future\n>     unwanted changes.\n\nEven if developers release software, it must still be accepted by the \ncommunity in the form of actively choosing to run the software which includes \nthe activation. So long as the activation is clearly and prominently \ndocumented, users have taken the action to accept the protocol change. \nFurthermore, the community has already demonstrated a clear and undisputed \nsupport for the activation of Taproot. If there was/is any question of \nwhether that is true or not, it is premature to be planning activation of ANY \ntype.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Taproot activation meeting 2 - Tuesday 16th February 19:00 UTC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr",
                "Michael Folkson",
                "David A. Harding"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 13298
        }
    },
    {
        "title": "[bitcoin-dev] BIP32/43-based standard for Schnorr signatures & decentralized identity",
        "thread_messages": [
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-05T17:51:27",
                "message_text_only": "Hi,\n\n\nBackground\n==========\n\nHad a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:\n\n1. There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.\n\n2. Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.\n\n3. The other need (not discussed with Peter) is to change the general structure of derivation path used before with BIP-44, 45, 84. This change is required to enable the use of all modern wallet use cases under a single standard: single-sigs & multi-sigs, ECDSA & BIP340 signatures.\n\n4. Embedding multisig support in a hierarchical format requires introduction of a \u201csigner id\u201d concept as a part of the derivation path. I found a way how this can be done seamlessly, leading to emergence of decentralized identity as a side effect.\n\n\nProposal\n========\n\nDerivation path structure & purpose values\n------------------------------------------\n\nThe new format for the hierarchical derivation BIP32 path is the following:\n\n\tm/purpose\u2019/blockchain\u2019/identity\u2019/scope'/case/index\n\n**Purpose:**\nBIP-43 purpose values under the proposal:\n- 340\u2019 for BIP340 signatures\n- ???\u2019 for old-style ECDSA signatures (??? will be set to the BIP number of this standard once it gets assigned)\nThus, purpose will be used to signify the type of the signature.\nNB: purpose MUST be hardened since otherwise a key leak may occur.\n\n**Blockchain:**\nwas not there before, but now we should have it:\n- to prevent key reuse across blockchains & combined inter-chain analysis\n- to get rid of using custom xpub prefixes (like SLIP-132) which are very unwelcomed by the community and are unnecessary since we have descriptors.\n\nTestnet path `1` covers all testnets (no problem with key re-use for valueless testnet or inter-testnet chainanalysis) - this follows the logic of recent changes in other standards related to testnet (use the same Bech32 prefixes for all testnets).\n\nTestnet path is unhardened from this point & till the end of the derivation path: no need to prevent private key leak there, simplifies test software (hardened paths require private key access for derivation).\n\nDevs are free to choose other unhardened number if they need, without changing the standard - unhardened numbers will never be used for chains with real value.\n\n**Identity and scope**\nHardened components signify the main identity (decentralized id) and the scope under that id used in context of specific multisig wallet or other identity case. Scope is required to use the same id with different peers without exposing the main identity xpub (and, thus, the scope must be hardened as well).\n\n\n**Case**\nThis is the same as a \u201cchange\u201d field before (under BIP44 etc), however it is proposed to change the name to denote that the field may have other values and is used for signalling support for some custom features (for instance, pay-to-contract or sign-to-contract schemes, which may be used for client-side validation like in RGB protocol etc).\n\n**Index**\nSequentially increased index like in BIP44\n\n\nIdentity basics\n---------------\n\n**Identity index** SHOULD be a random number within BIP32 hardened index range.\n\nRationale: derivation path may be kept public (see decentralized logins below), and use of sequential numbers will leak information of how many identities are used by some person.\n\n**(Identity) scope index**: depending on whether revocation is enabled:\n- if revocation is not enabled, or before the first revocation, it SHOULD be any random hardened number\n- otherwise, it must be a number provided during the revocation procedure for the previous scope\n\nRationale for identity scope: it is required for an identity to be safely usable under multiple multisig wallets/descriptors without exposure of the identity xpub to unrelated parties. Its introduction also allows to use the keys derived under the same identity index as a universal decentralized identity (see details below) without the risk of correlation analyses; especially when they are used outside of the transaction context (for instance as a part of login) without the risk of chain analysis against such data (linking logins to onchain transactions). \n\n\nIdentity representations\n------------------------\n\nThe XpubIdentifier created with extended public key under BIP32 derivation path ending at the level of the identity index is called **bitcoin decentralized id** (hereinafter simply **decentralized id**).\n\nRationale: XpubIdentifier is a hash of the extended public key, thus id does not leak any confidential information about the user, her/his outputs or any keys used in the setup and after. As a 256-bit number it is sufficient for global unique identification; and it is created in such a way that it will always be unique for each user (based on the selection of random number), seed & derivation path combination; which allows each user to have multiple unique decentralized ids without any significant risk collision. These ids will be scoped to some blockchain & authorization scheme (based on the use of specific signature algorithm).\n\nDecentralized id can be used as a unique user login or a key for searching user metadata with different centralized or decentralized systems, which design is outside of the scope of this proposal (however there is a WIP in this regard involving client-validated LN-based smart contract system).\n\nAside from the decentralized id, when a user needs to use the identity under some scope (i.e. creating multisig wallet or registering/signing up to some online service or an app) he should use the following string, called \u201cdecentralized login\u201d and/or \u201cdecentralized id string\":\n\n\tm/purpose\u2019/blockchain'/identity\u2019=[decentralized_id]/scope\u2019=[scope_xpub]\n\nWhere:\n- purpose', blockchain\u2019, identity\u2019 and scope' have the meaning according to this proposal (see the proposed BIP43 derivation path structure above);\n- * decentralized_id* is the decentralized id (XpubIdentifier value at that derivation path level) encoded as BIP350 Bech32m string with HRP set ot `bcid`;\n- **scope_xpub* is the Base64-encoded xpubkey (according to BIP32) derived at that level.\n\nRationale on the use of Bech32m encoding for XpubIdentifier\n- the standard 64-hex string can be easily confused with other 64-hex strings such as transaction ids, XpubIdentifiers, SHA256(d) hash values etc. Bech32 prefix provides context making it unambiguously parsable by software\n- Bech32m contains a checksum which makes it easier to check whether two ids are equal visually\n- `bcid` HRP is selected to signify that this particular id standard is based on bitcoin ecosystem and Secp256k1 curves.\n\nRationale on login string: \n- decentralized login string is designed in such a way that it can both be an id backup for the id owner (providing full information necessary for deriving keys under this id or checking the value of the scoped xpub from the seed) - and give the context (blockchain and signature algo) under which this id is valid.\n- text representation of the login string is easy to check in the logs and simple to use in text-based protocols such as HTTP for authentication.\n\nNB: If the revocation protocol is supported this string MUST be suffixed with a revocation single-use-seal (see below) in form of `?txid:vout`\n\n**Examples:**\n\nDecentralized id: bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk (this id corresponds to XpubIdentifier 9e07a39b54f858111e605c878bcef91f159a18a3; since I do not have Bech32m at hand I have temporally used Bech32)\n\nDecentralized login: m/340\u2019/0'/[bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk]/20721421274\u2019=[xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV]\n\nDecentralized login with key revocation: m/340\u2019/0'/[bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk]/20721421274\u2019=[xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV]?0e94ada127fbbc6d2152b18a50fd02ea9aaa608ec20cfc606ad327da1c255201:1\n\n\nMultisig wallets with decentralized id\n--------------------------------------\n\nIn case of multisig wallet creation, the parties may share their decentralized id strings in one of two forms:\n\n1. Compact, skipping the scope xpub and replacing it with 32-bit xpub fingerprint:\n    ```\n\tm/purpose\u2019/blockchain'/identity\u2019=[decentralized_id]/scope\u2019=[scope_xpub_fingerprint]\n    ```\n2. Full, as specified in the previous section\n\nThis will provide all parties with a sufficient information to construct full paths with a sequentally-increased final indexes\n\n\tm/purpose\u2019/blockchain\u2019/identity\u2019/scope'/case/index\n\nfor change and normal cases.\n\nThe first option will allow all parties to prepare PSBTs for the common signing process; however they will not be able to generate invoices or track blockchain for new transactions. However, on the other hand, that will not leak the scoped xpub.\n\nThe second option allows full features for multisig wallets, including invoice creating and onchain tracking.\n\n\nAuthenticating with decentralized id\n------------------------------------\n\nTo authenticate (or register) a user must provide the authentification service with the following information:\n- Login string from the previous section\n- Random number within the **unhardened** BIP32 index range\n- A signature, created according to the signature algorithm specified as a part of login (ECDSA or BIP340) with the private key derived with the following derivation path:\n\n\tm/purpose\u2019/blockchain'/identity\u2019/scope\u2019/random_seed\n\nwhere *random_seed* is the random number from the above.\n\nThis scheme is non-interactive and can be used for authentication, authorization and registration with servers or applications.\n\nRationale:\n- random number is required for avoiding private key reuse\n- it is unhardened so the public key required for signature verification may be generated by the service from the scoped identity xpub provided as a part of the login\n- random number can\u2019t be a challenge from the service side since it will (a) make the protocol interactive, introducing unnecessary complexity and (b) will allow malicious servers to repeat the same challenge for private key correlation analysis if BIP340 signature is used.\n\n\nIdentity revocations\n--------------------\n\nIt will be possible to revoke identities using single-use-seals mechanics ([originally proposed by Peter Todd][1]) based on bitcoin blockchain. What's important here is that this will not lead to the increase in transaction size and may be simply combined with normally happening transactions using special signature design procedure (see below).\n\nNB: Since the revocation procedure is non-trivial, it is proposed to have the first version of the standard to be published without it and add it later by using the suffix `?txid:vout` with the revocation single-use-seal added to the identity string.\n\nThe protocol runs as follows:\n\n### Identity creation\nAlice, after creating a decentralized identity under this standard and its first scope, chooses some of her existing bitcoin UTXOs and uses it as a suffix for the identity/login string. It is important that:\n- the UTXO must be protected by a key from the derivation path unrelated to the used identity. \n- the UTXO should be mined at a safe depth, such that reogs would have a negligible probability.\n- should be spendable by a single signature from a private key in Alice's possession.\n\n### Identity scope revocation\nIf Alice needs to revoke specific scoped identity xpub (for instance, a private key leak happened) she needs to:\n1. Spend the previously specified revocation UTXO signalling about the revocation by setting two most significant bits of the random number `k` used during the signature creation to `01` value.\n2. Use the first output of the spending transaction as a new revocation UTXO.\n3. For now, she needs to use 32-byte fingerprint | 0x8000000 of the transaction as a new identity scope for future logins and key derivations under the same identity.\n\n### Full identity revocation\nAlice also has an option of completely revoking the identity without providing a new scope, which will be an equivalent of removing login or cancelling participation in a multisig wallet. To do so she just needs to set two most significant bits to `10` value instead of `01`.\n\n### Identity revocation detection\nOther parties knowing Alice's identity string (her multisig co-signers under the same identity scope or services that her login information is) will know about revocation by monitoring the spending of the revocation UTXO in the blockchain and checking firts two most significant bit values in `k` value computable from the the signature in the spending input. They will be able to monitor consequent revocations using the first output from the revocation transaction as a new single-use-seal. They will also update Alice\u2019s identity scope accordingly and will be able to verify Alice\u2019s new signatures without any communications with her. It\u2019s quite important that they will also be able to decline Alice's login attempts with the revoked key from the moment the revocation tx got into mempool, i.e. instantly.\n\n### Spending single-use-seal without revocation\nIf, because of whatever reason, Alice needs to spend the UTXO which was previously marked as a revocation UTXO without the actual revocation, she can do that by setting \u2018k\u2019 two most significant bits to `00` value. The new revocation UTXO will become assigned to the first input of that transaction, but the identity would not be revoked and the scope value will not change.\n\n\nVisual summaries\n================\n\nI have prepared some visual summary covering the proposal, which may simplify its analysis:\n\n![image](https://user-images.githubusercontent.com/372034/107058405-dd645580-67d4-11eb-986f-a0211d2dd54f.png)\n\n\n=================\n\nHope that all make sense. Me and my colleagues spent more than a year on finding ways to build decentralized identity standard suitable for cypherpunk needs, and this is the first part of what I came up with. Since I am also engineer behind [RGB smart contracts][2] (allow complex logic on top of bitcoin transactions & Lightning channels using client-side-validation and single-use-seals), the proposed identity, if accepted, will be later accompanied by layer-2 and 3 solutions on top, giving user the ability to provide the identity meta-information (name, surname, emails, avatars etc) with such features as:\n- decentralized non-blockchain database & search engine for metadata: LN network\n- no centralized notary: I will not need to ask anyone\u2019s permission if I\u2019d like to change my name\n- partial meta-information disclosures: ability to selectively hide some fields\n- multiple IDs under some root ID: unlinkable, until I disclose the link myself (and I can prove that the link exists, if I need)\n- can be combined with bitcoin multisigs without confidentiality leaks: no onchain analysis is possible\n\nSince there is no need to make that part of BIPs, I narrowed this proposal down to the part which is relevant only in the context of Layer 1 stuff.\n\n\u2014\u2014\n[1]: https://building-on-bitcoin.com/docs/slides/Peter_Todd_BoB_2018.pdf\n[2]: https://rgb-org.github.io/ \n\n\nKind regards,\nDr Maxim Orlovsky,\nLNP/BP Standards Association (https://lnp-bp.org)\n& Pandora Core AG\nGPG: FBDE A843 3DDC 1E69 FA90  C35E FFC0 2509 47E5 C6F7\n\nhttps://github.com/dr-orlovsky\nIRC: dr-orlovsky at freenode (usually in #rust-bitcoin, #lnp-bp & ##taproot-activation)\nTwitter: @dr_orlovsky"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-05T22:00:29",
                "message_text_only": "\u0412 Fri, 05 Feb 2021 17:51:27 +0000\nDr Maxim Orlovsky via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Testnet path is unhardened from this point & till the end of the\n> derivation path: no need to prevent private key leak there,\n> simplifies test software (hardened paths require private key access\n> for derivation).\n\nI believe this will reduce robustness and will add complexity to the\ntest software instead. If the derivation path is hardened in 'production\ncode' and is unhardened in 'test code', then: code paths that depend on\nhardened derivation may not be tested; there will be unnecessary\ncode that will need to deal with 'un-hardening' the paths for test code.\n\nIt is much more robust to just change the 'purpose' part of the path,\nand leave the rest unchanged.\n\nIt is OK to require privkey access to hardened paths in test\nsoftware, because the same behaviour is expected in 'production'."
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-11T07:27:42",
                "message_text_only": "Hi Dmitry,\n\nThank you very much for readying and analyzing my proposal!\n\n>> Testnet path is unhardened from this point & till the end of the\n>> derivation path: no need to prevent private key leak there,\n>> simplifies test software (hardened paths require private key access\n>> for derivation).\n> \n> I believe this will reduce robustness and will add complexity to the\n> test software instead. If the derivation path is hardened in 'production\n> code' and is unhardened in 'test code', then: code paths that depend on\n> hardened derivation may not be tested; there will be unnecessary\n> code that will need to deal with 'un-hardening' the paths for test code.\n<...>\n> It is OK to require privkey access to hardened paths in test\n> software, because the same behaviour is expected in 'production\u2019.\n\nYou are right, agree\n\n> It is much more robust to just change the 'purpose' part of the path,\n> and leave the rest unchanged.\n\nNot sure whether the purpose is the correct place to indicate testnet: in this case it we will have to support one testnet per each blockchain type (which is not the case). So probably we should reserve a single dedicated value for any testnet withing ``blockchain` field using hardened path as you suggested - for instance, 0xFFFFFFFF may do the job.\n\nKind regards,\nMaxim"
            },
            {
                "author": "Christopher Allen",
                "date": "2021-02-05T22:37:01",
                "message_text_only": "Concept ACK.\n\nI, in my role as a co-author of the emerging W3C Decentralized Identifier\nstandard and of the BTCR DID method, organizer of the Bitcoin Airgapped\nWallet Community (\nhttps://github.com/blockchainCommons/airgapped-Wallet-Community/discussions),\nand as principal architect of Blockchain Commons, am very interested in\nsupporting discussion on this topic, and implementation of anything we\ndecide. I also have some Patron's to Blockchain Commons interested in this\ntopic and may be willing to financially support some reference code.\n\n-- Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210205/859226ce/attachment.html>"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-11T07:28:07",
                "message_text_only": "Hi Christopher,\n\nThank you very much! Will look forward to talk to you regarding all of these, as we discussed elsewhere.\n\nKind regard,\nMaxim\n\n\n> On Feb 5, 2021, at 23:37, Christopher Allen <ChristopherA at lifewithalacrity.com> wrote:\n> \n> Concept ACK.\n> \n> I, in my role as a co-author of the emerging W3C Decentralized Identifier standard and of the BTCR DID method, organizer of the Bitcoin Airgapped Wallet Community (https://github.com/blockchainCommons/airgapped-Wallet-Community/discussions), and as principal architect of Blockchain Commons, am very interested in supporting discussion on this topic, and implementation of anything we decide. I also have some Patron's to Blockchain Commons interested in this topic and may be willing to financially support some reference code.\n> \n> -- Christopher Allen"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-02-06T01:15:12",
                "message_text_only": "On Friday, February 5, 2021 9:51 AM, Dr Maxim Orlovsky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> Background\n>\n> ====================\n>\n> Had a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:\n>\n> 1.  There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.\n> 2.  Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.\n\nHi Maxim,\n\nthanks for bringing up this discussion here. I'd like to clarify a few things though, as I think the above is formulated far too strongly.\n\nThere are two issues here: (1) reasons to avoid reusing the same key for privacy reasons, and (2) reasons to avoid using related keys for cryptographic reasons. And in practice, solutions to the first (which we already need, unrelated to Taproot/Schnorr) mean the second is largely moot.\n\n\n# Don't reuse keys for privacy/organizational reasons.\n\nReusing the same key in Bitcoin scripts - for use in distinct signature schemes or not - should always be avoided. It has obvious privacy implications; I don't think this is controversial, and it's a problem that exists today, unrelated to Taproot. E.g. you don't want to reuse the same keys as both single-sig and participation in multisig.\n\nMy personal view here is that distinct standard derivation paths help with this in the simple cases, but they're not a full solution in the most general case. E.g. if you want to use one seed/root to participate in multiple sets of multisig policies, you'll need some kind of index to assign to each anyway. For this reason in general I prefer solutions that explicitly track what path is used for what.\n\n\n# Don't use related keys for cryptographic reasons\n\nThere are some concerns to address here, but I want to make it clear there are no known attacks against usage of related keys across ECDSA and Schnorr, and I don't expect there will be. However, there is probably no proof for this, and creating one may be tricky. On the other hand, the ecosystem (Bitcoin, but also many other applications) has accepted ECDSA long ago, while it had no security proofs whatsoever (and even the ones that exist now rely on fairly unusual assumption; a proof for security of mixed Schnorr/ECDSA usage would inherently need equally unusual assumptions too).\n\nNow, as soon as a hardened derivation separates different uses there is no concern at all. So any solution for avoiding key reuse (section above) that works by assigning (implicitly or explicitly) different hardened derivation paths (as BIP43 etc. do) to different uses implies there is never any concern about related keys across Schnorr/ECDSA.\n\nIf the keys are not separated by a hardened step, it's more complicated. Looking at the different cases:\n\n(1) Signing with related ECDSA keys (e.g. two unhardened child keys from the same xpub)\n\n- This is very common on BIP32 usage today, so hopefully it is secure! Tim Ruffing pointed me today to https://link.springer.com/chapter/10.1007/978-3-030-36938-5_8 whose abstract seems to indicate they prove this is actually secure, but I don't know under what assumptions. Note that the comment there about Schnorr not having this property does not apply to BIP340, because it uses key-prefixed Schnorr.\n\n(2) Signing with related Schnorr keys.\n\n- I believe this is secure simply because BIP340 challenges commit to the pubkey (key prefixing), and thus a signature on one shouldn't teach you anything about others. A formal proof is probably a bit longer, but still trivial to construct.\n\n(3) The real question: signing with a Schnorr key that is related to an ECDSA key.\n\n- I don't expect that this is easy to prove, but I have a very hard time imagining how it could be exploitable, given the use of domain-separated hashes. Aspects such as BIP340's key prefixing and the fact that Bitcoin sighashes indirectly commit to the (set of) signing pubkeys make it even harder.\n\n\n# TL;DR\n\n* For privacy reasons, you should use separate keys/derivation branches for different uses in all circumstances (duh).\n* To stay within the realm of provably security it's advisable to make sure ECDSA key and Schnorr keys use distinct hardened derivation steps.\n* Even if you don't, you're really just back to the level of assurance we had about unhardened BIP32 ECDSA keys before a proof was known (which I think most people aren't even aware of).\n\nCheers,\n\n--\nPieter"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-11T14:38:57",
                "message_text_only": "Hi Pieter,\n\n... and sorry for misspelling your name in my first e-mail :(\n\nThank you very much for all the clarifications; it\u2019s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?\n\nKind regards,\nMaxim\n\n> On Feb 6, 2021, at 02:15, Pieter Wuille <bitcoin-dev at wuille.net> wrote:\n> \n> \n> On Friday, February 5, 2021 9:51 AM, Dr Maxim Orlovsky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> Hi,\n>> \n>> Background\n>> \n>> ====================\n>> \n>> Had a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:\n>> \n>> 1.  There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.\n>> 2.  Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.\n> \n> Hi Maxim,\n> \n> thanks for bringing up this discussion here. I'd like to clarify a few things though, as I think the above is formulated far too strongly.\n> \n> There are two issues here: (1) reasons to avoid reusing the same key for privacy reasons, and (2) reasons to avoid using related keys for cryptographic reasons. And in practice, solutions to the first (which we already need, unrelated to Taproot/Schnorr) mean the second is largely moot.\n> \n> \n> # Don't reuse keys for privacy/organizational reasons.\n> \n> Reusing the same key in Bitcoin scripts - for use in distinct signature schemes or not - should always be avoided. It has obvious privacy implications; I don't think this is controversial, and it's a problem that exists today, unrelated to Taproot. E.g. you don't want to reuse the same keys as both single-sig and participation in multisig.\n> \n> My personal view here is that distinct standard derivation paths help with this in the simple cases, but they're not a full solution in the most general case. E.g. if you want to use one seed/root to participate in multiple sets of multisig policies, you'll need some kind of index to assign to each anyway. For this reason in general I prefer solutions that explicitly track what path is used for what.\n> \n> \n> # Don't use related keys for cryptographic reasons\n> \n> There are some concerns to address here, but I want to make it clear there are no known attacks against usage of related keys across ECDSA and Schnorr, and I don't expect there will be. However, there is probably no proof for this, and creating one may be tricky. On the other hand, the ecosystem (Bitcoin, but also many other applications) has accepted ECDSA long ago, while it had no security proofs whatsoever (and even the ones that exist now rely on fairly unusual assumption; a proof for security of mixed Schnorr/ECDSA usage would inherently need equally unusual assumptions too).\n> \n> Now, as soon as a hardened derivation separates different uses there is no concern at all. So any solution for avoiding key reuse (section above) that works by assigning (implicitly or explicitly) different hardened derivation paths (as BIP43 etc. do) to different uses implies there is never any concern about related keys across Schnorr/ECDSA.\n> \n> If the keys are not separated by a hardened step, it's more complicated. Looking at the different cases:\n> \n> (1) Signing with related ECDSA keys (e.g. two unhardened child keys from the same xpub)\n> \n> - This is very common on BIP32 usage today, so hopefully it is secure! Tim Ruffing pointed me today to https://link.springer.com/chapter/10.1007/978-3-030-36938-5_8 whose abstract seems to indicate they prove this is actually secure, but I don't know under what assumptions. Note that the comment there about Schnorr not having this property does not apply to BIP340, because it uses key-prefixed Schnorr.\n> \n> (2) Signing with related Schnorr keys.\n> \n> - I believe this is secure simply because BIP340 challenges commit to the pubkey (key prefixing), and thus a signature on one shouldn't teach you anything about others. A formal proof is probably a bit longer, but still trivial to construct.\n> \n> (3) The real question: signing with a Schnorr key that is related to an ECDSA key.\n> \n> - I don't expect that this is easy to prove, but I have a very hard time imagining how it could be exploitable, given the use of domain-separated hashes. Aspects such as BIP340's key prefixing and the fact that Bitcoin sighashes indirectly commit to the (set of) signing pubkeys make it even harder.\n> \n> \n> # TL;DR\n> \n> * For privacy reasons, you should use separate keys/derivation branches for different uses in all circumstances (duh).\n> * To stay within the realm of provably security it's advisable to make sure ECDSA key and Schnorr keys use distinct hardened derivation steps.\n> * Even if you don't, you're really just back to the level of assurance we had about unhardened BIP32 ECDSA keys before a proof was known (which I think most people aren't even aware of).\n> \n> Cheers,\n> \n> --\n> Pieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-02-11T20:31:13",
                "message_text_only": "\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Thursday, February 11, 2021 6:38 AM, Dr Maxim Orlovsky <orlovsky at protonmail.com> wrote:\n\n> Thank you very much for all the clarifications; it\u2019s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?\n\nMaybe, but it would be for a particular way of using keys (presumably: single-key pay-to-taproot), not just the signature scheme itself. If you go down this path you'll also want dedicated branches for multisig participation, and presumably several interesting new policies that become possible with Taproot.\n\nThe only thing ECDSA/Schnorr specific about this is that - if you want to maintain provable security - the keys used for ECDSA and BIP340 should be separated by a hardened step. It seems however that all approaches people actually use to prevent reuse do that already.\n\nAnd as I said, dedicated branches only help for the simple case. For example, it doesn't address the more general problem of preventing reuse of keys in multiple distinct groups of multisig sets you participate in. If you want to solve that you need to keep track of  index is for participating in what - and once you have something like that you don't need dedicated purpose based derivation at all anymore.\n\nSo I'm not sure I'd state it as us *needing* a dedicated purpose/branch for single-key P2TR (and probably many other useful ways of using taproot based spending policies...). But perhaps it's useful to have.\n\nGreg Maxwell pointed out to me that there may be another reason to want non-reuse across ECDSA and BIP340 keys: if someone were to do all of these wrong:\n* not follow BIP340 and re-use RFC6979 for BIP340 nonce generation\n* reuse the same keys for both\n* sign the same message with both\n... you would actually leak your private key. This isn't a concern for Bitcoin transaction signing however, as the sighash (message) indirectly commits to BIP341 or not, and thus it'd be impossible to construct colliding messages. Still, it's a consideration to factor in.\n\nCheers,\n\n--\nPieter"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-18T18:58:54",
                "message_text_only": "Hi Pieter,\n\nAddressing your comments:\n\n>> Thank you very much for all the clarifications; it\u2019s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?\n> \n> Maybe, but it would be for a particular way of using keys (presumably: single-key pay-to-taproot), not just the signature scheme itself. If you go down this path you'll also want dedicated branches for multisig participation, and presumably several interesting new policies that become possible with Taproot.\n\nYes, previously we had a dedicated standards (BIPs) for purpose fields on each variant: single-sig, multi-sig etc. With this proposal I simplify this: you will have a dedicated deterministically-derived *hardened* keys for each use case under single standard, which should simplify future wallet implementations.\n\n\n> And as I said, dedicated branches only help for the simple case. For example, it doesn't address the more general problem of preventing reuse of keys in multiple distinct groups of multisig sets you participate in. If you want to solve that you need to keep track of  index is for participating in what - and once you have something like that you don't need dedicated purpose based derivation at all anymore.\n\nIn the BIP proposal there is a part on how multisigs can be created in a simple and deterministic way without keys reuse.\n\n\n> So I'm not sure I'd state it as us *needing* a dedicated purpose/branch for single-key P2TR (and probably many other useful ways of using taproot based spending policies...). But perhaps it's useful to have.\n\nMy proposal is to have a new purpose field supporting all the above: hardened derivation that supports for multisigs, single-sigs etc.\n\n\nKind regards,\nMaxim"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2021-02-18T18:52:12",
                "message_text_only": "Hi Adam,\n\nCommenting on your question:\n\n> With segWit vs pre-SegWit didn't wallets just select and standardize\n> on a different HD derivation path?\n> \n> Is there something else needed than a Schnorr derivation path?\n\nThe general accepted practice (defined in BIP43) is to define a dedicated purpose field for each kind of key derivation and address encoding. There is a dedicated purpose for pre-SegWit, SegWit, multisigs \u2014 and now a purpose for Schnorr sigs/Taproot outputs is needed. That is why I brought forward this proposal, which addresses exactly this need - and also will support at the same time multisigs and pre-Taproot outputs, making all previously used purpose fields redundant, simplifying future wallets.\n\nKind regards,\nMaxim"
            }
        ],
        "thread_summary": {
            "title": "BIP32/43-based standard for Schnorr signatures & decentralized identity",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pieter Wuille",
                "Dr Maxim Orlovsky",
                "Christopher Allen",
                "Dmitry Petukhov"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 34559
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup",
        "thread_messages": [
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-08T23:14:17",
                "message_text_only": "Hi all,\nI would like to propose a new BIP for Secure Multisig Setup.\nThis proposal has taken inputs from folks at Coldcard, Shift Crypto and\nCobo -- listed below as co-authors.\n\nThis was inspired by my own experience working with hardware wallets on the\nmarket, as well as existing research into the challenges of multisig.\n\nCheers,\nHugo\n\n<pre>\n  BIP: To be determined\n  Layer: Applications\n  Title: Bitcoin Secure Multisig Setup (BSMS)\n  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,\nMarko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,\nRodolfo Novak <rodolfo at coinkite.com>\n  Comments-Summary: No comments yet.\n  Comments-URI:\n  Status: Proposed\n  Type: Standards Track\n  Created: 2020-11-10\n  License: BSD-2-Clause\n</pre>\n\n==Introduction==\n\n===Abstract===\n\nThis document proposes a mechanism to set up multisig wallets securely.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n===Motivation===\n\nThe Bitcoin multisig experience has been greatly streamlined under [\nhttps://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n(Partially Signed Bitcoin Transaction)]. However, what is still missing is\na standardized process for setting up multisig wallets securely across\ndifferent vendors.\n\nThere are a number of concerns when it comes to setting up a multisig\nwallet:\n\n# Whether the multisig configuration, such as Signer membership, script\ntype, derivation paths and number of signatures required, is correct and\nnot tampered with.\n# Whether Signer persists the multisig configuration in their respective\nstorage, and under what format.\n# Whether Signer's storage is tamper-proof.\n# Whether Signer subsequently uses the multisig configuration to generate\nand verify receive and change addresses.\n\nAn attacker who can modify the multisig configuration can steal or hold\nfunds to ransom by duping the user into sending funds to the wrong address.\n\nThis proposal seeks to address concerns #1 and #2: to mitigate the risk of\ntampering during the initial setup phase, and to define an interoperable\nmultisig configuration format.\n\nConcerns #3 and #4 should be handled by Signers and is out of scope of this\nproposal.\n\n==Specification==\n\n===Prerequisites===\nThis proposal assumes the parties in the multisig support [\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\ndescriptor language] and encryption.\n\n==Roles==\n===Coordinator===\n\nThe Coordinator initiates the multisig setup. The Coordinator determines\nwhat type of multisig is used and how many members and signatures are\nneeded. If encryption is enabled, the Coordinator generates a secret token,\nto be shared among the parties for secure communication. The Coordinator\ngathers information from the Signers to generate a descriptor record. The\nCoordinator distributes the descriptor record back to the Signers.\n\n===Signer===\n\nThe Signer is a participating member in the multisig. Its responsibilities\ninclude providing its XPUB to the Coordinator, verifying that its XPUB is\nincluded in the descriptor record and persisting the descriptor record in\nits storage.\n\n==Setup Process==\n\n===Round 1===\n\n====Coordinator====\n\n* The Coordinator creates a multisig wallet creation session. The\nCoordinator determines the type of multisig script used and the signing\nconfiguration (<tt>M</tt> and <tt>N</tt>).\n* If encryption is enabled, the Coordinator also generates a secret token,\nhereby denoted <tt>TOKEN</tt>.\n* TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN\nshould expire after some time period determined by the Coordinator, e.g.,\n24 hours.\n* TOKEN acts as an encryption key among the parties. The method of\nencryption is AES, CTR mode. The encryption key can be calculated by\nperforming a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =\nSHA256(SHA256(TOKEN))</tt>.\n* A TOKEN value of <tt>-1</tt> means that encryption is disabled and all\nthe encryption/decryption steps below can be skipped.\n* The Coordinator shares the TOKEN with all participating Signers over a\nsecure channel.\n\n====Signer====\n\n* The Signer generates a key record by prompting the user for the TOKEN and\na derivation path.\n* The first line in the record must be the <tt>TOKEN</tt>. If encryption is\ndisabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,\nwhereas KEY is an XPUB. KEY must include key origin information and written\nin the descriptor-defined format, i.e.: <tt>[{master key\nfingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a\n<tt>SIG</tt>, whereas SIG is the signature generated by using the\ncorresponding private key to sign the first two lines. Finally, the Signer\nencrypts the entire record with ENCRYPTION_KEY.\n\n===Round 2===\n\n====Coordinator====\n\n* The Coordinator gathers key records from all participating Signers. Abort\nthe setup if TOKEN has expired.\n* For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.\nThe Coordinator verifies that the included SIG is valid given the KEY.\n* If all key records look good, the Coordinator generates a descriptor\nrecord, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all\nin one line. The CHECKSUM has BECH32 encoding and is described at [\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].\nThe Coordinator encrypts this descriptor record with ENCRYPTION_KEY.\n* The Coordinator sends the encrypted descriptor record to all\nparticipating Signers.\n\n====Signer====\n\n* The Signer imports the descriptor record, decrypts it by prompting the\nuser for TOKEN.\n* The Signer calculates and verifies the descriptor\u2019s CHECKSUM. Abort the\nsetup if the CHECKSUM is incorrect.\n* The Signer checks whether one of the KEYs in the descriptor belongs to\nit, using path and fingerprint information included in the descriptor. The\ncheck must perform an exact match on the KEYs, and not using shortcuts such\nas matching fingerprints (which is trivial to spoof). Abort the setup if it\ndoesn\u2019t detect its own KEY.\n* For confirmation, the Signer must display to the user the descriptor's\nCHECKSUM, plus other configurations, such as M and N. The total number of\nSigners, N, is important to prevent a KEY insertion attack. All\nparticipating Signers should be able to display the same confirmation.\n* If all checks pass, the Signer persists the descriptor record in its\nstorage. The Signer should subsequently use the descriptor to generate and\nverify receive and change addresses.\n\nThis completes the setup.\n\n==QR Codes==\nFor signers that use QR codes to transmit data, key and descriptor records\ncan be converted to QR codes, following [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\nthe BCR standard].\n\n==Security==\n\nThis proposal introduce two layers of protection. The first one is a\ntemporary, secret token, used to encrypt the two rounds of communication\nbetween the Signers and the Coordinator. The second one is through the\ndescriptor checksum and visual inspection of the descriptor itself.\n\nThe token is only needed during the setup phase, and can be safely thrown\naway afterwards. The token does not guarantee that the Signer membership\nset is not modified, since that depends on the overall security of all\nparties in the setup, but it can make it significantly harder for an\nattacker to do so.\n\nThere are three ways an attacker can modify the membership set: by changing\nan existing member, by removing an existing member, or by adding a new\nmember.\n\nFor the first two methods, one of the Signers will be able to detect that\nits membership has been changed or removed, and reject the final\ndescriptor. Thus, it is vital that all participating Signers check that\ntheir membership is intact in the descriptor. Even one Signer failing to\ncheck for its membership means that the setup could be compromised.\n\nFor the third type of attack, the descriptor checksum and visual inspection\nof the descriptor itself are the only way to guard against malicious\nmembers from being inserted into the set.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210208/77bca22d/attachment.html>"
            },
            {
                "author": "Craig Raw",
                "date": "2021-02-09T09:33:38",
                "message_text_only": "Hi Hugo,\n\nThanks for raising this again - I'll note there has already been much\ndiscussion on this topic. With respect to your \"two layers of protection\":\n\n> The Coordinator shares the TOKEN with all participating Signers over a\nsecure channel.\n\nWhat secure channel do you propose? Currently, with the default of a\nsoftware wallet coordinator talking to hardware wallets, we have USB, file\n(microSD), and QR as communication channels. It's unclear to me why the\ntoken and encryption process is necessary - in fact it's easier to verify\nwhat is going on using clear text, and the majority of setups will be\nlocally done with the reasonable assumption of a secure environment. When\nthe setup is remote, it's simpler to just transmit the key information over\nthe secure channel which presumably already has encryption.\n\n> The second one is through the descriptor checksum and visual inspection\nof the descriptor itself.\n\nThis is a reasonable suggestion, although it's worth noting that support\nfor storing multisig setups on hardware wallets varies. Coldcard supports\nthis through importing of a proprietary .txt format file (which has been\nadopted by a number of other vendors). Trezor and Ledger (AFAIK) do not\nhowever store multisig setups, which could make this step confusing. With\nthat said, the use of an output descriptor is certainly a more standardised\napproach, albeit one without the wallet name included. By the use of the\nsingular, I assume you mean a descriptor without the /0/* or /1/* suffix\n(which I think is a good idea).\n\nWRT to QR codes, using the BCR UR2.0 standard you linked to is IMO the\nright approach. I'll link directly to the two BCR UR2.0 formats here which\nare relevant:\n\n1. For sharing the sharing the BIP44 account information from the signers\nto the coordinator, the crypto-account format: [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n]\n2. For sharing the output descriptor from the coordinator to the signers,\nthe crypto-output format: [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n]\n\nCraig\n\nOn Tue, Feb 9, 2021 at 9:53 AM Hugo Nguyen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n> I would like to propose a new BIP for Secure Multisig Setup.\n> This proposal has taken inputs from folks at Coldcard, Shift Crypto and\n> Cobo -- listed below as co-authors.\n>\n> This was inspired by my own experience working with hardware wallets on\n> the market, as well as existing research into the challenges of multisig.\n>\n> Cheers,\n> Hugo\n>\n> <pre>\n>   BIP: To be determined\n>   Layer: Applications\n>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,\n> Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,\n> Rodolfo Novak <rodolfo at coinkite.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Proposed\n>   Type: Standards Track\n>   Created: 2020-11-10\n>   License: BSD-2-Clause\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes a mechanism to set up multisig wallets securely.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Motivation===\n>\n> The Bitcoin multisig experience has been greatly streamlined under [\n> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n> (Partially Signed Bitcoin Transaction)]. However, what is still missing is\n> a standardized process for setting up multisig wallets securely across\n> different vendors.\n>\n> There are a number of concerns when it comes to setting up a multisig\n> wallet:\n>\n> # Whether the multisig configuration, such as Signer membership, script\n> type, derivation paths and number of signatures required, is correct and\n> not tampered with.\n> # Whether Signer persists the multisig configuration in their respective\n> storage, and under what format.\n> # Whether Signer's storage is tamper-proof.\n> # Whether Signer subsequently uses the multisig configuration to generate\n> and verify receive and change addresses.\n>\n> An attacker who can modify the multisig configuration can steal or hold\n> funds to ransom by duping the user into sending funds to the wrong address.\n>\n> This proposal seeks to address concerns #1 and #2: to mitigate the risk of\n> tampering during the initial setup phase, and to define an interoperable\n> multisig configuration format.\n>\n> Concerns #3 and #4 should be handled by Signers and is out of scope of\n> this proposal.\n>\n> ==Specification==\n>\n> ===Prerequisites===\n> This proposal assumes the parties in the multisig support [\n> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [\n> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\n> descriptor language] and encryption.\n>\n> ==Roles==\n> ===Coordinator===\n>\n> The Coordinator initiates the multisig setup. The Coordinator determines\n> what type of multisig is used and how many members and signatures are\n> needed. If encryption is enabled, the Coordinator generates a secret token,\n> to be shared among the parties for secure communication. The Coordinator\n> gathers information from the Signers to generate a descriptor record. The\n> Coordinator distributes the descriptor record back to the Signers.\n>\n> ===Signer===\n>\n> The Signer is a participating member in the multisig. Its responsibilities\n> include providing its XPUB to the Coordinator, verifying that its XPUB is\n> included in the descriptor record and persisting the descriptor record in\n> its storage.\n>\n> ==Setup Process==\n>\n> ===Round 1===\n>\n> ====Coordinator====\n>\n> * The Coordinator creates a multisig wallet creation session. The\n> Coordinator determines the type of multisig script used and the signing\n> configuration (<tt>M</tt> and <tt>N</tt>).\n> * If encryption is enabled, the Coordinator also generates a secret token,\n> hereby denoted <tt>TOKEN</tt>.\n> * TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN\n> should expire after some time period determined by the Coordinator, e.g.,\n> 24 hours.\n> * TOKEN acts as an encryption key among the parties. The method of\n> encryption is AES, CTR mode. The encryption key can be calculated by\n> performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =\n> SHA256(SHA256(TOKEN))</tt>.\n> * A TOKEN value of <tt>-1</tt> means that encryption is disabled and all\n> the encryption/decryption steps below can be skipped.\n> * The Coordinator shares the TOKEN with all participating Signers over a\n> secure channel.\n>\n> ====Signer====\n>\n> * The Signer generates a key record by prompting the user for the TOKEN\n> and a derivation path.\n> * The first line in the record must be the <tt>TOKEN</tt>. If encryption\n> is disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,\n> whereas KEY is an XPUB. KEY must include key origin information and written\n> in the descriptor-defined format, i.e.: <tt>[{master key\n> fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a\n> <tt>SIG</tt>, whereas SIG is the signature generated by using the\n> corresponding private key to sign the first two lines. Finally, the Signer\n> encrypts the entire record with ENCRYPTION_KEY.\n>\n> ===Round 2===\n>\n> ====Coordinator====\n>\n> * The Coordinator gathers key records from all participating Signers.\n> Abort the setup if TOKEN has expired.\n> * For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.\n> The Coordinator verifies that the included SIG is valid given the KEY.\n> * If all key records look good, the Coordinator generates a descriptor\n> record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all\n> in one line. The CHECKSUM has BECH32 encoding and is described at [\n> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].\n> The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.\n> * The Coordinator sends the encrypted descriptor record to all\n> participating Signers.\n>\n> ====Signer====\n>\n> * The Signer imports the descriptor record, decrypts it by prompting the\n> user for TOKEN.\n> * The Signer calculates and verifies the descriptor\u2019s CHECKSUM. Abort the\n> setup if the CHECKSUM is incorrect.\n> * The Signer checks whether one of the KEYs in the descriptor belongs to\n> it, using path and fingerprint information included in the descriptor. The\n> check must perform an exact match on the KEYs, and not using shortcuts such\n> as matching fingerprints (which is trivial to spoof). Abort the setup if it\n> doesn\u2019t detect its own KEY.\n> * For confirmation, the Signer must display to the user the descriptor's\n> CHECKSUM, plus other configurations, such as M and N. The total number of\n> Signers, N, is important to prevent a KEY insertion attack. All\n> participating Signers should be able to display the same confirmation.\n> * If all checks pass, the Signer persists the descriptor record in its\n> storage. The Signer should subsequently use the descriptor to generate and\n> verify receive and change addresses.\n>\n> This completes the setup.\n>\n> ==QR Codes==\n> For signers that use QR codes to transmit data, key and descriptor records\n> can be converted to QR codes, following [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n> the BCR standard].\n>\n> ==Security==\n>\n> This proposal introduce two layers of protection. The first one is a\n> temporary, secret token, used to encrypt the two rounds of communication\n> between the Signers and the Coordinator. The second one is through the\n> descriptor checksum and visual inspection of the descriptor itself.\n>\n> The token is only needed during the setup phase, and can be safely thrown\n> away afterwards. The token does not guarantee that the Signer membership\n> set is not modified, since that depends on the overall security of all\n> parties in the setup, but it can make it significantly harder for an\n> attacker to do so.\n>\n> There are three ways an attacker can modify the membership set: by\n> changing an existing member, by removing an existing member, or by adding a\n> new member.\n>\n> For the first two methods, one of the Signers will be able to detect that\n> its membership has been changed or removed, and reject the final\n> descriptor. Thus, it is vital that all participating Signers check that\n> their membership is intact in the descriptor. Even one Signer failing to\n> check for its membership means that the setup could be compromised.\n>\n> For the third type of attack, the descriptor checksum and visual\n> inspection of the descriptor itself are the only way to guard against\n> malicious members from being inserted into the set.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/52df63dc/attachment-0001.html>"
            },
            {
                "author": "Christopher Allen",
                "date": "2021-02-09T09:38:43",
                "message_text_only": "In the Airgapped Wallet Community we also have been investigating\nsolutions, in particular as current common practice is is reuse the same\nxpub for all multisigs, for instance [90081696/48'/0'/0'/2']\nxpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b\n\nWe\u2019ve also have been looking into multi round commitment scheme, but wanted\nto align the UX so that it would work like to musig for users. Discussion\non it is scattered, for instance\nhttps://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/16#discussioncomment-212013\n\nNothing got as far as your version though.\n\nSo Concept ACK from Blockchain Commons. Less clear on your specifics\nthough. We will review.\n\nNote that we are releasing a descriptor & multisig centric iOS and Android\nreference wallet soon so solving this correctly and having interoperability\nwith others is very important for our roadmap.\n\n\u2014 Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/25fbca00/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-09T09:45:48",
                "message_text_only": "Hi Craig,\nComments inline.\n\nOn Tue, Feb 9, 2021 at 1:17 AM Craig Raw <craigraw at gmail.com> wrote:\n\n> Hi Hugo,\n>\n> Thanks for raising this again - I'll note there has already been much\n> discussion on this topic. With respect to your \"two layers of protection\":\n>\n> > The Coordinator shares the TOKEN with all participating Signers over a\n> secure channel.\n>\n> What secure channel do you propose? Currently, with the default of a\n> software wallet coordinator talking to hardware wallets, we have USB, file\n> (microSD), and QR as communication channels. It's unclear to me why the\n> token and encryption process is necessary - in fact it's easier to verify\n> what is going on using clear text, and the majority of setups will be\n> locally done with the reasonable assumption of a secure environment. When\n> the setup is remote, it's simpler to just transmit the key information over\n> the secure channel which presumably already has encryption.\n>\n>\nIn short, a shared secret (the TOKEN) is needed because without it you\ncannot guarantee that the devices you are connecting to are legitimate\nmembers of the multisig wallet. Yes, the connection between the coordinator\nand each device could be secure - but a malicious actor can establish a\nsecure channel just as well as a good one. You are correct that this is\nless of an issue for local setups, but this is especially important for\ndistributed multisig - where you cannot physically see what's on the other\nside.\n\nI would love to remove the shared secret/encryption aspect out of the\nproposal, but so far I haven't found any way around this issue, aside from\nestablishing a shared secret prior to setting up the wallet...\n\nI also realized that supporting this could be a big ask for vendors, so\nI've made this part of the proposal optional.\n\nAnother note here is that right after I posted the proposal (classic...), I\nalso realized there could be another optimization: the secure session\nestablished by the shared secret can remain open indefinitely on the device\nside - until a different TOKEN is entered. That way the user needs to enter\nthe TOKEN only once, saving us one interaction.\n\n\n> > The second one is through the descriptor checksum and visual inspection\n> of the descriptor itself.\n>\n> This is a reasonable suggestion, although it's worth noting that support\n> for storing multisig setups on hardware wallets varies. Coldcard supports\n> this through importing of a proprietary .txt format file (which has been\n> adopted by a number of other vendors). Trezor and Ledger (AFAIK) do not\n> however store multisig setups, which could make this step confusing. With\n> that said, the use of an output descriptor is certainly a more standardised\n> approach, albeit one without the wallet name included. By the use of the\n> singular, I assume you mean a descriptor without the /0/* or /1/* suffix\n> (which I think is a good idea).\n>\n>\nI'm aware that Trezor and Ledger currently cannot support this. But IMHO\nlack of support on some devices shouldn't prevent us from setting a good\nstandard here. Cosigner registration on the device is crucial, as you don't\nhave to rely on everything being included in the PSBT (which also adds\nmental overhead as the user has to verify each and every transaction).\n\nYes, descriptor without the /0/* and /1/* - Thanks for clarifying. Will\nupdate the proposal.\n\n\n\n> WRT to QR codes, using the BCR UR2.0 standard you linked to is IMO the\n> right approach. I'll link directly to the two BCR UR2.0 formats here which\n> are relevant:\n>\n> 1. For sharing the sharing the BIP44 account information from the signers\n> to the coordinator, the crypto-account format: [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n> ]\n> 2. For sharing the output descriptor from the coordinator to the signers,\n> the crypto-output format: [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n> ]\n>\n>\nThanks, will update!\n\n\n> Craig\n>\n>\n>\n> On Tue, Feb 9, 2021 at 9:53 AM Hugo Nguyen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi all,\n>> I would like to propose a new BIP for Secure Multisig Setup.\n>> This proposal has taken inputs from folks at Coldcard, Shift Crypto and\n>> Cobo -- listed below as co-authors.\n>>\n>> This was inspired by my own experience working with hardware wallets on\n>> the market, as well as existing research into the challenges of multisig.\n>>\n>> Cheers,\n>> Hugo\n>>\n>> <pre>\n>>   BIP: To be determined\n>>   Layer: Applications\n>>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,\n>> Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,\n>> Rodolfo Novak <rodolfo at coinkite.com>\n>>   Comments-Summary: No comments yet.\n>>   Comments-URI:\n>>   Status: Proposed\n>>   Type: Standards Track\n>>   Created: 2020-11-10\n>>   License: BSD-2-Clause\n>> </pre>\n>>\n>> ==Introduction==\n>>\n>> ===Abstract===\n>>\n>> This document proposes a mechanism to set up multisig wallets securely.\n>>\n>> ===Copyright===\n>>\n>> This BIP is licensed under the 2-clause BSD license.\n>>\n>> ===Motivation===\n>>\n>> The Bitcoin multisig experience has been greatly streamlined under [\n>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n>> (Partially Signed Bitcoin Transaction)]. However, what is still missing is\n>> a standardized process for setting up multisig wallets securely across\n>> different vendors.\n>>\n>> There are a number of concerns when it comes to setting up a multisig\n>> wallet:\n>>\n>> # Whether the multisig configuration, such as Signer membership, script\n>> type, derivation paths and number of signatures required, is correct and\n>> not tampered with.\n>> # Whether Signer persists the multisig configuration in their respective\n>> storage, and under what format.\n>> # Whether Signer's storage is tamper-proof.\n>> # Whether Signer subsequently uses the multisig configuration to generate\n>> and verify receive and change addresses.\n>>\n>> An attacker who can modify the multisig configuration can steal or hold\n>> funds to ransom by duping the user into sending funds to the wrong address.\n>>\n>> This proposal seeks to address concerns #1 and #2: to mitigate the risk\n>> of tampering during the initial setup phase, and to define an interoperable\n>> multisig configuration format.\n>>\n>> Concerns #3 and #4 should be handled by Signers and is out of scope of\n>> this proposal.\n>>\n>> ==Specification==\n>>\n>> ===Prerequisites===\n>> This proposal assumes the parties in the multisig support [\n>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [\n>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\n>> descriptor language] and encryption.\n>>\n>> ==Roles==\n>> ===Coordinator===\n>>\n>> The Coordinator initiates the multisig setup. The Coordinator determines\n>> what type of multisig is used and how many members and signatures are\n>> needed. If encryption is enabled, the Coordinator generates a secret token,\n>> to be shared among the parties for secure communication. The Coordinator\n>> gathers information from the Signers to generate a descriptor record. The\n>> Coordinator distributes the descriptor record back to the Signers.\n>>\n>> ===Signer===\n>>\n>> The Signer is a participating member in the multisig. Its\n>> responsibilities include providing its XPUB to the Coordinator, verifying\n>> that its XPUB is included in the descriptor record and persisting the\n>> descriptor record in its storage.\n>>\n>> ==Setup Process==\n>>\n>> ===Round 1===\n>>\n>> ====Coordinator====\n>>\n>> * The Coordinator creates a multisig wallet creation session. The\n>> Coordinator determines the type of multisig script used and the signing\n>> configuration (<tt>M</tt> and <tt>N</tt>).\n>> * If encryption is enabled, the Coordinator also generates a secret\n>> token, hereby denoted <tt>TOKEN</tt>.\n>> * TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN\n>> should expire after some time period determined by the Coordinator, e.g.,\n>> 24 hours.\n>> * TOKEN acts as an encryption key among the parties. The method of\n>> encryption is AES, CTR mode. The encryption key can be calculated by\n>> performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =\n>> SHA256(SHA256(TOKEN))</tt>.\n>> * A TOKEN value of <tt>-1</tt> means that encryption is disabled and all\n>> the encryption/decryption steps below can be skipped.\n>> * The Coordinator shares the TOKEN with all participating Signers over a\n>> secure channel.\n>>\n>> ====Signer====\n>>\n>> * The Signer generates a key record by prompting the user for the TOKEN\n>> and a derivation path.\n>> * The first line in the record must be the <tt>TOKEN</tt>. If encryption\n>> is disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,\n>> whereas KEY is an XPUB. KEY must include key origin information and written\n>> in the descriptor-defined format, i.e.: <tt>[{master key\n>> fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a\n>> <tt>SIG</tt>, whereas SIG is the signature generated by using the\n>> corresponding private key to sign the first two lines. Finally, the Signer\n>> encrypts the entire record with ENCRYPTION_KEY.\n>>\n>> ===Round 2===\n>>\n>> ====Coordinator====\n>>\n>> * The Coordinator gathers key records from all participating Signers.\n>> Abort the setup if TOKEN has expired.\n>> * For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.\n>> The Coordinator verifies that the included SIG is valid given the KEY.\n>> * If all key records look good, the Coordinator generates a descriptor\n>> record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all\n>> in one line. The CHECKSUM has BECH32 encoding and is described at [\n>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].\n>> The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.\n>> * The Coordinator sends the encrypted descriptor record to all\n>> participating Signers.\n>>\n>> ====Signer====\n>>\n>> * The Signer imports the descriptor record, decrypts it by prompting the\n>> user for TOKEN.\n>> * The Signer calculates and verifies the descriptor\u2019s CHECKSUM. Abort the\n>> setup if the CHECKSUM is incorrect.\n>> * The Signer checks whether one of the KEYs in the descriptor belongs to\n>> it, using path and fingerprint information included in the descriptor. The\n>> check must perform an exact match on the KEYs, and not using shortcuts such\n>> as matching fingerprints (which is trivial to spoof). Abort the setup if it\n>> doesn\u2019t detect its own KEY.\n>> * For confirmation, the Signer must display to the user the descriptor's\n>> CHECKSUM, plus other configurations, such as M and N. The total number of\n>> Signers, N, is important to prevent a KEY insertion attack. All\n>> participating Signers should be able to display the same confirmation.\n>> * If all checks pass, the Signer persists the descriptor record in its\n>> storage. The Signer should subsequently use the descriptor to generate and\n>> verify receive and change addresses.\n>>\n>> This completes the setup.\n>>\n>> ==QR Codes==\n>> For signers that use QR codes to transmit data, key and descriptor\n>> records can be converted to QR codes, following [\n>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n>> the BCR standard].\n>>\n>> ==Security==\n>>\n>> This proposal introduce two layers of protection. The first one is a\n>> temporary, secret token, used to encrypt the two rounds of communication\n>> between the Signers and the Coordinator. The second one is through the\n>> descriptor checksum and visual inspection of the descriptor itself.\n>>\n>> The token is only needed during the setup phase, and can be safely thrown\n>> away afterwards. The token does not guarantee that the Signer membership\n>> set is not modified, since that depends on the overall security of all\n>> parties in the setup, but it can make it significantly harder for an\n>> attacker to do so.\n>>\n>> There are three ways an attacker can modify the membership set: by\n>> changing an existing member, by removing an existing member, or by adding a\n>> new member.\n>>\n>> For the first two methods, one of the Signers will be able to detect that\n>> its membership has been changed or removed, and reject the final\n>> descriptor. Thus, it is vital that all participating Signers check that\n>> their membership is intact in the descriptor. Even one Signer failing to\n>> check for its membership means that the setup could be compromised.\n>>\n>> For the third type of attack, the descriptor checksum and visual\n>> inspection of the descriptor itself are the only way to guard against\n>> malicious members from being inserted into the set.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/0796efc1/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-09T10:05:54",
                "message_text_only": "Hi Christopher,\nComments inline.\n\nOn Tue, Feb 9, 2021 at 1:31 AM Christopher Allen <\nChristopherA at lifewithalacrity.com> wrote:\n\n> In the Airgapped Wallet Community we also have been investigating\n> solutions, in particular as current common practice is is reuse the same\n> xpub for all multisigs, for instance [90081696/48'/0'/0'/2']\n> xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b\n>\n>\nI don't think reusing XPUBs inside different multisig wallets is a good\nidea... For starters, loss of privacy in one wallet will immediately affect\nprivacy of other wallets. I think multisig wallets should be completely\nfirewalled from each other. That means one unique XPUB per wallet. This is\nwhat we have been doing with the Nunchuk wallet.\n\n\n\n> We\u2019ve also have been looking into multi round commitment scheme, but\n> wanted to align the UX so that it would work like to musig for users.\n> Discussion on it is scattered, for instance\n>\n> https://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/16#discussioncomment-212013\n>\n> Nothing got as far as your version though.\n>\n> So Concept ACK from Blockchain Commons. Less clear on your specifics\n> though. We will review.\n>\n> Note that we are releasing a descriptor & multisig centric iOS and Android\n> reference wallet soon so solving this correctly and having interoperability\n> with others is very important for our roadmap.\n>\n\nThank you and good to know ! Look forward to solving this correctly as well.\n\nBest,\n\nHugo\n\n\n>\n> \u2014 Christopher Allen\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/6ae0ad8d/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-09T10:58:06",
                "message_text_only": "On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <\nChristopherA at lifewithalacrity.com> wrote:\n\n>\n>\n> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:\n>\n>>\n>> I don't think reusing XPUBs inside different multisig wallets is a good\n>> idea... For starters, loss of privacy in one wallet will immediately affect\n>> privacy of other wallets. I think multisig wallets should be completely\n>> firewalled from each other. That means one unique XPUB per wallet. This is\n>> what we have been doing with the Nunchuk wallet.\n>>\n>\n> To be clear, I have stated repeatedly that xpub reuse into multisig is a\n> poor practice. However, finding a trustless solution when a wallet is\n> airgapped with no network, or is stateless like Trezor, is quite hard.\n>\n> The challenge also includes how does an airgapped or stateless wallet know\n> that it is talking to the same process on the other side that that it gave\n> the xpub to in the first place. Without state to allow for a commitment, or\n> at least a TOFU, a cosigner who thought he was part of a 3 of 5 could\n> discover that he instead is in a 2 of 3, or in a script with an OR, as some\n> form of scam.\n>\n\nThe shared secret approach that I mentioned in the proposal actually can\nhelp you here. The TOKEN doubles as a session ID - thereby establishing a\ncommon state on both sides.\n\nBest,\nHugo\n\n\n>\n> \u2014 Christopher Allen\n>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/51b3281e/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2021-02-11T13:25:08",
                "message_text_only": "> ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n\nThis scheme might be vulnerable to rainbow table attack.\n\nThe following scheme might be more secure:\n\nDESCRIPTION = ASCII description provided by user\nNONCE = 256-bit random number\nENCRYPTION_KEY = hmac-sha256(key=NONCE, msg=DESCRIPTION)\n\nCoordinator distributes DESCRIPTION (fka TOKEN) together with NONCE to the\nsigners.\n\nAlso, is there any reason why you'd want to disable encryption? Why not\nkeep that as mandatory?\n\n\nOn Tue, 9 Feb 2021 at 12:39, Hugo Nguyen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <\n> ChristopherA at lifewithalacrity.com> wrote:\n>\n>>\n>>\n>> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:\n>>\n>>>\n>>> I don't think reusing XPUBs inside different multisig wallets is a good\n>>> idea... For starters, loss of privacy in one wallet will immediately affect\n>>> privacy of other wallets. I think multisig wallets should be completely\n>>> firewalled from each other. That means one unique XPUB per wallet. This is\n>>> what we have been doing with the Nunchuk wallet.\n>>>\n>>\n>> To be clear, I have stated repeatedly that xpub reuse into multisig is a\n>> poor practice. However, finding a trustless solution when a wallet is\n>> airgapped with no network, or is stateless like Trezor, is quite hard.\n>>\n>> The challenge also includes how does an airgapped or stateless wallet\n>> know that it is talking to the same process on the other side that that it\n>> gave the xpub to in the first place. Without state to allow for a\n>> commitment, or at least a TOFU, a cosigner who thought he was part of a 3\n>> of 5 could discover that he instead is in a 2 of 3, or in a script with an\n>> OR, as some form of scam.\n>>\n>\n> The shared secret approach that I mentioned in the proposal actually can\n> help you here. The TOKEN doubles as a session ID - thereby establishing a\n> common state on both sides.\n>\n> Best,\n> Hugo\n>\n>\n>>\n>> \u2014 Christopher Allen\n>>\n>>> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \nBest Regards / S pozdravom,\n\nPavol \"stick\" Rusnak\nCTO, SatoshiLabs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/9aae5cfa/attachment.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-11T13:45:33",
                "message_text_only": "Hi Pavol,\n\nOn Thu, Feb 11, 2021 at 5:25 AM Pavol Rusnak <stick at satoshilabs.com> wrote:\n\n> > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n>\n> This scheme might be vulnerable to rainbow table attack.\n>\n\nThank you for pointing this out! Incidentally, Dmitry Petukhov also told me\nthe same privately.\n\n\n>\n> The following scheme might be more secure:\n>\n> DESCRIPTION = ASCII description provided by user\n> NONCE = 256-bit random number\n> ENCRYPTION_KEY = hmac-sha256(key=NONCE, msg=DESCRIPTION)\n>\n> Coordinator distributes DESCRIPTION (fka TOKEN) together with NONCE to\n> the signers.\n>\n\nThis does seem to add a lot more entropy. The challenge is to balance the\nsecurity requirement with UX. In the absence of some handshake protocol to\nexchange the shared secrets (DESCRIPTION / NONCE) , the user will have to\nenter these manually on the devices. I'll think about this some more.\n\n\n>\n> Also, is there any reason why you'd want to disable encryption? Why not\n> keep that as mandatory?\n>\n\nMaking it mandatory would be nice, but IMHO not all use cases might require\nencryption. For example, if you are setting up the multisig locally under a\nsafe environment you control, encryption might be an overkill.\n\nBest,\nHugo\n\n\n\n>\n>\n> On Tue, 9 Feb 2021 at 12:39, Hugo Nguyen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <\n>> ChristopherA at lifewithalacrity.com> wrote:\n>>\n>>>\n>>>\n>>> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:\n>>>\n>>>>\n>>>> I don't think reusing XPUBs inside different multisig wallets is a good\n>>>> idea... For starters, loss of privacy in one wallet will immediately affect\n>>>> privacy of other wallets. I think multisig wallets should be completely\n>>>> firewalled from each other. That means one unique XPUB per wallet. This is\n>>>> what we have been doing with the Nunchuk wallet.\n>>>>\n>>>\n>>> To be clear, I have stated repeatedly that xpub reuse into multisig is a\n>>> poor practice. However, finding a trustless solution when a wallet is\n>>> airgapped with no network, or is stateless like Trezor, is quite hard.\n>>>\n>>> The challenge also includes how does an airgapped or stateless wallet\n>>> know that it is talking to the same process on the other side that that it\n>>> gave the xpub to in the first place. Without state to allow for a\n>>> commitment, or at least a TOFU, a cosigner who thought he was part of a 3\n>>> of 5 could discover that he instead is in a 2 of 3, or in a script with an\n>>> OR, as some form of scam.\n>>>\n>>\n>> The shared secret approach that I mentioned in the proposal actually can\n>> help you here. The TOKEN doubles as a session ID - thereby establishing a\n>> common state on both sides.\n>>\n>> Best,\n>> Hugo\n>>\n>>\n>>>\n>>> \u2014 Christopher Allen\n>>>\n>>>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol \"stick\" Rusnak\n> CTO, SatoshiLabs\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/2ab27396/attachment-0001.html>"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-11T16:29:10",
                "message_text_only": "\u0412 Thu, 11 Feb 2021 05:45:33 -0800\nHugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrote:\n\n> > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  \n> >\n> > This scheme might be vulnerable to rainbow table attack.\n> >  \n> \n> Thank you for pointing this out! Incidentally, Dmitry Petukhov also\n> told me the same privately.\n\nMy thought was that if TOKEN has the characteristics of a password\n(short ASCII string), then it would be better to use key derivation\nfunction designed for passwords, like PBKDF2.\n\nThe counter-argument to this is that this adds another code dependency\nfor vendors, if the device firmware does not already have the required\nkey derivation function.\n\nMaybe this could be solved by going into opposite direction - make the\n\"token\" even longer, use the mnemoic.\n\nThe issue is that entering long data of the shared key into the device\nmanually is difficult UX-wise.\n\nHww vendors that allow to enter custom keys into their device already\nhave to face this issue, and those who allow to enter custom keys via\nmnemonic probably tackled this somehow.\n\nMaybe the shared key for multisig setup can be entered in the same way\n? (with maybe additional visual check via some fingerprint).\n\nAlthough we would then have another issue of potential confusion\nbetween two procedures (entering the main key and entering the shared\nkey for multisig setup), and the measures has to be taken to prevent\nsuch confusion.\n\nThe approaches can be combined - specify a key derivation function\nsuitable for passwords; via secure channel, share a password and/or the\nderived key. If hww supports derivation function, it can derive the key\nfrom password. If hww supports only keys, the key can be entered raw or\nvia mnemonic."
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-11T19:11:11",
                "message_text_only": "Hi Pavol,\n\nOn Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> wrote:\n>\n> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n> > >\n> > > This scheme might be vulnerable to rainbow table attack.\n> > >\n> >\n> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also\n> > told me the same privately.\n>\n> My thought was that if TOKEN has the characteristics of a password\n> (short ASCII string), then it would be better to use key derivation\n> function designed for passwords, like PBKDF2.\n>\n> The counter-argument to this is that this adds another code dependency\n> for vendors, if the device firmware does not already have the required\n> key derivation function.\n>\n> Maybe this could be solved by going into opposite direction - make the\n> \"token\" even longer, use the mnemoic.\n>\n> The issue is that entering long data of the shared key into the device\n> manually is difficult UX-wise.\n>\n> Hww vendors that allow to enter custom keys into their device already\n> have to face this issue, and those who allow to enter custom keys via\n> mnemonic probably tackled this somehow.\n>\n> Maybe the shared key for multisig setup can be entered in the same way\n> ? (with maybe additional visual check via some fingerprint).\n>\n\nYou just gave me a great idea! We can reuse the BIP32 seed words list!\nPerhaps the encryption key can just be 6 words, but it'll be derived the\nsame way. BIP39 also uses PBKDF2 as a key derivation function, so it\nmatches with what you described here.\n\nAnd all HWW should have this functionality already.\n\nBest,\nHugo\n\n\n>\n> Although we would then have another issue of potential confusion\n> between two procedures (entering the main key and entering the shared\n> key for multisig setup), and the measures has to be taken to prevent\n> such confusion.\n>\n> The approaches can be combined - specify a key derivation function\n> suitable for passwords; via secure channel, share a password and/or the\n> derived key. If hww supports derivation function, it can derive the key\n> from password. If hww supports only keys, the key can be entered raw or\n> via mnemonic.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/ed0f8b95/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-11T19:11:45",
                "message_text_only": "*BIP39 seed words list.\n\nOn Thu, Feb 11, 2021 at 11:11 AM Hugo Nguyen <hugo at nunchuk.io> wrote:\n\n> Hi Pavol,\n>\n> On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n>> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>> wrote:\n>>\n>> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n>> > >\n>> > > This scheme might be vulnerable to rainbow table attack.\n>> > >\n>> >\n>> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also\n>> > told me the same privately.\n>>\n>> My thought was that if TOKEN has the characteristics of a password\n>> (short ASCII string), then it would be better to use key derivation\n>> function designed for passwords, like PBKDF2.\n>>\n>> The counter-argument to this is that this adds another code dependency\n>> for vendors, if the device firmware does not already have the required\n>> key derivation function.\n>>\n>> Maybe this could be solved by going into opposite direction - make the\n>> \"token\" even longer, use the mnemoic.\n>>\n>> The issue is that entering long data of the shared key into the device\n>> manually is difficult UX-wise.\n>>\n>> Hww vendors that allow to enter custom keys into their device already\n>> have to face this issue, and those who allow to enter custom keys via\n>> mnemonic probably tackled this somehow.\n>>\n>> Maybe the shared key for multisig setup can be entered in the same way\n>> ? (with maybe additional visual check via some fingerprint).\n>>\n>\n> You just gave me a great idea! We can reuse the BIP32 seed words list!\n> Perhaps the encryption key can just be 6 words, but it'll be derived the\n> same way. BIP39 also uses PBKDF2 as a key derivation function, so it\n> matches with what you described here.\n>\n> And all HWW should have this functionality already.\n>\n> Best,\n> Hugo\n>\n>\n>>\n>> Although we would then have another issue of potential confusion\n>> between two procedures (entering the main key and entering the shared\n>> key for multisig setup), and the measures has to be taken to prevent\n>> such confusion.\n>>\n>> The approaches can be combined - specify a key derivation function\n>> suitable for passwords; via secure channel, share a password and/or the\n>> derived key. If hww supports derivation function, it can derive the key\n>> from password. If hww supports only keys, the key can be entered raw or\n>> via mnemonic.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/a7915106/attachment-0001.html>"
            },
            {
                "author": "Christopher Allen",
                "date": "2021-02-11T22:29:46",
                "message_text_only": "I think the key issue here is avoiding xpub key reuse in multisig. Not only\nin the future with Schnorr, but we need it today!\n\nCurrent common practice by hardware wallets is the 48'/0'/0'/2' derivation\nfor segwit multsig ( e.g.\n[90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b\n) is the only one used for ALL multisigs offered by that hardware wallet.\n\nAs Pieter said, leveraging a HD path parameters can help, but we need a\nbetter, less reusable path for the index.\n\nI personally suggest a simpler solution, which is to create an index using\na PBKDF of the Account Policy (a descriptor with all xpubs and keys\nremoved), plus optional notes. (BTW, I think double sha256 or HMAC is\noverkill).\n\nExample: for the reference bit descriptor that might result in:\n\n```\nwsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))\n```\n\nWhat Blockchain Commons (and the Airgapped Wallet Community) call a policy\nmap would be\n\n```\nwsh(sortedmulti(1,,,))\n```\n\nA PBKDF of that as would be unique for all 2 of 3 segwig transactions. With\nthe addition of the addition of the Policy Map creators optional note, it\nwould be truly unique. The Policy Map and/or PBKDF are small and could\neasily added to existing APIs.\n\nSo for legacy hardware, we can use existing 48' subtree, but 3' as the\nformat for this form (2' is segwit), then the desktop can just ask for the\n/48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.\nMore sophisticated Airgapped apps you can send\n\"wsh(sortedmulti(1,,,))\"+label and let the cosigner app do the PBKDF, and\noptionally allow it return something different in a full keyset (i.e.\n\"[90081696/48'/0'/0'/3'/af3948cg\u2026'/]xpub6DYLEk\u2026\", and then the requesting\napp, knowing that it is different from the PBKDF can know what to do if it\nneeds to what to ask for in the future.\n\nThe other advantage of this technique is that the cosigner app can know\nwhat policy it is participating in, before the descriptor is completed. It\nmay decide it doesn't want to participate in some funky 4:9 with a weird\nscript, and not return an xpub at all.\n\nLong term I think a commitment scheme should be used, so that you don't\nreveal what xpub you offered until all the parties xpubs are shared, but as\nPieter said, we can do that at the same time we do the musig. But we need\nto prevent xpub reuse NOW, and I think my proposal easy and could the job.\n\n-- Christopher Allen, Blockchain Commons\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/30d4ab91/attachment.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-12T12:31:24",
                "message_text_only": "On Thu, Feb 11, 2021 at 3:05 PM Christopher Allen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> What Blockchain Commons (and the Airgapped Wallet Community) call a policy\n> map would be\n>\n> ```\n> wsh(sortedmulti(1,,,))\n> ```\n>\n> A PBKDF of that as would be unique for all 2 of 3 segwig transactions.\n> With the addition of the addition of the Policy Map creators optional note,\n> it would be truly unique. The Policy Map and/or PBKDF are small and could\n> easily added to existing APIs.\n>\n> So for legacy hardware, we can use existing 48' subtree, but 3' as the\n> format for this form (2' is segwit), then the desktop can just ask for the\n> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.\n> More sophisticated Airgapped apps you can send\n> \"wsh(sortedmulti(1,,,))\"+label and let the cosigner app do the PBKDF, and\n> optionally allow it return something different in a full keyset (i.e.\n> \"[90081696/48'/0'/0'/3'/af3948cg\u2026'/]xpub6DYLEk\u2026\", and then the requesting\n> app, knowing that it is different from the PBKDF can know what to do if it\n> needs to what to ask for in the future.\n>\n\nThanks Christopher, very interesting ideas... A couple of thoughts:\n1/ Generating the path index using the policy is clever. However, I think\nit has 2 problems. Number #1 is with the above scheme now you have a hard\ndependency on (policy map + note) - losing (policy map + note) means that\nyou will lose access to PBKDF', and hence the funds permanently. At least\nwith the current soluttions, you can look up what the most common\nderivation paths and indices are to recover funds in the worst case.\n2/ Number #2 is that this wouldn't necessarily prevent XPUB reuse. It seems\nlike the above scheme depends on (a) the Coordinator keeping track\naccurately of all the existing PBKDF-ed indices and (b) the Signer\ntruthfully gives the XPUB at the path that the Coordinator asks for. In\nreality, neither of these conditions can be guaranteed. For example, the\nSigner could lie about the XPUB at /48'/0'/0'/3'/PBKDF' when it just keeps\nreusing the XPUB at /48'/0'/0'/2'\n3/ Preventing XPUB reuse is an interesting problem, but IMHO it is beyond\nthe scope of the current proposal. Maybe worth a separate BIP?\n\nBest,\nHugo\n\n\n\nOn Thu, Feb 11, 2021 at 3:05 PM Christopher Allen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think the key issue here is avoiding xpub key reuse in multisig. Not\n> only in the future with Schnorr, but we need it today!\n>\n> Current common practice by hardware wallets is the 48'/0'/0'/2' derivation\n> for segwit multsig ( e.g.\n> [90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b\n> ) is the only one used for ALL multisigs offered by that hardware wallet.\n>\n> As Pieter said, leveraging a HD path parameters can help, but we need a\n> better, less reusable path for the index.\n>\n> I personally suggest a simpler solution, which is to create an index using\n> a PBKDF of the Account Policy (a descriptor with all xpubs and keys\n> removed), plus optional notes. (BTW, I think double sha256 or HMAC is\n> overkill).\n>\n> Example: for the reference bit descriptor that might result in:\n>\n> ```\n>\n> wsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))\n> ```\n>\n> What Blockchain Commons (and the Airgapped Wallet Community) call a policy\n> map would be\n>\n> ```\n> wsh(sortedmulti(1,,,))\n> ```\n>\n> A PBKDF of that as would be unique for all 2 of 3 segwig transactions.\n> With the addition of the addition of the Policy Map creators optional note,\n> it would be truly unique. The Policy Map and/or PBKDF are small and could\n> easily added to existing APIs.\n>\n> So for legacy hardware, we can use existing 48' subtree, but 3' as the\n> format for this form (2' is segwit), then the desktop can just ask for the\n> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.\n> More sophisticated Airgapped apps you can send\n> \"wsh(sortedmulti(1,,,))\"+label and let the cosigner app do the PBKDF, and\n> optionally allow it return something different in a full keyset (i.e.\n> \"[90081696/48'/0'/0'/3'/af3948cg\u2026'/]xpub6DYLEk\u2026\", and then the requesting\n> app, knowing that it is different from the PBKDF can know what to do if it\n> needs to what to ask for in the future.\n>\n> The other advantage of this technique is that the cosigner app can know\n> what policy it is participating in, before the descriptor is completed. It\n> may decide it doesn't want to participate in some funky 4:9 with a weird\n> script, and not return an xpub at all.\n>\n> Long term I think a commitment scheme should be used, so that you don't\n> reveal what xpub you offered until all the parties xpubs are shared, but as\n> Pieter said, we can do that at the same time we do the musig. But we need\n> to prevent xpub reuse NOW, and I think my proposal easy and could the job.\n>\n> -- Christopher Allen, Blockchain Commons\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/bfb1f588/attachment.html>"
            },
            {
                "author": "Peter D. Gray",
                "date": "2021-02-12T13:48:16",
                "message_text_only": "Hard no to this idea:\n\nOn Thu, Feb 11, 2021 at 02:29:46PM -0800, Christopher Allen proposed:\n...\n> /48'/0'/0'/3'/PBKDF(complex string)'\n\nAs someone who has helped people find UTXO at key paths they didn't\nknow/want, this is a terrible idea. Key derivation paths should be\nsmall, sequential integers, so they can be searched in reasonable time.\n\nOf course when things are working it doesn't matter, but the stakes\ncan be very high when they stop working.\n\nThis is true for multisig and single signer.\n\n---\nPeter D. Gray  ||  Founder, Coinkite  ||  Twitter: @dochex  ||  GPG: A3A31BAD 5A2A5B10\n\nOn Thu, Feb 11, 2021 at 02:29:46PM -0800, Christopher Allen wrote:\n> I think the key issue here is avoiding xpub key reuse in multisig. Not only\n> in the future with Schnorr, but we need it today!\n> \n> Current common practice by hardware wallets is the 48'/0'/0'/2' derivation\n> for segwit multsig ( e.g.\n> [90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b\n> ) is the only one used for ALL multisigs offered by that hardware wallet.\n> \n> As Pieter said, leveraging a HD path parameters can help, but we need a\n> better, less reusable path for the index.\n> \n> I personally suggest a simpler solution, which is to create an index using\n> a PBKDF of the Account Policy (a descriptor with all xpubs and keys\n> removed), plus optional notes. (BTW, I think double sha256 or HMAC is\n> overkill).\n> \n> Example: for the reference bit descriptor that might result in:\n> \n> ```\n> wsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))\n> ```\n> \n> What Blockchain Commons (and the Airgapped Wallet Community) call a policy\n> map would be\n> \n> ```\n> wsh(sortedmulti(1,,,))\n> ```\n> \n> A PBKDF of that as would be unique for all 2 of 3 segwig transactions. With\n> the addition of the addition of the Policy Map creators optional note, it\n> would be truly unique. The Policy Map and/or PBKDF are small and could\n> easily added to existing APIs.\n> \n> So for legacy hardware, we can use existing 48' subtree, but 3' as the\n> format for this form (2' is segwit), then the desktop can just ask for the\n> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.\n> More sophisticated Airgapped apps you can send\n> \"wsh(sortedmulti(1,,,))\"+label and let the cosigner app do the PBKDF, and\n> optionally allow it return something different in a full keyset (i.e.\n> \"[90081696/48'/0'/0'/3'/af3948cg\u2026'/]xpub6DYLEk\u2026\", and then the requesting\n> app, knowing that it is different from the PBKDF can know what to do if it\n> needs to what to ask for in the future.\n> \n> The other advantage of this technique is that the cosigner app can know\n> what policy it is participating in, before the descriptor is completed. It\n> may decide it doesn't want to participate in some funky 4:9 with a weird\n> script, and not return an xpub at all.\n> \n> Long term I think a commitment scheme should be used, so that you don't\n> reveal what xpub you offered until all the parties xpubs are shared, but as\n> Pieter said, we can do that at the same time we do the musig. But we need\n> to prevent xpub reuse NOW, and I think my proposal easy and could the job.\n> \n> -- Christopher Allen, Blockchain Commons\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/cce516d7/attachment-0001.sig>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-12T16:55:55",
                "message_text_only": "Thanks everyone who has provided inputs so far!\n\nThis is the new proposal for the encryption aspect of the scheme, based on\nall the feedback.\n\nThe key derivation function would be PBKDF2, with PRF = SHA512. This should\nbe readily available on today's hardware already, as they are used for\nBIP39.\n\nDK = PBKDF2(PRF, Password, Salt, c, dkLen)\nPRF = SHA512\nPwd = HUMAN_READABLE_TITLE\nSalt = NONCE\nc = 2048\ndkLen = 256\n\nHUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum length\n= 20.\nNONCE is a 64-bit number.\n\nReason for going with SHA512 is due to legacy support on some hardware.\nc=2048 also mimics BIP39. It takes about ~3 seconds to derive\nthe encryption key on a 80Mhz MCU. We feel like this is a good enough\ntradeoff for this use case. The assumption here is that the secure session\nis only needed temporarily for a few hours, maybe up to one day.\n\nThe Coordinator and Signers agree and exchange these 2 secrets prior to the\nsetup. The NONCE can be converted to either:\n(a) a 6-word phrase using BIP39 wordlist\n(b) a 20-digit decimal number\n(c) a QR code\n\nDepending on the vendor. This flexibility in the data format allows each\nvendor to customize the UX based on their respective device capabilities.\n\nBest,\nHugo\n\nOn Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> wrote:\n>\n> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n> > >\n> > > This scheme might be vulnerable to rainbow table attack.\n> > >\n> >\n> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also\n> > told me the same privately.\n>\n> My thought was that if TOKEN has the characteristics of a password\n> (short ASCII string), then it would be better to use key derivation\n> function designed for passwords, like PBKDF2.\n>\n> The counter-argument to this is that this adds another code dependency\n> for vendors, if the device firmware does not already have the required\n> key derivation function.\n>\n> Maybe this could be solved by going into opposite direction - make the\n> \"token\" even longer, use the mnemoic.\n>\n> The issue is that entering long data of the shared key into the device\n> manually is difficult UX-wise.\n>\n> Hww vendors that allow to enter custom keys into their device already\n> have to face this issue, and those who allow to enter custom keys via\n> mnemonic probably tackled this somehow.\n>\n> Maybe the shared key for multisig setup can be entered in the same way\n> ? (with maybe additional visual check via some fingerprint).\n>\n> Although we would then have another issue of potential confusion\n> between two procedures (entering the main key and entering the shared\n> key for multisig setup), and the measures has to be taken to prevent\n> such confusion.\n>\n> The approaches can be combined - specify a key derivation function\n> suitable for passwords; via secure channel, share a password and/or the\n> derived key. If hww supports derivation function, it can derive the key\n> from password. If hww supports only keys, the key can be entered raw or\n> via mnemonic.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/cb8584f3/attachment-0001.html>"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-12T17:42:31",
                "message_text_only": "If HUMAN_READABLE_TITLE is the additional secret, the user would need\nto enter it on the device in addition to the nonce, wouldn't it defeat\nthe advantage in UX that was gained by using (relatively) short nonce ?\n\nIs 64 bit nonce not enough ?\n\nIt seems that to crack this with fixed Pwd and 64 bit nonce, the\nattacker will need to be about 10^15 more powerful than 80Mhz MCU:\n(2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is realistic\nscale. Average desktop cpu seems to be about 10^3 more powerful than\nthe mentioned MCU for this task.\n\nMaybe for the UX it would be better to choose the number of rounds to\nuse in PBKDF2, instead of using variable Pwd. Number of rounds will be\neasier to enter on the device (or just choose it from a set of\npre-defined values). The more money is at stake, the higher number of\nrounds could the coordinator choose (taking into account the\ncharacteristics of the participant devices)\n\n\u0412 Fri, 12 Feb 2021 08:55:55 -0800\nHugo Nguyen <hugo at nunchuk.io> wrote:\n\n> Thanks everyone who has provided inputs so far!\n> \n> This is the new proposal for the encryption aspect of the scheme,\n> based on all the feedback.\n> \n> The key derivation function would be PBKDF2, with PRF = SHA512. This\n> should be readily available on today's hardware already, as they are\n> used for BIP39.\n> \n> DK = PBKDF2(PRF, Password, Salt, c, dkLen)\n> PRF = SHA512\n> Pwd = HUMAN_READABLE_TITLE\n> Salt = NONCE\n> c = 2048\n> dkLen = 256\n> \n> HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum\n> length = 20.\n> NONCE is a 64-bit number.\n> \n> Reason for going with SHA512 is due to legacy support on some\n> hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to\n> derive the encryption key on a 80Mhz MCU. We feel like this is a good\n> enough tradeoff for this use case. The assumption here is that the\n> secure session is only needed temporarily for a few hours, maybe up\n> to one day.\n> \n> The Coordinator and Signers agree and exchange these 2 secrets prior\n> to the setup. The NONCE can be converted to either:\n> (a) a 6-word phrase using BIP39 wordlist\n> (b) a 20-digit decimal number\n> (c) a QR code\n> \n> Depending on the vendor. This flexibility in the data format allows\n> each vendor to customize the UX based on their respective device\n> capabilities.\n> \n> Best,\n> Hugo\n> \n> On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> > Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> > wrote:\n> >  \n> > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  \n> > > >\n> > > > This scheme might be vulnerable to rainbow table attack.\n> > > >  \n> > >\n> > > Thank you for pointing this out! Incidentally, Dmitry Petukhov\n> > > also told me the same privately.  \n> >\n> > My thought was that if TOKEN has the characteristics of a password\n> > (short ASCII string), then it would be better to use key derivation\n> > function designed for passwords, like PBKDF2.\n> >\n> > The counter-argument to this is that this adds another code\n> > dependency for vendors, if the device firmware does not already\n> > have the required key derivation function.\n> >\n> > Maybe this could be solved by going into opposite direction - make\n> > the \"token\" even longer, use the mnemoic.\n> >\n> > The issue is that entering long data of the shared key into the\n> > device manually is difficult UX-wise.\n> >\n> > Hww vendors that allow to enter custom keys into their device\n> > already have to face this issue, and those who allow to enter\n> > custom keys via mnemonic probably tackled this somehow.\n> >\n> > Maybe the shared key for multisig setup can be entered in the same\n> > way ? (with maybe additional visual check via some fingerprint).\n> >\n> > Although we would then have another issue of potential confusion\n> > between two procedures (entering the main key and entering the\n> > shared key for multisig setup), and the measures has to be taken to\n> > prevent such confusion.\n> >\n> > The approaches can be combined - specify a key derivation function\n> > suitable for passwords; via secure channel, share a password and/or\n> > the derived key. If hww supports derivation function, it can derive\n> > the key from password. If hww supports only keys, the key can be\n> > entered raw or via mnemonic.\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-12T17:48:09",
                "message_text_only": "\u0412 Fri, 12 Feb 2021 18:42:31 +0100\nDmitry Petukhov <dp at simplexum.com> wrote:\n\n> Maybe for the UX it would be better to choose the number of rounds to\n> use in PBKDF2, instead of using variable Pwd. Number of rounds will be\n> easier to enter on the device (or just choose it from a set of\n> pre-defined values). The more money is at stake, the higher number of\n> rounds could the coordinator choose (taking into account the\n> characteristics of the participant devices)\n\nOr simply allow bigger entropy (more than 6 mnemonic words), if\nthe coordinator feels that 64 bit of entropy is not enough."
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-12T17:54:57",
                "message_text_only": "On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com> wrote:\n\n> If HUMAN_READABLE_TITLE is the additional secret, the user would need\n> to enter it on the device in addition to the nonce, wouldn't it defeat\n> the advantage in UX that was gained by using (relatively) short nonce ?\n>\n> Is 64 bit nonce not enough ?\n>\n>\nGood question. If we don't need the extra entropy, we can fix\nthe HUMAN_READABLE_TITLE string.\n\nSomething like \"No SPOF\". (No Single Point Of Failure).\n\n\n\n> It seems that to crack this with fixed Pwd and 64 bit nonce, the\n> attacker will need to be about 10^15 more powerful than 80Mhz MCU:\n> (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is realistic\n> scale. Average desktop cpu seems to be about 10^3 more powerful than\n> the mentioned MCU for this task.\n>\n> Maybe for the UX it would be better to choose the number of rounds to\n> use in PBKDF2, instead of using variable Pwd. Number of rounds will be\n> easier to enter on the device (or just choose it from a set of\n> pre-defined values). The more money is at stake, the higher number of\n> rounds could the coordinator choose (taking into account the\n> characteristics of the participant devices)\n>\n\n> Or simply allow bigger entropy (more than 6 mnemonic words), if\n> the coordinator feels that 64 bit of entropy is not enough.\n\n\nThat could work. Allowing variable iteration count is probably better\nUX-wise.\n\nBest,\nHugo\n\n\n>\n> \u0412 Fri, 12 Feb 2021 08:55:55 -0800\n> Hugo Nguyen <hugo at nunchuk.io> wrote:\n>\n> > Thanks everyone who has provided inputs so far!\n> >\n> > This is the new proposal for the encryption aspect of the scheme,\n> > based on all the feedback.\n> >\n> > The key derivation function would be PBKDF2, with PRF = SHA512. This\n> > should be readily available on today's hardware already, as they are\n> > used for BIP39.\n> >\n> > DK = PBKDF2(PRF, Password, Salt, c, dkLen)\n> > PRF = SHA512\n> > Pwd = HUMAN_READABLE_TITLE\n> > Salt = NONCE\n> > c = 2048\n> > dkLen = 256\n> >\n> > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum\n> > length = 20.\n> > NONCE is a 64-bit number.\n> >\n> > Reason for going with SHA512 is due to legacy support on some\n> > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to\n> > derive the encryption key on a 80Mhz MCU. We feel like this is a good\n> > enough tradeoff for this use case. The assumption here is that the\n> > secure session is only needed temporarily for a few hours, maybe up\n> > to one day.\n> >\n> > The Coordinator and Signers agree and exchange these 2 secrets prior\n> > to the setup. The NONCE can be converted to either:\n> > (a) a 6-word phrase using BIP39 wordlist\n> > (b) a 20-digit decimal number\n> > (c) a QR code\n> >\n> > Depending on the vendor. This flexibility in the data format allows\n> > each vendor to customize the UX based on their respective device\n> > capabilities.\n> >\n> > Best,\n> > Hugo\n> >\n> > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\n> > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > > \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> > > Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> > > wrote:\n> > >\n> > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))\n> > > > >\n> > > > > This scheme might be vulnerable to rainbow table attack.\n> > > > >\n> > > >\n> > > > Thank you for pointing this out! Incidentally, Dmitry Petukhov\n> > > > also told me the same privately.\n> > >\n> > > My thought was that if TOKEN has the characteristics of a password\n> > > (short ASCII string), then it would be better to use key derivation\n> > > function designed for passwords, like PBKDF2.\n> > >\n> > > The counter-argument to this is that this adds another code\n> > > dependency for vendors, if the device firmware does not already\n> > > have the required key derivation function.\n> > >\n> > > Maybe this could be solved by going into opposite direction - make\n> > > the \"token\" even longer, use the mnemoic.\n> > >\n> > > The issue is that entering long data of the shared key into the\n> > > device manually is difficult UX-wise.\n> > >\n> > > Hww vendors that allow to enter custom keys into their device\n> > > already have to face this issue, and those who allow to enter\n> > > custom keys via mnemonic probably tackled this somehow.\n> > >\n> > > Maybe the shared key for multisig setup can be entered in the same\n> > > way ? (with maybe additional visual check via some fingerprint).\n> > >\n> > > Although we would then have another issue of potential confusion\n> > > between two procedures (entering the main key and entering the\n> > > shared key for multisig setup), and the measures has to be taken to\n> > > prevent such confusion.\n> > >\n> > > The approaches can be combined - specify a key derivation function\n> > > suitable for passwords; via secure channel, share a password and/or\n> > > the derived key. If hww supports derivation function, it can derive\n> > > the key from password. If hww supports only keys, the key can be\n> > > entered raw or via mnemonic.\n> > > _______________________________________________\n> > > bitcoin-dev mailing list\n> > > bitcoin-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/0c8f1ab1/attachment-0001.html>"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-14T10:37:52",
                "message_text_only": "I think that it is better to issue individual TOKEN for each\nparticipant. Otherwise it will be possible for one participant to\nattack another (intercept and replace their xpub sent to the\ncoordinator).\n\nIt will also be convenient to have a public 'participant id', derived\nfrom the token. It can be derived from the same token, but with\ndifferent (but fixed) `Pwd`. With unique token per participant, such\nderivation will uniquely identify each participant, so the coordinator\nwon't need to try all the tokens to decrypt the data.\n\nIt will also be easier to deal with more elaborate setups where the\nposition of the xpub in the descriptor does matter - for example, with\nminiscript-extended descriptors. With a descriptor template such as\n\n`wsh(or(multi(2, <Alice>, <Bob>, <Carol>), older(1000, <Dylan>))`\n\nThe coordinator will be able to store the map between the participant\nlabels (Alice, Bob, Carol, Dylan) and their participant ids (and the\nTOKENs). When the data from Alice comes with participant id attached,\nthe coordinator will immediately know which TOKEN to use, and which\nplace in the descriptor the xpub should be put in.\n\nOf course this is all possible without 'participant id' derived from\ntoken, as long as there's unique TOKEN per participant - the coordinator\ncan always try all the tokens to decrypt the data from participant. But\nimplementors will likely invent their own ways to introduce\n'participant id' anyway, as this is more convenient, and it might make\nsense to have this standardized, for interoperability. \n\n\u0412 Fri, 12 Feb 2021 09:54:57 -0800\nHugo Nguyen <hugo at nunchuk.io> wrote:\n\n> On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com>\n> wrote:\n> \n> > If HUMAN_READABLE_TITLE is the additional secret, the user would\n> > need to enter it on the device in addition to the nonce, wouldn't\n> > it defeat the advantage in UX that was gained by using (relatively)\n> > short nonce ?\n> >\n> > Is 64 bit nonce not enough ?\n> >\n> >  \n> Good question. If we don't need the extra entropy, we can fix\n> the HUMAN_READABLE_TITLE string.\n> \n> Something like \"No SPOF\". (No Single Point Of Failure).\n> \n> \n> \n> > It seems that to crack this with fixed Pwd and 64 bit nonce, the\n> > attacker will need to be about 10^15 more powerful than 80Mhz MCU:\n> > (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is\n> > realistic scale. Average desktop cpu seems to be about 10^3 more\n> > powerful than the mentioned MCU for this task.\n> >\n> > Maybe for the UX it would be better to choose the number of rounds\n> > to use in PBKDF2, instead of using variable Pwd. Number of rounds\n> > will be easier to enter on the device (or just choose it from a set\n> > of pre-defined values). The more money is at stake, the higher\n> > number of rounds could the coordinator choose (taking into account\n> > the characteristics of the participant devices)\n> >  \n> \n> > Or simply allow bigger entropy (more than 6 mnemonic words), if\n> > the coordinator feels that 64 bit of entropy is not enough.  \n> \n> \n> That could work. Allowing variable iteration count is probably better\n> UX-wise.\n> \n> Best,\n> Hugo\n> \n> \n> >\n> > \u0412 Fri, 12 Feb 2021 08:55:55 -0800\n> > Hugo Nguyen <hugo at nunchuk.io> wrote:\n> >  \n> > > Thanks everyone who has provided inputs so far!\n> > >\n> > > This is the new proposal for the encryption aspect of the scheme,\n> > > based on all the feedback.\n> > >\n> > > The key derivation function would be PBKDF2, with PRF = SHA512.\n> > > This should be readily available on today's hardware already, as\n> > > they are used for BIP39.\n> > >\n> > > DK = PBKDF2(PRF, Password, Salt, c, dkLen)\n> > > PRF = SHA512\n> > > Pwd = HUMAN_READABLE_TITLE\n> > > Salt = NONCE\n> > > c = 2048\n> > > dkLen = 256\n> > >\n> > > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8,\n> > > maximum length = 20.\n> > > NONCE is a 64-bit number.\n> > >\n> > > Reason for going with SHA512 is due to legacy support on some\n> > > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to\n> > > derive the encryption key on a 80Mhz MCU. We feel like this is a\n> > > good enough tradeoff for this use case. The assumption here is\n> > > that the secure session is only needed temporarily for a few\n> > > hours, maybe up to one day.\n> > >\n> > > The Coordinator and Signers agree and exchange these 2 secrets\n> > > prior to the setup. The NONCE can be converted to either:\n> > > (a) a 6-word phrase using BIP39 wordlist\n> > > (b) a 20-digit decimal number\n> > > (c) a QR code\n> > >\n> > > Depending on the vendor. This flexibility in the data format\n> > > allows each vendor to customize the UX based on their respective\n> > > device capabilities.\n> > >\n> > > Best,\n> > > Hugo\n> > >\n> > > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <\n> > > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >  \n> > > > \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> > > > Hugo Nguyen via bitcoin-dev\n> > > > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > > >  \n> > > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  \n> > > > > >\n> > > > > > This scheme might be vulnerable to rainbow table attack.\n> > > > > >  \n> > > > >\n> > > > > Thank you for pointing this out! Incidentally, Dmitry Petukhov\n> > > > > also told me the same privately.  \n> > > >\n> > > > My thought was that if TOKEN has the characteristics of a\n> > > > password (short ASCII string), then it would be better to use\n> > > > key derivation function designed for passwords, like PBKDF2.\n> > > >\n> > > > The counter-argument to this is that this adds another code\n> > > > dependency for vendors, if the device firmware does not already\n> > > > have the required key derivation function.\n> > > >\n> > > > Maybe this could be solved by going into opposite direction -\n> > > > make the \"token\" even longer, use the mnemoic.\n> > > >\n> > > > The issue is that entering long data of the shared key into the\n> > > > device manually is difficult UX-wise.\n> > > >\n> > > > Hww vendors that allow to enter custom keys into their device\n> > > > already have to face this issue, and those who allow to enter\n> > > > custom keys via mnemonic probably tackled this somehow.\n> > > >\n> > > > Maybe the shared key for multisig setup can be entered in the\n> > > > same way ? (with maybe additional visual check via some\n> > > > fingerprint).\n> > > >\n> > > > Although we would then have another issue of potential confusion\n> > > > between two procedures (entering the main key and entering the\n> > > > shared key for multisig setup), and the measures has to be\n> > > > taken to prevent such confusion.\n> > > >\n> > > > The approaches can be combined - specify a key derivation\n> > > > function suitable for passwords; via secure channel, share a\n> > > > password and/or the derived key. If hww supports derivation\n> > > > function, it can derive the key from password. If hww supports\n> > > > only keys, the key can be entered raw or via mnemonic.\n> > > > _______________________________________________\n> > > > bitcoin-dev mailing list\n> > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > >  \n> >\n> >"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2021-02-14T11:28:58",
                "message_text_only": "After off-list discussion with Hugo, I'm convinced that\nadding a requirement for signers to derive participant ids is\nunnecessary complication that only buys slight convenience for\ncoordinator, and this is not a net positive tradeoff.\n\nAnd since the coordinator can choose to generate unique TOKEN per\nparticipant without participants even knowing about this, there's\nprobably no reason to mention this possibility in the spec, either.\n\n\u0412 Sun, 14 Feb 2021 11:37:52 +0100\nDmitry Petukhov <dp at simplexum.com> wrote:\n\n> I think that it is better to issue individual TOKEN for each\n> participant. Otherwise it will be possible for one participant to\n> attack another (intercept and replace their xpub sent to the\n> coordinator).\n> \n> It will also be convenient to have a public 'participant id', derived\n> from the token. It can be derived from the same token, but with\n> different (but fixed) `Pwd`. With unique token per participant, such\n> derivation will uniquely identify each participant, so the coordinator\n> won't need to try all the tokens to decrypt the data.\n> \n> It will also be easier to deal with more elaborate setups where the\n> position of the xpub in the descriptor does matter - for example, with\n> miniscript-extended descriptors. With a descriptor template such as\n> \n> `wsh(or(multi(2, <Alice>, <Bob>, <Carol>), older(1000, <Dylan>))`\n> \n> The coordinator will be able to store the map between the participant\n> labels (Alice, Bob, Carol, Dylan) and their participant ids (and the\n> TOKENs). When the data from Alice comes with participant id attached,\n> the coordinator will immediately know which TOKEN to use, and which\n> place in the descriptor the xpub should be put in.\n> \n> Of course this is all possible without 'participant id' derived from\n> token, as long as there's unique TOKEN per participant - the\n> coordinator can always try all the tokens to decrypt the data from\n> participant. But implementors will likely invent their own ways to\n> introduce 'participant id' anyway, as this is more convenient, and it\n> might make sense to have this standardized, for interoperability. \n> \n> \u0412 Fri, 12 Feb 2021 09:54:57 -0800\n> Hugo Nguyen <hugo at nunchuk.io> wrote:\n> \n> > On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com>\n> > wrote:\n> >   \n> > > If HUMAN_READABLE_TITLE is the additional secret, the user would\n> > > need to enter it on the device in addition to the nonce, wouldn't\n> > > it defeat the advantage in UX that was gained by using\n> > > (relatively) short nonce ?\n> > >\n> > > Is 64 bit nonce not enough ?\n> > >\n> > >    \n> > Good question. If we don't need the extra entropy, we can fix\n> > the HUMAN_READABLE_TITLE string.\n> > \n> > Something like \"No SPOF\". (No Single Point Of Failure).\n> > \n> > \n> >   \n> > > It seems that to crack this with fixed Pwd and 64 bit nonce, the\n> > > attacker will need to be about 10^15 more powerful than 80Mhz MCU:\n> > > (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is\n> > > realistic scale. Average desktop cpu seems to be about 10^3 more\n> > > powerful than the mentioned MCU for this task.\n> > >\n> > > Maybe for the UX it would be better to choose the number of rounds\n> > > to use in PBKDF2, instead of using variable Pwd. Number of rounds\n> > > will be easier to enter on the device (or just choose it from a\n> > > set of pre-defined values). The more money is at stake, the higher\n> > > number of rounds could the coordinator choose (taking into account\n> > > the characteristics of the participant devices)\n> > >    \n> >   \n> > > Or simply allow bigger entropy (more than 6 mnemonic words), if\n> > > the coordinator feels that 64 bit of entropy is not enough.    \n> > \n> > \n> > That could work. Allowing variable iteration count is probably\n> > better UX-wise.\n> > \n> > Best,\n> > Hugo\n> > \n> >   \n> > >\n> > > \u0412 Fri, 12 Feb 2021 08:55:55 -0800\n> > > Hugo Nguyen <hugo at nunchuk.io> wrote:\n> > >    \n> > > > Thanks everyone who has provided inputs so far!\n> > > >\n> > > > This is the new proposal for the encryption aspect of the\n> > > > scheme, based on all the feedback.\n> > > >\n> > > > The key derivation function would be PBKDF2, with PRF = SHA512.\n> > > > This should be readily available on today's hardware already, as\n> > > > they are used for BIP39.\n> > > >\n> > > > DK = PBKDF2(PRF, Password, Salt, c, dkLen)\n> > > > PRF = SHA512\n> > > > Pwd = HUMAN_READABLE_TITLE\n> > > > Salt = NONCE\n> > > > c = 2048\n> > > > dkLen = 256\n> > > >\n> > > > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8,\n> > > > maximum length = 20.\n> > > > NONCE is a 64-bit number.\n> > > >\n> > > > Reason for going with SHA512 is due to legacy support on some\n> > > > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to\n> > > > derive the encryption key on a 80Mhz MCU. We feel like this is a\n> > > > good enough tradeoff for this use case. The assumption here is\n> > > > that the secure session is only needed temporarily for a few\n> > > > hours, maybe up to one day.\n> > > >\n> > > > The Coordinator and Signers agree and exchange these 2 secrets\n> > > > prior to the setup. The NONCE can be converted to either:\n> > > > (a) a 6-word phrase using BIP39 wordlist\n> > > > (b) a 20-digit decimal number\n> > > > (c) a QR code\n> > > >\n> > > > Depending on the vendor. This flexibility in the data format\n> > > > allows each vendor to customize the UX based on their respective\n> > > > device capabilities.\n> > > >\n> > > > Best,\n> > > > Hugo\n> > > >\n> > > > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev\n> > > > < bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > > >    \n> > > > > \u0412 Thu, 11 Feb 2021 05:45:33 -0800\n> > > > > Hugo Nguyen via bitcoin-dev\n> > > > > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > > > >    \n> > > > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))    \n> > > > > > >\n> > > > > > > This scheme might be vulnerable to rainbow table attack.\n> > > > > > >    \n> > > > > >\n> > > > > > Thank you for pointing this out! Incidentally, Dmitry\n> > > > > > Petukhov also told me the same privately.    \n> > > > >\n> > > > > My thought was that if TOKEN has the characteristics of a\n> > > > > password (short ASCII string), then it would be better to use\n> > > > > key derivation function designed for passwords, like PBKDF2.\n> > > > >\n> > > > > The counter-argument to this is that this adds another code\n> > > > > dependency for vendors, if the device firmware does not\n> > > > > already have the required key derivation function.\n> > > > >\n> > > > > Maybe this could be solved by going into opposite direction -\n> > > > > make the \"token\" even longer, use the mnemoic.\n> > > > >\n> > > > > The issue is that entering long data of the shared key into\n> > > > > the device manually is difficult UX-wise.\n> > > > >\n> > > > > Hww vendors that allow to enter custom keys into their device\n> > > > > already have to face this issue, and those who allow to enter\n> > > > > custom keys via mnemonic probably tackled this somehow.\n> > > > >\n> > > > > Maybe the shared key for multisig setup can be entered in the\n> > > > > same way ? (with maybe additional visual check via some\n> > > > > fingerprint).\n> > > > >\n> > > > > Although we would then have another issue of potential\n> > > > > confusion between two procedures (entering the main key and\n> > > > > entering the shared key for multisig setup), and the measures\n> > > > > has to be taken to prevent such confusion.\n> > > > >\n> > > > > The approaches can be combined - specify a key derivation\n> > > > > function suitable for passwords; via secure channel, share a\n> > > > > password and/or the derived key. If hww supports derivation\n> > > > > function, it can derive the key from password. If hww supports\n> > > > > only keys, the key can be entered raw or via mnemonic.\n> > > > > _______________________________________________\n> > > > > bitcoin-dev mailing list\n> > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > >    \n> > >\n> > >    \n>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-15T08:44:19",
                "message_text_only": "Hi all,\nI have updated the proposal based on further feedback. The new spec is\nincluded at the bottom.\n\nI have also created a public Github PR to make it easier to comment on the\ntext of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .\n\nCould someone please let me know what else needs to be done before a BIP\nnumber can be assigned?\n\n\n=== Quick summary of changes from last update ===\n\n1. Define encryption modes\n\n# NO_ENCRYPTION: Encryption is disabled.\n# STANDARD : the TOKEN is a 64-bit nonce.\n# EXTENDED : the TOKEN is a 128-bit nonce.\n\n2. Define signature algorithm\n\nFollow BIP-0322, legacy format allowed.\n\n3. Multiple TOKENs (optional)\n\nAlso add an option where the Coordinator can choose to use one common TOKEN\nfor all Signers, or use one per Signer.\n\n=== End of summary ===\n\n\nCheers,\nHugo\n\n\n<pre>\n  BIP: To be determined\n  Layer: Applications\n  Title: Bitcoin Secure Multisig Setup (BSMS)\n  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at\ncoinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <\nstick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo\nNovak <rodolfo at coinkite.com>\n  Comments-Summary: No comments yet.\n  Comments-URI:\n  Status: Proposed\n  Type: Standards Track\n  Created: 2020-11-10\n  License: BSD-2-Clause\n</pre>\n\n==Introduction==\n\n===Abstract===\n\nThis document proposes a mechanism to set up multisig wallets securely.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n===Motivation===\n\nThe Bitcoin multisig experience has been greatly streamlined under [\nhttps://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n(Partially Signed Bitcoin Transaction)]. However, what is still missing is\na standardized process for setting up multisig wallets securely across\ndifferent vendors.\n\nThere are a number of concerns when it comes to setting up a multisig\nwallet:\n\n# Whether the multisig configuration, such as Signer membership, script\ntype, derivation paths and number of signatures required, is correct and\nnot tampered with.\n# Whether Signer persists the multisig configuration in their respective\nstorage, and under what format.\n# Whether Signer's storage is tamper-proof.\n# Whether Signer subsequently uses the multisig configuration to generate\nand verify receive and change addresses.\n\nAn attacker who can modify the multisig configuration can steal or hold\nfunds to ransom by duping the user into sending funds to the wrong address.\n\nThis proposal seeks to address concerns #1 and #2: to mitigate the risk of\ntampering during the initial setup phase, and to define an interoperable\nmultisig configuration format.\n\nConcerns #3 and #4 should be handled by Signers and is out of scope of this\nproposal.\n\n==Specification==\n\n===Prerequisites===\nThis proposal assumes the parties in the multisig support [\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\ndescriptor language] and encryption.\n\n===Roles===\n====Coordinator====\n\nThe Coordinator initiates the multisig setup. The Coordinator determines\nwhat type of multisig is used and the exact policy script. If encryption is\nenabled, the Coordinator also distributes a shared secret or shared secrets\nto the parties involved for secure communication. The Coordinator gathers\ninformation from the Signers to generate a descriptor record. The\nCoordinator distributes the descriptor record back to the Signers.\n\n====Signer====\n\nThe Signer is a participating member in the multisig. Its responsibilities\ninclude providing its key record -- which contains an Extended Public Key\n(XPUB) -- to the Coordinator, verifying that its XPUB is included in the\ndescriptor record and persisting the descriptor record in its storage.\n\n===Setup Process===\n\n====Round 1====\n\n=====Coordinator=====\n\n* The Coordinator creates a multisig wallet creation session. The\nCoordinator constructs the multisig script and its policy parameters, such\nas the total number of signers and the required number of signatures\n(<tt>M</tt> and <tt>N</tt>).\n* The session should expire after some time period determined by the\nCoordinator, e.g., 24 hours.\n* If encryption is enabled, the Coordinator distributes a secret\n<tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the\n<tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the\nEncryption section below for details on the <tt>TOKEN</tt>, the key\nderivation function and the encryption scheme. Depending on the use case,\nthe Coordinator can decide whether to share one common <tt>TOKEN</tt> for\nall Signers, or to have one per Signer.\n* If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all\nthe encryption/decryption steps below can be skipped.\n\n=====Signer=====\n\n* The Signer initiates a new secure multisig setup session by setting the\n<tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the\n<tt>TOKEN</tt>. The Signer can keep the session open until a different\nvalue for the <tt>TOKEN</tt> is set.\n* The Signer generates a key record by prompting the user for a multisig\nderivation path and retrieves the XPUB at that derivation path. Optionally,\nthe Signer can choose a path on behalf of the user. If the Signer chooses\nthe path, it should try to avoid reusing XPUBs for different wallets.\n* The first line in the record must be the <tt>TOKEN</tt>. The second line\nmust be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin\ninformation, written in the descriptor-defined format, i.e.: <tt>[{master\nkey fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a\n<tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the\nprivate key associated with the XPUB to sign the first two lines.  The\nsignature should follow [\nhttps://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322],\nlegacy format accepted. Finally, the Signer encrypts the entire record with\n<tt>ENCRYPTION_KEY</tt>.\n\n====Round 2====\n\n=====Coordinator=====\n\n* The Coordinator gathers key records from all participating Signers. Abort\nthe setup if the wallet setup session has expired.\n* For each key record, the Coordinator decrypts it using\n<tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included\n<tt>SIG</tt> is valid given the <tt>KEY</tt>.\n* If all key records look good, the Coordinator fills in all necessary\ninformation to generate a descriptor record, which is simply the descriptor\nstring plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has\n[https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\nBECH32 encoding].\n* The Coordinator encrypts this descriptor record with\n<tt>ENCRYPTION_KEY</tt>.\n* The Coordinator sends the encrypted descriptor record to all\nparticipating Signers.\n\n=====Signer=====\n\n* The Signer imports the descriptor record, decrypts it using the\n<tt>ENCRYPTION_KEY</tt> derived from the open session.\n* The Signer calculates and verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\nAbort the setup if the <tt>CHECKSUM</tt> is incorrect.\n* The Signer checks whether one of the <tt>KEY</tt>s in the descriptor\nbelongs to it, using path and fingerprint information included in the\ndescriptor. The check must perform an exact match on the <tt>KEY</tt>s, and\nnot using shortcuts such as matching fingerprints (which is trivial to\nspoof). Abort the setup if it doesn\u2019t detect its own <tt>KEY</tt>.\n* For confirmation, the Signer must display to the user the\n<tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and\n<tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to\nprevent a <tt>KEY</tt> insertion attack. All participating Signers should\nbe able to display the same confirmation.\n* If all checks pass, the Signer persists the descriptor record in its\nstorage.\n* The Signer can choose to further restrict post-XPUB derivation paths,\nsuch as to those defined in [\nhttps://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].\n* The Signer should subsequently use the descriptor to generate and verify\nreceive and change addresses.\n\nThis completes the setup.\n\n===Encryption===\n\n====The Token====\nWe define three modes of encryption.\n\n# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.\nEncryption is disabled.\n# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n\nThe <tt>TOKEN</tt> can be converted to one of these formats:\n* A mnemonic phrase using [\nhttps://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]\nword list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>\nmode)\n* A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in\n<tt>EXTENDED</tt> mode)\n* A QR code\n* Other formats\n\nThe flexibility in the data format allows each Signer to customize the User\nExperience based on its respective capabilities.\n\n====Key Derivation====\nThe key derivation function is [https://tools.ietf.org/html/rfc2898\nPBKDF2], with PRF = SHA512. Specifically:\n\n<tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n\nWhereas:\n\n* PRF = <tt>SHA512</tt>\n* Password = <tt>\"No SPOF\"</tt>\n* Salt = <tt>TOKEN</tt>\n* c = <tt>2048</tt>\n* dkLen = <tt>256</tt>\n* DK = Derived <tt>ENCRYPTION_KEY</tt>\n\n====Encryption Scheme====\nThe encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR\nmode].\n\n==QR Codes==\nFor signers that use QR codes to transmit data, key and descriptor records\ncan be converted to QR codes, following [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\nthe BCR standard].\n\nAlso refer to [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\nUR Type Definition for BIP44 Accounts] and [\nhttps://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\nUR Type Definition for Bitcoin Output Descriptors] for more details.\n\n==Security==\n\nThis proposal introduces two layers of protection. The first one is a\ntemporary, secret token, used to encrypt the two rounds of communication\nbetween the Signer and the Coordinator. The second one is through the\ndescriptor checksum and visual inspection of the descriptor itself.\n\nThe token is only needed during the setup phase, and can be safely thrown\naway afterwards. The token does not guarantee that the Signer membership\nset is not modified, since that depends on the overall security of all\nparties in the setup, but it can make it significantly harder for an\nattacker to do so.\n\nThere are three ways an attacker can modify the membership set: by changing\nan existing member, by removing an existing member, or by adding a new\nmember.\n\nFor the first two methods, one of the Signers will be able to detect that\nits membership has been changed or removed, and reject the final\ndescriptor. Thus, it is vital that all participating Signers check that\ntheir membership is intact in the descriptor. Even one Signer failing to\ncheck for its membership means that the setup could be compromised.\n\nFor the third type of attack, the descriptor checksum and visual inspection\nof the descriptor itself are the only way to guard against malicious\nmembers from being inserted into the set.\n\n==Acknowledgement==\n\nSpecial thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and others\nfor their feedback on the specification.\n\n==References==\n\nOriginal mailing list thread:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/0d58580e/attachment-0001.html>"
            },
            {
                "author": "Craig Raw",
                "date": "2021-02-15T13:53:05",
                "message_text_only": "Hi all,\n\nHugo and I have discussed off-list, and I have two concerns with this\nproposal:\n\n1. I believe adding the TOKEN and encryption to the exchange adds\ncomplexity to already notoriously complex multisig, without adding much in\nthe way of security. This is because the shared secret (TOKEN) must still\nbe shared securely, and if you have established an (off-protocol) secure\nchannel to do this, why not just share the actual multisig configuration\ndata directly in that channel? If you are able to do so, you retain the\nadvantage of being able to inspect the data directly.\n\n2. Asking the user to enter the derivation into the Signer also adds (IMO\nunnecessary) complexity to the multisig setup process. A different way of\ndoing it, which is specified in the UR crypto-account format linked to\npreviously, has the Signer provide as many common derivations (along with\ntheir xpubs) as it can support for a given BIP44 account number. This has\nthe dual advantage of making things simpler for the user (they only have to\nprovide an optional account number) and increasing the standardisation on\ncommon derivation paths. On receiving these derivation/xpub pairs, the\nCoordinator can simply pick the appropriate one.\n\nThese concerns noted, I agree it's a good idea to have Signers save the\nmultisig configuration as proposed, and it would be great to have\nstandardisation in hww import and export formats (not just for multisig).\nOn that note, I'd love to see greater adoption of the efficient UR2.0\nstandard and associated formats for airgapped data transmission using QR\ncodes.\n\nCraig\n\n\nOn Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n> I have updated the proposal based on further feedback. The new spec is\n> included at the bottom.\n>\n> I have also created a public Github PR to make it easier to comment on the\n> text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .\n>\n> Could someone please let me know what else needs to be done before a BIP\n> number can be assigned?\n>\n>\n> === Quick summary of changes from last update ===\n>\n> 1. Define encryption modes\n>\n> # NO_ENCRYPTION: Encryption is disabled.\n> # STANDARD : the TOKEN is a 64-bit nonce.\n> # EXTENDED : the TOKEN is a 128-bit nonce.\n>\n> 2. Define signature algorithm\n>\n> Follow BIP-0322, legacy format allowed.\n>\n> 3. Multiple TOKENs (optional)\n>\n> Also add an option where the Coordinator can choose to use one common\n> TOKEN for all Signers, or use one per Signer.\n>\n> === End of summary ===\n>\n>\n> Cheers,\n> Hugo\n>\n>\n> <pre>\n>   BIP: To be determined\n>   Layer: Applications\n>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at\n> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <\n> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo\n> Novak <rodolfo at coinkite.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Proposed\n>   Type: Standards Track\n>   Created: 2020-11-10\n>   License: BSD-2-Clause\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes a mechanism to set up multisig wallets securely.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Motivation===\n>\n> The Bitcoin multisig experience has been greatly streamlined under [\n> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n> (Partially Signed Bitcoin Transaction)]. However, what is still missing is\n> a standardized process for setting up multisig wallets securely across\n> different vendors.\n>\n> There are a number of concerns when it comes to setting up a multisig\n> wallet:\n>\n> # Whether the multisig configuration, such as Signer membership, script\n> type, derivation paths and number of signatures required, is correct and\n> not tampered with.\n> # Whether Signer persists the multisig configuration in their respective\n> storage, and under what format.\n> # Whether Signer's storage is tamper-proof.\n> # Whether Signer subsequently uses the multisig configuration to generate\n> and verify receive and change addresses.\n>\n> An attacker who can modify the multisig configuration can steal or hold\n> funds to ransom by duping the user into sending funds to the wrong address.\n>\n> This proposal seeks to address concerns #1 and #2: to mitigate the risk of\n> tampering during the initial setup phase, and to define an interoperable\n> multisig configuration format.\n>\n> Concerns #3 and #4 should be handled by Signers and is out of scope of\n> this proposal.\n>\n> ==Specification==\n>\n> ===Prerequisites===\n> This proposal assumes the parties in the multisig support [\n> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032],\n> [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\n> descriptor language] and encryption.\n>\n> ===Roles===\n> ====Coordinator====\n>\n> The Coordinator initiates the multisig setup. The Coordinator determines\n> what type of multisig is used and the exact policy script. If encryption is\n> enabled, the Coordinator also distributes a shared secret or shared secrets\n> to the parties involved for secure communication. The Coordinator gathers\n> information from the Signers to generate a descriptor record. The\n> Coordinator distributes the descriptor record back to the Signers.\n>\n> ====Signer====\n>\n> The Signer is a participating member in the multisig. Its responsibilities\n> include providing its key record -- which contains an Extended Public Key\n> (XPUB) -- to the Coordinator, verifying that its XPUB is included in the\n> descriptor record and persisting the descriptor record in its storage.\n>\n> ===Setup Process===\n>\n> ====Round 1====\n>\n> =====Coordinator=====\n>\n> * The Coordinator creates a multisig wallet creation session. The\n> Coordinator constructs the multisig script and its policy parameters, such\n> as the total number of signers and the required number of signatures\n> (<tt>M</tt> and <tt>N</tt>).\n> * The session should expire after some time period determined by the\n> Coordinator, e.g., 24 hours.\n> * If encryption is enabled, the Coordinator distributes a secret\n> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the\n> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the\n> Encryption section below for details on the <tt>TOKEN</tt>, the key\n> derivation function and the encryption scheme. Depending on the use case,\n> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for\n> all Signers, or to have one per Signer.\n> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all\n> the encryption/decryption steps below can be skipped.\n>\n> =====Signer=====\n>\n> * The Signer initiates a new secure multisig setup session by setting the\n> <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the\n> <tt>TOKEN</tt>. The Signer can keep the session open until a different\n> value for the <tt>TOKEN</tt> is set.\n> * The Signer generates a key record by prompting the user for a multisig\n> derivation path and retrieves the XPUB at that derivation path. Optionally,\n> the Signer can choose a path on behalf of the user. If the Signer chooses\n> the path, it should try to avoid reusing XPUBs for different wallets.\n> * The first line in the record must be the <tt>TOKEN</tt>. The second line\n> must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin\n> information, written in the descriptor-defined format, i.e.: <tt>[{master\n> key fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a\n> <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the\n> private key associated with the XPUB to sign the first two lines.  The\n> signature should follow [\n> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322],\n> legacy format accepted. Finally, the Signer encrypts the entire record with\n> <tt>ENCRYPTION_KEY</tt>.\n>\n> ====Round 2====\n>\n> =====Coordinator=====\n>\n> * The Coordinator gathers key records from all participating Signers.\n> Abort the setup if the wallet setup session has expired.\n> * For each key record, the Coordinator decrypts it using\n> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included\n> <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n> * If all key records look good, the Coordinator fills in all necessary\n> information to generate a descriptor record, which is simply the descriptor\n> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has\n> [\n> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\n> BECH32 encoding].\n> * The Coordinator encrypts this descriptor record with\n> <tt>ENCRYPTION_KEY</tt>.\n> * The Coordinator sends the encrypted descriptor record to all\n> participating Signers.\n>\n> =====Signer=====\n>\n> * The Signer imports the descriptor record, decrypts it using the\n> <tt>ENCRYPTION_KEY</tt> derived from the open session.\n> * The Signer calculates and verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\n> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.\n> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor\n> belongs to it, using path and fingerprint information included in the\n> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and\n> not using shortcuts such as matching fingerprints (which is trivial to\n> spoof). Abort the setup if it doesn\u2019t detect its own <tt>KEY</tt>.\n> * For confirmation, the Signer must display to the user the\n> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and\n> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to\n> prevent a <tt>KEY</tt> insertion attack. All participating Signers should\n> be able to display the same confirmation.\n> * If all checks pass, the Signer persists the descriptor record in its\n> storage.\n> * The Signer can choose to further restrict post-XPUB derivation paths,\n> such as to those defined in [\n> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].\n> * The Signer should subsequently use the descriptor to generate and verify\n> receive and change addresses.\n>\n> This completes the setup.\n>\n> ===Encryption===\n>\n> ====The Token====\n> We define three modes of encryption.\n>\n> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.\n> Encryption is disabled.\n> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n>\n> The <tt>TOKEN</tt> can be converted to one of these formats:\n> * A mnemonic phrase using [\n> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]\n> word list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>\n> mode)\n> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in\n> <tt>EXTENDED</tt> mode)\n> * A QR code\n> * Other formats\n>\n> The flexibility in the data format allows each Signer to customize the\n> User Experience based on its respective capabilities.\n>\n> ====Key Derivation====\n> The key derivation function is [https://tools.ietf.org/html/rfc2898\n> PBKDF2], with PRF = SHA512. Specifically:\n>\n> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n>\n> Whereas:\n>\n> * PRF = <tt>SHA512</tt>\n> * Password = <tt>\"No SPOF\"</tt>\n> * Salt = <tt>TOKEN</tt>\n> * c = <tt>2048</tt>\n> * dkLen = <tt>256</tt>\n> * DK = Derived <tt>ENCRYPTION_KEY</tt>\n>\n> ====Encryption Scheme====\n> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR\n> mode].\n>\n> ==QR Codes==\n> For signers that use QR codes to transmit data, key and descriptor records\n> can be converted to QR codes, following [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n> the BCR standard].\n>\n> Also refer to [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n> UR Type Definition for BIP44 Accounts] and [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n> UR Type Definition for Bitcoin Output Descriptors] for more details.\n>\n> ==Security==\n>\n> This proposal introduces two layers of protection. The first one is a\n> temporary, secret token, used to encrypt the two rounds of communication\n> between the Signer and the Coordinator. The second one is through the\n> descriptor checksum and visual inspection of the descriptor itself.\n>\n> The token is only needed during the setup phase, and can be safely thrown\n> away afterwards. The token does not guarantee that the Signer membership\n> set is not modified, since that depends on the overall security of all\n> parties in the setup, but it can make it significantly harder for an\n> attacker to do so.\n>\n> There are three ways an attacker can modify the membership set: by\n> changing an existing member, by removing an existing member, or by adding a\n> new member.\n>\n> For the first two methods, one of the Signers will be able to detect that\n> its membership has been changed or removed, and reject the final\n> descriptor. Thus, it is vital that all participating Signers check that\n> their membership is intact in the descriptor. Even one Signer failing to\n> check for its membership means that the setup could be compromised.\n>\n> For the third type of attack, the descriptor checksum and visual\n> inspection of the descriptor itself are the only way to guard against\n> malicious members from being inserted into the set.\n>\n> ==Acknowledgement==\n>\n> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and others\n> for their feedback on the specification.\n>\n> ==References==\n>\n> Original mailing list thread:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/4ca65ae9/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-15T14:19:14",
                "message_text_only": "Hi Craig,\nThanks for the feedback! Sharing my comments inline.\n\nOn Mon, Feb 15, 2021 at 5:53 AM Craig Raw <craigraw at gmail.com> wrote:\n\n> Hi all,\n>\n> Hugo and I have discussed off-list, and I have two concerns with this\n> proposal:\n>\n> 1. I believe adding the TOKEN and encryption to the exchange adds\n> complexity to already notoriously complex multisig, without adding much in\n> the way of security.\n>\n\nI disagree that this doesn't add security. This proposal was inspired by a\nreal vulnerability we discovered in the wild while experimenting with HWWs,\nand during that process I noticed that there is little in the way of a an\nattacker to pull off a MITM attack, where he/she can intercept and tamper\nwith the multisig configuration file, potentially swapping in their own\nXPUBs. This is especially important for remote multisig setups - which is\nnot common now but I imagine will be a lot more common in the future.\n\nThis is because the shared secret (TOKEN) must still be shared securely,\n> and if you have established an (off-protocol) secure channel to do this,\n> why not just share the actual multisig configuration data directly in that\n> channel?\n\n\nBecause multisig is inherently an interactive process. If we can create the\nmultisig configuration in one shot for everybody, you're correct that this\nis not necessary! But the fact that multisig is by nature interactive and\nrequires a few rounds of communication (since it needs each Signer to\nvoluntarily share its XPUB before a wallet can be created) makes this\nnecessary IMO.\n\nIf you are able to do so, you retain the advantage of being able to inspect\n> the data directly.\n\n\nNote that some manual inspection is still part of the proposal. But instead\nof exclusively relying on manual inspection (which is error-prone, and also\ndoesn't scale very well for a large number of signers), we strengthen this\nprocess by automating some of the checks and making it harder to tamper\nwith.\n\n\n>\n> 2. Asking the user to enter the derivation into the Signer also adds (IMO\n> unnecessary) complexity to the multisig setup process. A different way of\n> doing it, which is specified in the UR crypto-account format linked to\n> previously, has the Signer provide as many common derivations (along with\n> their xpubs) as it can support for a given BIP44 account number. This has\n> the dual advantage of making things simpler for the user (they only have to\n> provide an optional account number) and increasing the standardisation on\n> common derivation paths. On receiving these derivation/xpub pairs, the\n> Coordinator can simply pick the appropriate one.\n>\n\nNote that in the updated proposal, I added the option of the Signer\nautomatically filling in the derivation paths on behalf of the user (and\nalso should take care not to reuse XPUBs). Perhaps this can be made the\ndefault behavior.\n\nBest,\nHugo\n\n\n>\n> These concerns noted, I agree it's a good idea to have Signers save the\n> multisig configuration as proposed, and it would be great to have\n> standardisation in hww import and export formats (not just for multisig).\n> On that note, I'd love to see greater adoption of the efficient UR2.0\n> standard and associated formats for airgapped data transmission using QR\n> codes.\n>\n> Craig\n>\n>\n> On Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi all,\n>> I have updated the proposal based on further feedback. The new spec is\n>> included at the bottom.\n>>\n>> I have also created a public Github PR to make it easier to comment on\n>> the text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .\n>>\n>> Could someone please let me know what else needs to be done before a BIP\n>> number can be assigned?\n>>\n>>\n>> === Quick summary of changes from last update ===\n>>\n>> 1. Define encryption modes\n>>\n>> # NO_ENCRYPTION: Encryption is disabled.\n>> # STANDARD : the TOKEN is a 64-bit nonce.\n>> # EXTENDED : the TOKEN is a 128-bit nonce.\n>>\n>> 2. Define signature algorithm\n>>\n>> Follow BIP-0322, legacy format allowed.\n>>\n>> 3. Multiple TOKENs (optional)\n>>\n>> Also add an option where the Coordinator can choose to use one common\n>> TOKEN for all Signers, or use one per Signer.\n>>\n>> === End of summary ===\n>>\n>>\n>> Cheers,\n>> Hugo\n>>\n>>\n>> <pre>\n>>   BIP: To be determined\n>>   Layer: Applications\n>>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at\n>> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <\n>> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo\n>> Novak <rodolfo at coinkite.com>\n>>   Comments-Summary: No comments yet.\n>>   Comments-URI:\n>>   Status: Proposed\n>>   Type: Standards Track\n>>   Created: 2020-11-10\n>>   License: BSD-2-Clause\n>> </pre>\n>>\n>> ==Introduction==\n>>\n>> ===Abstract===\n>>\n>> This document proposes a mechanism to set up multisig wallets securely.\n>>\n>> ===Copyright===\n>>\n>> This BIP is licensed under the 2-clause BSD license.\n>>\n>> ===Motivation===\n>>\n>> The Bitcoin multisig experience has been greatly streamlined under [\n>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n>> (Partially Signed Bitcoin Transaction)]. However, what is still missing\n>> is a standardized process for setting up multisig wallets securely across\n>> different vendors.\n>>\n>> There are a number of concerns when it comes to setting up a multisig\n>> wallet:\n>>\n>> # Whether the multisig configuration, such as Signer membership, script\n>> type, derivation paths and number of signatures required, is correct and\n>> not tampered with.\n>> # Whether Signer persists the multisig configuration in their respective\n>> storage, and under what format.\n>> # Whether Signer's storage is tamper-proof.\n>> # Whether Signer subsequently uses the multisig configuration to generate\n>> and verify receive and change addresses.\n>>\n>> An attacker who can modify the multisig configuration can steal or hold\n>> funds to ransom by duping the user into sending funds to the wrong address.\n>>\n>> This proposal seeks to address concerns #1 and #2: to mitigate the risk\n>> of tampering during the initial setup phase, and to define an interoperable\n>> multisig configuration format.\n>>\n>> Concerns #3 and #4 should be handled by Signers and is out of scope of\n>> this proposal.\n>>\n>> ==Specification==\n>>\n>> ===Prerequisites===\n>> This proposal assumes the parties in the multisig support [\n>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n>> BIP-0032], [\n>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\n>> descriptor language] and encryption.\n>>\n>> ===Roles===\n>> ====Coordinator====\n>>\n>> The Coordinator initiates the multisig setup. The Coordinator determines\n>> what type of multisig is used and the exact policy script. If encryption is\n>> enabled, the Coordinator also distributes a shared secret or shared secrets\n>> to the parties involved for secure communication. The Coordinator gathers\n>> information from the Signers to generate a descriptor record. The\n>> Coordinator distributes the descriptor record back to the Signers.\n>>\n>> ====Signer====\n>>\n>> The Signer is a participating member in the multisig. Its\n>> responsibilities include providing its key record -- which contains an\n>> Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB\n>> is included in the descriptor record and persisting the descriptor record\n>> in its storage.\n>>\n>> ===Setup Process===\n>>\n>> ====Round 1====\n>>\n>> =====Coordinator=====\n>>\n>> * The Coordinator creates a multisig wallet creation session. The\n>> Coordinator constructs the multisig script and its policy parameters, such\n>> as the total number of signers and the required number of signatures\n>> (<tt>M</tt> and <tt>N</tt>).\n>> * The session should expire after some time period determined by the\n>> Coordinator, e.g., 24 hours.\n>> * If encryption is enabled, the Coordinator distributes a secret\n>> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the\n>> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the\n>> Encryption section below for details on the <tt>TOKEN</tt>, the key\n>> derivation function and the encryption scheme. Depending on the use case,\n>> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for\n>> all Signers, or to have one per Signer.\n>> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all\n>> the encryption/decryption steps below can be skipped.\n>>\n>> =====Signer=====\n>>\n>> * The Signer initiates a new secure multisig setup session by setting the\n>> <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the\n>> <tt>TOKEN</tt>. The Signer can keep the session open until a different\n>> value for the <tt>TOKEN</tt> is set.\n>> * The Signer generates a key record by prompting the user for a multisig\n>> derivation path and retrieves the XPUB at that derivation path. Optionally,\n>> the Signer can choose a path on behalf of the user. If the Signer chooses\n>> the path, it should try to avoid reusing XPUBs for different wallets.\n>> * The first line in the record must be the <tt>TOKEN</tt>. The second\n>> line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key\n>> origin information, written in the descriptor-defined format, i.e.:\n>> <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The third line\n>> must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by\n>> using the private key associated with the XPUB to sign the first two\n>> lines.  The signature should follow [\n>> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\n>> BIP-0322], legacy format accepted. Finally, the Signer encrypts the entire\n>> record with <tt>ENCRYPTION_KEY</tt>.\n>>\n>> ====Round 2====\n>>\n>> =====Coordinator=====\n>>\n>> * The Coordinator gathers key records from all participating Signers.\n>> Abort the setup if the wallet setup session has expired.\n>> * For each key record, the Coordinator decrypts it using\n>> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included\n>> <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n>> * If all key records look good, the Coordinator fills in all necessary\n>> information to generate a descriptor record, which is simply the descriptor\n>> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has\n>> [\n>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\n>> BECH32 encoding].\n>> * The Coordinator encrypts this descriptor record with\n>> <tt>ENCRYPTION_KEY</tt>.\n>> * The Coordinator sends the encrypted descriptor record to all\n>> participating Signers.\n>>\n>> =====Signer=====\n>>\n>> * The Signer imports the descriptor record, decrypts it using the\n>> <tt>ENCRYPTION_KEY</tt> derived from the open session.\n>> * The Signer calculates and verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\n>> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.\n>> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor\n>> belongs to it, using path and fingerprint information included in the\n>> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and\n>> not using shortcuts such as matching fingerprints (which is trivial to\n>> spoof). Abort the setup if it doesn\u2019t detect its own <tt>KEY</tt>.\n>> * For confirmation, the Signer must display to the user the\n>> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and\n>> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to\n>> prevent a <tt>KEY</tt> insertion attack. All participating Signers should\n>> be able to display the same confirmation.\n>> * If all checks pass, the Signer persists the descriptor record in its\n>> storage.\n>> * The Signer can choose to further restrict post-XPUB derivation paths,\n>> such as to those defined in [\n>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].\n>> * The Signer should subsequently use the descriptor to generate and\n>> verify receive and change addresses.\n>>\n>> This completes the setup.\n>>\n>> ===Encryption===\n>>\n>> ====The Token====\n>> We define three modes of encryption.\n>>\n>> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.\n>> Encryption is disabled.\n>> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n>> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n>>\n>> The <tt>TOKEN</tt> can be converted to one of these formats:\n>> * A mnemonic phrase using [\n>> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]\n>> word list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>\n>> mode)\n>> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in\n>> <tt>EXTENDED</tt> mode)\n>> * A QR code\n>> * Other formats\n>>\n>> The flexibility in the data format allows each Signer to customize the\n>> User Experience based on its respective capabilities.\n>>\n>> ====Key Derivation====\n>> The key derivation function is [https://tools.ietf.org/html/rfc2898\n>> PBKDF2], with PRF = SHA512. Specifically:\n>>\n>> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n>>\n>> Whereas:\n>>\n>> * PRF = <tt>SHA512</tt>\n>> * Password = <tt>\"No SPOF\"</tt>\n>> * Salt = <tt>TOKEN</tt>\n>> * c = <tt>2048</tt>\n>> * dkLen = <tt>256</tt>\n>> * DK = Derived <tt>ENCRYPTION_KEY</tt>\n>>\n>> ====Encryption Scheme====\n>> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR\n>> mode].\n>>\n>> ==QR Codes==\n>> For signers that use QR codes to transmit data, key and descriptor\n>> records can be converted to QR codes, following [\n>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n>> the BCR standard].\n>>\n>> Also refer to [\n>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n>> UR Type Definition for BIP44 Accounts] and [\n>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n>> UR Type Definition for Bitcoin Output Descriptors] for more details.\n>>\n>> ==Security==\n>>\n>> This proposal introduces two layers of protection. The first one is a\n>> temporary, secret token, used to encrypt the two rounds of communication\n>> between the Signer and the Coordinator. The second one is through the\n>> descriptor checksum and visual inspection of the descriptor itself.\n>>\n>> The token is only needed during the setup phase, and can be safely thrown\n>> away afterwards. The token does not guarantee that the Signer membership\n>> set is not modified, since that depends on the overall security of all\n>> parties in the setup, but it can make it significantly harder for an\n>> attacker to do so.\n>>\n>> There are three ways an attacker can modify the membership set: by\n>> changing an existing member, by removing an existing member, or by adding a\n>> new member.\n>>\n>> For the first two methods, one of the Signers will be able to detect that\n>> its membership has been changed or removed, and reject the final\n>> descriptor. Thus, it is vital that all participating Signers check that\n>> their membership is intact in the descriptor. Even one Signer failing to\n>> check for its membership means that the setup could be compromised.\n>>\n>> For the third type of attack, the descriptor checksum and visual\n>> inspection of the descriptor itself are the only way to guard against\n>> malicious members from being inserted into the set.\n>>\n>> ==Acknowledgement==\n>>\n>> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and\n>> others for their feedback on the specification.\n>>\n>> ==References==\n>>\n>> Original mailing list thread:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/5675d8e2/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-02-15T16:45:10",
                "message_text_only": "I would also like to add 2 notes for those who are concerned about the\npotential complexity that comes with encryption - which is understandable:\n\n1. As mentioned elsewhere in the thread, I've made the encryption aspect\nentirely optional. In scenarios where encryption is an overkill -- such as\nwhen you're setting things up under an environment you control 100% -- you\ncan turn encryption off, and things are unchanged from the way they are\nnow. The \"session\" would be unencrypted and XPUBs and descriptor records\nare simply shared in plaintext.\n\n2. Multisig setup is a one-time operation! After the multisig wallet has\nbeen set up and registered with the Signers, you don't have to worry about\nsharing XPUBs ever again (not even in PSBTs which is an additional benefit\nof the stateful registration approach). I believe this one-time cost is\nworth it if the amount of funds you are securing are significant, e.g., few\nmillions of dollars or even billions of dollars. But it's important that we\nhave this extra level of security if necessary IMHO.\n\nBest,\nHugo\n\nOn Mon, Feb 15, 2021 at 6:19 AM Hugo Nguyen <hugo at nunchuk.io> wrote:\n\n> Hi Craig,\n> Thanks for the feedback! Sharing my comments inline.\n>\n> On Mon, Feb 15, 2021 at 5:53 AM Craig Raw <craigraw at gmail.com> wrote:\n>\n>> Hi all,\n>>\n>> Hugo and I have discussed off-list, and I have two concerns with this\n>> proposal:\n>>\n>> 1. I believe adding the TOKEN and encryption to the exchange adds\n>> complexity to already notoriously complex multisig, without adding much in\n>> the way of security.\n>>\n>\n> I disagree that this doesn't add security. This proposal was inspired by a\n> real vulnerability we discovered in the wild while experimenting with HWWs,\n> and during that process I noticed that there is little in the way of a an\n> attacker to pull off a MITM attack, where he/she can intercept and tamper\n> with the multisig configuration file, potentially swapping in their own\n> XPUBs. This is especially important for remote multisig setups - which is\n> not common now but I imagine will be a lot more common in the future.\n>\n> This is because the shared secret (TOKEN) must still be shared securely,\n>> and if you have established an (off-protocol) secure channel to do this,\n>> why not just share the actual multisig configuration data directly in that\n>> channel?\n>\n>\n> Because multisig is inherently an interactive process. If we can create\n> the multisig configuration in one shot for everybody, you're correct that\n> this is not necessary! But the fact that multisig is by nature interactive\n> and requires a few rounds of communication (since it needs each Signer to\n> voluntarily share its XPUB before a wallet can be created) makes this\n> necessary IMO.\n>\n> If you are able to do so, you retain the advantage of being able to\n>> inspect the data directly.\n>\n>\n> Note that some manual inspection is still part of the proposal. But\n> instead of exclusively relying on manual inspection (which is error-prone,\n> and also doesn't scale very well for a large number of signers), we\n> strengthen this process by automating some of the checks and making it\n> harder to tamper with.\n>\n>\n>>\n>> 2. Asking the user to enter the derivation into the Signer also adds (IMO\n>> unnecessary) complexity to the multisig setup process. A different way of\n>> doing it, which is specified in the UR crypto-account format linked to\n>> previously, has the Signer provide as many common derivations (along with\n>> their xpubs) as it can support for a given BIP44 account number. This has\n>> the dual advantage of making things simpler for the user (they only have to\n>> provide an optional account number) and increasing the standardisation on\n>> common derivation paths. On receiving these derivation/xpub pairs, the\n>> Coordinator can simply pick the appropriate one.\n>>\n>\n> Note that in the updated proposal, I added the option of the Signer\n> automatically filling in the derivation paths on behalf of the user (and\n> also should take care not to reuse XPUBs). Perhaps this can be made the\n> default behavior.\n>\n> Best,\n> Hugo\n>\n>\n>>\n>> These concerns noted, I agree it's a good idea to have Signers save the\n>> multisig configuration as proposed, and it would be great to have\n>> standardisation in hww import and export formats (not just for multisig).\n>> On that note, I'd love to see greater adoption of the efficient UR2.0\n>> standard and associated formats for airgapped data transmission using QR\n>> codes.\n>>\n>> Craig\n>>\n>>\n>> On Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi all,\n>>> I have updated the proposal based on further feedback. The new spec is\n>>> included at the bottom.\n>>>\n>>> I have also created a public Github PR to make it easier to comment on\n>>> the text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .\n>>>\n>>> Could someone please let me know what else needs to be done before a BIP\n>>> number can be assigned?\n>>>\n>>>\n>>> === Quick summary of changes from last update ===\n>>>\n>>> 1. Define encryption modes\n>>>\n>>> # NO_ENCRYPTION: Encryption is disabled.\n>>> # STANDARD : the TOKEN is a 64-bit nonce.\n>>> # EXTENDED : the TOKEN is a 128-bit nonce.\n>>>\n>>> 2. Define signature algorithm\n>>>\n>>> Follow BIP-0322, legacy format allowed.\n>>>\n>>> 3. Multiple TOKENs (optional)\n>>>\n>>> Also add an option where the Coordinator can choose to use one common\n>>> TOKEN for all Signers, or use one per Signer.\n>>>\n>>> === End of summary ===\n>>>\n>>>\n>>> Cheers,\n>>> Hugo\n>>>\n>>>\n>>> <pre>\n>>>   BIP: To be determined\n>>>   Layer: Applications\n>>>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at\n>>> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <\n>>> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>,\n>>> Rodolfo Novak <rodolfo at coinkite.com>\n>>>   Comments-Summary: No comments yet.\n>>>   Comments-URI:\n>>>   Status: Proposed\n>>>   Type: Standards Track\n>>>   Created: 2020-11-10\n>>>   License: BSD-2-Clause\n>>> </pre>\n>>>\n>>> ==Introduction==\n>>>\n>>> ===Abstract===\n>>>\n>>> This document proposes a mechanism to set up multisig wallets securely.\n>>>\n>>> ===Copyright===\n>>>\n>>> This BIP is licensed under the 2-clause BSD license.\n>>>\n>>> ===Motivation===\n>>>\n>>> The Bitcoin multisig experience has been greatly streamlined under [\n>>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174\n>>> (Partially Signed Bitcoin Transaction)]. However, what is still missing\n>>> is a standardized process for setting up multisig wallets securely across\n>>> different vendors.\n>>>\n>>> There are a number of concerns when it comes to setting up a multisig\n>>> wallet:\n>>>\n>>> # Whether the multisig configuration, such as Signer membership, script\n>>> type, derivation paths and number of signatures required, is correct and\n>>> not tampered with.\n>>> # Whether Signer persists the multisig configuration in their respective\n>>> storage, and under what format.\n>>> # Whether Signer's storage is tamper-proof.\n>>> # Whether Signer subsequently uses the multisig configuration to\n>>> generate and verify receive and change addresses.\n>>>\n>>> An attacker who can modify the multisig configuration can steal or hold\n>>> funds to ransom by duping the user into sending funds to the wrong address.\n>>>\n>>> This proposal seeks to address concerns #1 and #2: to mitigate the risk\n>>> of tampering during the initial setup phase, and to define an interoperable\n>>> multisig configuration format.\n>>>\n>>> Concerns #3 and #4 should be handled by Signers and is out of scope of\n>>> this proposal.\n>>>\n>>> ==Specification==\n>>>\n>>> ===Prerequisites===\n>>> This proposal assumes the parties in the multisig support [\n>>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n>>> BIP-0032], [\n>>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the\n>>> descriptor language] and encryption.\n>>>\n>>> ===Roles===\n>>> ====Coordinator====\n>>>\n>>> The Coordinator initiates the multisig setup. The Coordinator determines\n>>> what type of multisig is used and the exact policy script. If encryption is\n>>> enabled, the Coordinator also distributes a shared secret or shared secrets\n>>> to the parties involved for secure communication. The Coordinator gathers\n>>> information from the Signers to generate a descriptor record. The\n>>> Coordinator distributes the descriptor record back to the Signers.\n>>>\n>>> ====Signer====\n>>>\n>>> The Signer is a participating member in the multisig. Its\n>>> responsibilities include providing its key record -- which contains an\n>>> Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB\n>>> is included in the descriptor record and persisting the descriptor record\n>>> in its storage.\n>>>\n>>> ===Setup Process===\n>>>\n>>> ====Round 1====\n>>>\n>>> =====Coordinator=====\n>>>\n>>> * The Coordinator creates a multisig wallet creation session. The\n>>> Coordinator constructs the multisig script and its policy parameters, such\n>>> as the total number of signers and the required number of signatures\n>>> (<tt>M</tt> and <tt>N</tt>).\n>>> * The session should expire after some time period determined by the\n>>> Coordinator, e.g., 24 hours.\n>>> * If encryption is enabled, the Coordinator distributes a secret\n>>> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the\n>>> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the\n>>> Encryption section below for details on the <tt>TOKEN</tt>, the key\n>>> derivation function and the encryption scheme. Depending on the use case,\n>>> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for\n>>> all Signers, or to have one per Signer.\n>>> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and\n>>> all the encryption/decryption steps below can be skipped.\n>>>\n>>> =====Signer=====\n>>>\n>>> * The Signer initiates a new secure multisig setup session by setting\n>>> the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the\n>>> <tt>TOKEN</tt>. The Signer can keep the session open until a different\n>>> value for the <tt>TOKEN</tt> is set.\n>>> * The Signer generates a key record by prompting the user for a multisig\n>>> derivation path and retrieves the XPUB at that derivation path. Optionally,\n>>> the Signer can choose a path on behalf of the user. If the Signer chooses\n>>> the path, it should try to avoid reusing XPUBs for different wallets.\n>>> * The first line in the record must be the <tt>TOKEN</tt>. The second\n>>> line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key\n>>> origin information, written in the descriptor-defined format, i.e.:\n>>> <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The third line\n>>> must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by\n>>> using the private key associated with the XPUB to sign the first two\n>>> lines.  The signature should follow [\n>>> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\n>>> BIP-0322], legacy format accepted. Finally, the Signer encrypts the entire\n>>> record with <tt>ENCRYPTION_KEY</tt>.\n>>>\n>>> ====Round 2====\n>>>\n>>> =====Coordinator=====\n>>>\n>>> * The Coordinator gathers key records from all participating Signers.\n>>> Abort the setup if the wallet setup session has expired.\n>>> * For each key record, the Coordinator decrypts it using\n>>> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included\n>>> <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n>>> * If all key records look good, the Coordinator fills in all necessary\n>>> information to generate a descriptor record, which is simply the descriptor\n>>> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has\n>>> [\n>>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\n>>> BECH32 encoding].\n>>> * The Coordinator encrypts this descriptor record with\n>>> <tt>ENCRYPTION_KEY</tt>.\n>>> * The Coordinator sends the encrypted descriptor record to all\n>>> participating Signers.\n>>>\n>>> =====Signer=====\n>>>\n>>> * The Signer imports the descriptor record, decrypts it using the\n>>> <tt>ENCRYPTION_KEY</tt> derived from the open session.\n>>> * The Signer calculates and verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\n>>> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.\n>>> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor\n>>> belongs to it, using path and fingerprint information included in the\n>>> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and\n>>> not using shortcuts such as matching fingerprints (which is trivial to\n>>> spoof). Abort the setup if it doesn\u2019t detect its own <tt>KEY</tt>.\n>>> * For confirmation, the Signer must display to the user the\n>>> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and\n>>> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to\n>>> prevent a <tt>KEY</tt> insertion attack. All participating Signers should\n>>> be able to display the same confirmation.\n>>> * If all checks pass, the Signer persists the descriptor record in its\n>>> storage.\n>>> * The Signer can choose to further restrict post-XPUB derivation paths,\n>>> such as to those defined in [\n>>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\n>>> BIP-0044].\n>>> * The Signer should subsequently use the descriptor to generate and\n>>> verify receive and change addresses.\n>>>\n>>> This completes the setup.\n>>>\n>>> ===Encryption===\n>>>\n>>> ====The Token====\n>>> We define three modes of encryption.\n>>>\n>>> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.\n>>> Encryption is disabled.\n>>> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n>>> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.\n>>>\n>>> The <tt>TOKEN</tt> can be converted to one of these formats:\n>>> * A mnemonic phrase using [\n>>> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n>>> BIP-0039] word list (6 words in <tt>STANDARD</tt> mode, 12 words in\n>>> <tt>EXTENDED</tt> mode)\n>>> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in\n>>> <tt>EXTENDED</tt> mode)\n>>> * A QR code\n>>> * Other formats\n>>>\n>>> The flexibility in the data format allows each Signer to customize the\n>>> User Experience based on its respective capabilities.\n>>>\n>>> ====Key Derivation====\n>>> The key derivation function is [https://tools.ietf.org/html/rfc2898\n>>> PBKDF2], with PRF = SHA512. Specifically:\n>>>\n>>> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n>>>\n>>> Whereas:\n>>>\n>>> * PRF = <tt>SHA512</tt>\n>>> * Password = <tt>\"No SPOF\"</tt>\n>>> * Salt = <tt>TOKEN</tt>\n>>> * c = <tt>2048</tt>\n>>> * dkLen = <tt>256</tt>\n>>> * DK = Derived <tt>ENCRYPTION_KEY</tt>\n>>>\n>>> ====Encryption Scheme====\n>>> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR\n>>> mode].\n>>>\n>>> ==QR Codes==\n>>> For signers that use QR codes to transmit data, key and descriptor\n>>> records can be converted to QR codes, following [\n>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n>>> the BCR standard].\n>>>\n>>> Also refer to [\n>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n>>> UR Type Definition for BIP44 Accounts] and [\n>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n>>> UR Type Definition for Bitcoin Output Descriptors] for more details.\n>>>\n>>> ==Security==\n>>>\n>>> This proposal introduces two layers of protection. The first one is a\n>>> temporary, secret token, used to encrypt the two rounds of communication\n>>> between the Signer and the Coordinator. The second one is through the\n>>> descriptor checksum and visual inspection of the descriptor itself.\n>>>\n>>> The token is only needed during the setup phase, and can be safely\n>>> thrown away afterwards. The token does not guarantee that the Signer\n>>> membership set is not modified, since that depends on the overall security\n>>> of all parties in the setup, but it can make it significantly harder for an\n>>> attacker to do so.\n>>>\n>>> There are three ways an attacker can modify the membership set: by\n>>> changing an existing member, by removing an existing member, or by adding a\n>>> new member.\n>>>\n>>> For the first two methods, one of the Signers will be able to detect\n>>> that its membership has been changed or removed, and reject the final\n>>> descriptor. Thus, it is vital that all participating Signers check that\n>>> their membership is intact in the descriptor. Even one Signer failing to\n>>> check for its membership means that the setup could be compromised.\n>>>\n>>> For the third type of attack, the descriptor checksum and visual\n>>> inspection of the descriptor itself are the only way to guard against\n>>> malicious members from being inserted into the set.\n>>>\n>>> ==Acknowledgement==\n>>>\n>>> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and\n>>> others for their feedback on the specification.\n>>>\n>>> ==References==\n>>>\n>>> Original mailing list thread:\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/e33af953/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Bitcoin Secure Multisig Setup",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Hugo Nguyen",
                "Christopher Allen",
                "Pavol Rusnak",
                "Peter D. Gray",
                "Craig Raw",
                "Dmitry Petukhov"
            ],
            "messages_count": 24,
            "total_messages_chars_count": 150653
        }
    },
    {
        "title": "[bitcoin-dev] Proposal to stop processing of unrequested transactions in Bitcoin Core",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-02-10T13:13:34",
                "message_text_only": "Hi,\n\nI'm proposing to stop the processing of unrequested transactions in Bitcoin\nCore 22.0+ at TX message reception. An unrequested transaction is one\ndefined by which a \"getdata\" message for its specific identifier (either\ntxid or wtxid) has not been previously issued by the node [0].\n\nThis change is motivated by reducing the CPU DoS surface of Bitcoin Core\naround mempool acceptance. Currently, an attacker can open multiple inbound\nconnections to a node and send expensive to validate, junk transactions.\nOnce the canonical INV/GETDATA sequence is enforced on the network, a\nfurther protection would be to deprioritize bandwidth and validation\nresources allocation, or even to wither connections with such DoSy peers. A\npermissioned peer (PF_RELAY) will still be able to bypass such restrictions.\n\nRaw TX message processing has always been tolerated by Core and as such\nsome Bitcoin clients aren't bothering with an INV/GETDATA sequence. Such\nchange will break their tx-relay capabilities on the p2p network and\nrequire adaptation from them. Given deployment time of any release, I hope\nit provides a window time wide enough before the old tx-processing behavior\nbecomes the minority.\n\nEager to gather feedback on this proposal, especially if such change is\ndeemed as too much constraining or fast on any Bitcoin software.\n\nCheers,\nAntoine\n\n[0] See https://github.com/bitcoin/bitcoin/pull/20277\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210210/16d1a33d/attachment.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-02-11T18:29:35",
                "message_text_only": "I'm not sure of the existing behavior is of when we issue a getdata\nrequest, but noting that there could be a privacy implication of this sort\nof change. Could you (or someone else) expand on why this is not a concern\nhere?\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Wed, Feb 10, 2021 at 6:29 AM Antoine Riard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> I'm proposing to stop the processing of unrequested transactions in\n> Bitcoin Core 22.0+ at TX message reception. An unrequested transaction is\n> one defined by which a \"getdata\" message for its specific identifier\n> (either txid or wtxid) has not been previously issued by the node [0].\n>\n> This change is motivated by reducing the CPU DoS surface of Bitcoin Core\n> around mempool acceptance. Currently, an attacker can open multiple inbound\n> connections to a node and send expensive to validate, junk transactions.\n> Once the canonical INV/GETDATA sequence is enforced on the network, a\n> further protection would be to deprioritize bandwidth and validation\n> resources allocation, or even to wither connections with such DoSy peers. A\n> permissioned peer (PF_RELAY) will still be able to bypass such restrictions.\n>\n> Raw TX message processing has always been tolerated by Core and as such\n> some Bitcoin clients aren't bothering with an INV/GETDATA sequence. Such\n> change will break their tx-relay capabilities on the p2p network and\n> require adaptation from them. Given deployment time of any release, I hope\n> it provides a window time wide enough before the old tx-processing behavior\n> becomes the minority.\n>\n> Eager to gather feedback on this proposal, especially if such change is\n> deemed as too much constraining or fast on any Bitcoin software.\n>\n> Cheers,\n> Antoine\n>\n> [0] See https://github.com/bitcoin/bitcoin/pull/20277\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/828bd719/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-02-11T21:15:15",
                "message_text_only": "> I'm not sure of the existing behavior is of when we issue a getdata request, but noting that there could be a privacy implication of this sort of change. Could you (or someone else) expand on why this is not a concern here?\n\nWhat kind of privacy concern are you talking about? I'm not sure I see how this could matter.\n\nCheers,\n\n--\nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/fb0c9a2f/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-02-12T11:49:42",
                "message_text_only": "Hi Jeremy,\n\nIf I understand correctly your concern, you're worried that change would\nease discovery of the node's tx-relay topology ? I don't scope transaction\norigin inference, if you suppose the\nunrequested-tx peer sending is the attacker it must have learnt the\ntransaction from somewhere else which is more likely to be the tx owner\nrather than the probed node.\n\nAs far I can think of this change, a peer might send an unrequested\ntransaction to this node and observe that it's either a) processed, the\nnode has learnt about the txid from another peer or b) rejected, the node\nhas never learnt about the txid. The outcome can be queried by sending a\nGETDATA for the \"is-unrequested\" txid.\n\nI think the same result can already be achieved by sending an INV and\nobserving if a GETDATA is replied back to guess the presence of another\npeer with already the knowledge of the txid. Or alternatively, just connect\nto this other peer and wait for an announcement.\n\nWhat else can we think of ?\n\n>From my side, compared to the already-existing heuristics, I don't see how\nthis change is easing attackers' work. That said, I don't deny our\ntransaction announcements/requests logic is worthy of more study about its\nprivacy properties, especially when you acknowledge the recent overhaul of\nthe transaction request and the upcoming Erlay changes.\n\nCheers,\nAntoine\n\nLe jeu. 11 f\u00e9vr. 2021 \u00e0 16:15, Pieter Wuille <bitcoin-dev at wuille.net> a\n\u00e9crit :\n\n>\n> I'm not sure of the existing behavior is of when we issue a getdata\n> request, but noting that there could be a privacy implication of this sort\n> of change. Could you (or someone else) expand on why this is not a concern\n> here?\n>\n>\n> What kind of privacy concern are you talking about? I'm not sure I see how\n> this could matter.\n>\n> Cheers,\n>\n> --\n> Pieter\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/43b4e0e4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal to stop processing of unrequested transactions in Bitcoin Core",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pieter Wuille",
                "Jeremy",
                "Antoine Riard"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6342
        }
    },
    {
        "title": "[bitcoin-dev] Yesterday's Taproot activation meeting on lockinontimeout (LOT)",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-02-17T12:51:41",
                "message_text_only": "Yesterday (February 16th) we held a second meeting on Taproot\nactivation on IRC which again was open to all. Despite what appeared\nto be majority support for LOT=false over LOT=true in the first\nmeeting I (and others) thought the arguments had not been explored in\ndepth and that we should have a follow up meeting almost entirely\nfocused on whether LOT (lockinontimeout) should be set to true or\nfalse.\n\nThe meeting was announced here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n\nIn that mailing list post I outlined the arguments for LOT=true (T1 to\nT6) and arguments for LOT=false (F1 to F6) in their strongest form I\ncould. David Harding responded with an additional argument for\nLOT=false (F7) here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n\nThese meetings are very challenging given they are open to all, you\ndon\u2019t know who will attend and you don\u2019t know most people\u2019s views in\nadvance. I tried to give time for both the LOT=true arguments and the\nLOT=false arguments to be discussed as I knew there was support for\nboth. We only tried evaluating which had more support and which had\nmore strong opposition towards the end of the meeting.\n\nThe conversation log is here:\nhttp://gnusha.org/taproot-activation/2021-02-16.log\n\n(If you are so inclined you can watch a video of the meeting here.\nThanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\nhttps://www.youtube.com/watch?v=vpl5q1ovMLM)\n\nA summary of the meeting was provided by Luke Dashjr on Mastodon here:\nhttps://bitcoinhackers.org/@lukedashjr/105742918779234566\n\nToday's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\ndid manage to come to consensus on everything but LockinOnTimeout.\n\nActivation height range: 693504-745920\n\nMASF threshold: 1815/2016 blocks (90%)\n\nKeep in mind only ~100 people showed for the meetings, hardly\nrepresentative of the entire community.\n\nSo, these details remain JUST a proposal for now.\n\nIt seems inevitable that there won't be consensus on LOT.\n\nEveryone will have to choose for himself. :/\n\nPersonally I agree with most of this. I agree that there wasn\u2019t\noverwhelming consensus for either LOT=true or LOT=false. However, from\nmy perspective there was clearly more strong opposition (what would\nusually be deemed a NACK in Bitcoin Core review terminology) from\nBitcoin Core contributors, Lightning developers and other community\nmembers against LOT=true than there was for LOT=false. Andrew Chow\ntried to summarize views from the meeting in this analysis:\nhttps://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n\nI am also aware of other current and previous Bitcoin Core\ncontributors and Lightning developers who didn\u2019t attend the meeting in\nperson who are opposed to LOT=true. I don\u2019t want to put them in the\nspotlight for no reason but if you go through the conversation logs of\nnot only the meeting but the weeks of discussion prior to this meeting\nyou will see their views evaluated on the ##taproot-activation\nchannel. In addition, on taprootactivation.com some mining pools\nexpressed a preference for lot=false though I don\u2019t know how strong\nthat preference was.\n\nI am only one voice but it is my current assessment that if we are to\nattempt to finalize Taproot activation parameters and propose them to\nthe community at this time our only option is to propose LOT=false.\nAny further delay appears to me counterproductive in our collective\naim to get the Taproot soft fork activated as early as possible.\n\nObviously others are free to disagree with that assessment and\ncontinue discussions but personally I will be attempting to avoid\nthose discussions unless prominent new information comes to light or\nvarious specific individuals change their minds.\n\nNext week we are planning a code review of the Bitcoin Core PR #19573\nwhich was initially delayed because of this LOT discussion. As I\u2019ve\nsaid previously that will be loosely following the format of the\nBitcoin Core PR review club and will be lower level and more\ntechnical. That is planned for Tuesday February 23rd at 19:00 UTC on\nthe IRC channel ##taproot-activation.\n\nThanks to the meeting participants (and those who joined the\ndiscussion on the channel prior and post the meeting) for engaging\nproductively and in good faith.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Ariel Lorenzo-Luaces",
                "date": "2021-02-18T05:43:10",
                "message_text_only": "Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n\nIt appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n\nA UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.\n\nHell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.\n\nThe only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).\n\nI say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.\n\nThe argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n\nDoes no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.\nThe result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.\nHow is that strictly safer or more coordinated?\n\nI may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.\n\nMaybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.\n\nAn activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n\nCheers\nAriel Lorenzo-Luaces\n\n\nOn Feb 17, 2021, 7:05 AM, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Yesterday (February 16th) we held a second meeting on Taproot\n>activation on IRC which again was open to all. Despite what appeared\n>to be majority support for LOT=false over LOT=true in the first\n>meeting I (and others) thought the arguments had not been explored in\n>depth and that we should have a follow up meeting almost entirely\n>focused on whether LOT (lockinontimeout) should be set to true or\n>false.\n>\n>The meeting was announced here:\n>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>\n>In that mailing list post I outlined the arguments for LOT=true (T1 to\n>T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>could. David Harding responded with an additional argument for\n>LOT=false (F7) here:\n>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>\n>These meetings are very challenging given they are open to all, you\n>don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>advance. I tried to give time for both the LOT=true arguments and the\n>LOT=false arguments to be discussed as I knew there was support for\n>both. We only tried evaluating which had more support and which had\n>more strong opposition towards the end of the meeting.\n>\n>The conversation log is here:\n>http://gnusha.org/taproot-activation/2021-02-16.log\n>\n>(If you are so inclined you can watch a video of the meeting here.\n>Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>\n>A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>\n>Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>did manage to come to consensus on everything but LockinOnTimeout.\n>\n>Activation height range: 693504-745920\n>\n>MASF threshold: 1815/2016 blocks (90%)\n>\n>Keep in mind only ~100 people showed for the meetings, hardly\n>representative of the entire community.\n>\n>So, these details remain JUST a proposal for now.\n>\n>It seems inevitable that there won't be consensus on LOT.\n>\n>Everyone will have to choose for himself. :/\n>\n>Personally I agree with most of this. I agree that there wasn\u2019t\n>overwhelming consensus for either LOT=true or LOT=false. However, from\n>my perspective there was clearly more strong opposition (what would\n>usually be deemed a NACK in Bitcoin Core review terminology) from\n>Bitcoin Core contributors, Lightning developers and other community\n>members against LOT=true than there was for LOT=false. Andrew Chow\n>tried to summarize views from the meeting in this analysis:\n>https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>\n>I am also aware of other current and previous Bitcoin Core\n>contributors and Lightning developers who didn\u2019t attend the meeting in\n>person who are opposed to LOT=true. I don\u2019t want to put them in the\n>spotlight for no reason but if you go through the conversation logs of\n>not only the meeting but the weeks of discussion prior to this meeting\n>you will see their views evaluated on the ##taproot-activation\n>channel. In addition, on taprootactivation.com some mining pools\n>expressed a preference for lot=false though I don\u2019t know how strong\n>that preference was.\n>\n>I am only one voice but it is my current assessment that if we are to\n>attempt to finalize Taproot activation parameters and propose them to\n>the community at this time our only option is to propose LOT=false.\n>Any further delay appears to me counterproductive in our collective\n>aim to get the Taproot soft fork activated as early as possible.\n>\n>Obviously others are free to disagree with that assessment and\n>continue discussions but personally I will be attempting to avoid\n>those discussions unless prominent new information comes to light or\n>various specific individuals change their minds.\n>\n>Next week we are planning a code review of the Bitcoin Core PR #19573\n>which was initially delayed because of this LOT discussion. As I\u2019ve\n>said previously that will be loosely following the format of the\n>Bitcoin Core PR review club and will be lower level and more\n>technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>the IRC channel ##taproot-activation.\n>\n>Thanks to the meeting participants (and those who joined the\n>discussion on the channel prior and post the meeting) for engaging\n>productively and in good faith.\n>\n>-- \n>Michael Folkson\n>Email: michaelfolkson at gmail.com\n>Keybase: michaelfolkson\n>PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210217/689747ce/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-02-18T11:01:29",
                "message_text_only": "Thanks for your response Ariel. It would be useful if you responded to\nspecific points I have made in the mailing list post or at least quote\nthese ephemeral \"people\" you speak of. I don't know if you're responding to\nconversation on the IRC channel or on social media etc.\n\n> The argument comes from a naive assumption that users MUST upgrade to the\nchoice that is submitted into code. But in fact this isn't true and some\nvoices in this discussion need to be more humble about what users must or\nmust not run.\n\nI personally have never made this assumption. Of course users aren't forced\nto run any particular software version, quite the opposite. Defaults set in\nsoftware versions matter though as many users won't change them.\n\n> Does no one realize that it is a very possible outcome that if LOT=true\nis released there may be only a handful of people that begin running it\nwhile everyone else delays their upgrade (with the very good reason of not\ngetting involved in politics) and a year later those handful of people just\nbecome stuck at the moment of MUST_SIGNAL, unable to mine new blocks?\n\nIt is a possible outcome but the likely outcome is that miners activate\nTaproot before LOT is even relevant. I think it is prudent to prepare for\nthe unlikely but possible outcome that miners fail to activate and hence\nhave this discussion now rather than be unprepared for that eventuality. If\nLOT is set to false in a software release there is the possibility (T2 in\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)\nof individuals or a proportion of the community changing LOT to true. In\nthat sense setting LOT=false in a software release appears to be no more\nsafe than LOT=true.\n\n> The result: a wasted year of waiting and a minority of people who didn't\nwant to be lenient with miners by default.\n\nThere is the (unlikely but possible) possibility of a wasted year if LOT is\nset to false and miners fail to activate. I'm not convinced by this\nperception that LOT=true is antagonistic to miners. I actually think it\noffers them clarity on what will happen over a year time period and removes\nthe need for coordinated or uncoordinated community UASF efforts on top of\nLOT=false.\n\n> An activation mechanism is a consensus change like any other change, can\nbe contentious like any other change, and we must resolve it like any other\nchange. Otherwise we risk arriving at the darkest timeline.\n\nI don't know what you are recommending here to avoid \"this darkest\ntimeline\". Open discussions have occurred and are continuing and in my\nmailing list post that you responded to **I recommended we propose\nLOT=false be set in protocol implementations such as Bitcoin Core**. I do\nthink this apocalyptic language isn't particularly helpful. In an open\nconsensus system discussion is healthy, we should prepare for bad or worst\ncase scenarios in advance and doing so is not antagonistic or destructive.\nMining pools have pledged support for Taproot but we don't build secure\nsystems based on pledges of support, we build them to minimize trust in any\nhuman actors. We can be grateful that people like Alejandro have worked\nhard on taprootactivation.com (and this effort has informed the discussion)\nwithout taking pledges of support as cast iron guarantees.\n\nTL;DR It sounds like you agree with my recommendation to set LOT=false in\nprotocol implementations in my email :)\n\n\n\n\nOn Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com>\nwrote:\n\n> Something what strikes me about the conversation is the emotion\n> surrounding the letters UASF.\n>\n> It appears as if people discuss UASF as if it's a massive tidal wave of\n> support that is inevitable, like we saw during segwit activation. But the\n> actual definition is \"any activation that is not a MASF\".\n>\n> A UASF can consist of a single node, ten nodes, a thousand, half of all\n> nodes, all business' nodes, or even all the non mining nodes. On another\n> dimension it can have zero mining support, 51% support, 49% support, or any\n> support right up against a miner activation threshold.\n>\n> Hell a UASF doesn't even need code or even a single node running as long\n> as it exists as a possibility in people's minds.\n>\n> The only thing a UASF doesn't have is miner support above an agreed\n> activation threshold (some number above %51).\n>\n> I say this because it strikes me when people say that they are for\n> LOT=true with the logic that since a UASF is guaranteed to happen then it's\n> better to just make it default from the beginning. Words like coordination\n> and safety are sometimes sprinkled into the argument.\n>\n> The argument comes from a naive assumption that users MUST upgrade to the\n> choice that is submitted into code. But in fact this isn't true and some\n> voices in this discussion need to be more humble about what users must or\n> must not run.\n>\n> Does no one realize that it is a very possible outcome that if LOT=true is\n> released there may be only a handful of people that begin running it while\n> everyone else delays their upgrade (with the very good reason of not\n> getting involved in politics) and a year later those handful of people just\n> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or\n> attracting a minority of miners, activating, and forking off into a\n> minority fork. Then a lot=false could be started that ends up activating\n> the feature now that the stubborn option has ran its course.\n> The result: a wasted year of waiting and a minority of people who didn't\n> want to be lenient with miners by default. The chains could be called\n> BitcoinLenient and BitcoinStubborn.\n> How is that strictly safer or more coordinated?\n>\n> I may be in the minority, or maybe a silent majority, or maybe a majority\n> that just hasn't considered this as a choice but honestly if there is\n> contention about whether we're going to be stubborn or lenient with miners\n> for Taproot and in the future then I prefer to just not activate anything\n> at all. I'm fine for calling bitcoin ossified, accepting that segwit is\n> Bitcoin's last network upgrade. Taproot is amazing but no new feature is\n> worth a network split down the middle.\n>\n> Maybe in 10 or 20 years, when other blockchains implement features like\n> Taproot and many more, we will become envious enough to put aside our\n> differences on how to behave towards miners and finally activate Taproot.\n>\n> An activation mechanism is a consensus change like any other change, can\n> be contentious like any other change, and we must resolve it like any other\n> change. Otherwise we risk arriving at the darkest timeline.\n>\n> Cheers\n> Ariel Lorenzo-Luaces\n> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Yesterday (February 16th) we held a second meeting on Taproot\n>> activation on IRC which again was open to all. Despite what appeared\n>> to be majority support for LOT=false over LOT=true in the first\n>> meeting I (and others) thought the arguments had not been explored in\n>> depth and that we should have a follow up meeting almost entirely\n>> focused on whether LOT (lockinontimeout) should be set to true or\n>> false.\n>>\n>> The meeting was announced here:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>>\n>> In that mailing list post I outlined the arguments for LOT=true (T1 to\n>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>> could. David Harding responded with an additional argument for\n>> LOT=false (F7) here:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>>\n>> These meetings are very challenging given they are open to all, you\n>> don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>> advance. I tried to give time for both the LOT=true arguments and the\n>> LOT=false arguments to be discussed as I knew there was support for\n>> both. We only tried evaluating which had more support and which had\n>> more strong opposition towards the end of the meeting.\n>>\n>> The conversation log is here:\n>> http://gnusha.org/taproot-activation/2021-02-16.log\n>>\n>> (If you are so inclined you can watch a video of the meeting here.\n>> Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>> https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>>\n>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>>\n>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>> did manage to come to consensus on everything but LockinOnTimeout.\n>>\n>> Activation height range: 693504-745920\n>>\n>> MASF threshold: 1815/2016 blocks (90%)\n>>\n>> Keep in mind only ~100 people showed for the meetings, hardly\n>> representative of the entire community.\n>>\n>> So, these details remain JUST a proposal for now.\n>>\n>> It seems inevitable that there won't be consensus on LOT.\n>>\n>> Everyone will have to choose for himself. :/\n>>\n>> Personally I agree with most of this. I agree that there wasn\u2019t\n>> overwhelming consensus for either LOT=true or LOT=false. However, from\n>> my perspective there was clearly more strong opposition (what would\n>> usually be deemed a NACK in Bitcoin Core review terminology) from\n>> Bitcoin Core contributors, Lightning developers and other community\n>> members against LOT=true than there was for LOT=false. Andrew Chow\n>> tried to summarize views from the meeting in this analysis:\n>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>>\n>> I am also aware of other current and previous Bitcoin Core\n>> contributors and Lightning developers who didn\u2019t attend the meeting in\n>> person who are opposed to LOT=true. I don\u2019t want to put them in the\n>> spotlight for no reason but if you go through the conversation logs of\n>> not only the meeting but the weeks of discussion prior to this meeting\n>> you will see their views evaluated on the ##taproot-activation\n>> channel. In addition, on taprootactivation.com some mining pools\n>> expressed a preference for lot=false though I don\u2019t know how strong\n>> that preference was.\n>>\n>> I am only one voice but it is my current assessment that if we are to\n>> attempt to finalize Taproot activation parameters and propose them to\n>> the community at this time our only option is to propose LOT=false.\n>> Any further delay appears to me counterproductive in our collective\n>> aim to get the Taproot soft fork activated as early as possible.\n>>\n>> Obviously others are free to disagree with that assessment and\n>> continue discussions but personally I will be attempting to avoid\n>> those discussions unless prominent new information comes to light or\n>> various specific individuals change their minds.\n>>\n>> Next week we are planning a code review of the Bitcoin Core PR #19573\n>> which was initially delayed because of this LOT discussion. As I\u2019ve\n>> said previously that will be loosely following the format of the\n>> Bitcoin Core PR review club and will be lower level and more\n>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>> the IRC channel ##taproot-activation.\n>>\n>> Thanks to the meeting participants (and those who joined the\n>> discussion on the channel prior and post the meeting) for engaging\n>> productively and in good faith.\n>>\n>>\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/e09ce26a/attachment-0001.html>"
            },
            {
                "author": "Samson Mow",
                "date": "2021-02-18T11:11:54",
                "message_text_only": "\"An activation mechanism is a consensus change like any other change, can\nbe contentious like any other change, and we must resolve it like any other\nchange. Otherwise we risk arriving at the darkest timeline.\"\n\nWho's we here?\n\nRelease both and let the network decide.\n\n\nOn Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Thanks for your response Ariel. It would be useful if you responded to\n> specific points I have made in the mailing list post or at least quote\n> these ephemeral \"people\" you speak of. I don't know if you're responding to\n> conversation on the IRC channel or on social media etc.\n>\n> > The argument comes from a naive assumption that users MUST upgrade to\n> the choice that is submitted into code. But in fact this isn't true and\n> some voices in this discussion need to be more humble about what users must\n> or must not run.\n>\n> I personally have never made this assumption. Of course users aren't\n> forced to run any particular software version, quite the opposite. Defaults\n> set in software versions matter though as many users won't change them.\n>\n> > Does no one realize that it is a very possible outcome that if LOT=true\n> is released there may be only a handful of people that begin running it\n> while everyone else delays their upgrade (with the very good reason of not\n> getting involved in politics) and a year later those handful of people just\n> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?\n>\n> It is a possible outcome but the likely outcome is that miners activate\n> Taproot before LOT is even relevant. I think it is prudent to prepare for\n> the unlikely but possible outcome that miners fail to activate and hence\n> have this discussion now rather than be unprepared for that eventuality. If\n> LOT is set to false in a software release there is the possibility (T2 in\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)\n> of individuals or a proportion of the community changing LOT to true. In\n> that sense setting LOT=false in a software release appears to be no more\n> safe than LOT=true.\n>\n> > The result: a wasted year of waiting and a minority of people who didn't\n> want to be lenient with miners by default.\n>\n> There is the (unlikely but possible) possibility of a wasted year if LOT\n> is set to false and miners fail to activate. I'm not convinced by this\n> perception that LOT=true is antagonistic to miners. I actually think it\n> offers them clarity on what will happen over a year time period and removes\n> the need for coordinated or uncoordinated community UASF efforts on top of\n> LOT=false.\n>\n> > An activation mechanism is a consensus change like any other change, can\n> be contentious like any other change, and we must resolve it like any other\n> change. Otherwise we risk arriving at the darkest timeline.\n>\n> I don't know what you are recommending here to avoid \"this darkest\n> timeline\". Open discussions have occurred and are continuing and in my\n> mailing list post that you responded to **I recommended we propose\n> LOT=false be set in protocol implementations such as Bitcoin Core**. I do\n> think this apocalyptic language isn't particularly helpful. In an open\n> consensus system discussion is healthy, we should prepare for bad or worst\n> case scenarios in advance and doing so is not antagonistic or destructive.\n> Mining pools have pledged support for Taproot but we don't build secure\n> systems based on pledges of support, we build them to minimize trust in any\n> human actors. We can be grateful that people like Alejandro have worked\n> hard on taprootactivation.com (and this effort has informed the\n> discussion) without taking pledges of support as cast iron guarantees.\n>\n> TL;DR It sounds like you agree with my recommendation to set LOT=false in\n> protocol implementations in my email :)\n>\n>\n>\n>\n> On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <\n> arielluaces at gmail.com> wrote:\n>\n>> Something what strikes me about the conversation is the emotion\n>> surrounding the letters UASF.\n>>\n>> It appears as if people discuss UASF as if it's a massive tidal wave of\n>> support that is inevitable, like we saw during segwit activation. But the\n>> actual definition is \"any activation that is not a MASF\".\n>>\n>> A UASF can consist of a single node, ten nodes, a thousand, half of all\n>> nodes, all business' nodes, or even all the non mining nodes. On another\n>> dimension it can have zero mining support, 51% support, 49% support, or any\n>> support right up against a miner activation threshold.\n>>\n>> Hell a UASF doesn't even need code or even a single node running as long\n>> as it exists as a possibility in people's minds.\n>>\n>> The only thing a UASF doesn't have is miner support above an agreed\n>> activation threshold (some number above %51).\n>>\n>> I say this because it strikes me when people say that they are for\n>> LOT=true with the logic that since a UASF is guaranteed to happen then it's\n>> better to just make it default from the beginning. Words like coordination\n>> and safety are sometimes sprinkled into the argument.\n>>\n>> The argument comes from a naive assumption that users MUST upgrade to the\n>> choice that is submitted into code. But in fact this isn't true and some\n>> voices in this discussion need to be more humble about what users must or\n>> must not run.\n>>\n>> Does no one realize that it is a very possible outcome that if LOT=true\n>> is released there may be only a handful of people that begin running it\n>> while everyone else delays their upgrade (with the very good reason of not\n>> getting involved in politics) and a year later those handful of people just\n>> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or\n>> attracting a minority of miners, activating, and forking off into a\n>> minority fork. Then a lot=false could be started that ends up activating\n>> the feature now that the stubborn option has ran its course.\n>> The result: a wasted year of waiting and a minority of people who didn't\n>> want to be lenient with miners by default. The chains could be called\n>> BitcoinLenient and BitcoinStubborn.\n>> How is that strictly safer or more coordinated?\n>>\n>> I may be in the minority, or maybe a silent majority, or maybe a majority\n>> that just hasn't considered this as a choice but honestly if there is\n>> contention about whether we're going to be stubborn or lenient with miners\n>> for Taproot and in the future then I prefer to just not activate anything\n>> at all. I'm fine for calling bitcoin ossified, accepting that segwit is\n>> Bitcoin's last network upgrade. Taproot is amazing but no new feature is\n>> worth a network split down the middle.\n>>\n>> Maybe in 10 or 20 years, when other blockchains implement features like\n>> Taproot and many more, we will become envious enough to put aside our\n>> differences on how to behave towards miners and finally activate Taproot.\n>>\n>> An activation mechanism is a consensus change like any other change, can\n>> be contentious like any other change, and we must resolve it like any other\n>> change. Otherwise we risk arriving at the darkest timeline.\n>>\n>> Cheers\n>> Ariel Lorenzo-Luaces\n>> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> Yesterday (February 16th) we held a second meeting on Taproot\n>>> activation on IRC which again was open to all. Despite what appeared\n>>> to be majority support for LOT=false over LOT=true in the first\n>>> meeting I (and others) thought the arguments had not been explored in\n>>> depth and that we should have a follow up meeting almost entirely\n>>> focused on whether LOT (lockinontimeout) should be set to true or\n>>> false.\n>>>\n>>> The meeting was announced here:\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>>>\n>>> In that mailing list post I outlined the arguments for LOT=true (T1 to\n>>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>>> could. David Harding responded with an additional argument for\n>>> LOT=false (F7) here:\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>>>\n>>> These meetings are very challenging given they are open to all, you\n>>> don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>>> advance. I tried to give time for both the LOT=true arguments and the\n>>> LOT=false arguments to be discussed as I knew there was support for\n>>> both. We only tried evaluating which had more support and which had\n>>> more strong opposition towards the end of the meeting.\n>>>\n>>> The conversation log is here:\n>>> http://gnusha.org/taproot-activation/2021-02-16.log\n>>>\n>>> (If you are so inclined you can watch a video of the meeting here.\n>>> Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>>> https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>>>\n>>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>>> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>>>\n>>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>>> did manage to come to consensus on everything but LockinOnTimeout.\n>>>\n>>> Activation height range: 693504-745920\n>>>\n>>> MASF threshold: 1815/2016 blocks (90%)\n>>>\n>>> Keep in mind only ~100 people showed for the meetings, hardly\n>>> representative of the entire community.\n>>>\n>>> So, these details remain JUST a proposal for now.\n>>>\n>>> It seems inevitable that there won't be consensus on LOT.\n>>>\n>>> Everyone will have to choose for himself. :/\n>>>\n>>> Personally I agree with most of this. I agree that there wasn\u2019t\n>>> overwhelming consensus for either LOT=true or LOT=false. However, from\n>>> my perspective there was clearly more strong opposition (what would\n>>> usually be deemed a NACK in Bitcoin Core review terminology) from\n>>> Bitcoin Core contributors, Lightning developers and other community\n>>> members against LOT=true than there was for LOT=false. Andrew Chow\n>>> tried to summarize views from the meeting in this analysis:\n>>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>>>\n>>> I am also aware of other current and previous Bitcoin Core\n>>> contributors and Lightning developers who didn\u2019t attend the meeting in\n>>> person who are opposed to LOT=true. I don\u2019t want to put them in the\n>>> spotlight for no reason but if you go through the conversation logs of\n>>> not only the meeting but the weeks of discussion prior to this meeting\n>>> you will see their views evaluated on the ##taproot-activation\n>>> channel. In addition, on taprootactivation.com some mining pools\n>>> expressed a preference for lot=false though I don\u2019t know how strong\n>>> that preference was.\n>>>\n>>> I am only one voice but it is my current assessment that if we are to\n>>> attempt to finalize Taproot activation parameters and propose them to\n>>> the community at this time our only option is to propose LOT=false.\n>>> Any further delay appears to me counterproductive in our collective\n>>> aim to get the Taproot soft fork activated as early as possible.\n>>>\n>>> Obviously others are free to disagree with that assessment and\n>>> continue discussions but personally I will be attempting to avoid\n>>> those discussions unless prominent new information comes to light or\n>>> various specific individuals change their minds.\n>>>\n>>> Next week we are planning a code review of the Bitcoin Core PR #19573\n>>> which was initially delayed because of this LOT discussion. As I\u2019ve\n>>> said previously that will be loosely following the format of the\n>>> Bitcoin Core PR review club and will be lower level and more\n>>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>>> the IRC channel ##taproot-activation.\n>>>\n>>> Thanks to the meeting participants (and those who joined the\n>>> discussion on the channel prior and post the meeting) for engaging\n>>> productively and in good faith.\n>>>\n>>>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/ff91bcfb/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-18T11:52:05",
                "message_text_only": "Good morning all,\n\n> \"An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>\n> Who's we here?\n>\n> Release both and let the network decide.\n\nA thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n\nThis assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.\n\nRegards,\nZmnSCPxj\n\n>\n> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.\n> >\n> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n> >\n> > I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.\n> >\n> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?\n> >\n> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in\u00a0https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.\n> >\n> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.\n> >\n> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.\n> >\n> > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> >\n> > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.\n> >\n> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)\n> >\n> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:\n> >\n> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.\n> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.\n> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).\n> > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.\n> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.\n> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n> > > How is that strictly safer or more coordinated?\n> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.\n> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.\n> > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> > > Cheers\n> > > Ariel Lorenzo-Luaces\n> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >\n> > > > Yesterday (February 16th) we held a second meeting on Taproot\n> > > > activation on IRC which again was open to all. Despite what appeared\n> > > > to be majority support for LOT=false over LOT=true in the first\n> > > > meeting I (and others) thought the arguments had not been explored in\n> > > > depth and that we should have a follow up meeting almost entirely\n> > > > focused on whether LOT (lockinontimeout) should be set to true or\n> > > > false.\n> > > >\n> > > > The meeting was announced here:\n> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > > >\n> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n> > > > could. David Harding responded with an additional argument for\n> > > > LOT=false (F7) here:\n> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> > > >\n> > > > These meetings are very challenging given they are open to all, you\n> > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n> > > > advance. I tried to give time for both the LOT=true arguments and the\n> > > > LOT=false arguments to be discussed as I knew there was support for\n> > > > both. We only tried evaluating which had more support and which had\n> > > > more strong opposition towards the end of the meeting.\n> > > >\n> > > > The conversation log is here:\n> > > > http://gnusha.org/taproot-activation/2021-02-16.log\n> > > >\n> > > > (If you are so inclined you can watch a video of the meeting here.\n> > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)\n> > > >\n> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> > > >\n> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n> > > > did manage to come to consensus on everything but LockinOnTimeout.\n> > > >\n> > > > Activation height range: 693504-745920\n> > > >\n> > > > MASF threshold: 1815/2016 blocks (90%)\n> > > >\n> > > > Keep in mind only ~100 people showed for the meetings, hardly\n> > > > representative of the entire community.\n> > > >\n> > > > So, these details remain JUST a proposal for now.\n> > > >\n> > > > It seems inevitable that there won't be consensus on LOT.\n> > > >\n> > > > Everyone will have to choose for himself. :/\n> > > >\n> > > > Personally I agree with most of this. I agree that there wasn\u2019t\n> > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n> > > > my perspective there was clearly more strong opposition (what would\n> > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n> > > > Bitcoin Core contributors, Lightning developers and other community\n> > > > members against LOT=true than there was for LOT=false. Andrew Chow\n> > > > tried to summarize views from the meeting in this analysis:\n> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> > > >\n> > > > I am also aware of other current and previous Bitcoin Core\n> > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n> > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n> > > > spotlight for no reason but if you go through the conversation logs of\n> > > > not only the meeting but the weeks of discussion prior to this meeting\n> > > > you will see their views evaluated on the ##taproot-activation\n> > > > channel. In addition, on taprootactivation.com some mining pools\n> > > > expressed a preference for lot=false though I don\u2019t know how strong\n> > > > that preference was.\n> > > >\n> > > > I am only one voice but it is my current assessment that if we are to\n> > > > attempt to finalize Taproot activation parameters and propose them to\n> > > > the community at this time our only option is to propose LOT=false.\n> > > > Any further delay appears to me counterproductive in our collective\n> > > > aim to get the Taproot soft fork activated as early as possible.\n> > > >\n> > > > Obviously others are free to disagree with that assessment and\n> > > > continue discussions but personally I will be attempting to avoid\n> > > > those discussions unless prominent new information comes to light or\n> > > > various specific individuals change their minds.\n> > > >\n> > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n> > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n> > > > said previously that will be loosely following the format of the\n> > > > Bitcoin Core PR review club and will be lower level and more\n> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n> > > > the IRC channel ##taproot-activation.\n> > > >\n> > > > Thanks to the meeting participants (and those who joined the\n> > > > discussion on the channel prior and post the meeting) for engaging\n> > > > productively and in good faith.\n> >\n> > --\n> > Michael Folkson\n> > Email:\u00a0michaelfolkson at gmail.com\n> > Keybase: michaelfolkson\n> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-02-18T12:20:14",
                "message_text_only": "Right, that is one option. Personally I would prefer a Bitcoin Core release\nsets LOT=false (based on what I have heard from Bitcoin Core contributors)\nand a community effort releases a version with LOT=true. I don't think\nusers should be forced to choose something they may have no context on\nbefore they are allowed to use Bitcoin Core.\n\nMy current understanding is that roasbeef is planning to set LOT=false on\nbtcd (an alternative protocol implementation to Bitcoin Core) and Luke\nDashjr hasn't yet decided on Bitcoin Knots.\n\n\n\nOn Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning all,\n>\n> > \"An activation mechanism is a consensus change like any other change,\n> can be contentious like any other change, and we must resolve it like any\n> other change. Otherwise we risk arriving at the darkest timeline.\"\n> >\n> > Who's we here?\n> >\n> > Release both and let the network decide.\n>\n> A thing that could be done, without mandating either LOT=true or\n> LOT=false, would be to have a release that requires a `taprootlot=1` or\n> `taprootlot=0` and refuses to start if the parameter is not set.\n>\n> This assures everyone that neither choice is being forced on users, and\n> instead what is being forced on users, is for users to make that choice\n> themselves.\n>\n> Regards,\n> ZmnSCPxj\n>\n> >\n> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > > Thanks for your response Ariel. It would be useful if you responded to\n> specific points I have made in the mailing list post or at least quote\n> these ephemeral \"people\" you speak of. I don't know if you're responding to\n> conversation on the IRC channel or on social media etc.\n> > >\n> > > > The argument comes from a naive assumption that users MUST upgrade\n> to the choice that is submitted into code. But in fact this isn't true and\n> some voices in this discussion need to be more humble about what users must\n> or must not run.\n> > >\n> > > I personally have never made this assumption. Of course users aren't\n> forced to run any particular software version, quite the opposite. Defaults\n> set in software versions matter though as many users won't change them.\n> > >\n> > > > Does no one realize that it is a very possible outcome that if\n> LOT=true is released there may be only a handful of people that begin\n> running it while everyone else delays their upgrade (with the very good\n> reason of not getting involved in politics) and a year later those handful\n> of people just become stuck at the moment of MUST_SIGNAL, unable to mine\n> new blocks?\n> > >\n> > > It is a possible outcome but the likely outcome is that miners\n> activate Taproot before LOT is even relevant. I think it is prudent to\n> prepare for the unlikely but possible outcome that miners fail to activate\n> and hence have this discussion now rather than be unprepared for that\n> eventuality. If LOT is set to false in a software release there is the\n> possibility (T2 in\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)\n> of individuals or a proportion of the community changing LOT to true. In\n> that sense setting LOT=false in a software release appears to be no more\n> safe than LOT=true.\n> > >\n> > > > The result: a wasted year of waiting and a minority of people who\n> didn't want to be lenient with miners by default.\n> > >\n> > > There is the (unlikely but possible) possibility of a wasted year if\n> LOT is set to false and miners fail to activate. I'm not convinced by this\n> perception that LOT=true is antagonistic to miners. I actually think it\n> offers them clarity on what will happen over a year time period and removes\n> the need for coordinated or uncoordinated community UASF efforts on top of\n> LOT=false.\n> > >\n> > > > An activation mechanism is a consensus change like any other change,\n> can be contentious like any other change, and we must resolve it like any\n> other change. Otherwise we risk arriving at the darkest timeline.\n> > >\n> > > I don't know what you are recommending here to avoid \"this darkest\n> timeline\". Open discussions have occurred and are continuing and in my\n> mailing list post that you responded to **I recommended we propose\n> LOT=false be set in protocol implementations such as Bitcoin Core**. I do\n> think this apocalyptic language isn't particularly helpful. In an open\n> consensus system discussion is healthy, we should prepare for bad or worst\n> case scenarios in advance and doing so is not antagonistic or destructive.\n> Mining pools have pledged support for Taproot but we don't build secure\n> systems based on pledges of support, we build them to minimize trust in any\n> human actors. We can be grateful that people like Alejandro have worked\n> hard on taprootactivation.com (and this effort has informed the\n> discussion) without taking pledges of support as cast iron guarantees.\n> > >\n> > > TL;DR It sounds like you agree with my recommendation to set LOT=false\n> in protocol implementations in my email :)\n> > >\n> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <\n> arielluaces at gmail.com> wrote:\n> > >\n> > > > Something what strikes me about the conversation is the emotion\n> surrounding the letters UASF.\n> > > > It appears as if people discuss UASF as if it's a massive tidal wave\n> of support that is inevitable, like we saw during segwit activation. But\n> the actual definition is \"any activation that is not a MASF\".\n> > > > A UASF can consist of a single node, ten nodes, a thousand, half of\n> all nodes, all business' nodes, or even all the non mining nodes. On\n> another dimension it can have zero mining support, 51% support, 49%\n> support, or any support right up against a miner activation threshold.\n> > > > Hell a UASF doesn't even need code or even a single node running as\n> long as it exists as a possibility in people's minds.\n> > > > The only thing a UASF doesn't have is miner support above an agreed\n> activation threshold (some number above %51).\n> > > > I say this because it strikes me when people say that they are for\n> LOT=true with the logic that since a UASF is guaranteed to happen then it's\n> better to just make it default from the beginning. Words like coordination\n> and safety are sometimes sprinkled into the argument.\n> > > > The argument comes from a naive assumption that users MUST upgrade\n> to the choice that is submitted into code. But in fact this isn't true and\n> some voices in this discussion need to be more humble about what users must\n> or must not run.\n> > > > Does no one realize that it is a very possible outcome that if\n> LOT=true is released there may be only a handful of people that begin\n> running it while everyone else delays their upgrade (with the very good\n> reason of not getting involved in politics) and a year later those handful\n> of people just become stuck at the moment of MUST_SIGNAL, unable to mine\n> new blocks? Or attracting a minority of miners, activating, and forking off\n> into a minority fork. Then a lot=false could be started that ends up\n> activating the feature now that the stubborn option has ran its course.\n> > > > The result: a wasted year of waiting and a minority of people who\n> didn't want to be lenient with miners by default. The chains could be\n> called BitcoinLenient and BitcoinStubborn.\n> > > > How is that strictly safer or more coordinated?\n> > > > I may be in the minority, or maybe a silent majority, or maybe a\n> majority that just hasn't considered this as a choice but honestly if there\n> is contention about whether we're going to be stubborn or lenient with\n> miners for Taproot and in the future then I prefer to just not activate\n> anything at all. I'm fine for calling bitcoin ossified, accepting that\n> segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n> feature is worth a network split down the middle.\n> > > > Maybe in 10 or 20 years, when other blockchains implement features\n> like Taproot and many more, we will become envious enough to put aside our\n> differences on how to behave towards miners and finally activate Taproot.\n> > > > An activation mechanism is a consensus change like any other change,\n> can be contentious like any other change, and we must resolve it like any\n> other change. Otherwise we risk arriving at the darkest timeline.\n> > > > Cheers\n> > > > Ariel Lorenzo-Luaces\n> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > > >\n> > > > > Yesterday (February 16th) we held a second meeting on Taproot\n> > > > > activation on IRC which again was open to all. Despite what\n> appeared\n> > > > > to be majority support for LOT=false over LOT=true in the first\n> > > > > meeting I (and others) thought the arguments had not been explored\n> in\n> > > > > depth and that we should have a follow up meeting almost entirely\n> > > > > focused on whether LOT (lockinontimeout) should be set to true or\n> > > > > false.\n> > > > >\n> > > > > The meeting was announced here:\n> > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > > > >\n> > > > > In that mailing list post I outlined the arguments for LOT=true\n> (T1 to\n> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form\n> I\n> > > > > could. David Harding responded with an additional argument for\n> > > > > LOT=false (F7) here:\n> > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> > > > >\n> > > > > These meetings are very challenging given they are open to all, you\n> > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views\n> in\n> > > > > advance. I tried to give time for both the LOT=true arguments and\n> the\n> > > > > LOT=false arguments to be discussed as I knew there was support for\n> > > > > both. We only tried evaluating which had more support and which had\n> > > > > more strong opposition towards the end of the meeting.\n> > > > >\n> > > > > The conversation log is here:\n> > > > > http://gnusha.org/taproot-activation/2021-02-16.log\n> > > > >\n> > > > > (If you are so inclined you can watch a video of the meeting here.\n> > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the\n> livestream:\n> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)\n> > > > >\n> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon\n> here:\n> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> > > > >\n> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive,\n> but we\n> > > > > did manage to come to consensus on everything but LockinOnTimeout.\n> > > > >\n> > > > > Activation height range: 693504-745920\n> > > > >\n> > > > > MASF threshold: 1815/2016 blocks (90%)\n> > > > >\n> > > > > Keep in mind only ~100 people showed for the meetings, hardly\n> > > > > representative of the entire community.\n> > > > >\n> > > > > So, these details remain JUST a proposal for now.\n> > > > >\n> > > > > It seems inevitable that there won't be consensus on LOT.\n> > > > >\n> > > > > Everyone will have to choose for himself. :/\n> > > > >\n> > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n> > > > > overwhelming consensus for either LOT=true or LOT=false. However,\n> from\n> > > > > my perspective there was clearly more strong opposition (what would\n> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n> > > > > Bitcoin Core contributors, Lightning developers and other community\n> > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n> > > > > tried to summarize views from the meeting in this analysis:\n> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> > > > >\n> > > > > I am also aware of other current and previous Bitcoin Core\n> > > > > contributors and Lightning developers who didn\u2019t attend the\n> meeting in\n> > > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n> > > > > spotlight for no reason but if you go through the conversation\n> logs of\n> > > > > not only the meeting but the weeks of discussion prior to this\n> meeting\n> > > > > you will see their views evaluated on the ##taproot-activation\n> > > > > channel. In addition, on taprootactivation.com some mining pools\n> > > > > expressed a preference for lot=false though I don\u2019t know how strong\n> > > > > that preference was.\n> > > > >\n> > > > > I am only one voice but it is my current assessment that if we are\n> to\n> > > > > attempt to finalize Taproot activation parameters and propose them\n> to\n> > > > > the community at this time our only option is to propose LOT=false.\n> > > > > Any further delay appears to me counterproductive in our collective\n> > > > > aim to get the Taproot soft fork activated as early as possible.\n> > > > >\n> > > > > Obviously others are free to disagree with that assessment and\n> > > > > continue discussions but personally I will be attempting to avoid\n> > > > > those discussions unless prominent new information comes to light\n> or\n> > > > > various specific individuals change their minds.\n> > > > >\n> > > > > Next week we are planning a code review of the Bitcoin Core PR\n> #19573\n> > > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n> > > > > said previously that will be loosely following the format of the\n> > > > > Bitcoin Core PR review club and will be lower level and more\n> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC\n> on\n> > > > > the IRC channel ##taproot-activation.\n> > > > >\n> > > > > Thanks to the meeting participants (and those who joined the\n> > > > > discussion on the channel prior and post the meeting) for engaging\n> > > > > productively and in good faith.\n> > >\n> > > --\n> > > Michael Folkson\n> > > Email: michaelfolkson at gmail.com\n> > > Keybase: michaelfolkson\n> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> > > _______________________________________________\n> > > bitcoin-dev mailing list\n> > > bitcoin-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/726417ad/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T14:01:32",
                "message_text_only": "If the eventual outcome is that different implementations (that have material *transaction processing* userbases, and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here and not activate Taproot. Seriously.\n\nBitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n\nMatt\n\n> On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeff\n> Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think users should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core. \n> \n> My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n> \n> \n> \n>> On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> Good morning all,\n>> \n>> > \"An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>> >\n>> > Who's we here?\n>> >\n>> > Release both and let the network decide.\n>> \n>> A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n>> \n>> This assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.\n>> \n>> Regards,\n>> ZmnSCPxj\n>> \n>> >\n>> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.\n>> > >\n>> > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n>> > >\n>> > > I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.\n>> > >\n>> > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?\n>> > >\n>> > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.\n>> > >\n>> > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.\n>> > >\n>> > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.\n>> > >\n>> > > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>> > >\n>> > > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.\n>> > >\n>> > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)\n>> > >\n>> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:\n>> > >\n>> > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>> > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>> > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.\n>> > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.\n>> > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).\n>> > > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.\n>> > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n>> > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.\n>> > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>> > > > How is that strictly safer or more coordinated?\n>> > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.\n>> > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.\n>> > > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>> > > > Cheers\n>> > > > Ariel Lorenzo-Luaces\n>> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > > >\n>> > > > > Yesterday (February 16th) we held a second meeting on Taproot\n>> > > > > activation on IRC which again was open to all. Despite what appeared\n>> > > > > to be majority support for LOT=false over LOT=true in the first\n>> > > > > meeting I (and others) thought the arguments had not been explored in\n>> > > > > depth and that we should have a follow up meeting almost entirely\n>> > > > > focused on whether LOT (lockinontimeout) should be set to true or\n>> > > > > false.\n>> > > > >\n>> > > > > The meeting was announced here:\n>> > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> > > > >\n>> > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n>> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>> > > > > could. David Harding responded with an additional argument for\n>> > > > > LOT=false (F7) here:\n>> > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>> > > > >\n>> > > > > These meetings are very challenging given they are open to all, you\n>> > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>> > > > > advance. I tried to give time for both the LOT=true arguments and the\n>> > > > > LOT=false arguments to be discussed as I knew there was support for\n>> > > > > both. We only tried evaluating which had more support and which had\n>> > > > > more strong opposition towards the end of the meeting.\n>> > > > >\n>> > > > > The conversation log is here:\n>> > > > > http://gnusha.org/taproot-activation/2021-02-16.log\n>> > > > >\n>> > > > > (If you are so inclined you can watch a video of the meeting here.\n>> > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>> > > > >\n>> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>> > > > >\n>> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>> > > > > did manage to come to consensus on everything but LockinOnTimeout.\n>> > > > >\n>> > > > > Activation height range: 693504-745920\n>> > > > >\n>> > > > > MASF threshold: 1815/2016 blocks (90%)\n>> > > > >\n>> > > > > Keep in mind only ~100 people showed for the meetings, hardly\n>> > > > > representative of the entire community.\n>> > > > >\n>> > > > > So, these details remain JUST a proposal for now.\n>> > > > >\n>> > > > > It seems inevitable that there won't be consensus on LOT.\n>> > > > >\n>> > > > > Everyone will have to choose for himself. :/\n>> > > > >\n>> > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>> > > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n>> > > > > my perspective there was clearly more strong opposition (what would\n>> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>> > > > > Bitcoin Core contributors, Lightning developers and other community\n>> > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>> > > > > tried to summarize views from the meeting in this analysis:\n>> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>> > > > >\n>> > > > > I am also aware of other current and previous Bitcoin Core\n>> > > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n>> > > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n>> > > > > spotlight for no reason but if you go through the conversation logs of\n>> > > > > not only the meeting but the weeks of discussion prior to this meeting\n>> > > > > you will see their views evaluated on the ##taproot-activation\n>> > > > > channel. In addition, on taprootactivation.com some mining pools\n>> > > > > expressed a preference for lot=false though I don\u2019t know how strong\n>> > > > > that preference was.\n>> > > > >\n>> > > > > I am only one voice but it is my current assessment that if we are to\n>> > > > > attempt to finalize Taproot activation parameters and propose them to\n>> > > > > the community at this time our only option is to propose LOT=false.\n>> > > > > Any further delay appears to me counterproductive in our collective\n>> > > > > aim to get the Taproot soft fork activated as early as possible.\n>> > > > >\n>> > > > > Obviously others are free to disagree with that assessment and\n>> > > > > continue discussions but personally I will be attempting to avoid\n>> > > > > those discussions unless prominent new information comes to light or\n>> > > > > various specific individuals change their minds.\n>> > > > >\n>> > > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n>> > > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n>> > > > > said previously that will be loosely following the format of the\n>> > > > > Bitcoin Core PR review club and will be lower level and more\n>> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>> > > > > the IRC channel ##taproot-activation.\n>> > > > >\n>> > > > > Thanks to the meeting participants (and those who joined the\n>> > > > > discussion on the channel prior and post the meeting) for engaging\n>> > > > > productively and in good faith.\n>> > >\n>> > > --\n>> > > Michael Folkson\n>> > > Email: michaelfolkson at gmail.com\n>> > > Keybase: michaelfolkson\n>> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> > > _______________________________________________\n>> > > bitcoin-dev mailing list\n>> > > bitcoin-dev at lists.linuxfoundation.org\n>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n> \n> \n> -- \n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/3aeb6764/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-02-18T14:26:16",
                "message_text_only": "Thanks for your response Matt. It is a fair challenge. There is always\ngoing to be an element of risk with soft forks, all we can do is attempt to\nminimize that risk. I would argue that risk has been minimized for Taproot.\n\nYou know (better than I do in fact) that Bitcoin (and layers built on top\nof it) greatly benefit from upgrades such as Taproot. To say we shouldn't\ndo Taproot or any future soft forks because there is a small but real risk\nof chain splits I think is shortsighted. Indeed I think even if we\ncollectively decided not to do any future soft fork upgrades ever again on\nthis mailing list that wouldn't stop soft fork attempts from other people\nin future.\n\nI don't think there is anything else we can do to minimize that risk for\nthe Taproot soft fork at this point though I'm open to ideas. To reiterate\nthat risk will never be zero. I don't think I see Bitcoin as fragile as you\nseem to (though admittedly you have a much better understanding than me of\nwhat happened in 2017).\n\nThe likely scenario for the Taproot soft fork is LOT turns out to be\nentirely irrelevant and miners activate Taproot before it becomes relevant.\nAnd even the unlikely worst case scenario would only cause short term\ndisruption and wouldn't kill Bitcoin long term.\n\nOn Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> If the eventual outcome is that different implementations (that have\n> material *transaction processing* userbases, and I\u2019m not sure to what\n> extent that\u2019s true with Knots) ship different consensus rules, we should\n> stop here and not activate Taproot. Seriously.\n>\n> Bitcoin is a consensus system. The absolute worst outcome at all possible\n> is to have it fall out of consensus.\n>\n> Matt\n>\n> On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> \ufeff\n> Right, that is one option. Personally I would prefer a Bitcoin Core\n> release sets LOT=false (based on what I have heard from Bitcoin Core\n> contributors) and a community effort releases a version with LOT=true. I\n> don't think users should be forced to choose something they may have no\n> context on before they are allowed to use Bitcoin Core.\n>\n> My current understanding is that roasbeef is planning to set LOT=false on\n> btcd (an alternative protocol implementation to Bitcoin Core) and Luke\n> Dashjr hasn't yet decided on Bitcoin Knots.\n>\n>\n>\n> On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>\n>> Good morning all,\n>>\n>> > \"An activation mechanism is a consensus change like any other change,\n>> can be contentious like any other change, and we must resolve it like any\n>> other change. Otherwise we risk arriving at the darkest timeline.\"\n>> >\n>> > Who's we here?\n>> >\n>> > Release both and let the network decide.\n>>\n>> A thing that could be done, without mandating either LOT=true or\n>> LOT=false, would be to have a release that requires a `taprootlot=1` or\n>> `taprootlot=0` and refuses to start if the parameter is not set.\n>>\n>> This assures everyone that neither choice is being forced on users, and\n>> instead what is being forced on users, is for users to make that choice\n>> themselves.\n>>\n>> Regards,\n>> ZmnSCPxj\n>>\n>> >\n>> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > > Thanks for your response Ariel. It would be useful if you responded\n>> to specific points I have made in the mailing list post or at least quote\n>> these ephemeral \"people\" you speak of. I don't know if you're responding to\n>> conversation on the IRC channel or on social media etc.\n>> > >\n>> > > > The argument comes from a naive assumption that users MUST upgrade\n>> to the choice that is submitted into code. But in fact this isn't true and\n>> some voices in this discussion need to be more humble about what users must\n>> or must not run.\n>> > >\n>> > > I personally have never made this assumption. Of course users aren't\n>> forced to run any particular software version, quite the opposite. Defaults\n>> set in software versions matter though as many users won't change them.\n>> > >\n>> > > > Does no one realize that it is a very possible outcome that if\n>> LOT=true is released there may be only a handful of people that begin\n>> running it while everyone else delays their upgrade (with the very good\n>> reason of not getting involved in politics) and a year later those handful\n>> of people just become stuck at the moment of MUST_SIGNAL, unable to mine\n>> new blocks?\n>> > >\n>> > > It is a possible outcome but the likely outcome is that miners\n>> activate Taproot before LOT is even relevant. I think it is prudent to\n>> prepare for the unlikely but possible outcome that miners fail to activate\n>> and hence have this discussion now rather than be unprepared for that\n>> eventuality. If LOT is set to false in a software release there is the\n>> possibility (T2 in\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)\n>> of individuals or a proportion of the community changing LOT to true. In\n>> that sense setting LOT=false in a software release appears to be no more\n>> safe than LOT=true.\n>> > >\n>> > > > The result: a wasted year of waiting and a minority of people who\n>> didn't want to be lenient with miners by default.\n>> > >\n>> > > There is the (unlikely but possible) possibility of a wasted year if\n>> LOT is set to false and miners fail to activate. I'm not convinced by this\n>> perception that LOT=true is antagonistic to miners. I actually think it\n>> offers them clarity on what will happen over a year time period and removes\n>> the need for coordinated or uncoordinated community UASF efforts on top of\n>> LOT=false.\n>> > >\n>> > > > An activation mechanism is a consensus change like any other\n>> change, can be contentious like any other change, and we must resolve it\n>> like any other change. Otherwise we risk arriving at the darkest timeline.\n>> > >\n>> > > I don't know what you are recommending here to avoid \"this darkest\n>> timeline\". Open discussions have occurred and are continuing and in my\n>> mailing list post that you responded to **I recommended we propose\n>> LOT=false be set in protocol implementations such as Bitcoin Core**. I do\n>> think this apocalyptic language isn't particularly helpful. In an open\n>> consensus system discussion is healthy, we should prepare for bad or worst\n>> case scenarios in advance and doing so is not antagonistic or destructive.\n>> Mining pools have pledged support for Taproot but we don't build secure\n>> systems based on pledges of support, we build them to minimize trust in any\n>> human actors. We can be grateful that people like Alejandro have worked\n>> hard on taprootactivation.com (and this effort has informed the\n>> discussion) without taking pledges of support as cast iron guarantees.\n>> > >\n>> > > TL;DR It sounds like you agree with my recommendation to set\n>> LOT=false in protocol implementations in my email :)\n>> > >\n>> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <\n>> arielluaces at gmail.com> wrote:\n>> > >\n>> > > > Something what strikes me about the conversation is the emotion\n>> surrounding the letters UASF.\n>> > > > It appears as if people discuss UASF as if it's a massive tidal\n>> wave of support that is inevitable, like we saw during segwit activation.\n>> But the actual definition is \"any activation that is not a MASF\".\n>> > > > A UASF can consist of a single node, ten nodes, a thousand, half of\n>> all nodes, all business' nodes, or even all the non mining nodes. On\n>> another dimension it can have zero mining support, 51% support, 49%\n>> support, or any support right up against a miner activation threshold.\n>> > > > Hell a UASF doesn't even need code or even a single node running as\n>> long as it exists as a possibility in people's minds.\n>> > > > The only thing a UASF doesn't have is miner support above an agreed\n>> activation threshold (some number above %51).\n>> > > > I say this because it strikes me when people say that they are for\n>> LOT=true with the logic that since a UASF is guaranteed to happen then it's\n>> better to just make it default from the beginning. Words like coordination\n>> and safety are sometimes sprinkled into the argument.\n>> > > > The argument comes from a naive assumption that users MUST upgrade\n>> to the choice that is submitted into code. But in fact this isn't true and\n>> some voices in this discussion need to be more humble about what users must\n>> or must not run.\n>> > > > Does no one realize that it is a very possible outcome that if\n>> LOT=true is released there may be only a handful of people that begin\n>> running it while everyone else delays their upgrade (with the very good\n>> reason of not getting involved in politics) and a year later those handful\n>> of people just become stuck at the moment of MUST_SIGNAL, unable to mine\n>> new blocks? Or attracting a minority of miners, activating, and forking off\n>> into a minority fork. Then a lot=false could be started that ends up\n>> activating the feature now that the stubborn option has ran its course.\n>> > > > The result: a wasted year of waiting and a minority of people who\n>> didn't want to be lenient with miners by default. The chains could be\n>> called BitcoinLenient and BitcoinStubborn.\n>> > > > How is that strictly safer or more coordinated?\n>> > > > I may be in the minority, or maybe a silent majority, or maybe a\n>> majority that just hasn't considered this as a choice but honestly if there\n>> is contention about whether we're going to be stubborn or lenient with\n>> miners for Taproot and in the future then I prefer to just not activate\n>> anything at all. I'm fine for calling bitcoin ossified, accepting that\n>> segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n>> feature is worth a network split down the middle.\n>> > > > Maybe in 10 or 20 years, when other blockchains implement features\n>> like Taproot and many more, we will become envious enough to put aside our\n>> differences on how to behave towards miners and finally activate Taproot.\n>> > > > An activation mechanism is a consensus change like any other\n>> change, can be contentious like any other change, and we must resolve it\n>> like any other change. Otherwise we risk arriving at the darkest timeline.\n>> > > > Cheers\n>> > > > Ariel Lorenzo-Luaces\n>> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > > >\n>> > > > > Yesterday (February 16th) we held a second meeting on Taproot\n>> > > > > activation on IRC which again was open to all. Despite what\n>> appeared\n>> > > > > to be majority support for LOT=false over LOT=true in the first\n>> > > > > meeting I (and others) thought the arguments had not been\n>> explored in\n>> > > > > depth and that we should have a follow up meeting almost entirely\n>> > > > > focused on whether LOT (lockinontimeout) should be set to true or\n>> > > > > false.\n>> > > > >\n>> > > > > The meeting was announced here:\n>> > > > >\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> > > > >\n>> > > > > In that mailing list post I outlined the arguments for LOT=true\n>> (T1 to\n>> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest\n>> form I\n>> > > > > could. David Harding responded with an additional argument for\n>> > > > > LOT=false (F7) here:\n>> > > > >\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>> > > > >\n>> > > > > These meetings are very challenging given they are open to all,\n>> you\n>> > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views\n>> in\n>> > > > > advance. I tried to give time for both the LOT=true arguments and\n>> the\n>> > > > > LOT=false arguments to be discussed as I knew there was support\n>> for\n>> > > > > both. We only tried evaluating which had more support and which\n>> had\n>> > > > > more strong opposition towards the end of the meeting.\n>> > > > >\n>> > > > > The conversation log is here:\n>> > > > > http://gnusha.org/taproot-activation/2021-02-16.log\n>> > > > >\n>> > > > > (If you are so inclined you can watch a video of the meeting here.\n>> > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the\n>> livestream:\n>> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>> > > > >\n>> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon\n>> here:\n>> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>> > > > >\n>> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive,\n>> but we\n>> > > > > did manage to come to consensus on everything but LockinOnTimeout.\n>> > > > >\n>> > > > > Activation height range: 693504-745920\n>> > > > >\n>> > > > > MASF threshold: 1815/2016 blocks (90%)\n>> > > > >\n>> > > > > Keep in mind only ~100 people showed for the meetings, hardly\n>> > > > > representative of the entire community.\n>> > > > >\n>> > > > > So, these details remain JUST a proposal for now.\n>> > > > >\n>> > > > > It seems inevitable that there won't be consensus on LOT.\n>> > > > >\n>> > > > > Everyone will have to choose for himself. :/\n>> > > > >\n>> > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>> > > > > overwhelming consensus for either LOT=true or LOT=false. However,\n>> from\n>> > > > > my perspective there was clearly more strong opposition (what\n>> would\n>> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>> > > > > Bitcoin Core contributors, Lightning developers and other\n>> community\n>> > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>> > > > > tried to summarize views from the meeting in this analysis:\n>> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>> > > > >\n>> > > > > I am also aware of other current and previous Bitcoin Core\n>> > > > > contributors and Lightning developers who didn\u2019t attend the\n>> meeting in\n>> > > > > person who are opposed to LOT=true. I don\u2019t want to put them in\n>> the\n>> > > > > spotlight for no reason but if you go through the conversation\n>> logs of\n>> > > > > not only the meeting but the weeks of discussion prior to this\n>> meeting\n>> > > > > you will see their views evaluated on the ##taproot-activation\n>> > > > > channel. In addition, on taprootactivation.com some mining pools\n>> > > > > expressed a preference for lot=false though I don\u2019t know how\n>> strong\n>> > > > > that preference was.\n>> > > > >\n>> > > > > I am only one voice but it is my current assessment that if we\n>> are to\n>> > > > > attempt to finalize Taproot activation parameters and propose\n>> them to\n>> > > > > the community at this time our only option is to propose\n>> LOT=false.\n>> > > > > Any further delay appears to me counterproductive in our\n>> collective\n>> > > > > aim to get the Taproot soft fork activated as early as possible.\n>> > > > >\n>> > > > > Obviously others are free to disagree with that assessment and\n>> > > > > continue discussions but personally I will be attempting to avoid\n>> > > > > those discussions unless prominent new information comes to light\n>> or\n>> > > > > various specific individuals change their minds.\n>> > > > >\n>> > > > > Next week we are planning a code review of the Bitcoin Core PR\n>> #19573\n>> > > > > which was initially delayed because of this LOT discussion. As\n>> I\u2019ve\n>> > > > > said previously that will be loosely following the format of the\n>> > > > > Bitcoin Core PR review club and will be lower level and more\n>> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC\n>> on\n>> > > > > the IRC channel ##taproot-activation.\n>> > > > >\n>> > > > > Thanks to the meeting participants (and those who joined the\n>> > > > > discussion on the channel prior and post the meeting) for engaging\n>> > > > > productively and in good faith.\n>> > >\n>> > > --\n>> > > Michael Folkson\n>> > > Email: michaelfolkson at gmail.com\n>> > > Keybase: michaelfolkson\n>> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> > > _______________________________________________\n>> > > bitcoin-dev mailing list\n>> > > bitcoin-dev at lists.linuxfoundation.org\n>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/7735bd99/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T14:42:58",
                "message_text_only": "We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That \nshould be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as \nmuch as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to \nuse it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an \nexchange losing millions would be worse than having Taproot is good.\n\nMatt\n\nOn 2/18/21 09:26, Michael Folkson wrote:\n> Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft forks, \n> all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n> \n> You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades such as \n> Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain splits \n> I think is shortsighted. Indeed I think even if we collectively\u00a0decided not to do any future soft fork upgrades ever \n> again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n> \n> I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point though I'm \n> open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to (though \n> admittedly you have a much better understanding than me of what happened in 2017).\n> \n> The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot \n> before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and \n> wouldn't kill Bitcoin long term.\n> \n> On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n> \n>     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n>     and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here and not\n>     activate Taproot. Seriously.\n> \n>     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n> \n>     Matt\n> \n>>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>\n>>     \ufeff\n>>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n>>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think users\n>>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n>>\n>>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n>>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n>>\n>>\n>>\n>>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>> wrote:\n>>\n>>         Good morning all,\n>>\n>>         > \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>>         >\n>>         > Who's we here?\n>>         >\n>>         > Release both and let the network decide.\n>>\n>>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n>>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n>>\n>>         This assures everyone that neither choice is being forced on users, and instead what is being forced on users,\n>>         is for users to make that choice themselves.\n>>\n>>         Regards,\n>>         ZmnSCPxj\n>>\n>>         >\n>>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>         >\n>>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the\n>>         mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n>>         to conversation on the IRC channel or on social media etc.\n>>         > >\n>>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into\n>>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>>         must or must not run.\n>>         > >\n>>         > > I personally have never made this assumption. Of course users aren't forced to run any particular software\n>>         version, quite the opposite. Defaults set in software versions matter though as many users won't change them.\n>>         > >\n>>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a\n>>         handful of people that begin running it while everyone else delays their upgrade (with the very good reason of\n>>         not getting involved in politics) and a year later those handful of people just become stuck at the moment of\n>>         MUST_SIGNAL, unable to mine new blocks?\n>>         > >\n>>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n>>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate\n>>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a\n>>         software release there is the possibility (T2 in\n>>         https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>) of individuals or a\n>>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n>>         appears to be no more safe than LOT=true.\n>>         > >\n>>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners\n>>         by default.\n>>         > >\n>>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n>>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it\n>>         offers them clarity on what will happen over a year time period and removes the need for coordinated or\n>>         uncoordinated community UASF efforts on top of LOT=false.\n>>         > >\n>>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>>         > >\n>>         > > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n>>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n>>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n>>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n>>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have pledged\n>>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n>>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n>>         taprootactivation.com <http://taprootactivation.com> (and this effort has informed the discussion) without\n>>         taking pledges of support as cast iron guarantees.\n>>         > >\n>>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n>>         email :)\n>>         > >\n>>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n>>         <mailto:arielluaces at gmail.com>> wrote:\n>>         > >\n>>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like\n>>         we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n>>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support,\n>>         or any support right up against a miner activation threshold.\n>>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n>>         in people's minds.\n>>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n>>         above %51).\n>>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a\n>>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n>>         coordination and safety are sometimes sprinkled into the argument.\n>>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into\n>>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>>         must or must not run.\n>>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a\n>>         handful of people that begin running it while everyone else delays their upgrade (with the very good reason of\n>>         not getting involved in politics) and a year later those handful of people just become stuck at the moment of\n>>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a\n>>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n>>         option has ran its course.\n>>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners\n>>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>>         > > > How is that strictly safer or more coordinated?\n>>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n>>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with\n>>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling\n>>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n>>         feature is worth a network split down the middle.\n>>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n>>         become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.\n>>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>>         > > > Cheers\n>>         > > > Ariel Lorenzo-Luaces\n>>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>         > > >\n>>         > > > > Yesterday (February 16th) we held a second meeting on Taproot\n>>         > > > > activation on IRC which again was open to all. Despite what appeared\n>>         > > > > to be majority support for LOT=false over LOT=true in the first\n>>         > > > > meeting I (and others) thought the arguments had not been explored in\n>>         > > > > depth and that we should have a follow up meeting almost entirely\n>>         > > > > focused on whether LOT (lockinontimeout) should be set to true or\n>>         > > > > false.\n>>         > > > >\n>>         > > > > The meeting was announced here:\n>>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>>         > > > >\n>>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n>>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>>         > > > > could. David Harding responded with an additional argument for\n>>         > > > > LOT=false (F7) here:\n>>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n>>         > > > >\n>>         > > > > These meetings are very challenging given they are open to all, you\n>>         > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>>         > > > > advance. I tried to give time for both the LOT=true arguments and the\n>>         > > > > LOT=false arguments to be discussed as I knew there was support for\n>>         > > > > both. We only tried evaluating which had more support and which had\n>>         > > > > more strong opposition towards the end of the meeting.\n>>         > > > >\n>>         > > > > The conversation log is here:\n>>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <http://gnusha.org/taproot-activation/2021-02-16.log>\n>>         > > > >\n>>         > > > > (If you are so inclined you can watch a video of the meeting here.\n>>         > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>)\n>>         > > > >\n>>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n>>         > > > >\n>>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>>         > > > > did manage to come to consensus on everything but LockinOnTimeout.\n>>         > > > >\n>>         > > > > Activation height range: 693504-745920\n>>         > > > >\n>>         > > > > MASF threshold: 1815/2016 blocks (90%)\n>>         > > > >\n>>         > > > > Keep in mind only ~100 people showed for the meetings, hardly\n>>         > > > > representative of the entire community.\n>>         > > > >\n>>         > > > > So, these details remain JUST a proposal for now.\n>>         > > > >\n>>         > > > > It seems inevitable that there won't be consensus on LOT.\n>>         > > > >\n>>         > > > > Everyone will have to choose for himself. :/\n>>         > > > >\n>>         > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n>>         > > > > my perspective there was clearly more strong opposition (what would\n>>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>>         > > > > Bitcoin Core contributors, Lightning developers and other community\n>>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>>         > > > > tried to summarize views from the meeting in this analysis:\n>>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n>>         > > > >\n>>         > > > > I am also aware of other current and previous Bitcoin Core\n>>         > > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n>>         > > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n>>         > > > > spotlight for no reason but if you go through the conversation logs of\n>>         > > > > not only the meeting but the weeks of discussion prior to this meeting\n>>         > > > > you will see their views evaluated on the ##taproot-activation\n>>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com> some mining pools\n>>         > > > > expressed a preference for lot=false though I don\u2019t know how strong\n>>         > > > > that preference was.\n>>         > > > >\n>>         > > > > I am only one voice but it is my current assessment that if we are to\n>>         > > > > attempt to finalize Taproot activation parameters and propose them to\n>>         > > > > the community at this time our only option is to propose LOT=false.\n>>         > > > > Any further delay appears to me counterproductive in our collective\n>>         > > > > aim to get the Taproot soft fork activated as early as possible.\n>>         > > > >\n>>         > > > > Obviously others are free to disagree with that assessment and\n>>         > > > > continue discussions but personally I will be attempting to avoid\n>>         > > > > those discussions unless prominent new information comes to light or\n>>         > > > > various specific individuals change their minds.\n>>         > > > >\n>>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n>>         > > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n>>         > > > > said previously that will be loosely following the format of the\n>>         > > > > Bitcoin Core PR review club and will be lower level and more\n>>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>>         > > > > the IRC channel ##taproot-activation.\n>>         > > > >\n>>         > > > > Thanks to the meeting participants (and those who joined the\n>>         > > > > discussion on the channel prior and post the meeting) for engaging\n>>         > > > > productively and in good faith.\n>>         > >\n>>         > > --\n>>         > > Michael Folkson\n>>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n>>         > > Keybase: michaelfolkson\n>>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>         > > _______________________________________________\n>>         > > bitcoin-dev mailing list\n>>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>>\n>>\n>>\n>>\n>>     -- \n>>     Michael Folkson\n>>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n>>     Keybase: michaelfolkson\n>>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>     _______________________________________________\n>>     bitcoin-dev mailing list\n>>     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n> \n> -- \n> Michael Folkson\n> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-02-18T14:51:47",
                "message_text_only": "> getting unlucky and hitting a 4-block reorg that happens to include a\ndouble-spend and some PR around an exchange losing millions would be worse\nthan having Taproot is good.\n\nWe are at the point where an upgrade that confers significant long term\nbenefits for the whole ecosystem is not as important as bad short term PR?\nThat is a depressing outlook if that is what you believe.\n\nEven in that worst case scenario exchanges should not lose money if they\nare competent and are able to manage that risk.\n\nOn Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> We've had several softforks in Bitcoin which, through the course of their\n> activation, had a several-block reorg. That\n> should be indication enough that we need to very carefully consider\n> activation to ensure we reduce the risk of that as\n> much as absolutely possible. Again, while I think Taproot is a huge\n> improvement and am looking forward to being able to\n> use it, getting unlucky and hitting a 4-block reorg that happens to\n> include a double-spend and some PR around an\n> exchange losing millions would be worse than having Taproot is good.\n>\n> Matt\n>\n> On 2/18/21 09:26, Michael Folkson wrote:\n> > Thanks for your response Matt. It is a fair challenge. There is always\n> going to be an element of risk with soft forks,\n> > all we can do is attempt to minimize that risk. I would argue that risk\n> has been minimized for Taproot.\n> >\n> > You know (better than I do in fact) that Bitcoin (and layers built on\n> top of it) greatly benefit from upgrades such as\n> > Taproot. To say we shouldn't do Taproot or any future soft forks because\n> there is a small but real risk of chain splits\n> > I think is shortsighted. Indeed I think even if we collectively decided\n> not to do any future soft fork upgrades ever\n> > again on this mailing list that wouldn't stop soft fork attempts from\n> other people in future.\n> >\n> > I don't think there is anything else we can do to minimize that risk for\n> the Taproot soft fork at this point though I'm\n> > open to ideas. To reiterate that risk will never be zero. I don't think\n> I see Bitcoin as fragile as you seem to (though\n> > admittedly you have a much better understanding than me of what happened\n> in 2017).\n> >\n> > The likely scenario for the Taproot soft fork is LOT turns out to be\n> entirely irrelevant and miners activate Taproot\n> > before it becomes relevant. And even the unlikely worst case scenario\n> would only cause short term disruption and\n> > wouldn't kill Bitcoin long term.\n> >\n> > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com\n> <mailto:lf-lists at mattcorallo.com>> wrote:\n> >\n> >     If the eventual outcome is that different implementations (that have\n> material *transaction processing* userbases,\n> >     and I\u2019m not sure to what extent that\u2019s true with Knots) ship\n> different consensus rules, we should stop here and not\n> >     activate Taproot. Seriously.\n> >\n> >     Bitcoin is a consensus system. The absolute worst outcome at all\n> possible is to have it fall out of consensus.\n> >\n> >     Matt\n> >\n> >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org\n> >>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>\n> >>     \ufeff\n> >>     Right, that is one option. Personally I would prefer a Bitcoin Core\n> release sets LOT=false (based on what I have\n> >>     heard from Bitcoin Core contributors) and a community effort\n> releases a version with LOT=true. I don't think users\n> >>     should be forced to choose something they may have no context on\n> before they are allowed to use Bitcoin Core.\n> >>\n> >>     My current understanding is that roasbeef is planning to set\n> LOT=false on btcd (an alternative protocol\n> >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided\n> on Bitcoin Knots.\n> >>\n> >>\n> >>\n> >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com\n> <mailto:ZmnSCPxj at protonmail.com>> wrote:\n> >>\n> >>         Good morning all,\n> >>\n> >>         > \"An activation mechanism is a consensus change like any other\n> change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\"\n> >>         >\n> >>         > Who's we here?\n> >>         >\n> >>         > Release both and let the network decide.\n> >>\n> >>         A thing that could be done, without mandating either LOT=true\n> or LOT=false, would be to have a release that\n> >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to\n> start if the parameter is not set.\n> >>\n> >>         This assures everyone that neither choice is being forced on\n> users, and instead what is being forced on users,\n> >>         is for users to make that choice themselves.\n> >>\n> >>         Regards,\n> >>         ZmnSCPxj\n> >>\n> >>         >\n> >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>         >\n> >>         > > Thanks for your response Ariel. It would be useful if you\n> responded to specific points I have made in the\n> >>         mailing list post or at least quote these ephemeral \"people\"\n> you speak of. I don't know if you're responding\n> >>         to conversation on the IRC channel or on social media etc.\n> >>         > >\n> >>         > > > The argument comes from a naive assumption that users\n> MUST upgrade to the choice that is submitted into\n> >>         code. But in fact this isn't true and some voices in this\n> discussion need to be more humble about what users\n> >>         must or must not run.\n> >>         > >\n> >>         > > I personally have never made this assumption. Of course\n> users aren't forced to run any particular software\n> >>         version, quite the opposite. Defaults set in software versions\n> matter though as many users won't change them.\n> >>         > >\n> >>         > > > Does no one realize that it is a very possible outcome\n> that if LOT=true is released there may be only a\n> >>         handful of people that begin running it while everyone else\n> delays their upgrade (with the very good reason of\n> >>         not getting involved in politics) and a year later those\n> handful of people just become stuck at the moment of\n> >>         MUST_SIGNAL, unable to mine new blocks?\n> >>         > >\n> >>         > > It is a possible outcome but the likely outcome is that\n> miners activate Taproot before LOT is even\n> >>         relevant. I think it is prudent to prepare for the unlikely but\n> possible outcome that miners fail to activate\n> >>         and hence have this discussion now rather than be unprepared\n> for that eventuality. If LOT is set to false in a\n> >>         software release there is the possibility (T2 in\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>)\n> of individuals or a\n> >>         proportion of the community changing LOT to true. In that sense\n> setting LOT=false in a software release\n> >>         appears to be no more safe than LOT=true.\n> >>         > >\n> >>         > > > The result: a wasted year of waiting and a minority of\n> people who didn't want to be lenient with miners\n> >>         by default.\n> >>         > >\n> >>         > > There is the (unlikely but possible) possibility of a\n> wasted year if LOT is set to false and miners fail\n> >>         to activate. I'm not convinced by this perception that LOT=true\n> is antagonistic to miners. I actually think it\n> >>         offers them clarity on what will happen over a year time period\n> and removes the need for coordinated or\n> >>         uncoordinated community UASF efforts on top of LOT=false.\n> >>         > >\n> >>         > > > An activation mechanism is a consensus change like any\n> other change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\n> >>         > >\n> >>         > > I don't know what you are recommending here to avoid \"this\n> darkest timeline\". Open discussions have\n> >>         occurred and are continuing and in my mailing list post that\n> you responded to **I recommended we propose\n> >>         LOT=false be set in protocol implementations such as Bitcoin\n> Core**. I do think this apocalyptic language\n> >>         isn't particularly helpful. In an open consensus system\n> discussion is healthy, we should prepare for bad or\n> >>         worst case scenarios in advance and doing so is not\n> antagonistic or destructive. Mining pools have pledged\n> >>         support for Taproot but we don't build secure systems based on\n> pledges of support, we build them to minimize\n> >>         trust in any human actors. We can be grateful that people like\n> Alejandro have worked hard on\n> >>         taprootactivation.com <http://taprootactivation.com> (and this\n> effort has informed the discussion) without\n> >>         taking pledges of support as cast iron guarantees.\n> >>         > >\n> >>         > > TL;DR It sounds like you agree with my recommendation to\n> set LOT=false in protocol implementations in my\n> >>         email :)\n> >>         > >\n> >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <\n> arielluaces at gmail.com\n> >>         <mailto:arielluaces at gmail.com>> wrote:\n> >>         > >\n> >>         > > > Something what strikes me about the conversation is the\n> emotion surrounding the letters UASF.\n> >>         > > > It appears as if people discuss UASF as if it's a massive\n> tidal wave of support that is inevitable, like\n> >>         we saw during segwit activation. But the actual definition is\n> \"any activation that is not a MASF\".\n> >>         > > > A UASF can consist of a single node, ten nodes, a\n> thousand, half of all nodes, all business' nodes, or\n> >>         even all the non mining nodes. On another dimension it can have\n> zero mining support, 51% support, 49% support,\n> >>         or any support right up against a miner activation threshold.\n> >>         > > > Hell a UASF doesn't even need code or even a single node\n> running as long as it exists as a possibility\n> >>         in people's minds.\n> >>         > > > The only thing a UASF doesn't have is miner support above\n> an agreed activation threshold (some number\n> >>         above %51).\n> >>         > > > I say this because it strikes me when people say that\n> they are for LOT=true with the logic that since a\n> >>         UASF is guaranteed to happen then it's better to just make it\n> default from the beginning. Words like\n> >>         coordination and safety are sometimes sprinkled into the\n> argument.\n> >>         > > > The argument comes from a naive assumption that users\n> MUST upgrade to the choice that is submitted into\n> >>         code. But in fact this isn't true and some voices in this\n> discussion need to be more humble about what users\n> >>         must or must not run.\n> >>         > > > Does no one realize that it is a very possible outcome\n> that if LOT=true is released there may be only a\n> >>         handful of people that begin running it while everyone else\n> delays their upgrade (with the very good reason of\n> >>         not getting involved in politics) and a year later those\n> handful of people just become stuck at the moment of\n> >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a\n> minority of miners, activating, and forking off into a\n> >>         minority fork. Then a lot=false could be started that ends up\n> activating the feature now that the stubborn\n> >>         option has ran its course.\n> >>         > > > The result: a wasted year of waiting and a minority of\n> people who didn't want to be lenient with miners\n> >>         by default. The chains could be called BitcoinLenient and\n> BitcoinStubborn.\n> >>         > > > How is that strictly safer or more coordinated?\n> >>         > > > I may be in the minority, or maybe a silent majority, or\n> maybe a majority that just hasn't considered\n> >>         this as a choice but honestly if there is contention about\n> whether we're going to be stubborn or lenient with\n> >>         miners for Taproot and in the future then I prefer to just not\n> activate anything at all. I'm fine for calling\n> >>         bitcoin ossified, accepting that segwit is Bitcoin's last\n> network upgrade. Taproot is amazing but no new\n> >>         feature is worth a network split down the middle.\n> >>         > > > Maybe in 10 or 20 years, when other blockchains implement\n> features like Taproot and many more, we will\n> >>         become envious enough to put aside our differences on how to\n> behave towards miners and finally activate Taproot.\n> >>         > > > An activation mechanism is a consensus change like any\n> other change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\n> >>         > > > Cheers\n> >>         > > > Ariel Lorenzo-Luaces\n> >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>         > > >\n> >>         > > > > Yesterday (February 16th) we held a second meeting on\n> Taproot\n> >>         > > > > activation on IRC which again was open to all. Despite\n> what appeared\n> >>         > > > > to be majority support for LOT=false over LOT=true in\n> the first\n> >>         > > > > meeting I (and others) thought the arguments had not\n> been explored in\n> >>         > > > > depth and that we should have a follow up meeting\n> almost entirely\n> >>         > > > > focused on whether LOT (lockinontimeout) should be set\n> to true or\n> >>         > > > > false.\n> >>         > > > >\n> >>         > > > > The meeting was announced here:\n> >>         > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >\n> >>         > > > >\n> >>         > > > > In that mailing list post I outlined the arguments for\n> LOT=true (T1 to\n> >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their\n> strongest form I\n> >>         > > > > could. David Harding responded with an additional\n> argument for\n> >>         > > > > LOT=false (F7) here:\n> >>         > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >\n> >>         > > > >\n> >>         > > > > These meetings are very challenging given they are open\n> to all, you\n> >>         > > > > don\u2019t know who will attend and you don\u2019t know most\n> people\u2019s views in\n> >>         > > > > advance. I tried to give time for both the LOT=true\n> arguments and the\n> >>         > > > > LOT=false arguments to be discussed as I knew there was\n> support for\n> >>         > > > > both. We only tried evaluating which had more support\n> and which had\n> >>         > > > > more strong opposition towards the end of the meeting.\n> >>         > > > >\n> >>         > > > > The conversation log is here:\n> >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <\n> http://gnusha.org/taproot-activation/2021-02-16.log>\n> >>         > > > >\n> >>         > > > > (If you are so inclined you can watch a video of the\n> meeting here.\n> >>         > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up\n> the livestream:\n> >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <\n> https://www.youtube.com/watch?v=vpl5q1ovMLM>)\n> >>         > > > >\n> >>         > > > > A summary of the meeting was provided by Luke Dashjr on\n> Mastodon here:\n> >>         > > > >\n> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n> >>         > > > >\n> >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely\n> unproductive, but we\n> >>         > > > > did manage to come to consensus on everything but\n> LockinOnTimeout.\n> >>         > > > >\n> >>         > > > > Activation height range: 693504-745920\n> >>         > > > >\n> >>         > > > > MASF threshold: 1815/2016 blocks (90%)\n> >>         > > > >\n> >>         > > > > Keep in mind only ~100 people showed for the meetings,\n> hardly\n> >>         > > > > representative of the entire community.\n> >>         > > > >\n> >>         > > > > So, these details remain JUST a proposal for now.\n> >>         > > > >\n> >>         > > > > It seems inevitable that there won't be consensus on\n> LOT.\n> >>         > > > >\n> >>         > > > > Everyone will have to choose for himself. :/\n> >>         > > > >\n> >>         > > > > Personally I agree with most of this. I agree that\n> there wasn\u2019t\n> >>         > > > > overwhelming consensus for either LOT=true or\n> LOT=false. However, from\n> >>         > > > > my perspective there was clearly more strong opposition\n> (what would\n> >>         > > > > usually be deemed a NACK in Bitcoin Core review\n> terminology) from\n> >>         > > > > Bitcoin Core contributors, Lightning developers and\n> other community\n> >>         > > > > members against LOT=true than there was for LOT=false.\n> Andrew Chow\n> >>         > > > > tried to summarize views from the meeting in this\n> analysis:\n> >>         > > > >\n> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >>         <\n> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n> >>         > > > >\n> >>         > > > > I am also aware of other current and previous Bitcoin\n> Core\n> >>         > > > > contributors and Lightning developers who didn\u2019t attend\n> the meeting in\n> >>         > > > > person who are opposed to LOT=true. I don\u2019t want to put\n> them in the\n> >>         > > > > spotlight for no reason but if you go through the\n> conversation logs of\n> >>         > > > > not only the meeting but the weeks of discussion prior\n> to this meeting\n> >>         > > > > you will see their views evaluated on the\n> ##taproot-activation\n> >>         > > > > channel. In addition, on taprootactivation.com <\n> http://taprootactivation.com> some mining pools\n> >>         > > > > expressed a preference for lot=false though I don\u2019t\n> know how strong\n> >>         > > > > that preference was.\n> >>         > > > >\n> >>         > > > > I am only one voice but it is my current assessment\n> that if we are to\n> >>         > > > > attempt to finalize Taproot activation parameters and\n> propose them to\n> >>         > > > > the community at this time our only option is to\n> propose LOT=false.\n> >>         > > > > Any further delay appears to me counterproductive in\n> our collective\n> >>         > > > > aim to get the Taproot soft fork activated as early as\n> possible.\n> >>         > > > >\n> >>         > > > > Obviously others are free to disagree with that\n> assessment and\n> >>         > > > > continue discussions but personally I will be\n> attempting to avoid\n> >>         > > > > those discussions unless prominent new information\n> comes to light or\n> >>         > > > > various specific individuals change their minds.\n> >>         > > > >\n> >>         > > > > Next week we are planning a code review of the Bitcoin\n> Core PR #19573\n> >>         > > > > which was initially delayed because of this LOT\n> discussion. As I\u2019ve\n> >>         > > > > said previously that will be loosely following the\n> format of the\n> >>         > > > > Bitcoin Core PR review club and will be lower level and\n> more\n> >>         > > > > technical. That is planned for Tuesday February 23rd at\n> 19:00 UTC on\n> >>         > > > > the IRC channel ##taproot-activation.\n> >>         > > > >\n> >>         > > > > Thanks to the meeting participants (and those who\n> joined the\n> >>         > > > > discussion on the channel prior and post the meeting)\n> for engaging\n> >>         > > > > productively and in good faith.\n> >>         > >\n> >>         > > --\n> >>         > > Michael Folkson\n> >>         > > Email: michaelfolkson at gmail.com <mailto:\n> michaelfolkson at gmail.com>\n> >>         > > Keybase: michaelfolkson\n> >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >>         > > _______________________________________________\n> >>         > > bitcoin-dev mailing list\n> >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:\n> bitcoin-dev at lists.linuxfoundation.org>\n> >>         > >\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >>\n> >>\n> >>\n> >>\n> >>     --\n> >>     Michael Folkson\n> >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> >>     Keybase: michaelfolkson\n> >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >>     _______________________________________________\n> >>     bitcoin-dev mailing list\n> >>     bitcoin-dev at lists.linuxfoundation.org <mailto:\n> bitcoin-dev at lists.linuxfoundation.org>\n> >>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> >\n> >\n> > --\n> > Michael Folkson\n> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> > Keybase: michaelfolkson\n> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/6d75f9dd/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T14:53:48",
                "message_text_only": "You say \"short term PR\", I say \"risking millions of user dollars\".\n\nOn 2/18/21 09:51, Michael Folkson wrote:\n>  > getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an exchange \n> losing millions would be worse than having Taproot is good.\n> \n> We are at the point where an upgrade that confers significant long term benefits for the whole ecosystem is not as \n> important as bad short term PR? That is a depressing outlook if that is what you believe.\n> \n> Even in that worst case scenario exchanges should not lose money if they are competent and are able to manage that risk.\n> \n> On Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n> \n>     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n>     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as\n>     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to\n>     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n>     exchange losing millions would be worse than having Taproot is good.\n> \n>     Matt\n> \n>     On 2/18/21 09:26, Michael Folkson wrote:\n>      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n>     forks,\n>      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n>      >\n>      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n>     such as\n>      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n>     splits\n>      > I think is shortsighted. Indeed I think even if we collectively\u00a0decided not to do any future soft fork upgrades ever\n>      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n>      >\n>      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n>     though I'm\n>      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n>     (though\n>      > admittedly you have a much better understanding than me of what happened in 2017).\n>      >\n>      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot\n>      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n>      > wouldn't kill Bitcoin long term.\n>      >\n>      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n>     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n>      >\n>      >\u00a0 \u00a0 \u00a0If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n>      >\u00a0 \u00a0 \u00a0and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n>     and not\n>      >\u00a0 \u00a0 \u00a0activate Taproot. Seriously.\n>      >\n>      >\u00a0 \u00a0 \u00a0Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n>      >\n>      >\u00a0 \u00a0 \u00a0Matt\n>      >\n>      >>\u00a0 \u00a0 \u00a0On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\n>      >>\u00a0 \u00a0 \u00a0\ufeff\n>      >>\u00a0 \u00a0 \u00a0Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n>      >>\u00a0 \u00a0 \u00a0heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n>     users\n>      >>\u00a0 \u00a0 \u00a0should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n>      >>\u00a0 \u00a0 \u00a0implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n>      >>\n>      >>\n>      >>\n>      >>\u00a0 \u00a0 \u00a0On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n>     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Good morning all,\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Who's we here?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Release both and let the network decide.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0This assures everyone that neither choice is being forced on users, and instead what is being forced on\n>     users,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0is for users to make that choice themselves.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Regards,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0ZmnSCPxj\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n>     in the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to conversation on the IRC channel or on social media etc.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>     into\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I personally have never made this assumption. Of course users aren't forced to run any particular\n>     software\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0version, quite the opposite. Defaults set in software versions matter though as many users won't change\n>     them.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>     only a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>     reason of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>     moment of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n>     activate\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n>     false in a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0software release there is the possibility (T2 in\n>      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0appears to be no more safe than LOT=true.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>     miners\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n>     think it\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0offers them clarity on what will happen over a year time period and removes the need for coordinated or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uncoordinated community UASF efforts on top of LOT=false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have pledged\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n>      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n>     <http://taprootactivation.com>> (and this effort has informed the discussion) without\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0taking pledges of support as cast iron guarantees.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0email :)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n>     <mailto:arielluaces at gmail.com>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n>     inevitable, like\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n>     support,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0or any support right up against a miner activation threshold.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0in people's minds.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0above %51).\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n>     since a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0coordination and safety are sometimes sprinkled into the argument.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>     into\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>     only a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>     reason of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>     moment of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n>     into a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0option has ran its course.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>     miners\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > How is that strictly safer or more coordinated?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n>     with\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n>     calling\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0feature is worth a network split down the middle.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0become envious enough to put aside our differences on how to behave towards miners and finally activate\n>     Taproot.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Cheers\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Ariel Lorenzo-Luaces\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n>     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Yesterday (February 16th) we held a second meeting on Taproot\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > activation on IRC which again was open to all. Despite what appeared\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > to be majority support for LOT=false over LOT=true in the first\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > meeting I (and others) thought the arguments had not been explored in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > depth and that we should have a follow up meeting almost entirely\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > focused on whether LOT (lockinontimeout) should be set to true or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The meeting was announced here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > could. David Harding responded with an additional argument for\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false (F7) here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > These meetings are very challenging given they are open to all, you\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > advance. I tried to give time for both the LOT=true arguments and the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false arguments to be discussed as I knew there was support for\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > both. We only tried evaluating which had more support and which had\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > more strong opposition towards the end of the meeting.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The conversation log is here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > http://gnusha.org/taproot-activation/2021-02-16.log\n>     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n>     <http://gnusha.org/taproot-activation/2021-02-16.log>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > (If you are so inclined you can watch a video of the meeting here.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n>     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > did manage to come to consensus on everything but LockinOnTimeout.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Activation height range: 693504-745920\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > MASF threshold: 1815/2016 blocks (90%)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Keep in mind only ~100 people showed for the meetings, hardly\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > representative of the entire community.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > So, these details remain JUST a proposal for now.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > It seems inevitable that there won't be consensus on LOT.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Everyone will have to choose for himself. :/\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > my perspective there was clearly more strong opposition (what would\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core contributors, Lightning developers and other community\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > tried to summarize views from the meeting in this analysis:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am also aware of other current and previous Bitcoin Core\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > spotlight for no reason but if you go through the conversation logs of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > not only the meeting but the weeks of discussion prior to this meeting\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > you will see their views evaluated on the ##taproot-activation\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n>     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > expressed a preference for lot=false though I don\u2019t know how strong\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > that preference was.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am only one voice but it is my current assessment that if we are to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > attempt to finalize Taproot activation parameters and propose them to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the community at this time our only option is to propose LOT=false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Any further delay appears to me counterproductive in our collective\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > aim to get the Taproot soft fork activated as early as possible.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Obviously others are free to disagree with that assessment and\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > continue discussions but personally I will be attempting to avoid\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > those discussions unless prominent new information comes to light or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > various specific individuals change their minds.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > said previously that will be loosely following the format of the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core PR review club and will be lower level and more\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the IRC channel ##taproot-activation.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the meeting participants (and those who joined the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > discussion on the channel prior and post the meeting) for engaging\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > productively and in good faith.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > --\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Michael Folkson\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Keybase: michaelfolkson\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > _______________________________________________\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev mailing list\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>      >>\n>      >>\n>      >>\n>      >>\n>      >>\u00a0 \u00a0 \u00a0--\n>      >>\u00a0 \u00a0 \u00a0Michael Folkson\n>      >>\u00a0 \u00a0 \u00a0Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      >>\u00a0 \u00a0 \u00a0Keybase: michaelfolkson\n>      >>\u00a0 \u00a0 \u00a0PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>      >>\u00a0 \u00a0 \u00a0_______________________________________________\n>      >>\u00a0 \u00a0 \u00a0bitcoin-dev mailing list\n>      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>      >>\u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>      >\n>      >\n>      >\n>      > --\n>      > Michael Folkson\n>      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      > Keybase: michaelfolkson\n>      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> \n> \n> \n> -- \n> Michael Folkson\n> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T15:01:09",
                "message_text_only": "To ensure we're on the same page, here - I'm not advocating we give up on Taproot. Indeed, without having dug deep into \nthe issue, my overall impression is that Knots has a tiny transaction-processing userbase and it likely isn't worth \ngiving deep thought to whether it forks itself off from the network or not. My point is that, if it were the case that \nvarious implementations of Bitcoin's consensus that have material userbases were to release either a configurable \nconsensus mechanism (without incredible care being given to it, not just a \"we can't decide, whatever\" argument) or a \ndifferent consensus, we'd be much, much better off not having Taproot at all.\n\nMatt\n\nOn 2/18/21 09:53, Matt Corallo via bitcoin-dev wrote:\n> You say \"short term PR\", I say \"risking millions of user dollars\".\n> \n> On 2/18/21 09:51, Michael Folkson wrote:\n>> \u00a0> getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an exchange \n>> losing millions would be worse than having Taproot is good.\n>>\n>> We are at the point where an upgrade that confers significant long term benefits for the whole ecosystem is not as \n>> important as bad short term PR? That is a depressing outlook if that is what you believe.\n>>\n>> Even in that worst case scenario exchanges should not lose money if they are competent and are able to manage that risk.\n>>\n>> On Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n>>\n>> \u00a0\u00a0\u00a0 We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n>> \u00a0\u00a0\u00a0 should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of \n>> that as\n>> \u00a0\u00a0\u00a0 much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being \n>> able to\n>> \u00a0\u00a0\u00a0 use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n>> \u00a0\u00a0\u00a0 exchange losing millions would be worse than having Taproot is good.\n>>\n>> \u00a0\u00a0\u00a0 Matt\n>>\n>> \u00a0\u00a0\u00a0 On 2/18/21 09:26, Michael Folkson wrote:\n>> \u00a0\u00a0\u00a0\u00a0 > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n>> \u00a0\u00a0\u00a0 forks,\n>> \u00a0\u00a0\u00a0\u00a0 > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n>> \u00a0\u00a0\u00a0 such as\n>> \u00a0\u00a0\u00a0\u00a0 > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n>> \u00a0\u00a0\u00a0 splits\n>> \u00a0\u00a0\u00a0\u00a0 > I think is shortsighted. Indeed I think even if we collectively\u00a0decided not to do any future soft fork upgrades \n>> ever\n>> \u00a0\u00a0\u00a0\u00a0 > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n>> \u00a0\u00a0\u00a0 though I'm\n>> \u00a0\u00a0\u00a0\u00a0 > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n>> \u00a0\u00a0\u00a0 (though\n>> \u00a0\u00a0\u00a0\u00a0 > admittedly you have a much better understanding than me of what happened in 2017).\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate \n>> Taproot\n>> \u00a0\u00a0\u00a0\u00a0 > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n>> \u00a0\u00a0\u00a0\u00a0 > wouldn't kill Bitcoin long term.\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n>> \u00a0\u00a0\u00a0 <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >\u00a0 \u00a0 \u00a0If the eventual outcome is that different implementations (that have material *transaction processing* \n>> userbases,\n>> \u00a0\u00a0\u00a0\u00a0 >\u00a0 \u00a0 \u00a0and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n>> \u00a0\u00a0\u00a0 and not\n>> \u00a0\u00a0\u00a0\u00a0 >\u00a0 \u00a0 \u00a0activate Taproot. Seriously.\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >\u00a0 \u00a0 \u00a0Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >\u00a0 \u00a0 \u00a0Matt\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>> \u00a0\u00a0\u00a0 <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0\ufeff\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what \n>> I have\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n>> \u00a0\u00a0\u00a0 users\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n>> \u00a0\u00a0\u00a0 <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Good morning all,\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest \n>> timeline.\"\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Who's we here?\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Release both and let the network decide.\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release \n>> that\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0This assures everyone that neither choice is being forced on users, and instead what is being forced on\n>> \u00a0\u00a0\u00a0 users,\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0is for users to make that choice themselves.\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Regards,\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0ZmnSCPxj\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>> \u00a0\u00a0\u00a0 <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n>> \u00a0\u00a0\u00a0 in the\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're \n>> responding\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to conversation on the IRC channel or on social media etc.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>> \u00a0\u00a0\u00a0 into\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what \n>> users\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I personally have never made this assumption. Of course users aren't forced to run any particular\n>> \u00a0\u00a0\u00a0 software\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0version, quite the opposite. Defaults set in software versions matter though as many users won't change\n>> \u00a0\u00a0\u00a0 them.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>> \u00a0\u00a0\u00a0 only a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>> \u00a0\u00a0\u00a0 reason of\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>> \u00a0\u00a0\u00a0 moment of\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks?\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n>> \u00a0\u00a0\u00a0 activate\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n>> \u00a0\u00a0\u00a0 false in a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0software release there is the possibility (T2 in\n>> \u00a0\u00a0\u00a0\u00a0 >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0appears to be no more safe than LOT=true.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>> \u00a0\u00a0\u00a0 miners\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and \n>> miners fail\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n>> \u00a0\u00a0\u00a0 think it\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0offers them clarity on what will happen over a year time period and removes the need for coordinated or\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uncoordinated community UASF efforts on top of LOT=false.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any \n>> other\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for \n>> bad or\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have \n>> pledged\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0support for Taproot but we don't build secure systems based on pledges of support, we build them to \n>> minimize\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n>> \u00a0\u00a0\u00a0\u00a0 >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n>> \u00a0\u00a0\u00a0 <http://taprootactivation.com>> (and this effort has informed the discussion) without\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0taking pledges of support as cast iron guarantees.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations \n>> in my\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0email :)\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n>> \u00a0\u00a0\u00a0 <mailto:arielluaces at gmail.com>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n>> \u00a0\u00a0\u00a0 inevitable, like\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' \n>> nodes, or\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n>> \u00a0\u00a0\u00a0 support,\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0or any support right up against a miner activation threshold.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a \n>> possibility\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0in people's minds.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some \n>> number\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0above %51).\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n>> \u00a0\u00a0\u00a0 since a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0coordination and safety are sometimes sprinkled into the argument.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>> \u00a0\u00a0\u00a0 into\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what \n>> users\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>> \u00a0\u00a0\u00a0 only a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>> \u00a0\u00a0\u00a0 reason of\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>> \u00a0\u00a0\u00a0 moment of\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n>> \u00a0\u00a0\u00a0 into a\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0minority fork. Then a lot=false could be started that ends up activating the feature now that the \n>> stubborn\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0option has ran its course.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>> \u00a0\u00a0\u00a0 miners\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > How is that strictly safer or more coordinated?\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't \n>> considered\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n>> \u00a0\u00a0\u00a0 with\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n>> \u00a0\u00a0\u00a0 calling\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0feature is worth a network split down the middle.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, \n>> we will\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0become envious enough to put aside our differences on how to behave towards miners and finally activate\n>> \u00a0\u00a0\u00a0 Taproot.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any \n>> other\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Cheers\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Ariel Lorenzo-Luaces\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n>> \u00a0\u00a0\u00a0 <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Yesterday (February 16th) we held a second meeting on Taproot\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > activation on IRC which again was open to all. Despite what appeared\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > to be majority support for LOT=false over LOT=true in the first\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > meeting I (and others) thought the arguments had not been explored in\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > depth and that we should have a follow up meeting almost entirely\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > focused on whether LOT (lockinontimeout) should be set to true or\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > false.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The meeting was announced here:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > could. David Harding responded with an additional argument for\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false (F7) here:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > These meetings are very challenging given they are open to all, you\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > advance. I tried to give time for both the LOT=true arguments and the\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false arguments to be discussed as I knew there was support for\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > both. We only tried evaluating which had more support and which had\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > more strong opposition towards the end of the meeting.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The conversation log is here:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > http://gnusha.org/taproot-activation/2021-02-16.log\n>> \u00a0\u00a0\u00a0 <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n>> \u00a0\u00a0\u00a0 <http://gnusha.org/taproot-activation/2021-02-16.log>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > (If you are so inclined you can watch a video of the meeting here.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n>> \u00a0\u00a0\u00a0 <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>> \u00a0\u00a0\u00a0 <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>> \u00a0\u00a0\u00a0 <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > did manage to come to consensus on everything but LockinOnTimeout.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Activation height range: 693504-745920\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > MASF threshold: 1815/2016 blocks (90%)\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Keep in mind only ~100 people showed for the meetings, hardly\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > representative of the entire community.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > So, these details remain JUST a proposal for now.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > It seems inevitable that there won't be consensus on LOT.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Everyone will have to choose for himself. :/\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > my perspective there was clearly more strong opposition (what would\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core contributors, Lightning developers and other community\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > tried to summarize views from the meeting in this analysis:\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>> \u00a0\u00a0\u00a0 <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>> \u00a0\u00a0\u00a0 <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am also aware of other current and previous Bitcoin Core\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > spotlight for no reason but if you go through the conversation logs of\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > not only the meeting but the weeks of discussion prior to this meeting\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > you will see their views evaluated on the ##taproot-activation\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n>> \u00a0\u00a0\u00a0 <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > expressed a preference for lot=false though I don\u2019t know how strong\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > that preference was.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am only one voice but it is my current assessment that if we are to\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > attempt to finalize Taproot activation parameters and propose them to\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the community at this time our only option is to propose LOT=false.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Any further delay appears to me counterproductive in our collective\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > aim to get the Taproot soft fork activated as early as possible.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Obviously others are free to disagree with that assessment and\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > continue discussions but personally I will be attempting to avoid\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > those discussions unless prominent new information comes to light or\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > various specific individuals change their minds.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > said previously that will be loosely following the format of the\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core PR review club and will be lower level and more\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the IRC channel ##taproot-activation.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the meeting participants (and those who joined the\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > discussion on the channel prior and post the meeting) for engaging\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > productively and in good faith.\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > --\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Michael Folkson\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>> \u00a0\u00a0\u00a0 <mailto:michaelfolkson at gmail.com>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Keybase: michaelfolkson\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > _______________________________________________\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev mailing list\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> \u00a0\u00a0\u00a0 <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0--\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0Michael Folkson\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>> \u00a0\u00a0\u00a0 <mailto:michaelfolkson at gmail.com>>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0Keybase: michaelfolkson\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0_______________________________________________\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0bitcoin-dev mailing list\n>> \u00a0\u00a0\u00a0\u00a0 >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> \u00a0\u00a0\u00a0 <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>> \u00a0\u00a0\u00a0\u00a0 >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>> \u00a0\u00a0\u00a0\u00a0 >>\u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \u00a0\u00a0\u00a0 <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 >\n>> \u00a0\u00a0\u00a0\u00a0 > --\n>> \u00a0\u00a0\u00a0\u00a0 > Michael Folkson\n>> \u00a0\u00a0\u00a0\u00a0 > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>> \u00a0\u00a0\u00a0 <mailto:michaelfolkson at gmail.com>>\n>> \u00a0\u00a0\u00a0\u00a0 > Keybase: michaelfolkson\n>> \u00a0\u00a0\u00a0\u00a0 > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>>\n>>\n>> -- \n>> Michael Folkson\n>> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Keagan McClelland",
                "date": "2021-02-18T15:04:53",
                "message_text_only": "Hi all,\n\nI think it's important for us to consider what is actually being considered\nfor activation here.\n\nThe designation of \"soft fork\" is accurate but I don't think it adequately\nconveys how non-intrusive a change like this is. All that taproot does\n(unless I'm completely missing something) is imbue a previously undefined\nscript version with actual semantics. In order for a chain reorg to take\nplace it would mean that someone would have to have a use case for that\nscript version today. This is something I think that we can easily check by\ndigging through the UTXO set or history. If anyone is using that script\nversion, we absolutely should not be using it, but that doesn't mean that\nwe can't switch to a script version that no one is actually using.\n\nIf no one is even attempting to use the script version, then the change has\nno effect on whether a chain split occurs because there is simply no block\nthat contains a transaction that only some of the network will accept.\n\nFurthermore, I don't know how Bitcoin can stand the test of time if we\nallow developers who rely on \"undefined behavior\" (which the taproot script\nversion presently is) to exert tremendous influence over what code does or\ndoes not get run. This isn't a soft fork that makes some particular UTXO's\nunspendable. It isn't one that bans miners from collecting fees. It is a\nchange that means that certain \"always accept\" transactions actually have\nreal conditions you have to meet. I can't imagine a less intrusive change.\n\nOn the other hand, choosing to let L=F be a somewhat final call sets a very\nreal precedent that 10% of what I estimate to be 1% of bitcoin users can\neffectively block any change from here on forward. At that point we are\nsaying that miners are in control of network consensus in ways they have\nnot been up until now. I don't think this is a more desirable outcome to\nlet ~0.1% of the network get to block *non-intrusive* changes that the rest\nof the network wants.\n\nI can certainly live with an L=F attempt as a way to punt on the\ndiscussion, maybe the activation happens and this will all be fine. But if\nit doesn't, I hardly think that users of Bitcoin are just going to be like\n\"well, guess that's it for Taproot\". I have no idea what ensues at that\npoint, but probably another community led UASF movement.\n\nI wasn't super well educated on this stuff back in '17 when Segwit went\ndown, as I was new at that time, so if I'm missing something please say so.\nBut from my point of view, we can't treat all soft forks as equal.\n\nKeagan\n\nOn Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We've had several softforks in Bitcoin which, through the course of their\n> activation, had a several-block reorg. That\n> should be indication enough that we need to very carefully consider\n> activation to ensure we reduce the risk of that as\n> much as absolutely possible. Again, while I think Taproot is a huge\n> improvement and am looking forward to being able to\n> use it, getting unlucky and hitting a 4-block reorg that happens to\n> include a double-spend and some PR around an\n> exchange losing millions would be worse than having Taproot is good.\n>\n> Matt\n>\n> On 2/18/21 09:26, Michael Folkson wrote:\n> > Thanks for your response Matt. It is a fair challenge. There is always\n> going to be an element of risk with soft forks,\n> > all we can do is attempt to minimize that risk. I would argue that risk\n> has been minimized for Taproot.\n> >\n> > You know (better than I do in fact) that Bitcoin (and layers built on\n> top of it) greatly benefit from upgrades such as\n> > Taproot. To say we shouldn't do Taproot or any future soft forks because\n> there is a small but real risk of chain splits\n> > I think is shortsighted. Indeed I think even if we collectively decided\n> not to do any future soft fork upgrades ever\n> > again on this mailing list that wouldn't stop soft fork attempts from\n> other people in future.\n> >\n> > I don't think there is anything else we can do to minimize that risk for\n> the Taproot soft fork at this point though I'm\n> > open to ideas. To reiterate that risk will never be zero. I don't think\n> I see Bitcoin as fragile as you seem to (though\n> > admittedly you have a much better understanding than me of what happened\n> in 2017).\n> >\n> > The likely scenario for the Taproot soft fork is LOT turns out to be\n> entirely irrelevant and miners activate Taproot\n> > before it becomes relevant. And even the unlikely worst case scenario\n> would only cause short term disruption and\n> > wouldn't kill Bitcoin long term.\n> >\n> > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com\n> <mailto:lf-lists at mattcorallo.com>> wrote:\n> >\n> >     If the eventual outcome is that different implementations (that have\n> material *transaction processing* userbases,\n> >     and I\u2019m not sure to what extent that\u2019s true with Knots) ship\n> different consensus rules, we should stop here and not\n> >     activate Taproot. Seriously.\n> >\n> >     Bitcoin is a consensus system. The absolute worst outcome at all\n> possible is to have it fall out of consensus.\n> >\n> >     Matt\n> >\n> >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org\n> >>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>\n> >>     \ufeff\n> >>     Right, that is one option. Personally I would prefer a Bitcoin Core\n> release sets LOT=false (based on what I have\n> >>     heard from Bitcoin Core contributors) and a community effort\n> releases a version with LOT=true. I don't think users\n> >>     should be forced to choose something they may have no context on\n> before they are allowed to use Bitcoin Core.\n> >>\n> >>     My current understanding is that roasbeef is planning to set\n> LOT=false on btcd (an alternative protocol\n> >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided\n> on Bitcoin Knots.\n> >>\n> >>\n> >>\n> >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com\n> <mailto:ZmnSCPxj at protonmail.com>> wrote:\n> >>\n> >>         Good morning all,\n> >>\n> >>         > \"An activation mechanism is a consensus change like any other\n> change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\"\n> >>         >\n> >>         > Who's we here?\n> >>         >\n> >>         > Release both and let the network decide.\n> >>\n> >>         A thing that could be done, without mandating either LOT=true\n> or LOT=false, would be to have a release that\n> >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to\n> start if the parameter is not set.\n> >>\n> >>         This assures everyone that neither choice is being forced on\n> users, and instead what is being forced on users,\n> >>         is for users to make that choice themselves.\n> >>\n> >>         Regards,\n> >>         ZmnSCPxj\n> >>\n> >>         >\n> >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>         >\n> >>         > > Thanks for your response Ariel. It would be useful if you\n> responded to specific points I have made in the\n> >>         mailing list post or at least quote these ephemeral \"people\"\n> you speak of. I don't know if you're responding\n> >>         to conversation on the IRC channel or on social media etc.\n> >>         > >\n> >>         > > > The argument comes from a naive assumption that users\n> MUST upgrade to the choice that is submitted into\n> >>         code. But in fact this isn't true and some voices in this\n> discussion need to be more humble about what users\n> >>         must or must not run.\n> >>         > >\n> >>         > > I personally have never made this assumption. Of course\n> users aren't forced to run any particular software\n> >>         version, quite the opposite. Defaults set in software versions\n> matter though as many users won't change them.\n> >>         > >\n> >>         > > > Does no one realize that it is a very possible outcome\n> that if LOT=true is released there may be only a\n> >>         handful of people that begin running it while everyone else\n> delays their upgrade (with the very good reason of\n> >>         not getting involved in politics) and a year later those\n> handful of people just become stuck at the moment of\n> >>         MUST_SIGNAL, unable to mine new blocks?\n> >>         > >\n> >>         > > It is a possible outcome but the likely outcome is that\n> miners activate Taproot before LOT is even\n> >>         relevant. I think it is prudent to prepare for the unlikely but\n> possible outcome that miners fail to activate\n> >>         and hence have this discussion now rather than be unprepared\n> for that eventuality. If LOT is set to false in a\n> >>         software release there is the possibility (T2 in\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>)\n> of individuals or a\n> >>         proportion of the community changing LOT to true. In that sense\n> setting LOT=false in a software release\n> >>         appears to be no more safe than LOT=true.\n> >>         > >\n> >>         > > > The result: a wasted year of waiting and a minority of\n> people who didn't want to be lenient with miners\n> >>         by default.\n> >>         > >\n> >>         > > There is the (unlikely but possible) possibility of a\n> wasted year if LOT is set to false and miners fail\n> >>         to activate. I'm not convinced by this perception that LOT=true\n> is antagonistic to miners. I actually think it\n> >>         offers them clarity on what will happen over a year time period\n> and removes the need for coordinated or\n> >>         uncoordinated community UASF efforts on top of LOT=false.\n> >>         > >\n> >>         > > > An activation mechanism is a consensus change like any\n> other change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\n> >>         > >\n> >>         > > I don't know what you are recommending here to avoid \"this\n> darkest timeline\". Open discussions have\n> >>         occurred and are continuing and in my mailing list post that\n> you responded to **I recommended we propose\n> >>         LOT=false be set in protocol implementations such as Bitcoin\n> Core**. I do think this apocalyptic language\n> >>         isn't particularly helpful. In an open consensus system\n> discussion is healthy, we should prepare for bad or\n> >>         worst case scenarios in advance and doing so is not\n> antagonistic or destructive. Mining pools have pledged\n> >>         support for Taproot but we don't build secure systems based on\n> pledges of support, we build them to minimize\n> >>         trust in any human actors. We can be grateful that people like\n> Alejandro have worked hard on\n> >>         taprootactivation.com <http://taprootactivation.com> (and this\n> effort has informed the discussion) without\n> >>         taking pledges of support as cast iron guarantees.\n> >>         > >\n> >>         > > TL;DR It sounds like you agree with my recommendation to\n> set LOT=false in protocol implementations in my\n> >>         email :)\n> >>         > >\n> >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <\n> arielluaces at gmail.com\n> >>         <mailto:arielluaces at gmail.com>> wrote:\n> >>         > >\n> >>         > > > Something what strikes me about the conversation is the\n> emotion surrounding the letters UASF.\n> >>         > > > It appears as if people discuss UASF as if it's a massive\n> tidal wave of support that is inevitable, like\n> >>         we saw during segwit activation. But the actual definition is\n> \"any activation that is not a MASF\".\n> >>         > > > A UASF can consist of a single node, ten nodes, a\n> thousand, half of all nodes, all business' nodes, or\n> >>         even all the non mining nodes. On another dimension it can have\n> zero mining support, 51% support, 49% support,\n> >>         or any support right up against a miner activation threshold.\n> >>         > > > Hell a UASF doesn't even need code or even a single node\n> running as long as it exists as a possibility\n> >>         in people's minds.\n> >>         > > > The only thing a UASF doesn't have is miner support above\n> an agreed activation threshold (some number\n> >>         above %51).\n> >>         > > > I say this because it strikes me when people say that\n> they are for LOT=true with the logic that since a\n> >>         UASF is guaranteed to happen then it's better to just make it\n> default from the beginning. Words like\n> >>         coordination and safety are sometimes sprinkled into the\n> argument.\n> >>         > > > The argument comes from a naive assumption that users\n> MUST upgrade to the choice that is submitted into\n> >>         code. But in fact this isn't true and some voices in this\n> discussion need to be more humble about what users\n> >>         must or must not run.\n> >>         > > > Does no one realize that it is a very possible outcome\n> that if LOT=true is released there may be only a\n> >>         handful of people that begin running it while everyone else\n> delays their upgrade (with the very good reason of\n> >>         not getting involved in politics) and a year later those\n> handful of people just become stuck at the moment of\n> >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a\n> minority of miners, activating, and forking off into a\n> >>         minority fork. Then a lot=false could be started that ends up\n> activating the feature now that the stubborn\n> >>         option has ran its course.\n> >>         > > > The result: a wasted year of waiting and a minority of\n> people who didn't want to be lenient with miners\n> >>         by default. The chains could be called BitcoinLenient and\n> BitcoinStubborn.\n> >>         > > > How is that strictly safer or more coordinated?\n> >>         > > > I may be in the minority, or maybe a silent majority, or\n> maybe a majority that just hasn't considered\n> >>         this as a choice but honestly if there is contention about\n> whether we're going to be stubborn or lenient with\n> >>         miners for Taproot and in the future then I prefer to just not\n> activate anything at all. I'm fine for calling\n> >>         bitcoin ossified, accepting that segwit is Bitcoin's last\n> network upgrade. Taproot is amazing but no new\n> >>         feature is worth a network split down the middle.\n> >>         > > > Maybe in 10 or 20 years, when other blockchains implement\n> features like Taproot and many more, we will\n> >>         become envious enough to put aside our differences on how to\n> behave towards miners and finally activate Taproot.\n> >>         > > > An activation mechanism is a consensus change like any\n> other change, can be contentious like any other\n> >>         change, and we must resolve it like any other change. Otherwise\n> we risk arriving at the darkest timeline.\n> >>         > > > Cheers\n> >>         > > > Ariel Lorenzo-Luaces\n> >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >>         > > >\n> >>         > > > > Yesterday (February 16th) we held a second meeting on\n> Taproot\n> >>         > > > > activation on IRC which again was open to all. Despite\n> what appeared\n> >>         > > > > to be majority support for LOT=false over LOT=true in\n> the first\n> >>         > > > > meeting I (and others) thought the arguments had not\n> been explored in\n> >>         > > > > depth and that we should have a follow up meeting\n> almost entirely\n> >>         > > > > focused on whether LOT (lockinontimeout) should be set\n> to true or\n> >>         > > > > false.\n> >>         > > > >\n> >>         > > > > The meeting was announced here:\n> >>         > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >\n> >>         > > > >\n> >>         > > > > In that mailing list post I outlined the arguments for\n> LOT=true (T1 to\n> >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their\n> strongest form I\n> >>         > > > > could. David Harding responded with an additional\n> argument for\n> >>         > > > > LOT=false (F7) here:\n> >>         > > > >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >>         <\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >\n> >>         > > > >\n> >>         > > > > These meetings are very challenging given they are open\n> to all, you\n> >>         > > > > don\u2019t know who will attend and you don\u2019t know most\n> people\u2019s views in\n> >>         > > > > advance. I tried to give time for both the LOT=true\n> arguments and the\n> >>         > > > > LOT=false arguments to be discussed as I knew there was\n> support for\n> >>         > > > > both. We only tried evaluating which had more support\n> and which had\n> >>         > > > > more strong opposition towards the end of the meeting.\n> >>         > > > >\n> >>         > > > > The conversation log is here:\n> >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <\n> http://gnusha.org/taproot-activation/2021-02-16.log>\n> >>         > > > >\n> >>         > > > > (If you are so inclined you can watch a video of the\n> meeting here.\n> >>         > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up\n> the livestream:\n> >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <\n> https://www.youtube.com/watch?v=vpl5q1ovMLM>)\n> >>         > > > >\n> >>         > > > > A summary of the meeting was provided by Luke Dashjr on\n> Mastodon here:\n> >>         > > > >\n> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n> >>         > > > >\n> >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely\n> unproductive, but we\n> >>         > > > > did manage to come to consensus on everything but\n> LockinOnTimeout.\n> >>         > > > >\n> >>         > > > > Activation height range: 693504-745920\n> >>         > > > >\n> >>         > > > > MASF threshold: 1815/2016 blocks (90%)\n> >>         > > > >\n> >>         > > > > Keep in mind only ~100 people showed for the meetings,\n> hardly\n> >>         > > > > representative of the entire community.\n> >>         > > > >\n> >>         > > > > So, these details remain JUST a proposal for now.\n> >>         > > > >\n> >>         > > > > It seems inevitable that there won't be consensus on\n> LOT.\n> >>         > > > >\n> >>         > > > > Everyone will have to choose for himself. :/\n> >>         > > > >\n> >>         > > > > Personally I agree with most of this. I agree that\n> there wasn\u2019t\n> >>         > > > > overwhelming consensus for either LOT=true or\n> LOT=false. However, from\n> >>         > > > > my perspective there was clearly more strong opposition\n> (what would\n> >>         > > > > usually be deemed a NACK in Bitcoin Core review\n> terminology) from\n> >>         > > > > Bitcoin Core contributors, Lightning developers and\n> other community\n> >>         > > > > members against LOT=true than there was for LOT=false.\n> Andrew Chow\n> >>         > > > > tried to summarize views from the meeting in this\n> analysis:\n> >>         > > > >\n> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >>         <\n> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n> >>         > > > >\n> >>         > > > > I am also aware of other current and previous Bitcoin\n> Core\n> >>         > > > > contributors and Lightning developers who didn\u2019t attend\n> the meeting in\n> >>         > > > > person who are opposed to LOT=true. I don\u2019t want to put\n> them in the\n> >>         > > > > spotlight for no reason but if you go through the\n> conversation logs of\n> >>         > > > > not only the meeting but the weeks of discussion prior\n> to this meeting\n> >>         > > > > you will see their views evaluated on the\n> ##taproot-activation\n> >>         > > > > channel. In addition, on taprootactivation.com <\n> http://taprootactivation.com> some mining pools\n> >>         > > > > expressed a preference for lot=false though I don\u2019t\n> know how strong\n> >>         > > > > that preference was.\n> >>         > > > >\n> >>         > > > > I am only one voice but it is my current assessment\n> that if we are to\n> >>         > > > > attempt to finalize Taproot activation parameters and\n> propose them to\n> >>         > > > > the community at this time our only option is to\n> propose LOT=false.\n> >>         > > > > Any further delay appears to me counterproductive in\n> our collective\n> >>         > > > > aim to get the Taproot soft fork activated as early as\n> possible.\n> >>         > > > >\n> >>         > > > > Obviously others are free to disagree with that\n> assessment and\n> >>         > > > > continue discussions but personally I will be\n> attempting to avoid\n> >>         > > > > those discussions unless prominent new information\n> comes to light or\n> >>         > > > > various specific individuals change their minds.\n> >>         > > > >\n> >>         > > > > Next week we are planning a code review of the Bitcoin\n> Core PR #19573\n> >>         > > > > which was initially delayed because of this LOT\n> discussion. As I\u2019ve\n> >>         > > > > said previously that will be loosely following the\n> format of the\n> >>         > > > > Bitcoin Core PR review club and will be lower level and\n> more\n> >>         > > > > technical. That is planned for Tuesday February 23rd at\n> 19:00 UTC on\n> >>         > > > > the IRC channel ##taproot-activation.\n> >>         > > > >\n> >>         > > > > Thanks to the meeting participants (and those who\n> joined the\n> >>         > > > > discussion on the channel prior and post the meeting)\n> for engaging\n> >>         > > > > productively and in good faith.\n> >>         > >\n> >>         > > --\n> >>         > > Michael Folkson\n> >>         > > Email: michaelfolkson at gmail.com <mailto:\n> michaelfolkson at gmail.com>\n> >>         > > Keybase: michaelfolkson\n> >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >>         > > _______________________________________________\n> >>         > > bitcoin-dev mailing list\n> >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:\n> bitcoin-dev at lists.linuxfoundation.org>\n> >>         > >\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >>\n> >>\n> >>\n> >>\n> >>     --\n> >>     Michael Folkson\n> >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> >>     Keybase: michaelfolkson\n> >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >>     _______________________________________________\n> >>     bitcoin-dev mailing list\n> >>     bitcoin-dev at lists.linuxfoundation.org <mailto:\n> bitcoin-dev at lists.linuxfoundation.org>\n> >>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> >\n> >\n> > --\n> > Michael Folkson\n> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>\n> > Keybase: michaelfolkson\n> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/a2f47541/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T15:18:08",
                "message_text_only": "This is absolutely the case, however note that the activation method itself is consensus code which executes as a part \nof a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should \nbe designed, this doesn't imply anything about the consensus code which represents the activation thereof.\n\nHence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one \nwhich almost certainly carries significantly more risk than Taproot.\n\nNote that I don't believe anyone is advocating for \"try to activate, and if it fails, move on\". Various people have \nvarious views on how conservative and timelines for what to do at that point, but I believe most in this discussion are \nOK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority \nof Bitcoin users and is only not activating due to lagging miner upgrades.\n\nMatt\n\nOn 2/18/21 10:04, Keagan McClelland wrote:\n> Hi all,\n> \n> I think it's important for us to consider what is actually being considered for activation here.\n> \n> The designation of \"soft fork\" is accurate but I don't think it adequately conveys how non-intrusive a change like this \n> is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with \n> actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for \n> that script version today. This is something I think that we can easily check by digging through the UTXO set or \n> history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we \n> can't switch to a script version that no one is actually using.\n> \n> If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs \n> because there is simply no block that contains a transaction that only some of the network will accept.\n> \n> Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on \"undefined behavior\" \n> (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run. \n> This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting \n> fees. It is a change that means that certain \"always accept\" transactions actually have real conditions you have to \n> meet. I can't imagine a less intrusive change.\n> \n> On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate \n> to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners \n> are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable \n> outcome to let ~0.1% of the network get to block /non-intrusive/\u00a0changes that the rest of the network wants.\n> \n> I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will \n> all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like \"well, guess that's it \n> for Taproot\". I have no idea what ensues at that point, but probably another community led UASF movement.\n> \n> I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm \n> missing something please say so. But from my point of view, we can't treat all soft forks as equal.\n> \n> Keagan\n> \n> On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n>     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as\n>     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to\n>     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n>     exchange losing millions would be worse than having Taproot is good.\n> \n>     Matt\n> \n>     On 2/18/21 09:26, Michael Folkson wrote:\n>      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n>     forks,\n>      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n>      >\n>      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n>     such as\n>      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n>     splits\n>      > I think is shortsighted. Indeed I think even if we collectively\u00a0decided not to do any future soft fork upgrades ever\n>      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n>      >\n>      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n>     though I'm\n>      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n>     (though\n>      > admittedly you have a much better understanding than me of what happened in 2017).\n>      >\n>      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot\n>      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n>      > wouldn't kill Bitcoin long term.\n>      >\n>      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n>     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n>      >\n>      >\u00a0 \u00a0 \u00a0If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n>      >\u00a0 \u00a0 \u00a0and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n>     and not\n>      >\u00a0 \u00a0 \u00a0activate Taproot. Seriously.\n>      >\n>      >\u00a0 \u00a0 \u00a0Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n>      >\n>      >\u00a0 \u00a0 \u00a0Matt\n>      >\n>      >>\u00a0 \u00a0 \u00a0On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\n>      >>\u00a0 \u00a0 \u00a0\ufeff\n>      >>\u00a0 \u00a0 \u00a0Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n>      >>\u00a0 \u00a0 \u00a0heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n>     users\n>      >>\u00a0 \u00a0 \u00a0should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n>      >>\u00a0 \u00a0 \u00a0implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n>      >>\n>      >>\n>      >>\n>      >>\u00a0 \u00a0 \u00a0On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n>     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Good morning all,\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Who's we here?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Release both and let the network decide.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0This assures everyone that neither choice is being forced on users, and instead what is being forced on\n>     users,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0is for users to make that choice themselves.\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Regards,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0ZmnSCPxj\n>      >>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n>     in the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to conversation on the IRC channel or on social media etc.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>     into\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I personally have never made this assumption. Of course users aren't forced to run any particular\n>     software\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0version, quite the opposite. Defaults set in software versions matter though as many users won't change\n>     them.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>     only a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>     reason of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>     moment of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n>     activate\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n>     false in a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0software release there is the possibility (T2 in\n>      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0appears to be no more safe than LOT=true.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>     miners\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n>     think it\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0offers them clarity on what will happen over a year time period and removes the need for coordinated or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uncoordinated community UASF efforts on top of LOT=false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have pledged\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n>      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n>     <http://taprootactivation.com>> (and this effort has informed the discussion) without\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0taking pledges of support as cast iron guarantees.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0email :)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n>     <mailto:arielluaces at gmail.com>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n>     inevitable, like\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n>     support,\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0or any support right up against a miner activation threshold.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0in people's minds.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0above %51).\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n>     since a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0coordination and safety are sometimes sprinkled into the argument.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n>     into\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n>     only a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n>     reason of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n>     moment of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n>     into a\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0option has ran its course.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n>     miners\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > How is that strictly safer or more coordinated?\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n>     with\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n>     calling\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0feature is worth a network split down the middle.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0become envious enough to put aside our differences on how to behave towards miners and finally activate\n>     Taproot.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Cheers\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Ariel Lorenzo-Luaces\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n>     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Yesterday (February 16th) we held a second meeting on Taproot\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > activation on IRC which again was open to all. Despite what appeared\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > to be majority support for LOT=false over LOT=true in the first\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > meeting I (and others) thought the arguments had not been explored in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > depth and that we should have a follow up meeting almost entirely\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > focused on whether LOT (lockinontimeout) should be set to true or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The meeting was announced here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > could. David Harding responded with an additional argument for\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false (F7) here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > These meetings are very challenging given they are open to all, you\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > advance. I tried to give time for both the LOT=true arguments and the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false arguments to be discussed as I knew there was support for\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > both. We only tried evaluating which had more support and which had\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > more strong opposition towards the end of the meeting.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The conversation log is here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > http://gnusha.org/taproot-activation/2021-02-16.log\n>     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n>     <http://gnusha.org/taproot-activation/2021-02-16.log>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > (If you are so inclined you can watch a video of the meeting here.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n>     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > did manage to come to consensus on everything but LockinOnTimeout.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Activation height range: 693504-745920\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > MASF threshold: 1815/2016 blocks (90%)\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Keep in mind only ~100 people showed for the meetings, hardly\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > representative of the entire community.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > So, these details remain JUST a proposal for now.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > It seems inevitable that there won't be consensus on LOT.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Everyone will have to choose for himself. :/\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Personally I agree with most of this. I agree that there wasn\u2019t\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > my perspective there was clearly more strong opposition (what would\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core contributors, Lightning developers and other community\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > members against LOT=true than there was for LOT=false. Andrew Chow\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > tried to summarize views from the meeting in this analysis:\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am also aware of other current and previous Bitcoin Core\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > spotlight for no reason but if you go through the conversation logs of\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > not only the meeting but the weeks of discussion prior to this meeting\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > you will see their views evaluated on the ##taproot-activation\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n>     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > expressed a preference for lot=false though I don\u2019t know how strong\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > that preference was.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am only one voice but it is my current assessment that if we are to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > attempt to finalize Taproot activation parameters and propose them to\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the community at this time our only option is to propose LOT=false.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Any further delay appears to me counterproductive in our collective\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > aim to get the Taproot soft fork activated as early as possible.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Obviously others are free to disagree with that assessment and\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > continue discussions but personally I will be attempting to avoid\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > those discussions unless prominent new information comes to light or\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > various specific individuals change their minds.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > said previously that will be loosely following the format of the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core PR review club and will be lower level and more\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the IRC channel ##taproot-activation.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the meeting participants (and those who joined the\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > discussion on the channel prior and post the meeting) for engaging\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > productively and in good faith.\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > --\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Michael Folkson\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Keybase: michaelfolkson\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > _______________________________________________\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev mailing list\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>      >>\n>      >>\n>      >>\n>      >>\n>      >>\u00a0 \u00a0 \u00a0--\n>      >>\u00a0 \u00a0 \u00a0Michael Folkson\n>      >>\u00a0 \u00a0 \u00a0Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      >>\u00a0 \u00a0 \u00a0Keybase: michaelfolkson\n>      >>\u00a0 \u00a0 \u00a0PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>      >>\u00a0 \u00a0 \u00a0_______________________________________________\n>      >>\u00a0 \u00a0 \u00a0bitcoin-dev mailing list\n>      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>      >>\u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n>      >\n>      >\n>      >\n>      > --\n>      > Michael Folkson\n>      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n>     <mailto:michaelfolkson at gmail.com>>\n>      > Keybase: michaelfolkson\n>      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>"
            },
            {
                "author": "Ariel Luaces",
                "date": "2021-02-19T02:20:37",
                "message_text_only": "Hi Michael\nI think you're right, sorry for getting a little apocalyptic at the\nend there lol.\n\n> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n>\n> Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.\n> > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n> I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.\n\nI'm mostly referring to the two IRC discussions. I normally try to\navoid singling people out that's why I didn't refer to anyone in\nperticular.\nHere I'll list a couple of quotes from these ephemeral people, while\nreading them keep in mind what would happen if a majority users and\nminers decide to just avoid the latest version.\n- 11:06: \"LOT=true does not split the chain. It strictly reduces the\nliklihood of that.\"\n- 11:06: \"LOT=false has chainsplit risks, not LOT=true\"\n- 08:59 \"I guess it would be helpful to hear miners' answers to that question.\"\nResponse: 09:01 \"not sure why; miners don't decide anything in this\nregard it's more of `Taproot is activating. Please accelerate it if\nyou can`\"\nReading the logs again I see some voices that do consider the right\nthat users and miners have to run whatever version they want\nResponse: 09:03 \"I ask because you said something that's equivalent to\n`miners don't get to decide which version of core their run`.\"\n- T1, T2, T3, and T6 have language that assumes mass support for a\nUASF and then proceed to make conclusions on what is safer and easier\nto coordinate\nA voice in the discussion expressed the same point I'm making:\n10:53 \"I disagree with T1: i don't think there is any logical\nconsequence in hardcoding LOT=true ensuring Taproot activation and\neven less ensuring no political shenanigans. We obviously need\neconomic majority to run it and that would open way more political\narguments that they bluntly take part in an UASF without any bad\nbehaviour from miners.\"\n- 11:14 \"we know people will run LOT=true regardless of the default,\nso it will be safer if LOT=true is made the default\"\n- 11:18 \"With LOT=true, attempted UASFs are not necessary\"\n- 11:18 \"why give them the ability to act maliciously in the first place?\"\nResponse:11:18\"LOT=false does not; people choosing to run software\nthat will enforce taproot under some reasonable circumstances provides\nthe information.  LOT=false just reduces the risk of unexpected\nresults from resulting in danger.\"\nResponse: 11:18 \"LOT=false strictly increases the risks though..\"\nResponse: 11:18 \"please stop saying that, there are tradeoffs both ways.\"\n- 11:11 \"LOT=false gives miners the ability to decide [in response to\nsomeone saying that LOT=false gives everyone else in the community the\nability to decide]\"\nThis quote is a bit more nuanced because the implication is that\nLOT=true doesn't give the ability to decide. But in reality they have\nthe ability to decide to not upgrade. Users  can also not upgrade to\nbe in solidarity with miners to protect them from unfair distrust and\naggression.\nAll the arguments above for LOT=true are rooted in the assumption that\neveryone must upgrade to the latest version because of course they\nwill...? But that's not a given.\n\nThere are examples of people being aware that miners and users can run\nany version they want. I misjudged the number of people who know that\nLOT=true doesn't guarantee anything.\n- 11:17 \"The LOT=True crowd seems to have an underlying assumption\nthat a UASF will occur instead of something more orderly like Modern\nSoftfork Activation suggested, why? I don't think chances of that\nhappening are very high unless things play out similarly to Segwit but\nit doesn't look like that.\"\n- 11:17 \"UASFs can be made much more difficult with a counter-UASF....\nUASFs like this one and segwit relied on intolerant-minority effects\"\n(I'm assuming counter-UASF means not upgrading as opposed to upgrading\nto a new client that rejects the activation flag)\n\n> There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.\nIf you look at https://taprootactivation.com/ no miners seem to be\nexpressing any support at all for lot=true. To pre-empt the counter\nargument, I know that miners don't decide, I'm just using that poll as\na proxy to estimate whether they would be antagonized by the promotion\nof LOT=true.\nI'm not a miner and I think the \"fork will happen regardless of the\nconsequences\" attitude is antagonistic towards everyone in general,\nnot just miners.\nThe LOT=true activation mechanism may be tolerated today because\nTaproot has wide support. But in order to prevent future antagonistic\nbehavior around future network changes (possibly more controversial\nones) we should continue the norm of including miners in the\nactivation process, as the friends they are.\nThis idea that LOT=true provides clarity is another is another example\nof an argument rooted in the assumption that users will upgrade\nbecause of course they will. No activation mechanism provides ANY\nguarantees and neither does LOT=true so it's infair to frame it as if\nit does.\nThis is your argument Michael, please don't take anything I say\npersonally I'm just arguing the points.\n\n> It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.\nIf a LOT=true client is released I think the likely outcome is that\npeople won't upgrade at all and I would say that miners failing to\nactivate  will become more likely than you think, strictly due to a\nloud group promoting LOT=true.\nIt's true that some will stubbornly run LOT=true regardless. But if\nthey have not been provoked to do so then I would hope the community\npromotes unity and shuns needlessly conflictive attitudes to avoid\nthe, admittedly inevitable, network split from gathering momentum (a\ncounter-UASF).\nI hope individuals opt for unity and become intolerant (counter-UASF)\nof intolerance (unprovoked-UASF).\n\n> TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)\nYes I do agree with the recommendation of LOT=false. Thank you for\norganizing the discussion.\n\nOn Thu, Feb 18, 2021 at 3:12 AM Samson Mow <samson.mow at gmail.com> wrote:\n>\n> \"An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>\n> Who's we here?\nBy \"we\" I meant everyone involved in the discussion of the activation\nmechanism. The discussion is slowly growing and eventually has to\nreach social media.\n>\n> Release both and let the network decide.\nIf two clients are released with matching activation parameters except\nfor opposing LOT then LOT=true kind of spoils the LOT=false choice\n(only if LOT=true manages to gather support) because running LOT=false\nis being complicit/tolerant of the aggressive attitude of LOT=true.\nIn the case of both being released I would opt for running neither and\nI hope most users and miners do too. Again, with the caveat that only\nif there is visible significant support for LOT=true. And yes, the\n\"significant\" is a subjective word and, based on risk appetite, is\ndifferent for everyone. That's part of the issue.\nA funny metaphor is that if someone is visibly pissing in a pool I'm\nnot going to swim on the other side of the pool, I just won't swim at\nall and go do whatever I was doing before.\n\nCheers\nAriel Lorenzo-Luaces\n\nOn Thu, Feb 18, 2021 at 7:18 AM Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> This is absolutely the case, however note that the activation method itself is consensus code which executes as a part\n> of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should\n> be designed, this doesn't imply anything about the consensus code which represents the activation thereof.\n>\n> Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one\n> which almost certainly carries significantly more risk than Taproot.\n>\n> Note that I don't believe anyone is advocating for \"try to activate, and if it fails, move on\". Various people have\n> various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are\n> OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority\n> of Bitcoin users and is only not activating due to lagging miner upgrades.\n>\n> Matt\n>\n> On 2/18/21 10:04, Keagan McClelland wrote:\n> > Hi all,\n> >\n> > I think it's important for us to consider what is actually being considered for activation here.\n> >\n> > The designation of \"soft fork\" is accurate but I don't think it adequately conveys how non-intrusive a change like this\n> > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with\n> > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for\n> > that script version today. This is something I think that we can easily check by digging through the UTXO set or\n> > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we\n> > can't switch to a script version that no one is actually using.\n> >\n> > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs\n> > because there is simply no block that contains a transaction that only some of the network will accept.\n> >\n> > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on \"undefined behavior\"\n> > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.\n> > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting\n> > fees. It is a change that means that certain \"always accept\" transactions actually have real conditions you have to\n> > meet. I can't imagine a less intrusive change.\n> >\n> > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate\n> > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners\n> > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable\n> > outcome to let ~0.1% of the network get to block /non-intrusive/ changes that the rest of the network wants.\n> >\n> > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will\n> > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like \"well, guess that's it\n> > for Taproot\". I have no idea what ensues at that point, but probably another community led UASF movement.\n> >\n> > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm\n> > missing something please say so. But from my point of view, we can't treat all soft forks as equal.\n> >\n> > Keagan\n> >\n> > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n> >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as\n> >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to\n> >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n> >     exchange losing millions would be worse than having Taproot is good.\n> >\n> >     Matt\n> >\n> >     On 2/18/21 09:26, Michael Folkson wrote:\n> >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n> >     forks,\n> >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n> >      >\n> >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n> >     such as\n> >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n> >     splits\n> >      > I think is shortsighted. Indeed I think even if we collectively decided not to do any future soft fork upgrades ever\n> >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n> >      >\n> >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n> >     though I'm\n> >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n> >     (though\n> >      > admittedly you have a much better understanding than me of what happened in 2017).\n> >      >\n> >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot\n> >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n> >      > wouldn't kill Bitcoin long term.\n> >      >\n> >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n> >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n> >      >\n> >      >     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n> >      >     and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n> >     and not\n> >      >     activate Taproot. Seriously.\n> >      >\n> >      >     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n> >      >\n> >      >     Matt\n> >      >\n> >      >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>\n> >      >>     \ufeff\n> >      >>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n> >      >>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n> >     users\n> >      >>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n> >      >>\n> >      >>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n> >      >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n> >      >>\n> >      >>\n> >      >>\n> >      >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n> >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n> >      >>\n> >      >>         Good morning all,\n> >      >>\n> >      >>         > \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n> >      >>         >\n> >      >>         > Who's we here?\n> >      >>         >\n> >      >>         > Release both and let the network decide.\n> >      >>\n> >      >>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n> >      >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n> >      >>\n> >      >>         This assures everyone that neither choice is being forced on users, and instead what is being forced on\n> >     users,\n> >      >>         is for users to make that choice themselves.\n> >      >>\n> >      >>         Regards,\n> >      >>         ZmnSCPxj\n> >      >>\n> >      >>         >\n> >      >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>         >\n> >      >>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n> >     in the\n> >      >>         mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n> >      >>         to conversation on the IRC channel or on social media etc.\n> >      >>         > >\n> >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> >     into\n> >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> >      >>         must or must not run.\n> >      >>         > >\n> >      >>         > > I personally have never made this assumption. Of course users aren't forced to run any particular\n> >     software\n> >      >>         version, quite the opposite. Defaults set in software versions matter though as many users won't change\n> >     them.\n> >      >>         > >\n> >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> >     only a\n> >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good\n> >     reason of\n> >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the\n> >     moment of\n> >      >>         MUST_SIGNAL, unable to mine new blocks?\n> >      >>         > >\n> >      >>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n> >      >>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n> >     activate\n> >      >>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n> >     false in a\n> >      >>         software release there is the possibility (T2 in\n> >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n> >      >>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n> >      >>         appears to be no more safe than LOT=true.\n> >      >>         > >\n> >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> >     miners\n> >      >>         by default.\n> >      >>         > >\n> >      >>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n> >      >>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n> >     think it\n> >      >>         offers them clarity on what will happen over a year time period and removes the need for coordinated or\n> >      >>         uncoordinated community UASF efforts on top of LOT=false.\n> >      >>         > >\n> >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> >      >>         > >\n> >      >>         > > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n> >      >>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n> >      >>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n> >      >>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n> >      >>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged\n> >      >>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n> >      >>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n> >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n> >     <http://taprootactivation.com>> (and this effort has informed the discussion) without\n> >      >>         taking pledges of support as cast iron guarantees.\n> >      >>         > >\n> >      >>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n> >      >>         email :)\n> >      >>         > >\n> >      >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n> >     <mailto:arielluaces at gmail.com>\n> >      >>         <mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n> >      >>         > >\n> >      >>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n> >      >>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n> >     inevitable, like\n> >      >>         we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n> >      >>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n> >      >>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n> >     support,\n> >      >>         or any support right up against a miner activation threshold.\n> >      >>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n> >      >>         in people's minds.\n> >      >>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n> >      >>         above %51).\n> >      >>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n> >     since a\n> >      >>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n> >      >>         coordination and safety are sometimes sprinkled into the argument.\n> >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> >     into\n> >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> >      >>         must or must not run.\n> >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> >     only a\n> >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good\n> >     reason of\n> >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the\n> >     moment of\n> >      >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n> >     into a\n> >      >>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n> >      >>         option has ran its course.\n> >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> >     miners\n> >      >>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n> >      >>         > > > How is that strictly safer or more coordinated?\n> >      >>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n> >      >>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n> >     with\n> >      >>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n> >     calling\n> >      >>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n> >      >>         feature is worth a network split down the middle.\n> >      >>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n> >      >>         become envious enough to put aside our differences on how to behave towards miners and finally activate\n> >     Taproot.\n> >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> >      >>         > > > Cheers\n> >      >>         > > > Ariel Lorenzo-Luaces\n> >      >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n> >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>         > > >\n> >      >>         > > > > Yesterday (February 16th) we held a second meeting on Taproot\n> >      >>         > > > > activation on IRC which again was open to all. Despite what appeared\n> >      >>         > > > > to be majority support for LOT=false over LOT=true in the first\n> >      >>         > > > > meeting I (and others) thought the arguments had not been explored in\n> >      >>         > > > > depth and that we should have a follow up meeting almost entirely\n> >      >>         > > > > focused on whether LOT (lockinontimeout) should be set to true or\n> >      >>         > > > > false.\n> >      >>         > > > >\n> >      >>         > > > > The meeting was announced here:\n> >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n> >      >>         > > > >\n> >      >>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n> >      >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n> >      >>         > > > > could. David Harding responded with an additional argument for\n> >      >>         > > > > LOT=false (F7) here:\n> >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n> >      >>         > > > >\n> >      >>         > > > > These meetings are very challenging given they are open to all, you\n> >      >>         > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n> >      >>         > > > > advance. I tried to give time for both the LOT=true arguments and the\n> >      >>         > > > > LOT=false arguments to be discussed as I knew there was support for\n> >      >>         > > > > both. We only tried evaluating which had more support and which had\n> >      >>         > > > > more strong opposition towards the end of the meeting.\n> >      >>         > > > >\n> >      >>         > > > > The conversation log is here:\n> >      >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log\n> >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n> >     <http://gnusha.org/taproot-activation/2021-02-16.log>>\n> >      >>         > > > >\n> >      >>         > > > > (If you are so inclined you can watch a video of the meeting here.\n> >      >>         > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n> >      >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n> >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n> >      >>         > > > >\n> >      >>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n> >      >>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n> >      >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n> >      >>         > > > >\n> >      >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n> >      >>         > > > > did manage to come to consensus on everything but LockinOnTimeout.\n> >      >>         > > > >\n> >      >>         > > > > Activation height range: 693504-745920\n> >      >>         > > > >\n> >      >>         > > > > MASF threshold: 1815/2016 blocks (90%)\n> >      >>         > > > >\n> >      >>         > > > > Keep in mind only ~100 people showed for the meetings, hardly\n> >      >>         > > > > representative of the entire community.\n> >      >>         > > > >\n> >      >>         > > > > So, these details remain JUST a proposal for now.\n> >      >>         > > > >\n> >      >>         > > > > It seems inevitable that there won't be consensus on LOT.\n> >      >>         > > > >\n> >      >>         > > > > Everyone will have to choose for himself. :/\n> >      >>         > > > >\n> >      >>         > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n> >      >>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n> >      >>         > > > > my perspective there was clearly more strong opposition (what would\n> >      >>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n> >      >>         > > > > Bitcoin Core contributors, Lightning developers and other community\n> >      >>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n> >      >>         > > > > tried to summarize views from the meeting in this analysis:\n> >      >>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n> >      >>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n> >      >>         > > > >\n> >      >>         > > > > I am also aware of other current and previous Bitcoin Core\n> >      >>         > > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n> >      >>         > > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n> >      >>         > > > > spotlight for no reason but if you go through the conversation logs of\n> >      >>         > > > > not only the meeting but the weeks of discussion prior to this meeting\n> >      >>         > > > > you will see their views evaluated on the ##taproot-activation\n> >      >>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n> >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n> >      >>         > > > > expressed a preference for lot=false though I don\u2019t know how strong\n> >      >>         > > > > that preference was.\n> >      >>         > > > >\n> >      >>         > > > > I am only one voice but it is my current assessment that if we are to\n> >      >>         > > > > attempt to finalize Taproot activation parameters and propose them to\n> >      >>         > > > > the community at this time our only option is to propose LOT=false.\n> >      >>         > > > > Any further delay appears to me counterproductive in our collective\n> >      >>         > > > > aim to get the Taproot soft fork activated as early as possible.\n> >      >>         > > > >\n> >      >>         > > > > Obviously others are free to disagree with that assessment and\n> >      >>         > > > > continue discussions but personally I will be attempting to avoid\n> >      >>         > > > > those discussions unless prominent new information comes to light or\n> >      >>         > > > > various specific individuals change their minds.\n> >      >>         > > > >\n> >      >>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n> >      >>         > > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n> >      >>         > > > > said previously that will be loosely following the format of the\n> >      >>         > > > > Bitcoin Core PR review club and will be lower level and more\n> >      >>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n> >      >>         > > > > the IRC channel ##taproot-activation.\n> >      >>         > > > >\n> >      >>         > > > > Thanks to the meeting participants (and those who joined the\n> >      >>         > > > > discussion on the channel prior and post the meeting) for engaging\n> >      >>         > > > > productively and in good faith.\n> >      >>         > >\n> >      >>         > > --\n> >      >>         > > Michael Folkson\n> >      >>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      >>         > > Keybase: michaelfolkson\n> >      >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >      >>         > > _______________________________________________\n> >      >>         > > bitcoin-dev mailing list\n> >      >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> >      >>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >      >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> >      >>\n> >      >>\n> >      >>\n> >      >>\n> >      >>     --\n> >      >>     Michael Folkson\n> >      >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      >>     Keybase: michaelfolkson\n> >      >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >      >>     _______________________________________________\n> >      >>     bitcoin-dev mailing list\n> >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >      >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> >      >\n> >      >\n> >      >\n> >      > --\n> >      > Michael Folkson\n> >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      > Keybase: michaelfolkson\n> >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-19T11:30:08",
                "message_text_only": "Good morning list,\n\n> This is absolutely the case, however note that the activation method itself is consensus code which executes as a part\n> of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should\n> be designed, this doesn't imply anything about the consensus code which represents the activation thereof.\n>\n> Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one\n> which almost certainly carries significantly more risk than Taproot.\n>\n> Note that I don't believe anyone is advocating for \"try to activate, and if it fails, move on\". Various people have\n> various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are\n> OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority\n> of Bitcoin users and is only not activating due to lagging miner upgrades.\n\n\nOkay, I am backing off this proposal to force the LOT=false/true decision on users, it was not particularly serious anyway (and was more a reaction to the request of Samson Mow to just release both versions, which to my mind is no different from such a thing).\n\n\nNonetheless, as a thought experiment: the main issue is that some number of people run LOT=true when miners do not activate Taproot early for some reason and we decide to leave LOT=false for this particular bit until it times out.\nThe issue is that those people will get forked off the network at the end of this particular deployment attempt.\n\nI suspect those people will still exist whether or not Bitcoin Core supports any kind of LOT=true mode.\n(\"Never again\" for some people)\n\nHow do we convince them to go run LOT=false instead of getting themselves forked off?\nOr do we simply let them?\n\n(and how is that different from asking each user to decide on LOT=false/true right now?)\n(\"reasonable default\"?)\n(fundamentally speaking you still have to educate the users on the ramifications of accepting the default and changing it.)\n\n\nAnother thought experiment: From the point of view of a user who strongly supports LOT=true, would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\nWhy or why not?\n\n\nRegards,\nZmnSCPxj\n\n> Matt\n>\n> On 2/18/21 10:04, Keagan McClelland wrote:\n>\n> > Hi all,\n> > I think it's important for us to consider what is actually being considered for activation here.\n> > The designation of \"soft fork\" is accurate but I don't think it adequately conveys how non-intrusive a change like this\n> > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with\n> > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for\n> > that script version today. This is something I think that we can easily check by digging through the UTXO set or\n> > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we\n> > can't switch to a script version that no one is actually using.\n> > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs\n> > because there is simply no block that contains a transaction that only some of the network will accept.\n> > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on \"undefined behavior\"\n> > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.\n> > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting\n> > fees. It is a change that means that certain \"always accept\" transactions actually have real conditions you have to\n> > meet. I can't imagine a less intrusive change.\n> > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate\n> > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners\n> > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable\n> > outcome to let ~0.1% of the network get to block /non-intrusive/\u00a0changes that the rest of the network wants.\n> > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will\n> > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like \"well, guess that's it\n> > for Taproot\". I have no idea what ensues at that point, but probably another community led UASF movement.\n> > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm\n> > missing something please say so. But from my point of view, we can't treat all soft forks as equal.\n> > Keagan\n> > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> > mailto:bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n> >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as\n> >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to\n> >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n> >     exchange losing millions would be worse than having Taproot is good.\n> >\n> >     Matt\n> >\n> >     On 2/18/21 09:26, Michael Folkson wrote:\n> >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n> >     forks,\n> >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n> >      >\n> >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n> >     such as\n> >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n> >     splits\n> >      > I think is shortsighted. Indeed I think even if we collectively\u00a0decided not to do any future soft fork upgrades ever\n> >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n> >      >\n> >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n> >     though I'm\n> >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n> >     (though\n> >      > admittedly you have a much better understanding than me of what happened in 2017).\n> >      >\n> >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot\n> >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n> >      > wouldn't kill Bitcoin long term.\n> >      >\n> >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n> >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n> >      >\n> >      >\u00a0 \u00a0 \u00a0If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n> >      >\u00a0 \u00a0 \u00a0and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n> >     and not\n> >      >\u00a0 \u00a0 \u00a0activate Taproot. Seriously.\n> >      >\n> >      >\u00a0 \u00a0 \u00a0Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n> >      >\n> >      >\u00a0 \u00a0 \u00a0Matt\n> >      >\n> >      >>\u00a0 \u00a0 \u00a0On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>\u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0\ufeff\n> >      >>\u00a0 \u00a0 \u00a0Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n> >      >>\u00a0 \u00a0 \u00a0heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n> >     users\n> >      >>\u00a0 \u00a0 \u00a0should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n> >      >>\u00a0 \u00a0 \u00a0implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n> >      >>\n> >      >>\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n> >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Good morning all,\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Who's we here?\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> Release both and let the network decide.\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0This assures everyone that neither choice is being forced on users, and instead what is being forced on\n> >     users,\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0is for users to make that choice themselves.\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Regards,\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0ZmnSCPxj\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n> >     in the\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to conversation on the IRC channel or on social media etc.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> >     into\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I personally have never made this assumption. Of course users aren't forced to run any particular\n> >     software\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0version, quite the opposite. Defaults set in software versions matter though as many users won't change\n> >     them.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> >     only a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n> >     reason of\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n> >     moment of\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks?\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n> >     activate\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n> >     false in a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0software release there is the possibility (T2 in\n> >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0appears to be no more safe than LOT=true.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> >     miners\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n> >     think it\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0offers them clarity on what will happen over a year time period and removes the need for coordinated or\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uncoordinated community UASF efforts on top of LOT=false.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools\u00a0have pledged\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n> >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n> >     <http://taprootactivation.com>> (and this effort has informed the discussion) without\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0taking pledges of support as cast iron guarantees.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0email :)\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n> >     <mailto:arielluaces at gmail.com>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n> >     inevitable, like\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n> >     support,\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0or any support right up against a miner activation threshold.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0in people's minds.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0above %51).\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n> >     since a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0coordination and safety are sometimes sprinkled into the argument.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> >     into\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0must or must not run.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> >     only a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0handful of people that begin running it while everyone else delays their upgrade (with the very good\n> >     reason of\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0not getting involved in politics) and a year later those handful of people just become stuck at the\n> >     moment of\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n> >     into a\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0option has ran its course.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> >     miners\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > How is that strictly safer or more coordinated?\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n> >     with\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n> >     calling\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0feature is worth a network split down the middle.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0become envious enough to put aside our differences on how to behave towards miners and finally activate\n> >     Taproot.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Cheers\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > Ariel Lorenzo-Luaces\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n> >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Yesterday (February 16th) we held a second meeting on Taproot\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > activation on IRC which again was open to all. Despite what appeared\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > to be majority support for LOT=false over LOT=true in the first\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > meeting I (and others) thought the arguments had not been explored in\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > depth and that we should have a follow up meeting almost entirely\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > focused on whether LOT (lockinontimeout) should be set to true or\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > false.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The meeting was announced here:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > could. David Harding responded with an additional argument for\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false (F7) here:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > These meetings are very challenging given they are open to all, you\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > advance. I tried to give time for both the LOT=true arguments and the\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > LOT=false arguments to be discussed as I knew there was support for\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > both. We only tried evaluating which had more support and which had\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > more strong opposition towards the end of the meeting.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > The conversation log is here:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > http://gnusha.org/taproot-activation/2021-02-16.log\n> >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n> >     <http://gnusha.org/taproot-activation/2021-02-16.log>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > (If you are so inclined you can watch a video of the meeting here.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n> >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > did manage to come to consensus on everything but LockinOnTimeout.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Activation height range: 693504-745920\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > MASF threshold: 1815/2016 blocks (90%)\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Keep in mind only ~100 people showed for the meetings, hardly\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > representative of the entire community.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > So, these details remain JUST a proposal for now.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > It seems inevitable that there won't be consensus on LOT.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Everyone will have to choose for himself. :/\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Personally I agree with most of this. I agree that there wasn\u2019t\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > my perspective there was clearly more strong opposition (what would\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core contributors, Lightning developers and other community\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > members against LOT=true than there was for LOT=false. Andrew Chow\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > tried to summarize views from the meeting in this analysis:\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am also aware of other current and previous Bitcoin Core\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > spotlight for no reason but if you go through the conversation logs of\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > not only the meeting but the weeks of discussion prior to this meeting\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > you will see their views evaluated on the ##taproot-activation\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n> >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > expressed a preference for lot=false though I don\u2019t know how strong\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > that preference was.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > I am only one voice but it is my current assessment that if we are to\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > attempt to finalize Taproot activation parameters and propose them to\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the community at this time our only option is to propose LOT=false.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Any further delay appears to me counterproductive in our collective\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > aim to get the Taproot soft fork activated as early as possible.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Obviously others are free to disagree with that assessment and\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > continue discussions but personally I will be attempting to avoid\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > those discussions unless prominent new information comes to light or\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > various specific individuals change their minds.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > said previously that will be loosely following the format of the\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Bitcoin Core PR review club and will be lower level and more\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > the IRC channel ##taproot-activation.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > Thanks to the meeting participants (and those who joined the\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > discussion on the channel prior and post the meeting) for engaging\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > > > productively and in good faith.\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> >\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > --\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Michael Folkson\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > Keybase: michaelfolkson\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > _______________________________________________\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev mailing list\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >      >>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> >      >>\n> >      >>\n> >      >>\n> >      >>\n> >      >>\u00a0 \u00a0 \u00a0--\n> >      >>\u00a0 \u00a0 \u00a0Michael Folkson\n> >      >>\u00a0 \u00a0 \u00a0Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      >>\u00a0 \u00a0 \u00a0Keybase: michaelfolkson\n> >      >>\u00a0 \u00a0 \u00a0PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >      >>\u00a0 \u00a0 \u00a0_______________________________________________\n> >      >>\u00a0 \u00a0 \u00a0bitcoin-dev mailing list\n> >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >      >>\u00a0 \u00a0 \u00a0<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> >      >\n> >      >\n> >      >\n> >      > --\n> >      > Michael Folkson\n> >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> >     <mailto:michaelfolkson at gmail.com>>\n> >      > Keybase: michaelfolkson\n> >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n>\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Adam Back",
                "date": "2021-02-19T12:05:09",
                "message_text_only": "Personally I don't really have much of a view and think either\nLOT=true or false is better in the context, they both seem safe given\nthe current context, where basically everyone is saying \"are we there\nyet\", including pools (88.7% going out of their way to say YES\nhttps://taprootactivation.com).  Not that pools are deciding of\nanything, being service providers to miners, who can and will switch\npool fast, and miners in-turn being service providers to the market\nand as the various forks showed will follow the market.\n\nI think it's a very good idea for safety, if there is a tested and\nreviewed code with an option to force LOT=true, even if the\nbitcoin-core implementation ends up defaulting to LOT=false.\n\nPart of the danger is rushed versions of things like BIP 91 to avoid a\nchain split where miners left brinkmanship just a bit too late, to\navert BIP 148 forking, and BIP 91 was used to expedite activation to\navoid that. The rushed proposal, code, review, ship cycle on that was\ndangerously fast - less time and eyes for review was the danger.\n\n> would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n\ngiven there are clearly people of both views, or for now don't care\nbut might later, it would minimally be friendly and useful if\nbitcoin-core has a LOT=true option - and that IMO goes some way to\navoid the assumptive control via defaults.\n\nOtherwise it could be read as saying \"developers on average\ndisapprove, but if you, the market disagree, go figure it out for\nyourself\" which is not a good message for being defensive and avoiding\nmis-interpretation of code repositories or shipped defaults as\n\"control\".\n\nAdam\n\nOn Fri, 19 Feb 2021 at 11:30, ZmnSCPxj via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Good morning list,\n>\n> > This is absolutely the case, however note that the activation method itself is consensus code which executes as a part\n> > of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should\n> > be designed, this doesn't imply anything about the consensus code which represents the activation thereof.\n> >\n> > Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one\n> > which almost certainly carries significantly more risk than Taproot.\n> >\n> > Note that I don't believe anyone is advocating for \"try to activate, and if it fails, move on\". Various people have\n> > various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are\n> > OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority\n> > of Bitcoin users and is only not activating due to lagging miner upgrades.\n>\n>\n> Okay, I am backing off this proposal to force the LOT=false/true decision on users, it was not particularly serious anyway (and was more a reaction to the request of Samson Mow to just release both versions, which to my mind is no different from such a thing).\n>\n>\n> Nonetheless, as a thought experiment: the main issue is that some number of people run LOT=true when miners do not activate Taproot early for some reason and we decide to leave LOT=false for this particular bit until it times out.\n> The issue is that those people will get forked off the network at the end of this particular deployment attempt.\n>\n> I suspect those people will still exist whether or not Bitcoin Core supports any kind of LOT=true mode.\n> (\"Never again\" for some people)\n>\n> How do we convince them to go run LOT=false instead of getting themselves forked off?\n> Or do we simply let them?\n>\n> (and how is that different from asking each user to decide on LOT=false/true right now?)\n> (\"reasonable default\"?)\n> (fundamentally speaking you still have to educate the users on the ramifications of accepting the default and changing it.)\n>\n>\n> Another thought experiment: From the point of view of a user who strongly supports LOT=true, would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n> Why or why not?\n>\n>\n> Regards,\n> ZmnSCPxj\n>\n> > Matt\n> >\n> > On 2/18/21 10:04, Keagan McClelland wrote:\n> >\n> > > Hi all,\n> > > I think it's important for us to consider what is actually being considered for activation here.\n> > > The designation of \"soft fork\" is accurate but I don't think it adequately conveys how non-intrusive a change like this\n> > > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with\n> > > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for\n> > > that script version today. This is something I think that we can easily check by digging through the UTXO set or\n> > > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we\n> > > can't switch to a script version that no one is actually using.\n> > > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs\n> > > because there is simply no block that contains a transaction that only some of the network will accept.\n> > > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on \"undefined behavior\"\n> > > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.\n> > > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting\n> > > fees. It is a change that means that certain \"always accept\" transactions actually have real conditions you have to\n> > > meet. I can't imagine a less intrusive change.\n> > > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate\n> > > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners\n> > > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable\n> > > outcome to let ~0.1% of the network get to block /non-intrusive/ changes that the rest of the network wants.\n> > > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will\n> > > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like \"well, guess that's it\n> > > for Taproot\". I have no idea what ensues at that point, but probably another community led UASF movement.\n> > > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm\n> > > missing something please say so. But from my point of view, we can't treat all soft forks as equal.\n> > > Keagan\n> > > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> > > mailto:bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >\n> > >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That\n> > >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as\n> > >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to\n> > >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an\n> > >     exchange losing millions would be worse than having Taproot is good.\n> > >\n> > >     Matt\n> > >\n> > >     On 2/18/21 09:26, Michael Folkson wrote:\n> > >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft\n> > >     forks,\n> > >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.\n> > >      >\n> > >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades\n> > >     such as\n> > >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain\n> > >     splits\n> > >      > I think is shortsighted. Indeed I think even if we collectively decided not to do any future soft fork upgrades ever\n> > >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.\n> > >      >\n> > >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point\n> > >     though I'm\n> > >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to\n> > >     (though\n> > >      > admittedly you have a much better understanding than me of what happened in 2017).\n> > >      >\n> > >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot\n> > >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and\n> > >      > wouldn't kill Bitcoin long term.\n> > >      >\n> > >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>\n> > >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:\n> > >      >\n> > >      >     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,\n> > >      >     and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here\n> > >     and not\n> > >      >     activate Taproot. Seriously.\n> > >      >\n> > >      >     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n> > >      >\n> > >      >     Matt\n> > >      >\n> > >      >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >      >>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> > >      >>\n> > >      >>     \ufeff\n> > >      >>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have\n> > >      >>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think\n> > >     users\n> > >      >>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.\n> > >      >>\n> > >      >>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol\n> > >      >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.\n> > >      >>\n> > >      >>\n> > >      >>\n> > >      >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>\n> > >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:\n> > >      >>\n> > >      >>         Good morning all,\n> > >      >>\n> > >      >>         > \"An activation mechanism is a consensus change like any other change, can be contentious like any other\n> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n> > >      >>         >\n> > >      >>         > Who's we here?\n> > >      >>         >\n> > >      >>         > Release both and let the network decide.\n> > >      >>\n> > >      >>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that\n> > >      >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n> > >      >>\n> > >      >>         This assures everyone that neither choice is being forced on users, and instead what is being forced on\n> > >     users,\n> > >      >>         is for users to make that choice themselves.\n> > >      >>\n> > >      >>         Regards,\n> > >      >>         ZmnSCPxj\n> > >      >>\n> > >      >>         >\n> > >      >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> > >      >>         >\n> > >      >>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made\n> > >     in the\n> > >      >>         mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding\n> > >      >>         to conversation on the IRC channel or on social media etc.\n> > >      >>         > >\n> > >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> > >     into\n> > >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> > >      >>         must or must not run.\n> > >      >>         > >\n> > >      >>         > > I personally have never made this assumption. Of course users aren't forced to run any particular\n> > >     software\n> > >      >>         version, quite the opposite. Defaults set in software versions matter though as many users won't change\n> > >     them.\n> > >      >>         > >\n> > >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> > >     only a\n> > >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good\n> > >     reason of\n> > >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the\n> > >     moment of\n> > >      >>         MUST_SIGNAL, unable to mine new blocks?\n> > >      >>         > >\n> > >      >>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even\n> > >      >>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to\n> > >     activate\n> > >      >>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to\n> > >     false in a\n> > >      >>         software release there is the possibility (T2 in\n> > >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a\n> > >      >>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release\n> > >      >>         appears to be no more safe than LOT=true.\n> > >      >>         > >\n> > >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> > >     miners\n> > >      >>         by default.\n> > >      >>         > >\n> > >      >>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail\n> > >      >>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually\n> > >     think it\n> > >      >>         offers them clarity on what will happen over a year time period and removes the need for coordinated or\n> > >      >>         uncoordinated community UASF efforts on top of LOT=false.\n> > >      >>         > >\n> > >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> > >      >>         > >\n> > >      >>         > > I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have\n> > >      >>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose\n> > >      >>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language\n> > >      >>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or\n> > >      >>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged\n> > >      >>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize\n> > >      >>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on\n> > >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com\n> > >     <http://taprootactivation.com>> (and this effort has informed the discussion) without\n> > >      >>         taking pledges of support as cast iron guarantees.\n> > >      >>         > >\n> > >      >>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my\n> > >      >>         email :)\n> > >      >>         > >\n> > >      >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com\n> > >     <mailto:arielluaces at gmail.com>\n> > >      >>         <mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:\n> > >      >>         > >\n> > >      >>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n> > >      >>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is\n> > >     inevitable, like\n> > >      >>         we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n> > >      >>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or\n> > >      >>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%\n> > >     support,\n> > >      >>         or any support right up against a miner activation threshold.\n> > >      >>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility\n> > >      >>         in people's minds.\n> > >      >>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number\n> > >      >>         above %51).\n> > >      >>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that\n> > >     since a\n> > >      >>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like\n> > >      >>         coordination and safety are sometimes sprinkled into the argument.\n> > >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted\n> > >     into\n> > >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users\n> > >      >>         must or must not run.\n> > >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be\n> > >     only a\n> > >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good\n> > >     reason of\n> > >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the\n> > >     moment of\n> > >      >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off\n> > >     into a\n> > >      >>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn\n> > >      >>         option has ran its course.\n> > >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with\n> > >     miners\n> > >      >>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n> > >      >>         > > > How is that strictly safer or more coordinated?\n> > >      >>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered\n> > >      >>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient\n> > >     with\n> > >      >>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for\n> > >     calling\n> > >      >>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new\n> > >      >>         feature is worth a network split down the middle.\n> > >      >>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will\n> > >      >>         become envious enough to put aside our differences on how to behave towards miners and finally activate\n> > >     Taproot.\n> > >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other\n> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n> > >      >>         > > > Cheers\n> > >      >>         > > > Ariel Lorenzo-Luaces\n> > >      >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev\n> > >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:\n> > >      >>         > > >\n> > >      >>         > > > > Yesterday (February 16th) we held a second meeting on Taproot\n> > >      >>         > > > > activation on IRC which again was open to all. Despite what appeared\n> > >      >>         > > > > to be majority support for LOT=false over LOT=true in the first\n> > >      >>         > > > > meeting I (and others) thought the arguments had not been explored in\n> > >      >>         > > > > depth and that we should have a follow up meeting almost entirely\n> > >      >>         > > > > focused on whether LOT (lockinontimeout) should be set to true or\n> > >      >>         > > > > false.\n> > >      >>         > > > >\n> > >      >>         > > > > The meeting was announced here:\n> > >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>\n> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>\n> > >      >>         > > > >\n> > >      >>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to\n> > >      >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n> > >      >>         > > > > could. David Harding responded with an additional argument for\n> > >      >>         > > > > LOT=false (F7) here:\n> > >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>\n> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>\n> > >      >>         > > > >\n> > >      >>         > > > > These meetings are very challenging given they are open to all, you\n> > >      >>         > > > > don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n> > >      >>         > > > > advance. I tried to give time for both the LOT=true arguments and the\n> > >      >>         > > > > LOT=false arguments to be discussed as I knew there was support for\n> > >      >>         > > > > both. We only tried evaluating which had more support and which had\n> > >      >>         > > > > more strong opposition towards the end of the meeting.\n> > >      >>         > > > >\n> > >      >>         > > > > The conversation log is here:\n> > >      >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log\n> > >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log\n> > >     <http://gnusha.org/taproot-activation/2021-02-16.log>>\n> > >      >>         > > > >\n> > >      >>         > > > > (If you are so inclined you can watch a video of the meeting here.\n> > >      >>         > > > > Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n> > >      >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>\n> > >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)\n> > >      >>         > > > >\n> > >      >>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n> > >      >>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> > >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>\n> > >      >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566\n> > >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>\n> > >      >>         > > > >\n> > >      >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n> > >      >>         > > > > did manage to come to consensus on everything but LockinOnTimeout.\n> > >      >>         > > > >\n> > >      >>         > > > > Activation height range: 693504-745920\n> > >      >>         > > > >\n> > >      >>         > > > > MASF threshold: 1815/2016 blocks (90%)\n> > >      >>         > > > >\n> > >      >>         > > > > Keep in mind only ~100 people showed for the meetings, hardly\n> > >      >>         > > > > representative of the entire community.\n> > >      >>         > > > >\n> > >      >>         > > > > So, these details remain JUST a proposal for now.\n> > >      >>         > > > >\n> > >      >>         > > > > It seems inevitable that there won't be consensus on LOT.\n> > >      >>         > > > >\n> > >      >>         > > > > Everyone will have to choose for himself. :/\n> > >      >>         > > > >\n> > >      >>         > > > > Personally I agree with most of this. I agree that there wasn\u2019t\n> > >      >>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from\n> > >      >>         > > > > my perspective there was clearly more strong opposition (what would\n> > >      >>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from\n> > >      >>         > > > > Bitcoin Core contributors, Lightning developers and other community\n> > >      >>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow\n> > >      >>         > > > > tried to summarize views from the meeting in this analysis:\n> > >      >>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> > >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>\n> > >      >>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n> > >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>\n> > >      >>         > > > >\n> > >      >>         > > > > I am also aware of other current and previous Bitcoin Core\n> > >      >>         > > > > contributors and Lightning developers who didn\u2019t attend the meeting in\n> > >      >>         > > > > person who are opposed to LOT=true. I don\u2019t want to put them in the\n> > >      >>         > > > > spotlight for no reason but if you go through the conversation logs of\n> > >      >>         > > > > not only the meeting but the weeks of discussion prior to this meeting\n> > >      >>         > > > > you will see their views evaluated on the ##taproot-activation\n> > >      >>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>\n> > >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools\n> > >      >>         > > > > expressed a preference for lot=false though I don\u2019t know how strong\n> > >      >>         > > > > that preference was.\n> > >      >>         > > > >\n> > >      >>         > > > > I am only one voice but it is my current assessment that if we are to\n> > >      >>         > > > > attempt to finalize Taproot activation parameters and propose them to\n> > >      >>         > > > > the community at this time our only option is to propose LOT=false.\n> > >      >>         > > > > Any further delay appears to me counterproductive in our collective\n> > >      >>         > > > > aim to get the Taproot soft fork activated as early as possible.\n> > >      >>         > > > >\n> > >      >>         > > > > Obviously others are free to disagree with that assessment and\n> > >      >>         > > > > continue discussions but personally I will be attempting to avoid\n> > >      >>         > > > > those discussions unless prominent new information comes to light or\n> > >      >>         > > > > various specific individuals change their minds.\n> > >      >>         > > > >\n> > >      >>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573\n> > >      >>         > > > > which was initially delayed because of this LOT discussion. As I\u2019ve\n> > >      >>         > > > > said previously that will be loosely following the format of the\n> > >      >>         > > > > Bitcoin Core PR review club and will be lower level and more\n> > >      >>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n> > >      >>         > > > > the IRC channel ##taproot-activation.\n> > >      >>         > > > >\n> > >      >>         > > > > Thanks to the meeting participants (and those who joined the\n> > >      >>         > > > > discussion on the channel prior and post the meeting) for engaging\n> > >      >>         > > > > productively and in good faith.\n> > >      >>         > >\n> > >      >>         > > --\n> > >      >>         > > Michael Folkson\n> > >      >>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> > >     <mailto:michaelfolkson at gmail.com>>\n> > >      >>         > > Keybase: michaelfolkson\n> > >      >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> > >      >>         > > _______________________________________________\n> > >      >>         > > bitcoin-dev mailing list\n> > >      >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> > >      >>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> > >      >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> > >      >>\n> > >      >>\n> > >      >>\n> > >      >>\n> > >      >>     --\n> > >      >>     Michael Folkson\n> > >      >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> > >     <mailto:michaelfolkson at gmail.com>>\n> > >      >>     Keybase: michaelfolkson\n> > >      >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> > >      >>     _______________________________________________\n> > >      >>     bitcoin-dev mailing list\n> > >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> > >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> > >      >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>\n> > >      >\n> > >      >\n> > >      >\n> > >      > --\n> > >      > Michael Folkson\n> > >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com\n> > >     <mailto:michaelfolkson at gmail.com>>\n> > >      > Keybase: michaelfolkson\n> > >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> > >     _______________________________________________\n> > >     bitcoin-dev mailing list\n> > >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> > >\n> >\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-19T14:13:00",
                "message_text_only": "(Also in response to ZMN...)\n\nBitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I\u2019d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren\u2019t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.\n\nThere\u2019s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn\u2019t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there\u2019s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there\u2019s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).\n\nMatt\n\n> On Feb 19, 2021, at 07:08, Adam Back <adam at cypherspace.org> wrote:\n>> would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n> \n> given there are clearly people of both views, or for now don't care\n> but might later, it would minimally be friendly and useful if\n> bitcoin-core has a LOT=true option - and that IMO goes some way to\n> avoid the assumptive control via defaults.\n\n> Otherwise it could be read as saying \"developers on average\n> disapprove, but if you, the market disagree, go figure it out for\n> yourself\" which is not a good message for being defensive and avoiding\n> mis-interpretation of code repositories or shipped defaults as\n> \"control\"."
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-19T17:48:00",
                "message_text_only": "It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an \noption like this is likely not practical/what people would wish to see.\n\nBitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with \nuasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to \nenable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles \nneeded seem to be not worth it.\n\nInstead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest, \ntestnet, and signet are treated), including its own separate datadir and the like.\n\nMatt\n\nOn 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:\n> (Also in response to ZMN...)\n> \n> Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I\u2019d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren\u2019t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.\n> \n> There\u2019s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn\u2019t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there\u2019s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there\u2019s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).\n> \n> Matt\n> \n>> On Feb 19, 2021, at 07:08, Adam Back <adam at cypherspace.org> wrote:\n>>> would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n>>\n>> given there are clearly people of both views, or for now don't care\n>> but might later, it would minimally be friendly and useful if\n>> bitcoin-core has a LOT=true option - and that IMO goes some way to\n>> avoid the assumptive control via defaults.\n> \n>> Otherwise it could be read as saying \"developers on average\n>> disapprove, but if you, the market disagree, go figure it out for\n>> yourself\" which is not a good message for being defensive and avoiding\n>> mis-interpretation of code repositories or shipped defaults as\n>> \"control\".\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-02-20T02:55:16",
                "message_text_only": "Good morning list,\n\n> It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an\n> option like this is likely not practical/what people would wish to see.\n>\n> Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with\n> uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to\n> enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles\n> needed seem to be not worth it.\n\nWithout implying anything else, this can be worked around by a user maintaining two `datadir`s and running two clients.\nThis would have an \"external\" client running an LOT=X (where X is whatever the user prefers) and an \"internal\" client that is at most 0.21.0, which will not impose any LOT rules.\nThe internal client then uses `connect=` directive to connect locally to the external client and connects only to that client, using it as a firewall.\nThe external client can be run pruned in order to reduce diskspace resource usage (the internal client can remain unpruned if that is needed by the user, e.g. for LN implementation sthat need to look up arbitrary short-channel-ids).\nBandwidth usage should be same since the internal client only connects to the external client and the OS should optimize that case.\nCPU usage is doubled, though.\n\n(the general idea came from gmax, just to be clear, though the below use is from me)\n\nThen the user can select LOT=C or LOT=!C (where C is whatever Bitcoin Core ultimately ships with) on the external client based on the user preferences.\n\nIf Taproot is not MASF-activated and LOT=!U is what dominates later (where U is whatever the user decided on), the user can decide to just destroy the external node and connect the internal node directly to the network (optionally upgrading the internal node to LOT=!U) as a way to \"change their mind in view of the economy\".\nThe internal node will then follow the dominant chain.\n\n\nRegards,\nZmnSCPxj\n\n>\n> Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest,\n> testnet, and signet are treated), including its own separate datadir and the like.\n>\n> Matt\n>\n> On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:\n>\n> > (Also in response to ZMN...)\n> > Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I\u2019d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren\u2019t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.\n> > There\u2019s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn\u2019t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there\u2019s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there\u2019s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).\n> > Matt\n> >\n> > > On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:\n> > >\n> > > > would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n> > >\n> > > given there are clearly people of both views, or for now don't care\n> > > but might later, it would minimally be friendly and useful if\n> > > bitcoin-core has a LOT=true option - and that IMO goes some way to\n> > > avoid the assumptive control via defaults.\n> >\n> > > Otherwise it could be read as saying \"developers on average\n> > > disapprove, but if you, the market disagree, go figure it out for\n> > > yourself\" which is not a good message for being defensive and avoiding\n> > > mis-interpretation of code repositories or shipped defaults as\n> > > \"control\".\n> >\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Ariel Lorenzo-Luaces",
                "date": "2021-02-20T17:20:27",
                "message_text_only": "What would be the tradeoffs of a BIP8(false, \u221e) option? That would remove some of the concerns of having to coordinate a UASF with an approaching deadline.\n\nCheers\nAriel Lorenzo-Luaces\n\u2063\u200b\n\nOn Feb 19, 2021, 6:55 PM, at 6:55 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Good morning list,\n>\n>> It was pointed out to me that this discussion is largely moot as the\n>software complexity for Bitcoin Core to ship an\n>> option like this is likely not practical/what people would wish to\n>see.\n>>\n>> Bitcoin Core does not have infrastructure to handle switching\n>consensus rules with the same datadir - after running with\n>> uasf=true for some time, valid blocks will be marked as invalid, and\n>additional development would need to occur to\n>> enable switching back to uasf=false. This is complex, critical code\n>to get right, and the review and testing cycles\n>> needed seem to be not worth it.\n>\n>Without implying anything else, this can be worked around by a user\n>maintaining two `datadir`s and running two clients.\n>This would have an \"external\" client running an LOT=X (where X is\n>whatever the user prefers) and an \"internal\" client that is at most\n>0.21.0, which will not impose any LOT rules.\n>The internal client then uses `connect=` directive to connect locally\n>to the external client and connects only to that client, using it as a\n>firewall.\n>The external client can be run pruned in order to reduce diskspace\n>resource usage (the internal client can remain unpruned if that is\n>needed by the user, e.g. for LN implementation sthat need to look up\n>arbitrary short-channel-ids).\n>Bandwidth usage should be same since the internal client only connects\n>to the external client and the OS should optimize that case.\n>CPU usage is doubled, though.\n>\n>(the general idea came from gmax, just to be clear, though the below\n>use is from me)\n>\n>Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin\n>Core ultimately ships with) on the external client based on the user\n>preferences.\n>\n>If Taproot is not MASF-activated and LOT=!U is what dominates later\n>(where U is whatever the user decided on), the user can decide to just\n>destroy the external node and connect the internal node directly to the\n>network (optionally upgrading the internal node to LOT=!U) as a way to\n>\"change their mind in view of the economy\".\n>The internal node will then follow the dominant chain.\n>\n>\n>Regards,\n>ZmnSCPxj\n>\n>>\n>> Instead, the only practical way to ship such an option would be to\n>treat it as a separate chain (the same way regtest,\n>> testnet, and signet are treated), including its own separate datadir\n>and the like.\n>>\n>> Matt\n>>\n>> On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:\n>>\n>> > (Also in response to ZMN...)\n>> > Bitcoin Core has a long-standing policy of not shipping options\n>which shoot yourself in the foot. I\u2019d be very disappointed if that\n>changed now. People are of course more than welcome to run such\n>software themselves, but I anticipate the loud minority on Twitter and\n>here aren\u2019t processing enough transactions or throwing enough financial\n>weight behind their decision for them to do anything but just switch\n>back if they find themselves on a chain with no blocks.\n>> > There\u2019s nothing we can (or should) do to prevent people from\n>threatening to (and possibly) forking themselves off of bitcoin, but\n>that doesn\u2019t mean we should encourage it either. The work Bitcoin Core\n>maintainers and developers do is to recommend courses of action which\n>they believe have reasonable levels of consensus and are technically\n>sound. Luckily, there\u2019s strong historical precedent for people deciding\n>to run other software around forks, so misinterpretation is not very\n>common (just like there\u2019s strong historical precedent for miners not\n>unilaterally deciding forks in the case of Segwit).\n>> > Matt\n>> >\n>> > > On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:\n>> > >\n>> > > > would dev consensus around releasing LOT=false be considered as\n>\"developers forcing their views on users\"?\n>> > >\n>> > > given there are clearly people of both views, or for now don't\n>care\n>> > > but might later, it would minimally be friendly and useful if\n>> > > bitcoin-core has a LOT=true option - and that IMO goes some way\n>to\n>> > > avoid the assumptive control via defaults.\n>> >\n>> > > Otherwise it could be read as saying \"developers on average\n>> > > disapprove, but if you, the market disagree, go figure it out for\n>> > > yourself\" which is not a good message for being defensive and\n>avoiding\n>> > > mis-interpretation of code repositories or shipped defaults as\n>> > > \"control\".\n>> >\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210220/05495dc3/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-21T14:30:45",
                "message_text_only": "I don\u2019t think \u201csome vocal users are going to threaten to fork themselves off\u201d is good justification for technical decisions. It\u2019s important to communicate and for everyone to agree/understand that a failed BIP 8/9 activation, in the scenario people are worried about, is not the end of the story for Taproot activation. If it is clear that Taproot has broad consensus but some miners failed to upgrade in time (as it presumably would be), a flag day activation seems merited and I\u2019m not sure anyone has argued against this. That said, forced-signaling via a UASF/BIP8(true)-style fork carries material additional risk that a classic flag-day activation does not, so let\u2019s not optimize for something like that.\n\nMatt\n\n> On Feb 21, 2021, at 08:26, Ariel Lorenzo-Luaces via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeff\n> What would be the tradeoffs of a BIP8(false, \u221e) option? That would remove some of the concerns of having to coordinate a UASF with an approaching deadline.\n> \n> Cheers\n> Ariel Lorenzo-Luaces\n>> On Feb 19, 2021, at 6:55 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Good morning list,\n>> \n>>>  It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an\n>>>  option like this is likely not practical/what people would wish to see.\n>>> \n>>>  Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with\n>>>  uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to\n>>>  enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles\n>>>  needed seem to be not worth it.\n>> \n>> Without implying anything else, this can be worked around by a user maintaining two `datadir`s and running two clients.\n>> This would have an \"external\" client running an LOT=X (where X is whatever the user prefers) and an \"internal\" client that is at most 0.21.0, which will not impose any LOT rules.\n>> The internal client then uses `connect=` directive to connect locally to the external client and connects only to that client, using it as a firewall.\n>> The external client can be run pruned in order to reduce diskspace resource usage (the internal client can remain unpruned if that is needed by the user, e.g. for LN implementation sthat need to look up arbitrary short-channel-ids).\n>> Bandwidth usage should be same since the internal client only connects to the external client and the OS should optimize that case.\n>> CPU usage is doubled, though.\n>> \n>> (the general idea came from gmax, just to be clear, though the below use is from me)\n>> \n>> Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin Core ultimately ships with) on the external client based on the user preferences.\n>> \n>> If Taproot is not MASF-activated and LOT=!U is what dominates later (where U is whatever the user decided on), the user can decide to just destroy the external node and connect the internal node directly to the network (optionally upgrading the internal node to LOT=!U) as a way to \"change their mind in view of the economy\".\n>> The internal node will then follow the dominant chain.\n>> \n>> \n>> Regards,\n>> ZmnSCPxj\n>> \n>>> \n>>>  Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest,\n>>>  testnet, and signet are treated), including its own separate datadir and the like.\n>>> \n>>>  Matt\n>>> \n>>>>  On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:\n>>>> \n>>>>  (Also in response to ZMN...)\n>>>>  Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I\u2019d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren\u2019t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.\n>>>>  There\u2019s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn\u2019t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there\u2019s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there\u2019s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).\n>>>>  Matt\n>>>> \n>>>>>>  On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:\n>>>>>> \n>>>>>>  would dev consensus around releasing LOT=false be considered as \"developers forcing their views on users\"?\n>>>>> \n>>>>>  given there are clearly people of both views, or for now don't care\n>>>>>  but might later, it would minimally be friendly and useful if\n>>>>>  bitcoin-core has a LOT=true option - and that IMO goes some way to\n>>>>>  avoid the assumptive control via defaults.\n>>>> \n>>>>>  Otherwise it could be read as saying \"developers on average\n>>>>>  disapprove, but if you, the market disagree, go figure it out for\n>>>>>  yourself\" which is not a good message for being defensive and avoiding\n>>>>>  mis-interpretation of code repositories or shipped defaults as\n>>>>>  \"control\".\n>>>> \n>>>>  bitcoin-dev mailing list\n>>>>  bitcoin-dev at lists.linuxfoundation.org\n>>>>  https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> \n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/fb583f75/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-02-22T05:16:24",
                "message_text_only": "On Fri, Feb 19, 2021 at 12:48:00PM -0500, Matt Corallo via bitcoin-dev wrote:\n> It was pointed out to me that this discussion is largely moot as the\n> software complexity for Bitcoin Core to ship an option like this is likely\n> not practical/what people would wish to see.\n> Bitcoin Core does not have infrastructure to handle switching consensus\n> rules with the same datadir - after running with uasf=true for some time,\n> valid blocks will be marked as invalid, \n\nI don't think this is true? With the current proposed bip8 code,\nlockinontimeout=true will cause headers to be marked as invalid, and\nwon't process the block further. If a node running lockinontimeout=true\naccepts the header, then it will apply the same consensus rules as a\nlockinontimeout=false node.\n\nI don't think an invalid header will be added to the block index at all,\nso a node restart should always cleanly allow it to be reconsidered.\n\nThe test case in\n\nhttps://github.com/bitcoin/bitcoin/pull/19573/commits/bd8517135fc839c3332fea4d9c8373b94c8c9de8\n\ntests that a node that had rejected a chain due to lockinontimeout=true\nwill reorg to that chain after being restarted as a byproduct of the way\nit tests different cases (the nodes set a new startheight, but retain\ntheir lockinontimeout settings).\n\n\n(I think with the current bip8 code, if you switch from\nlockinontimeout=false to lockinontimeout=true and the tip of the current\nmost work chain is after the timeoutheight and did not lockin, then you\nwill continue following that chain until a taproot-invalid transaction\nis inclued, rather than immediately reorging to a shorter chain that\ncomplies with the lockinontimeout=true rules)\n\nCheers,\naj"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-22T06:44:55",
                "message_text_only": "Hmm, indeed, I may have missed that you can skip the headers issues by not persisting them, though there are other follow-on effects that are concerning and I think still make my point valid.\n\nA node feeding you invalid headers (used to be) cause for a ban - is that information still persisted? More importantly, nodes on both sides of the fork need to find each other. There\u2019s not a great way to do that without forking the address database, DNS seeds and defining a new protocol magic.\n\nMatt\n\n> On Feb 22, 2021, at 00:16, Anthony Towns <aj at erisian.com.au> wrote:\n> \n> \ufeffOn Fri, Feb 19, 2021 at 12:48:00PM -0500, Matt Corallo via bitcoin-dev wrote:\n>> It was pointed out to me that this discussion is largely moot as the\n>> software complexity for Bitcoin Core to ship an option like this is likely\n>> not practical/what people would wish to see.\n>> Bitcoin Core does not have infrastructure to handle switching consensus\n>> rules with the same datadir - after running with uasf=true for some time,\n>> valid blocks will be marked as invalid, \n> \n> I don't think this is true? With the current proposed bip8 code,\n> lockinontimeout=true will cause headers to be marked as invalid, and\n> won't process the block further. If a node running lockinontimeout=true\n> accepts the header, then it will apply the same consensus rules as a\n> lockinontimeout=false node.\n> \n> I don't think an invalid header will be added to the block index at all,\n> so a node restart should always cleanly allow it to be reconsidered.\n> \n> The test case in\n> \n> https://github.com/bitcoin/bitcoin/pull/19573/commits/bd8517135fc839c3332fea4d9c8373b94c8c9de8\n> \n> tests that a node that had rejected a chain due to lockinontimeout=true\n> will reorg to that chain after being restarted as a byproduct of the way\n> it tests different cases (the nodes set a new startheight, but retain\n> their lockinontimeout settings).\n> \n> \n> (I think with the current bip8 code, if you switch from\n> lockinontimeout=false to lockinontimeout=true and the tip of the current\n> most work chain is after the timeoutheight and did not lockin, then you\n> will continue following that chain until a taproot-invalid transaction\n> is inclued, rather than immediately reorging to a shorter chain that\n> complies with the lockinontimeout=true rules)\n> \n> Cheers,\n> aj\n>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-02-22T10:16:32",
                "message_text_only": "On Mon, Feb 22, 2021 at 01:44:55AM -0500, Matt Corallo wrote:\n> A node feeding you invalid headers (used to be) cause for a ban [...]\n\nHeaders that are invalid due to MUST_SIGNAL rules are marked as\nBLOCK_RECENT_CONSENSUS_CHANGE so don't directly result in a ban. If you're\ndoing headers-first relay, I think that will also prevent hitting the\nBLOCK_MISSING_PREV case, which would result in a ban.\n\nIf a lockinontimeout=true node is requesting compact blocks from a\nlockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,\nI think that could result in a ban.\n\n> More importantly, nodes on both sides of the fork need to find each other. \n\n(If there was going to be an ongoing fork there'd be bigger things to\nworry about...)\n\nI think the important specific case of this is something like \"if a chain\nwhere taproot is impossible to activate is temporarily the most work,\nminers with lockinontimeout=true need to be well connected so they don't\nend up competing with each other while they're catching back up\".\n\nActually, that same requirement might be more practically for a signet\nfeature we were thinking about -- namely having \"optional reorgs\", ie\nevery now and then we'd mine 1-6 blocks and then reorg them out; but\nalso flag the soon-to-be-stale blocks in some way so that if you didn't\nwant to have to deal with reorgs you could easily ignore them. Having\nit be possible for the \"I want to see reorgs!\" nodes to be able to find\neach other seems like it might be a similar problem (avoiding having the\n\"don't-want-reorgs\" nodes ban the \"want-reorgs\" nodes too perhaps).\n\nCheers,\naj"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-22T14:00:29",
                "message_text_only": "> On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:\n> \n> \ufeffIf a lockinontimeout=true node is requesting compact blocks from a\n> lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,\n> I think that could result in a ban.\n> \n>> More importantly, nodes on both sides of the fork need to find each other. \n> \n> (If there was going to be an ongoing fork there'd be bigger things to\n> worry about...)\n\nI think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can\u2019t simply ignore that.\n\n> I think the important specific case of this is something like \"if a chain\n> where taproot is impossible to activate is temporarily the most work,\n> miners with lockinontimeout=true need to be well connected so they don't\n> end up competing with each other while they're catching back up\".\n\nBetween this and your above point, I think we probably agree - there is material  technical complexity hiding behind a \u201cchange the consensus rules\u201c option. Given it\u2019s not a critical feature by any means, putting resources into fixing these issues probably isn\u2019t worth it.\n\nMatt\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/08d2cbe2/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-02-22T16:27:40",
                "message_text_only": "On Mon, Feb 22, 2021 at 09:00:29AM -0500, Matt Corallo wrote:\n> I think it should be clear that a UASF-style command line option to allow\n> consensus rule changes in the node in the short term, immediately before a fork\n> carries some risk of a fork, even if I agree it may not persist over months. We\n> can\u2019t simply ignore that.\n\nI don't think a \"-set-bip8-lockinontimeout=taproot\" option on its own\nwould be very safe -- if we were sure it was safe, because we were sure\nthat everyone would eventually set lockinontimeout=true, then we would\nset lockinontimeout=true from day one and not need an option. I haven't\nseen/had any good ideas on how to make the option safe, or at least make\nit obvious that you shouldn't be setting it if you don't really\nunderstand what you're getting yourself into. [0]\n\nAnd that's even if you assume that the code was perfectly capable of\nhandling forks in some theoretically optimal way.\n\nSo at least for the time being, I don't think a config param / command\nline option is a good idea for bip8. IMHO, YMMV, IANABDFL etc.\n\n>     I think the important specific case of this is something like \"if a chain\n>     where taproot is impossible to activate is temporarily the most work,\n>     miners with lockinontimeout=true need to be well connected so they don't\n>     end up competing with each other while they're catching back up\".\n> Between this and your above point, I think we probably agree - there is\n> material  technical complexity hiding behind a \u201cchange the consensus rules\u201c\n> option. Given it\u2019s not a critical feature by any means, putting resources into\n> fixing these issues probably isn\u2019t worth it.\n\nFor reference, the \"preferentially peer with other UASF nodes\" PR for\nthe BIP148 client was\n\n  https://github.com/UASF/bitcoin/pull/24\n\nList discussion was at\n\n  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014618.html\n\nI think I'll add playing around with that and reorgs on a signet to my\ntodo list to see how it goes in cases other than ones that are (hopefully)\nvanishingly unlikely to ever happen in practice.\n\nCheers,\naj\n\n[0] In some sense, this is exactly the opposite sentiment compared to\n    earonesty's comment:\n\n    https://github.com/bitcoin/bitcoin/pull/10900#issuecomment-317333312\n\n    I mean, I guess could solve the unsafe-now-but-maybe-safe-later\n    problem generally with a signature:\n\n      -authorise-dangerous-options-key=XXXX\n      -lockinontimeout=taproot:YYYY\n\n    where YYYY is a signature of \"dangerous:lockinontimeout=taproot\" or\n    similar by the key XXXX, and XXXX defaults to some (multisig?) key\n    controlled by some bitcoin people, who'll only sign that when\n    there's clear evidence that it will be reasonably safe, and maybe to\n    \"cert-transparency\" or something as well. So that allows having an\n    option become available by publishing a signature, without having\n    to recompile the code. And it could still be overriden by people who\n    know what they're doing if the default key owners are being weird. And\n    maybe the \"dangerous\" part is enough to prevent people from randomly\n    cut-and-pasting it from a website into their bitcoin.conf.\n\n    I dunno. No bad ideas when brainstorming..."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-02-22T16:31:01",
                "message_text_only": "Sorry, I haven't read everything. I just want to say what I think is\nthe best option and why.\nLet's say something like 2 years in which miners can signal activation\nafter which, the MUST signal it for their blocks to be valid (I think\nthis is LOT=true, but I don't remember what LOT stands for).\nSome may argue than it's easier to move from LOT=false to LOT=true\nthan viceversa (I think I'm getting this right), but either way\ndifferent clients could interpret things more differently more easily\nand, you know, that's really bad.\nIf anyone is against the consensus change itself, what they should do\nis run a client in which the must is turned into a MUST NOT. Whenever\nminers signal activation, blocks aren't valid so that it doesn't\nhappen.\nThat way both sides can be cleanly separated and both communities\n(assuming there's a community of users opposing the change) can stick\ntogether with their own in the same chain. That is, having only 2\nchains in total if there are users opposing the change or only one if\nnot, but never 2 chains for people who want the change or 2 chains for\npople who don't want it.\n\nJust my two sats, please nobody ask me \"why would anyone oppose\ntaproot?\" or anything similar. Because I'm trying to generalize here,\nif we're talking about activation, I think the specifics of the change\nare kind of irrelevant.\n\nSeparately: thanks to everyone who worked on taproot.\n\n\nOn Mon, Feb 22, 2021 at 3:00 PM Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n>\n> On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:\n>\n> \ufeffIf a lockinontimeout=true node is requesting compact blocks from a\n> lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,\n> I think that could result in a ban.\n>\n> More importantly, nodes on both sides of the fork need to find each other.\n>\n>\n> (If there was going to be an ongoing fork there'd be bigger things to\n> worry about...)\n>\n>\n> I think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can\u2019t simply ignore that.\n>\n> I think the important specific case of this is something like \"if a chain\n> where taproot is impossible to activate is temporarily the most work,\n> miners with lockinontimeout=true need to be well connected so they don't\n> end up competing with each other while they're catching back up\".\n>\n>\n> Between this and your above point, I think we probably agree - there is material  technical complexity hiding behind a \u201cchange the consensus rules\u201c option. Given it\u2019s not a critical feature by any means, putting resources into fixing these issues probably isn\u2019t worth it.\n>\n> Matt\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-02-22T16:48:55",
                "message_text_only": "Just to clarify, I'm not saying bitcoin core should maintain the\n\"oppose proposal\" part of the software. presumably people opposing the\nchange don't want much of the recent software changes anyway.\nBut perhaps it wouldn't be so bad, to oppose other proposals, perhaps.\nI don't expect anyone to want this, but if people want it I offer\nmyself to code it,\nI mean, just imagine that a day after publishing a bitcoin core\nrelease with activation software for taproot some one, let's say in\nNew York reach an Agreement to \"just use the same activation\nmechanism, but for our 32 mb hardfork, it's about time, now computers\nare 64 bits anyway\". How convenient would it be to just cancel that\nwith 2 lines in bitcoin core?\nNot that I think it will be necessary, but perhaps we want it just in case.\n\nOn Mon, Feb 22, 2021 at 5:31 PM Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> Sorry, I haven't read everything. I just want to say what I think is\n> the best option and why.\n> Let's say something like 2 years in which miners can signal activation\n> after which, the MUST signal it for their blocks to be valid (I think\n> this is LOT=true, but I don't remember what LOT stands for).\n> Some may argue than it's easier to move from LOT=false to LOT=true\n> than viceversa (I think I'm getting this right), but either way\n> different clients could interpret things more differently more easily\n> and, you know, that's really bad.\n> If anyone is against the consensus change itself, what they should do\n> is run a client in which the must is turned into a MUST NOT. Whenever\n> miners signal activation, blocks aren't valid so that it doesn't\n> happen.\n> That way both sides can be cleanly separated and both communities\n> (assuming there's a community of users opposing the change) can stick\n> together with their own in the same chain. That is, having only 2\n> chains in total if there are users opposing the change or only one if\n> not, but never 2 chains for people who want the change or 2 chains for\n> pople who don't want it.\n>\n> Just my two sats, please nobody ask me \"why would anyone oppose\n> taproot?\" or anything similar. Because I'm trying to generalize here,\n> if we're talking about activation, I think the specifics of the change\n> are kind of irrelevant.\n>\n> Separately: thanks to everyone who worked on taproot.\n>\n>\n> On Mon, Feb 22, 2021 at 3:00 PM Matt Corallo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> >\n> >\n> > On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:\n> >\n> > \ufeffIf a lockinontimeout=true node is requesting compact blocks from a\n> > lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,\n> > I think that could result in a ban.\n> >\n> > More importantly, nodes on both sides of the fork need to find each other.\n> >\n> >\n> > (If there was going to be an ongoing fork there'd be bigger things to\n> > worry about...)\n> >\n> >\n> > I think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can\u2019t simply ignore that.\n> >\n> > I think the important specific case of this is something like \"if a chain\n> > where taproot is impossible to activate is temporarily the most work,\n> > miners with lockinontimeout=true need to be well connected so they don't\n> > end up competing with each other while they're catching back up\".\n> >\n> >\n> > Between this and your above point, I think we probably agree - there is material  technical complexity hiding behind a \u201cchange the consensus rules\u201c option. Given it\u2019s not a critical feature by any means, putting resources into fixing these issues probably isn\u2019t worth it.\n> >\n> > Matt\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jeremy",
                "date": "2021-02-23T02:10:34",
                "message_text_only": "Not responding to anyone in particular, but it strikes me that one can\nthink about the case where a small minority (let's say H = 20%?) of nodes\nselect the opposite of what Core releases (LOT=false, LOT=true). I'm\nignoring the case where a critical bug is discovered in Taproot for reasons\nI could expand on if anyone is interested (I don't think LOT=true/false has\nmuch of a diff in that regard).\n\nYou'll note an asymmetry with LOT=true / false analysis. LOT=true nodes are\nclearly updated (or lying), LOT=false nodes may be un-upgraded (or however\nyou want to interpret it).\n\n\n*# 80% on LOT=false, 20% LOT=True*\n\n- Case 1: Activates ahead of time anyways\n\nNo issues.\n\n- Case 2: Fails to Activate before timeout...\n\n20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of multi\nblock reorgs at time of fork relatively high, especially if network does\nnot partition.\n\nImplication is that activation % being 90%, then X% fewer than 70% of\nminers are signaling for Taproot at this time.  If X% is small the\nincreased orphan rate caused by the LOT=true miners will cause it to\nactivate anyways. If X% is larger, then there will be a consensus split.\n\n\n\n*# 80% on LOT=true, 20% LOT=False*\n- Case 1: Activates ahead of time Anyways\n\nNo issues.\n\n- Case 2: Fails to Activate before timeout...\n\nA% + B% + C% = 20%\n\nA% (upgraded, signal activate) remain on majority chain with LOT=false,\nblocks mined universally valid.\n\nB% (upgraded, not signaling) succeeds in activating and maintaining\nconsensus, blocks are temporarily lost during the final period, but\nconsensus re-emerges.\n\nC% (not upgraded/not signalling) both fail to activate (not upgraded) and\nblocks are rejected (not signaling) during mandatory signalling.\nEssentially becomes an SPV miner, should still not select transactions\nimproperly given mempool policy, but may mine a bad tip.\n\n(I argue that group B is irrational entirely, as in this case the majority\nhas upgraded, inevitably winning, and is orphaning their blocks so B should\neffectively be 0% or can be combined with group C as being somehow not\nupgraded if they are unable to switch once it becomes clear after say the\nfirst 100 blocks in the period that LOT > 50%. The only difference in\nlumping B with C is that group C SPV mines after the fork and B should, in\ntheory, have full validation.).\n\n\n\nApologies if my base analysis is off -- happy to take corrections.\n\n\nMy overall summary is thus:\n\n1) People care what Core releases because we assume the majority will\nlikely run it. If core were a minority project, we wouldn't really care\nwhat core released.\n2) People are upset with LOT=true being suggested as release parameters\nbecause of the *narrative* that it puts devs in control.\n3) LOT=true having a sizeable minority running it presents major issues to\nmajority LOT=false in terms of lost blocks during the final period and in\nterms of a longer term fork.\n4) Majority LOT=true has no long term instability on consensus (majority\nLOT=true means the final period always activates, any instability is short\nlived + irrational).\n5) On the balance, the safer parameter to release *seems* to be LOT=true.\nBut because devs are sensitive to control narrative, LOT=false is preferred\nby devs.\n6) Almost paradoxically, choosing a *less safe* option for a narrative\nreason is more of a show of dev control than choosing a more safe option\ndespite appearances.\n7) This all comes down to if we think that a reasonable number of important\nnodes will run LOT=true.\n8) This all doesn't matter *that much* because taproot will have many\nopportunities to activate before the brinksmanship period.\n\nAs a plan of action, I think that means that either:\n\nA) Core should release LOT=true, as a less disruptive option given stated\ncommunity intentions to do LOT=true\nB) Core  community should vehemently anti-advocate running LOT=true to\nensure the % is as small as possible\nC) Do nothing\nD) Core community should release LOT=false and vehemently advocate manually\nchanging to LOT=true to ensure the % is supermajority, but leaving it as a\nuser choice.\n\n\nOverall, I worry that plan B has a mild Streissand effect and would result\nin boosting LOT=true (which could be OK, so long as LOT=true +\nLOT=false+signal yes becomes the large majority, but would be not fun for\nanyone if LOT=true + LOT=false+signal yes are a small majority). Plan C\nmost likely ends up with some % doing LOT=true anyways. D feels a little\nsilly, but maybe a good tradeoff.\n\nIf I had to summarize the emotional dynamic among developers around\nLOT=true, I think devs wish it didn't exist because it is clear LOT=true\n*creates* the issues here. LOT=false would be fine if the LOT=true strategy\ndidn't exist at all. But unfortunately the cat is out of the bag and cannot\nbe put back in. To validate the emotions, I think it is fine to be angry\nabout LOT=true and not like it, but we should either accept that it is most\nlikely to create consensus OR we should find a new game theoretic\nactivation strategy with better pro-social equilibriums.\n\nPersonally, I think with either plan the ultimate risk of forking is low\ngiven probability to activate before timeout, so we should just pick\nsomething and move on, accepting that we aren't setting a precedent by\nwhich all future forks should abide. Given my understanding of the\ntradeoffs, I believe that the safest choice is LOT=true, but I wouldn't\nmove to hold back a plan of LOT=false (but would probably take mitigative\nsteps on community advocacy if it looks like there is non majority but non\nnegligible LOT=true uptake).\n\nCheers,\n\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/019548d1/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2021-02-23T19:33:11",
                "message_text_only": "I wanted to follow up on what Jeremy and others are saying regards finding\nconsensus on LOT. I've seen a few other opinions saying that finding\nconsensus on the LOT value is far more important than what the LOT value\nactually is. This makes sense because if 100% of economic activity is\nrunning the same rule set, there is no divergence, regardless of which\nvalue is picked.\n\nIt is my understanding that those who oppose LOT=true are mostly opposed on\nthe grounds of it *appearing* \"unnecessarily coercive\" and that this lack\nof consensus can precipitate a chain split at the \"brinksmanship period\" as\nJeremy refers to it. I don't think that we can say that LOT=true is\ncoercive at all unless there is some opposition to Taproot itself.\nOpposition on the grounds that it *may* be opposed by others and Core does\nnot want to assert control over the protocol is a conservative view but\nultimately contingent upon opposition to Taproot for more fundamental\nreasons. If no one opposes it, then by definition you have consensus, and\nin that case I also don't think that the LOT=true (or false) in that regard\nsets meaningful precedent, as I would expect precedents to only be\nmeaningful if they were established during a contentious scenario. As it\nstands we have precedents for both MASF's and UASF's to execute soft forks\nin Bitcoin.\n\nOf course it seems intractable to ascertain the views of ~100% of the\nBitcoin constituency, and therefore it gives credibility to the argument\nthat by coming to consensus on LOT=false among those who *are* speaking up\nis safer with the embedded assumptions that modifying consensus beyond what\ncore ships is an active choice, presumably by those who know what they are\ndoing. However, the simple act of Core choosing to ship an unconfigurable\nLOT=false value does not *prevent* the forking and creation of a UASF\nclient. As Jeremy points out, the LOT=true possibility always exists here,\nand we have multiple high profile people saying they will be running that\nregardless of how things turn out. It seems to me that in this scenario,\nLOT=false does less to prevent a chain split.\n\nIn regards to precedent, there may be good reasons to force that minority\nto fork themselves off the network, as would be the case if a hypothetical\nsoft fork was a consensus action to blacklist some UTXO's or something else\nthat weaponizes consensus against some subset of Bitcoin's user base, but I\nhaven't heard a single person who advocates for LOT=false on the grounds\nthat they *themselves* oppose the consensus change that is being proposed\nhere. So if the goal is to prevent a chain split, and the soft fork is\nbenign and essentially \"annexing unoccupied territory\" with respect to\nscript versions, and no one actually has opposed Taproot itself, then I\nfail to see how LOT=false is safer in the presence of a grenade defense by\nthe LOT=true crowd.\n\nI personally *prefer* LOT=true for these reasons, but I am NOT going to be\njoining the ranks of the intolerant minority if Core ultimately ships\nLOT=false. I think it is more important to stay in consensus, and as a\nresult I am able to be convinced that false is the right answer. My\nquestion to everyone else (true AND false advocates) is this: what would\nyou have to observe, in order to change your mind or is it immutably made\nup? If we have a significant portion of the community that is immutably\nmade up to go false, and another portion that is going to go true, the\nasymmetry of the fork almost *requires* that those of us whose opinions are\nmalleable to break for true.\n\nIf social consensus is what drives technical consensus and not the other\nway around it seems as if there cannot exist a valid (rational?) reason to\noppose Taproot itself, and then by extension with the arguments laid out\nabove, LOT=true seems to be the logical conclusion of all of this, even if\nCore ships LOT=false at the outset.\n\nWhere am I wrong here?\n\nKeagan\n\nOn Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Not responding to anyone in particular, but it strikes me that one can\n> think about the case where a small minority (let's say H = 20%?) of nodes\n> select the opposite of what Core releases (LOT=false, LOT=true). I'm\n> ignoring the case where a critical bug is discovered in Taproot for reasons\n> I could expand on if anyone is interested (I don't think LOT=true/false has\n> much of a diff in that regard).\n>\n> You'll note an asymmetry with LOT=true / false analysis. LOT=true nodes\n> are clearly updated (or lying), LOT=false nodes may be un-upgraded (or\n> however you want to interpret it).\n>\n>\n> *# 80% on LOT=false, 20% LOT=True*\n>\n> - Case 1: Activates ahead of time anyways\n>\n> No issues.\n>\n> - Case 2: Fails to Activate before timeout...\n>\n> 20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of\n> multi block reorgs at time of fork relatively high, especially if network\n> does not partition.\n>\n> Implication is that activation % being 90%, then X% fewer than 70% of\n> miners are signaling for Taproot at this time.  If X% is small the\n> increased orphan rate caused by the LOT=true miners will cause it to\n> activate anyways. If X% is larger, then there will be a consensus split.\n>\n>\n>\n> *# 80% on LOT=true, 20% LOT=False*\n> - Case 1: Activates ahead of time Anyways\n>\n> No issues.\n>\n> - Case 2: Fails to Activate before timeout...\n>\n> A% + B% + C% = 20%\n>\n> A% (upgraded, signal activate) remain on majority chain with LOT=false,\n> blocks mined universally valid.\n>\n> B% (upgraded, not signaling) succeeds in activating and maintaining\n> consensus, blocks are temporarily lost during the final period, but\n> consensus re-emerges.\n>\n> C% (not upgraded/not signalling) both fail to activate (not upgraded) and\n> blocks are rejected (not signaling) during mandatory signalling.\n> Essentially becomes an SPV miner, should still not select transactions\n> improperly given mempool policy, but may mine a bad tip.\n>\n> (I argue that group B is irrational entirely, as in this case the majority\n> has upgraded, inevitably winning, and is orphaning their blocks so B should\n> effectively be 0% or can be combined with group C as being somehow not\n> upgraded if they are unable to switch once it becomes clear after say the\n> first 100 blocks in the period that LOT > 50%. The only difference in\n> lumping B with C is that group C SPV mines after the fork and B should, in\n> theory, have full validation.).\n>\n>\n>\n> Apologies if my base analysis is off -- happy to take corrections.\n>\n>\n> My overall summary is thus:\n>\n> 1) People care what Core releases because we assume the majority will\n> likely run it. If core were a minority project, we wouldn't really care\n> what core released.\n> 2) People are upset with LOT=true being suggested as release parameters\n> because of the *narrative* that it puts devs in control.\n> 3) LOT=true having a sizeable minority running it presents major issues to\n> majority LOT=false in terms of lost blocks during the final period and in\n> terms of a longer term fork.\n> 4) Majority LOT=true has no long term instability on consensus (majority\n> LOT=true means the final period always activates, any instability is short\n> lived + irrational).\n> 5) On the balance, the safer parameter to release *seems* to be LOT=true.\n> But because devs are sensitive to control narrative, LOT=false is preferred\n> by devs.\n> 6) Almost paradoxically, choosing a *less safe* option for a narrative\n> reason is more of a show of dev control than choosing a more safe option\n> despite appearances.\n> 7) This all comes down to if we think that a reasonable number of\n> important nodes will run LOT=true.\n> 8) This all doesn't matter *that much* because taproot will have many\n> opportunities to activate before the brinksmanship period.\n>\n> As a plan of action, I think that means that either:\n>\n> A) Core should release LOT=true, as a less disruptive option given stated\n> community intentions to do LOT=true\n> B) Core  community should vehemently anti-advocate running LOT=true to\n> ensure the % is as small as possible\n> C) Do nothing\n> D) Core community should release LOT=false and vehemently advocate\n> manually changing to LOT=true to ensure the % is supermajority, but leaving\n> it as a user choice.\n>\n>\n> Overall, I worry that plan B has a mild Streissand effect and would result\n> in boosting LOT=true (which could be OK, so long as LOT=true +\n> LOT=false+signal yes becomes the large majority, but would be not fun for\n> anyone if LOT=true + LOT=false+signal yes are a small majority). Plan C\n> most likely ends up with some % doing LOT=true anyways. D feels a little\n> silly, but maybe a good tradeoff.\n>\n> If I had to summarize the emotional dynamic among developers around\n> LOT=true, I think devs wish it didn't exist because it is clear LOT=true\n> *creates* the issues here. LOT=false would be fine if the LOT=true strategy\n> didn't exist at all. But unfortunately the cat is out of the bag and cannot\n> be put back in. To validate the emotions, I think it is fine to be angry\n> about LOT=true and not like it, but we should either accept that it is most\n> likely to create consensus OR we should find a new game theoretic\n> activation strategy with better pro-social equilibriums.\n>\n> Personally, I think with either plan the ultimate risk of forking is low\n> given probability to activate before timeout, so we should just pick\n> something and move on, accepting that we aren't setting a precedent by\n> which all future forks should abide. Given my understanding of the\n> tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't\n> move to hold back a plan of LOT=false (but would probably take mitigative\n> steps on community advocacy if it looks like there is non majority but non\n> negligible LOT=true uptake).\n>\n> Cheers,\n>\n> Jeremy\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210223/5d65c6e3/attachment-0001.html>"
            },
            {
                "author": "Ben Woosley",
                "date": "2021-02-23T23:14:33",
                "message_text_only": "Relative to your arguments, Keagan and Jeremy, and speaking in favor of\nLOT=false, from my limited perspective:\n\n> As Jeremy points out, the LOT=true possibility always exists here, and we\nhave multiple high profile people saying they will be running that\nregardless of how things turn out. It seems to me that in this scenario,\nLOT=false does less to prevent a chain split.\n> So if the goal is to prevent a chain split, and the soft fork is benign\nand essentially \"annexing unoccupied territory\" with respect to script\nversions, and no one actually has opposed Taproot itself, then I fail to\nsee how LOT=false is safer in the presence of a grenade defense by the\nLOT=true crowd.\n\nI don't believe the goal is to avoid a chain split, nor to activate\nTaproot. Over the long term it will not have been important when exactly\nTaproot activated, or whether a minority forked off, but what culture and\nnorms we adopted in putting forward this change. A culture of deference to\nthe network makes Core worthy of remaining the reference implementation of\nBitcoin.\n\nGiven Core's special position in the client ecosystem, I see these outcomes\nare asymmetric:\na) If an intolerant minority signals LOT=true in contradiction to core,\nthey are splitting consensus / forking off consensus, which is their right\nto do in our open ecosystem.\nb) If Core ships LOT=true, we are in fact imposing a change on the network.\nThis may be justified in the end, but it should be used with discretion.\n\nIf LOT=false fails to activate, then the failure will have revealed\ninformation about sentiments and elements of the network, and we will have\nan opportunity then to address that information before proceeding with\nLOT=true.\n\nTo adopt b) as a pre-emptive defense against a) is to express will without\nevidence of necessity or opportunity for justification.\n\nFinally, as others have said, I think this option is likely to be moot -\nlet's not act defensively out of SEGWIT trauma, but with trust in the\nnetwork.\n\nBest,\nBen\n\nOn Tue, Feb 23, 2021 at 12:09 PM Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I wanted to follow up on what Jeremy and others are saying regards finding\n> consensus on LOT. I've seen a few other opinions saying that finding\n> consensus on the LOT value is far more important than what the LOT value\n> actually is. This makes sense because if 100% of economic activity is\n> running the same rule set, there is no divergence, regardless of which\n> value is picked.\n>\n> It is my understanding that those who oppose LOT=true are mostly opposed\n> on the grounds of it *appearing* \"unnecessarily coercive\" and that this\n> lack of consensus can precipitate a chain split at the\n> \"brinksmanship period\" as Jeremy refers to it. I don't think that we can\n> say that LOT=true is coercive at all unless there is some opposition to\n> Taproot itself. Opposition on the grounds that it *may* be opposed by\n> others and Core does not want to assert control over the protocol is a\n> conservative view but ultimately contingent upon opposition to Taproot for\n> more fundamental reasons. If no one opposes it, then by definition you have\n> consensus, and in that case I also don't think that the LOT=true (or false)\n> in that regard sets meaningful precedent, as I would expect precedents to\n> only be meaningful if they were established during a contentious scenario.\n> As it stands we have precedents for both MASF's and UASF's to execute soft\n> forks in Bitcoin.\n>\n> Of course it seems intractable to ascertain the views of ~100% of the\n> Bitcoin constituency, and therefore it gives credibility to the argument\n> that by coming to consensus on LOT=false among those who *are* speaking\n> up is safer with the embedded assumptions that modifying consensus beyond\n> what core ships is an active choice, presumably by those who know what they\n> are doing. However, the simple act of Core choosing to ship an\n> unconfigurable LOT=false value does not *prevent* the forking and\n> creation of a UASF client. As Jeremy points out, the LOT=true possibility\n> always exists here, and we have multiple high profile people saying they\n> will be running that regardless of how things turn out. It seems to me that\n> in this scenario, LOT=false does less to prevent a chain split.\n>\n> In regards to precedent, there may be good reasons to force that minority\n> to fork themselves off the network, as would be the case if a hypothetical\n> soft fork was a consensus action to blacklist some UTXO's or something else\n> that weaponizes consensus against some subset of Bitcoin's user base, but I\n> haven't heard a single person who advocates for LOT=false on the grounds\n> that they *themselves* oppose the consensus change that is being proposed\n> here. So if the goal is to prevent a chain split, and the soft fork is\n> benign and essentially \"annexing unoccupied territory\" with respect to\n> script versions, and no one actually has opposed Taproot itself, then I\n> fail to see how LOT=false is safer in the presence of a grenade defense by\n> the LOT=true crowd.\n>\n> I personally *prefer* LOT=true for these reasons, but I am NOT going to\n> be joining the ranks of the intolerant minority if Core ultimately ships\n> LOT=false. I think it is more important to stay in consensus, and as a\n> result I am able to be convinced that false is the right answer. My\n> question to everyone else (true AND false advocates) is this: what would\n> you have to observe, in order to change your mind or is it immutably made\n> up? If we have a significant portion of the community that is immutably\n> made up to go false, and another portion that is going to go true, the\n> asymmetry of the fork almost *requires* that those of us whose opinions\n> are malleable to break for true.\n>\n> If social consensus is what drives technical consensus and not the other\n> way around it seems as if there cannot exist a valid (rational?) reason to\n> oppose Taproot itself, and then by extension with the arguments laid out\n> above, LOT=true seems to be the logical conclusion of all of this, even if\n> Core ships LOT=false at the outset.\n>\n> Where am I wrong here?\n>\n> Keagan\n>\n> On Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Not responding to anyone in particular, but it strikes me that one can\n>> think about the case where a small minority (let's say H = 20%?) of nodes\n>> select the opposite of what Core releases (LOT=false, LOT=true). I'm\n>> ignoring the case where a critical bug is discovered in Taproot for reasons\n>> I could expand on if anyone is interested (I don't think LOT=true/false has\n>> much of a diff in that regard).\n>>\n>> You'll note an asymmetry with LOT=true / false analysis. LOT=true nodes\n>> are clearly updated (or lying), LOT=false nodes may be un-upgraded (or\n>> however you want to interpret it).\n>>\n>>\n>> *# 80% on LOT=false, 20% LOT=True*\n>>\n>> - Case 1: Activates ahead of time anyways\n>>\n>> No issues.\n>>\n>> - Case 2: Fails to Activate before timeout...\n>>\n>> 20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of\n>> multi block reorgs at time of fork relatively high, especially if network\n>> does not partition.\n>>\n>> Implication is that activation % being 90%, then X% fewer than 70% of\n>> miners are signaling for Taproot at this time.  If X% is small the\n>> increased orphan rate caused by the LOT=true miners will cause it to\n>> activate anyways. If X% is larger, then there will be a consensus split.\n>>\n>>\n>>\n>> *# 80% on LOT=true, 20% LOT=False*\n>> - Case 1: Activates ahead of time Anyways\n>>\n>> No issues.\n>>\n>> - Case 2: Fails to Activate before timeout...\n>>\n>> A% + B% + C% = 20%\n>>\n>> A% (upgraded, signal activate) remain on majority chain with LOT=false,\n>> blocks mined universally valid.\n>>\n>> B% (upgraded, not signaling) succeeds in activating and maintaining\n>> consensus, blocks are temporarily lost during the final period, but\n>> consensus re-emerges.\n>>\n>> C% (not upgraded/not signalling) both fail to activate (not upgraded) and\n>> blocks are rejected (not signaling) during mandatory signalling.\n>> Essentially becomes an SPV miner, should still not select transactions\n>> improperly given mempool policy, but may mine a bad tip.\n>>\n>> (I argue that group B is irrational entirely, as in this case the\n>> majority has upgraded, inevitably winning, and is orphaning their blocks so\n>> B should effectively be 0% or can be combined with group C as being somehow\n>> not upgraded if they are unable to switch once it becomes clear after say\n>> the first 100 blocks in the period that LOT > 50%. The only difference in\n>> lumping B with C is that group C SPV mines after the fork and B should, in\n>> theory, have full validation.).\n>>\n>>\n>>\n>> Apologies if my base analysis is off -- happy to take corrections.\n>>\n>>\n>> My overall summary is thus:\n>>\n>> 1) People care what Core releases because we assume the majority will\n>> likely run it. If core were a minority project, we wouldn't really care\n>> what core released.\n>> 2) People are upset with LOT=true being suggested as release parameters\n>> because of the *narrative* that it puts devs in control.\n>> 3) LOT=true having a sizeable minority running it presents major issues\n>> to majority LOT=false in terms of lost blocks during the final period and\n>> in terms of a longer term fork.\n>> 4) Majority LOT=true has no long term instability on consensus (majority\n>> LOT=true means the final period always activates, any instability is short\n>> lived + irrational).\n>> 5) On the balance, the safer parameter to release *seems* to be LOT=true.\n>> But because devs are sensitive to control narrative, LOT=false is preferred\n>> by devs.\n>> 6) Almost paradoxically, choosing a *less safe* option for a narrative\n>> reason is more of a show of dev control than choosing a more safe option\n>> despite appearances.\n>> 7) This all comes down to if we think that a reasonable number of\n>> important nodes will run LOT=true.\n>> 8) This all doesn't matter *that much* because taproot will have many\n>> opportunities to activate before the brinksmanship period.\n>>\n>> As a plan of action, I think that means that either:\n>>\n>> A) Core should release LOT=true, as a less disruptive option given stated\n>> community intentions to do LOT=true\n>> B) Core  community should vehemently anti-advocate running LOT=true to\n>> ensure the % is as small as possible\n>> C) Do nothing\n>> D) Core community should release LOT=false and vehemently advocate\n>> manually changing to LOT=true to ensure the % is supermajority, but leaving\n>> it as a user choice.\n>>\n>>\n>> Overall, I worry that plan B has a mild Streissand effect and would\n>> result in boosting LOT=true (which could be OK, so long as LOT=true +\n>> LOT=false+signal yes becomes the large majority, but would be not fun for\n>> anyone if LOT=true + LOT=false+signal yes are a small majority). Plan C\n>> most likely ends up with some % doing LOT=true anyways. D feels a little\n>> silly, but maybe a good tradeoff.\n>>\n>> If I had to summarize the emotional dynamic among developers around\n>> LOT=true, I think devs wish it didn't exist because it is clear LOT=true\n>> *creates* the issues here. LOT=false would be fine if the LOT=true strategy\n>> didn't exist at all. But unfortunately the cat is out of the bag and cannot\n>> be put back in. To validate the emotions, I think it is fine to be angry\n>> about LOT=true and not like it, but we should either accept that it is most\n>> likely to create consensus OR we should find a new game theoretic\n>> activation strategy with better pro-social equilibriums.\n>>\n>> Personally, I think with either plan the ultimate risk of forking is low\n>> given probability to activate before timeout, so we should just pick\n>> something and move on, accepting that we aren't setting a precedent by\n>> which all future forks should abide. Given my understanding of the\n>> tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't\n>> move to hold back a plan of LOT=false (but would probably take mitigative\n>> steps on community advocacy if it looks like there is non majority but non\n>> negligible LOT=true uptake).\n>>\n>> Cheers,\n>>\n>> Jeremy\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210223/90c7bfe1/attachment-0001.html>"
            },
            {
                "author": "Ariel Luaces",
                "date": "2021-02-24T22:37:09",
                "message_text_only": "On Tue, Feb 23, 2021 at 12:09 PM Keagan McClelland via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> If social consensus is what drives technical consensus and not the other way around it seems as if there cannot exist a valid (rational?) reason to oppose Taproot itself, and then by extension with the arguments laid out above, LOT=true seems to be the logical conclusion of all of this, even if Core ships LOT=false at the outset.\n>\n> Where am I wrong here?\n>\n> Keagan\n>\n> On Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Personally, I think with either plan the ultimate risk of forking is low given probability to activate before timeout, so we should just pick something and move on, accepting that we aren't setting a precedent by which all future forks should abide. Given my understanding of the tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't move to hold back a plan of LOT=false (but would probably take mitigative steps on community advocacy if it looks like there is non majority but non negligible LOT=true uptake).\n>>\n>> Cheers,\n>>\n>> Jeremy\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\nTo favor LOT=true because it seems like the inevitable result is like\nplaying the prisoner's dilemma and never cooperating instead of using\nthe most optimal strategy which is tit-for-tat (cooperating at first\nand then cheating once for every time your counterparty cheats).\n\nDuring segwit users started by cooperating (BIP9, or \"LOT=false\"),\nthen a minority of\nminers didn't cooperate (small veto but remember the majority of\nminers cooperated), then users stopped cooperating in response (UASF),\nthen miners\nreverted to cooperating (MASF while intolerant miners forked off).\nToday users should start cooperating again to continue using the\noptimal strategy.\n\nCheers\nAriel Lorenzo-Luaces"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-02-24T07:18:32",
                "message_text_only": "On Mon, Feb 22, 2021 at 06:10:34PM -0800, Jeremy via bitcoin-dev wrote:\n> Not responding to anyone in particular, but it strikes me that one can think\n> about the case where a small minority (let's say H = 20%?) of nodes\n\nI don't think that's a good way to try to look at things -- number of\nnodes has some impacts, but they're relatively minor (pun deflected).\n\nI think the things to look at are (from most to least important):\n\n (1) what the price indicates / what people buying/selling BTC want\n (2) what hashpower does\n (3) what nodes do\n\nHere's a concrete example to help justify that ordering. Suppose\nthat for whatever reason nobody is particularly interested in running\nlockinontimeout=true -- only 0.1% of nodes are doing it and they're not\nthe \"economic majority\" in any way. In addition, 15% of hashpower have\nspent almost the entire signalling period not bothering to upgrade and\nthus haven't been signalling and have been blocking activation.\n\nSuppose further that there are futures/prediction markets setup so that\npeople can bet on taproot activation (eg the bitfinex chain split tokens,\nor some sort of DeFi contracts), and the result is that there's some\ndecent profits to be made if it does activate, enough to tempt >55%\nof hashpower into running with lockinontimeout=true. That way those\nminers can be confident it will activate, take up contracts in the\nfutures/predictions markets, and be confident they'll win and get a\nbig payday. (Note that this means the people on the other side of those\ncontracts are betting that taproot *doesn't* activate)\n\nOnce a majority of hashpower is running lockinontimeout=true, it then\nmakes sense for the remaining hashpower to both signal for activation\nand also run lockinontimeout=true -- otherwise they risk their blocks\nbeing orphaned if too many blocks don't signal, and they build on top\nof one.  Figuring out that a majority of hashpower is/will be running\nlockinontimeout=true can be done either by a coinbase message or by\nbip91-style signalling.\n\nIn that scenario, you end up with >90% of hashpower running with\nlockinontimeout=true, even if only a token number of nodes in the wild\nare doing the same.\n\n\n\nIt's possible to do estimates of what happens if a majority of miners\nare using lockinontimeout=true, and the numbers end up pretty wild.\n\nWith 90% of miners signalling and running lockinontimeout=true, if the\nremaining 10% don't signal, they can expect to lose around 3% of revenue\n($2M) due to blocks getting orphaned. If the numbers are 85% running\nlockinontimeout=true, and 15% not signalling, the non-signallers can\nexpect to lose about 37% of revenue ($38M) during the retarget period\nprior to timeout. If 60% of miners are doing spy-mining for up to 90s,\nthey would expect to lose 0.9% of their spy-mining revenue ($2.5M). If\n60% of hashpower is running lockinontimeout=true, while 40% don't\nsignal, the non-signallers will forego ~83% of revenue ($320M) due to\ntheir blocks being orphaned, and if 60% of miners spy-mine for 90s, they\nshould expect to lose 5% of revenue ($10M) over the same period. Dollar\nfigures based on 6.25BTC/block at $50k per BTC.\n\nhttps://gist.github.com/ajtowns/fbcf30ed9d0e1708fdc98a876a04ff69#file-forced_signalling_chaos_cost_sim-py\n\nNote that if miners simply accept those losses and don't take any\naction to prevent it, very long reorgs are to be expected -- in the 15%\nnon-signalling scenario, you'd expect to see a 5-block reorg; in the 40%\nnon-signalling scenario, you'd get reorgs of 60+ blocks. (Only people\nnot running lockinontimeout=true would see the blocks being reorged out,\nof course)\n\n\nSo I think focussing on how many nodes have a particular lockinontimeout\nsetting can be pretty misleading.\n\n> # 80% on LOT=false, 20% LOT=True\n> - Case 1: Activates ahead of time anyways\n\nThat's the case where >90% of hashpower is signalling, and everything\nworks fine.\n\n> - Case 2: Fails to Activate before timeout...\n> 20% *may* fork off with LOT=true.\n\nAnyone running with lockinontimeout=true will refuse to follow a chain\nwhere lockin hasn't been reached by the timeout height; so if the most\nwork chain meets that condition, lockinontimeout=true nodes will refuse\nto follow it; either getting stuck with no confirmations at all, or\nfollowing a lower work chain that does (or can) reach lockin by timeout\nheight.\n\n> Bitcoin hashrate reduced, chance of multi\n> block reorgs at time of fork relatively high, especially if network does not\n> partition.\n\nIf the most-work chain fails to activate, and only a minority of\nhashrate is running lockinontimeout=true, the chance of multiblock\nreorgs is actually pretty low. The way it would play out in detail,\nwith say 20% of hashpower not signalling and 40% of hashpower running\nlockinontimeout=true:\n\n  * the chain reaches the last retarget period; lockinontimeout=false\n    nodes stay in STARTED, lockinontimeout=true nodes switch to\n    MUST_SIGNAL\n\n  * for the first ~1009 blocks, everyone stays in sync, but block ~1010\n    becomes the 202nd non-signalling block, meaning that the 60% of\n    hashpower on lockinontimeout=false is now one block ahead of the 40%\n    of hashpower on lockinontimeout=true\n\n  * it's possible that the 40% have a lucky run and get ahead of the 60%\n    chain causing a reorg. But in that case the within about 5 blocks,\n    another non-signalling block will be mined and the 60% will be ahead\n    again. So the 40% of lockinontimeout=true hashpower has to keep with\n    with miners that have 150% of their hashrate for ~1000 blocks in\n    order for everyone to end up on a locked in chain, which is\n    vanishingly unlike.\n\nEven if you set the percentage not signalling to 11% and the percent of\nhashpower running lockinontimeout=true to 48%, by my count you only get\nabout a 27% chance of ending up reaching lockin on the most work chain.\nWith the 40%/20% figures above it's a flat 0.0%.\n\nhttps://gist.github.com/ajtowns/fbcf30ed9d0e1708fdc98a876a04ff69#file-test_disaster-py\n\nIt's possible that the 60% will take some action to prevent their blocks\nbeing reorged out if the 40% do get lucky. One option would be for them\nto set lockinontimeout=true -- then we quickly get back to the \"almost\nall hashpower ends up running lockinontimeout=true\" and activation is\ncertain. But they could just as easily decide that one getblockchaininfo\nreports a softfork isn't possible, they won't reorg to a chain where it\nis possible unless it's 2 or 4 or 6 or whatever blocks longer.\n\n> # 80% on LOT=true, 20% LOT=False\n> - Case 1: Activates ahead of time Anyways\n> No issues.\n\nThis is same case where there's plenty of signalling and it's irrelevant\nwhat the setting for lockinontimeout is...\n\n> - Case 2: Fails to Activate before timeout...\n\nI'm not sure what you mean by \"before timeout\" here -- if you mean\nit reaches the MUST_SIGNAL phase, with 80% of hashpower running\nlockinontimeout=true, then things work out okay: even assuming that all\n20% that are not running lockinontimeout=true are also not signalling,\nthen the miners who don't signal will lose up to 56% of their revenue for\nthe MUST_SIGNAL period (~$80M) , and if some of the lockinontimeout=true\nminers do spy-mining and build on top of non-signalling blocks, they\nmay lose something like 1.7% of their revenue as well. In addition we\nmight see reorgs of up to ~10 blocks as this resolves itself. That's a\nsignificant loss for the miners who are out of consensus, and the\nliklihood of large reorgs will make doing business with bitcoin harder,\nbut that at least is all able to be coped with.\n\nBut if you mean the most work chain reaches the timeout height without\nachieving locked in state, because the majority of miners aren't running\nlockinontimeout=true, then the 80% of nodes running lockinontimeout=true\nwill be stalled, and unable to process transactions, until they downgrade.\n\nIf that ever occurred, it would be an astounding disaster, and I hope\nthe first thing people would do is decide never to run any software by\nwhoever proposed, ACKed or merged the PR that resulted in 80% of nodes\nrunning with lockinontimeout=true.\n\n*Because* it would be such a disaster to effectively run a\ndenial-of-service attack on 80% of nodes, it's plausible that price\nsignals would indicate to miners that it will be much more profitable to\nrun lockinontimeout=true, preventing that from occuring. But people can\nmake profits out of disasters too -- it might be that people will figure\n\"oh, the price will crash if this happens, so it'll be a chance to get\nsome cheap bitcoins, and maybe put competing miners out of business so\nI can buy their ASICs off them for cheap too!\"\n\n> My overall summary is thus:\n> 1) People care what Core releases because we assume the majority will likely\n> run it. If core were a minority project, we wouldn't really care what core\n> released.\n\nThat seems very backwards to me. I'd put it as: people run core because\nit makes good, conservative decisions on what features to add. If\n\"choose your own consensus rules\" were what the market wanted, then\nBitcoin Unlimited or similar would be what everyone was running.\n\nIf core were to change that policy and push risky changes, I'd hope\nthat users would be able to recognise this, and would switch to an\nimplementation that continues to emphasise safe, conservative policies.\n\n> 2) People are upset with LOT=true being suggested as release parameters because\n> of the narrative that it puts devs in control.\n\nIf users will just run whatever core devs release, even if it involves\ncontentious changes to consensus rules, then the core devs are in control.\n\n> 3) LOT=true having a sizeable minority running it presents major issues to\n> majority LOT=false in terms of lost blocks during the final period and in terms\n> of a longer term fork.\n\nAs above, I think this scenario is easy to avoid if it were to\neventuate.\n\n> 4) Majority LOT=true has no long term instability on consensus (majority LOT=\n> true means the final period always activates, any instability is short lived +\n> irrational).\n\nThe instability occurs if the lockinontimeout=true chain stalls or is\novertaken by a more-work non-activating chain, then users running nodes\nwith that parameter set will stop their nodes, and reinstall/reconfigure\nit to set lockinontimeout=false.\n\n> 5) On the balance, the safer parameter to release *seems* to be LOT=true. But\n> because devs are sensitive to control narrative, LOT=false is preferred by\n> devs.\n\nI think that conclusion is based on a few shakey assumptions; particularly\nthat people won't downgrade/reinstall back to lockinontimeout=false\nand that miners will be be pretty naive about allowing their blocks to\nbe orphaned.\n\n> 6) Almost paradoxically, choosing a less safe option for a narrative reason is\n> more of a show of dev control than choosing a more safe option despite\n> appearances.\n\nGoing all-in on a bluff can be a good bet 9 times out of 10, while still\nbeing a net negative because of the 1 time out of 10 when you lose. In\nthe examples above, the \"80% of nodes running the default client can no\nlonger follow the blockchain without manual intervention\" is the \"lose\nit all scenario\", even if \"taproot\" is probably one of the 9/10 cases,\nnot the 1/10 case.\n\n> 7) This all comes down to if we think that a reasonable number of important\n> nodes will run LOT=true.\n\nWhat nodes run (as compared to hashpower, or as compared to what people\nwant to buy/sell) is the least important factor in working out what's\ngoing to happen.\n\n> As a plan of action, I think that means that either:\n> A) Core should release LOT=true, as a less disruptive option given stated\n> community intentions to do LOT=true\n> B) Core\u00a0 community should vehemently anti-advocate running LOT=true to ensure\n> the % is as small as possible\n> C) Do nothing\n> D) Core community should release LOT=false and vehemently advocate manually\n> changing to LOT=true to ensure the % is supermajority, but leaving it as a user\n> choice.\n\nI think these are all a bit terrible as plans of action -- \"core should\nrelease X, then advocate Y\" is really not playing to core's strengths.\nFar better for devs to focus on writing/debugging code, analysing the\nway things work, making tests, and adding mitigations for risks.\n\nBetter for bloggers and podcasters and the twitterati to do the advocacy,\nand core to stick to working on code and saying \"no, there are significant\ntechnical risks to doing that that we don't yet have mitigations for\"\nwhen people advocate for risky things.\n\nMy view is more along the lines of:\n\n - the setting for lockinontimeout will not matter until around July 2022,\n   (though maybe as early as May 2022 if blocks come really fast) either\n   technically or even as a game theory incentive\n\n - lockinontimeout=true has consensus implications, and depending on\n   the response by miners can cause network interruptions like long\n   chains of reorgs. At best, it hasn't had the same level of review as\n   taproot, and some experienced developers aren't comfortable with it\n   as it stands. Those seem like pretty good reasons not to deploy it\n   immediately, IMO.\n\n - the lockinontimeout=true code we've got doesn't do (at least) two\n   things that the bip148 client did that help avoid bad cases:\n     - ensure preferential connections to other nodes setting\n       lockinontimeout=true to prevent network splits if the\n       non-activating chain is longer during/after the MUST_SIGNAL phase\n     - cope with rewinding the chain to the best lockinontimeout=true valid\n       block, in the event a node is upgraded to lockinontimeout=true\n       from either lockinontimeout=false or a version of bitcoind that\n       doesn't have activation parameters set at all\n\nI think it makes more sense to:\n\n 1) release lockinontimeout=false code with a view to reconsidering it\n    at about ~6 months (so prior to the 23.0 release)\n\n 2) do more review of lockinontimeout=true code to ensure everyone\n    understands what behaviours are likely\n\n 3) add support for the features from the bip148 client, along with\n    any other mitigations we think of, assuming we can do so in a way\n    that's safe and sane\n\n 4) work with miners and mining pools to ensure that if\n    lockinontimeout=true does get used they know how to minimise\n    disruption and losses due to orphaning, etc.\n\nThat gives us about 6 months work on (2) and (3), and probably 9-12\nmonths to work on (4), and it's all technical rather than advocacy and\npopularity contests. Six, nine or twelve months should be plenty of time\nto get pretty clear indications of what both the market in general\nthinks about things, and what miners are thinking.\n\nI think if lockinontimeout=true weren't new code, and devs, miners and\nusers widely understood its potential behaviours and risks, and we didn't\nhave safety features that were still on the todo list, then there'd be\na good argument for doing lockinontimeout=true from day 1. I could see\nthat being the case for the next soft-fork, assuming it gets a similar\namount of review prior to deployment as taproot has had, eg. But, to me,\ntaking a more cautious approach seems more sensible today.\n\n> If I had to summarize the emotional dynamic among developers [...]\n\n(Fortunately, you don't have to do that...)\n\nCheers,\naj"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-18T13:59:34",
                "message_text_only": "Bitcoin is a consensus system. Please let\u2019s not jump to (or even consider) options that discourage consensus. We all laughed at (and later academics researched showed severe deficiencies in) Bitcoin XT\u2019s \u201cemergent consensus\u201d nonsense, why should we start doing things along that line in Bitcoin?\n\n(Resent from the correct email)\n\nMatt\n\n> On Feb 18, 2021, at 06:52, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeffGood morning all,\n> \n>> \"An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\"\n>> \n>> Who's we here?\n>> \n>> Release both and let the network decide.\n> \n> A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.\n> \n> This assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.\n> \n> Regards,\n> ZmnSCPxj\n> \n>> \n>>> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \n>>> Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral \"people\" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.\n>>> \n>>>> The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n>>> \n>>> I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.\n>>> \n>>>> Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?\n>>> \n>>> It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.\n>>> \n>>>> The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.\n>>> \n>>> There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.\n>>> \n>>>> An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>>> \n>>> I don't know what you are recommending here to avoid \"this darkest timeline\". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.\n>>> \n>>> TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)\n>>> \n>>>> On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:\n>>> \n>>>> Something what strikes me about the conversation is the emotion surrounding the letters UASF.\n>>>> It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is \"any activation that is not a MASF\".\n>>>> A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.\n>>>> Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.\n>>>> The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).\n>>>> I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.\n>>>> The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.\n>>>> Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.\n>>>> The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.\n>>>> How is that strictly safer or more coordinated?\n>>>> I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.\n>>>> Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.\n>>>> An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.\n>>>> Cheers\n>>>> Ariel Lorenzo-Luaces\n>>>> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>>> Yesterday (February 16th) we held a second meeting on Taproot\n>>>>> activation on IRC which again was open to all. Despite what appeared\n>>>>> to be majority support for LOT=false over LOT=true in the first\n>>>>> meeting I (and others) thought the arguments had not been explored in\n>>>>> depth and that we should have a follow up meeting almost entirely\n>>>>> focused on whether LOT (lockinontimeout) should be set to true or\n>>>>> false.\n>>>>> \n>>>>> The meeting was announced here:\n>>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>>>>> \n>>>>> In that mailing list post I outlined the arguments for LOT=true (T1 to\n>>>>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n>>>>> could. David Harding responded with an additional argument for\n>>>>> LOT=false (F7) here:\n>>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>>>>> \n>>>>> These meetings are very challenging given they are open to all, you\n>>>>> don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n>>>>> advance. I tried to give time for both the LOT=true arguments and the\n>>>>> LOT=false arguments to be discussed as I knew there was support for\n>>>>> both. We only tried evaluating which had more support and which had\n>>>>> more strong opposition towards the end of the meeting.\n>>>>> \n>>>>> The conversation log is here:\n>>>>> http://gnusha.org/taproot-activation/2021-02-16.log\n>>>>> \n>>>>> (If you are so inclined you can watch a video of the meeting here.\n>>>>> Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n>>>>> https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>>>>> \n>>>>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n>>>>> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>>>>> \n>>>>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n>>>>> did manage to come to consensus on everything but LockinOnTimeout.\n>>>>> \n>>>>> Activation height range: 693504-745920\n>>>>> \n>>>>> MASF threshold: 1815/2016 blocks (90%)\n>>>>> \n>>>>> Keep in mind only ~100 people showed for the meetings, hardly\n>>>>> representative of the entire community.\n>>>>> \n>>>>> So, these details remain JUST a proposal for now.\n>>>>> \n>>>>> It seems inevitable that there won't be consensus on LOT.\n>>>>> \n>>>>> Everyone will have to choose for himself. :/\n>>>>> \n>>>>> Personally I agree with most of this. I agree that there wasn\u2019t\n>>>>> overwhelming consensus for either LOT=true or LOT=false. However, from\n>>>>> my perspective there was clearly more strong opposition (what would\n>>>>> usually be deemed a NACK in Bitcoin Core review terminology) from\n>>>>> Bitcoin Core contributors, Lightning developers and other community\n>>>>> members against LOT=true than there was for LOT=false. Andrew Chow\n>>>>> tried to summarize views from the meeting in this analysis:\n>>>>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>>>>> \n>>>>> I am also aware of other current and previous Bitcoin Core\n>>>>> contributors and Lightning developers who didn\u2019t attend the meeting in\n>>>>> person who are opposed to LOT=true. I don\u2019t want to put them in the\n>>>>> spotlight for no reason but if you go through the conversation logs of\n>>>>> not only the meeting but the weeks of discussion prior to this meeting\n>>>>> you will see their views evaluated on the ##taproot-activation\n>>>>> channel. In addition, on taprootactivation.com some mining pools\n>>>>> expressed a preference for lot=false though I don\u2019t know how strong\n>>>>> that preference was.\n>>>>> \n>>>>> I am only one voice but it is my current assessment that if we are to\n>>>>> attempt to finalize Taproot activation parameters and propose them to\n>>>>> the community at this time our only option is to propose LOT=false.\n>>>>> Any further delay appears to me counterproductive in our collective\n>>>>> aim to get the Taproot soft fork activated as early as possible.\n>>>>> \n>>>>> Obviously others are free to disagree with that assessment and\n>>>>> continue discussions but personally I will be attempting to avoid\n>>>>> those discussions unless prominent new information comes to light or\n>>>>> various specific individuals change their minds.\n>>>>> \n>>>>> Next week we are planning a code review of the Bitcoin Core PR #19573\n>>>>> which was initially delayed because of this LOT discussion. As I\u2019ve\n>>>>> said previously that will be loosely following the format of the\n>>>>> Bitcoin Core PR review club and will be lower level and more\n>>>>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n>>>>> the IRC channel ##taproot-activation.\n>>>>> \n>>>>> Thanks to the meeting participants (and those who joined the\n>>>>> discussion on the channel prior and post the meeting) for engaging\n>>>>> productively and in good faith.\n>>> \n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at gmail.com\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Matt Hill",
                "date": "2021-02-19T22:12:00",
                "message_text_only": "Good day all, this is my first post to this mailing list. Per Adam's\ncomment below:\n\n> given there are clearly people of both views, or for now don't care\nbut might later, it would minimally be friendly and useful if\nbitcoin-core has a LOT=true option - and that IMO goes some way to\navoid the assumptive control via defaults.\n\nBoth here and elsewhere, the debate taking place is around the manner of\nTaproot activation, not whether or not Taproot should be activated. The\nlatter seems to have widespread support. Given this favorable environment,\nit seems to me this is an incredible opportunity for the developer\ncontingency to \"take the high road\" while also minimizing time to Taproot\nactivation using political incentives. By offering power on the left hand\nto miners and and power on the right to users, neither of whom is\nexpressing disapproval of activation, but both of whom are able to activate\nwithout the consent of the other, both are incentivized to signal\nactivation as quickly as possible to emerge as the \"group that did it\". All\nthat must be done is to include a LOT=true option to Bitcoin Core that\ncarries a default of LOT=false. Miners can activate at any time, users can\nsignal their intent to activate should miners renege, and developers emerge\nas politically neutral in the eyes of both.\n\nExtrapolating a bit, I contend this expanded agency of full node\noperatorship may result in more users running a full node, which is good\nand healthy. From a miner's point of view, more full nodes only increases\nthe likelihood of future UASFs, and so they are even further incentivized\nto expedite Taproot activation. Perhaps this is a stretch, perhaps not.\n\nTo summarize: (1) this positions developers as neutral facilitators who\ndeferred power to the other contingencies; (2) we may see a rise in the\npopularity of running a full node and the number of full node operators;\n(3) miners are incentivized to activate quickly to avoid being perceived as\nthe \"bad guys\" and to avoid the spread of full nodes; and (4) even if\nminers do not activate, users can organize a UASF in a grass-roots way.\n\nMatt Hill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/bc99c654/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-19T23:30:47",
                "message_text_only": "(off-list)\n\nYour email client didn't thread correctly, so I'm not sure if you saw my responses to Adam's email, but note that there \nis no such thing as \"All that must be done\" here - supporting multiple, different, consensus rules for a given chain is \na nontrivial undertaking in Bitcoin Core from a software perspective. The only practical way is to, just treat it as a \ndifferent chain, which, in practice, it could be.\n\nOne group running LOT=true and one running LOT=false results in two Bitcoins, and the software would need to be able to \nhandle that (and, presumably, allow users to switch between chains).\n\nMatt\n\nOn 2/19/21 17:12, Matt Hill via bitcoin-dev wrote:\n> Good day all, this is my first post to this mailing list. Per Adam's comment below:\n> \n>  > given there are clearly people of both views, or for now don't care\n> but might later, it would minimally be friendly and useful if\n> bitcoin-core has a LOT=true option - and that IMO goes some way to\n> avoid the assumptive control via defaults.\n> \n> Both here and elsewhere, the debate taking place is around the manner of Taproot activation, not whether or not Taproot \n> should be activated. The latter seems to have widespread support. Given this favorable environment, it seems to me this \n> is an incredible opportunity for the developer contingency to \"take the high road\" while also minimizing time to Taproot \n> activation using political incentives. By offering power on the left hand to miners and and power on the right to users, \n> neither of whom is expressing disapproval of activation, but both of whom are able to activate without the consent of \n> the other, both are incentivized to signal activation as quickly as possible to emerge as the \"group that did it\". All \n> that must be done is to include a LOT=true option to Bitcoin Core that carries a default of LOT=false. Miners can \n> activate at any time, users can signal their intent to activate should miners renege, and developers emerge as \n> politically neutral in the eyes of both.\n> \n> Extrapolating a bit, I contend this expanded agency of full node operatorship may result in more users running a full \n> node, which is good and healthy. From a miner's point of view, more full nodes only increases the likelihood of future \n> UASFs, and so they are even further incentivized to expedite Taproot activation. Perhaps this is a stretch, perhaps not.\n> \n> To summarize: (1) this positions developers as neutral facilitators who deferred power to the other contingencies; (2) \n> we may see a rise in the popularity of running a full node and the number of full node operators; (3) miners are \n> incentivized to activate quickly to avoid being perceived as the \"bad guys\" and to avoid the spread of full nodes; and \n> (4) even if miners do not activate, users can organize a UASF in a grass-roots way.\n> \n> Matt Hill\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2021-02-19T23:42:48",
                "message_text_only": "On Fri, Feb 19, 2021 at 5:31 PM Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> (off-list)\n>\n> Your email client didn't thread correctly, so I'm not sure if you saw my\n> responses to Adam's email, but note that there\n\n\nThat was not off-list; by the way, as a reminder, some users are digest\nsubscribed (or not subscribed at all) and they can only reply by making a\nnew email thread unless they want to forge the email headers to match the\nthread (which is a lost art that not many people are familiar with anymore).\n\n- Bryan\nhttps://twitter.com/kanzure\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/2d01eb34/attachment.html>"
            },
            {
                "author": "Prayank",
                "date": "2021-02-21T10:10:08",
                "message_text_only": "Hello Everyone,\n\nThe below comment by Matt about different implementations and their opinion on `lockinontimeout` is from 18 Feb 2021 communication:\u00a0https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018433.html\n\n>\u00a0If the eventual outcome is that different implementations (that have material *transaction processing* userbases, and I\u2019m not sure to what extent that\u2019s true with Knots) ship different consensus rules, we should stop here and not activate Taproot. Seriously. Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.\n\nI don't agree to the part that 'we should stop and not activate taproot'. Instead it will be helpful if we can educate most of the people about trade-offs involved in both options with some tables, charts etc.\n\nI think its time to use Bitcoin Knots for more projects and also maintain multiple forks of Bitcoin Core. This is not just limited to `LOT=True or False` but few other things and in general its good for decentralization of Bitcoin. Bitcoin Core is used by most of the nodes according to this pie chart:\u00a0https://luke.dashjr.org/programs/bitcoin/files/charts/software.html\u00a0however having multiple forks of Bitcoin Core with real usage, more maintainers in different parts of the world (some even anon), few different features, more reviewers, better communication channels etc. will help everyone involved in Bitcoin.\n\nI am working on a project right now which involves multisig, discreet log contracts, liquid etc. Using bitcoin-s for it because I need DLC but still depending on Bitcoin Core in it. Would try Bitcoin Knots and other implementations soon and also have been looking for developers good with C++ and Python, living in India who are interested to maintain a fork of Bitcoin Core with few changes. I had shared about in replies to Amir Taaki's tweet few days back.\n\n--\nPrayank\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/0fac6a94/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-02-21T16:21:34",
                "message_text_only": "I think the most important thing is that the configuration setting is\nadvertised if somebody were to query the node for its capabilities.\n\nIs this the case?\n\nThat way the default value isn't really the important thing.\n\nThere are longstanding and well-known nodes, for example.  Community\nsupport and visibility for a UASF is the most important aspect.\n\nI looked over the threads and I don't think I saw the broadcast nature of\nthis setting clearly discussed.\n\n\n\n\n\nOn Wed, Feb 17, 2021, 10:10 AM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Yesterday (February 16th) we held a second meeting on Taproot\n> activation on IRC which again was open to all. Despite what appeared\n> to be majority support for LOT=false over LOT=true in the first\n> meeting I (and others) thought the arguments had not been explored in\n> depth and that we should have a follow up meeting almost entirely\n> focused on whether LOT (lockinontimeout) should be set to true or\n> false.\n>\n> The meeting was announced here:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html\n>\n> In that mailing list post I outlined the arguments for LOT=true (T1 to\n> T6) and arguments for LOT=false (F1 to F6) in their strongest form I\n> could. David Harding responded with an additional argument for\n> LOT=false (F7) here:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html\n>\n> These meetings are very challenging given they are open to all, you\n> don\u2019t know who will attend and you don\u2019t know most people\u2019s views in\n> advance. I tried to give time for both the LOT=true arguments and the\n> LOT=false arguments to be discussed as I knew there was support for\n> both. We only tried evaluating which had more support and which had\n> more strong opposition towards the end of the meeting.\n>\n> The conversation log is here:\n> http://gnusha.org/taproot-activation/2021-02-16.log\n>\n> (If you are so inclined you can watch a video of the meeting here.\n> Thanks to the YouTube account \u201cBitcoin\u201d for setting up the livestream:\n> https://www.youtube.com/watch?v=vpl5q1ovMLM)\n>\n> A summary of the meeting was provided by Luke Dashjr on Mastodon here:\n> https://bitcoinhackers.org/@lukedashjr/105742918779234566\n>\n> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we\n> did manage to come to consensus on everything but LockinOnTimeout.\n>\n> Activation height range: 693504-745920\n>\n> MASF threshold: 1815/2016 blocks (90%)\n>\n> Keep in mind only ~100 people showed for the meetings, hardly\n> representative of the entire community.\n>\n> So, these details remain JUST a proposal for now.\n>\n> It seems inevitable that there won't be consensus on LOT.\n>\n> Everyone will have to choose for himself. :/\n>\n> Personally I agree with most of this. I agree that there wasn\u2019t\n> overwhelming consensus for either LOT=true or LOT=false. However, from\n> my perspective there was clearly more strong opposition (what would\n> usually be deemed a NACK in Bitcoin Core review terminology) from\n> Bitcoin Core contributors, Lightning developers and other community\n> members against LOT=true than there was for LOT=false. Andrew Chow\n> tried to summarize views from the meeting in this analysis:\n> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c\n>\n> I am also aware of other current and previous Bitcoin Core\n> contributors and Lightning developers who didn\u2019t attend the meeting in\n> person who are opposed to LOT=true. I don\u2019t want to put them in the\n> spotlight for no reason but if you go through the conversation logs of\n> not only the meeting but the weeks of discussion prior to this meeting\n> you will see their views evaluated on the ##taproot-activation\n> channel. In addition, on taprootactivation.com some mining pools\n> expressed a preference for lot=false though I don\u2019t know how strong\n> that preference was.\n>\n> I am only one voice but it is my current assessment that if we are to\n> attempt to finalize Taproot activation parameters and propose them to\n> the community at this time our only option is to propose LOT=false.\n> Any further delay appears to me counterproductive in our collective\n> aim to get the Taproot soft fork activated as early as possible.\n>\n> Obviously others are free to disagree with that assessment and\n> continue discussions but personally I will be attempting to avoid\n> those discussions unless prominent new information comes to light or\n> various specific individuals change their minds.\n>\n> Next week we are planning a code review of the Bitcoin Core PR #19573\n> which was initially delayed because of this LOT discussion. As I\u2019ve\n> said previously that will be loosely following the format of the\n> Bitcoin Core PR review club and will be lower level and more\n> technical. That is planned for Tuesday February 23rd at 19:00 UTC on\n> the IRC channel ##taproot-activation.\n>\n> Thanks to the meeting participants (and those who joined the\n> discussion on the channel prior and post the meeting) for engaging\n> productively and in good faith.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/f8ea2175/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Yesterday's Taproot activation meeting on lockinontimeout (LOT)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Jeremy",
                "Prayank",
                "Michael Folkson",
                "Adam Back",
                "Ariel Lorenzo-Luaces",
                "Samson Mow",
                "Keagan McClelland",
                "Anthony Towns",
                "ZmnSCPxj",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Matt Corallo",
                "Ben Woosley",
                "Ariel Luaces",
                "Matt Hill"
            ],
            "messages_count": 40,
            "total_messages_chars_count": 459555
        }
    },
    {
        "title": "[bitcoin-dev] Teleport Transactions: A CoinSwap implementation for Bitcoin",
        "thread_messages": [
            {
                "author": "Chris Belcher",
                "date": "2021-02-17T22:27:28",
                "message_text_only": "Suppose Alice has bitcoins and wants to send them with maximal privacy,\nso she creates a special kind of transaction. For anyone looking at the\nblockchain her transaction appears completely normal with her coins\nseemingly going from bitcoin address A to address B. But in reality her\ncoins end up in address Z which is entirely unconnected to either A or B.\n\nNow imagine another user, Carol, who isn't too bothered by privacy and\nsends her bitcoin using a regular wallet. But because Carol's\ntransaction looks exactly the same as Alice's, anybody analyzing the\nblockchain must now deal with the possibility that Carol's transaction\nactually sent her coins to a totally unconnected address. So Carol's\nprivacy is improved even though she didn't change her behaviour, and\nperhaps had never even heard of this software.\n\nIn a world where advertisers, social media and other companies want to\ncollect all of Alice's and Carol's data, such privacy improvement would\nbe incredibly valuable. And also the doubt added to every transaction\nwould greatly boost the fungibility of bitcoin and so make it a better\nform of money.\n\nThis undetectable privacy can be developed today by implementing\nCoinSwap. The software could be standalone as a kind of bitcoin mixing\napp, but it could also be a library that existing wallets can implement\nallowing their users to send Bitcoin transactions with much greater privacy.\n\nFor the last few months I've been working on implementing this project.\nHere it is:\n\n\nhttps://github.com/bitcoin-teleport/teleport-transactions/\n\n\nThe project can create multi-transaction CoinSwaps (intended to avoid\namount correlation), and multi-hop CoinSwaps (intended to stop one\nsingle maker being able to unmix a taker's CoinSwap).\n\nJust for fun I created a 5-hop CoinSwap on testnet. Here are the\ntransaction IDs of each funding transaction. Each hop has 3 individual\ntransactions.\n\ntaker's outgoing txes:\nhttps://blockstream.info/testnet/tx/f45349bd279bea20b8b218300f8e2416abf28f3858470ad8c5eb2f6cd5ec10a9\nhttps://blockstream.info/testnet/tx/40ea5c9e478b66fa3f615c2b8d3accfd69308443d90a5353de669767cb02c51f\nhttps://blockstream.info/testnet/tx/8fe245e9c433127af4df8ff8853650808e3281fed7de6bfda62066a3fd3ad36e\n\nmaker[0] funding txes:\nhttps://blockstream.info/testnet/tx/3d9b879866ad136f9fe6e80599e1b97d610b6330be3ab4aa7df4161fce1e41d4,\nhttps://blockstream.info/testnet/tx/fa11e778d135be28b4e35498fc668c5aba7c70dcc43334b39e7488bd1259e8be,\nhttps://blockstream.info/testnet/tx/a7713452bab711c09be83a8c630fb91127771ed99cf15b528eacd28b00ba6b20,\n\nmaker[1] funding txes:\nhttps://blockstream.info/testnet/tx/245e1e87d83a4bef06ceb8933c758137ee2f7ba7aa66800ebb7103707d5de5f7,\nhttps://blockstream.info/testnet/tx/15727b91e09a80634587f6210bdcba8808b93e4a780c55dd113ee85314db45c4,\nhttps://blockstream.info/testnet/tx/94e4e4e9e8fc2012158ed068145c8b883c295b37f5b3b6cba7a21c229d4da103,\n\nmaker[2] funding txes:\nhttps://blockstream.info/testnet/tx/1384d58e534543e22e4f23a367728bff12177ee9af01b036c397cfca9bbe2eb8,\nhttps://blockstream.info/testnet/tx/eff3b1367f403c13927ddcb01c6d3c5c0d46076f7cb4419f8a18d6b62d884540,\nhttps://blockstream.info/testnet/tx/617c52caec2f7f17f3ebd1cab80233cdc1b414591f1cc49affbd828ffec10278,\n\nmaker[3] funding txes (also taker's incoming txes):\nhttps://blockstream.info/testnet/tx/8fde61974a4e0801ae5b76b620e2effd6c837310c1bd76d738216451ae1226e3,\nhttps://blockstream.info/testnet/tx/6491b85ef73a8f88e276a9b0f951c09e0367851a83aa49ffee8f8ad095f50de2,\nhttps://blockstream.info/testnet/tx/363b6803b7e3ed45472277448ce9938e3e73167a67762d6a9ac621243b8db019,\n\n\nThe so-called taker organized the whole thing. They decided what the\nCoinSwap amount should be (0.05 tBTC in this case), decided which makers\nto route over depending on their fees, how many transactions and makers\nthere would be. The only thing the makers do is follow the protocol and\ncollect their CoinSwap fees, they are not meant to even know their\nposition in the route. Because the taker chose how much bitcoin to\ncoinswap and when, they paid a fee to each maker to provide an incentive\nfor the makers to keep the software running.\n\nTo a passive observer of the blockchain a single-hop CoinSwap is as\nprivate as a multi-hop, so I suspect in practice most users will just\ncreate 2-hop CoinSwaps.\n\nThe project is still a work in progress. All kinds of attacks are\npossible right now, so the it shouldn't be used on mainnet with real\nmoney yet. Also right now the CoinSwap addresses created by the project\nappear as 2-of-2 multisignature addresses, but the plan is to use\nECDSA-2P which will make them look the same as regular single-signature\naddresses which is needed before the thing massively improves privacy\nand fungibility.\n\nCoinSwap is the next generation of bitcoin on-chain privacy tech. It\nimproves on CoinJoin because it breaks the transaction graph, and even\nimproves the privacy of people who don't use it. CoinSwap also uses less\nblock space for the same privacy and therefore is cheaper in miner fees.\n\nLinks:\n* Design document:\nhttps://gist.github.com/chris-belcher/9144bd57a91c194e332fb5ca371d0964\n* Discussion: `##coinswap` IRC channel on the freenode network"
            },
            {
                "author": "Herman Puller",
                "date": "2021-02-21T23:28:44",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/8d7777c7/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Teleport Transactions: A CoinSwap implementation for Bitcoin",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Herman Puller"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5299
        }
    },
    {
        "title": "[bitcoin-dev] BIP70 is dead. What now?",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2021-02-19T09:14:39",
                "message_text_only": "I never liked BIP70. It was too complex, had too many features, and when\npeople discuss it, they do not even agree on what the main feature was.\n\nNevertheless, there is ONE feature of BIP70 that I find useful: the fact\nthat payment requests were signed. I am making this post to discuss this.\n\nWhen I send bitcoins to an exchange, I would like to receive a signed\nrequest. I want to have a proof that the exchange asked me to send coins\nto that address, in case it has been hijacked by some intern working\nthere. If that feature was implemented by an exchange, it would guide my\ndecision to use that exchange over its competitors.\n\nI do not think that a single exchange ever implemented that, but I guess\nthis is because BIP70 is a terrible standard. LN payment requests are\nsigned, do not require SSL, do not require interactivity, and therefore\nexchanges use them. Can't we achieve the same for on-chain payments? Is\nanyone working on that?\n\nI would be more than happy to remove BIP70 support from Electrum, if\nthere was another standard for signed requests.\n\nThomas\n\n-- \nElectrum Technologies GmbH / Paul-Lincke-Ufer 8d / 10999 Berlin / Germany\nSitz, Registergericht: Berlin, Amtsgericht Charlottenburg, HRB 164636\nGesch\u00e4ftsf\u00fchrer: Thomas Voegtlin"
            },
            {
                "author": "Charles Hill",
                "date": "2021-02-19T10:33:45",
                "message_text_only": "Hi, Thomas,\n\nI developed a URL signing scheme for use with LNURL as a method for \nauthorizing payments on behalf of offline devices /applications. It's \nnot specifically off-chain or on-chain related, but could be repurposed. \nThe gist of the scheme is as follows:\n\nBefore any signing is done:\n\n0) Generate an API key (ID/reference, secret, encoding) to be shared \nbetween a server and an offline device or application.\n\nTo generate a signature:\n\n1) Generate a random nonce (unique per API key)\n\n2) Build a query string with the `id`, `nonce`, `tag`, \"Server \nparameters\" (see [Subprotocols](#subprotocols) above), and any custom \nparameters. The `id` parameter should be equal to the API key's ID. \nExample: \n`id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`. \nNote that both the keys and values for query parameters should be URL \nencoded. The following characters should be __unescaped__: `A-Z a-z 0-9 \n- _ . ! ~ * ' ( )`. See \n[encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description) \nfor more details.\n\n3) Sort the query parameters by key (alphabetically). This is referred \nto as the \"payload\". Example: \n`custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`\n\n4) Sign the payload (the sorted query string) using the API key secret. \nSignatures are generated using HMAC-SHA256, where the API key secret is \nthe key.\n\n5) Append the signature to the payload as follows: \n`custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.\n\nYou can find more details here:\n\nhttps://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme\n\n\nI would change a few things with this scheme to fit better with the \nuse-case you describe. For example:\n\n* Remove the \"tag\" and LNURL-specific parameters\n\n* Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key \nsigning instead. The lnurl-auth subprotocol has an interesting approach \nto protecting user privacy while allowing verification of signatures. \nSee for more details on that:\n\nhttps://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md\n\n\n- chill\n\n\nOn 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:\n> I never liked BIP70. It was too complex, had too many features, and when\n> people discuss it, they do not even agree on what the main feature was.\n>\n> Nevertheless, there is ONE feature of BIP70 that I find useful: the fact\n> that payment requests were signed. I am making this post to discuss this.\n>\n> When I send bitcoins to an exchange, I would like to receive a signed\n> request. I want to have a proof that the exchange asked me to send coins\n> to that address, in case it has been hijacked by some intern working\n> there. If that feature was implemented by an exchange, it would guide my\n> decision to use that exchange over its competitors.\n>\n> I do not think that a single exchange ever implemented that, but I guess\n> this is because BIP70 is a terrible standard. LN payment requests are\n> signed, do not require SSL, do not require interactivity, and therefore\n> exchanges use them. Can't we achieve the same for on-chain payments? Is\n> anyone working on that?\n>\n> I would be more than happy to remove BIP70 support from Electrum, if\n> there was another standard for signed requests.\n>\n> Thomas\n>"
            },
            {
                "author": "Andrew Kozlik",
                "date": "2021-02-19T13:34:16",
                "message_text_only": "Hi Thomas,\n\nI am working on an experimental implementation [1] of a new payment request\nformat in Trezor T. In some respects it's similar to BIP-70. The main\ndifferences are:\n\n1. There is no reliance on X.509, since that seems to have been the main\nreason for BIP-70's downfall. The signature is mandatory, since for us the\nmain feature is protection against a man-in-the-middle attack. So in this\nsense it's more similar to BOLT11.\n\n2. It can be used to solve a similar problem with coin exchange. When you\nare sending BTC to a trusted exchange service and expecting another\ncryptocurrency in return, say LTC, you want to be sure that you not only\nhave the correct BTC address, but also that the exchange service has your\ncorrect LTC address.\n\n3. It uses an optional nonce for replay protection.\n\nThe two interesting parts in [1] are probably the `TxAckPaymentRequest`\nprotobuf message [2] and the signature verification [3]. The protobuf\nmessage is only for communication between Trezor and the host software\nrunning on the user's computer. It's not intended for interchange between\nwallets. We haven't defined the interchange format yet. I intend to create\na SLIP documenting all this.\n\nAndrew\n\n[1] https://github.com/trezor/trezor-firmware/compare/andrewkozlik/payreq2\n[2]\nhttps://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/common/protob/messages-bitcoin.proto#L403-L427\n[3]\nhttps://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/core/src/apps/bitcoin/sign_tx/payment_request.py\n\nOn Fri, Feb 19, 2021 at 1:43 PM Charles Hill via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi, Thomas,\n>\n> I developed a URL signing scheme for use with LNURL as a method for\n> authorizing payments on behalf of offline devices /applications. It's\n> not specifically off-chain or on-chain related, but could be repurposed.\n> The gist of the scheme is as follows:\n>\n> Before any signing is done:\n>\n> 0) Generate an API key (ID/reference, secret, encoding) to be shared\n> between a server and an offline device or application.\n>\n> To generate a signature:\n>\n> 1) Generate a random nonce (unique per API key)\n>\n> 2) Build a query string with the `id`, `nonce`, `tag`, \"Server\n> parameters\" (see [Subprotocols](#subprotocols) above), and any custom\n> parameters. The `id` parameter should be equal to the API key's ID.\n> Example:\n> `id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`.\n>\n> Note that both the keys and values for query parameters should be URL\n> encoded. The following characters should be __unescaped__: `A-Z a-z 0-9\n> - _ . ! ~ * ' ( )`. See\n> [encodeURIComponent](\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description)\n>\n> for more details.\n>\n> 3) Sort the query parameters by key (alphabetically). This is referred\n> to as the \"payload\". Example:\n>\n> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`\n>\n> 4) Sign the payload (the sorted query string) using the API key secret.\n> Signatures are generated using HMAC-SHA256, where the API key secret is\n> the key.\n>\n> 5) Append the signature to the payload as follows:\n>\n> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.\n>\n> You can find more details here:\n>\n> https://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme\n>\n>\n> I would change a few things with this scheme to fit better with the\n> use-case you describe. For example:\n>\n> * Remove the \"tag\" and LNURL-specific parameters\n>\n> * Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key\n> signing instead. The lnurl-auth subprotocol has an interesting approach\n> to protecting user privacy while allowing verification of signatures.\n> See for more details on that:\n>\n> https://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md\n>\n>\n> - chill\n>\n>\n> On 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:\n> > I never liked BIP70. It was too complex, had too many features, and when\n> > people discuss it, they do not even agree on what the main feature was.\n> >\n> > Nevertheless, there is ONE feature of BIP70 that I find useful: the fact\n> > that payment requests were signed. I am making this post to discuss this.\n> >\n> > When I send bitcoins to an exchange, I would like to receive a signed\n> > request. I want to have a proof that the exchange asked me to send coins\n> > to that address, in case it has been hijacked by some intern working\n> > there. If that feature was implemented by an exchange, it would guide my\n> > decision to use that exchange over its competitors.\n> >\n> > I do not think that a single exchange ever implemented that, but I guess\n> > this is because BIP70 is a terrible standard. LN payment requests are\n> > signed, do not require SSL, do not require interactivity, and therefore\n> > exchanges use them. Can't we achieve the same for on-chain payments? Is\n> > anyone working on that?\n> >\n> > I would be more than happy to remove BIP70 support from Electrum, if\n> > there was another standard for signed requests.\n> >\n> > Thomas\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/859aa75d/attachment.html>"
            },
            {
                "author": "Eoin McQuinn",
                "date": "2021-02-20T15:53:57",
                "message_text_only": "What is a 'pull request'?\n\nOn Fri, Feb 19, 2021 at 1:49 PM Andrew Kozlik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Thomas,\n>\n> I am working on an experimental implementation [1] of a new payment\n> request format in Trezor T. In some respects it's similar to BIP-70. The\n> main differences are:\n>\n> 1. There is no reliance on X.509, since that seems to have been the main\n> reason for BIP-70's downfall. The signature is mandatory, since for us the\n> main feature is protection against a man-in-the-middle attack. So in this\n> sense it's more similar to BOLT11.\n>\n> 2. It can be used to solve a similar problem with coin exchange. When you\n> are sending BTC to a trusted exchange service and expecting another\n> cryptocurrency in return, say LTC, you want to be sure that you not only\n> have the correct BTC address, but also that the exchange service has your\n> correct LTC address.\n>\n> 3. It uses an optional nonce for replay protection.\n>\n> The two interesting parts in [1] are probably the `TxAckPaymentRequest`\n> protobuf message [2] and the signature verification [3]. The protobuf\n> message is only for communication between Trezor and the host software\n> running on the user's computer. It's not intended for interchange between\n> wallets. We haven't defined the interchange format yet. I intend to create\n> a SLIP documenting all this.\n>\n> Andrew\n>\n> [1] https://github.com/trezor/trezor-firmware/compare/andrewkozlik/payreq2\n> [2]\n> https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/common/protob/messages-bitcoin.proto#L403-L427\n> [3]\n> https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/core/src/apps/bitcoin/sign_tx/payment_request.py\n>\n> On Fri, Feb 19, 2021 at 1:43 PM Charles Hill via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi, Thomas,\n>>\n>> I developed a URL signing scheme for use with LNURL as a method for\n>> authorizing payments on behalf of offline devices /applications. It's\n>> not specifically off-chain or on-chain related, but could be repurposed.\n>> The gist of the scheme is as follows:\n>>\n>> Before any signing is done:\n>>\n>> 0) Generate an API key (ID/reference, secret, encoding) to be shared\n>> between a server and an offline device or application.\n>>\n>> To generate a signature:\n>>\n>> 1) Generate a random nonce (unique per API key)\n>>\n>> 2) Build a query string with the `id`, `nonce`, `tag`, \"Server\n>> parameters\" (see [Subprotocols](#subprotocols) above), and any custom\n>> parameters. The `id` parameter should be equal to the API key's ID.\n>> Example:\n>> `id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`.\n>>\n>> Note that both the keys and values for query parameters should be URL\n>> encoded. The following characters should be __unescaped__: `A-Z a-z 0-9\n>> - _ . ! ~ * ' ( )`. See\n>> [encodeURIComponent](\n>> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description)\n>>\n>> for more details.\n>>\n>> 3) Sort the query parameters by key (alphabetically). This is referred\n>> to as the \"payload\". Example:\n>>\n>> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`\n>>\n>> 4) Sign the payload (the sorted query string) using the API key secret.\n>> Signatures are generated using HMAC-SHA256, where the API key secret is\n>> the key.\n>>\n>> 5) Append the signature to the payload as follows:\n>>\n>> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.\n>>\n>> You can find more details here:\n>>\n>> https://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme\n>>\n>>\n>> I would change a few things with this scheme to fit better with the\n>> use-case you describe. For example:\n>>\n>> * Remove the \"tag\" and LNURL-specific parameters\n>>\n>> * Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key\n>> signing instead. The lnurl-auth subprotocol has an interesting approach\n>> to protecting user privacy while allowing verification of signatures.\n>> See for more details on that:\n>>\n>> https://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md\n>>\n>>\n>> - chill\n>>\n>>\n>> On 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:\n>> > I never liked BIP70. It was too complex, had too many features, and when\n>> > people discuss it, they do not even agree on what the main feature was.\n>> >\n>> > Nevertheless, there is ONE feature of BIP70 that I find useful: the fact\n>> > that payment requests were signed. I am making this post to discuss\n>> this.\n>> >\n>> > When I send bitcoins to an exchange, I would like to receive a signed\n>> > request. I want to have a proof that the exchange asked me to send coins\n>> > to that address, in case it has been hijacked by some intern working\n>> > there. If that feature was implemented by an exchange, it would guide my\n>> > decision to use that exchange over its competitors.\n>> >\n>> > I do not think that a single exchange ever implemented that, but I guess\n>> > this is because BIP70 is a terrible standard. LN payment requests are\n>> > signed, do not require SSL, do not require interactivity, and therefore\n>> > exchanges use them. Can't we achieve the same for on-chain payments? Is\n>> > anyone working on that?\n>> >\n>> > I would be more than happy to remove BIP70 support from Electrum, if\n>> > there was another standard for signed requests.\n>> >\n>> > Thomas\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \neoin.substack.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210220/b59a9c3b/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70 is dead. What now?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eoin McQuinn",
                "Andrew Kozlik",
                "Thomas Voegtlin",
                "Charles Hill"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 17144
        }
    },
    {
        "title": "[bitcoin-dev]  Taproot NACK",
        "thread_messages": [
            {
                "author": "LORD HIS EXCELLENCY JAMES HRMH",
                "date": "2021-02-24T03:23:35",
                "message_text_only": "Good Afternoon,\n\nIt has been reported that Taproot will enable some Monero like features including the ability to hide transactions.\n\nIf that is the case I offer a full NACK and let me explain.\n\nA part of the benefit of using Bitcoin is its honesty. The full transaction is published on the blockchain. If that were to change so that transactions may be obfuscated from scrutiny then any government would have unlimited impetus to ban Bitcoin, and speculation has that is the reason India has been reported to have banned cryptocurrencies already.\n\nI am in support of the expanded use case of Bitcoin without harming the established robust fairness and equal equity offered. The core functionality of Bitcoin, its values, must remain unaltered.\n\nKING JAMES HRMH\nGreat British Empire\n\nRegards,\nThe Australian\nLORD HIS EXCELLENCY JAMES HRMH (& HMRH)\nof Hougun Manor & Glencoe & British Empire\nMR. Damian A. James Williamson\nWills\n\net al.\n\n\nWilltech\nwww.willtech.com.au\nwww.go-overt.com\nand other projects\n\nearn.com/willtech\nlinkedin.com/in/damianwilliamson\n\n\nm. 0487135719\nf. +61261470192\n\n\nThis email does not constitute a general advice. Please disregard this email if misdelivered.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210224/9bf0dd19/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot NACK",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "LORD HIS EXCELLENCY JAMES HRMH"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1365
        }
    },
    {
        "title": "[bitcoin-dev] Taproot NACK",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-02-27T16:14:27",
                "message_text_only": "I have good news for you: Taproot does not enable monero-like privacy\nfeatures any moreso than already exist in Bitcoin today. At its core,\ntaproot is a way to make transactions with embedded smart contracts less\nexpensive, done so in a manner that may marginally improve privacy\ndependent on user behavior (but not in the monero-like way you mention).\nFor example, it makes it possible for lightning channels to look\nstructurally similar to single key wallets, but it does nothing inherently\nto obfuscate the transaction graph as in monero.\n\nSuch \"monero-like\" transaction graph obfuscation may already exist in\nBitcoin via other techniques (coinjoin, payjoin, coinswap, lightning, etc)\nwith or without Taproot, so the point is further moot.\n\nDo you have a source on your reporting?\n\nYou may wish to rescind your nack.\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Good Afternoon,\n>\n> It has been reported that Taproot will enable some Monero like features\n> including the ability to hide transactions.\n>\n> If that is the case I offer a full NACK and let me explain.\n>\n> A part of the benefit of using Bitcoin is its honesty. The full\n> transaction is published on the blockchain. If that were to change so that\n> transactions may be obfuscated from scrutiny then any government would have\n> unlimited impetus to ban Bitcoin, and speculation has that is the reason\n> India has been reported to have banned cryptocurrencies already.\n>\n> I am in support of the expanded use case of Bitcoin without harming the\n> established robust fairness and equal equity offered. The core\n> functionality of Bitcoin, its values, must remain unaltered.\n>\n> KING JAMES HRMH\n> Great British Empire\n>\n> Regards,\n> The Australian\n> LORD HIS EXCELLENCY JAMES HRMH (& HMRH)\n> of Hougun Manor & Glencoe & British Empire\n> MR. Damian A. James Williamson\n> Wills\n>\n> et al.\n>\n>\n> Willtech\n> www.willtech.com.au\n> www.go-overt.com\n> and other projects\n>\n> earn.com/willtech\n> linkedin.com/in/damianwilliamson\n>\n>\n> m. 0487135719\n> f. +61261470192\n>\n>\n> This email does not constitute a general advice. Please disregard this\n> email if misdelivered.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/f29d0372/attachment-0001.html>"
            },
            {
                "author": "LORD HIS EXCELLENCY JAMES HRMH",
                "date": "2021-02-28T11:36:37",
                "message_text_only": "Good Evening,\n\nThank-you for your advice @JeremyRubin<https://twitter.com/JeremyRubin> on the basis you advise, \"Taproot does not enable monero-like privacy features\", I am prepred to withdraw my NACK notably that the existing feeatures of Bitcoin MUST be maintained, and whereby the UTXO of a transaction is identifiable, the PayTo Address, and the amount all without any obfuscation.\n\nLightning does not really provide obfuscation, it provides a result of a subset of transactions although the operation of the channel is observable to the parties.\n\nThe reports I were reading concerning the supposed operation of Taproot published in a public media channel may have been speculation or misinformation nonetheless it is prudent to conditionally reply as you see that I have. It is important not to allow things to slip through the cracks. As you may believe may astute reviewers could make a full disclosure to this list it is not to be expected.\n\nKING JAMES HRMH\nGreat British Empire\n\nRegards,\nThe Australian\nLORD HIS EXCELLENCY JAMES HRMH (& HMRH)\nof Hougun Manor & Glencoe & British Empire\nMR. Damian A. James Williamson\nWills\n\net al.\n\n\nWilltech\nwww.willtech.com.au<mail://local/Sent/www.willtech.com.au>\nwww.go-overt.com<mail://local/Sent/www.go-overt.com>\nand other projects\n\nearn.com/willtech\nlinkedin.com/in/damianwilliamson\n\n\nm. 0487135719\nf. +61261470192\n\n\nThis email does not constitute a general advice. Please disregard this email if misdelivered.\n________________________________\nFrom: Jeremy <jlrubin at mit.edu>\nSent: Sunday, 28 February 2021 3:14 AM\nTo: LORD HIS EXCELLENCY JAMES HRMH <willtech at live.com.au>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Taproot NACK\n\nI have good news for you: Taproot does not enable monero-like privacy features any moreso than already exist in Bitcoin today. At its core, taproot is a way to make transactions with embedded smart contracts less expensive, done so in a manner that may marginally improve privacy dependent on user behavior (but not in the monero-like way you mention). For example, it makes it possible for lightning channels to look structurally similar to single key wallets, but it does nothing inherently to obfuscate the transaction graph as in monero.\n\nSuch \"monero-like\" transaction graph obfuscation may already exist in Bitcoin via other techniques (coinjoin, payjoin, coinswap, lightning, etc) with or without Taproot, so the point is further moot.\n\nDo you have a source on your reporting?\n\nYou may wish to rescind your nack.\n\n\n--\n@JeremyRubin<https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>\n\n\nOn Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nGood Afternoon,\n\nIt has been reported that Taproot will enable some Monero like features including the ability to hide transactions.\n\nIf that is the case I offer a full NACK and let me explain.\n\nA part of the benefit of using Bitcoin is its honesty. The full transaction is published on the blockchain. If that were to change so that transactions may be obfuscated from scrutiny then any government would have unlimited impetus to ban Bitcoin, and speculation has that is the reason India has been reported to have banned cryptocurrencies already.\n\nI am in support of the expanded use case of Bitcoin without harming the established robust fairness and equal equity offered. The core functionality of Bitcoin, its values, must remain unaltered.\n\nKING JAMES HRMH\nGreat British Empire\n\nRegards,\nThe Australian\nLORD HIS EXCELLENCY JAMES HRMH (& HMRH)\nof Hougun Manor & Glencoe & British Empire\nMR. Damian A. James Williamson\nWills\n\net al.\n\n\nWilltech\nwww.willtech.com.au<http://www.willtech.com.au>\nwww.go-overt.com<http://www.go-overt.com>\nand other projects\n\nearn.com/willtech<http://earn.com/willtech>\nlinkedin.com/in/damianwilliamson<http://linkedin.com/in/damianwilliamson>\n\n\nm. 0487135719\nf. +61261470192\n\n\nThis email does not constitute a general advice. Please disregard this email if misdelivered.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/cc4672e3/attachment.html>"
            },
            {
                "author": "Ariel Lorenzo-Luaces",
                "date": "2021-02-28T13:07:21",
                "message_text_only": "Hello LORD HIS EXCELLENCY JAMES HRMH\n\nI find a striking dichotomy between your concern of increased privacy in bitcoin and your link to a bitcoin mixer in your signature www.go-overt.com\n\nAt first your concerns seemed genuine but after seeing your promotion of a bitcoin mixer I'm thinking your concerns may be more profit motivated? I can't tell since you failed to disclose your relationship with the mixer.\n\nCould you please clarify your association with the bitcoin mixer and moving forward could you please always do proper disclosure any time you're publically talking about bitcoin transaction privacy. It's only fair to do so as to not mislead people in an attempt to manipulate at worst and just a courteous practice at best.\n\nCheers\nAriel Lorenzo-Luaces\n\n\nOn Feb 28, 2021, 4:36 AM, at 4:36 AM, LORD HIS EXCELLENCY JAMES HRMH via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Good Evening,\n>\n>Thank-you for your advice @JeremyRubin<https://twitter.com/JeremyRubin>\n>on the basis you advise, \"Taproot does not enable monero-like privacy\n>features\", I am prepred to withdraw my NACK notably that the existing\n>feeatures of Bitcoin MUST be maintained, and whereby the UTXO of a\n>transaction is identifiable, the PayTo Address, and the amount all\n>without any obfuscation.\n>\n>Lightning does not really provide obfuscation, it provides a result of\n>a subset of transactions although the operation of the channel is\n>observable to the parties.\n>\n>The reports I were reading concerning the supposed operation of Taproot\n>published in a public media channel may have been speculation or\n>misinformation nonetheless it is prudent to conditionally reply as you\n>see that I have. It is important not to allow things to slip through\n>the cracks. As you may believe may astute reviewers could make a full\n>disclosure to this list it is not to be expected.\n>\n>KING JAMES HRMH\n>Great British Empire\n>\n>Regards,\n>The Australian\n>LORD HIS EXCELLENCY JAMES HRMH (& HMRH)\n>of Hougun Manor & Glencoe & British Empire\n>MR. Damian A. James Williamson\n>Wills\n>\n>et al.\n>\n>\n>Willtech\n>www.willtech.com.au<mail://local/Sent/www.willtech.com.au>\n>www.go-overt.com<mail://local/Sent/www.go-overt.com>\n>and other projects\n>\n>earn.com/willtech\n>linkedin.com/in/damianwilliamson\n>\n>\n>m. 0487135719\n>f. +61261470192\n>\n>\n>This email does not constitute a general advice. Please disregard this\n>email if misdelivered.\n>________________________________\n>From: Jeremy <jlrubin at mit.edu>\n>Sent: Sunday, 28 February 2021 3:14 AM\n>To: LORD HIS EXCELLENCY JAMES HRMH <willtech at live.com.au>; Bitcoin\n>Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n>Subject: Re: [bitcoin-dev] Taproot NACK\n>\n>I have good news for you: Taproot does not enable monero-like privacy\n>features any moreso than already exist in Bitcoin today. At its core,\n>taproot is a way to make transactions with embedded smart contracts\n>less expensive, done so in a manner that may marginally improve privacy\n>dependent on user behavior (but not in the monero-like way you\n>mention). For example, it makes it possible for lightning channels to\n>look structurally similar to single key wallets, but it does nothing\n>inherently to obfuscate the transaction graph as in monero.\n>\n>Such \"monero-like\" transaction graph obfuscation may already exist in\n>Bitcoin via other techniques (coinjoin, payjoin, coinswap, lightning,\n>etc) with or without Taproot, so the point is further moot.\n>\n>Do you have a source on your reporting?\n>\n>You may wish to rescind your nack.\n>\n>\n>--\n>@JeremyRubin<https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>\n>\n>\n>On Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via\n>bitcoin-dev\n><bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>wrote:\n>Good Afternoon,\n>\n>It has been reported that Taproot will enable some Monero like features\n>including the ability to hide transactions.\n>\n>If that is the case I offer a full NACK and let me explain.\n>\n>A part of the benefit of using Bitcoin is its honesty. The full\n>transaction is published on the blockchain. If that were to change so\n>that transactions may be obfuscated from scrutiny then any government\n>would have unlimited impetus to ban Bitcoin, and speculation has that\n>is the reason India has been reported to have banned cryptocurrencies\n>already.\n>\n>I am in support of the expanded use case of Bitcoin without harming the\n>established robust fairness and equal equity offered. The core\n>functionality of Bitcoin, its values, must remain unaltered.\n>\n>KING JAMES HRMH\n>Great British Empire\n>\n>Regards,\n>The Australian\n>LORD HIS EXCELLENCY JAMES HRMH (& HMRH)\n>of Hougun Manor & Glencoe & British Empire\n>MR. Damian A. James Williamson\n>Wills\n>\n>et al.\n>\n>\n>Willtech\n>www.willtech.com.au<http://www.willtech.com.au>\n>www.go-overt.com<http://www.go-overt.com>\n>and other projects\n>\n>earn.com/willtech<http://earn.com/willtech>\n>linkedin.com/in/damianwilliamson<http://linkedin.com/in/damianwilliamson>\n>\n>\n>m. 0487135719\n>f. +61261470192\n>\n>\n>This email does not constitute a general advice. Please disregard this\n>email if misdelivered.\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/49cd6deb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot NACK",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ariel Lorenzo-Luaces",
                "Jeremy",
                "LORD HIS EXCELLENCY JAMES HRMH"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 13038
        }
    },
    {
        "title": "[bitcoin-dev]  Consensus Items",
        "thread_messages": [
            {
                "author": "LORD HIS EXCELLENCY JAMES HRMH",
                "date": "2021-02-24T03:54:45",
                "message_text_only": "Good Afternoon,\n\nDoes anybody have a consensus list of the existing consensus items? i.e. to itemise the operation of consensus into a list.\n\nKING JAMES HRMH\nGreat British Empire\n\nRegards,\nThe Australian\nLORD HIS EXCELLENCY JAMES HRMH (& HMRH)\nof Hougun Manor & Glencoe & British Empire\nMR. Damian A. James Williamson\nWills\n\net al.\n\n\nWilltech\nwww.willtech.com.au\nwww.go-overt.com\nand other projects\n\nearn.com/willtech\nlinkedin.com/in/damianwilliamson\n\n\nm. 0487135719\nf. +61261470192\n\n\nThis email does not constitute a general advice. Please disregard this email if misdelivered.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210224/af12a470/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Consensus Items",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "LORD HIS EXCELLENCY JAMES HRMH"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 762
        }
    },
    {
        "title": "[bitcoin-dev] bip48 proposal",
        "thread_messages": [
            {
                "author": "dentondevelopment",
                "date": "2021-02-24T14:02:00",
                "message_text_only": "Hello all,\n\nJust wanted to give an update on progress for the \"bip48\" proposal.\n\nThere was some discussion on Twitter between a few multi-sig wallet devs: https://twitter.com/fullynoded/status/1339374947228008448?s=21\n\nA few key points were brought up:\n\n1. We should not define a `script_type` as a path level\n\nThe explicit purpose of this BIP is to define an already existing standard that is used in practice across multi-sig wallets. In order to do that we must define a script_type in the path otherwise \"loss of funds\" could occur and backwards compatibility broken.\n\n2. Another point brought up was that no-one uses the legacy derivation path m/48'/0'/0'/1', in practice all \"legacy\" p2sh multi-sig wallets use bip45.\n\nI agree and have removed all references to legacy p2sh derivations in the proposed bip.\n\n3. We could possibly include a defined \"wild card\" in the script_type level to define any future address types (e.g. taproot)\n\nI agree this could be useful and think Ben Kaufman's suggestion of using m/48'/0'/0'/1' for this purpose makes sense, however I also think a future multi-sig standard for new address types may well be suited for a different BIP which could also address concern #1 around including `script_type` at all.\n\nTherefore I have not yet added any mention of \"wild card\" in the proposed bip but kept strictly to p2sh-p2wsh and p2wsh derivations as used in modern day wallets.\n\nI have create a PR https://github.com/bitcoin/bips/pull/1072 so that anyone may easily comment on it and any concerns can be raised.\n\nI think the community needs this and it is well over due.  I have gotten positive feedback and support from other devs.\n\nFeedback welcome.\n\nCheers,\nFontaine\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Friday, December 18, 2020 12:08 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> Thanks for explaining where instructions are lacking.\n>\n> How does this look?\n> https://github.com/bitcoin/bips/pull/1046/files\n>\n> On Friday 18 December 2020 01:44:27 dentondevelopment wrote:\n>\n> > Hi Luke,\n> > It looks to have the same motivations and be compatible with\n> > https://github.com/bitcoin/bips/pull/253 (if I am reading it correctly).\n> > The only guidance I have on proposing a bip is what is on the readme\n> > https://github.com/bitcoin/bips/blob/master/README.mediawiki\n> > 48 would be fitting if it is unused.\n> > This is still very much a work in progress and there does seem to be\n> > community support.\n> > Pavol and others have shared relevant info/suggestions which I will be\n> > using to update the proposal.\n> > Will share again here when the next draft is ready.\n> > Many thanks,\n> > Fontaine\n> > Sent with ProtonMail Secure Email.\n> > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > On Thursday, December 17, 2020 1:16 AM, Luke Dashjr luke at dashjr.org wrote:\n> >\n> > > BIP number 48 has not been assigned. Do not self-assign BIP numbers.\n> > > Is this intended to be compatible with\n> > > https://github.com/bitcoin/bips/pull/253 ?\n> > > Luke\n> > > On Wednesday 16 December 2020 14:10:28 dentondevelopment via bitcoin-dev\n> > > wrote:\n> > >\n> > > > Here is the repo instead of a static link:\n> > > > https://github.com/Fonta1n3/bips/blob/master/bip-0048.mediawiki\n> > > > Fontaine\n> > > > Sent with ProtonMail Secure Email.\n> > > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > > On Wednesday, December 16, 2020 8:43 PM, dentondevelopment via\n> > > > bitcoin-dev\n> > >\n> > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > >\n> > > > > Hello,\n> > > > > I would like to propose bip48 (taking bip44 as inspiration), with the\n> > > > > purpose of documenting modern multi-sig derivations.\n> > > > > Please see a rough draft of the proposed bip attached, comments/input\n> > > > > welcome.\n> > > > > Regards,\n> > > > > Fontaine"
            },
            {
                "author": "Craig Raw",
                "date": "2021-02-25T10:23:59",
                "message_text_only": "+1\n\nIt would be greatly beneficial to have a referenceable standard for the\nconvention that everyone (afaik) is following anyway. I think the current\nscope is now correct and agree with Fontaine's comments on the feedback.\n\nCraig\n\nOn Wed, Feb 24, 2021 at 10:17 PM dentondevelopment via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello all,\n>\n> Just wanted to give an update on progress for the \"bip48\" proposal.\n>\n> There was some discussion on Twitter between a few multi-sig wallet devs:\n> https://twitter.com/fullynoded/status/1339374947228008448?s=21\n>\n> A few key points were brought up:\n>\n> 1. We should not define a `script_type` as a path level\n>\n> The explicit purpose of this BIP is to define an already existing standard\n> that is used in practice across multi-sig wallets. In order to do that we\n> must define a script_type in the path otherwise \"loss of funds\" could occur\n> and backwards compatibility broken.\n>\n> 2. Another point brought up was that no-one uses the legacy derivation\n> path m/48'/0'/0'/1', in practice all \"legacy\" p2sh multi-sig wallets use\n> bip45.\n>\n> I agree and have removed all references to legacy p2sh derivations in the\n> proposed bip.\n>\n> 3. We could possibly include a defined \"wild card\" in the script_type\n> level to define any future address types (e.g. taproot)\n>\n> I agree this could be useful and think Ben Kaufman's suggestion of using\n> m/48'/0'/0'/1' for this purpose makes sense, however I also think a future\n> multi-sig standard for new address types may well be suited for a different\n> BIP which could also address concern #1 around including `script_type` at\n> all.\n>\n> Therefore I have not yet added any mention of \"wild card\" in the proposed\n> bip but kept strictly to p2sh-p2wsh and p2wsh derivations as used in modern\n> day wallets.\n>\n> I have create a PR https://github.com/bitcoin/bips/pull/1072 so that\n> anyone may easily comment on it and any concerns can be raised.\n>\n> I think the community needs this and it is well over due.  I have gotten\n> positive feedback and support from other devs.\n>\n> Feedback welcome.\n>\n> Cheers,\n> Fontaine\n>\n>\n> Sent with ProtonMail Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Friday, December 18, 2020 12:08 PM, Luke Dashjr <luke at dashjr.org>\n> wrote:\n>\n> > Thanks for explaining where instructions are lacking.\n> >\n> > How does this look?\n> > https://github.com/bitcoin/bips/pull/1046/files\n> >\n> > On Friday 18 December 2020 01:44:27 dentondevelopment wrote:\n> >\n> > > Hi Luke,\n> > > It looks to have the same motivations and be compatible with\n> > > https://github.com/bitcoin/bips/pull/253 (if I am reading it\n> correctly).\n> > > The only guidance I have on proposing a bip is what is on the readme\n> > > https://github.com/bitcoin/bips/blob/master/README.mediawiki\n> > > 48 would be fitting if it is unused.\n> > > This is still very much a work in progress and there does seem to be\n> > > community support.\n> > > Pavol and others have shared relevant info/suggestions which I will be\n> > > using to update the proposal.\n> > > Will share again here when the next draft is ready.\n> > > Many thanks,\n> > > Fontaine\n> > > Sent with ProtonMail Secure Email.\n> > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > On Thursday, December 17, 2020 1:16 AM, Luke Dashjr luke at dashjr.org\n> wrote:\n> > >\n> > > > BIP number 48 has not been assigned. Do not self-assign BIP numbers.\n> > > > Is this intended to be compatible with\n> > > > https://github.com/bitcoin/bips/pull/253 ?\n> > > > Luke\n> > > > On Wednesday 16 December 2020 14:10:28 dentondevelopment via\n> bitcoin-dev\n> > > > wrote:\n> > > >\n> > > > > Here is the repo instead of a static link:\n> > > > > https://github.com/Fonta1n3/bips/blob/master/bip-0048.mediawiki\n> > > > > Fontaine\n> > > > > Sent with ProtonMail Secure Email.\n> > > > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > > > On Wednesday, December 16, 2020 8:43 PM, dentondevelopment via\n> > > > > bitcoin-dev\n> > > >\n> > > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > >\n> > > > > > Hello,\n> > > > > > I would like to propose bip48 (taking bip44 as inspiration),\n> with the\n> > > > > > purpose of documenting modern multi-sig derivations.\n> > > > > > Please see a rough draft of the proposed bip attached,\n> comments/input\n> > > > > > welcome.\n> > > > > > Regards,\n> > > > > > Fontaine\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210225/fb6326b2/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "bip48 proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Craig Raw",
                "dentondevelopment"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8505
        }
    },
    {
        "title": "[bitcoin-dev] Exploring alternative activation mechanisms: decreasing threshold",
        "thread_messages": [
            {
                "author": "Gregorio Guidi",
                "date": "2021-02-25T22:33:25",
                "message_text_only": "Hello,\n\nI followed the debate on LOT=false / LOT=true trying to get a grasp of \nthe balance of risks and advantages. The summary by Aaron van Wirdum [1] \nexplains well the difficulties to find a good equilibrium... it \nconcludes that \"perhaps, a new possibility will present itself\".\n\nThinking about such a \"new possibility\" that overcomes the \nLOT=true/false dichotomy, I would like to offer the following proposal. \nIt could be called \"decreasing threshold activation\".\n\nDecreasing threshold activation works similarly to BIP8, with the \ndifference that the threshold that triggers the STARTED -> LOCKED_IN \ntransition starts at 100% for the first retargeting period, and then is \ngradually reduced on each period in steps of 24 blocks (~1,2%). More \nprecisely:\n\nOn the 1st period (starting on start_height): if 2016 out of 2016 blocks \nsignal, the state is changed to LOCKED_IN on the next period (otherwise \nstays STARTED)\nOn the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state \ntransitions to LOCKED_IN on the next period\nOn the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state \ntransitions to LOCKED_IN on the next period\n...\nOn the 14th period (~6 months): if 1704 out of 2016 blocks signal \n(~84.5%), the state transitions to LOCKED_IN on the next period\n...\nOn the 27th period (~12 months): if 1392 out of 2016 blocks signal \n(~69.0%), the state transitions to LOCKED_IN on the next period\n...\nOn the 40th period (~18 months): if 1080 out of 2016 blocks signal \n(~53.6%), the state transitions to LOCKED_IN on the next period\n...\nOn the 53th period (~24 months): if 768 out of 2016 blocks signal \n(~38.1%), the state transitions to LOCKED_IN on the next period\n...\nOn the 66th period (~30 months): if 456 out of 2016 blocks signal \n(~22.6%), the state transitions to LOCKED_IN on the next period\n...\nOn the 79th period (~36 months): if 144 out of 2016 blocks signal \n(~7.1%), the state transitions to LOCKED_IN on the next period\n...\nOn the 84th and final period (~39 months): if 24 out of 2016 blocks \nsignal (~1.2%), the state transitions to LOCKED_IN on the next period, \notherwise goes to FAILED\n\n(For reference, I include below a snippet of pseudocode for the \ndecreasing thresholds in the style of BIP8 and BIP9.)\n\nHere are the main features and advantages of this approach:\n\n1. It is relatively conservative at the beginning: for activation to \nhappen in the first year, it requires a clear majority of signaling \nhashrate, indicating that the activation is relatively safe. Only later \nthe threshold starts to move towards \"unsafe\" territory, accepting the \ntradeoff of less support from existing hashrate in exchange for ensuring \nthat the activation eventually happens.\n\n2. Like LOT=true, the activation will always occur in the end (except in \nthe negligible case where less than 1.2% of hashrate supports it).\n\n3. This approach is quite easy to implement, in particular it avoids the \nextra code to deal with the MUST_SIGNAL period.\n\n4. There are no parameters to set (except startheight). I am a KISS fan, \nso this is a plus for me, making the activation mechanism robust and \npredictable with less chance for users to shoot themselves in the foot. \nIt is also a plus for me that - if adopted as the default mechanism - it \nwould require very little discussion on how to activate future \nsoft-forks. In fact I think it would be a winning move for Core to \ncommit to such a scheme, to avoid getting lost in game-theoretic rabbit \nholes.\n\n5. Since there is no MUST_SIGNAL period, no automatic chain split occurs \naround activation when not all miners have upgraded (so activation is \ngenerally as benign as a MASF). A chain split will occur only when/if an \ninvalid block is created (and this requires dedicated effort! it can \nonly happen by circumventing the normal policy rules [2]). This \nmitigates the risk of reorgs and involuntary forks around activation, \neven with low miner signaling.\n\n6. It removes motivation to create UASF clients that force activation. \nWhile individual nodes could still try to force a quicker activation, \nthe motivation to do so is reduced since the same result is obtained \njust by waiting a little more.\n\n7. Compared to LOT=true, activation is cleaner and quicker when it is \nrelatively safe to do so (when the signaling hashrate is - let's say - \nin the 70%-80% range). On the other hand, activation is pushed further \nand further in time when it is less safe (when signaling hashrate is \n<50%, meaning that there is a serious risk that users/miners that did \nnot upgrade start following an alternative chain). This gives everyone \ntime to prepare properly for such a potentially disruptive event.\n\n8. If a significant number of users and miners consciously decide (for \nwhatever reasons) that they don't want to upgrade and want to fork \nthemselves off from the chain followed by Core (as is their \nprerogative), they will have time to do so safely.\n\n9. Compared to the strategy of doing LOT=false and then LOT=true if it \nfails, using the decreasing threshold approach may not seem very \ndifferent. But it completely removes the need to fiddle with different \nclient releases and with the issues associated with deployed nodes with \ndifferent consensus parameters.\n\nAll in all, reading the various perspectives on this mailing list and \noutside I have the feeling that the strongest arguments against LOT=true \nhave at their core a certain uneasiness with the MUST_SIGNAL mechanism \nand the related automatic chain split on activation, which is something \nthat greatly complicates the analysis (but please tell me if I am \nwrong...). In this sense, this proposal achieves the big objective of \nalways ending in activation (like LOT=true) without resorting to \nMUST_SIGNAL and chain splits.\n\nA final note: this proposal should be seen as somewhat independent from \nthe discussion on taproot activation. Personally I would be happy with a \nLOT=false activation for taproot that succeeds quickly, while the \ndecreasing threshold approach could be evaluated as potential default \nactivation mechanism for the future.\n\nI would be happy to hear what you think about this. What are the \npossible issues/drawbacks of using this mechanism?\n\nThanks,\n\nGregorio\n\n[1] \nhttps://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-hurdle-before-taproot-activation\n\n[2] This was not the case in the past for upgrades such as BIP16 (P2SH), \nwhich generated frequent reorgs due to a combination of low activation \nthreshold (55%) and no policy protection. But for upgrades such as \ntaproot the normal policy rules prevent the creation of invalid blocks \nby non-upgraded miners. See \nhttps://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-rule/\n\nPseudocode:\n\n         case STARTED:\n             int elapsed_periods = (block.height - startheight) / 2016;\n             if (elapsed_periods > 2016 / 24) {\n                 return FAILED;\n             }\n             int threshold = 2016 - 24 * (elapsed_periods - 1);\n             int count = 0;\n             walk = block;\n             for (i = 0; i < 2016; i++) {\n                 walk = walk.parent;\n                 if (walk.nVersion & 0xE0000000 == 0x20000000 && (walk.nVersion >> bit) & 1 == 1) {\n                     ++count;\n                 }\n             }\n             if (count >= threshold) {\n                 return LOCKED_IN;\n             }\n             return STARTED;"
            },
            {
                "author": "Ryan Grant",
                "date": "2021-02-26T17:48:33",
                "message_text_only": "Huh.\nI like the mechanism.\n\nI like the honesty that once a feature with high demand and safety is\nready, activation pressure will keep increasing.\n\nThe gradual march of time in this Decreasing Threshold proposal is\npredictable and incremental in ways that help avoid brinkmanship.\n\nAvoiding the hard fork dynamic (that LOT=true requires) prevents some\nchain splits, but activation under political opposition may then still\ndepend on a UASF.  If I thought the time had come to line up a UASF\nfor a feature, I'd first want to have nodes out there running this\nsofter Decreasing Threshold activation (maybe before it fails).\n\nIt's also not as unresponsive to miner wisdom as LOT=true.\nConceptually, it asks miners to arbitrate both version adoption as\nwell as whether nodes which haven't upgraded face risks in an early\nactivation.  Should miners find themselves in dramatic unanimity, they\neven have enough influence to technically fail any activation."
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-02-27T17:55:00",
                "message_text_only": "This has the same problems BIP149 did: since there is no signalling, it is \nambiguous whether the softfork has activated at all. Both anti-SF and pro-SF \nnodes will remain on the same chain, with conflicting perceptions of the \nrules, and resolution (if ever) will be chaotic. Absent resolution, however, \nthere is a strong incentive not to rely on the rules, and thus it may never \nget used, and therefore also never resolved.\n\nAdditionally, it loses the flexibility of BIP 8 to, after the initial \ndeployment, move the timeoutheight sooner.\n\nLuke\n\n\nOn Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:\n> Hello,\n>\n> I followed the debate on LOT=false / LOT=true trying to get a grasp of\n> the balance of risks and advantages. The summary by Aaron van Wirdum [1]\n> explains well the difficulties to find a good equilibrium... it\n> concludes that \"perhaps, a new possibility will present itself\".\n>\n> Thinking about such a \"new possibility\" that overcomes the\n> LOT=true/false dichotomy, I would like to offer the following proposal.\n> It could be called \"decreasing threshold activation\".\n>\n> Decreasing threshold activation works similarly to BIP8, with the\n> difference that the threshold that triggers the STARTED -> LOCKED_IN\n> transition starts at 100% for the first retargeting period, and then is\n> gradually reduced on each period in steps of 24 blocks (~1,2%). More\n> precisely:\n>\n> On the 1st period (starting on start_height): if 2016 out of 2016 blocks\n> signal, the state is changed to LOCKED_IN on the next period (otherwise\n> stays STARTED)\n> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state\n> transitions to LOCKED_IN on the next period\n> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state\n> transitions to LOCKED_IN on the next period\n> ...\n> On the 14th period (~6 months): if 1704 out of 2016 blocks signal\n> (~84.5%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 27th period (~12 months): if 1392 out of 2016 blocks signal\n> (~69.0%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 40th period (~18 months): if 1080 out of 2016 blocks signal\n> (~53.6%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 53th period (~24 months): if 768 out of 2016 blocks signal\n> (~38.1%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 66th period (~30 months): if 456 out of 2016 blocks signal\n> (~22.6%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 79th period (~36 months): if 144 out of 2016 blocks signal\n> (~7.1%), the state transitions to LOCKED_IN on the next period\n> ...\n> On the 84th and final period (~39 months): if 24 out of 2016 blocks\n> signal (~1.2%), the state transitions to LOCKED_IN on the next period,\n> otherwise goes to FAILED\n>\n> (For reference, I include below a snippet of pseudocode for the\n> decreasing thresholds in the style of BIP8 and BIP9.)\n>\n> Here are the main features and advantages of this approach:\n>\n> 1. It is relatively conservative at the beginning: for activation to\n> happen in the first year, it requires a clear majority of signaling\n> hashrate, indicating that the activation is relatively safe. Only later\n> the threshold starts to move towards \"unsafe\" territory, accepting the\n> tradeoff of less support from existing hashrate in exchange for ensuring\n> that the activation eventually happens.\n>\n> 2. Like LOT=true, the activation will always occur in the end (except in\n> the negligible case where less than 1.2% of hashrate supports it).\n>\n> 3. This approach is quite easy to implement, in particular it avoids the\n> extra code to deal with the MUST_SIGNAL period.\n>\n> 4. There are no parameters to set (except startheight). I am a KISS fan,\n> so this is a plus for me, making the activation mechanism robust and\n> predictable with less chance for users to shoot themselves in the foot.\n> It is also a plus for me that - if adopted as the default mechanism - it\n> would require very little discussion on how to activate future\n> soft-forks. In fact I think it would be a winning move for Core to\n> commit to such a scheme, to avoid getting lost in game-theoretic rabbit\n> holes.\n>\n> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs\n> around activation when not all miners have upgraded (so activation is\n> generally as benign as a MASF). A chain split will occur only when/if an\n> invalid block is created (and this requires dedicated effort! it can\n> only happen by circumventing the normal policy rules [2]). This\n> mitigates the risk of reorgs and involuntary forks around activation,\n> even with low miner signaling.\n>\n> 6. It removes motivation to create UASF clients that force activation.\n> While individual nodes could still try to force a quicker activation,\n> the motivation to do so is reduced since the same result is obtained\n> just by waiting a little more.\n>\n> 7. Compared to LOT=true, activation is cleaner and quicker when it is\n> relatively safe to do so (when the signaling hashrate is - let's say -\n> in the 70%-80% range). On the other hand, activation is pushed further\n> and further in time when it is less safe (when signaling hashrate is\n> <50%, meaning that there is a serious risk that users/miners that did\n> not upgrade start following an alternative chain). This gives everyone\n> time to prepare properly for such a potentially disruptive event.\n>\n> 8. If a significant number of users and miners consciously decide (for\n> whatever reasons) that they don't want to upgrade and want to fork\n> themselves off from the chain followed by Core (as is their\n> prerogative), they will have time to do so safely.\n>\n> 9. Compared to the strategy of doing LOT=false and then LOT=true if it\n> fails, using the decreasing threshold approach may not seem very\n> different. But it completely removes the need to fiddle with different\n> client releases and with the issues associated with deployed nodes with\n> different consensus parameters.\n>\n> All in all, reading the various perspectives on this mailing list and\n> outside I have the feeling that the strongest arguments against LOT=true\n> have at their core a certain uneasiness with the MUST_SIGNAL mechanism\n> and the related automatic chain split on activation, which is something\n> that greatly complicates the analysis (but please tell me if I am\n> wrong...). In this sense, this proposal achieves the big objective of\n> always ending in activation (like LOT=true) without resorting to\n> MUST_SIGNAL and chain splits.\n>\n> A final note: this proposal should be seen as somewhat independent from\n> the discussion on taproot activation. Personally I would be happy with a\n> LOT=false activation for taproot that succeeds quickly, while the\n> decreasing threshold approach could be evaluated as potential default\n> activation mechanism for the future.\n>\n> I would be happy to hear what you think about this. What are the\n> possible issues/drawbacks of using this mechanism?\n>\n> Thanks,\n>\n> Gregorio\n>\n> [1]\n> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h\n>urdle-before-taproot-activation\n>\n> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),\n> which generated frequent reorgs due to a combination of low activation\n> threshold (55%) and no policy protection. But for upgrades such as\n> taproot the normal policy rules prevent the creation of invalid blocks\n> by non-upgraded miners. See\n> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r\n>ule/\n>\n> Pseudocode:\n>\n>          case STARTED:\n>              int elapsed_periods = (block.height - startheight) / 2016;\n>              if (elapsed_periods > 2016 / 24) {\n>                  return FAILED;\n>              }\n>              int threshold = 2016 - 24 * (elapsed_periods - 1);\n>              int count = 0;\n>              walk = block;\n>              for (i = 0; i < 2016; i++) {\n>                  walk = walk.parent;\n>                  if (walk.nVersion & 0xE0000000 == 0x20000000 &&\n> (walk.nVersion >> bit) & 1 == 1) { ++count;\n>                  }\n>              }\n>              if (count >= threshold) {\n>                  return LOCKED_IN;\n>              }\n>              return STARTED;\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Gregorio Guidi",
                "date": "2021-02-27T23:49:46",
                "message_text_only": "On 2/27/21 6:55 PM, Luke Dashjr wrote:\n> This has the same problems BIP149 did: since there is no signalling, it is\n> ambiguous whether the softfork has activated at all. Both anti-SF and pro-SF\n> nodes will remain on the same chain, with conflicting perceptions of the\n> rules, and resolution (if ever) will be chaotic. Absent resolution, however,\n> there is a strong incentive not to rely on the rules, and thus it may never\n> get used, and therefore also never resolved.\n>\n> Additionally, it loses the flexibility of BIP 8 to, after the initial\n> deployment, move the timeoutheight sooner.\n>\n> Luke\n\nI see the point about possible problems of not having immediate \nresolution in the case of a contentious activation. I guess in such \ncases a certain amount of chaos is unavoidable... I see the alternatives \nof BIP8(lot=true) and Decresing Thresholds as a choice between having \nthe chaos earlier (BIP8), or leaving it dormant with the possibility of \nhaving it later (Decreasing Thresholds). You might be right: there is a \ncost in pushing forward the resolution, but overall I think the risks \nare roughly comparable.\n\nTrying to see this scenario from a more general perspective (at this \npoint the debate is more theoretical than practical, forgive me for \nthat): let's we are say in the soft-fork situation where Core is at \nversion X and a new version Y is released with new consensus rules to be \nactivated. The risk that nodes at version X do not upgrade and start \nfollowing an invalid chain (invalid for Y) cannot be completely avoided. \nSo there is a basic choice to make as a first step:\n\n \u00a0* Option 1 (only safe soft-fork activation): Core decides that \nactivating the soft fork can only be done with a strong guarantee that \nmost of the hashrate follows version Y. This gives assurance that an \ninvalid chain, if it appears, will be short-lived. That is: only \nlot=false is allowed for BIP8.\n\n \u00a0* Option 2 (possibly unsafe soft-fork activation): Core accepts the \nrisk that the activation occurs even when there is no guarantee that \nmost of the hashrate (or even a majority of the hashrate) follows Y, \nbecause the advantages of activation outweigh the risks. That is: Core \nwill consider activation mechanisms stronger than BIP8(lot=false).\n\nThis is a difficult choice, and honestly I wouldn't blame at all the \nCore devs if they go for option 1, as it is the safest on paper. But \nhere we are considering what happens under option 2...\n\nUnder option 2, the risk can be mitigated in various ways, with the key \nfactors being these assumption:\n\n \u00a0* Assumption A1: there is strong evidence (gathered before and during \nthe development of the soft-fork) that version Y will be adopted by the \n\"economic majority\", meaning that miners that mine a block invalid for Y \nare very likely to not have the value of the block recognized by the \ncounterparties with which they normally transact. In other words: mining \ninvalid blocks likely leads to an economic loss.\n\n \u00a0* Assumption A2: enough lead time is given before a possibly unsafe \nactivation, so that during this period it is possible to diffuse widely \nand loudly the message on the risks associated to not upgrading to Y. \nGiven enough time, most economic agents will have made up their mind and \nacted accordingly (by upgrading, or possibly by forking themselves off \nfrom the Y chain in a safe manner, creating a forked coin).\n\nI think both BIP8(lot=true) and Decreasing Threshold work decently under \nthese assumptions. But in the worst case bip8(lot=true) forces \nresolution immediately upon activation, forcing an economic loss \nimmediately on non-upgraded miners, while Decreasing Threshold keeps the \nissue lingering a bit more but is more lenient, forcing the economic \nloss on the miners only at the moment that they mine an invalid block. \nIn addition, it gives more time for upgrading (and better fulfilling \nassumption A2) before and after activation.\n\nAbout the final point on BIP8 flexibility, I can say that sometimes not \nhaving to take a difficult choice can be an advantage... :)\n\nThanks for your insight and for your work, cheers,\n\nGregorio\n\n\n> On Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:\n>> Hello,\n>>\n>> I followed the debate on LOT=false / LOT=true trying to get a grasp of\n>> the balance of risks and advantages. The summary by Aaron van Wirdum [1]\n>> explains well the difficulties to find a good equilibrium... it\n>> concludes that \"perhaps, a new possibility will present itself\".\n>>\n>> Thinking about such a \"new possibility\" that overcomes the\n>> LOT=true/false dichotomy, I would like to offer the following proposal.\n>> It could be called \"decreasing threshold activation\".\n>>\n>> Decreasing threshold activation works similarly to BIP8, with the\n>> difference that the threshold that triggers the STARTED -> LOCKED_IN\n>> transition starts at 100% for the first retargeting period, and then is\n>> gradually reduced on each period in steps of 24 blocks (~1,2%). More\n>> precisely:\n>>\n>> On the 1st period (starting on start_height): if 2016 out of 2016 blocks\n>> signal, the state is changed to LOCKED_IN on the next period (otherwise\n>> stays STARTED)\n>> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state\n>> transitions to LOCKED_IN on the next period\n>> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state\n>> transitions to LOCKED_IN on the next period\n>> ...\n>> On the 14th period (~6 months): if 1704 out of 2016 blocks signal\n>> (~84.5%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 27th period (~12 months): if 1392 out of 2016 blocks signal\n>> (~69.0%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 40th period (~18 months): if 1080 out of 2016 blocks signal\n>> (~53.6%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 53th period (~24 months): if 768 out of 2016 blocks signal\n>> (~38.1%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 66th period (~30 months): if 456 out of 2016 blocks signal\n>> (~22.6%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 79th period (~36 months): if 144 out of 2016 blocks signal\n>> (~7.1%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 84th and final period (~39 months): if 24 out of 2016 blocks\n>> signal (~1.2%), the state transitions to LOCKED_IN on the next period,\n>> otherwise goes to FAILED\n>>\n>> (For reference, I include below a snippet of pseudocode for the\n>> decreasing thresholds in the style of BIP8 and BIP9.)\n>>\n>> Here are the main features and advantages of this approach:\n>>\n>> 1. It is relatively conservative at the beginning: for activation to\n>> happen in the first year, it requires a clear majority of signaling\n>> hashrate, indicating that the activation is relatively safe. Only later\n>> the threshold starts to move towards \"unsafe\" territory, accepting the\n>> tradeoff of less support from existing hashrate in exchange for ensuring\n>> that the activation eventually happens.\n>>\n>> 2. Like LOT=true, the activation will always occur in the end (except in\n>> the negligible case where less than 1.2% of hashrate supports it).\n>>\n>> 3. This approach is quite easy to implement, in particular it avoids the\n>> extra code to deal with the MUST_SIGNAL period.\n>>\n>> 4. There are no parameters to set (except startheight). I am a KISS fan,\n>> so this is a plus for me, making the activation mechanism robust and\n>> predictable with less chance for users to shoot themselves in the foot.\n>> It is also a plus for me that - if adopted as the default mechanism - it\n>> would require very little discussion on how to activate future\n>> soft-forks. In fact I think it would be a winning move for Core to\n>> commit to such a scheme, to avoid getting lost in game-theoretic rabbit\n>> holes.\n>>\n>> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs\n>> around activation when not all miners have upgraded (so activation is\n>> generally as benign as a MASF). A chain split will occur only when/if an\n>> invalid block is created (and this requires dedicated effort! it can\n>> only happen by circumventing the normal policy rules [2]). This\n>> mitigates the risk of reorgs and involuntary forks around activation,\n>> even with low miner signaling.\n>>\n>> 6. It removes motivation to create UASF clients that force activation.\n>> While individual nodes could still try to force a quicker activation,\n>> the motivation to do so is reduced since the same result is obtained\n>> just by waiting a little more.\n>>\n>> 7. Compared to LOT=true, activation is cleaner and quicker when it is\n>> relatively safe to do so (when the signaling hashrate is - let's say -\n>> in the 70%-80% range). On the other hand, activation is pushed further\n>> and further in time when it is less safe (when signaling hashrate is\n>> <50%, meaning that there is a serious risk that users/miners that did\n>> not upgrade start following an alternative chain). This gives everyone\n>> time to prepare properly for such a potentially disruptive event.\n>>\n>> 8. If a significant number of users and miners consciously decide (for\n>> whatever reasons) that they don't want to upgrade and want to fork\n>> themselves off from the chain followed by Core (as is their\n>> prerogative), they will have time to do so safely.\n>>\n>> 9. Compared to the strategy of doing LOT=false and then LOT=true if it\n>> fails, using the decreasing threshold approach may not seem very\n>> different. But it completely removes the need to fiddle with different\n>> client releases and with the issues associated with deployed nodes with\n>> different consensus parameters.\n>>\n>> All in all, reading the various perspectives on this mailing list and\n>> outside I have the feeling that the strongest arguments against LOT=true\n>> have at their core a certain uneasiness with the MUST_SIGNAL mechanism\n>> and the related automatic chain split on activation, which is something\n>> that greatly complicates the analysis (but please tell me if I am\n>> wrong...). In this sense, this proposal achieves the big objective of\n>> always ending in activation (like LOT=true) without resorting to\n>> MUST_SIGNAL and chain splits.\n>>\n>> A final note: this proposal should be seen as somewhat independent from\n>> the discussion on taproot activation. Personally I would be happy with a\n>> LOT=false activation for taproot that succeeds quickly, while the\n>> decreasing threshold approach could be evaluated as potential default\n>> activation mechanism for the future.\n>>\n>> I would be happy to hear what you think about this. What are the\n>> possible issues/drawbacks of using this mechanism?\n>>\n>> Thanks,\n>>\n>> Gregorio\n>>\n>> [1]\n>> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h\n>> urdle-before-taproot-activation\n>>\n>> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),\n>> which generated frequent reorgs due to a combination of low activation\n>> threshold (55%) and no policy protection. But for upgrades such as\n>> taproot the normal policy rules prevent the creation of invalid blocks\n>> by non-upgraded miners. See\n>> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r\n>> ule/\n>>\n>> Pseudocode:\n>>\n>>           case STARTED:\n>>               int elapsed_periods = (block.height - startheight) / 2016;\n>>               if (elapsed_periods > 2016 / 24) {\n>>                   return FAILED;\n>>               }\n>>               int threshold = 2016 - 24 * (elapsed_periods - 1);\n>>               int count = 0;\n>>               walk = block;\n>>               for (i = 0; i < 2016; i++) {\n>>                   walk = walk.parent;\n>>                   if (walk.nVersion & 0xE0000000 == 0x20000000 &&\n>> (walk.nVersion >> bit) & 1 == 1) { ++count;\n>>                   }\n>>               }\n>>               if (count >= threshold) {\n>>                   return LOCKED_IN;\n>>               }\n>>               return STARTED;\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T02:38:54",
                "message_text_only": "Forced-signaling, or any form of signaling, does not materially change whether a soft fork can be seen to be safe to \nuse. Pieter wrote a great post[1] some time ago that goes into depth about the security of soft forks, but, while miners \ncan help to avoid the risk of forks, they aren't the determining factor in whether use of a fork should be considered \nsafe (ie the fork \"has activated\").\n\nNot only that, but the signaling methods used in BIP 8/9 (ie the version field in the block header) do not imply \nanything about whether mining pools are running full nodes which enforce the soft fork at all, only whether the pool has \nconfigured their stratum software to signal or not.\n\nUltimately, forced-signaling, or signaling period, are not a substitute for having a broad set of upgraded nodes across \nthe network, including an overwhelming majority of economically-active nodes, enforcing the rules of a new fork. As this \ncan be difficult to measure, waiting some time after a fork and examining upgrade patterns across the network is important.\n\nMatt\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html\n\nOn 2/27/21 12:55, Luke Dashjr via bitcoin-dev wrote:\n> This has the same problems BIP149 did: since there is no signalling, it is\n> ambiguous whether the softfork has activated at all. Both anti-SF and pro-SF\n> nodes will remain on the same chain, with conflicting perceptions of the\n> rules, and resolution (if ever) will be chaotic. Absent resolution, however,\n> there is a strong incentive not to rely on the rules, and thus it may never\n> get used, and therefore also never resolved.\n> \n> Additionally, it loses the flexibility of BIP 8 to, after the initial\n> deployment, move the timeoutheight sooner.\n> \n> Luke\n> \n> \n> On Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:\n>> Hello,\n>>\n>> I followed the debate on LOT=false / LOT=true trying to get a grasp of\n>> the balance of risks and advantages. The summary by Aaron van Wirdum [1]\n>> explains well the difficulties to find a good equilibrium... it\n>> concludes that \"perhaps, a new possibility will present itself\".\n>>\n>> Thinking about such a \"new possibility\" that overcomes the\n>> LOT=true/false dichotomy, I would like to offer the following proposal.\n>> It could be called \"decreasing threshold activation\".\n>>\n>> Decreasing threshold activation works similarly to BIP8, with the\n>> difference that the threshold that triggers the STARTED -> LOCKED_IN\n>> transition starts at 100% for the first retargeting period, and then is\n>> gradually reduced on each period in steps of 24 blocks (~1,2%). More\n>> precisely:\n>>\n>> On the 1st period (starting on start_height): if 2016 out of 2016 blocks\n>> signal, the state is changed to LOCKED_IN on the next period (otherwise\n>> stays STARTED)\n>> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state\n>> transitions to LOCKED_IN on the next period\n>> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state\n>> transitions to LOCKED_IN on the next period\n>> ...\n>> On the 14th period (~6 months): if 1704 out of 2016 blocks signal\n>> (~84.5%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 27th period (~12 months): if 1392 out of 2016 blocks signal\n>> (~69.0%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 40th period (~18 months): if 1080 out of 2016 blocks signal\n>> (~53.6%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 53th period (~24 months): if 768 out of 2016 blocks signal\n>> (~38.1%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 66th period (~30 months): if 456 out of 2016 blocks signal\n>> (~22.6%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 79th period (~36 months): if 144 out of 2016 blocks signal\n>> (~7.1%), the state transitions to LOCKED_IN on the next period\n>> ...\n>> On the 84th and final period (~39 months): if 24 out of 2016 blocks\n>> signal (~1.2%), the state transitions to LOCKED_IN on the next period,\n>> otherwise goes to FAILED\n>>\n>> (For reference, I include below a snippet of pseudocode for the\n>> decreasing thresholds in the style of BIP8 and BIP9.)\n>>\n>> Here are the main features and advantages of this approach:\n>>\n>> 1. It is relatively conservative at the beginning: for activation to\n>> happen in the first year, it requires a clear majority of signaling\n>> hashrate, indicating that the activation is relatively safe. Only later\n>> the threshold starts to move towards \"unsafe\" territory, accepting the\n>> tradeoff of less support from existing hashrate in exchange for ensuring\n>> that the activation eventually happens.\n>>\n>> 2. Like LOT=true, the activation will always occur in the end (except in\n>> the negligible case where less than 1.2% of hashrate supports it).\n>>\n>> 3. This approach is quite easy to implement, in particular it avoids the\n>> extra code to deal with the MUST_SIGNAL period.\n>>\n>> 4. There are no parameters to set (except startheight). I am a KISS fan,\n>> so this is a plus for me, making the activation mechanism robust and\n>> predictable with less chance for users to shoot themselves in the foot.\n>> It is also a plus for me that - if adopted as the default mechanism - it\n>> would require very little discussion on how to activate future\n>> soft-forks. In fact I think it would be a winning move for Core to\n>> commit to such a scheme, to avoid getting lost in game-theoretic rabbit\n>> holes.\n>>\n>> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs\n>> around activation when not all miners have upgraded (so activation is\n>> generally as benign as a MASF). A chain split will occur only when/if an\n>> invalid block is created (and this requires dedicated effort! it can\n>> only happen by circumventing the normal policy rules [2]). This\n>> mitigates the risk of reorgs and involuntary forks around activation,\n>> even with low miner signaling.\n>>\n>> 6. It removes motivation to create UASF clients that force activation.\n>> While individual nodes could still try to force a quicker activation,\n>> the motivation to do so is reduced since the same result is obtained\n>> just by waiting a little more.\n>>\n>> 7. Compared to LOT=true, activation is cleaner and quicker when it is\n>> relatively safe to do so (when the signaling hashrate is - let's say -\n>> in the 70%-80% range). On the other hand, activation is pushed further\n>> and further in time when it is less safe (when signaling hashrate is\n>> <50%, meaning that there is a serious risk that users/miners that did\n>> not upgrade start following an alternative chain). This gives everyone\n>> time to prepare properly for such a potentially disruptive event.\n>>\n>> 8. If a significant number of users and miners consciously decide (for\n>> whatever reasons) that they don't want to upgrade and want to fork\n>> themselves off from the chain followed by Core (as is their\n>> prerogative), they will have time to do so safely.\n>>\n>> 9. Compared to the strategy of doing LOT=false and then LOT=true if it\n>> fails, using the decreasing threshold approach may not seem very\n>> different. But it completely removes the need to fiddle with different\n>> client releases and with the issues associated with deployed nodes with\n>> different consensus parameters.\n>>\n>> All in all, reading the various perspectives on this mailing list and\n>> outside I have the feeling that the strongest arguments against LOT=true\n>> have at their core a certain uneasiness with the MUST_SIGNAL mechanism\n>> and the related automatic chain split on activation, which is something\n>> that greatly complicates the analysis (but please tell me if I am\n>> wrong...). In this sense, this proposal achieves the big objective of\n>> always ending in activation (like LOT=true) without resorting to\n>> MUST_SIGNAL and chain splits.\n>>\n>> A final note: this proposal should be seen as somewhat independent from\n>> the discussion on taproot activation. Personally I would be happy with a\n>> LOT=false activation for taproot that succeeds quickly, while the\n>> decreasing threshold approach could be evaluated as potential default\n>> activation mechanism for the future.\n>>\n>> I would be happy to hear what you think about this. What are the\n>> possible issues/drawbacks of using this mechanism?\n>>\n>> Thanks,\n>>\n>> Gregorio\n>>\n>> [1]\n>> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h\n>> urdle-before-taproot-activation\n>>\n>> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),\n>> which generated frequent reorgs due to a combination of low activation\n>> threshold (55%) and no policy protection. But for upgrades such as\n>> taproot the normal policy rules prevent the creation of invalid blocks\n>> by non-upgraded miners. See\n>> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r\n>> ule/\n>>\n>> Pseudocode:\n>>\n>>           case STARTED:\n>>               int elapsed_periods = (block.height - startheight) / 2016;\n>>               if (elapsed_periods > 2016 / 24) {\n>>                   return FAILED;\n>>               }\n>>               int threshold = 2016 - 24 * (elapsed_periods - 1);\n>>               int count = 0;\n>>               walk = block;\n>>               for (i = 0; i < 2016; i++) {\n>>                   walk = walk.parent;\n>>                   if (walk.nVersion & 0xE0000000 == 0x20000000 &&\n>> (walk.nVersion >> bit) & 1 == 1) { ++count;\n>>                   }\n>>               }\n>>               if (count >= threshold) {\n>>                   return LOCKED_IN;\n>>               }\n>>               return STARTED;\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Ryan Grant",
                "date": "2021-02-28T14:06:42",
                "message_text_only": "On Sat, Feb 27, 2021 at 5:55 PM Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> This has the same problems BIP149 did: since there is no signalling, it is\n> ambiguous whether the softfork has activated at all.\n\nYou only need to see one block in the heaviest valid chain to dissolve\nthat ambiguity.  There are a lot of volunteers in this space who would\n(collectively) commit a few block's worth of hashrate, to know.\n\n> Additionally, it loses the flexibility of BIP 8 to, after the initial\n> deployment, move the timeoutheight sooner.\n\nIt doesn't interfere with concurrent UASFs using any combination of\ntimeoutheights."
            }
        ],
        "thread_summary": {
            "title": "Exploring alternative activation mechanisms: decreasing threshold",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Luke Dashjr",
                "Gregorio Guidi",
                "Matt Corallo"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 39744
        }
    },
    {
        "title": "[bitcoin-dev] A design for Probabilistic Partial Pruning",
        "thread_messages": [
            {
                "author": "Keagan McClelland",
                "date": "2021-02-26T18:40:35",
                "message_text_only": "Hi all,\n\nI've been thinking for quite some time about the problem of pruned nodes\nand ongoing storage costs for full nodes. One of the things that strikes me\nas odd is that we only really have two settings.\n\nA. Prune everything except the most recent blocks, down to the cache size\nB. Keep everything since genesis\n\n>From my observations and conversations with various folks in the community,\nthey would like to be able to run a \"partially\" pruned node to help bear\nthe load of bootstrapping other nodes and helping with data redundancy in\nthe network, but would prefer to not dedicate hundreds of Gigabytes of\nstorage space to the cause.\n\nThis led me to the idea that a node could randomly prune some of the blocks\nfrom history if it passed some predicate. A rough sketch of this would look\nas follows.\n\n1. At node startup, it would generate a random seed, this would be unique\nto the node but not necessary that it be cryptographically secure.\n2. In the node configuration it would also carry a \"threshold\" expressed as\nsome percentage of blocks it wanted to keep.\n3. As IBD occurs, based off of the threshold, the block hash, and the\nnode's unique seed, the node would either decide to prune the data or keep\nit. The uniqueness of the node's hash should ensure that no block is\nsystematically overrepresented in the set of nodes choosing this storage\nscheme.\n4. Once the node's IBD is complete it would advertise this as a peer\nservice, advertising its seed and threshold, so that nodes could\ndeterministically deduce which of its peers had which blocks.\n\nThe goals are to increase data redundancy in a way that more uniformly\nshares the load across nodes, alleviating some of the pressure of full\narchive nodes on the IBD problem. I am working on a draft BIP for this\nproposal but figured I would submit it as a high level idea in case anyone\nhad any feedback on the initial design before I go into specification\nlevels of detail.\n\nIf you have thoughts on\n\nA. The protocol design itself\nB. The barriers to put this kind of functionality into Core\n\nI would love to hear from you,\n\nCheers,\nKeagan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210226/b25852a4/attachment.html>"
            },
            {
                "author": "Igor Cota",
                "date": "2021-02-27T07:10:39",
                "message_text_only": "Hi Keagan,\n\nI had a very similar idea. The only difference being for the node to decide\non a range of blocks to keep beforehand, rather than making the decision\nblock-by-block like you suggest.\n\nI felt the other nodes would be better served by ranges due to the\nsequential nature of IBD. Perhaps this would be computationally lighter as\nwell.\n\nI also encourage you to read Ryosuke Abe's paper [1] that proposes a DHT\nscheme to solve this same problem.\n\nCheers,\nIgor\n\n[1] https://arxiv.org/abs/1902.02174\n\nOn Fri, 26 Feb 2021 at 21:57, Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> I've been thinking for quite some time about the problem of pruned nodes\n> and ongoing storage costs for full nodes. One of the things that strikes me\n> as odd is that we only really have two settings.\n>\n> A. Prune everything except the most recent blocks, down to the cache size\n> B. Keep everything since genesis\n>\n> From my observations and conversations with various folks in the\n> community, they would like to be able to run a \"partially\" pruned node to\n> help bear the load of bootstrapping other nodes and helping with data\n> redundancy in the network, but would prefer to not dedicate hundreds of\n> Gigabytes of storage space to the cause.\n>\n> This led me to the idea that a node could randomly prune some of the\n> blocks from history if it passed some predicate. A rough sketch of this\n> would look as follows.\n>\n> 1. At node startup, it would generate a random seed, this would be unique\n> to the node but not necessary that it be cryptographically secure.\n> 2. In the node configuration it would also carry a \"threshold\" expressed\n> as some percentage of blocks it wanted to keep.\n> 3. As IBD occurs, based off of the threshold, the block hash, and the\n> node's unique seed, the node would either decide to prune the data or keep\n> it. The uniqueness of the node's hash should ensure that no block is\n> systematically overrepresented in the set of nodes choosing this storage\n> scheme.\n> 4. Once the node's IBD is complete it would advertise this as a peer\n> service, advertising its seed and threshold, so that nodes could\n> deterministically deduce which of its peers had which blocks.\n>\n> The goals are to increase data redundancy in a way that more uniformly\n> shares the load across nodes, alleviating some of the pressure of full\n> archive nodes on the IBD problem. I am working on a draft BIP for this\n> proposal but figured I would submit it as a high level idea in case anyone\n> had any feedback on the initial design before I go into specification\n> levels of detail.\n>\n> If you have thoughts on\n>\n> A. The protocol design itself\n> B. The barriers to put this kind of functionality into Core\n>\n> I would love to hear from you,\n>\n> Cheers,\n> Keagan\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \n*Igor Cota*\nCodex Apertus d.o.o.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/c79266b3/attachment.html>"
            },
            {
                "author": "Leo Wandersleb",
                "date": "2021-02-28T03:41:06",
                "message_text_only": "Only headers need to be downloaded sequentially so downloading relevant blocks\nfrom one node is totally possible with gaps in between.\n\nOn 2/27/21 4:10 AM, Igor Cota via bitcoin-dev wrote:\n> Hi Keagan,\n>\n> I had a very similar idea. The only difference being for the node to decide on\n> a range of blocks to keep beforehand, rather than making the decision\n> block-by-block like you suggest.\n>\n> I felt the other nodes would be better served by ranges due to the sequential\n> nature of IBD. Perhaps this would be computationally lighter as well.\n>\n> I also encourage\u00a0you to read\u00a0Ryosuke Abe's paper [1] that proposes a\u00a0DHT\n> scheme to solve this same problem.\n>\n> Cheers,\n> Igor\n>\n> [1]\u00a0https://arxiv.org/abs/1902.02174\n>\n> On Fri, 26 Feb 2021 at 21:57, Keagan McClelland via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Hi all,\n>\n>     I've been thinking for quite some time about the problem of pruned nodes\n>     and ongoing storage costs for full nodes. One of the things that strikes\n>     me as odd is that we only really have two settings.\n>\n>     A. Prune everything except the most recent blocks, down to the cache size\n>     B. Keep everything since genesis\n>\n>     From my observations and conversations with various folks in the\n>     community, they would like to be able to run a \"partially\" pruned node to\n>     help bear the load of bootstrapping other nodes and helping with data\n>     redundancy in the network, but would prefer to not dedicate hundreds of\n>     Gigabytes of storage space to the cause.\n>\n>     This led me to the idea that a node could randomly prune some of the\n>     blocks from history if it passed some predicate. A rough sketch of this\n>     would look as follows.\n>\n>     1. At node startup, it would generate a random seed, this would be unique\n>     to the node but not necessary that it be cryptographically secure.\n>     2. In the node configuration it would also carry a \"threshold\" expressed\n>     as some percentage of blocks it wanted to keep.\n>     3. As IBD occurs, based off of the threshold, the block hash, and the\n>     node's unique seed, the node would either decide to prune the data or keep\n>     it. The uniqueness of the node's hash should ensure that no block is\n>     systematically overrepresented in the set of nodes choosing this storage\n>     scheme.\n>     4. Once the node's IBD is complete it would advertise this as a peer\n>     service, advertising its seed and threshold, so that nodes could\n>     deterministically deduce which of its peers had which blocks.\n>\n>     The goals are to increase data redundancy in a way that more uniformly\n>     shares the load across nodes, alleviating some of the pressure of full\n>     archive nodes on the IBD problem. I am working on a draft BIP for this\n>     proposal but figured I would submit it as a high level idea in case anyone\n>     had any feedback on the initial design before I go into specification\n>     levels of detail.\n>\n>     If you have thoughts on\n>\n>     A. The protocol design itself\n>     B. The barriers to put this kind of functionality into Core\n>\n>     I would love to hear from you,\n>\n>     Cheers,\n>     Keagan\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> -- \n> *Igor Cota*\n> Codex Apertus d.o.o.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "David A. Harding",
                "date": "2021-02-27T19:19:34",
                "message_text_only": "On Fri, Feb 26, 2021 at 11:40:35AM -0700, Keagan McClelland via bitcoin-dev wrote:\n> Hi all,\n\nHi Keagan,\n\n> 4. Once the node's IBD is complete it would advertise this as a peer\n> service, advertising its seed and threshold, so that nodes could\n> deterministically deduce which of its peers had which blocks.\n\nAlthough some of the details differed, I believe this general idea of\nsharded block storage was previously discussed in the context of BIP159,\nwhich warns:\n\n    \"Peers may have different prune depths (depending on the peers\n    configuration, disk space, etc.) which can result in a\n    fingerprinting weakness (finding the prune depth through getdata\n    requests). NODE_NETWORK_LIMITED supporting peers SHOULD avoid\n    leaking the prune depth and therefore not serve blocks deeper than\n    the signaled NODE_NETWORK_LIMITED threshold (288 blocks).\"\n\n- BIP: https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki#counter-measures-for-peer-fingerprinting\n- Discussion thread 1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html\n- Discussion thread 2: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014314.html\n- Discussion thread 2, continued: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html\n- BIP159-related PR, review comments: https://github.com/bitcoin/bitcoin/pull/10387\n\n> If you have thoughts on\n> \n> A. The protocol design itself\n> B. The barriers to put this kind of functionality into Core\n> \n> I would love to hear from you,\n\nI think it would be unlikely for any popular node software to adopt a\ntechnique that could make specific nodes easily fingerprintable on an\nongoing basis unless it solved some other urgent problem.  Luke Dashjr's\nrough data collection currently shows 5,629 archival listening nodes,[1]\nwhich is a substantial fraction of the roughly 10,000 listening nodes\nreported by Addy Yeow,[2] so I don't think we're near the point of\nneeding to worry about the unavailability of historic blocks.\n\n    [1] https://luke.dashjr.org/programs/bitcoin/files/charts/services.html\n    [2] https://bitnodes.io/dashboard/\n\nHowever, if there's a reasonable solution to the fingerprinting problem,\nI do think node developers would find that very interesting.\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/395e4571/attachment.sig>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-02-27T23:37:52",
                "message_text_only": "On Sat, Feb 27, 2021 at 09:19:34AM -1000, David A. Harding via bitcoin-dev wrote:\n> - Discussion thread 1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html\n\nTwo particularly useful emails from that thread are:\n\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014199.html\n  which links to discussions about the topic prior to 2017, including\n  discussion about DoS risks that are more important than the\n  fingerprinting risk I mentioned in my previous reply.\n\n- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014227.html\n  which describes a potential way to distribute data with fewer DoS\n  risks and less severe fingerprinting than each node storing a\n  different set of blocks.\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/c1dacd98/attachment.sig>"
            },
            {
                "author": "Yuval Kogman",
                "date": "2021-02-27T22:09:48",
                "message_text_only": "On Fri, 26 Feb 2021 at 20:57, Keagan McClelland via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The goals are to increase data redundancy in a way that more uniformly shares the load across nodes, alleviating some of the pressure of full archive nodes on the IBD problem. I am working on a draft BIP for this proposal but figured I would submit it as a high level idea in case anyone had any feedback on the initial design before I go into specification levels of detail.\n\nYou might be interested in an approach (henceforth \"SeF\") by Swanand\nKadhe, Jichan Chung and Kannan Ramchandran which employs fountain\ncodes, presented at Scaling Bitcoin 2019:\nhttps://arxiv.org/abs/1906.12140\n\n>From a cursory search it appears there is quite a bit of\nrelated/followup work as well.\n\nThe simplest fountain code, the Luby Transform (applied in this work)\nthe encoder divides a message into smaller chunks, and then constructs\nan infinite stream of codewords which are XORs of d randomly selected\nchunks where d is sampled from the robust soliton distribution. The\nsimplest decoder simply XORs new k=1 codewords from the relevant k>1\ncodewords, and the full message can be recovered with overwhelming\nprobability and in linear time with a sufficiently large random sample\nof codewords from the encoded stream. Note that the decoder must know\nwhich chunks went into a codeword, but this is usually addressed using\npseudorandomness, which has other motivations in an adversarial\nsetting.\n\nIn SeF, the general idea is that \"droplet nodes\" are pruning nodes\nwhich retain some number (equivalent to your threshold parameter) of\ncodewords from the encoding concatenated blocks (to obtain a fixed\nmessage size), and serve these to compatible clients. This is more\nrobust than retaining a random sample of blocks, and also performs\nwell according to their simulations.\n\nEven if this paper is not directly applicable to your efforts, the\ntheory of fountain codes should be of interest (many variants exist),\nand there is work on fountain codes. There is also some work on\nfountain codes in an adversarial setting (Falcon codes) but I'm only\nvaguely familiar with it, and if i'm not mistaken most of the\nconsiderations are either already implicitly addressed by the Bitcoin\nprotocol or explicitly addressed in the SeF paper, whose results also\ntake into account malicious droplet nodes."
            },
            {
                "author": "Yuval Kogman",
                "date": "2021-02-27T22:13:29",
                "message_text_only": "On Sat, 27 Feb 2021 at 22:09, Yuval Kogman <nothingmuch at woobling.org> wrote:\n> and there is work on fountain codes. There is also some work on\n\napologies, the first half of this line should have been deleted as it\nwas worked into the next sentence."
            }
        ],
        "thread_summary": {
            "title": "A design for Probabilistic Partial Pruning",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "David A. Harding",
                "Keagan McClelland",
                "Yuval Kogman",
                "Leo Wandersleb",
                "Igor Cota"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 15430
        }
    },
    {
        "title": "[bitcoin-dev] Taproot activation facts on lockinontimeout (LOT)",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-02-27T17:36:51",
                "message_text_only": "I just want to lay out some facts as I see them because frankly I feel\nany personal opinion is irrelevant at this point and without agreement\non facts we are going round in circles. I end with a personal opinion\nwhich you can feel free to ignore.\n\n1) There is a long list of current and past Core contributors who have\nsaid they effectively NACK setting a default of lot=true in Core.\nThere are a small number of current and past Core contributors who\nhave said they effectively NACK setting a default of lot=false in\nCore. If Core sets a default (barring an incredible transformation in\nviews) the only default that is possible at this stage is lot=false.\n\n2) Core forcing users to choose lot=true or lot=false before they can\nuse the software is not viable, nor is it a good idea. This suggestion\nwas withdrawn by ZmnSCPxj.\n\n3) There has been an idea floated (by Rusty and Greg amongst others)\nof setting a config option such that users could (easily or with\ngreater difficulty) change the default set in Core to their preferred\noption. Nobody as far as I'm aware is coding this up and intending to\nopen a PR to do this currently. Bitcoin Core pull requests are open to\nanybody and this may change.\n\n4) There is a non-Core project\n(https://github.com/BitcoinActivation/bitcoin) that plans to release\nlot=true as a default. If this is coded up and anyone runs this\nsoftware there will be lot=true nodes on the network regardless of\nwhat Core does.\n\n5) Core could (in theory) not release any activation code, either\nbecause there is no consensus on the lot default or out of concern for\na (possible but unlikely) chain split if miners failed to activate for\na year. If Core chooses to not release anything Taproot will only\nactivate if users and miners run non-Core software.\n\n**Personal opinion (feel free to ignore)**\n\nAssuming these facts (feel free to correct me if you think any of the\nabove aren't facts) I will put forward a personal opinion. Core\nreleasing nothing and putting all users (including miners) in a\nposition where the only way they can activate Taproot is to run\nnon-Core software seems to me to be highly suboptimal. I do appreciate\nthat if Core releases a default of lot=false that there is a small but\nnon-zero risk of a chain split *if and only if* miners fail to\nactivate within a year. Soft forks are not 100 percent risk free. If\nthe community's appetite for risk and disruption is literally zero we\nshould not attempt to activate Taproot. I would argue the long term\nbenefits for the ecosystem of Taproot *significantly* outweigh that\nnon-zero downside risk.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Taproot activation facts on lockinontimeout (LOT)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2721
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Scheduled Activation with Potential Miner-Signaled Delay",
        "thread_messages": [
            {
                "author": "Efaula Prafbodous",
                "date": "2021-02-28T16:26:18",
                "message_text_only": "Hello Bitcoin Protocol Discussion Mailing List,\n\nThe binary presented by \"Lock on Timeout\" or LOT; is inherently divisive.  Hence, after taking some time to meditate; please consider the following as an overview, and a possible solution:\n\n---\n\nThe lingering bad-taste from the drama surrounding the activation of SegWit (Using, BIP9, BIP91, and BIP148) lead to the development of the very reasonable activation protocol: BIP8.\n\nThe BIP8 protocol includes an optional feature, called \"Lock on Timeout\", that is essentially a technically improved version of the flag-day activation proposed in BIP148.\n\nMany in the Bitcoin Community find the use of blind flag-day activations needlessly divisive and dangerous. In particular:\n\n# A flag-day activation imposes itself on the network, without consideration of the deployment concerns that the miners may have when implementing the network upgrade on their unique infrastructure; and risks decreasing the good-will between users and miners.\n\n# A flag-day activation proceeds, even if, before activation, a critical bug in the design is found in the process of doing the miner software upgrades. There is no back-out path for the community and miners alike.\n\n# A flag-day activation can have wide-reaching damaging effects if activated with only a small amount of the miners in active support.\n\nOthers in the Bitcoin Community, however do not find these concerns weighty enough to override the certainty and reliability that a flag-day activation provides. Hence, this binary-option of using a flag-day activation, or not, is always going to be divisive for the community.\n\n---\n\nThe activation procedure for new consensus rules should be empowering for both the users and the miners alike. It should respect the reality that the proposed network upgrade (Taproot: BIP340, 341, and 342) has already completed its consensus building process within the Bitcoin Community.\n\nThis proposal decides against using a blind flag-day activation; instead it uses a more nuanced approach. It allows a majority of the miners to block deployment (if they maintain consensus to postpone the deployment for at least half of the activation period) and it also allows a minority of the miners to temporarily delay the deployment.\n\nSignaling \"readiness\" for a consensus change has been confused with implying political support of this change. This proposal addresses this confusion by inverting the meaning of the \"Version Bit\". Now miners will signal they are \"not-ready\", instead of the previously used behavior of signaling when they are \"ready\".\n\nAfter a lengthy pre-starting period of 6 months, an upgrade may be further delayed, or be postponed by miners signaling. In the default case, where the vast majority of the miners have successfully upgraded within the pre-starting period, the first 2016 block period will lock-in the upgrade without any delay or postponement.\n\nThis is far more accurately resolving the primary worry of both the Bitcoin users and Bitcoin miners, that is to allow an upgrade to proceed too-quickly while some lag behind with difficulties. Miners who are having difficulties can explicitly notify the community through signaling their lack of readiness, and thus triggering a delay, or entirely postponing the deployment.\n\n---\n\nPlease find following a rough, and incomplete, draft of the proposal written in BIP form. If the community finds this approach conceptually sound, this BIP will be completed to a high-standard and hopefully be considered to be used for the activation of Taproot.\n\n\nLovely Regards,\nEfaula.\n\n\n\n  BIP: scheduled-activation-delay\n  Title: Scheduled Activation with Potential Miner-Signaled Delay\n  Author: Efaula Prafbodous\n  Created: 2021-02-26\n  License: BSD-3-Clause\n           CC0-1.0\n\n==Abstract==\n\nThis document specifies an alternative to [[bip-0008.mediawiki|BIP8]], where the signalling intention is inverted, and the activation may be delayed a limited number of times, or postponed (and ultimately fail deployment).\n\nUnlike previous proposals, where miners signaled that they are '''ready''' for the consensus change.  This proposal has miners signal that they are '''not-ready''', and proceeds with the upgrade in the default case.\n\nThe core assumption within this proposal is that it is far easier and faster for a miner to adjust the signaling within the blocks they produce, than to certify and validate new software that enforces advanced new consensus rules.  Hence, miners will quickly signal they are '''not-ready''', and once upgraded; they will remove this signal; allowing the upgrade to proceed.\n\nThe authors of this proposal suggest this is more appropriate, as it directly focuses on the core issue: allowing miners to delay the activation of new consensus rules until they have solved their technological and validation issues.\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\n\n==Motivation==\n\nFlag-day activations are the simplest way to introduce consensus changes to the Bitcoin Network. However, without overwhelming miner support, a flag-day activation can cause a damaging chain split to occur.\n\nSince [[bip-0016.mediawiki|BIP16]], the Bitcoin Community has used miner-signaling (where miners place a specific flag in the blocks they produce) to trigger the activation of a consensus change. This has worked to assure that the network remains in good consensus throughout the activation period. However, in the case of [[bip-0141.mediawiki|BIP141]], this activation process of signaling '''readiness''' resulted in confusion between signaling readiness of the miner software; and signaling political support of the consensus change.\n\nThis lead to much drama; and a strong movement within the users to move back to using flag-day style activations.\n\nIn this proposal we address this issue by requiring miners to explicitly signal that they are '''not-ready''' for the proposed network upgrade. This removes a great amount of the political confusion, as the default behavior is now ambiguous:\n\n# A miner chooses to enforce the new consensus rules.\n# A miner may choose not to upgrade; and not enforce the new consensus rules. In a soft-fork this behavior is acceptable; except for the loss of funds and disruption caused by mining on-top of other invalid blocks without detection.\n\nIn the case of signaling '''not-ready''', the miner is simply referencing the technological reality of their lack-of-readiness. This allows the Bitcoin Community to focus on the miners who have signaled that they are not-yet-ready, and build support with them. Thus, helping the miners implement the technological aspects of this network upgrade.\n\n==Specification==\n\nThis proposal uses 2016 block intervals; using the same set of intervals as used for difficulty adjustment calculations.\n\n# The '''start_height''' should be 13 x 2016 block intervals (approximately six months) after the release of the software that implements this upgrade.\n# The '''stop_height''' should be 26  x 2016 block intervals (approximately one year) after the '''start_height'''.\n\n--\n\nThere will be exactly 26 intervals, to attempt activation:\n\n'''LOCKED_IN''' becomes activated IF:\n# Less than 126 blocks signal '''not-ready'''. In any interval. OR\n# Less than 1008 blocks, but 126 or more blocks signal '''not-ready'''. For a total of 14 intervals.\n\n'''FAILED''', i.e. activation failed IF:\n# 1008 or more blocks signal '''not-ready'''. For a total of 13 intervals. AND\n# 126 or more blocks signal '''not-ready'''. In all remaining intervals.\n\n==Copyright==\nThis document is dual licensed as BSD 3-clause, and Creative Commons CC0 1.0 Universal."
            }
        ],
        "thread_summary": {
            "title": "Proposal: Scheduled Activation with Potential Miner-Signaled Delay",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Efaula Prafbodous"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7762
        }
    },
    {
        "title": "[bitcoin-dev] Straight Flag Day (Height) Taproot Activation",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T16:45:22",
                "message_text_only": "As anyone reading this list is aware, there is significant debate around the activation method for the proposed Taproot \nsoft fork. So much so, and with so much conviction, that many individuals are committing themselves to running \nincompatible consensus rules. Obviously, such commitments, were they to come to pass, and were a fork to occur as a \nresult, would do more harm than any soft-fork does good. Further, such commitments and debate have likely delayed any \npossible release of a future Taproot activation while issues around locked-in activation are debated, instead of \navoiding it as was the original intent of the \"just ship BIP 8 LOT=false and we'll debate the rest if we need to\" approach.\n\nGiven this, it seems one way to keep the network in consensus would be to simply activate taproot through a traditional, \nno-frills, flag-day (or -height) activation with a flag day of roughly August, 2022. Going back to my criteria laid out \nin [1],\n\n1) I don't believe we have or will see significant, reasonable, and directed objection. This has largely always been the \ncase, but it is also critical that the lack of such objection is demonstrable to outside observers. Ironically, the \nongoing debate (and clear lack of consensus) around activation methods can be said to have had that effect, at least as \nfar as the active Bitcoin Reddit/Twitter userbase is concerned. In addition, the public support for Taproot activation \nmade by mining pool operators further shows public review and acceptance. Ideally, large Bitcoin business operators who \npreviously took part in Bitcoin Optech's Taproot workshop [2] would publicly state something similar prior to release of \nTaproot activation parameters. Because this expectation is social, no technical solution exists, only public statements \nmade in broad venues - something which I'd previously argued comes through soft fork activation parameter deployment, \nbut which can also come from elsewhere.\n\n2) The high node-level-adoption bar is one of the most critical goals, and the one most currently in jeopardy in a BIP 8 \napproach. Users demanding alternative consensus rules (or, worse, configuration flags to change consensus rules on \nindividual nodes with an expectation of use) makes this very complicated in the context of BIP 8. Instead of debating \nactivation parameters and entrenching individuals into running their own consensus rules, a flag day activation changes \nthe problem to one of simply encouraging upgrades, avoiding a lot of possibility for games. Of course in order to meet \nthis goal we still need significant time to pass between activation parameter release and activation. Given the delays \nlikely to result from debates around BIP 8 parameters, I don't think this is a huge loss. Capitalizing on current \ninterest and demand for Taproot further implies a shortened timeline (eg a year and a half instead of two) may be merited.\n\n3) The potential loss of hashpower is likely the biggest risk of this approach. It is derisked somewhat by the public \ncommitment of pool operators to Taproot activation, and can be de-risked further by seeking more immediate commitment \nprior to release. Still, given the desire to push for a forced-signaling approach by many, there is more significant \nrisk of loss of hashpower in today's approach. In an ideal world, we could do something more akin to BIP 9/BIP 8(false) \nto reduce risk of this further, but its increasingly likely that this is not possible. A flag-day which takes advantage \nof the nonstandardness of Taproot transactions in current Bitcoin Core releases may suffice.\n\n4) Similar arguments apply as the above around the public commitment from pool operators to enforce the Taproot \nconsensus rules.\n\n5) Similar arguments apply as the discussion in (1).\n\n\nUltimately, the risk which is present in doing flag day activations (and the reason I've argued against them as a \n\"default\" in the past) are present as well in BIP 8(true), forced-signaling activations where community debate splits \nthe consensus rules across nodes. While such a deployment could delay Taproot somewhat, it sidesteps a sufficient amount \nof debate and resulting delay that I wouldn't be surprised if it did not. Further, Taproot has been worked on for many \nyears now with no apparent urgency from the many who are suddenly expressing activation urgency, making it more likely \nsuch urgency is artificial. Those who seek Taproot activation for Bitcoin market reasons should also rejoice - not only \ncan the market celebrate the final release of Taproot, but it gets a second celebratory event in 2022 when the \nactivation occurs.\n\nMatt\n\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html\n[2] https://bitcoinops.org/en/schorr-taproot-workshop/"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-02-28T17:20:05",
                "message_text_only": "On Sunday 28 February 2021 16:45:22 Matt Corallo via bitcoin-dev wrote:\n> many individuals are committing themselves to running\n> incompatible consensus rules.\n\nYet that is exactly what you propose herein...\n\n> Given this, it seems one way to keep the network in consensus would be to\n> simply activate taproot through a traditional, no-frills, flag-day (or\n> -height) activation with a flag day of roughly August, 2022.\n\nConcept NACK. This still has the same problems BIP149 would have had, as I \njust reminded in my last email to this ML:\n\n1) Such a chain does not indicate activation at all, leaving it unresolved and \ndebatable whether activation has occurred or not.\n2) As a result, it is also impractical to intentionally reject the softfork \nshould anyone decide to do so.\n\nSignalling is important to activation.\n\n> 2) The high node-level-adoption bar is one of the most critical goals, and\n> the one most currently in jeopardy in a BIP 8 approach.\n\nIt is only jeopardized if people continue to push for a LOT=False deployment \n(or this new proposal of yours).\n\nBIP 8 itself, with LOT=True, does not create such a risk at all.\n\n> Users demanding alternative consensus rules (or, worse, configuration flags\n> to change consensus rules on individual nodes with an expectation of use)\n> makes this very complicated in the context of BIP 8.\n\nAlternative consensus rules is exactly what you are proposing here.\n\nMore alternative rules to choose from just increase the risks. Two options is \nannoying, but adding a third for no reason is just absurd.\n\nLuke"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T17:29:36",
                "message_text_only": "I think you may have misunderstood my proposal. I'm not suggesting some people run BIP 8(true), some run BIP8(false), \nand some run a client which has a flag day, I'm suggesting a flag day activation instead of any BIP8-based activation. \nReplies to your further points inline.\n\nMatt\n\nOn 2/28/21 12:20, Luke Dashjr wrote:\n> On Sunday 28 February 2021 16:45:22 Matt Corallo via bitcoin-dev wrote:\n> Concept NACK. This still has the same problems BIP149 would have had, as I\n> just reminded in my last email to this ML:\n> \n> 1) Such a chain does not indicate activation at all, leaving it unresolved and\n> debatable whether activation has occurred or not.\n> 2) As a result, it is also impractical to intentionally reject the softfork\n> should anyone decide to do so.\n> \n> Signalling is important to activation.\n\nSeveral people responded disagreeing, including myself. I'll paste my response here in case you missed it:\n\nForced-signaling, or any form of signaling, does not materially change whether a soft fork can be seen to be safe to \nuse. Pieter wrote a great post[1] some time ago that goes into depth about the security of soft forks, but, while miners \ncan help to avoid the risk of forks, they aren't the determining factor in whether use of a fork should be considered \nsafe (ie the fork \"has activated\").\n\nNot only that, but the signaling methods used in BIP 8/9 (ie the version field in the block header) do not imply \nanything about whether mining pools are running full nodes which enforce the soft fork at all, only whether the pool has \nconfigured their stratum software to signal or not.\n\nUltimately, forced-signaling, or signaling period, are not a substitute for having a broad set of upgraded nodes across \nthe network, including an overwhelming majority of economically-active nodes, enforcing the rules of a new fork. As this \ncan be difficult to measure, waiting some time after a fork and examining upgrade patterns across the network is important.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html"
            },
            {
                "author": "Jeremy",
                "date": "2021-02-28T19:43:53",
                "message_text_only": "I agree with much of the logic presented by Matt here.\n\nBIP8 was intended to be simpler to agree on to maintain consensus, yet we\nfind ourselves in a situation where a \"tiny\" parameter has the potential to\ncause great network disruption and confusion (rationality is not too useful\na concept here given differing levels of sophistication and information).\nIt is therefore much simpler and more likely to be universally understood\nby all network participants to just have a flag day. It is easier to\ncommunicate what users should do and when.\n\nThis is ultimately not coercive to users because the upgrade for Taproot\nitself is provable and analyzable on its own, but activation parameters\nbased on what % of economically relevant nodes are running an upgrade by a\ncertain date are not. Selecting these sorts of complicated consensus\nparameters may ultimately present more opportunity for a cooptable\nconsensus process than something more straightforward.\n\n\nThat said, a few points strike me as worth delving into.\n\n\n1) Con: Mandatory signalling is no different than a flag day. Mandatory\nsignaling is effectively 2 flag days -- one for the signaling rule, 1 for\nthe taproot type. The reason for the 2 week gap between flag day for\nsignaling and flag day for taproot rules is, more or less, so that nodes\nwho aren't taproot ready at the 1st flag day do not end up SPV mining\n(using standardness rules in mempool prevents them from mining an invalid\nblock on top of a valid tip, but does not ensure the tip is valid).\n2) Con: Releasing a flag day without releasing the LOT=true code leading up\nto that flag day means that clients would not be fully compatible with an\nearly activation that could be proposed before the flag day is reached.\nE.g., LOT=true is a flag day that retains the possibility of being\ncompatible with other BIP8 releases without changing software.\n3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm\npersonally skeptical that early activation is/was ever a good idea. A fixed\nactivation date may be largely superior for business purposes, software\nengineering schedules, etc. I think even with signaling BIP8, it would be\npossibly superior to activate rules at a fixed date (or a quantized set of\nfixed dates, e.g. guaranteeing at least 3 months but maybe more).\n4) Pro: part of the argument for BIP-8=false is that it is possible that\nthe rule could not activate, if signaling does not occur, providing\nadditional stopgap against dev collusion and bugs. But BIP-8 can activate\nimmediately (with start times being proposed 1 month after release?) so we\ndon't have certainty around how much time there is for that secondary\nreview process (read -- I think it isn't that valuable) and if there *is* a\ndeadly bug discovered, we might want to hard-fork to fix it even if it\nisn't yet signaled for (e.g., if the rule activates it enables more mining\nreward). So I think that it's a healthier mindset to release a with\ndefinite deadline and not rule out having to do a hard fork if there is a\ngrave issue (we shouldn't ever release a SF if we think this is at all\nlikely, mind you).\n5) Con: It's already taken so long for taproot, the schedule around taproot\nwas based on the idea it could early activate, 2022 is now too far away. I\ndon't know how to defray this other than, if your preferred idea is 1 year\nflag day, to do that via LOT=true so that taproot can still have early\nactivation if desired.\n\nOverall I agree with the point that all the contention around LOT, makes a\nflag day look not so bad. And something closer to a flag day might not be\nso bad either for future forks as well.\n\nHowever, I think given the appetite for early activation, if a flag day is\ndesired I think LOT=true is the best option at this time as it allows our\nflag day to remain compatible with such an early activation.\n\nI think we can also clearly communicate that LOT=true for Taproot is not a\nprecedent setting occurence for any future forks (hold me accountable to\nnot using this as precedent this should I ever advocate for a SF with\nsimilar release parameters).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/5fff5317/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T19:51:55",
                "message_text_only": "Note further that mandatory signaling isn't \"just\" a flag day - unlike a Taproot flag day (where miners running Bitcoin \nCore unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from \nmy original post - it results in any miner who has not taken active action (and ensured every part of their often-large \ninfrastructure has been correctly reconfigured) generating invalid blocks.\n\nAs for \"Taproot\" took too long, hey, at least if its locked in people can just build things assuming it exists. Some \nalready are, but once its clearly locked in, there's no reason to not continue other work at the same time.\n\nMatt\n\nOn 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n> I agree with much of the logic presented by Matt here.\n> \n> BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a \"tiny\" \n> parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept \n> here given differing levels of sophistication and information). It is therefore much simpler and more likely to be \n> universally understood by all network participants to just have a flag day. It is easier to communicate what users \n> should do and when.\n> \n> This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its own, \n> but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date are \n> not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a cooptable \n> consensus process than something more straightforward.\n> \n> \n> That said, a few points strike me as worth delving into.\n> \n> \n> 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days -- one for \n> the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag day \n> for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV mining \n> (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not \n> ensure the tip is valid).\n> 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients would \n> not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g., LOT=true \n> is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.\n> 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm personally skeptical that early activation is/was \n> ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering schedules, \n> etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a quantized \n> set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n> 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if signaling does \n> not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with start \n> times being proposed 1 month after release?) so we don't have certainty around how much time there is for that secondary \n> review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to \n> hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining reward). So I \n> think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if \n> there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).\n> 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early \n> activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year flag \n> day, to do that via LOT=true so that taproot can still have early activation if desired.\n> \n> Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something \n> closer to a flag day might not be so bad either for future forks as well.\n> \n> However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best option \n> at this time as it allows our flag day to remain compatible with such an early activation.\n> \n> I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any future \n> forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release \n> parameters).\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jeremy",
                "date": "2021-02-28T20:02:15",
                "message_text_only": "Miners still can generate invalid blocks as a result of SPV mining, and it\ncould be profitable to do \"bad block enhanced selfish mining\" to take\nadvantage of it.\n\n\nHard to analyze exactly what that looks like, but...\n\nE.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate\nto mine bad blocks would mean 1/4th of the time you could make 20% of the\nhashrate mine bad blocks, overall a > 5% (series expansion) benefit. One\ncould analyze out that the lost hash rate for bad blocks only matters for\nthe first difficulty adjustment period you're doing this for too, as the\nhashrate drop will be accounted for -- but then a miner can switch back to\nmining valid chain, giving themselves a larger % of hashrate.\n\nSo it is still possible that an un-upgraded miner will fail part 3, and\nattempting to accommodate un-upgraded miners leads to some nasty\noscillating hashrate being optimal.\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> Note further that mandatory signaling isn't \"just\" a flag day - unlike a\n> Taproot flag day (where miners running Bitcoin\n> Core unmodified today will not generate invalid blocks), a mandatory\n> signaling flag day blatantly ignores goal (3) from\n> my original post - it results in any miner who has not taken active action\n> (and ensured every part of their often-large\n> infrastructure has been correctly reconfigured) generating invalid blocks.\n>\n> As for \"Taproot\" took too long, hey, at least if its locked in people can\n> just build things assuming it exists. Some\n> already are, but once its clearly locked in, there's no reason to not\n> continue other work at the same time.\n>\n> Matt\n>\n> On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n> > I agree with much of the logic presented by Matt here.\n> >\n> > BIP8 was intended to be simpler to agree on to maintain consensus, yet\n> we find ourselves in a situation where a \"tiny\"\n> > parameter has the potential to cause great network disruption and\n> confusion (rationality is not too useful a concept\n> > here given differing levels of sophistication and information). It is\n> therefore much simpler and more likely to be\n> > universally understood by all network participants to just have a flag\n> day. It is easier to communicate what users\n> > should do and when.\n> >\n> > This is ultimately not coercive to users because the upgrade for Taproot\n> itself is provable and analyzable on its own,\n> > but activation parameters based on what % of economically relevant nodes\n> are running an upgrade by a certain date are\n> > not. Selecting these sorts of complicated consensus parameters may\n> ultimately present more opportunity for a cooptable\n> > consensus process than something more straightforward.\n> >\n> >\n> > That said, a few points strike me as worth delving into.\n> >\n> >\n> > 1) Con: Mandatory signalling is no different than a flag day. Mandatory\n> signaling is effectively 2 flag days -- one for\n> > the signaling rule, 1 for the taproot type. The reason for the 2 week\n> gap between flag day for signaling and flag day\n> > for taproot rules is, more or less, so that nodes who aren't taproot\n> ready at the 1st flag day do not end up SPV mining\n> > (using standardness rules in mempool prevents them from mining an\n> invalid block on top of a valid tip, but does not\n> > ensure the tip is valid).\n> > 2) Con: Releasing a flag day without releasing the LOT=true code leading\n> up to that flag day means that clients would\n> > not be fully compatible with an early activation that could be proposed\n> before the flag day is reached. E.g., LOT=true\n> > is a flag day that retains the possibility of being compatible with\n> other BIP8 releases without changing software.\n> > 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm\n> personally skeptical that early activation is/was\n> > ever a good idea. A fixed activation date may be largely superior for\n> business purposes, software engineering schedules,\n> > etc. I think even with signaling BIP8, it would be possibly superior to\n> activate rules at a fixed date (or a quantized\n> > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n> > 4) Pro: part of the argument for BIP-8=false is that it is possible that\n> the rule could not activate, if signaling does\n> > not occur, providing additional stopgap against dev collusion and bugs.\n> But BIP-8 can activate immediately (with start\n> > times being proposed 1 month after release?) so we don't have certainty\n> around how much time there is for that secondary\n> > review process (read -- I think it isn't that valuable) and if there\n> *is* a deadly bug discovered, we might want to\n> > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule\n> activates it enables more mining reward). So I\n> > think that it's a healthier mindset to release a with definite deadline\n> and not rule out having to do a hard fork if\n> > there is a grave issue (we shouldn't ever release a SF if we think this\n> is at all likely, mind you).\n> > 5) Con: It's already taken so long for taproot, the schedule around\n> taproot was based on the idea it could early\n> > activate, 2022 is now too far away. I don't know how to defray this\n> other than, if your preferred idea is 1 year flag\n> > day, to do that via LOT=true so that taproot can still have early\n> activation if desired.\n> >\n> > Overall I agree with the point that all the contention around LOT, makes\n> a flag day look not so bad. And something\n> > closer to a flag day might not be so bad either for future forks as well.\n> >\n> > However, I think given the appetite for early activation, if a flag day\n> is desired I think LOT=true is the best option\n> > at this time as it allows our flag day to remain compatible with such an\n> early activation.\n> >\n> > I think we can also clearly communicate that LOT=true for Taproot is not\n> a precedent setting occurence for any future\n> > forks (hold me accountable to not using this as precedent this should I\n> ever advocate for a SF with similar release\n> > parameters).\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/df85cf85/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-02-28T20:19:59",
                "message_text_only": "In the attempt to change consensus rules there is a simple set of choices:\n\n1) hard fork: creates a chain split\n2) soft fork: creates a chain split\n3) 51% attack: does not create a chain split\n\nThe presumption being that one can never assume 100% explicit adoption of any rule change.\n\nA 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than majority threshold, as has been done in the past.\n\nMost of the discussion I\u2019ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine and/or accept bitcoin - nobody is in charge.\n\nThe majority of those who mine can choose to enforce censorship any time they want. They don\u2019t need anyone\u2019s permission. No power is given to them by developers or anyone else. They have that power based on their own capital invested.\n\nSimilarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level of participation that wants to go along. Anyone can do this, it requires nobody\u2019s permission. Furthermore, it is possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.\n\nBut if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If there is some other objective, it\u2019s not clear to me what it is.\n\ne\n\n> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeff\n> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do \"bad block enhanced selfish mining\" to take advantage of it.\n> \n> \n> Hard to analyze exactly what that looks like, but...\n> \n> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving themselves a larger % of hashrate.\n> \n> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners leads to some nasty oscillating hashrate being optimal.\n> \n> \n> --\n> @JeremyRubin\n> \n> \n>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com> wrote:\n>> Note further that mandatory signaling isn't \"just\" a flag day - unlike a Taproot flag day (where miners running Bitcoin \n>> Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from \n>> my original post - it results in any miner who has not taken active action (and ensured every part of their often-large \n>> infrastructure has been correctly reconfigured) generating invalid blocks.\n>> \n>> As for \"Taproot\" took too long, hey, at least if its locked in people can just build things assuming it exists. Some \n>> already are, but once its clearly locked in, there's no reason to not continue other work at the same time.\n>> \n>> Matt\n>> \n>> On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n>> > I agree with much of the logic presented by Matt here.\n>> > \n>> > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a \"tiny\" \n>> > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept \n>> > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be \n>> > universally understood by all network participants to just have a flag day. It is easier to communicate what users \n>> > should do and when.\n>> > \n>> > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its own, \n>> > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date are \n>> > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a cooptable \n>> > consensus process than something more straightforward.\n>> > \n>> > \n>> > That said, a few points strike me as worth delving into.\n>> > \n>> > \n>> > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days -- one for \n>> > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag day \n>> > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV mining \n>> > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not \n>> > ensure the tip is valid).\n>> > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients would \n>> > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g., LOT=true \n>> > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.\n>> > 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm personally skeptical that early activation is/was \n>> > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering schedules, \n>> > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a quantized \n>> > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n>> > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if signaling does \n>> > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with start \n>> > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that secondary \n>> > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to \n>> > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining reward). So I \n>> > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if \n>> > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).\n>> > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early \n>> > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year flag \n>> > day, to do that via LOT=true so that taproot can still have early activation if desired.\n>> > \n>> > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something \n>> > closer to a flag day might not be so bad either for future forks as well.\n>> > \n>> > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best option \n>> > at this time as it allows our flag day to remain compatible with such an early activation.\n>> > \n>> > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any future \n>> > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release \n>> > parameters).\n>> > \n>> > \n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> > \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/7aaf54ca/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T20:20:56",
                "message_text_only": "SPV mining has been curtailed somewhat to only apply for a brief period of time (based on public statements) since the \nlast time SPV mining caused a fork. Indeed, if you can make other miners mine on top of an invalid block, you can make \nmoney by reducing the difficulty, but that is true as much today as during a fork. Still, I think you've made my point - \nsomeone has to take an active, malicious action in order to mine a bad block, vs with forced signaling, someone only \nneeds to forget to reconfigure one out of one hundred pool servers they operate.\n\nMatt\n\nOn 2/28/21 15:02, Jeremy wrote:\n> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do \"bad block enhanced \n> selfish mining\" to take advantage of it.\n> \n> \n> Hard to analyze exactly what that looks like, but...\n> \n> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the \n> time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze \n> out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for \n> too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving \n> themselves a larger % of hashrate.\n> \n> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners \n> leads to some nasty oscillating hashrate being optimal.\n> \n> \n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>\n> \n> \n> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n> \n>     Note further that mandatory signaling isn't \"just\" a flag day - unlike a Taproot flag day (where miners running Bitcoin\n>     Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from\n>     my original post - it results in any miner who has not taken active action (and ensured every part of their often-large\n>     infrastructure has been correctly reconfigured) generating invalid blocks.\n> \n>     As for \"Taproot\" took too long, hey, at least if its locked in people can just build things assuming it exists. Some\n>     already are, but once its clearly locked in, there's no reason to not continue other work at the same time.\n> \n>     Matt\n> \n>     On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n>      > I agree with much of the logic presented by Matt here.\n>      >\n>      > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a\n>     \"tiny\"\n>      > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept\n>      > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be\n>      > universally understood by all network participants to just have a flag day. It is easier to communicate what users\n>      > should do and when.\n>      >\n>      > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its\n>     own,\n>      > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date\n>     are\n>      > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a\n>     cooptable\n>      > consensus process than something more straightforward.\n>      >\n>      >\n>      > That said, a few points strike me as worth delving into.\n>      >\n>      >\n>      > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --\n>     one for\n>      > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag\n>     day\n>      > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV\n>     mining\n>      > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not\n>      > ensure the tip is valid).\n>      > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients\n>     would\n>      > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,\n>     LOT=true\n>      > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.\n>      > 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm personally skeptical that early activation\n>     is/was\n>      > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering\n>     schedules,\n>      > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a\n>     quantized\n>      > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n>      > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if\n>     signaling does\n>      > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with\n>     start\n>      > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that\n>     secondary\n>      > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to\n>      > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining\n>     reward). So I\n>      > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if\n>      > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).\n>      > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early\n>      > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year\n>     flag\n>      > day, to do that via LOT=true so that taproot can still have early activation if desired.\n>      >\n>      > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something\n>      > closer to a flag day might not be so bad either for future forks as well.\n>      >\n>      > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best\n>     option\n>      > at this time as it allows our flag day to remain compatible with such an early activation.\n>      >\n>      > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any\n>     future\n>      > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release\n>      > parameters).\n>      >\n>      >\n>      > _______________________________________________\n>      > bitcoin-dev mailing list\n>      > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>      > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>      >\n>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-02-28T20:25:15",
                "message_text_only": "Glad you asked! Yes, your goal here is #4 on the list of goals I laid out at [1], which I referenced and specifically \naddressed each of in the OP of this thread.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html\n\nOn 2/28/21 15:19, Eric Voskuil wrote:\n> In the attempt to change consensus rules there is a simple set of choices:\n> \n> 1) hard fork: creates a chain split\n> 2) soft fork: creates a chain split\n> 3) 51% attack: does not create a chain split\n> \n> The presumption being that one can never assume 100% explicit adoption of any rule change.\n> \n> A 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some \n> level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than \n> majority threshold, as has been done in the past.\n> \n> Most of the discussion I\u2019ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine \n> and/or accept bitcoin - nobody is in charge.\n> \n> The majority of those who mine can choose to enforce censorship any time they want. They don\u2019t need anyone\u2019s permission. \n> No power is given to them by developers or anyone else. They have that power based on their own capital invested.\n> \n> Similarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level \n> of participation that wants to go along. Anyone can do this, it requires nobody\u2019s permission. Furthermore, it is \n> possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.\n> \n> But if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If \n> there is some other objective, it\u2019s not clear to me what it is.\n> \n> e\n> \n>> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> \ufeff\n>> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do \"bad block \n>> enhanced selfish mining\" to take advantage of it.\n>>\n>>\n>> Hard to analyze exactly what that looks like, but...\n>>\n>> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the \n>> time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze \n>> out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this \n>> for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving \n>> themselves a larger % of hashrate.\n>>\n>> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners \n>> leads to some nasty oscillating hashrate being optimal.\n>>\n>>\n>> --\n>> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>\n>>\n>>\n>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n>>\n>>     Note further that mandatory signaling isn't \"just\" a flag day - unlike a Taproot flag day (where miners running\n>>     Bitcoin\n>>     Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3)\n>>     from\n>>     my original post - it results in any miner who has not taken active action (and ensured every part of their\n>>     often-large\n>>     infrastructure has been correctly reconfigured) generating invalid blocks.\n>>\n>>     As for \"Taproot\" took too long, hey, at least if its locked in people can just build things assuming it exists. Some\n>>     already are, but once its clearly locked in, there's no reason to not continue other work at the same time.\n>>\n>>     Matt\n>>\n>>     On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n>>     > I agree with much of the logic presented by Matt here.\n>>     >\n>>     > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a\n>>     \"tiny\"\n>>     > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a\n>>     concept\n>>     > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be\n>>     > universally understood by all network participants to just have a flag day. It is easier to communicate what users\n>>     > should do and when.\n>>     >\n>>     > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on\n>>     its own,\n>>     > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain\n>>     date are\n>>     > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a\n>>     cooptable\n>>     > consensus process than something more straightforward.\n>>     >\n>>     >\n>>     > That said, a few points strike me as worth delving into.\n>>     >\n>>     >\n>>     > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --\n>>     one for\n>>     > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and\n>>     flag day\n>>     > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV\n>>     mining\n>>     > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not\n>>     > ensure the tip is valid).\n>>     > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients\n>>     would\n>>     > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,\n>>     LOT=true\n>>     > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.\n>>     > 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm personally skeptical that early activation\n>>     is/was\n>>     > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering\n>>     schedules,\n>>     > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a\n>>     quantized\n>>     > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n>>     > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if\n>>     signaling does\n>>     > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with\n>>     start\n>>     > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that\n>>     secondary\n>>     > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to\n>>     > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining\n>>     reward). So I\n>>     > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard\n>>     fork if\n>>     > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).\n>>     > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early\n>>     > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year\n>>     flag\n>>     > day, to do that via LOT=true so that taproot can still have early activation if desired.\n>>     >\n>>     > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something\n>>     > closer to a flag day might not be so bad either for future forks as well.\n>>     >\n>>     > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best\n>>     option\n>>     > at this time as it allows our flag day to remain compatible with such an early activation.\n>>     >\n>>     > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any\n>>     future\n>>     > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release\n>>     > parameters).\n>>     >\n>>     >\n>>     > _______________________________________________\n>>     > bitcoin-dev mailing list\n>>     > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>>     >\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-02-28T20:38:13",
                "message_text_only": "I think it has been shown that an understanding of reasonableness is not universal, making any assertion about it as a collective goal kind of self-defeating. The question is what is achievable, not what is reasonable. I\u2019m not making any value judgements here. Simply pointing out that anything other than a successful 51% attack will create a split.\n\ne\n\n> On Feb 28, 2021, at 12:25, Matt Corallo <lf-lists at mattcorallo.com> wrote:\n> \n> \ufeffGlad you asked! Yes, your goal here is #4 on the list of goals I laid out at [1], which I referenced and specifically addressed each of in the OP of this thread.\n> \n> [1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html\n> \n>> On 2/28/21 15:19, Eric Voskuil wrote:\n>> In the attempt to change consensus rules there is a simple set of choices:\n>> 1) hard fork: creates a chain split\n>> 2) soft fork: creates a chain split\n>> 3) 51% attack: does not create a chain split\n>> The presumption being that one can never assume 100% explicit adoption of any rule change.\n>> A 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than majority threshold, as has been done in the past.\n>> Most of the discussion I\u2019ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine and/or accept bitcoin - nobody is in charge.\n>> The majority of those who mine can choose to enforce censorship any time they want. They don\u2019t need anyone\u2019s permission. No power is given to them by developers or anyone else. They have that power based on their own capital invested.\n>> Similarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level of participation that wants to go along. Anyone can do this, it requires nobody\u2019s permission. Furthermore, it is possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.\n>> But if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If there is some other objective, it\u2019s not clear to me what it is.\n>> e\n>>>> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \n>>> \ufeff\n>>> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do \"bad block enhanced selfish mining\" to take advantage of it.\n>>> \n>>> \n>>> Hard to analyze exactly what that looks like, but...\n>>> \n>>> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving themselves a larger % of hashrate.\n>>> \n>>> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners leads to some nasty oscillating hashrate being optimal.\n>>> \n>>> \n>>> --\n>>> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>\n>>> \n>>> \n>>>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:\n>>> \n>>>    Note further that mandatory signaling isn't \"just\" a flag day - unlike a Taproot flag day (where miners running\n>>>    Bitcoin\n>>>    Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3)\n>>>    from\n>>>    my original post - it results in any miner who has not taken active action (and ensured every part of their\n>>>    often-large\n>>>    infrastructure has been correctly reconfigured) generating invalid blocks.\n>>> \n>>>    As for \"Taproot\" took too long, hey, at least if its locked in people can just build things assuming it exists. Some\n>>>    already are, but once its clearly locked in, there's no reason to not continue other work at the same time.\n>>> \n>>>    Matt\n>>> \n>>>>    On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:\n>>>    > I agree with much of the logic presented by Matt here.\n>>>    >\n>>>    > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a\n>>>    \"tiny\"\n>>>    > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a\n>>>    concept\n>>>    > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be\n>>>    > universally understood by all network participants to just have a flag day. It is easier to communicate what users\n>>>    > should do and when.\n>>>    >\n>>>    > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on\n>>>    its own,\n>>>    > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain\n>>>    date are\n>>>    > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a\n>>>    cooptable\n>>>    > consensus process than something more straightforward.\n>>>    >\n>>>    >\n>>>    > That said, a few points strike me as worth delving into.\n>>>    >\n>>>    >\n>>>    > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --\n>>>    one for\n>>>    > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and\n>>>    flag day\n>>>    > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV\n>>>    mining\n>>>    > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not\n>>>    > ensure the tip is valid).\n>>>    > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients\n>>>    would\n>>>    > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,\n>>>    LOT=true\n>>>    > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.\n>>>    > 3) Pro: BIP-8 is partially in service of \"early activation\" and . I'm personally skeptical that early activation\n>>>    is/was\n>>>    > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering\n>>>    schedules,\n>>>    > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a\n>>>    quantized\n>>>    > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).\n>>>    > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if\n>>>    signaling does\n>>>    > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with\n>>>    start\n>>>    > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that\n>>>    secondary\n>>>    > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to\n>>>    > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining\n>>>    reward). So I\n>>>    > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard\n>>>    fork if\n>>>    > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).\n>>>    > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early\n>>>    > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year\n>>>    flag\n>>>    > day, to do that via LOT=true so that taproot can still have early activation if desired.\n>>>    >\n>>>    > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something\n>>>    > closer to a flag day might not be so bad either for future forks as well.\n>>>    >\n>>>    > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best\n>>>    option\n>>>    > at this time as it allows our flag day to remain compatible with such an early activation.\n>>>    >\n>>>    > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any\n>>>    future\n>>>    > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release\n>>>    > parameters).\n>>>    >\n>>>    >\n>>>    > _______________________________________________\n>>>    > bitcoin-dev mailing list\n>>>    > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>>    > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>    <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>>>    >\n>>> \n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Straight Flag Day (Height) Taproot Activation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Jeremy",
                "Luke Dashjr",
                "Matt Corallo"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 58943
        }
    },
    {
        "title": "[bitcoin-dev] LOT=False is dangerous and shouldn't be used",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2021-02-28T19:33:30",
                "message_text_only": "(Note: I am writing this as a general case against LOT=False, but using \nTaproot simply as an example softfork. Note that this is addressing \nactivation under the assumption that the softfork is ethical and has \nsufficient community support. If those criteria have not been met, no \nactivation should be deployed at all, of any type.)\n\nAs we saw in 2017 with BIP 9, coordinating activation by miner signal alone, \ndespite its potential benefits, also leaves open the door to a miner veto. \nThis was never the intended behaviour, and a bug, which took a rushed \ndeployment of BIP148 to address. LOT=False would reintroduce that same bug.\nIt wouldn't be much different than adding back the inflation bug \n(CVE-2018-17144) and trusting miners not to exploit it.\n\nSome have tried to spin LOT=True as some kind of punishment for miners or \nreactive \"counter-attack\". Rather, it is simply a fallback to avoid \nregression on this and other bugs. \"Flag day\" activation is not fundamentally \nflawed or dangerous, just slow since everyone needs time to upgrade.\nBIP 8(LOT=True) combines the certainty of such a flag day, with the speed \nimprovement of a MASF, so that softforks can be activated both reasonably \nquick and safely.\n\nIn the normal path, and that which BIP8(True) best incentivises, miners will \nsimply upgrade and signal, and activation can occur as soon as the economic \nmajority is expected to have had time to upgrade. In the worst-case path, the \nbehaviour of LOT=True is the least-harmful result: unambiguous activation and \nenforcement by the economy, with miners either deciding to make an \nanti-Taproot(eg) altcoin, or continue mining Bitcoin. Even if ALL the miners \nrevolt against the softfork, the LOT=True nodes are simply faced with a \nchoice to hardfork (replacing the miners with a PoW change) or concede - they \ndo not risk vulnerability or loss.\n\nWith LOT=False in the picture, however, things can get messy: some users will \nenforce Taproot(eg) (those running LOT=True), while others will not (those \nwith LOT=False). Users with LOT=True will still get all the safety thereof, \nbut those with LOT=False will (in the event of miners deciding to produce a \nchain split) face an unreliable chain, being replaced by the LOT=True chain \nevery time it overtakes the LOT=False chain in work. For 2 weeks, users with \nLOT=False would not have a usable network. The only way to resolve this would \nbe to upgrade to LOT=True or to produce a softfork that makes an activated \nchain invalid (thereby taking the anti-Taproot path). Even if nobody ran \nLOT=True (very unlikely), LOT=False would still fail because users would be \nfaced with either accepting the loss of Taproot(eg), or re-deploying from \nscratch with LOT=True. It accomplishes nothing compared to just deploying \nLOT=True from the beginning. Furthermore, this process creates a lot of \nconfusion for users (\"Yep, I upgraded for Taproot(eg). Wait, you mean I have \nto do it AGAIN?\"), and in some scenarios additional code may be needed to \nhandle the subsequent upgrade cleanly.\n\nTo make matters worse for LOT=False, giving miners a veto also creates an \nincentive to second-guess the decision to activate and/or hold the activation \nhostage. This is a direct result of the bug giving them a power they weren't \nintended to have. Even if we trust miners to act ethically, that does not \njustify sustaining the bug creating both a possibility and incentive to \nbehave unethically.\n\nSo in all possible scenarios, LOT=False puts users and the network at \nsignificant risk. In all possible scenarios, LOT=True minimises risk to \neveryone and has no risk to users running LOT=True.\n\nThe overall risk is maximally reduced by LOT=True being the only deployed \nparameter, and any introduction of LOT=False only increases risk probability \nand severity.\n\nFor all these reasons, I regret adding LOT as an option to BIP 8, and think it \nwould be best to remove it entirely, with all deployments in the future \nbehaving as LOT=True. I do also recognise that there is not yet consensus on \nthis, and for that reason I have not taken action (nor intend to) to remove \nLOT from BIP 8. However, the fact remains that LOT=False should not be used, \nand it is best if every softfork is deployed with LOT=True.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "LOT=False is dangerous and shouldn't be used",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4271
        }
    }
]