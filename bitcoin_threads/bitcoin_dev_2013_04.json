[
    {
        "title": "[Bitcoin-development] Bitcoin meets the Semantic Web....",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-01T07:59:02",
                "message_text_only": "I'm working on porting crypto currencies to the semantic web.\n\nThe advantages of this is that pages can then become machine readable on\nthe web allowing new types of innovation and spreading bitcoin information\nto a wider audience.\n\nThe first step that needs to be done is to create a \"vocabulary\" for\nbitcoin.\n\nWhat this means is like a dictionary of terms that can be put down in a\nmachine readable standard (called RDF).\n\nI was wondering if anyone has worked on this before or if there is a human\nreadable \"glossary\" for bitcoin that I could take text from?\n\nseeAlso: https://bitcointalk.org/index.php?topic=163705.0\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130401/7f3fa31b/attachment.html>"
            },
            {
                "author": "Harald Schilly",
                "date": "2013-04-01T09:35:28",
                "message_text_only": "On Mon, Apr 1, 2013 at 9:59 AM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> The first step that needs to be done is to create a \"vocabulary\" for\n> bitcoin.\n\nHi, have you checked out databases like OKFN and searched for existing\nvocabularies for payments? I don't think it's a great idea to\nre-invent it, if there is already some existing protocol.\n\nrandom search gave me that:\n\nhttp://schema.org/PaymentMethod\n\nhttp://www.heppnetz.de/ontologies/goodrelations/v1#PayPal << adding\nsomething right here for bitcoin!? (diners club and similar also exist\nthere)\n\npayment relationships:\nhttp://iig2.com/b2bo/ns.html#\n\nmore search results:\nhttp://lov.okfn.org/dataset/lov/search/#s=payment\n\nHarald"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-01T19:57:19",
                "message_text_only": "On 1 April 2013 11:35, Harald Schilly <harald at schil.ly> wrote:\n\n> On Mon, Apr 1, 2013 at 9:59 AM, Melvin Carvalho\n> <melvincarvalho at gmail.com> wrote:\n> > The first step that needs to be done is to create a \"vocabulary\" for\n> > bitcoin.\n>\n> Hi, have you checked out databases like OKFN and searched for existing\n> vocabularies for payments? I don't think it's a great idea to\n> re-invent it, if there is already some existing protocol.\n>\n> random search gave me that:\n>\n> http://schema.org/PaymentMethod\n>\n> http://www.heppnetz.de/ontologies/goodrelations/v1#PayPal << adding\n> something right here for bitcoin!? (diners club and similar also exist\n> there)\n>\n> payment relationships:\n> http://iig2.com/b2bo/ns.html#\n>\n> more search results:\n> http://lov.okfn.org/dataset/lov/search/#s=payment\n>\n\n\nThanks for the pointers.  I am aware of most of this work, indeed I speak\nregularly to many of the authors.\n\nI will reuse as much as possible, but some terms will be bitcoin specific.\n\nI came across:\n\nhttps://en.bitcoin.it/wiki/Bitcoin_glossary\n\nWhich is really nice.\n\nQuestion is where to host it.  I have 3 ideas so far\n\n1. bitcoin.org -- logical, but no https and github doesnt let you set mime\ntypes\n\n2. w3id.org -- new site could be a good permanent location\n\n3. bitcoin.it wiki -- has https but im unsure i can set a mime type, anyone\nknow who maintains this?\n\n\n>\n> Harald\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130401/68dcef2c/attachment.html>"
            },
            {
                "author": "Harald Schilly",
                "date": "2013-04-01T20:13:36",
                "message_text_only": "On Mon, Apr 1, 2013 at 9:57 PM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> 1. bitcoin.org -- logical, but no https and github doesnt let you set mime\n> types\n\nThis one looks also logical to me. I'm not an semantic web expert, but\nfrom what you wrote I suggest to use a subdomain. Would this be\npossible for a schema? E.g. schema.bitcoin.org and it points to an\nindepedently run server for the files \u2026\n\nH"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin meets the Semantic Web....",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Harald Schilly"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3484
        }
    },
    {
        "title": "[Bitcoin-development] bitcoin pull requests",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-01T08:26:41",
                "message_text_only": "I was just looking at:\n\nhttps://bitcointalk.org/index.php?topic=4571.0\n\nI'm just curious if there is a possible attack vector here based on the\nfact that git uses the relatively week SHA1\n\nCould a seemingly innocuous pull request generate another file with a\nbackdoor/nonce combination that slips under the radar?\n\nApologies if this has come up before ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130401/ee3f75c4/attachment.html>"
            },
            {
                "author": "Petr Praus",
                "date": "2013-04-01T18:28:28",
                "message_text_only": "An attacker would have to find a collision between two specific pieces of\ncode - his malicious code and a useful innoculous code that would be\naccepted as pull request. This is the second, much harder case in the\nbirthday problem. When people talk about SHA-1 being broken they actually\nmean the first case in the birthday problem - find any two arbitrary values\nthat hash to the same value. So, no I don't think it's a feasible attack\nvector any time soon.\n\nBesides, with that kind of hashing power, it might be more feasible to\ncause problems in the chain by e.g. constantly splitting it.\n\n\nOn 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n> I was just looking at:\n>\n> https://bitcointalk.org/index.php?topic=4571.0\n>\n> I'm just curious if there is a possible attack vector here based on the\n> fact that git uses the relatively week SHA1\n>\n> Could a seemingly innocuous pull request generate another file with a\n> backdoor/nonce combination that slips under the radar?\n>\n> Apologies if this has come up before ...\n>\n>\n> ------------------------------------------------------------------------------\n> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> Rise to greatness in Intel's independent game demo contest.\n> Compete for recognition, cash, and the chance to get your game\n> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130401/8f2483a3/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-01T21:52:11",
                "message_text_only": "On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n\n> An attacker would have to find a collision between two specific pieces of\n> code - his malicious code and a useful innoculous code that would be\n> accepted as pull request. This is the second, much harder case in the\n> birthday problem. When people talk about SHA-1 being broken they actually\n> mean the first case in the birthday problem - find any two arbitrary values\n> that hash to the same value. So, no I don't think it's a feasible attack\n> vector any time soon.\n>\n> Besides, with that kind of hashing power, it might be more feasible to\n> cause problems in the chain by e.g. constantly splitting it.\n>\n\nOK, maybe im being *way* too paranoid here ... but what if someone had\naccess to github, could they replace one file with one they had prepared at\nsome point?\n\n\n>\n>\n> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n>\n>> I was just looking at:\n>>\n>> https://bitcointalk.org/index.php?topic=4571.0\n>>\n>> I'm just curious if there is a possible attack vector here based on the\n>> fact that git uses the relatively week SHA1\n>>\n>> Could a seemingly innocuous pull request generate another file with a\n>> backdoor/nonce combination that slips under the radar?\n>>\n>> Apologies if this has come up before ...\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n>> Rise to greatness in Intel's independent game demo contest.\n>> Compete for recognition, cash, and the chance to get your game\n>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130401/073ada84/attachment.html>"
            },
            {
                "author": "Will",
                "date": "2013-04-01T22:10:26",
                "message_text_only": "The threat of a SHA1 collision attack to insert a malicious pull request\nare tiny compared with the other threats - e.g. github being compromised,\none of the core developers' passwords being compromised, one of the core\ndevelopers going rogue, sourceforge (distribution site) being compromised\netc etc... believe me there's a lot more to worry about than a SHA1\nattack...\n\nNot meaning to scare, just to put things in perspective - this is why we\nall need to peer review each others commits and keep an eye out for\nsuspicious commits, leverage the benefits of this project being open source\nand easily peer reviewed.\n\nWill\n\n\nOn 1 April 2013 23:52, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n>\n>\n>\n> On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n>\n>> An attacker would have to find a collision between two specific pieces of\n>> code - his malicious code and a useful innoculous code that would be\n>> accepted as pull request. This is the second, much harder case in the\n>> birthday problem. When people talk about SHA-1 being broken they actually\n>> mean the first case in the birthday problem - find any two arbitrary values\n>> that hash to the same value. So, no I don't think it's a feasible attack\n>> vector any time soon.\n>>\n>> Besides, with that kind of hashing power, it might be more feasible to\n>> cause problems in the chain by e.g. constantly splitting it.\n>>\n>\n> OK, maybe im being *way* too paranoid here ... but what if someone had\n> access to github, could they replace one file with one they had prepared at\n> some point?\n>\n>\n>>\n>>\n>> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n>>\n>>>  I was just looking at:\n>>>\n>>> https://bitcointalk.org/index.php?topic=4571.0\n>>>\n>>> I'm just curious if there is a possible attack vector here based on the\n>>> fact that git uses the relatively week SHA1\n>>>\n>>> Could a seemingly innocuous pull request generate another file with a\n>>> backdoor/nonce combination that slips under the radar?\n>>>\n>>> Apologies if this has come up before ...\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n>>> Rise to greatness in Intel's independent game demo contest.\n>>> Compete for recognition, cash, and the chance to get your game\n>>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n>>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> Rise to greatness in Intel's independent game demo contest.\n> Compete for recognition, cash, and the chance to get your game\n> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130402/85ab62f9/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-01T22:27:51",
                "message_text_only": "On 2 April 2013 00:10, Will <will at phase.net> wrote:\n\n> The threat of a SHA1 collision attack to insert a malicious pull request\n> are tiny compared with the other threats - e.g. github being compromised,\n> one of the core developers' passwords being compromised, one of the core\n> developers going rogue, sourceforge (distribution site) being compromised\n> etc etc... believe me there's a lot more to worry about than a SHA1\n> attack...\n>\n> Not meaning to scare, just to put things in perspective - this is why we\n> all need to peer review each others commits and keep an eye out for\n> suspicious commits, leverage the benefits of this project being open source\n> and easily peer reviewed.\n>\n\nVery good points, and I think you're absolutely right.\n\nBut just running the numbers, to get the picture, based of scheiner's\nstatistics:\n\nhttp://www.schneier.com/blog/archives/2012/10/when_will_we_se.html\n\nWe're talking about a million terrahashes = 2^60 right?\n\nWith the block chain, you only have a 10 minute window, but with source\ncode you have a longer time to prepare.\n\nCouldnt this be done with an ASIC in about a week?\n\n\n\n>\n> Will\n>\n>\n> On 1 April 2013 23:52, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n>\n>>\n>>\n>>\n>> On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n>>\n>>> An attacker would have to find a collision between two specific pieces\n>>> of code - his malicious code and a useful innoculous code that would be\n>>> accepted as pull request. This is the second, much harder case in the\n>>> birthday problem. When people talk about SHA-1 being broken they actually\n>>> mean the first case in the birthday problem - find any two arbitrary values\n>>> that hash to the same value. So, no I don't think it's a feasible attack\n>>> vector any time soon.\n>>>\n>>> Besides, with that kind of hashing power, it might be more feasible to\n>>> cause problems in the chain by e.g. constantly splitting it.\n>>>\n>>\n>> OK, maybe im being *way* too paranoid here ... but what if someone had\n>> access to github, could they replace one file with one they had prepared at\n>> some point?\n>>\n>>\n>>>\n>>>\n>>> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n>>>\n>>>>  I was just looking at:\n>>>>\n>>>> https://bitcointalk.org/index.php?topic=4571.0\n>>>>\n>>>> I'm just curious if there is a possible attack vector here based on the\n>>>> fact that git uses the relatively week SHA1\n>>>>\n>>>> Could a seemingly innocuous pull request generate another file with a\n>>>> backdoor/nonce combination that slips under the radar?\n>>>>\n>>>> Apologies if this has come up before ...\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n>>>> Rise to greatness in Intel's independent game demo contest.\n>>>> Compete for recognition, cash, and the chance to get your game\n>>>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n>>>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n>> Rise to greatness in Intel's independent game demo contest.\n>> Compete for recognition, cash, and the chance to get your game\n>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130402/7b3c7f99/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2013-04-01T22:51:07",
                "message_text_only": "The attack Schneier is talking about is a collision attack (i.e. it\ncreates two messages with the same hash, but you don't get to choose\neither of the messages).  It's not a second preimage attack, which is\nwhat you would need to be able to create a message that hashes to the\nsame value of an existing message.\n\n(And it neither have anything to do with the birthday paradox, BTW -\nwhich relates to the chance of eventually finding two messages that\nhash to the same value by pure change)\n\nIf someone gets malicious code into the repo, it's going to be by\nsocial engineering, not by breaking the cyrpto.\n\nroy\n\nOn Tue, Apr 02, 2013 at 12:27:51AM +0200, Melvin Carvalho wrote:\n> On 2 April 2013 00:10, Will <will at phase.net> wrote:\n> \n> > The threat of a SHA1 collision attack to insert a malicious pull request\n> > are tiny compared with the other threats - e.g. github being compromised,\n> > one of the core developers' passwords being compromised, one of the core\n> > developers going rogue, sourceforge (distribution site) being compromised\n> > etc etc... believe me there's a lot more to worry about than a SHA1\n> > attack...\n> >\n> > Not meaning to scare, just to put things in perspective - this is why we\n> > all need to peer review each others commits and keep an eye out for\n> > suspicious commits, leverage the benefits of this project being open source\n> > and easily peer reviewed.\n> >\n> \n> Very good points, and I think you're absolutely right.\n> \n> But just running the numbers, to get the picture, based of scheiner's\n> statistics:\n> \n> http://www.schneier.com/blog/archives/2012/10/when_will_we_se.html\n> \n> We're talking about a million terrahashes = 2^60 right?\n> \n> With the block chain, you only have a 10 minute window, but with source\n> code you have a longer time to prepare.\n> \n> Couldnt this be done with an ASIC in about a week?\n> \n> \n> \n> >\n> > Will\n> >\n> >\n> > On 1 April 2013 23:52, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n> >\n> >>\n> >>\n> >>\n> >> On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n> >>\n> >>> An attacker would have to find a collision between two specific pieces\n> >>> of code - his malicious code and a useful innoculous code that would be\n> >>> accepted as pull request. This is the second, much harder case in the\n> >>> birthday problem. When people talk about SHA-1 being broken they actually\n> >>> mean the first case in the birthday problem - find any two arbitrary values\n> >>> that hash to the same value. So, no I don't think it's a feasible attack\n> >>> vector any time soon.\n> >>>\n> >>> Besides, with that kind of hashing power, it might be more feasible to\n> >>> cause problems in the chain by e.g. constantly splitting it.\n> >>>\n> >>\n> >> OK, maybe im being *way* too paranoid here ... but what if someone had\n> >> access to github, could they replace one file with one they had prepared at\n> >> some point?\n> >>\n> >>\n> >>>\n> >>>\n> >>> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n> >>>\n> >>>>  I was just looking at:\n> >>>>\n> >>>> https://bitcointalk.org/index.php?topic=4571.0\n> >>>>\n> >>>> I'm just curious if there is a possible attack vector here based on the\n> >>>> fact that git uses the relatively week SHA1\n> >>>>\n> >>>> Could a seemingly innocuous pull request generate another file with a\n> >>>> backdoor/nonce combination that slips under the radar?\n> >>>>\n> >>>> Apologies if this has come up before ...\n> >>>>\n> >>>>\n> >>>> ------------------------------------------------------------------------------\n> >>>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> >>>> Rise to greatness in Intel's independent game demo contest.\n> >>>> Compete for recognition, cash, and the chance to get your game\n> >>>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> >>>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> >>>> _______________________________________________\n> >>>> Bitcoin-development mailing list\n> >>>> Bitcoin-development at lists.sourceforge.net\n> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>\n> >>>>\n> >>>\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> >> Rise to greatness in Intel's independent game demo contest.\n> >> Compete for recognition, cash, and the chance to get your game\n> >> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> >> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >\n\n> ------------------------------------------------------------------------------\n> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> Rise to greatness in Intel's independent game demo contest.\n> Compete for recognition, cash, and the chance to get your game \n> on Steam. $5K grand prize plus 10 genre and skill prizes. \n> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Roy Badami",
                "date": "2013-04-01T22:54:17",
                "message_text_only": "And the moment I hit send I realised it's not necessarily true.\nConceivably, a collision attack might help you craft two commits (one\ngood, one bad) with the same hash.\n\nBut I still maintain what I just posted is true: if someone gets\nmalicious code into the repo, it's going to be by social engineering,\nnot by breaking the cyrpto.\n\nroy\n\n\nOn Mon, Apr 01, 2013 at 11:51:07PM +0100, Roy Badami wrote:\n> The attack Schneier is talking about is a collision attack (i.e. it\n> creates two messages with the same hash, but you don't get to choose\n> either of the messages).  It's not a second preimage attack, which is\n> what you would need to be able to create a message that hashes to the\n> same value of an existing message.\n> \n> (And it neither have anything to do with the birthday paradox, BTW -\n> which relates to the chance of eventually finding two messages that\n> hash to the same value by pure change)\n> \n> If someone gets malicious code into the repo, it's going to be by\n> social engineering, not by breaking the cyrpto.\n> \n> roy\n> \n> On Tue, Apr 02, 2013 at 12:27:51AM +0200, Melvin Carvalho wrote:\n> > On 2 April 2013 00:10, Will <will at phase.net> wrote:\n> > \n> > > The threat of a SHA1 collision attack to insert a malicious pull request\n> > > are tiny compared with the other threats - e.g. github being compromised,\n> > > one of the core developers' passwords being compromised, one of the core\n> > > developers going rogue, sourceforge (distribution site) being compromised\n> > > etc etc... believe me there's a lot more to worry about than a SHA1\n> > > attack...\n> > >\n> > > Not meaning to scare, just to put things in perspective - this is why we\n> > > all need to peer review each others commits and keep an eye out for\n> > > suspicious commits, leverage the benefits of this project being open source\n> > > and easily peer reviewed.\n> > >\n> > \n> > Very good points, and I think you're absolutely right.\n> > \n> > But just running the numbers, to get the picture, based of scheiner's\n> > statistics:\n> > \n> > http://www.schneier.com/blog/archives/2012/10/when_will_we_se.html\n> > \n> > We're talking about a million terrahashes = 2^60 right?\n> > \n> > With the block chain, you only have a 10 minute window, but with source\n> > code you have a longer time to prepare.\n> > \n> > Couldnt this be done with an ASIC in about a week?\n> > \n> > \n> > \n> > >\n> > > Will\n> > >\n> > >\n> > > On 1 April 2013 23:52, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n> > >\n> > >>\n> > >>\n> > >>\n> > >> On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n> > >>\n> > >>> An attacker would have to find a collision between two specific pieces\n> > >>> of code - his malicious code and a useful innoculous code that would be\n> > >>> accepted as pull request. This is the second, much harder case in the\n> > >>> birthday problem. When people talk about SHA-1 being broken they actually\n> > >>> mean the first case in the birthday problem - find any two arbitrary values\n> > >>> that hash to the same value. So, no I don't think it's a feasible attack\n> > >>> vector any time soon.\n> > >>>\n> > >>> Besides, with that kind of hashing power, it might be more feasible to\n> > >>> cause problems in the chain by e.g. constantly splitting it.\n> > >>>\n> > >>\n> > >> OK, maybe im being *way* too paranoid here ... but what if someone had\n> > >> access to github, could they replace one file with one they had prepared at\n> > >> some point?\n> > >>\n> > >>\n> > >>>\n> > >>>\n> > >>> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n> > >>>\n> > >>>>  I was just looking at:\n> > >>>>\n> > >>>> https://bitcointalk.org/index.php?topic=4571.0\n> > >>>>\n> > >>>> I'm just curious if there is a possible attack vector here based on the\n> > >>>> fact that git uses the relatively week SHA1\n> > >>>>\n> > >>>> Could a seemingly innocuous pull request generate another file with a\n> > >>>> backdoor/nonce combination that slips under the radar?\n> > >>>>\n> > >>>> Apologies if this has come up before ...\n> > >>>>\n> > >>>>\n> > >>>> ------------------------------------------------------------------------------\n> > >>>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > >>>> Rise to greatness in Intel's independent game demo contest.\n> > >>>> Compete for recognition, cash, and the chance to get your game\n> > >>>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > >>>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> > >>>> _______________________________________________\n> > >>>> Bitcoin-development mailing list\n> > >>>> Bitcoin-development at lists.sourceforge.net\n> > >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >>>>\n> > >>>>\n> > >>>\n> > >>\n> > >>\n> > >> ------------------------------------------------------------------------------\n> > >> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > >> Rise to greatness in Intel's independent game demo contest.\n> > >> Compete for recognition, cash, and the chance to get your game\n> > >> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > >> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> > >> _______________________________________________\n> > >> Bitcoin-development mailing list\n> > >> Bitcoin-development at lists.sourceforge.net\n> > >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >>\n> > >>\n> > >\n> \n> > ------------------------------------------------------------------------------\n> > Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > Rise to greatness in Intel's independent game demo contest.\n> > Compete for recognition, cash, and the chance to get your game \n> > on Steam. $5K grand prize plus 10 genre and skill prizes. \n> > Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> \n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> Rise to greatness in Intel's independent game demo contest.\n> Compete for recognition, cash, and the chance to get your game \n> on Steam. $5K grand prize plus 10 genre and skill prizes. \n> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2013-04-03T03:41:26",
                "message_text_only": "Maybe now that bitcoin is growing out of the toy phase it's an idea to\nstart gpg signing commits, like the Linux kernel (\nhttps://lwn.net/Articles/466468/).\n\nBut I suppose then we can't use github anymore to merge as-is and need\nmanual steps?\n\nWladimir\n\n\n\n\nOn Tue, Apr 2, 2013 at 12:54 AM, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> And the moment I hit send I realised it's not necessarily true.\n> Conceivably, a collision attack might help you craft two commits (one\n> good, one bad) with the same hash.\n>\n> But I still maintain what I just posted is true: if someone gets\n> malicious code into the repo, it's going to be by social engineering,\n> not by breaking the cyrpto.\n>\n> roy\n>\n>\n> On Mon, Apr 01, 2013 at 11:51:07PM +0100, Roy Badami wrote:\n> > The attack Schneier is talking about is a collision attack (i.e. it\n> > creates two messages with the same hash, but you don't get to choose\n> > either of the messages).  It's not a second preimage attack, which is\n> > what you would need to be able to create a message that hashes to the\n> > same value of an existing message.\n> >\n> > (And it neither have anything to do with the birthday paradox, BTW -\n> > which relates to the chance of eventually finding two messages that\n> > hash to the same value by pure change)\n> >\n> > If someone gets malicious code into the repo, it's going to be by\n> > social engineering, not by breaking the cyrpto.\n> >\n> > roy\n> >\n> > On Tue, Apr 02, 2013 at 12:27:51AM +0200, Melvin Carvalho wrote:\n> > > On 2 April 2013 00:10, Will <will at phase.net> wrote:\n> > >\n> > > > The threat of a SHA1 collision attack to insert a malicious pull\n> request\n> > > > are tiny compared with the other threats - e.g. github being\n> compromised,\n> > > > one of the core developers' passwords being compromised, one of the\n> core\n> > > > developers going rogue, sourceforge (distribution site) being\n> compromised\n> > > > etc etc... believe me there's a lot more to worry about than a SHA1\n> > > > attack...\n> > > >\n> > > > Not meaning to scare, just to put things in perspective - this is\n> why we\n> > > > all need to peer review each others commits and keep an eye out for\n> > > > suspicious commits, leverage the benefits of this project being open\n> source\n> > > > and easily peer reviewed.\n> > > >\n> > >\n> > > Very good points, and I think you're absolutely right.\n> > >\n> > > But just running the numbers, to get the picture, based of scheiner's\n> > > statistics:\n> > >\n> > > http://www.schneier.com/blog/archives/2012/10/when_will_we_se.html\n> > >\n> > > We're talking about a million terrahashes = 2^60 right?\n> > >\n> > > With the block chain, you only have a 10 minute window, but with source\n> > > code you have a longer time to prepare.\n> > >\n> > > Couldnt this be done with an ASIC in about a week?\n> > >\n> > >\n> > >\n> > > >\n> > > > Will\n> > > >\n> > > >\n> > > > On 1 April 2013 23:52, Melvin Carvalho <melvincarvalho at gmail.com>\n> wrote:\n> > > >\n> > > >>\n> > > >>\n> > > >>\n> > > >> On 1 April 2013 20:28, Petr Praus <petr at praus.net> wrote:\n> > > >>\n> > > >>> An attacker would have to find a collision between two specific\n> pieces\n> > > >>> of code - his malicious code and a useful innoculous code that\n> would be\n> > > >>> accepted as pull request. This is the second, much harder case in\n> the\n> > > >>> birthday problem. When people talk about SHA-1 being broken they\n> actually\n> > > >>> mean the first case in the birthday problem - find any two\n> arbitrary values\n> > > >>> that hash to the same value. So, no I don't think it's a feasible\n> attack\n> > > >>> vector any time soon.\n> > > >>>\n> > > >>> Besides, with that kind of hashing power, it might be more\n> feasible to\n> > > >>> cause problems in the chain by e.g. constantly splitting it.\n> > > >>>\n> > > >>\n> > > >> OK, maybe im being *way* too paranoid here ... but what if someone\n> had\n> > > >> access to github, could they replace one file with one they had\n> prepared at\n> > > >> some point?\n> > > >>\n> > > >>\n> > > >>>\n> > > >>>\n> > > >>> On 1 April 2013 03:26, Melvin Carvalho <melvincarvalho at gmail.com>\n> wrote:\n> > > >>>\n> > > >>>>  I was just looking at:\n> > > >>>>\n> > > >>>> https://bitcointalk.org/index.php?topic=4571.0\n> > > >>>>\n> > > >>>> I'm just curious if there is a possible attack vector here based\n> on the\n> > > >>>> fact that git uses the relatively week SHA1\n> > > >>>>\n> > > >>>> Could a seemingly innocuous pull request generate another file\n> with a\n> > > >>>> backdoor/nonce combination that slips under the radar?\n> > > >>>>\n> > > >>>> Apologies if this has come up before ...\n> > > >>>>\n> > > >>>>\n> > > >>>>\n> ------------------------------------------------------------------------------\n> > > >>>> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > > >>>> Rise to greatness in Intel's independent game demo contest.\n> > > >>>> Compete for recognition, cash, and the chance to get your game\n> > > >>>> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > > >>>> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> > > >>>> _______________________________________________\n> > > >>>> Bitcoin-development mailing list\n> > > >>>> Bitcoin-development at lists.sourceforge.net\n> > > >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >>>>\n> > > >>>>\n> > > >>>\n> > > >>\n> > > >>\n> > > >>\n> ------------------------------------------------------------------------------\n> > > >> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > > >> Rise to greatness in Intel's independent game demo contest.\n> > > >> Compete for recognition, cash, and the chance to get your game\n> > > >> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > > >> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> > > >> _______________________________________________\n> > > >> Bitcoin-development mailing list\n> > > >> Bitcoin-development at lists.sourceforge.net\n> > > >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >>\n> > > >>\n> > > >\n> >\n> > >\n> ------------------------------------------------------------------------------\n> > > Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > > Rise to greatness in Intel's independent game demo contest.\n> > > Compete for recognition, cash, and the chance to get your game\n> > > on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > > Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> >\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> > Rise to greatness in Intel's independent game demo contest.\n> > Compete for recognition, cash, and the chance to get your game\n> > on Steam. $5K grand prize plus 10 genre and skill prizes.\n> > Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Own the Future-Intel&reg; Level Up Game Demo Contest 2013\n> Rise to greatness in Intel's independent game demo contest.\n> Compete for recognition, cash, and the chance to get your game\n> on Steam. $5K grand prize plus 10 genre and skill prizes.\n> Submit your demo by 6/6/13. http://p.sf.net/sfu/intel_levelupd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130403/29d5335d/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-03T03:51:45",
                "message_text_only": "On Tue, Apr 2, 2013 at 11:41 PM, Wladimir <laanwj at gmail.com> wrote:\n> Maybe now that bitcoin is growing out of the toy phase it's an idea to start\n> gpg signing commits, like the Linux kernel\n> (https://lwn.net/Articles/466468/).\n>\n> But I suppose then we can't use github anymore to merge as-is and need\n> manual steps?\n\nCorrect, that rules out github, AFAICS.\n\nThough, honestly, when I ACK that means I read the code, which is more\nimportant than the author really.  github seems fine for that still,\nthough I do wonder if there is a race possible,\n\n* sneak uploads innocent branch sneak/bitcoin.git #innocent\n* sneak creates pull req\n* just before I click \"pull\", sneak rebases the branch to something evil\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "grarpamp",
                "date": "2013-04-03T15:52:49",
                "message_text_only": ">> gpg signing commits, like the Linux kernel\n\n> Though, honestly, when I ACK that means I read the code, which is more\n> important than the author really.  github seems fine for that still,\n> though I do wonder if there is a race possible,\n>\n> * just before I click \"pull\", sneak rebases the branch to something evil\n\n\nYou might want to look at http://www.monotone.ca/, it does a good job\nof integrating crypto and review primitives into the workflow.\nIt also has some reliable network distribution models (netsync) that work\nwell over things like Tor, in case a new developer (or old Satoshi) doesn't\nwish to be in the public light.\n\nhttp://www.monotone.ca/monotone.html\n\nOnce you have the crypto, it always boils down to human risk factors,\nrogue, password, cracks, etc which are harder."
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-04-03T16:05:39",
                "message_text_only": "I would rather we spend time working to make users' bitcoins safe EVEN IF\ntheir bitcoin software is compromised.\n\nEliminate the \"if you get a bad bitcoin-qt.exe somehow you're in big\ntrouble\" risk entirely, instead of worrying about unlikely scenarios like a\ntiming attack in between ACKs/pulls. Eliminate one piece of software as the\npossible single point of failure...\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130403/0ad107d6/attachment.html>"
            },
            {
                "author": "grarpamp",
                "date": "2013-04-03T16:23:21",
                "message_text_only": "> Eliminate the \"if you get a bad bitcoin-qt.exe somehow you're in big\n> trouble\" risk entirely\n\nThis isn't really possible. A trojaned client will spend your coin as\neasily as the owner can, passphrases will be logged, windows box will\nbe owned, secondary remote spendauth sigs into the network chain\nbreak similarly, securely hashcheck the trojaned client from cracked\nuserspace on a hacked dll/kernel with uefi backdoor and a trojaned\nhasher, etc.\n\nIt's easier for a few developers to meet in person to init and sig\na new repo than to try fixing the world's userland and users :)\nAt least that way you get something verifiable back to the root."
            },
            {
                "author": "grarpamp",
                "date": "2013-04-03T18:12:35",
                "message_text_only": "> Users will have available multisig addresses which require\n> transactions to be signed off by a wallet HSM. (E.g. a keyfob\n\nHardware is a good thing. But only if you do the crypto in the\nhardware and trust the hardware and its attack models ;) For\ninstance, the fingerprint readers you see everywhere... many\nof them just present the raw fingerprint scan to the host (and\nhost software), instead of hashing the fingerprint internally and\nusing that as primitive in crypto exchanges with the host. They\ncheaped out and/or didn't think. So oops, there went both your\nsecurity (host replay) and your personal privacy (biometrics),\noutside of your control. All with no protection against physical\nfingerprint lifting.\n\n> This doesn't remove the need to improve repository integrity. ... but\n> repository integrity is a general problem that is applicable to many\n> things (after all, what does it matter if you can't compromise Bitcoin\n> if you can compromise boost, openssl, or gcc?)\n\nYes, that case would matter zero to the end product. However\nhaving a strong repo permits better auditing of the BTC codebase.\nThat's a good thing, and eliminates the need to talk chicken and\negg.\n\n> It's probably best\n> that Bitcoin specalists stay focused on Bitcoin security measures, and\n> other people interested in repository security come and help out\n> improving it.  An obvious area of improvement might be oddity\n> detection and alerting:  It's weird that I can rewrite history on\n> github, so long as I do it quickly, without anyone noticing.\n\nIf no one is verifying the repo, sure, even entire repos could be\nswapped out for seemingly identical ones.\n\nMany repos do not have any strong internal verification structures\nat all, and they run on filesystems that accept bitrot.\nTake a look at some OS's... OpenBSD and FreeBSD, supposedly\nthe more secure ones out there... both use legacy repos on FFS.\nSeems rather ironic in the lol department.\n\nThankfully some people out there are finally getting a clue on these\nissues, making and learning the tools, converting and migrating\nthings, working on top down signed build and distribution chain, etc...\nso maybe in ten years the opensource world will be much farther\nahead. Or at least have a strong audit trail."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-04T09:11:15",
                "message_text_only": "My general hope/vague plan for bitcoinj based wallets is to get them all on\nto automatic updates with threshold signatures. Combined with regular\naudits of the initial downloads for new users, that should give a pretty\nsafe result that is immune to a developer going rogue.\n\n\nOn Wed, Apr 3, 2013 at 7:12 PM, grarpamp <grarpamp at gmail.com> wrote:\n\n> > Users will have available multisig addresses which require\n> > transactions to be signed off by a wallet HSM. (E.g. a keyfob\n>\n> Hardware is a good thing. But only if you do the crypto in the\n> hardware and trust the hardware and its attack models ;) For\n> instance, the fingerprint readers you see everywhere... many\n> of them just present the raw fingerprint scan to the host (and\n> host software), instead of hashing the fingerprint internally and\n> using that as primitive in crypto exchanges with the host. They\n> cheaped out and/or didn't think. So oops, there went both your\n> security (host replay) and your personal privacy (biometrics),\n> outside of your control. All with no protection against physical\n> fingerprint lifting.\n>\n> > This doesn't remove the need to improve repository integrity. ... but\n> > repository integrity is a general problem that is applicable to many\n> > things (after all, what does it matter if you can't compromise Bitcoin\n> > if you can compromise boost, openssl, or gcc?)\n>\n> Yes, that case would matter zero to the end product. However\n> having a strong repo permits better auditing of the BTC codebase.\n> That's a good thing, and eliminates the need to talk chicken and\n> egg.\n>\n> > It's probably best\n> > that Bitcoin specalists stay focused on Bitcoin security measures, and\n> > other people interested in repository security come and help out\n> > improving it.  An obvious area of improvement might be oddity\n> > detection and alerting:  It's weird that I can rewrite history on\n> > github, so long as I do it quickly, without anyone noticing.\n>\n> If no one is verifying the repo, sure, even entire repos could be\n> swapped out for seemingly identical ones.\n>\n> Many repos do not have any strong internal verification structures\n> at all, and they run on filesystems that accept bitrot.\n> Take a look at some OS's... OpenBSD and FreeBSD, supposedly\n> the more secure ones out there... both use legacy repos on FFS.\n> Seems rather ironic in the lol department.\n>\n> Thankfully some people out there are finally getting a clue on these\n> issues, making and learning the tools, converting and migrating\n> things, working on top down signed build and distribution chain, etc...\n> so maybe in ten years the opensource world will be much farther\n> ahead. Or at least have a strong audit trail.\n>\n>\n> ------------------------------------------------------------------------------\n> Minimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire\n> the most talented Cisco Certified professionals. Visit the\n> Employer Resources Portal\n> http://www.cisco.com/web/learning/employer_resources/index.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130404/ef2fd790/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-04T10:04:22",
                "message_text_only": "By the way, I have a download of the Bitcoin-Qt client and signature\nverification running in a cron job.\n\n\nOn Thu, Apr 4, 2013 at 10:11 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> My general hope/vague plan for bitcoinj based wallets is to get them all\n> on to automatic updates with threshold signatures. Combined with regular\n> audits of the initial downloads for new users, that should give a pretty\n> safe result that is immune to a developer going rogue.\n>\n>\n> On Wed, Apr 3, 2013 at 7:12 PM, grarpamp <grarpamp at gmail.com> wrote:\n>\n>> > Users will have available multisig addresses which require\n>> > transactions to be signed off by a wallet HSM. (E.g. a keyfob\n>>\n>> Hardware is a good thing. But only if you do the crypto in the\n>> hardware and trust the hardware and its attack models ;) For\n>> instance, the fingerprint readers you see everywhere... many\n>> of them just present the raw fingerprint scan to the host (and\n>> host software), instead of hashing the fingerprint internally and\n>> using that as primitive in crypto exchanges with the host. They\n>> cheaped out and/or didn't think. So oops, there went both your\n>> security (host replay) and your personal privacy (biometrics),\n>> outside of your control. All with no protection against physical\n>> fingerprint lifting.\n>>\n>> > This doesn't remove the need to improve repository integrity. ... but\n>> > repository integrity is a general problem that is applicable to many\n>> > things (after all, what does it matter if you can't compromise Bitcoin\n>> > if you can compromise boost, openssl, or gcc?)\n>>\n>> Yes, that case would matter zero to the end product. However\n>> having a strong repo permits better auditing of the BTC codebase.\n>> That's a good thing, and eliminates the need to talk chicken and\n>> egg.\n>>\n>> > It's probably best\n>> > that Bitcoin specalists stay focused on Bitcoin security measures, and\n>> > other people interested in repository security come and help out\n>> > improving it.  An obvious area of improvement might be oddity\n>> > detection and alerting:  It's weird that I can rewrite history on\n>> > github, so long as I do it quickly, without anyone noticing.\n>>\n>> If no one is verifying the repo, sure, even entire repos could be\n>> swapped out for seemingly identical ones.\n>>\n>> Many repos do not have any strong internal verification structures\n>> at all, and they run on filesystems that accept bitrot.\n>> Take a look at some OS's... OpenBSD and FreeBSD, supposedly\n>> the more secure ones out there... both use legacy repos on FFS.\n>> Seems rather ironic in the lol department.\n>>\n>> Thankfully some people out there are finally getting a clue on these\n>> issues, making and learning the tools, converting and migrating\n>> things, working on top down signed build and distribution chain, etc...\n>> so maybe in ten years the opensource world will be much farther\n>> ahead. Or at least have a strong audit trail.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Minimize network downtime and maximize team effectiveness.\n>> Reduce network management and security costs.Learn how to hire\n>> the most talented Cisco Certified professionals. Visit the\n>> Employer Resources Portal\n>> http://www.cisco.com/web/learning/employer_resources/index.html\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130404/1aa08477/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoin pull requests",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Petr Praus",
                "Roy Badami",
                "Mike Hearn",
                "Gavin Andresen",
                "Melvin Carvalho",
                "Will",
                "grarpamp"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 44192
        }
    },
    {
        "title": "[Bitcoin-development] A mining pool at 46%",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-05T09:30:38",
                "message_text_only": "There was some chat on IRC about a mining pool reaching 46%\n\nhttp://blockchain.info/pools\n\nWhat's the risk of a 51% attack.\n\nI suggested that the pool itself is decentralized so you could not launch\none\n\nOn IRC people were saying that the pool owner gets to choose what goes in\nthe block\n\nSurely with random non colliding nonces, it would be almost impossible to\ncoordinate a 51% even by the owner\n\nSomeone came back and said that creating random numbers on a GPU is hard.\nBut what about just creating ONE random number and incrementing from there\n...\n\nIt would be great to know if this is a threat or a non issue\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130405/50bc41ef/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-05T09:48:51",
                "message_text_only": "51% isn't a magic number - it's possible to do double spends against\nconfirmed transactions before that. If Michael wanted to do so, with the\ncurrent setup he could, and that's obviously rather different to how\nSatoshi envisioned mining working.\n\nHowever, you're somewhat right in the sense that it's a self-defeating\nattack. If the pool owner went bad, he could pull it off once, but the act\nof doing so would leave a permanent record and many of the people mining on\nhis pool would leave. As he doesn't own the actual mining hardware, he then\nwouldn't be able to do it again.\n\nThere are also other mining protocols that allow people to pool together,\nwithout p2pool and without the pool operator being able to centrally pick\nwhich transactions go into the block. However I'm not sure they're widely\ndeployed at the moment. It'd be better if people didn't cluster around big\nmining pools, but I think p2pool still has a lot of problems dealing with\nFPGA/ASIC hardware and it hasn't been growing for a long time.\n\n\nOn Fri, Apr 5, 2013 at 11:30 AM, Melvin Carvalho\n<melvincarvalho at gmail.com>wrote:\n\n> There was some chat on IRC about a mining pool reaching 46%\n>\n> http://blockchain.info/pools\n>\n> What's the risk of a 51% attack.\n>\n> I suggested that the pool itself is decentralized so you could not launch\n> one\n>\n> On IRC people were saying that the pool owner gets to choose what goes in\n> the block\n>\n> Surely with random non colliding nonces, it would be almost impossible to\n> coordinate a 51% even by the owner\n>\n> Someone came back and said that creating random numbers on a GPU is hard.\n> But what about just creating ONE random number and incrementing from there\n> ...\n>\n> It would be great to know if this is a threat or a non issue\n>\n>\n> ------------------------------------------------------------------------------\n> Minimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire\n> the most talented Cisco Certified professionals. Visit the\n> Employer Resources Portal\n> http://www.cisco.com/web/learning/employer_resources/index.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130405/2deb655b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-05T10:02:11",
                "message_text_only": "On Fri, Apr 5, 2013 at 2:48 AM, Mike Hearn <mike at plan99.net> wrote:\n> but I think p2pool still has a lot of problems dealing with\n> FPGA/ASIC hardware and it hasn't been growing for a long time.\n\nAs an aside and a clarification\u2014 P2pool works great with FPGAs, and\none of the largest FPGA farms I've heard of uses it.  But it doesn't\nwork well the old BFL FPGA miners\u2014 because they have insane latency.\nLikewise it doesn't currently work well with Avalon, again because of\ninsane latency.   P2pool uses a 10 second sharechain in order to give\nminers low variance but that means that if you have a several second\nminer you'll end up subsidizing all the faster p2pool users somewhat.\n\nIt was basically stable with the network until ASICminer came online\nmining on BTCguild mostly and the first avalons started to ship, and\nthen the network went up 10TH in a couple weeks (and now 15TH) while\nP2Pool stayed mostly constant.\n\nForrestV (the author and maintainer of the P2pool software) would love\nto work on making Avalon and other higher latency devices first class\nsupported on P2Pool, but he doesn't have one\u2014 and frankly, all the\npeople who have them aren't super eager to fuss around with a 5BTC/day\nrevenue stream, especially since the avalon firmware (and its internal\ncopy of cgminer) itself has a bunch of quirks and bugs that are still\ngetting worked out... and I do believe that p2pool helps reduce\nconcerns around mining pool centralization. ... but I think as a\ncommunity we don't always do a great job at supporting people who work\non infrastructure\u2014 even just making sure to get them what they need to\nkeep giving us free stuff\u2014, we just assume they're super rich Bitcoin\nold hands, but that often isn't true."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-05T10:13:23",
                "message_text_only": "On 5 April 2013 11:48, Mike Hearn <mike at plan99.net> wrote:\n\n> 51% isn't a magic number - it's possible to do double spends against\n> confirmed transactions before that. If Michael wanted to do so, with the\n> current setup he could, and that's obviously rather different to how\n> Satoshi envisioned mining working.\n>\n\nThanks for pointing this out.  I guess 51% is mainly of psychological\nsignificance.\n\n\n>\n> However, you're somewhat right in the sense that it's a self-defeating\n> attack. If the pool owner went bad, he could pull it off once, but the act\n> of doing so would leave a permanent record and many of the people mining on\n> his pool would leave. As he doesn't own the actual mining hardware, he then\n> wouldn't be able to do it again.\n>\n\nTotally see the logic of this, and it makes sense.  But I dont think the\nonly risk is in terms of double spend, but rather\n\n1) vandalize the block chain which may be difficult to unwind?\n2) use an attack to manipulate the price downwards, then rebuy lower\n\nAs bitcoin's market cap grows, incentives to move the market will grow\n\n\n>\n> There are also other mining protocols that allow people to pool together,\n> without p2pool and without the pool operator being able to centrally pick\n> which transactions go into the block. However I'm not sure they're widely\n> deployed at the moment. It'd be better if people didn't cluster around big\n> mining pools, but I think p2pool still has a lot of problems dealing with\n> FPGA/ASIC hardware and it hasn't been growing for a long time.\n>\n\nI guess the market will decide which algorithm is used, but as a community\nwe can perhaps review the different mining protocols and order them in\nterms of risk ...\n\n\n>\n>\n> On Fri, Apr 5, 2013 at 11:30 AM, Melvin Carvalho <melvincarvalho at gmail.com\n> > wrote:\n>\n>> There was some chat on IRC about a mining pool reaching 46%\n>>\n>> http://blockchain.info/pools\n>>\n>> What's the risk of a 51% attack.\n>>\n>> I suggested that the pool itself is decentralized so you could not launch\n>> one\n>>\n>> On IRC people were saying that the pool owner gets to choose what goes in\n>> the block\n>>\n>> Surely with random non colliding nonces, it would be almost impossible to\n>> coordinate a 51% even by the owner\n>>\n>> Someone came back and said that creating random numbers on a GPU is\n>> hard.  But what about just creating ONE random number and incrementing from\n>> there ...\n>>\n>> It would be great to know if this is a threat or a non issue\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Minimize network downtime and maximize team effectiveness.\n>> Reduce network management and security costs.Learn how to hire\n>> the most talented Cisco Certified professionals. Visit the\n>> Employer Resources Portal\n>> http://www.cisco.com/web/learning/employer_resources/index.html\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130405/93891a93/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-05T12:12:51",
                "message_text_only": "On Fri, Apr 05, 2013 at 12:13:23PM +0200, Melvin Carvalho wrote:\n> Totally see the logic of this, and it makes sense.  But I dont think the\n> only risk is in terms of double spend, but rather\n> \n> 1) vandalize the block chain which may be difficult to unwind?\n\nVandalize the chain how? By delibrately triggering bugs? (like the old\nOP_CHECKSIG abuse problem) Regardless of whether or not the\nvulnerability requires multiple blocks in a row, the underlying problem\nshould be fixed.\n\nBy putting illegal data into it? Fundementally we have no way to prevent\npeople from doing that other than by making it expensive. An attacker\nhaving a lot of hashing power just means they can do so faster and a bit\ncheaper.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130405/4eb210fe/attachment.sig>"
            },
            {
                "author": "Daryl Tucker",
                "date": "2013-04-08T12:32:30",
                "message_text_only": "BTC Guild's response:\n\n51% Mitigation Plan\nI want to start by thanking all users, new and old, for making BTC\nGuild become what it is today. I never expected a service that\noriginally started on a mining PC in my dining room in April 2011 to\ngo this far.\n\nHowever, recently BTC Guild has started to become \"too big\". Users of\nBitcoin are becoming scared that BTC Guild, either directly or through\nhacking/coercion, could be used to attack the network as it gets\ncloser to 51% of the network. If this were to happen, it is likely\nmany people would lose confidence in Bitcoin, as a single entity could\ncontrol the network if it wanted to do so.\n\nI have put forward a proposal of my plans on how to mitigate this\nthreat, but unfortunately nothing can be done without users taking\nsome initiative as well. The following are the actions that will be\ntaken if certain thresholds are crossed:\n\n\nMore than 40% of the Network [last 2016 blocks]\nPPS fee will be raised from 5% to 7% on all new accounts. Old accounts\nwill also be increased (PPS ONLY) to 7% after a difficulty change. If\nthe pool eventually drops back under 40% for more than 72 hours, these\nfees will be turned back down to 5% after the next difficulty change.\n\nMore than 45% of the Network [last 2016 blocks]\nGetwork based pools will be completely removed within 24 hours. All\nusers on getwork have been warned in the past that it is a unsupported\nand not advised method of connecting. This should remove ~15% of BTC\nGuild's hash rate immediately.\n\nMore than 40% of the Network again [last 2016 blocks]\nPPLNS fee will be raised from 3% to 4% after a 72 hour warning. This\nfee will be reduced back to 3% once the pool drops back under 40% for\nmore than 72 hours.\n\n\nIf you have questions or comments, please leave them on the forum\nthread related to this issue:\nhttps://bitcointalk.org/index.php?topic=168108.0\n\n\nhttps://www.btcguild.com/index.php?page=home\n\n\n\nOn 04/05/2013 07:12 AM, Peter Todd wrote:\n> On Fri, Apr 05, 2013 at 12:13:23PM +0200, Melvin Carvalho wrote:\n>> Totally see the logic of this, and it makes sense.  But I dont\n>> think the only risk is in terms of double spend, but rather\n>> \n>> 1) vandalize the block chain which may be difficult to unwind?\n> \n> Vandalize the chain how? By delibrately triggering bugs? (like the\n> old OP_CHECKSIG abuse problem) Regardless of whether or not the \n> vulnerability requires multiple blocks in a row, the underlying\n> problem should be fixed.\n> \n> By putting illegal data into it? Fundementally we have no way to\n> prevent people from doing that other than by making it expensive.\n> An attacker having a lot of hashing power just means they can do so\n> faster and a bit cheaper.\n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nMinimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire the\n> most talented Cisco Certified professionals. Visit the Employer\n> Resources Portal \n> http://www.cisco.com/web/learning/employer_resources/index.html\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \n\nDaryl Tucker\ndaryl at daryltucker.com"
            },
            {
                "author": "Robert McKay",
                "date": "2013-04-05T10:50:06",
                "message_text_only": "On Fri, 5 Apr 2013 11:48:51 +0200, Mike Hearn wrote:\n> However, youre somewhat right in the sense that its a self-defeating\n> attack. If the pool owner went bad, he could pull it off once, but \n> the\n> act of doing so would leave a permanent record and many of the people\n> mining on his pool would leave. As he doesnt own the actual mining\n> hardware, he then wouldnt be able to do it again.\n\nUnless all the miners are monitoring the work they do for their pools \nand the actual miners that found the blocks noticed (unlikely) - the \nonly way anyone knows which pool did anything is the source IP that \nfirst disseminates the new block. Also since it's unlikely that both of \nthe doublespend blocks would be found by the same end miner, neither of \nthem would know that the pool operator was responsible even if they were \nmonitoring their work.\n\nThere's nothing stopping the pool owner from channeling the doublespend \nblocks through some other previously unknown IP, so I don't think they \nwould suffer any reputational damage from doing this repeatidly.\n\nRobert"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-05T09:52:14",
                "message_text_only": "On Fri, Apr 5, 2013 at 2:30 AM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> There was some chat on IRC about a mining pool reaching 46%\n> http://blockchain.info/pools\n\nThe estimates on there may be a bit lossy.\n\n> What's the risk of a 51% attack.\n\nThe whole fixation on \"51\" as a magic number is a bit confused\u2014 I'll\nsay more below.\n\n> I suggested that the pool itself is decentralized so you could not launch\n> one\n\nNone of the pools listed there are meaningfully decentralized\u2014  before\nLuke whines, in theory the ones supporting GBT could be if used in a\nway that no one actually uses them.  P2Pool is decentralized based on\nthe same technology as Bitcoin itself, but it's certainly not as point\nand click easy as a centralized pool.\n\n> On IRC people were saying that the pool owner gets to choose what goes in\n> the block\n\nThat is correct.\n\nThough I'd point out\u2014 the major pool ops all seem to be great folks\nwho care about the future of Bitcoin\u2014 and the continued success of\ntheir very profitable businesses: a 50% mining pool with a 3% fee\nrakes in 54 BTC per _day_.\n\nThe more likely threat isn't that pool owners do something bad: It's\nthat their stuff gets hacked (again) or that they're subjected to\ncoercion. ... and the attacker either wants to watch the (Bitcoin)\nworld burn, or after raiding the pool wallet can't exploit it further\nexcept via blockchain attacks.\n\n> Surely with random non colliding nonces, it would be almost impossible to\n> coordinate a 51% even by the owner\n\nThat makes no sense. A centralized pool is the miner, the remote\nworkers are just doing whatever computation it tells them to do.\nCertainly these remote workers might switch to another pool if they\nknew something bad was happening... but evidence suggests that this\ntakes days even when the pool is overtly losing money.  Miners have\nfreely dumped all their hashpower on questionable parties (like the\ninfamous pirate40) with nary a question as to what it would be used\nfor when they were paid a premium for doing so.  It seems even those\nwith large hardware investments are not aware of or thinking carefully\nabout the risks.\n\n> It would be great to know if this is a threat or a non issue\n\nIt's important to know exactly what kind of threat you're talking\nabout\u2014  someone with a large amount of hash-power can replace\nconfirmed blocks with an alternative chain that contains different\ntransactions. This allows them to effectively reverse and respend\ntheir own transactions\u2014 clawing back funds that perhaps had already\ntriggered irreversible actions.\n\nThis doesn't require some magic \"51%\"\u2014 its just that when a miner has\n>50% the attack would always be successful if they kept it up long\nenough (long enough might be years if you're talking really close to\n50% and he gets unlucky). Likewise, someone with a sustained\nsupermajority could deny all other blocks\u2014 but that attack's damage\nstops when they lose the supermajority or go away.\n\nMore interesting is this:  An attacker with only 40% of the hashpower\ncan reverse six confirmations with a success rate of ~50%. There is\nsource for computing this at the end of the Bitcoin paper.   I did a\nquick and really lame conversion of his code JS so you can play with\nit in a browser:\n\nhttps://people.xiph.org/~greg/attack_success.html"
            }
        ],
        "thread_summary": {
            "title": "A mining pool at 46%",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robert McKay",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Melvin Carvalho",
                "Daryl Tucker"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 16935
        }
    },
    {
        "title": "[Bitcoin-development] Integration testing for BitCoin",
        "thread_messages": [
            {
                "author": "Adam Ritter",
                "date": "2013-04-05T17:24:55",
                "message_text_only": "Hey guys,\n\nI just bought some BitCoins after being lazy to do it for the last few\nyears, but also looked at the client code and the messages that are\ngoing on this mailing list.\nI saw that there are quite some unit tests, but I didn't find\nintegration test for BitCoin, and I believe that it's quite important\nfor the future of BitCoin (making the current code more stable,\ntesting attack scenarios, refactoring and extending code).\n\nI have wrote some integration tests before at other projects, and they\nusually turned out useful, but I have 0 experience with the BitCoin\ndevelopment and codebase.\nI wrote a short document of what I think would be the safest way to do\nthe testing (but not yet the tests themselves, as I don't have enough\nexperience..I'd like to have something like testing that the wallets\nare empty, and after somebody mines she'll have more money..after she\nsends money to the other person, the other person will see it...things\nlike this, just to get to know the code base).\n\nWhat do you guys think?\nThe plan is here:\nhttps://github.com/xiphias/bitcoin/blob/master/src/test/integration/README.md\nPlease feel free to comment/fork, I'll try to write all your replies\nin the document as well.\n\nAlso here's the text to make it easier to comment:\n\nIntegration testing for bitcoin\n================================\n\nTests that simulate multiple bitcoin users and can verify that the\nwhole network of bitcoin clients work together\nto achieve the goals of Bitcoin. Also maybe [System\ntesting](http://en.wikipedia.org/wiki/System_testing)\nwould be a better name for the tests, but I'm not sure.\n\nGoals\n---------\n- Make the bitcoin code easier to refactor while increasing the guarantee\n that it doesn't break the overall behaviour of the client.\n- Make it easier to have multiple experimental coins (for example\nLightCoin or PPCoin) in the codebase, while guaranteeing that the\noriginal BitCoin protocol doesn't break\n- Make it easy to test attack scenarios (like DOS,\n releasing an incompatible BitCoin client), monitoring\n- Have tests without (or at least minimal number of) unreadable\nconstants and unreadable fake data to make them easier to verify.\n\nProposed implementation\n------------------------------------\nThe first implementation should use the JSON-RPC interface and build\nup as much verification\nof BitCoin network as possible. It should be in C++, which makes it\neasier to move to the second implementation.\nThe JSON-RPC calls should be hidden by a C++ interface.\n\nThe second implementation should use the same interface that was used\nfor JSON-RPC,\nbut using the BitCoin code directly (while not breaking the JSON-RPC tests).\nFor this the BitCoin client has to be refactored as a library,\ngetting rid of all global variables (and having them in a data structure),\nso that multiple BitCoin clients can be run in the same process.\n\nThe improvement of the second implementation should have dependency injection\nfor the time and for finding/verifying a mined block,\nso that the tests don't need to use real CPU power for mining,\nand they can run faster and test more complex scenarios."
            },
            {
                "author": "Matt Corallo",
                "date": "2013-04-05T17:33:43",
                "message_text_only": "These tests are run on each pull requests and on each new commit to\nmaster.  They arent very complete, but they do test a lot of block\nacceptance rules.\n\nhttps://github.com/TheBlueMatt/test-scripts\n\nMatt\n\nOn Fri, 2013-04-05 at 12:24 -0500, Adam Ritter wrote:\n> Hey guys,\n> \n> I just bought some BitCoins after being lazy to do it for the last few\n> years, but also looked at the client code and the messages that are\n> going on this mailing list.\n> I saw that there are quite some unit tests, but I didn't find\n> integration test for BitCoin, and I believe that it's quite important\n> for the future of BitCoin (making the current code more stable,\n> testing attack scenarios, refactoring and extending code).\n> \n> I have wrote some integration tests before at other projects, and they\n> usually turned out useful, but I have 0 experience with the BitCoin\n> development and codebase.\n> I wrote a short document of what I think would be the safest way to do\n> the testing (but not yet the tests themselves, as I don't have enough\n> experience..I'd like to have something like testing that the wallets\n> are empty, and after somebody mines she'll have more money..after she\n> sends money to the other person, the other person will see it...things\n> like this, just to get to know the code base).\n> \n> What do you guys think?\n> The plan is here:\n> https://github.com/xiphias/bitcoin/blob/master/src/test/integration/README.md\n> Please feel free to comment/fork, I'll try to write all your replies\n> in the document as well.\n> \n> Also here's the text to make it easier to comment:\n> \n> Integration testing for bitcoin\n> ================================\n> \n> Tests that simulate multiple bitcoin users and can verify that the\n> whole network of bitcoin clients work together\n> to achieve the goals of Bitcoin. Also maybe [System\n> testing](http://en.wikipedia.org/wiki/System_testing)\n> would be a better name for the tests, but I'm not sure.\n> \n> Goals\n> ---------\n> - Make the bitcoin code easier to refactor while increasing the guarantee\n>  that it doesn't break the overall behaviour of the client.\n> - Make it easier to have multiple experimental coins (for example\n> LightCoin or PPCoin) in the codebase, while guaranteeing that the\n> original BitCoin protocol doesn't break\n> - Make it easy to test attack scenarios (like DOS,\n>  releasing an incompatible BitCoin client), monitoring\n> - Have tests without (or at least minimal number of) unreadable\n> constants and unreadable fake data to make them easier to verify.\n> \n> Proposed implementation\n> ------------------------------------\n> The first implementation should use the JSON-RPC interface and build\n> up as much verification\n> of BitCoin network as possible. It should be in C++, which makes it\n> easier to move to the second implementation.\n> The JSON-RPC calls should be hidden by a C++ interface.\n> \n> The second implementation should use the same interface that was used\n> for JSON-RPC,\n> but using the BitCoin code directly (while not breaking the JSON-RPC tests).\n> For this the BitCoin client has to be refactored as a library,\n> getting rid of all global variables (and having them in a data structure),\n> so that multiple BitCoin clients can be run in the same process.\n> \n> The improvement of the second implementation should have dependency injection\n> for the time and for finding/verifying a mined block,\n> so that the tests don't need to use real CPU power for mining,\n> and they can run faster and test more complex scenarios.\n> \n> ------------------------------------------------------------------------------\n> Minimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire \n> the most talented Cisco Certified professionals. Visit the \n> Employer Resources Portal\n> http://www.cisco.com/web/learning/employer_resources/index.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-05T17:42:22",
                "message_text_only": "On Fri, Apr 5, 2013 at 10:24 AM, Adam Ritter <aritter at gmail.com> wrote:\n> Hey guys,\n>\n> I just bought some BitCoins after being lazy to do it for the last few\n> years, but also looked at the client code and the messages that are\n> going on this mailing list.\n> I saw that there are quite some unit tests, but I didn't find\n> integration test for BitCoin, and I believe that it's quite important\n> for the future of BitCoin (making the current code more stable,\n> testing attack scenarios, refactoring and extending code).\n[...]\n> Tests that simulate multiple bitcoin users and can verify that the\n> whole network of bitcoin clients work together\n> to achieve the goals of Bitcoin. Also maybe [System\n> testing](http://en.wikipedia.org/wiki/System_testing)\n> would be a better name for the tests, but I'm not sure.\n\nI prefer to call them system tests.\n\nWe use a system called blocktester that Matt Corallo wrote,\nhttps://code.google.com/r/bluemattme-bitcoinj/source/browse/core/src/test/java/com/google/bitcoin/core/FullBlockTestGenerator.java?name=fullverif&r=874c5904b12d1fcec5b556429cf208f63cd4e1bc\n\nIt's based on BitcoinJ and works by simulating a peer against a\nslightly instrumented copy of Bitcoin(d/-qt) (modified to avoid\ncomputationally expensive mining).  The tests simulates many\ncomplicated network scenarios and tests the boundaries of many\n(hopefully all) the particular rules of the blockchain validation\nprotocol.  We can use these tests to compare different versions of the\nreference software to each other and to bitcoinj (or other full node\nimplementations) as well as comparing them to our abstract\nunderstanding of what we believe the rules of the protocol to be.\n\nThese tests are run as part of the automated tests on every proposed\npatch to the reference software. Via a robot called pulltester which\ncomments on github requests and produces logs like this:\nhttp://jenkins.bluematt.me/pull-tester/92a129980fb9b506da6c7f876aa8adb405c88e17/.\nPulltester also performs automatic code coverage measurements.\n\nAdditionally, we run a public secondary test bitcoin network called\n'testnet', which can be accessed by anyone by starting the reference\nsoftware with testnet=1.  Testnet operates the same as the production\nnetwork except it allows mining low difficulty blocks to prevent it\ngoing for long times without blocks, and some of the protective\nrelaying rules against \"non standard\" transaction types are disabled.\n\nMost of this testing work has been centered around validating the\nblockchain behavior because thats what has serious systemic risk.\nMeasuring the json rpc behavior is strictly less interesting, though\ninteresting too."
            },
            {
                "author": "Adam Ritter",
                "date": "2013-04-05T19:29:51",
                "message_text_only": "Thanks guys, it sounds great.\nTesting the JSON-RPC is/was not the main goal, just an interface for testing.\nI didn't know that the bitcoinj implementation is getting close to a\nfull implementation..it sounds interesting, as it's much easier to\nunderstand and work with. I'll look at the test cases.\n\nThanks very much,\nAdam\n\n\nOn Fri, Apr 5, 2013 at 12:42 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Apr 5, 2013 at 10:24 AM, Adam Ritter <aritter at gmail.com> wrote:\n>> Hey guys,\n>>\n>> I just bought some BitCoins after being lazy to do it for the last few\n>> years, but also looked at the client code and the messages that are\n>> going on this mailing list.\n>> I saw that there are quite some unit tests, but I didn't find\n>> integration test for BitCoin, and I believe that it's quite important\n>> for the future of BitCoin (making the current code more stable,\n>> testing attack scenarios, refactoring and extending code).\n> [...]\n>> Tests that simulate multiple bitcoin users and can verify that the\n>> whole network of bitcoin clients work together\n>> to achieve the goals of Bitcoin. Also maybe [System\n>> testing](http://en.wikipedia.org/wiki/System_testing)\n>> would be a better name for the tests, but I'm not sure.\n>\n> I prefer to call them system tests.\n>\n> We use a system called blocktester that Matt Corallo wrote,\n> https://code.google.com/r/bluemattme-bitcoinj/source/browse/core/src/test/java/com/google/bitcoin/core/FullBlockTestGenerator.java?name=fullverif&r=874c5904b12d1fcec5b556429cf208f63cd4e1bc\n>\n> It's based on BitcoinJ and works by simulating a peer against a\n> slightly instrumented copy of Bitcoin(d/-qt) (modified to avoid\n> computationally expensive mining).  The tests simulates many\n> complicated network scenarios and tests the boundaries of many\n> (hopefully all) the particular rules of the blockchain validation\n> protocol.  We can use these tests to compare different versions of the\n> reference software to each other and to bitcoinj (or other full node\n> implementations) as well as comparing them to our abstract\n> understanding of what we believe the rules of the protocol to be.\n>\n> These tests are run as part of the automated tests on every proposed\n> patch to the reference software. Via a robot called pulltester which\n> comments on github requests and produces logs like this:\n> http://jenkins.bluematt.me/pull-tester/92a129980fb9b506da6c7f876aa8adb405c88e17/.\n> Pulltester also performs automatic code coverage measurements.\n>\n> Additionally, we run a public secondary test bitcoin network called\n> 'testnet', which can be accessed by anyone by starting the reference\n> software with testnet=1.  Testnet operates the same as the production\n> network except it allows mining low difficulty blocks to prevent it\n> going for long times without blocks, and some of the protective\n> relaying rules against \"non standard\" transaction types are disabled.\n>\n> Most of this testing work has been centered around validating the\n> blockchain behavior because thats what has serious systemic risk.\n> Measuring the json rpc behavior is strictly less interesting, though\n> interesting too."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-06T12:21:34",
                "message_text_only": "In bitcoinj we desperately need integration tests to exercise the wallet\ncode, and I think if it was done well the tests would be applicable to\nbitcoind as well. There have been a series of bugs in bitcoinj that boiled\ndown to \"the unit tests were not realistic enough\", either because they\nstopped simulating too early or they weren't combining multiple different\nthings together in the same ways as happens on the real network. Sometimes\ntiming was an issue too.\n\nExamples of what I mean - ensure that re-orgs are handled correctly and\nupdate the wallet properly in every case, etc.\n\nSomething else that would be really useful, a standalone tool that\nstress-tests the system. If we had a tool that randomly generated chains of\ntransactions we might have caught the bdb lock limit bug earlier. You could\nwrite such a tool using bitcoinj easily, or the raw transaction APIs on\nbitcoind.\n\n\n\nOn Fri, Apr 5, 2013 at 8:29 PM, Adam Ritter <aritter at gmail.com> wrote:\n\n> Thanks guys, it sounds great.\n> Testing the JSON-RPC is/was not the main goal, just an interface for\n> testing.\n> I didn't know that the bitcoinj implementation is getting close to a\n> full implementation..it sounds interesting, as it's much easier to\n> understand and work with. I'll look at the test cases.\n>\n> Thanks very much,\n> Adam\n>\n>\n> On Fri, Apr 5, 2013 at 12:42 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> > On Fri, Apr 5, 2013 at 10:24 AM, Adam Ritter <aritter at gmail.com> wrote:\n> >> Hey guys,\n> >>\n> >> I just bought some BitCoins after being lazy to do it for the last few\n> >> years, but also looked at the client code and the messages that are\n> >> going on this mailing list.\n> >> I saw that there are quite some unit tests, but I didn't find\n> >> integration test for BitCoin, and I believe that it's quite important\n> >> for the future of BitCoin (making the current code more stable,\n> >> testing attack scenarios, refactoring and extending code).\n> > [...]\n> >> Tests that simulate multiple bitcoin users and can verify that the\n> >> whole network of bitcoin clients work together\n> >> to achieve the goals of Bitcoin. Also maybe [System\n> >> testing](http://en.wikipedia.org/wiki/System_testing)\n> >> would be a better name for the tests, but I'm not sure.\n> >\n> > I prefer to call them system tests.\n> >\n> > We use a system called blocktester that Matt Corallo wrote,\n> >\n> https://code.google.com/r/bluemattme-bitcoinj/source/browse/core/src/test/java/com/google/bitcoin/core/FullBlockTestGenerator.java?name=fullverif&r=874c5904b12d1fcec5b556429cf208f63cd4e1bc\n> >\n> > It's based on BitcoinJ and works by simulating a peer against a\n> > slightly instrumented copy of Bitcoin(d/-qt) (modified to avoid\n> > computationally expensive mining).  The tests simulates many\n> > complicated network scenarios and tests the boundaries of many\n> > (hopefully all) the particular rules of the blockchain validation\n> > protocol.  We can use these tests to compare different versions of the\n> > reference software to each other and to bitcoinj (or other full node\n> > implementations) as well as comparing them to our abstract\n> > understanding of what we believe the rules of the protocol to be.\n> >\n> > These tests are run as part of the automated tests on every proposed\n> > patch to the reference software. Via a robot called pulltester which\n> > comments on github requests and produces logs like this:\n> >\n> http://jenkins.bluematt.me/pull-tester/92a129980fb9b506da6c7f876aa8adb405c88e17/\n> .\n> > Pulltester also performs automatic code coverage measurements.\n> >\n> > Additionally, we run a public secondary test bitcoin network called\n> > 'testnet', which can be accessed by anyone by starting the reference\n> > software with testnet=1.  Testnet operates the same as the production\n> > network except it allows mining low difficulty blocks to prevent it\n> > going for long times without blocks, and some of the protective\n> > relaying rules against \"non standard\" transaction types are disabled.\n> >\n> > Most of this testing work has been centered around validating the\n> > blockchain behavior because thats what has serious systemic risk.\n> > Measuring the json rpc behavior is strictly less interesting, though\n> > interesting too.\n>\n>\n> ------------------------------------------------------------------------------\n> Minimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire\n> the most talented Cisco Certified professionals. Visit the\n> Employer Resources Portal\n> http://www.cisco.com/web/learning/employer_resources/index.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130406/efd6c4d4/attachment.html>"
            },
            {
                "author": "Adam Ritter",
                "date": "2013-04-07T13:50:01",
                "message_text_only": "Hey guys,\nit sounds great. I read through the bitcoinj documentation and started\nreading the code.\nA few years ago it wasn't a full client, but now that I see that it's\nalmost there, it looks much more interesting :-)\nTesting the reorg looks critical.\n\nThanks for the help everyone,\nAdam\n\nOn Sat, Apr 6, 2013 at 7:21 AM, Mike Hearn <mike at plan99.net> wrote:\n> In bitcoinj we desperately need integration tests to exercise the wallet\n> code, and I think if it was done well the tests would be applicable to\n> bitcoind as well. There have been a series of bugs in bitcoinj that boiled\n> down to \"the unit tests were not realistic enough\", either because they\n> stopped simulating too early or they weren't combining multiple different\n> things together in the same ways as happens on the real network. Sometimes\n> timing was an issue too.\n>\n> Examples of what I mean - ensure that re-orgs are handled correctly and\n> update the wallet properly in every case, etc.\n>\n> Something else that would be really useful, a standalone tool that\n> stress-tests the system. If we had a tool that randomly generated chains of\n> transactions we might have caught the bdb lock limit bug earlier. You could\n> write such a tool using bitcoinj easily, or the raw transaction APIs on\n> bitcoind.\n>\n>\n>\n> On Fri, Apr 5, 2013 at 8:29 PM, Adam Ritter <aritter at gmail.com> wrote:\n>>\n>> Thanks guys, it sounds great.\n>> Testing the JSON-RPC is/was not the main goal, just an interface for\n>> testing.\n>> I didn't know that the bitcoinj implementation is getting close to a\n>> full implementation..it sounds interesting, as it's much easier to\n>> understand and work with. I'll look at the test cases.\n>>\n>> Thanks very much,\n>> Adam\n>>\n>>\n>> On Fri, Apr 5, 2013 at 12:42 PM, Gregory Maxwell <gmaxwell at gmail.com>\n>> wrote:\n>> > On Fri, Apr 5, 2013 at 10:24 AM, Adam Ritter <aritter at gmail.com> wrote:\n>> >> Hey guys,\n>> >>\n>> >> I just bought some BitCoins after being lazy to do it for the last few\n>> >> years, but also looked at the client code and the messages that are\n>> >> going on this mailing list.\n>> >> I saw that there are quite some unit tests, but I didn't find\n>> >> integration test for BitCoin, and I believe that it's quite important\n>> >> for the future of BitCoin (making the current code more stable,\n>> >> testing attack scenarios, refactoring and extending code).\n>> > [...]\n>> >> Tests that simulate multiple bitcoin users and can verify that the\n>> >> whole network of bitcoin clients work together\n>> >> to achieve the goals of Bitcoin. Also maybe [System\n>> >> testing](http://en.wikipedia.org/wiki/System_testing)\n>> >> would be a better name for the tests, but I'm not sure.\n>> >\n>> > I prefer to call them system tests.\n>> >\n>> > We use a system called blocktester that Matt Corallo wrote,\n>> >\n>> > https://code.google.com/r/bluemattme-bitcoinj/source/browse/core/src/test/java/com/google/bitcoin/core/FullBlockTestGenerator.java?name=fullverif&r=874c5904b12d1fcec5b556429cf208f63cd4e1bc\n>> >\n>> > It's based on BitcoinJ and works by simulating a peer against a\n>> > slightly instrumented copy of Bitcoin(d/-qt) (modified to avoid\n>> > computationally expensive mining).  The tests simulates many\n>> > complicated network scenarios and tests the boundaries of many\n>> > (hopefully all) the particular rules of the blockchain validation\n>> > protocol.  We can use these tests to compare different versions of the\n>> > reference software to each other and to bitcoinj (or other full node\n>> > implementations) as well as comparing them to our abstract\n>> > understanding of what we believe the rules of the protocol to be.\n>> >\n>> > These tests are run as part of the automated tests on every proposed\n>> > patch to the reference software. Via a robot called pulltester which\n>> > comments on github requests and produces logs like this:\n>> >\n>> > http://jenkins.bluematt.me/pull-tester/92a129980fb9b506da6c7f876aa8adb405c88e17/.\n>> > Pulltester also performs automatic code coverage measurements.\n>> >\n>> > Additionally, we run a public secondary test bitcoin network called\n>> > 'testnet', which can be accessed by anyone by starting the reference\n>> > software with testnet=1.  Testnet operates the same as the production\n>> > network except it allows mining low difficulty blocks to prevent it\n>> > going for long times without blocks, and some of the protective\n>> > relaying rules against \"non standard\" transaction types are disabled.\n>> >\n>> > Most of this testing work has been centered around validating the\n>> > blockchain behavior because thats what has serious systemic risk.\n>> > Measuring the json rpc behavior is strictly less interesting, though\n>> > interesting too.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Minimize network downtime and maximize team effectiveness.\n>> Reduce network management and security costs.Learn how to hire\n>> the most talented Cisco Certified professionals. Visit the\n>> Employer Resources Portal\n>> http://www.cisco.com/web/learning/employer_resources/index.html\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>"
            }
        ],
        "thread_summary": {
            "title": "Integration testing for BitCoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Mike Hearn",
                "Gregory Maxwell",
                "Adam Ritter"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 23231
        }
    },
    {
        "title": "[Bitcoin-development] DOS-Attacks on bitcoin-client?",
        "thread_messages": [
            {
                "author": "Oliver Egginger",
                "date": "2013-04-07T14:43:30",
                "message_text_only": "Hello,\n\nI'm using your bitcoin-qt client (version 0.8.1). Normally everything is \nworking pretty fine, but sometimes it seems that other nodes produce an \nenormous amount of traffic. I have not had the time to investigate \nthoroughly yet. I only have briefly viewed with tshark.\n\nSo far I have just restarted the client in the hope that it no longer \nconnects with the 'evil' node. This usually works quite well.\n\nIs anything about DOS-Attacks known to you?\n\nregards\nOliver"
            },
            {
                "author": "Scott Howard",
                "date": "2013-04-07T15:22:32",
                "message_text_only": "On Sun, Apr 7, 2013 at 10:43 AM, Oliver Egginger <bitcoin at olivere.de> wrote:\n> Hello,\n>\n> I'm using your bitcoin-qt client (version 0.8.1). Normally everything is\n> working pretty fine, but sometimes it seems that other nodes produce an\n> enormous amount of traffic. I have not had the time to investigate\n> thoroughly yet. I only have briefly viewed with tshark.\n>\n> So far I have just restarted the client in the hope that it no longer\n> connects with the 'evil' node. This usually works quite well.\n>\n> Is anything about DOS-Attacks known to you?\n\nMany new users have started using the reference client which downloads\nthe whole blockchain from peers. There currently isn't a throttling\nmechanism [1] so it's possible to quickly eat up your bandwidth. You\ncan try QoS on your router or use the -nolisten command line flag. You\nwill still relay transactions, just not serve the whole blockchain.\n\n[1] https://github.com/bitcoin/bitcoin/issues/273"
            },
            {
                "author": "Oliver Egginger",
                "date": "2013-04-07T16:35:10",
                "message_text_only": "Am 07.04.2013 17:22, schrieb Scott Howard:\n> Many new users have started using the reference client which downloads\n> the whole blockchain from peers.\n\nYes I have made a clean start because of the the new database structure.\n\n> There currently isn't a throttling\n> mechanism [1] so it's possible to quickly eat up your bandwidth. You\n> can try QoS on your router or use the -nolisten command line flag. You\n> will still relay transactions, just not serve the whole blockchain.\n\nI see. I successfully have downloaded the Blockchain again. Thus, it \nshould not occur again now. If it does, I'll be back again. :-)\n\nThank you for your quick help.\n\nregards\nOliver"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-08T05:42:39",
                "message_text_only": "BTW, check out the blockchain torrent, as one way of offloading some\nof the download bandwidth used from the P2P network:\n\n     Bitcoin blockchain data torrent\n     https://bitcointalk.org/index.php?topic=145386.0\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "DOS-Attacks on bitcoin-client?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Scott Howard",
                "Oliver Egginger",
                "Jeff Garzik"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 2350
        }
    },
    {
        "title": "[Bitcoin-development] Who is creating non-DER signatures?",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2013-04-07T15:34:22",
                "message_text_only": "(cross-post from bitcointalk.org)\n\nHello all,\n\nas some may know, Bitcoin uses DER-encoded signatures in its transactions.\nHowever, OpenSSL (which is used to verify them) accepts more than just the\nstrict DER specification (it allows negative numbers, extra zero padding,\nextra bytes at the end, and perhaps more). As we don't like the de-facto\nspecification of the Bitcoin block validity rules to depend on OpenSSL,\nwe're trying to introduce a rule to make such non-standard signatures\ninvalid. Obviously, that can't be done as long as any significant amount of\nclients on the network is creating these.\n\nI've monitored all transactions the past weeks (1.4M transactions), and it\nseems 9641 of them contain at least one non-standard signature. See\nhttps://bitcointalk.org/index.php?topic=169620.0 for a list of the top\naddresses that had coins used as inputs in such transactions. If you\nrecognize any of these addresses, or have an idea of who owns them or what\nsoftware they are using, please let me know.\n\nThanks!\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130407/84abf4e1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-07T16:01:13",
                "message_text_only": "It'd help to know how the signatures are invalid.\n\n\nOn Sun, Apr 7, 2013 at 5:34 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> (cross-post from bitcointalk.org)\n>\n> Hello all,\n>\n> as some may know, Bitcoin uses DER-encoded signatures in its transactions.\n> However, OpenSSL (which is used to verify them) accepts more than just the\n> strict DER specification (it allows negative numbers, extra zero padding,\n> extra bytes at the end, and perhaps more). As we don't like the de-facto\n> specification of the Bitcoin block validity rules to depend on OpenSSL,\n> we're trying to introduce a rule to make such non-standard signatures\n> invalid. Obviously, that can't be done as long as any significant amount of\n> clients on the network is creating these.\n>\n> I've monitored all transactions the past weeks (1.4M transactions), and it\n> seems 9641 of them contain at least one non-standard signature. See\n> https://bitcointalk.org/index.php?topic=169620.0 for a list of the top\n> addresses that had coins used as inputs in such transactions. If you\n> recognize any of these addresses, or have an idea of who owns them or what\n> software they are using, please let me know.\n>\n> Thanks!\n>\n> --\n> Pieter\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Minimize network downtime and maximize team effectiveness.\n> Reduce network management and security costs.Learn how to hire\n> the most talented Cisco Certified professionals. Visit the\n> Employer Resources Portal\n> http://www.cisco.com/web/learning/employer_resources/index.html\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130407/f093e2ec/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-04-07T16:21:00",
                "message_text_only": "On Sun, Apr 07, 2013 at 06:01:13PM +0200, Mike Hearn wrote:\n> It'd help to know how the signatures are invalid.\n\nThe majority (~90%) is negative R or S values (which are just interpreted as\nunsigned by OpenSSL, but if the top byte has its highest bit set, it must be\npreceeded by a 0x00 accordinging to DER). A smaller number uses excessively\npadded R or S value (with a 0x00 in front when it's not necessary). Finally\nthere are 4 signatures with an incorrect length marker in the beginning\n(which likely means they contain some garbage at the end).\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-04-13T21:43:42",
                "message_text_only": "On Sun, Apr 7, 2013 at 5:34 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> I've monitored all transactions the past weeks (1.4M transactions), and it\n> seems 9641 of them contain at least one non-standard signature. See\n> https://bitcointalk.org/index.php?topic=169620.0 for a list of the top\n> addresses that had coins used as inputs in such transactions. If you\n> recognize any of these addresses, or have an idea of who owns them or what\n> software they are using, please let me know.\n>\n\nWithout significant effort, I don't think we're going to be able to get\nthat number down. I'd like to stress that without making these non-standard\nencodings effectively invalid on the network, pretty much every full node\nimplementation needs to depend on OpenSSL to guarantee compatibility (and\nthat is hoping OpenSSL doesn't change its supported encodings), or make\nassumptions about which deviations are allowed.\n\nThe next question, I guess, is at which transaction frequency it's\nacceptable to move forward with this? The first step is definitely just not\naccepting them into memory pools, but leaving them valid inside blocks.\nActual network rules will need to come later. However, even just not\naccepting them into memory pools will it make very hard (if not impossible)\nfor the buggy clients that create transactions to get any confirmations.\nI'm not sure... 0.6% isn't much, but 9600 transactions is.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130413/e6436e79/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-13T21:58:21",
                "message_text_only": "On Sat, Apr 13, 2013 at 2:43 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Actual network rules will need to come later. However, even just not\n> accepting them into memory pools will it make very hard (if not impossible)\n> for the buggy clients that create transactions to get any confirmations. I'm\n> not sure... 0.6% isn't much, but 9600 transactions is.\n\nWithout knowing how they're getting created it's hard to say what the\ndamage is...  are they being created by people using old cached JS\ntransaction generators? If so\u2014 the harm is insignificant. Are they\nbeing created by hardware wallets with the keys baked inside that\ncan't be changed?  If so\u2014 the harm would be more significant.\n\nI think the latter is unlikely right now\u2014 but if the network doesn't\nstop relaying these transactions it seems inevitable.\n\nIn all cases these transactions can be currently be mutated to an\nacceptable form\u2014 the malleability being one of the arguments for\nremoving support for non-canonical encodings.  So we could easily post\na transaction normalizer tool that someone with unrelayable\ntransactions could pass their transactions through to fix them, even\nwithout coming to the developers for help."
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-04-15T11:51:02",
                "message_text_only": "On Sat, Apr 13, 2013 at 02:58:21PM -0700, Gregory Maxwell wrote:\n> I think the latter is unlikely right now\u2014 but if the network doesn't\n> stop relaying these transactions it seems inevitable.\n\nA patch was just merged in git head to enforce strict encodings for accepting\ntransactions into the memory pool. As miners and other nodes don't upgrade\nimmediately (and 0.8.2 isn't even released yet), this means such transactions\nwill likely still make it into blocks, but will have an increasingly harder\ntime doing so.\n\nWhen the rate of non-standard encodings in the block chain has dropped far\nenough, we can attempt scheduling a soft forking change to make it required.\nAt that point, the network rules will no longer depend on OpenSSL's parsers.\n\nAs a summary, here are the rules now enforced for acceptance into the memory\npool:\n* 0. These rules are only applied for _evaluated_ scripts, as there is no\n     guaranteed way to know which data is supposed to be interpreted as a\n     public key or signature before actually evaluating the script. This\n     means that for example a 1-of-2 multisig can have an incorrectly-\n     encoded public key, but still be redeemed if a valid (and correctly\n     encoded) signature is given for the other key.\n* 1. Public keys are either compressed (0x02 + 32 bytes, or 0x03 + 32 bytes)\n     or uncompressed (0x04 + 64 bytes). The non-standard \"hybrid\" encoding\n     supported by OpenSSL is not allowed.\n* 2. Signatures are strictly DER-encoded (+ hashtype byte). The format is:\n     0x30 <lenT> 0x02 <lenR> <R> 0x02 <lenS> <S> <hashtype>\n     * R and S are signed integers, encoded as a big-endian byte sequence.\n       They are stored in as few bytes as possible (i.e., no 0x00 padding in\n       front), except that a single 0x00 byte is needed and even required\n       when the byte following it has its highest bit set, to prevent it\n       from being interpreted as a negative number.\n     * lenR and lenS are one byte, containing the length of the R and S\n       records, respectively.\n     * lenT is one byte, containing the length of the complete structure\n       following it, starting from the 0x02, up to the S record. Thus, it\n       must be equal to lenR + lenS + 4.\n     * The hashtype is one byte, and is either 0x01, 0x02, 0x03, 0x81, 0x82\n       or 0x83.\n     * No padding is allowed before or after the hashtype byte, thus lenT\n       is equal to the size of the whole signature minus 3.\n* 3. These rules also apply to testnet.\n\nCheers,\n\n--\nPieter"
            }
        ],
        "thread_summary": {
            "title": "Who is creating non-DER signatures?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Pieter Wuille",
                "Gregory Maxwell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 9033
        }
    },
    {
        "title": "[Bitcoin-development] On-going data spam",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-04-09T01:22:10",
                "message_text_only": "http://www.reddit.com/r/Bitcoin/comments/1bw9xg/data_in_the_blockchain_wikileaks/\n\n<TD> petertodd: yeah somebody put a file upload tool into the chain\nand then tried to upload the entire amibios source code to it. stupid.\n<TD> someone thinks it's a lot more important than it really is\n<petertodd> TD: and 2.5MB of wikileaks data, and a whole bunch of GPG\nencrypted stuff, and the hidden wiki cp/jb sections (no idea if it's\nall the same person)\n<petertodd> jgarzik:\nhttps://blockchain.info/address/3Dw3UB6VZ3a3ay5diDQVwUFXzKScJJLeVU\niirc this is gpg symmetric key encrypted\n<petertodd> jgarzik: (I wrote a tool to download the tool to download data)\n<petertodd> MC1984_: just checked, surprisingly no-one has put\n*anything* into the litecoin chain at all, strings returns nothing\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-09T09:28:44",
                "message_text_only": "On Mon, Apr 08, 2013 at 09:22:10PM -0400, Jeff Garzik wrote:\n> http://www.reddit.com/r/Bitcoin/comments/1bw9xg/data_in_the_blockchain_wikileaks/\n> \n> <TD> petertodd: yeah somebody put a file upload tool into the chain\n> and then tried to upload the entire amibios source code to it. stupid.\n> <TD> someone thinks it's a lot more important than it really is\n> <petertodd> TD: and 2.5MB of wikileaks data, and a whole bunch of GPG\n> encrypted stuff, and the hidden wiki cp/jb sections (no idea if it's\n> all the same person)\n> <petertodd> jgarzik:\n> https://blockchain.info/address/3Dw3UB6VZ3a3ay5diDQVwUFXzKScJJLeVU\n> iirc this is gpg symmetric key encrypted\n> <petertodd> jgarzik: (I wrote a tool to download the tool to download data)\n> <petertodd> MC1984_: just checked, surprisingly no-one has put\n> *anything* into the litecoin chain at all, strings returns nothing\n\nIt must be \"shit on the blockchain\" week:\n\nhttp://vog.github.io/bitcoinproof/\n\nTimestamping the stupid way, but the user experience is really nice:\n\n> Encoding your crypto hash into those two fields is a tricky task, so\n> people are tempted to make it more complicated than it has to be(1), or\n> outright cumbersome. Luckily(2), there is a simple solution that needs\n> only one transaction to one address.\n> 1) https://github.com/fireduck64/BitcoinTimestamp\n> 2) https://github.com/goblin/chronobit\n\nLike it or not, people will do what's easiest regardless of how much it\nharms everyone. I'd send this guy an email about opentimestamps yadda\nyada, but really, why bother.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/7f6b6aa4/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-09T10:42:12",
                "message_text_only": "OK, as the start of that conversation is now on the list, I might as well\npost the other thoughts we had. Or at least that I had :)\n\nIt's tempting to see this kind of abuse through the lens of fees, because\nwe only have a few hammers and so everything looks like a kind of nail. The\nproblem is the moment you try to define \"abuse\" economically you end up\nexcluding legitimate and beneficial uses as well. Maybe Peters patch for\nuneconomical outputs is different because of how it works. But mostly it's\ntrue. In this case, fees would never work - Peter said the guy who uploaded\nWikileaks paid something like $500 to do it. I guess by now it's more like\n$600-$700. It's hard for regular end users to compete with that kind of\nwild-eyed dedication to \"the cause\".\n\nThe root problem here is people believe the block chain is a data structure\nthat will live forever and be served by everyone for free, in perpetuity,\nand is thus the perfect place for \"uncensorable\" stuff. That's a reasonable\nassumption given how Bitcoin works today. But there's no reason it will be\ntrue in the long run (I know this can be an unpopular viewpoint).\n\nFirstly, legal issues - I think it's very unlikely any sane court would\ncare about illegal stuff in the block chain given you need special tools to\nextract it (mens rea). Besides, I guess most end users will end up on SPV\nclients as they mature. So these users already don't have a copy of the\nentire block chain. I don't worry too much about this.\n\nSecondly, the need to host blocks forever. In future, many (most?) full\nnodes will be pruning, and won't actually store old blocks at all. They'll\njust have the utxo database, some undo blocks and some number of old blocks\nfor serving, probably whatever fits in the amount of disk space the user is\nwilling to allocate. But very old blocks will have been deleted.\n\nThis leads to the question of what incentives people have to not prune. The\nobvious incentive is money - charge for access to older parts of the chain.\nThe fewer people that host it, the more you can charge. In the worst case\nscenario where, you know, only 10 different organizations store a copy of\nthe chain, it might mean that bootstrapping a new node in a trust-less\nmanner is expensive. But I really doubt it'd ever get so few. Serving large\nstatic datasets just isn't that expensive. Also, you don't actually need to\nreplay from the genesis block to bring up a new code, you can copy the UTXO\ndatabase from somewhere else. By comparing the databases of lots of\ndifferent nodes together, the chances of you being in a matrix-like sybil\nworld can be reduced to \"beyond reasonable doubt\". Maybe nodes would charge\nfor copies of their database too, but ideally there are lots of nodes and\nso the charge for that should be so close to zero as makes no odds - you\ncan trivially undercut someone by buying access to the dataset and then\nreselling it for a bit less, so the price should converge on the actual\ncost of providing the service. Which will be very cheap.\n\nThere was one last thought I had, which is that if there's a shorter team\nneed to discourage this kind of thing we can use a network/bandwith related\nhack by changing the protocol. Nodes can serve up blocks encrypted under a\nrandom key. You only get the key when you finish the download. A blacklist\ncan apply to Bloom filtering such that transactions which are known to be\n\"abusive\" require you to fully download the block rather than select the\ntransactions with a filter. This means that people can still access the\ndata in the chain, but the older it gets the slower and more bandwidth\nintensive it becomes. Stuffing Wikileaks into the chain sounds good when a\n20 line Python script can extract it \"instantly\". If someone who wants the\nfiles has to download gigabytes of padding around it first, suddenly\nhosting it on a Tor hidden service becomes more attractive.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/4f35dfed/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-09T11:09:11",
                "message_text_only": "On Tue, Apr 09, 2013 at 12:42:12PM +0200, Mike Hearn wrote:\n> hack by changing the protocol. Nodes can serve up blocks encrypted under a\n> random key. You only get the key when you finish the download. A blacklist\n\nNAK\n\nMakes bringing up a new node dependent on other nodes having consistent\nuptimes, particularly if you are on a low-bandwidth connection.\n\n> can apply to Bloom filtering such that transactions which are known to be\n> \"abusive\" require you to fully download the block rather than select the\n> transactions with a filter. This means that people can still access the\n\nNAK\n\nNo blacklists\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/a0db43a5/attachment.sig>"
            },
            {
                "author": "Jay F",
                "date": "2013-04-09T11:17:13",
                "message_text_only": "On 4/9/2013 4:09 AM, Peter Todd wrote:\n> On Tue, Apr 09, 2013 at 12:42:12PM +0200, Mike Hearn wrote:\n>> hack by changing the protocol. Nodes can serve up blocks encrypted under a\n>> random key. You only get the key when you finish the download. A blacklist\n> NAK\n>\n> Makes bringing up a new node dependent on other nodes having consistent\n> uptimes, particularly if you are on a low-bandwidth connection.\n>\n>> can apply to Bloom filtering such that transactions which are known to be\n>> \"abusive\" require you to fully download the block rather than select the\n>> transactions with a filter. This means that people can still access the\n> NAK\n>\n> No blacklists\n>\nIt depends on how clever the spammers get encoding stuff. If law \nenforcement forensic tools can pull a jpeg header + child porn out of \nthe blockchain, then there's a problem that needs mitigation."
            },
            {
                "author": "Robert Backhaus",
                "date": "2013-04-09T11:34:33",
                "message_text_only": "The obvious problem is that if you can frame it as a valid address, you can\nput what you want there. If you can make it pass the validation, miners\nhave no way of knowing it's not a valid address.\n\nOf course, there is nothing new about this. I ran strings on the blockchain\nand found all sorts of ascii rubbish right from the beginning.\n\n\nOn 9 April 2013 21:17, Jay F <jayf at outlook.com> wrote:\n\n> On 4/9/2013 4:09 AM, Peter Todd wrote:\n> > On Tue, Apr 09, 2013 at 12:42:12PM +0200, Mike Hearn wrote:\n> >> hack by changing the protocol. Nodes can serve up blocks encrypted\n> under a\n> >> random key. You only get the key when you finish the download. A\n> blacklist\n> > NAK\n> >\n> > Makes bringing up a new node dependent on other nodes having consistent\n> > uptimes, particularly if you are on a low-bandwidth connection.\n> >\n> >> can apply to Bloom filtering such that transactions which are known to\n> be\n> >> \"abusive\" require you to fully download the block rather than select the\n> >> transactions with a filter. This means that people can still access the\n> > NAK\n> >\n> > No blacklists\n> >\n> It depends on how clever the spammers get encoding stuff. If law\n> enforcement forensic tools can pull a jpeg header + child porn out of\n> the blockchain, then there's a problem that needs mitigation.\n>\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/81a373d3/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-09T14:14:55",
                "message_text_only": "> Makes bringing up a new node dependent on other nodes having consistent\n> uptimes, particularly if you are on a low-bandwidth connection.\n>\n\nThis is already the case and always has been.\n\n\n> NAK\n>\n> No blacklists\n\n\nIf you're volunteering to store and serve the chain no matter what it\ncontains, indefinitely, then you're free to have a no blacklists policy and\nserve up data transactions for no cost. Otherwise, other people will do\nwhatever they want.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/61a1d86a/attachment.html>"
            },
            {
                "author": "Caleb James DeLisle",
                "date": "2013-04-09T14:39:49",
                "message_text_only": "An approach which I see as workable in the long term is to keep the block\nheader and an array of bitfields representing each transaction's spent\nand unspent outputs. When someone wants to spend money you ask them for the\ntransaction and ideally you ask them for the transaction and the merkle branch\nfrom that transaction to the header. If they want to spend the money they have\nto carry around the data.\n\nAgreed on the legality aspect but another case which is worth considering is\nwhat anti-virus software might do when certain streams of bytes are sent across\nthe tcp socket or persisted to disk. Perhaps worth contacting an AV company and\nasking what is the smallest data they have a signature on.\n\nThanks,\nCaleb\n\n\nOn 04/09/2013 06:42 AM, Mike Hearn wrote:\n> OK, as the start of that conversation is now on the list, I might as well post the other thoughts we had. Or at least that I had :)\n> \n> It's tempting to see this kind of abuse through the lens of fees, because we only have a few hammers and so everything looks like a kind of nail. The problem is the moment you try to define \"abuse\" economically you end up excluding legitimate and beneficial uses as well. Maybe Peters patch for uneconomical outputs is different because of how it works. But mostly it's true. In this case, fees would never work - Peter said the guy who uploaded Wikileaks paid something like $500 to do it. I guess\n> by now it's more like $600-$700. It's hard for regular end users to compete with that kind of wild-eyed dedication to \"the cause\".\n> \n> The root problem here is people believe the block chain is a data structure that will live forever and be served by everyone for free, in perpetuity, and is thus the perfect place for \"uncensorable\" stuff. That's a reasonable assumption given how Bitcoin works today. But there's no reason it will be true in the long run (I know this can be an unpopular viewpoint).\n> \n> Firstly, legal issues - I think it's very unlikely any sane court would care about illegal stuff in the block chain given you need special tools to extract it (mens rea). Besides, I guess most end users will end up on SPV clients as they mature. So these users already don't have a copy of the entire block chain. I don't worry too much about this.\n> \n> Secondly, the need to host blocks forever. In future, many (most?) full nodes will be pruning, and won't actually store old blocks at all. They'll just have the utxo database, some undo blocks and some number of old blocks for serving, probably whatever fits in the amount of disk space the user is willing to allocate. But very old blocks will have been deleted. \n> \n> This leads to the question of what incentives people have to not prune. The obvious incentive is money - charge for access to older parts of the chain. The fewer people that host it, the more you can charge. In the worst case scenario where, you know, only 10 different organizations store a copy of the chain, it might mean that bootstrapping a new node in a trust-less manner is expensive. But I really doubt it'd ever get so few. Serving large static datasets just isn't that expensive. Also, you\n> don't actually need to replay from the genesis block to bring up a new code, you can copy the UTXO database from somewhere else. By comparing the databases of lots of different nodes together, the chances of you being in a matrix-like sybil world can be reduced to \"beyond reasonable doubt\". Maybe nodes would charge for copies of their database too, but ideally there are lots of nodes and so the charge for that should be so close to zero as makes no odds - you can trivially undercut someone by\n> buying access to the dataset and then reselling it for a bit less, so the price should converge on the actual cost of providing the service. Which will be very cheap.\n> \n> There was one last thought I had, which is that if there's a shorter team need to discourage this kind of thing we can use a network/bandwith related hack by changing the protocol. Nodes can serve up blocks encrypted under a random key. You only get the key when you finish the download. A blacklist can apply to Bloom filtering such that transactions which are known to be \"abusive\" require you to fully download the block rather than select the transactions with a filter. This means that people\n> can still access the data in the chain, but the older it gets the slower and more bandwidth intensive it becomes. Stuffing Wikileaks into the chain sounds good when a 20 line Python script can extract it \"instantly\". If someone who wants the files has to download gigabytes of padding around it first, suddenly hosting it on a Tor hidden service becomes more attractive.\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "steve",
                "date": "2013-04-09T18:56:02",
                "message_text_only": "On 09/04/2013 15:39, Caleb James DeLisle wrote:\n> Agreed on the legality aspect but another case which is worth considering is\n> what anti-virus software might do when certain streams of bytes are sent across\n> the tcp socket or persisted to disk.\n\nDo you mean firewalls or something like snort or other deep packet\ninspection for the tcp sockets statement? I dont see much of an issue\nwith either.\n\nset up your own private testnet and have a play with this\n\nhttp://www.eicar.org/83-0-Anti-Malware-Testfile.html\n\nThe eicar test virus.\n\n> Perhaps worth contacting an AV company and\n> asking what is the smallest data they have a signature on.\n\nI have tried a few ways of getting the eicar string into the blockchain\n(on a private testnet) and getting it flagged by AV, however it is a bit\ntricky (the getting it flagged bit). and tbh you would exclude the\nbitcoin directory and runtime from antivirus scans so i stopped bothering.\n\nI am making vague assumptions about using windows with antivirus. (and\nlinux for deep packet inspection, but the idea is the same whatever.)\n\nI found no greater attack surface area (in the blockchain) than\ncookies... thinking about it a bit more, there is a bit more potential\nas a bounce pad/egg drop location but not much - no heap spraying as\nsuch, or d/c tors, or heap header structs, etc. Im sure someone is sure\nto come up with something very clever tho. just not me.\n\ncheers,\n\nsteve\n\n> \n> Thanks,\n> Caleb\n> \n> \n> On 04/09/2013 06:42 AM, Mike Hearn wrote:\n>> OK, as the start of that conversation is now on the list, I might as well post the other thoughts we had. Or at least that I had :)\n>>\n>> It's tempting to see this kind of abuse through the lens of fees, because we only have a few hammers and so everything looks like a kind of nail. The problem is the moment you try to define \"abuse\" economically you end up excluding legitimate and beneficial uses as well. Maybe Peters patch for uneconomical outputs is different because of how it works. But mostly it's true. In this case, fees would never work - Peter said the guy who uploaded Wikileaks paid something like $500 to do it. I guess\n>> by now it's more like $600-$700. It's hard for regular end users to compete with that kind of wild-eyed dedication to \"the cause\".\n>>\n>> The root problem here is people believe the block chain is a data structure that will live forever and be served by everyone for free, in perpetuity, and is thus the perfect place for \"uncensorable\" stuff. That's a reasonable assumption given how Bitcoin works today. But there's no reason it will be true in the long run (I know this can be an unpopular viewpoint).\n>>\n>> Firstly, legal issues - I think it's very unlikely any sane court would care about illegal stuff in the block chain given you need special tools to extract it (mens rea). Besides, I guess most end users will end up on SPV clients as they mature. So these users already don't have a copy of the entire block chain. I don't worry too much about this.\n>>\n>> Secondly, the need to host blocks forever. In future, many (most?) full nodes will be pruning, and won't actually store old blocks at all. They'll just have the utxo database, some undo blocks and some number of old blocks for serving, probably whatever fits in the amount of disk space the user is willing to allocate. But very old blocks will have been deleted. \n>>\n>> This leads to the question of what incentives people have to not prune. The obvious incentive is money - charge for access to older parts of the chain. The fewer people that host it, the more you can charge. In the worst case scenario where, you know, only 10 different organizations store a copy of the chain, it might mean that bootstrapping a new node in a trust-less manner is expensive. But I really doubt it'd ever get so few. Serving large static datasets just isn't that expensive. Also, you\n>> don't actually need to replay from the genesis block to bring up a new code, you can copy the UTXO database from somewhere else. By comparing the databases of lots of different nodes together, the chances of you being in a matrix-like sybil world can be reduced to \"beyond reasonable doubt\". Maybe nodes would charge for copies of their database too, but ideally there are lots of nodes and so the charge for that should be so close to zero as makes no odds - you can trivially undercut someone by\n>> buying access to the dataset and then reselling it for a bit less, so the price should converge on the actual cost of providing the service. Which will be very cheap.\n>>\n>> There was one last thought I had, which is that if there's a shorter team need to discourage this kind of thing we can use a network/bandwith related hack by changing the protocol. Nodes can serve up blocks encrypted under a random key. You only get the key when you finish the download. A blacklist can apply to Bloom filtering such that transactions which are known to be \"abusive\" require you to fully download the block rather than select the transactions with a filter. This means that people\n>> can still access the data in the chain, but the older it gets the slower and more bandwidth intensive it becomes. Stuffing Wikileaks into the chain sounds good when a 20 line Python script can extract it \"instantly\". If someone who wants the files has to download gigabytes of padding around it first, suddenly hosting it on a Tor hidden service becomes more attractive.\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Precog is a next-generation analytics platform capable of advanced\n>> analytics on semi-structured data. The platform includes APIs for building\n>> apps and a phenomenal toolset for data science. Developers can use\n>> our toolset for easy data analysis & visualization. Get a free account!\n>> http://www2.precog.com/precogplatform/slashdotnewsletter\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-09T19:25:37",
                "message_text_only": "On Tue, Apr 9, 2013 at 7:39 AM, Caleb James DeLisle\n<calebdelisle at lavabit.com> wrote:\n> what anti-virus software might do when certain streams of bytes are sent across\n> the tcp socket or persisted to disk. Perhaps worth contacting an AV company and\n> asking what is the smallest data they have a signature on.\n\nI stuffed the testnet chain full of the EICAR test string and it\nhasn't triggered for anyone\u2014 it seems that (most?) AV tools do not\nscan big binary files of unknown type.. apparently.\n\nIf we encounter a case where they do we can implement storage\nscrambling: E.g. every node picks a random word and all their stored\ndata is xored with it."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-09T19:43:33",
                "message_text_only": "AV software changes all the time, I definitely recall cases where AV got\ninterested in, eg, web browser caches and ended up corrupting things. But\nthat might be because it knew the files were written by a web browser.\nLightly frying the contents has the disadvantage of no mmap and no\nsendfile() in future. Perhaps an idea to stash in our back pockets if it\nturns out to be needed later.\n\n\nOn Tue, Apr 9, 2013 at 9:25 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Apr 9, 2013 at 7:39 AM, Caleb James DeLisle\n> <calebdelisle at lavabit.com> wrote:\n> > what anti-virus software might do when certain streams of bytes are sent\n> across\n> > the tcp socket or persisted to disk. Perhaps worth contacting an AV\n> company and\n> > asking what is the smallest data they have a signature on.\n>\n> I stuffed the testnet chain full of the EICAR test string and it\n> hasn't triggered for anyone\u2014 it seems that (most?) AV tools do not\n> scan big binary files of unknown type.. apparently.\n>\n> If we encounter a case where they do we can implement storage\n> scrambling: E.g. every node picks a random word and all their stored\n> data is xored with it.\n>\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/42539cf5/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-09T14:50:10",
                "message_text_only": "Well, I'm not fundamentally opposed to a blacklist, but it would have\nto be done in a VERY open manner.  I do think the community would\nagree that storing big data transactions is not the primary purpose of\nbitcoin.\n\nHowever, there should be some metrics and heuristics that take care of\nthis problem.  Notably the dev consensus (sans you, Mike :)) seems to\nbe that uneconomical outputs should be made non-standard.\n\nHere is one approach:\n    Block uneconomic UTXO creation\n    https://github.com/bitcoin/bitcoin/pull/2351\n\nI would like to see at least a stopgap solution to data spam in 0.8.2,\nas it is a clear and present problem.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-09T14:53:47",
                "message_text_only": "> However, there should be some metrics and heuristics that take care of\n> this problem.  Notably the dev consensus (sans you, Mike :)) seems to\n> be that uneconomical outputs should be made non-standard.\n\n\nI think that patch is ok as it doesn't really have any fixed concept of\nwhat is uneconomical. But I haven't thought about it much. As Gavin says,\nthere's an obvious backwards compatibility problem there. It should\nprobably wait until the payment protocol work is done, so the major user of\nmicropayments-as-messages  can migrate off them.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/5d257d34/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-09T15:01:09",
                "message_text_only": "On Tue, Apr 9, 2013 at 10:53 AM, Mike Hearn <mike at plan99.net> wrote:\n>> However, there should be some metrics and heuristics that take care of\n>> this problem.  Notably the dev consensus (sans you, Mike :)) seems to\n>> be that uneconomical outputs should be made non-standard.\n\n> I think that patch is ok as it doesn't really have any fixed concept of what\n> is uneconomical. But I haven't thought about it much. As Gavin says, there's\n> an obvious backwards compatibility problem there. It should probably wait\n> until the payment protocol work is done, so the major user of\n> micropayments-as-messages  can migrate off them.\n\n\"wait\" is only an option if there is an alternate solution already\ncoded and ready for 0.8.2.\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-09T17:58:19",
                "message_text_only": "On Tue, Apr 09, 2013 at 04:53:47PM +0200, Mike Hearn wrote:\n> there's an obvious backwards compatibility problem there. It should\n> probably wait until the payment protocol work is done, so the major user of\n> micropayments-as-messages  can migrate off them.\n\nAs I pointed out in my initial post on the issue, SatoshiDice is pretty\nmuch unaffected by the patch. They just have to deduct enough from\nincoming bets to make the \"you lost\" output economical and they're good\nto go. IIRC they already deduct fees on low-value bets anyway.\n\nOn the other hand, the patch makes a clear statement that Bitcoin is not\nfor microtransactions. If succesful it will gradually force a number of\nusers, ad-based faucet sites and the like, to off-chain transactions or\noff Bitcoin entirely. The payment protocol has nothing to do with that.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/cdfda359/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "On-going data spam",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Robert Backhaus",
                "Caleb James DeLisle",
                "Mike Hearn",
                "Peter Todd",
                "steve",
                "Gregory Maxwell",
                "Jay F"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 29261
        }
    },
    {
        "title": "[Bitcoin-development] bitcoinj 0.8",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-04-09T21:03:35",
                "message_text_only": "I'm happy to announce the release of bitcoinj 0.8, a Java library for\nwriting Bitcoin applications. Both simplified and full verification are\nsupported. BitcoinJ has been used to create everything from end-user wallet\napps to network crawlers to SatoshiDice.\n\nTo get bitcoinj 0.8, check out our source from git and then run *git fetch\n--all; git checkout **cbbb1a2bf4d1*. This will place you on the 0.8 release\nin a secure manner. This message was written on Tuesday 9th April 2013 and\nis signed with the following key, which will be used in all release\nannouncements in future: 16vSNFP5Acsa6RBbjEA7QYCCRDRGXRFH4m.\n\nSignature for previous\nparagraph: H8itldUGHHt8jXmFwRX/gASXrhG1a/k0VG0vwFMjQCAWDpxgA17ODfSPFNgAOPDnPmT1gLLUlHsEqwXHBoj+JMU=\n\nYou can also verify the google.com DKIM signature on the official\nannouncement<https://groups.google.com/forum/?fromgroups=#!topic/bitcoinj-announce/IB7dlc_g9sU>\n.\n\nI'm especially happy about this release because for the first time, we have\nan SPV implementation that is competitive performance-wise with more\ncentralised solutions that rely on custom servers. Wallets based on\nbitcoinj 0.8 complete first time setup for new users in only a few seconds,\neliminating the last source of significant delays. Every operation except\nkey import now completes more or less immediately.\n\n\n*New in this release*\n\n   - Thanks to Jim Burton, encryption of private keys in the wallet is now\n   supported. Keys are encrypted using an AES key derived using scrypt.\n   - A new SPVBlockStore provides dramatically better performance and\n   bounded disk usage by storing block headers in an mmapped ring buffer. This\n   makes syncing headers for new chains/wallets network limited instead of\n   disk io limited.\n   - A new tool is provided to create lists of block header checkpoints\n   that can then be used to initialize a new block store. This allows most\n   headers to not be downloaded when initializing a new chain/wallet, making\n   first-run of new wallets much faster.\n   - Bloom-filtering capable nodes are now queried for transactions at\n   startup, meaning you can receive payments that weren't confirmed yet even\n   if your wallet wasn't running at the time.\n   - Many static analysis warnings have been cleared.\n   - All event listeners except transaction confidence listeners now run\n   unlocked and core objects have been converted to use cycle detecting locks.\n   Multiple lock inversions were fixed.\n   - DNS seeds are now supported for testnet.\n   - PeerEventListener now lets you catch and process exceptions thrown\n   during peer message processing. This is useful for reporting crashes that\n   don't take out your entire app, but just result in disconnection of a peer.\n   - Matt Corallo's bitcoind comparison tool was merged in. It runs a large\n   set of regression tests that compares the behaviour of bitcoinj in full\n   verification mode against bitcoind.\n   - The vast bulk of the changes in this release are bug fixes,\n   optimizations and minor API improvements. They are too numerous to list\n   here, please refer to the commit logs for details.\n\n*API changes:*\n\n   - Event listeners were previously locked before being called, and the\n   object being listened to was also locked. This is no longer true - your\n   event listeners must be thread safe and the objects that triggered the\n   event may be changing in parallel.\n   - IrcDiscovery is now deprecated, as LFnet has gone offline and DNS\n   seeding can be used for both test and production networks. The code is\n   still there in case you want to use IRC bootstrapping for a private\n   experimental network.\n   - BoundedOverheadBlockStore is now deprecated. It was replaced by\n   SPVBlockStore. The file format has changed, so BOBS will stick around\n   for a while so users can be upgraded.\n   - The Derby based block store has been deleted. It only supported SPV\n   mode and wasn't used much.\n   - The static NetworkParameters methods now vend singleton objects.\n   - WalletEventListener.onCoinsSent is no longer run when a transaction\n   sends to self but the balance doesn't change.\n\n*Known issues:*\n\n   - Transaction confidence listeners are still run with the wallet lock\n   held, which means it's possible to trigger unexpected lock inversions by\n   doing certain things inside them. Also, confidence listeners sometimes run\n   in places where the wallet code is not fully re-entrant, meaning that\n   modifying the wallet whilst inside a confidence listener may cause\n   problems. A simple fix is to run your listener code in a separate thread. A\n   future release will fix this by ensuring that listeners only ever run at\n   the end of wallet mutating operations and with the wallet unlocked. Core\n   objects will also switch to using non-reentrant locks so unexpected\n   reentrancy deadlocks early and reliably.\n   - If multiple peers disconnect simultaneously it's possible for the\n   system to deadlock due to Netty allowing uncontrolled reentrancy when\n   sending outbound messages (issue\n381<https://code.google.com/p/bitcoinj/issues/detail?id=381>\n   ).\n   - The Wallet expects that it can store all transactions in memory\n   (including spent transactions), eg, for rendering in lists and availability\n   during re-orgs. On highly constrained devices like old Android phones it is\n   possible to run out of RAM if a wallet gets very large.\n   - There are some bugs that can cause the wallet to get into an\n   inconsistent state in various rare situations. The wallets can be fixed by\n   replaying them. These bugs will be addressed as the next highest priority.\n\nThere is a further list of limitations and issues available on the wiki\nhere:\n\nhttps://code.google.com/p/bitcoinj/wiki/Limitations\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/b3551826/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-04-10T08:58:50",
                "message_text_only": "On Tuesday 09 April 2013 22:03:35 Mike Hearn wrote:\n\n> To get bitcoinj 0.8, check out our source from git and then run *git fetch\n> --all; git checkout **cbbb1a2bf4d1*. This will place you on the 0.8 release\n> in a secure manner. This message was written on Tuesday 9th April 2013 and\n\nNot quite secure yet, because you didn't sign your email.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-10T10:02:09",
                "message_text_only": "The key in the message was used in my last announcement, so that\nestablishes continuity there.\n\nBut regardless, all mails I send are signed automatically by Gmail using\neither the gmail.com consumer key (for my posts to this list) or the\ngoogle.com corporate key (for my posts to the bitcoinj lists), see\ndkim.orgfor more details on this. Whilst this is not signing in the\nGPG web of\ntrust sense, realistically the Gmail DKIM keys are much safer than any key\nI could create/maintain, and my ability to sign mail as hearn at google.com is\ncontrolled by hardware second factors and various other rather intense\nsecurity systems I can't discuss.\n\nI've considered just not having the additional Bitcoin-key based signatures\nat all, but it would help keep continuity in the case that I leave Google\nor if there's a DKIM key rotation.\n\n\n\nOn Wed, Apr 10, 2013 at 10:58 AM, Andy Parkins <andyparkins at gmail.com>wrote:\n\n> On Tuesday 09 April 2013 22:03:35 Mike Hearn wrote:\n>\n> > To get bitcoinj 0.8, check out our source from git and then run *git\n> fetch\n> > --all; git checkout **cbbb1a2bf4d1*. This will place you on the 0.8\n> release\n> > in a secure manner. This message was written on Tuesday 9th April 2013\n> and\n>\n> Not quite secure yet, because you didn't sign your email.\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130410/47131c62/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoinj 0.8",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andy Parkins"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7815
        }
    },
    {
        "title": "[Bitcoin-development] To prevent arbitrary data storage in txouts \u2014 The Ultimate Solution",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-10T02:53:38",
                "message_text_only": "(1) Define a new address type, P2SH^2 like P2SH but is instead\nH(H(ScriptPubKey)) instead of H(ScriptPubKey). A P2SH^2 address it is\na hash of a P2SH address.\n\n(2) Make a relay rule so that to relay a P2SH^2  you must include\nalong the inner P2SH address.  All nodes can trivially verify it by\nhashing it.\n\n(2a) If we find that miners mine P2SH^2 addresses where the P2SH\nwasn't relayed (e.g. they want the fees) we introduce a block\ndiscouragement rule where a block is discouraged if you receive it\nwithout receiving the P2SH^2 pre-images for it.\n\nWith this minor change there is _no_ non-prunable location for users\nto cram data into except values.  (and the inefficiency of cramming\ndata into values is a strong deterrent in any case)\n\nThe same thing could also be done for OP_RETURN PUSH value outputs\nused to link transactions to data. Make the data be a hash, outside of\nthe txn include the preimage of the hash."
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-10T03:03:01",
                "message_text_only": "On Tue, Apr 09, 2013 at 07:53:38PM -0700, Gregory Maxwell wrote:\n\nNote how we can already do this: P2SH uses Hash160, which is\nRIPE160(SHA256(d)) We still need a new P2SH *address* type, that\nprovides the full 256 bits, but no-one uses P2SH addresses yet anyway.\n\nThis will restrict data stuffing to brute forcing hash collisions. It'd\nbe interesting working out the math for how effective that is, but it'll\ncertainely be expensive in terms of time hashing power that could solve\nshares instead.\n\n> (1) Define a new address type, P2SH^2 like P2SH but is instead\n> H(H(ScriptPubKey)) instead of H(ScriptPubKey). A P2SH^2 address it is\n> a hash of a P2SH address.\n> \n> (2) Make a relay rule so that to relay a P2SH^2  you must include\n> along the inner P2SH address.  All nodes can trivially verify it by\n> hashing it.\n> \n> (2a) If we find that miners mine P2SH^2 addresses where the P2SH\n> wasn't relayed (e.g. they want the fees) we introduce a block\n> discouragement rule where a block is discouraged if you receive it\n> without receiving the P2SH^2 pre-images for it.\n> \n> With this minor change there is _no_ non-prunable location for users\n> to cram data into except values.  (and the inefficiency of cramming\n> data into values is a strong deterrent in any case)\n> \n> The same thing could also be done for OP_RETURN PUSH value outputs\n> used to link transactions to data. Make the data be a hash, outside of\n> the txn include the preimage of the hash.\n> \n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/dafe5a80/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-10T03:08:31",
                "message_text_only": "On Tue, Apr 09, 2013 at 11:03:01PM -0400, Peter Todd wrote:\n> On Tue, Apr 09, 2013 at 07:53:38PM -0700, Gregory Maxwell wrote:\n> \n> Note how we can already do this: P2SH uses Hash160, which is\n> RIPE160(SHA256(d)) We still need a new P2SH *address* type, that\n> provides the full 256 bits, but no-one uses P2SH addresses yet anyway.\n> \n> This will restrict data stuffing to brute forcing hash collisions. It'd\n> be interesting working out the math for how effective that is, but it'll\n> certainely be expensive in terms of time hashing power that could solve\n> shares instead.\n\nOh, and while we're at it, long-term (hard-fork) it'd be good to change\nthe tx hash algorithm to extend the merkle tree into the txouts/txins\nitself, which means that to prove a given txout exists you only need to\nprovide it, rather than the full tx.\n\nCurrently pruning can't prune a whole tx until every output is spent.\nMake that change and we can prune tx's bit by bit, and still be able to\nserve nodes requesting proof of their UTXO without making life difficult\nfor anyone trying to spent old UTXO's. The idea is also part of UTXO\nproof stuff anyway.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130409/ed5a5c89/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-04-10T15:58:10",
                "message_text_only": "On 4/10/13, Peter Todd <pete at petertodd.org> wrote:\n> Oh, and while we're at it, long-term (hard-fork) it'd be good to change\n> the tx hash algorithm to extend the merkle tree into the txouts/txins\n> itself, which means that to prove a given txout exists you only need to\n> provide it, rather than the full tx.\n>\n> Currently pruning can't prune a whole tx until every output is spent.\n> Make that change and we can prune tx's bit by bit, and still be able to\n> serve nodes requesting proof of their UTXO without making life difficult\n> for anyone trying to spent old UTXO's. The idea is also part of UTXO\n> proof stuff anyway.\n\nI thought about this before, I like the idea very much.\nWould such a fork be controversial for anyone?\nWould anyone oppose to this for some reason I'm missing?\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-11T11:27:08",
                "message_text_only": "On Wed, Apr 10, 2013 at 05:58:10PM +0200, Jorge Tim\u00f3n wrote:\n> On 4/10/13, Peter Todd <pete at petertodd.org> wrote:\n> > Oh, and while we're at it, long-term (hard-fork) it'd be good to change\n> > the tx hash algorithm to extend the merkle tree into the txouts/txins\n> > itself, which means that to prove a given txout exists you only need to\n> > provide it, rather than the full tx.\n> >\n> > Currently pruning can't prune a whole tx until every output is spent.\n> > Make that change and we can prune tx's bit by bit, and still be able to\n> > serve nodes requesting proof of their UTXO without making life difficult\n> > for anyone trying to spent old UTXO's. The idea is also part of UTXO\n> > proof stuff anyway.\n> \n> I thought about this before, I like the idea very much.\n> Would such a fork be controversial for anyone?\n> Would anyone oppose to this for some reason I'm missing?\n\nYou mean https://bitcointalk.org/index.php?topic=137933.0 ?\n\nI would oppose it, and I wrote the above proposal. The code required to\nimplement UTXO fraud proofs is more complex than the entire Bitcoin code\nbase; obviously that much new fork-critical code opens up huge technical\nrisks. As an example, can you think of how UTXO fraud proofs can cause\nan arbitrarily deep re-org?\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130411/839ddbc3/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-10T06:53:16",
                "message_text_only": "On Tue, Apr 09, 2013 at 11:03:01PM -0400, Peter Todd wrote:\n> On Tue, Apr 09, 2013 at 07:53:38PM -0700, Gregory Maxwell wrote:\n> \n> Note how we can already do this: P2SH uses Hash160, which is\n> RIPE160(SHA256(d)) We still need a new P2SH *address* type, that\n> provides the full 256 bits, but no-one uses P2SH addresses yet anyway.\n\nWe can keep the length 160bits:\n\nscriptPubKey: OP_HASH160 OP_HASH160 <Hash160(P2SHv2 address)> OP_EQUALVERIFY\n\nYou don't need to change the address type at all if new software is\nwritten to check for both forms of txout in the actual\nblockchain/transaction code at the deeper level. Basically now a P2SH\naddress could actually mean one of two scriptPubKey forms, must like a\nnormal address can mean either the hashed or bare OP_CHECKSIG form.\n\n\nOf course, either way you have the odd side-effect that it's now\ndifficult to pay further funds to a random txout seen on the\nblockchain... strange, although possibly not a bad thing.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130410/3cc8eb78/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-10T07:15:26",
                "message_text_only": "On Tue, Apr 9, 2013 at 11:53 PM, Peter Todd <pete at petertodd.org> wrote:\n> Of course, either way you have the odd side-effect that it's now\n> difficult to pay further funds to a random txout seen on the\n> blockchain... strange, although possibly not a bad thing.\n\nOh wow, thats actually a quite good thing\u2014 it's a property I know I've\nlamented before that I didn't know how to get."
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-10T07:29:36",
                "message_text_only": "On Wed, Apr 10, 2013 at 12:15:26AM -0700, Gregory Maxwell wrote:\n> On Tue, Apr 9, 2013 at 11:53 PM, Peter Todd <pete at petertodd.org> wrote:\n> > Of course, either way you have the odd side-effect that it's now\n> > difficult to pay further funds to a random txout seen on the\n> > blockchain... strange, although possibly not a bad thing.\n> \n> Oh wow, thats actually a quite good thing\u2014 it's a property I know I've\n> lamented before that I didn't know how to get.\n\nDon't get your hopes up - I fully expect blockchain.info to keep a\npublicly accessible database of inner-digest -> P2SH addresses...\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130410/84c9b37b/attachment.sig>"
            },
            {
                "author": "Robert Backhaus",
                "date": "2013-04-10T03:52:17",
                "message_text_only": "That sounds workable. I take it that the P2SH address is not stored? I like\nit that this denies the possibility of storing data in the block chain, but\ndoes not block interesting uses like creating date stamps - You can still\nstore the 'fake P2SH' value whose checksum is secured by the blockchain.\n\n\nOn 10 April 2013 12:53, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> (1) Define a new address type, P2SH^2 like P2SH but is instead\n> H(H(ScriptPubKey)) instead of H(ScriptPubKey). A P2SH^2 address it is\n> a hash of a P2SH address.\n>\n> (2) Make a relay rule so that to relay a P2SH^2  you must include\n> along the inner P2SH address.  All nodes can trivially verify it by\n> hashing it.\n>\n> (2a) If we find that miners mine P2SH^2 addresses where the P2SH\n> wasn't relayed (e.g. they want the fees) we introduce a block\n> discouragement rule where a block is discouraged if you receive it\n> without receiving the P2SH^2 pre-images for it.\n>\n> With this minor change there is _no_ non-prunable location for users\n> to cram data into except values.  (and the inefficiency of cramming\n> data into values is a strong deterrent in any case)\n>\n> The same thing could also be done for OP_RETURN PUSH value outputs\n> used to link transactions to data. Make the data be a hash, outside of\n> the txn include the preimage of the hash.\n>\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130410/f3916213/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-10T03:58:40",
                "message_text_only": "On Tue, Apr 9, 2013 at 8:52 PM, Robert Backhaus <robbak at robbak.com> wrote:\n> That sounds workable. I take it that the P2SH address is not stored? I like\n> it that this denies the possibility of storing data in the block chain, but\n> does not block interesting uses like creating date stamps - You can still\n> store the 'fake P2SH' value whose checksum is secured by the blockchain.\n\nCorrect. It doesn't prevent value commitment (which is actually what\nwe need for our currency use), just data storage.\n\nAnd as Peter points out\u2014 you could try to store a little data, but\nthat has a computational cost which is exponential in the amount of\ndata stored per output. ... like storing data in values, thats awkward\nenough to not be especially problematic, I expect."
            }
        ],
        "thread_summary": {
            "title": "To prevent arbitrary data storage in txouts \u2014 The Ultimate Solution",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robert Backhaus",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Peter Todd"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 12620
        }
    },
    {
        "title": "[Bitcoin-development] RFC: extend signmessage/verifymessage to P2SH multisig",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-04-14T05:09:58",
                "message_text_only": "Currently signmessage/verifymessage only supports messages signed by a\nsingle key. We should extend that to messages signed by n-of-m keys, or\nfrom the users point of view, P2SH multisig addresses.\n\nrpc.cpp:signmessage() returns the output of SignCompact(). That in turn\nstarts with a header byte marking the signs of the various keys to allow\nfor key recovery. The header byte can be one of 0x1B, 0x1C, 0x1D or 0x1E\n\n\nFor multisig signmessage signatures this is extended:\n\n    <01> <varint n> <varint m> <sig or key> {<sig or key>, ...}\n\nEach signature or key can be one of the following forms:\n\n    sig: <1B/1C/1D/1E> <32 byte r> <32 byte s>\n    compress key: <02/03> <32 byte x>\n    uncompressed key: <04> <32 byte x> <32 byte y>\n\nNote that we have to provide all pubkeys, even if they aren't used for a\ngiven signature, to allow the P2SH address to be reconstructed.\n\nDecoding/encoding is a bit code-intensive due to the all the cases, but\non the other hand this format keeps the size down to an absolute\nminimum. Alternatively I could use length bytes.\n\nThe format is backwards compatible in the sense that older versions will\nfail safely on new signatures, even ones that have been truncated.\nSimilarly new signatures are easily distinguished from old, and going\nforward if we for some reason need yet another signature format the\nleading byte can be incremented.\n\nSigning incomplete signatures on messages can be handled by converting\npubkeys to signatures. Similarly the RPC signmessage command can be\nextended with an optional \"existing signature\" option.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130414/03af6519/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-04-14T05:21:21",
                "message_text_only": "If we're going to extend/expand message signing, can we please add a\nproper ASCII-armored format for it?  Really, anything that encodes the\nsigned message next to the signature, so that there's no ambiguities\nabout what was signed.  You can keep the \"bare signatures\" as an option\nfor backwards compatiblity, but offer this as the primary one.\n\nWhat we really want is to have the user copy an ASCII-armored block of\ntext into the client (or we could have a URI-extension for this), and\nthe app pops up with a window that says \"The following message has a\nvalid signature from address 1XKjf32kJbf...:   <message>\".  \n\nI know people argue they'd like to get away from raw addresses and\ncopy-and-paste.  But it'll be a while before that happens, and there's a\nlot of demand for Armory to become compatible with Bitcoin-Qt signing. \nPeople are obviously using it.\n\n-Alan\n\n\n\n\n\nOn 04/14/2013 01:09 AM, Peter Todd wrote:\n> Currently signmessage/verifymessage only supports messages signed by a\n> single key. We should extend that to messages signed by n-of-m keys, or\n> from the users point of view, P2SH multisig addresses.\n>\n> rpc.cpp:signmessage() returns the output of SignCompact(). That in turn\n> starts with a header byte marking the signs of the various keys to allow\n> for key recovery. The header byte can be one of 0x1B, 0x1C, 0x1D or 0x1E\n>\n>\n> For multisig signmessage signatures this is extended:\n>\n>     <01> <varint n> <varint m> <sig or key> {<sig or key>, ...}\n>\n> Each signature or key can be one of the following forms:\n>\n>     sig: <1B/1C/1D/1E> <32 byte r> <32 byte s>\n>     compress key: <02/03> <32 byte x>\n>     uncompressed key: <04> <32 byte x> <32 byte y>\n>\n> Note that we have to provide all pubkeys, even if they aren't used for a\n> given signature, to allow the P2SH address to be reconstructed.\n>\n> Decoding/encoding is a bit code-intensive due to the all the cases, but\n> on the other hand this format keeps the size down to an absolute\n> minimum. Alternatively I could use length bytes.\n>\n> The format is backwards compatible in the sense that older versions will\n> fail safely on new signatures, even ones that have been truncated.\n> Similarly new signatures are easily distinguished from old, and going\n> forward if we for some reason need yet another signature format the\n> leading byte can be incremented.\n>\n> Signing incomplete signatures on messages can be handled by converting\n> pubkeys to signatures. Similarly the RPC signmessage command can be\n> extended with an optional \"existing signature\" option.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130414/f04c815c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-14T06:25:35",
                "message_text_only": "On Sun, Apr 14, 2013 at 01:21:21AM -0400, Alan Reiner wrote:\n> If we're going to extend/expand message signing, can we please add a\n> proper ASCII-armored format for it?  Really, anything that encodes the\n> signed message next to the signature, so that there's no ambiguities\n> about what was signed.  You can keep the \"bare signatures\" as an option\n> for backwards compatiblity, but offer this as the primary one.\n> \n> What we really want is to have the user copy an ASCII-armored block of\n> text into the client (or we could have a URI-extension for this), and\n> the app pops up with a window that says \"The following message has a\n> valid signature from address 1XKjf32kJbf...:   <message>\".  \n\nI already looked into ASCII-armoring PGP style for a different project.\n(timestamping) Basically you'd want to follow RFC2440, section 7\n\"Cleartext signature framework\":\n\n-----BEGIN BTC SIGNED MESSAGE-----\n\nHello world!\n-----BEGIN BTC SIGNATURE-----\nIKBeCbxXHvD1TJh8ZlMySo26w5z6YZQD1xqKgbhsvlhEgcFD+kvKx4LzUz1yxg/8\nIdYdBnzez77VDq3odHrVftg=\n-----END BTC SIGNATURE-----\n\nPretty simple really and doesn't need to be done prior to other\nsignmessage changes. There may be an issue passing \\r's through the RPC\ninterface; the RFC specifies CRLF line endings.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130414/ec7c65b7/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-04-14T18:24:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/14/2013 02:25 AM, Peter Todd wrote:\n> On Sun, Apr 14, 2013 at 01:21:21AM -0400, Alan Reiner wrote:\n>> If we're going to extend/expand message signing, can we please add a\n>> proper ASCII-armored format for it?  Really, anything that encodes the\n>> signed message next to the signature, so that there's no ambiguities\n>> about what was signed.  You can keep the \"bare signatures\" as an option\n>> for backwards compatiblity, but offer this as the primary one.\n>>\n>> What we really want is to have the user copy an ASCII-armored block of\n>> text into the client (or we could have a URI-extension for this), and\n>> the app pops up with a window that says \"The following message has a\n>> valid signature from address 1XKjf32kJbf...:   <message>\". \n>\n> I already looked into ASCII-armoring PGP style for a different project.\n> (timestamping) Basically you'd want to follow RFC2440, section 7\n> \"Cleartext signature framework\":\n>\n> -----BEGIN BTC SIGNED MESSAGE-----\n>\n> Hello world!\n> -----BEGIN BTC SIGNATURE-----\n> IKBeCbxXHvD1TJh8ZlMySo26w5z6YZQD1xqKgbhsvlhEgcFD+kvKx4LzUz1yxg/8\n> IdYdBnzez77VDq3odHrVftg=\n> -----END BTC SIGNATURE-----\n>\n> Pretty simple really and doesn't need to be done prior to other\n> signmessage changes. There may be an issue passing \\r's through the RPC\n> interface; the RFC specifies CRLF line endings.\n>\nPerfect.  That was the spec I was looking for but too lazy to find it. \nI guess I'll lead by example and just do it in Armory.  I'll let users\npressure the other devs to follow :)\n\n- -Alan\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEARECAAYFAlFq9GIACgkQYdHIW5RKKv1A2gCeMfdttPylmPqPqemo0Q2uACEt\neAcAn21a7sYy+TNIinRR3SlVgm4VbJPh\n=qGlo\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-04-14T05:26:37",
                "message_text_only": "On Sunday, April 14, 2013 5:09:58 AM Peter Todd wrote:\n> Currently signmessage/verifymessage only supports messages signed by a\n> single key. We should extend that to messages signed by n-of-m keys, or\n> from the users point of view, P2SH multisig addresses.\n\nI think it would be wise to figure out HD wallet changes before trying to \nextend message signing. For privacy/safety, it would be a good idea to avoid \nsigning with the same private key twice under any circumstances, so it might \nmake sense to create a new address format the represent a chain of keys \ninstead of one key or combination of keys.\n\nLuke"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-14T06:29:39",
                "message_text_only": "On Sun, Apr 14, 2013 at 05:26:37AM +0000, Luke-Jr wrote:\n> On Sunday, April 14, 2013 5:09:58 AM Peter Todd wrote:\n> > Currently signmessage/verifymessage only supports messages signed by a\n> > single key. We should extend that to messages signed by n-of-m keys, or\n> > from the users point of view, P2SH multisig addresses.\n> \n> I think it would be wise to figure out HD wallet changes before trying to \n> extend message signing. For privacy/safety, it would be a good idea to avoid \n> signing with the same private key twice under any circumstances, so it might \n> make sense to create a new address format the represent a chain of keys \n> instead of one key or combination of keys.\n\nSure, which is why I have the header byte so that when we do come up\nwith a chain of keys thing, that in turn can get it's own magic number\nallocated.\n\nFWIW I have an application now where a multisig signmessage would be\nuseful.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130414/fe94eefa/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "RFC: extend signmessage/verifymessage to P2SH multisig",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Alan Reiner",
                "Peter Todd"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 10457
        }
    },
    {
        "title": "[Bitcoin-development] [bitcoin] Enable tx replacement on testnet. (#2516)",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-04-16T11:28:14",
                "message_text_only": "On Mon, Apr 15, 2013 at 04:59:33PM -0700, Pieter Wuille wrote:\n> How about: keep a counter in the mempool, remembering the sum of the sizes of all replacements a transaction has had. When deciding whether to accept a transaction as a replacement, increase this number and then check whether its fee is enough for that size. That's certainly overkill, as it will correctly count network and processing overhead, but not blockchain or UTXO burdening (as those only happen after finalizing). In any case, it's easy to implement, seems safe to me, and would at least allow experimenting with this on testnet.\n\nThoughts:\n\n1) IsNewerThan() returns false if vin.size() != old.vin.size(), or if any of\n   the prevouts (txhash/vout #) don't match. In other words the inputs to a\n   transaction can't be changed by the current transaction replacement\n   mechanism.\n\n2) If not for transaction replacement, nSequence could have been a boolean flag\n   called fIgnoreLockTime.\n\n3) The nSequence part of IsNewerThan() is essentially just another type of\n   zero-conf transaction where you trust miners and relaying nodes to do what\n   you tell them too. We shouldn't encourage zero-conf transactions.\n\n4) Testnet may be for testing, but we know tx-replacement is trivially DoS-able\n   right now. Those who want to experiment with attacks and counter measures\n   should do so in a way that doesn't disrupt testnet for everyone - setting up\n   their own tx-replacement enabled nodes is easy to do.\n\n5) Zero-conf transactions, replacement or otherwise, have issues with consensus\n   failure when network bandwidth is limited. In particular even if we require\n   each re-broadcast of a transation to be accompanied by an increase in the\n   fees it pays, fees += new tx size * MIN_RELAY_FEE has been proposed by a few\n   people for instance, the cost to different nodes for that bandwidth is different.\n\n   While less of an issue with 1MB blocks, with large blocks, especially blocksizes\n   only limited by what miners think is reasonable considering available\n   network bandwidth, lots of nodes and miners will be bandwidth starved\n   and transaction fees will fall to the marginal cost of the network\n   bandwidth and processing power to handle them. That cost is different\n   for different parties - you definitely won't get consensus and thus\n   zero-conf security in that scenario.\n\n6) Finally zero-conf transactions have issues with consensus failures\n   caused by limited mempool sizes.\n\n\nIn any case, the more pressing issue re: replacement is changing fees\nattached to transactions after they have been broadcast. Lots of users\nare getting their transactions stuck with few options to fix them.\n\n\nThe more I think about the issue the more I think we should nip this\nzero-conf madness in the bud: change the relay rules so that\ntransactions are replaced based on fees regardless of how that changes\ntransaction outputs. Of course, this does make double-spending an\nunconfirmed transaction trivial. On the other hand, this makes changing\nfees after the fact trivial, and it lets us implement a limited 'undo'\nbutton for when people screw up. It also allows for many of the\napplications transaction replacement was meant for in the first place\nanyway, and all the applications where it's actually secure.\n\nWe keep saying over and over again to stop accepting zero-conf\ntransactions, but people do it anyway because it seems secure. It's a\nvery dangerous situation because the security of zero-conf transactions\ncan change overnight simply by some fraction of the hashing power\nimplementing that exact change.\n\nSome thought is required as to exactly what \"replace by fees\" looks\nlike, economically optimal is a bit complex due to it's dependency on\noverall mempool backlog, but a rough first version should be easy to\nhammer out.\n\n\nFunny enough though: I'm working on a trusted-third-party ledger design,\nintentially made to be close to 100% compatible with standard Bitcoin,\nand in that system tx-replacement by nSequence will be a perfectly\nreasonable thing to do.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130416/35286cda/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Enable tx replacement on testnet. (#2516)",
            "categories": [
                "Bitcoin-development",
                "bitcoin"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4361
        }
    },
    {
        "title": "[Bitcoin-development] Anti DoS for tx replacement",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-04-16T17:39:38",
                "message_text_only": "This was previously discussed on the forums a bunch of times, but in\nparticular here:\n\n  https://bitcointalk.org/index.php?topic=91732.0\n\nBTW, I don't think all this has to be solved to re-activate replacement on\ntestnet. It's useful for people to be able to develop apps that use this\nfeature, indeed, it helps build the case for re-activating it on the main\nnetwork after the necessary work is done. Otherwise there'll inevitably be\npeople who say \"why re-activate something even though we think it's safe\nwhen there are no use cases for it\". Letting people develop and deploy\ninteresting prototypes in parallel solves that catch-22.\n\n  ---\n\nRefresher: since the first release Bitcoin has had the ability to replace\ntransactions that sit in the memory pool if the transaction is non-final,\nthe inputs are the same and the replacement is newer than the replacee.\nBeing non-final means not having reached the nLockTime threshold, and\nhaving at least one input with a sequence number < UINT_MAX. Around the\ntime of the bugs in various opcodes being found, Satoshi disabled the\nfeature because nothing was using it - it was something he'd planned for\nthe future, it had no utility in the Bitcoin of 2010.\n\nThe purpose of tx replacement is to implement high frequency trading,\naccording to material Satoshi sent me when I asked him what it was all for\n(I wanted to know why sequence numbers were a property of inputs not the\ntransaction).\n\nIt's very important to understand that this does *NOT* mean high-frequency\nfrom the networks perspective. In normal operation, tx replacement is not\nactually intended to be used at all. Sort of like double-spending\nprotection, it's a code path that's only meant to be triggered when one or\nthe other party is maliciously trying to roll back a negotiated contract.\nAnd when a party is trying to do that, you don't need lots of replacements.\nA single replacement is enough.\n\nTo see why this is the case please review the micropayment channel protocol\nhere:\n\nhttps://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party\n\nThis isn't the only use of contractual HFT in Bitcoin, it's a deliberately\nsimplified and stripped down example (eg, that only uses two parties). The\nexample Satoshi gave me was more abstract and actually had N parties in it\n- it left me puzzled for a while and struggling to see practical\napplication. The \"billing for a metered resource\" use case is easier to\nunderstand.\n\nNow the obvious problem is that even though the feature is only intended to\nbe used occasionally or never, nothing in the existing code stops you using\nit as fast as possible and exhausting nodes CPU time and bandwidth.\n\nWhat's more, solving this is not as easy as it looks. Most proposed\nsolutions will not work:\n\n1) Requiring higher fees for each replacement means that a channel/contract\nhas to be torn down and rebuilt much, much faster than before because\notherwise the amount of money lost to fees quickly becomes the entire size\nof the channel (or you can't update it very often). Remember, you'd have to\nincrease the fee for each replacement regardless of whether it's presented\nto the network or not. As the whole point of the setup is to avoid putting\nlots of transactions on the network, anything that pushes you back towards\ndoing that undermines the entire utility of the system.\n\n2) Refusing to update the transaction after certain thresholds are reached,\nhaving cooldown periods, etc also won't work because the replacement\nmechanism is there to protect each counter-party in the HFT contract.\nSimply converting a DoS on the network to a DoS on the participants means\none malicious party can break the mechanism that protects all the others by\nbroadcasting the initial set of updates all at once and deliberately\ntripping the thresholds.\n\nOK, let's take a step back. What is the purpose of abusing this feature?\nIt's to mount a denial of service attack - either against the entire\nBitcoin network, or against the other participants in the contract. But\nsomeone, somewhere has to be denied service, otherwise the attack is\npointless.\n\nWe can exploit this fact by realising that typically anti-DoS is a\nprioritisation problem. It doesn't usually matter if you serve some abusive\ntraffic if all legitimate traffic gets served first because it removes the\ndenial of service from the attack, and usually there are lots of ways to\nattack someone with methods that don't work - real world experience\nindicates that people don't pointlessly mount attacks over and over again\nif there's nothing to be gained by doing so.\n\nSo we can do the following - multi-thread verification of transactions that\nare trying to enter the memory pool, and order them such that high priority\ntransactions are verified first, low priority next, and then replacements\nof transactions sorted by age of last replacement. Same thing for relaying\n- faced with getdatas, service the new transactions first, replacements\nwith whatever is left over. Drop whatever doesn't make it into the nodes\navailable resources.\n\nHandling DoS as a prioritisation problem has a number of advantages, most\nobviously not introducing new hard coded magic numbers that may or may not\nstay up to date with changing conditions.\n\nThis setup means someone can force CPU/bandwidth usage to whatever the node\noperators have configured as their max allowed across the network for a\nwhile, but doing so won't actually disrupt normal transactions. It'll just\nresult in the replacements getting dropped. It slightly increases the risk\nof a malicious counter-party in an HFT contract trying to take advantage of\nthe saturation to themselves execute an attack on the contract, but I doubt\nit'd be a problem in practice -  you'd need to write your software to be\nable to perform such an attack, most of the time it wouldn't work, and if\npeople saturate the network with low priority easily dropped transactions\nso that it would work then nodes/apps could just warn users not to take\nadvantage of the feature whilst the flood is in progress.\n\nI know that some people will object to such a design on principle, but I\nthink this is a good balance - the only attacks that exist aren't\nprofitable and the worst case outcome in the face of continual profitless\nabuse is we switch the feature off and end up no worse off than today.\n\nI haven't touched on the topic of cartels of malicious miners or other\ntopics, just DoS. This email is long enough already and handling malicious\nminers (if necessary) can be done at the application protocol level, it\ndoesn't need any changes to the core tx replacement / locktime mechanism.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130416/952bbc54/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-16T18:43:56",
                "message_text_only": "Post tge malicious miners and other bits so we can evaluate the system as a whole. \n\nMike Hearn <mike at plan99.net> wrote:\n\n>This was previously discussed on the forums a bunch of times, but in\n>particular here:\n>\n>  https://bitcointalk.org/index.php?topic=91732.0\n>\n>BTW, I don't think all this has to be solved to re-activate replacement\n>on\n>testnet. It's useful for people to be able to develop apps that use\n>this\n>feature, indeed, it helps build the case for re-activating it on the\n>main\n>network after the necessary work is done. Otherwise there'll inevitably\n>be\n>people who say \"why re-activate something even though we think it's\n>safe\n>when there are no use cases for it\". Letting people develop and deploy\n>interesting prototypes in parallel solves that catch-22.\n>\n>  ---\n>\n>Refresher: since the first release Bitcoin has had the ability to\n>replace\n>transactions that sit in the memory pool if the transaction is\n>non-final,\n>the inputs are the same and the replacement is newer than the replacee.\n>Being non-final means not having reached the nLockTime threshold, and\n>having at least one input with a sequence number < UINT_MAX. Around the\n>time of the bugs in various opcodes being found, Satoshi disabled the\n>feature because nothing was using it - it was something he'd planned\n>for\n>the future, it had no utility in the Bitcoin of 2010.\n>\n>The purpose of tx replacement is to implement high frequency trading,\n>according to material Satoshi sent me when I asked him what it was all\n>for\n>(I wanted to know why sequence numbers were a property of inputs not\n>the\n>transaction).\n>\n>It's very important to understand that this does *NOT* mean\n>high-frequency\n>from the networks perspective. In normal operation, tx replacement is\n>not\n>actually intended to be used at all. Sort of like double-spending\n>protection, it's a code path that's only meant to be triggered when one\n>or\n>the other party is maliciously trying to roll back a negotiated\n>contract.\n>And when a party is trying to do that, you don't need lots of\n>replacements.\n>A single replacement is enough.\n>\n>To see why this is the case please review the micropayment channel\n>protocol\n>here:\n>\n>https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party\n>\n>This isn't the only use of contractual HFT in Bitcoin, it's a\n>deliberately\n>simplified and stripped down example (eg, that only uses two parties).\n>The\n>example Satoshi gave me was more abstract and actually had N parties in\n>it\n>- it left me puzzled for a while and struggling to see practical\n>application. The \"billing for a metered resource\" use case is easier to\n>understand.\n>\n>Now the obvious problem is that even though the feature is only\n>intended to\n>be used occasionally or never, nothing in the existing code stops you\n>using\n>it as fast as possible and exhausting nodes CPU time and bandwidth.\n>\n>What's more, solving this is not as easy as it looks. Most proposed\n>solutions will not work:\n>\n>1) Requiring higher fees for each replacement means that a\n>channel/contract\n>has to be torn down and rebuilt much, much faster than before because\n>otherwise the amount of money lost to fees quickly becomes the entire\n>size\n>of the channel (or you can't update it very often). Remember, you'd\n>have to\n>increase the fee for each replacement regardless of whether it's\n>presented\n>to the network or not. As the whole point of the setup is to avoid\n>putting\n>lots of transactions on the network, anything that pushes you back\n>towards\n>doing that undermines the entire utility of the system.\n>\n>2) Refusing to update the transaction after certain thresholds are\n>reached,\n>having cooldown periods, etc also won't work because the replacement\n>mechanism is there to protect each counter-party in the HFT contract.\n>Simply converting a DoS on the network to a DoS on the participants\n>means\n>one malicious party can break the mechanism that protects all the\n>others by\n>broadcasting the initial set of updates all at once and deliberately\n>tripping the thresholds.\n>\n>OK, let's take a step back. What is the purpose of abusing this\n>feature?\n>It's to mount a denial of service attack - either against the entire\n>Bitcoin network, or against the other participants in the contract. But\n>someone, somewhere has to be denied service, otherwise the attack is\n>pointless.\n>\n>We can exploit this fact by realising that typically anti-DoS is a\n>prioritisation problem. It doesn't usually matter if you serve some\n>abusive\n>traffic if all legitimate traffic gets served first because it removes\n>the\n>denial of service from the attack, and usually there are lots of ways\n>to\n>attack someone with methods that don't work - real world experience\n>indicates that people don't pointlessly mount attacks over and over\n>again\n>if there's nothing to be gained by doing so.\n>\n>So we can do the following - multi-thread verification of transactions\n>that\n>are trying to enter the memory pool, and order them such that high\n>priority\n>transactions are verified first, low priority next, and then\n>replacements\n>of transactions sorted by age of last replacement. Same thing for\n>relaying\n>- faced with getdatas, service the new transactions first, replacements\n>with whatever is left over. Drop whatever doesn't make it into the\n>nodes\n>available resources.\n>\n>Handling DoS as a prioritisation problem has a number of advantages,\n>most\n>obviously not introducing new hard coded magic numbers that may or may\n>not\n>stay up to date with changing conditions.\n>\n>This setup means someone can force CPU/bandwidth usage to whatever the\n>node\n>operators have configured as their max allowed across the network for a\n>while, but doing so won't actually disrupt normal transactions. It'll\n>just\n>result in the replacements getting dropped. It slightly increases the\n>risk\n>of a malicious counter-party in an HFT contract trying to take\n>advantage of\n>the saturation to themselves execute an attack on the contract, but I\n>doubt\n>it'd be a problem in practice -  you'd need to write your software to\n>be\n>able to perform such an attack, most of the time it wouldn't work, and\n>if\n>people saturate the network with low priority easily dropped\n>transactions\n>so that it would work then nodes/apps could just warn users not to take\n>advantage of the feature whilst the flood is in progress.\n>\n>I know that some people will object to such a design on principle, but\n>I\n>think this is a good balance - the only attacks that exist aren't\n>profitable and the worst case outcome in the face of continual\n>profitless\n>abuse is we switch the feature off and end up no worse off than today.\n>\n>I haven't touched on the topic of cartels of malicious miners or other\n>topics, just DoS. This email is long enough already and handling\n>malicious\n>miners (if necessary) can be done at the application protocol level, it\n>doesn't need any changes to the core tx replacement / locktime\n>mechanism.\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Precog is a next-generation analytics platform capable of advanced\n>analytics on semi-structured data. The platform includes APIs for\n>building\n>apps and a phenomenal toolset for data science. Developers can use\n>our toolset for easy data analysis & visualization. Get a free account!\n>http://www2.precog.com/precogplatform/slashdotnewsletter\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-17T09:48:59",
                "message_text_only": "When this system was first being discussed, Gavin was concerned that miner\nincentives were to ignore replacements because it meant extra work and the\nreplacement might have equal or lower fees than before (or indeed, no\nfees). He proposed two solutions: one is to progressively raise the fee on\neach replacement. The other is to specify lock time in terms of blocks and\nthen step it backwards once for each replacement, thus ensuring that by\nreplacing the transaction you get to claim any attached fee earlier.\n\nIt should be apparent that both solutions can be implemented by whichever\napplication is running the contract - the core Bitcoin network and software\nis agnostic either way.\n\nNow, Gavin and I disagreed on whether this would actually be necessary. As\nI already pointed out, both solutions seriously reduce the utility of HFT\nbecause they limit how often you can update the contract. Instead of an\nonline game billing you per second, maybe it can only do it per minute or\nper 10 minutes with the lock time solution because otherwise you run out of\nblocks, and with ever-increasing fees perhaps the contract becomes too\nexpensive to justify after a while.\n\nSo it'd be nice if this ended up not being necessary. Experience indicates\nthat rational miners typically don't pursue a short-termist\nprofit-at-any-cost agenda - free transactions have always been included in\nblocks, miners include transactions even though you could avoid a lot of\ncomplexity by just not including any at all, etc. Some miners like BTC\nGuild have actually sacrificed significant amounts of money for the good of\nthe system. You can see this in terms of rational self interest - miners\nearn Bitcoins thus it's in their interest for Bitcoins to be as useful as\npossible, as that is what gives them value. Or you can see it in terms of\nideologically-driven altruism. Or both.\n\nIf I were to implement an application that used tx replacement, I would\nprobably start with replacements that don't change the fees and don't count\ndown the lock time field. We can then observe whether miners bother\nchanging their software to behave differently, or whether the inherent\nutility of the application is enough to convince them to play by the\ndefault rules. Ideally at least one application made possible by this\nfeature is a \"killer app\" - something so useful / unique / compelling that\npeople want to obtain Bitcoin just to use it. If someone can find such an\napp, then rational miners should want tx replacement to work as reliably as\npossible because it boosts the value of their earnings.\n\nThere are some other misc details - reactivation requires that we bump the\nprotocol version and start relaying non-final transactions to new nodes\nagain. Those nodes should relay replacements but not let them enter wallets\nunless/until the wallet software itself can handle them better, for\ninstance, by communicating via APIs anticipated confirmation times. This is\nsomething for individual wallet APIs to handle on their own, and just\nignoring non-final transactions is a perfectly workable approach for\nBitcoin-Qt.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130417/c708a775/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-04-17T19:44:56",
                "message_text_only": "One of the big topics of recent past on IRC is \"malleability\" of\ntransactions:  to what extent can someone /else /change your signed\ntransaction without affecting its validity?  In the past I used to\nconsider this just annoying, but not so malicious.  But in terms of HFT,\nit sounds like malicious behavior is possible:\n\nTo recap the procedure:\n\n(1)  Alice creates a transaction, Tx1, for 10 BTC to a 2-of-2-{Alice,\nBob} address.  It has a locktime of 30 days in the future.\n(2)  Before signing the transaction, she gets Bob to sign a transaction,\nTx2, from 2-of-2-{Alice, Bob} back to herself.   That transaction\nreferences the Tx1 by hash.\n(3)  Any time in the next 30 days, Alice can sign an alternate Tx2\ntransactions reducing the amount returned to self and increasing amount\nto Bob, as a method of paying Bob more.  Bob doesn't need to broadcast\nanything except for the last one, 29 days later.\n\nIt was originally conceived that Bob couldn't do anything malicious,\nbecause Alice gets Bob to sign Tx2-spending-Tx1 before she gives him\nTx1.  The problem is that Bob can follow her process, then\nbroadcast/mine Tx1' (Tx1-prime), which has a different number of 0x00\npad bytes in the signatures, or \"flips the sign\" of one of the s-values\nin the signature, thus changing the hash of Tx1.\n\nBy doing this, Bob has now created a transaction, Tx1', that Tx2 no\nlonger returns to Alice.  It's not flat-out theft, because Tx1 still\nsends to a 2-of-2 address requiring both of their signatures.  But Bob\ndidn't risk anything to do this, besides his reputation/trust.  He now\nhas Alice's money locked and can hold it for ransom, since she needs his\nsignature to do move it.  He could offer his signature for half of it.\n\nOf course, these types of HFT contracts will usually be between parties\nthat have some mutual respect/history.  Thus, they are not usually\nzero-trust.   But we should find a way to try to close that, if\npossible.  For instance, if the malleability was reduced to one bit, you\ncould just have Bob sign two different transactions before Alice\nbroadcasts Tx1.  The two tx would be from either variant.  But I know\nthere's too many bits of malleability in the transaction serialization\nfor that to work.  Is there any way to avoid this?\n\n-Alan\n\n\n\nOn 04/17/2013 05:48 AM, Mike Hearn wrote:\n> When this system was first being discussed, Gavin was concerned that\n> miner incentives were to ignore replacements because it meant extra\n> work and the replacement might have equal or lower fees than before\n> (or indeed, no fees). He proposed two solutions: one is to\n> progressively raise the fee on each replacement. The other is to\n> specify lock time in terms of blocks and then step it backwards once\n> for each replacement, thus ensuring that by replacing the transaction\n> you get to claim any attached fee earlier.\n>\n> It should be apparent that both solutions can be implemented by\n> whichever application is running the contract - the core Bitcoin\n> network and software is agnostic either way.\n>\n> Now, Gavin and I disagreed on whether this would actually be\n> necessary. As I already pointed out, both solutions seriously reduce\n> the utility of HFT because they limit how often you can update the\n> contract. Instead of an online game billing you per second, maybe it\n> can only do it per minute or per 10 minutes with the lock time\n> solution because otherwise you run out of blocks, and with\n> ever-increasing fees perhaps the contract becomes too expensive to\n> justify after a while.\n>\n> So it'd be nice if this ended up not being necessary. Experience\n> indicates that rational miners typically don't pursue a short-termist\n> profit-at-any-cost agenda - free transactions have always been\n> included in blocks, miners include transactions even though you could\n> avoid a lot of complexity by just not including any at all, etc. Some\n> miners like BTC Guild have actually sacrificed significant amounts of\n> money for the good of the system. You can see this in terms of\n> rational self interest - miners earn Bitcoins thus it's in their\n> interest for Bitcoins to be as useful as possible, as that is what\n> gives them value. Or you can see it in terms of ideologically-driven\n> altruism. Or both.\n>\n> If I were to implement an application that used tx replacement, I\n> would probably start with replacements that don't change the fees and\n> don't count down the lock time field. We can then observe whether\n> miners bother changing their software to behave differently, or\n> whether the inherent utility of the application is enough to convince\n> them to play by the default rules. Ideally at least one application\n> made possible by this feature is a \"killer app\" - something so useful\n> / unique / compelling that people want to obtain Bitcoin just to use\n> it. If someone can find such an app, then rational miners should want\n> tx replacement to work as reliably as possible because it boosts the\n> value of their earnings.\n>\n> There are some other misc details - reactivation requires that we bump\n> the protocol version and start relaying non-final transactions to new\n> nodes again. Those nodes should relay replacements but not let them\n> enter wallets unless/until the wallet software itself can handle them\n> better, for instance, by communicating via APIs anticipated\n> confirmation times. This is something for individual wallet APIs to\n> handle on their own, and just ignoring non-final transactions is a\n> perfectly workable approach for Bitcoin-Qt.\n>\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130417/2d60998b/attachment.html>"
            },
            {
                "author": "John Dillon",
                "date": "2013-04-18T06:07:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn Wed, Apr 17, 2013 at 9:48 AM, Mike Hearn <mike at plan99.net> wrote:\n> So it'd be nice if this ended up not being necessary. Experience indicates that rational miners typically don't pursue a short-termist profit-at-any-cost agenda - free transactions have always been included in blocks, miners include transactions even though you could avoid a lot of complexity by just not including any at all, etc. Some miners like BTC Guild have actually sacrificed significant amounts of money for the good of the system. You can see this in terms of rational self interest - miners earn Bitcoins thus it's in their interest for Bitcoins to be as useful as possible, as that is what gives them value. Or you can see it in terms of ideologically-driven altruism. Or both.\n\nPlease don't say Gavin agrees with you. This reminds me of discussing\nsecurity in the early days of the internet when the general assumption\nthat everyone played nice was still correct.\n\nWe're seeing huge, expensive, DoS attacks against mining pools,\nexchanges, information sites, stores etc. Bitcoin has enemies. Peter\nTodd is 100% correct, tx replacement is another form of zero\nconfirmation transaction and all that has to happen is some subset of\nmining power start doing replace by tx fee for it to have no security\nwhile with your proposed implementation opening up a DoS attack\nvector.\n\nYou also see the DoS attack vector as unimportant and suggest to\nhandle it as a prioritization problem. \"real world experience\nindicates that people don't pointlessly mount attacks over and over\nagain if there's nothing to be gained by doing so.\" <- of course there\nis something to be gained, shutting down a service dependent on tx\nreplacement, as seen by all the DoS attacks we are seeing. If I were\ndeciding if my service should use tx replacement and I understood that\nit could be trivially shut down, I sure wouldn't be happy I could\n\"just warn users not to take advantage of the feature whilst the flood\nis in progress\"\n\nGavin do you actually agree with Mike on this stuff like he implies?\nBecause if you do, I think people should know. Myself I wouldn't want\nto be contributing to your salary as a foundation member if you don't\ntake Bitcoin security seriously.\n\n\nThe rapidly-adjusted payments stuff on the Contracts page of the wiki\nis broken in multiple ways:\n\n1. (known) Requires DoS vulnerable infrastructure.\n2. (known) TX mutability\n3. (unknown?) Just doesn't work. Step 5 is to check that T2 is signed\ncorrectly by the access point, and if so, sign T1 and T2. But the\nsignature of T2 includes the txid of T1 and that isn't known until T1\nis fully signed.\n\nThat #3 has not been noticed before shows that for all this hot air\nno-one has ever bothered making an implementation of the idea. So\nMike, why are you happy to make testnet vulnerable to an unusually\neasy DoS attack for an idea you haven't even tried on your own private\ntestnet with replacement enabled?\n\n\nAnyway, with Peter Todd's much saner tx-replacement-by-fee the\nfollowing can be done:\n\n1. Create a new public key PK1\n\n2. Request a public key PK2 from the access point.\n\n2. Create TX1 with two inputs and two outputs. Both parties sign it\nand broadcast it.\n\naccess point input -> 2 PK1 PK2 checkmultisig, value = input #1 - fee\nyou input -> 2 PK1 PK2 checkmultisig, value == input #2 - fee\n\n3. Create TX2.\n\nTX1 #1 -> pay to access point PK2\nTX1 #2 -> pay to yourself PK1 (change)\n\nSet TX2 nLockTime to some time in the future.\n\n4. Set the initial value's of TX2 out #1 and out #2 to the value the\naccess point and you committed in TX1. Both parties sign with\nSIGHASH_SINGLE. (which means both parties are signing for both inputs)\n\n5. Update TX2 as required and sign both inputs. The access point\ndoesn't need to sign TX2 or give the updated copy of TX2 to the other\nparty. The TX is not broadcast when updated (like the earlier contract\nproposal) although doing so harms no-one.\n\nWhen the session ends with both parties online, do the following:\n\n1. You sign a version of TX2 with the final output values and nLockTime=0\n\n2. If the final output values are acceptable to the access point, they\nsign the other half of the 2-of-2 inputs and broadcast. (with whatever\nfees required)\n\nIf the buyer quits the session abruptly:\n\n1. Access point signs the last (most funds) version of TX2 given to\nthem, waits until the nLockTime expires, and broadcasts. This also\ngets their TX1 input back.\n\nIf the access point quits abruptly they can do the above when they go\nback online. The buyer has the first, signed, version of TX2 and at\nworst can broadcast it eventually to get their deposit back.\n\nAttacks:\n\nAfter TX1 is signed and broadcast both parties are in on the contract\ntogether, so the funds can't move without the consent of the other.\nBoth parties can block the movement of the other's deposit, but they\nlose their deposit too. With tx mutability there is a small window of\ntime for a technical mistake, but that should be very, very rare.\n\nYou can broadcast an earlier version of the transaction where you pay\nless than you were supposed too. However if you do this, the access\npoint can broadcast a new version of the transaction, splicing\ntogether your signature on the correct output value, with your\nsignature on an earlier version of the access point's output, thus\npaying miners a higher fee than the transaction you broadcast.\nRational miners will chose the latter version rather than your one.\nThis bidding process can continue until you are out the full amount\nyou were supposed to pay, with the whole payment going to fees, so why\nbother? With nLockTime you don't have a better chance of mining the\ntransaction than any other miner.\n\nI apologize if the above has already been discussed. I only looked at\nthe wiki and source code and don't waste too much time reading the\nendless bitcointalk forums. The wiki should be updated with these\nideas as they are developed by people and vetted.\n\n\nStrict replacement by fee should be written so it can be tested\nproperly and people in the Bitcoin ecosystem use proper security\npractices with regard to unconfirmed transactions. I'm willing to\npledge $500USD to anyone who implements it. That is write the core\nfunctionality that does replacement by fee, and a simple 'undo' RPC\ncommand. I would do it myself but my programming is rusty.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBAgAGBQJRb4vZAAoJEEWCsU4mNhiPRNoH/jGcGw2NBUcIh0/HT70nnwU+\ndeaXcdYp9RhDlSf0VGvPwwEAnjWBFc+pYVC+vtL4XEvWR+5PC7FcOrRrv/+sTDPs\nYwPkCIwvXJizFe5pAhXOde4EdibXU0WXTLonMNUeZkwhxUfrczURm2tgmJlNE7nA\n3PBun4c4r7EcdRHuh9SiK0C4RgB5w63t/qyFVUfqwhyKYiS55K/2t2mVLLxcPWkY\n8nxlYlese5eZZJBTfiePtPOqTd43DHOkN+4Iu5XXQIH7v2QHf50DMqgI3iVLVe08\nc2i9GutwX+2MevSMe/S57952BCjBq4zF0nBpaAfIFCVHDDZ6bDbgA7fUjDtLVds=\n=1Tc0\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-18T08:14:07",
                "message_text_only": "On Thu, Apr 18, 2013 at 06:07:23AM +0000, John Dillon wrote:\n> Gavin do you actually agree with Mike on this stuff like he implies?\n> Because if you do, I think people should know. Myself I wouldn't want\n> to be contributing to your salary as a foundation member if you don't\n> take Bitcoin security seriously.\n\nFWIW Gavin has spent quite a bit of time and effort ensuring that\nBitcoin is resistent to DoS attacks, as well as spearheading a move\ntowards better testing. The latter in particular is helpful against\nchain-forking bugs, so better testing is very much a security issue. He\nalso spearheaded P2SH, and the current efforts to get a payment protocol\nimplemented. I'm less convinced about his stance against attackers that\npose a threat to the system as a whole, but it's not fair to accuse him\nof not taking security seriously.\n\n> Strict replacement by fee should be written so it can be tested\n> properly and people in the Bitcoin ecosystem use proper security\n> practices with regard to unconfirmed transactions. I'm willing to\n> pledge $500USD to anyone who implements it. That is write the core\n> functionality that does replacement by fee, and a simple 'undo' RPC\n> command. I would do it myself but my programming is rusty.\n\nYou should clarify if you want this patch to compute fees recursively or\nnot, IE, should the patch include fees paid by child transactions in how\nit computes the total fee the transaction pays. Doing this is\nnon-trivial, although Luke-Jr has written a patch to do this without\nreplacement: https://github.com/bitcoin/bitcoin/pull/1647\n\nAlso, clarify if you want unit-tests and similar things included in the\nimplementation.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/1e4a30cd/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-04-19T04:38:35",
                "message_text_only": "I understand that Gavin has spent effort on security efforts against\nsmall-scale attackers. It's the fact that he is so dismissive of the\nthreat that large attackers play that is what bothers me. But if I am\nbeing divisive I understand.\n\nI posted a clarification of what the reward is for exactly on the\nforums: https://bitcointalk.org/index.php?topic=179612.msg1881800#msg1881800\n\nOn Thu, Apr 18, 2013 at 8:14 AM, Peter Todd <pete at petertodd.org> wrote:\n> On Thu, Apr 18, 2013 at 06:07:23AM +0000, John Dillon wrote:\n>> Gavin do you actually agree with Mike on this stuff like he implies?\n>> Because if you do, I think people should know. Myself I wouldn't want\n>> to be contributing to your salary as a foundation member if you don't\n>> take Bitcoin security seriously.\n>\n> FWIW Gavin has spent quite a bit of time and effort ensuring that\n> Bitcoin is resistent to DoS attacks, as well as spearheading a move\n> towards better testing. The latter in particular is helpful against\n> chain-forking bugs, so better testing is very much a security issue. He\n> also spearheaded P2SH, and the current efforts to get a payment protocol\n> implemented. I'm less convinced about his stance against attackers that\n> pose a threat to the system as a whole, but it's not fair to accuse him\n> of not taking security seriously.\n>\n>> Strict replacement by fee should be written so it can be tested\n>> properly and people in the Bitcoin ecosystem use proper security\n>> practices with regard to unconfirmed transactions. I'm willing to\n>> pledge $500USD to anyone who implements it. That is write the core\n>> functionality that does replacement by fee, and a simple 'undo' RPC\n>> command. I would do it myself but my programming is rusty.\n>\n> You should clarify if you want this patch to compute fees recursively or\n> not, IE, should the patch include fees paid by child transactions in how\n> it computes the total fee the transaction pays. Doing this is\n> non-trivial, although Luke-Jr has written a patch to do this without\n> replacement: https://github.com/bitcoin/bitcoin/pull/1647\n>\n> Also, clarify if you want unit-tests and similar things included in the\n> implementation.\n>\n> --\n> 'peter'[:-1]@petertodd.org"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-19T04:55:20",
                "message_text_only": "On Fri, Apr 19, 2013 at 12:38 AM, John Dillon\n<john.dillon892 at googlemail.com> wrote:\n> I understand that Gavin has spent effort on security efforts against\n> small-scale attackers. It's the fact that he is so dismissive of the\n> threat that large attackers play that is what bothers me. But if I am\n> being divisive I understand.\n\nI cannot speak for Gavin, but speaking more generally, large attackers\ntend to belong in a thought-class all their own.\n\nExample 1:  if some super-ASIC miner arises with 90% of hash power,\nand he starts behaving in a way contrary to the useful functioning of\nbitcoin, the community might decide to change the PoW algorithm at\nblock height N.\n\nExample 2:  If someone large DDoS's the entire P2P network, which is\npossible, manual intervention would be required to straighten out the\nmess.\n\nIn each case, it's more about the community's mutual defense actions\nthan any prepared defense.\n\nSpeaking even more generally, bitcoin may be a billion-dollar\ninvention, but that doesn't mean it has any funding for network\ndefense!  Unless cost structures and user attitudes change,\ndevelopment and deployment of major defense strategies seems unlikely.\n Which implies the community will simply wait for a [attack |\nexplosion | crisis], and then hope we can unwind/repair the damage\nafterwards.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-18T08:32:24",
                "message_text_only": "When did I say DoS was unimportant? I just wrote a giant email explaining\nhow it can be resolved.\n\nI think it's worth pointing out that Bitcoin was launched with no DoS\nprotection at all, and it's still here. There are still obvious DoS bugs\nbeing fixed with every release. So yes, it's important to robustify the\ncode, but not to the extent of not having any features. If Satoshi had\ntaken that perspective Bitcoin might not exist at all. We can have our cake\nand eat it.\n\nRE: shutting down services dependent on replacement. No, good users of\nreplacement would still end up taking priority over the constantly churning\nDoS replacements. The most you can shut down is one contract. Obviously, if\nthere's no form of tx replacement at all then the \"tried and doesn't work\"\nstate is the same as \"never tried\", which doesn't seem like a win.\n\nThe testnet is trivially DoSable today by anyone who cares to do so, there\nare hardly any nodes and most people get coins from the faucet. Look at how\nquickly people got upset when somebody drained it. As Jeff has pointed out,\nthere could theoretically be a \"nextnet\" but the overhead of setting one up\ndoesn't seem worth it. If somebody wanted to troll developers they could\neasily DoS testnet and nextnet simultaneously with bandwidth to spare.\n\n\n> That #3 has not been noticed before shows that for all this hot air\n> no-one has ever bothered making an implementation of the idea.\n>\n\nYes, I noticed it a few days ago when making some notes, but figured I\nwould indeed make an prototype implementation and then just put all the\ndetails and latest protocols on the wiki at once. As nobody indeed noticed\nthe bug for years apparently nobody else is working on this so it didn't\nseem urgent to update.\n\nYour proposed alternative doesn't seem any different DoS wise. Someone can\nstill broadcast a long series of incrementally different transactions and\nhave miners replace them. So you still need prioritisation of work. It's\nuseful anyway for other reasons. And as you point out yourself, it's still\nsusceptible to the problem that you end up running out of money because\nit's all been spent on fees.\n\nBTW $500 is rather low for the amount of work required. If you added a zero\nonto that there might be more takers.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/00da9323/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-18T09:04:44",
                "message_text_only": "On Thu, Apr 18, 2013 at 10:32:24AM +0200, Mike Hearn wrote:\n> RE: shutting down services dependent on replacement. No, good users of\n> replacement would still end up taking priority over the constantly churning\n> DoS replacements. The most you can shut down is one contract. Obviously, if\n> there's no form of tx replacement at all then the \"tried and doesn't work\"\n> state is the same as \"never tried\", which doesn't seem like a win.\n\nYeah, an attack is a bit more subtle than perhaps John Dillon realizes.\nAssuming that nodes prioritize the transactions with the fewest total\nreplacements first it becomes a multiplier on the standard attack of\njust broadcasting transactions. So for non-replacement users it's\nprobably not that bad.\n\nAn attack still shuts down useful tx replacement though. For instance in\nthe adjusting payments example an attacker sets up a legit adjusting\npayment channel, does a bunch of adjustments, and then launches their\nattack. They broadcast enough adjustments that their adjustment session\nlooks like part of an attack, and then don't have to pay for the full\nadjusted amount.\n\nWhat's worse, the attack itself can be just a large number of these\nmicropayment sessions, IE, no bogus sessions at all.\n\n> The testnet is trivially DoSable today by anyone who cares to do so, there\n> are hardly any nodes and most people get coins from the faucet. Look at how\n\nIt's *easily* DoSable, not trivially. Testnet has all the same\nfee/priority rules that Bitcoin has, so any attack still costs some\namount of coins. For instance I did the math once on what it would cost\nto flood testnet with 1MB blocks, and it came out to IIRC $100/month or\nso in terms of lost mining revenue. Small, but still not trivial.\n\nnon-final nLockTime floods and timewarp assisted can be easily done mind\nyou, but the former is easy to fix and the latter is relatively tricky\nto pull off and still requires some mining expenditure.\n\n> Your proposed alternative doesn't seem any different DoS wise. Someone can\n> still broadcast a long series of incrementally different transactions and\n> have miners replace them. So you still need prioritisation of work. It's\n> useful anyway for other reasons. And as you point out yourself, it's still\n> susceptible to the problem that you end up running out of money because\n> it's all been spent on fees.\n\nJohn's proposing something that would work in conjunction with fees, so\nit's no different than the MIN_RELAY_FEE that has quite successfully\nprevented flooding on mainnet. For that matter, what he proposed can be\nused even with non-final == non-standard, which means the replacement\ntransactions can't be broadcast onto the network at all until they can\nbe mined.\n\nActually, that's an interesting point: one way to do replacement\nanti-DoS would be to only allow each input a given number of chances to\ndo a replacement. Provided your design is asymmetric in who the attacker\nwould be, and the inputs controlled by the defender outnumber the\nattacker, the defender can always count on doing the last replacement.\n\nYou would need some way of determining which input was responsible for a\nreplacement though - I can't think of an obvious way to within the\ncurrent transaction format, but I haven't thought hard about it yet.\n\n\nHow exactly do you envision replacement working with non-final ==\nnon-standard anyway?\n\n> BTW $500 is rather low for the amount of work required. If you added a zero\n> onto that there might be more takers.\n\nIf he's reasonable about the scope, IE just a initial implementation for\nfurther evaluation, I figure it's about two days work. $250/day is\nenough that I'd give it a go - I already looked into how to implement it\nanyway.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/2a81de0e/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-18T09:28:24",
                "message_text_only": "On Thu, Apr 18, 2013 at 05:04:44AM -0400, Peter Todd wrote:\n> An attack still shuts down useful tx replacement though. For instance in\n> the adjusting payments example an attacker sets up a legit adjusting\n> payment channel, does a bunch of adjustments, and then launches their\n> attack. They broadcast enough adjustments that their adjustment session\n> looks like part of an attack, and then don't have to pay for the full\n> adjusted amount.\n\n...and actually, that's not a problem if the defender is online, because\nthey can just broadcast the highest sequence numbered tx, which blocks\nfurther broadcasts by the attacker. You still need some way of\ndistinguishing the two acts, by time is probably fine, but it'd make a\nreal attack difficult.\n\nOf course, regardless you are still asking nodes to set aside however\nmany KB/second to tx replacement transactions, and they're all going to\nuse different settings, which makes overall network convergence\nimpossible to guarantee as legit replacement transactions outnumber\nnon-legit ones. Any protocol requiring the broadcast of more than one or\ntwo replacements, either normally or against an attacker, just isn't\ngoing to be reliable. But many don't, so they're probably doable.\n\n\nBut lets see some working code first...\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/ae539577/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-18T09:32:28",
                "message_text_only": "> ...and actually, that's not a problem if the defender is online, because\n> they can just broadcast the highest sequence numbered tx, which blocks\n> further broadcasts by the attacker.\n\n\nGood point - transactions can be ordered by highest version seen before\nthey're signature checked. Even without that improvement it's still rather\ntricky to win the race though.\n\nI'm intending on making a prototype for myself at some point soon, probably\nin bitcoinj. I've been making notes and writing some initial code - I did\nsuccessfully replace a transation on my own little testnet, then I figured\nI'd submit the patch so it's easier for others to play with it. But I\nhaven't got the whole thing working end to end yet.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/5296432d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-18T09:28:48",
                "message_text_only": "> An attack still shuts down useful tx replacement though. For instance in\n> the adjusting payments example an attacker sets up a legit adjusting\n> payment channel, does a bunch of adjustments, and then launches their\n> attack. They broadcast enough adjustments that their adjustment session\n> looks like part of an attack, and then don't have to pay for the full\n> adjusted amount.\n>\n\nIt's possible, but let's do some back of the envelope calculations to look\nat how quickly such an attack can exhaust itself.\n\nConsider a contract that has a time window of 12 hours and is adjusted once\nper second for that duration. That's 43,200 adjustments. It sounds sort of\nballpark-ish for micropayments. If you end up losing 1 seconds worth of\nservice, well, probably that's no big deal. As the contract reaches its\nnLockTime, the attacker starts broadcasting all of the adjustments in\nsequence in the hope that an earlier version will be being processed as the\nlock time expires and a block is solved, so the latest version (the one\nthat gives him the least money) ends up not being included in the chain.\n\nThe input is a multi-signature transaction, so to process every single\nadjustment created would take 86,400 signature verifications. With the\nsipaspeed patches it seems ECDSA can be processed on modern cores at\nsomething like 20,000 signatures per second. So it'd take a bit over 4\nseconds to process all of them (cpu time).\n\nThat gives the attacker a less than 4 second window in which to try and\nroll back the contract to an earlier time before he reaches the last\nversion and things are as they should be. Given that a block is solved on\naverage every 10 minutes, you'd have to get very lucky indeed to succeed\nwith such an attack. It's probably easier to try and find a corrupt miner\nwho is willing to bend the rules for you.\n\nLet's include bandwidth. Say the contract (multi-sig input + the outputs)\nis about 700 bytes. 43,200 transactions is then about 29 megabytes of data.\nOn a fairly normal 10mbit connection that would take about 23 seconds to\ntransfer. Of course the real number is a bit higher because of latency\nintroduced by the inv/tx round-tripping. So the time window of the attack\nis dominated by bandwidth but it's still quite small compared to the block\nsolving window.\n\nIt's *easily* DoSable, not trivially.\n>\n\nWhat I meant is - find some open DNS resolvers, start firing packets at\ntestnet nodes, done. You don't have to do protocol level attacks to just\nrender nodes useless.\n\n\n> You would need some way of determining which input was responsible for a\n> replacement though - I can't think of an obvious way to within the\n> current transaction format, but I haven't thought hard about it yet.\n>\n\nAh, I think it actually is possible and this is an intriguing idea. Each\ninput has its own sequence number. Look at the definition of IsNewerThan()\n- to make a newer version you increment your inputs sequence number in a\nparticular manner whilst leaving the others alone.\n\nHaving a single multi-sig input means you can't do that because both\nparties co-operate to update the single input, but schemes that use\nmultiple inputs do seem posible.\n\n\n> How exactly do you envision replacement working with non-final ==\n> non-standard anyway?\n>\n\nAs I said at the bottom of my second mail, it means making non-final\ntransactions relayable again, but only to nodes that advertise a high\nenough version number. Those nodes are expected to do something intelligent\nwith them, like just not put them in the wallet (unless the user has opted\nin and ticked the \"i know what i'm doing\" box, perhaps).\n\n\n> If he's reasonable about the scope, IE just a initial implementation for\n> further evaluation, I figure it's about two days work.\n\n\nWell, it depends on your use case - you need to cast the (fixed) algorithm\ninto a network protocol, manage the interactions between the parties,\nmonitor the network for malicious broadcasts so you can replace them, fix\nthe code so the wallets don't accept non-final transactions except when\ntaking part in your contract, etc. If you do it all with Bitcoin-Qt it's\neasier but then your app can't easily run in places that can't afford a few\nhundred megs of ram (like wifi hotspots). The devil is in the details.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/ae6ae0d0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-18T09:34:02",
                "message_text_only": "On Thu, Apr 18, 2013 at 11:28 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> With the sipaspeed patches it seems ECDSA can be processed on modern cores\n> at something like 20,000 signatures per second. So it'd take a bit over 4\n> seconds to process all of them (cpu time).\n>\n\nSorry brainfart, s/cores/cpus/. I think the 20k/sec was with full usage of\na hyperthreaded quad core CPU.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/110ede02/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-18T10:08:06",
                "message_text_only": "On Thu, Apr 18, 2013 at 11:28:48AM +0200, Mike Hearn wrote:\n> Let's include bandwidth. Say the contract (multi-sig input + the outputs)\n> is about 700 bytes. 43,200 transactions is then about 29 megabytes of data.\n> On a fairly normal 10mbit connection that would take about 23 seconds to\n> transfer. Of course the real number is a bit higher because of latency\n> introduced by the inv/tx round-tripping. So the time window of the attack\n> is dominated by bandwidth but it's still quite small compared to the block\n> solving window.\n\nMike, for the love of god, it's not acceptable to require Bitcoin\nvalidating and mining nodes to buy unlimited bandwidth. The attacker\njust has to spend more outgoing bandwidth than some fraction of the\nnetwork hashing power has incoming bandwidth (individually speaking) for\nconvergence to fail.\n\nBut anyway, as I said in my follow up email, with correct prioritization\nit's probably a tractable problem.\n\n> It's *easily* DoSable, not trivially.\n> >\n> \n> What I meant is - find some open DNS resolvers, start firing packets at\n> testnet nodes, done. You don't have to do protocol level attacks to just\n> render nodes useless.\n\nTestnet has 40 nodes online right now that can be seen by my seeder. To\nshut down all those nodes with a standard DoS attack would take at least\n40 times more bandwidth than required by a tx-replacement DoS attack.\n\n> Having a single multi-sig input means you can't do that because both\n> parties co-operate to update the single input, but schemes that use\n> multiple inputs do seem posible.\n\nYou can always add dummy inputs.\n\n> > How exactly do you envision replacement working with non-final ==\n> > non-standard anyway?\n> >\n> \n> As I said at the bottom of my second mail, it means making non-final\n> transactions relayable again, but only to nodes that advertise a high\n> enough version number. Those nodes are expected to do something intelligent\n> with them, like just not put them in the wallet (unless the user has opted\n> in and ticked the \"i know what i'm doing\" box, perhaps).\n\nWell, all that making them relayable enables is letting all parties to a\ntransaction be offline when the nLockTime expires, so I'm not really\nsure it's worth doing, at least immediately. Weakening the non-final ==\nnon-standard test to give a window of, say, 3 blocks, would be fine I\nthink.\n\n> Well, it depends on your use case - you need to cast the (fixed) algorithm\n> into a network protocol, manage the interactions between the parties,\n> monitor the network for malicious broadcasts so you can replace them, fix\n> the code so the wallets don't accept non-final transactions except when\n> taking part in your contract, etc. If you do it all with Bitcoin-Qt it's\n> easier but then your app can't easily run in places that can't afford a few\n> hundred megs of ram (like wifi hotspots). The devil is in the details.\n\nThe whole point of tx-replacement by fee is that the algorithm doesn't\nneed to be fixed. It makes it very clear that unconfirmed transactions\naren't trustworthy, and levels the playing field between you and people\nposessing lots of hashing power. Nodes can independently choose their\nreplacement policy and the system still works. It also makes adjusting\nfees after the fact easy, again, functionality that we really need right\nnow.\n\nJohn's adjusting micropayments proposal would work best in conjuction\nwith some reputation stuff, like buying a fidelity bond promising you\nwill play nice with tx replacement. Implementing such bonds is a bit\nsubtle, because random chance can cause an earlier tx to be mined rather\nthan a latter, but you can, for instance, rebut accusations of fraud in\nthat case by simply creating an additional tx that pays the full amount\nif a partial tx accidentally gets mined. Come to think of it, such a\nsystem could be useful for inter-bank settlement, providing a security\nguarantee somewhere between a standard transaction and a fully off-chain\ntransaction, at the cost of a single transaction fee.\n\nMore importantly, it's not subject to sudden \"oh shit, slush's pool got\nhacked and is doing double spends!\" disasters. People should not be\ntrusting multiple mining pools run by individuals as hobbies on insecure\nVPS services with the security of their payments, and zero-conf\ntransactions do exactly that. Not to mention the ~25% of hashing power\ncontrolled by parties of unknown origin.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/9d9429a4/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-18T10:19:43",
                "message_text_only": "Indeed, as I mentioned in my first mail, nodes can be told how much\nbandwidth they're allowed to use and then prioritize within that, so I\ndon't see any way convergence can fail. And regardless, I used 10mbit for\nthe calculations, that isn't exactly unlimited. My home internet connection\nis better than that. It's just an arbitrary choice that lets us get a feel\nfor the numbers. We can see that even with a lot of replacements, an\nattacker would have a hard time matching up his flood with when a block is\nactually solved.\n\nOn the wider point - how many people DoS things with their own bandwidth?\nThe point of DNS reflection and/or botnets is you use other peoples\nbandwidth. The attacks on Mt Gox are supposedly 80 gigabit+, which is\nenough to take out all of the main network simultaneously. We can't do\nanything about that. So I agree we should work to avoid opening up new DoS\nattacks, but we should also be realistic about what can be accomplished.\nThe kind of people trying to manipulate Mt Gox could nuke the entire P2P\nnetwork off the face of the internet with the flick of a switch, presumably\nthe reason they aren't doing that it would to use Satoshi's phrasing\n\"undermine the validity of their own wealth\".\n\n\n> sure it's worth doing, at least immediately. Weakening the non-final ==\n>\nnon-standard test to give a window of, say, 3 blocks, would be fine I\n> think.\n>\n\nSure. I think Gavin wants some kind of wider memory pool limiter policy\nwhich would encompass such a thing already.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/71e874c7/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-04-18T13:37:46",
                "message_text_only": "> sure it's worth doing, at least immediately. Weakening the non-final ==\n>>\n> non-standard test to give a window of, say, 3 blocks, would be fine I\n>> think.\n>>\n>\n> Sure. I think Gavin wants some kind of wider memory pool limiter policy\n> which would encompass such a thing already.\n>\n\nYes.\n\nI don't want to spend any time thinking about memory pool transaction\nreplacement until after we pay some technical debt:\n\n+ Memory-limited memory pool, with relay policy matching block-creation\npolicy\n+ Child-pays-for-parent fees\n+ Auto-computed fees, based on transactions moving from the memory pool\ninto blocks\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130418/9997119e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-17T09:19:43",
                "message_text_only": "> Or are you talking about some sort of new decentralized high frequency\n> trading system that is self-matching and self-clearing? (I'd be very\n> interested in hearing more if this is the case).\n>\n\nI'm using the term \"high frequency trading\" because Satoshi did. Like the\nway he used the word \"contract\" it is perhaps a bit misleading, but we lack\nanything better to describe this new concept.\n\nToday HFT typically means companies that submits tons of micro-trades to\ncentralised asset exchanges to try and exploit statistically expected\ncorrelations. HFT using tx replacement has nothing to do this with - it is\ninstead a way that N parties can negotiate amongst themselves as fast as\nthey can compute and verify signatures.\n\nHere is how Satoshi explained it to me, in his words:\n\nAn unrecorded open transaction can keep being replaced until nLockTime.  It\nmay contain payments by multiple parties.  Each input owner signs their\ninput.  For a new version to be written, each must sign a higher sequence\nnumber (see IsNewerThan).  By signing, an input owner says \"I agree to put\nmy money in, if everyone puts their money in and the outputs are this.\"\n There are other options in SignatureHash such as SIGHASH_SINGLE which\nmeans \"I agree, as long as this one output (i.e. mine) is what I want, I\ndon't care what you do with the other outputs.\".  If that's written with a\nhigh nSequenceNumber, the party can bow out of the negotiation except for\nthat one stipulation, or sign SIGHASH_NONE and bow out completely.\n\nThe parties could create a pre-agreed default option by creating a higher\nnSequenceNumber tx using OP_CHECKMULTISIG that requires a subset of parties\nto sign to complete the signature.  The parties hold this tx in reserve and\nif need be, pass it around until it has enough signatures.\n\nOne use of nLockTime is high frequency trades between a set of parties.\n They can keep updating a tx by unanimous agreement.  The party giving\nmoney would be the first to sign the next version.  If one party stops\nagreeing to changes, then the last state will be recorded at nLockTime.  If\ndesired, a default transaction can be prepared after each version so n-1\nparties can push an unresponsive party out.  Intermediate transactions do\nnot need to be broadcast.  Only the final outcome gets recorded by the\nnetwork.  Just before nLockTime, the parties and a few witness nodes\nbroadcast the highest sequence tx they saw.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130417/d5a479ab/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-20T01:48:11",
                "message_text_only": "I\u2019m not sure I followed John\u2019s proposal fully, why would a user sign TX1\ncommitting funds to the MULTISIG they may never get back? I also don\u2019t see\nthe problem with getting a signed TX2 back from the AP before releasing\nTX1... see the sequence below. But more importantly, we only need exactly\none replacement, so for starters we could anti-DoS by allowing only\nnSequence of 0 or MAX.\n\n If this was enabled on test-net, I would be including a link to\ntransactions that implement the following proposal. At the moment, the best\nI can do is unit test and generate the rawtransaction output at each step \u2013\nyou can find source code and test output here:\nhttps://gist.github.com/jspilman/5424310\n\n The initial funding transaction and time-locked refund is pretty annoying\nto setup, if you want to support the general case of coins from arbitrarily\nsized inputs. You will have:\n - 1 or more inputs from the user, 0 or 1 change outputs\n - 0 or more inputs from the AP, 0 or 1 change outputs\n - 1 output to \u20182 PK1 PK2 2 CHECKMULTISIG\u2019\n\n This precludes using SIGHASH_SINGLE except for the special cases where\ninputs are perfectly sized (i.e. they are created in a prior step).\n\n 0. User and AP negotiate how much to escrow, who pays the fees, and how\nfar in the future nLockTime will be set (how long user\u2019s funds will be tied\nif AP doesn\u2019t close the channel)\n\n 1. User creates an unsigned TX1 with 1 or more inputs from user\u2019s\n\u2018listunspent\u2019, change going back to user (if any), and a single output of\n\u2018FundAmount\u2019 with scriptPubKey of \u20182 PK1 OP_0 CHECKMULTISIG\u2019, and sends to\nthe AP\n\n 2. AP adds to TX1; their inputs (if any), their change (if any), replaces\nOP_0 in the scriptPubKey with a PK they control, and signs SIGHASH_ALL, and\nreturns TX1 to User.\n\n 3. User verifies TX1 is as agreed, and signs it SIGHASH_ALL, but keeps it\nto himself. User, having completed TX1, knows its TxID and can now create\nTX2-Locked spending TX1 back to themselves. User sets nLockTime to the\nagreed point, signs SIGHASH_ALL, and sends TX2-Locked to AP.\n\n 4. AP verifies TX2-Locked and adds their signature, and returns TX2-Locked\nto User. User can now broadcast TX1 and TX2-Locked.\n\n 5. At each payment milestone, user creates TX2-Final; TX1 as input, final\nnSequence, no lock time, with a single output going back to to the user,\nand an amount equal to the remaining balance of the channel. User signs\nwith SIGHASH_SINGLE and sends to the AP.\n\n 6. AP can add an output to TX2-Final sending their portion of the coins\nwhere ever they want, sign it SIGHASH_ALL, and broadcast it at any point,\nclosing the channel. AP must broadcast TX2-Final before nLockTime, but has\nno guarantee the user hasn\u2019t offered a bribe for miners by spending\nTX2-Locked with a large fee, e.g. a pissed off user spends TX2-Locked\nentirely to fees just to see if they can convince miners to wait for it.\n\n The alternative to the TX2-Locked is a 3rd party in the MULTISIG who is\ntrusted to close the channel at the request of either party, based on the\nlatest TX2-Final which was sent by the user. In this case there is no\nTX2-Locked, only a single boardcast version of TX2-Final, and you do not\nneed transaction replacement at all.\n\n Thanks,\n--Jeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130419/858beba2/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-20T20:51:23",
                "message_text_only": "I was discussing this with petertodd a couple days ago and we were thinking\nthe sequence I sent yesterday was usable today.  I tried getting it to work\non test-net but the final transaction closing the channel was not being\naccepted into the mempool beacause \"ERROR: CTxMemPool::accept() : inputs\nalready spent\"\n\nBut I was talking with sipa and gmaxwell on IRC about it, and sipa reminded\nme; Test-Net implements IsStandard() to allow the non-final \"refund\" TX\ninto the mempool, but then doesn't allow it to be replaced, Main-Net\nimplements IsStandard() to *reject* non-final transactions in the first\nplace.\n\nTherefore, this actually will work on Main-Net today, since the refund TX\nwon't even be allowed into the mempool until it's final, the AP is free to\nsign and broadcast its final TX without any replacement. Of course, if the\nAP waits too long, the user can get their Refund into the mempool and the\nAP's [higher seq] version will be locked out.\n\nThis may be a case where Test-Net is in a \"bad\" state, by allowing\nnon-final TXs into the pool, but not allowing replacement, you get an\nintermediate state which neither matches Main-Net behavior, nor implements\nbehavior which would ever be deployed to Main-Net as-is.\n\nThe current Main-Net behavior is actually very well suited for this\napplication. Any application that can be reduced to two instances of a Tx,\nnamely one non-final, and one final which is updated internally between the\nparties, works very well under the current Main-Net rules.\n\nIf you set the nLockTime of the refund to be several days after the\nscheduled closing time of the channel, it would be quite challenging to get\nthe Refund TX into the blockchain *despite* a final broadcast TX from the\nAP. Since the vast majority of Main-Net won't even accept it, the attacker\nwould have to distribute the TX to any miner who could include the AP's\ntransaction in a block between now and when the refund becomes final, and\nconvince them all to not include the perfectly valid, fees paid, final,\nnSeq=MAX, nLockTime=0 transaction from the AP. Demonstrating that level of\ncoordination would act substantially against the best interests of the\nminers, to say the least.\n\nThis proposal still suffers from any malleability weakness, where the\nuser's refund could be invalidated by a miner changing the TxID of TX1.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130420/28205bfd/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-22T11:07:56",
                "message_text_only": "Yes, this is an excellent observation. Thanks Jeremy and Peter. It's much\nless general than full blown tx replacement+lock times, but for the case of\na channel between two people that only ever increases in one direction, it\ncan work. Thanks. I will try implementing this myself for testing on the\nmain network.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130422/7de1cfe9/attachment.html>"
            },
            {
                "author": "John Dillon",
                "date": "2013-04-23T12:40:13",
                "message_text_only": "Sorry I don't have time to reply more in depth, but I wanted to say to\nJeremy (especially) and Peter I'm very impressed to see such a good\ndesign be created so fast that does not depend on replacement at all.\nThis is a great example of how often the right approach to a problem\nis to accept that the easy solution will not work, and find a way to\novercome the issue, rather than trying to paper over the easy\nsolution's problems with insecure design. I'm reminded of Peter's work\non fidelity bonded banking to overcome Bitcoin's scalability problem,\nalthough that needs to become real, and soon, so we can find all the\nflaws in it that will only become apparent when the idea is\nimplemented for real.\n\nJeremy: There does not seem to be a PGP key listed for your email\naddress. Is that correct?\n\nOn Sat, Apr 20, 2013 at 8:51 PM, Jeremy Spilman\n<jeremy.spilman at gmail.com> wrote:\n> I was discussing this with petertodd a couple days ago and we were thinking\n> the sequence I sent yesterday was usable today.  I tried getting it to work\n> on test-net but the final transaction closing the channel was not being\n> accepted into the mempool beacause \"ERROR: CTxMemPool::accept() : inputs\n> already spent\"\n>\n> But I was talking with sipa and gmaxwell on IRC about it, and sipa reminded\n> me; Test-Net implements IsStandard() to allow the non-final \"refund\" TX into\n> the mempool, but then doesn't allow it to be replaced, Main-Net implements\n> IsStandard() to *reject* non-final transactions in the first place.\n>\n> Therefore, this actually will work on Main-Net today, since the refund TX\n> won't even be allowed into the mempool until it's final, the AP is free to\n> sign and broadcast its final TX without any replacement. Of course, if the\n> AP waits too long, the user can get their Refund into the mempool and the\n> AP's [higher seq] version will be locked out.\n>\n> This may be a case where Test-Net is in a \"bad\" state, by allowing non-final\n> TXs into the pool, but not allowing replacement, you get an intermediate\n> state which neither matches Main-Net behavior, nor implements behavior which\n> would ever be deployed to Main-Net as-is.\n>\n> The current Main-Net behavior is actually very well suited for this\n> application. Any application that can be reduced to two instances of a Tx,\n> namely one non-final, and one final which is updated internally between the\n> parties, works very well under the current Main-Net rules.\n>\n> If you set the nLockTime of the refund to be several days after the\n> scheduled closing time of the channel, it would be quite challenging to get\n> the Refund TX into the blockchain *despite* a final broadcast TX from the\n> AP. Since the vast majority of Main-Net won't even accept it, the attacker\n> would have to distribute the TX to any miner who could include the AP's\n> transaction in a block between now and when the refund becomes final, and\n> convince them all to not include the perfectly valid, fees paid, final,\n> nSeq=MAX, nLockTime=0 transaction from the AP. Demonstrating that level of\n> coordination would act substantially against the best interests of the\n> miners, to say the least.\n>\n> This proposal still suffers from any malleability weakness, where the user's\n> refund could be invalidated by a miner changing the TxID of TX1.\n>\n> ------------------------------------------------------------------------------\n> Precog is a next-generation analytics platform capable of advanced\n> analytics on semi-structured data. The platform includes APIs for building\n> apps and a phenomenal toolset for data science. Developers can use\n> our toolset for easy data analysis & visualization. Get a free account!\n> http://www2.precog.com/precogplatform/slashdotnewsletter\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Anti DoS for tx replacement",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Jeremy Spilman",
                "Gavin Andresen"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 70528
        }
    },
    {
        "title": "[Bitcoin-development] Web Payments with PaySwarm: Identity (part 1 of 3)",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-16T18:25:10",
                "message_text_only": "FYI: this is worth a read for anyone interested in the payment ecosystem on\nthe WWW ... it's about 5 years of work, and there's a even hope to\nintegrate bitccoin too ...\n\nhttps://hacks.mozilla.org/2013/04/web-payments-with-payswarm-identity-part-1-of-3/\n\nI've cc'd Manu in case anyone here has any questions!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130416/0dbf08aa/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Web Payments with PaySwarm: Identity (part 1 of 3)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 491
        }
    },
    {
        "title": "[Bitcoin-development] bitcoind replies 500 error",
        "thread_messages": [
            {
                "author": "Alex Smorodin",
                "date": "2013-04-22T11:28:11",
                "message_text_only": "Hello, All!\n\nI'm trying to setup pushpool + bitcoind.  However, when I connect to\npushpool with cpuminer I receive this error:\n\n    [2013-04-21 12:47:47] json_rpc_call failed, retry after 30 seconds\n    [2013-04-21 12:48:17] JSON-RPC call failed: {\n       \"code\": -2,\n       \"message\": \"upstream RPC error\"\n    }\n    [2013-04-21 12:48:17] json_rpc_call failed, retry after 30 seconds\n\n\n\nI see this error in the **pushpool server log**:\n    root at ip-10-28-79-184:/usr/local/sbin# ./pushpoold --debug=2 --stderr --\n foreground --config=/usr/local/sbin/server.json\n    [2013-04-21 13:26:28.319949] Debug output enabled\n    [2013-04-21 13:26:28.333064] Forcing local hostname to localhost\n    [2013-04-21 13:26:28.456350] Listening on host :: port 8336\n    [2013-04-21 13:26:28.456477] Listening on host 10.28.79.184 port 8334\n    [2013-04-21 13:26:28.485367] initialized\n    JSON protocol request:\n    {\"method\": \"getwork\", \"params\": [], \"id\":1}\n\n    About to connect() to 127.0.0.1 port 8332 (#0)\n       Trying 127.0.0.1... * TCP_NODELAY set\n     connected\n     Connected to 127.0.0.1 (127.0.0.1) port 8332 (#0)\n     Server auth using Basic with user 'username'\n     POST / HTTP/1.1\n    Authorization: Basic dXNlcm5hbWV2YXN5YTpwYXNzd29yZHZhc3lhMTQ=\n    Host: 127.0.0.1:8332\n    Accept: */*\n    Accept-Encoding: deflate, gzip\n    Content-type: application/json\n    Content-Length: 45\n\n     The requested URL returned error: 500\n     Closing connection #0\n    [2013-04-21 13:26:31.743119] HTTP request failed: The requested URL\nreturned error: 500\n\n\n\n**bitcoind config:**\n\n    testnet=0\n    server=1\n    rpcuser=username\n    rpcpassword=password\n    rpctimeout=30\n    rpcallowip=*\n    rpcport=8332\n    rpcconnect=127.0.0.1\n    gen=0\n    keypool=256\n    paytxfee=0.00\n\n\n\n\n**pushpool config:**\n\n    {\n        \"listen\": [\n            {\n                \"port\": 8336\n            },\n            {\n                \"host\" : \"server_ip\",\n                \"port\" : 8334,\n                \"protocol\" : \"http-json\"\n            }\n        ],\n        \"database\": {\n            \"engine\": \"mysql\",\n            \"host\": \"localhost\",\n            \"port\": 3306,\n            \"name\": \"bitcoin\",\n            \"username\": \"mysql_username\",\n            \"password\": \"mysql_password\",\n            \"sharelog\": true,\n            \"stmt.pwdb\": \"SELECT `password` FROM `pool_worker` WHERE\n`username` = ?\",\n            \"stmt.sharelog\" :  \"INSERT INTO shares (rem_host, username,\nour_result, upstream_result, reason, solution) VALUES (?, ?, ?, ?, ?, ?)\"\n        },\n\n    \"pid\": \"/tmp/pushpool/pushpoold.pid\",\n    \"forcehost\": \"localhost\",\n        \"log.requests\": \"/tmp/pushpool/request.log\",\n        \"log.shares\": \"/tmp/pushpool/shares.log\",\n        \"auth.cred_cache.expire\": 75,\n        \"rpc.url\": \"http:// 127.0.0.1:8332/\",\n        \"rpc.user\": \"username\",\n        \"rpc.pass\": \"password\",\n        \"rpc.target.rewrite\": true\n    }\n\n\n\nI have tried to change ports, and even rebooted the server,  nothing helps.\nIf you need pore information, i will show.\n   Thanks.\n\n-- \n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c,\n \u0421\u043c\u043e\u0440\u043e\u0434\u0438\u043d \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\n\n            mailto: agsmorodin at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130422/88a64963/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoind replies 500 error",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Alex Smorodin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3287
        }
    },
    {
        "title": "[Bitcoin-development] BIP21 bitcoin URIs and HTML5",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-04-24T07:42:32",
                "message_text_only": "HTML5 allows web apps to register themselves for handling URI schemes, such\nas the bitcoin: URI that is already in use and being extended as part of\nthe payment protocol.\n\nThe bad news is that for security reasons there is a whitelist of\nacceptable schemes in the spec:\n\nhttp://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-navigator-registerprotocolhandler\n\nThe good news is that yesterday I talked to Hixie about it and he added\nbitcoin to the whitelist:\n\nhttp://html5.org/tools/web-apps-tracker?from=7849&to=7850\n\nI'm currently finding out what the process is for browser makers to notice\nthe change (perhaps they watch the spec commit history and nothing needs to\nbe done), but within a few months most users should have browsers that can\naccept bitcoin as a web-app handleable protocol scheme. I suppose IE10\nusers may be the laggards, but I guess we can live with that for now.\n\nIan pointed out some errors in the BIP21 spec. What's the process for\namending the BIP? Do we need to create a new one and mark the old one as\nreplaced, or can we just fix it in place given the relatively exotic nature\nof most of the issues? Here's his feedback:\n\n\n- BNF doesn't say what it's character set is (presumably it's Unicode)\n\n - \"bitcoinparams\" production doesn't define the separator, so in theory\nthe syntax is ...?label=foomessage=fooother=foo (rather than\n...?label=foo&message=foo etc)\n\n- the syntax allows ?amount=FOO&amount=1.1 as far as I can tell, since\n\"otherparam\" matches any name followed by any value, including \"amount\"\nfollowed by a bogus value.\n\n- \"pchar\" is referenced without definition.\n\n- the \"simpler\" syntax is just wrong (it would result in\nbitcoin:address?amount=1?label=FOO rather\nthan bitcoin:address?amount=1&label=FOO)\n\nBTW the IETF URL specs are being obsoleted by http://url.spec.whatwg.org/,\nat least for Web purposes. In that case matters.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/a844b4a5/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-04-24T13:35:45",
                "message_text_only": "I had another amendment, which roughly (can't remember the details) has\nto do with case-sensitivity of the scheme part and parameter names. If I\nremember right, BITCOIN:1d4...?AMOUNT=0.1 would be a correct URI but not\nvalid in the sense of BIP21 currently.\n\n\nOn 04/24/2013 09:42 AM, Mike Hearn wrote:\n> HTML5 allows web apps to register themselves for handling URI schemes,\n> such as the bitcoin: URI that is already in use and being extended as\n> part of the payment protocol.\n> \n> The bad news is that for security reasons there is a whitelist of\n> acceptable schemes in the spec:\n> \n> http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-navigator-registerprotocolhandler\n> \n> The good news is that yesterday I talked to Hixie about it and he added\n> bitcoin to the whitelist:\n> \n> http://html5.org/tools/web-apps-tracker?from=7849&to=7850\n> \n> I'm currently finding out what the process is for browser makers to\n> notice the change (perhaps they watch the spec commit history and\n> nothing needs to be done), but within a few months most users should\n> have browsers that can accept bitcoin as a web-app handleable protocol\n> scheme. I suppose IE10 users may be the laggards, but I guess we can\n> live with that for now.\n> \n> Ian pointed out some errors in the BIP21 spec. What's the process for\n> amending the BIP? Do we need to create a new one and mark the old one as\n> replaced, or can we just fix it in place given the relatively exotic\n> nature of most of the issues? Here's his feedback:\n> \n> \n> - BNF doesn't say what it's character set is (presumably it's Unicode)\n> \n>  - \"bitcoinparams\" production doesn't define the separator, so in theory\n> the syntax is ...?label=foomessage=fooother=foo (rather than\n> ...?label=foo&message=foo etc)\n> \n> - the syntax allows ?amount=FOO&amount=1.1 as far as I can tell, since\n> \"otherparam\" matches any name followed by any value, including \"amount\"\n> followed by a bogus value.\n> \n> - \"pchar\" is referenced without definition.\n> \n> - the \"simpler\" syntax is just wrong (it would result in\n> bitcoin:address?amount=1?label=FOO rather\n> than bitcoin:address?amount=1&label=FOO)\n> \n> BTW the IETF URL specs are being obsoleted\n> by http://url.spec.whatwg.org/, at least for Web purposes. In that case\n> matters.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service \n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-04-24T14:51:57",
                "message_text_only": "> Ian pointed out some errors in the BIP21 spec. What's the process for\namending the BIP? Do we need to create a new one and mark the old one as\nreplaced, or can we just fix it in place given the relatively exotic nature\nof most of the issues?\n\nThose all sound like bugs in the BIP; I think they should just be fixed, I\ndon't think we need a new BIP.\n\nI vote for a new meta-data item in the BIP header:\n\n  Corrected: <date>\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/04d64f04/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-24T16:37:18",
                "message_text_only": "On Wed, Apr 24, 2013 at 7:51 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> Ian pointed out some errors in the BIP21 spec. What's the process for\n>> amending the BIP? Do we need to create a new one and mark the old one as\n>> replaced, or can we just fix it in place given the relatively exotic nature\n>> of most of the issues?\n> Those all sound like bugs in the BIP; I think they should just be fixed, I\n> don't think we need a new BIP.\n\nYup.  Corrections are fine, esp ones which are not gratuitously incompatible."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-24T16:21:52",
                "message_text_only": "On 24 April 2013 09:42, Mike Hearn <mike at plan99.net> wrote:\n\n> HTML5 allows web apps to register themselves for handling URI schemes,\n> such as the bitcoin: URI that is already in use and being extended as part\n> of the payment protocol.\n>\n> The bad news is that for security reasons there is a whitelist of\n> acceptable schemes in the spec:\n>\n>\n> http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-navigator-registerprotocolhandler\n>\n> The good news is that yesterday I talked to Hixie about it and he added\n> bitcoin to the whitelist:\n>\n> http://html5.org/tools/web-apps-tracker?from=7849&to=7850\n>\n> I'm currently finding out what the process is for browser makers to notice\n> the change (perhaps they watch the spec commit history and nothing needs to\n> be done), but within a few months most users should have browsers that can\n> accept bitcoin as a web-app handleable protocol scheme. I suppose IE10\n> users may be the laggards, but I guess we can live with that for now.\n>\n\nThis is great news for bitcon, and the IANA application will be improved if\nthere is evidence of it being used\n\n\n>\n> Ian pointed out some errors in the BIP21 spec. What's the process for\n> amending the BIP? Do we need to create a new one and mark the old one as\n> replaced, or can we just fix it in place given the relatively exotic nature\n> of most of the issues? Here's his feedback:\n>\n>\n> - BNF doesn't say what it's character set is (presumably it's Unicode)\n>\n>  - \"bitcoinparams\" production doesn't define the separator, so in theory\n> the syntax is ...?label=foomessage=fooother=foo (rather than\n> ...?label=foo&message=foo etc)\n>\n> - the syntax allows ?amount=FOO&amount=1.1 as far as I can tell, since\n> \"otherparam\" matches any name followed by any value, including \"amount\"\n> followed by a bogus value.\n>\n> - \"pchar\" is referenced without definition.\n>\n> - the \"simpler\" syntax is just wrong (it would result in\n> bitcoin:address?amount=1?label=FOO rather\n> than bitcoin:address?amount=1&label=FOO)\n>\n> BTW the IETF URL specs are being obsoleted by http://url.spec.whatwg.org/,\n> at least for Web purposes. In that case matters.\n>\n\nNot 100% sure how accurate this is, tho it may be the world view of some\nfolks in WHATWG.  WHATWG is not a major standards body tho.  Work on\nimproving the URL spec is always welcome, as it is the value proposition of\nthe Web.\n\n\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service\n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/46ad6cd9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP21 bitcoin URIs and HTML5",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andreas Schildbach",
                "Mike Hearn",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Melvin Carvalho"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9371
        }
    },
    {
        "title": "[Bitcoin-development] Sending Bitcoins using RSA keys",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-24T14:18:38",
                "message_text_only": "So there's a slight world divide in digital payments with bitcoin using\nECDSA and GPG, payswarm / webid etc using largely RSA\n\nHere's how to bring the two worlds together and enable bitcoins be sent\nover webid or payswarm\n\n\nProblem: Alice and Bob have RSA key pairs, but no public bitcoin\naddresses.  Alice wants to send 1 BTC to Bob.\n\n1. Alice takes Bob's WebID and encrpyts it with her private key (to create\nentropy) ...\n\n2. Alice uses that message as the seed to produce btc address (as per\nhttp://brainwallet.org ) with ECDSA key pair\n\n3. Alice sends coins to this address\n\n4. Alice and then encrypts the seed again with Bob's public key\n\n5. Bob decrypts the seed using his private key\n\n6. Bob can now use the seed to recreate the wallet and spend the coins\n\nUnless I've made an error, I believe this unites the web paradigm and\ncrypto currency paradigm into one potentially giant eco system ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/d07c27b0/attachment.html>"
            },
            {
                "author": "Craig B Agricola",
                "date": "2013-04-24T14:46:49",
                "message_text_only": "Maybe I'm missing something crucial, but what benefit does this dance give over\nthe slightly more obvious mechanism of simply:\n1) Alice generates a new address with her bitcoin client and sends the BTC to\n   this new address\n2) Alice exports the private key for that address (there is a well supported\n   format for that)\n3) Alice writes a nice email to Bob, including that exported private key\n4) Alice encrypts the email with Bob's public key using GPG and sends it to him\n   by email\n5) Bob decrypts the email\n6) Bob imports the private key into his wallet\n\nThere's no need for sending a whole wallet; just the one key is needed.  Every\nbit of infrastructure needed above already exists.  And of course, the above\nhas the same issue as your proposal; this is a way for two trusting parties to\nsend BTC without using the Bitcoin network, but it's not a payment mechanism.\nThey now share control of an address; whoever spends that BTC first wins, so\nuntil Bob uses the Bitcoin network to spend that BTC to another address that\nonly he controls, it's still in joint custody.  And if ensuring that he has\ncontrol of the BTC is the last (implicit) step in the procedure above, as well\nas yours, then they might as well have simply used the Bitcoin network to do\nthe transfer in the first place.\n\nDid I miss the point entirely?\n\n -Craig\n\nPS. Re-reading, I realize that the above might come off sounding snarky or\n    dismissive; it's not intended that way.  I'm wondering if I'm missing the\n    big picture.\n\nOn Wed, Apr 24, 2013 at 04:18:38PM +0200, Melvin Carvalho wrote:\n> So there's a slight world divide in digital payments with bitcoin using\n> ECDSA and GPG, payswarm / webid etc using largely RSA\n> \n> Here's how to bring the two worlds together and enable bitcoins be sent\n> over webid or payswarm\n> \n> \n> Problem: Alice and Bob have RSA key pairs, but no public bitcoin\n> addresses.  Alice wants to send 1 BTC to Bob.\n> \n> 1. Alice takes Bob's WebID and encrpyts it with her private key (to create\n> entropy) ...\n> \n> 2. Alice uses that message as the seed to produce btc address (as per\n> http://brainwallet.org ) with ECDSA key pair\n> \n> 3. Alice sends coins to this address\n> \n> 4. Alice and then encrypts the seed again with Bob's public key\n> \n> 5. Bob decrypts the seed using his private key\n> \n> 6. Bob can now use the seed to recreate the wallet and spend the coins\n> \n> Unless I've made an error, I believe this unites the web paradigm and\n> crypto currency paradigm into one potentially giant eco system ...\n\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service \n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-04-27T14:14:42",
                "message_text_only": "On 24 April 2013 16:46, Craig B Agricola <craig at theagricolas.org> wrote:\n\n> Maybe I'm missing something crucial, but what benefit does this dance give\n> over\n> the slightly more obvious mechanism of simply:\n> 1) Alice generates a new address with her bitcoin client and sends the BTC\n> to\n>    this new address\n> 2) Alice exports the private key for that address (there is a well\n> supported\n>    format for that)\n> 3) Alice writes a nice email to Bob, including that exported private key\n> 4) Alice encrypts the email with Bob's public key using GPG and sends it\n> to him\n>    by email\n> 5) Bob decrypts the email\n> 6) Bob imports the private key into his wallet\n>\n\nYes this works too.\n\nHowever is it dependent on the bitcoin client address generation algorithm?\n\nI think what I'm trying to describe is something more akin to the way a\nshared secret is generated by TLS.\n\nAgree, that the wallet is also shared, ive not yet worked out a way to\n'blind' one side of the wallet, but nor have a proved it's impossible, so\nstill working onthat :)\n\n\n>\n> There's no need for sending a whole wallet; just the one key is needed.\n>  Every\n> bit of infrastructure needed above already exists.  And of course, the\n> above\n> has the same issue as your proposal; this is a way for two trusting\n> parties to\n> send BTC without using the Bitcoin network, but it's not a payment\n> mechanism.\n> They now share control of an address; whoever spends that BTC first wins,\n> so\n> until Bob uses the Bitcoin network to spend that BTC to another address\n> that\n> only he controls, it's still in joint custody.  And if ensuring that he has\n> control of the BTC is the last (implicit) step in the procedure above, as\n> well\n> as yours, then they might as well have simply used the Bitcoin network to\n> do\n> the transfer in the first place.\n>\n> Did I miss the point entirely?\n>\n\nPerhaps I've not described the problem statement as clearly as I could,\nI'll work on it.  Essentially it's an automated way to bootstrap the RSA\nkey community together with bitcoin.  e.g. 99% of GPG users probably dont\nhave a bitcion wallet or address or client.  I think maybe a user story\nwill help.\n\n\n>\n>  -Craig\n>\n> PS. Re-reading, I realize that the above might come off sounding snarky or\n>     dismissive; it's not intended that way.  I'm wondering if I'm missing\n> the\n>     big picture.\n>\n\nNot snarky at all!  Appreciate the feedback...\n\n\n>\n> On Wed, Apr 24, 2013 at 04:18:38PM +0200, Melvin Carvalho wrote:\n> > So there's a slight world divide in digital payments with bitcoin using\n> > ECDSA and GPG, payswarm / webid etc using largely RSA\n> >\n> > Here's how to bring the two worlds together and enable bitcoins be sent\n> > over webid or payswarm\n> >\n> >\n> > Problem: Alice and Bob have RSA key pairs, but no public bitcoin\n> > addresses.  Alice wants to send 1 BTC to Bob.\n> >\n> > 1. Alice takes Bob's WebID and encrpyts it with her private key (to\n> create\n> > entropy) ...\n> >\n> > 2. Alice uses that message as the seed to produce btc address (as per\n> > http://brainwallet.org ) with ECDSA key pair\n> >\n> > 3. Alice sends coins to this address\n> >\n> > 4. Alice and then encrypts the seed again with Bob's public key\n> >\n> > 5. Bob decrypts the seed using his private key\n> >\n> > 6. Bob can now use the seed to recreate the wallet and spend the coins\n> >\n> > Unless I've made an error, I believe this unites the web paradigm and\n> > crypto currency paradigm into one potentially giant eco system ...\n>\n> >\n> ------------------------------------------------------------------------------\n> > Try New Relic Now & We'll Send You this Cool Shirt\n> > New Relic is the only SaaS-based application performance monitoring\n> service\n> > that delivers powerful full stack analytics. Optimize and monitor your\n> > browser, app, & servers with just a few lines of code. Try New Relic\n> > and get this awesome Nerd Life shirt!\n> http://p.sf.net/sfu/newrelic_d2d_apr\n>\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130427/cf515b60/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Sending Bitcoins using RSA keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Craig B Agricola"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 8558
        }
    },
    {
        "title": "[Bitcoin-development] Time for a 0.8.2 release",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-04-24T15:22:44",
                "message_text_only": "Consensus in #bitcoin-dev chat is that it is time to do a 0.8.2 release. A\nfew important bugs have been fixed, and the goal will be to get a 0.8.2\nfinal release before the May 15'th hard fork deadline.\n\nPieter has already started going through the issues list; help with\ntesting, debugging, and fixing high-priority issues is very welcome. I'll\nalso be going through the issues list and marking any issues I think need\nto be fixed with the '0.8.2' milestone.\n\nIf translation work needs to be done, now is a great time to do it.\n\nWe still don't have a basic QA checklist for testing of release candidates;\nI'll commit to spending a little of the remaining \"Bitcoin Testing Project\"\nbitcoins to whoever contributes to creating one.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/411a2ae8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Time for a 0.8.2 release",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 935
        }
    },
    {
        "title": "[Bitcoin-development] [Bitcoin-test] Time for a 0.8.2 release",
        "thread_messages": [
            {
                "author": "Arklan Uth Oslin",
                "date": "2013-04-25T12:45:19",
                "message_text_only": "unfortunately my winter has proven a complicated series of significant life\nevents - new work, etc - which sees me with little free time to help out.\nsorry.\n\n\nArklan\n\n----------\nAs long as there is light, the darkness holds no fear. And yet, even in the\ndeepest black, there is life. - Arklan Uth Oslin\n\nI want to leave this world the same way I came into it: backwards and on\nfire. - Arklan Uth Oslin\n\n\nOn Wed, Apr 24, 2013 at 9:22 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Consensus in #bitcoin-dev chat is that it is time to do a 0.8.2 release. A\n> few important bugs have been fixed, and the goal will be to get a 0.8.2\n> final release before the May 15'th hard fork deadline.\n>\n> Pieter has already started going through the issues list; help with\n> testing, debugging, and fixing high-priority issues is very welcome. I'll\n> also be going through the issues list and marking any issues I think need\n> to be fixed with the '0.8.2' milestone.\n>\n> If translation work needs to be done, now is a great time to do it.\n>\n> We still don't have a basic QA checklist for testing of release\n> candidates; I'll commit to spending a little of the remaining \"Bitcoin\n> Testing Project\" bitcoins to whoever contributes to creating one.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service\n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> _______________________________________________\n> Bitcoin-test mailing list\n> Bitcoin-test at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-test\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/1fcb1cd2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Time for a 0.8.2 release",
            "categories": [
                "Bitcoin-development",
                "Bitcoin-test"
            ],
            "authors": [
                "Arklan Uth Oslin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2073
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Fees/Minimum Priorities based on Mempool and Memory-Limited Mempool",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2013-04-24T21:09:32",
                "message_text_only": "I hacked together a new min fee/prio calculator and memory-limited\nmempool a while back and figured Id post the code here to get some\ncomments.  Its more of a discussion-starter than a strict proposal and\nhas a few obvious holes (hence posting here instead of pull-requesting).\n\nIt works as such (note that all constants are really place-holders, so\nplease recommend reasonable constants):\n\n1) Watches when transactions enter mempool and calculates minimum\nfee/priority based on a fairly dumb algorithm... It finds the highest\nFEE_POLICY_TOP_N_TX (10) fee/prio transactions in mempool that have been\nin mempool at least FEE_POLICY_DETERMINATION_BLOCKS (6) blocks and\naverages together their fee/prio then multiplies by FEE_POLICY_FACTOR\n(1.1).\n\n2) It limits mempool size to a default of 10*MAX_BLOCK_SIZE (bringing it\ndown to 9*MAX_BLOCK_SIZE each time it has to throw out transaction).\nWhen transactions are throw out, it keeps 2/9 of the mempool size in\nhighest-prio transactions and 7/9 of the mempool in highest-fee\ntransactions.  \n\n3) Any transactions which have a fee lower than the lowest-fee\ntransaction thrown out of the mempool and a priority lower than the\nlowest-priority transaction thrown out of the mempool will not be\naccepted into the mempool at all.  \n\nObvious bugs:\n1) It doesnt yet do anything for minimum fee/prio when it hasnt seen at\nleast FEE_POLICY_TOP_N_TX (10) transactions sitting in mempool for at\nleast FEE_POLICY_DETERMINATION_BLOCKS (6) blocks (ie hasnt been running\nfor 6 blocks or blocks are being filled completely).  The likely way to\naddress this is to look at previous blocks and find the lowest fee/prio\ntransactions included in them.\n\n2) It will relay all transactions until the mempool has filled up (or if\nthe mempool never fills).  Something should be done initially to limit\nDoS potential.\n\nCode is at\nhttps://github.com/TheBlueMatt/bitcoin/commits/fees\n\nMatt"
            }
        ],
        "thread_summary": {
            "title": "Fees/Minimum Priorities based on Mempool and Memory-Limited Mempool",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Matt Corallo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1903
        }
    },
    {
        "title": "[Bitcoin-development] Cold Signing Payment Requests",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-24T23:01:51",
                "message_text_only": "Payment Protocol uses x509 certs to sign a Payment Request. This\nallows wallets to display meta-data from the cert to the payer instead\nof the address, which should make it easier to verify where money is\nbeing sent, and make it harder for an attacker to change the address\ndisplayed to a user so that coins are not sent to the wrong place.\n\nThe difficulty is that Payment Requests must be generated live, and\ntherefore the key used to sign those requests must also be live,\nexposing the key to theft similar to a hot wallet. Steal the key,\nforge payment requests, and the payer sees a 'green box' but the coins\ngo to the attacker. The question... is there a way to sign something\nonce, with a key kept offline, which verifies the address in the\nPayment Request belongs to the payee?\n\n1) Given a 'parent' cert which is kept offline, and a child\ncertificate of 'parent' which is kept hot on the payment server.\n\n2) Given a public key and chain code { pubKey, code } under BIP32 we\ngenerate child keys as I = HMAC(code, Kpar || i), Ki = I[0:32] * Kpar.\n\n3) If we sign Kpar with the parent cert's key offline, we can sign the\nremaining less critical data (address, I[0:32], amount, description,\netc.) with the child cert's key.\n\n4) The payer verifies Kpar, and verifies the address by calculating\nHash160(Kpar * I[0:32])\n\nIn fact, there's no requirement to use BIP32 to calculate I[0:32], it\ncould also just be randomly generated.\n\nAny I[0:32] included in the Payment Request, even if it is tampered\nwith, will correspond to an address for which the payee can calculate\nthe corresponding private key.\n\nSo the idea is your 'most trusted' cert would be used offline only to\nsign a Kpar once, and a 'less trusted' cert would be used to sign the\nother stuff, like 'amount', 'description', 'merchant-data', and the\n'I[0:32]' as well.\n\nI'm not an expert on x509, but I imagine the trouble is, how does the\npayer know which cert is which? I was originally thinking the parent\ncert would be an intermediate CA cert used to sign the child cert, but\nI guess good look getting one of those, even with a name constraint,\nfrom a Root CA. I'm not sure if you can do better than just a\n'convention' such as one is an EV cert and one is not. Perhaps the\nless trusted cert is actually self-signed using the EV cert, but that\nrequires special validation, since its no longer a standard\ncertificate chain. I would love to hear a better idea.\n\nAny comments if this is something worth pursuing? I think there are\ndefinitely benefits if merchants can keep the key signing the address\noffline.\n\nThanks,--Jeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/9156de8b/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-04-24T23:07:59",
                "message_text_only": "There's some good discussion about that here:\n\nhttps://bitcointalk.org/index.php?topic=130749.msg1398972#msg1398972\n\nthanke came up with this first, and then I reinvented it, and now you\nhave.  But the thread has some good discussion about how to move\nforward.  I'm a big fan of putting the lower-case root hash160 in your\nsubdomain and getting and SSL cert for that.  Feel free to contribute to\nthat thread if you find it compelling.\n\n-Alan\n\n\nOn 04/24/2013 07:01 PM, Jeremy Spilman wrote:\n> Payment Protocol uses x509 certs to sign a Payment Request. This allows wallets to display meta-data from the cert to the payer instead of the address, which should make it easier to verify where money is being sent, and make it harder for an attacker to change the address displayed to a user so that coins are not sent to the wrong place.\n>\n> The difficulty is that Payment Requests must be generated live, and therefore the key used to sign those requests must also be live, exposing the key to theft similar to a hot wallet. Steal the key, forge payment requests, and the payer sees a 'green box' but the coins go to the attacker. The question... is there a way to sign something once, with a key kept offline, which verifies the address in the Payment Request belongs to the payee?\n>\n> 1) Given a 'parent' cert which is kept offline, and a child certificate of 'parent' which is kept hot on the payment server.\n>\n> 2) Given a public key and chain code { pubKey, code } under BIP32 we generate child keys as I = HMAC(code, Kpar || i), Ki = I[0:32] * Kpar.\n>\n> 3) If we sign Kpar with the parent cert's key offline, we can sign the remaining less critical data (address, I[0:32], amount, description, etc.) with the child cert's key.\n>\n> 4) The payer verifies Kpar, and verifies the address by calculating Hash160(Kpar * I[0:32])\n>\n> In fact, there's no requirement to use BIP32 to calculate I[0:32], it could also just be randomly generated.\n>\n> Any I[0:32] included in the Payment Request, even if it is tampered with, will correspond to an address for which the payee can calculate the corresponding private key.\n> So the idea is your 'most trusted' cert would be used offline only to sign a Kpar once, and a 'less trusted' cert would be used to sign the other stuff, like 'amount', 'description', 'merchant-data', and the 'I[0:32]' as well.\n> I'm not an expert on x509, but I imagine the trouble is, how does the payer know which cert is which? I was originally thinking the parent cert would be an intermediate CA cert used to sign the child cert, but I guess good look getting one of those, even with a name constraint, from a Root CA. I'm not sure if you can do better than just a 'convention' such as one is an EV cert and one is not. Perhaps the less trusted cert is actually self-signed using the EV cert, but that requires special validation, since its no longer a standard certificate chain. I would love to hear a better idea.\n>\n> Any comments if this is something worth pursuing? I think there are definitely benefits if merchants can keep the key signing the address offline.\n> Thanks,\n> --Jeremy\n>\n>\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service \n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130424/b1b5ba11/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-25T09:08:26",
                "message_text_only": "(for background: I did a lot of the design work with Gavin on the payment\nprotocol and suggested/prototyped using x.509 in the way we do).\n\nSo, I'm not a fan of weird hacks involving non-existent domain names.\nThere's a clean way to implement this and we decided to punt on it for v1\nin order to get something shippable, but if you're volunteering ... :) then\nindeed having a custom cert type that chains onto the end is the way to go.\n\nIt doesn't have to be X.509. It can just be a regular protocol buffer. Even\nif we re-used X.509 it wouldn't be accepted by OpenSSL or any other SSL\nstack, so it wouldn't buy us anything and it's not like ASN.1 is easy to\nwork with. Chaining an additional Bitcoin-specific cert onto the end also\nsolves the problem of delegation ... a lot of merchants are using BitPay\nbut probably don't want to share their SSL private keys with a third party.\nThat means today the payments would show up as paid to BitPay Inc which is\nmisleading and weird, they're just an intermediary. So if the merchant can\nrun a simple command line tool that you point to the private key, and it\nspits out a signed protobuf that contains a new (ecdsa) public key and\nsaves the private key to a file, then you can send that cert and key off to\nyour payment processor. The identity is still taken from your CA cert but\nthe actual signing keys used are different.\n\nAnother use case - a company has a lot of roving sales agents, like in a\nsupermarket or waiters at a restaurant. The company wants the agents to be\nable to sign with their corporate EV identity but the agents are not highly\ntrusted. So they can be issued a 24-hour expiring Bitcoin-specific cert at\nthe start of each working day and then they sign payment requests with that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/389eb004/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-04-25T09:58:55",
                "message_text_only": "> So, I'm not a fan of weird hacks involving non-existent domain names.\n> There's a clean way to implement this and we decided to punt on it for\n> v1 in order to get something shippable, but if you're volunteering ...\n> :) then indeed having a custom cert type that chains onto the end is\n> the way to go.\n\nChaining a custom cert onto the end doesn't work, at least not if your\n\"end\" is the SSL cert. Chaining it to the SSL cert defeats the OP's\nintention of \"cold signing\", as the SSL private key is usually kept\nonline, therefore can't be used to sign a pubkey that is supposed to\nstay offline. Hence the idea of the \"hack\", to get two independent\nthings signed by the CA in just one cert: 1) your SSL pubkey, 2) your\ncustom cert (by including its cryptograhic hash). This hack seems the\neasiest possible solution.\n\nIt also seems the only solution if you want to stick with domain-names\nas identifiers for the payment protocol (and I think you do). A cleaner\nway would be to get a cert signed by your CA that contains an extended\n\"bitcoin\" attribute in compliance with X.509, but this seems a little\nfar off.\n\nSo I am in favor of the \"hack\" (properly thought out where to place the\nhash).\n\nps. In the long run I would of course like to see payee identities based\non alt-chains rather than domain-names plus CAs. But that's rather a\nconcern for v3 than v2. Of course, you can also chain custom certs to\nnon-SSL identities like PGP-keys. You probably don't want to do that,\nbut it would solve Melvin Carvalho's problem of sending to RSA keys\n(assuming the RSA key holder previously published his custom cert with a\ncert server). \n\n-- \nTimo Hanke\nPGP AB967DA8, Key fingerprint = 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-25T10:05:06",
                "message_text_only": "> Chaining a custom cert onto the end doesn't work, at least not if your\n> \"end\" is the SSL cert. Chaining it to the SSL cert defeats the OP's\n> intention of \"cold signing\", as the SSL private key is usually kept\n> online, therefore can't be used to sign a pubkey that is supposed to\n> stay offline.\n\n\nWhat you wrote doesn't make any sense to me, sorry.\n\nYes, SSL private keys are kept online. That's irrelevant - the goal of all\nthis is not to protect against web server compromise. That's a pointless\ngoal to try and solve right now, because the SSL PKI cannot handle\ncompromised web servers and so neither can we (with v1 of the payments\nspec).\n\nThe goal of this is to allow delegation of signing authority without giving\nthe delegate the SSL private key.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/56216724/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-04-25T10:28:53",
                "message_text_only": "On Thu, Apr 25, 2013 at 12:05:06PM +0200, Mike Hearn wrote:\n>     Chaining a custom cert onto the end doesn't work, at least not if your\n>     \"end\" is the SSL cert. Chaining it to the SSL cert defeats the OP's\n>     intention of \"cold signing\", as the SSL private key is usually kept\n>     online, therefore can't be used to sign a pubkey that is supposed to stay offline.\ni meant:                                              ^whose privkey is supposed to stay offline.\n\n> the goal of all this is not to protect against web server compromise.\n\n> The goal of this is to allow delegation of signing authority without giving the\n> delegate the SSL private key.\n\nThis is not how I understand the OP, which I said I was addressing:\n\n> The difficulty is that Payment Requests must be generated live, and\n> therefore the key used to sign those requests must also be live,\n> exposing the key to theft similar to a hot wallet. Steal the key,\n> forge payment requests, and the payer sees a 'green box' but the coins\n> go to the attacker. The question... is there a way to sign something\n> once, with a key kept offline, which verifies the address in the\n> Payment Request belongs to the payee?\n\n\n\n> That's a pointless goal to try and solve right now, because the SSL\n> PKI cannot handle compromised web servers and so neither can we (with\n> v1 of the payments spec).\n\nI don't think the OP intended to solve it \"right now\", i.e. in v1. \n\nHe differentiated between \"most trusted\" and \"less trusted\" keys\n(certs). So he can clearly live with the SSL PKI being \"less trusted\"\nfor his purpose.  \n\n-- \nTimo Hanke\nPGP AB967DA8, Key fingerprint = 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-25T10:45:33",
                "message_text_only": ">\n> > That's a pointless goal to try and solve right now, because the SSL\n> > PKI cannot handle compromised web servers and so neither can we (with\n> > v1 of the payments spec).\n>\n> I don't think the OP intended to solve it \"right now\", i.e. in v1.\n>\n> He differentiated between \"most trusted\" and \"less trusted\" keys\n> (certs). So he can clearly live with the SSL PKI being \"less trusted\"\n> for his purpose.\n\n\nYes, but my point is if the SSL key lives on the web server, and there are\nCAs that issue you certs based on control of a web server at the given\ndomain name (there are), then you can simply issue yourself a new SSL cert\nwith whatever data in it you want and pose as the merchant.\n\nSo I don't see how you can have a payment request signing key that's safer\nthan an SSL key. As Jeremy notes, CAs will not issue you intermediate\ncertificates. Perhaps if one existed that would do the necessary things for\na reasonable price you could indeed give yourself an offline intermediate\ncert and then use that to sign one cert for SSL and another for payment\nrequest signing, but as far as anyone is aware no such CA exists.\n\nThe interesting case is where the thing signing payment requests is less\ntrusted than the web server. The scenario you're trying to solve is the\ninverse - the payment request signing process is more trusted than the web\nserver. But unless/until the CA landscape changes we don't have a way to\nimplement that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/95f2f6d3/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-25T10:52:33",
                "message_text_only": ">\n> So I don't see how you can have a payment request signing key that's safer\n> than an SSL key. As Jeremy notes, CAs will not issue you intermediate\n> certificates. Perhaps if one existed that would do the necessary things for\n> a reasonable price you could indeed give yourself an offline intermediate\n> cert and then use that to sign one cert for SSL and another for payment\n> request signing, but as far as anyone is aware no such CA exists.\n>\n\nRe-reading what I wrote, it's not really clear.\n\nEven if possible, the intermediate cert setup still wouldn't work for most\nmerchants but I didn't make that clear. It might work for EV certs. For\nmost sites that are just DV there's nothing you can do because CA\nverification is just \"do you control this domain name\". So if your web\nserver is compromised it's game over. They can issue themselves a new cert,\nand what's more, unless wallets are checking revocation lists you can't\nstop them signing as you until their certificate expires.\n\nThe process for getting an EV cert is harder and there, an offline\nrestricted intermediate cert might make more sense because you could have a\ncompromised SSL key whilst not having a compromised identity, but it's\nstill not possible with todays CA policies.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/757a8f55/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-04-25T11:55:59",
                "message_text_only": "On Thu, Apr 25, 2013 at 12:45:33PM +0200, Mike Hearn wrote:\n>     > That's a pointless goal to try and solve right now, because the SSL\n>     > PKI cannot handle compromised web servers and so neither can we (with\n>     > v1 of the payments spec).\n> \n>     I don't think the OP intended to solve it \"right now\", i.e. in v1.\n> \n>     He differentiated between \"most trusted\" and \"less trusted\" keys\n>     (certs). So he can clearly live with the SSL PKI being \"less trusted\"\n>     for his purpose.\n> \n> \n> Yes, but my point is if the SSL key lives on the web server, and there are CAs\n> that issue you certs based on control of a web server at the given domain name\n> (there are), then you can simply issue yourself a new SSL cert with whatever\n> data in it you want and pose as the merchant.\n\nTrue, I forgot about that, though we already had discussed this in the\npast..\n\n-- \nTimo Hanke\nPGP AB967DA8, Key fingerprint = 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-25T14:31:16",
                "message_text_only": "On Thu, Apr 25, 2013 at 4:13 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:\n\n> I am not sure if my replies hit the list. If not, can anyone who sees this\n> help?\n>\n> In the past, I have pre signed (with PGP) large batches of Bitcoin\n> addresses for distribution on my server. This way, even in the event of\n> compromise, there is no way someone could substitute an address of their\n> own and have it have the same characteristics as other addresses I have\n> signed.  The same general concept could be used to keep signing keys off\n> the web server.\n>\n> Mike\n>\n\nI didn't see your other replies but got this one.\n\nThe assumption you made by doing that is that people can obtain your PGP\nkey. This leads to the question of how someone knows what your key is or\nthat you signed the list in the first place. The most obvious way is to go\nto https://www.casascius.com/ and click \"My PGP key\" -> but we already\nfailed at this point if your web server was hacked. I'd have to learn about\nyour cryptographic identity via some other secure channel, but usually that\ndoesn't exist.\n\nBeing able to survive web server hacks is intuitively attractive because\nweb servers tend to be so insecure. But unfortunately there doesn't seem to\nbe any good way to do this with todays infrastructure because for most\nbusinesses, their website *is* their identity, and if a hacker controls\nthat they it's very hard for anyone (including CAs) to know that something\nhas gone wrong.\n\nI think there are some simple mitigations we can use in the short term.\n\nOne is that wallets could count how many times you paid to addresses signed\nby a particular cert. If you're a repeat customer and your wallet says \"You\nhave never paid this recipient before\" instead of \"You have paid this\nrecipient 4 times\" then you might be suspicious. Someone pointed out to me\nthat the current payment protocol has nothing to say on phishing using\nconfusible domains - this could help with that too, and it's easy to\nimplement. Of course it means you get reset whenever your certificate\nexpires and has to be renewed, and crying wolf is often worse than doing\nnothing at all. So that's an issue.\n\nWith time there might be more complex solutions available, like extensions\nto X.509/CA infrastructure (if bitcoin stays growing and popular). Also,\nalternative PKIs like DNSSEC or the ePassport PKI might be useful. In your\ncase Mike you aren't really a company, you're trading under your own name,\nso signing the key list under your legal identity is really the best\nsolution. It's just not easily available right now.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/0db9450e/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-25T19:12:37",
                "message_text_only": "There are definitely ways to keep the pay-to address secure even if the web\nserver is compromised, just perhaps not perfectly clean standard X.509 ways\nunder the current ecosystem which would be easier for everyone to agree on.\n\n - If a more trusted cert is an EV end cert, and a less trusted is a DV end\ncert (not chained off the EV) then it's easy for the wallet to distinguish\nbetween the two, and they are both valid certs. EV signs pubKey offline, DV\nused hot on the web server.\n - If the more trusted cert is an EV or DV end cert, and the less trusted\ncert is chained off that end cert, it's technically 'invalid' so again its\nobvious which one is more/less trusted, but it's easier for an attacker to\nget their own DV end cert for your domain.\n - The third way is getting the pubKey into the cert attributes, such as\nencoding the pubKey, or a fingerprint of the pubKey, as a Subject Alternate\nName, so the attacker would need to get their own cert to change the\naddress, meaning it's not as critical if your cert key is stolen.\n\nOn the wallet side, it comes down to additional validation code paths which\nget triggered by some detection logic. For example, if you pass PubKey and\nInvoiceID in the Payment Request, the wallet needs to know if it should\ncheck for a Subject Alternate Name in the cert for a fingerprint of the\nPubKey, how the fingerprint is calculated, and then verify the Address is\nindeed PubKey * InvoiceID.  I think falsely rejecting a legacy Payment\nRequest would get the extra validation code path commented out pretty\nquickly.\n\nI really like Mike Hearn's idea of 'You have paid this recipient 4 times'\nbut also agree completely on the crying wolf due to expiration or\nrevocation. At least such a message could be based on the domain name only,\nto try to prevent phishing with similar domain names, then there's no\nexpiration issue. Slightly more restrictive would be domain + CA, again not\nconsidering expiration, but pinning the pay count to the CA seems to have\nlittle downside and makes it harder for an attacker to get their own cert\nfor your domain if you choose your CA 'wisely'.\n\nI assume the ship has sailed on v1, but if we can get consensus on how we\nwant this to work in the near-term, we can start prototyping it and maybe\nget this available sooner than later. In any case we should be confirm v1\ndoesn't do anything to prevent this from working in a clean, extensible\nmanor, which I think means prototyping it and seeing the new Payment\nRequest is handled transparently by v1 code.\n\nRight now I'm leaning towards writing a prototype using a single cert with\na fingerprint of PubKey in the Subject Alternate Name, and getting PubKey\nand InvoiceID in the Payment Request.  Gavin, would the best way to work on\nthis be to just fork your code on Github?\n\nThanks,\n--Jeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/c74f1e00/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-04-26T01:07:07",
                "message_text_only": "On Thu, Apr 25, 2013 at 3:12 PM, Jeremy Spilman <jeremy.spilman at gmail.com>wrote:\n\n> Right now I'm leaning towards writing a prototype using a single cert with\n> a fingerprint of PubKey in the Subject Alternate Name, and getting PubKey\n> and InvoiceID in the Payment Request.  Gavin, would the best way to work on\n> this be to just fork your code on Github?\n>\n\nAs usual, our bottleneck is code review / testing, so it would be nice if\nyou spent some time reviewing code and helping test v0.9 so we can actually\nship a v1 sometime in the next several months before you start working on a\nv2.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130425/2c71f32a/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-04-28T18:03:04",
                "message_text_only": "On Thu, Apr 25, 2013 at 09:07:07PM -0400, Gavin Andresen wrote:\n> On Thu, Apr 25, 2013 at 3:12 PM, Jeremy Spilman <jeremy.spilman at gmail.com>wrote:\n> \n> > Right now I'm leaning towards writing a prototype using a single cert with\n> > a fingerprint of PubKey in the Subject Alternate Name, and getting PubKey\n> > and InvoiceID in the Payment Request.  Gavin, would the best way to work on\n> > this be to just fork your code on Github?\n> >\n> \n> As usual, our bottleneck is code review / testing, so it would be nice if\n> you spent some time reviewing code and helping test v0.9 so we can actually\n> ship a v1 sometime in the next several months before you start working on a\n> v2.\n\nHow does the current protocol protect the refund address? Protecting the\npayee against a compromised webserver may be out of scope for now, due\nto the lack of a suitable PKI, as Mike Hearn explained. But signing the\nrefund address is a more immediate issue. There is no obvious key that\nthe payer can use to sign the refund address. However, this can be\nsolved right now with marginal changes to the protocol, like this:\n\n- Payee creates his PaymentDetails message with an explicit pubkey in\n  output.script, not an address.\n- If payment_url is not specified then payer pays as before (he cannot\n  sign his refund address) \n- If payment_url is specified then payer hashes his Payment message\n  (with transactions zeroed out) and pays to h*pubkey, where h is the\n  computed hash; then submits his Payment message.\n- Upon receiving the Payment message, payee computes the same hash and\n  can pick his funds from h*pubkey. \n\nAs long as it is trivial to reconstruct the Payment message this is\ncompletely safe. But probably this isn't the case in general. So the\ndrawback is that the payer has to backup the Payment message before\nsubmitting it or before broadcasting the transaction, in order to keep a\nproof. If the payer trusted the payee then it would suffice to wait for\nan ACK before broadcasting. Because of the backup issue, refund address\nsigning should probably be an option that the payer can choose after\nreading a backup warning."
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-29T18:40:29",
                "message_text_only": "It's neat to use the payment address as an implicit signature by hashing\nsomething and multiplying it into the payee's pubKey.\n\n One downside is that it complicates the merchant's wallet. In this case\nthe payment is going to a pseudo-random address which the merchant will\nhave to explicitly add to their wallet, complicating backups, etc.\n\n The other challenge is how to handle an error when you POST to the\npayment_url. In the original spec, the payer would only broadcast the\ntransaction themselves if there wasn't a payment_url. In the current\nversion it looks like the payer will broadcast the transaction(s) either\nway. I only saw some of the discussions around this, but I think part of\nthe problem is what state do you put the payer's wallet into if you POST a\nPayment and don't get a PaymentAck? If the payer always broadcasts the\ntransaction, then wallet state becomes obvious. With your proposal you\nwould not want the payer to broadcast the transaction without a PaymentAck,\nsince you need the merchant to acknowledge they know where to look for the\npayment.\n\n Backing up a step, I'm not sure what the threat model is for signing the\nrefund address? The same process that's signing the transaction is doing an\nHTTPS POST with the refund address. If an attacker can defeat that, then\nthey can just redirect the payment in the first place. The only benefit I\ncan think of is the payer can prove what refund address they specified with\nthe payment.\n\n Wouldn't it be easier to just get the merchant to sign the PaymentAck?\nTechnically they already are signing it, but a TLS stream probably isn't\nthe most convenient way to capture that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130429/b4b88d68/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-30T09:17:05",
                "message_text_only": ">  Backing up a step, I'm not sure what the threat model is for signing the\n> refund address? The same process that's signing the transaction is doing an\n> HTTPS POST with the refund address.\n>\n\nIt's a real threat, albeit an exotic one. The threat model is a malware\ncompromised host, with a wallet (possibly a low power hardware wallet like\na Trezor) that can understand the payment protocol and sign transactions,\nbut maybe not do a whole lot more than that. For instance, probably it\ncannot do HTTPS connections itself. So a virus on the host could swap the\nrefund address for one that is owned by the attacker, and then try to make\nthe merchant issue an automatic refund, thus bouncing the funds back off\nthe merchant to the them.\n\nIf there are merchants that offer large, automatic refunds, it could be an\nissue. I'm not sure how common that might be in reality. Steven or Tony\nwould know. Timo's protocol is an interesting solution, but again, at this\npoint the feature set for v1 is pretty much locked down.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130430/50fb65ed/attachment.html>"
            },
            {
                "author": "Jouke Hofman",
                "date": "2013-04-30T11:32:54",
                "message_text_only": "We do automatic refunds. When bitcoins arrive after an offer has expired\n(which happens quite often with webwallets that don't broadcast\ntransactions immediately), we return all the bitcoins to a specified\nbitcoin-address. This happens a couple of times per day and can amount\nto a couple of hundred bitcoins per offer.\n\n\n\nOn 04/30/2013 11:17 AM, Mike Hearn wrote:\n\n> If there are merchants that offer large, automatic refunds, it could be\n> an issue. I'm not sure how common that might be in reality. Steven or\n> Tony would know. Timo's protocol is an interesting solution, but again,\n> at this point the feature set for v1 is pretty much locked down."
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-04-30T13:14:53",
                "message_text_only": "RE: Timo's proposal for protecting the refund address:\n\nSeems to me there are two risks:\n\n1) The risk that the merchant's web server will be compromised and the\nattacker will redirect refunds\n2) The risk that the merchant will miss payments because they miss a POST\nto the payment_url (maybe the customer's machine crashes during the HTTPS\nhandshake)\n\nIf payments are a lot more common than refunds, then (2) will outweigh (1).\n\nI also think an attacker who compromises the front-end web server would\nprobably just have it start generating plain-old pay-to-bitcoin-address\npayment requests, and hope that lots of customers pay them directly before\nthe attack is discovered.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130430/2fda78ff/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-04-30T17:17:23",
                "message_text_only": "> 1) The risk that the merchant's web server will be compromised and the\nattacker will redirect refunds\n> 2) The risk that the merchant will miss payments because they miss a POST\nto the payment_url (maybe the customer's machine crashes during the HTTPS\nhandshake)\n> If payments are a lot more common than refunds, then (2) will outweigh\n(1).\n\nI think that's oversimplifying.  (1) is theft, (2) is payment processing.\nReliable payment processing with refund handling is not simple nor free,\nbut it should be secure. The cost of (2) depends primarily on the failure\nrate, which we can only guess at this point, and secondarily on how much\nmanual intervention is required to recover.\n\n(2) is perhaps more of a problem if wallets broadcast before POST. It's\ntrading one failure mode (funds sent but not claimed) for another (coins\nmarked as spent but not). Either way, you fix it by just retrying the POST.\nBut only with Transmit-After-ACK can the payer's wallet detect the failure\nautomatically, and even recover automatically (simply unlock the outputs,\nor to be sure, spend them back to self).\n\nSince merchants get to choose whether to have a POST url, they get to\ndecide if the cost of keeping their server up is worth it. I think\neventually there are enough benefits to Transmit-After-ACK that it will\nbecome a supported use case.\n\nThanks Mike for explaining the threat.\n\n[Aside] I was reading Peter's fidelitybond writeup for his idea on contract\nvalue accounting, and he points to Stephan's post from last September on\npayer-encoded metadata (\nhttps://bitcointalk.org/index.php?topic=108423.msg1178438#msg1178438) which\nTimo applies here. As a relative newcomer, this is what I am loving most\nabout Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130430/59edcc49/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Cold Signing Payment Requests",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Timo Hanke",
                "Alan Reiner",
                "Jeremy Spilman",
                "Gavin Andresen",
                "Jouke Hofman"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 32105
        }
    },
    {
        "title": "[Bitcoin-development] Service bits for pruned nodes",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2013-04-28T15:51:55",
                "message_text_only": "Hello all,\n\nI think it is time to move forward with pruning nodes, i.e. nodes that\nfully validate and relay blocks and transactions, but which do not keep\n(all) historic blocks around, and thus cannot be queried for these.\n\nThe biggest roadblock is making sure new and old nodes that start up are\nable to find nodes to synchronize from. To help them find peers, I would\nlike to propose adding two extra service bits to the P2P protocol:\n* NODE_VALIDATE: relay and validate blocks and transactions, but is only\nguaranteed to answer getdata requests for (recently) relayed blocks and\ntransactions, and mempool transactions.\n* NODE_BLOCKS_2016: can be queried for the last 2016 blocks, but without\nguarantee for relaying/validating new blocks and transactions.\n* NODE_NETWORK (which existed before) will imply NODE_VALIDATE and\nguarantee availability of all historic blocks.\n\nThe idea is to separate the different responsibilities of network nodes\ninto separate bits, so they can - at some point - be\nimplemented independently. Perhaps we want more than just one degree (2016\nblocks), maybe also 144 or 210000, but those can be added later if\nnecessary. I monitored the frequency of block depths requested from my\npublic node, and got this frequency distribution:\nhttp://bitcoin.sipa.be/depth-small.png so it seems 2016 nicely matches the\nset of frequently-requested blocks (indicating that few nodes are offline\nfor more than 2 weeks consecutively.\n\nI'll write a BIP to formalize this, but wanted to get an idea of how much\nsupport there is for a change like this.\n\nCheers,\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130428/90120821/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-28T16:29:11",
                "message_text_only": "I'd imagined that nodes would be able to pick their own ranges to keep\nrather than have fixed chosen intervals. \"Everything or two weeks\" is\nrather restrictive - presumably node operators are constrained by physical\ndisk space, which means the quantity of blocks they would want to keep can\nvary with sizes of blocks, cost of storage, etc.\n\nAdding new fields to the addr message and relaying those fields to newer\nnodes means every node could advertise the height at which it pruned. I\nknow it means a longer time before the data is available everywhere vs\nservice bits, but it seems like most nodes won't be pruning right away\nanyway. There's plenty of time for upgrades. If an old node connected to a\nnew node and getdata-d blocks that had been pruned, immediate disconnection\nshould make the old node go find a different one. It means the combination\nof old node+not run for a long time might take a while before it can find a\nnode that has what it wants, but that doesn't seem like a big deal.\n\nWhat is the use case for NODE_VALIDATE? Nodes that throw away blocks almost\nimmediately? Why would a node do that?\n\n\nOn Sun, Apr 28, 2013 at 5:51 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> Hello all,\n>\n> I think it is time to move forward with pruning nodes, i.e. nodes that\n> fully validate and relay blocks and transactions, but which do not keep\n> (all) historic blocks around, and thus cannot be queried for these.\n>\n> The biggest roadblock is making sure new and old nodes that start up are\n> able to find nodes to synchronize from. To help them find peers, I would\n> like to propose adding two extra service bits to the P2P protocol:\n> * NODE_VALIDATE: relay and validate blocks and transactions, but is only\n> guaranteed to answer getdata requests for (recently) relayed blocks and\n> transactions, and mempool transactions.\n> * NODE_BLOCKS_2016: can be queried for the last 2016 blocks, but without\n> guarantee for relaying/validating new blocks and transactions.\n> * NODE_NETWORK (which existed before) will imply NODE_VALIDATE and\n> guarantee availability of all historic blocks.\n>\n> The idea is to separate the different responsibilities of network nodes\n> into separate bits, so they can - at some point - be\n> implemented independently. Perhaps we want more than just one degree (2016\n> blocks), maybe also 144 or 210000, but those can be added later if\n> necessary. I monitored the frequency of block depths requested from my\n> public node, and got this frequency distribution:\n> http://bitcoin.sipa.be/depth-small.png so it seems 2016 nicely matches\n> the set of frequently-requested blocks (indicating that few nodes are\n> offline for more than 2 weeks consecutively.\n>\n> I'll write a BIP to formalize this, but wanted to get an idea of how much\n> support there is for a change like this.\n>\n> Cheers,\n>\n> --\n> Pieter\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service\n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130428/327f3ea4/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-04-28T16:44:52",
                "message_text_only": "On Sun, Apr 28, 2013 at 6:29 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> I'd imagined that nodes would be able to pick their own ranges to keep\n> rather than have fixed chosen intervals. \"Everything or two weeks\" is\n> rather restrictive - presumably node operators are constrained by physical\n> disk space, which means the quantity of blocks they would want to keep can\n> vary with sizes of blocks, cost of storage, etc.\n>\n\nSure, that's why eventually several levels may be useful.\n\nAdding new fields to the addr message and relaying those fields to newer\n> nodes means every node could advertise the height at which it pruned. I\n> know it means a longer time before the data is available everywhere vs\n> service bits, but it seems like most nodes won't be pruning right away\n> anyway. There's plenty of time for upgrades.\n>\n\nThat's a more flexible model, indeed. I'm not sure how important speed of\npropagation will be though - it may be very slow, given that there are\n100000s of IPs circulating, and only a few are relayed in one go between\nnodes. Even then, I'd like to see the \"relay/validation\" responsibility\nsplit off from the \"serve historic data\" one, and have separate service\nbits for those.\n\n\n> If an old node connected to a new node and getdata-d blocks that had been\n> pruned, immediate disconnection should make the old node go find a\n> different one. It means the combination of old node+not run for a long time\n> might take a while before it can find a node that has what it wants, but\n> that doesn't seem like a big deal.\n>\n\nDisconnecting in case something is requested that isn't served seems like\nan acceptable behaviour, yes. A specific message indicating data is pruned\nmay be more flexible, but more complex to handle too.\n\nWhat is the use case for NODE_VALIDATE? Nodes that throw away blocks almost\n> immediately? Why would a node do that?\n>\n\nNODE_VALIDATE doesn't say anything about which blocks are available, it\njust means it relays and validates (and thus is not an SPV node). It can be\ncombined with NODE_BLOCKS_2016 if those blocks are also served.\n\nThe reason for splitting them is that I think over time these may be\nhandled by different implementations. You could have stupid\nstorage/bandwidth nodes that just keep the blockchain around, and others\nthat validate it. Even if that doesn't happen implementation-wise, I think\nthese are sufficiently independent functions to start thinking about them\nas such.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130428/2ce01fa0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-04-28T16:57:53",
                "message_text_only": "That's true. It can be perhaps be represented as \"I keep the last N blocks\"\nand then most likely for any given node the policy doesn't change all that\nfast, so if you know the best chain height you can calculate which nodes\nhave what.\n\n\n> Disconnecting in case something is requested that isn't served seems like\n> an acceptable behaviour, yes. A specific message indicating data is pruned\n> may be more flexible, but more complex to handle too.\n>\n\nWell, old nodes would ignore it and new nodes wouldn't need it?\n\n\n> The reason for splitting them is that I think over time these may be\n> handled by different implementations. You could have stupid\n> storage/bandwidth nodes that just keep the blockchain around, and others\n> that validate it. Even if that doesn't happen implementation-wise, I think\n> these are sufficiently independent functions to start thinking about them\n> as such.\n>\n\nMaybe so, with a \"last N blocks\" in addr messages though such nodes could\njust set their advertised history to zero and not have to deal with serving\nblocks to nodes.\n\nIf you have a node that serves the chain but doesn't validate it, how does\nit know what the best chain is? Just whatever the hardest is?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130428/3428cfa6/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-28T19:50:22",
                "message_text_only": "On Sun, Apr 28, 2013 at 9:29 AM, Mike Hearn <mike at plan99.net> wrote:\n> I'd imagined that nodes would be able to pick their own ranges to keep\n> rather than have fixed chosen intervals. \"Everything or two weeks\" is rather\n\nX most recent is special for two reasons:  It meshes well with actual demand,\nand the data is required for reorganization.\n\nSo whatever we do for historic data, N most recent should be treated\nspecially.\n\nBut I also agree that its important that <everything> be splittable into ranges\nbecause otherwise when having to choose between serving historic data\nand\u2014 say\u2014 40 GB storage, a great many are going to choose not to serve\nhistoric data... and so nodes may be willing to contribute 4-39 GB storage\nto the network there will be no good way for them to do so and we may end\nup with too few copies of the historic data available.\n\nAs can be seen in the graph, once you get past the most recent 4000\nblocks the probability is fairly uniform... so \"N most recent\" is not a\ngood way to divide load for the older blocks. But simple ranges\u2014 perhaps\nquantized to groups of 100 or 1000 blocks or something\u2014 would work fine.\n\nThis doesn't have to come in the first cut, however\u2014 and it needs new\naddr messages in any case."
            },
            {
                "author": "John Dillon",
                "date": "2013-04-29T02:57:53",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n> But I also agree that its important that <everything> be splittable into ranges\n> because otherwise when having to choose between serving historic data\n> and\u2014 say\u2014 40 GB storage, a great many are going to choose not to serve\n> historic data... and so nodes may be willing to contribute 4-39 GB storage\n> to the network there will be no good way for them to do so and we may end\n> up with too few copies of the historic data available.\n\nHave we considered just leaving that problem to a different protocol such as\nBitTorrent? Offering up a few GB of storage capacity is a nice idea but it\nmeans we would soon have to add structure to the network to allow nodes to find\neach other to actually get that data. BitTorrent already has that issue thought\nthrough carefully with it's DHT support.\n\nWhat are the logistics of either integrating a DHT capable BitTorrent client,\nor just calling out to some library? We could still use the Bitcoin network to\nbootstrap the BitTorrent DHT.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\niQEcBAEBCAAGBQJRfeF/AAoJEEWCsU4mNhiP228H+gIiBhOf65ydmVXoq7d6toNt\nFmWZaHUxAKtdADINqKHKjuCVGb+3RITwZIgQ0t2MO3OlG1FRFzZv841QBmdaW7JI\nB6uF2hBxw6oy3GolzIbSUBX+7VyoNvFGT9c548wfLWC71O7A9/Wf3dUssN6VdWXG\nzm2vTO8cnMOHNt0Iu4uRw5mvOOU6WV9f6k3BsnQEK8y8E3w1k8xZIrHMqCo99B5U\na0R2TOpIyK++8xz3Ls1johcFcfwkphESn8SIxMeyb/sgotxO23yqQNDqn8rDCD4S\nPxVY/yzpftinjR55bvvjRGDVkUY43ixU8t7lFOgI1vwmfRw4jBqk7WWYJK7jC6c=\n=0VmS\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-04-29T03:36:49",
                "message_text_only": "On Sun, Apr 28, 2013 at 7:57 PM, John Dillon\n<john.dillon892 at googlemail.com> wrote:\n> Have we considered just leaving that problem to a different protocol such as\n> BitTorrent? Offering up a few GB of storage capacity is a nice idea but it\n> means we would soon have to add structure to the network to allow nodes to find\n> each other to actually get that data. BitTorrent already has that issue thought\n> through carefully with it's DHT support.\n\nI think this is not a great idea on a couple levels\u2014\n\nLeast importantly, our own experience with tracker-less torrents on\nthe bootstrap files that they don't work very well in practice\u2014 and\nthats without someone trying to DOS attack it.\n\nMore importantly, I think it's very important that the process of\noffering up more storage not take any more steps. The software could\nhave user overridable defaults based on free disk space to make\ncontributing painless. This isn't possible if it takes extra software,\nrequires opening additional ports.. etc.  Also means that someone\nwould have to be constantly creating new torrents, there would be\nissues with people only seeding the old ones, etc.\n\nIt's also the case that bittorrent is blocked on many networks and is\nconfused with illicit copying. We would have the same problems with\nthat that we had with IRC being confused with botnets.\n\nWe already have to worry about nodes finding each other just for basic\noperation. The only addition this requires is being able to advertise\nwhat parts of the chain they have.\n\n> What are the logistics of either integrating a DHT capable BitTorrent client,\n> or just calling out to some library? We could still use the Bitcoin network to\n> bootstrap the BitTorrent DHT.\n\nUsing Bitcoin to bootstrap the Bittorrent DHT would probably make it\nmore reliable, but then again it might cause commercial services that\nare in the business of poisoning the bittorrent DHT to target the\nBitcoin network.\n\nIntegration also brings up the question of network exposed attack surface.\n\nSeems like it would be more work than just adding the ability to add\nranges to address messages. I think we already want to revise the\naddress message format in order to have signed flags and to support\nI2P peers."
            },
            {
                "author": "Robert Backhaus",
                "date": "2013-04-29T03:42:46",
                "message_text_only": "While I like the idea of a client using a DHT blockchain or UTXO list, I\ndon't think that the reference client is the place for it. But it would\nmake for a very interesting experimental project!\n\n\nOn 29 April 2013 13:36, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Apr 28, 2013 at 7:57 PM, John Dillon\n> <john.dillon892 at googlemail.com> wrote:\n> > Have we considered just leaving that problem to a different protocol\n> such as\n> > BitTorrent? Offering up a few GB of storage capacity is a nice idea but\n> it\n> > means we would soon have to add structure to the network to allow nodes\n> to find\n> > each other to actually get that data. BitTorrent already has that issue\n> thought\n> > through carefully with it's DHT support.\n>\n> I think this is not a great idea on a couple levels\u2014\n>\n> Least importantly, our own experience with tracker-less torrents on\n> the bootstrap files that they don't work very well in practice\u2014 and\n> thats without someone trying to DOS attack it.\n>\n> More importantly, I think it's very important that the process of\n> offering up more storage not take any more steps. The software could\n> have user overridable defaults based on free disk space to make\n> contributing painless. This isn't possible if it takes extra software,\n> requires opening additional ports.. etc.  Also means that someone\n> would have to be constantly creating new torrents, there would be\n> issues with people only seeding the old ones, etc.\n>\n> It's also the case that bittorrent is blocked on many networks and is\n> confused with illicit copying. We would have the same problems with\n> that that we had with IRC being confused with botnets.\n>\n> We already have to worry about nodes finding each other just for basic\n> operation. The only addition this requires is being able to advertise\n> what parts of the chain they have.\n>\n> > What are the logistics of either integrating a DHT capable BitTorrent\n> client,\n> > or just calling out to some library? We could still use the Bitcoin\n> network to\n> > bootstrap the BitTorrent DHT.\n>\n> Using Bitcoin to bootstrap the Bittorrent DHT would probably make it\n> more reliable, but then again it might cause commercial services that\n> are in the business of poisoning the bittorrent DHT to target the\n> Bitcoin network.\n>\n> Integration also brings up the question of network exposed attack surface.\n>\n> Seems like it would be more work than just adding the ability to add\n> ranges to address messages. I think we already want to revise the\n> address message format in order to have signed flags and to support\n> I2P peers.\n>\n>\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service\n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130429/ba5e840f/attachment.html>"
            },
            {
                "author": "John Dillon",
                "date": "2013-04-29T03:48:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Mon, Apr 29, 2013 at 3:36 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Sun, Apr 28, 2013 at 7:57 PM, John Dillon\n> <john.dillon892 at googlemail.com> wrote:\n>> Have we considered just leaving that problem to a different protocol such as\n>> BitTorrent? Offering up a few GB of storage capacity is a nice idea but it\n>> means we would soon have to add structure to the network to allow nodes to find\n>> each other to actually get that data. BitTorrent already has that issue thought\n>> through carefully with it's DHT support.\n>\n> I think this is not a great idea on a couple levels\u2014\n>\n> Least importantly, our own experience with tracker-less torrents on\n> the bootstrap files that they don't work very well in practice\u2014 and\n> thats without someone trying to DOS attack it.\n\nUnfortunate. What makes them not work out? DHT torrents seem pretty popular.\n\n> More importantly, I think it's very important that the process of\n> offering up more storage not take any more steps. The software could\n> have user overridable defaults based on free disk space to make\n> contributing painless. This isn't possible if it takes extra software,\n> requires opening additional ports.. etc.  Also means that someone\n> would have to be constantly creating new torrents, there would be\n> issues with people only seeding the old ones, etc.\n\nNow don't get me wrong, I'm not proposing we do this if it requires additional\nsteps or other software. I only mean if it is possible in an easy way to\nintegrate the BitTorrent technology into Bitcoin in an automatic fashion. Yes\npart of that may have to be finding a way to re-use the existing port for\ninstance.\n\n> We already have to worry about nodes finding each other just for basic\n> operation. The only addition this requires is being able to advertise\n> what parts of the chain they have.\n\nSure I guess my concern is more how do you find the specific part of the chian\nyou need without some structure to the network? Although I guess it may be\nenough to just add that structure or depend on just walking the nodes\nadvertising themselves until you find what you want.\n\nWe can build this stuff incrementally I'll agree. It won't be the case that one\nin a thousand nodes serve up the part of the chain you need overnight. So many\nI am over engineering the solution with BitTorrent.\n\n> Using Bitcoin to bootstrap the Bittorrent DHT would probably make it\n> more reliable, but then again it might cause commercial services that\n> are in the business of poisoning the bittorrent DHT to target the\n> Bitcoin network.\n\nGood point. Sadly one that may apply to the Tor network too in the future.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\niQEcBAEBCAAGBQJRfe1LAAoJEEWCsU4mNhiPuDgIAM1zz+ohlHgz37RgToQhInRc\n1tv4Fnb6uGWyb4+U6UpK24LlXMFvOJsLm2czgbBc1Iz4z4wvb1m5IGw0ubJuV4mT\nGPUJhM4sNqfeKZlSWRw4Gia6Vk1jTkue+uVYvZn2vBS4SS6vYhYCC3zXIITyb2mp\n7CVjcM84bTHKxIaMW1rIgmVJmfslsFdeNOp/cDVvkNl9+WvzWPeJ32BkT522p+pT\nAcPVFMsEJirYrXYi8HwdtGSeiG+mv0IemTAObJNPRrpw3x04ja6qecqzM51AkQ4t\nhPems5ShXM9FyDKFQNmtoC6ULpbd3CBBjsiQj0pp55epy6UC0eiUIXP8L9v0giM=\n=AOj8\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-29T03:55:23",
                "message_text_only": "On Mon, Apr 29, 2013 at 03:48:18AM +0000, John Dillon wrote:\n> We can build this stuff incrementally I'll agree. It won't be the case that one\n> in a thousand nodes serve up the part of the chain you need overnight. So many\n> I am over engineering the solution with BitTorrent.\n\nI think that pretty much sums it up.\n\nWith the block-range served in the anounce message you just need to find\nan annoucement with the right range, and at worst connect to a few more\nnode to get what you need. It will be a long time before the bandwidth\nused for finding a node with the part of the chain that you need is a\nsignificant fraction of the load required for downloading the data\nitself.\n\nRemember that BitTorrent's DHT is a system giving you access to tens of\npetabytes worth of data. The Bitcoin blockchain on the other hand simply\ncan't grow more than 57GiB per year. It's a cute idea though.\n\n\nAlso, while we're talking about the initial download:\n\nhttp://blockchainbymail.com\n\nLots of options out there.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130428/c057e6e9/attachment.sig>"
            },
            {
                "author": "Jay F",
                "date": "2013-04-29T06:10:54",
                "message_text_only": "On 4/28/2013 8:55 PM, Peter Todd wrote:\n> On Mon, Apr 29, 2013 at 03:48:18AM +0000, John Dillon wrote:\n>> We can build this stuff incrementally I'll agree. It won't be the case that one\n>> in a thousand nodes serve up the part of the chain you need overnight. So many\n>> I am over engineering the solution with BitTorrent.\n>\n> I think that pretty much sums it up.\n>\n> With the block-range served in the anounce message you just need to find\n> an annoucement with the right range, and at worst connect to a few more\n> node to get what you need.\n\nOne of the technologies that can be borrowed from Bittorrent (besides \ndownloading from multiple peers at once) is analysis by clients of the \npart distribution, which allows a client to download and share the \nleast-propagated parts first to maintain high availability of the whole \nfile, even when not one individual currently has downloaded the complete \nfile (the seed has left the swarm).\n\nUnlike Bittorrent, a partial-blockchain swarm client needs to make \ninformed decisions about how much to download, such as rules like \"until \nit sees at least 20 complete blockchain-equivalents in the swarm\", \n\"until it has 10% of the blockchain itself\", \"work backwards, all blocks \nfrom the hash tree required to verify my payments\" or other minimums \nthat might all be criteria.\n\nBittorrent only considers directly connected peers' piecemaps when \nmaking decisions of what to download. Bitcoin, however, already has a \nprotocol to allow peer discovery beyond the connected nodes; this could \nbe extended to communicate what parts the peer is hosting. Careful \nthought into attack vectors would need to be paid in design, so that \nonly a majority of outbound-connected peers's advertisement are able to \ninform consensus about part or peer availability, messages able to \nremove a peer or part availability from other's lists are confirmed \nindependently without such removal verification generating DDOS traffic \namplification, lying clients can be marked as discovered by the \nmajority, etc.\n\nSuch thought doesn't have to be paid if directly implementing \nBittorrent, but it has the burden of centralized trackers or expensive \nDHT, and it also doesn't have any logic informing it besides \"don't quit \nuntil I get the whole file\"."
            },
            {
                "author": "Brenton Camac",
                "date": "2013-04-30T20:06:12",
                "message_text_only": "Sounds like this part of Bitcoin (block sharing) would definitely benefit from having a REST (HTTP) API.\n\nREST-based web APIs are a common feature of most online services these days.  Makes writing other client services so much easier.  Plus you get the benefit of the HTTP ecosystem for free (HTTP caches, etc).\n\n\n- Brenton Camac \n\n\nOn Apr 30, 2013, at 1:04 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On Tue, Apr 30, 2013 at 12:14 PM, Rebroad (sourceforge)\n> <rebroad+sourceforge.net at gmail.com> wrote:\n>> As part of a roadmap for block downloading, I think this may be a good time\n>> to look into providing an HTTP/HTTPS protocol for block downloading - this\n>> would also allow web proxies to cache blocks and thus make it more\n>> accessible, as well as cater for resumeable downloads.\n> \n> Speaking generally, I've always been a supporter of finding new and\n> creative ways to store and transmit blocks.  The more diversity, the\n> less likely bitcoin can be shut down worldwide.\n> \n> HTTP is fine, but you run into many issues with large files.  You\n> would need a very well defined HTTP-retrievable layout, with proper\n> HTTP headers along the entire path, if you want web caches to function\n> properly.  You need HTTP byte range support, HTTP 1.1 keep-alives, and\n> other features for resuming large, interrupted downloads.\n> \n> The format currently used by bitcoind would be just fine --\n> blocks/blkNNNN.dat for raw data, size-limited well below 1GB.  Just\n> need to add a small metadata download, and serve the raw block files.\n> \n> -- \n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n> \n> ------------------------------------------------------------------------------\n> Introducing AppDynamics Lite, a free troubleshooting tool for Java/.NET\n> Get 100% visibility into your production application - at no cost.\n> Code-level diagnostics for performance bottlenecks with <2% overhead\n> Download for free and get started troubleshooting in minutes.\n> http://p.sf.net/sfu/appdyn_d2d_ap1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Service bits for pruned nodes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robert Backhaus",
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Jay F",
                "Pieter Wuille",
                "Brenton Camac"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 26786
        }
    },
    {
        "title": "[Bitcoin-development] Downloading blockchain",
        "thread_messages": [
            {
                "author": "Jesus Cea",
                "date": "2013-04-29T04:38:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI would like to download the entire blockchain by hand (kind of), but\nI can't find software for it. The closest thing I found is\n\"Bitcoin-protocol-test-harness\" code, but it is two years old and\nseems not to work with current bitcoin network.\n\nPython apreciated.\n\nThanks for your help.\n\n- -- \nJes\u00fas Cea Avi\u00f3n                         _/_/      _/_/_/        _/_/_/\njcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/\nTwitter: @jcea                        _/_/    _/_/          _/_/_/_/_/\njabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/\n\"Things are not so easy\"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/\n\"My name is Dump, Core Dump\"   _/_/_/        _/_/_/      _/_/  _/_/\n\"El amor es poner tu felicidad en la felicidad de otro\" - Leibniz\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQCVAwUBUX35M5lgi5GaxT1NAQJGwQP+PtSg/cbqE87u/4axyUsOBDc/MsRB7DYx\nDfeEHqOqh8uAQ/uZMzxWrCPbp53TJK888AByH3NknkiGy0HNoshHOSmy5JACFt54\nfsyWDadiWBR9bu6JV4R1imR0FMzbjGuRZkc26MAsleVbho5KZBdHR1/cPQ0D174h\nwu4k1yzywYg=\n=Nprg\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Downloading blockchain",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jesus Cea"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1205
        }
    },
    {
        "title": "[Bitcoin-development] Hardware BitCoin wallet as part of Google Summer of Code",
        "thread_messages": [
            {
                "author": "Crypto Stick",
                "date": "2013-04-29T14:30:47",
                "message_text_only": "Crypto Stick is an open source USB key for encryption and secure\nauthentication.\nWe have been accepted as a mentor organization for Google\nSummer of Code (GSOC) 2013. One of our project ideas is to develop a\nphysical BitCoin wallet according to\nhttps://en.bitcoin.it/wiki/Smart_card_wallet\n\nIf you are a student interested in working on that idea - this is for you.\nYou can apply for a project with us and if accepted our mentors will\nwork with you over\nthe summer and Google will sponsor you USD 5000 during that time.\nPlease check out our ideas page at\nhttps://www.assembla.com/spaces/cryptostick/wiki/Ideas or suggest your\nown idea. And, join our mailinglist to discuss it:\nhttps://lists.crypto-stick.org/mailman/listinfo/dev\nYour applications should be submitted through Google Melange\n(https://google-melange.com) until 3rd May!\n\nYou can continue to submit additional information and comments into\nthe system after your initial application submission.\n\nIn order to participate in the program, you must be a student in an\naccredited institution or university.\n\nLinks:\n* Crypto Stick project: http://crypto-stick.org\n* Ideas Page: https://www.assembla.com/spaces/cryptostick/wiki/Ideas\n* GSOC Progam F&Q:\nhttps://google-melange.appspot.com/gsoc/document/show/gsoc_program/google/gsoc2013/help_page\n* Crypto Stick Mailing List:\nhttps://lists.crypto-stick.org/mailman/listinfo/dev\n\nRegards,\nJan"
            },
            {
                "author": "Peter Todd",
                "date": "2013-04-29T16:28:39",
                "message_text_only": "On Mon, Apr 29, 2013 at 10:30:47PM +0800, Crypto Stick wrote:\n> Crypto Stick is an open source USB key for encryption and secure\n> authentication.\n> We have been accepted as a mentor organization for Google\n> Summer of Code (GSOC) 2013. One of our project ideas is to develop a\n> physical BitCoin wallet according to\n> https://en.bitcoin.it/wiki/Smart_card_wallet\n\nA word of caution: hardware Bitcoin wallets really do need some type of\ndisplay so the wallet itself can tell you where the coins it is signing\nare being sent, and that in turn implies support for the upcoming\npayment protocol so the wallet can also verify that the address is\nactually the address of the recipient the user is intending to send\nfunds too. The current Crypto Stick hardware doesn't even have a button\nfor user interaction. (press n times to approve an n-BTC spend)\n\nHaving said that PGP smart cards and USB keys already have that problem,\nbut the consequences of signing the wrong document are usually less than\nthe consequences of sending some or even all of the users funds to a\nthief. You can usually revoke a bad signature after the fact with a\nfollow-up message.\n\nNot to say hardware security for private keys isn't a bad thing, but the\nprotections are a lot more limited than users typically realize.\n\n\nI will say though I am excited that this implies that the Crypto Stick\ncould have ECC key support in the future.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130429/f4e5ddf7/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-04-29T16:50:59",
                "message_text_only": "Are you familiar with this:\n\nhttp://code.google.com/p/opencryptotoken/\n\nIt does ecc and as it is based on an atmel micro controller, adding a display is pretty straight forward  \n\nMichael \n\nOn 29/04/2013, at 18.28, Peter Todd <pete at petertodd.org> wrote:\n\n> On Mon, Apr 29, 2013 at 10:30:47PM +0800, Crypto Stick wrote:\n>> Crypto Stick is an open source USB key for encryption and secure\n>> authentication.\n>> We have been accepted as a mentor organization for Google\n>> Summer of Code (GSOC) 2013. One of our project ideas is to develop a\n>> physical BitCoin wallet according to\n>> https://en.bitcoin.it/wiki/Smart_card_wallet\n> \n> A word of caution: hardware Bitcoin wallets really do need some type of\n> display so the wallet itself can tell you where the coins it is signing\n> are being sent, and that in turn implies support for the upcoming\n> payment protocol so the wallet can also verify that the address is\n> actually the address of the recipient the user is intending to send\n> funds too. The current Crypto Stick hardware doesn't even have a button\n> for user interaction. (press n times to approve an n-BTC spend)\n> \n> Having said that PGP smart cards and USB keys already have that problem,\n> but the consequences of signing the wrong document are usually less than\n> the consequences of sending some or even all of the users funds to a\n> thief. You can usually revoke a bad signature after the fact with a\n> follow-up message.\n> \n> Not to say hardware security for private keys isn't a bad thing, but the\n> protections are a lot more limited than users typically realize.\n> \n> \n> I will say though I am excited that this implies that the Crypto Stick\n> could have ECC key support in the future.\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> ------------------------------------------------------------------------------\n> Try New Relic Now & We'll Send You this Cool Shirt\n> New Relic is the only SaaS-based application performance monitoring service \n> that delivers powerful full stack analytics. Optimize and monitor your\n> browser, app, & servers with just a few lines of code. Try New Relic\n> and get this awesome Nerd Life shirt! http://p.sf.net/sfu/newrelic_d2d_apr\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130429/521ff934/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Hardware BitCoin wallet as part of Google Summer of Code",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Crypto Stick",
                "Michael Gronager",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5670
        }
    },
    {
        "title": "[Bitcoin-development] Fwd:  Service bits for pruned nodes",
        "thread_messages": [
            {
                "author": "Rebroad (sourceforge)",
                "date": "2013-04-30T16:14:56",
                "message_text_only": "As part of a roadmap for block downloading, I think this may be a good time\nto look into providing an HTTP/HTTPS protocol for block downloading - this\nwould also allow web proxies to cache blocks and thus make it more\naccessible, as well as cater for resumeable downloads.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130430/2306d969/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Service bits for pruned nodes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rebroad (sourceforge)"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 455
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: Service bits for pruned nodes",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-04-30T18:04:59",
                "message_text_only": "On Tue, Apr 30, 2013 at 12:14 PM, Rebroad (sourceforge)\n<rebroad+sourceforge.net at gmail.com> wrote:\n> As part of a roadmap for block downloading, I think this may be a good time\n> to look into providing an HTTP/HTTPS protocol for block downloading - this\n> would also allow web proxies to cache blocks and thus make it more\n> accessible, as well as cater for resumeable downloads.\n\nSpeaking generally, I've always been a supporter of finding new and\ncreative ways to store and transmit blocks.  The more diversity, the\nless likely bitcoin can be shut down worldwide.\n\nHTTP is fine, but you run into many issues with large files.  You\nwould need a very well defined HTTP-retrievable layout, with proper\nHTTP headers along the entire path, if you want web caches to function\nproperly.  You need HTTP byte range support, HTTP 1.1 keep-alives, and\nother features for resuming large, interrupted downloads.\n\nThe format currently used by bitcoind would be just fine --\nblocks/blkNNNN.dat for raw data, size-limited well below 1GB.  Just\nneed to add a small metadata download, and serve the raw block files.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-04-30T19:27:10",
                "message_text_only": "On Tuesday 30 April 2013 19:04:59 Jeff Garzik wrote:\n\n> The format currently used by bitcoind would be just fine --\n> blocks/blkNNNN.dat for raw data, size-limited well below 1GB.  Just\n> need to add a small metadata download, and serve the raw block files.\n\nThat doesn't seem very generic.  It's tied far too much to the current storage \nformat of bitcoind.\n\nWouldn't it be better to add support for more bitcoin-protocol-oriented HTTP \nrequests?  Then any client can supply the same interface, rather than being \nforced to create blkNNNN.dat on the fly?\n\n http://bitcoind.example.com/block/BBBBBBBBBBBBBBBBBBBBBBB\n http://bitcoind.example.com/tx/TTTTTTTTTTTTTTTTTTTTTTTT\n http://bitcoind.example.com/block/oftx/TTTTTTTTTTTTTTTTTTT\n http://bitcoind.example.com/peers\n http://bitcoind.example.com/peer/nnn\n\nEssentially: block explorer's raw mode but in every bitcoind.  The hardest \noperation for light clients is finding out the block that contains a \nparticular transaction -- something that bitcoind already knows.\n\nI'd like to see support for HTTP POST/PUT of signed transactions and block \nannouncements too.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Simon Barber",
                "date": "2013-04-30T19:31:38",
                "message_text_only": "And then the problem of what domain name to use - ideally a single name \nwould be used so caches had the maximum chance to reuse content. To \nkeep the network distributed perhaps the existing DNS seed mechanism \ncould be used - a few names, each serving a random bitcoind's address. \nPut :8333 after the name, and enhance bitcoind to respond to HTTP and \np2p caching would be used!\n\nSimon\n\n\nOn Tue 30 Apr 2013 12:27:10 PM PDT, Andy Parkins wrote:\n> On Tuesday 30 April 2013 19:04:59 Jeff Garzik wrote:\n>\n>> The format currently used by bitcoind would be just fine --\n>> blocks/blkNNNN.dat for raw data, size-limited well below 1GB.  Just\n>> need to add a small metadata download, and serve the raw block files.\n>\n> That doesn't seem very generic.  It's tied far too much to the current storage\n> format of bitcoind.\n>\n> Wouldn't it be better to add support for more bitcoin-protocol-oriented HTTP\n> requests?  Then any client can supply the same interface, rather than being\n> forced to create blkNNNN.dat on the fly?\n>\n>   http://bitcoind.example.com/block/BBBBBBBBBBBBBBBBBBBBBBB\n>   http://bitcoind.example.com/tx/TTTTTTTTTTTTTTTTTTTTTTTT\n>   http://bitcoind.example.com/block/oftx/TTTTTTTTTTTTTTTTTTT\n>   http://bitcoind.example.com/peers\n>   http://bitcoind.example.com/peer/nnn\n>\n> Essentially: block explorer's raw mode but in every bitcoind.  The hardest\n> operation for light clients is finding out the block that contains a\n> particular transaction -- something that bitcoind already knows.\n>\n> I'd like to see support for HTTP POST/PUT of signed transactions and block\n> announcements too.\n>\n>\n>\n> Andy\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-04-30T20:11:47",
                "message_text_only": "On Tue, Apr 30, 2013 at 3:27 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On Tuesday 30 April 2013 19:04:59 Jeff Garzik wrote:\n>\n>> The format currently used by bitcoind would be just fine --\n>> blocks/blkNNNN.dat for raw data, size-limited well below 1GB.  Just\n>> need to add a small metadata download, and serve the raw block files.\n>\n> That doesn't seem very generic.  It's tied far too much to the current storage\n> format of bitcoind.\n\nHardly.  The storage format is bitcoin protocol wire format, plus a\ntiny header.  It is supported in multiple applications already, and is\nthe most efficient storage format for bitcoin protocol blocks.\n\n\n> Wouldn't it be better to add support for more bitcoin-protocol-oriented HTTP\n> requests?  Then any client can supply the same interface, rather than being\n> forced to create blkNNNN.dat on the fly?\n\nYou don't have to create anything on the fly, if you store blocks in\ntheir native P2P wire protocol format.\n\n>  http://bitcoind.example.com/block/BBBBBBBBBBBBBBBBBBBBBBB\n>  http://bitcoind.example.com/tx/TTTTTTTTTTTTTTTTTTTTTTTT\n>  http://bitcoind.example.com/block/oftx/TTTTTTTTTTTTTTTTTTT\n>  http://bitcoind.example.com/peers\n>  http://bitcoind.example.com/peer/nnn\n>\n> Essentially: block explorer's raw mode but in every bitcoind.  The hardest\n> operation for light clients is finding out the block that contains a\n> particular transaction -- something that bitcoind already knows.\n\nThis is a whole new client interface.  It's fun to dream this up, but\nit is far outside the scope of an efficient HTTP protocol that\ndownloads blocks.\n\nYour proposal is closer to a full P2P rewrite over HTTP (or a proxy thereof).\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Service bits for pruned nodes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Andy Parkins",
                "Simon Barber"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5662
        }
    }
]