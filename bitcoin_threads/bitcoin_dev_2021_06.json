[
    {
        "title": "[bitcoin-dev] Opinion on proof of stake in future",
        "thread_messages": [
            {
                "author": "befreeandopen",
                "date": "2021-06-01T08:21:23",
                "message_text_only": "Erik, thanks for the link. So referring to https://en.bitcoin.it/wiki/Proof_of_burn, I do not really understand how this is supposed to be that much better over many proof of stake proposals. If there is more research on PoB, please note I'm not commenting on that as I only read this wiki article and my comments are purely related to this only.\n\nI hope we can agree that the idea with manual insertion of entropy every week can be discarded, but at the same time I don't think it is a crucial point of the whole idea. So we can just focus on the rest of it.\n\nThen the whole idea seems just like certain proof of stake implementations with just small differences, which I try to summarize:\n\n- in PoB, in order to use the coin for block production, you burn it in the past and wait some time -- in the certain PoS I'm talking about, in order to use the coin, you do not move the coin for some time - so in both there is the same idea - you somehow make the coin eligible for the block creation process by first doing some action followed by some inaction for some time; the difference here is that if later you use such coin in PoS, then after waiting more time, you can use the coin again (for whatever purpose), while in PoB the coin is gone forever (it is burned); this does not seem to be fundamentally different\n\n- in PoB, the author suggests there is an exponential decay of the power of the coin to create a block; in some PoS schemas, there historically was an era of so called CoinAge mechanism, which was somewhat inverse to this exponential decay, it was that the coin gets more power the older it is untouched, some implementations were for linear increase in the power, some exponential. Usually there was a certain limit - i.e. a maximum power the coin may have reached. It turned out quite quickly that such property is making attacks easier. PoB reverses the idea, but I don't think that helps that much. In any case, there seems to be an optimal period of time for each used coin, in both PoS and PoB, where the coin is most suitable for block production. I admit PoB version is better, but the crucial property here is that some coins are more powerful than other.\n\n- in both PoB and PoS it seems there is linear increase of the ability of the coin to produce blocks with the size of the coin (more BTC you burn/stake, the better your chance)\n\nThis characteristic of PoB does not suggest that it would have that much different properties than PoS. So it should suffer from same problems as PoS. Namely, the problems I see now, with the given proposal from wiki, are:\n\n- there seems to be lack of definition of the heaviest chain and difficulty adjustment - this seems crucial, but likely solvable, I'm just saying it is importantly missing in the description\n\n- there seems to be a problem with nothing at stake (nothing at burn maybe?) - How that can be? Again, it seems that every burned coin can be used for free checks at any time after the initial waiting period. These free checks are indeed free and are the core of the nothing at stake problem in PoS. You seem to make those checks for free and you seem to be able to use those burned coins to create arbitrary number of forks build on any parent blocks of your choice, not just the last block of the heaviest chain. I can't see at the moment how is this different from PoS nothing at stake problem. Maybe you can explain?\n\n- it seems to me that there is a trivial attack against the scheme by a wealthy attacker. Suppose a common size of the burn is 1 BTC per block, suppose you define the heaviest chain rule somehow in relation to total number of burned coins or the cumulative \"strength\" of the \"lowest\" hashes, then you can just burn 20 UTXOs, each being 10 BTC in value, so you spent 200 BTC on this attack, but you are in very strong position because after you wait the needed time, you should be able to do pretty nasty reorg. Suppose that the main chain is A-B-C-D-E-F, so what you do at that point is that you just \"try for free\" all your 20 UTXOs, whether or not they can build on top of block A (which has 5 confs on top, F is the tip of the main chain). Since you have big UTXOs, your chances should be good, of course you can always try many times because you have a \"lottery ticket\" for every timestampt t. So with this you should be able, with good chance, to find such B' and then you have 19 UTXOs remaining to try to build on B' in the same way. I can't see what prevents this attack in the described scheme.\n\n- the ability to retroactively try all different kids of timestamp t seems devastating - you again get super easy and somewhat cheap attack (due to nothing at burn problem) that allows you to rewrite even long chains at will.\n\n\nCould you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n\n\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Friday, May 28, 2021 9:06 PM, Erik Aronesty <erik at q32.com> wrote:\n\n> best writeup i know of is here:\n>\n> https://en.bitcoin.it/wiki/Proof_of_burn\n>\n> no formal proposals or proofs that i know of.\n>\n> On Fri, May 28, 2021 at 10:40 AM befreeandopen\n> befreeandopen at protonmail.com wrote:\n>\n> > Erik, I am sorry, I have little knowledge about proof-of-burn, I never found it interesting up until now. Some of your recent claims seem quite strong to me and I'd like to read more.\n> > Forgive me if this has been mentioned recently, but is there a full specification of the concept you are referring to? I don't mean just the basic idea description (that much is clear to me), I mean a fully detailed proposal or technical documentation that would give me a precise information about what exactly it is that you are talking about.\n> > Sent with ProtonMail Secure Email.\n> > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > On Wednesday, May 26, 2021 11:07 PM, Erik Aronesty erik at q32.com wrote:\n> >\n> > > note: the \"nothing at stake\" problem you propose is not broken for\n> > > proof-of-burn, because the attacker\n> > > a) has no idea which past transactions are burns\n> > > b) has no way to use his mining power, even 5%, to maliciously improve\n> > > his odds of being selected\n> > > On Wed, May 26, 2021 at 9:12 AM befreeandopen\n> > > befreeandopen at protonmail.com wrote:\n> > >\n> > > > @befreeandopen I guess I misunderstood your selfish minting attack. Let me make sure I understand it. You're saying it would go as follows?:\n> > > >\n> > > > 1.  The malicious actor comes across an opportunity to mint the next 3 blocks. But they hold off and don't release their blocks just yet.\n> > > > 2.  They receive a new block minted by someone else.\n> > > > 3.  The malicious actor then chooses to release their other 2 blocks on on the second from the top block if it gives them more blocks in the future than minting on the top block. And instead lets the top block proceed if it gives them more blocks in the future (also figuring in the 3 blocks they're missing out on minting).\n> > > > 4.  Profit!\n> > > >\n> > > > The problem with this attack is that any self respecting PoS system wouldn't have the information available for minters to know how blocks will affect their future prospects of minting. Otherwise this would introduce the problem of stake grinding. This can be done using collaborative randomness (where numbers from many parties are combined to create a random number that no individual party could predict). In fact, that's what the Casper protocol does to decide quorums. In a non quorum case, you can do something like record a hash of a number in the block header, and then have a second step to release that number later. Rewards can be given can be used to ensure minters act honestly here by minting messages that release these numbers and not releasing their secret numbers too early.\n> > > > Yes, you misunderstood it. First, let me say that the above thoughts of yours are incorrect, at least for non-quorum case. Since the transition in the blockchain system from S1 to S2 is only by adding new block, and since stakers always need to be able to decide whether or not they can add the next block, it follows that if a staker creates a new block locally, she can decide whether the new state allows her to add another block on top. As you mentioned, this COULD introduce problem of staking, that you are incorrect in that it is a necessity. Usual prevention of the grinding problem in this case is that an \"old enough\" source of randomness applies for the current block production process. Of course this, as it is typical for PoS, introduces other problems, but let's discard those.\n> > > > I will try to explain in detail what you misunderstood before. You start with a chain ending with blocks A-B-C, C being the top, the common feature of PoS system (non-quorum), roughly speaking, is that if N is the total amount of coins that participate in the staking process to create a new block on top of C (let's call that D), then a participant having K*N amount of stake has chance K to be the one who will create the next stake. In other words, the power of stakers is supposed to be linear in the system - you own 10 coins gives you 10x the chance of finding block over someone who has 1 coin.\n> > > > What i was claiming is that using the technique I have described, this linearity is violated. Why? Well, it works for honest stakers among the competition of honest stakers - they really do have the chance of K to find the next block. However, the attacker, using nothing at stake, checks her ability to build block D (at some timestamp). If she is successful, she does not propagate D immediately, but instead she also checks whether she can build on top of B and on top of A. Since with every new timestamp, usually, there is a new chance to build the block, it is not uncommon that she finds she is indeed able to build such block C' on top of B. Here it is likely t(C') > t(C) as the attacker has relatively low stake. Note that in order to produce such C', she not only could have tried the current timestamp t(D), but also all previous timestamps up to t(B) (usually that's the consensus rule, but it may depend on a specific consensus). So her chance to produce such C' is greater than her previous chance of producing C (which chance was limited by other stakers in the system and the discovery of block C by one of them). Now suppose that she found such C' and now she continues by trying to prolong this chain by finding D'. And again here, it is quite likely that her chance to find such D' is greater than was her chance of finding D because again there are likely multiple timestamps she could try. This all was possible just because nothing at stake allows you to just try if you can produce a block in certain state of block chain or not. Now if she actually was able to find D', she discards D and only publishes chain A-B-C'-D', which can not be punished despite the fact that she indeed produced two different forks. She can not be punished because this production was local and only the final result of A-B-C'-D' was published, in which case she gained an extra block over the honest strategy which would only give her block D.\n> > > > Fun fact tho: there is an attack called the \"selfish mining attack\" for proof of work, and it reduces the security of PoW by at least 1/3rd.\n> > > > How is that relevant to our discussion? This is known research that has nothing to do with PoS except that it is often worse on PoS.\n> > > >\n> > > > > the problem is not as hard as you think\n> > > >\n> > > > I don't claim to know just how hard finding the IP address associated with a bitcoin address is. However, the DOS risk can be solved more completely by only allowing the owner of coins themselves to know whether they can mint a block. Eg by determining whether someone can mint a block based on their public key hidden behind hashes (as normal in addresses). Only when someone does in fact mint a block do they reveal their hidden public key in order to prove they are allowed to mint the block.\n> > > > This is true, but you are mixing quorum and non-quorum systems. My objection here was towards such system where I specifically said that the list of producers for next epoch is known up front and you confirmed that this is what you meant with \"quorum\" system. So in such system, I claimed, the known producer is the only target at any given point of time. This of course does not apply to any other type of system where future producers are not known. No need to dispute, again, something that was not claimed.\n> > > >\n> > > > > I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message)\n> > > >\n> > > > I'm glad we agree there. Perhaps I misunderstood what you meant by \"you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere.\"\n> > > > Perhaps you should quote the full sentence and not just a part of it:\n> > > > \"Of course you can always change the rules in a way that a certain specific attack is not doable, but you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere, or you have not solved it completely.\"\n> > > > You can parse this as: (CREATE PROBLEM ELSEWHERE) OR (NOT SOLVE IT COMPLETELY)\n> > > > In case of the punishment it was meant to be the not solve it completely part.\n> > > > Also \"typically\" does not imply always.\n> > > > But this parsing of English sentences for you seems very off topic here. My point is, in context of Bitcoin, reject such unsupported claims that PoS is a reasonable alternative to PoW, let's stick to that.\n> > > >\n> > > > > As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake\n> > > >\n> > > > Well, if you're in the closed system of the cryptocurrency, sure. But we don't live in that closed system. Minters will earn some ROI from minting just like any other financial activity. Others may find more success spending their time doing things other than figuring out how to mint coins. In that case, they'll be able to earn more coin that they could later decide to use to mint blocks if they decide to.\n> > > > This only supports the point I was making. Since the optimal scenario with all existing coins participating is just theoretical, the attacker's position will ever so improve. It seems we are in agreement here, great.\n> > > >\n> > > > > Just because of the above we must reject PoS as being critically insecure\n> > > >\n> > > > I think the only thing we can conclude from this is that you have come up with an insecure proof of stake protocol. I don't see how anything you've brought up amounts to substantial evidence that all possible PoS protocols are insecure.\n> > > > I have not come up with anything. I'm afraid you've not realized the burden of proof is on your side if you vouch for a design that is not believed and trusted to be secure. It is up to you to show that you know how to solve every problem that people throw at you. So far we have just demonstrated that your claim that nothing at stake is solved was unjustified. You have not described a system that would solve it (and not introduce critical DDOS attack vector as it is in quorum based systems - per the prior definition of such systems).\n> > > > Of course the list of problems of PoS systems do not end with just nothing at stake, but it is good enough example that by itself prevents its adoption in decentralized consensus. No need to go to other hard problems without solving nothing at stake.\n> > > > On Tue, May 25, 2021 at 11:10 AM befreeandopen befreeandopen at protonmail.com wrote:\n> > > >\n> > > > > @befreeandopen \" An attacker can calculate whether or not she can prolong this chain or not and if so with what timestamp.\"\n> > > > > The scenario you describe would only be likely to happen at all if the malicious actor has a very large fraction of the stake - probably quite close to 50%. At that point, you're talking about a 51% attack, not the nothing at stake problem. The nothing at stake problem is the problem where anyone will mint on any chain. Its clear that if there's a substantial punishment for minting on chains other than the one that eventually wins, every minter without a significant fraction of the stake will be honest and not attempt to mint on old blocks or support someone else's attempt to mint on old blocks (until and if it becomes the heaviest chain). Because the attacker would need probably >45% of the active stake (take a look at the reasoning here for a deeper analysis of that statement), I don't agree that punishment is not a sufficient mitigation of the nothing at stake problem. To exploit the nothing at stake problem, you basically need to 51% attack, at which point you've exceeded the operating conditions of the system, so of course its gonna have problems, just like a 51% attack would cause with PoW.\n> > > > > This is not at all the case. The attacker benefits using the described technique at any size of the stake and significantly so with just 5% of the stake. By significantly, I do not mean that the attacker is able to completely take control the network (in short term), but rather that the attacker has significant advantage in the number of blocks she creates compared to what she \"should be able to create\". This means the attacker's stake increases significantly faster than of the honest nodes, which in long term is very serious in PoS system. If you believe close to 50% is needed for that, you need to redo your math. So no, you are wrong stating that \"to exploit nothing at stake problem you basically need to 51% attack\". It is rather the opposite - eventually, nothing at stake attack leads to ability to perform 51% attack.\n> > > > >\n> > > > > > I am not sure if this is what you call quorum-based PoS\n> > > > >\n> > > > > Yes, pre-selected minters is exactly what I mean by that.\n> > > > >\n> > > > > > it allows the attacker to know who to attack at which point with powerful DDOS in order to hurt liveness of such system\n> > > > >\n> > > > > Just like in bitcoin, associating keys with IP addresses isn't generally an easy thing to do on the fly like that. If you know someone's IP address, you can target them. But if you only know their address or public key, the reverse isn't as easy. With a quorum-based PoS system, you can see their public key and address, but finding out their IP to DOS would be a huge challenge I think.\n> > > > > I do not dispute that the problem is not trivial, but the problem is not as hard as you think. The network graph analysis is a known technique and it is not trivial, but not very hard either. Introducing a large number of nodes to the system to achieve very good success rate of analysis of area of origin of blocks is doable and has been done in past. So again, I very much disagree with your conclusion that this is somehow secure. It is absolutely insecure.\n> > > > > Note, tho, that quorum-based PoS generally also have punishments as part of the protocol. The introduction of punishments do indeed handily solve the nothing at stake problem. And you didn't mention a single problem that the punishments introduce that weren't already there before punishments. There are tradeoffs with introducing punishments (eg in some cases you might punish honest actors), but they are minor in comparison to solving the nothing at stake problem.\n> > > > > While I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message), it does introduce additional complexity which may introduce problem, but more importantly, while it slightly improves resistance against the nothing at stake attack, it solves absolutely nothing. Your claim is based on wrong claim of needed close to 50% stake, but that could not be farther from the truth. It is not true even in optimal conditions when all participants of the network stake or delegate their stake. These optimal conditions rarely, if ever, occur. And that's another thing that we have not mention in our debate, so please allow me to introduce another problem to PoS.\n> > > > > Consider what is needed for such optimal conditions to occur - all coins are always part of the stake, which means that they need to somehow automatically part of the staking process even when they are moved. But in many PoS systems you usually require some age (in terms of confirmations) of the coin before you allow it to be used for participation in staking process and that is for a good reason - to prevent various grinding attacks. In some systems the coin must be specifically registered before it can be staked, in others, simply waiting for enough confirmations enables you to stake with the coin. I am not sure if there is a system which does not have this cooling period for a coin that has been moved. Maybe it is possible though, but AFAIK it is not common and not battle tested feature.\n> > > > > Then if we admit that achieving the optimal condition is rather theoretical. Then if we do not have the optimal condition, it means that a staker with K% of the total available supply increases it's percentage over time to some amounts >K%. As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake (if there are any) and relative to all other stakers who make mistakes or who are not wealthy enough to afford not selling any position ever. But powerful attacker is exactly in such position and thus she will gain significance in such a system. The technique I have described, and that you mistakenly think is viable only with huge amounts of stake, only puts the attacker to even greater advantage. But even without the described attack (which exploits nothing at stake), the PoS system converges to a system more and more controlled by powerful entity, which we can assume is the attacker.\n> > > > > So I don't think it is at all misleading to claim that \"nothing at stake\" is a solved problem. I do in fact mean that the solutions to that problem don't introduce any other problems with anywhere near the same level of significance.\n> > > > > It still stands as truly misleading claim. I disagree that introducing DDOS opportunity with medium level of difficulty for the attacker to implement it, in case of \"quorum-based PoS\" is not a problem anywhere near the same level of significance. Such an attack vector allows you to turn off the network if you spend some time and money. That is hardly acceptable.\n> > > > > Just because of the above we must reject PoS as being critically insecure until someone invents and demonstrates an actual way of solving these issues.\n> > > > > On Tue, May 25, 2021 at 3:00 AM Erik Aronesty erik at q32.com wrote:\n> > > > >\n> > > > > > > > you burn them to be used at a future particular block height\n> > > > > >\n> > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > >\n> > > > > > could be right. the original idea was to have burns decay over time,\n> > > > > > like ASIC's.\n> > > > > > anyway the point was not that \"i had a magic formula\"\n> > > > > > the point was that proof of burn is almost always better than proof of\n> > > > > > stake - simply because the \"proof\" is on-chain, not sitting on a node\n> > > > > > somewhere waiting to be stolen.\n> > > > > > On Mon, May 24, 2021 at 9:53 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > >\n> > > > > > > Is this the kind of proof of burn you're talking about?\n> > > > > > >\n> > > > > > > > if i have a choice between two chains, one longer and one shorter, i can only choose one... deterministically\n> > > > > > >\n> > > > > > > What prevents you from attempting to mine block 553 on both chains?\n> > > > > > >\n> > > > > > > > miners have a very strong, long-term, investment in the stability of the chain.\n> > > > > > >\n> > > > > > > Yes, but the same can be said of any coin, even ones that do have the nothing at stake problem. This isn't sufficient tho because the chain is a common good, and the tragedy of the commons holds for it.\n> > > > > > >\n> > > > > > > > you burn them to be used at a future particular block height\n> > > > > > >\n> > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > >\n> > > > > > > > i can imagine scenarios where large stakeholders can collude to punish smaller stakeholders simply to drive them out of business, for example\n> > > > > > >\n> > > > > > > Are you talking about a 51% attack? This is possible in any decentralized cryptocurrency.\n> > > > > > > On Mon, May 24, 2021 at 11:49 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > >\n> > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > I'm fuzzy on how proof of burn works.\n> > > > > > > >\n> > > > > > > > when you burn coins, you burn them to be used at a future particular\n> > > > > > > > block height: so if i'm burning for block 553, i can only use them to\n> > > > > > > > mine block 553. if i have a choice between two chains, one longer\n> > > > > > > > and one shorter, i can only choose one... deterministically, for that\n> > > > > > > > burn: the chain with the height 553. if we fix the \"lead time\" for\n> > > > > > > > burned coins to be weeks or even months in advance, miners have a very\n> > > > > > > > strong, long-term, investment in the stability of the chain.\n> > > > > > > > therefore there is no \"nothing at stake\" problem. it's\n> > > > > > > > deterministic, so miners have no choice. they can only choose the\n> > > > > > > > transactions that go into the block. they cannot choose which chain\n> > > > > > > > to mine, and it's time-locked, so rollbacks and instability always\n> > > > > > > > hurt miners the most.\n> > > > > > > > the \"punishment\" systems of PoS are \"weird at best\", certainly\n> > > > > > > > unproven. i can imagine scenarios where large stakeholders can\n> > > > > > > > collude to punish smaller stakeholders simply to drive them out of\n> > > > > > > > business, for example. and then you have to put checks in place to\n> > > > > > > > prevent that, and more checks for those prevention system...\n> > > > > > > > in PoB, there is no complexity. simpler systems like this are\n> > > > > > > > typically more secure.\n> > > > > > > > PoB also solves problems caused by \"energy dependence\", which could\n> > > > > > > > lead to state monopolies on mining (like the new Bitcoin Mining\n> > > > > > > > Council). these consortiums, if state sanctioned, could become a\n> > > > > > > > source of censorship, for example. Since PoB doesn't require you to\n> > > > > > > > have a live, well-connected node, it's harder to censor & harder to\n> > > > > > > > trace.\n> > > > > > > > Eliminating this weakness seems to be in the best interests of\n> > > > > > > > existing stakeholders\n> > > > > > > > On Mon, May 24, 2021 at 4:44 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > >\n> > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > >\n> > > > > > > > > Well.. the coins to be burned need to be online when they're burned. But yes, only a small fraction of the total coins need to be online.\n> > > > > > > > >\n> > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > >\n> > > > > > > > > So you're saying that if say someone tries to mine a block on a shorter chain, that requires them to send a transaction burning their coins, and that transaction could also be spent on the longest chain, which means their coins are burned even if the chain they tried to mine on doesn't win? I'm fuzzy on how proof of burn works.\n> > > > > > > > >\n> > > > > > > > > > proof of burn can be more secure than proof-of-stake\n> > > > > > > > >\n> > > > > > > > > FYI, proof of stake can be done without the \"nothing at stake\" problem. You can simply punish people who mint on shorter chains (by rewarding people who publish proofs of this happening on the main chain). In quorum-based PoS, you can punish people in the quorum that propose or sign multiple blocks for the same height. The \"nothing at stake\" problem is a solved problem at this point for PoS.\n> > > > > > > > > On Mon, May 24, 2021 at 3:47 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > >\n> > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > >\n> > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > >\n> > > > > > > > > > > how does proof of burn solve the \"nothing at stake\" problem in your view?\n> > > > > > > > > >\n> > > > > > > > > > definition of nothing at stake: in the event of a fork, whether the\n> > > > > > > > > > fork is accidental or a malicious, the optimal strategy for any miner\n> > > > > > > > > > is to mine on every chain, so that the miner gets their reward no\n> > > > > > > > > > matter which fork wins. indeed in proof-of-stake, the proofs are\n> > > > > > > > > > published on the very chains mines, so the incentive is magnified.\n> > > > > > > > > > in proof-of-burn, your burn investment is always \"at stake\", any\n> > > > > > > > > > redaction can result in a loss-of-burn, because burns can be tied,\n> > > > > > > > > > precisely, to block-heights\n> > > > > > > > > > as a result, miners no longer have an incentive to mine all chains\n> > > > > > > > > > in this way proof of burn can be more secure than proof-of-stake, and\n> > > > > > > > > > even more secure than proof of work\n> > > > > > > > > >\n> > > > > > > > > > >\n> > > > > > > > > >\n> > > > > > > > > > On Sun, May 23, 2021 at 3:52 AM Lloyd Fournier via bitcoin-dev\n> > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > >\n> > > > > > > > > > > Hi Billy,\n> > > > > > > > > > > I was going to write a post which started by dismissing many of the weak arguments that are made against PoS made in this thread and elsewhere.\n> > > > > > > > > > > Although I don't agree with all your points you have done a decent job here so I'll focus on the second part: why I think Proof-of-Stake is inappropriate for a Bitcoin-like system.\n> > > > > > > > > > > Proof of stake is not fit for purpose for a global settlement layer in a pure digital asset (i.e. \"digital gold\") which is what Bitcoin is trying to be.\n> > > > > > > > > > > PoS necessarily gives responsibilities to the holders of coins that they do not want and cannot handle.\n> > > > > > > > > > > In Bitcoin, large unsophisticated coin holders can put their coins in cold storage without a second thought given to the health of the underlying ledger.\n> > > > > > > > > > > As much as hardcore Bitcoiners try to convince them to run their own node, most don't, and that's perfectly acceptable.\n> > > > > > > > > > > At no point do their personal decisions affect the underlying consensus -- it only affects their personal security assurance (not that of the system itself).\n> > > > > > > > > > > In PoS systems this clean separation of responsibilities does not exist.\n> > > > > > > > > > > I think that the more rigorously studied PoS protocols will work fine within the security claims made in their papers.\n> > > > > > > > > > > People who believe that these protocols are destined for catastrophic consensus failure are certainly in for a surprise.\n> > > > > > > > > > > But the devil is in the detail.\n> > > > > > > > > > > Let's look at what the implications of using the leading proof of stake protocols would have on Bitcoin:\n> > > > > > > > > > >\n> > > > > > > > > > > ### Proof of SquareSpace (Cardano, Polkdadot)\n> > > > > > > > > > >\n> > > > > > > > > > > Cardano is a UTXO based PoS coin based on Ouroboros Praos3 with an inbuilt on-chain delegation system5.\n> > > > > > > > > > > In these protocols, coin holders who do not want to run their node with their hot keys in it delegate it to a \"Stake Pool\".\n> > > > > > > > > > > I call the resulting system Proof-of-SquareSpace since most will choose a pool by looking around for one with a nice website and offering the largest share of the block reward.\n> > > > > > > > > > > On the surface this might sound no different than someone with an mining rig shopping around for a good mining pool but there are crucial differences:\n> > > > > > > > > > >\n> > > > > > > > > > > 1.  The person making the decision is forced into it just because they own the currency -- someone with a mining rig has purchased it with the intent to make profit by participating in consensus.\n> > > > > > > > > > >\n> > > > > > > > > > > 2.  When you join a mining pool your systems are very much still online. You are just partaking in a pool to reduce your profit variance. You still see every block that you help create and you never help create a block without seeing it first.\n> > > > > > > > > > >\n> > > > > > > > > > > 3.  If by SquareSpace sybil attack you gain a dishonest majority and start censoring transactions how are the users meant to redelegate their stake to honest pools?\n> > > > > > > > > > >     I guess they can just send a transaction delegating to another pool...oh wait I guess that might be censored too! This seems really really bad.\n> > > > > > > > > > >     In Bitcoin, miners can just join a different pool at a whim. There is nothing the attacker can do to stop them. A temporary dishonest majority heals relatively well.\n> > > > > > > > > > >\n> > > > > > > > > > >\n> > > > > > > > > > > There is another severe disadvantage to this on-chain delegation system: every UTXO must indicate which staking account this UTXO belongs to so the appropriate share of block rewards can be transferred there.\n> > > > > > > > > > > Being able to associate every UTXO to an account ruins one of the main privacy advantages of the UTXO model.\n> > > > > > > > > > > It also grows the size of the blockchain significantly.\n> > > > > > > > > > >\n> > > > > > > > > > > ### \"Pure\" proof of stake (Algorand)\n> > > > > > > > > > >\n> > > > > > > > > > > Algorand's4 approach is to only allow online stake to participate in the protocol.\n> > > > > > > > > > > Theoretically, This means that keys holding funds have to be online in order for them to author blocks when they are chosen.\n> > > > > > > > > > > Of course in reality no one wants to keep their coin holding keys online so in Alogorand you can authorize a set of \"participation keys\"1 that will be used to create blocks on your coin holding key's behalf.\n> > > > > > > > > > > Hopefully you've spotted the problem.\n> > > > > > > > > > > You can send your participation keys to any malicious party with a nice website (see random example 2) offering you a good return.\n> > > > > > > > > > > Damn it's still Proof-of-SquareSpace!\n> > > > > > > > > > > The minor advantage is that at least the participation keys expire after a certain amount of time so eventually the SquareSpace attacker will lose their hold on consensus.\n> > > > > > > > > > > Importantly there is also less junk on the blockchain because the participation keys are delegated off-chain and so are not making as much of a mess.\n> > > > > > > > > > >\n> > > > > > > > > > > ### Conclusion\n> > > > > > > > > > >\n> > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > If we allow delegation then we open up a new social attack surface and it degenerates to Proof-of-SquareSpace.\n> > > > > > > > > > > For a \"digital gold\" like system like Bitcoin we optimize for simplicity and desperately want to avoid extraneous responsibilities for the holder of the coin.\n> > > > > > > > > > > After all, gold is an inert element on the periodic table that doesn't confer responsibilities on the holder to maintain the quality of all the other bars of gold out there.\n> > > > > > > > > > > Bitcoin feels like this too and in many ways is more inert and beautifully boring than gold.\n> > > > > > > > > > > For Bitcoin to succeed I think we need to keep it that way and Proof-of-Stake makes everything a bit too exciting.\n> > > > > > > > > > > I suppose in the end the market will decide what is real digital gold and whether these bad technical trade offs are worth being able to say it uses less electricity. It goes without saying that making bad technical decisions to appease the current political climate is an anathema to Bitcoin.\n> > > > > > > > > > > Would be interested to know if you or others think differently on these points.\n> > > > > > > > > > > Cheers,\n> > > > > > > > > > > LL\n> > > > > > > > > > > On Fri, 21 May 2021 at 19:21, Billy Tetrud via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > >\n> > > > > > > > > > > > I think there is a lot of misinformation and bias against Proof of Stake. Yes there have been lots of shady coins that use insecure PoS mechanisms. Yes there have been massive issues with distribution of PoS coins (of course there have also been massive issues with PoW coins as well). However, I want to remind everyone that there is a difference between \"proved to be impossible\" and \"have not achieved recognized success yet\". Most of the arguments levied against PoS are out of date or rely on unproven assumptions or extrapolation from the analysis of a particular PoS system. I certainly don't think we should experiment with bitcoin by switching to PoS, but from my research, it seems very likely that there is a proof of stake consensus protocol we could build that has substantially higher security (cost / capital required to execute an attack) while at the same time costing far less resources (which do translate to fees on the network) without compromising any of the critical security properties bitcoin relies on. I think the critical piece of this is the disagreements around hardcoded checkpoints, which is a critical piece solving attacks that could be levied on a PoS chain, and how that does (or doesn't) affect the security model.\n> > > > > > > > > > > > @Eric Your proof of stake fallacy seems to be saying that PoS is worse when a 51% attack happens. While I agree, I think that line of thinking omits important facts:\n> > > > > > > > > > > >\n> > > > > > > > > > > > -   The capital required to 51% attack a PoS chain can be made substantially greater than on a PoS chain.\n> > > > > > > > > > > > -   The capital the attacker stands to lose can be substantially greater as well if the attack is successful.\n> > > > > > > > > > > > -   The effectiveness of paying miners to raise the honest fraction of miners above 50% may be quite bad.\n> > > > > > > > > > > > -   Allowing a 51% attack is already unacceptable. It should be considered whether what happens in the case of a 51% may not be significantly different. The currency would likely be critically damaged in a 51% attack regardless of consensus mechanism.\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Proof-of-stake tends towards oligopolistic control\n> > > > > > > > > > > >\n> > > > > > > > > > > > People repeat this often, but the facts support this. There is no centralization pressure in any proof of stake mechanism that I'm aware of. IE if you have 10 times as much coin that you use to mint blocks, you should expect to earn 10x as much minting revenue - not more than 10x. By contrast, proof of work does in fact have clear centralization pressure - this is not disputed. Our goal in relation to that is to ensure that the centralization pressure remains insignifiant. Proof of work also clearly has a lot more barriers to entry than any proof of stake system does. Both of these mean the tendency towards oligopolistic control is worse for PoW.\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Energy usage, in-and-of-itself, is nothing to be ashamed of!!\n> > > > > > > > > > > >\n> > > > > > > > > > > > I certainly agree. Bitcoin's energy usage at the moment is I think quite warranted. However, the question is: can we do substantially better. I think if we can, we probably should... eventually.\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Proof of Stake is only resilient to \u2153 of the network demonstrating a Byzantine Fault, whilst Proof of Work is resilient up to the \u00bd threshold\n> > > > > > > > > > > >\n> > > > > > > > > > > > I see no mention of this in the pos.pdf you linked to. I'm not aware of any proof that all PoS systems have a failure threshold of 1/3. I know that staking systems like Casper do in fact have that 1/3 requirement. However there are PoS designs that should exceed that up to nearly 50% as far as I'm aware. Proof of work is not in fact resilient up to the 1/2 threshold in the way you would think. IE, if 100% of miners are currently honest and have a collective 100 exahashes/s hashpower, an attacker does not need to obtain 100 exahashes/s, but actually only needs to accumulate 50 exahashes/s. This is because as the attacker accumulates hashpower, it drives honest miners out of the market as the difficulty increases to beyond what is economically sustainable. Also, its been shown that the best proof of work can do is require an attacker to obtain 33% of the hashpower because of the selfish mining attack discussed in depth in this paper: https://arxiv.org/abs/1311.0243. Together, both of these things reduce PoW's security by a factor of about 83% (1 - 50%*33%).\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Proof of Stake requires other trade-offs which are incompatible with Bitcoin's objective (to be a trustless digital cash) \u2014 specifically the famous \"security vs. liveness\" guarantee\n> > > > > > > > > > > >\n> > > > > > > > > > > > Do you have a good source that talks about why you think proof of stake cannot be used for a trustless digital cash?\n> > > > > > > > > > > >\n> > > > > > > > > > > > > You cannot gain tokens without someone choosing to give up those coins - a form of permission.\n> > > > > > > > > > > >\n> > > > > > > > > > > > This is not a practical constraint. Just like in mining, some nodes may reject you, but there will likely be more that will accept you, some sellers may reject you, but most would accept your money as payment for bitcoins. I don't think requiring the \"permission\" of one of millions of people in the market can be reasonably considered a \"permissioned currency\".\n> > > > > > > > > > > >\n> > > > > > > > > > > > > 2.  Proof of stake must have a trusted means of timestamping to regulate overproduction of blocks\n> > > > > > > > > > > >\n> > > > > > > > > > > > Both PoW and PoS could mine/mint blocks twice as fast if everyone agreed to double their clock speeds. Both systems rely on an honest majority sticking to standard time.\n> > > > > > > > > > > > On Wed, May 19, 2021 at 5:32 AM Michael Dubrovsky via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Ah sorry, I didn't realize this was, in fact, a different thread! :)\n> > > > > > > > > > > > > On Wed, May 19, 2021 at 10:07 AM Michael Dubrovsky mike at powx.org wrote:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Folks, I suggest we keep the discussion to PoW, oPoW, and the BIP itself. PoS, VDFs, and so on are interesting but I guess there are other threads going on these topics already where they would be relevant.\n> > > > > > > > > > > > > > Also, it's important to distinguish between oPoW and these other \"alternatives\" to Hashcash. oPoW is a true Proof of Work that doesn't alter the core game theory or security assumptions of Hashcash and actually contains SHA (can be SHA3, SHA256, etc hash is interchangeable).\n> > > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > > Mike\n> > > > > > > > > > > > > > On Tue, May 18, 2021 at 4:55 PM Erik Aronesty via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > 1.  i never suggested vdf's to replace pow.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > 2.  my suggestion was specifically in the context of a working\n> > > > > > > > > > > > > > >     proof-of-burn protocol\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   vdfs used only for timing (not block height)\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   blind-burned coins of a specific age used to replace proof of work\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   the required \"work\" per block would simply be a competition to\n> > > > > > > > > > > > > > >     acquire rewards, and so miners would have to burn coins, well in\n> > > > > > > > > > > > > > >     advance, and hope that their burned coins got rewarded in some far\n> > > > > > > > > > > > > > >     future\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   the point of burned coins is to mimic, in every meaningful way, the\n> > > > > > > > > > > > > > >     value gained from proof of work... without some of the security\n> > > > > > > > > > > > > > >     drawbacks\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   the miner risks losing all of his burned coins (like all miners risk\n> > > > > > > > > > > > > > >     losing their work in each block)\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   new burns can't be used\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   old burns age out (like ASICs do)\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   other requirements on burns might be needed to properly mirror the\n> > > > > > > > > > > > > > >     properties of PoW and the incentives Bitcoin uses to mine honestly.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > 3.  i do believe it is possible that a \"burned coin + vdf system\"\n> > > > > > > > > > > > > > >     might be more secure in the long run, and that if the entire space\n> > > > > > > > > > > > > > >     agreed that such an endeavor was worthwhile, a test net could be spun\n> > > > > > > > > > > > > > >     up, and a hard-fork could be initiated.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > 4.  i would never suggest such a thing unless i believed it was\n> > > > > > > > > > > > > > >     possible that consensus was possible. so no, this is not an \"alt\n> > > > > > > > > > > > > > >     coin\"\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > On Tue, May 18, 2021 at 10:02 AM Zac Greenwood zachgrw at gmail.com wrote:\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Hi ZmnSCPxj,\n> > > > > > > > > > > > > > > > Please note that I am not suggesting VDFs as a means to save energy, but solely as a means to make the time between blocks more constant.\n> > > > > > > > > > > > > > > > Zac\n> > > > > > > > > > > > > > > > On Tue, 18 May 2021 at 12:42, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > Good morning Zac,\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > VDFs might enable more constant block times, for instance by having a two-step PoW:\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 1.  Use a VDF that takes say 9 minutes to resolve (VDF being subject to difficulty adjustments similar to the as-is). As per the property of VDFs, miners are able show proof of work.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 2.  Use current PoW mechanism with lower difficulty so finding a block takes 1 minute on average, again subject to as-is difficulty adjustments.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > As a result, variation in block times will be greatly reduced.\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > As I understand it, another weakness of VDFs is that they are not inherently progress-free (their sequential nature prevents that; they are inherently progress-requiring).\n> > > > > > > > > > > > > > > > > Thus, a miner which focuses on improving the amount of energy that it can pump into the VDF circuitry (by overclocking and freezing the circuitry), could potentially get into a winner-takes-all situation, possibly leading to even worse competition and even more energy consumption.\n> > > > > > > > > > > > > > > > > After all, if you can start mining 0.1s faster than the competition, that is a 0.1s advantage where only you can mine in the entire world.\n> > > > > > > > > > > > > > > > > Regards,\n> > > > > > > > > > > > > > > > > ZmnSCPxj\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > --\n> > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > >\n> > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > >\n> > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-01T16:33:29",
                "message_text_only": "> Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n\nGiven your example, if !BTC is needed to burn, that's a $50k\ninvestment in an ASIC needed to mine a block.  That's not anywhere\nnear current levels.   It's not even approaching the current PoW.   A\n$50k investment to be a large amount of hash power is ... well,\nsomewhere more than 10 years ago.\n\nThen you compute a ratio of 200x, where someone is spending 200x the\ncost needed to mine a block.   Let's use real numbers.   Look,\ninstead, at the global investment in ASIC's required to mine a block.\n Now assume that in PoB, miners would spend the same amount they are\ntoday, burning coins rather than buying ASICs.\n\nIn real life, PoB is always an \"equivalent defense\" to PoW, because no\nmatter what scenario you throw at me, one can continue to tweak the\nnumbers until PoB *is* equivalent.\n\nFor example, If an attacker decided to amass proof-of-burn enough to\nperform a reorg, they would have to essentially spend as much money as\na 51% attack today.   And they would have to do so well in advance.\nWe could also require a time-locked \"reveal\" phase where burns are\nrevealed to be burns well after they are incorporated - ie: it will be\npublic knowledge that someone is amassing a large amount of\nhashpower-equivlent.   That is one of the current advantages of PoW.\n\nMy original proof-of-burn concept was designed to mimic ASICs as much\nas possible:\n\n1. large initial investment (burn to acquire power)\n2. continued investment (burn to activate power in each block, lost if\nblock is not found)\n\nIdeally, the attacker would have to keep burning for each lottery\nticket, which can only be used once.   Committing that burn to a\nparticular block for example.\n\nAny attack you propose for a \"assumed well designed PoB\" can also attack PoW.\nAny attack you propose for a \"assumed well designed PoB\" can also attack PoS.\n\nBut there are some things PoB can do that PoS can't... which is really\nmy original point.\n\n- sunk costs/lost investment\n- \"hashpower\" is \"offline\", and cannot be seized.\n\n\n\n\n\n\nOn Tue, Jun 1, 2021 at 4:21 AM befreeandopen\n<befreeandopen at protonmail.com> wrote:\n>\n> Erik, thanks for the link. So referring to https://en.bitcoin.it/wiki/Proof_of_burn, I do not really understand how this is supposed to be that much better over many proof of stake proposals. If there is more research on PoB, please note I'm not commenting on that as I only read this wiki article and my comments are purely related to this only.\n>\n> I hope we can agree that the idea with manual insertion of entropy every week can be discarded, but at the same time I don't think it is a crucial point of the whole idea. So we can just focus on the rest of it.\n>\n> Then the whole idea seems just like certain proof of stake implementations with just small differences, which I try to summarize:\n>\n> - in PoB, in order to use the coin for block production, you burn it in the past and wait some time -- in the certain PoS I'm talking about, in order to use the coin, you do not move the coin for some time - so in both there is the same idea - you somehow make the coin eligible for the block creation process by first doing some action followed by some inaction for some time; the difference here is that if later you use such coin in PoS, then after waiting more time, you can use the coin again (for whatever purpose), while in PoB the coin is gone forever (it is burned); this does not seem to be fundamentally different\n>\n> - in PoB, the author suggests there is an exponential decay of the power of the coin to create a block; in some PoS schemas, there historically was an era of so called CoinAge mechanism, which was somewhat inverse to this exponential decay, it was that the coin gets more power the older it is untouched, some implementations were for linear increase in the power, some exponential. Usually there was a certain limit - i.e. a maximum power the coin may have reached. It turned out quite quickly that such property is making attacks easier. PoB reverses the idea, but I don't think that helps that much. In any case, there seems to be an optimal period of time for each used coin, in both PoS and PoB, where the coin is most suitable for block production. I admit PoB version is better, but the crucial property here is that some coins are more powerful than other.\n>\n> - in both PoB and PoS it seems there is linear increase of the ability of the coin to produce blocks with the size of the coin (more BTC you burn/stake, the better your chance)\n>\n> This characteristic of PoB does not suggest that it would have that much different properties than PoS. So it should suffer from same problems as PoS. Namely, the problems I see now, with the given proposal from wiki, are:\n>\n> - there seems to be lack of definition of the heaviest chain and difficulty adjustment - this seems crucial, but likely solvable, I'm just saying it is importantly missing in the description\n>\n> - there seems to be a problem with nothing at stake (nothing at burn maybe?) - How that can be? Again, it seems that every burned coin can be used for free checks at any time after the initial waiting period. These free checks are indeed free and are the core of the nothing at stake problem in PoS. You seem to make those checks for free and you seem to be able to use those burned coins to create arbitrary number of forks build on any parent blocks of your choice, not just the last block of the heaviest chain. I can't see at the moment how is this different from PoS nothing at stake problem. Maybe you can explain?\n>\n> - it seems to me that there is a trivial attack against the scheme by a wealthy attacker. Suppose a common size of the burn is 1 BTC per block, suppose you define the heaviest chain rule somehow in relation to total number of burned coins or the cumulative \"strength\" of the \"lowest\" hashes, then you can just burn 20 UTXOs, each being 10 BTC in value, so you spent 200 BTC on this attack, but you are in very strong position because after you wait the needed time, you should be able to do pretty nasty reorg. Suppose that the main chain is A-B-C-D-E-F, so what you do at that point is that you just \"try for free\" all your 20 UTXOs, whether or not they can build on top of block A (which has 5 confs on top, F is the tip of the main chain). Since you have big UTXOs, your chances should be good, of course you can always try many times because you have a \"lottery ticket\" for every timestampt t. So with this you should be able, with good chance, to find such B' and then you have 19 UTXOs remaining to try to build on B' in the same way. I can't see what prevents this attack in the described scheme.\n>\n> - the ability to retroactively try all different kids of timestamp t seems devastating - you again get super easy and somewhat cheap attack (due to nothing at burn problem) that allows you to rewrite even long chains at will.\n>\n>\n> Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n>\n>\n>\n>\n> Sent with ProtonMail Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Friday, May 28, 2021 9:06 PM, Erik Aronesty <erik at q32.com> wrote:\n>\n> > best writeup i know of is here:\n> >\n> > https://en.bitcoin.it/wiki/Proof_of_burn\n> >\n> > no formal proposals or proofs that i know of.\n> >\n> > On Fri, May 28, 2021 at 10:40 AM befreeandopen\n> > befreeandopen at protonmail.com wrote:\n> >\n> > > Erik, I am sorry, I have little knowledge about proof-of-burn, I never found it interesting up until now. Some of your recent claims seem quite strong to me and I'd like to read more.\n> > > Forgive me if this has been mentioned recently, but is there a full specification of the concept you are referring to? I don't mean just the basic idea description (that much is clear to me), I mean a fully detailed proposal or technical documentation that would give me a precise information about what exactly it is that you are talking about.\n> > > Sent with ProtonMail Secure Email.\n> > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > On Wednesday, May 26, 2021 11:07 PM, Erik Aronesty erik at q32.com wrote:\n> > >\n> > > > note: the \"nothing at stake\" problem you propose is not broken for\n> > > > proof-of-burn, because the attacker\n> > > > a) has no idea which past transactions are burns\n> > > > b) has no way to use his mining power, even 5%, to maliciously improve\n> > > > his odds of being selected\n> > > > On Wed, May 26, 2021 at 9:12 AM befreeandopen\n> > > > befreeandopen at protonmail.com wrote:\n> > > >\n> > > > > @befreeandopen I guess I misunderstood your selfish minting attack. Let me make sure I understand it. You're saying it would go as follows?:\n> > > > >\n> > > > > 1.  The malicious actor comes across an opportunity to mint the next 3 blocks. But they hold off and don't release their blocks just yet.\n> > > > > 2.  They receive a new block minted by someone else.\n> > > > > 3.  The malicious actor then chooses to release their other 2 blocks on on the second from the top block if it gives them more blocks in the future than minting on the top block. And instead lets the top block proceed if it gives them more blocks in the future (also figuring in the 3 blocks they're missing out on minting).\n> > > > > 4.  Profit!\n> > > > >\n> > > > > The problem with this attack is that any self respecting PoS system wouldn't have the information available for minters to know how blocks will affect their future prospects of minting. Otherwise this would introduce the problem of stake grinding. This can be done using collaborative randomness (where numbers from many parties are combined to create a random number that no individual party could predict). In fact, that's what the Casper protocol does to decide quorums. In a non quorum case, you can do something like record a hash of a number in the block header, and then have a second step to release that number later. Rewards can be given can be used to ensure minters act honestly here by minting messages that release these numbers and not releasing their secret numbers too early.\n> > > > > Yes, you misunderstood it. First, let me say that the above thoughts of yours are incorrect, at least for non-quorum case. Since the transition in the blockchain system from S1 to S2 is only by adding new block, and since stakers always need to be able to decide whether or not they can add the next block, it follows that if a staker creates a new block locally, she can decide whether the new state allows her to add another block on top. As you mentioned, this COULD introduce problem of staking, that you are incorrect in that it is a necessity. Usual prevention of the grinding problem in this case is that an \"old enough\" source of randomness applies for the current block production process. Of course this, as it is typical for PoS, introduces other problems, but let's discard those.\n> > > > > I will try to explain in detail what you misunderstood before. You start with a chain ending with blocks A-B-C, C being the top, the common feature of PoS system (non-quorum), roughly speaking, is that if N is the total amount of coins that participate in the staking process to create a new block on top of C (let's call that D), then a participant having K*N amount of stake has chance K to be the one who will create the next stake. In other words, the power of stakers is supposed to be linear in the system - you own 10 coins gives you 10x the chance of finding block over someone who has 1 coin.\n> > > > > What i was claiming is that using the technique I have described, this linearity is violated. Why? Well, it works for honest stakers among the competition of honest stakers - they really do have the chance of K to find the next block. However, the attacker, using nothing at stake, checks her ability to build block D (at some timestamp). If she is successful, she does not propagate D immediately, but instead she also checks whether she can build on top of B and on top of A. Since with every new timestamp, usually, there is a new chance to build the block, it is not uncommon that she finds she is indeed able to build such block C' on top of B. Here it is likely t(C') > t(C) as the attacker has relatively low stake. Note that in order to produce such C', she not only could have tried the current timestamp t(D), but also all previous timestamps up to t(B) (usually that's the consensus rule, but it may depend on a specific consensus). So her chance to produce such C' is greater than her previous chance of producing C (which chance was limited by other stakers in the system and the discovery of block C by one of them). Now suppose that she found such C' and now she continues by trying to prolong this chain by finding D'. And again here, it is quite likely that her chance to find such D' is greater than was her chance of finding D because again there are likely multiple timestamps she could try. This all was possible just because nothing at stake allows you to just try if you can produce a block in certain state of block chain or not. Now if she actually was able to find D', she discards D and only publishes chain A-B-C'-D', which can not be punished despite the fact that she indeed produced two different forks. She can not be punished because this production was local and only the final result of A-B-C'-D' was published, in which case she gained an extra block over the honest strategy which would only give her block D.\n> > > > > Fun fact tho: there is an attack called the \"selfish mining attack\" for proof of work, and it reduces the security of PoW by at least 1/3rd.\n> > > > > How is that relevant to our discussion? This is known research that has nothing to do with PoS except that it is often worse on PoS.\n> > > > >\n> > > > > > the problem is not as hard as you think\n> > > > >\n> > > > > I don't claim to know just how hard finding the IP address associated with a bitcoin address is. However, the DOS risk can be solved more completely by only allowing the owner of coins themselves to know whether they can mint a block. Eg by determining whether someone can mint a block based on their public key hidden behind hashes (as normal in addresses). Only when someone does in fact mint a block do they reveal their hidden public key in order to prove they are allowed to mint the block.\n> > > > > This is true, but you are mixing quorum and non-quorum systems. My objection here was towards such system where I specifically said that the list of producers for next epoch is known up front and you confirmed that this is what you meant with \"quorum\" system. So in such system, I claimed, the known producer is the only target at any given point of time. This of course does not apply to any other type of system where future producers are not known. No need to dispute, again, something that was not claimed.\n> > > > >\n> > > > > > I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message)\n> > > > >\n> > > > > I'm glad we agree there. Perhaps I misunderstood what you meant by \"you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere.\"\n> > > > > Perhaps you should quote the full sentence and not just a part of it:\n> > > > > \"Of course you can always change the rules in a way that a certain specific attack is not doable, but you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere, or you have not solved it completely.\"\n> > > > > You can parse this as: (CREATE PROBLEM ELSEWHERE) OR (NOT SOLVE IT COMPLETELY)\n> > > > > In case of the punishment it was meant to be the not solve it completely part.\n> > > > > Also \"typically\" does not imply always.\n> > > > > But this parsing of English sentences for you seems very off topic here. My point is, in context of Bitcoin, reject such unsupported claims that PoS is a reasonable alternative to PoW, let's stick to that.\n> > > > >\n> > > > > > As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake\n> > > > >\n> > > > > Well, if you're in the closed system of the cryptocurrency, sure. But we don't live in that closed system. Minters will earn some ROI from minting just like any other financial activity. Others may find more success spending their time doing things other than figuring out how to mint coins. In that case, they'll be able to earn more coin that they could later decide to use to mint blocks if they decide to.\n> > > > > This only supports the point I was making. Since the optimal scenario with all existing coins participating is just theoretical, the attacker's position will ever so improve. It seems we are in agreement here, great.\n> > > > >\n> > > > > > Just because of the above we must reject PoS as being critically insecure\n> > > > >\n> > > > > I think the only thing we can conclude from this is that you have come up with an insecure proof of stake protocol. I don't see how anything you've brought up amounts to substantial evidence that all possible PoS protocols are insecure.\n> > > > > I have not come up with anything. I'm afraid you've not realized the burden of proof is on your side if you vouch for a design that is not believed and trusted to be secure. It is up to you to show that you know how to solve every problem that people throw at you. So far we have just demonstrated that your claim that nothing at stake is solved was unjustified. You have not described a system that would solve it (and not introduce critical DDOS attack vector as it is in quorum based systems - per the prior definition of such systems).\n> > > > > Of course the list of problems of PoS systems do not end with just nothing at stake, but it is good enough example that by itself prevents its adoption in decentralized consensus. No need to go to other hard problems without solving nothing at stake.\n> > > > > On Tue, May 25, 2021 at 11:10 AM befreeandopen befreeandopen at protonmail.com wrote:\n> > > > >\n> > > > > > @befreeandopen \" An attacker can calculate whether or not she can prolong this chain or not and if so with what timestamp.\"\n> > > > > > The scenario you describe would only be likely to happen at all if the malicious actor has a very large fraction of the stake - probably quite close to 50%. At that point, you're talking about a 51% attack, not the nothing at stake problem. The nothing at stake problem is the problem where anyone will mint on any chain. Its clear that if there's a substantial punishment for minting on chains other than the one that eventually wins, every minter without a significant fraction of the stake will be honest and not attempt to mint on old blocks or support someone else's attempt to mint on old blocks (until and if it becomes the heaviest chain). Because the attacker would need probably >45% of the active stake (take a look at the reasoning here for a deeper analysis of that statement), I don't agree that punishment is not a sufficient mitigation of the nothing at stake problem. To exploit the nothing at stake problem, you basically need to 51% attack, at which point you've exceeded the operating conditions of the system, so of course its gonna have problems, just like a 51% attack would cause with PoW.\n> > > > > > This is not at all the case. The attacker benefits using the described technique at any size of the stake and significantly so with just 5% of the stake. By significantly, I do not mean that the attacker is able to completely take control the network (in short term), but rather that the attacker has significant advantage in the number of blocks she creates compared to what she \"should be able to create\". This means the attacker's stake increases significantly faster than of the honest nodes, which in long term is very serious in PoS system. If you believe close to 50% is needed for that, you need to redo your math. So no, you are wrong stating that \"to exploit nothing at stake problem you basically need to 51% attack\". It is rather the opposite - eventually, nothing at stake attack leads to ability to perform 51% attack.\n> > > > > >\n> > > > > > > I am not sure if this is what you call quorum-based PoS\n> > > > > >\n> > > > > > Yes, pre-selected minters is exactly what I mean by that.\n> > > > > >\n> > > > > > > it allows the attacker to know who to attack at which point with powerful DDOS in order to hurt liveness of such system\n> > > > > >\n> > > > > > Just like in bitcoin, associating keys with IP addresses isn't generally an easy thing to do on the fly like that. If you know someone's IP address, you can target them. But if you only know their address or public key, the reverse isn't as easy. With a quorum-based PoS system, you can see their public key and address, but finding out their IP to DOS would be a huge challenge I think.\n> > > > > > I do not dispute that the problem is not trivial, but the problem is not as hard as you think. The network graph analysis is a known technique and it is not trivial, but not very hard either. Introducing a large number of nodes to the system to achieve very good success rate of analysis of area of origin of blocks is doable and has been done in past. So again, I very much disagree with your conclusion that this is somehow secure. It is absolutely insecure.\n> > > > > > Note, tho, that quorum-based PoS generally also have punishments as part of the protocol. The introduction of punishments do indeed handily solve the nothing at stake problem. And you didn't mention a single problem that the punishments introduce that weren't already there before punishments. There are tradeoffs with introducing punishments (eg in some cases you might punish honest actors), but they are minor in comparison to solving the nothing at stake problem.\n> > > > > > While I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message), it does introduce additional complexity which may introduce problem, but more importantly, while it slightly improves resistance against the nothing at stake attack, it solves absolutely nothing. Your claim is based on wrong claim of needed close to 50% stake, but that could not be farther from the truth. It is not true even in optimal conditions when all participants of the network stake or delegate their stake. These optimal conditions rarely, if ever, occur. And that's another thing that we have not mention in our debate, so please allow me to introduce another problem to PoS.\n> > > > > > Consider what is needed for such optimal conditions to occur - all coins are always part of the stake, which means that they need to somehow automatically part of the staking process even when they are moved. But in many PoS systems you usually require some age (in terms of confirmations) of the coin before you allow it to be used for participation in staking process and that is for a good reason - to prevent various grinding attacks. In some systems the coin must be specifically registered before it can be staked, in others, simply waiting for enough confirmations enables you to stake with the coin. I am not sure if there is a system which does not have this cooling period for a coin that has been moved. Maybe it is possible though, but AFAIK it is not common and not battle tested feature.\n> > > > > > Then if we admit that achieving the optimal condition is rather theoretical. Then if we do not have the optimal condition, it means that a staker with K% of the total available supply increases it's percentage over time to some amounts >K%. As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake (if there are any) and relative to all other stakers who make mistakes or who are not wealthy enough to afford not selling any position ever. But powerful attacker is exactly in such position and thus she will gain significance in such a system. The technique I have described, and that you mistakenly think is viable only with huge amounts of stake, only puts the attacker to even greater advantage. But even without the described attack (which exploits nothing at stake), the PoS system converges to a system more and more controlled by powerful entity, which we can assume is the attacker.\n> > > > > > So I don't think it is at all misleading to claim that \"nothing at stake\" is a solved problem. I do in fact mean that the solutions to that problem don't introduce any other problems with anywhere near the same level of significance.\n> > > > > > It still stands as truly misleading claim. I disagree that introducing DDOS opportunity with medium level of difficulty for the attacker to implement it, in case of \"quorum-based PoS\" is not a problem anywhere near the same level of significance. Such an attack vector allows you to turn off the network if you spend some time and money. That is hardly acceptable.\n> > > > > > Just because of the above we must reject PoS as being critically insecure until someone invents and demonstrates an actual way of solving these issues.\n> > > > > > On Tue, May 25, 2021 at 3:00 AM Erik Aronesty erik at q32.com wrote:\n> > > > > >\n> > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > >\n> > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > >\n> > > > > > > could be right. the original idea was to have burns decay over time,\n> > > > > > > like ASIC's.\n> > > > > > > anyway the point was not that \"i had a magic formula\"\n> > > > > > > the point was that proof of burn is almost always better than proof of\n> > > > > > > stake - simply because the \"proof\" is on-chain, not sitting on a node\n> > > > > > > somewhere waiting to be stolen.\n> > > > > > > On Mon, May 24, 2021 at 9:53 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > >\n> > > > > > > > Is this the kind of proof of burn you're talking about?\n> > > > > > > >\n> > > > > > > > > if i have a choice between two chains, one longer and one shorter, i can only choose one... deterministically\n> > > > > > > >\n> > > > > > > > What prevents you from attempting to mine block 553 on both chains?\n> > > > > > > >\n> > > > > > > > > miners have a very strong, long-term, investment in the stability of the chain.\n> > > > > > > >\n> > > > > > > > Yes, but the same can be said of any coin, even ones that do have the nothing at stake problem. This isn't sufficient tho because the chain is a common good, and the tragedy of the commons holds for it.\n> > > > > > > >\n> > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > > >\n> > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > > >\n> > > > > > > > > i can imagine scenarios where large stakeholders can collude to punish smaller stakeholders simply to drive them out of business, for example\n> > > > > > > >\n> > > > > > > > Are you talking about a 51% attack? This is possible in any decentralized cryptocurrency.\n> > > > > > > > On Mon, May 24, 2021 at 11:49 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > >\n> > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > > I'm fuzzy on how proof of burn works.\n> > > > > > > > >\n> > > > > > > > > when you burn coins, you burn them to be used at a future particular\n> > > > > > > > > block height: so if i'm burning for block 553, i can only use them to\n> > > > > > > > > mine block 553. if i have a choice between two chains, one longer\n> > > > > > > > > and one shorter, i can only choose one... deterministically, for that\n> > > > > > > > > burn: the chain with the height 553. if we fix the \"lead time\" for\n> > > > > > > > > burned coins to be weeks or even months in advance, miners have a very\n> > > > > > > > > strong, long-term, investment in the stability of the chain.\n> > > > > > > > > therefore there is no \"nothing at stake\" problem. it's\n> > > > > > > > > deterministic, so miners have no choice. they can only choose the\n> > > > > > > > > transactions that go into the block. they cannot choose which chain\n> > > > > > > > > to mine, and it's time-locked, so rollbacks and instability always\n> > > > > > > > > hurt miners the most.\n> > > > > > > > > the \"punishment\" systems of PoS are \"weird at best\", certainly\n> > > > > > > > > unproven. i can imagine scenarios where large stakeholders can\n> > > > > > > > > collude to punish smaller stakeholders simply to drive them out of\n> > > > > > > > > business, for example. and then you have to put checks in place to\n> > > > > > > > > prevent that, and more checks for those prevention system...\n> > > > > > > > > in PoB, there is no complexity. simpler systems like this are\n> > > > > > > > > typically more secure.\n> > > > > > > > > PoB also solves problems caused by \"energy dependence\", which could\n> > > > > > > > > lead to state monopolies on mining (like the new Bitcoin Mining\n> > > > > > > > > Council). these consortiums, if state sanctioned, could become a\n> > > > > > > > > source of censorship, for example. Since PoB doesn't require you to\n> > > > > > > > > have a live, well-connected node, it's harder to censor & harder to\n> > > > > > > > > trace.\n> > > > > > > > > Eliminating this weakness seems to be in the best interests of\n> > > > > > > > > existing stakeholders\n> > > > > > > > > On Mon, May 24, 2021 at 4:44 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > > >\n> > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > >\n> > > > > > > > > > Well.. the coins to be burned need to be online when they're burned. But yes, only a small fraction of the total coins need to be online.\n> > > > > > > > > >\n> > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > >\n> > > > > > > > > > So you're saying that if say someone tries to mine a block on a shorter chain, that requires them to send a transaction burning their coins, and that transaction could also be spent on the longest chain, which means their coins are burned even if the chain they tried to mine on doesn't win? I'm fuzzy on how proof of burn works.\n> > > > > > > > > >\n> > > > > > > > > > > proof of burn can be more secure than proof-of-stake\n> > > > > > > > > >\n> > > > > > > > > > FYI, proof of stake can be done without the \"nothing at stake\" problem. You can simply punish people who mint on shorter chains (by rewarding people who publish proofs of this happening on the main chain). In quorum-based PoS, you can punish people in the quorum that propose or sign multiple blocks for the same height. The \"nothing at stake\" problem is a solved problem at this point for PoS.\n> > > > > > > > > > On Mon, May 24, 2021 at 3:47 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > > >\n> > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > >\n> > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > > >\n> > > > > > > > > > > > how does proof of burn solve the \"nothing at stake\" problem in your view?\n> > > > > > > > > > >\n> > > > > > > > > > > definition of nothing at stake: in the event of a fork, whether the\n> > > > > > > > > > > fork is accidental or a malicious, the optimal strategy for any miner\n> > > > > > > > > > > is to mine on every chain, so that the miner gets their reward no\n> > > > > > > > > > > matter which fork wins. indeed in proof-of-stake, the proofs are\n> > > > > > > > > > > published on the very chains mines, so the incentive is magnified.\n> > > > > > > > > > > in proof-of-burn, your burn investment is always \"at stake\", any\n> > > > > > > > > > > redaction can result in a loss-of-burn, because burns can be tied,\n> > > > > > > > > > > precisely, to block-heights\n> > > > > > > > > > > as a result, miners no longer have an incentive to mine all chains\n> > > > > > > > > > > in this way proof of burn can be more secure than proof-of-stake, and\n> > > > > > > > > > > even more secure than proof of work\n> > > > > > > > > > >\n> > > > > > > > > > > >\n> > > > > > > > > > >\n> > > > > > > > > > > On Sun, May 23, 2021 at 3:52 AM Lloyd Fournier via bitcoin-dev\n> > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > >\n> > > > > > > > > > > > Hi Billy,\n> > > > > > > > > > > > I was going to write a post which started by dismissing many of the weak arguments that are made against PoS made in this thread and elsewhere.\n> > > > > > > > > > > > Although I don't agree with all your points you have done a decent job here so I'll focus on the second part: why I think Proof-of-Stake is inappropriate for a Bitcoin-like system.\n> > > > > > > > > > > > Proof of stake is not fit for purpose for a global settlement layer in a pure digital asset (i.e. \"digital gold\") which is what Bitcoin is trying to be.\n> > > > > > > > > > > > PoS necessarily gives responsibilities to the holders of coins that they do not want and cannot handle.\n> > > > > > > > > > > > In Bitcoin, large unsophisticated coin holders can put their coins in cold storage without a second thought given to the health of the underlying ledger.\n> > > > > > > > > > > > As much as hardcore Bitcoiners try to convince them to run their own node, most don't, and that's perfectly acceptable.\n> > > > > > > > > > > > At no point do their personal decisions affect the underlying consensus -- it only affects their personal security assurance (not that of the system itself).\n> > > > > > > > > > > > In PoS systems this clean separation of responsibilities does not exist.\n> > > > > > > > > > > > I think that the more rigorously studied PoS protocols will work fine within the security claims made in their papers.\n> > > > > > > > > > > > People who believe that these protocols are destined for catastrophic consensus failure are certainly in for a surprise.\n> > > > > > > > > > > > But the devil is in the detail.\n> > > > > > > > > > > > Let's look at what the implications of using the leading proof of stake protocols would have on Bitcoin:\n> > > > > > > > > > > >\n> > > > > > > > > > > > ### Proof of SquareSpace (Cardano, Polkdadot)\n> > > > > > > > > > > >\n> > > > > > > > > > > > Cardano is a UTXO based PoS coin based on Ouroboros Praos3 with an inbuilt on-chain delegation system5.\n> > > > > > > > > > > > In these protocols, coin holders who do not want to run their node with their hot keys in it delegate it to a \"Stake Pool\".\n> > > > > > > > > > > > I call the resulting system Proof-of-SquareSpace since most will choose a pool by looking around for one with a nice website and offering the largest share of the block reward.\n> > > > > > > > > > > > On the surface this might sound no different than someone with an mining rig shopping around for a good mining pool but there are crucial differences:\n> > > > > > > > > > > >\n> > > > > > > > > > > > 1.  The person making the decision is forced into it just because they own the currency -- someone with a mining rig has purchased it with the intent to make profit by participating in consensus.\n> > > > > > > > > > > >\n> > > > > > > > > > > > 2.  When you join a mining pool your systems are very much still online. You are just partaking in a pool to reduce your profit variance. You still see every block that you help create and you never help create a block without seeing it first.\n> > > > > > > > > > > >\n> > > > > > > > > > > > 3.  If by SquareSpace sybil attack you gain a dishonest majority and start censoring transactions how are the users meant to redelegate their stake to honest pools?\n> > > > > > > > > > > >     I guess they can just send a transaction delegating to another pool...oh wait I guess that might be censored too! This seems really really bad.\n> > > > > > > > > > > >     In Bitcoin, miners can just join a different pool at a whim. There is nothing the attacker can do to stop them. A temporary dishonest majority heals relatively well.\n> > > > > > > > > > > >\n> > > > > > > > > > > >\n> > > > > > > > > > > > There is another severe disadvantage to this on-chain delegation system: every UTXO must indicate which staking account this UTXO belongs to so the appropriate share of block rewards can be transferred there.\n> > > > > > > > > > > > Being able to associate every UTXO to an account ruins one of the main privacy advantages of the UTXO model.\n> > > > > > > > > > > > It also grows the size of the blockchain significantly.\n> > > > > > > > > > > >\n> > > > > > > > > > > > ### \"Pure\" proof of stake (Algorand)\n> > > > > > > > > > > >\n> > > > > > > > > > > > Algorand's4 approach is to only allow online stake to participate in the protocol.\n> > > > > > > > > > > > Theoretically, This means that keys holding funds have to be online in order for them to author blocks when they are chosen.\n> > > > > > > > > > > > Of course in reality no one wants to keep their coin holding keys online so in Alogorand you can authorize a set of \"participation keys\"1 that will be used to create blocks on your coin holding key's behalf.\n> > > > > > > > > > > > Hopefully you've spotted the problem.\n> > > > > > > > > > > > You can send your participation keys to any malicious party with a nice website (see random example 2) offering you a good return.\n> > > > > > > > > > > > Damn it's still Proof-of-SquareSpace!\n> > > > > > > > > > > > The minor advantage is that at least the participation keys expire after a certain amount of time so eventually the SquareSpace attacker will lose their hold on consensus.\n> > > > > > > > > > > > Importantly there is also less junk on the blockchain because the participation keys are delegated off-chain and so are not making as much of a mess.\n> > > > > > > > > > > >\n> > > > > > > > > > > > ### Conclusion\n> > > > > > > > > > > >\n> > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > > If we allow delegation then we open up a new social attack surface and it degenerates to Proof-of-SquareSpace.\n> > > > > > > > > > > > For a \"digital gold\" like system like Bitcoin we optimize for simplicity and desperately want to avoid extraneous responsibilities for the holder of the coin.\n> > > > > > > > > > > > After all, gold is an inert element on the periodic table that doesn't confer responsibilities on the holder to maintain the quality of all the other bars of gold out there.\n> > > > > > > > > > > > Bitcoin feels like this too and in many ways is more inert and beautifully boring than gold.\n> > > > > > > > > > > > For Bitcoin to succeed I think we need to keep it that way and Proof-of-Stake makes everything a bit too exciting.\n> > > > > > > > > > > > I suppose in the end the market will decide what is real digital gold and whether these bad technical trade offs are worth being able to say it uses less electricity. It goes without saying that making bad technical decisions to appease the current political climate is an anathema to Bitcoin.\n> > > > > > > > > > > > Would be interested to know if you or others think differently on these points.\n> > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > LL\n> > > > > > > > > > > > On Fri, 21 May 2021 at 19:21, Billy Tetrud via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > >\n> > > > > > > > > > > > > I think there is a lot of misinformation and bias against Proof of Stake. Yes there have been lots of shady coins that use insecure PoS mechanisms. Yes there have been massive issues with distribution of PoS coins (of course there have also been massive issues with PoW coins as well). However, I want to remind everyone that there is a difference between \"proved to be impossible\" and \"have not achieved recognized success yet\". Most of the arguments levied against PoS are out of date or rely on unproven assumptions or extrapolation from the analysis of a particular PoS system. I certainly don't think we should experiment with bitcoin by switching to PoS, but from my research, it seems very likely that there is a proof of stake consensus protocol we could build that has substantially higher security (cost / capital required to execute an attack) while at the same time costing far less resources (which do translate to fees on the network) without compromising any of the critical security properties bitcoin relies on. I think the critical piece of this is the disagreements around hardcoded checkpoints, which is a critical piece solving attacks that could be levied on a PoS chain, and how that does (or doesn't) affect the security model.\n> > > > > > > > > > > > > @Eric Your proof of stake fallacy seems to be saying that PoS is worse when a 51% attack happens. While I agree, I think that line of thinking omits important facts:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > -   The capital required to 51% attack a PoS chain can be made substantially greater than on a PoS chain.\n> > > > > > > > > > > > > -   The capital the attacker stands to lose can be substantially greater as well if the attack is successful.\n> > > > > > > > > > > > > -   The effectiveness of paying miners to raise the honest fraction of miners above 50% may be quite bad.\n> > > > > > > > > > > > > -   Allowing a 51% attack is already unacceptable. It should be considered whether what happens in the case of a 51% may not be significantly different. The currency would likely be critically damaged in a 51% attack regardless of consensus mechanism.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Proof-of-stake tends towards oligopolistic control\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > People repeat this often, but the facts support this. There is no centralization pressure in any proof of stake mechanism that I'm aware of. IE if you have 10 times as much coin that you use to mint blocks, you should expect to earn 10x as much minting revenue - not more than 10x. By contrast, proof of work does in fact have clear centralization pressure - this is not disputed. Our goal in relation to that is to ensure that the centralization pressure remains insignifiant. Proof of work also clearly has a lot more barriers to entry than any proof of stake system does. Both of these mean the tendency towards oligopolistic control is worse for PoW.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Energy usage, in-and-of-itself, is nothing to be ashamed of!!\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > I certainly agree. Bitcoin's energy usage at the moment is I think quite warranted. However, the question is: can we do substantially better. I think if we can, we probably should... eventually.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Proof of Stake is only resilient to \u2153 of the network demonstrating a Byzantine Fault, whilst Proof of Work is resilient up to the \u00bd threshold\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > I see no mention of this in the pos.pdf you linked to. I'm not aware of any proof that all PoS systems have a failure threshold of 1/3. I know that staking systems like Casper do in fact have that 1/3 requirement. However there are PoS designs that should exceed that up to nearly 50% as far as I'm aware. Proof of work is not in fact resilient up to the 1/2 threshold in the way you would think. IE, if 100% of miners are currently honest and have a collective 100 exahashes/s hashpower, an attacker does not need to obtain 100 exahashes/s, but actually only needs to accumulate 50 exahashes/s. This is because as the attacker accumulates hashpower, it drives honest miners out of the market as the difficulty increases to beyond what is economically sustainable. Also, its been shown that the best proof of work can do is require an attacker to obtain 33% of the hashpower because of the selfish mining attack discussed in depth in this paper: https://arxiv.org/abs/1311.0243. Together, both of these things reduce PoW's security by a factor of about 83% (1 - 50%*33%).\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Proof of Stake requires other trade-offs which are incompatible with Bitcoin's objective (to be a trustless digital cash) \u2014 specifically the famous \"security vs. liveness\" guarantee\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > Do you have a good source that talks about why you think proof of stake cannot be used for a trustless digital cash?\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > You cannot gain tokens without someone choosing to give up those coins - a form of permission.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > This is not a practical constraint. Just like in mining, some nodes may reject you, but there will likely be more that will accept you, some sellers may reject you, but most would accept your money as payment for bitcoins. I don't think requiring the \"permission\" of one of millions of people in the market can be reasonably considered a \"permissioned currency\".\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > 2.  Proof of stake must have a trusted means of timestamping to regulate overproduction of blocks\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > Both PoW and PoS could mine/mint blocks twice as fast if everyone agreed to double their clock speeds. Both systems rely on an honest majority sticking to standard time.\n> > > > > > > > > > > > > On Wed, May 19, 2021 at 5:32 AM Michael Dubrovsky via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Ah sorry, I didn't realize this was, in fact, a different thread! :)\n> > > > > > > > > > > > > > On Wed, May 19, 2021 at 10:07 AM Michael Dubrovsky mike at powx.org wrote:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Folks, I suggest we keep the discussion to PoW, oPoW, and the BIP itself. PoS, VDFs, and so on are interesting but I guess there are other threads going on these topics already where they would be relevant.\n> > > > > > > > > > > > > > > Also, it's important to distinguish between oPoW and these other \"alternatives\" to Hashcash. oPoW is a true Proof of Work that doesn't alter the core game theory or security assumptions of Hashcash and actually contains SHA (can be SHA3, SHA256, etc hash is interchangeable).\n> > > > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > > > Mike\n> > > > > > > > > > > > > > > On Tue, May 18, 2021 at 4:55 PM Erik Aronesty via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > 1.  i never suggested vdf's to replace pow.\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > 2.  my suggestion was specifically in the context of a working\n> > > > > > > > > > > > > > > >     proof-of-burn protocol\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   vdfs used only for timing (not block height)\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   blind-burned coins of a specific age used to replace proof of work\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   the required \"work\" per block would simply be a competition to\n> > > > > > > > > > > > > > > >     acquire rewards, and so miners would have to burn coins, well in\n> > > > > > > > > > > > > > > >     advance, and hope that their burned coins got rewarded in some far\n> > > > > > > > > > > > > > > >     future\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   the point of burned coins is to mimic, in every meaningful way, the\n> > > > > > > > > > > > > > > >     value gained from proof of work... without some of the security\n> > > > > > > > > > > > > > > >     drawbacks\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   the miner risks losing all of his burned coins (like all miners risk\n> > > > > > > > > > > > > > > >     losing their work in each block)\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   new burns can't be used\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   old burns age out (like ASICs do)\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > -   other requirements on burns might be needed to properly mirror the\n> > > > > > > > > > > > > > > >     properties of PoW and the incentives Bitcoin uses to mine honestly.\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > 3.  i do believe it is possible that a \"burned coin + vdf system\"\n> > > > > > > > > > > > > > > >     might be more secure in the long run, and that if the entire space\n> > > > > > > > > > > > > > > >     agreed that such an endeavor was worthwhile, a test net could be spun\n> > > > > > > > > > > > > > > >     up, and a hard-fork could be initiated.\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > 4.  i would never suggest such a thing unless i believed it was\n> > > > > > > > > > > > > > > >     possible that consensus was possible. so no, this is not an \"alt\n> > > > > > > > > > > > > > > >     coin\"\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > On Tue, May 18, 2021 at 10:02 AM Zac Greenwood zachgrw at gmail.com wrote:\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > Hi ZmnSCPxj,\n> > > > > > > > > > > > > > > > > Please note that I am not suggesting VDFs as a means to save energy, but solely as a means to make the time between blocks more constant.\n> > > > > > > > > > > > > > > > > Zac\n> > > > > > > > > > > > > > > > > On Tue, 18 May 2021 at 12:42, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > Good morning Zac,\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > VDFs might enable more constant block times, for instance by having a two-step PoW:\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > 1.  Use a VDF that takes say 9 minutes to resolve (VDF being subject to difficulty adjustments similar to the as-is). As per the property of VDFs, miners are able show proof of work.\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > 2.  Use current PoW mechanism with lower difficulty so finding a block takes 1 minute on average, again subject to as-is difficulty adjustments.\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > As a result, variation in block times will be greatly reduced.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > As I understand it, another weakness of VDFs is that they are not inherently progress-free (their sequential nature prevents that; they are inherently progress-requiring).\n> > > > > > > > > > > > > > > > > > Thus, a miner which focuses on improving the amount of energy that it can pump into the VDF circuitry (by overclocking and freezing the circuitry), could potentially get into a winner-takes-all situation, possibly leading to even worse competition and even more energy consumption.\n> > > > > > > > > > > > > > > > > > After all, if you can start mining 0.1s faster than the competition, that is a 0.1s advantage where only you can mine in the entire world.\n> > > > > > > > > > > > > > > > > > Regards,\n> > > > > > > > > > > > > > > > > > ZmnSCPxj\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > >\n> > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "befreeandopen",
                "date": "2021-06-01T19:26:36",
                "message_text_only": "Comments inline.\n\n\n\n> > Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n>\n> Given your example, if !BTC is needed to burn, that's a $50k\n> investment in an ASIC needed to mine a block. That's not anywhere\n> near current levels. It's not even approaching the current PoW. A\n> $50k investment to be a large amount of hash power is ... well,\n> somewhere more than 10 years ago.\n\nThis is +- true with todays prices, that was not my point. We all know that today's total block revenue is nowhere near 1 BTC. If it is say 7 BTC, then we would expect that the miners spend roughly just about 7 BTC to produce the block - in long term, on average. Right? Today, this 7 BTC is supposed to be some average of investment into the mining rig, the building in which the rig exists (or its rent) and then some electricity. So when I said 1 BTC I meant that amount of BTC that is the sum of the block subsidy and fees at the time of this imagined switch to PoB. Use 7 BTC if you want to talk today. And yes, that seems very weak. But can you explain why it is not the case after switching to PoB that the cost of producing the block should roughly converge to to the revenue? Because I do not see why would miners spend more than what they can earn.\n\n\n\n\n\n> My original proof-of-burn concept was designed to mimic ASICs as much\n> as possible:\n>\n> 1.  large initial investment (burn to acquire power)\n> 2.  continued investment (burn to activate power in each block, lost if\n>     block is not found)\n>\n>     Ideally, the attacker would have to keep burning for each lottery\n>     ticket, which can only be used once. Committing that burn to a\n>     particular block for example.\n>\n>     Any attack you propose for a \"assumed well designed PoB\" can also attack PoW.\n>     Any attack you propose for a \"assumed well designed PoB\" can also attack PoS.\n>\n>     But there are some things PoB can do that PoS can't... which is really\n>     my original point.\n\nThis is the problem that I wanted to avoid. You refer to some \"my original PoB\", but I am strictly talking about the concept described in wiki because nothing else was provided to me. If we do not have a reference description of what you are talking about the debate will quickly turn into the classical debate with PoS supporters - I explain an attack and they \"patch it\", creating problem elsewhere. Then I explain an attack against that and they patch it there. And this goes infinitely.\n\nSo if there is some other version, better one than the one described in wiki, please let me know. If there is not, there is nothing to talk about really. You'd first need to define your model properly and describe very details of how it should work and then we can analyze it. It does not make much sense to me to analyze a ghost protocol that I always only see a tiny part of.\n\nFor example here above in the quoted text you mention some continual lost (if block is not found). If that is not the exponential decay as described in the wiki, then I have no idea what it is. I do not say that I can't imagine for myself what it could be, but it is up to you to define it, so we can be sure we are talking about the same thing.\n\nSame with those early unblinding of burns - nothing about that in the wiki, so that concept is alien to me and it can not be subject to a debate before it is precisely described.\n\n\n\n\n>\n>\n> -   sunk costs/lost investment\n> -   \"hashpower\" is \"offline\", and cannot be seized.\n>\n>     On Tue, Jun 1, 2021 at 4:21 AM befreeandopen\n>     befreeandopen at protonmail.com wrote:\n>\n>\n> > Erik, thanks for the link. So referring to https://en.bitcoin.it/wiki/Proof_of_burn, I do not really understand how this is supposed to be that much better over many proof of stake proposals. If there is more research on PoB, please note I'm not commenting on that as I only read this wiki article and my comments are purely related to this only.\n> > I hope we can agree that the idea with manual insertion of entropy every week can be discarded, but at the same time I don't think it is a crucial point of the whole idea. So we can just focus on the rest of it.\n> > Then the whole idea seems just like certain proof of stake implementations with just small differences, which I try to summarize:\n> >\n> > -   in PoB, in order to use the coin for block production, you burn it in the past and wait some time -- in the certain PoS I'm talking about, in order to use the coin, you do not move the coin for some time - so in both there is the same idea - you somehow make the coin eligible for the block creation process by first doing some action followed by some inaction for some time; the difference here is that if later you use such coin in PoS, then after waiting more time, you can use the coin again (for whatever purpose), while in PoB the coin is gone forever (it is burned); this does not seem to be fundamentally different\n> >\n> > -   in PoB, the author suggests there is an exponential decay of the power of the coin to create a block; in some PoS schemas, there historically was an era of so called CoinAge mechanism, which was somewhat inverse to this exponential decay, it was that the coin gets more power the older it is untouched, some implementations were for linear increase in the power, some exponential. Usually there was a certain limit - i.e. a maximum power the coin may have reached. It turned out quite quickly that such property is making attacks easier. PoB reverses the idea, but I don't think that helps that much. In any case, there seems to be an optimal period of time for each used coin, in both PoS and PoB, where the coin is most suitable for block production. I admit PoB version is better, but the crucial property here is that some coins are more powerful than other.\n> >\n> > -   in both PoB and PoS it seems there is linear increase of the ability of the coin to produce blocks with the size of the coin (more BTC you burn/stake, the better your chance)\n> >\n> >\n> > This characteristic of PoB does not suggest that it would have that much different properties than PoS. So it should suffer from same problems as PoS. Namely, the problems I see now, with the given proposal from wiki, are:\n> >\n> > -   there seems to be lack of definition of the heaviest chain and difficulty adjustment - this seems crucial, but likely solvable, I'm just saying it is importantly missing in the description\n> >\n> > -   there seems to be a problem with nothing at stake (nothing at burn maybe?) - How that can be? Again, it seems that every burned coin can be used for free checks at any time after the initial waiting period. These free checks are indeed free and are the core of the nothing at stake problem in PoS. You seem to make those checks for free and you seem to be able to use those burned coins to create arbitrary number of forks build on any parent blocks of your choice, not just the last block of the heaviest chain. I can't see at the moment how is this different from PoS nothing at stake problem. Maybe you can explain?\n> >\n> > -   it seems to me that there is a trivial attack against the scheme by a wealthy attacker. Suppose a common size of the burn is 1 BTC per block, suppose you define the heaviest chain rule somehow in relation to total number of burned coins or the cumulative \"strength\" of the \"lowest\" hashes, then you can just burn 20 UTXOs, each being 10 BTC in value, so you spent 200 BTC on this attack, but you are in very strong position because after you wait the needed time, you should be able to do pretty nasty reorg. Suppose that the main chain is A-B-C-D-E-F, so what you do at that point is that you just \"try for free\" all your 20 UTXOs, whether or not they can build on top of block A (which has 5 confs on top, F is the tip of the main chain). Since you have big UTXOs, your chances should be good, of course you can always try many times because you have a \"lottery ticket\" for every timestampt t. So with this you should be able, with good chance, to find such B' and then you have 19 UTXOs remaining to try to build on B' in the same way. I can't see what prevents this attack in the described scheme.\n> >\n> > -   the ability to retroactively try all different kids of timestamp t seems devastating - you again get super easy and somewhat cheap attack (due to nothing at burn problem) that allows you to rewrite even long chains at will.\n> >\n> >\n> > Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n> > Sent with ProtonMail Secure Email.\n> > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > On Friday, May 28, 2021 9:06 PM, Erik Aronesty erik at q32.com wrote:\n> >\n> > > best writeup i know of is here:\n> > > https://en.bitcoin.it/wiki/Proof_of_burn\n> > > no formal proposals or proofs that i know of.\n> > > On Fri, May 28, 2021 at 10:40 AM befreeandopen\n> > > befreeandopen at protonmail.com wrote:\n> > >\n> > > > Erik, I am sorry, I have little knowledge about proof-of-burn, I never found it interesting up until now. Some of your recent claims seem quite strong to me and I'd like to read more.\n> > > > Forgive me if this has been mentioned recently, but is there a full specification of the concept you are referring to? I don't mean just the basic idea description (that much is clear to me), I mean a fully detailed proposal or technical documentation that would give me a precise information about what exactly it is that you are talking about.\n> > > > Sent with ProtonMail Secure Email.\n> > > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > > On Wednesday, May 26, 2021 11:07 PM, Erik Aronesty erik at q32.com wrote:\n> > > >\n> > > > > note: the \"nothing at stake\" problem you propose is not broken for\n> > > > > proof-of-burn, because the attacker\n> > > > > a) has no idea which past transactions are burns\n> > > > > b) has no way to use his mining power, even 5%, to maliciously improve\n> > > > > his odds of being selected\n> > > > > On Wed, May 26, 2021 at 9:12 AM befreeandopen\n> > > > > befreeandopen at protonmail.com wrote:\n> > > > >\n> > > > > > @befreeandopen I guess I misunderstood your selfish minting attack. Let me make sure I understand it. You're saying it would go as follows?:\n> > > > > >\n> > > > > > 1.  The malicious actor comes across an opportunity to mint the next 3 blocks. But they hold off and don't release their blocks just yet.\n> > > > > > 2.  They receive a new block minted by someone else.\n> > > > > > 3.  The malicious actor then chooses to release their other 2 blocks on on the second from the top block if it gives them more blocks in the future than minting on the top block. And instead lets the top block proceed if it gives them more blocks in the future (also figuring in the 3 blocks they're missing out on minting).\n> > > > > > 4.  Profit!\n> > > > > >\n> > > > > > The problem with this attack is that any self respecting PoS system wouldn't have the information available for minters to know how blocks will affect their future prospects of minting. Otherwise this would introduce the problem of stake grinding. This can be done using collaborative randomness (where numbers from many parties are combined to create a random number that no individual party could predict). In fact, that's what the Casper protocol does to decide quorums. In a non quorum case, you can do something like record a hash of a number in the block header, and then have a second step to release that number later. Rewards can be given can be used to ensure minters act honestly here by minting messages that release these numbers and not releasing their secret numbers too early.\n> > > > > > Yes, you misunderstood it. First, let me say that the above thoughts of yours are incorrect, at least for non-quorum case. Since the transition in the blockchain system from S1 to S2 is only by adding new block, and since stakers always need to be able to decide whether or not they can add the next block, it follows that if a staker creates a new block locally, she can decide whether the new state allows her to add another block on top. As you mentioned, this COULD introduce problem of staking, that you are incorrect in that it is a necessity. Usual prevention of the grinding problem in this case is that an \"old enough\" source of randomness applies for the current block production process. Of course this, as it is typical for PoS, introduces other problems, but let's discard those.\n> > > > > > I will try to explain in detail what you misunderstood before. You start with a chain ending with blocks A-B-C, C being the top, the common feature of PoS system (non-quorum), roughly speaking, is that if N is the total amount of coins that participate in the staking process to create a new block on top of C (let's call that D), then a participant having K*N amount of stake has chance K to be the one who will create the next stake. In other words, the power of stakers is supposed to be linear in the system - you own 10 coins gives you 10x the chance of finding block over someone who has 1 coin.\n> > > > > > What i was claiming is that using the technique I have described, this linearity is violated. Why? Well, it works for honest stakers among the competition of honest stakers - they really do have the chance of K to find the next block. However, the attacker, using nothing at stake, checks her ability to build block D (at some timestamp). If she is successful, she does not propagate D immediately, but instead she also checks whether she can build on top of B and on top of A. Since with every new timestamp, usually, there is a new chance to build the block, it is not uncommon that she finds she is indeed able to build such block C' on top of B. Here it is likely t(C') > t(C) as the attacker has relatively low stake. Note that in order to produce such C', she not only could have tried the current timestamp t(D), but also all previous timestamps up to t(B) (usually that's the consensus rule, but it may depend on a specific consensus). So her chance to produce such C' is greater than her previous chance of producing C (which chance was limited by other stakers in the system and the discovery of block C by one of them). Now suppose that she found such C' and now she continues by trying to prolong this chain by finding D'. And again here, it is quite likely that her chance to find such D' is greater than was her chance of finding D because again there are likely multiple timestamps she could try. This all was possible just because nothing at stake allows you to just try if you can produce a block in certain state of block chain or not. Now if she actually was able to find D', she discards D and only publishes chain A-B-C'-D', which can not be punished despite the fact that she indeed produced two different forks. She can not be punished because this production was local and only the final result of A-B-C'-D' was published, in which case she gained an extra block over the honest strategy which would only give her block D.\n> > > > > > Fun fact tho: there is an attack called the \"selfish mining attack\" for proof of work, and it reduces the security of PoW by at least 1/3rd.\n> > > > > > How is that relevant to our discussion? This is known research that has nothing to do with PoS except that it is often worse on PoS.\n> > > > > >\n> > > > > > > the problem is not as hard as you think\n> > > > > >\n> > > > > > I don't claim to know just how hard finding the IP address associated with a bitcoin address is. However, the DOS risk can be solved more completely by only allowing the owner of coins themselves to know whether they can mint a block. Eg by determining whether someone can mint a block based on their public key hidden behind hashes (as normal in addresses). Only when someone does in fact mint a block do they reveal their hidden public key in order to prove they are allowed to mint the block.\n> > > > > > This is true, but you are mixing quorum and non-quorum systems. My objection here was towards such system where I specifically said that the list of producers for next epoch is known up front and you confirmed that this is what you meant with \"quorum\" system. So in such system, I claimed, the known producer is the only target at any given point of time. This of course does not apply to any other type of system where future producers are not known. No need to dispute, again, something that was not claimed.\n> > > > > >\n> > > > > > > I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message)\n> > > > > >\n> > > > > > I'm glad we agree there. Perhaps I misunderstood what you meant by \"you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere.\"\n> > > > > > Perhaps you should quote the full sentence and not just a part of it:\n> > > > > > \"Of course you can always change the rules in a way that a certain specific attack is not doable, but you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere, or you have not solved it completely.\"\n> > > > > > You can parse this as: (CREATE PROBLEM ELSEWHERE) OR (NOT SOLVE IT COMPLETELY)\n> > > > > > In case of the punishment it was meant to be the not solve it completely part.\n> > > > > > Also \"typically\" does not imply always.\n> > > > > > But this parsing of English sentences for you seems very off topic here. My point is, in context of Bitcoin, reject such unsupported claims that PoS is a reasonable alternative to PoW, let's stick to that.\n> > > > > >\n> > > > > > > As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake\n> > > > > >\n> > > > > > Well, if you're in the closed system of the cryptocurrency, sure. But we don't live in that closed system. Minters will earn some ROI from minting just like any other financial activity. Others may find more success spending their time doing things other than figuring out how to mint coins. In that case, they'll be able to earn more coin that they could later decide to use to mint blocks if they decide to.\n> > > > > > This only supports the point I was making. Since the optimal scenario with all existing coins participating is just theoretical, the attacker's position will ever so improve. It seems we are in agreement here, great.\n> > > > > >\n> > > > > > > Just because of the above we must reject PoS as being critically insecure\n> > > > > >\n> > > > > > I think the only thing we can conclude from this is that you have come up with an insecure proof of stake protocol. I don't see how anything you've brought up amounts to substantial evidence that all possible PoS protocols are insecure.\n> > > > > > I have not come up with anything. I'm afraid you've not realized the burden of proof is on your side if you vouch for a design that is not believed and trusted to be secure. It is up to you to show that you know how to solve every problem that people throw at you. So far we have just demonstrated that your claim that nothing at stake is solved was unjustified. You have not described a system that would solve it (and not introduce critical DDOS attack vector as it is in quorum based systems - per the prior definition of such systems).\n> > > > > > Of course the list of problems of PoS systems do not end with just nothing at stake, but it is good enough example that by itself prevents its adoption in decentralized consensus. No need to go to other hard problems without solving nothing at stake.\n> > > > > > On Tue, May 25, 2021 at 11:10 AM befreeandopen befreeandopen at protonmail.com wrote:\n> > > > > >\n> > > > > > > @befreeandopen \" An attacker can calculate whether or not she can prolong this chain or not and if so with what timestamp.\"\n> > > > > > > The scenario you describe would only be likely to happen at all if the malicious actor has a very large fraction of the stake - probably quite close to 50%. At that point, you're talking about a 51% attack, not the nothing at stake problem. The nothing at stake problem is the problem where anyone will mint on any chain. Its clear that if there's a substantial punishment for minting on chains other than the one that eventually wins, every minter without a significant fraction of the stake will be honest and not attempt to mint on old blocks or support someone else's attempt to mint on old blocks (until and if it becomes the heaviest chain). Because the attacker would need probably >45% of the active stake (take a look at the reasoning here for a deeper analysis of that statement), I don't agree that punishment is not a sufficient mitigation of the nothing at stake problem. To exploit the nothing at stake problem, you basically need to 51% attack, at which point you've exceeded the operating conditions of the system, so of course its gonna have problems, just like a 51% attack would cause with PoW.\n> > > > > > > This is not at all the case. The attacker benefits using the described technique at any size of the stake and significantly so with just 5% of the stake. By significantly, I do not mean that the attacker is able to completely take control the network (in short term), but rather that the attacker has significant advantage in the number of blocks she creates compared to what she \"should be able to create\". This means the attacker's stake increases significantly faster than of the honest nodes, which in long term is very serious in PoS system. If you believe close to 50% is needed for that, you need to redo your math. So no, you are wrong stating that \"to exploit nothing at stake problem you basically need to 51% attack\". It is rather the opposite - eventually, nothing at stake attack leads to ability to perform 51% attack.\n> > > > > > >\n> > > > > > > > I am not sure if this is what you call quorum-based PoS\n> > > > > > >\n> > > > > > > Yes, pre-selected minters is exactly what I mean by that.\n> > > > > > >\n> > > > > > > > it allows the attacker to know who to attack at which point with powerful DDOS in order to hurt liveness of such system\n> > > > > > >\n> > > > > > > Just like in bitcoin, associating keys with IP addresses isn't generally an easy thing to do on the fly like that. If you know someone's IP address, you can target them. But if you only know their address or public key, the reverse isn't as easy. With a quorum-based PoS system, you can see their public key and address, but finding out their IP to DOS would be a huge challenge I think.\n> > > > > > > I do not dispute that the problem is not trivial, but the problem is not as hard as you think. The network graph analysis is a known technique and it is not trivial, but not very hard either. Introducing a large number of nodes to the system to achieve very good success rate of analysis of area of origin of blocks is doable and has been done in past. So again, I very much disagree with your conclusion that this is somehow secure. It is absolutely insecure.\n> > > > > > > Note, tho, that quorum-based PoS generally also have punishments as part of the protocol. The introduction of punishments do indeed handily solve the nothing at stake problem. And you didn't mention a single problem that the punishments introduce that weren't already there before punishments. There are tradeoffs with introducing punishments (eg in some cases you might punish honest actors), but they are minor in comparison to solving the nothing at stake problem.\n> > > > > > > While I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message), it does introduce additional complexity which may introduce problem, but more importantly, while it slightly improves resistance against the nothing at stake attack, it solves absolutely nothing. Your claim is based on wrong claim of needed close to 50% stake, but that could not be farther from the truth. It is not true even in optimal conditions when all participants of the network stake or delegate their stake. These optimal conditions rarely, if ever, occur. And that's another thing that we have not mention in our debate, so please allow me to introduce another problem to PoS.\n> > > > > > > Consider what is needed for such optimal conditions to occur - all coins are always part of the stake, which means that they need to somehow automatically part of the staking process even when they are moved. But in many PoS systems you usually require some age (in terms of confirmations) of the coin before you allow it to be used for participation in staking process and that is for a good reason - to prevent various grinding attacks. In some systems the coin must be specifically registered before it can be staked, in others, simply waiting for enough confirmations enables you to stake with the coin. I am not sure if there is a system which does not have this cooling period for a coin that has been moved. Maybe it is possible though, but AFAIK it is not common and not battle tested feature.\n> > > > > > > Then if we admit that achieving the optimal condition is rather theoretical. Then if we do not have the optimal condition, it means that a staker with K% of the total available supply increases it's percentage over time to some amounts >K%. As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake (if there are any) and relative to all other stakers who make mistakes or who are not wealthy enough to afford not selling any position ever. But powerful attacker is exactly in such position and thus she will gain significance in such a system. The technique I have described, and that you mistakenly think is viable only with huge amounts of stake, only puts the attacker to even greater advantage. But even without the described attack (which exploits nothing at stake), the PoS system converges to a system more and more controlled by powerful entity, which we can assume is the attacker.\n> > > > > > > So I don't think it is at all misleading to claim that \"nothing at stake\" is a solved problem. I do in fact mean that the solutions to that problem don't introduce any other problems with anywhere near the same level of significance.\n> > > > > > > It still stands as truly misleading claim. I disagree that introducing DDOS opportunity with medium level of difficulty for the attacker to implement it, in case of \"quorum-based PoS\" is not a problem anywhere near the same level of significance. Such an attack vector allows you to turn off the network if you spend some time and money. That is hardly acceptable.\n> > > > > > > Just because of the above we must reject PoS as being critically insecure until someone invents and demonstrates an actual way of solving these issues.\n> > > > > > > On Tue, May 25, 2021 at 3:00 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > >\n> > > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > > >\n> > > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > > >\n> > > > > > > > could be right. the original idea was to have burns decay over time,\n> > > > > > > > like ASIC's.\n> > > > > > > > anyway the point was not that \"i had a magic formula\"\n> > > > > > > > the point was that proof of burn is almost always better than proof of\n> > > > > > > > stake - simply because the \"proof\" is on-chain, not sitting on a node\n> > > > > > > > somewhere waiting to be stolen.\n> > > > > > > > On Mon, May 24, 2021 at 9:53 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > >\n> > > > > > > > > Is this the kind of proof of burn you're talking about?\n> > > > > > > > >\n> > > > > > > > > > if i have a choice between two chains, one longer and one shorter, i can only choose one... deterministically\n> > > > > > > > >\n> > > > > > > > > What prevents you from attempting to mine block 553 on both chains?\n> > > > > > > > >\n> > > > > > > > > > miners have a very strong, long-term, investment in the stability of the chain.\n> > > > > > > > >\n> > > > > > > > > Yes, but the same can be said of any coin, even ones that do have the nothing at stake problem. This isn't sufficient tho because the chain is a common good, and the tragedy of the commons holds for it.\n> > > > > > > > >\n> > > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > > > >\n> > > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > > > >\n> > > > > > > > > > i can imagine scenarios where large stakeholders can collude to punish smaller stakeholders simply to drive them out of business, for example\n> > > > > > > > >\n> > > > > > > > > Are you talking about a 51% attack? This is possible in any decentralized cryptocurrency.\n> > > > > > > > > On Mon, May 24, 2021 at 11:49 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > >\n> > > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > > > I'm fuzzy on how proof of burn works.\n> > > > > > > > > >\n> > > > > > > > > > when you burn coins, you burn them to be used at a future particular\n> > > > > > > > > > block height: so if i'm burning for block 553, i can only use them to\n> > > > > > > > > > mine block 553. if i have a choice between two chains, one longer\n> > > > > > > > > > and one shorter, i can only choose one... deterministically, for that\n> > > > > > > > > > burn: the chain with the height 553. if we fix the \"lead time\" for\n> > > > > > > > > > burned coins to be weeks or even months in advance, miners have a very\n> > > > > > > > > > strong, long-term, investment in the stability of the chain.\n> > > > > > > > > > therefore there is no \"nothing at stake\" problem. it's\n> > > > > > > > > > deterministic, so miners have no choice. they can only choose the\n> > > > > > > > > > transactions that go into the block. they cannot choose which chain\n> > > > > > > > > > to mine, and it's time-locked, so rollbacks and instability always\n> > > > > > > > > > hurt miners the most.\n> > > > > > > > > > the \"punishment\" systems of PoS are \"weird at best\", certainly\n> > > > > > > > > > unproven. i can imagine scenarios where large stakeholders can\n> > > > > > > > > > collude to punish smaller stakeholders simply to drive them out of\n> > > > > > > > > > business, for example. and then you have to put checks in place to\n> > > > > > > > > > prevent that, and more checks for those prevention system...\n> > > > > > > > > > in PoB, there is no complexity. simpler systems like this are\n> > > > > > > > > > typically more secure.\n> > > > > > > > > > PoB also solves problems caused by \"energy dependence\", which could\n> > > > > > > > > > lead to state monopolies on mining (like the new Bitcoin Mining\n> > > > > > > > > > Council). these consortiums, if state sanctioned, could become a\n> > > > > > > > > > source of censorship, for example. Since PoB doesn't require you to\n> > > > > > > > > > have a live, well-connected node, it's harder to censor & harder to\n> > > > > > > > > > trace.\n> > > > > > > > > > Eliminating this weakness seems to be in the best interests of\n> > > > > > > > > > existing stakeholders\n> > > > > > > > > > On Mon, May 24, 2021 at 4:44 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > > > >\n> > > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > > >\n> > > > > > > > > > > Well.. the coins to be burned need to be online when they're burned. But yes, only a small fraction of the total coins need to be online.\n> > > > > > > > > > >\n> > > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > >\n> > > > > > > > > > > So you're saying that if say someone tries to mine a block on a shorter chain, that requires them to send a transaction burning their coins, and that transaction could also be spent on the longest chain, which means their coins are burned even if the chain they tried to mine on doesn't win? I'm fuzzy on how proof of burn works.\n> > > > > > > > > > >\n> > > > > > > > > > > > proof of burn can be more secure than proof-of-stake\n> > > > > > > > > > >\n> > > > > > > > > > > FYI, proof of stake can be done without the \"nothing at stake\" problem. You can simply punish people who mint on shorter chains (by rewarding people who publish proofs of this happening on the main chain). In quorum-based PoS, you can punish people in the quorum that propose or sign multiple blocks for the same height. The \"nothing at stake\" problem is a solved problem at this point for PoS.\n> > > > > > > > > > > On Mon, May 24, 2021 at 3:47 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > > > >\n> > > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > >\n> > > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > > > >\n> > > > > > > > > > > > > how does proof of burn solve the \"nothing at stake\" problem in your view?\n> > > > > > > > > > > >\n> > > > > > > > > > > > definition of nothing at stake: in the event of a fork, whether the\n> > > > > > > > > > > > fork is accidental or a malicious, the optimal strategy for any miner\n> > > > > > > > > > > > is to mine on every chain, so that the miner gets their reward no\n> > > > > > > > > > > > matter which fork wins. indeed in proof-of-stake, the proofs are\n> > > > > > > > > > > > published on the very chains mines, so the incentive is magnified.\n> > > > > > > > > > > > in proof-of-burn, your burn investment is always \"at stake\", any\n> > > > > > > > > > > > redaction can result in a loss-of-burn, because burns can be tied,\n> > > > > > > > > > > > precisely, to block-heights\n> > > > > > > > > > > > as a result, miners no longer have an incentive to mine all chains\n> > > > > > > > > > > > in this way proof of burn can be more secure than proof-of-stake, and\n> > > > > > > > > > > > even more secure than proof of work\n> > > > > > > > > > > >\n> > > > > > > > > > > > >\n> > > > > > > > > > > >\n> > > > > > > > > > > > On Sun, May 23, 2021 at 3:52 AM Lloyd Fournier via bitcoin-dev\n> > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > >\n> > > > > > > > > > > > > Hi Billy,\n> > > > > > > > > > > > > I was going to write a post which started by dismissing many of the weak arguments that are made against PoS made in this thread and elsewhere.\n> > > > > > > > > > > > > Although I don't agree with all your points you have done a decent job here so I'll focus on the second part: why I think Proof-of-Stake is inappropriate for a Bitcoin-like system.\n> > > > > > > > > > > > > Proof of stake is not fit for purpose for a global settlement layer in a pure digital asset (i.e. \"digital gold\") which is what Bitcoin is trying to be.\n> > > > > > > > > > > > > PoS necessarily gives responsibilities to the holders of coins that they do not want and cannot handle.\n> > > > > > > > > > > > > In Bitcoin, large unsophisticated coin holders can put their coins in cold storage without a second thought given to the health of the underlying ledger.\n> > > > > > > > > > > > > As much as hardcore Bitcoiners try to convince them to run their own node, most don't, and that's perfectly acceptable.\n> > > > > > > > > > > > > At no point do their personal decisions affect the underlying consensus -- it only affects their personal security assurance (not that of the system itself).\n> > > > > > > > > > > > > In PoS systems this clean separation of responsibilities does not exist.\n> > > > > > > > > > > > > I think that the more rigorously studied PoS protocols will work fine within the security claims made in their papers.\n> > > > > > > > > > > > > People who believe that these protocols are destined for catastrophic consensus failure are certainly in for a surprise.\n> > > > > > > > > > > > > But the devil is in the detail.\n> > > > > > > > > > > > > Let's look at what the implications of using the leading proof of stake protocols would have on Bitcoin:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > ### Proof of SquareSpace (Cardano, Polkdadot)\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > Cardano is a UTXO based PoS coin based on Ouroboros Praos3 with an inbuilt on-chain delegation system5.\n> > > > > > > > > > > > > In these protocols, coin holders who do not want to run their node with their hot keys in it delegate it to a \"Stake Pool\".\n> > > > > > > > > > > > > I call the resulting system Proof-of-SquareSpace since most will choose a pool by looking around for one with a nice website and offering the largest share of the block reward.\n> > > > > > > > > > > > > On the surface this might sound no different than someone with an mining rig shopping around for a good mining pool but there are crucial differences:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > 1.  The person making the decision is forced into it just because they own the currency -- someone with a mining rig has purchased it with the intent to make profit by participating in consensus.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > 2.  When you join a mining pool your systems are very much still online. You are just partaking in a pool to reduce your profit variance. You still see every block that you help create and you never help create a block without seeing it first.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > 3.  If by SquareSpace sybil attack you gain a dishonest majority and start censoring transactions how are the users meant to redelegate their stake to honest pools?\n> > > > > > > > > > > > >     I guess they can just send a transaction delegating to another pool...oh wait I guess that might be censored too! This seems really really bad.\n> > > > > > > > > > > > >     In Bitcoin, miners can just join a different pool at a whim. There is nothing the attacker can do to stop them. A temporary dishonest majority heals relatively well.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > There is another severe disadvantage to this on-chain delegation system: every UTXO must indicate which staking account this UTXO belongs to so the appropriate share of block rewards can be transferred there.\n> > > > > > > > > > > > > Being able to associate every UTXO to an account ruins one of the main privacy advantages of the UTXO model.\n> > > > > > > > > > > > > It also grows the size of the blockchain significantly.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > ### \"Pure\" proof of stake (Algorand)\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > Algorand's4 approach is to only allow online stake to participate in the protocol.\n> > > > > > > > > > > > > Theoretically, This means that keys holding funds have to be online in order for them to author blocks when they are chosen.\n> > > > > > > > > > > > > Of course in reality no one wants to keep their coin holding keys online so in Alogorand you can authorize a set of \"participation keys\"1 that will be used to create blocks on your coin holding key's behalf.\n> > > > > > > > > > > > > Hopefully you've spotted the problem.\n> > > > > > > > > > > > > You can send your participation keys to any malicious party with a nice website (see random example 2) offering you a good return.\n> > > > > > > > > > > > > Damn it's still Proof-of-SquareSpace!\n> > > > > > > > > > > > > The minor advantage is that at least the participation keys expire after a certain amount of time so eventually the SquareSpace attacker will lose their hold on consensus.\n> > > > > > > > > > > > > Importantly there is also less junk on the blockchain because the participation keys are delegated off-chain and so are not making as much of a mess.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > ### Conclusion\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > > > If we allow delegation then we open up a new social attack surface and it degenerates to Proof-of-SquareSpace.\n> > > > > > > > > > > > > For a \"digital gold\" like system like Bitcoin we optimize for simplicity and desperately want to avoid extraneous responsibilities for the holder of the coin.\n> > > > > > > > > > > > > After all, gold is an inert element on the periodic table that doesn't confer responsibilities on the holder to maintain the quality of all the other bars of gold out there.\n> > > > > > > > > > > > > Bitcoin feels like this too and in many ways is more inert and beautifully boring than gold.\n> > > > > > > > > > > > > For Bitcoin to succeed I think we need to keep it that way and Proof-of-Stake makes everything a bit too exciting.\n> > > > > > > > > > > > > I suppose in the end the market will decide what is real digital gold and whether these bad technical trade offs are worth being able to say it uses less electricity. It goes without saying that making bad technical decisions to appease the current political climate is an anathema to Bitcoin.\n> > > > > > > > > > > > > Would be interested to know if you or others think differently on these points.\n> > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > LL\n> > > > > > > > > > > > > On Fri, 21 May 2021 at 19:21, Billy Tetrud via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > I think there is a lot of misinformation and bias against Proof of Stake. Yes there have been lots of shady coins that use insecure PoS mechanisms. Yes there have been massive issues with distribution of PoS coins (of course there have also been massive issues with PoW coins as well). However, I want to remind everyone that there is a difference between \"proved to be impossible\" and \"have not achieved recognized success yet\". Most of the arguments levied against PoS are out of date or rely on unproven assumptions or extrapolation from the analysis of a particular PoS system. I certainly don't think we should experiment with bitcoin by switching to PoS, but from my research, it seems very likely that there is a proof of stake consensus protocol we could build that has substantially higher security (cost / capital required to execute an attack) while at the same time costing far less resources (which do translate to fees on the network) without compromising any of the critical security properties bitcoin relies on. I think the critical piece of this is the disagreements around hardcoded checkpoints, which is a critical piece solving attacks that could be levied on a PoS chain, and how that does (or doesn't) affect the security model.\n> > > > > > > > > > > > > > @Eric Your proof of stake fallacy seems to be saying that PoS is worse when a 51% attack happens. While I agree, I think that line of thinking omits important facts:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > -   The capital required to 51% attack a PoS chain can be made substantially greater than on a PoS chain.\n> > > > > > > > > > > > > > -   The capital the attacker stands to lose can be substantially greater as well if the attack is successful.\n> > > > > > > > > > > > > > -   The effectiveness of paying miners to raise the honest fraction of miners above 50% may be quite bad.\n> > > > > > > > > > > > > > -   Allowing a 51% attack is already unacceptable. It should be considered whether what happens in the case of a 51% may not be significantly different. The currency would likely be critically damaged in a 51% attack regardless of consensus mechanism.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Proof-of-stake tends towards oligopolistic control\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > People repeat this often, but the facts support this. There is no centralization pressure in any proof of stake mechanism that I'm aware of. IE if you have 10 times as much coin that you use to mint blocks, you should expect to earn 10x as much minting revenue - not more than 10x. By contrast, proof of work does in fact have clear centralization pressure - this is not disputed. Our goal in relation to that is to ensure that the centralization pressure remains insignifiant. Proof of work also clearly has a lot more barriers to entry than any proof of stake system does. Both of these mean the tendency towards oligopolistic control is worse for PoW.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Energy usage, in-and-of-itself, is nothing to be ashamed of!!\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > I certainly agree. Bitcoin's energy usage at the moment is I think quite warranted. However, the question is: can we do substantially better. I think if we can, we probably should... eventually.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Proof of Stake is only resilient to \u2153 of the network demonstrating a Byzantine Fault, whilst Proof of Work is resilient up to the \u00bd threshold\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > I see no mention of this in the pos.pdf you linked to. I'm not aware of any proof that all PoS systems have a failure threshold of 1/3. I know that staking systems like Casper do in fact have that 1/3 requirement. However there are PoS designs that should exceed that up to nearly 50% as far as I'm aware. Proof of work is not in fact resilient up to the 1/2 threshold in the way you would think. IE, if 100% of miners are currently honest and have a collective 100 exahashes/s hashpower, an attacker does not need to obtain 100 exahashes/s, but actually only needs to accumulate 50 exahashes/s. This is because as the attacker accumulates hashpower, it drives honest miners out of the market as the difficulty increases to beyond what is economically sustainable. Also, its been shown that the best proof of work can do is require an attacker to obtain 33% of the hashpower because of the selfish mining attack discussed in depth in this paper: https://arxiv.org/abs/1311.0243. Together, both of these things reduce PoW's security by a factor of about 83% (1 - 50%*33%).\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Proof of Stake requires other trade-offs which are incompatible with Bitcoin's objective (to be a trustless digital cash) \u2014 specifically the famous \"security vs. liveness\" guarantee\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > Do you have a good source that talks about why you think proof of stake cannot be used for a trustless digital cash?\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > You cannot gain tokens without someone choosing to give up those coins - a form of permission.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > This is not a practical constraint. Just like in mining, some nodes may reject you, but there will likely be more that will accept you, some sellers may reject you, but most would accept your money as payment for bitcoins. I don't think requiring the \"permission\" of one of millions of people in the market can be reasonably considered a \"permissioned currency\".\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > 2.  Proof of stake must have a trusted means of timestamping to regulate overproduction of blocks\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > Both PoW and PoS could mine/mint blocks twice as fast if everyone agreed to double their clock speeds. Both systems rely on an honest majority sticking to standard time.\n> > > > > > > > > > > > > > On Wed, May 19, 2021 at 5:32 AM Michael Dubrovsky via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Ah sorry, I didn't realize this was, in fact, a different thread! :)\n> > > > > > > > > > > > > > > On Wed, May 19, 2021 at 10:07 AM Michael Dubrovsky mike at powx.org wrote:\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Folks, I suggest we keep the discussion to PoW, oPoW, and the BIP itself. PoS, VDFs, and so on are interesting but I guess there are other threads going on these topics already where they would be relevant.\n> > > > > > > > > > > > > > > > Also, it's important to distinguish between oPoW and these other \"alternatives\" to Hashcash. oPoW is a true Proof of Work that doesn't alter the core game theory or security assumptions of Hashcash and actually contains SHA (can be SHA3, SHA256, etc hash is interchangeable).\n> > > > > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > > > > Mike\n> > > > > > > > > > > > > > > > On Tue, May 18, 2021 at 4:55 PM Erik Aronesty via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > 1.  i never suggested vdf's to replace pow.\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > 2.  my suggestion was specifically in the context of a working\n> > > > > > > > > > > > > > > > >     proof-of-burn protocol\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   vdfs used only for timing (not block height)\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   blind-burned coins of a specific age used to replace proof of work\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   the required \"work\" per block would simply be a competition to\n> > > > > > > > > > > > > > > > >     acquire rewards, and so miners would have to burn coins, well in\n> > > > > > > > > > > > > > > > >     advance, and hope that their burned coins got rewarded in some far\n> > > > > > > > > > > > > > > > >     future\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   the point of burned coins is to mimic, in every meaningful way, the\n> > > > > > > > > > > > > > > > >     value gained from proof of work... without some of the security\n> > > > > > > > > > > > > > > > >     drawbacks\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   the miner risks losing all of his burned coins (like all miners risk\n> > > > > > > > > > > > > > > > >     losing their work in each block)\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   new burns can't be used\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   old burns age out (like ASICs do)\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > -   other requirements on burns might be needed to properly mirror the\n> > > > > > > > > > > > > > > > >     properties of PoW and the incentives Bitcoin uses to mine honestly.\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > 3.  i do believe it is possible that a \"burned coin + vdf system\"\n> > > > > > > > > > > > > > > > >     might be more secure in the long run, and that if the entire space\n> > > > > > > > > > > > > > > > >     agreed that such an endeavor was worthwhile, a test net could be spun\n> > > > > > > > > > > > > > > > >     up, and a hard-fork could be initiated.\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > 4.  i would never suggest such a thing unless i believed it was\n> > > > > > > > > > > > > > > > >     possible that consensus was possible. so no, this is not an \"alt\n> > > > > > > > > > > > > > > > >     coin\"\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > On Tue, May 18, 2021 at 10:02 AM Zac Greenwood zachgrw at gmail.com wrote:\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > Hi ZmnSCPxj,\n> > > > > > > > > > > > > > > > > > Please note that I am not suggesting VDFs as a means to save energy, but solely as a means to make the time between blocks more constant.\n> > > > > > > > > > > > > > > > > > Zac\n> > > > > > > > > > > > > > > > > > On Tue, 18 May 2021 at 12:42, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > Good morning Zac,\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > VDFs might enable more constant block times, for instance by having a two-step PoW:\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > 1.  Use a VDF that takes say 9 minutes to resolve (VDF being subject to difficulty adjustments similar to the as-is). As per the property of VDFs, miners are able show proof of work.\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > 2.  Use current PoW mechanism with lower difficulty so finding a block takes 1 minute on average, again subject to as-is difficulty adjustments.\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > As a result, variation in block times will be greatly reduced.\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > As I understand it, another weakness of VDFs is that they are not inherently progress-free (their sequential nature prevents that; they are inherently progress-requiring).\n> > > > > > > > > > > > > > > > > > > Thus, a miner which focuses on improving the amount of energy that it can pump into the VDF circuitry (by overclocking and freezing the circuitry), could potentially get into a winner-takes-all situation, possibly leading to even worse competition and even more energy consumption.\n> > > > > > > > > > > > > > > > > > > After all, if you can start mining 0.1s faster than the competition, that is a 0.1s advantage where only you can mine in the entire world.\n> > > > > > > > > > > > > > > > > > > Regards,\n> > > > > > > > > > > > > > > > > > > ZmnSCPxj\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-01T20:28:45",
                "message_text_only": ">  the classical debate with PoS supporters - I explain an attack and they \"patch it\", creating problem elsewhere\n\ni agree.   my original post was:\n\n\"assume that we can accurately mimic the investment in ASIC's and the\nexpenditure of electricity with \"burns\" of coin representing that\ninvestment\"\n\nonly given that assumption can i state with confidence:\n\n- proof of burn is better than proof of stake\n\nand only because\n\n- your stake is sitting on a node somewhere, able to be stolen\n\neverything else is speculation about my original assumption.\n\noverall a good PoB would have a\n\n- large, up front buy-in event (buying the ASIC)\n- delay function (timing)\n- block-specific burn (electricity use... lost if burn is not selected)\n- burns linked to specific buy-ins (can only burn the ASIC's i bought in)\n- max-burn === max-buy-in (ASICs have capacity)\n- max-burn decays over time (ASIC's become less valuable over time)\n\nblock-height === sum of block-specific burn\n\nOn Tue, Jun 1, 2021 at 3:26 PM befreeandopen\n<befreeandopen at protonmail.com> wrote:\n>\n> Comments inline.\n>\n>\n>\n> > > Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n> >\n> > Given your example, if !BTC is needed to burn, that's a $50k\n> > investment in an ASIC needed to mine a block. That's not anywhere\n> > near current levels. It's not even approaching the current PoW. A\n> > $50k investment to be a large amount of hash power is ... well,\n> > somewhere more than 10 years ago.\n>\n> This is +- true with todays prices, that was not my point. We all know that today's total block revenue is nowhere near 1 BTC. If it is say 7 BTC, then we would expect that the miners spend roughly just about 7 BTC to produce the block - in long term, on average. Right? Today, this 7 BTC is supposed to be some average of investment into the mining rig, the building in which the rig exists (or its rent) and then some electricity. So when I said 1 BTC I meant that amount of BTC that is the sum of the block subsidy and fees at the time of this imagined switch to PoB. Use 7 BTC if you want to talk today. And yes, that seems very weak. But can you explain why it is not the case after switching to PoB that the cost of producing the block should roughly converge to to the revenue? Because I do not see why would miners spend more than what they can earn.\n>\n>\n>\n>\n>\n> > My original proof-of-burn concept was designed to mimic ASICs as much\n> > as possible:\n> >\n> > 1.  large initial investment (burn to acquire power)\n> > 2.  continued investment (burn to activate power in each block, lost if\n> >     block is not found)\n> >\n> >     Ideally, the attacker would have to keep burning for each lottery\n> >     ticket, which can only be used once. Committing that burn to a\n> >     particular block for example.\n> >\n> >     Any attack you propose for a \"assumed well designed PoB\" can also attack PoW.\n> >     Any attack you propose for a \"assumed well designed PoB\" can also attack PoS.\n> >\n> >     But there are some things PoB can do that PoS can't... which is really\n> >     my original point.\n>\n> This is the problem that I wanted to avoid. You refer to some \"my original PoB\", but I am strictly talking about the concept described in wiki because nothing else was provided to me. If we do not have a reference description of what you are talking about the debate will quickly turn into the classical debate with PoS supporters - I explain an attack and they \"patch it\", creating problem elsewhere. Then I explain an attack against that and they patch it there. And this goes infinitely.\n>\n> So if there is some other version, better one than the one described in wiki, please let me know. If there is not, there is nothing to talk about really. You'd first need to define your model properly and describe very details of how it should work and then we can analyze it. It does not make much sense to me to analyze a ghost protocol that I always only see a tiny part of.\n>\n> For example here above in the quoted text you mention some continual lost (if block is not found). If that is not the exponential decay as described in the wiki, then I have no idea what it is. I do not say that I can't imagine for myself what it could be, but it is up to you to define it, so we can be sure we are talking about the same thing.\n>\n> Same with those early unblinding of burns - nothing about that in the wiki, so that concept is alien to me and it can not be subject to a debate before it is precisely described.\n>\n>\n>\n>\n> >\n> >\n> > -   sunk costs/lost investment\n> > -   \"hashpower\" is \"offline\", and cannot be seized.\n> >\n> >     On Tue, Jun 1, 2021 at 4:21 AM befreeandopen\n> >     befreeandopen at protonmail.com wrote:\n> >\n> >\n> > > Erik, thanks for the link. So referring to https://en.bitcoin.it/wiki/Proof_of_burn, I do not really understand how this is supposed to be that much better over many proof of stake proposals. If there is more research on PoB, please note I'm not commenting on that as I only read this wiki article and my comments are purely related to this only.\n> > > I hope we can agree that the idea with manual insertion of entropy every week can be discarded, but at the same time I don't think it is a crucial point of the whole idea. So we can just focus on the rest of it.\n> > > Then the whole idea seems just like certain proof of stake implementations with just small differences, which I try to summarize:\n> > >\n> > > -   in PoB, in order to use the coin for block production, you burn it in the past and wait some time -- in the certain PoS I'm talking about, in order to use the coin, you do not move the coin for some time - so in both there is the same idea - you somehow make the coin eligible for the block creation process by first doing some action followed by some inaction for some time; the difference here is that if later you use such coin in PoS, then after waiting more time, you can use the coin again (for whatever purpose), while in PoB the coin is gone forever (it is burned); this does not seem to be fundamentally different\n> > >\n> > > -   in PoB, the author suggests there is an exponential decay of the power of the coin to create a block; in some PoS schemas, there historically was an era of so called CoinAge mechanism, which was somewhat inverse to this exponential decay, it was that the coin gets more power the older it is untouched, some implementations were for linear increase in the power, some exponential. Usually there was a certain limit - i.e. a maximum power the coin may have reached. It turned out quite quickly that such property is making attacks easier. PoB reverses the idea, but I don't think that helps that much. In any case, there seems to be an optimal period of time for each used coin, in both PoS and PoB, where the coin is most suitable for block production. I admit PoB version is better, but the crucial property here is that some coins are more powerful than other.\n> > >\n> > > -   in both PoB and PoS it seems there is linear increase of the ability of the coin to produce blocks with the size of the coin (more BTC you burn/stake, the better your chance)\n> > >\n> > >\n> > > This characteristic of PoB does not suggest that it would have that much different properties than PoS. So it should suffer from same problems as PoS. Namely, the problems I see now, with the given proposal from wiki, are:\n> > >\n> > > -   there seems to be lack of definition of the heaviest chain and difficulty adjustment - this seems crucial, but likely solvable, I'm just saying it is importantly missing in the description\n> > >\n> > > -   there seems to be a problem with nothing at stake (nothing at burn maybe?) - How that can be? Again, it seems that every burned coin can be used for free checks at any time after the initial waiting period. These free checks are indeed free and are the core of the nothing at stake problem in PoS. You seem to make those checks for free and you seem to be able to use those burned coins to create arbitrary number of forks build on any parent blocks of your choice, not just the last block of the heaviest chain. I can't see at the moment how is this different from PoS nothing at stake problem. Maybe you can explain?\n> > >\n> > > -   it seems to me that there is a trivial attack against the scheme by a wealthy attacker. Suppose a common size of the burn is 1 BTC per block, suppose you define the heaviest chain rule somehow in relation to total number of burned coins or the cumulative \"strength\" of the \"lowest\" hashes, then you can just burn 20 UTXOs, each being 10 BTC in value, so you spent 200 BTC on this attack, but you are in very strong position because after you wait the needed time, you should be able to do pretty nasty reorg. Suppose that the main chain is A-B-C-D-E-F, so what you do at that point is that you just \"try for free\" all your 20 UTXOs, whether or not they can build on top of block A (which has 5 confs on top, F is the tip of the main chain). Since you have big UTXOs, your chances should be good, of course you can always try many times because you have a \"lottery ticket\" for every timestampt t. So with this you should be able, with good chance, to find such B' and then you have 19 UTXOs remaining to try to build on B' in the same way. I can't see what prevents this attack in the described scheme.\n> > >\n> > > -   the ability to retroactively try all different kids of timestamp t seems devastating - you again get super easy and somewhat cheap attack (due to nothing at burn problem) that allows you to rewrite even long chains at will.\n> > >\n> > >\n> > > Could you explain what am I missing here, because this actually does not seem better, but rather worse than some PoS schemes?\n> > > Sent with ProtonMail Secure Email.\n> > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > On Friday, May 28, 2021 9:06 PM, Erik Aronesty erik at q32.com wrote:\n> > >\n> > > > best writeup i know of is here:\n> > > > https://en.bitcoin.it/wiki/Proof_of_burn\n> > > > no formal proposals or proofs that i know of.\n> > > > On Fri, May 28, 2021 at 10:40 AM befreeandopen\n> > > > befreeandopen at protonmail.com wrote:\n> > > >\n> > > > > Erik, I am sorry, I have little knowledge about proof-of-burn, I never found it interesting up until now. Some of your recent claims seem quite strong to me and I'd like to read more.\n> > > > > Forgive me if this has been mentioned recently, but is there a full specification of the concept you are referring to? I don't mean just the basic idea description (that much is clear to me), I mean a fully detailed proposal or technical documentation that would give me a precise information about what exactly it is that you are talking about.\n> > > > > Sent with ProtonMail Secure Email.\n> > > > > \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> > > > > On Wednesday, May 26, 2021 11:07 PM, Erik Aronesty erik at q32.com wrote:\n> > > > >\n> > > > > > note: the \"nothing at stake\" problem you propose is not broken for\n> > > > > > proof-of-burn, because the attacker\n> > > > > > a) has no idea which past transactions are burns\n> > > > > > b) has no way to use his mining power, even 5%, to maliciously improve\n> > > > > > his odds of being selected\n> > > > > > On Wed, May 26, 2021 at 9:12 AM befreeandopen\n> > > > > > befreeandopen at protonmail.com wrote:\n> > > > > >\n> > > > > > > @befreeandopen I guess I misunderstood your selfish minting attack. Let me make sure I understand it. You're saying it would go as follows?:\n> > > > > > >\n> > > > > > > 1.  The malicious actor comes across an opportunity to mint the next 3 blocks. But they hold off and don't release their blocks just yet.\n> > > > > > > 2.  They receive a new block minted by someone else.\n> > > > > > > 3.  The malicious actor then chooses to release their other 2 blocks on on the second from the top block if it gives them more blocks in the future than minting on the top block. And instead lets the top block proceed if it gives them more blocks in the future (also figuring in the 3 blocks they're missing out on minting).\n> > > > > > > 4.  Profit!\n> > > > > > >\n> > > > > > > The problem with this attack is that any self respecting PoS system wouldn't have the information available for minters to know how blocks will affect their future prospects of minting. Otherwise this would introduce the problem of stake grinding. This can be done using collaborative randomness (where numbers from many parties are combined to create a random number that no individual party could predict). In fact, that's what the Casper protocol does to decide quorums. In a non quorum case, you can do something like record a hash of a number in the block header, and then have a second step to release that number later. Rewards can be given can be used to ensure minters act honestly here by minting messages that release these numbers and not releasing their secret numbers too early.\n> > > > > > > Yes, you misunderstood it. First, let me say that the above thoughts of yours are incorrect, at least for non-quorum case. Since the transition in the blockchain system from S1 to S2 is only by adding new block, and since stakers always need to be able to decide whether or not they can add the next block, it follows that if a staker creates a new block locally, she can decide whether the new state allows her to add another block on top. As you mentioned, this COULD introduce problem of staking, that you are incorrect in that it is a necessity. Usual prevention of the grinding problem in this case is that an \"old enough\" source of randomness applies for the current block production process. Of course this, as it is typical for PoS, introduces other problems, but let's discard those.\n> > > > > > > I will try to explain in detail what you misunderstood before. You start with a chain ending with blocks A-B-C, C being the top, the common feature of PoS system (non-quorum), roughly speaking, is that if N is the total amount of coins that participate in the staking process to create a new block on top of C (let's call that D), then a participant having K*N amount of stake has chance K to be the one who will create the next stake. In other words, the power of stakers is supposed to be linear in the system - you own 10 coins gives you 10x the chance of finding block over someone who has 1 coin.\n> > > > > > > What i was claiming is that using the technique I have described, this linearity is violated. Why? Well, it works for honest stakers among the competition of honest stakers - they really do have the chance of K to find the next block. However, the attacker, using nothing at stake, checks her ability to build block D (at some timestamp). If she is successful, she does not propagate D immediately, but instead she also checks whether she can build on top of B and on top of A. Since with every new timestamp, usually, there is a new chance to build the block, it is not uncommon that she finds she is indeed able to build such block C' on top of B. Here it is likely t(C') > t(C) as the attacker has relatively low stake. Note that in order to produce such C', she not only could have tried the current timestamp t(D), but also all previous timestamps up to t(B) (usually that's the consensus rule, but it may depend on a specific consensus). So her chance to produce such C' is greater than her previous chance of producing C (which chance was limited by other stakers in the system and the discovery of block C by one of them). Now suppose that she found such C' and now she continues by trying to prolong this chain by finding D'. And again here, it is quite likely that her chance to find such D' is greater than was her chance of finding D because again there are likely multiple timestamps she could try. This all was possible just because nothing at stake allows you to just try if you can produce a block in certain state of block chain or not. Now if she actually was able to find D', she discards D and only publishes chain A-B-C'-D', which can not be punished despite the fact that she indeed produced two different forks. She can not be punished because this production was local and only the final result of A-B-C'-D' was published, in which case she gained an extra block over the honest strategy which would only give her block D.\n> > > > > > > Fun fact tho: there is an attack called the \"selfish mining attack\" for proof of work, and it reduces the security of PoW by at least 1/3rd.\n> > > > > > > How is that relevant to our discussion? This is known research that has nothing to do with PoS except that it is often worse on PoS.\n> > > > > > >\n> > > > > > > > the problem is not as hard as you think\n> > > > > > >\n> > > > > > > I don't claim to know just how hard finding the IP address associated with a bitcoin address is. However, the DOS risk can be solved more completely by only allowing the owner of coins themselves to know whether they can mint a block. Eg by determining whether someone can mint a block based on their public key hidden behind hashes (as normal in addresses). Only when someone does in fact mint a block do they reveal their hidden public key in order to prove they are allowed to mint the block.\n> > > > > > > This is true, but you are mixing quorum and non-quorum systems. My objection here was towards such system where I specifically said that the list of producers for next epoch is known up front and you confirmed that this is what you meant with \"quorum\" system. So in such system, I claimed, the known producer is the only target at any given point of time. This of course does not apply to any other type of system where future producers are not known. No need to dispute, again, something that was not claimed.\n> > > > > > >\n> > > > > > > > I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message)\n> > > > > > >\n> > > > > > > I'm glad we agree there. Perhaps I misunderstood what you meant by \"you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere.\"\n> > > > > > > Perhaps you should quote the full sentence and not just a part of it:\n> > > > > > > \"Of course you can always change the rules in a way that a certain specific attack is not doable, but you should not omit to mention that by doing so, typically, you have introduced another problem elsewhere, or you have not solved it completely.\"\n> > > > > > > You can parse this as: (CREATE PROBLEM ELSEWHERE) OR (NOT SOLVE IT COMPLETELY)\n> > > > > > > In case of the punishment it was meant to be the not solve it completely part.\n> > > > > > > Also \"typically\" does not imply always.\n> > > > > > > But this parsing of English sentences for you seems very off topic here. My point is, in context of Bitcoin, reject such unsupported claims that PoS is a reasonable alternative to PoW, let's stick to that.\n> > > > > > >\n> > > > > > > > As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake\n> > > > > > >\n> > > > > > > Well, if you're in the closed system of the cryptocurrency, sure. But we don't live in that closed system. Minters will earn some ROI from minting just like any other financial activity. Others may find more success spending their time doing things other than figuring out how to mint coins. In that case, they'll be able to earn more coin that they could later decide to use to mint blocks if they decide to.\n> > > > > > > This only supports the point I was making. Since the optimal scenario with all existing coins participating is just theoretical, the attacker's position will ever so improve. It seems we are in agreement here, great.\n> > > > > > >\n> > > > > > > > Just because of the above we must reject PoS as being critically insecure\n> > > > > > >\n> > > > > > > I think the only thing we can conclude from this is that you have come up with an insecure proof of stake protocol. I don't see how anything you've brought up amounts to substantial evidence that all possible PoS protocols are insecure.\n> > > > > > > I have not come up with anything. I'm afraid you've not realized the burden of proof is on your side if you vouch for a design that is not believed and trusted to be secure. It is up to you to show that you know how to solve every problem that people throw at you. So far we have just demonstrated that your claim that nothing at stake is solved was unjustified. You have not described a system that would solve it (and not introduce critical DDOS attack vector as it is in quorum based systems - per the prior definition of such systems).\n> > > > > > > Of course the list of problems of PoS systems do not end with just nothing at stake, but it is good enough example that by itself prevents its adoption in decentralized consensus. No need to go to other hard problems without solving nothing at stake.\n> > > > > > > On Tue, May 25, 2021 at 11:10 AM befreeandopen befreeandopen at protonmail.com wrote:\n> > > > > > >\n> > > > > > > > @befreeandopen \" An attacker can calculate whether or not she can prolong this chain or not and if so with what timestamp.\"\n> > > > > > > > The scenario you describe would only be likely to happen at all if the malicious actor has a very large fraction of the stake - probably quite close to 50%. At that point, you're talking about a 51% attack, not the nothing at stake problem. The nothing at stake problem is the problem where anyone will mint on any chain. Its clear that if there's a substantial punishment for minting on chains other than the one that eventually wins, every minter without a significant fraction of the stake will be honest and not attempt to mint on old blocks or support someone else's attempt to mint on old blocks (until and if it becomes the heaviest chain). Because the attacker would need probably >45% of the active stake (take a look at the reasoning here for a deeper analysis of that statement), I don't agree that punishment is not a sufficient mitigation of the nothing at stake problem. To exploit the nothing at stake problem, you basically need to 51% attack, at which point you've exceeded the operating conditions of the system, so of course its gonna have problems, just like a 51% attack would cause with PoW.\n> > > > > > > > This is not at all the case. The attacker benefits using the described technique at any size of the stake and significantly so with just 5% of the stake. By significantly, I do not mean that the attacker is able to completely take control the network (in short term), but rather that the attacker has significant advantage in the number of blocks she creates compared to what she \"should be able to create\". This means the attacker's stake increases significantly faster than of the honest nodes, which in long term is very serious in PoS system. If you believe close to 50% is needed for that, you need to redo your math. So no, you are wrong stating that \"to exploit nothing at stake problem you basically need to 51% attack\". It is rather the opposite - eventually, nothing at stake attack leads to ability to perform 51% attack.\n> > > > > > > >\n> > > > > > > > > I am not sure if this is what you call quorum-based PoS\n> > > > > > > >\n> > > > > > > > Yes, pre-selected minters is exactly what I mean by that.\n> > > > > > > >\n> > > > > > > > > it allows the attacker to know who to attack at which point with powerful DDOS in order to hurt liveness of such system\n> > > > > > > >\n> > > > > > > > Just like in bitcoin, associating keys with IP addresses isn't generally an easy thing to do on the fly like that. If you know someone's IP address, you can target them. But if you only know their address or public key, the reverse isn't as easy. With a quorum-based PoS system, you can see their public key and address, but finding out their IP to DOS would be a huge challenge I think.\n> > > > > > > > I do not dispute that the problem is not trivial, but the problem is not as hard as you think. The network graph analysis is a known technique and it is not trivial, but not very hard either. Introducing a large number of nodes to the system to achieve very good success rate of analysis of area of origin of blocks is doable and has been done in past. So again, I very much disagree with your conclusion that this is somehow secure. It is absolutely insecure.\n> > > > > > > > Note, tho, that quorum-based PoS generally also have punishments as part of the protocol. The introduction of punishments do indeed handily solve the nothing at stake problem. And you didn't mention a single problem that the punishments introduce that weren't already there before punishments. There are tradeoffs with introducing punishments (eg in some cases you might punish honest actors), but they are minor in comparison to solving the nothing at stake problem.\n> > > > > > > > While I agree that introduction of punishment itself does not imply introducing a problem elsewhere (which I did not claim if you reread my previous message), it does introduce additional complexity which may introduce problem, but more importantly, while it slightly improves resistance against the nothing at stake attack, it solves absolutely nothing. Your claim is based on wrong claim of needed close to 50% stake, but that could not be farther from the truth. It is not true even in optimal conditions when all participants of the network stake or delegate their stake. These optimal conditions rarely, if ever, occur. And that's another thing that we have not mention in our debate, so please allow me to introduce another problem to PoS.\n> > > > > > > > Consider what is needed for such optimal conditions to occur - all coins are always part of the stake, which means that they need to somehow automatically part of the staking process even when they are moved. But in many PoS systems you usually require some age (in terms of confirmations) of the coin before you allow it to be used for participation in staking process and that is for a good reason - to prevent various grinding attacks. In some systems the coin must be specifically registered before it can be staked, in others, simply waiting for enough confirmations enables you to stake with the coin. I am not sure if there is a system which does not have this cooling period for a coin that has been moved. Maybe it is possible though, but AFAIK it is not common and not battle tested feature.\n> > > > > > > > Then if we admit that achieving the optimal condition is rather theoretical. Then if we do not have the optimal condition, it means that a staker with K% of the total available supply increases it's percentage over time to some amounts >K%. As long as the staker makes sure (which is not that hard) that she does not miss a chance to create a block, her significance in the system will always increase in time. It will increase relative to all normal users who do not stake (if there are any) and relative to all other stakers who make mistakes or who are not wealthy enough to afford not selling any position ever. But powerful attacker is exactly in such position and thus she will gain significance in such a system. The technique I have described, and that you mistakenly think is viable only with huge amounts of stake, only puts the attacker to even greater advantage. But even without the described attack (which exploits nothing at stake), the PoS system converges to a system more and more controlled by powerful entity, which we can assume is the attacker.\n> > > > > > > > So I don't think it is at all misleading to claim that \"nothing at stake\" is a solved problem. I do in fact mean that the solutions to that problem don't introduce any other problems with anywhere near the same level of significance.\n> > > > > > > > It still stands as truly misleading claim. I disagree that introducing DDOS opportunity with medium level of difficulty for the attacker to implement it, in case of \"quorum-based PoS\" is not a problem anywhere near the same level of significance. Such an attack vector allows you to turn off the network if you spend some time and money. That is hardly acceptable.\n> > > > > > > > Just because of the above we must reject PoS as being critically insecure until someone invents and demonstrates an actual way of solving these issues.\n> > > > > > > > On Tue, May 25, 2021 at 3:00 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > >\n> > > > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > > > >\n> > > > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > > > >\n> > > > > > > > > could be right. the original idea was to have burns decay over time,\n> > > > > > > > > like ASIC's.\n> > > > > > > > > anyway the point was not that \"i had a magic formula\"\n> > > > > > > > > the point was that proof of burn is almost always better than proof of\n> > > > > > > > > stake - simply because the \"proof\" is on-chain, not sitting on a node\n> > > > > > > > > somewhere waiting to be stolen.\n> > > > > > > > > On Mon, May 24, 2021 at 9:53 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > > >\n> > > > > > > > > > Is this the kind of proof of burn you're talking about?\n> > > > > > > > > >\n> > > > > > > > > > > if i have a choice between two chains, one longer and one shorter, i can only choose one... deterministically\n> > > > > > > > > >\n> > > > > > > > > > What prevents you from attempting to mine block 553 on both chains?\n> > > > > > > > > >\n> > > > > > > > > > > miners have a very strong, long-term, investment in the stability of the chain.\n> > > > > > > > > >\n> > > > > > > > > > Yes, but the same can be said of any coin, even ones that do have the nothing at stake problem. This isn't sufficient tho because the chain is a common good, and the tragedy of the commons holds for it.\n> > > > > > > > > >\n> > > > > > > > > > > you burn them to be used at a future particular block height\n> > > > > > > > > >\n> > > > > > > > > > This sounds exploitable. It seems like an attacker could simply focus all their burns on a particular set of 6 blocks to double spend, minimizing their cost of attack.\n> > > > > > > > > >\n> > > > > > > > > > > i can imagine scenarios where large stakeholders can collude to punish smaller stakeholders simply to drive them out of business, for example\n> > > > > > > > > >\n> > > > > > > > > > Are you talking about a 51% attack? This is possible in any decentralized cryptocurrency.\n> > > > > > > > > > On Mon, May 24, 2021 at 11:49 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > > >\n> > > > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > > > > I'm fuzzy on how proof of burn works.\n> > > > > > > > > > >\n> > > > > > > > > > > when you burn coins, you burn them to be used at a future particular\n> > > > > > > > > > > block height: so if i'm burning for block 553, i can only use them to\n> > > > > > > > > > > mine block 553. if i have a choice between two chains, one longer\n> > > > > > > > > > > and one shorter, i can only choose one... deterministically, for that\n> > > > > > > > > > > burn: the chain with the height 553. if we fix the \"lead time\" for\n> > > > > > > > > > > burned coins to be weeks or even months in advance, miners have a very\n> > > > > > > > > > > strong, long-term, investment in the stability of the chain.\n> > > > > > > > > > > therefore there is no \"nothing at stake\" problem. it's\n> > > > > > > > > > > deterministic, so miners have no choice. they can only choose the\n> > > > > > > > > > > transactions that go into the block. they cannot choose which chain\n> > > > > > > > > > > to mine, and it's time-locked, so rollbacks and instability always\n> > > > > > > > > > > hurt miners the most.\n> > > > > > > > > > > the \"punishment\" systems of PoS are \"weird at best\", certainly\n> > > > > > > > > > > unproven. i can imagine scenarios where large stakeholders can\n> > > > > > > > > > > collude to punish smaller stakeholders simply to drive them out of\n> > > > > > > > > > > business, for example. and then you have to put checks in place to\n> > > > > > > > > > > prevent that, and more checks for those prevention system...\n> > > > > > > > > > > in PoB, there is no complexity. simpler systems like this are\n> > > > > > > > > > > typically more secure.\n> > > > > > > > > > > PoB also solves problems caused by \"energy dependence\", which could\n> > > > > > > > > > > lead to state monopolies on mining (like the new Bitcoin Mining\n> > > > > > > > > > > Council). these consortiums, if state sanctioned, could become a\n> > > > > > > > > > > source of censorship, for example. Since PoB doesn't require you to\n> > > > > > > > > > > have a live, well-connected node, it's harder to censor & harder to\n> > > > > > > > > > > trace.\n> > > > > > > > > > > Eliminating this weakness seems to be in the best interests of\n> > > > > > > > > > > existing stakeholders\n> > > > > > > > > > > On Mon, May 24, 2021 at 4:44 PM Billy Tetrud billy.tetrud at gmail.com wrote:\n> > > > > > > > > > >\n> > > > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > > > >\n> > > > > > > > > > > > Well.. the coins to be burned need to be online when they're burned. But yes, only a small fraction of the total coins need to be online.\n> > > > > > > > > > > >\n> > > > > > > > > > > > > your burn investment is always \"at stake\", any redaction can result in a loss-of-burn, because burns can be tied, precisely, to block-heights\n> > > > > > > > > > > >\n> > > > > > > > > > > > So you're saying that if say someone tries to mine a block on a shorter chain, that requires them to send a transaction burning their coins, and that transaction could also be spent on the longest chain, which means their coins are burned even if the chain they tried to mine on doesn't win? I'm fuzzy on how proof of burn works.\n> > > > > > > > > > > >\n> > > > > > > > > > > > > proof of burn can be more secure than proof-of-stake\n> > > > > > > > > > > >\n> > > > > > > > > > > > FYI, proof of stake can be done without the \"nothing at stake\" problem. You can simply punish people who mint on shorter chains (by rewarding people who publish proofs of this happening on the main chain). In quorum-based PoS, you can punish people in the quorum that propose or sign multiple blocks for the same height. The \"nothing at stake\" problem is a solved problem at this point for PoS.\n> > > > > > > > > > > > On Mon, May 24, 2021 at 3:47 AM Erik Aronesty erik at q32.com wrote:\n> > > > > > > > > > > >\n> > > > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > proof of burn clearly solves this, since nothing is held online\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > how does proof of burn solve the \"nothing at stake\" problem in your view?\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > definition of nothing at stake: in the event of a fork, whether the\n> > > > > > > > > > > > > fork is accidental or a malicious, the optimal strategy for any miner\n> > > > > > > > > > > > > is to mine on every chain, so that the miner gets their reward no\n> > > > > > > > > > > > > matter which fork wins. indeed in proof-of-stake, the proofs are\n> > > > > > > > > > > > > published on the very chains mines, so the incentive is magnified.\n> > > > > > > > > > > > > in proof-of-burn, your burn investment is always \"at stake\", any\n> > > > > > > > > > > > > redaction can result in a loss-of-burn, because burns can be tied,\n> > > > > > > > > > > > > precisely, to block-heights\n> > > > > > > > > > > > > as a result, miners no longer have an incentive to mine all chains\n> > > > > > > > > > > > > in this way proof of burn can be more secure than proof-of-stake, and\n> > > > > > > > > > > > > even more secure than proof of work\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > On Sun, May 23, 2021 at 3:52 AM Lloyd Fournier via bitcoin-dev\n> > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > >\n> > > > > > > > > > > > > > Hi Billy,\n> > > > > > > > > > > > > > I was going to write a post which started by dismissing many of the weak arguments that are made against PoS made in this thread and elsewhere.\n> > > > > > > > > > > > > > Although I don't agree with all your points you have done a decent job here so I'll focus on the second part: why I think Proof-of-Stake is inappropriate for a Bitcoin-like system.\n> > > > > > > > > > > > > > Proof of stake is not fit for purpose for a global settlement layer in a pure digital asset (i.e. \"digital gold\") which is what Bitcoin is trying to be.\n> > > > > > > > > > > > > > PoS necessarily gives responsibilities to the holders of coins that they do not want and cannot handle.\n> > > > > > > > > > > > > > In Bitcoin, large unsophisticated coin holders can put their coins in cold storage without a second thought given to the health of the underlying ledger.\n> > > > > > > > > > > > > > As much as hardcore Bitcoiners try to convince them to run their own node, most don't, and that's perfectly acceptable.\n> > > > > > > > > > > > > > At no point do their personal decisions affect the underlying consensus -- it only affects their personal security assurance (not that of the system itself).\n> > > > > > > > > > > > > > In PoS systems this clean separation of responsibilities does not exist.\n> > > > > > > > > > > > > > I think that the more rigorously studied PoS protocols will work fine within the security claims made in their papers.\n> > > > > > > > > > > > > > People who believe that these protocols are destined for catastrophic consensus failure are certainly in for a surprise.\n> > > > > > > > > > > > > > But the devil is in the detail.\n> > > > > > > > > > > > > > Let's look at what the implications of using the leading proof of stake protocols would have on Bitcoin:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > ### Proof of SquareSpace (Cardano, Polkdadot)\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > Cardano is a UTXO based PoS coin based on Ouroboros Praos3 with an inbuilt on-chain delegation system5.\n> > > > > > > > > > > > > > In these protocols, coin holders who do not want to run their node with their hot keys in it delegate it to a \"Stake Pool\".\n> > > > > > > > > > > > > > I call the resulting system Proof-of-SquareSpace since most will choose a pool by looking around for one with a nice website and offering the largest share of the block reward.\n> > > > > > > > > > > > > > On the surface this might sound no different than someone with an mining rig shopping around for a good mining pool but there are crucial differences:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > 1.  The person making the decision is forced into it just because they own the currency -- someone with a mining rig has purchased it with the intent to make profit by participating in consensus.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > 2.  When you join a mining pool your systems are very much still online. You are just partaking in a pool to reduce your profit variance. You still see every block that you help create and you never help create a block without seeing it first.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > 3.  If by SquareSpace sybil attack you gain a dishonest majority and start censoring transactions how are the users meant to redelegate their stake to honest pools?\n> > > > > > > > > > > > > >     I guess they can just send a transaction delegating to another pool...oh wait I guess that might be censored too! This seems really really bad.\n> > > > > > > > > > > > > >     In Bitcoin, miners can just join a different pool at a whim. There is nothing the attacker can do to stop them. A temporary dishonest majority heals relatively well.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > There is another severe disadvantage to this on-chain delegation system: every UTXO must indicate which staking account this UTXO belongs to so the appropriate share of block rewards can be transferred there.\n> > > > > > > > > > > > > > Being able to associate every UTXO to an account ruins one of the main privacy advantages of the UTXO model.\n> > > > > > > > > > > > > > It also grows the size of the blockchain significantly.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > ### \"Pure\" proof of stake (Algorand)\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > Algorand's4 approach is to only allow online stake to participate in the protocol.\n> > > > > > > > > > > > > > Theoretically, This means that keys holding funds have to be online in order for them to author blocks when they are chosen.\n> > > > > > > > > > > > > > Of course in reality no one wants to keep their coin holding keys online so in Alogorand you can authorize a set of \"participation keys\"1 that will be used to create blocks on your coin holding key's behalf.\n> > > > > > > > > > > > > > Hopefully you've spotted the problem.\n> > > > > > > > > > > > > > You can send your participation keys to any malicious party with a nice website (see random example 2) offering you a good return.\n> > > > > > > > > > > > > > Damn it's still Proof-of-SquareSpace!\n> > > > > > > > > > > > > > The minor advantage is that at least the participation keys expire after a certain amount of time so eventually the SquareSpace attacker will lose their hold on consensus.\n> > > > > > > > > > > > > > Importantly there is also less junk on the blockchain because the participation keys are delegated off-chain and so are not making as much of a mess.\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > ### Conclusion\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > I don't see a way to get around the conflicting requirement that the keys for large amounts of coins should be kept offline but those are exactly the coins we need online to make the scheme secure.\n> > > > > > > > > > > > > > If we allow delegation then we open up a new social attack surface and it degenerates to Proof-of-SquareSpace.\n> > > > > > > > > > > > > > For a \"digital gold\" like system like Bitcoin we optimize for simplicity and desperately want to avoid extraneous responsibilities for the holder of the coin.\n> > > > > > > > > > > > > > After all, gold is an inert element on the periodic table that doesn't confer responsibilities on the holder to maintain the quality of all the other bars of gold out there.\n> > > > > > > > > > > > > > Bitcoin feels like this too and in many ways is more inert and beautifully boring than gold.\n> > > > > > > > > > > > > > For Bitcoin to succeed I think we need to keep it that way and Proof-of-Stake makes everything a bit too exciting.\n> > > > > > > > > > > > > > I suppose in the end the market will decide what is real digital gold and whether these bad technical trade offs are worth being able to say it uses less electricity. It goes without saying that making bad technical decisions to appease the current political climate is an anathema to Bitcoin.\n> > > > > > > > > > > > > > Would be interested to know if you or others think differently on these points.\n> > > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > > LL\n> > > > > > > > > > > > > > On Fri, 21 May 2021 at 19:21, Billy Tetrud via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > I think there is a lot of misinformation and bias against Proof of Stake. Yes there have been lots of shady coins that use insecure PoS mechanisms. Yes there have been massive issues with distribution of PoS coins (of course there have also been massive issues with PoW coins as well). However, I want to remind everyone that there is a difference between \"proved to be impossible\" and \"have not achieved recognized success yet\". Most of the arguments levied against PoS are out of date or rely on unproven assumptions or extrapolation from the analysis of a particular PoS system. I certainly don't think we should experiment with bitcoin by switching to PoS, but from my research, it seems very likely that there is a proof of stake consensus protocol we could build that has substantially higher security (cost / capital required to execute an attack) while at the same time costing far less resources (which do translate to fees on the network) without compromising any of the critical security properties bitcoin relies on. I think the critical piece of this is the disagreements around hardcoded checkpoints, which is a critical piece solving attacks that could be levied on a PoS chain, and how that does (or doesn't) affect the security model.\n> > > > > > > > > > > > > > > @Eric Your proof of stake fallacy seems to be saying that PoS is worse when a 51% attack happens. While I agree, I think that line of thinking omits important facts:\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > -   The capital required to 51% attack a PoS chain can be made substantially greater than on a PoS chain.\n> > > > > > > > > > > > > > > -   The capital the attacker stands to lose can be substantially greater as well if the attack is successful.\n> > > > > > > > > > > > > > > -   The effectiveness of paying miners to raise the honest fraction of miners above 50% may be quite bad.\n> > > > > > > > > > > > > > > -   Allowing a 51% attack is already unacceptable. It should be considered whether what happens in the case of a 51% may not be significantly different. The currency would likely be critically damaged in a 51% attack regardless of consensus mechanism.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Proof-of-stake tends towards oligopolistic control\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > People repeat this often, but the facts support this. There is no centralization pressure in any proof of stake mechanism that I'm aware of. IE if you have 10 times as much coin that you use to mint blocks, you should expect to earn 10x as much minting revenue - not more than 10x. By contrast, proof of work does in fact have clear centralization pressure - this is not disputed. Our goal in relation to that is to ensure that the centralization pressure remains insignifiant. Proof of work also clearly has a lot more barriers to entry than any proof of stake system does. Both of these mean the tendency towards oligopolistic control is worse for PoW.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Energy usage, in-and-of-itself, is nothing to be ashamed of!!\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > I certainly agree. Bitcoin's energy usage at the moment is I think quite warranted. However, the question is: can we do substantially better. I think if we can, we probably should... eventually.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Proof of Stake is only resilient to \u2153 of the network demonstrating a Byzantine Fault, whilst Proof of Work is resilient up to the \u00bd threshold\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > I see no mention of this in the pos.pdf you linked to. I'm not aware of any proof that all PoS systems have a failure threshold of 1/3. I know that staking systems like Casper do in fact have that 1/3 requirement. However there are PoS designs that should exceed that up to nearly 50% as far as I'm aware. Proof of work is not in fact resilient up to the 1/2 threshold in the way you would think. IE, if 100% of miners are currently honest and have a collective 100 exahashes/s hashpower, an attacker does not need to obtain 100 exahashes/s, but actually only needs to accumulate 50 exahashes/s. This is because as the attacker accumulates hashpower, it drives honest miners out of the market as the difficulty increases to beyond what is economically sustainable. Also, its been shown that the best proof of work can do is require an attacker to obtain 33% of the hashpower because of the selfish mining attack discussed in depth in this paper: https://arxiv.org/abs/1311.0243. Together, both of these things reduce PoW's security by a factor of about 83% (1 - 50%*33%).\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Proof of Stake requires other trade-offs which are incompatible with Bitcoin's objective (to be a trustless digital cash) \u2014 specifically the famous \"security vs. liveness\" guarantee\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Do you have a good source that talks about why you think proof of stake cannot be used for a trustless digital cash?\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > You cannot gain tokens without someone choosing to give up those coins - a form of permission.\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > This is not a practical constraint. Just like in mining, some nodes may reject you, but there will likely be more that will accept you, some sellers may reject you, but most would accept your money as payment for bitcoins. I don't think requiring the \"permission\" of one of millions of people in the market can be reasonably considered a \"permissioned currency\".\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > 2.  Proof of stake must have a trusted means of timestamping to regulate overproduction of blocks\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > Both PoW and PoS could mine/mint blocks twice as fast if everyone agreed to double their clock speeds. Both systems rely on an honest majority sticking to standard time.\n> > > > > > > > > > > > > > > On Wed, May 19, 2021 at 5:32 AM Michael Dubrovsky via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > Ah sorry, I didn't realize this was, in fact, a different thread! :)\n> > > > > > > > > > > > > > > > On Wed, May 19, 2021 at 10:07 AM Michael Dubrovsky mike at powx.org wrote:\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > Folks, I suggest we keep the discussion to PoW, oPoW, and the BIP itself. PoS, VDFs, and so on are interesting but I guess there are other threads going on these topics already where they would be relevant.\n> > > > > > > > > > > > > > > > > Also, it's important to distinguish between oPoW and these other \"alternatives\" to Hashcash. oPoW is a true Proof of Work that doesn't alter the core game theory or security assumptions of Hashcash and actually contains SHA (can be SHA3, SHA256, etc hash is interchangeable).\n> > > > > > > > > > > > > > > > > Cheers,\n> > > > > > > > > > > > > > > > > Mike\n> > > > > > > > > > > > > > > > > On Tue, May 18, 2021 at 4:55 PM Erik Aronesty via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 1.  i never suggested vdf's to replace pow.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 2.  my suggestion was specifically in the context of a working\n> > > > > > > > > > > > > > > > > >     proof-of-burn protocol\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   vdfs used only for timing (not block height)\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   blind-burned coins of a specific age used to replace proof of work\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   the required \"work\" per block would simply be a competition to\n> > > > > > > > > > > > > > > > > >     acquire rewards, and so miners would have to burn coins, well in\n> > > > > > > > > > > > > > > > > >     advance, and hope that their burned coins got rewarded in some far\n> > > > > > > > > > > > > > > > > >     future\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   the point of burned coins is to mimic, in every meaningful way, the\n> > > > > > > > > > > > > > > > > >     value gained from proof of work... without some of the security\n> > > > > > > > > > > > > > > > > >     drawbacks\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   the miner risks losing all of his burned coins (like all miners risk\n> > > > > > > > > > > > > > > > > >     losing their work in each block)\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   new burns can't be used\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   old burns age out (like ASICs do)\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > -   other requirements on burns might be needed to properly mirror the\n> > > > > > > > > > > > > > > > > >     properties of PoW and the incentives Bitcoin uses to mine honestly.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 3.  i do believe it is possible that a \"burned coin + vdf system\"\n> > > > > > > > > > > > > > > > > >     might be more secure in the long run, and that if the entire space\n> > > > > > > > > > > > > > > > > >     agreed that such an endeavor was worthwhile, a test net could be spun\n> > > > > > > > > > > > > > > > > >     up, and a hard-fork could be initiated.\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > 4.  i would never suggest such a thing unless i believed it was\n> > > > > > > > > > > > > > > > > >     possible that consensus was possible. so no, this is not an \"alt\n> > > > > > > > > > > > > > > > > >     coin\"\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > On Tue, May 18, 2021 at 10:02 AM Zac Greenwood zachgrw at gmail.com wrote:\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > Hi ZmnSCPxj,\n> > > > > > > > > > > > > > > > > > > Please note that I am not suggesting VDFs as a means to save energy, but solely as a means to make the time between blocks more constant.\n> > > > > > > > > > > > > > > > > > > Zac\n> > > > > > > > > > > > > > > > > > > On Tue, 18 May 2021 at 12:42, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > Good morning Zac,\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > > VDFs might enable more constant block times, for instance by having a two-step PoW:\n> > > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > > 1.  Use a VDF that takes say 9 minutes to resolve (VDF being subject to difficulty adjustments similar to the as-is). As per the property of VDFs, miners are able show proof of work.\n> > > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > > 2.  Use current PoW mechanism with lower difficulty so finding a block takes 1 minute on average, again subject to as-is difficulty adjustments.\n> > > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > > As a result, variation in block times will be greatly reduced.\n> > > > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > > > As I understand it, another weakness of VDFs is that they are not inherently progress-free (their sequential nature prevents that; they are inherently progress-requiring).\n> > > > > > > > > > > > > > > > > > > > Thus, a miner which focuses on improving the amount of energy that it can pump into the VDF circuitry (by overclocking and freezing the circuitry), could potentially get into a winner-takes-all situation, possibly leading to even worse competition and even more energy consumption.\n> > > > > > > > > > > > > > > > > > > > After all, if you can start mining 0.1s faster than the competition, that is a 0.1s advantage where only you can mine in the entire world.\n> > > > > > > > > > > > > > > > > > > > Regards,\n> > > > > > > > > > > > > > > > > > > > ZmnSCPxj\n> > > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > > --\n> > > > > > > > > > > > > > > > Michael Dubrovsky\n> > > > > > > > > > > > > > > > Founder; PoWx\n> > > > > > > > > > > > > > > > www.PoWx.org\n> > > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > > >\n> > > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > > > > > > > > > > > >\n> > > > > > > > > > > > > > bitcoin-dev mailing list\n> > > > > > > > > > > > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > > > > > > > > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "SatoshiSingh",
                "date": "2021-06-03T05:30:05",
                "message_text_only": "Great conversation everyone. I'm happy we're still engaged with this discussion. To add food for thought I'm bringing back something that was introduced in this mailing list sometime ago, which is Proof of Less Work.\n\nPoLW may or may not be it but we can certainly get more ideas from it to keep the discussion going.\n\nhttps://raw.githubusercontent.com/alephium/research/master/polw.pdf\n\n\nSent with ProtonMail Secure Email."
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-07T06:15:23",
                "message_text_only": "@SatoshiSingh PoLW sounds like a hybrid of PoW and proof of burn. I agree\nwith befreeandopen that proof of burn is basically a form of proof of\nstake. My conclusion from this exploration\n<https://github.com/fresheneesz/proofOfTimeOwnership> is that hybrid\nprotocols are a dead end because hybrid protocols have one weaker link\nthat's easier to attack.\n\nIn this case, miners are burning coinbase rewards. The proof of stake is\nthe burn itself. However, a miner would only burn coins if doing so lead to\ngreater rewards in the future. So the burned coins are in fact actually\nearned, and still have value. Therefore I would think that miners would\nstill do an amount of work totaling up to the full value of the block\nreward, regardless of whether they burn it, because any burnt coins should\nbe expected to lead to more coins in the future than were burned. What am I\nmissing?\n\nOn Wed, Jun 2, 2021 at 10:30 PM SatoshiSingh <SatoshiSingh at protonmail.com>\nwrote:\n\n> Great conversation everyone. I'm happy we're still engaged with this\n> discussion. To add food for thought I'm bringing back something that was\n> introduced in this mailing list sometime ago, which is Proof of Less Work.\n>\n> PoLW may or may not be it but we can certainly get more ideas from it to\n> keep the discussion going.\n>\n> https://raw.githubusercontent.com/alephium/research/master/polw.pdf\n>\n>\n> Sent with ProtonMail Secure Email.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210606/1ff6314d/attachment-0001.html>"
            },
            {
                "author": "James MacWhyte",
                "date": "2021-06-15T11:13:10",
                "message_text_only": "@Lloyd wrote:\n\nOf course in reality no one wants to keep their coin holding keys online so\n> in Alogorand you can authorize a set of \"participation keys\"[1] that will\n> be used to create blocks on your coin holding key's behalf.\n> Hopefully you've spotted the problem.\n> You can send your participation keys to any malicious party with a nice\n> website (see random example [2]) offering you a good return.\n> Damn it's still Proof-of-SquareSpace!\n>\n\nI believe we are talking about a comparison to PoW, correct? If you want to\nmine PoW, you need to buy expensive hardware and configure it to work, and\nwait a long time to get any return by solo mining. Or you can join a mining\npool, which might use your hashing power for nefarious purposes. Or you\nmight skip the hardware all together and fall for some \"cloud mining\"\nscheme with a pretty website and a high rate of advertised return. So as\nyou can see, Proof-of-SquareSpace exists in PoW as well!\n\nThe PoS equivalent of buying mining hardware is setting up your own\nvalidator and not outsourcing that to anyone else. So both PoW and PoS have\nthe professional/expert way of participating, and the fraud-prone, amateur\nway of participating. The only difference is, with PoS the\nprofessional/expert way is accessible to anyone with a raspberry Pi and a\nweb connection, which is a much lower barrier to entry than PoW.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210615/b25a4a2e/attachment.html>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2021-06-17T01:48:39",
                "message_text_only": "@James wrote:\n\nOn Tue, 15 Jun 2021 at 21:13, James MacWhyte <macwhyte at gmail.com> wrote:\n\n>\n> @Lloyd wrote:\n>\n> Of course in reality no one wants to keep their coin holding keys online\n>> so in Alogorand you can authorize a set of \"participation keys\"[1] that\n>> will be used to create blocks on your coin holding key's behalf.\n>> Hopefully you've spotted the problem.\n>> You can send your participation keys to any malicious party with a nice\n>> website (see random example [2]) offering you a good return.\n>> Damn it's still Proof-of-SquareSpace!\n>>\n>\n> I believe we are talking about a comparison to PoW, correct? If you want\n> to mine PoW, you need to buy expensive hardware and configure it to work,\n> and wait a long time to get any return by solo mining. Or you can join a\n> mining pool, which might use your hashing power for nefarious purposes.\n>\n\nA mining pool using your hashrate for nefarious purposes can easily be\nobserved since they send you the contents of the block you are mining\nbefore your hardware starts working on it. This difference is crucial.\nMining pools exist just to reduce income variance.\n\n\n> Or you might skip the hardware all together and fall for some \"cloud\n> mining\" scheme with a pretty website and a high rate of advertised return.\n> So as you can see, Proof-of-SquareSpace exists in PoW as well!\n>\n\nI'd agree that \"cloud mining\" pretty much is Proof-of-SquareSpace for PoW.\nFortunately these services make up a tiny fraction of hashrate.\n\n\n> The PoS equivalent of buying mining hardware is setting up your own\n> validator and not outsourcing that to anyone else. So both PoW and PoS have\n> the professional/expert way of participating, and the fraud-prone, amateur\n> way of participating. The only difference is, with PoS the\n> professional/expert way is accessible to anyone with a raspberry Pi and a\n> web connection, which is a much lower barrier to entry than PoW.\n>\n\nAnd yet despite this, the fraud-prone amteur way of participating accounts\nfor the majority of stake in PoS systems while the professional/expert way\nof participating accounts for the overwhelming majority of hashpower in\nBitcoin. It looks like you have elegantly proved my point!\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210617/672a53bd/attachment-0001.html>"
            },
            {
                "author": "Cloud Strife",
                "date": "2021-06-17T03:31:00",
                "message_text_only": "Barrier to entry in PoW is matter for hardware and energy is permissionless\nand exist all over the universe, permissionless cost which exists for\neveryone no matter who because it's unforgeable.\n\nBarrier to entry in PoS is being given permission by the previous owner of\na token for you to have it via transfer or sale, both choices they never\nhave to make since there are no continuous costs with producing blocks\nforcing it. A permission is an infinitely high barrier to entry if the\nprevious owner, like the premining party, refuses to give up the token they\ncontrol.\n\nYou're skipping the part where you depend on a permission of a central\nparty in control of the authority token before you can produce blocks on\nyour rasberry Pi.\n\nProof of stake is not in any possible way relevant to permissionless\nprotocols, and thus not possibly relevant to decentralized protocols where\ncontrol must be distributed to independent (i.e. permissionless) parties.\n\nThere's nothing of relevance to discuss and this has been figured out long\nlong ago.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n\nhttps://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n\n\n\n\nOn Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> @Lloyd wrote:\n>\n> Of course in reality no one wants to keep their coin holding keys online\n>> so in Alogorand you can authorize a set of \"participation keys\"[1] that\n>> will be used to create blocks on your coin holding key's behalf.\n>> Hopefully you've spotted the problem.\n>> You can send your participation keys to any malicious party with a nice\n>> website (see random example [2]) offering you a good return.\n>> Damn it's still Proof-of-SquareSpace!\n>>\n>\n> I believe we are talking about a comparison to PoW, correct? If you want\n> to mine PoW, you need to buy expensive hardware and configure it to work,\n> and wait a long time to get any return by solo mining. Or you can join a\n> mining pool, which might use your hashing power for nefarious purposes. Or\n> you might skip the hardware all together and fall for some \"cloud mining\"\n> scheme with a pretty website and a high rate of advertised return. So as\n> you can see, Proof-of-SquareSpace exists in PoW as well!\n>\n> The PoS equivalent of buying mining hardware is setting up your own\n> validator and not outsourcing that to anyone else. So both PoW and PoS have\n> the professional/expert way of participating, and the fraud-prone, amateur\n> way of participating. The only difference is, with PoS the\n> professional/expert way is accessible to anyone with a raspberry Pi and a\n> web connection, which is a much lower barrier to entry than PoW.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210616/6692b76b/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-22T17:45:51",
                "message_text_only": ">  Barrier to entry in PoS is being given permission by the previous owner\nof a token\n\nThe idea that proof of stake is not permissionless is completely invalid.\nIt pains me to see such an argument here. Perhaps we can come to an\nagreement by being more specific. I'd like to propose the following:\n\nPremise: There is a healthy exchange market for PoS Coin X with tens of\nthousands of participants bidding to buy and sell the coin for other\ncurrencies on the market.\n\nIf the premise above is true, then there is no significant permission\nneeded to enter the market for minting blocks for PoS Coin X. If you make a\nbid on someone's coins and they don't like you and refuse, you can move on\nto any one of the other tens of thousands of people in that marketplace.\nWould you agree, Cloud Strife, that this situation couldn't be considered\n\"permissioned\"?\n\nIf not, consider that participation in *any* decentralized system requires\nthe permission of at least one user in that system. If there are thousands\nof bitcoin public nodes, you require the permission of at least one of them\nto participate in bitcoin. No one considers bitcoin \"permissioned\" because\nof this. Do you agree?\n\nOn Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Barrier to entry in PoW is matter for hardware and energy is\n> permissionless and exist all over the universe, permissionless cost which\n> exists for everyone no matter who because it's unforgeable.\n>\n> Barrier to entry in PoS is being given permission by the previous owner of\n> a token for you to have it via transfer or sale, both choices they never\n> have to make since there are no continuous costs with producing blocks\n> forcing it. A permission is an infinitely high barrier to entry if the\n> previous owner, like the premining party, refuses to give up the token they\n> control.\n>\n> You're skipping the part where you depend on a permission of a central\n> party in control of the authority token before you can produce blocks on\n> your rasberry Pi.\n>\n> Proof of stake is not in any possible way relevant to permissionless\n> protocols, and thus not possibly relevant to decentralized protocols where\n> control must be distributed to independent (i.e. permissionless) parties.\n>\n> There's nothing of relevance to discuss and this has been figured out long\n> long ago.\n>\n> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>\n>\n> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>\n>\n>\n>\n> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>> @Lloyd wrote:\n>>\n>> Of course in reality no one wants to keep their coin holding keys online\n>>> so in Alogorand you can authorize a set of \"participation keys\"[1] that\n>>> will be used to create blocks on your coin holding key's behalf.\n>>> Hopefully you've spotted the problem.\n>>> You can send your participation keys to any malicious party with a nice\n>>> website (see random example [2]) offering you a good return.\n>>> Damn it's still Proof-of-SquareSpace!\n>>>\n>>\n>> I believe we are talking about a comparison to PoW, correct? If you want\n>> to mine PoW, you need to buy expensive hardware and configure it to work,\n>> and wait a long time to get any return by solo mining. Or you can join a\n>> mining pool, which might use your hashing power for nefarious purposes. Or\n>> you might skip the hardware all together and fall for some \"cloud mining\"\n>> scheme with a pretty website and a high rate of advertised return. So as\n>> you can see, Proof-of-SquareSpace exists in PoW as well!\n>>\n>> The PoS equivalent of buying mining hardware is setting up your own\n>> validator and not outsourcing that to anyone else. So both PoW and PoS have\n>> the professional/expert way of participating, and the fraud-prone, amateur\n>> way of participating. The only difference is, with PoS the\n>> professional/expert way is accessible to anyone with a raspberry Pi and a\n>> web connection, which is a much lower barrier to entry than PoW.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210622/58dba3ce/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2021-06-23T18:14:04",
                "message_text_only": "> Premise: There is a healthy exchange market for PoS Coin X with tens of\nthousands of participants bidding to buy and sell the coin for other\ncurrencies on the market.\n\nThe difference here though is that Proof of Stake allows the quorum of coin\nholders to block the exchange of said coins if they are going to a\nparticular destination. Nothing requires these staking nodes to include\nparticular transactions into a block. With that in mind, it isn't just that\nyou require the permission of the person who sold you the coins, which I\ncan agree is a less dangerous form of permission, but you must also require\nthe permission of at least 51% of the coin holders to even receive those\ncoins in the first place. This is not true in a Proof of Work system and\nthis difference absolutely should not be trivialized.\n\nKeagan\n\nOn Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >  Barrier to entry in PoS is being given permission by the previous owner\n> of a token\n>\n> The idea that proof of stake is not permissionless is completely invalid.\n> It pains me to see such an argument here. Perhaps we can come to an\n> agreement by being more specific. I'd like to propose the following:\n>\n> Premise: There is a healthy exchange market for PoS Coin X with tens of\n> thousands of participants bidding to buy and sell the coin for other\n> currencies on the market.\n>\n> If the premise above is true, then there is no significant permission\n> needed to enter the market for minting blocks for PoS Coin X. If you make a\n> bid on someone's coins and they don't like you and refuse, you can move on\n> to any one of the other tens of thousands of people in that marketplace.\n> Would you agree, Cloud Strife, that this situation couldn't be considered\n> \"permissioned\"?\n>\n> If not, consider that participation in *any* decentralized system requires\n> the permission of at least one user in that system. If there are thousands\n> of bitcoin public nodes, you require the permission of at least one of them\n> to participate in bitcoin. No one considers bitcoin \"permissioned\" because\n> of this. Do you agree?\n>\n> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Barrier to entry in PoW is matter for hardware and energy is\n>> permissionless and exist all over the universe, permissionless cost which\n>> exists for everyone no matter who because it's unforgeable.\n>>\n>> Barrier to entry in PoS is being given permission by the previous owner\n>> of a token for you to have it via transfer or sale, both choices they never\n>> have to make since there are no continuous costs with producing blocks\n>> forcing it. A permission is an infinitely high barrier to entry if the\n>> previous owner, like the premining party, refuses to give up the token they\n>> control.\n>>\n>> You're skipping the part where you depend on a permission of a central\n>> party in control of the authority token before you can produce blocks on\n>> your rasberry Pi.\n>>\n>> Proof of stake is not in any possible way relevant to permissionless\n>> protocols, and thus not possibly relevant to decentralized protocols where\n>> control must be distributed to independent (i.e. permissionless) parties.\n>>\n>> There's nothing of relevance to discuss and this has been figured out\n>> long long ago.\n>>\n>>\n>> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>>\n>>\n>> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>>\n>>\n>>\n>>\n>> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>>\n>>> @Lloyd wrote:\n>>>\n>>> Of course in reality no one wants to keep their coin holding keys online\n>>>> so in Alogorand you can authorize a set of \"participation keys\"[1] that\n>>>> will be used to create blocks on your coin holding key's behalf.\n>>>> Hopefully you've spotted the problem.\n>>>> You can send your participation keys to any malicious party with a nice\n>>>> website (see random example [2]) offering you a good return.\n>>>> Damn it's still Proof-of-SquareSpace!\n>>>>\n>>>\n>>> I believe we are talking about a comparison to PoW, correct? If you want\n>>> to mine PoW, you need to buy expensive hardware and configure it to work,\n>>> and wait a long time to get any return by solo mining. Or you can join a\n>>> mining pool, which might use your hashing power for nefarious purposes. Or\n>>> you might skip the hardware all together and fall for some \"cloud mining\"\n>>> scheme with a pretty website and a high rate of advertised return. So as\n>>> you can see, Proof-of-SquareSpace exists in PoW as well!\n>>>\n>>> The PoS equivalent of buying mining hardware is setting up your own\n>>> validator and not outsourcing that to anyone else. So both PoW and PoS have\n>>> the professional/expert way of participating, and the fraud-prone, amateur\n>>> way of participating. The only difference is, with PoS the\n>>> professional/expert way is accessible to anyone with a raspberry Pi and a\n>>> web connection, which is a much lower barrier to entry than PoW.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210623/799426cc/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-24T00:14:36",
                "message_text_only": ">  This is not true in a Proof of Work system and this difference\nabsolutely should not be trivialized.\n\nThat is in fact true of Proof of Work as well. If a colluding coalition of\nminers with more than 50% of the hashrate want to censor transactions, they\nabsolutely can do that by orphaning blocks that contain transactions\nthey want to censor. This is not different in proof of stake.\n\nOn Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland <\nkeagan.mcclelland at gmail.com> wrote:\n\n> > Premise: There is a healthy exchange market for PoS Coin X with tens of\n> thousands of participants bidding to buy and sell the coin for other\n> currencies on the market.\n>\n> The difference here though is that Proof of Stake allows the quorum of\n> coin holders to block the exchange of said coins if they are going to a\n> particular destination. Nothing requires these staking nodes to include\n> particular transactions into a block. With that in mind, it isn't just that\n> you require the permission of the person who sold you the coins, which I\n> can agree is a less dangerous form of permission, but you must also require\n> the permission of at least 51% of the coin holders to even receive those\n> coins in the first place. This is not true in a Proof of Work system and\n> this difference absolutely should not be trivialized.\n>\n> Keagan\n>\n> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> >  Barrier to entry in PoS is being given permission by the previous\n>> owner of a token\n>>\n>> The idea that proof of stake is not permissionless is completely invalid.\n>> It pains me to see such an argument here. Perhaps we can come to an\n>> agreement by being more specific. I'd like to propose the following:\n>>\n>> Premise: There is a healthy exchange market for PoS Coin X with tens of\n>> thousands of participants bidding to buy and sell the coin for other\n>> currencies on the market.\n>>\n>> If the premise above is true, then there is no significant permission\n>> needed to enter the market for minting blocks for PoS Coin X. If you make a\n>> bid on someone's coins and they don't like you and refuse, you can move on\n>> to any one of the other tens of thousands of people in that marketplace.\n>> Would you agree, Cloud Strife, that this situation couldn't be considered\n>> \"permissioned\"?\n>>\n>> If not, consider that participation in *any* decentralized system\n>> requires the permission of at least one user in that system. If there are\n>> thousands of bitcoin public nodes, you require the permission of at least\n>> one of them to participate in bitcoin. No one considers bitcoin\n>> \"permissioned\" because of this. Do you agree?\n>>\n>> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Barrier to entry in PoW is matter for hardware and energy is\n>>> permissionless and exist all over the universe, permissionless cost which\n>>> exists for everyone no matter who because it's unforgeable.\n>>>\n>>> Barrier to entry in PoS is being given permission by the previous owner\n>>> of a token for you to have it via transfer or sale, both choices they never\n>>> have to make since there are no continuous costs with producing blocks\n>>> forcing it. A permission is an infinitely high barrier to entry if the\n>>> previous owner, like the premining party, refuses to give up the token they\n>>> control.\n>>>\n>>> You're skipping the part where you depend on a permission of a central\n>>> party in control of the authority token before you can produce blocks on\n>>> your rasberry Pi.\n>>>\n>>> Proof of stake is not in any possible way relevant to permissionless\n>>> protocols, and thus not possibly relevant to decentralized protocols where\n>>> control must be distributed to independent (i.e. permissionless) parties.\n>>>\n>>> There's nothing of relevance to discuss and this has been figured out\n>>> long long ago.\n>>>\n>>>\n>>> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>>>\n>>>\n>>> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>>>\n>>>\n>>>\n>>>\n>>> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>>\n>>>> @Lloyd wrote:\n>>>>\n>>>> Of course in reality no one wants to keep their coin holding keys\n>>>>> online so in Alogorand you can authorize a set of \"participation keys\"[1]\n>>>>> that will be used to create blocks on your coin holding key's behalf.\n>>>>> Hopefully you've spotted the problem.\n>>>>> You can send your participation keys to any malicious party with a\n>>>>> nice website (see random example [2]) offering you a good return.\n>>>>> Damn it's still Proof-of-SquareSpace!\n>>>>>\n>>>>\n>>>> I believe we are talking about a comparison to PoW, correct? If you\n>>>> want to mine PoW, you need to buy expensive hardware and configure it to\n>>>> work, and wait a long time to get any return by solo mining. Or you can\n>>>> join a mining pool, which might use your hashing power for nefarious\n>>>> purposes. Or you might skip the hardware all together and fall for some\n>>>> \"cloud mining\" scheme with a pretty website and a high rate of advertised\n>>>> return. So as you can see, Proof-of-SquareSpace exists in PoW as well!\n>>>>\n>>>> The PoS equivalent of buying mining hardware is setting up your own\n>>>> validator and not outsourcing that to anyone else. So both PoW and PoS have\n>>>> the professional/expert way of participating, and the fraud-prone, amateur\n>>>> way of participating. The only difference is, with PoS the\n>>>> professional/expert way is accessible to anyone with a raspberry Pi and a\n>>>> web connection, which is a much lower barrier to entry than PoW.\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210623/e39ec2e6/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2021-06-24T00:37:07",
                "message_text_only": "> That is in fact true of Proof of Work as well. If a colluding coalition\nof miners with more than 50% of the hashrate want to censor transactions,\nthey absolutely can do that by orphaning blocks that contain transactions\nthey want to censor. This is not different in proof of stake.\n\nThis power does not translate into them being able to block your\nacquisition of hashpower itself, a property extremely different than in\nproof of stake.\n\nOn Wed, Jun 23, 2021 at 6:14 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n> >  This is not true in a Proof of Work system and this difference\n> absolutely should not be trivialized.\n>\n> That is in fact true of Proof of Work as well. If a colluding coalition of\n> miners with more than 50% of the hashrate want to censor transactions, they\n> absolutely can do that by orphaning blocks that contain transactions\n> they want to censor. This is not different in proof of stake.\n>\n> On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland <\n> keagan.mcclelland at gmail.com> wrote:\n>\n>> > Premise: There is a healthy exchange market for PoS Coin X with tens of\n>> thousands of participants bidding to buy and sell the coin for other\n>> currencies on the market.\n>>\n>> The difference here though is that Proof of Stake allows the quorum of\n>> coin holders to block the exchange of said coins if they are going to a\n>> particular destination. Nothing requires these staking nodes to include\n>> particular transactions into a block. With that in mind, it isn't just that\n>> you require the permission of the person who sold you the coins, which I\n>> can agree is a less dangerous form of permission, but you must also require\n>> the permission of at least 51% of the coin holders to even receive those\n>> coins in the first place. This is not true in a Proof of Work system and\n>> this difference absolutely should not be trivialized.\n>>\n>> Keagan\n>>\n>> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> >  Barrier to entry in PoS is being given permission by the previous\n>>> owner of a token\n>>>\n>>> The idea that proof of stake is not permissionless is completely\n>>> invalid. It pains me to see such an argument here. Perhaps we can come to\n>>> an agreement by being more specific. I'd like to propose the following:\n>>>\n>>> Premise: There is a healthy exchange market for PoS Coin X with tens of\n>>> thousands of participants bidding to buy and sell the coin for other\n>>> currencies on the market.\n>>>\n>>> If the premise above is true, then there is no significant permission\n>>> needed to enter the market for minting blocks for PoS Coin X. If you make a\n>>> bid on someone's coins and they don't like you and refuse, you can move on\n>>> to any one of the other tens of thousands of people in that marketplace.\n>>> Would you agree, Cloud Strife, that this situation couldn't be considered\n>>> \"permissioned\"?\n>>>\n>>> If not, consider that participation in *any* decentralized system\n>>> requires the permission of at least one user in that system. If there are\n>>> thousands of bitcoin public nodes, you require the permission of at least\n>>> one of them to participate in bitcoin. No one considers bitcoin\n>>> \"permissioned\" because of this. Do you agree?\n>>>\n>>> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Barrier to entry in PoW is matter for hardware and energy is\n>>>> permissionless and exist all over the universe, permissionless cost which\n>>>> exists for everyone no matter who because it's unforgeable.\n>>>>\n>>>> Barrier to entry in PoS is being given permission by the previous owner\n>>>> of a token for you to have it via transfer or sale, both choices they never\n>>>> have to make since there are no continuous costs with producing blocks\n>>>> forcing it. A permission is an infinitely high barrier to entry if the\n>>>> previous owner, like the premining party, refuses to give up the token they\n>>>> control.\n>>>>\n>>>> You're skipping the part where you depend on a permission of a central\n>>>> party in control of the authority token before you can produce blocks on\n>>>> your rasberry Pi.\n>>>>\n>>>> Proof of stake is not in any possible way relevant to permissionless\n>>>> protocols, and thus not possibly relevant to decentralized protocols where\n>>>> control must be distributed to independent (i.e. permissionless) parties.\n>>>>\n>>>> There's nothing of relevance to discuss and this has been figured out\n>>>> long long ago.\n>>>>\n>>>>\n>>>> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>>>>\n>>>>\n>>>> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>>\n>>>>> @Lloyd wrote:\n>>>>>\n>>>>> Of course in reality no one wants to keep their coin holding keys\n>>>>>> online so in Alogorand you can authorize a set of \"participation keys\"[1]\n>>>>>> that will be used to create blocks on your coin holding key's behalf.\n>>>>>> Hopefully you've spotted the problem.\n>>>>>> You can send your participation keys to any malicious party with a\n>>>>>> nice website (see random example [2]) offering you a good return.\n>>>>>> Damn it's still Proof-of-SquareSpace!\n>>>>>>\n>>>>>\n>>>>> I believe we are talking about a comparison to PoW, correct? If you\n>>>>> want to mine PoW, you need to buy expensive hardware and configure it to\n>>>>> work, and wait a long time to get any return by solo mining. Or you can\n>>>>> join a mining pool, which might use your hashing power for nefarious\n>>>>> purposes. Or you might skip the hardware all together and fall for some\n>>>>> \"cloud mining\" scheme with a pretty website and a high rate of advertised\n>>>>> return. So as you can see, Proof-of-SquareSpace exists in PoW as well!\n>>>>>\n>>>>> The PoS equivalent of buying mining hardware is setting up your own\n>>>>> validator and not outsourcing that to anyone else. So both PoW and PoS have\n>>>>> the professional/expert way of participating, and the fraud-prone, amateur\n>>>>> way of participating. The only difference is, with PoS the\n>>>>> professional/expert way is accessible to anyone with a raspberry Pi and a\n>>>>> web connection, which is a much lower barrier to entry than PoW.\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210623/b99b3f9f/attachment.html>"
            },
            {
                "author": "yanmaani at cock.li",
                "date": "2021-06-24T17:34:54",
                "message_text_only": "No, 51% of the *coin holders* can't do diddly squat. 51% of miners can, \nbut in PoW, that's a different set to the coin holders.\n\nThe basic problem with PoS, anyway, is that it's not actually a \nconsensus system (\"weak subjectivity\"). Either you allow long reorgs, \nand then you open the door to long-range attacks, or you don't, and then \nyou're not guaranteed that all nodes agree on the state of the chain, \nwhich was the purpose of the system to begin with.\n\nTo put it more plainly: for PoS to work, you need a consensus on which \nblock was seen first. But if you had that, you could presumably apply \nthat method to determine which *transaction* was seen first, in which \ncase you could do away with the blockchain entirely. (Real-world \nimplementations of PoS, such that they are, do away with this \nrequirement, scrapping the global consensus on ordering in favor of \nhaving each node decide for itself which block came first.)\n\nIn other words, even if you solved all the incentive problems, the fact \nremains that PoS is not suitable for use as a consensus system, because \nit is constitutionally incapable of producing a consensus.\n\nOn 2021-06-24 00:14, Billy Tetrud via bitcoin-dev wrote:\n>>  This is not true in a Proof of Work system and this difference\n> absolutely should not be trivialized.\n> \n> That is in fact true of Proof of Work as well. If a colluding\n> coalition of miners with more than 50% of the hashrate want to censor\n> transactions, they absolutely can do that by orphaning blocks that\n> contain transactions they want to censor. This is not different in\n> proof of stake.\n> \n> On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland\n> <keagan.mcclelland at gmail.com> wrote:\n> \n>>> Premise: There is a healthy exchange market for PoS Coin X with\n>> tens of thousands of participants bidding to buy and sell the coin\n>> for other currencies on the market.\n>> \n>> The difference here though is that Proof of Stake allows the quorum\n>> of coin holders to block the exchange of said coins if they are\n>> going to a particular destination. Nothing requires these staking\n>> nodes to include particular transactions into a block. With that in\n>> mind, it isn't just that you require the permission of the person\n>> who sold you the coins, which I can agree is a less dangerous form\n>> of permission, but you must also require the permission of at least\n>> 51% of the coin holders to even receive those coins in the first\n>> place. This is not true in a Proof of Work system and this\n>> difference absolutely should not be trivialized.\n>> \n>> Keagan\n>> \n>> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>>> Barrier to entry in PoS is being given permission by the previous\n>> owner of a token\n>> \n>> The idea that proof of stake is not permissionless is completely\n>> invalid. It pains me to see such an argument here. Perhaps we can\n>> come to an agreement by being more specific. I'd like to propose the\n>> following:\n>> \n>> Premise: There is a healthy exchange market for PoS Coin X with tens\n>> of thousands of participants bidding to buy and sell the coin for\n>> other currencies on the market.\n>> \n>> If the premise above is true, then there is no significant\n>> permission needed to enter the market for minting blocks for PoS\n>> Coin X. If you make a bid on someone's coins and they don't like you\n>> and refuse, you can move on to any one of the other tens of\n>> thousands of people in that marketplace. Would you agree, Cloud\n>> Strife, that this situation couldn't be considered \"permissioned\"?\n>> \n>> If not, consider that participation in *any* decentralized system\n>> requires the permission of at least one user in that system. If\n>> there are thousands of bitcoin public nodes, you require the\n>> permission of at least one of them to participate in bitcoin. No one\n>> considers bitcoin \"permissioned\" because of this. Do you agree?\n>> \n>> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Barrier to entry in PoW is matter for hardware and energy is\n>> permissionless and exist all over the universe, permissionless cost\n>> which exists for everyone no matter who because it's unforgeable.\n>> \n>> Barrier to entry in PoS is being given permission by the previous\n>> owner of a token for you to have it via transfer or sale, both\n>> choices they never have to make since there are no continuous costs\n>> with producing blocks forcing it. A permission is an infinitely high\n>> barrier to entry if the previous owner, like the premining party,\n>> refuses to give up the token they control.\n>> \n>> You're skipping the part where you depend on a permission of a\n>> central party in control of the authority token before you can\n>> produce blocks on your rasberry Pi.\n>> \n>> Proof of stake is not in any possible way relevant to permissionless\n>> protocols, and thus not possibly relevant to decentralized protocols\n>> where control must be distributed to independent (i.e.\n>> permissionless) parties.\n>> \n>> There's nothing of relevance to discuss and this has been figured\n>> out long long ago.\n>> \n>> \n> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>> \n>> \n> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>> \n>> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> @Lloyd wrote:\n>> \n>> Of course in reality no one wants to keep their coin holding keys\n>> online so in Alogorand you can authorize a set of \"participation\n>> keys\"[1] that will be used to create blocks on your coin holding\n>> key's behalf.\n>> Hopefully you've spotted the problem.\n>> You can send your participation keys to any malicious party with a\n>> nice website (see random example [2]) offering you a good return.\n>> Damn it's still Proof-of-SquareSpace!\n>> \n>> I believe we are talking about a comparison to PoW, correct? If you\n>> want to mine PoW, you need to buy expensive hardware and configure\n>> it to work, and wait a long time to get any return by solo mining.\n>> Or you can join a mining pool, which might use your hashing power\n>> for nefarious purposes. Or you might skip the hardware all together\n>> and fall for some \"cloud mining\" scheme with a pretty website and a\n>> high rate of advertised return. So as you can see,\n>> Proof-of-SquareSpace exists in PoW as well!\n>> \n>> The PoS equivalent of buying mining hardware is setting up your own\n>> validator and not outsourcing that to anyone else. So both PoW and\n>> PoS have the professional/expert way of participating, and the\n>> fraud-prone, amateur way of participating. The only difference is,\n>> with PoS the professional/expert way is accessible to anyone with a\n>> raspberry Pi and a web connection, which is a much lower barrier to\n>> entry than PoW. _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>  _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>  _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-24T21:50:51",
                "message_text_only": "> PoS is not suitable for use as a consensus system, because\nit is constitutionally incapable of producing a consensus.\n\ntrue - but only for a system that is starting from nothing.\n\nsince bitcoin already exists, and we have a consensus, you can use\nbitcoin's existing consensus to maintain that consensus using\nreferences to prior state.  and yes, you simply have to limit reorgs\nto not go back before PoW was abandoned in favor of PoS/PoB (assuming\nall incentive problems are solved).\n\nie: once you have uses PoW to bootstrap the system, you can \"recycle\" that work.\n\nOn Thu, Jun 24, 2021 at 4:41 PM yanmaani--- via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> No, 51% of the *coin holders* can't do diddly squat. 51% of miners can,\n> but in PoW, that's a different set to the coin holders.\n>\n> The basic problem with PoS, anyway, is that it's not actually a\n> consensus system (\"weak subjectivity\"). Either you allow long reorgs,\n> and then you open the door to long-range attacks, or you don't, and then\n> you're not guaranteed that all nodes agree on the state of the chain,\n> which was the purpose of the system to begin with.\n>\n> To put it more plainly: for PoS to work, you need a consensus on which\n> block was seen first. But if you had that, you could presumably apply\n> that method to determine which *transaction* was seen first, in which\n> case you could do away with the blockchain entirely. (Real-world\n> implementations of PoS, such that they are, do away with this\n> requirement, scrapping the global consensus on ordering in favor of\n> having each node decide for itself which block came first.)\n>\n> In other words, even if you solved all the incentive problems, the fact\n> remains that PoS is not suitable for use as a consensus system, because\n> it is constitutionally incapable of producing a consensus.\n>\n> On 2021-06-24 00:14, Billy Tetrud via bitcoin-dev wrote:\n> >>  This is not true in a Proof of Work system and this difference\n> > absolutely should not be trivialized.\n> >\n> > That is in fact true of Proof of Work as well. If a colluding\n> > coalition of miners with more than 50% of the hashrate want to censor\n> > transactions, they absolutely can do that by orphaning blocks that\n> > contain transactions they want to censor. This is not different in\n> > proof of stake.\n> >\n> > On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland\n> > <keagan.mcclelland at gmail.com> wrote:\n> >\n> >>> Premise: There is a healthy exchange market for PoS Coin X with\n> >> tens of thousands of participants bidding to buy and sell the coin\n> >> for other currencies on the market.\n> >>\n> >> The difference here though is that Proof of Stake allows the quorum\n> >> of coin holders to block the exchange of said coins if they are\n> >> going to a particular destination. Nothing requires these staking\n> >> nodes to include particular transactions into a block. With that in\n> >> mind, it isn't just that you require the permission of the person\n> >> who sold you the coins, which I can agree is a less dangerous form\n> >> of permission, but you must also require the permission of at least\n> >> 51% of the coin holders to even receive those coins in the first\n> >> place. This is not true in a Proof of Work system and this\n> >> difference absolutely should not be trivialized.\n> >>\n> >> Keagan\n> >>\n> >> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >>> Barrier to entry in PoS is being given permission by the previous\n> >> owner of a token\n> >>\n> >> The idea that proof of stake is not permissionless is completely\n> >> invalid. It pains me to see such an argument here. Perhaps we can\n> >> come to an agreement by being more specific. I'd like to propose the\n> >> following:\n> >>\n> >> Premise: There is a healthy exchange market for PoS Coin X with tens\n> >> of thousands of participants bidding to buy and sell the coin for\n> >> other currencies on the market.\n> >>\n> >> If the premise above is true, then there is no significant\n> >> permission needed to enter the market for minting blocks for PoS\n> >> Coin X. If you make a bid on someone's coins and they don't like you\n> >> and refuse, you can move on to any one of the other tens of\n> >> thousands of people in that marketplace. Would you agree, Cloud\n> >> Strife, that this situation couldn't be considered \"permissioned\"?\n> >>\n> >> If not, consider that participation in *any* decentralized system\n> >> requires the permission of at least one user in that system. If\n> >> there are thousands of bitcoin public nodes, you require the\n> >> permission of at least one of them to participate in bitcoin. No one\n> >> considers bitcoin \"permissioned\" because of this. Do you agree?\n> >>\n> >> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Barrier to entry in PoW is matter for hardware and energy is\n> >> permissionless and exist all over the universe, permissionless cost\n> >> which exists for everyone no matter who because it's unforgeable.\n> >>\n> >> Barrier to entry in PoS is being given permission by the previous\n> >> owner of a token for you to have it via transfer or sale, both\n> >> choices they never have to make since there are no continuous costs\n> >> with producing blocks forcing it. A permission is an infinitely high\n> >> barrier to entry if the previous owner, like the premining party,\n> >> refuses to give up the token they control.\n> >>\n> >> You're skipping the part where you depend on a permission of a\n> >> central party in control of the authority token before you can\n> >> produce blocks on your rasberry Pi.\n> >>\n> >> Proof of stake is not in any possible way relevant to permissionless\n> >> protocols, and thus not possibly relevant to decentralized protocols\n> >> where control must be distributed to independent (i.e.\n> >> permissionless) parties.\n> >>\n> >> There's nothing of relevance to discuss and this has been figured\n> >> out long long ago.\n> >>\n> >>\n> > https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n> >>\n> >>\n> > https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n> >>\n> >> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> @Lloyd wrote:\n> >>\n> >> Of course in reality no one wants to keep their coin holding keys\n> >> online so in Alogorand you can authorize a set of \"participation\n> >> keys\"[1] that will be used to create blocks on your coin holding\n> >> key's behalf.\n> >> Hopefully you've spotted the problem.\n> >> You can send your participation keys to any malicious party with a\n> >> nice website (see random example [2]) offering you a good return.\n> >> Damn it's still Proof-of-SquareSpace!\n> >>\n> >> I believe we are talking about a comparison to PoW, correct? If you\n> >> want to mine PoW, you need to buy expensive hardware and configure\n> >> it to work, and wait a long time to get any return by solo mining.\n> >> Or you can join a mining pool, which might use your hashing power\n> >> for nefarious purposes. Or you might skip the hardware all together\n> >> and fall for some \"cloud mining\" scheme with a pretty website and a\n> >> high rate of advertised return. So as you can see,\n> >> Proof-of-SquareSpace exists in PoW as well!\n> >>\n> >> The PoS equivalent of buying mining hardware is setting up your own\n> >> validator and not outsourcing that to anyone else. So both PoW and\n> >> PoS have the professional/expert way of participating, and the\n> >> fraud-prone, amateur way of participating. The only difference is,\n> >> with PoS the professional/expert way is accessible to anyone with a\n> >> raspberry Pi and a web connection, which is a much lower barrier to\n> >> entry than PoW. _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >  _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >  _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "yanmaani at cock.li",
                "date": "2021-06-25T00:29:19",
                "message_text_only": "No, that's not how it works.\n\nPoS is constitutionally incapable of producing any further consensus \nfrom its starting point. If you start out by hardcoding the bitcoin \nledger state at June 1, 2021, then your PoS system will be unable to \nreach a global consensus as to what the state was on June 2, 2021.\n\nTo get global consensus in PoS, you have to know which block came first. \nTo reach a consensus on which block was first, you need to solve the \ntimestamp problem. And to solve the timestamp problem, you need a \nconsensus system. You'll notice that at no point does PoS provide such a \nconsensus system.\n\nImplementations of PoS sacrifice global consensus for 'weak \nsubjectivity', meaning that each node has its own notion of when a \ncertain block arrived. Astute observers will note that 'each node has \nits own notion of what happened' differs somewhat from 'all nodes agree \non what happened', and that only one of these is a good description of \nwhat is commonly known as 'consensus'.\n\nMaybe a simpler way of looking at it is from the coder's perspective: \nhow do you implement IBD? In PoW, the \"longest chain\" rule is used - \n\"Nodes can leave and rejoin the network at will, accepting the \nproof-of-work chain as proof of what happened while they were gone.\". \nDoes PoS have this property?\n\nOn 2021-06-24 21:50, Erik Aronesty wrote:\n>> PoS is not suitable for use as a consensus system, because\n> it is constitutionally incapable of producing a consensus.\n> \n> true - but only for a system that is starting from nothing.\n> \n> since bitcoin already exists, and we have a consensus, you can use\n> bitcoin's existing consensus to maintain that consensus using\n> references to prior state.  and yes, you simply have to limit reorgs\n> to not go back before PoW was abandoned in favor of PoS/PoB (assuming\n> all incentive problems are solved).\n> \n> ie: once you have uses PoW to bootstrap the system, you can \"recycle\" \n> that work.\n> \n> On Thu, Jun 24, 2021 at 4:41 PM yanmaani--- via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> No, 51% of the *coin holders* can't do diddly squat. 51% of miners \n>> can,\n>> but in PoW, that's a different set to the coin holders.\n>> \n>> The basic problem with PoS, anyway, is that it's not actually a\n>> consensus system (\"weak subjectivity\"). Either you allow long reorgs,\n>> and then you open the door to long-range attacks, or you don't, and \n>> then\n>> you're not guaranteed that all nodes agree on the state of the chain,\n>> which was the purpose of the system to begin with.\n>> \n>> To put it more plainly: for PoS to work, you need a consensus on which\n>> block was seen first. But if you had that, you could presumably apply\n>> that method to determine which *transaction* was seen first, in which\n>> case you could do away with the blockchain entirely. (Real-world\n>> implementations of PoS, such that they are, do away with this\n>> requirement, scrapping the global consensus on ordering in favor of\n>> having each node decide for itself which block came first.)\n>> \n>> In other words, even if you solved all the incentive problems, the \n>> fact\n>> remains that PoS is not suitable for use as a consensus system, \n>> because\n>> it is constitutionally incapable of producing a consensus.\n>> \n>> On 2021-06-24 00:14, Billy Tetrud via bitcoin-dev wrote:\n>> >>  This is not true in a Proof of Work system and this difference\n>> > absolutely should not be trivialized.\n>> >\n>> > That is in fact true of Proof of Work as well. If a colluding\n>> > coalition of miners with more than 50% of the hashrate want to censor\n>> > transactions, they absolutely can do that by orphaning blocks that\n>> > contain transactions they want to censor. This is not different in\n>> > proof of stake.\n>> >\n>> > On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland\n>> > <keagan.mcclelland at gmail.com> wrote:\n>> >\n>> >>> Premise: There is a healthy exchange market for PoS Coin X with\n>> >> tens of thousands of participants bidding to buy and sell the coin\n>> >> for other currencies on the market.\n>> >>\n>> >> The difference here though is that Proof of Stake allows the quorum\n>> >> of coin holders to block the exchange of said coins if they are\n>> >> going to a particular destination. Nothing requires these staking\n>> >> nodes to include particular transactions into a block. With that in\n>> >> mind, it isn't just that you require the permission of the person\n>> >> who sold you the coins, which I can agree is a less dangerous form\n>> >> of permission, but you must also require the permission of at least\n>> >> 51% of the coin holders to even receive those coins in the first\n>> >> place. This is not true in a Proof of Work system and this\n>> >> difference absolutely should not be trivialized.\n>> >>\n>> >> Keagan\n>> >>\n>> >> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >>> Barrier to entry in PoS is being given permission by the previous\n>> >> owner of a token\n>> >>\n>> >> The idea that proof of stake is not permissionless is completely\n>> >> invalid. It pains me to see such an argument here. Perhaps we can\n>> >> come to an agreement by being more specific. I'd like to propose the\n>> >> following:\n>> >>\n>> >> Premise: There is a healthy exchange market for PoS Coin X with tens\n>> >> of thousands of participants bidding to buy and sell the coin for\n>> >> other currencies on the market.\n>> >>\n>> >> If the premise above is true, then there is no significant\n>> >> permission needed to enter the market for minting blocks for PoS\n>> >> Coin X. If you make a bid on someone's coins and they don't like you\n>> >> and refuse, you can move on to any one of the other tens of\n>> >> thousands of people in that marketplace. Would you agree, Cloud\n>> >> Strife, that this situation couldn't be considered \"permissioned\"?\n>> >>\n>> >> If not, consider that participation in *any* decentralized system\n>> >> requires the permission of at least one user in that system. If\n>> >> there are thousands of bitcoin public nodes, you require the\n>> >> permission of at least one of them to participate in bitcoin. No one\n>> >> considers bitcoin \"permissioned\" because of this. Do you agree?\n>> >>\n>> >> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> Barrier to entry in PoW is matter for hardware and energy is\n>> >> permissionless and exist all over the universe, permissionless cost\n>> >> which exists for everyone no matter who because it's unforgeable.\n>> >>\n>> >> Barrier to entry in PoS is being given permission by the previous\n>> >> owner of a token for you to have it via transfer or sale, both\n>> >> choices they never have to make since there are no continuous costs\n>> >> with producing blocks forcing it. A permission is an infinitely high\n>> >> barrier to entry if the previous owner, like the premining party,\n>> >> refuses to give up the token they control.\n>> >>\n>> >> You're skipping the part where you depend on a permission of a\n>> >> central party in control of the authority token before you can\n>> >> produce blocks on your rasberry Pi.\n>> >>\n>> >> Proof of stake is not in any possible way relevant to permissionless\n>> >> protocols, and thus not possibly relevant to decentralized protocols\n>> >> where control must be distributed to independent (i.e.\n>> >> permissionless) parties.\n>> >>\n>> >> There's nothing of relevance to discuss and this has been figured\n>> >> out long long ago.\n>> >>\n>> >>\n>> > https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n>> >>\n>> >>\n>> > https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n>> >>\n>> >> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> @Lloyd wrote:\n>> >>\n>> >> Of course in reality no one wants to keep their coin holding keys\n>> >> online so in Alogorand you can authorize a set of \"participation\n>> >> keys\"[1] that will be used to create blocks on your coin holding\n>> >> key's behalf.\n>> >> Hopefully you've spotted the problem.\n>> >> You can send your participation keys to any malicious party with a\n>> >> nice website (see random example [2]) offering you a good return.\n>> >> Damn it's still Proof-of-SquareSpace!\n>> >>\n>> >> I believe we are talking about a comparison to PoW, correct? If you\n>> >> want to mine PoW, you need to buy expensive hardware and configure\n>> >> it to work, and wait a long time to get any return by solo mining.\n>> >> Or you can join a mining pool, which might use your hashing power\n>> >> for nefarious purposes. Or you might skip the hardware all together\n>> >> and fall for some \"cloud mining\" scheme with a pretty website and a\n>> >> high rate of advertised return. So as you can see,\n>> >> Proof-of-SquareSpace exists in PoW as well!\n>> >>\n>> >> The PoS equivalent of buying mining hardware is setting up your own\n>> >> validator and not outsourcing that to anyone else. So both PoW and\n>> >> PoS have the professional/expert way of participating, and the\n>> >> fraud-prone, amateur way of participating. The only difference is,\n>> >> with PoS the professional/expert way is accessible to anyone with a\n>> >> raspberry Pi and a web connection, which is a much lower barrier to\n>> >> entry than PoW. _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >  _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >  _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Ruben Somsen",
                "date": "2021-06-25T16:08:07",
                "message_text_only": "Hi all,\n\nThanks for the lively discussion. On behalf of the bitcoin-dev moderators\nand with the readers of this mailing list in mind, we'd like to suggest\nfinishing up this discussion. Of course there should be some room for\nexploring fringe ideas, but it should not dominate the mailing list either.\nFun as it may be, perhaps it's time to get back to focusing on the topics\nthat are more directly relevant to Bitcoin.\n\nCheers,\nRuben\n\nOn Fri, Jun 25, 2021 at 9:29 AM yanmaani--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> No, that's not how it works.\n>\n> PoS is constitutionally incapable of producing any further consensus\n> from its starting point. If you start out by hardcoding the bitcoin\n> ledger state at June 1, 2021, then your PoS system will be unable to\n> reach a global consensus as to what the state was on June 2, 2021.\n>\n> To get global consensus in PoS, you have to know which block came first.\n> To reach a consensus on which block was first, you need to solve the\n> timestamp problem. And to solve the timestamp problem, you need a\n> consensus system. You'll notice that at no point does PoS provide such a\n> consensus system.\n>\n> Implementations of PoS sacrifice global consensus for 'weak\n> subjectivity', meaning that each node has its own notion of when a\n> certain block arrived. Astute observers will note that 'each node has\n> its own notion of what happened' differs somewhat from 'all nodes agree\n> on what happened', and that only one of these is a good description of\n> what is commonly known as 'consensus'.\n>\n> Maybe a simpler way of looking at it is from the coder's perspective:\n> how do you implement IBD? In PoW, the \"longest chain\" rule is used -\n> \"Nodes can leave and rejoin the network at will, accepting the\n> proof-of-work chain as proof of what happened while they were gone.\".\n> Does PoS have this property?\n>\n> On 2021-06-24 21:50, Erik Aronesty wrote:\n> >> PoS is not suitable for use as a consensus system, because\n> > it is constitutionally incapable of producing a consensus.\n> >\n> > true - but only for a system that is starting from nothing.\n> >\n> > since bitcoin already exists, and we have a consensus, you can use\n> > bitcoin's existing consensus to maintain that consensus using\n> > references to prior state.  and yes, you simply have to limit reorgs\n> > to not go back before PoW was abandoned in favor of PoS/PoB (assuming\n> > all incentive problems are solved).\n> >\n> > ie: once you have uses PoW to bootstrap the system, you can \"recycle\"\n> > that work.\n> >\n> > On Thu, Jun 24, 2021 at 4:41 PM yanmaani--- via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> No, 51% of the *coin holders* can't do diddly squat. 51% of miners\n> >> can,\n> >> but in PoW, that's a different set to the coin holders.\n> >>\n> >> The basic problem with PoS, anyway, is that it's not actually a\n> >> consensus system (\"weak subjectivity\"). Either you allow long reorgs,\n> >> and then you open the door to long-range attacks, or you don't, and\n> >> then\n> >> you're not guaranteed that all nodes agree on the state of the chain,\n> >> which was the purpose of the system to begin with.\n> >>\n> >> To put it more plainly: for PoS to work, you need a consensus on which\n> >> block was seen first. But if you had that, you could presumably apply\n> >> that method to determine which *transaction* was seen first, in which\n> >> case you could do away with the blockchain entirely. (Real-world\n> >> implementations of PoS, such that they are, do away with this\n> >> requirement, scrapping the global consensus on ordering in favor of\n> >> having each node decide for itself which block came first.)\n> >>\n> >> In other words, even if you solved all the incentive problems, the\n> >> fact\n> >> remains that PoS is not suitable for use as a consensus system,\n> >> because\n> >> it is constitutionally incapable of producing a consensus.\n> >>\n> >> On 2021-06-24 00:14, Billy Tetrud via bitcoin-dev wrote:\n> >> >>  This is not true in a Proof of Work system and this difference\n> >> > absolutely should not be trivialized.\n> >> >\n> >> > That is in fact true of Proof of Work as well. If a colluding\n> >> > coalition of miners with more than 50% of the hashrate want to censor\n> >> > transactions, they absolutely can do that by orphaning blocks that\n> >> > contain transactions they want to censor. This is not different in\n> >> > proof of stake.\n> >> >\n> >> > On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland\n> >> > <keagan.mcclelland at gmail.com> wrote:\n> >> >\n> >> >>> Premise: There is a healthy exchange market for PoS Coin X with\n> >> >> tens of thousands of participants bidding to buy and sell the coin\n> >> >> for other currencies on the market.\n> >> >>\n> >> >> The difference here though is that Proof of Stake allows the quorum\n> >> >> of coin holders to block the exchange of said coins if they are\n> >> >> going to a particular destination. Nothing requires these staking\n> >> >> nodes to include particular transactions into a block. With that in\n> >> >> mind, it isn't just that you require the permission of the person\n> >> >> who sold you the coins, which I can agree is a less dangerous form\n> >> >> of permission, but you must also require the permission of at least\n> >> >> 51% of the coin holders to even receive those coins in the first\n> >> >> place. This is not true in a Proof of Work system and this\n> >> >> difference absolutely should not be trivialized.\n> >> >>\n> >> >> Keagan\n> >> >>\n> >> >> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >>> Barrier to entry in PoS is being given permission by the previous\n> >> >> owner of a token\n> >> >>\n> >> >> The idea that proof of stake is not permissionless is completely\n> >> >> invalid. It pains me to see such an argument here. Perhaps we can\n> >> >> come to an agreement by being more specific. I'd like to propose the\n> >> >> following:\n> >> >>\n> >> >> Premise: There is a healthy exchange market for PoS Coin X with tens\n> >> >> of thousands of participants bidding to buy and sell the coin for\n> >> >> other currencies on the market.\n> >> >>\n> >> >> If the premise above is true, then there is no significant\n> >> >> permission needed to enter the market for minting blocks for PoS\n> >> >> Coin X. If you make a bid on someone's coins and they don't like you\n> >> >> and refuse, you can move on to any one of the other tens of\n> >> >> thousands of people in that marketplace. Would you agree, Cloud\n> >> >> Strife, that this situation couldn't be considered \"permissioned\"?\n> >> >>\n> >> >> If not, consider that participation in *any* decentralized system\n> >> >> requires the permission of at least one user in that system. If\n> >> >> there are thousands of bitcoin public nodes, you require the\n> >> >> permission of at least one of them to participate in bitcoin. No one\n> >> >> considers bitcoin \"permissioned\" because of this. Do you agree?\n> >> >>\n> >> >> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >> Barrier to entry in PoW is matter for hardware and energy is\n> >> >> permissionless and exist all over the universe, permissionless cost\n> >> >> which exists for everyone no matter who because it's unforgeable.\n> >> >>\n> >> >> Barrier to entry in PoS is being given permission by the previous\n> >> >> owner of a token for you to have it via transfer or sale, both\n> >> >> choices they never have to make since there are no continuous costs\n> >> >> with producing blocks forcing it. A permission is an infinitely high\n> >> >> barrier to entry if the previous owner, like the premining party,\n> >> >> refuses to give up the token they control.\n> >> >>\n> >> >> You're skipping the part where you depend on a permission of a\n> >> >> central party in control of the authority token before you can\n> >> >> produce blocks on your rasberry Pi.\n> >> >>\n> >> >> Proof of stake is not in any possible way relevant to permissionless\n> >> >> protocols, and thus not possibly relevant to decentralized protocols\n> >> >> where control must be distributed to independent (i.e.\n> >> >> permissionless) parties.\n> >> >>\n> >> >> There's nothing of relevance to discuss and this has been figured\n> >> >> out long long ago.\n> >> >>\n> >> >>\n> >> >\n> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n> >> >>\n> >> >>\n> >> >\n> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n> >> >>\n> >> >> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >> @Lloyd wrote:\n> >> >>\n> >> >> Of course in reality no one wants to keep their coin holding keys\n> >> >> online so in Alogorand you can authorize a set of \"participation\n> >> >> keys\"[1] that will be used to create blocks on your coin holding\n> >> >> key's behalf.\n> >> >> Hopefully you've spotted the problem.\n> >> >> You can send your participation keys to any malicious party with a\n> >> >> nice website (see random example [2]) offering you a good return.\n> >> >> Damn it's still Proof-of-SquareSpace!\n> >> >>\n> >> >> I believe we are talking about a comparison to PoW, correct? If you\n> >> >> want to mine PoW, you need to buy expensive hardware and configure\n> >> >> it to work, and wait a long time to get any return by solo mining.\n> >> >> Or you can join a mining pool, which might use your hashing power\n> >> >> for nefarious purposes. Or you might skip the hardware all together\n> >> >> and fall for some \"cloud mining\" scheme with a pretty website and a\n> >> >> high rate of advertised return. So as you can see,\n> >> >> Proof-of-SquareSpace exists in PoW as well!\n> >> >>\n> >> >> The PoS equivalent of buying mining hardware is setting up your own\n> >> >> validator and not outsourcing that to anyone else. So both PoW and\n> >> >> PoS have the professional/expert way of participating, and the\n> >> >> fraud-prone, amateur way of participating. The only difference is,\n> >> >> with PoS the professional/expert way is accessible to anyone with a\n> >> >> raspberry Pi and a web connection, which is a much lower barrier to\n> >> >> entry than PoW. _______________________________________________\n> >> >> bitcoin-dev mailing list\n> >> >> bitcoin-dev at lists.linuxfoundation.org\n> >> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >  _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >  _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> > _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210625/830064a7/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-26T16:26:12",
                "message_text_only": "I've created a thread on reddit where we can continue the conversation:\nhttps://www.reddit.com/r/BitcoinDiscussion/comments/o8dvlo/bitcoindev_opinion_on_proof_of_stake_in_future/\n\nOn Fri, Jun 25, 2021 at 9:59 AM greg m <greg_not_so at hotmail.com> wrote:\n\n> Where do we go from here? reddit?\n>\n> Happy Friday everyone!\n> gm\n>\n> On Jun 25, 2021 12:08, Ruben Somsen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi all,\n>\n> Thanks for the lively discussion. On behalf of the bitcoin-dev moderators\n> and with the readers of this mailing list in mind, we'd like to suggest\n> finishing up this discussion. Of course there should be some room for\n> exploring fringe ideas, but it should not dominate the mailing list either.\n> Fun as it may be, perhaps it's time to get back to focusing on the topics\n> that are more directly relevant to Bitcoin.\n>\n> Cheers,\n> Ruben\n>\n> On Fri, Jun 25, 2021 at 9:29 AM yanmaani--- via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> No, that's not how it works.\n>\n> PoS is constitutionally incapable of producing any further consensus\n> from its starting point. If you start out by hardcoding the bitcoin\n> ledger state at June 1, 2021, then your PoS system will be unable to\n> reach a global consensus as to what the state was on June 2, 2021.\n>\n> To get global consensus in PoS, you have to know which block came first.\n> To reach a consensus on which block was first, you need to solve the\n> timestamp problem. And to solve the timestamp problem, you need a\n> consensus system. You'll notice that at no point does PoS provide such a\n> consensus system.\n>\n> Implementations of PoS sacrifice global consensus for 'weak\n> subjectivity', meaning that each node has its own notion of when a\n> certain block arrived. Astute observers will note that 'each node has\n> its own notion of what happened' differs somewhat from 'all nodes agree\n> on what happened', and that only one of these is a good description of\n> what is commonly known as 'consensus'.\n>\n> Maybe a simpler way of looking at it is from the coder's perspective:\n> how do you implement IBD? In PoW, the \"longest chain\" rule is used -\n> \"Nodes can leave and rejoin the network at will, accepting the\n> proof-of-work chain as proof of what happened while they were gone.\".\n> Does PoS have this property?\n>\n> On 2021-06-24 21:50, Erik Aronesty wrote:\n> >> PoS is not suitable for use as a consensus system, because\n> > it is constitutionally incapable of producing a consensus.\n> >\n> > true - but only for a system that is starting from nothing.\n> >\n> > since bitcoin already exists, and we have a consensus, you can use\n> > bitcoin's existing consensus to maintain that consensus using\n> > references to prior state.  and yes, you simply have to limit reorgs\n> > to not go back before PoW was abandoned in favor of PoS/PoB (assuming\n> > all incentive problems are solved).\n> >\n> > ie: once you have uses PoW to bootstrap the system, you can \"recycle\"\n> > that work.\n> >\n> > On Thu, Jun 24, 2021 at 4:41 PM yanmaani--- via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> No, 51% of the *coin holders* can't do diddly squat. 51% of miners\n> >> can,\n> >> but in PoW, that's a different set to the coin holders.\n> >>\n> >> The basic problem with PoS, anyway, is that it's not actually a\n> >> consensus system (\"weak subjectivity\"). Either you allow long reorgs,\n> >> and then you open the door to long-range attacks, or you don't, and\n> >> then\n> >> you're not guaranteed that all nodes agree on the state of the chain,\n> >> which was the purpose of the system to begin with.\n> >>\n> >> To put it more plainly: for PoS to work, you need a consensus on which\n> >> block was seen first. But if you had that, you could presumably apply\n> >> that method to determine which *transaction* was seen first, in which\n> >> case you could do away with the blockchain entirely. (Real-world\n> >> implementations of PoS, such that they are, do away with this\n> >> requirement, scrapping the global consensus on ordering in favor of\n> >> having each node decide for itself which block came first.)\n> >>\n> >> In other words, even if you solved all the incentive problems, the\n> >> fact\n> >> remains that PoS is not suitable for use as a consensus system,\n> >> because\n> >> it is constitutionally incapable of producing a consensus.\n> >>\n> >> On 2021-06-24 00:14, Billy Tetrud via bitcoin-dev wrote:\n> >> >>  This is not true in a Proof of Work system and this difference\n> >> > absolutely should not be trivialized.\n> >> >\n> >> > That is in fact true of Proof of Work as well. If a colluding\n> >> > coalition of miners with more than 50% of the hashrate want to censor\n> >> > transactions, they absolutely can do that by orphaning blocks that\n> >> > contain transactions they want to censor. This is not different in\n> >> > proof of stake.\n> >> >\n> >> > On Wed, Jun 23, 2021 at 11:14 AM Keagan McClelland\n> >> > <keagan.mcclelland at gmail.com> wrote:\n> >> >\n> >> >>> Premise: There is a healthy exchange market for PoS Coin X with\n> >> >> tens of thousands of participants bidding to buy and sell the coin\n> >> >> for other currencies on the market.\n> >> >>\n> >> >> The difference here though is that Proof of Stake allows the quorum\n> >> >> of coin holders to block the exchange of said coins if they are\n> >> >> going to a particular destination. Nothing requires these staking\n> >> >> nodes to include particular transactions into a block. With that in\n> >> >> mind, it isn't just that you require the permission of the person\n> >> >> who sold you the coins, which I can agree is a less dangerous form\n> >> >> of permission, but you must also require the permission of at least\n> >> >> 51% of the coin holders to even receive those coins in the first\n> >> >> place. This is not true in a Proof of Work system and this\n> >> >> difference absolutely should not be trivialized.\n> >> >>\n> >> >> Keagan\n> >> >>\n> >> >> On Wed, Jun 23, 2021 at 2:30 AM Billy Tetrud via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >>> Barrier to entry in PoS is being given permission by the previous\n> >> >> owner of a token\n> >> >>\n> >> >> The idea that proof of stake is not permissionless is completely\n> >> >> invalid. It pains me to see such an argument here. Perhaps we can\n> >> >> come to an agreement by being more specific. I'd like to propose the\n> >> >> following:\n> >> >>\n> >> >> Premise: There is a healthy exchange market for PoS Coin X with tens\n> >> >> of thousands of participants bidding to buy and sell the coin for\n> >> >> other currencies on the market.\n> >> >>\n> >> >> If the premise above is true, then there is no significant\n> >> >> permission needed to enter the market for minting blocks for PoS\n> >> >> Coin X. If you make a bid on someone's coins and they don't like you\n> >> >> and refuse, you can move on to any one of the other tens of\n> >> >> thousands of people in that marketplace. Would you agree, Cloud\n> >> >> Strife, that this situation couldn't be considered \"permissioned\"?\n> >> >>\n> >> >> If not, consider that participation in *any* decentralized system\n> >> >> requires the permission of at least one user in that system. If\n> >> >> there are thousands of bitcoin public nodes, you require the\n> >> >> permission of at least one of them to participate in bitcoin. No one\n> >> >> considers bitcoin \"permissioned\" because of this. Do you agree?\n> >> >>\n> >> >> On Thu, Jun 17, 2021 at 1:15 PM Cloud Strife via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >> Barrier to entry in PoW is matter for hardware and energy is\n> >> >> permissionless and exist all over the universe, permissionless cost\n> >> >> which exists for everyone no matter who because it's unforgeable.\n> >> >>\n> >> >> Barrier to entry in PoS is being given permission by the previous\n> >> >> owner of a token for you to have it via transfer or sale, both\n> >> >> choices they never have to make since there are no continuous costs\n> >> >> with producing blocks forcing it. A permission is an infinitely high\n> >> >> barrier to entry if the previous owner, like the premining party,\n> >> >> refuses to give up the token they control.\n> >> >>\n> >> >> You're skipping the part where you depend on a permission of a\n> >> >> central party in control of the authority token before you can\n> >> >> produce blocks on your rasberry Pi.\n> >> >>\n> >> >> Proof of stake is not in any possible way relevant to permissionless\n> >> >> protocols, and thus not possibly relevant to decentralized protocols\n> >> >> where control must be distributed to independent (i.e.\n> >> >> permissionless) parties.\n> >> >>\n> >> >> There's nothing of relevance to discuss and this has been figured\n> >> >> out long long ago.\n> >> >>\n> >> >>\n> >> >\n> https://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Stake-Fallacy\n> >> >>\n> >> >>\n> >> >\n> https://medium.com/@factchecker9000/nothing-is-worse-than-proof-of-stake-e70b12b988ca\n> >> >>\n> >> >> On Tue, Jun 15, 2021 at 7:13 AM James MacWhyte via bitcoin-dev\n> >> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>\n> >> >> @Lloyd wrote:\n> >> >>\n> >> >> Of course in reality no one wants to keep their coin holding keys\n> >> >> online so in Alogorand you can authorize a set of \"participation\n> >> >> keys\"[1] that will be used to create blocks on your coin holding\n> >> >> key's behalf.\n> >> >> Hopefully you've spotted the problem.\n> >> >> You can send your participation keys to any malicious party with a\n> >> >> nice website (see random example [2]) offering you a good return.\n> >> >> Damn it's still Proof-of-SquareSpace!\n> >> >>\n> >> >> I believe we are talking about a comparison to PoW, correct? If you\n> >> >> want to mine PoW, you need to buy expensive hardware and configure\n> >> >> it to work, and wait a long time to get any return by solo mining.\n> >> >> Or you can join a mining pool, which might use your hashing power\n> >> >> for nefarious purposes. Or you might skip the hardware all together\n> >> >> and fall for some \"cloud mining\" scheme with a pretty website and a\n> >> >> high rate of advertised return. So as you can see,\n> >> >> Proof-of-SquareSpace exists in PoW as well!\n> >> >>\n> >> >> The PoS equivalent of buying mining hardware is setting up your own\n> >> >> validator and not outsourcing that to anyone else. So both PoW and\n> >> >> PoS have the professional/expert way of participating, and the\n> >> >> fraud-prone, amateur way of participating. The only difference is,\n> >> >> with PoS the professional/expert way is accessible to anyone with a\n> >> >> raspberry Pi and a web connection, which is a much lower barrier to\n> >> >> entry than PoW. _______________________________________________\n> >> >> bitcoin-dev mailing list\n> >> >> bitcoin-dev at lists.linuxfoundation.org\n> >> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >  _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >  _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> > _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210626/254b5d37/attachment-0001.html>"
            },
            {
                "author": "Carlo Spiller",
                "date": "2021-06-24T08:59:12",
                "message_text_only": "The key difference here is that in PoS the seller of the coin might \nstill have a vested interest in the network, where in PoW the person you \naquire energy from to mine and mint has absolutely nothing to do with \nthe network. Anyone with power supply can sell it to you and has no \nfurther interest in what you do with that power. If you don't find a \npowersupply, you can build your own.\n\nThat is not generically true for PoS. If the seller is still staked with \nmore coins they hold, they are entrenched in the network and have \n\"permissioned\" you to partake only for what they sold to you. Even \nworse, if a super-majority decides to simply never sell, you cannot \naquire significant stake and participate in minting.\n\nAm 24.06.21 um 10:12 schrieb bitcoin-dev-request at lists.linuxfoundation.org:\n> Re: Opinion on proof of stake in future\n\nPremise: There is a healthy exchange market for PoS Coin X with tens of\nthousands of participants bidding to buy and sell the coin for other\ncurrencies on the market.\n\nIf the premise above is true, then there is no significant permission\nneeded to enter the market for minting blocks for PoS Coin X. If you make a\nbid on someone's coins and they don't like you and refuse, you can move on\nto any one of the other tens of thousands of people in that marketplace."
            }
        ],
        "thread_summary": {
            "title": "Opinion on proof of stake in future",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "SatoshiSingh",
                "befreeandopen",
                "Keagan McClelland",
                "Lloyd Fournier",
                "yanmaani at cock.li",
                "Erik Aronesty",
                "James MacWhyte",
                "Cloud Strife",
                "Carlo Spiller",
                "Billy Tetrud",
                "Ruben Somsen"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 303342
        }
    },
    {
        "title": "[bitcoin-dev] A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent",
        "thread_messages": [
            {
                "author": "Lloyd Fournier",
                "date": "2021-06-07T02:27:36",
                "message_text_only": "Hi Antione,\n\nThanks for bringing up this important topic. I think there might be another\nclass of solutions over input based, CPFP and sponsorship. I'll call them\ntx mutation schemes. The idea is that you can set a key that can increase\nthe fee by lowering a particular output after the tx is signed without\ninvalidating the signature. The premise is that anytime you need to bump\nthe fee of a transaction you must necessarily have funds in an output that\nare going to you and therefore you can sacrifice some of them to increase\nthe fee. This is obviously destructive to txids so child presigned\ntransactions will have to use ANYPREVOUT as in your proposal. The advantage\nis that it does not require keeping extra inputs around to bump the fee.\n\nSo imagine a new opcode OP_CHECKSIG_MUTATED <output index> <publickey>\n<value> <signature>.\nThis would check that <signature> is valid against <publickey> if the\ncurrent transaction had the output at <output index> reduced by <value>. To\nmake this more efficient, if the public key is one byte: 0x02 it references\nthe taproot *external key* (similar to how ANYPREVOUT uses 0x01 to refer to\ninternal key[1]).\nNow for our protocol we want both parties (p1 and p2) to be able to fee\nbump a commitment transaction. They use MuSig to sign the commitment tx\nunder the external key with a decent fee for the current conditions. But in\ncase it proves insufficient they have added the following two leaves to\ntheir key in the funding output as a backup so that p1 and p2 can\nunilaterally bump the fee of anything they sign spending from the funding\noutput:\n\n1. OP_CHECKSIG_MUTATED(0, 0x02, <fee-bump-value>, <original-signature>)\nOP_CHECKSIGADD(p1-fee-bump-key, <p1-fee-bump-signature>)  OP_2\nOP_NUMEQUALVERIFY\n2. OP_CHECKSIG_MUTATED(1, 0x02, <fee-bump-value>, <original-signature>)\nOP_CHECKSIGADD(p2-fee-bump-key, <p2-fee-bump-signature>) OP_2\nOP_NUMEQUALVERIFY\n\nwhere <...> indicates the thing comes from the witness stack.\nSo to bump the fee of the commit tx after it has been signed either party\ntakes the <original-signature> and adds a signature under their\nfee-bump-key for the new tx and reveals their fee bump leaf.\n<original-signature> is checked against the old transaction while the fee\nbumped transaction is checked against the fee bump key.\n\nI know I have left out how to change mempool eviction rules to accommodate\nthis kind of fee bumping without DoS or pinning attacks but hopefully I\nhave demonstrated that this class of solutions also exists.\n\n[1] https://github.com/ajtowns/bips/blob/bip-anyprevout/bip-0118.mediawiki\n\nCheers,\n\nLL\n\n\n\nOn Fri, 28 May 2021 at 07:13, Antoine Riard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> This post is pursuing a wider discussion around better fee-bumping\n> strategies for second-layer protocols. It draws out a comparison between\n> input-based and CPFP fee-bumping techniques, and their apparent trade-offs\n> in terms of onchain footprint, tx-relay bandwidth rebroadcast, batching\n> opportunity and mempool flexibility.\n>\n> Thanks to Darosior for reviews, ideas and discussions.\n>\n> ## Child-Pay-For-Parent\n>\n> CPFP is a mature fee-bumping technique, known and used for a while in the\n> Bitcoin ecosystem. However, its usage in contract protocols with\n> distrusting counterparties raised some security issues. As mempool's chain\n> of unconfirmed transactions are limited in size, if any output is spendable\n> by any contract participant, it can be leveraged as a pinning vector to\n> downgrade odds of transaction confirmation [0].\n>\n> That said, contract transactions interested to be protected under the\n> carve-out logic require to add a new output for any contract participant,\n> even if ultimately only one of them serves as an anchor to attach a CPFP.\n>\n> ## Input-Based\n>\n> I think input-based fee-bumping has been less studied as fee-bumping\n> primitive for L2s [1]. One variant of input-based fee-bumping usable today\n> is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability\n> flags. If the transaction is the latest stage of the contract, a bumping\n> input can be attached just-in-time, thus increasing the feerate of the\n> whole package.\n>\n> However, as of today, input-based fee-bumping doesn't work to bump first\n> stages of contract transactions as it's destructive of the txid, and as\n> such breaks chain of pre-signed transactions. A first improvement would be\n> the deployment of the SIGHASH_ANYPREVOUT softfork proposal. This new\n> malleability flag allows a transaction to be signed without reference to\n> any specific previous output. That way,  spent transactions can be\n> fee-bumped without altering validity of the chain of transactions.\n>\n> Even assuming SIGHASH_ANYPREVOUT, if the first stage contract transaction\n> includes multiple outputs (e.g the LN's commitment tx has multiple HTLC\n> outputs), SIGHASH_SINGLE can't be used and the fee-bumping input value\n> might be wasted. This edge can be smoothed by broadcasting a preliminary\n> fan-out transaction with a set of outputs providing a range of feerate\n> points for the bumped transaction.\n>\n> This overhead could be smoothed even further in the future with more\n> advanced sighash malleability flags like SIGHASH_IOMAP, allowing\n> transaction signers to commit to a map of inputs/outputs [2]. In the\n> context of input-based, the overflowed fee value could be redirected to an\n> outgoing output.\n>\n> ## Onchain Footprint\n>\n> CPFP: One anchor output per participant must be included in the commitment\n> transaction. To this anchor must be attached a child transaction with 2\n> inputs (one for the commitment, one for the bumping utxo) and 1 output.\n> Onchain footprint: 2 inputs + 3 outputs.\n>\n> Input-based (today): If the bumping utxo is offering an adequate feerate\n> point in function of network mempools congestion at time of broadcast, only\n> 1 input. If a preliminary fan-out transaction to adjust feerate point must\n> be broadcasted first, 1 input and 2 outputs more must be accounted for.\n> Onchain footprint: 2 inputs + 3 outputs.\n>\n> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): As long as the bumping\n> utxo's value is wide enough to cover the worst-case of mempools congestion,\n> the bumped transaction can be attached 1 input and 1 output. Onchain\n> footprint: 1 input + 1 output.\n>\n> ## Tx-Relay Bandwidth Rebroadcast\n>\n> CPFP: In the context of multi-party protocols, we should assume bounded\n> rationality of the participants w.r.t to an unconfirmed spend of the\n> contract utxo across network mempools. Under this assumption, the bumped\n> transaction might have been replaced by a concurrent state. To guarantee\n> efficiency of the CPFP the whole chain of transactions should be\n> rebroadcast, perhaps wasting bandwidth consumption for a still-identical\n> bumped transaction [3]. Rebroadcast footprint: the whole chain of\n> transactions.\n>\n> Input-based (today): In case of rebroadcast, the fee-bumping input is\n> attached to the root of the chain of transactions and as such breaks the\n> chain validity in itself. Beyond the rebroadcast of the updated root under\n> replacement policy, the remaining transactions must be updated and\n> rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>\n> Input-based(SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): In case of rebroadcast, the\n> fee-bumping is attached to the root of the chain of transactions but it\n> doesn't break the chain validity in itself. Assuming a future mempool\n> acceptance logic to authorize in-place substitution, the rest of the chain\n> could be preserved. Rebroadcast footprint: the root of the chain of\n> transactions.\n>\n> ## Fee-Bumping Batching\n>\n> CPFP: In the context of multi-party protocols, in optimistic scenarios, we\n> can assume aggregation of multiple chains of transactions. For e.g, a LN\n> operator is desirous to non-cooperatively close multiple channels at the\n> same time and would like to combine their fee-bumping. With CPFP, one\n> anchor output and one bumping input must be consumed per aggregated chain,\n> even if the child transaction fields can be shared. Batching perf: 1\n> input/1 output per aggregated chain.\n>\n> Input-based (today): Unless the contract allows interactivity, multiple\n> chains of transactions cannot be aggregated. One bumping input must be\n> attached per chain, though if a preliminary fan-out transaction is relied\n> on to offer multiple feerate points, transaction fields can be shared.\n> Batching perf: 1 input/1 output per aggregated chain.\n>\n> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): Multiple chains of\n> transactions might be aggregated together *non-interactively*. One bumping\n> input and outgoing output can be attached to the aggregated root. Batching\n> perf: 1 input/1 output per aggregation.\n>\n> ## Fee-Bumping Mempool Flexibility\n>\n> CPFP: In the context of multi-party protocols, one of your counterparties\n> might build a branch of transactions from one of the root outputs thus\n> saturating the in-mempool package limits. To avoid these shenanigans, LN\n> channels are relying on the carve-out mechanism. Though, the carve-out\n> mechanism includes its own limitation and doesn't scale beyond 2 contract\n> participants.\n>\n> Input-based: The root of the chain of transaction is the package's oldest\n> ancestor, so package limits don't restrain its acceptance and it works\n> whatever the number of contract participants.\n>\n> To conclude, this post scores 2 fee-bumping primitives for multi-party\n> protocols on a range of factors. It hopes to unravel the ground for a real\n> feerate performance framework of second-layers protocols .\n>\n> Beyond that, few points can be highlighted a) future soft forks allow\n> significant onchain footprint savings, especially in case of batching, b)\n> future package relay bandwidth efficiency should account for rebroadcast\n> frequency of CPFPing multi-party protocols. On this latter point one\n> follow-up might be to evaluate differing package relay *announcement*\n> schemes in function of odds of non-cooperative protocol broadcast/odds of\n> concurrent broadcast/rebroadcast frequencies.\n>\n> Thoughts ?\n>\n> Cheers,\n> Antoine\n>\n> [0]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n> [1] Beyond the revault architecture :\n> https://github.com/revault/practical-revault/blob/master/revault.pdf\n> [2] Already proposed a while back :\n> https://bitcointalk.org/index.php?topic=252960.0\n> [3] In theory, an already-relayed transaction shouldn't pass Core's\n> `filterInventoryKnown`. In practice, if the transaction is announced as\n> part of a package_id, the child might have changed, not the parent, leading\n> to a redundant relay of the latter.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210607/49ff1a08/attachment.html>"
            },
            {
                "author": "darosior",
                "date": "2021-06-10T13:18:53",
                "message_text_only": "Hi,\n\nAnother thing to consider when comparing these two techniques is anti-fee sniping protection. If you are going to feebump directly\nyour revocation transaction by adding inputs to it, the nLockTime has already been signed in advance. Therefore your are sponsoring\na transaction that could be included in any reorged block.\n\nThis is not a big deal for now but i'm concerned it may become one, especially since this type of transaction might be the highest fee-paying\nones on the network (there is a lot at stake). Having a new sighash type not masking the nLockTime so that it can be set by the feebumper\ncould help with this, even though the presumably low pre-signed fee can still be snipped (since the ALL signature is added to the feebump inputs).\n\nThe recent BIP proposal by Chris Belcher [0] also just uncovered (to me) a new hack: if the feebumping coins are less than 65,535 blocks old, we\ncould also set the nSequence of these coins to achieve the same purpose [1]. And this can be done with today's Bitcoin!\n\nAntoine P.\n\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019048.html\n[1] https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002412.html\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nLe vendredi 28 mai 2021 \u00e0 6:13 AM, Antoine Riard <antoine.riard at gmail.com> a \u00e9crit :\n\n>> Unfortunately, ACP | SINGLE is trivially pinable [0] (TL;DR: i can just attach an output paying immediately to me, and construct a tx chain spending it). We are using ACP | ALL for Revault,\n>> which is the reason why we need a well laid-out pool of fee-bumping UTXOs (as you need to consume them entirely).\n>\n> Oh yes, I should have mentioned this pinning vector. The witnessScript I've in mind to make secure that type of chain of transactions would be one MuSig key for all contract participants, where signature are committed with SIGHASH_ANYPREVOUT | SIGHASH_IOMAP, one pubkey per participant to lockdown the transaction with SIGHASH_ALL. I think it works and prevents malicious in-flight attachment of input/output to a multi-party transaction ?\n>\n>> I believe that it's better to broadcast a single fan-out transaction creating your entire UTXO pool in advance. You could create one coin per contract you are watching which value would be\n>> used to bump your transaction feerate from the presigned one to -say- the average feerate over the past month, and then have smaller coins that you could attach to any transaction to bump\n>> by a certain threshold (say, 10sat/vbyte). You would create as many small coin as your reserve algorithm tells you (which could be \"i need to be able, worst case, to close all my contracts\n>> with the worst historical feerate.\" or (fractional reserve version) \"i need to be able, worst case, to close 10% of my contracts at the average feerate of the past year, the remaining ones sorry\n>> for my loss\"). [1]\n>\n>> This method is both much more optimal (though you need to sometimes incur the cost of many small additional inputs) and also makes sure that your feebump does not depend on the confirmation of a first stage transaction (as you can only RBF with new inputs if they are confirmed).\n>\n> I see, so you spread your bumping UTXO pool in two ranges : at least one bumping utxo per contract, and a subpool of emergency smaller coins, ready to be attached on any contract. I think this strategy makes sense for vaults as you can afford a bunch of small coins at different feerates, spending the ones not used afterwards. And higher cells of feerate reserve as the worst historical feerate are relatively not that much compared to locked-in vaults value. That said, I'm more dubious about LN, where node operators might not keep the worst-case fee-bumping reserve, as the time value of the coins aren't worth the channel liquidity at stake.\n>\n>> Why not just attaching it at the tail of the chain? Bumping the last child with additional input would effectively be a CPFP for the entire chain in this case.\n>\n> Yes, input-based bumping targeting the tail of the chain works at the transaction level. But if you assume bounded visibility of network mempools, one of your counterparties might have broadcast a concurrent state, thus making your CPFP irrelevant for propagation. Though smarter tx-relay techniques such as \"attach-on-contract-utxo-root\" CPFP (or also known as \"blinded CPFP\") might solve this issue.\n>\n> Le jeu. 27 mai 2021 \u00e0 17:45, darosior <darosior at protonmail.com> a \u00e9crit :\n>\n>> Hi,\n>>\n>>> ## Input-Based\n>>>\n>>> I think input-based fee-bumping has been less studied as fee-bumping primitive for L2s [1]. One variant of input-based fee-bumping usable today is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability flags. If the transaction is the latest stage of the contract, a bumping input can be attached just-in-time, thus increasing the feerate of the whole package.\n>>\n>> Unfortunately, ACP | SINGLE is trivially pinable [0] (TL;DR: i can just attach an output paying immediately to me, and construct a tx chain spending it). We are using ACP | ALL for Revault,\n>> which is the reason why we need a well laid-out pool of fee-bumping UTXOs (as you need to consume them entirely).\n>>\n>>> Input-based (today): If the bumping utxo is offering an adequate feerate point in function of network mempools congestion at time of broadcast, only 1 input. If a preliminary fan-out transaction to adjust feerate point must be broadcasted first, 1 input and 2 outputs more must be accounted for. Onchain footprint: 2 inputs + 3 outputs.\n>>\n>> I believe that it's better to broadcast a single fan-out transaction creating your entire UTXO pool in advance. You could create one coin per contract you are watching which value would be\n>> used to bump your transaction feerate from the presigned one to -say- the average feerate over the past month, and then have smaller coins that you could attach to any transaction to bump\n>> by a certain threshold (say, 10sat/vbyte). You would create as many small coin as your reserve algorithm tells you (which could be \"i need to be able, worst case, to close all my contracts\n>> with the worst historical feerate.\" or (fractional reserve version) \"i need to be able, worst case, to close 10% of my contracts at the average feerate of the past year, the remaining ones sorry\n>> for my loss\"). [1]\n>>\n>> This method is both much more optimal (though you need to sometimes incur the cost of many small additional inputs) and also makes sure that your feebump does not depend on the confirmation\n>> of a first stage transaction (as you can only RBF with new inputs if they are confirmed).\n>>\n>>> Input-based (today): In case of rebroadcast, the fee-bumping input is attached to the root of the chain of transactions and as such breaks the chain validity in itself. Beyond the rebroadcast of the updated root under replacement policy, the remaining transactions must be updated and rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>>\n>> Why not just attaching it at the tail of the chain? Bumping the last child with additional input would effectively be a CPFP for the entire chain in this case.\n>>\n>> Thanks for starting this discussion :)\n>> Antoine\n>>\n>> [0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017835.html\n>> [1] Credits to Jacob Swambo, who came up with the single fan-out transaction and with whom i'm discussing how to practically apply these ideas to Revault.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/f17a3b66/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-10T21:16:43",
                "message_text_only": "> So something like\n`or(and(pk(FB),pk(A)),and(pk(FB),pk(B)),and(pk(FB),pk(C)))` with each `or`\nin their own leaf? I think it works, but only if the keys `A`, `B`, `C` are\n\"hot\", as in available to the\nfee-bumper. For Revault it means introducing a key for each watchtower in\nthe vaults descriptors, which is meh but technically feasible since they\nare identified. This kinda break our replication\nmodel though. On the other end for Lightning... You'd need to know what\nwatchtower (or your node) is going to be willing to feebump? The descriptor\ncan very quickly get very convoluted:\n`or(and(pk(FB),pk(A_NODE)),and(pk(FB),pk(A_WT1)),and(pk(FB),pk(A_WT2)),and(pk(FB),pk(B_NODE)),and(pk(FB),pk(B_WT1)),and(pk(FB),pk(B_WT2)))`\nfor only 2 participants in a channel\nwhere one of either the node or two watchtowers (identified beforehand !!)\ncan feebump.\n\nI'm not sure if we agree on the purpose of the finalizing key ? Its goal is\nto finalize the transaction state once another fee-bumping input has been\nattached and should be part of the witnessScript of the \"main\" input. If a\nthird-party try to attach a malicious pinning input, doing so breaks the\nfinalizing signature and the transaction will be rejected as invalid by\nnetwork mempools.\n\nThis key doesn't secure funds and as such can be shared to any fee-bumper\nentity (contract source, sourced towers, outsourced towers ?). Of course,\nit means an outsourced tower can re-introduce malicious transaction\nmalleability but at least it's moving away malleability from the\ncontract-level and it's now a holder tower policy decision ?\n\nOverall I agree any fee-bumping techniques comparison should also account\ntower key management complexity (and this one was missing).\n\n> Yes. That's a bit concerning, but i guess it's a tradeoff. Amusingly the\nincentive is at odds with routing: you want to keep your channels\nunbalanced if you run on fractional fee-bumping reserves\nso that if things go south you can still salvage most of your funds by\nfocusing your fee-bumping on the unbalanced (to you) channels :p .\n\nThat's a good point! Switching to anchor now rebalances a security matter,\nnot sure if it was an intended effect of the design :) Also, you might take\nHTLC forwarding acceptance decisions holistically instead of a per-channel\nlevel. If your number of HTLC in-flight expressed as outputs on one\ncommitment transaction goes up, don't accept anymore HTLC on other\nchannels, otherwise, you might run short of fee-bumping reserve...\n\nLe ven. 28 mai 2021 \u00e0 18:25, darosior <darosior at protonmail.com> a \u00e9crit :\n\n>\n> Oh yes, I should have mentioned this pinning vector. The witnessScript\n> I've in mind to make secure that type of chain of transactions would be one\n> MuSig key for all contract participants, where signature are committed with\n> SIGHASH_ANYPREVOUT | SIGHASH_IOMAP, one pubkey per participant to lockdown\n> the transaction with SIGHASH_ALL. I think it works and prevents malicious\n> in-flight attachment of input/output to a multi-party transaction ?\n>\n>\n> So something like\n> `or(and(pk(FB),pk(A)),and(pk(FB),pk(B)),and(pk(FB),pk(C)))` with each `or`\n> in their own leaf? I think it works, but only if the keys `A`, `B`, `C` are\n> \"hot\", as in available to the\n> fee-bumper. For Revault it means introducing a key for each watchtower in\n> the vaults descriptors, which is meh but technically feasible since they\n> are identified. This kinda break our replication\n> model though. On the other end for Lightning... You'd need to know what\n> watchtower (or your node) is going to be willing to feebump? The descriptor\n> can very quickly get very convoluted:\n> `or(and(pk(FB),pk(A_NODE)),and(pk(FB),pk(A_WT1)),and(pk(FB),pk(A_WT2)),and(pk(FB),pk(B_NODE)),and(pk(FB),pk(B_WT1)),and(pk(FB),pk(B_WT2)))`\n> for only 2 participants in a channel\n> where one of either the node or two watchtowers (identified beforehand !!)\n> can feebump.\n>\n> I see, so you spread your bumping UTXO pool in two ranges : at least one\n> bumping utxo per contract, and a subpool of emergency smaller coins, ready\n> to be attached on any contract. I think this strategy makes sense for\n> vaults as you can afford a bunch of small coins at different feerates,\n> spending the ones not used afterwards. And higher cells of feerate reserve\n> as the worst historical feerate are relatively not that much compared to\n> locked-in vaults value. That said, I'm more dubious about LN, where node\n> operators might not keep the worst-case fee-bumping reserve, as the time\n> value of the coins aren't worth the channel liquidity at stake.\n>\n>\n> Yes. That's a bit concerning, but i guess it's a tradeoff. Amusingly the\n> incentive is at odds with routing: you want to keep your channels\n> unbalanced if you run on fractional fee-bumping reserves\n> so that if things go south you can still salvage most of your funds by\n> focusing your fee-bumping on the unbalanced (to you) channels :p .\n>\n> Yes, input-based bumping targeting the tail of the chain works at the\n> transaction level. But if you assume bounded visibility of network\n> mempools, one of your counterparties might have broadcast a concurrent\n> state, thus making your CPFP irrelevant for propagation. Though smarter\n> tx-relay techniques such as \"attach-on-contract-utxo-root\" CPFP (or also\n> known as \"blinded CPFP\") might solve this issue.\n>\n>\n> Oh, yes, good point.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/19a75ce7/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-10T21:45:04",
                "message_text_only": "Hi Lloyd,\n\nThanks for this tx mutation proposal extending the scope of fee-bumping\ntechniques. IIUC, the <output_index> serves as a pointer to increase the\noutput amount by value to recover the recompute the transaction hash\nagainst which the original signature is valid ?\n\nLet's do a quick analysis of this scheme.\n* onchain footprint : one tapleaf per contract participant, with O(log n)\nincrease of witness size, also one output per contract participant\n* tx-relay bandwidth rebroadcast : assuming aforementioned in-place mempool\nsubstitution policy, the mutated transaction\n* batching : fee-bumping value is extract from contract transaction itself,\nso O(n) per contract\n* mempool flexibility : the mutated transaction\n* watchtower key management : to enable outsourcing, the mutating key must\nbe shared, in theory enabling contract value siphoning to miner fees ?\n\nFurther, I think tx mutation scheme can be achieved in another way, with\nSIGHASH_ANYAMOUNT. A contract participant tapscript will be the following :\n\n<contract_key> <finalizing_alice_key>\n\nWhere <contract_signature> is committed with SIGHASH_ANYAMOUNT, blanking\nnValue of one or more outputs. That way, the fee-to-contract-value\ndistribution can be unilaterally finalized at a later time through the\nfinalizing key [0].\n\nNote, I think that the tx mutation proposal relies on interactivity in the\nworst-case scenario where a counterparty wants to increase its fee-bumping\noutput from the contract balance. This interactivity may lure a\ncounterparty to alway lock the worst-case fee-bumping reserve in the\noutput. I believe anchor output enables more \"real-time\" fee-bumping\nreserve adjustment ?\n\nCheers,\nAntoine\n\n[0] Incautious sighash alleability is unsafe. Be careful, otherwise kitties\nwill perish by the thousands :\nhttps://github.com/revault/practical-revault/pull/83\n\nLe dim. 6 juin 2021 \u00e0 22:28, Lloyd Fournier <lloyd.fourn at gmail.com> a\n\u00e9crit :\n\n> Hi Antione,\n>\n> Thanks for bringing up this important topic. I think there might be\n> another class of solutions over input based, CPFP and sponsorship. I'll\n> call them tx mutation schemes. The idea is that you can set a key that can\n> increase the fee by lowering a particular output after the tx is signed\n> without invalidating the signature. The premise is that anytime you need to\n> bump the fee of a transaction you must necessarily have funds in an output\n> that are going to you and therefore you can sacrifice some of them to\n> increase the fee. This is obviously destructive to txids so child presigned\n> transactions will have to use ANYPREVOUT as in your proposal. The advantage\n> is that it does not require keeping extra inputs around to bump the fee.\n>\n> So imagine a new opcode OP_CHECKSIG_MUTATED <output index> <publickey>\n> <value> <signature>.\n> This would check that <signature> is valid against <publickey> if the\n> current transaction had the output at <output index> reduced by <value>. To\n> make this more efficient, if the public key is one byte: 0x02 it references\n> the taproot *external key* (similar to how ANYPREVOUT uses 0x01 to refer to\n> internal key[1]).\n> Now for our protocol we want both parties (p1 and p2) to be able to fee\n> bump a commitment transaction. They use MuSig to sign the commitment tx\n> under the external key with a decent fee for the current conditions. But in\n> case it proves insufficient they have added the following two leaves to\n> their key in the funding output as a backup so that p1 and p2 can\n> unilaterally bump the fee of anything they sign spending from the funding\n> output:\n>\n> 1. OP_CHECKSIG_MUTATED(0, 0x02, <fee-bump-value>, <original-signature>)\n> OP_CHECKSIGADD(p1-fee-bump-key, <p1-fee-bump-signature>)  OP_2\n> OP_NUMEQUALVERIFY\n> 2. OP_CHECKSIG_MUTATED(1, 0x02, <fee-bump-value>, <original-signature>)\n> OP_CHECKSIGADD(p2-fee-bump-key, <p2-fee-bump-signature>) OP_2\n> OP_NUMEQUALVERIFY\n>\n> where <...> indicates the thing comes from the witness stack.\n> So to bump the fee of the commit tx after it has been signed either party\n> takes the <original-signature> and adds a signature under their\n> fee-bump-key for the new tx and reveals their fee bump leaf.\n> <original-signature> is checked against the old transaction while the fee\n> bumped transaction is checked against the fee bump key.\n>\n> I know I have left out how to change mempool eviction rules to accommodate\n> this kind of fee bumping without DoS or pinning attacks but hopefully I\n> have demonstrated that this class of solutions also exists.\n>\n> [1] https://github.com/ajtowns/bips/blob/bip-anyprevout/bip-0118.mediawiki\n>\n> Cheers,\n>\n> LL\n>\n>\n>\n> On Fri, 28 May 2021 at 07:13, Antoine Riard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi,\n>>\n>> This post is pursuing a wider discussion around better fee-bumping\n>> strategies for second-layer protocols. It draws out a comparison between\n>> input-based and CPFP fee-bumping techniques, and their apparent trade-offs\n>> in terms of onchain footprint, tx-relay bandwidth rebroadcast, batching\n>> opportunity and mempool flexibility.\n>>\n>> Thanks to Darosior for reviews, ideas and discussions.\n>>\n>> ## Child-Pay-For-Parent\n>>\n>> CPFP is a mature fee-bumping technique, known and used for a while in the\n>> Bitcoin ecosystem. However, its usage in contract protocols with\n>> distrusting counterparties raised some security issues. As mempool's chain\n>> of unconfirmed transactions are limited in size, if any output is spendable\n>> by any contract participant, it can be leveraged as a pinning vector to\n>> downgrade odds of transaction confirmation [0].\n>>\n>> That said, contract transactions interested to be protected under the\n>> carve-out logic require to add a new output for any contract participant,\n>> even if ultimately only one of them serves as an anchor to attach a CPFP.\n>>\n>> ## Input-Based\n>>\n>> I think input-based fee-bumping has been less studied as fee-bumping\n>> primitive for L2s [1]. One variant of input-based fee-bumping usable today\n>> is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability\n>> flags. If the transaction is the latest stage of the contract, a bumping\n>> input can be attached just-in-time, thus increasing the feerate of the\n>> whole package.\n>>\n>> However, as of today, input-based fee-bumping doesn't work to bump first\n>> stages of contract transactions as it's destructive of the txid, and as\n>> such breaks chain of pre-signed transactions. A first improvement would be\n>> the deployment of the SIGHASH_ANYPREVOUT softfork proposal. This new\n>> malleability flag allows a transaction to be signed without reference to\n>> any specific previous output. That way,  spent transactions can be\n>> fee-bumped without altering validity of the chain of transactions.\n>>\n>> Even assuming SIGHASH_ANYPREVOUT, if the first stage contract transaction\n>> includes multiple outputs (e.g the LN's commitment tx has multiple HTLC\n>> outputs), SIGHASH_SINGLE can't be used and the fee-bumping input value\n>> might be wasted. This edge can be smoothed by broadcasting a preliminary\n>> fan-out transaction with a set of outputs providing a range of feerate\n>> points for the bumped transaction.\n>>\n>> This overhead could be smoothed even further in the future with more\n>> advanced sighash malleability flags like SIGHASH_IOMAP, allowing\n>> transaction signers to commit to a map of inputs/outputs [2]. In the\n>> context of input-based, the overflowed fee value could be redirected to an\n>> outgoing output.\n>>\n>> ## Onchain Footprint\n>>\n>> CPFP: One anchor output per participant must be included in the\n>> commitment transaction. To this anchor must be attached a child transaction\n>> with 2 inputs (one for the commitment, one for the bumping utxo) and 1\n>> output. Onchain footprint: 2 inputs + 3 outputs.\n>>\n>> Input-based (today): If the bumping utxo is offering an adequate feerate\n>> point in function of network mempools congestion at time of broadcast, only\n>> 1 input. If a preliminary fan-out transaction to adjust feerate point must\n>> be broadcasted first, 1 input and 2 outputs more must be accounted for.\n>> Onchain footprint: 2 inputs + 3 outputs.\n>>\n>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): As long as the bumping\n>> utxo's value is wide enough to cover the worst-case of mempools congestion,\n>> the bumped transaction can be attached 1 input and 1 output. Onchain\n>> footprint: 1 input + 1 output.\n>>\n>> ## Tx-Relay Bandwidth Rebroadcast\n>>\n>> CPFP: In the context of multi-party protocols, we should assume bounded\n>> rationality of the participants w.r.t to an unconfirmed spend of the\n>> contract utxo across network mempools. Under this assumption, the bumped\n>> transaction might have been replaced by a concurrent state. To guarantee\n>> efficiency of the CPFP the whole chain of transactions should be\n>> rebroadcast, perhaps wasting bandwidth consumption for a still-identical\n>> bumped transaction [3]. Rebroadcast footprint: the whole chain of\n>> transactions.\n>>\n>> Input-based (today): In case of rebroadcast, the fee-bumping input is\n>> attached to the root of the chain of transactions and as such breaks the\n>> chain validity in itself. Beyond the rebroadcast of the updated root under\n>> replacement policy, the remaining transactions must be updated and\n>> rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>>\n>> Input-based(SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): In case of rebroadcast,\n>> the fee-bumping is attached to the root of the chain of transactions but it\n>> doesn't break the chain validity in itself. Assuming a future mempool\n>> acceptance logic to authorize in-place substitution, the rest of the chain\n>> could be preserved. Rebroadcast footprint: the root of the chain of\n>> transactions.\n>>\n>> ## Fee-Bumping Batching\n>>\n>> CPFP: In the context of multi-party protocols, in optimistic scenarios,\n>> we can assume aggregation of multiple chains of transactions. For e.g, a LN\n>> operator is desirous to non-cooperatively close multiple channels at the\n>> same time and would like to combine their fee-bumping. With CPFP, one\n>> anchor output and one bumping input must be consumed per aggregated chain,\n>> even if the child transaction fields can be shared. Batching perf: 1\n>> input/1 output per aggregated chain.\n>>\n>> Input-based (today): Unless the contract allows interactivity, multiple\n>> chains of transactions cannot be aggregated. One bumping input must be\n>> attached per chain, though if a preliminary fan-out transaction is relied\n>> on to offer multiple feerate points, transaction fields can be shared.\n>> Batching perf: 1 input/1 output per aggregated chain.\n>>\n>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): Multiple chains of\n>> transactions might be aggregated together *non-interactively*. One bumping\n>> input and outgoing output can be attached to the aggregated root. Batching\n>> perf: 1 input/1 output per aggregation.\n>>\n>> ## Fee-Bumping Mempool Flexibility\n>>\n>> CPFP: In the context of multi-party protocols, one of your counterparties\n>> might build a branch of transactions from one of the root outputs thus\n>> saturating the in-mempool package limits. To avoid these shenanigans, LN\n>> channels are relying on the carve-out mechanism. Though, the carve-out\n>> mechanism includes its own limitation and doesn't scale beyond 2 contract\n>> participants.\n>>\n>> Input-based: The root of the chain of transaction is the package's oldest\n>> ancestor, so package limits don't restrain its acceptance and it works\n>> whatever the number of contract participants.\n>>\n>> To conclude, this post scores 2 fee-bumping primitives for multi-party\n>> protocols on a range of factors. It hopes to unravel the ground for a real\n>> feerate performance framework of second-layers protocols .\n>>\n>> Beyond that, few points can be highlighted a) future soft forks allow\n>> significant onchain footprint savings, especially in case of batching, b)\n>> future package relay bandwidth efficiency should account for rebroadcast\n>> frequency of CPFPing multi-party protocols. On this latter point one\n>> follow-up might be to evaluate differing package relay *announcement*\n>> schemes in function of odds of non-cooperative protocol broadcast/odds of\n>> concurrent broadcast/rebroadcast frequencies.\n>>\n>> Thoughts ?\n>>\n>> Cheers,\n>> Antoine\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n>> [1] Beyond the revault architecture :\n>> https://github.com/revault/practical-revault/blob/master/revault.pdf\n>> [2] Already proposed a while back :\n>> https://bitcointalk.org/index.php?topic=252960.0\n>> [3] In theory, an already-relayed transaction shouldn't pass Core's\n>> `filterInventoryKnown`. In practice, if the transaction is announced as\n>> part of a package_id, the child might have changed, not the parent, leading\n>> to a redundant relay of the latter.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/c3f2b445/attachment-0001.html>"
            },
            {
                "author": "darosior",
                "date": "2021-06-10T22:47:04",
                "message_text_only": "> Note, I think that the tx mutation proposal relies on interactivity in the worst-case scenario where a counterparty wants to increase its fee-bumping output from the contract balance. This interactivity may lure a counterparty to alway lock the worst-case fee-bumping reserve in the output. I believe anchor output enables more \"real-time\" fee-bumping reserve adjustment ?\n\nAnchor outputs / malleability allow for real-time adjustment of long-lived contracts (for which the today worst case is much larger than the worst case\nestimated at the contract creation time). However it's a really interested for vaults, as you have multiple parties with the same goal (getting this Cancel\ntransaction confirmed). Therefore you have this slight \"tragedy of the commons\" of whose fee-bumping wallet is going to pay for sponsoring the next\nCancel (and it's exacerbated by / for external redundancy providers). With this approach, fees are taxed from the shared coins, so there is no pernicious\nincentive to delay the broadcast of your revocation transaction in the hope that another watchtower will pay the fee instead of you. I think this applies to\nmulti-party channels too, by having some kind of a shared budget.\n\nYou would also have a large UX improvement with regard to the fee-bumping wallet: no need to have one (fb wallet refills are really *really* poor UX)\none and maintain a nice laid-out UTXO pool.\nIn the end, both approaches seem desirable: the output for paying most of the fees from shared coins, therefore dwarfing the \"tragedy of the common\"\nconcerns, and the malleability to still be able to dynamically allocate more funds to feebump in case of a black swan event (but essentially needs a single\nrefill at startup as it's never spent from).\n\nAs a side note, this can \"just\" be implemented by exchanging N (varying depending on the granularity) signatures with increasing feerates. Again, this\nmight be reasonable in some usecases but not others (eg if you are already generating tons of sigs, or have longer chain of unconfirmed transactions).\n\n> Cheers,\n> Antoine\n>\n> [0] Incautious sighash alleability is unsafe. Be careful, otherwise kitties will perish by the thousands :\n> https://github.com/revault/practical-revault/pull/83\n>\n> Le dim. 6 juin 2021 \u00e0 22:28, Lloyd Fournier <lloyd.fourn at gmail.com> a \u00e9crit :\n>\n>> Hi Antione,\n>>\n>> Thanks for bringing up this important topic. I think there might be another class of solutions over input based, CPFP and sponsorship. I'll call them tx mutation schemes. The idea is that you can set a key that can increase the fee by lowering a particular output after the tx is signed without invalidating the signature. The premise is that anytime you need to bump the fee of a transaction you must necessarily have funds in an output that are going to you and therefore you can sacrifice some of them to increase the fee. This is obviously destructive to txids so child presigned transactions will have to use ANYPREVOUT as in your proposal. The advantage is that it does not require keeping extra inputs around to bump the fee.\n>>\n>> So imagine a new opcode OP_CHECKSIG_MUTATED <output index> <publickey> <value> <signature>.\n>> This would check that <signature> is valid against <publickey> if the current transaction had the output at <output index> reduced by <value>. To make this more efficient, if the public key is one byte: 0x02 it references the taproot *external key* (similar to how ANYPREVOUT uses 0x01 to refer to internal key[1]).\n>> Now for our protocol we want both parties (p1 and p2) to be able to fee bump a commitment transaction. They use MuSig to sign the commitment tx under the external key with a decent fee for the current conditions. But in case it proves insufficient they have added the following two leaves to their key in the funding output as a backup so that p1 and p2 can unilaterally bump the fee of anything they sign spending from the funding output:\n>>\n>> 1. OP_CHECKSIG_MUTATED(0, 0x02, <fee-bump-value>, <original-signature>) OP_CHECKSIGADD(p1-fee-bump-key, <p1-fee-bump-signature>) OP_2 OP_NUMEQUALVERIFY\n>> 2. OP_CHECKSIG_MUTATED(1, 0x02, <fee-bump-value>, <original-signature>) OP_CHECKSIGADD(p2-fee-bump-key, <p2-fee-bump-signature>) OP_2 OP_NUMEQUALVERIFY\n>>\n>> where <...> indicates the thing comes from the witness stack.\n>> So to bump the fee of the commit tx after it has been signed either party takes the <original-signature> and adds a signature under their fee-bump-key for the new tx and reveals their fee bump leaf. <original-signature> is checked against the old transaction while the fee bumped transaction is checked against the fee bump key.\n>>\n>> I know I have left out how to change mempool eviction rules to accommodate this kind of fee bumping without DoS or pinning attacks but hopefully I have demonstrated that this class of solutions also exists.\n>>\n>> [1] https://github.com/ajtowns/bips/blob/bip-anyprevout/bip-0118.mediawiki\n>>\n>> Cheers,\n>>\n>> LL\n>>\n>> On Fri, 28 May 2021 at 07:13, Antoine Riard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi,\n>>>\n>>> This post is pursuing a wider discussion around better fee-bumping strategies for second-layer protocols. It draws out a comparison between input-based and CPFP fee-bumping techniques, and their apparent trade-offs in terms of onchain footprint, tx-relay bandwidth rebroadcast, batching opportunity and mempool flexibility.\n>>>\n>>> Thanks to Darosior for reviews, ideas and discussions.\n>>>\n>>> ## Child-Pay-For-Parent\n>>>\n>>> CPFP is a mature fee-bumping technique, known and used for a while in the Bitcoin ecosystem. However, its usage in contract protocols with distrusting counterparties raised some security issues. As mempool's chain of unconfirmed transactions are limited in size, if any output is spendable by any contract participant, it can be leveraged as a pinning vector to downgrade odds of transaction confirmation [0].\n>>>\n>>> That said, contract transactions interested to be protected under the carve-out logic require to add a new output for any contract participant, even if ultimately only one of them serves as an anchor to attach a CPFP.\n>>>\n>>> ## Input-Based\n>>>\n>>> I think input-based fee-bumping has been less studied as fee-bumping primitive for L2s [1]. One variant of input-based fee-bumping usable today is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability flags. If the transaction is the latest stage of the contract, a bumping input can be attached just-in-time, thus increasing the feerate of the whole package.\n>>>\n>>> However, as of today, input-based fee-bumping doesn't work to bump first stages of contract transactions as it's destructive of the txid, and as such breaks chain of pre-signed transactions. A first improvement would be the deployment of the SIGHASH_ANYPREVOUT softfork proposal. This new malleability flag allows a transaction to be signed without reference to any specific previous output. That way, spent transactions can be fee-bumped without altering validity of the chain of transactions.\n>>>\n>>> Even assuming SIGHASH_ANYPREVOUT, if the first stage contract transaction includes multiple outputs (e.g the LN's commitment tx has multiple HTLC outputs), SIGHASH_SINGLE can't be used and the fee-bumping input value might be wasted. This edge can be smoothed by broadcasting a preliminary fan-out transaction with a set of outputs providing a range of feerate points for the bumped transaction.\n>>>\n>>> This overhead could be smoothed even further in the future with more advanced sighash malleability flags like SIGHASH_IOMAP, allowing transaction signers to commit to a map of inputs/outputs [2]. In the context of input-based, the overflowed fee value could be redirected to an outgoing output.\n>>>\n>>> ## Onchain Footprint\n>>>\n>>> CPFP: One anchor output per participant must be included in the commitment transaction. To this anchor must be attached a child transaction with 2 inputs (one for the commitment, one for the bumping utxo) and 1 output. Onchain footprint: 2 inputs + 3 outputs.\n>>>\n>>> Input-based (today): If the bumping utxo is offering an adequate feerate point in function of network mempools congestion at time of broadcast, only 1 input. If a preliminary fan-out transaction to adjust feerate point must be broadcasted first, 1 input and 2 outputs more must be accounted for. Onchain footprint: 2 inputs + 3 outputs.\n>>>\n>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): As long as the bumping utxo's value is wide enough to cover the worst-case of mempools congestion, the bumped transaction can be attached 1 input and 1 output. Onchain footprint: 1 input + 1 output.\n>>>\n>>> ## Tx-Relay Bandwidth Rebroadcast\n>>>\n>>> CPFP: In the context of multi-party protocols, we should assume bounded rationality of the participants w.r.t to an unconfirmed spend of the contract utxo across network mempools. Under this assumption, the bumped transaction might have been replaced by a concurrent state. To guarantee efficiency of the CPFP the whole chain of transactions should be rebroadcast, perhaps wasting bandwidth consumption for a still-identical bumped transaction [3]. Rebroadcast footprint: the whole chain of transactions.\n>>>\n>>> Input-based (today): In case of rebroadcast, the fee-bumping input is attached to the root of the chain of transactions and as such breaks the chain validity in itself. Beyond the rebroadcast of the updated root under replacement policy, the remaining transactions must be updated and rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>>>\n>>> Input-based(SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): In case of rebroadcast, the fee-bumping is attached to the root of the chain of transactions but it doesn't break the chain validity in itself. Assuming a future mempool acceptance logic to authorize in-place substitution, the rest of the chain could be preserved. Rebroadcast footprint: the root of the chain of transactions.\n>>>\n>>> ## Fee-Bumping Batching\n>>>\n>>> CPFP: In the context of multi-party protocols, in optimistic scenarios, we can assume aggregation of multiple chains of transactions. For e.g, a LN operator is desirous to non-cooperatively close multiple channels at the same time and would like to combine their fee-bumping. With CPFP, one anchor output and one bumping input must be consumed per aggregated chain, even if the child transaction fields can be shared. Batching perf: 1 input/1 output per aggregated chain.\n>>>\n>>> Input-based (today): Unless the contract allows interactivity, multiple chains of transactions cannot be aggregated. One bumping input must be attached per chain, though if a preliminary fan-out transaction is relied on to offer multiple feerate points, transaction fields can be shared. Batching perf: 1 input/1 output per aggregated chain.\n>>>\n>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): Multiple chains of transactions might be aggregated together *non-interactively*. One bumping input and outgoing output can be attached to the aggregated root. Batching perf: 1 input/1 output per aggregation.\n>>>\n>>> ## Fee-Bumping Mempool Flexibility\n>>>\n>>> CPFP: In the context of multi-party protocols, one of your counterparties might build a branch of transactions from one of the root outputs thus saturating the in-mempool package limits. To avoid these shenanigans, LN channels are relying on the carve-out mechanism. Though, the carve-out mechanism includes its own limitation and doesn't scale beyond 2 contract participants.\n>>>\n>>> Input-based: The root of the chain of transaction is the package's oldest ancestor, so package limits don't restrain its acceptance and it works whatever the number of contract participants.\n>>>\n>>> To conclude, this post scores 2 fee-bumping primitives for multi-party protocols on a range of factors. It hopes to unravel the ground for a real feerate performance framework of second-layers protocols .\n>>>\n>>> Beyond that, few points can be highlighted a) future soft forks allow significant onchain footprint savings, especially in case of batching, b) future package relay bandwidth efficiency should account for rebroadcast frequency of CPFPing multi-party protocols. On this latter point one follow-up might be to evaluate differing package relay *announcement* schemes in function of odds of non-cooperative protocol broadcast/odds of concurrent broadcast/rebroadcast frequencies.\n>>>\n>>> Thoughts ?\n>>>\n>>> Cheers,\n>>> Antoine\n>>>\n>>> [0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n>>> [1] Beyond the revault architecture : https://github.com/revault/practical-revault/blob/master/revault.pdf\n>>> [2] Already proposed a while back : https://bitcointalk.org/index.php?topic=252960.0\n>>> [3] In theory, an already-relayed transaction shouldn't pass Core's `filterInventoryKnown`. In practice, if the transaction is announced as part of a package_id, the child might have changed, not the parent, leading to a redundant relay of the latter.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/71c247b4/attachment-0001.html>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2021-06-13T05:56:43",
                "message_text_only": "On Fri, 11 Jun 2021 at 07:45, Antoine Riard <antoine.riard at gmail.com> wrote:\n\n> Hi Lloyd,\n>\n> Thanks for this tx mutation proposal extending the scope of fee-bumping\n> techniques. IIUC, the <output_index> serves as a pointer to increase the\n> output amount by value to recover the recompute the transaction hash\n> against which the original signature is valid ?\n>\n\nRight.\n\n\n> Let's do a quick analysis of this scheme.\n> * onchain footprint : one tapleaf per contract participant, with O(log n)\n> increase of witness size, also one output per contract participant\n>\n\nYes but we can fix this (see below).\n\n* tx-relay bandwidth rebroadcast : assuming aforementioned in-place mempool\n> substitution policy, the mutated transaction\n>\n* batching : fee-bumping value is extract from contract transaction itself,\n> so O(n) per contract\n> * mempool flexibility : the mutated transaction\n> * watchtower key management : to enable outsourcing, the mutating key must\n> be shared, in theory enabling contract value siphoning to miner fees ?\n>\n\nYes. You could use OP_LESSTHAN to make sure the value being deducted by the\nwatchtower is not above a threshold.\n\n\n> Further, I think tx mutation scheme can be achieved in another way, with\n> SIGHASH_ANYAMOUNT. A contract participant tapscript will be the following :\n>\n> <contract_key> <finalizing_alice_key>\n>\n> Where <contract_signature> is committed with SIGHASH_ANYAMOUNT, blanking\n> nValue of one or more outputs. That way, the fee-to-contract-value\n> distribution can be unilaterally finalized at a later time through the\n> finalizing key [0].\n>\n\nYes, that's also a way to do it. I was trying to preserve the original\nexternal key signature in my attempt but this is probably not necessary. L2\nprotocols could just exchange two signatures instead. One optimistic one on\nthe external key and one pessimistic SIGHASH_ANYAMOUNT one on the\n<contract_key>.\n\n\n> Note, I think that the tx mutation proposal relies on interactivity in the\n> worst-case scenario where a counterparty wants to increase its fee-bumping\n> output from the contract balance. This interactivity may lure a\n> counterparty to alway lock the worst-case fee-bumping reserve in the\n> output. I believe anchor output enables more \"real-time\" fee-bumping\n> reserve adjustment ?\n>\n\nHmmm well I was hoping that you wouldn't need interaction ever. I can see\nthat my commitment TX example was too contrived because it has balance\noutputs that go exclusively to one party.\nLet's take a better example: A PTLC output with both timeout and success\npre-signed transactions spending from it. We must only let the person\noffering the PTLC reduce the output of the timeout tx and the converse for\nthe success tx.\nNote very carefully that if we naively apply OP_CHECKSIG_MUTATED or\nSIGHASH_ANYAMOUNT with one tapleaf for each party then we risk one party\nbeing able to lower the other party's output by doing a switcharoo on the\ntapleaf after they see the signature for their counterparty's tx in the\nmempool. In your example you could fix it by having a different\n<contract_key> but this means we can't compress <contract_key> by just\nusing the taproot internal/external key.\n\nWhat about this: Instead of party specific \"finalizing_alice_key\" or\np1-fee-bump-key as I denoted it, we just use the key of the output whose\nvalue we are reducing. This also solves the O(log(n)) tapleaves for\nOP_CHECKSIG_MUTATED approach as well -- just have one tapleaf for fee\nbumping but authorize it under the key of the output we are reducing. Thus\nwe need something like OP_PUSH_TAPROOT_OUTPUT_KEY <output index> which\ntakes the taproot external key at that output (fail if not taproot) and\nputs it on the stack. So to be clear you have the <output index> on the\nwitness stack rather than having it fixed in a particular tapleaf (as per\nmy original post) and then use OP_DUP to pass it to both\nOP_CHECKSIG_MUTATED and OP_PUSH_TAPROOT_OUTPUT_KEY.\nThis makes a lot of sense as it matches the semantics of what we are trying\nto achieve: allow the owner of an output (whether an individual or group)\nto reduce that output's value to pay a higher fee.\nFurthermore this removes all keys from the tapleaf since they are all\naliased to either the input we are spending or one of the output keys of\nthe tx we are spending to. This is quite a big improvement over my original\nidea.\n\nThis works for lightning commit tx and for the case of a PTLC contract. It\nalso seems to work for the DLC funding output. I'd be interested to know if\nanyone can think of a protocol where this would be inconvenient or\nimpossible to use as the main pre-signed tx fee bumping system.\n\nCheers,\n\nLL\n\nLe dim. 6 juin 2021 \u00e0 22:28, Lloyd Fournier <lloyd.fourn at gmail.com> a\n> \u00e9crit :\n>\n>> Hi Antione,\n>>\n>> Thanks for bringing up this important topic. I think there might be\n>> another class of solutions over input based, CPFP and sponsorship. I'll\n>> call them tx mutation schemes. The idea is that you can set a key that can\n>> increase the fee by lowering a particular output after the tx is signed\n>> without invalidating the signature. The premise is that anytime you need to\n>> bump the fee of a transaction you must necessarily have funds in an output\n>> that are going to you and therefore you can sacrifice some of them to\n>> increase the fee. This is obviously destructive to txids so child presigned\n>> transactions will have to use ANYPREVOUT as in your proposal. The advantage\n>> is that it does not require keeping extra inputs around to bump the fee.\n>>\n>> So imagine a new opcode OP_CHECKSIG_MUTATED <output index> <publickey>\n>> <value> <signature>.\n>> This would check that <signature> is valid against <publickey> if the\n>> current transaction had the output at <output index> reduced by <value>. To\n>> make this more efficient, if the public key is one byte: 0x02 it references\n>> the taproot *external key* (similar to how ANYPREVOUT uses 0x01 to refer to\n>> internal key[1]).\n>> Now for our protocol we want both parties (p1 and p2) to be able to fee\n>> bump a commitment transaction. They use MuSig to sign the commitment tx\n>> under the external key with a decent fee for the current conditions. But in\n>> case it proves insufficient they have added the following two leaves to\n>> their key in the funding output as a backup so that p1 and p2 can\n>> unilaterally bump the fee of anything they sign spending from the funding\n>> output:\n>>\n>> 1. OP_CHECKSIG_MUTATED(0, 0x02, <fee-bump-value>, <original-signature>)\n>> OP_CHECKSIGADD(p1-fee-bump-key, <p1-fee-bump-signature>)  OP_2\n>> OP_NUMEQUALVERIFY\n>> 2. OP_CHECKSIG_MUTATED(1, 0x02, <fee-bump-value>, <original-signature>)\n>> OP_CHECKSIGADD(p2-fee-bump-key, <p2-fee-bump-signature>) OP_2\n>> OP_NUMEQUALVERIFY\n>>\n>> where <...> indicates the thing comes from the witness stack.\n>> So to bump the fee of the commit tx after it has been signed either party\n>> takes the <original-signature> and adds a signature under their\n>> fee-bump-key for the new tx and reveals their fee bump leaf.\n>> <original-signature> is checked against the old transaction while the fee\n>> bumped transaction is checked against the fee bump key.\n>>\n>> I know I have left out how to change mempool eviction rules to\n>> accommodate this kind of fee bumping without DoS or pinning attacks but\n>> hopefully I have demonstrated that this class of solutions also exists.\n>>\n>> [1]\n>> https://github.com/ajtowns/bips/blob/bip-anyprevout/bip-0118.mediawiki\n>>\n>> Cheers,\n>>\n>> LL\n>>\n>>\n>>\n>> On Fri, 28 May 2021 at 07:13, Antoine Riard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi,\n>>>\n>>> This post is pursuing a wider discussion around better fee-bumping\n>>> strategies for second-layer protocols. It draws out a comparison between\n>>> input-based and CPFP fee-bumping techniques, and their apparent trade-offs\n>>> in terms of onchain footprint, tx-relay bandwidth rebroadcast, batching\n>>> opportunity and mempool flexibility.\n>>>\n>>> Thanks to Darosior for reviews, ideas and discussions.\n>>>\n>>> ## Child-Pay-For-Parent\n>>>\n>>> CPFP is a mature fee-bumping technique, known and used for a while in\n>>> the Bitcoin ecosystem. However, its usage in contract protocols with\n>>> distrusting counterparties raised some security issues. As mempool's chain\n>>> of unconfirmed transactions are limited in size, if any output is spendable\n>>> by any contract participant, it can be leveraged as a pinning vector to\n>>> downgrade odds of transaction confirmation [0].\n>>>\n>>> That said, contract transactions interested to be protected under the\n>>> carve-out logic require to add a new output for any contract participant,\n>>> even if ultimately only one of them serves as an anchor to attach a CPFP.\n>>>\n>>> ## Input-Based\n>>>\n>>> I think input-based fee-bumping has been less studied as fee-bumping\n>>> primitive for L2s [1]. One variant of input-based fee-bumping usable today\n>>> is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability\n>>> flags. If the transaction is the latest stage of the contract, a bumping\n>>> input can be attached just-in-time, thus increasing the feerate of the\n>>> whole package.\n>>>\n>>> However, as of today, input-based fee-bumping doesn't work to bump first\n>>> stages of contract transactions as it's destructive of the txid, and as\n>>> such breaks chain of pre-signed transactions. A first improvement would be\n>>> the deployment of the SIGHASH_ANYPREVOUT softfork proposal. This new\n>>> malleability flag allows a transaction to be signed without reference to\n>>> any specific previous output. That way,  spent transactions can be\n>>> fee-bumped without altering validity of the chain of transactions.\n>>>\n>>> Even assuming SIGHASH_ANYPREVOUT, if the first stage contract\n>>> transaction includes multiple outputs (e.g the LN's commitment tx has\n>>> multiple HTLC outputs), SIGHASH_SINGLE can't be used and the fee-bumping\n>>> input value might be wasted. This edge can be smoothed by broadcasting a\n>>> preliminary fan-out transaction with a set of outputs providing a range of\n>>> feerate points for the bumped transaction.\n>>>\n>>> This overhead could be smoothed even further in the future with more\n>>> advanced sighash malleability flags like SIGHASH_IOMAP, allowing\n>>> transaction signers to commit to a map of inputs/outputs [2]. In the\n>>> context of input-based, the overflowed fee value could be redirected to an\n>>> outgoing output.\n>>>\n>>> ## Onchain Footprint\n>>>\n>>> CPFP: One anchor output per participant must be included in the\n>>> commitment transaction. To this anchor must be attached a child transaction\n>>> with 2 inputs (one for the commitment, one for the bumping utxo) and 1\n>>> output. Onchain footprint: 2 inputs + 3 outputs.\n>>>\n>>> Input-based (today): If the bumping utxo is offering an adequate feerate\n>>> point in function of network mempools congestion at time of broadcast, only\n>>> 1 input. If a preliminary fan-out transaction to adjust feerate point must\n>>> be broadcasted first, 1 input and 2 outputs more must be accounted for.\n>>> Onchain footprint: 2 inputs + 3 outputs.\n>>>\n>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): As long as the bumping\n>>> utxo's value is wide enough to cover the worst-case of mempools congestion,\n>>> the bumped transaction can be attached 1 input and 1 output. Onchain\n>>> footprint: 1 input + 1 output.\n>>>\n>>> ## Tx-Relay Bandwidth Rebroadcast\n>>>\n>>> CPFP: In the context of multi-party protocols, we should assume bounded\n>>> rationality of the participants w.r.t to an unconfirmed spend of the\n>>> contract utxo across network mempools. Under this assumption, the bumped\n>>> transaction might have been replaced by a concurrent state. To guarantee\n>>> efficiency of the CPFP the whole chain of transactions should be\n>>> rebroadcast, perhaps wasting bandwidth consumption for a still-identical\n>>> bumped transaction [3]. Rebroadcast footprint: the whole chain of\n>>> transactions.\n>>>\n>>> Input-based (today): In case of rebroadcast, the fee-bumping input is\n>>> attached to the root of the chain of transactions and as such breaks the\n>>> chain validity in itself. Beyond the rebroadcast of the updated root under\n>>> replacement policy, the remaining transactions must be updated and\n>>> rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>>>\n>>> Input-based(SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): In case of rebroadcast,\n>>> the fee-bumping is attached to the root of the chain of transactions but it\n>>> doesn't break the chain validity in itself. Assuming a future mempool\n>>> acceptance logic to authorize in-place substitution, the rest of the chain\n>>> could be preserved. Rebroadcast footprint: the root of the chain of\n>>> transactions.\n>>>\n>>> ## Fee-Bumping Batching\n>>>\n>>> CPFP: In the context of multi-party protocols, in optimistic scenarios,\n>>> we can assume aggregation of multiple chains of transactions. For e.g, a LN\n>>> operator is desirous to non-cooperatively close multiple channels at the\n>>> same time and would like to combine their fee-bumping. With CPFP, one\n>>> anchor output and one bumping input must be consumed per aggregated chain,\n>>> even if the child transaction fields can be shared. Batching perf: 1\n>>> input/1 output per aggregated chain.\n>>>\n>>> Input-based (today): Unless the contract allows interactivity, multiple\n>>> chains of transactions cannot be aggregated. One bumping input must be\n>>> attached per chain, though if a preliminary fan-out transaction is relied\n>>> on to offer multiple feerate points, transaction fields can be shared.\n>>> Batching perf: 1 input/1 output per aggregated chain.\n>>>\n>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): Multiple chains of\n>>> transactions might be aggregated together *non-interactively*. One bumping\n>>> input and outgoing output can be attached to the aggregated root. Batching\n>>> perf: 1 input/1 output per aggregation.\n>>>\n>>> ## Fee-Bumping Mempool Flexibility\n>>>\n>>> CPFP: In the context of multi-party protocols, one of your\n>>> counterparties might build a branch of transactions from one of the root\n>>> outputs thus saturating the in-mempool package limits. To avoid these\n>>> shenanigans, LN channels are relying on the carve-out mechanism. Though,\n>>> the carve-out mechanism includes its own limitation and doesn't scale\n>>> beyond 2 contract participants.\n>>>\n>>> Input-based: The root of the chain of transaction is the package's\n>>> oldest ancestor, so package limits don't restrain its acceptance and it\n>>> works whatever the number of contract participants.\n>>>\n>>> To conclude, this post scores 2 fee-bumping primitives for multi-party\n>>> protocols on a range of factors. It hopes to unravel the ground for a real\n>>> feerate performance framework of second-layers protocols .\n>>>\n>>> Beyond that, few points can be highlighted a) future soft forks allow\n>>> significant onchain footprint savings, especially in case of batching, b)\n>>> future package relay bandwidth efficiency should account for rebroadcast\n>>> frequency of CPFPing multi-party protocols. On this latter point one\n>>> follow-up might be to evaluate differing package relay *announcement*\n>>> schemes in function of odds of non-cooperative protocol broadcast/odds of\n>>> concurrent broadcast/rebroadcast frequencies.\n>>>\n>>> Thoughts ?\n>>>\n>>> Cheers,\n>>> Antoine\n>>>\n>>> [0]\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n>>> [1] Beyond the revault architecture :\n>>> https://github.com/revault/practical-revault/blob/master/revault.pdf\n>>> [2] Already proposed a while back :\n>>> https://bitcointalk.org/index.php?topic=252960.0\n>>> [3] In theory, an already-relayed transaction shouldn't pass Core's\n>>> `filterInventoryKnown`. In practice, if the transaction is announced as\n>>> part of a package_id, the child might have changed, not the parent, leading\n>>> to a redundant relay of the latter.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210613/065d7cbf/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-06-13T14:16:24",
                "message_text_only": "The API of a sponsor-like mechanism is close to ideal in my opinion:\n\n- compatible with non malleable transactions\n- 0 overhead if fees accurately estimated\n- watchtower friendly\n- post hoc, requires minimal 'protocol awareness'\n- friendly with most mempool eviction policies, not much new required\n- can work to atomically bump multiple txns\n- can be bumped cooperatively by multiple sponsors w/o coordination\n- 0 'rebroadcast overhead' (e.g., for a large batch) leasing to cascading\nretransmission fees for replacement\n- can be piggy backed with other future transactions or protocols (e.g.\ncoinjoin)\n- compatible with change being in cold storage\n\nThe main drawback is it is chain space - wise less efficient, as an\nadditional transaction gets made. However, I think the API benefits\n'product market fit' over alternative solutions outweigh other concerns,\nand if the 'sponsorship efficiency hypothesis' holds true, then most\ntransactions will not require sponsors and therefore the savings of not\nneeding to preplan a few bumping mechanism will be more efficient overall\n(efficient market will drive accuracy in estimating fees rather than\nneeding to sponsor).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210613/fe1f02f3/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-14T17:18:38",
                "message_text_only": "Thanks for this analysis of a sponsor-like mechanism.\n\nFor sure, \"watchtower friendly\" and \"post hoc\" are really good point\ntowards sponsorship, at least other proposals are struggling with\nwatchtower support, at least in way where your watchtower policy doesn't\nleak to your counterparties (which is really gross from a security\nstandpoint when you think about it!)\n\nW.r.t to sponsorship chain/fee overhead (at least compared to\nANYPREVOUT+IOMAP), I think it's ultimately a question of how many contracts\nare closed cooperatively-vs-non-coop on the long-term. Even if we can hope\nfor emergency closure for security reasons to be pretty rare in practice,\nwe might still have significant non-coop closing when counterparties can't\nagree on the economic opportunity of pursuing the contract or not. E.g, a\nbig LN hub unilaterally closes small channels, either because it doesn't\nearn routing fees or those mobile nodes have been offline for too long.\n\nStill, I think the next step of the discussion would be to come up with a\nconsistent simulation against which we can all agree on and score all the\nproposals against it.\n\nLe dim. 13 juin 2021 \u00e0 10:16, Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> The API of a sponsor-like mechanism is close to ideal in my opinion:\n>\n> - compatible with non malleable transactions\n> - 0 overhead if fees accurately estimated\n> - watchtower friendly\n> - post hoc, requires minimal 'protocol awareness'\n> - friendly with most mempool eviction policies, not much new required\n> - can work to atomically bump multiple txns\n> - can be bumped cooperatively by multiple sponsors w/o coordination\n> - 0 'rebroadcast overhead' (e.g., for a large batch) leasing to cascading\n> retransmission fees for replacement\n> - can be piggy backed with other future transactions or protocols (e.g.\n> coinjoin)\n> - compatible with change being in cold storage\n>\n> The main drawback is it is chain space - wise less efficient, as an\n> additional transaction gets made. However, I think the API benefits\n> 'product market fit' over alternative solutions outweigh other concerns,\n> and if the 'sponsorship efficiency hypothesis' holds true, then most\n> transactions will not require sponsors and therefore the savings of not\n> needing to preplan a few bumping mechanism will be more efficient overall\n> (efficient market will drive accuracy in estimating fees rather than\n> needing to sponsor).\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210614/4a6e9960/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-14T16:46:56",
                "message_text_only": "> This makes a lot of sense as it matches the semantics of what we are\ntrying\nto achieve: allow the owner of an output (whether an individual or group)\nto reduce that output's value to pay a higher fee.\n\nNote, I think you're still struggling with some trust issue that anchor\nupgrade is at least eliminating for LN, namely the pre-agreement among a\ngroup of signers about the effective feerate to use at some unknown time\npoint in the future. If you authorize your counterparty for a broadcast at\nfeerate X, how do you prevent a broadcast at feerate Y, where Y is far\nunder X, thus maliciously burning a lot of your fee-bumping reserve ?\n\nOf course, one mitigation is to make a contribution to a common fee-bumping\noutput reserve proportional to what has been contributed as a funding\ncollateral. Thus disincentivizing misuse of the common fee-bumping reserve\nin a game-theoretical way. But if you take the example of a LN channel,\nyou're now running into another issue. Off-chain balances might fluctuate\nin a way that most of the time, your fee-bumping reserve contribution is\nout-of-proportion with your balance amounts to protect ? And as such\nenduring some significant timevalue bleeding on your fee-bumping reserve.\n\nSingle-party managed fee-bumping reserve doesn't seem to suffer from this\ndrawback ?\n\nOtherwise, I think your new construction OP_PUSH_TAPROOT_OUTPUT_KEY is\ncorrect and solves the O(log(n)) tapleaves issue.\n\nLe dim. 13 juin 2021 \u00e0 01:57, Lloyd Fournier <lloyd.fourn at gmail.com> a\n\u00e9crit :\n\n> On Fri, 11 Jun 2021 at 07:45, Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n>\n>> Hi Lloyd,\n>>\n>> Thanks for this tx mutation proposal extending the scope of fee-bumping\n>> techniques. IIUC, the <output_index> serves as a pointer to increase the\n>> output amount by value to recover the recompute the transaction hash\n>> against which the original signature is valid ?\n>>\n>\n> Right.\n>\n>\n>> Let's do a quick analysis of this scheme.\n>> * onchain footprint : one tapleaf per contract participant, with O(log n)\n>> increase of witness size, also one output per contract participant\n>>\n>\n> Yes but we can fix this (see below).\n>\n> * tx-relay bandwidth rebroadcast : assuming aforementioned in-place\n>> mempool substitution policy, the mutated transaction\n>>\n> * batching : fee-bumping value is extract from contract transaction\n>> itself, so O(n) per contract\n>> * mempool flexibility : the mutated transaction\n>> * watchtower key management : to enable outsourcing, the mutating key\n>> must be shared, in theory enabling contract value siphoning to miner fees ?\n>>\n>\n> Yes. You could use OP_LESSTHAN to make sure the value being deducted by\n> the watchtower is not above a threshold.\n>\n>\n>> Further, I think tx mutation scheme can be achieved in another way, with\n>> SIGHASH_ANYAMOUNT. A contract participant tapscript will be the following :\n>>\n>> <contract_key> <finalizing_alice_key>\n>>\n>> Where <contract_signature> is committed with SIGHASH_ANYAMOUNT, blanking\n>> nValue of one or more outputs. That way, the fee-to-contract-value\n>> distribution can be unilaterally finalized at a later time through the\n>> finalizing key [0].\n>>\n>\n> Yes, that's also a way to do it. I was trying to preserve the original\n> external key signature in my attempt but this is probably not necessary. L2\n> protocols could just exchange two signatures instead. One optimistic one on\n> the external key and one pessimistic SIGHASH_ANYAMOUNT one on the\n> <contract_key>.\n>\n>\n>> Note, I think that the tx mutation proposal relies on interactivity in\n>> the worst-case scenario where a counterparty wants to increase its\n>> fee-bumping output from the contract balance. This interactivity may lure a\n>> counterparty to alway lock the worst-case fee-bumping reserve in the\n>> output. I believe anchor output enables more \"real-time\" fee-bumping\n>> reserve adjustment ?\n>>\n>\n> Hmmm well I was hoping that you wouldn't need interaction ever. I can see\n> that my commitment TX example was too contrived because it has balance\n> outputs that go exclusively to one party.\n> Let's take a better example: A PTLC output with both timeout and success\n> pre-signed transactions spending from it. We must only let the person\n> offering the PTLC reduce the output of the timeout tx and the converse for\n> the success tx.\n> Note very carefully that if we naively apply OP_CHECKSIG_MUTATED or\n> SIGHASH_ANYAMOUNT with one tapleaf for each party then we risk one party\n> being able to lower the other party's output by doing a switcharoo on the\n> tapleaf after they see the signature for their counterparty's tx in the\n> mempool. In your example you could fix it by having a different\n> <contract_key> but this means we can't compress <contract_key> by just\n> using the taproot internal/external key.\n>\n> What about this: Instead of party specific \"finalizing_alice_key\" or\n> p1-fee-bump-key as I denoted it, we just use the key of the output whose\n> value we are reducing. This also solves the O(log(n)) tapleaves for\n> OP_CHECKSIG_MUTATED approach as well -- just have one tapleaf for fee\n> bumping but authorize it under the key of the output we are reducing. Thus\n> we need something like OP_PUSH_TAPROOT_OUTPUT_KEY <output index> which\n> takes the taproot external key at that output (fail if not taproot) and\n> puts it on the stack. So to be clear you have the <output index> on the\n> witness stack rather than having it fixed in a particular tapleaf (as per\n> my original post) and then use OP_DUP to pass it to both\n> OP_CHECKSIG_MUTATED and OP_PUSH_TAPROOT_OUTPUT_KEY.\n> This makes a lot of sense as it matches the semantics of what we are\n> trying to achieve: allow the owner of an output (whether an individual or\n> group) to reduce that output's value to pay a higher fee.\n> Furthermore this removes all keys from the tapleaf since they are all\n> aliased to either the input we are spending or one of the output keys of\n> the tx we are spending to. This is quite a big improvement over my original\n> idea.\n>\n> This works for lightning commit tx and for the case of a PTLC contract. It\n> also seems to work for the DLC funding output. I'd be interested to know if\n> anyone can think of a protocol where this would be inconvenient or\n> impossible to use as the main pre-signed tx fee bumping system.\n>\n> Cheers,\n>\n> LL\n>\n> Le dim. 6 juin 2021 \u00e0 22:28, Lloyd Fournier <lloyd.fourn at gmail.com> a\n>> \u00e9crit :\n>>\n>>> Hi Antione,\n>>>\n>>> Thanks for bringing up this important topic. I think there might be\n>>> another class of solutions over input based, CPFP and sponsorship. I'll\n>>> call them tx mutation schemes. The idea is that you can set a key that can\n>>> increase the fee by lowering a particular output after the tx is signed\n>>> without invalidating the signature. The premise is that anytime you need to\n>>> bump the fee of a transaction you must necessarily have funds in an output\n>>> that are going to you and therefore you can sacrifice some of them to\n>>> increase the fee. This is obviously destructive to txids so child presigned\n>>> transactions will have to use ANYPREVOUT as in your proposal. The advantage\n>>> is that it does not require keeping extra inputs around to bump the fee.\n>>>\n>>> So imagine a new opcode OP_CHECKSIG_MUTATED <output index> <publickey>\n>>> <value> <signature>.\n>>> This would check that <signature> is valid against <publickey> if the\n>>> current transaction had the output at <output index> reduced by <value>. To\n>>> make this more efficient, if the public key is one byte: 0x02 it references\n>>> the taproot *external key* (similar to how ANYPREVOUT uses 0x01 to refer to\n>>> internal key[1]).\n>>> Now for our protocol we want both parties (p1 and p2) to be able to fee\n>>> bump a commitment transaction. They use MuSig to sign the commitment tx\n>>> under the external key with a decent fee for the current conditions. But in\n>>> case it proves insufficient they have added the following two leaves to\n>>> their key in the funding output as a backup so that p1 and p2 can\n>>> unilaterally bump the fee of anything they sign spending from the funding\n>>> output:\n>>>\n>>> 1. OP_CHECKSIG_MUTATED(0, 0x02, <fee-bump-value>, <original-signature>)\n>>> OP_CHECKSIGADD(p1-fee-bump-key, <p1-fee-bump-signature>)  OP_2\n>>> OP_NUMEQUALVERIFY\n>>> 2. OP_CHECKSIG_MUTATED(1, 0x02, <fee-bump-value>, <original-signature>)\n>>> OP_CHECKSIGADD(p2-fee-bump-key, <p2-fee-bump-signature>) OP_2\n>>> OP_NUMEQUALVERIFY\n>>>\n>>> where <...> indicates the thing comes from the witness stack.\n>>> So to bump the fee of the commit tx after it has been signed either\n>>> party takes the <original-signature> and adds a signature under their\n>>> fee-bump-key for the new tx and reveals their fee bump leaf.\n>>> <original-signature> is checked against the old transaction while the fee\n>>> bumped transaction is checked against the fee bump key.\n>>>\n>>> I know I have left out how to change mempool eviction rules to\n>>> accommodate this kind of fee bumping without DoS or pinning attacks but\n>>> hopefully I have demonstrated that this class of solutions also exists.\n>>>\n>>> [1]\n>>> https://github.com/ajtowns/bips/blob/bip-anyprevout/bip-0118.mediawiki\n>>>\n>>> Cheers,\n>>>\n>>> LL\n>>>\n>>>\n>>>\n>>> On Fri, 28 May 2021 at 07:13, Antoine Riard via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Hi,\n>>>>\n>>>> This post is pursuing a wider discussion around better fee-bumping\n>>>> strategies for second-layer protocols. It draws out a comparison between\n>>>> input-based and CPFP fee-bumping techniques, and their apparent trade-offs\n>>>> in terms of onchain footprint, tx-relay bandwidth rebroadcast, batching\n>>>> opportunity and mempool flexibility.\n>>>>\n>>>> Thanks to Darosior for reviews, ideas and discussions.\n>>>>\n>>>> ## Child-Pay-For-Parent\n>>>>\n>>>> CPFP is a mature fee-bumping technique, known and used for a while in\n>>>> the Bitcoin ecosystem. However, its usage in contract protocols with\n>>>> distrusting counterparties raised some security issues. As mempool's chain\n>>>> of unconfirmed transactions are limited in size, if any output is spendable\n>>>> by any contract participant, it can be leveraged as a pinning vector to\n>>>> downgrade odds of transaction confirmation [0].\n>>>>\n>>>> That said, contract transactions interested to be protected under the\n>>>> carve-out logic require to add a new output for any contract participant,\n>>>> even if ultimately only one of them serves as an anchor to attach a CPFP.\n>>>>\n>>>> ## Input-Based\n>>>>\n>>>> I think input-based fee-bumping has been less studied as fee-bumping\n>>>> primitive for L2s [1]. One variant of input-based fee-bumping usable today\n>>>> is the leverage of the SIGHASH_ANYONECANPAY/SIGHASH_SINGLE malleability\n>>>> flags. If the transaction is the latest stage of the contract, a bumping\n>>>> input can be attached just-in-time, thus increasing the feerate of the\n>>>> whole package.\n>>>>\n>>>> However, as of today, input-based fee-bumping doesn't work to bump\n>>>> first stages of contract transactions as it's destructive of the txid, and\n>>>> as such breaks chain of pre-signed transactions. A first improvement would\n>>>> be the deployment of the SIGHASH_ANYPREVOUT softfork proposal. This new\n>>>> malleability flag allows a transaction to be signed without reference to\n>>>> any specific previous output. That way,  spent transactions can be\n>>>> fee-bumped without altering validity of the chain of transactions.\n>>>>\n>>>> Even assuming SIGHASH_ANYPREVOUT, if the first stage contract\n>>>> transaction includes multiple outputs (e.g the LN's commitment tx has\n>>>> multiple HTLC outputs), SIGHASH_SINGLE can't be used and the fee-bumping\n>>>> input value might be wasted. This edge can be smoothed by broadcasting a\n>>>> preliminary fan-out transaction with a set of outputs providing a range of\n>>>> feerate points for the bumped transaction.\n>>>>\n>>>> This overhead could be smoothed even further in the future with more\n>>>> advanced sighash malleability flags like SIGHASH_IOMAP, allowing\n>>>> transaction signers to commit to a map of inputs/outputs [2]. In the\n>>>> context of input-based, the overflowed fee value could be redirected to an\n>>>> outgoing output.\n>>>>\n>>>> ## Onchain Footprint\n>>>>\n>>>> CPFP: One anchor output per participant must be included in the\n>>>> commitment transaction. To this anchor must be attached a child transaction\n>>>> with 2 inputs (one for the commitment, one for the bumping utxo) and 1\n>>>> output. Onchain footprint: 2 inputs + 3 outputs.\n>>>>\n>>>> Input-based (today): If the bumping utxo is offering an adequate\n>>>> feerate point in function of network mempools congestion at time of\n>>>> broadcast, only 1 input. If a preliminary fan-out transaction to adjust\n>>>> feerate point must be broadcasted first, 1 input and 2 outputs more must be\n>>>> accounted for. Onchain footprint: 2 inputs + 3 outputs.\n>>>>\n>>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): As long as the bumping\n>>>> utxo's value is wide enough to cover the worst-case of mempools congestion,\n>>>> the bumped transaction can be attached 1 input and 1 output. Onchain\n>>>> footprint: 1 input + 1 output.\n>>>>\n>>>> ## Tx-Relay Bandwidth Rebroadcast\n>>>>\n>>>> CPFP: In the context of multi-party protocols, we should assume bounded\n>>>> rationality of the participants w.r.t to an unconfirmed spend of the\n>>>> contract utxo across network mempools. Under this assumption, the bumped\n>>>> transaction might have been replaced by a concurrent state. To guarantee\n>>>> efficiency of the CPFP the whole chain of transactions should be\n>>>> rebroadcast, perhaps wasting bandwidth consumption for a still-identical\n>>>> bumped transaction [3]. Rebroadcast footprint: the whole chain of\n>>>> transactions.\n>>>>\n>>>> Input-based (today): In case of rebroadcast, the fee-bumping input is\n>>>> attached to the root of the chain of transactions and as such breaks the\n>>>> chain validity in itself. Beyond the rebroadcast of the updated root under\n>>>> replacement policy, the remaining transactions must be updated and\n>>>> rebroadcast. Rebroadcast footprint: the whole chain of transactions.\n>>>>\n>>>> Input-based(SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): In case of rebroadcast,\n>>>> the fee-bumping is attached to the root of the chain of transactions but it\n>>>> doesn't break the chain validity in itself. Assuming a future mempool\n>>>> acceptance logic to authorize in-place substitution, the rest of the chain\n>>>> could be preserved. Rebroadcast footprint: the root of the chain of\n>>>> transactions.\n>>>>\n>>>> ## Fee-Bumping Batching\n>>>>\n>>>> CPFP: In the context of multi-party protocols, in optimistic scenarios,\n>>>> we can assume aggregation of multiple chains of transactions. For e.g, a LN\n>>>> operator is desirous to non-cooperatively close multiple channels at the\n>>>> same time and would like to combine their fee-bumping. With CPFP, one\n>>>> anchor output and one bumping input must be consumed per aggregated chain,\n>>>> even if the child transaction fields can be shared. Batching perf: 1\n>>>> input/1 output per aggregated chain.\n>>>>\n>>>> Input-based (today): Unless the contract allows interactivity, multiple\n>>>> chains of transactions cannot be aggregated. One bumping input must be\n>>>> attached per chain, though if a preliminary fan-out transaction is relied\n>>>> on to offer multiple feerate points, transaction fields can be shared.\n>>>> Batching perf: 1 input/1 output per aggregated chain.\n>>>>\n>>>> Input-based (SIGHASH_ANYPREVOUT+SIGHASH_IOMAP): Multiple chains of\n>>>> transactions might be aggregated together *non-interactively*. One bumping\n>>>> input and outgoing output can be attached to the aggregated root. Batching\n>>>> perf: 1 input/1 output per aggregation.\n>>>>\n>>>> ## Fee-Bumping Mempool Flexibility\n>>>>\n>>>> CPFP: In the context of multi-party protocols, one of your\n>>>> counterparties might build a branch of transactions from one of the root\n>>>> outputs thus saturating the in-mempool package limits. To avoid these\n>>>> shenanigans, LN channels are relying on the carve-out mechanism. Though,\n>>>> the carve-out mechanism includes its own limitation and doesn't scale\n>>>> beyond 2 contract participants.\n>>>>\n>>>> Input-based: The root of the chain of transaction is the package's\n>>>> oldest ancestor, so package limits don't restrain its acceptance and it\n>>>> works whatever the number of contract participants.\n>>>>\n>>>> To conclude, this post scores 2 fee-bumping primitives for multi-party\n>>>> protocols on a range of factors. It hopes to unravel the ground for a real\n>>>> feerate performance framework of second-layers protocols .\n>>>>\n>>>> Beyond that, few points can be highlighted a) future soft forks allow\n>>>> significant onchain footprint savings, especially in case of batching, b)\n>>>> future package relay bandwidth efficiency should account for rebroadcast\n>>>> frequency of CPFPing multi-party protocols. On this latter point one\n>>>> follow-up might be to evaluate differing package relay *announcement*\n>>>> schemes in function of odds of non-cooperative protocol broadcast/odds of\n>>>> concurrent broadcast/rebroadcast frequencies.\n>>>>\n>>>> Thoughts ?\n>>>>\n>>>> Cheers,\n>>>> Antoine\n>>>>\n>>>> [0]\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n>>>> [1] Beyond the revault architecture :\n>>>> https://github.com/revault/practical-revault/blob/master/revault.pdf\n>>>> [2] Already proposed a while back :\n>>>> https://bitcointalk.org/index.php?topic=252960.0\n>>>> [3] In theory, an already-relayed transaction shouldn't pass Core's\n>>>> `filterInventoryKnown`. In practice, if the transaction is announced as\n>>>> part of a package_id, the child might have changed, not the parent, leading\n>>>> to a redundant relay of the latter.\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210614/a4e3519f/attachment-0001.html>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2021-06-15T00:59:12",
                "message_text_only": "On Tue, 15 Jun 2021 at 02:47, Antoine Riard <antoine.riard at gmail.com> wrote:\n\n> > This makes a lot of sense as it matches the semantics of what we are\n> trying\n> to achieve: allow the owner of an output (whether an individual or group)\n> to reduce that output's value to pay a higher fee.\n>\n> Note, I think you're still struggling with some trust issue that anchor\n> upgrade is at least eliminating for LN, namely the pre-agreement among a\n> group of signers about the effective feerate to use at some unknown time\n> point in the future. If you authorize your counterparty for a broadcast at\n> feerate X, how do you prevent a broadcast at feerate Y, where Y is far\n> under X, thus maliciously burning a lot of your fee-bumping reserve ?\n>\n> Of course, one mitigation is to make a contribution to a common\n> fee-bumping output reserve proportional to what has been contributed as a\n> funding collateral. Thus disincentivizing misuse of the common fee-bumping\n> reserve in a game-theoretical way. But if you take the example of a LN\n> channel, you're now running into another issue. Off-chain balances might\n> fluctuate in a way that most of the time, your fee-bumping reserve\n> contribution is out-of-proportion with your balance amounts to protect ?\n> And as such enduring some significant timevalue bleeding on your\n> fee-bumping reserve.\n>\n> Single-party managed fee-bumping reserve doesn't seem to suffer from this\n> drawback ?\n>\n\nI claim that what I am suggesting is a single-party managed fee-bumping\nsystem that solves all fee-bumping requirements of lightning without\nneeding external utxos and without additional interaction or fee\npre-agreement between parties. On the commit tx you have your balance going\nexclusively towards you which you can unilaterally reduce to increase the\nfee up to whatever threshold you want. With a HTLC or PTLC you also always\nhave a tx with an output that you can unilaterally drain to bump fee\n(either the hltc-success or htlc-timeout). Are you saying that there are\nprotocols where this would require pre-arrangement or are you saying that\nit would require pre-arrangement in lightning for some reason I don't see?\n\nTo further emphasise the generality of this idea you can easily imagine a\nworld where this is enabled on all Bitcoin transactions (of course you have\nto stomach tx malleability -- a bit more palatable with ANYPREVOUT\neverywhere). Even for a normal wallet-to-wallet payment the receiver could\nefficiently increase the tx fee by making a signature under the key of\ntheir output and replacing the original tx without interacting with the\nsender who actually provided the funds for the payment.\n\nCheers,\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210615/5e288dda/attachment.html>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2021-06-15T03:08:37",
                "message_text_only": "On Tue, 15 Jun 2021 at 10:59, Lloyd Fournier <lloyd.fourn at gmail.com> wrote:\n\n>\n>\n> On Tue, 15 Jun 2021 at 02:47, Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n>\n>> > This makes a lot of sense as it matches the semantics of what we are\n>> trying\n>> to achieve: allow the owner of an output (whether an individual or group)\n>> to reduce that output's value to pay a higher fee.\n>>\n>> Note, I think you're still struggling with some trust issue that anchor\n>> upgrade is at least eliminating for LN, namely the pre-agreement among a\n>> group of signers about the effective feerate to use at some unknown time\n>> point in the future. If you authorize your counterparty for a broadcast at\n>> feerate X, how do you prevent a broadcast at feerate Y, where Y is far\n>> under X, thus maliciously burning a lot of your fee-bumping reserve ?\n>>\n>> Of course, one mitigation is to make a contribution to a common\n>> fee-bumping output reserve proportional to what has been contributed as a\n>> funding collateral. Thus disincentivizing misuse of the common fee-bumping\n>> reserve in a game-theoretical way. But if you take the example of a LN\n>> channel, you're now running into another issue. Off-chain balances might\n>> fluctuate in a way that most of the time, your fee-bumping reserve\n>> contribution is out-of-proportion with your balance amounts to protect ?\n>> And as such enduring some significant timevalue bleeding on your\n>> fee-bumping reserve.\n>>\n>> Single-party managed fee-bumping reserve doesn't seem to suffer from this\n>> drawback ?\n>>\n>\n> I claim that what I am suggesting is a single-party managed fee-bumping\n> system that solves all fee-bumping requirements of lightning without\n> needing external utxos and without additional interaction or fee\n> pre-agreement between parties. On the commit tx you have your balance going\n> exclusively towards you which you can unilaterally reduce to increase the\n> fee up to whatever threshold you want. With a HTLC or PTLC you also always\n> have a tx with an output that you can unilaterally drain to bump fee\n> (either the hltc-success or htlc-timeout). Are you saying that there are\n> protocols where this would require pre-arrangement or are you saying that\n> it would require pre-arrangement in lightning for some reason I don't see?\n>\n\nOk now I see what I am missing: We don't really know who owns certain\noutputs in lightning until the most-recent-state-enforcement mechanism has\ndone its job. i.e. the outputs are 2-of-2s up until that has been resolved.\nI was operating on some simplified imaginary lightning. Indeed this makes\nthe proposal far less attractive and does require interaction and\npre-agreement. This complexity here makes it worse than just keeping\nexternal fee-bumping utxos around (as undesirable as this is). Thanks for\nhelping me figure this out.\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210615/d94f53c0/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A Stroll through Fee-Bumping Techniques : Input-Based vs Child-Pay-For-Parent",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "darosior",
                "Jeremy",
                "Lloyd Fournier",
                "Antoine Riard"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 95409
        }
    },
    {
        "title": "[bitcoin-dev] BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols",
        "thread_messages": [
            {
                "author": "Chris Belcher",
                "date": "2021-06-10T12:56:46",
                "message_text_only": "See\nhttps://gist.github.com/chris-belcher/903feab321bf41055c91eaec46581e89\nfor the latest version of this BIP.\n\n<pre>\n  BIP: TBD\n  Layer: Applications\n  Title: Anti-fee-sniping protection with nSequence in taproot\ntransactions to improve privacy for off-chain protocols\n  Author: Chris Belcher <belcher at riseup dot net>\n  Status: Draft\n  Type: Standards Track\n  Created: 2021-06-10\n  License: PD\n</pre>\n\n== Abstract ==\n\nThis document proposes a certain type of wallet behaviour which uses\nBIP341 taproot[1]. It provides a greater anonymity set for off-chain\nprotocols which will make use of point-time-locked contracts (PTLCs)\nsuch as CoinSwap, Lightning and Discrete Log Contracts.\n\n== Motivation ==\n\nWith taproot most likely to be added to bitcoin very soon, and wallet\nsoftware about to implement taproot wallets, we are in a unique position\nto improve the privacy of off-chain protocols if we act soon.\n\nTaproot allows for point-time-locked contracts (PTLC) as a more private\nreplacement for hash-time-locked contracts (HTLCs). If an off-chain\ncontract (for example a Lightning channel) is closed using a PTLC\ninstead of an HTLC, then the blockchain will just see a regular taproot\nscript instead of a hash value and preimage. However, if a contract is\nclosed using the timelock path, then the blockchain will either see a\nOP_CHECKSEQUENCEVERIFY opcode or a nSequence value in the transaction,\nneither of which are very common today, and this would mark the closing\ntransaction as something special and unusual.\n\nThis BIP proposes to improve the privacy and fungibility of off-chain\nprotocols by having on-chain wallets like Bitcoin Core also set the\nnSequence field in their taproot transactions as in BIP68. This would be\nin place of their regular nLockTime anti-fee-sniping protection. The end\nresult is that, if an observer of the blockchain sees a taproot spend\nwith an nSequence value, then that could be either: a regular spend from\na wallet, or an off-chain settlement transaction spent with a timelock.\nThe two cases would be indistinguishable, and this could greatly improve\nthe privacy and fungibility of bitcoin. The community and wallet\ndevelopers should act now to implement this so that the anonymity set of\nnSequence transactions starts to be built up as soon as taproot itself\nbecomes adopted by wallets.\n\n\n== Background ==\n\n=== Fee sniping ===\n\nFee sniping is a hypothetical outcome of bad incentives to bitcoin\nmining in the low-inflation future. For a large miner the value of the\ntransactions in the best block and the mempool can be exceeded by the\ncost of deliberately attempting to mine two blocks to orphan the best\nblock. However with anti-fee-sniping protection using nLockTime or\nnSequence the bad miner will soon run out of transactions that can be\nput in the first block, which means they now need to go in the second.\nAnti-fee-sniping adds to the incentive to move the blockchain forward.\n\nThe nLockTime field is being used this way today. It is implemented in\nBitcoin Core[2] and Electrum[3], and adopted by approximately 20% of all\nrecent transactions[4].\n\n== Absolute vs relative locktime ==\n\nnLockTime is an absolute lock time, it allows the transaction to only be\nmined after a certain block height or unix time. The widespread adoption\nof it might have provided a good anonymity set for off-chain protocols.\nUnfortunately those protocols also commonly use relative lock times,\nbecause it allows contracts (for example Lightning payment channels or\nCoinSwaps) to remain open indefinitely as the countdown clock only\nstarts ticking when the closing transaction is confirmed.\n\nAbsolute locktimes are also still used, so we should keep using\nnLockTime, but also often use nSequence.\n\n== Specifications ==\n\nWhen wallets create transactions spending UTXOs protected by BIP341\ntaproot, they should set either an nLockTime value or nSequence values\nto discourage fee sniping, by allowing the transaction to only be mined\nin the next block after the tip, not the current block. This BIP\nsuggests 50% probability for using nLockTime and 50% for nSequence. If\nnSequence is set it should apply only to the first input of the\ntransaction, if it has multiple inputs.\n\nWallets should also have a second random branch which sets the nLockTime\nor nSequence value even further back, so that transactions that are\ndelayed after signing for whatever reason (e.g. high-latency mix\nnetworks) have better privacy. Existing behaviour is that with a\nprobability of 10%, choose a random number between 0 and 99, and\nsubtract it from the current block height. See the Bitcoin Core and\nElectrum source codes linked in the references for an example.\n\nnSequence can only encode up to a max of 65535 for the block distance,\nsee BIP68[5], so if the UTXOs being spent have more confirmations than\nthat then the wallet should use nLockTime instead.\n\n\n== Compatibility ==\n\nThis BIP doesnt need any consensus changes. It can be adopted\nunilaterally and gradually by wallets. Although for greater privacy it\nwould be good for software to adopt it as soon as possible. Ideally\nduring the process of developers implementing their taproot wallets, so\nthat when taproot starts to be used it will already include the\nnSequence code.\n\nAll wallet software already keeps track of how many confirmations its\nUTXOs have, so the information required to set the nSequence field is\nalready available.\n\n== Acknowledgements ==\n\nOriginally suggested by David Harding[6] and mentioned to me by ZmnSCPxj.\n\n==Copyright==\n\nThis document is placed in the public domain.\n\n== References ==\n[1] https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki\n[2] https://github.com/bitcoin/bitcoin/pull/2340\n[3]\nhttps://github.com/spesmilo/electrum/blob/7e6d65ec11c0dccfc24478471c5951d3ae586937/electrum/wallet.py#L211-L224\n[4]\nhttps://txstats.com/dashboard/db/blocks-statistics?panelId=4&fullscreen&orgId=1\n[5] https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki\n[6]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002412.html"
            },
            {
                "author": "Ben Carman",
                "date": "2021-06-28T10:55:30",
                "message_text_only": "> If nSequence is set it should apply only to the first input of the\ntransaction, if it has multiple inputs.\n\nThis could have complications with DLCs and dual funded lightning. In both protocols the ordering of the inputs is not know until both parties have revealed all of their inputs, and during the reveal the nSequence is given.  If we want DLCs and dual funded lightning to be compatible it would be better to have it define it as \u201cat least one of the inputs of the transaction\u201d instead of \u201cit should apply only to the first input of the transaction\u201d\n\nbenthecarman\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/88dc0ff3/attachment.html>"
            },
            {
                "author": "Chris Belcher",
                "date": "2021-06-29T09:25:52",
                "message_text_only": "Good thinking. Your point also applies to CoinJoins (both equal-output\nand payjoin), and to any transaction where multiple parties contribute\ninputs.\n\nThe BIP should say \"at least one of the inputs of the transaction\" with\na suggestion that on-chain wallets just randomly pick an input.\n\nOn 28/06/2021 11:55, Ben Carman via bitcoin-dev wrote:\n>> If nSequence is set it should apply only to the first input of the\n> transaction, if it has multiple inputs.\n> \n> This could have complications with DLCs and dual funded lightning. In both protocols the ordering of the inputs is not know until both parties have revealed all of their inputs, and during the reveal the nSequence is given.  If we want DLCs and dual funded lightning to be compatible it would be better to have it define it as \u201cat least one of the inputs of the transaction\u201d instead of \u201cit should apply only to the first input of the transaction\u201d\n> \n> benthecarman\n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Ben Carman"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7916
        }
    },
    {
        "title": "[bitcoin-dev] OP_BEFOREBLOCKVERIFY - discussing and opcode that invalidates a spend path after a certain block",
        "thread_messages": [
            {
                "author": "Billy Tetrud",
                "date": "2021-06-10T17:35:25",
                "message_text_only": "Hi Everyone,\n\nI'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n(OP_BBV) which is similar to ones that have been discussed before (eg\nOP_BLOCKNUMBER). The opcode is very simple: the it takes as a parameter a\nnumber representing a block height, and marks the transaction invalid if\nthe current block the transaction is being evaluated for is greater than or\nequal to that block height, the transaction is invalid. I wrote up a bip\nfor OP_BBV here\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n.\n\nThe motivation for this opcode is primarily to do switch-off kinds of\ntransactions. Eg, an output that contains both a spend path that uses\nOP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\nparticular block one person can spend, and after that block a different\nperson can spend. This can allow doing things like expiring payments or\nreversible payments in a cheaper way. Currently, things like that require a\nsequence of multiple transactions, however OP_BBV can do it in a single\ntransaction, making these applications a lot more economically feasible.\n\nThe particular application I'm most interested in is more efficient wallet\nvaults. However, wallet vaults requires other new opcodes, and I've been\ngiven the (good, I think) advice to start off this discussion with\nsomething a bit more bite sized and manageable. So I want to keep this\ndiscussion to OP_BBV and steer away from the specifics of the wallet vaults\nI'm thinking of (which are more involved, requiring other new opcodes that\nI think makes more sense to discuss in a different thread).\n\nThe main thing I'd like to discuss is the historical avoidance of and\nstigma toward opcodes that can cause a valid transaction to become invalid.\n\nIt seems there are two concerns:\n\n1. that an opcode like might create a DOS vector where a malicious actor\nmight be able to spam the mempool with transactions containing this opcode.\n2. that an opcode like this could cause \"bad\" reorg behavior, where in a\nreorg, transactions that were spent become not spend and not spendable\nbecause they were mined too near their expiry point.\n\nWhile I don't want to claim anything about opcodes that can cause spend\npaths to expire in general, I do want to claim that *some* opcodes like\nthat are safe - in particular OP_BBV. In the context of OP_BBV\nspecifically, it seems to me like item 1 (mempool handling) is a solvable\nproblem and that point 2 (reorg issues) is not really a problem since\npeople should generally be waiting for 6 confirmations and software can\nwarn the user to wait for 6 confirmations in relevant scenarios where a\n6-block reorg might reverse the transaction. I discuss this in detail in\nthe Design Tradeoffs and Risks\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry>\nsection\nof the document I wrote for OP_BBV. I'd love to hear thoughts from others\non here about these things and especially the discussion of these issues in\nthe document I linked to.\n\nThanks,\nBT\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/b360ee89/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-06-10T18:35:41",
                "message_text_only": "This is a continuation of the thread at\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018760.html\non this topic.\n\nI still remain unconvinced that we ought to give up on the \"reorg safety\"\nproperty that is explicitly part of Bitcoin's design.\n\nOn Thu, Jun 10, 2021 at 1:56 PM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Everyone,\n>\n> I'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n> (OP_BBV) which is similar to ones that have been discussed before (eg\n> OP_BLOCKNUMBER). The opcode is very simple: the it takes as a parameter a\n> number representing a block height, and marks the transaction invalid if\n> the current block the transaction is being evaluated for is greater than or\n> equal to that block height, the transaction is invalid. I wrote up a bip\n> for OP_BBV here\n> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n> .\n>\n> The motivation for this opcode is primarily to do switch-off kinds of\n> transactions. Eg, an output that contains both a spend path that uses\n> OP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\n> particular block one person can spend, and after that block a different\n> person can spend. This can allow doing things like expiring payments or\n> reversible payments in a cheaper way. Currently, things like that require a\n> sequence of multiple transactions, however OP_BBV can do it in a single\n> transaction, making these applications a lot more economically feasible.\n>\n> The particular application I'm most interested in is more efficient wallet\n> vaults. However, wallet vaults requires other new opcodes, and I've been\n> given the (good, I think) advice to start off this discussion with\n> something a bit more bite sized and manageable. So I want to keep this\n> discussion to OP_BBV and steer away from the specifics of the wallet vaults\n> I'm thinking of (which are more involved, requiring other new opcodes that\n> I think makes more sense to discuss in a different thread).\n>\n> The main thing I'd like to discuss is the historical avoidance of and\n> stigma toward opcodes that can cause a valid transaction to become invalid.\n>\n> It seems there are two concerns:\n>\n> 1. that an opcode like might create a DOS vector where a malicious actor\n> might be able to spam the mempool with transactions containing this opcode.\n> 2. that an opcode like this could cause \"bad\" reorg behavior, where in a\n> reorg, transactions that were spent become not spend and not spendable\n> because they were mined too near their expiry point.\n>\n> While I don't want to claim anything about opcodes that can cause spend\n> paths to expire in general, I do want to claim that *some* opcodes like\n> that are safe - in particular OP_BBV. In the context of OP_BBV\n> specifically, it seems to me like item 1 (mempool handling) is a solvable\n> problem and that point 2 (reorg issues) is not really a problem since\n> people should generally be waiting for 6 confirmations and software can\n> warn the user to wait for 6 confirmations in relevant scenarios where a\n> 6-block reorg might reverse the transaction. I discuss this in detail in\n> the Design Tradeoffs and Risks\n> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry> section\n> of the document I wrote for OP_BBV. I'd love to hear thoughts from others\n> on here about these things and especially the discussion of these issues in\n> the document I linked to.\n>\n> Thanks,\n> BT\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/8acbf1df/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-10T22:19:55",
                "message_text_only": "@Russell In that thread, you quoted Satoshi there, but neither he nor you\nreally deeply explained the concern. Would you mind elaborating on a\nsituation that calls for concern here? Some deeper explanation of the\n\"reorg safety\" property would also be helpful. I'd very much like to know\nwhat your thoughts are on the specific points I brought up in the BIP as\nwell.\n\nOn Thu, Jun 10, 2021 at 11:35 AM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n> This is a continuation of the thread at\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018760.html\n> on this topic.\n>\n> I still remain unconvinced that we ought to give up on the \"reorg safety\"\n> property that is explicitly part of Bitcoin's design.\n>\n> On Thu, Jun 10, 2021 at 1:56 PM Billy Tetrud via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Everyone,\n>>\n>> I'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n>> (OP_BBV) which is similar to ones that have been discussed before (eg\n>> OP_BLOCKNUMBER). The opcode is very simple: the it takes as a parameter\n>> a number representing a block height, and marks the transaction invalid if\n>> the current block the transaction is being evaluated for is greater than or\n>> equal to that block height, the transaction is invalid. I wrote up a bip\n>> for OP_BBV here\n>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n>> .\n>>\n>> The motivation for this opcode is primarily to do switch-off kinds of\n>> transactions. Eg, an output that contains both a spend path that uses\n>> OP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\n>> particular block one person can spend, and after that block a different\n>> person can spend. This can allow doing things like expiring payments or\n>> reversible payments in a cheaper way. Currently, things like that require a\n>> sequence of multiple transactions, however OP_BBV can do it in a single\n>> transaction, making these applications a lot more economically feasible.\n>>\n>> The particular application I'm most interested in is more efficient\n>> wallet vaults. However, wallet vaults requires other new opcodes, and I've\n>> been given the (good, I think) advice to start off this discussion with\n>> something a bit more bite sized and manageable. So I want to keep this\n>> discussion to OP_BBV and steer away from the specifics of the wallet vaults\n>> I'm thinking of (which are more involved, requiring other new opcodes that\n>> I think makes more sense to discuss in a different thread).\n>>\n>> The main thing I'd like to discuss is the historical avoidance of and\n>> stigma toward opcodes that can cause a valid transaction to become invalid.\n>>\n>> It seems there are two concerns:\n>>\n>> 1. that an opcode like might create a DOS vector where a malicious actor\n>> might be able to spam the mempool with transactions containing this opcode.\n>> 2. that an opcode like this could cause \"bad\" reorg behavior, where in a\n>> reorg, transactions that were spent become not spend and not spendable\n>> because they were mined too near their expiry point.\n>>\n>> While I don't want to claim anything about opcodes that can cause spend\n>> paths to expire in general, I do want to claim that *some* opcodes like\n>> that are safe - in particular OP_BBV. In the context of OP_BBV\n>> specifically, it seems to me like item 1 (mempool handling) is a solvable\n>> problem and that point 2 (reorg issues) is not really a problem since\n>> people should generally be waiting for 6 confirmations and software can\n>> warn the user to wait for 6 confirmations in relevant scenarios where a\n>> 6-block reorg might reverse the transaction. I discuss this in detail in\n>> the Design Tradeoffs and Risks\n>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry> section\n>> of the document I wrote for OP_BBV. I'd love to hear thoughts from others\n>> on here about these things and especially the discussion of these issues in\n>> the document I linked to.\n>>\n>> Thanks,\n>> BT\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/cbdc4ca4/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-06-10T23:20:19",
                "message_text_only": "As it stands today, in order to double spend a transaction during a reorg,\none must take an active role of recognizing that a reorg has happened, hope\nthat the new branch has completely omitted your spending transaction, and\nthen quickly broadcast a replacement transaction with a higher fee to\noutbid your previous transaction.\n\nHowever with, pretty much any change to Bitcoin that leads to non-monotonic\nvalidity rules, that is any rule where transactions that are valid at one\ntip, can become invalid at a latter tip through some other means than their\ninputs being spent, such as OP_BBV, one can design a wallet to passively\ntake advantage of reorgs by always spending through an OP_BBV that is on\nthe verge of becoming invalid.  Then you just have to sit back and wait for\na suitable reorg to take back your UTXO for you without any work.  I would\nprobably attempt to build such a wallet for myself should any OP_BBV-like\nproposal be implemented.  Think of it as an auto-double spend wallet.\n\nSome people hold the opinion that there is no meaningful distinction\nbetween the active and passive roles in these two scenarios.  I'm not\nconvinced.  I see a material difference between needing to actively\nbroadcast a replacement transaction and passively waiting for your\ntransaction to fall out of validity.  I also see a material difference\nbetween needing the transaction to be completely omitted from the reorging\nchain versus just having the transaction fail a height qualification in the\nreorging chain.\n\n(There are a few other lesser problems with an OP_BBV proposal, including\nthe fact that Bitcoin software tends to cache script validity so you'd want\nto use the taproot annex instead of pure script; and a possible issue that\nthe proposal defeats limits on transaction replacement because now instead\nof meeting minimum thresholds for fee bumping you can just let the previous\ntransaction expire and bump the fee by a fraction (though you are\neffectively rate limited so maybe that is considered sufficiently\nmitigated?).  But there is little point in addressing these lesser concerns\nif the main concern is outstanding.)\n\nOn Thu, Jun 10, 2021 at 6:20 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n> @Russell In that thread, you quoted Satoshi there, but neither he nor you\n> really deeply explained the concern. Would you mind elaborating on a\n> situation that calls for concern here? Some deeper explanation of the\n> \"reorg safety\" property would also be helpful. I'd very much like to know\n> what your thoughts are on the specific points I brought up in the BIP as\n> well.\n>\n> On Thu, Jun 10, 2021 at 11:35 AM Russell O'Connor <\n> roconnor at blockstream.com> wrote:\n>\n>> This is a continuation of the thread at\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018760.html\n>> on this topic.\n>>\n>> I still remain unconvinced that we ought to give up on the \"reorg safety\"\n>> property that is explicitly part of Bitcoin's design.\n>>\n>> On Thu, Jun 10, 2021 at 1:56 PM Billy Tetrud via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi Everyone,\n>>>\n>>> I'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n>>> (OP_BBV) which is similar to ones that have been discussed before (eg\n>>> OP_BLOCKNUMBER). The opcode is very simple: the it takes as a parameter\n>>> a number representing a block height, and marks the transaction invalid if\n>>> the current block the transaction is being evaluated for is greater than or\n>>> equal to that block height, the transaction is invalid. I wrote up a bip\n>>> for OP_BBV here\n>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n>>> .\n>>>\n>>> The motivation for this opcode is primarily to do switch-off kinds of\n>>> transactions. Eg, an output that contains both a spend path that uses\n>>> OP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\n>>> particular block one person can spend, and after that block a different\n>>> person can spend. This can allow doing things like expiring payments or\n>>> reversible payments in a cheaper way. Currently, things like that require a\n>>> sequence of multiple transactions, however OP_BBV can do it in a single\n>>> transaction, making these applications a lot more economically feasible.\n>>>\n>>> The particular application I'm most interested in is more efficient\n>>> wallet vaults. However, wallet vaults requires other new opcodes, and I've\n>>> been given the (good, I think) advice to start off this discussion with\n>>> something a bit more bite sized and manageable. So I want to keep this\n>>> discussion to OP_BBV and steer away from the specifics of the wallet vaults\n>>> I'm thinking of (which are more involved, requiring other new opcodes that\n>>> I think makes more sense to discuss in a different thread).\n>>>\n>>> The main thing I'd like to discuss is the historical avoidance of and\n>>> stigma toward opcodes that can cause a valid transaction to become invalid.\n>>>\n>>> It seems there are two concerns:\n>>>\n>>> 1. that an opcode like might create a DOS vector where a malicious actor\n>>> might be able to spam the mempool with transactions containing this opcode.\n>>> 2. that an opcode like this could cause \"bad\" reorg behavior, where in a\n>>> reorg, transactions that were spent become not spend and not spendable\n>>> because they were mined too near their expiry point.\n>>>\n>>> While I don't want to claim anything about opcodes that can cause spend\n>>> paths to expire in general, I do want to claim that *some* opcodes like\n>>> that are safe - in particular OP_BBV. In the context of OP_BBV\n>>> specifically, it seems to me like item 1 (mempool handling) is a solvable\n>>> problem and that point 2 (reorg issues) is not really a problem since\n>>> people should generally be waiting for 6 confirmations and software can\n>>> warn the user to wait for 6 confirmations in relevant scenarios where a\n>>> 6-block reorg might reverse the transaction. I discuss this in detail in\n>>> the Design Tradeoffs and Risks\n>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry> section\n>>> of the document I wrote for OP_BBV. I'd love to hear thoughts from others\n>>> on here about these things and especially the discussion of these issues in\n>>> the document I linked to.\n>>>\n>>> Thanks,\n>>> BT\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/22b0d8c3/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-11T05:59:56",
                "message_text_only": ">  one can design a wallet to passively take advantage of reorgs\n\nIt does sound like this is the central issue. I can certainly see that it's\nmaterially different than current double spending ability. Double spending\nvia reorgs today requires either active participation and above-average\nconnection to miners or luck.\n\nThe easiest method of double spending I can think of is the following.\nConsider if a user broadcasts an RBF transaction as soon as the original\ntransaction is mined. I assume the transaction won't propagate through the\nnetwork because any node that has received the newest block will see it as\nan invalid transaction, is that right? Is there no significant possibility\nthat enough of the network hasn't seen the block yet to transmit the RBF\ntransaction widely enough to get incorporated into a reorg? This would\ncertainly be something wallets could do automatically. It certainly does\nseem like at very least this would have a much lower success rate than your\nauto-double-spend wallet.\n\nIn any case, what if we apply the same logic to non-monotonic transactions?\nWhat if we program nodes to reject such transactions that are too close to\nthe borderline? For example, if nodes rejected transactions that could\nexpire within 100 blocks, it would be much less likely for this kind of\nthing to be done at point of sale, and there would be a much higher chance\nthat whatever recipient that's willing to wait 100 blocks would be willing\nto wait 6 blocks more to be sure no reorg happens. It would also be a lot\nmore likely that the transaction is confirmed well before it might expire.\nNot a perfect solution, to be sure. But it could substantially limit the\ncases and likelihoods that passive double-spend attempts would succeed. But\nminers could still get and include transactions in blocks regardless of\nthis, and they have an incentive to (to maximize the fees they collect). It\nat least seems plausible that those incentives would undermine this\nsolution.\n\nBut it seems like all this is only a problem for people who are considering\n1 confirmation to be effectively finalized. Users and programmatic systems\nalike simply wait for some condition to be true to recognize payment as\nhaving completed. Systems could simply be programmed so the condition is at\nleast 6 confirmations for any non-monotonic transaction, or all\ntransactions. 6 confirmations is the accepted standard of finalization,\nisn't it? Users looking at their software should be able to see that a\nconfirmation has happened but that this isn't enough to be considered\nfinalized. As long as this is standard, no problem should really exist,\nright? Except within incorrectly written software or people taking it upon\nthemselves to define finalization on their own. People who accept 0-conf\ntransactions are similarly using a non-standard definition of finalization\nand are putting themselves at even greater risk for double spends. How\nwould this be any different?\n\n>  there is little point in addressing these lesser concerns if the main\nconcern is outstanding\n\nI agree, it makes the most sense to discuss the above points rather than\ngetting into the weeds about more minor issues.\n\nOn Thu, Jun 10, 2021 at 4:20 PM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n> As it stands today, in order to double spend a transaction during a reorg,\n> one must take an active role of recognizing that a reorg has happened, hope\n> that the new branch has completely omitted your spending transaction, and\n> then quickly broadcast a replacement transaction with a higher fee to\n> outbid your previous transaction.\n>\n> However with, pretty much any change to Bitcoin that leads to\n> non-monotonic validity rules, that is any rule where transactions that are\n> valid at one tip, can become invalid at a latter tip through some other\n> means than their inputs being spent, such as OP_BBV, one can design a\n> wallet to passively take advantage of reorgs by always spending through an\n> OP_BBV that is on the verge of becoming invalid.  Then you just have to sit\n> back and wait for a suitable reorg to take back your UTXO for you without\n> any work.  I would probably attempt to build such a wallet for myself\n> should any OP_BBV-like proposal be implemented.  Think of it as an\n> auto-double spend wallet.\n>\n> Some people hold the opinion that there is no meaningful distinction\n> between the active and passive roles in these two scenarios.  I'm not\n> convinced.  I see a material difference between needing to actively\n> broadcast a replacement transaction and passively waiting for your\n> transaction to fall out of validity.  I also see a material difference\n> between needing the transaction to be completely omitted from the reorging\n> chain versus just having the transaction fail a height qualification in the\n> reorging chain.\n>\n> (There are a few other lesser problems with an OP_BBV proposal, including\n> the fact that Bitcoin software tends to cache script validity so you'd want\n> to use the taproot annex instead of pure script; and a possible issue that\n> the proposal defeats limits on transaction replacement because now instead\n> of meeting minimum thresholds for fee bumping you can just let the previous\n> transaction expire and bump the fee by a fraction (though you are\n> effectively rate limited so maybe that is considered sufficiently\n> mitigated?).  But there is little point in addressing these lesser concerns\n> if the main concern is outstanding.)\n>\n> On Thu, Jun 10, 2021 at 6:20 PM Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n>\n>> @Russell In that thread, you quoted Satoshi there, but neither he nor you\n>> really deeply explained the concern. Would you mind elaborating on a\n>> situation that calls for concern here? Some deeper explanation of the\n>> \"reorg safety\" property would also be helpful. I'd very much like to know\n>> what your thoughts are on the specific points I brought up in the BIP as\n>> well.\n>>\n>> On Thu, Jun 10, 2021 at 11:35 AM Russell O'Connor <\n>> roconnor at blockstream.com> wrote:\n>>\n>>> This is a continuation of the thread at\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018760.html\n>>> on this topic.\n>>>\n>>> I still remain unconvinced that we ought to give up on the \"reorg\n>>> safety\" property that is explicitly part of Bitcoin's design.\n>>>\n>>> On Thu, Jun 10, 2021 at 1:56 PM Billy Tetrud via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Hi Everyone,\n>>>>\n>>>> I'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n>>>> (OP_BBV) which is similar to ones that have been discussed before (eg\n>>>> OP_BLOCKNUMBER). The opcode is very simple: the it takes as a\n>>>> parameter a number representing a block height, and marks the transaction\n>>>> invalid if the current block the transaction is being evaluated for is\n>>>> greater than or equal to that block height, the transaction is invalid. I\n>>>> wrote up a bip for OP_BBV here\n>>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n>>>> .\n>>>>\n>>>> The motivation for this opcode is primarily to do switch-off kinds of\n>>>> transactions. Eg, an output that contains both a spend path that uses\n>>>> OP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\n>>>> particular block one person can spend, and after that block a different\n>>>> person can spend. This can allow doing things like expiring payments or\n>>>> reversible payments in a cheaper way. Currently, things like that require a\n>>>> sequence of multiple transactions, however OP_BBV can do it in a single\n>>>> transaction, making these applications a lot more economically feasible.\n>>>>\n>>>> The particular application I'm most interested in is more efficient\n>>>> wallet vaults. However, wallet vaults requires other new opcodes, and I've\n>>>> been given the (good, I think) advice to start off this discussion with\n>>>> something a bit more bite sized and manageable. So I want to keep this\n>>>> discussion to OP_BBV and steer away from the specifics of the wallet vaults\n>>>> I'm thinking of (which are more involved, requiring other new opcodes that\n>>>> I think makes more sense to discuss in a different thread).\n>>>>\n>>>> The main thing I'd like to discuss is the historical avoidance of and\n>>>> stigma toward opcodes that can cause a valid transaction to become invalid.\n>>>>\n>>>> It seems there are two concerns:\n>>>>\n>>>> 1. that an opcode like might create a DOS vector where a malicious\n>>>> actor might be able to spam the mempool with transactions containing this\n>>>> opcode.\n>>>> 2. that an opcode like this could cause \"bad\" reorg behavior, where in\n>>>> a reorg, transactions that were spent become not spend and not spendable\n>>>> because they were mined too near their expiry point.\n>>>>\n>>>> While I don't want to claim anything about opcodes that can cause spend\n>>>> paths to expire in general, I do want to claim that *some* opcodes like\n>>>> that are safe - in particular OP_BBV. In the context of OP_BBV\n>>>> specifically, it seems to me like item 1 (mempool handling) is a solvable\n>>>> problem and that point 2 (reorg issues) is not really a problem since\n>>>> people should generally be waiting for 6 confirmations and software can\n>>>> warn the user to wait for 6 confirmations in relevant scenarios where a\n>>>> 6-block reorg might reverse the transaction. I discuss this in detail in\n>>>> the Design Tradeoffs and Risks\n>>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry> section\n>>>> of the document I wrote for OP_BBV. I'd love to hear thoughts from others\n>>>> on here about these things and especially the discussion of these issues in\n>>>> the document I linked to.\n>>>>\n>>>> Thanks,\n>>>> BT\n>>>>\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210610/46ce195a/attachment.html>"
            },
            {
                "author": "James MacWhyte",
                "date": "2021-06-11T11:12:16",
                "message_text_only": "@Billy I like the idea. It is very obvious how useful an opcode like this\nwould be! (My background is in wallet implementation)\n\n@Russell I do understand your concerns of monotonism, however I'm having a\nhard time really coming up with an attack vector. You said \"one can design\na wallet to passively take advantage of reorgs by always spending through\nan OP_BBV that is on the verge of becoming invalid.\" Unless I'm mistaken,\nthis means you would need to send yourself a fresh transaction using OP_BBV\nset to, say, 2 blocks in the future, then immediately spend that output in\na new payment to someone else and hope a reorg happens. Does this mean the\ntheoretical double-spend wallet you are proposing would have to send two\ntransactions every time you make a single payment, doubling the transaction\nfees and adding more uncertainty around when the second transaction would\nget confirmed?\n\nIn a normal double spend scenario, there is no cost to a failed attempt,\nbut much to gain from a success. With your design, there is a real cost to\nevery single attempt (transaction fees) and no evidence that the rate of\nsuccess would be higher (you still have to bet on the reorg not including\nyour transaction in the first few blocks). It sounds like this new system\nwould actually be less attractive to double spenders than the current model!\n\nI also agree with Billy's idea for relay rules. We already have abusable\nchain rules (e.g. a tx can be included in a block with 0 transaction fee\n[spam?]) but we add protection with relay rules (e.g. minimum fee to\nrelay). I don't see how this would be any different, if the chain rules\nonly enforced the block height for confirmation and the relay rules forced\na minimum OP_BBV value in order to protect against reorg double spends.\n\nJames\n\n\nOn Fri, Jun 11, 2021 at 11:00 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >  one can design a wallet to passively take advantage of reorgs\n>\n> It does sound like this is the central issue. I can certainly see that\n> it's materially different than current double spending ability. Double\n> spending via reorgs today requires either active participation and\n> above-average connection to miners or luck.\n>\n> The easiest method of double spending I can think of is the following.\n> Consider if a user broadcasts an RBF transaction as soon as the original\n> transaction is mined. I assume the transaction won't propagate through the\n> network because any node that has received the newest block will see it as\n> an invalid transaction, is that right? Is there no significant possibility\n> that enough of the network hasn't seen the block yet to transmit the RBF\n> transaction widely enough to get incorporated into a reorg? This would\n> certainly be something wallets could do automatically. It certainly does\n> seem like at very least this would have a much lower success rate than your\n> auto-double-spend wallet.\n>\n> In any case, what if we apply the same logic to non-monotonic\n> transactions? What if we program nodes to reject such transactions that are\n> too close to the borderline? For example, if nodes rejected transactions\n> that could expire within 100 blocks, it would be much less likely for this\n> kind of thing to be done at point of sale, and there would be a much higher\n> chance that whatever recipient that's willing to wait 100 blocks would be\n> willing to wait 6 blocks more to be sure no reorg happens. It would also be\n> a lot more likely that the transaction is confirmed well before it might\n> expire. Not a perfect solution, to be sure. But it could substantially\n> limit the cases and likelihoods that passive double-spend attempts would\n> succeed. But miners could still get and include transactions in blocks\n> regardless of this, and they have an incentive to (to maximize the fees\n> they collect). It at least seems plausible that those incentives would\n> undermine this solution.\n>\n> But it seems like all this is only a problem for people who are\n> considering 1 confirmation to be effectively finalized. Users and\n> programmatic systems alike simply wait for some condition to be true to\n> recognize payment as having completed. Systems could simply be programmed\n> so the condition is at least 6 confirmations for any non-monotonic\n> transaction, or all transactions. 6 confirmations is the accepted standard\n> of finalization, isn't it? Users looking at their software should be able\n> to see that a confirmation has happened but that this isn't enough to be\n> considered finalized. As long as this is standard, no problem should really\n> exist, right? Except within incorrectly written software or people taking\n> it upon themselves to define finalization on their own. People who accept\n> 0-conf transactions are similarly using a non-standard definition of\n> finalization and are putting themselves at even greater risk for double\n> spends. How would this be any different?\n>\n> >  there is little point in addressing these lesser concerns if the main\n> concern is outstanding\n>\n> I agree, it makes the most sense to discuss the above points rather than\n> getting into the weeds about more minor issues.\n>\n> On Thu, Jun 10, 2021 at 4:20 PM Russell O'Connor <roconnor at blockstream.com>\n> wrote:\n>\n>> As it stands today, in order to double spend a transaction during a\n>> reorg, one must take an active role of recognizing that a reorg has\n>> happened, hope that the new branch has completely omitted your spending\n>> transaction, and then quickly broadcast a replacement transaction with a\n>> higher fee to outbid your previous transaction.\n>>\n>> However with, pretty much any change to Bitcoin that leads to\n>> non-monotonic validity rules, that is any rule where transactions that are\n>> valid at one tip, can become invalid at a latter tip through some other\n>> means than their inputs being spent, such as OP_BBV, one can design a\n>> wallet to passively take advantage of reorgs by always spending through an\n>> OP_BBV that is on the verge of becoming invalid.  Then you just have to sit\n>> back and wait for a suitable reorg to take back your UTXO for you without\n>> any work.  I would probably attempt to build such a wallet for myself\n>> should any OP_BBV-like proposal be implemented.  Think of it as an\n>> auto-double spend wallet.\n>>\n>> Some people hold the opinion that there is no meaningful distinction\n>> between the active and passive roles in these two scenarios.  I'm not\n>> convinced.  I see a material difference between needing to actively\n>> broadcast a replacement transaction and passively waiting for your\n>> transaction to fall out of validity.  I also see a material difference\n>> between needing the transaction to be completely omitted from the reorging\n>> chain versus just having the transaction fail a height qualification in the\n>> reorging chain.\n>>\n>> (There are a few other lesser problems with an OP_BBV proposal, including\n>> the fact that Bitcoin software tends to cache script validity so you'd want\n>> to use the taproot annex instead of pure script; and a possible issue that\n>> the proposal defeats limits on transaction replacement because now instead\n>> of meeting minimum thresholds for fee bumping you can just let the previous\n>> transaction expire and bump the fee by a fraction (though you are\n>> effectively rate limited so maybe that is considered sufficiently\n>> mitigated?).  But there is little point in addressing these lesser concerns\n>> if the main concern is outstanding.)\n>>\n>> On Thu, Jun 10, 2021 at 6:20 PM Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>>\n>>> @Russell In that thread, you quoted Satoshi there, but neither he nor\n>>> you really deeply explained the concern. Would you mind elaborating on a\n>>> situation that calls for concern here? Some deeper explanation of the\n>>> \"reorg safety\" property would also be helpful. I'd very much like to know\n>>> what your thoughts are on the specific points I brought up in the BIP as\n>>> well.\n>>>\n>>> On Thu, Jun 10, 2021 at 11:35 AM Russell O'Connor <\n>>> roconnor at blockstream.com> wrote:\n>>>\n>>>> This is a continuation of the thread at\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018760.html\n>>>> on this topic.\n>>>>\n>>>> I still remain unconvinced that we ought to give up on the \"reorg\n>>>> safety\" property that is explicitly part of Bitcoin's design.\n>>>>\n>>>> On Thu, Jun 10, 2021 at 1:56 PM Billy Tetrud via bitcoin-dev <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> Hi Everyone,\n>>>>>\n>>>>> I'd like to open a discussion of an opcode I call OP_BEFOREBLOCKVERIFY\n>>>>> (OP_BBV) which is similar to ones that have been discussed before (eg\n>>>>> OP_BLOCKNUMBER). The opcode is very simple: the it takes as a\n>>>>> parameter a number representing a block height, and marks the transaction\n>>>>> invalid if the current block the transaction is being evaluated for is\n>>>>> greater than or equal to that block height, the transaction is invalid. I\n>>>>> wrote up a bip for OP_BBV here\n>>>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md>\n>>>>> .\n>>>>>\n>>>>> The motivation for this opcode is primarily to do switch-off kinds of\n>>>>> transactions. Eg, an output that contains both a spend path that uses\n>>>>> OP_BBV and a spend path that uses OP_CHECKSEQUENCEVERIFY so that before a\n>>>>> particular block one person can spend, and after that block a different\n>>>>> person can spend. This can allow doing things like expiring payments or\n>>>>> reversible payments in a cheaper way. Currently, things like that require a\n>>>>> sequence of multiple transactions, however OP_BBV can do it in a single\n>>>>> transaction, making these applications a lot more economically feasible.\n>>>>>\n>>>>> The particular application I'm most interested in is more efficient\n>>>>> wallet vaults. However, wallet vaults requires other new opcodes, and I've\n>>>>> been given the (good, I think) advice to start off this discussion with\n>>>>> something a bit more bite sized and manageable. So I want to keep this\n>>>>> discussion to OP_BBV and steer away from the specifics of the wallet vaults\n>>>>> I'm thinking of (which are more involved, requiring other new opcodes that\n>>>>> I think makes more sense to discuss in a different thread).\n>>>>>\n>>>>> The main thing I'd like to discuss is the historical avoidance of and\n>>>>> stigma toward opcodes that can cause a valid transaction to become invalid.\n>>>>>\n>>>>> It seems there are two concerns:\n>>>>>\n>>>>> 1. that an opcode like might create a DOS vector where a malicious\n>>>>> actor might be able to spam the mempool with transactions containing this\n>>>>> opcode.\n>>>>> 2. that an opcode like this could cause \"bad\" reorg behavior, where in\n>>>>> a reorg, transactions that were spent become not spend and not spendable\n>>>>> because they were mined too near their expiry point.\n>>>>>\n>>>>> While I don't want to claim anything about opcodes that can cause\n>>>>> spend paths to expire in general, I do want to claim that *some* opcodes\n>>>>> like that are safe - in particular OP_BBV. In the context of OP_BBV\n>>>>> specifically, it seems to me like item 1 (mempool handling) is a solvable\n>>>>> problem and that point 2 (reorg issues) is not really a problem since\n>>>>> people should generally be waiting for 6 confirmations and software can\n>>>>> warn the user to wait for 6 confirmations in relevant scenarios where a\n>>>>> 6-block reorg might reverse the transaction. I discuss this in detail in\n>>>>> the Design Tradeoffs and Risks\n>>>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-expiry> section\n>>>>> of the document I wrote for OP_BBV. I'd love to hear thoughts from others\n>>>>> on here about these things and especially the discussion of these issues in\n>>>>> the document I linked to.\n>>>>>\n>>>>> Thanks,\n>>>>> BT\n>>>>>\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210611/65d0b138/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-06-11T11:43:22",
                "message_text_only": "On Fri, Jun 11, 2021 at 7:12 AM James MacWhyte <macwhyte at gmail.com> wrote:\n\n> @Billy I like the idea. It is very obvious how useful an opcode like this\n> would be! (My background is in wallet implementation)\n>\n> @Russell I do understand your concerns of monotonism, however I'm having a\n> hard time really coming up with an attack vector. You said \"one can design\n> a wallet to passively take advantage of reorgs by always spending through\n> an OP_BBV that is on the verge of becoming invalid.\" Unless I'm mistaken,\n> this means you would need to send yourself a fresh transaction using OP_BBV\n> set to, say, 2 blocks in the future, then immediately spend that output in\n> a new payment to someone else and hope a reorg happens. Does this mean the\n> theoretical double-spend wallet you are proposing would have to send two\n> transactions every time you make a single payment, doubling the transaction\n> fees and adding more uncertainty around when the second transaction would\n> get confirmed?\n>\n\nAssuming the proposal is rewritten to place the maxheight into the taproot\nannex in order to address the issue with caching of script validity, then\nthis auto-double-spend wallet would send every payment with an annex value\nthat limits the payment to being valid only up to the next block.  If the\npayment doesn't make it into the next block, then resign it with the annex\nincremented to the next block, and repeat.\n\n\n> In a normal double spend scenario, there is no cost to a failed attempt,\n> but much to gain from a success. With your design, there is a real cost to\n> every single attempt (transaction fees) and no evidence that the rate of\n> success would be higher (you still have to bet on the reorg not including\n> your transaction in the first few blocks). It sounds like this new system\n> would actually be less attractive to double spenders than the current model!\n>\n> I also agree with Billy's idea for relay rules. We already have abusable\n> chain rules (e.g. a tx can be included in a block with 0 transaction fee\n> [spam?]) but we add protection with relay rules (e.g. minimum fee to\n> relay). I don't see how this would be any different, if the chain rules\n> only enforced the block height for confirmation and the relay rules forced\n> a minimum OP_BBV value in order to protect against reorg double spends.\n>\n\nThe inclusion of a tx with 0 transaction fee in a block is not in of itself\nan abuse.  There is nothing wrong with blocks containing such\ntransactions.  The *relay* of 0 transaction fee transactions is what is an\nabuse because it allows one to usurp Bitcoin's gossip network for their own\narbitrary communications platform without cost.  Most Bitcoin users aren't\nsigning up for being a usenet provider.  So, by policy, nodes require a\ncost to relay transactions so that broadcasting isn't free. Even when that\nprice is paid to someone else, it still is an effective limitation on abuse.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210611/acb7ba99/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-12T07:59:16",
                "message_text_only": ">  taproot annex\n\n>From what I can tell, the annex is basically additional inputs to a script\nthat might have additional constraints put on it. Is that right? I don't\nquite follow how moving the max height to the annex helps script caching\nhere. I wasn't able to find much information on how the annex is envisioned\nto be used. Would you mind elaborating on how this would work?\n\nAlso, I think the proposal as it stands already addresses script caching\n(in the Transaction Evaluation section\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-evaluation>).\nThe result of the script can be cached as long as the cache item also\ncontains information requiring just the OP_BBV to be re-evaluated (for the\nrelevant block).\n\n> this auto-double-spend wallet would send every payment with an annex value\nthat limits the payment to being valid only up to the next block\n\nOne possible solution to that would be to require that the input to OP_BBV\nto be in the script itself and not originate from the witness.\n\nRegardless, I think the ideal solution is to not have any of these such\nrules if we can simply change the definition for what counts as\nfinalization to account for the fact that BBV transactions mined close to\ntheir expiration. Is there a reason this finalization-redefinition is not\nan adequate solution?\n\nOn Fri, Jun 11, 2021 at 4:44 AM Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Fri, Jun 11, 2021 at 7:12 AM James MacWhyte <macwhyte at gmail.com> wrote:\n>\n>> @Billy I like the idea. It is very obvious how useful an opcode like this\n>> would be! (My background is in wallet implementation)\n>>\n>> @Russell I do understand your concerns of monotonism, however I'm having\n>> a hard time really coming up with an attack vector. You said \"one can\n>> design a wallet to passively take advantage of reorgs by always spending\n>> through an OP_BBV that is on the verge of becoming invalid.\" Unless I'm\n>> mistaken, this means you would need to send yourself a fresh transaction\n>> using OP_BBV set to, say, 2 blocks in the future, then immediately spend\n>> that output in a new payment to someone else and hope a reorg happens. Does\n>> this mean the theoretical double-spend wallet you are proposing would have\n>> to send two transactions every time you make a single payment, doubling the\n>> transaction fees and adding more uncertainty around when the second\n>> transaction would get confirmed?\n>>\n>\n> Assuming the proposal is rewritten to place the maxheight into the taproot\n> annex in order to address the issue with caching of script validity, then\n> this auto-double-spend wallet would send every payment with an annex value\n> that limits the payment to being valid only up to the next block.  If the\n> payment doesn't make it into the next block, then resign it with the annex\n> incremented to the next block, and repeat.\n>\n>\n>> In a normal double spend scenario, there is no cost to a failed attempt,\n>> but much to gain from a success. With your design, there is a real cost to\n>> every single attempt (transaction fees) and no evidence that the rate of\n>> success would be higher (you still have to bet on the reorg not including\n>> your transaction in the first few blocks). It sounds like this new system\n>> would actually be less attractive to double spenders than the current model!\n>>\n>> I also agree with Billy's idea for relay rules. We already have abusable\n>> chain rules (e.g. a tx can be included in a block with 0 transaction fee\n>> [spam?]) but we add protection with relay rules (e.g. minimum fee to\n>> relay). I don't see how this would be any different, if the chain rules\n>> only enforced the block height for confirmation and the relay rules forced\n>> a minimum OP_BBV value in order to protect against reorg double spends.\n>>\n>\n> The inclusion of a tx with 0 transaction fee in a block is not in of\n> itself an abuse.  There is nothing wrong with blocks containing such\n> transactions.  The *relay* of 0 transaction fee transactions is what is an\n> abuse because it allows one to usurp Bitcoin's gossip network for their own\n> arbitrary communications platform without cost.  Most Bitcoin users aren't\n> signing up for being a usenet provider.  So, by policy, nodes require a\n> cost to relay transactions so that broadcasting isn't free. Even when that\n> price is paid to someone else, it still is an effective limitation on abuse.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210612/806a5e13/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-06-12T15:58:29",
                "message_text_only": "On Sat, Jun 12, 2021 at 3:59 AM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n> >  taproot annex\n>\n> From what I can tell, the annex is basically additional inputs to a script\n> that might have additional constraints put on it. Is that right? I don't\n> quite follow how moving the max height to the annex helps script caching\n> here. I wasn't able to find much information on how the annex is envisioned\n> to be used. Would you mind elaborating on how this would work?\n>\n> Also, I think the proposal as it stands already addresses script caching\n> (in the Transaction Evaluation section\n> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-evaluation>).\n> The result of the script can be cached as long as the cache item also\n> contains information requiring just the OP_BBV to be re-evaluated (for the\n> relevant block).\n>\n\nThe normal approach for this problem would be a design that adds an \"annex\nfield\" (where the details on how to delimit annex fields is not yet\nstandardized) for a maxheight value, and add a consensus rule that\ntransaction with one (or more?) maxheight fields are invalid in blocks\nwhose height exceeds this (or any) maxheight value.  Then you could/would\nadd an OP code to push a copy of the (smallest) maxheight value from the\nannex onto the stack or maybe an opcode to compare a stack item with this\n(every) maxheight value from the annex.  This indirection is how OP_CLTV\nand OP_CSV work and this indirection makes script validity cacheable\nbecause script remains a function of the transaction data only.  Since\ntransaction data doesn't change, neither does the outcome of script\nevaluation. The rule that invalidates late transactions looks only at the\nannex and is independent of any script evaluation considerations.\n\n\n> > this auto-double-spend wallet would send every payment with an annex value\n> that limits the payment to being valid only up to the next block\n>\n> One possible solution to that would be to require that the input to OP_BBV\n> to be in the script itself and not originate from the witness.\n>\n> Regardless, I think the ideal solution is to not have any of these such\n> rules if we can simply change the definition for what counts as\n> finalization to account for the fact that BBV transactions mined close to\n> their expiration. Is there a reason this finalization-redefinition is not\n> an adequate solution?\n>\n\nGenerally speaking, you cannot solve security problems through optional and\ncompletely voluntary transaction relay policy.  I'll just send my\nabout-to-expire transactions directly to miners and they will probably mine\nthem because they are, in fact, valid, and pay fees.  Why wouldn't they\nmine it?\n\n(Yes, I know this logic also applies to RBF flagged transactions.  Indeed,\nyou cannot rely on an RBF flag to prevent double spending,  Yes I think the\nRBF flag ought to be removed from consideration and every transaction\nshould be considered RBFable.  Maybe that even happens to be my own node's\nrelay policy.)\n\nI apologize, but I don't think I have further time to engage in an idea\nthat I don't consider likely to achieve broad community support.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210612/b68c365f/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-12T18:48:24",
                "message_text_only": ">  I'll just send my about-to-expire transactions directly to miners and\nthey will probably mine them because they are, in fact, valid, and pay\nfees.  Why wouldn't they mine it?\n\nYou've misunderstood me. When I said \"change what counts as finalization\",\nwhat I meant is for the receiver of coins, not for mining or relay. For\nexample, if you buy coffee with an OP_BBV output that expires in the next\nblock, the merchant will be able to see that there's one confirmation on\nyour transaction. But they should also be able to see a warning saying that\nthe transaction has not finalized and they must wait for 6 confirmations\nbefore treating payment as complete. This way, in the case that a reorg\nhappens and it doesn't contain the transaction, the merchant will not have\ngiven the coffee yet, and their software will be able to tell them that the\npayment has been reversed.\n\n> I think the RBF flag ought to be removed from consideration and every\ntransaction should be considered RBFable\n\nI agree with that. Making the assumption that a non-RBF transaction won't\nbe replaced isn't a great assumption.\n\n> This indirection is how OP_CLTV and OP_CSV work\n\nI see. Thanks for the explanation.\n\n\nOn Sat, Jun 12, 2021 at 8:58 AM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n>\n> On Sat, Jun 12, 2021 at 3:59 AM Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n>\n>> >  taproot annex\n>>\n>> From what I can tell, the annex is basically additional inputs to a\n>> script that might have additional constraints put on it. Is that right? I\n>> don't quite follow how moving the max height to the annex helps script\n>> caching here. I wasn't able to find much information on how the annex is\n>> envisioned to be used. Would you mind elaborating on how this would work?\n>>\n>> Also, I think the proposal as it stands already addresses script caching\n>> (in the Transaction Evaluation section\n>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-evaluation>).\n>> The result of the script can be cached as long as the cache item also\n>> contains information requiring just the OP_BBV to be re-evaluated (for the\n>> relevant block).\n>>\n>\n> The normal approach for this problem would be a design that adds an \"annex\n> field\" (where the details on how to delimit annex fields is not yet\n> standardized) for a maxheight value, and add a consensus rule that\n> transaction with one (or more?) maxheight fields are invalid in blocks\n> whose height exceeds this (or any) maxheight value.  Then you could/would\n> add an OP code to push a copy of the (smallest) maxheight value from the\n> annex onto the stack or maybe an opcode to compare a stack item with this\n> (every) maxheight value from the annex.  This indirection is how OP_CLTV\n> and OP_CSV work and this indirection makes script validity cacheable\n> because script remains a function of the transaction data only.  Since\n> transaction data doesn't change, neither does the outcome of script\n> evaluation. The rule that invalidates late transactions looks only at the\n> annex and is independent of any script evaluation considerations.\n>\n>\n>> > this auto-double-spend wallet would send every payment with an annex value\n>> that limits the payment to being valid only up to the next block\n>>\n>> One possible solution to that would be to require that the input to\n>> OP_BBV to be in the script itself and not originate from the witness.\n>>\n>> Regardless, I think the ideal solution is to not have any of these such\n>> rules if we can simply change the definition for what counts as\n>> finalization to account for the fact that BBV transactions mined close to\n>> their expiration. Is there a reason this finalization-redefinition is not\n>> an adequate solution?\n>>\n>\n> Generally speaking, you cannot solve security problems through optional\n> and completely voluntary transaction relay policy.  I'll just send my\n> about-to-expire transactions directly to miners and they will probably mine\n> them because they are, in fact, valid, and pay fees.  Why wouldn't they\n> mine it?\n>\n> (Yes, I know this logic also applies to RBF flagged transactions.  Indeed,\n> you cannot rely on an RBF flag to prevent double spending,  Yes I think the\n> RBF flag ought to be removed from consideration and every transaction\n> should be considered RBFable.  Maybe that even happens to be my own node's\n> relay policy.)\n>\n> I apologize, but I don't think I have further time to engage in an idea\n> that I don't consider likely to achieve broad community support.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210612/13deadcf/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-13T22:12:21",
                "message_text_only": "I've thought of a third mitigation I think might be sufficient for you,\nRussell, even if neither changing what receivers of coins define as a\nfinalized transaction nor disallowing block height from be specified by the\nscript witness are not sufficient for some reason.\n\nConsider a rule increasing the weight of a transaction using OP_BBV by 1%\nfor each block within 100 blocks that the transaction is mined into. Eg, if\na spend-path using OP_BBV is mined into a block that is greater than 100\nblocks before the expiry, no additional weight is added, if the block is\nexactly 100 blocks from expiry the weight is increased by 1%, if the block\nis 6 blocks away from expiry the weight is 2.54 times as large (1.01^94),\netc. This way, if someone tried to program the passive auto-double-spend\nwallet, they'd have to spend over 2 times as much in fees as they would\notherwise. Also, since the increase in weight is only about 6% over the\nspan of 6 blocks, that is unlikely to affect the transaction's\nprofitability to mine much, so it would be ineffective to program the\nauto-double-spend wallet to simply send transactions that expire within 101\nblocks, because miners would highly likely still mine in that transaction\nin subsequent blocks during a reorg.\n\nIn any case, I see 3 different solutions to the attack vector you brought\nup (modifying receiver finalization definition, disallowing inputs to the\nscript to determine block height, and gradual transaction weight increase\nnear expiry). Any one of them seems to solve the problem you presented.\n\nOn Sat, Jun 12, 2021 at 11:48 AM Billy Tetrud <billy.tetrud at gmail.com>\nwrote:\n\n> >  I'll just send my about-to-expire transactions directly to miners and\n> they will probably mine them because they are, in fact, valid, and pay\n> fees.  Why wouldn't they mine it?\n>\n> You've misunderstood me. When I said \"change what counts as finalization\",\n> what I meant is for the receiver of coins, not for mining or relay. For\n> example, if you buy coffee with an OP_BBV output that expires in the next\n> block, the merchant will be able to see that there's one confirmation on\n> your transaction. But they should also be able to see a warning saying that\n> the transaction has not finalized and they must wait for 6 confirmations\n> before treating payment as complete. This way, in the case that a reorg\n> happens and it doesn't contain the transaction, the merchant will not have\n> given the coffee yet, and their software will be able to tell them that the\n> payment has been reversed.\n>\n> > I think the RBF flag ought to be removed from consideration and every\n> transaction should be considered RBFable\n>\n> I agree with that. Making the assumption that a non-RBF transaction won't\n> be replaced isn't a great assumption.\n>\n> > This indirection is how OP_CLTV and OP_CSV work\n>\n> I see. Thanks for the explanation.\n>\n>\n> On Sat, Jun 12, 2021 at 8:58 AM Russell O'Connor <roconnor at blockstream.com>\n> wrote:\n>\n>>\n>> On Sat, Jun 12, 2021 at 3:59 AM Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>>\n>>> >  taproot annex\n>>>\n>>> From what I can tell, the annex is basically additional inputs to a\n>>> script that might have additional constraints put on it. Is that right? I\n>>> don't quite follow how moving the max height to the annex helps script\n>>> caching here. I wasn't able to find much information on how the annex is\n>>> envisioned to be used. Would you mind elaborating on how this would work?\n>>>\n>>> Also, I think the proposal as it stands already addresses script caching\n>>> (in the Transaction Evaluation section\n>>> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/bbv/bip-beforeblockverify.md#transaction-evaluation>).\n>>> The result of the script can be cached as long as the cache item also\n>>> contains information requiring just the OP_BBV to be re-evaluated (for the\n>>> relevant block).\n>>>\n>>\n>> The normal approach for this problem would be a design that adds an\n>> \"annex field\" (where the details on how to delimit annex fields is not yet\n>> standardized) for a maxheight value, and add a consensus rule that\n>> transaction with one (or more?) maxheight fields are invalid in blocks\n>> whose height exceeds this (or any) maxheight value.  Then you could/would\n>> add an OP code to push a copy of the (smallest) maxheight value from the\n>> annex onto the stack or maybe an opcode to compare a stack item with this\n>> (every) maxheight value from the annex.  This indirection is how OP_CLTV\n>> and OP_CSV work and this indirection makes script validity cacheable\n>> because script remains a function of the transaction data only.  Since\n>> transaction data doesn't change, neither does the outcome of script\n>> evaluation. The rule that invalidates late transactions looks only at the\n>> annex and is independent of any script evaluation considerations.\n>>\n>>\n>>> > this auto-double-spend wallet would send every payment with an annex value\n>>> that limits the payment to being valid only up to the next block\n>>>\n>>> One possible solution to that would be to require that the input to\n>>> OP_BBV to be in the script itself and not originate from the witness.\n>>>\n>>> Regardless, I think the ideal solution is to not have any of these such\n>>> rules if we can simply change the definition for what counts as\n>>> finalization to account for the fact that BBV transactions mined close to\n>>> their expiration. Is there a reason this finalization-redefinition is not\n>>> an adequate solution?\n>>>\n>>\n>> Generally speaking, you cannot solve security problems through optional\n>> and completely voluntary transaction relay policy.  I'll just send my\n>> about-to-expire transactions directly to miners and they will probably mine\n>> them because they are, in fact, valid, and pay fees.  Why wouldn't they\n>> mine it?\n>>\n>> (Yes, I know this logic also applies to RBF flagged transactions.\n>> Indeed, you cannot rely on an RBF flag to prevent double spending,  Yes I\n>> think the RBF flag ought to be removed from consideration and every\n>> transaction should be considered RBFable.  Maybe that even happens to be my\n>> own node's relay policy.)\n>>\n>> I apologize, but I don't think I have further time to engage in an idea\n>> that I don't consider likely to achieve broad community support.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210613/c5131f01/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "OP_BEFOREBLOCKVERIFY - discussing and opcode that invalidates a spend path after a certain block",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Russell O'Connor",
                "Billy Tetrud",
                "James MacWhyte"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 63697
        }
    },
    {
        "title": "[bitcoin-dev] BIP118 confusion / SIGHASH_NOINPUT is now SIGHASH_ANYPREVOUT (i think)",
        "thread_messages": [
            {
                "author": "Ryan Grant",
                "date": "2021-06-12T19:52:45",
                "message_text_only": "Hi,\n\nI have detected some definite confusion among people who are not aware\nof the most recent updates to the bip118 draft.  I don't know if\nthat's common among readers of these lists.\n\nSubstantial edits to the bip118 draft were made through May 2019,\nincluding changing its official name to SIGHASH_ANYPREVOUT.  The\ninternal heading \"Revisions\" discusses these changes.\n\n  https://github.com/ajtowns/bips/blob/c7c6a58b7a66a5dc5f4435319577d26a34082a79/bip-0118.mediawiki#Revisions\n  https://github.com/ajtowns/bips/compare/master...ajtowns:bip-anyprevout\n  https://github.com/ajtowns/bips/blob/c7c6a58b7a66a5dc5f4435319577d26a34082a79/bip-0118.mediawiki\n\nThe version in bitcoin/bips was not modified since 2018, until it\ndiverged by collecting a minor fix two months ago.  It still uses\nSIGHASH_NOINPUT terminology.\n\n  https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki\n\nAFAICT, with taproot activating, the preferred method to ease\nlightning network client state requirements will now definitely be\nSIGHASH_ANYPREVOUT.\n\nI am not aware of reasons for bip118's updated draft to sit on the\nsidelines before consideration by a wider audience."
            },
            {
                "author": "Ryan Grant",
                "date": "2021-06-12T20:56:55",
                "message_text_only": "Apologies, I found the discussion going on here:\n  https://github.com/bitcoin/bips/pull/943\n\nOn Sat, Jun 12, 2021 at 7:52 PM Ryan Grant <bitcoin-dev at rgrant.org> wrote:\n>\n> Hi,\n>\n> I have detected some definite confusion among people who are not aware\n> of the most recent updates to the bip118 draft.  I don't know if\n> that's common among readers of these lists.\n>\n> Substantial edits to the bip118 draft were made through May 2019,\n> including changing its official name to SIGHASH_ANYPREVOUT.  The\n> internal heading \"Revisions\" discusses these changes.\n>\n>   https://github.com/ajtowns/bips/blob/c7c6a58b7a66a5dc5f4435319577d26a34082a79/bip-0118.mediawiki#Revisions\n>   https://github.com/ajtowns/bips/compare/master...ajtowns:bip-anyprevout\n>   https://github.com/ajtowns/bips/blob/c7c6a58b7a66a5dc5f4435319577d26a34082a79/bip-0118.mediawiki\n>\n> The version in bitcoin/bips was not modified since 2018, until it\n> diverged by collecting a minor fix two months ago.  It still uses\n> SIGHASH_NOINPUT terminology.\n>\n>   https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki\n>\n> AFAICT, with taproot activating, the preferred method to ease\n> lightning network client state requirements will now definitely be\n> SIGHASH_ANYPREVOUT.\n>\n> I am not aware of reasons for bip118's updated draft to sit on the\n> sidelines before consideration by a wider audience."
            }
        ],
        "thread_summary": {
            "title": "BIP118 confusion / SIGHASH_NOINPUT is now SIGHASH_ANYPREVOUT (i think)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2520
        }
    },
    {
        "title": "[bitcoin-dev] Reminder: Transaction relay workshop on IRC Libera - Tuesday 15th June 19:00 UTC",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-06-14T14:41:21",
                "message_text_only": "Hi,\n\nA short reminder about the 1st transaction relay workshop happening\ntomorrow on #l2-onchain-support Libera chat (!), Tuesday 15th June, from\n19:00 UTC to 20:30 UTC\n\nScheduled topics are:\n* \"Guidelines about L2 protocols onchain security design\"\n* \"Coordinated cross-layers security disclosures\"\n* \"Full-RBF proposal\"\n\nFind notes and open questions for the two first topics here:\n* https://github.com/ariard/L2-zoology/blob/master/workshops/guidelines.md\n* https://github.com/ariard/L2-zoology/blob/master/workshops/coordinated.md\n\nGoing to send the \"Move toward full-rbf\" proposal soon, deserves its own\nthread. Workshops will stick to a socratic format to foster as much\nknowledge sharing among attendees and ideally we'll reach rough consensus\nabout expected goals.\n\nIf you're a second-layer protocol designer, a Lightning dev, a Bitcoin Core\ndev contributing around mempool/p2p areas, or a Bitcoin service operator\nwith intense usage of the mempool, I hope you'll find those workshops of\ninterest and you'll learn a lot :)\n\nAgain it's happening on Libera, not Freenode, contrary to the former mail\nabout agenda & schedule.\n\nCheers,\nAntoine\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210614/1f62de80/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reminder: Transaction relay workshop on IRC Libera - Tuesday 15th June 19:00 UTC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1330
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Full-RBF in Bitcoin Core 24.0",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-06-15T16:55:14",
                "message_text_only": "Hi,\n\nI'm writing to propose deprecation of opt-in RBF in favor of full-RBF as\nthe Bitcoin Core's default replacement policy in version 24.0. As a\nreminder, the next release is 22.0, aimed for August 1st, assuming\nagreement is reached, this policy change would enter into deployment phase\na year from now.\n\nEven if this replacement policy has been deemed as highly controversial a\nfew years ago, ongoing and anticipated changes in the Bitcoin ecosystem are\nmotivating this proposal.\n\n# RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n\nAs explained in \"On Mempool Funny Games against Multi-Party Funded\nTransactions'', 2nd issue [0], an attacker can easily DoS a multi-party\nfunded transactions by propagating an RBF opt-out double-spend of its\ncontributed input before the honest transaction is broadcasted by the\nprotocol orchester. DoSes are qualified in the sense of either an attacker\nwasting timevalue of victim's inputs or forcing exhaustion of the\nfee-bumping  reserve.\n\nThis affects a series of Bitcoin protocols such as Coinjoin, onchain DLCs\nand dual-funded LN channels. As those protocols are still in the early\nphase of deployment, it doesn't seem to have been executed in the wild for\nnow.  That said, considering that dual-funded are more efficient from a\nliquidity standpoint, we can expect them to be widely relied on, once\nLightning enters in a more mature phase. At that point, it should become\neconomically rational for liquidity service providers to launch those DoS\nattacks against their competitors to hijack user traffic.\n\nBeyond that, presence of those DoSes will complicate the design and\ndeployment of multi-party Bitcoin protocols such as payment\npools/multi-party channels. Note, Lightning Pool isn't affected as there is\na preliminary stage where batch participants are locked-in their funds\nwithin an account witnessScript shared with the orchestrer.\n\nOf course, even assuming full-rbf, propagation of the multi-party funded\ntransactions can still be interfered with by an attacker, simply\nbroadcasting a double-spend with a feerate equivalent to the honest\ntransaction. However, it tightens the attack scenario to a scorched earth\napproach, where the attacker has to commit equivalent fee-bumping reserve\nto maintain the pinning and might lose the \"competing\" fees to miners.\n\n# RBF opt-out as a Mempools Partitions Vector\n\nA longer-term issue is the risk of mempools malicious partitions, where an\nattacker exploits network topology or divergence in mempools policies to\npartition network mempools in different subsets. From then a wide range of\nattacks can be envisioned such as package pinning [1], artificial\ncongestion to provoke LN channels closure or manipulation of\nfee-estimator's feerate (the Core's one wouldn't be affected as it relies\non block confirmation, though other fee estimators designs deployed across\nthe ecosystem are likely going to be affected).\n\nTraditionally, mempools partitions have been gauged as a spontaneous\noutcome of a distributed systems like Bitcoin p2p network and I'm not aware\nit has been studied in-depth for adversarial purposes. Though, deployment\nof second-layer\nprotocols, heavily relying on sanity of a local mempool for fee-estimation\nand robust propagation of their time-sensitive transactions might lead to\nreconsider this position. Acknowledging this, RBF opt-out is a low-cost\npartitioning tool, of which the existence nullifies most of potential\nprogresses to mitigate malicious partitioning.\n\n\nTo resume, opt-in RBF doesn't suit well deployment of robust second-layers\nprotocol, even if those issues are still early and deserve more research.\nAt the same time, I believe a meaningful subset of the ecosystem  are still\nrelying\non 0-confs transactions, even if their security is relying on far weaker\nassumptions (opt-in RBF rule is a policy rule, not a consensus one) [2] A\nrapid change of Core's mempool rules would be harming their quality of\nservices and should be\nweighed carefully. On the other hand, it would be great to nudge them\ntowards more secure handling of their 0-confs flows [3]\n\nLet's examine what could be deployed ecosystem-wise as enhancements to the\n0-confs security model.\n\n# Proactive security models : Double-spend Monitoring/Receiver-side\nFee-Topping with Package Relay\n\n>From an attacker viewpoint, opt-in RBF isn't a big blocker to successful\ndouble-spends. Any motivated attacker can modify Core to mass-connect to a\nwide portion of the network, announce txA to this subset, announce txA' to\nthe\nmerchant. TxA' propagation will be encumbered by the privacy-preserving\ninventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\nattacker has no care to respect.\n\nTo detect a successful double-spend attempt, a Bitcoin service should run\nfew full-nodes with well-spread connection graphs and unlinkable between\nthem, to avoid being identified then maliciously partitioned from the rest\nof the network.\n\nI believe this tactic is already deployed by few Bitcoin services, and even\none can throw flame at it because it over consumes network resources\n(bandwidth, connection slots, ...), it does procure a security advantage to\nthe ones doing it.\n\nOne further improvement on top of this protection could be to react after\nthe double-spend detection by attaching a CPFP to the merchant transaction,\nwith a higher package feerate than the double-spend. Expected deployment of\npackage-relay as a p2p mechanism/mempool policy in Bitcoin Core should\nenable it to do so.\n\n# Reactive security models : EconomicReputation-based Compensations\n\nAnother approach could be to react after the fact if a double-spend has\nbeen qualified. If the sender is already known to the service provider, the\nservice account can be slashed.  If the sender is a low-trusted\ncounterparty to the merchant, \"side-trust\" models could be relied on. For\ne.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\ncertificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\nbut I foresee those trust-minimized, decentralized solutions being adopted\nby the LN ecosystem to patch the risks when you enter in a channel/HTLC\noperation with an anonymous counterparty.\n\nWhat other cool new tools could be considered to enhance 0-confs security ?\n\nTo conclude, let's avoid replaying the contentious threads of a few years\nago. What this new thread highlights is the fact that a transaction\nrelay/mempool acceptance policy might be beneficial to some class of\nalready-deployed\nBitcoin applications while being detrimental to newer ones. How do we\npreserve the current interests of 0-confs users while enabling upcoming\ninterests of fancy L2s to flourish is a good conversation to have. I think.\n\nIf there is ecosystem agreement on switching to full-RBF, but 0.24 sounds\ntoo early, let's defer it to 0.25 or 0.26. I don't think Core has a\nconsistent deprecation process w.r.t to policy rules heavily relied-on by\nBitcoin users, if we do so let sets a precedent satisfying as many folks as\nwe can.\n\nCheers,\nAntoine\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n\n[1] See scenario 3 :\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n\n[2] https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n\n[3] And the LN ecosystem does have an interest to fix zero-confs security,\nif \"turbo-channels\"-like become normalized for mobile nodes\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210615/7f5bebf7/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-17T00:58:22",
                "message_text_only": "Russel O'Connor recently opined\n<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\nthat RBF should be standard treatment of all transactions, rather than as a\ntransaction opt-in/out. I agree with that. Any configuration in a\ntransaction that has not been committed into a block yet simply can't be\nrelied upon. Miners also have a clear incentive to ignore RBF rules and\nmine anything that passes consensus. At best opting out of RBF is a weak\ndefense, and at worst it's simply a false sense of security that is likely\nto actively lead to theft events.\n\nDo we as a community want to support 0-conf payments in any way at this\npoint? It seems rather silly to make software design decisions to\naccommodate 0-conf payments when there are better mechanisms for fast\npayments (ie lightning).\n\nOne question I have is: how does software generally inform the user about\n0-conf payment detection? Does software generally tell the user something\nalong the lines of \"This payment has not been finalized yet. All recipients\nshould wait until the transaction has at least 1 confirmation, and most\nrecipients should wait for 6 confirmations\" ? I think unless we pressure\nsoftware to be very explicit about what counts as finality, users will\nsimply continue to do what they've always done. Rolling out this policy\nchange over the course of a year or two seems fine, no need to rush. But I\nsuppose it would depend on how often 0-conf is used in the bitcoin\necosystem at this point, which I don't have any data on.\n\nOn Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF as\n> the Bitcoin Core's default replacement policy in version 24.0. As a\n> reminder, the next release is 22.0, aimed for August 1st, assuming\n> agreement is reached, this policy change would enter into deployment phase\n> a year from now.\n>\n> Even if this replacement policy has been deemed as highly controversial a\n> few years ago, ongoing and anticipated changes in the Bitcoin ecosystem are\n> motivating this proposal.\n>\n> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>\n> As explained in \"On Mempool Funny Games against Multi-Party Funded\n> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n> funded transactions by propagating an RBF opt-out double-spend of its\n> contributed input before the honest transaction is broadcasted by the\n> protocol orchester. DoSes are qualified in the sense of either an attacker\n> wasting timevalue of victim's inputs or forcing exhaustion of the\n> fee-bumping  reserve.\n>\n> This affects a series of Bitcoin protocols such as Coinjoin, onchain DLCs\n> and dual-funded LN channels. As those protocols are still in the early\n> phase of deployment, it doesn't seem to have been executed in the wild for\n> now.  That said, considering that dual-funded are more efficient from a\n> liquidity standpoint, we can expect them to be widely relied on, once\n> Lightning enters in a more mature phase. At that point, it should become\n> economically rational for liquidity service providers to launch those DoS\n> attacks against their competitors to hijack user traffic.\n>\n> Beyond that, presence of those DoSes will complicate the design and\n> deployment of multi-party Bitcoin protocols such as payment\n> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n> a preliminary stage where batch participants are locked-in their funds\n> within an account witnessScript shared with the orchestrer.\n>\n> Of course, even assuming full-rbf, propagation of the multi-party funded\n> transactions can still be interfered with by an attacker, simply\n> broadcasting a double-spend with a feerate equivalent to the honest\n> transaction. However, it tightens the attack scenario to a scorched earth\n> approach, where the attacker has to commit equivalent fee-bumping reserve\n> to maintain the pinning and might lose the \"competing\" fees to miners.\n>\n> # RBF opt-out as a Mempools Partitions Vector\n>\n> A longer-term issue is the risk of mempools malicious partitions, where an\n> attacker exploits network topology or divergence in mempools policies to\n> partition network mempools in different subsets. From then a wide range of\n> attacks can be envisioned such as package pinning [1], artificial\n> congestion to provoke LN channels closure or manipulation of\n> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n> on block confirmation, though other fee estimators designs deployed across\n> the ecosystem are likely going to be affected).\n>\n> Traditionally, mempools partitions have been gauged as a spontaneous\n> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n> it has been studied in-depth for adversarial purposes. Though, deployment\n> of second-layer\n> protocols, heavily relying on sanity of a local mempool for fee-estimation\n> and robust propagation of their time-sensitive transactions might lead to\n> reconsider this position. Acknowledging this, RBF opt-out is a low-cost\n> partitioning tool, of which the existence nullifies most of potential\n> progresses to mitigate malicious partitioning.\n>\n>\n> To resume, opt-in RBF doesn't suit well deployment of robust second-layers\n> protocol, even if those issues are still early and deserve more research.\n> At the same time, I believe a meaningful subset of the ecosystem  are still\n> relying\n> on 0-confs transactions, even if their security is relying on far weaker\n> assumptions (opt-in RBF rule is a policy rule, not a consensus one) [2] A\n> rapid change of Core's mempool rules would be harming their quality of\n> services and should be\n> weighed carefully. On the other hand, it would be great to nudge them\n> towards more secure handling of their 0-confs flows [3]\n>\n> Let's examine what could be deployed ecosystem-wise as enhancements to the\n> 0-confs security model.\n>\n> # Proactive security models : Double-spend Monitoring/Receiver-side\n> Fee-Topping with Package Relay\n>\n> From an attacker viewpoint, opt-in RBF isn't a big blocker to successful\n> double-spends. Any motivated attacker can modify Core to mass-connect to a\n> wide portion of the network, announce txA to this subset, announce txA' to\n> the\n> merchant. TxA' propagation will be encumbered by the privacy-preserving\n> inventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\n> attacker has no care to respect.\n>\n> To detect a successful double-spend attempt, a Bitcoin service should run\n> few full-nodes with well-spread connection graphs and unlinkable between\n> them, to avoid being identified then maliciously partitioned from the rest\n> of the network.\n>\n> I believe this tactic is already deployed by few Bitcoin services, and\n> even one can throw flame at it because it over consumes network resources\n> (bandwidth, connection slots, ...), it does procure a security advantage to\n> the ones doing it.\n>\n> One further improvement on top of this protection could be to react after\n> the double-spend detection by attaching a CPFP to the merchant transaction,\n> with a higher package feerate than the double-spend. Expected deployment of\n> package-relay as a p2p mechanism/mempool policy in Bitcoin Core should\n> enable it to do so.\n>\n> # Reactive security models : EconomicReputation-based Compensations\n>\n> Another approach could be to react after the fact if a double-spend has\n> been qualified. If the sender is already known to the service provider, the\n> service account can be slashed.  If the sender is a low-trusted\n> counterparty to the merchant, \"side-trust\" models could be relied on. For\n> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n> but I foresee those trust-minimized, decentralized solutions being adopted\n> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n> operation with an anonymous counterparty.\n>\n> What other cool new tools could be considered to enhance 0-confs security ?\n>\n> To conclude, let's avoid replaying the contentious threads of a few years\n> ago. What this new thread highlights is the fact that a transaction\n> relay/mempool acceptance policy might be beneficial to some class of\n> already-deployed\n> Bitcoin applications while being detrimental to newer ones. How do we\n> preserve the current interests of 0-confs users while enabling upcoming\n> interests of fancy L2s to flourish is a good conversation to have. I think.\n>\n> If there is ecosystem agreement on switching to full-RBF, but 0.24 sounds\n> too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n> consistent deprecation process w.r.t to policy rules heavily relied-on by\n> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n> we can.\n>\n> Cheers,\n> Antoine\n>\n> [0]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>\n> [1] See scenario 3 :\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>\n> [2] https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>\n> [3] And the LN ecosystem does have an interest to fix zero-confs security,\n> if \"turbo-channels\"-like become normalized for mobile nodes\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210616/4edd69f7/attachment-0001.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2021-06-17T22:28:45",
                "message_text_only": "Transaction analysis tools do take the signal into account, but I'm unsure\nif retail, non-custodial wallets use this information.\n\nHistorically the biggest pushback has been from services like Bitrefill\nwhich have had quite a bit of success with 0-conf payments, but perhaps LN\nadoption is at a point where it's less of an impact?\n\nOn Fri, Jun 18, 2021 at 4:15 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Russel O'Connor recently opined\n> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n> that RBF should be standard treatment of all transactions, rather than as a\n> transaction opt-in/out. I agree with that. Any configuration in a\n> transaction that has not been committed into a block yet simply can't be\n> relied upon. Miners also have a clear incentive to ignore RBF rules and\n> mine anything that passes consensus. At best opting out of RBF is a weak\n> defense, and at worst it's simply a false sense of security that is likely\n> to actively lead to theft events.\n>\n> Do we as a community want to support 0-conf payments in any way at this\n> point? It seems rather silly to make software design decisions to\n> accommodate 0-conf payments when there are better mechanisms for fast\n> payments (ie lightning).\n>\n> One question I have is: how does software generally inform the user about\n> 0-conf payment detection? Does software generally tell the user something\n> along the lines of \"This payment has not been finalized yet. All recipients\n> should wait until the transaction has at least 1 confirmation, and most\n> recipients should wait for 6 confirmations\" ? I think unless we pressure\n> software to be very explicit about what counts as finality, users will\n> simply continue to do what they've always done. Rolling out this policy\n> change over the course of a year or two seems fine, no need to rush. But I\n> suppose it would depend on how often 0-conf is used in the bitcoin\n> ecosystem at this point, which I don't have any data on.\n>\n> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi,\n>>\n>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF as\n>> the Bitcoin Core's default replacement policy in version 24.0. As a\n>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>> agreement is reached, this policy change would enter into deployment phase\n>> a year from now.\n>>\n>> Even if this replacement policy has been deemed as highly controversial a\n>> few years ago, ongoing and anticipated changes in the Bitcoin ecosystem are\n>> motivating this proposal.\n>>\n>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>\n>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>> funded transactions by propagating an RBF opt-out double-spend of its\n>> contributed input before the honest transaction is broadcasted by the\n>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>> fee-bumping  reserve.\n>>\n>> This affects a series of Bitcoin protocols such as Coinjoin, onchain DLCs\n>> and dual-funded LN channels. As those protocols are still in the early\n>> phase of deployment, it doesn't seem to have been executed in the wild for\n>> now.  That said, considering that dual-funded are more efficient from a\n>> liquidity standpoint, we can expect them to be widely relied on, once\n>> Lightning enters in a more mature phase. At that point, it should become\n>> economically rational for liquidity service providers to launch those DoS\n>> attacks against their competitors to hijack user traffic.\n>>\n>> Beyond that, presence of those DoSes will complicate the design and\n>> deployment of multi-party Bitcoin protocols such as payment\n>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>> a preliminary stage where batch participants are locked-in their funds\n>> within an account witnessScript shared with the orchestrer.\n>>\n>> Of course, even assuming full-rbf, propagation of the multi-party funded\n>> transactions can still be interfered with by an attacker, simply\n>> broadcasting a double-spend with a feerate equivalent to the honest\n>> transaction. However, it tightens the attack scenario to a scorched earth\n>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>\n>> # RBF opt-out as a Mempools Partitions Vector\n>>\n>> A longer-term issue is the risk of mempools malicious partitions, where\n>> an attacker exploits network topology or divergence in mempools policies to\n>> partition network mempools in different subsets. From then a wide range of\n>> attacks can be envisioned such as package pinning [1], artificial\n>> congestion to provoke LN channels closure or manipulation of\n>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>> on block confirmation, though other fee estimators designs deployed across\n>> the ecosystem are likely going to be affected).\n>>\n>> Traditionally, mempools partitions have been gauged as a spontaneous\n>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>> it has been studied in-depth for adversarial purposes. Though, deployment\n>> of second-layer\n>> protocols, heavily relying on sanity of a local mempool for\n>> fee-estimation and robust propagation of their time-sensitive transactions\n>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>> a low-cost partitioning tool, of which the existence nullifies most of\n>> potential progresses to mitigate malicious partitioning.\n>>\n>>\n>> To resume, opt-in RBF doesn't suit well deployment of robust\n>> second-layers protocol, even if those issues are still early and deserve\n>> more research. At the same time, I believe a meaningful subset of the\n>> ecosystem  are still relying\n>> on 0-confs transactions, even if their security is relying on far weaker\n>> assumptions (opt-in RBF rule is a policy rule, not a consensus one) [2] A\n>> rapid change of Core's mempool rules would be harming their quality of\n>> services and should be\n>> weighed carefully. On the other hand, it would be great to nudge them\n>> towards more secure handling of their 0-confs flows [3]\n>>\n>> Let's examine what could be deployed ecosystem-wise as enhancements to\n>> the 0-confs security model.\n>>\n>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>> Fee-Topping with Package Relay\n>>\n>> From an attacker viewpoint, opt-in RBF isn't a big blocker to successful\n>> double-spends. Any motivated attacker can modify Core to mass-connect to a\n>> wide portion of the network, announce txA to this subset, announce txA' to\n>> the\n>> merchant. TxA' propagation will be encumbered by the privacy-preserving\n>> inventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\n>> attacker has no care to respect.\n>>\n>> To detect a successful double-spend attempt, a Bitcoin service should run\n>> few full-nodes with well-spread connection graphs and unlinkable between\n>> them, to avoid being identified then maliciously partitioned from the rest\n>> of the network.\n>>\n>> I believe this tactic is already deployed by few Bitcoin services, and\n>> even one can throw flame at it because it over consumes network resources\n>> (bandwidth, connection slots, ...), it does procure a security advantage to\n>> the ones doing it.\n>>\n>> One further improvement on top of this protection could be to react after\n>> the double-spend detection by attaching a CPFP to the merchant transaction,\n>> with a higher package feerate than the double-spend. Expected deployment of\n>> package-relay as a p2p mechanism/mempool policy in Bitcoin Core should\n>> enable it to do so.\n>>\n>> # Reactive security models : EconomicReputation-based Compensations\n>>\n>> Another approach could be to react after the fact if a double-spend has\n>> been qualified. If the sender is already known to the service provider, the\n>> service account can be slashed.  If the sender is a low-trusted\n>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>> but I foresee those trust-minimized, decentralized solutions being adopted\n>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>> operation with an anonymous counterparty.\n>>\n>> What other cool new tools could be considered to enhance 0-confs security\n>> ?\n>>\n>> To conclude, let's avoid replaying the contentious threads of a few years\n>> ago. What this new thread highlights is the fact that a transaction\n>> relay/mempool acceptance policy might be beneficial to some class of\n>> already-deployed\n>> Bitcoin applications while being detrimental to newer ones. How do we\n>> preserve the current interests of 0-confs users while enabling upcoming\n>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>\n>> If there is ecosystem agreement on switching to full-RBF, but 0.24 sounds\n>> too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>> we can.\n>>\n>> Cheers,\n>> Antoine\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>\n>> [1] See scenario 3 :\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>\n>> [2] https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>\n>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210618/af3edd6d/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-25T00:23:01",
                "message_text_only": "> Do we as a community want to support 0-conf payments in any way at this\n> point? It seems rather silly to make software design decisions to\n> accommodate 0-conf payments when there are better mechanisms for fast\n> payments (ie lightning).\n\nWell, we have zero-conf LN channels ? Actually, Lightning channel funding\ntransactions should be buried under a few blocks, though few services\nproviders are offering zero-conf channels, where you can start to spend\ninstantly [0]. I believe that's an interesting usage, though IMHO as\nmentioned we can explore different security models to make 0-conf safe\n(reputation/fidelity-bond).\n\n> One question I have is: how does software generally inform the user about\n0-conf payment detection?\n\nYes generally it's something like an \"Unconfirmed\" annotation on incoming\ntxn, though at least this is what Blockstream Green or Electrum are doing.\n\n> But I\nsuppose it would depend on how often 0-conf is used in the bitcoin\necosystem at this point, which I don't have any data on.\n\nThere are few Bitcoin services well-known to rely on 0-conf. Beyond how\nmuch of the Bitcoin traffic is tied to a 0-conf is a hard question, a lot\nof 0-confs service providers are going to be reluctant to share the\ninformation, for a really good reason you will learn a subset of their\nbusiness volumes.\n\nI'll see if I can come up with some Fermi estimation on this front.\n\n[0] https://www.bitrefill.com/thor-turbo-channels/\n\nLe mer. 16 juin 2021 \u00e0 20:58, Billy Tetrud <billy.tetrud at gmail.com> a\n\u00e9crit :\n\n> Russel O'Connor recently opined\n> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n> that RBF should be standard treatment of all transactions, rather than as a\n> transaction opt-in/out. I agree with that. Any configuration in a\n> transaction that has not been committed into a block yet simply can't be\n> relied upon. Miners also have a clear incentive to ignore RBF rules and\n> mine anything that passes consensus. At best opting out of RBF is a weak\n> defense, and at worst it's simply a false sense of security that is likely\n> to actively lead to theft events.\n>\n> Do we as a community want to support 0-conf payments in any way at this\n> point? It seems rather silly to make software design decisions to\n> accommodate 0-conf payments when there are better mechanisms for fast\n> payments (ie lightning).\n>\n> One question I have is: how does software generally inform the user about\n> 0-conf payment detection? Does software generally tell the user something\n> along the lines of \"This payment has not been finalized yet. All recipients\n> should wait until the transaction has at least 1 confirmation, and most\n> recipients should wait for 6 confirmations\" ? I think unless we pressure\n> software to be very explicit about what counts as finality, users will\n> simply continue to do what they've always done. Rolling out this policy\n> change over the course of a year or two seems fine, no need to rush. But I\n> suppose it would depend on how often 0-conf is used in the bitcoin\n> ecosystem at this point, which I don't have any data on.\n>\n> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi,\n>>\n>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF as\n>> the Bitcoin Core's default replacement policy in version 24.0. As a\n>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>> agreement is reached, this policy change would enter into deployment phase\n>> a year from now.\n>>\n>> Even if this replacement policy has been deemed as highly controversial a\n>> few years ago, ongoing and anticipated changes in the Bitcoin ecosystem are\n>> motivating this proposal.\n>>\n>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>\n>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>> funded transactions by propagating an RBF opt-out double-spend of its\n>> contributed input before the honest transaction is broadcasted by the\n>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>> fee-bumping  reserve.\n>>\n>> This affects a series of Bitcoin protocols such as Coinjoin, onchain DLCs\n>> and dual-funded LN channels. As those protocols are still in the early\n>> phase of deployment, it doesn't seem to have been executed in the wild for\n>> now.  That said, considering that dual-funded are more efficient from a\n>> liquidity standpoint, we can expect them to be widely relied on, once\n>> Lightning enters in a more mature phase. At that point, it should become\n>> economically rational for liquidity service providers to launch those DoS\n>> attacks against their competitors to hijack user traffic.\n>>\n>> Beyond that, presence of those DoSes will complicate the design and\n>> deployment of multi-party Bitcoin protocols such as payment\n>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>> a preliminary stage where batch participants are locked-in their funds\n>> within an account witnessScript shared with the orchestrer.\n>>\n>> Of course, even assuming full-rbf, propagation of the multi-party funded\n>> transactions can still be interfered with by an attacker, simply\n>> broadcasting a double-spend with a feerate equivalent to the honest\n>> transaction. However, it tightens the attack scenario to a scorched earth\n>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>\n>> # RBF opt-out as a Mempools Partitions Vector\n>>\n>> A longer-term issue is the risk of mempools malicious partitions, where\n>> an attacker exploits network topology or divergence in mempools policies to\n>> partition network mempools in different subsets. From then a wide range of\n>> attacks can be envisioned such as package pinning [1], artificial\n>> congestion to provoke LN channels closure or manipulation of\n>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>> on block confirmation, though other fee estimators designs deployed across\n>> the ecosystem are likely going to be affected).\n>>\n>> Traditionally, mempools partitions have been gauged as a spontaneous\n>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>> it has been studied in-depth for adversarial purposes. Though, deployment\n>> of second-layer\n>> protocols, heavily relying on sanity of a local mempool for\n>> fee-estimation and robust propagation of their time-sensitive transactions\n>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>> a low-cost partitioning tool, of which the existence nullifies most of\n>> potential progresses to mitigate malicious partitioning.\n>>\n>>\n>> To resume, opt-in RBF doesn't suit well deployment of robust\n>> second-layers protocol, even if those issues are still early and deserve\n>> more research. At the same time, I believe a meaningful subset of the\n>> ecosystem  are still relying\n>> on 0-confs transactions, even if their security is relying on far weaker\n>> assumptions (opt-in RBF rule is a policy rule, not a consensus one) [2] A\n>> rapid change of Core's mempool rules would be harming their quality of\n>> services and should be\n>> weighed carefully. On the other hand, it would be great to nudge them\n>> towards more secure handling of their 0-confs flows [3]\n>>\n>> Let's examine what could be deployed ecosystem-wise as enhancements to\n>> the 0-confs security model.\n>>\n>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>> Fee-Topping with Package Relay\n>>\n>> From an attacker viewpoint, opt-in RBF isn't a big blocker to successful\n>> double-spends. Any motivated attacker can modify Core to mass-connect to a\n>> wide portion of the network, announce txA to this subset, announce txA' to\n>> the\n>> merchant. TxA' propagation will be encumbered by the privacy-preserving\n>> inventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\n>> attacker has no care to respect.\n>>\n>> To detect a successful double-spend attempt, a Bitcoin service should run\n>> few full-nodes with well-spread connection graphs and unlinkable between\n>> them, to avoid being identified then maliciously partitioned from the rest\n>> of the network.\n>>\n>> I believe this tactic is already deployed by few Bitcoin services, and\n>> even one can throw flame at it because it over consumes network resources\n>> (bandwidth, connection slots, ...), it does procure a security advantage to\n>> the ones doing it.\n>>\n>> One further improvement on top of this protection could be to react after\n>> the double-spend detection by attaching a CPFP to the merchant transaction,\n>> with a higher package feerate than the double-spend. Expected deployment of\n>> package-relay as a p2p mechanism/mempool policy in Bitcoin Core should\n>> enable it to do so.\n>>\n>> # Reactive security models : EconomicReputation-based Compensations\n>>\n>> Another approach could be to react after the fact if a double-spend has\n>> been qualified. If the sender is already known to the service provider, the\n>> service account can be slashed.  If the sender is a low-trusted\n>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>> but I foresee those trust-minimized, decentralized solutions being adopted\n>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>> operation with an anonymous counterparty.\n>>\n>> What other cool new tools could be considered to enhance 0-confs security\n>> ?\n>>\n>> To conclude, let's avoid replaying the contentious threads of a few years\n>> ago. What this new thread highlights is the fact that a transaction\n>> relay/mempool acceptance policy might be beneficial to some class of\n>> already-deployed\n>> Bitcoin applications while being detrimental to newer ones. How do we\n>> preserve the current interests of 0-confs users while enabling upcoming\n>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>\n>> If there is ecosystem agreement on switching to full-RBF, but 0.24 sounds\n>> too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>> we can.\n>>\n>> Cheers,\n>> Antoine\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>\n>> [1] See scenario 3 :\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>\n>> [2] https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>\n>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210624/ebea862a/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-26T16:13:23",
                "message_text_only": ">  services providers are offering zero-conf channels, where you can start\nto spend instantly [0]. I believe that's an interesting usage\n\nI agree those are interesting and useful cases. I suppose I should clarify\nthat when I asked if bitcoin should continue supporting 0-conf\ntransactions, I meant: should we make design decisions based on whether it\nmakes raw 0-conf transactions more or less difficult to double spend on? I\ndo think 0-conf transactions can be useful in situations where there is\nsome level of trust (either direct trust between the interacting parties,\nor disperse trust that most people won't try to double spend, perhaps\nbecause the transaction is small or their identity is tied to it). Fidelity\nbonds sound like an interesting way to mitigate sybil attacks in a\nreputation system.\n\nOn Thu, Jun 24, 2021 at 5:23 PM Antoine Riard <antoine.riard at gmail.com>\nwrote:\n\n> > Do we as a community want to support 0-conf payments in any way at this\n> > point? It seems rather silly to make software design decisions to\n> > accommodate 0-conf payments when there are better mechanisms for fast\n> > payments (ie lightning).\n>\n> Well, we have zero-conf LN channels ? Actually, Lightning channel funding\n> transactions should be buried under a few blocks, though few services\n> providers are offering zero-conf channels, where you can start to spend\n> instantly [0]. I believe that's an interesting usage, though IMHO as\n> mentioned we can explore different security models to make 0-conf safe\n> (reputation/fidelity-bond).\n>\n> > One question I have is: how does software generally inform the user about\n> 0-conf payment detection?\n>\n> Yes generally it's something like an \"Unconfirmed\" annotation on incoming\n> txn, though at least this is what Blockstream Green or Electrum are doing.\n>\n> > But I\n> suppose it would depend on how often 0-conf is used in the bitcoin\n> ecosystem at this point, which I don't have any data on.\n>\n> There are few Bitcoin services well-known to rely on 0-conf. Beyond how\n> much of the Bitcoin traffic is tied to a 0-conf is a hard question, a lot\n> of 0-confs service providers are going to be reluctant to share the\n> information, for a really good reason you will learn a subset of their\n> business volumes.\n>\n> I'll see if I can come up with some Fermi estimation on this front.\n>\n> [0] https://www.bitrefill.com/thor-turbo-channels/\n>\n> Le mer. 16 juin 2021 \u00e0 20:58, Billy Tetrud <billy.tetrud at gmail.com> a\n> \u00e9crit :\n>\n>> Russel O'Connor recently opined\n>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n>> that RBF should be standard treatment of all transactions, rather than as a\n>> transaction opt-in/out. I agree with that. Any configuration in a\n>> transaction that has not been committed into a block yet simply can't be\n>> relied upon. Miners also have a clear incentive to ignore RBF rules and\n>> mine anything that passes consensus. At best opting out of RBF is a weak\n>> defense, and at worst it's simply a false sense of security that is likely\n>> to actively lead to theft events.\n>>\n>> Do we as a community want to support 0-conf payments in any way at this\n>> point? It seems rather silly to make software design decisions to\n>> accommodate 0-conf payments when there are better mechanisms for fast\n>> payments (ie lightning).\n>>\n>> One question I have is: how does software generally inform the user about\n>> 0-conf payment detection? Does software generally tell the user something\n>> along the lines of \"This payment has not been finalized yet. All recipients\n>> should wait until the transaction has at least 1 confirmation, and most\n>> recipients should wait for 6 confirmations\" ? I think unless we pressure\n>> software to be very explicit about what counts as finality, users will\n>> simply continue to do what they've always done. Rolling out this policy\n>> change over the course of a year or two seems fine, no need to rush. But I\n>> suppose it would depend on how often 0-conf is used in the bitcoin\n>> ecosystem at this point, which I don't have any data on.\n>>\n>> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi,\n>>>\n>>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF as\n>>> the Bitcoin Core's default replacement policy in version 24.0. As a\n>>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>>> agreement is reached, this policy change would enter into deployment phase\n>>> a year from now.\n>>>\n>>> Even if this replacement policy has been deemed as highly controversial\n>>> a few years ago, ongoing and anticipated changes in the Bitcoin ecosystem\n>>> are motivating this proposal.\n>>>\n>>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>>\n>>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>>> funded transactions by propagating an RBF opt-out double-spend of its\n>>> contributed input before the honest transaction is broadcasted by the\n>>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>>> fee-bumping  reserve.\n>>>\n>>> This affects a series of Bitcoin protocols such as Coinjoin, onchain\n>>> DLCs and dual-funded LN channels. As those protocols are still in the early\n>>> phase of deployment, it doesn't seem to have been executed in the wild for\n>>> now.  That said, considering that dual-funded are more efficient from a\n>>> liquidity standpoint, we can expect them to be widely relied on, once\n>>> Lightning enters in a more mature phase. At that point, it should become\n>>> economically rational for liquidity service providers to launch those DoS\n>>> attacks against their competitors to hijack user traffic.\n>>>\n>>> Beyond that, presence of those DoSes will complicate the design and\n>>> deployment of multi-party Bitcoin protocols such as payment\n>>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>>> a preliminary stage where batch participants are locked-in their funds\n>>> within an account witnessScript shared with the orchestrer.\n>>>\n>>> Of course, even assuming full-rbf, propagation of the multi-party funded\n>>> transactions can still be interfered with by an attacker, simply\n>>> broadcasting a double-spend with a feerate equivalent to the honest\n>>> transaction. However, it tightens the attack scenario to a scorched earth\n>>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>>\n>>> # RBF opt-out as a Mempools Partitions Vector\n>>>\n>>> A longer-term issue is the risk of mempools malicious partitions, where\n>>> an attacker exploits network topology or divergence in mempools policies to\n>>> partition network mempools in different subsets. From then a wide range of\n>>> attacks can be envisioned such as package pinning [1], artificial\n>>> congestion to provoke LN channels closure or manipulation of\n>>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>>> on block confirmation, though other fee estimators designs deployed across\n>>> the ecosystem are likely going to be affected).\n>>>\n>>> Traditionally, mempools partitions have been gauged as a spontaneous\n>>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>>> it has been studied in-depth for adversarial purposes. Though, deployment\n>>> of second-layer\n>>> protocols, heavily relying on sanity of a local mempool for\n>>> fee-estimation and robust propagation of their time-sensitive transactions\n>>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>>> a low-cost partitioning tool, of which the existence nullifies most of\n>>> potential progresses to mitigate malicious partitioning.\n>>>\n>>>\n>>> To resume, opt-in RBF doesn't suit well deployment of robust\n>>> second-layers protocol, even if those issues are still early and deserve\n>>> more research. At the same time, I believe a meaningful subset of the\n>>> ecosystem  are still relying\n>>> on 0-confs transactions, even if their security is relying on far weaker\n>>> assumptions (opt-in RBF rule is a policy rule, not a consensus one) [2] A\n>>> rapid change of Core's mempool rules would be harming their quality of\n>>> services and should be\n>>> weighed carefully. On the other hand, it would be great to nudge them\n>>> towards more secure handling of their 0-confs flows [3]\n>>>\n>>> Let's examine what could be deployed ecosystem-wise as enhancements to\n>>> the 0-confs security model.\n>>>\n>>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>>> Fee-Topping with Package Relay\n>>>\n>>> From an attacker viewpoint, opt-in RBF isn't a big blocker to successful\n>>> double-spends. Any motivated attacker can modify Core to mass-connect to a\n>>> wide portion of the network, announce txA to this subset, announce txA' to\n>>> the\n>>> merchant. TxA' propagation will be encumbered by the privacy-preserving\n>>> inventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\n>>> attacker has no care to respect.\n>>>\n>>> To detect a successful double-spend attempt, a Bitcoin service should\n>>> run few full-nodes with well-spread connection graphs and unlinkable\n>>> between them, to avoid being identified then maliciously partitioned from\n>>> the rest of the network.\n>>>\n>>> I believe this tactic is already deployed by few Bitcoin services, and\n>>> even one can throw flame at it because it over consumes network resources\n>>> (bandwidth, connection slots, ...), it does procure a security advantage to\n>>> the ones doing it.\n>>>\n>>> One further improvement on top of this protection could be to react\n>>> after the double-spend detection by attaching a CPFP to the merchant\n>>> transaction, with a higher package feerate than the double-spend. Expected\n>>> deployment of package-relay as a p2p mechanism/mempool policy in Bitcoin\n>>> Core should enable it to do so.\n>>>\n>>> # Reactive security models : EconomicReputation-based Compensations\n>>>\n>>> Another approach could be to react after the fact if a double-spend has\n>>> been qualified. If the sender is already known to the service provider, the\n>>> service account can be slashed.  If the sender is a low-trusted\n>>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>>> but I foresee those trust-minimized, decentralized solutions being adopted\n>>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>>> operation with an anonymous counterparty.\n>>>\n>>> What other cool new tools could be considered to enhance 0-confs\n>>> security ?\n>>>\n>>> To conclude, let's avoid replaying the contentious threads of a few\n>>> years ago. What this new thread highlights is the fact that a transaction\n>>> relay/mempool acceptance policy might be beneficial to some class of\n>>> already-deployed\n>>> Bitcoin applications while being detrimental to newer ones. How do we\n>>> preserve the current interests of 0-confs users while enabling upcoming\n>>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>>\n>>> If there is ecosystem agreement on switching to full-RBF, but 0.24\n>>> sounds too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>>> we can.\n>>>\n>>> Cheers,\n>>> Antoine\n>>>\n>>> [0]\n>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>>\n>>> [1] See scenario 3 :\n>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>>\n>>> [2] https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>>\n>>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210626/f5cf526f/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-06-26T19:00:02",
                "message_text_only": "If the parties trust each other, rbf is still opt-in. Just don't do it?\n\nOn Sat, Jun 26, 2021, 9:30 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >  services providers are offering zero-conf channels, where you can start\n> to spend instantly [0]. I believe that's an interesting usage\n>\n> I agree those are interesting and useful cases. I suppose I should clarify\n> that when I asked if bitcoin should continue supporting 0-conf\n> transactions, I meant: should we make design decisions based on whether it\n> makes raw 0-conf transactions more or less difficult to double spend on? I\n> do think 0-conf transactions can be useful in situations where there is\n> some level of trust (either direct trust between the interacting parties,\n> or disperse trust that most people won't try to double spend, perhaps\n> because the transaction is small or their identity is tied to it). Fidelity\n> bonds sound like an interesting way to mitigate sybil attacks in a\n> reputation system.\n>\n> On Thu, Jun 24, 2021 at 5:23 PM Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n>\n>> > Do we as a community want to support 0-conf payments in any way at this\n>> > point? It seems rather silly to make software design decisions to\n>> > accommodate 0-conf payments when there are better mechanisms for fast\n>> > payments (ie lightning).\n>>\n>> Well, we have zero-conf LN channels ? Actually, Lightning channel funding\n>> transactions should be buried under a few blocks, though few services\n>> providers are offering zero-conf channels, where you can start to spend\n>> instantly [0]. I believe that's an interesting usage, though IMHO as\n>> mentioned we can explore different security models to make 0-conf safe\n>> (reputation/fidelity-bond).\n>>\n>> > One question I have is: how does software generally inform the user\n>> about\n>> 0-conf payment detection?\n>>\n>> Yes generally it's something like an \"Unconfirmed\" annotation on incoming\n>> txn, though at least this is what Blockstream Green or Electrum are doing.\n>>\n>> > But I\n>> suppose it would depend on how often 0-conf is used in the bitcoin\n>> ecosystem at this point, which I don't have any data on.\n>>\n>> There are few Bitcoin services well-known to rely on 0-conf. Beyond how\n>> much of the Bitcoin traffic is tied to a 0-conf is a hard question, a lot\n>> of 0-confs service providers are going to be reluctant to share the\n>> information, for a really good reason you will learn a subset of their\n>> business volumes.\n>>\n>> I'll see if I can come up with some Fermi estimation on this front.\n>>\n>> [0] https://www.bitrefill.com/thor-turbo-channels/\n>>\n>> Le mer. 16 juin 2021 \u00e0 20:58, Billy Tetrud <billy.tetrud at gmail.com> a\n>> \u00e9crit :\n>>\n>>> Russel O'Connor recently opined\n>>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n>>> that RBF should be standard treatment of all transactions, rather than as a\n>>> transaction opt-in/out. I agree with that. Any configuration in a\n>>> transaction that has not been committed into a block yet simply can't be\n>>> relied upon. Miners also have a clear incentive to ignore RBF rules and\n>>> mine anything that passes consensus. At best opting out of RBF is a weak\n>>> defense, and at worst it's simply a false sense of security that is likely\n>>> to actively lead to theft events.\n>>>\n>>> Do we as a community want to support 0-conf payments in any way at this\n>>> point? It seems rather silly to make software design decisions to\n>>> accommodate 0-conf payments when there are better mechanisms for fast\n>>> payments (ie lightning).\n>>>\n>>> One question I have is: how does software generally inform the user\n>>> about 0-conf payment detection? Does software generally tell the user\n>>> something along the lines of \"This payment has not been finalized yet. All\n>>> recipients should wait until the transaction has at least 1 confirmation,\n>>> and most recipients should wait for 6 confirmations\" ? I think unless we\n>>> pressure software to be very explicit about what counts as finality, users\n>>> will simply continue to do what they've always done. Rolling out this\n>>> policy change over the course of a year or two seems fine, no need to rush.\n>>> But I suppose it would depend on how often 0-conf is used in the bitcoin\n>>> ecosystem at this point, which I don't have any data on.\n>>>\n>>> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Hi,\n>>>>\n>>>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF\n>>>> as the Bitcoin Core's default replacement policy in version 24.0. As a\n>>>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>>>> agreement is reached, this policy change would enter into deployment phase\n>>>> a year from now.\n>>>>\n>>>> Even if this replacement policy has been deemed as highly controversial\n>>>> a few years ago, ongoing and anticipated changes in the Bitcoin ecosystem\n>>>> are motivating this proposal.\n>>>>\n>>>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>>>\n>>>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>>>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>>>> funded transactions by propagating an RBF opt-out double-spend of its\n>>>> contributed input before the honest transaction is broadcasted by the\n>>>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>>>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>>>> fee-bumping  reserve.\n>>>>\n>>>> This affects a series of Bitcoin protocols such as Coinjoin, onchain\n>>>> DLCs and dual-funded LN channels. As those protocols are still in the early\n>>>> phase of deployment, it doesn't seem to have been executed in the wild for\n>>>> now.  That said, considering that dual-funded are more efficient from a\n>>>> liquidity standpoint, we can expect them to be widely relied on, once\n>>>> Lightning enters in a more mature phase. At that point, it should become\n>>>> economically rational for liquidity service providers to launch those DoS\n>>>> attacks against their competitors to hijack user traffic.\n>>>>\n>>>> Beyond that, presence of those DoSes will complicate the design and\n>>>> deployment of multi-party Bitcoin protocols such as payment\n>>>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>>>> a preliminary stage where batch participants are locked-in their funds\n>>>> within an account witnessScript shared with the orchestrer.\n>>>>\n>>>> Of course, even assuming full-rbf, propagation of the multi-party\n>>>> funded transactions can still be interfered with by an attacker, simply\n>>>> broadcasting a double-spend with a feerate equivalent to the honest\n>>>> transaction. However, it tightens the attack scenario to a scorched earth\n>>>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>>>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>>>\n>>>> # RBF opt-out as a Mempools Partitions Vector\n>>>>\n>>>> A longer-term issue is the risk of mempools malicious partitions, where\n>>>> an attacker exploits network topology or divergence in mempools policies to\n>>>> partition network mempools in different subsets. From then a wide range of\n>>>> attacks can be envisioned such as package pinning [1], artificial\n>>>> congestion to provoke LN channels closure or manipulation of\n>>>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>>>> on block confirmation, though other fee estimators designs deployed across\n>>>> the ecosystem are likely going to be affected).\n>>>>\n>>>> Traditionally, mempools partitions have been gauged as a spontaneous\n>>>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>>>> it has been studied in-depth for adversarial purposes. Though, deployment\n>>>> of second-layer\n>>>> protocols, heavily relying on sanity of a local mempool for\n>>>> fee-estimation and robust propagation of their time-sensitive transactions\n>>>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>>>> a low-cost partitioning tool, of which the existence nullifies most of\n>>>> potential progresses to mitigate malicious partitioning.\n>>>>\n>>>>\n>>>> To resume, opt-in RBF doesn't suit well deployment of robust\n>>>> second-layers protocol, even if those issues are still early and deserve\n>>>> more research. At the same time, I believe a meaningful subset of the\n>>>> ecosystem  are still relying\n>>>> on 0-confs transactions, even if their security is relying on far\n>>>> weaker assumptions (opt-in RBF rule is a policy rule, not a consensus one)\n>>>> [2] A rapid change of Core's mempool rules would be harming their quality\n>>>> of services and should be\n>>>> weighed carefully. On the other hand, it would be great to nudge them\n>>>> towards more secure handling of their 0-confs flows [3]\n>>>>\n>>>> Let's examine what could be deployed ecosystem-wise as enhancements to\n>>>> the 0-confs security model.\n>>>>\n>>>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>>>> Fee-Topping with Package Relay\n>>>>\n>>>> From an attacker viewpoint, opt-in RBF isn't a big blocker to\n>>>> successful double-spends. Any motivated attacker can modify Core to\n>>>> mass-connect to a wide portion of the network, announce txA to this subset,\n>>>> announce txA' to the\n>>>> merchant. TxA' propagation will be encumbered by the privacy-preserving\n>>>> inventory timers (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an\n>>>> attacker has no care to respect.\n>>>>\n>>>> To detect a successful double-spend attempt, a Bitcoin service should\n>>>> run few full-nodes with well-spread connection graphs and unlinkable\n>>>> between them, to avoid being identified then maliciously partitioned from\n>>>> the rest of the network.\n>>>>\n>>>> I believe this tactic is already deployed by few Bitcoin services, and\n>>>> even one can throw flame at it because it over consumes network resources\n>>>> (bandwidth, connection slots, ...), it does procure a security advantage to\n>>>> the ones doing it.\n>>>>\n>>>> One further improvement on top of this protection could be to react\n>>>> after the double-spend detection by attaching a CPFP to the merchant\n>>>> transaction, with a higher package feerate than the double-spend. Expected\n>>>> deployment of package-relay as a p2p mechanism/mempool policy in Bitcoin\n>>>> Core should enable it to do so.\n>>>>\n>>>> # Reactive security models : EconomicReputation-based Compensations\n>>>>\n>>>> Another approach could be to react after the fact if a double-spend has\n>>>> been qualified. If the sender is already known to the service provider, the\n>>>> service account can be slashed.  If the sender is a low-trusted\n>>>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>>>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>>>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>>>> but I foresee those trust-minimized, decentralized solutions being adopted\n>>>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>>>> operation with an anonymous counterparty.\n>>>>\n>>>> What other cool new tools could be considered to enhance 0-confs\n>>>> security ?\n>>>>\n>>>> To conclude, let's avoid replaying the contentious threads of a few\n>>>> years ago. What this new thread highlights is the fact that a transaction\n>>>> relay/mempool acceptance policy might be beneficial to some class of\n>>>> already-deployed\n>>>> Bitcoin applications while being detrimental to newer ones. How do we\n>>>> preserve the current interests of 0-confs users while enabling upcoming\n>>>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>>>\n>>>> If there is ecosystem agreement on switching to full-RBF, but 0.24\n>>>> sounds too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>>>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>>>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>>>> we can.\n>>>>\n>>>> Cheers,\n>>>> Antoine\n>>>>\n>>>> [0]\n>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>>>\n>>>> [1] See scenario 3 :\n>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>>>\n>>>> [2]\n>>>> https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>>>\n>>>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>>>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210626/80352cab/attachment-0001.html>"
            },
            {
                "author": "Corey Haddad",
                "date": "2021-06-30T14:06:50",
                "message_text_only": "We cannot prevent people from choosing to take an action based on an\nunconfirmed transaction. Even though it is trivial to have a\ndouble-spending transaction confirmed, accepting a 0-conf tx can be\nrational in many cases.  0-conf can be interpreted as the customer\nsignaling their 'intent to pay', and where there is an established\nrelationship between customer and merchant, or where there merchant is\nproviding a cancelable e-service, signaling intent may be enough. These use\ncases do not depend on making it difficult for the user to attempt to\ndouble-spend the merchant.\n\nBitcoin is a system designed around a consensus on the blockchain, not the\nmempool. I am in favor of providing the spender of bitcoins with all\npossible tools and methods to help them submit their transactions -\ndouble-spending or not - to miners for consideration. More than making RBF\nthe default, I would prefer to see nodes forward any transaction\nconflicting transaction, so long as it has a higher fee. Is there a reason\nthis would be undesirable?\n\nCorey\n\nOn Sat, Jun 26, 2021 at 3:00 PM Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> If the parties trust each other, rbf is still opt-in. Just don't do it?\n>\n> On Sat, Jun 26, 2021, 9:30 AM Billy Tetrud via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> >  services providers are offering zero-conf channels, where you can\n>> start to spend instantly [0]. I believe that's an interesting usage\n>>\n>> I agree those are interesting and useful cases. I suppose I should\n>> clarify that when I asked if bitcoin should continue supporting 0-conf\n>> transactions, I meant: should we make design decisions based on whether it\n>> makes raw 0-conf transactions more or less difficult to double spend on? I\n>> do think 0-conf transactions can be useful in situations where there is\n>> some level of trust (either direct trust between the interacting parties,\n>> or disperse trust that most people won't try to double spend, perhaps\n>> because the transaction is small or their identity is tied to it). Fidelity\n>> bonds sound like an interesting way to mitigate sybil attacks in a\n>> reputation system.\n>>\n>> On Thu, Jun 24, 2021 at 5:23 PM Antoine Riard <antoine.riard at gmail.com>\n>> wrote:\n>>\n>>> > Do we as a community want to support 0-conf payments in any way at this\n>>> > point? It seems rather silly to make software design decisions to\n>>> > accommodate 0-conf payments when there are better mechanisms for fast\n>>> > payments (ie lightning).\n>>>\n>>> Well, we have zero-conf LN channels ? Actually, Lightning channel\n>>> funding transactions should be buried under a few blocks, though few\n>>> services providers are offering zero-conf channels, where you can start to\n>>> spend instantly [0]. I believe that's an interesting usage, though IMHO as\n>>> mentioned we can explore different security models to make 0-conf safe\n>>> (reputation/fidelity-bond).\n>>>\n>>> > One question I have is: how does software generally inform the user\n>>> about\n>>> 0-conf payment detection?\n>>>\n>>> Yes generally it's something like an \"Unconfirmed\" annotation on\n>>> incoming txn, though at least this is what Blockstream Green or Electrum\n>>> are doing.\n>>>\n>>> > But I\n>>> suppose it would depend on how often 0-conf is used in the bitcoin\n>>> ecosystem at this point, which I don't have any data on.\n>>>\n>>> There are few Bitcoin services well-known to rely on 0-conf. Beyond how\n>>> much of the Bitcoin traffic is tied to a 0-conf is a hard question, a lot\n>>> of 0-confs service providers are going to be reluctant to share the\n>>> information, for a really good reason you will learn a subset of their\n>>> business volumes.\n>>>\n>>> I'll see if I can come up with some Fermi estimation on this front.\n>>>\n>>> [0] https://www.bitrefill.com/thor-turbo-channels/\n>>>\n>>> Le mer. 16 juin 2021 \u00e0 20:58, Billy Tetrud <billy.tetrud at gmail.com> a\n>>> \u00e9crit :\n>>>\n>>>> Russel O'Connor recently opined\n>>>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n>>>> that RBF should be standard treatment of all transactions, rather than as a\n>>>> transaction opt-in/out. I agree with that. Any configuration in a\n>>>> transaction that has not been committed into a block yet simply can't be\n>>>> relied upon. Miners also have a clear incentive to ignore RBF rules and\n>>>> mine anything that passes consensus. At best opting out of RBF is a weak\n>>>> defense, and at worst it's simply a false sense of security that is likely\n>>>> to actively lead to theft events.\n>>>>\n>>>> Do we as a community want to support 0-conf payments in any way at this\n>>>> point? It seems rather silly to make software design decisions to\n>>>> accommodate 0-conf payments when there are better mechanisms for fast\n>>>> payments (ie lightning).\n>>>>\n>>>> One question I have is: how does software generally inform the user\n>>>> about 0-conf payment detection? Does software generally tell the user\n>>>> something along the lines of \"This payment has not been finalized yet. All\n>>>> recipients should wait until the transaction has at least 1 confirmation,\n>>>> and most recipients should wait for 6 confirmations\" ? I think unless we\n>>>> pressure software to be very explicit about what counts as finality, users\n>>>> will simply continue to do what they've always done. Rolling out this\n>>>> policy change over the course of a year or two seems fine, no need to rush.\n>>>> But I suppose it would depend on how often 0-conf is used in the bitcoin\n>>>> ecosystem at this point, which I don't have any data on.\n>>>>\n>>>> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> Hi,\n>>>>>\n>>>>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF\n>>>>> as the Bitcoin Core's default replacement policy in version 24.0. As a\n>>>>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>>>>> agreement is reached, this policy change would enter into deployment phase\n>>>>> a year from now.\n>>>>>\n>>>>> Even if this replacement policy has been deemed as highly\n>>>>> controversial a few years ago, ongoing and anticipated changes in the\n>>>>> Bitcoin ecosystem are motivating this proposal.\n>>>>>\n>>>>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>>>>\n>>>>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>>>>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>>>>> funded transactions by propagating an RBF opt-out double-spend of its\n>>>>> contributed input before the honest transaction is broadcasted by the\n>>>>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>>>>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>>>>> fee-bumping  reserve.\n>>>>>\n>>>>> This affects a series of Bitcoin protocols such as Coinjoin, onchain\n>>>>> DLCs and dual-funded LN channels. As those protocols are still in the early\n>>>>> phase of deployment, it doesn't seem to have been executed in the wild for\n>>>>> now.  That said, considering that dual-funded are more efficient from a\n>>>>> liquidity standpoint, we can expect them to be widely relied on, once\n>>>>> Lightning enters in a more mature phase. At that point, it should become\n>>>>> economically rational for liquidity service providers to launch those DoS\n>>>>> attacks against their competitors to hijack user traffic.\n>>>>>\n>>>>> Beyond that, presence of those DoSes will complicate the design and\n>>>>> deployment of multi-party Bitcoin protocols such as payment\n>>>>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>>>>> a preliminary stage where batch participants are locked-in their funds\n>>>>> within an account witnessScript shared with the orchestrer.\n>>>>>\n>>>>> Of course, even assuming full-rbf, propagation of the multi-party\n>>>>> funded transactions can still be interfered with by an attacker, simply\n>>>>> broadcasting a double-spend with a feerate equivalent to the honest\n>>>>> transaction. However, it tightens the attack scenario to a scorched earth\n>>>>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>>>>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>>>>\n>>>>> # RBF opt-out as a Mempools Partitions Vector\n>>>>>\n>>>>> A longer-term issue is the risk of mempools malicious partitions,\n>>>>> where an attacker exploits network topology or divergence in mempools\n>>>>> policies to partition network mempools in different subsets. From then a\n>>>>> wide range of attacks can be envisioned such as package pinning [1],\n>>>>> artificial congestion to provoke LN channels closure or manipulation of\n>>>>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>>>>> on block confirmation, though other fee estimators designs deployed across\n>>>>> the ecosystem are likely going to be affected).\n>>>>>\n>>>>> Traditionally, mempools partitions have been gauged as a spontaneous\n>>>>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>>>>> it has been studied in-depth for adversarial purposes. Though, deployment\n>>>>> of second-layer\n>>>>> protocols, heavily relying on sanity of a local mempool for\n>>>>> fee-estimation and robust propagation of their time-sensitive transactions\n>>>>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>>>>> a low-cost partitioning tool, of which the existence nullifies most of\n>>>>> potential progresses to mitigate malicious partitioning.\n>>>>>\n>>>>>\n>>>>> To resume, opt-in RBF doesn't suit well deployment of robust\n>>>>> second-layers protocol, even if those issues are still early and deserve\n>>>>> more research. At the same time, I believe a meaningful subset of the\n>>>>> ecosystem  are still relying\n>>>>> on 0-confs transactions, even if their security is relying on far\n>>>>> weaker assumptions (opt-in RBF rule is a policy rule, not a consensus one)\n>>>>> [2] A rapid change of Core's mempool rules would be harming their quality\n>>>>> of services and should be\n>>>>> weighed carefully. On the other hand, it would be great to nudge them\n>>>>> towards more secure handling of their 0-confs flows [3]\n>>>>>\n>>>>> Let's examine what could be deployed ecosystem-wise as enhancements to\n>>>>> the 0-confs security model.\n>>>>>\n>>>>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>>>>> Fee-Topping with Package Relay\n>>>>>\n>>>>> From an attacker viewpoint, opt-in RBF isn't a big blocker to\n>>>>> successful double-spends. Any motivated attacker can modify Core to\n>>>>> mass-connect to a wide portion of the network, announce txA to this subset,\n>>>>> announce txA' to the\n>>>>> merchant. TxA' propagation will be encumbered by the\n>>>>> privacy-preserving inventory timers\n>>>>> (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an attacker has no care\n>>>>> to respect.\n>>>>>\n>>>>> To detect a successful double-spend attempt, a Bitcoin service should\n>>>>> run few full-nodes with well-spread connection graphs and unlinkable\n>>>>> between them, to avoid being identified then maliciously partitioned from\n>>>>> the rest of the network.\n>>>>>\n>>>>> I believe this tactic is already deployed by few Bitcoin services, and\n>>>>> even one can throw flame at it because it over consumes network resources\n>>>>> (bandwidth, connection slots, ...), it does procure a security advantage to\n>>>>> the ones doing it.\n>>>>>\n>>>>> One further improvement on top of this protection could be to react\n>>>>> after the double-spend detection by attaching a CPFP to the merchant\n>>>>> transaction, with a higher package feerate than the double-spend. Expected\n>>>>> deployment of package-relay as a p2p mechanism/mempool policy in Bitcoin\n>>>>> Core should enable it to do so.\n>>>>>\n>>>>> # Reactive security models : EconomicReputation-based Compensations\n>>>>>\n>>>>> Another approach could be to react after the fact if a double-spend\n>>>>> has been qualified. If the sender is already known to the service provider,\n>>>>> the service account can be slashed.  If the sender is a low-trusted\n>>>>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>>>>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>>>>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>>>>> but I foresee those trust-minimized, decentralized solutions being adopted\n>>>>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>>>>> operation with an anonymous counterparty.\n>>>>>\n>>>>> What other cool new tools could be considered to enhance 0-confs\n>>>>> security ?\n>>>>>\n>>>>> To conclude, let's avoid replaying the contentious threads of a few\n>>>>> years ago. What this new thread highlights is the fact that a transaction\n>>>>> relay/mempool acceptance policy might be beneficial to some class of\n>>>>> already-deployed\n>>>>> Bitcoin applications while being detrimental to newer ones. How do we\n>>>>> preserve the current interests of 0-confs users while enabling upcoming\n>>>>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>>>>\n>>>>> If there is ecosystem agreement on switching to full-RBF, but 0.24\n>>>>> sounds too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>>>>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>>>>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>>>>> we can.\n>>>>>\n>>>>> Cheers,\n>>>>> Antoine\n>>>>>\n>>>>> [0]\n>>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>>>>\n>>>>> [1] See scenario 3 :\n>>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>>>>\n>>>>> [2]\n>>>>> https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>>>>\n>>>>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>>>>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/45e377b6/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-30T19:21:29",
                "message_text_only": ">  I would prefer to see nodes forward any transaction conflicting\ntransaction, so long as it has a higher fee. Is there a reason this would\nbe undesirable?\n\nThere is a spam risk there, where someone could intend to pay a fee of 1000\nsats, but every time they make a payment, they generate a transaction with\nthe minimum fee, then a transaction with a fee 1 sat higher, etc etc until\nthey've generated about 1000 sats. So I think what nodes do is that they\nonly forward transactions that have a fee at least X sats higher than one\nthey already have in their mempool. The minimum delta between fees should\nprobably be just as high as the absolute minimum fee, since it accounts for\nthe cost of broadcasting the transaction.\n\nBut on broader strokes, as long as you're bumping the fee by a significant\namount, I agree that any transaction should be forwarded regardless of any\nRBF flag.\n\nOn Wed, Jun 30, 2021 at 7:07 AM Corey Haddad via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We cannot prevent people from choosing to take an action based on an\n> unconfirmed transaction. Even though it is trivial to have a\n> double-spending transaction confirmed, accepting a 0-conf tx can be\n> rational in many cases.  0-conf can be interpreted as the customer\n> signaling their 'intent to pay', and where there is an established\n> relationship between customer and merchant, or where there merchant is\n> providing a cancelable e-service, signaling intent may be enough. These use\n> cases do not depend on making it difficult for the user to attempt to\n> double-spend the merchant.\n>\n> Bitcoin is a system designed around a consensus on the blockchain, not the\n> mempool. I am in favor of providing the spender of bitcoins with all\n> possible tools and methods to help them submit their transactions -\n> double-spending or not - to miners for consideration. More than making RBF\n> the default, I would prefer to see nodes forward any transaction\n> conflicting transaction, so long as it has a higher fee. Is there a reason\n> this would be undesirable?\n>\n> Corey\n>\n> On Sat, Jun 26, 2021 at 3:00 PM Jeremy via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> If the parties trust each other, rbf is still opt-in. Just don't do it?\n>>\n>> On Sat, Jun 26, 2021, 9:30 AM Billy Tetrud via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> >  services providers are offering zero-conf channels, where you can\n>>> start to spend instantly [0]. I believe that's an interesting usage\n>>>\n>>> I agree those are interesting and useful cases. I suppose I should\n>>> clarify that when I asked if bitcoin should continue supporting 0-conf\n>>> transactions, I meant: should we make design decisions based on whether it\n>>> makes raw 0-conf transactions more or less difficult to double spend on? I\n>>> do think 0-conf transactions can be useful in situations where there is\n>>> some level of trust (either direct trust between the interacting parties,\n>>> or disperse trust that most people won't try to double spend, perhaps\n>>> because the transaction is small or their identity is tied to it). Fidelity\n>>> bonds sound like an interesting way to mitigate sybil attacks in a\n>>> reputation system.\n>>>\n>>> On Thu, Jun 24, 2021 at 5:23 PM Antoine Riard <antoine.riard at gmail.com>\n>>> wrote:\n>>>\n>>>> > Do we as a community want to support 0-conf payments in any way at\n>>>> this\n>>>> > point? It seems rather silly to make software design decisions to\n>>>> > accommodate 0-conf payments when there are better mechanisms for fast\n>>>> > payments (ie lightning).\n>>>>\n>>>> Well, we have zero-conf LN channels ? Actually, Lightning channel\n>>>> funding transactions should be buried under a few blocks, though few\n>>>> services providers are offering zero-conf channels, where you can start to\n>>>> spend instantly [0]. I believe that's an interesting usage, though IMHO as\n>>>> mentioned we can explore different security models to make 0-conf safe\n>>>> (reputation/fidelity-bond).\n>>>>\n>>>> > One question I have is: how does software generally inform the user\n>>>> about\n>>>> 0-conf payment detection?\n>>>>\n>>>> Yes generally it's something like an \"Unconfirmed\" annotation on\n>>>> incoming txn, though at least this is what Blockstream Green or Electrum\n>>>> are doing.\n>>>>\n>>>> > But I\n>>>> suppose it would depend on how often 0-conf is used in the bitcoin\n>>>> ecosystem at this point, which I don't have any data on.\n>>>>\n>>>> There are few Bitcoin services well-known to rely on 0-conf. Beyond how\n>>>> much of the Bitcoin traffic is tied to a 0-conf is a hard question, a lot\n>>>> of 0-confs service providers are going to be reluctant to share the\n>>>> information, for a really good reason you will learn a subset of their\n>>>> business volumes.\n>>>>\n>>>> I'll see if I can come up with some Fermi estimation on this front.\n>>>>\n>>>> [0] https://www.bitrefill.com/thor-turbo-channels/\n>>>>\n>>>> Le mer. 16 juin 2021 \u00e0 20:58, Billy Tetrud <billy.tetrud at gmail.com> a\n>>>> \u00e9crit :\n>>>>\n>>>>> Russel O'Connor recently opined\n>>>>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019061.html>\n>>>>> that RBF should be standard treatment of all transactions, rather than as a\n>>>>> transaction opt-in/out. I agree with that. Any configuration in a\n>>>>> transaction that has not been committed into a block yet simply can't be\n>>>>> relied upon. Miners also have a clear incentive to ignore RBF rules and\n>>>>> mine anything that passes consensus. At best opting out of RBF is a weak\n>>>>> defense, and at worst it's simply a false sense of security that is likely\n>>>>> to actively lead to theft events.\n>>>>>\n>>>>> Do we as a community want to support 0-conf payments in any way at\n>>>>> this point? It seems rather silly to make software design decisions to\n>>>>> accommodate 0-conf payments when there are better mechanisms for fast\n>>>>> payments (ie lightning).\n>>>>>\n>>>>> One question I have is: how does software generally inform the user\n>>>>> about 0-conf payment detection? Does software generally tell the user\n>>>>> something along the lines of \"This payment has not been finalized yet. All\n>>>>> recipients should wait until the transaction has at least 1 confirmation,\n>>>>> and most recipients should wait for 6 confirmations\" ? I think unless we\n>>>>> pressure software to be very explicit about what counts as finality, users\n>>>>> will simply continue to do what they've always done. Rolling out this\n>>>>> policy change over the course of a year or two seems fine, no need to rush.\n>>>>> But I suppose it would depend on how often 0-conf is used in the bitcoin\n>>>>> ecosystem at this point, which I don't have any data on.\n>>>>>\n>>>>> On Tue, Jun 15, 2021 at 10:00 AM Antoine Riard via bitcoin-dev <\n>>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>\n>>>>>> Hi,\n>>>>>>\n>>>>>> I'm writing to propose deprecation of opt-in RBF in favor of full-RBF\n>>>>>> as the Bitcoin Core's default replacement policy in version 24.0. As a\n>>>>>> reminder, the next release is 22.0, aimed for August 1st, assuming\n>>>>>> agreement is reached, this policy change would enter into deployment phase\n>>>>>> a year from now.\n>>>>>>\n>>>>>> Even if this replacement policy has been deemed as highly\n>>>>>> controversial a few years ago, ongoing and anticipated changes in the\n>>>>>> Bitcoin ecosystem are motivating this proposal.\n>>>>>>\n>>>>>> # RBF opt-out as a DoS Vector against Multi-Party Funded Transactions\n>>>>>>\n>>>>>> As explained in \"On Mempool Funny Games against Multi-Party Funded\n>>>>>> Transactions'', 2nd issue [0], an attacker can easily DoS a multi-party\n>>>>>> funded transactions by propagating an RBF opt-out double-spend of its\n>>>>>> contributed input before the honest transaction is broadcasted by the\n>>>>>> protocol orchester. DoSes are qualified in the sense of either an attacker\n>>>>>> wasting timevalue of victim's inputs or forcing exhaustion of the\n>>>>>> fee-bumping  reserve.\n>>>>>>\n>>>>>> This affects a series of Bitcoin protocols such as Coinjoin, onchain\n>>>>>> DLCs and dual-funded LN channels. As those protocols are still in the early\n>>>>>> phase of deployment, it doesn't seem to have been executed in the wild for\n>>>>>> now.  That said, considering that dual-funded are more efficient from a\n>>>>>> liquidity standpoint, we can expect them to be widely relied on, once\n>>>>>> Lightning enters in a more mature phase. At that point, it should become\n>>>>>> economically rational for liquidity service providers to launch those DoS\n>>>>>> attacks against their competitors to hijack user traffic.\n>>>>>>\n>>>>>> Beyond that, presence of those DoSes will complicate the design and\n>>>>>> deployment of multi-party Bitcoin protocols such as payment\n>>>>>> pools/multi-party channels. Note, Lightning Pool isn't affected as there is\n>>>>>> a preliminary stage where batch participants are locked-in their funds\n>>>>>> within an account witnessScript shared with the orchestrer.\n>>>>>>\n>>>>>> Of course, even assuming full-rbf, propagation of the multi-party\n>>>>>> funded transactions can still be interfered with by an attacker, simply\n>>>>>> broadcasting a double-spend with a feerate equivalent to the honest\n>>>>>> transaction. However, it tightens the attack scenario to a scorched earth\n>>>>>> approach, where the attacker has to commit equivalent fee-bumping reserve\n>>>>>> to maintain the pinning and might lose the \"competing\" fees to miners.\n>>>>>>\n>>>>>> # RBF opt-out as a Mempools Partitions Vector\n>>>>>>\n>>>>>> A longer-term issue is the risk of mempools malicious partitions,\n>>>>>> where an attacker exploits network topology or divergence in mempools\n>>>>>> policies to partition network mempools in different subsets. From then a\n>>>>>> wide range of attacks can be envisioned such as package pinning [1],\n>>>>>> artificial congestion to provoke LN channels closure or manipulation of\n>>>>>> fee-estimator's feerate (the Core's one wouldn't be affected as it relies\n>>>>>> on block confirmation, though other fee estimators designs deployed across\n>>>>>> the ecosystem are likely going to be affected).\n>>>>>>\n>>>>>> Traditionally, mempools partitions have been gauged as a spontaneous\n>>>>>> outcome of a distributed systems like Bitcoin p2p network and I'm not aware\n>>>>>> it has been studied in-depth for adversarial purposes. Though, deployment\n>>>>>> of second-layer\n>>>>>> protocols, heavily relying on sanity of a local mempool for\n>>>>>> fee-estimation and robust propagation of their time-sensitive transactions\n>>>>>> might lead to reconsider this position. Acknowledging this, RBF opt-out is\n>>>>>> a low-cost partitioning tool, of which the existence nullifies most of\n>>>>>> potential progresses to mitigate malicious partitioning.\n>>>>>>\n>>>>>>\n>>>>>> To resume, opt-in RBF doesn't suit well deployment of robust\n>>>>>> second-layers protocol, even if those issues are still early and deserve\n>>>>>> more research. At the same time, I believe a meaningful subset of the\n>>>>>> ecosystem  are still relying\n>>>>>> on 0-confs transactions, even if their security is relying on far\n>>>>>> weaker assumptions (opt-in RBF rule is a policy rule, not a consensus one)\n>>>>>> [2] A rapid change of Core's mempool rules would be harming their quality\n>>>>>> of services and should be\n>>>>>> weighed carefully. On the other hand, it would be great to nudge them\n>>>>>> towards more secure handling of their 0-confs flows [3]\n>>>>>>\n>>>>>> Let's examine what could be deployed ecosystem-wise as enhancements\n>>>>>> to the 0-confs security model.\n>>>>>>\n>>>>>> # Proactive security models : Double-spend Monitoring/Receiver-side\n>>>>>> Fee-Topping with Package Relay\n>>>>>>\n>>>>>> From an attacker viewpoint, opt-in RBF isn't a big blocker to\n>>>>>> successful double-spends. Any motivated attacker can modify Core to\n>>>>>> mass-connect to a wide portion of the network, announce txA to this subset,\n>>>>>> announce txA' to the\n>>>>>> merchant. TxA' propagation will be encumbered by the\n>>>>>> privacy-preserving inventory timers\n>>>>>> (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`), of which an attacker has no care\n>>>>>> to respect.\n>>>>>>\n>>>>>> To detect a successful double-spend attempt, a Bitcoin service should\n>>>>>> run few full-nodes with well-spread connection graphs and unlinkable\n>>>>>> between them, to avoid being identified then maliciously partitioned from\n>>>>>> the rest of the network.\n>>>>>>\n>>>>>> I believe this tactic is already deployed by few Bitcoin services,\n>>>>>> and even one can throw flame at it because it over consumes network\n>>>>>> resources (bandwidth, connection slots, ...), it does procure a security\n>>>>>> advantage to the ones doing it.\n>>>>>>\n>>>>>> One further improvement on top of this protection could be to react\n>>>>>> after the double-spend detection by attaching a CPFP to the merchant\n>>>>>> transaction, with a higher package feerate than the double-spend. Expected\n>>>>>> deployment of package-relay as a p2p mechanism/mempool policy in Bitcoin\n>>>>>> Core should enable it to do so.\n>>>>>>\n>>>>>> # Reactive security models : EconomicReputation-based Compensations\n>>>>>>\n>>>>>> Another approach could be to react after the fact if a double-spend\n>>>>>> has been qualified. If the sender is already known to the service provider,\n>>>>>> the service account can be slashed.  If the sender is a low-trusted\n>>>>>> counterparty to the merchant, \"side-trust\" models could be relied on. For\n>>>>>> e.g a LN pubkey with a stacked reputation from your autopilot, LSATs, stake\n>>>>>> certificates, a HTLC-as-a-fidelity-bond, ... The space is quite wide there\n>>>>>> but I foresee those trust-minimized, decentralized solutions being adopted\n>>>>>> by the LN ecosystem to patch the risks when you enter in a channel/HTLC\n>>>>>> operation with an anonymous counterparty.\n>>>>>>\n>>>>>> What other cool new tools could be considered to enhance 0-confs\n>>>>>> security ?\n>>>>>>\n>>>>>> To conclude, let's avoid replaying the contentious threads of a few\n>>>>>> years ago. What this new thread highlights is the fact that a transaction\n>>>>>> relay/mempool acceptance policy might be beneficial to some class of\n>>>>>> already-deployed\n>>>>>> Bitcoin applications while being detrimental to newer ones. How do we\n>>>>>> preserve the current interests of 0-confs users while enabling upcoming\n>>>>>> interests of fancy L2s to flourish is a good conversation to have. I think.\n>>>>>>\n>>>>>> If there is ecosystem agreement on switching to full-RBF, but 0.24\n>>>>>> sounds too early, let's defer it to 0.25 or 0.26. I don't think Core has a\n>>>>>> consistent deprecation process w.r.t to policy rules heavily relied-on by\n>>>>>> Bitcoin users, if we do so let sets a precedent satisfying as many folks as\n>>>>>> we can.\n>>>>>>\n>>>>>> Cheers,\n>>>>>> Antoine\n>>>>>>\n>>>>>> [0]\n>>>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html\n>>>>>>\n>>>>>> [1] See scenario 3 :\n>>>>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-June/002758.html\n>>>>>>\n>>>>>> [2]\n>>>>>> https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121\n>>>>>>\n>>>>>> [3] And the LN ecosystem does have an interest to fix zero-confs\n>>>>>> security, if \"turbo-channels\"-like become normalized for mobile nodes\n>>>>>> _______________________________________________\n>>>>>> bitcoin-dev mailing list\n>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>\n>>>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/4c21e6ff/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Full-RBF in Bitcoin Core 24.0",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Corey Haddad",
                "Antoine Riard",
                "Billy Tetrud",
                "Greg Sanders"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 96237
        }
    },
    {
        "title": "[bitcoin-dev] Boost Bitcoin circulation, Million Transactions Per Second with stronger privacy",
        "thread_messages": [
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-16T13:44:24",
                "message_text_only": "Hi,\nI have a proposal for improve Bitcoin TPS and privacy, here is the post.\nhttps://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\nhttps://bitcointalk.org/index.php?topic=5344020.0\nCan you please read it and share your idea about it.\n\nCheers\nRaymo"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-18T01:42:39",
                "message_text_only": "for very small transactions, this seems to make a hell of a lot of sense.\n\nit's like lightning, but with no limits, no routing protocols...\neverything is guaranteed by relative fees and the cost-of-theft.\n\npretty cool.\n\nOn Thu, Jun 17, 2021 at 4:14 PM raymo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi,\n> I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> https://bitcointalk.org/index.php?topic=5344020.0\n> Can you please read it and share your idea about it.\n>\n> Cheers\n> Raymo\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Alex Schoof",
                "date": "2021-06-18T13:44:17",
                "message_text_only": "A few questions/comments:\n\nWhy is there a 10 sat fee on each tx? Where does that fee go?\n\nI don\u2019t think this design sufficiently protects against double spends by\nthe \u201cissuer\u201d (the person who actually has the UTXO). Your guarantee tx\nmechanism only really covers the case where someone tries to double spend\npart of a UTXO balance (in other words, if the penalty lost is less than\nthe value gained by doing a double spend, its worth it to double spend, and\nin a world where you\u2019re passing around digital IOUs, it\u2019s easy to make it\nworth it). Later in the post, you mention that there will be a p2p network\nto gossip fund transfers and that will prevent an issuer from double\nspending. The problem there is that network latency is non-zero, large\nnetwork partitions are both real and common, and nodes can come and go\nanytime (hardware failure, power failure, network partition healing, just\nbecause they feel like it, etc). Different nodes on the network might hear\nabout different, conflicting transactions. Nodes will need a way to all\ncome to consensus on what the right set of \u201csent notes\u201d is. I think you\nwill end up reinventing a lot of the problems solved by bitcoin.\n\nWhy did you pick email as the RPC mechanism to transfer these notes? Email\nis going to add variable amounts of latency and things like spam filters\nwill cause issues.\n\nAlex\n\nOn Fri, Jun 18, 2021 at 4:23 AM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> for very small transactions, this seems to make a hell of a lot of sense.\n>\n> it's like lightning, but with no limits, no routing protocols...\n> everything is guaranteed by relative fees and the cost-of-theft.\n>\n> pretty cool.\n>\n> On Thu, Jun 17, 2021 at 4:14 PM raymo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Hi,\n> > I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n> >\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> > https://bitcointalk.org/index.php?topic=5344020.0\n> > Can you please read it and share your idea about it.\n> >\n> > Cheers\n> > Raymo\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-- \n\n\nAlex Schoof\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210618/00874202/attachment.html>"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-18T20:00:12",
                "message_text_only": "Hi Alex,\n\nThe 10 Sat fee is Sabu-transaction-fee and goes to issuers to\nincentivize UTXO owners to put their money in system and prepare money\ntransfer service for the Creditors. pretty much like banks.\nThis number is my suggestion, but can be changed to something higher or\nlesser or even being customized for each issuer(Banks with high fee and\nmore speed/reliability or less fee and less speed but more distributed).\n\nTypically Issuers put an UTXOs worth 40,000 Sat and issue a\ndebt-document(transaction) worth 20,000 or less. So issuer can use\nthousand UTXOs(each worth 40,000 Sat) and issue thousand debt-document\n(worth 20,000,000 debit) and earn significant Sabu-transaction-fee\ndaily.\nNo need to say the issuer also dictates the fiat to BTC exchange rate in\nfirst step, and can earn even more benefits by selling BTC a little\nhigher than market price. The target would be penny savers which\npotentially buy very small amount each time(teenagers or people with low\nincome specially).\n\nAbout your double-spend scenario please write a clear scenario and use\nthe conventional terms such as issuer, creditor, MT, GT, CT etc... to\nstudy its feasibility. Maybe there are corner cases which I missed. So\nwe will fix it as well.\n\nAbout p2p Gossiping, you are right. There is latency but it doesn't hurt\nthe consensus on Sabu protocol. Please consider figure 7. inter\ncreditors Bitcoin transfer as an example. By the way in all money\ntransactions between issuer -> creditor or creditor->creditor, the\nreceiver wallet \"always\" controls the doc-watcher client to be ensure\nthe fact that the delivered debt-document(aka transaction) to receiver\nwallet, already exist on the doc-watcher sites. If that particular\ndocument exist in doc-watcher , the wallet consider it as a valid\ntransaction, otherwise creditor won't accept the deal as a settled deal.\n\n>I think you will end up reinventing a lot of the problems solved by bitcoin. \n\nNo, that's not true. Because I proposed a complementary tool for Bitcoin\nwhich came from a different point of view. Note the fact that Sabu\nprotocol realizes a different model of decentralization. In Sabu there\nis no DLT at all and all consensus are between small set of users (most\nof time between an issuer and a creditor). In Sabu there is no\nobligation for everyone know everything about every transaction. Each\nparticipant only knows about its interest. Alongside there is a gossip\nmirroring of all transaction that flood to the clients a light weight\ninformation of a tuple [UTXO, transaction-Merkle-root]. These gossip\nnodes (doc-watchers) are not corruptible since it works in a simple\nproof-of-existance (true-positive) model. And no one can mutilate it by\ncensor transactions.\n\n>Why did you pick email as the RPC mechanism to transfer these notes?\n\nFirst of all I have to explain a part of design spec. Each mobile wallet\nhas to have a fresh email address which is dedicated to Sabu protocol\nactivities. The wallet has access to this email address and read, delete\ninbox or send emails. So the spam or spam filter problem is not the\ncase.\n\nIn my opinion email is the ONLY neutral, free (non proprietary) and open\nprotocol/technology for communication in the world that its\ninfrastructure is well-established and is accessible all over the glob.\nEven in countries with low internet speed.\nI intentionally chose email as main communication mean. Because non\ntechnical people can easily make an email address or change it\n(comparing establish a website or use an static IP) and notify the\nfriends about new address and they can easily send and receive Bitcoin\njust by knowing email addresses. Once the user install the\nSabu-supporter-wallet (called Gazin), he will config and record his 12\nseed words. The wallet also creates the PGP Pub/Priv key pair based on\nthese 12 words seeds and signs the wallet email address too. All are\ntake place behind the scene and user only sees its wallet is ready. So\nthese 12 worlds are users wealth protector and identity sovereignty as\nwell. User adds friends wallet email address or scan its QR code. The\nrest is PGP encrypted emails(handshake, agreement and transactions)\nbetween two wallets. No one needs to ask a central service to have an\naccount. Pure Cypher punk users can run their personal email server or\neven better their freedombox https://freedomboxfoundation.org. So no one\ncan stop user from using this system(Bitcoin + Sabu + Gazin) or ban his\naccount. The wallet owner can easily and fast immigrate to new email\naddress (or even different email service provider) and sign new address\nand notify to his friends circle with no real barrier.\nWhile these are all benefits of using email as a user identifier in\nsystem, there could be some privacy issue in some levels. For example\nmost email service provider impose some sort of KYC or ask user mobile\nnumber, but there are other providers which are respecting users\nprivacy. implicitly prevalence of Sabu users creates more demands for\nthis privacy-respector-companies, so these companies will be increased.\nAnother issue would be global passive spying or full-pipe project will\nfind who do transaction with who. Since communications are PGP encrypted\nit won't be clear who is sender or receiver or how much is transferred\nor even if they are really parties in a transaction or it is just a fake\nnoise connection! The forward secrecy also would be another issues.\nalthough these are mostly the privacy issues rather than Sabu intrinsic\nproblems.\nSome other disadvantage of email is latency, so some third parties would\neasily provide the optional alternate communication services for wallet,\ne.g Matrix, Nym network, Onion, I2P, classic central servers, etc to\ncompensate the speed and/or privacy issues. These are all communication\nmeans and the wallet can simply use one or more methods in parallel.\nLater we will see the wallet users will choose which solution. Speed vs\nprivacy, sovereignty and independence.\n \nRegards\nRaymo\n\nOn 2021-06-18 13:44, Alex Schoof wrote:\n> A few questions/comments:\n> \n> Why is there a 10 sat fee on each tx? Where does that fee go? \n> \n> I don\u2019t think this design sufficiently protects against double\n> spends by the \u201cissuer\u201d (the person who actually has the UTXO).\n> Your guarantee tx mechanism only really covers the case where someone\n> tries to double spend part of a UTXO balance (in other words, if the\n> penalty lost is less than the value gained by doing a double spend,\n> its worth it to double spend, and in a world where you\u2019re passing\n> around digital IOUs, it\u2019s easy to make it worth it). Later in the\n> post, you mention that there will be a p2p network to gossip fund\n> transfers and that will prevent an issuer from double spending. The\n> problem there is that network latency is non-zero, large network\n> partitions are both real and common, and nodes can come and go anytime\n> (hardware failure, power failure, network partition healing, just\n> because they feel like it, etc). Different nodes on the network might\n> hear about different, conflicting transactions. Nodes will need a way\n> to all come to consensus on what the right set of \u201csent notes\u201d is.\n> I think you will end up reinventing a lot of the problems solved by\n> bitcoin. \n> \n> Why did you pick email as the RPC mechanism to transfer these notes?\n> Email is going to add variable amounts of latency and things like spam\n> filters will cause issues. \n> \n> Alex\n> \n> On Fri, Jun 18, 2021 at 4:23 AM Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> for very small transactions, this seems to make a hell of a lot of\n>> sense.\n>>\n>> it's like lightning, but with no limits, no routing protocols...\n>> everything is guaranteed by relative fees and the cost-of-theft.\n>>\n>> pretty cool.\n>>\n>> On Thu, Jun 17, 2021 at 4:14 PM raymo via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> Hi,\n>>> I have a proposal for improve Bitcoin TPS and privacy, here is the\n>> post.\n>>>\n>>\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n>>> https://bitcointalk.org/index.php?topic=5344020.0\n>>> Can you please read it and share your idea about it.\n>>>\n>>> Cheers\n>>> Raymo\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>  -- \n> \n> Alex Schoof"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-19T21:14:08",
                "message_text_only": "There is no solution to preventing the fraud proofs.  This is a known issue\nfor Bitcoin in general.  It basically caps your protocol at the cost of\nperforming a fraud proof attack.\n\nAlso I would ditch email in the core protocol, and use QR codes and\ndevice-to-device linking.\n\nclient a shows QR\nclient b scans QR (which is a pubkey)\nclient b publishes his pubkey (gossip network), with POSK proof\n\nThen you add to your contact list.\n\nEmail to be an optional clearly less secure layer but not part of the core\nprotocol.  It is vulnerable to mitm (how do you know who you're paying),\nbut again for small values and known risks it's not terrible.\n\n\n\n\n\n\n\n\nOn Fri, Jun 18, 2021 at 4:00 PM <raymo at riseup.net> wrote:\n>\n>\n> Hi Alex,\n>\n> The 10 Sat fee is Sabu-transaction-fee and goes to issuers to\n> incentivize UTXO owners to put their money in system and prepare money\n> transfer service for the Creditors. pretty much like banks.\n> This number is my suggestion, but can be changed to something higher or\n> lesser or even being customized for each issuer(Banks with high fee and\n> more speed/reliability or less fee and less speed but more distributed).\n>\n> Typically Issuers put an UTXOs worth 40,000 Sat and issue a\n> debt-document(transaction) worth 20,000 or less. So issuer can use\n> thousand UTXOs(each worth 40,000 Sat) and issue thousand debt-document\n> (worth 20,000,000 debit) and earn significant Sabu-transaction-fee\n> daily.\n> No need to say the issuer also dictates the fiat to BTC exchange rate in\n> first step, and can earn even more benefits by selling BTC a little\n> higher than market price. The target would be penny savers which\n> potentially buy very small amount each time(teenagers or people with low\n> income specially).\n>\n> About your double-spend scenario please write a clear scenario and use\n> the conventional terms such as issuer, creditor, MT, GT, CT etc... to\n> study its feasibility. Maybe there are corner cases which I missed. So\n> we will fix it as well.\n>\n> About p2p Gossiping, you are right. There is latency but it doesn't hurt\n> the consensus on Sabu protocol. Please consider figure 7. inter\n> creditors Bitcoin transfer as an example. By the way in all money\n> transactions between issuer -> creditor or creditor->creditor, the\n> receiver wallet \"always\" controls the doc-watcher client to be ensure\n> the fact that the delivered debt-document(aka transaction) to receiver\n> wallet, already exist on the doc-watcher sites. If that particular\n> document exist in doc-watcher , the wallet consider it as a valid\n> transaction, otherwise creditor won't accept the deal as a settled deal.\n>\n> >I think you will end up reinventing a lot of the problems solved by\nbitcoin.\n>\n> No, that's not true. Because I proposed a complementary tool for Bitcoin\n> which came from a different point of view. Note the fact that Sabu\n> protocol realizes a different model of decentralization. In Sabu there\n> is no DLT at all and all consensus are between small set of users (most\n> of time between an issuer and a creditor). In Sabu there is no\n> obligation for everyone know everything about every transaction. Each\n> participant only knows about its interest. Alongside there is a gossip\n> mirroring of all transaction that flood to the clients a light weight\n> information of a tuple [UTXO, transaction-Merkle-root]. These gossip\n> nodes (doc-watchers) are not corruptible since it works in a simple\n> proof-of-existance (true-positive) model. And no one can mutilate it by\n> censor transactions.\n>\n> >Why did you pick email as the RPC mechanism to transfer these notes?\n>\n> First of all I have to explain a part of design spec. Each mobile wallet\n> has to have a fresh email address which is dedicated to Sabu protocol\n> activities. The wallet has access to this email address and read, delete\n> inbox or send emails. So the spam or spam filter problem is not the\n> case.\n>\n> In my opinion email is the ONLY neutral, free (non proprietary) and open\n> protocol/technology for communication in the world that its\n> infrastructure is well-established and is accessible all over the glob.\n> Even in countries with low internet speed.\n> I intentionally chose email as main communication mean. Because non\n> technical people can easily make an email address or change it\n> (comparing establish a website or use an static IP) and notify the\n> friends about new address and they can easily send and receive Bitcoin\n> just by knowing email addresses. Once the user install the\n> Sabu-supporter-wallet (called Gazin), he will config and record his 12\n> seed words. The wallet also creates the PGP Pub/Priv key pair based on\n> these 12 words seeds and signs the wallet email address too. All are\n> take place behind the scene and user only sees its wallet is ready. So\n> these 12 worlds are users wealth protector and identity sovereignty as\n> well. User adds friends wallet email address or scan its QR code. The\n> rest is PGP encrypted emails(handshake, agreement and transactions)\n> between two wallets. No one needs to ask a central service to have an\n> account. Pure Cypher punk users can run their personal email server or\n> even better their freedombox https://freedomboxfoundation.org. So no one\n> can stop user from using this system(Bitcoin + Sabu + Gazin) or ban his\n> account. The wallet owner can easily and fast immigrate to new email\n> address (or even different email service provider) and sign new address\n> and notify to his friends circle with no real barrier.\n> While these are all benefits of using email as a user identifier in\n> system, there could be some privacy issue in some levels. For example\n> most email service provider impose some sort of KYC or ask user mobile\n> number, but there are other providers which are respecting users\n> privacy. implicitly prevalence of Sabu users creates more demands for\n> this privacy-respector-companies, so these companies will be increased.\n> Another issue would be global passive spying or full-pipe project will\n> find who do transaction with who. Since communications are PGP encrypted\n> it won't be clear who is sender or receiver or how much is transferred\n> or even if they are really parties in a transaction or it is just a fake\n> noise connection! The forward secrecy also would be another issues.\n> although these are mostly the privacy issues rather than Sabu intrinsic\n> problems.\n> Some other disadvantage of email is latency, so some third parties would\n> easily provide the optional alternate communication services for wallet,\n> e.g Matrix, Nym network, Onion, I2P, classic central servers, etc to\n> compensate the speed and/or privacy issues. These are all communication\n> means and the wallet can simply use one or more methods in parallel.\n> Later we will see the wallet users will choose which solution. Speed vs\n> privacy, sovereignty and independence.\n>\n> Regards\n> Raymo\n>\n> On 2021-06-18 13:44, Alex Schoof wrote:\n> > A few questions/comments:\n> >\n> > Why is there a 10 sat fee on each tx? Where does that fee go?\n> >\n> > I don\u2019t think this design sufficiently protects against double\n> > spends by the \u201cissuer\u201d (the person who actually has the UTXO).\n> > Your guarantee tx mechanism only really covers the case where someone\n> > tries to double spend part of a UTXO balance (in other words, if the\n> > penalty lost is less than the value gained by doing a double spend,\n> > its worth it to double spend, and in a world where you\u2019re passing\n> > around digital IOUs, it\u2019s easy to make it worth it). Later in the\n> > post, you mention that there will be a p2p network to gossip fund\n> > transfers and that will prevent an issuer from double spending. The\n> > problem there is that network latency is non-zero, large network\n> > partitions are both real and common, and nodes can come and go anytime\n> > (hardware failure, power failure, network partition healing, just\n> > because they feel like it, etc). Different nodes on the network might\n> > hear about different, conflicting transactions. Nodes will need a way\n> > to all come to consensus on what the right set of \u201csent notes\u201d is.\n> > I think you will end up reinventing a lot of the problems solved by\n> > bitcoin.\n> >\n> > Why did you pick email as the RPC mechanism to transfer these notes?\n> > Email is going to add variable amounts of latency and things like spam\n> > filters will cause issues.\n> >\n> > Alex\n> >\n> > On Fri, Jun 18, 2021 at 4:23 AM Erik Aronesty via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> >> for very small transactions, this seems to make a hell of a lot of\n> >> sense.\n> >>\n> >> it's like lightning, but with no limits, no routing protocols...\n> >> everything is guaranteed by relative fees and the cost-of-theft.\n> >>\n> >> pretty cool.\n> >>\n> >> On Thu, Jun 17, 2021 at 4:14 PM raymo via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>\n> >>> Hi,\n> >>> I have a proposal for improve Bitcoin TPS and privacy, here is the\n> >> post.\n> >>>\n> >>\n> >\nhttps://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> >>> https://bitcointalk.org/index.php?topic=5344020.0\n> >>> Can you please read it and share your idea about it.\n> >>>\n> >>> Cheers\n> >>> Raymo\n> >>> _______________________________________________\n> >>> bitcoin-dev mailing list\n> >>> bitcoin-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >  --\n> >\n> > Alex Schoof\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210619/263261f6/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-06-18T13:37:54",
                "message_text_only": "It is vulnerable to sybil attacks or where the recipient is a victim of a\nproxy attack.  If the recipient is not connected to a valid Network, then\ndouble spends could be allowed.\n\n as long as this protocol is intended for use of transactions around a\ndollar or so I don't see that being a financially lucrative attack.\n\nHowever consider a large department store.  If I put a \"fence\" around that\nstore and control all of its outbound peer connections, I can then allow\ndouble spends for the duration of my visit at the store.\n\nIn order to defend against this large retailers would have to use\ndistributed / trusted nodes and certificates.\n\n\n\n\n\n\n\n\n\n\n\nOn Thu, Jun 17, 2021, 4:14 PM raymo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n> I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n>\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> https://bitcointalk.org/index.php?topic=5344020.0\n> Can you please read it and share your idea about it.\n>\n> Cheers\n> Raymo\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210618/39ce8208/attachment.html>"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-18T20:22:08",
                "message_text_only": "I think I respond to sybil attack implicitly in Max response. Since the\nonly consensus must be between issuer and creditor and they already are\nin a kind of web of trust connection.\nBy the way it would be great if you explain the attack scenario in more\ndetail and our conventional terms such as issuer, creditor, MT, GT, CT,\netc...\ndefinitely we can solve it as well.\n\n\nOn 2021-06-18 13:37, Erik Aronesty wrote:\n> It is vulnerable to sybil attacks or where the recipient is a victim\n> of a proxy attack.  If the recipient is not connected to a valid\n> Network, then double spends could be allowed.\n> \n>  as long as this protocol is intended for use of transactions around a\n> dollar or so I don't see that being a financially lucrative attack.\n> \n> However consider a large department store.  If I put a \"fence\" around\n> that store and control all of its outbound peer connections, I can\n> then allow double spends for the duration of my visit at the store.\n> \n> In order to defend against this large retailers would have to use\n> distributed / trusted nodes and certificates.\n> \n> On Thu, Jun 17, 2021, 4:14 PM raymo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> Hi,\n>> I have a proposal for improve Bitcoin TPS and privacy, here is the\n>> post.\n>>\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n>> https://bitcointalk.org/index.php?topic=5344020.0\n>> Can you please read it and share your idea about it.\n>>\n>> Cheers\n>> Raymo\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-06-20T00:53:58",
                "message_text_only": "Good morning Raymo,\n\n> Hi,\n> I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> https://bitcointalk.org/index.php?topic=5344020.0\n> Can you please read it and share your idea about it.\n\n\nGuarantee Transactions (GT) being higher-fee is ***not*** assured.\n\nFeerates are always bumpable --- the sender of a transaction only needs to directly contact a miner and offer a fee to take a specific transaction on the next block proposal, conditional on the transaction *actually* getting into a block.\nSuch \"side fees\" are always possible.\nIndeed, the in-transaction fees are \"just\" a way to anonymously and atomically make that fee offer to miners --- but miners and issuers can always communicate directly without using Bitcoin transaction to arrange a higher fee for a fraudulent Main Transaction (MT).\n\nbecause of this, you should really treat all unconfirmed transactions --- including MTs and GTs --- as potentially replaceable, i.e. RBFable.\nThere is no such thing as \"RBF disabled\", all transactions are inherently RBF-able due to side fees --- it is simply a matter of anonymity, atomicity, and ease-of-use.\n\n---\n\nEvery offchain protocol needs *the receiver* as a signatory to any unconfirmed transaction.\n\nOr more strongly, the receiver **must** be a signatory --- the receiver cannot trust an unconfirmed transaction where the spent UTXO has an alternate branch that does *not* have the receiver as a signatory.\n\nSee: https://zmnscpxj.github.io/offchain/safety.html\n\nThus, all safe offchain schemes need to use an n-of-n signing set.\n\nThe smallest n-of-n that is still useful is 2-of-2, where one participant is a sender and the other is a receiver.\n(1-of-1 is not useful since there is no possible receiver who can sign).\n\nThis requires Bitcoin to splinter into lots of 2-of-2 funds, each one a sovereign sub-money (that is *eventually* convertible to Bitcoin), each one a cryptocurrency system in its own right.\nHowever, it so happens that we have a mechanism for transferring value across multiple cryptocurrency systems: the HTLC.\n\n2-of-2 is also the most stable.\nThis is because *all* signatories of an n-of-n cryptocurrency system need to be online at the same time in order for *any* of them to use the funds in the system.\nIf any one of them is offline, then the system is unusable.\nWith 2 participants, there is some probability that one of them is offline and the individual 2-of-2 system is unusable.\nWith 3 participants, the probability is higher (there are more participants that can be offline).\nWith 4 participants, higher still.\n\nThus, the most stable is to split Bitcoin into lots of little 2-of-2 systems, and use HTLCs to transfer funds across the little 2-of-2 systems.\n\nThus, Lightning Network, which splits Bitcoin into lots of little 2-of-2 cryptocurrency systems (channels), and uses HTLCs to atomically transfer value across them (routing).\n\n\nOf course, having larger n is better as we need to splinter Bitcoin into fewer funds with larger participant sets.\nAnd we can mitigate the offline-problem by using a two-layer system: we have a n-of-n system (n > 2) that itself splits into multiple smaller 2-of-2 systems.\nThat way, the Bitcoin layer is split into fewer UTXOs, reducing blockchain resource consumption further.\n\nThus, Channel Factories hosting Lightning Channels.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-26T21:54:26",
                "message_text_only": "Good morning ZmnSCPxj\nSorry for late reply.\n> Guarantee Transactions (GT) being higher-fee is ***not*** assured.\nThe question is \u201cassuring what?\u201d. \nThe whole point of my proposal is the fact that issuers and creditors\nact rationally and won't harm their selves. The numbers (input and\noutput amounts), the relation between inputs and outputs amounts, the\nminimum and maximum of inputs and outputs amounts, and conditions of a\nvalid trans-action in Sabu protocol are all designed precisely to\nleading the rational users toward the making profit from the system. And\nirrationals (either issuer or creditor) can harm the others and\ninevitably in con-sequence will hurt themselves too. So, there is a fair\nand just transaction (MT). \nThe creditor can send the GT to Bitcoin network and lose 70% of his\nmoney and damage 15% of is-suer money!\nVice versa the issuer can send GT to Bitcoin network and harm itself 15%\nin cost of hurt creditors 70% which is none sense. Or issuer can pay\neven more money directly to miner and hurt itself even more which is\neven more irrational! Or the miner will ignore the transaction fees of a\nGT and put the fraudulent transaction in next block, which I cannot\nimagine a miner that pass up his legal and legiti-mate income in favor\nof a greedy issuer!\nPlease write me a scenario (preferably with clear amount of inputs and\noutputs) by which the cheater (either issuer or creditor) gains more\nprofit than playing honestly. \nOnly in this case we can accept your claim about weakness of protocol.\n\n> Every offchain protocol needs *the receiver* as a signatory to any unconfirmed transaction. the receiver **must** be a signatory --- the receiver cannot trust an unconfirmed transaction where the spent UTXO has an alternate branch that does *not* have the receiver as a signatory.\n\nI intentionally decided to not using 2 of 2 signature, because I didn't\nwant to fall in same trap as Light-ening. I wanted to avoid this long\ndrilling 2 of 2 signings and routing. Instead, I just proposed to\ncre-ate and sign a valid Bitcoin transaction between only 2 people in a\npure-peer-to-peer communication. The only signer is the issuer (the UTXO\nowner).\nAgain, same logic. Please write me a scenario by which the cheater\n(issuer or creditor) can cheat this only-issuer-signed transactions and\ngains more profit than playing honest. Due to numbers and trans-action\nrestrictions and the insignificance of the amount of each transaction\nthis scenario of fraud will fail too. \n\nLooking forward to hearing from you\nRaymo\n\n\nOn 2021-06-20 00:53, ZmnSCPxj wrote:\n> Good morning Raymo,\n> \n>> Hi,\n>> I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n>> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n>> https://bitcointalk.org/index.php?topic=5344020.0\n>> Can you please read it and share your idea about it.\n> \n> \n> Guarantee Transactions (GT) being higher-fee is ***not*** assured.\n> \n> Feerates are always bumpable --- the sender of a transaction only\n> needs to directly contact a miner and offer a fee to take a specific\n> transaction on the next block proposal, conditional on the transaction\n> *actually* getting into a block.\n> Such \"side fees\" are always possible.\n> Indeed, the in-transaction fees are \"just\" a way to anonymously and\n> atomically make that fee offer to miners --- but miners and issuers\n> can always communicate directly without using Bitcoin transaction to\n> arrange a higher fee for a fraudulent Main Transaction (MT).\n> \n> because of this, you should really treat all unconfirmed transactions\n> --- including MTs and GTs --- as potentially replaceable, i.e.\n> RBFable.\n> There is no such thing as \"RBF disabled\", all transactions are\n> inherently RBF-able due to side fees --- it is simply a matter of\n> anonymity, atomicity, and ease-of-use.\n> \n> ---\n> \n> Every offchain protocol needs *the receiver* as a signatory to any\n> unconfirmed transaction.\n> \n> Or more strongly, the receiver **must** be a signatory --- the\n> receiver cannot trust an unconfirmed transaction where the spent UTXO\n> has an alternate branch that does *not* have the receiver as a\n> signatory.\n> \n> See: https://zmnscpxj.github.io/offchain/safety.html\n> \n> Thus, all safe offchain schemes need to use an n-of-n signing set.\n> \n> The smallest n-of-n that is still useful is 2-of-2, where one\n> participant is a sender and the other is a receiver.\n> (1-of-1 is not useful since there is no possible receiver who can sign).\n> \n> This requires Bitcoin to splinter into lots of 2-of-2 funds, each one\n> a sovereign sub-money (that is *eventually* convertible to Bitcoin),\n> each one a cryptocurrency system in its own right.\n> However, it so happens that we have a mechanism for transferring value\n> across multiple cryptocurrency systems: the HTLC.\n> \n> 2-of-2 is also the most stable.\n> This is because *all* signatories of an n-of-n cryptocurrency system\n> need to be online at the same time in order for *any* of them to use\n> the funds in the system.\n> If any one of them is offline, then the system is unusable.\n> With 2 participants, there is some probability that one of them is\n> offline and the individual 2-of-2 system is unusable.\n> With 3 participants, the probability is higher (there are more\n> participants that can be offline).\n> With 4 participants, higher still.\n> \n> Thus, the most stable is to split Bitcoin into lots of little 2-of-2\n> systems, and use HTLCs to transfer funds across the little 2-of-2\n> systems.\n> \n> Thus, Lightning Network, which splits Bitcoin into lots of little\n> 2-of-2 cryptocurrency systems (channels), and uses HTLCs to atomically\n> transfer value across them (routing).\n> \n> \n> Of course, having larger n is better as we need to splinter Bitcoin\n> into fewer funds with larger participant sets.\n> And we can mitigate the offline-problem by using a two-layer system:\n> we have a n-of-n system (n > 2) that itself splits into multiple\n> smaller 2-of-2 systems.\n> That way, the Bitcoin layer is split into fewer UTXOs, reducing\n> blockchain resource consumption further.\n> \n> Thus, Channel Factories hosting Lightning Channels.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-06-27T04:53:52",
                "message_text_only": "Good morning Raymo,\n\n\n> Good morning ZmnSCPxj\n> Sorry for late reply.\n>\n> > Guarantee Transactions (GT) being higher-fee is not assured.\n>\n> The question is \u201cassuring what?\u201d.\n> The whole point of my proposal is the fact that issuers and creditors\n> act rationally and won't harm their selves. The numbers (input and\n> output amounts), the relation between inputs and outputs amounts, the\n> minimum and maximum of inputs and outputs amounts, and conditions of a\n> valid trans-action in Sabu protocol are all designed precisely to\n> leading the rational users toward the making profit from the system. And\n> irrationals (either issuer or creditor) can harm the others and\n> inevitably in con-sequence will hurt themselves too. So, there is a fair\n> and just transaction (MT).\n> The creditor can send the GT to Bitcoin network and lose 70% of his\n> money and damage 15% of is-suer money!\n> Vice versa the issuer can send GT to Bitcoin network and harm itself 15%\n> in cost of hurt creditors 70% which is none sense. Or issuer can pay\n> even more money directly to miner and hurt itself even more which is\n> even more irrational! Or the miner will ignore the transaction fees of a\n> GT and put the fraudulent transaction in next block, which I cannot\n> imagine a miner that pass up his legal and legiti-mate income in favor\n> of a greedy issuer!\n> Please write me a scenario (preferably with clear amount of inputs and\n> outputs) by which the cheater (either issuer or creditor) gains more\n> profit than playing honestly.\n> Only in this case we can accept your claim about weakness of protocol.\n>\n> > Every offchain protocol needs the receiver as a signatory to any unconfirmed transaction. the receiver must be a signatory --- the receiver cannot trust an unconfirmed transaction where the spent UTXO has an alternate branch that does not have the receiver as a signatory.\n>\n> I intentionally decided to not using 2 of 2 signature, because I didn't\n> want to fall in same trap as Light-ening. I wanted to avoid this long\n> drilling 2 of 2 signings and routing. Instead, I just proposed to\n> cre-ate and sign a valid Bitcoin transaction between only 2 people in a\n> pure-peer-to-peer communication. The only signer is the issuer (the UTXO\n> owner).\n> Again, same logic. Please write me a scenario by which the cheater\n> (issuer or creditor) can cheat this only-issuer-signed transactions and\n> gains more profit than playing honest. Due to numbers and trans-action\n> restrictions and the insignificance of the amount of each transaction\n> this scenario of fraud will fail too.\n\nAs the issuer is the only one signing, it can trivially create a self-paying transaction by itself that is neither a valid MT nor a valid GT.\n\nSuppose I have an MT that pays 1 BTC to you and has a 1 BTC change output back to me.\nAfter you hand over the equivalent of 1 BTC in other resources, I then create an alternative transaction, signed only by myself, paying 0.5 BTC to miners and 1.5 BTC to myself, and since the fee is so high, the miners have every incentive to mine it.\n\nYes, that is not a valid MT or GT, but nothing in the Bitcoin blockchain layer requires that the *single* signer follow the protocol.\nThe point here is that a single signer can sign anything, including a transaction that is not an MT or a GT, but has arbitrary numbers that are neither a valid GT nor a valid MT.\nThat is the reason why every trust-minimized offchain system requires 2-of-2, somebody else has to countercheck the validity of a protocol that is *not* directly on the blockchain.\nThe blockchain only cares about signature and timelock validity; it does not care about (and check for validity) MTs and GTs.\n\nIn essence, this is a trusted system where every creditor trusts every issuer to *only* sign GTs and MTs, thus uninteresting --- you might as well just use Coinbase as your offchain if you are going to inject trust.\n\nNow you can counterargue that you intend this system to be used for small payments and thus the fee for this non-MT non-GT clawback can approach the security levels you so carefully computed for GT and MT, but again --- the *largest* safe payment will vary depending on onchain mempool state, and if the mempool is almost empty, the largest safe payment will be much smaller than at other times.\nThis uncertainty is not handled well by most users, thus I think your UX will be fairly awful.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-27T11:05:04",
                "message_text_only": "On 2021-06-27 04:53, ZmnSCPxj wrote:\nGood evening ZmnSCPxj\n\nIt looks you already missed the entire design of Sabu and its\nrestrictions. First of all, the Gazin wallet always controls the Sabu\nrestrictions for every transaction in order to consider it as a valid\ntransaction in a valid deal. That is, the creditor wallet controls the\nMT and GT in first place. Then if the transactions are valid the\ncreditor consider entire process as a valid deal and give the services\nor goods in exchange of received Satoshis. \nSo, in this scenario the issuer has to sign a MT transaction in which\nthe issuer spends a UTXO worth at least 40,000 Sat, and issuer can issue\nmaximum 20,000 Sat debt-document. So, the transaction can have One or\nmore outputs for creditor(s), they must worth in total less than 20,000\nSat.\nEach transaction has to pay fixed 10,000 Sat as BTC-transaction-fee\nregardless the transaction length or the inputs/outputs amounts. The\nissuer always pays at least 4,000 Sat of BTC-transaction-fee, and the\n6,000 remined fee must be paid by issuer and creditors in proportion to\ntheir outputs amounts)\nFinally, the transaction can have one change-back output to issuer\naddress (same as input address) worth less than (40,000 \u2013 4,000=36,000)\nSat to issuer. This value depends on the debt amount and the issuer\nBTC-transaction-fee portion. The maximum issuer change back could be\n(40,000 -10,000 = 30,000) Sat for a transaction with no debt issuance.\nThe minimum amount of change back would be (40,000 \u2013 10,000 \u2013 19,999 =\n10,001 Sat). For more details, please take a look at figure 3.\n(Transaction in detail) in article\nhttps://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\nalso investigate on code\nhttps://github.com/raymaot/transaction-numbers-and-coefficients .\nThe creditor controls all these criteria and after passing all these\ntests the creditor accept transaction as a valid transaction. Now\ncreditor has 2 MT and GT transaction in his hand. \nBecause of these number limitations, no arbitrary UTXO spending by\nissuer nor self-paying transaction can make more output and more\nbenefits to him than respecting the already issued MT. please\ninvestigate on figure 1.0. (Security checks) for more details.\n\nNow show me a case (with precise amounts of inputs and outputs) that\nfits in Sabu restrictions AND issuer can make an arbitrary transaction\nwith more benefit than MT!\n\n\n\n\n> the *largest* safe payment will vary depending on onchain mempool state, and if the mempool is almost empty, the largest safe payment will be much smaller than at other times.\nAll these transactions are formed relatively (the numbers in GT are\ncalculated based on MT), so they are relative, so no matter how much\nmempool is full or empty. The only consideration for mempool is the\npropagation delay which is another story and has its own solution as\nwell.\n\n> I think your UX will be fairly awful.\nAll validations and communications are behind the scene, so the UX will\nbe enough smooth and friendly except the latency of email-based\ncommunications, which needs to be considered in details. BTW this is not\na big deal considering the sovereignty and the freedom are bringing to\nour financial activities.\n\n\n> Good morning Raymo,\n> \n> \n>> Good morning ZmnSCPxj\n>> Sorry for late reply.\n>>\n>> > Guarantee Transactions (GT) being higher-fee is not assured.\n>>\n>> The question is \u201cassuring what?\u201d.\n>> The whole point of my proposal is the fact that issuers and creditors\n>> act rationally and won't harm their selves. The numbers (input and\n>> output amounts), the relation between inputs and outputs amounts, the\n>> minimum and maximum of inputs and outputs amounts, and conditions of a\n>> valid trans-action in Sabu protocol are all designed precisely to\n>> leading the rational users toward the making profit from the system. And\n>> irrationals (either issuer or creditor) can harm the others and\n>> inevitably in con-sequence will hurt themselves too. So, there is a fair\n>> and just transaction (MT).\n>> The creditor can send the GT to Bitcoin network and lose 70% of his\n>> money and damage 15% of is-suer money!\n>> Vice versa the issuer can send GT to Bitcoin network and harm itself 15%\n>> in cost of hurt creditors 70% which is none sense. Or issuer can pay\n>> even more money directly to miner and hurt itself even more which is\n>> even more irrational! Or the miner will ignore the transaction fees of a\n>> GT and put the fraudulent transaction in next block, which I cannot\n>> imagine a miner that pass up his legal and legiti-mate income in favor\n>> of a greedy issuer!\n>> Please write me a scenario (preferably with clear amount of inputs and\n>> outputs) by which the cheater (either issuer or creditor) gains more\n>> profit than playing honestly.\n>> Only in this case we can accept your claim about weakness of protocol.\n>>\n>> > Every offchain protocol needs the receiver as a signatory to any unconfirmed transaction. the receiver must be a signatory --- the receiver cannot trust an unconfirmed transaction where the spent UTXO has an alternate branch that does not have the receiver as a signatory.\n>>\n>> I intentionally decided to not using 2 of 2 signature, because I didn't\n>> want to fall in same trap as Light-ening. I wanted to avoid this long\n>> drilling 2 of 2 signings and routing. Instead, I just proposed to\n>> cre-ate and sign a valid Bitcoin transaction between only 2 people in a\n>> pure-peer-to-peer communication. The only signer is the issuer (the UTXO\n>> owner).\n>> Again, same logic. Please write me a scenario by which the cheater\n>> (issuer or creditor) can cheat this only-issuer-signed transactions and\n>> gains more profit than playing honest. Due to numbers and trans-action\n>> restrictions and the insignificance of the amount of each transaction\n>> this scenario of fraud will fail too.\n> \n> As the issuer is the only one signing, it can trivially create a\n> self-paying transaction by itself that is neither a valid MT nor a\n> valid GT.\n> \n> Suppose I have an MT that pays 1 BTC to you and has a 1 BTC change\n> output back to me.\n> After you hand over the equivalent of 1 BTC in other resources, I then\n> create an alternative transaction, signed only by myself, paying 0.5\n> BTC to miners and 1.5 BTC to myself, and since the fee is so high, the\n> miners have every incentive to mine it.\n> \n> Yes, that is not a valid MT or GT, but nothing in the Bitcoin\n> blockchain layer requires that the *single* signer follow the\n> protocol.\n> The point here is that a single signer can sign anything, including a\n> transaction that is not an MT or a GT, but has arbitrary numbers that\n> are neither a valid GT nor a valid MT.\n> That is the reason why every trust-minimized offchain system requires\n> 2-of-2, somebody else has to countercheck the validity of a protocol\n> that is *not* directly on the blockchain.\n> The blockchain only cares about signature and timelock validity; it\n> does not care about (and check for validity) MTs and GTs.\n> \n> In essence, this is a trusted system where every creditor trusts every\n> issuer to *only* sign GTs and MTs, thus uninteresting --- you might as\n> well just use Coinbase as your offchain if you are going to inject\n> trust.\n> \n> Now you can counterargue that you intend this system to be used for\n> small payments and thus the fee for this non-MT non-GT clawback can\n> approach the security levels you so carefully computed for GT and MT,\n> but again --- the *largest* safe payment will vary depending on\n> onchain mempool state, and if the mempool is almost empty, the largest\n> safe payment will be much smaller than at other times.\n> This uncertainty is not handled well by most users, thus I think your\n> UX will be fairly awful.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-06-28T05:20:08",
                "message_text_only": "Good morning Raymo,\n\n>\n> It looks you already missed the entire design of Sabu and its\n> restrictions. First of all, the Gazin wallet always controls the Sabu\n> restrictions for every transaction in order to consider it as a valid\n> transaction in a valid deal. That is, the creditor wallet controls the\n> MT and GT in first place.\n\nStop right there.\n\n>From the above, what I get is, \"trust the Gazin wallet\".\nThus, the suggestion to just use Coinbase.\nAt least it has existed longer and has more current users that trust it, rather than this Gazin thing.\n\n\nIs Gazin open-source?\n\n* If Gazin is open-source, I could download the source code, make a local copy that gives me a separate copy of the keys, and use the keys to sign any transaction I want.\n* If Gazin is not open-source, then why should I trust the Gazin wallet until my incoming funds to an open-source wallet I control have been confirmed deeply?\n\nLightning is still superior because:\n\n* It can be open-sourced completely and even though I have keys to my onchain funds, I *still* cannot steal the funds of my counterparty.\n* Even if I connect my open-source node to a node with a closed-source implementation, I know I can rely on receives from that node without waiting for the transaction to be confirmed deeply.\n\n\nAll the benefits your scheme claims, are derived from the trust assumption, which is uninteresting, we already have those, they are called custodial wallets.\nLightning allows for non-custodiality while achieving high global TPS and low fees.\nAnd a central idea of Lightning is the requirement to use an n-of-n to form smaller sub-moneys from the global money.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T06:29:59",
                "message_text_only": "Hi ZmnSCPxj,\n\nWhy you get the signal \u201ctrust the Gazin wallet\u201d?\nSabu is a protocol and the Gazin wallet will be an implementation of\nthat protocol. We will implement it in react-native language to support\nboth Android and iPhone. Of course it will be open source and GPL3.  \nHere is the repository and yet is empty :)\nhttps://github.com/raymaot/Gazin \n\nI wonder why you do not look carefully into the proposal! IMHO the Sabu\nwill be far better than Lightning. \nCan\u2019t you see the fact that in Sabu you do not need open and close\nchannels ever? Can you imagine only this feature how dramatically\ndecrease the transactions cost and how increase the distribution of\nnodes and improve privacy level? it makes every mobile wallet act like a\nlightning network.\nDid you note the fact that in Sabu protocol there is no routing? And the\nonly people knew about a transaction are issuer and creditor? No one\nelse won\u2019t be aware of transactions and million transactions per second\ncan be sent and received and repeal dynamically without any footprint on\nany DLT?\n\nThe English is not my mother language and probably my paper is not a\nsmooth and easy to read paper, but these are not good excuse to not even\nreading a technical paper carefully and before understanding it or at\nleast trying to understanding it start to complaining. \n\n> All the benefits your scheme claims, are derived from the trust assumption\nNo, All the benefits my scheme claims, are derived from economically\nrational decision of both issuer and creditors. \n\nRegards\nRaymo\n\n\n\nOn 2021-06-28 05:20, ZmnSCPxj wrote:\n> Good morning Raymo,\n> \n>>\n>> It looks you already missed the entire design of Sabu and its\n>> restrictions. First of all, the Gazin wallet always controls the Sabu\n>> restrictions for every transaction in order to consider it as a valid\n>> transaction in a valid deal. That is, the creditor wallet controls the\n>> MT and GT in first place.\n> \n> Stop right there.\n> \n> From the above, what I get is, \"trust the Gazin wallet\".\n> Thus, the suggestion to just use Coinbase.\n> At least it has existed longer and has more current users that trust\n> it, rather than this Gazin thing.\n> \n> \n> Is Gazin open-source?\n> \n> * If Gazin is open-source, I could download the source code, make a\n> local copy that gives me a separate copy of the keys, and use the keys\n> to sign any transaction I want.\n> * If Gazin is not open-source, then why should I trust the Gazin\n> wallet until my incoming funds to an open-source wallet I control have\n> been confirmed deeply?\n> \n> Lightning is still superior because:\n> \n> * It can be open-sourced completely and even though I have keys to my\n> onchain funds, I *still* cannot steal the funds of my counterparty.\n> * Even if I connect my open-source node to a node with a closed-source\n> implementation, I know I can rely on receives from that node without\n> waiting for the transaction to be confirmed deeply.\n> \n> \n> All the benefits your scheme claims, are derived from the trust\n> assumption, which is uninteresting, we already have those, they are\n> called custodial wallets.\n> Lightning allows for non-custodiality while achieving high global TPS\n> and low fees.\n> And a central idea of Lightning is the requirement to use an n-of-n to\n> form smaller sub-moneys from the global money.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "James Hilliard",
                "date": "2021-06-28T08:23:00",
                "message_text_only": "On Mon, Jun 28, 2021 at 2:09 AM raymo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi ZmnSCPxj,\n>\n> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n> Sabu is a protocol and the Gazin wallet will be an implementation of\n> that protocol. We will implement it in react-native language to support\n> both Android and iPhone. Of course it will be open source and GPL3.\n> Here is the repository and yet is empty :)\n> https://github.com/raymaot/Gazin\n>\n> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n> will be far better than Lightning.\n> Can\u2019t you see the fact that in Sabu you do not need open and close\n> channels ever? Can you imagine only this feature how dramatically\n> decrease the transactions cost and how increase the distribution of\n> nodes and improve privacy level? it makes every mobile wallet act like a\n> lightning network.\n> Did you note the fact that in Sabu protocol there is no routing? And the\n> only people knew about a transaction are issuer and creditor? No one\n> else won\u2019t be aware of transactions and million transactions per second\n> can be sent and received and repeal dynamically without any footprint on\n> any DLT?\n>\n> The English is not my mother language and probably my paper is not a\n> smooth and easy to read paper, but these are not good excuse to not even\n> reading a technical paper carefully and before understanding it or at\n> least trying to understanding it start to complaining.\n\nConsidering that you have not effectively addressed any of the inaccurate\nassumptions made regarding how mining works that I pointed out earlier\nI assume your proposal is not viable in practice.\n\nSee:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019091.html\n\n>\n> > All the benefits your scheme claims, are derived from the trust assumption\n> No, All the benefits my scheme claims, are derived from economically\n> rational decision of both issuer and creditors.\n>\n> Regards\n> Raymo\n>\n>\n>\n> On 2021-06-28 05:20, ZmnSCPxj wrote:\n> > Good morning Raymo,\n> >\n> >>\n> >> It looks you already missed the entire design of Sabu and its\n> >> restrictions. First of all, the Gazin wallet always controls the Sabu\n> >> restrictions for every transaction in order to consider it as a valid\n> >> transaction in a valid deal. That is, the creditor wallet controls the\n> >> MT and GT in first place.\n> >\n> > Stop right there.\n> >\n> > From the above, what I get is, \"trust the Gazin wallet\".\n> > Thus, the suggestion to just use Coinbase.\n> > At least it has existed longer and has more current users that trust\n> > it, rather than this Gazin thing.\n> >\n> >\n> > Is Gazin open-source?\n> >\n> > * If Gazin is open-source, I could download the source code, make a\n> > local copy that gives me a separate copy of the keys, and use the keys\n> > to sign any transaction I want.\n> > * If Gazin is not open-source, then why should I trust the Gazin\n> > wallet until my incoming funds to an open-source wallet I control have\n> > been confirmed deeply?\n> >\n> > Lightning is still superior because:\n> >\n> > * It can be open-sourced completely and even though I have keys to my\n> > onchain funds, I *still* cannot steal the funds of my counterparty.\n> > * Even if I connect my open-source node to a node with a closed-source\n> > implementation, I know I can rely on receives from that node without\n> > waiting for the transaction to be confirmed deeply.\n> >\n> >\n> > All the benefits your scheme claims, are derived from the trust\n> > assumption, which is uninteresting, we already have those, they are\n> > called custodial wallets.\n> > Lightning allows for non-custodiality while achieving high global TPS\n> > and low fees.\n> > And a central idea of Lightning is the requirement to use an n-of-n to\n> > form smaller sub-moneys from the global money.\n> >\n> > Regards,\n> > ZmnSCPxj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T09:52:38",
                "message_text_only": "Hi James,\nSorry for not responding in detail.\nSo, lets jump in the critiques.\n\n> You're making the assumption that miners won't build on top of a block\nwith transactions they have not seen before or transactions that may\ncontain double spends of unconfirmed inputs\nNo, it is a wish. I hope in future miners consider this rule as well.\nBut for now, I absolutely do not count on this restriction. So, miner\ncan/will accept a valid block which contains some valid transactions\nwhich they didn\u2019t aware of those transactions in advance.\nIn order to explain how economically this won\u2019t happened, I have to\nrefer you to the fact that a conspiracy between a miner(mining pool) and\na group of issuers to mine a block full of cheating transaction will\nmakes 1.2 Bitcoin illicit income plus block coinbase income (6.25 BTC\nnow). The 1.2 is coming from average(max) 6,000 transaction per block *\nmax 20K Satoshi cheating benefit for each promised used UTXO in a\ndebt-doc(transaction).\nIn order to achieve this conspiracy, the mining pool has to mine the\nblock in stealth, lonely and without broadcasting any of transactions to\nBitcoin network. They have only 10 minutes to solve puzzle, otherwise\nthey have to change the block header and restart again. After all, if\nthey succeed, they have to divide this extra dirty 1.2 BTC in between. I\n\n\nI am not expert in mining pool calculations; you may help me to answer\nthese questions?\n\nConsider these given facts: \n\nMore hashrate = more success chance.\nMore hashrate = more electric cost = less profit per each participator\nThere is a minimum hashrate to have a minimum chance to solve the puzzle\nin next 10 minutes, otherwise it doesn't make sense to participate in an\nactivity that doesn't fit the minimum hope. \nHow much is this minimum hashrate? \nHow much costs this hashrate? \nNote the fact that the maximum extra income is a fixed 1.2 BTC. Would it\nbe economically cost effective (risk to reward) to dedicate your\nhashrate to mine this block? I am not sure. But if you show me the\nopposite by facts and numbers, I will highly appreciate you.\n\n> What would this BIP look like?\n> We suppose the miners always control transactions with doc-watchers\nAs I told before, these assumptions are my wishes and I never relayed on\nthese wishes. These are for future. For now, I just count on the\ncalculation that asked you to help.\n\n> there can be significant latency between the time a transaction is\nactually broadcast and hits the miners mempool and the time the miners\nactually switch to mining on top it\n\nIt is great. Although this latency could be lesser (in case of empty\nmempools), but Sabu likes this latency. Because the creditors will have\nmore time to be aware of a fraudulent activity from issuer and existence\nof a cheating transaction in mempool, so they have more time to send and\nbroad cast the GT to network. More latency, more chance in batch update.\nSo more chance for miners to face two or three transactions which are\nusing same UTXO but sending to different addresses and paying different\nfees. \nMore latency increases the chance of putting the higher-fee-payer\ntransaction in next block.\n\nRegards\nRaymo\n\n\nOn 2021-06-28 08:23, James Hilliard wrote:\n> On Mon, Jun 28, 2021 at 2:09 AM raymo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hi ZmnSCPxj,\n>>\n>> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n>> Sabu is a protocol and the Gazin wallet will be an implementation of\n>> that protocol. We will implement it in react-native language to support\n>> both Android and iPhone. Of course it will be open source and GPL3.\n>> Here is the repository and yet is empty :)\n>> https://github.com/raymaot/Gazin\n>>\n>> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n>> will be far better than Lightning.\n>> Can\u2019t you see the fact that in Sabu you do not need open and close\n>> channels ever? Can you imagine only this feature how dramatically\n>> decrease the transactions cost and how increase the distribution of\n>> nodes and improve privacy level? it makes every mobile wallet act like a\n>> lightning network.\n>> Did you note the fact that in Sabu protocol there is no routing? And the\n>> only people knew about a transaction are issuer and creditor? No one\n>> else won\u2019t be aware of transactions and million transactions per second\n>> can be sent and received and repeal dynamically without any footprint on\n>> any DLT?\n>>\n>> The English is not my mother language and probably my paper is not a\n>> smooth and easy to read paper, but these are not good excuse to not even\n>> reading a technical paper carefully and before understanding it or at\n>> least trying to understanding it start to complaining.\n> \n> Considering that you have not effectively addressed any of the inaccurate\n> assumptions made regarding how mining works that I pointed out earlier\n> I assume your proposal is not viable in practice.\n> \n> See:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019091.html\n> \n>>\n>> > All the benefits your scheme claims, are derived from the trust assumption\n>> No, All the benefits my scheme claims, are derived from economically\n>> rational decision of both issuer and creditors.\n>>\n>> Regards\n>> Raymo\n>>\n>>\n>>\n>> On 2021-06-28 05:20, ZmnSCPxj wrote:\n>> > Good morning Raymo,\n>> >\n>> >>\n>> >> It looks you already missed the entire design of Sabu and its\n>> >> restrictions. First of all, the Gazin wallet always controls the Sabu\n>> >> restrictions for every transaction in order to consider it as a valid\n>> >> transaction in a valid deal. That is, the creditor wallet controls the\n>> >> MT and GT in first place.\n>> >\n>> > Stop right there.\n>> >\n>> > From the above, what I get is, \"trust the Gazin wallet\".\n>> > Thus, the suggestion to just use Coinbase.\n>> > At least it has existed longer and has more current users that trust\n>> > it, rather than this Gazin thing.\n>> >\n>> >\n>> > Is Gazin open-source?\n>> >\n>> > * If Gazin is open-source, I could download the source code, make a\n>> > local copy that gives me a separate copy of the keys, and use the keys\n>> > to sign any transaction I want.\n>> > * If Gazin is not open-source, then why should I trust the Gazin\n>> > wallet until my incoming funds to an open-source wallet I control have\n>> > been confirmed deeply?\n>> >\n>> > Lightning is still superior because:\n>> >\n>> > * It can be open-sourced completely and even though I have keys to my\n>> > onchain funds, I *still* cannot steal the funds of my counterparty.\n>> > * Even if I connect my open-source node to a node with a closed-source\n>> > implementation, I know I can rely on receives from that node without\n>> > waiting for the transaction to be confirmed deeply.\n>> >\n>> >\n>> > All the benefits your scheme claims, are derived from the trust\n>> > assumption, which is uninteresting, we already have those, they are\n>> > called custodial wallets.\n>> > Lightning allows for non-custodiality while achieving high global TPS\n>> > and low fees.\n>> > And a central idea of Lightning is the requirement to use an n-of-n to\n>> > form smaller sub-moneys from the global money.\n>> >\n>> > Regards,\n>> > ZmnSCPxj\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "James Hilliard",
                "date": "2021-06-28T11:28:13",
                "message_text_only": "On Mon, Jun 28, 2021 at 3:52 AM <raymo at riseup.net> wrote:\n>\n>\n> Hi James,\n> Sorry for not responding in detail.\n> So, lets jump in the critiques.\n>\n> > You're making the assumption that miners won't build on top of a block\n> with transactions they have not seen before or transactions that may\n> contain double spends of unconfirmed inputs\n> No, it is a wish. I hope in future miners consider this rule as well.\n\nThere's only one practical approach I'm aware of for miners to actually\ndo this, and that would be to effectively make mining centralized.\nSo I would highly discourage this sort of policy when it comes to mining.\n\n> But for now, I absolutely do not count on this restriction. So, miner\n> can/will accept a valid block which contains some valid transactions\n> which they didn\u2019t aware of those transactions in advance.\n\nMempools among miners are generally not fully in sync with each other,\nrejecting valid blocks due to disagreements over which transactions were\nbroadcast would destabilize the network as you'd get a bunch of network\nforks.\n\n> In order to explain how economically this won\u2019t happened, I have to\n> refer you to the fact that a conspiracy between a miner(mining pool) and\n> a group of issuers to mine a block full of cheating transaction will\n> makes 1.2 Bitcoin illicit income plus block coinbase income (6.25 BTC\n> now). The 1.2 is coming from average(max) 6,000 transaction per block *\n> max 20K Satoshi cheating benefit for each promised used UTXO in a\n> debt-doc(transaction).\n\nBut there's no risk really for a miner to choose the most profitable\ntransactions to mine as long as they are valid per the network rules,\nthat is unless you make mining fully centralized.\n\n> In order to achieve this conspiracy, the mining pool has to mine the\n> block in stealth, lonely and without broadcasting any of transactions to\n> Bitcoin network. They have only 10 minutes to solve puzzle, otherwise\n> they have to change the block header and restart again. After all, if\n> they succeed, they have to divide this extra dirty 1.2 BTC in between. I\n\nMiners regularly change block headers, and if they don't broadcast the\ntransactions there wouldn't really be a time limit, so even a relatively small\nminer would be able to stealthily mine the transactions given enough time.\n\n>\n>\n> I am not expert in mining pool calculations; you may help me to answer\n> these questions?\n>\n> Consider these given facts:\n>\n> More hashrate = more success chance.\n> More hashrate = more electric cost = less profit per each participator\n> There is a minimum hashrate to have a minimum chance to solve the puzzle\n> in next 10 minutes, otherwise it doesn't make sense to participate in an\n> activity that doesn't fit the minimum hope.\n\nWhy would they need to solve the block within 10 minutes?\n\n> How much is this minimum hashrate?\n\nI don't think there is a minimum.\n\n> How much costs this hashrate?\n\nMiners just use pools to reduce variance, there isn't a set minimum size to\nsolo mine, only how much variance the miner can tolerate.\n\n> Note the fact that the maximum extra income is a fixed 1.2 BTC. Would it\n> be economically cost effective (risk to reward) to dedicate your\n> hashrate to mine this block? I am not sure. But if you show me the\n> opposite by facts and numbers, I will highly appreciate you.\n\nAll that matters is if that extra is more than they would otherwise get.\n\n>\n> > What would this BIP look like?\n> > We suppose the miners always control transactions with doc-watchers\n> As I told before, these assumptions are my wishes and I never relayed on\n> these wishes. These are for future. For now, I just count on the\n> calculation that asked you to help.\n\nThe reason I ask is because I don't think this is possible to do\nwithout massively\ncentralizing mining.\n\n>\n> > there can be significant latency between the time a transaction is\n> actually broadcast and hits the miners mempool and the time the miners\n> actually switch to mining on top it\n>\n> It is great. Although this latency could be lesser (in case of empty\n> mempools), but Sabu likes this latency. Because the creditors will have\n> more time to be aware of a fraudulent activity from issuer and existence\n> of a cheating transaction in mempool, so they have more time to send and\n> broad cast the GT to network. More latency, more chance in batch update.\n> So more chance for miners to face two or three transactions which are\n> using same UTXO but sending to different addresses and paying different\n> fees.\n> More latency increases the chance of putting the higher-fee-payer\n> transaction in next block.\n\nActually it's the opposite, if pools updated their templates every second\nthe GT transaction could almost immediately replace the fraudulent transaction,\nhowever due to the batch updating if the fraudulent transaction ended up\nin a template it could take a significant amount of time for it to be purged\nfrom all the mining pool templates, no matter the fee difference.\n\nUltimately this means that one should always expect miners to mine the\nfirst seen transaction for a significant period of time, with no guarantees\nthat it would be replaced.\n\n>\n> Regards\n> Raymo\n>\n>\n> On 2021-06-28 08:23, James Hilliard wrote:\n> > On Mon, Jun 28, 2021 at 2:09 AM raymo via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Hi ZmnSCPxj,\n> >>\n> >> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n> >> Sabu is a protocol and the Gazin wallet will be an implementation of\n> >> that protocol. We will implement it in react-native language to support\n> >> both Android and iPhone. Of course it will be open source and GPL3.\n> >> Here is the repository and yet is empty :)\n> >> https://github.com/raymaot/Gazin\n> >>\n> >> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n> >> will be far better than Lightning.\n> >> Can\u2019t you see the fact that in Sabu you do not need open and close\n> >> channels ever? Can you imagine only this feature how dramatically\n> >> decrease the transactions cost and how increase the distribution of\n> >> nodes and improve privacy level? it makes every mobile wallet act like a\n> >> lightning network.\n> >> Did you note the fact that in Sabu protocol there is no routing? And the\n> >> only people knew about a transaction are issuer and creditor? No one\n> >> else won\u2019t be aware of transactions and million transactions per second\n> >> can be sent and received and repeal dynamically without any footprint on\n> >> any DLT?\n> >>\n> >> The English is not my mother language and probably my paper is not a\n> >> smooth and easy to read paper, but these are not good excuse to not even\n> >> reading a technical paper carefully and before understanding it or at\n> >> least trying to understanding it start to complaining.\n> >\n> > Considering that you have not effectively addressed any of the inaccurate\n> > assumptions made regarding how mining works that I pointed out earlier\n> > I assume your proposal is not viable in practice.\n> >\n> > See:\n> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019091.html\n> >\n> >>\n> >> > All the benefits your scheme claims, are derived from the trust assumption\n> >> No, All the benefits my scheme claims, are derived from economically\n> >> rational decision of both issuer and creditors.\n> >>\n> >> Regards\n> >> Raymo\n> >>\n> >>\n> >>\n> >> On 2021-06-28 05:20, ZmnSCPxj wrote:\n> >> > Good morning Raymo,\n> >> >\n> >> >>\n> >> >> It looks you already missed the entire design of Sabu and its\n> >> >> restrictions. First of all, the Gazin wallet always controls the Sabu\n> >> >> restrictions for every transaction in order to consider it as a valid\n> >> >> transaction in a valid deal. That is, the creditor wallet controls the\n> >> >> MT and GT in first place.\n> >> >\n> >> > Stop right there.\n> >> >\n> >> > From the above, what I get is, \"trust the Gazin wallet\".\n> >> > Thus, the suggestion to just use Coinbase.\n> >> > At least it has existed longer and has more current users that trust\n> >> > it, rather than this Gazin thing.\n> >> >\n> >> >\n> >> > Is Gazin open-source?\n> >> >\n> >> > * If Gazin is open-source, I could download the source code, make a\n> >> > local copy that gives me a separate copy of the keys, and use the keys\n> >> > to sign any transaction I want.\n> >> > * If Gazin is not open-source, then why should I trust the Gazin\n> >> > wallet until my incoming funds to an open-source wallet I control have\n> >> > been confirmed deeply?\n> >> >\n> >> > Lightning is still superior because:\n> >> >\n> >> > * It can be open-sourced completely and even though I have keys to my\n> >> > onchain funds, I *still* cannot steal the funds of my counterparty.\n> >> > * Even if I connect my open-source node to a node with a closed-source\n> >> > implementation, I know I can rely on receives from that node without\n> >> > waiting for the transaction to be confirmed deeply.\n> >> >\n> >> >\n> >> > All the benefits your scheme claims, are derived from the trust\n> >> > assumption, which is uninteresting, we already have those, they are\n> >> > called custodial wallets.\n> >> > Lightning allows for non-custodiality while achieving high global TPS\n> >> > and low fees.\n> >> > And a central idea of Lightning is the requirement to use an n-of-n to\n> >> > form smaller sub-moneys from the global money.\n> >> >\n> >> > Regards,\n> >> > ZmnSCPxj\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T16:33:24",
                "message_text_only": "Hi James,\n\n> There's only one practical approach I'm aware of for miners to actually\n> do this, and that would be to effectively make mining centralized.\n> So I would highly discourage this sort of policy when it comes to mining.\nI do not know about the approach you talking about it, but my solution\nis not centralized at all. In Sabu proposal/architecture you can find\nthe doc-watchers network. It will be a torrent-like network where nodes\njust gossip the very light information about used UTXOs in Sabu\nprotocol. All nodes will receive information and flood it to other\nnodes. So, all nodes just mirror same information.\n\nTwo types of information are transferring through this peer-to-peer\ndoc-watcher network. \nOne is a very minimal record history of the UTXOs and a Merkle root of\nproper Sabu transactions. This information will be used by mobile wallet\nto be ensure issuer didn\u2019t promise same UTXO to different creditors. \n\nThe second data type are moving through doc-watchers nodes are signed\nUTXOs in order to signal to miners the fact that this UTXO is promised\nto some creditors. So, miners won\u2019t allow this UTXO to be used in other\nways to promise. In order to release (un-pledge) this UTXO the issuer\nhas to sign it again alongside a release request. \nIt is roughly what I suppose to be implemented and be respected by\nminers in future. It wouldn\u2019t be centralized unless you believe torrent\nis centralized. Miners can/will control UTXOs status (in sense of is\npromised to someone or not) before putting them in batch template.\n\n> Miners regularly change block headers, and if they don't broadcast the\n> transactions there wouldn't really be a time limit, so even a relatively small\n> miner would be able to stealthily mine the transactions given enough time.\nIt means a miner at least every 10 minutes has to change the header and\nre-try to solve the puzzle. Yes, a miner or a mining pool can stealthily\nmine transactions given enough time. And we already knew time of solving\na puzzle is almost random. So \u201cmaybe\u201d the small miner is enough lucky to\nfind a block full of fraudulent transaction. But the question is; this\neffort to fraud, how much more economically beneficial than\nparticipation in the healthy chain will be? The answer will tell us the\nfeasibility of Sabu protocol.\n\nThere is another protection that won't let the worker and creditor to\nmine stealthily a particular UTXO set for unlimited time. \nplease read the appendix \"V: Recycling UTXOs\" for more details.\n\n> Why would they need to solve the block within 10 minutes?\nYou are right, they are not forced to solve it in 10 minutes but\ndefinitely they have to change the header every 10 minutes. Otherwise,\nthey would end up in mining an orphan block which has no sense. \nAlthough it is not linear, but I used to believe changing block header\nevery 10 minutes will reduce efficiency and chance of solving puzzle\ndramatically. \n\t\n\n> All that matters is if that extra is more than they would otherwise get.\nYes, while it is true, but it is not enough. We need numbers and\ncalculation to find if this kind of attack is possible? And how much is\nthe possibility? And\u2026\nAn attack with 0.01% of success is obviously a failed plan and no one\nconsider it as a threat. Although even this small threat will be resolve\nby the mentioned BIP absolutely.\n\n\nAbout the timing details.\nYou are right. The less batch update time means more chance to\nfraudulent transaction replaced by the GT transaction. \nBTW even this scenario would be improved by suggested BIP\nimplementation, since the fraudulent transaction won\u2019t be in batch\ntemplate at all.\n\nBest\n\n\nOn 2021-06-28 11:28, James Hilliard wrote:\n> On Mon, Jun 28, 2021 at 3:52 AM <raymo at riseup.net> wrote:\n>>\n>>\n>> Hi James,\n>> Sorry for not responding in detail.\n>> So, lets jump in the critiques.\n>>\n>> > You're making the assumption that miners won't build on top of a block\n>> with transactions they have not seen before or transactions that may\n>> contain double spends of unconfirmed inputs\n>> No, it is a wish. I hope in future miners consider this rule as well.\n> \n> There's only one practical approach I'm aware of for miners to actually\n> do this, and that would be to effectively make mining centralized.\n> So I would highly discourage this sort of policy when it comes to mining.\n> \n>> But for now, I absolutely do not count on this restriction. So, miner\n>> can/will accept a valid block which contains some valid transactions\n>> which they didn\u2019t aware of those transactions in advance.\n> \n> Mempools among miners are generally not fully in sync with each other,\n> rejecting valid blocks due to disagreements over which transactions were\n> broadcast would destabilize the network as you'd get a bunch of network\n> forks.\n> \n>> In order to explain how economically this won\u2019t happened, I have to\n>> refer you to the fact that a conspiracy between a miner(mining pool) and\n>> a group of issuers to mine a block full of cheating transaction will\n>> makes 1.2 Bitcoin illicit income plus block coinbase income (6.25 BTC\n>> now). The 1.2 is coming from average(max) 6,000 transaction per block *\n>> max 20K Satoshi cheating benefit for each promised used UTXO in a\n>> debt-doc(transaction).\n> \n> But there's no risk really for a miner to choose the most profitable\n> transactions to mine as long as they are valid per the network rules,\n> that is unless you make mining fully centralized.\n> \n>> In order to achieve this conspiracy, the mining pool has to mine the\n>> block in stealth, lonely and without broadcasting any of transactions to\n>> Bitcoin network. They have only 10 minutes to solve puzzle, otherwise\n>> they have to change the block header and restart again. After all, if\n>> they succeed, they have to divide this extra dirty 1.2 BTC in between. I\n> \n> Miners regularly change block headers, and if they don't broadcast the\n> transactions there wouldn't really be a time limit, so even a relatively small\n> miner would be able to stealthily mine the transactions given enough time.\n> \n>>\n>>\n>> I am not expert in mining pool calculations; you may help me to answer\n>> these questions?\n>>\n>> Consider these given facts:\n>>\n>> More hashrate = more success chance.\n>> More hashrate = more electric cost = less profit per each participator\n>> There is a minimum hashrate to have a minimum chance to solve the puzzle\n>> in next 10 minutes, otherwise it doesn't make sense to participate in an\n>> activity that doesn't fit the minimum hope.\n> \n> Why would they need to solve the block within 10 minutes?\n> \n>> How much is this minimum hashrate?\n> \n> I don't think there is a minimum.\n> \n>> How much costs this hashrate?\n> \n> Miners just use pools to reduce variance, there isn't a set minimum size to\n> solo mine, only how much variance the miner can tolerate.\n> \n>> Note the fact that the maximum extra income is a fixed 1.2 BTC. Would it\n>> be economically cost effective (risk to reward) to dedicate your\n>> hashrate to mine this block? I am not sure. But if you show me the\n>> opposite by facts and numbers, I will highly appreciate you.\n> \n> All that matters is if that extra is more than they would otherwise get.\n> \n>>\n>> > What would this BIP look like?\n>> > We suppose the miners always control transactions with doc-watchers\n>> As I told before, these assumptions are my wishes and I never relayed on\n>> these wishes. These are for future. For now, I just count on the\n>> calculation that asked you to help.\n> \n> The reason I ask is because I don't think this is possible to do\n> without massively\n> centralizing mining.\n> \n>>\n>> > there can be significant latency between the time a transaction is\n>> actually broadcast and hits the miners mempool and the time the miners\n>> actually switch to mining on top it\n>>\n>> It is great. Although this latency could be lesser (in case of empty\n>> mempools), but Sabu likes this latency. Because the creditors will have\n>> more time to be aware of a fraudulent activity from issuer and existence\n>> of a cheating transaction in mempool, so they have more time to send and\n>> broad cast the GT to network. More latency, more chance in batch update.\n>> So more chance for miners to face two or three transactions which are\n>> using same UTXO but sending to different addresses and paying different\n>> fees.\n>> More latency increases the chance of putting the higher-fee-payer\n>> transaction in next block.\n> \n> Actually it's the opposite, if pools updated their templates every second\n> the GT transaction could almost immediately replace the fraudulent transaction,\n> however due to the batch updating if the fraudulent transaction ended up\n> in a template it could take a significant amount of time for it to be purged\n> from all the mining pool templates, no matter the fee difference.\n> \n> Ultimately this means that one should always expect miners to mine the\n> first seen transaction for a significant period of time, with no guarantees\n> that it would be replaced.\n> \n>>\n>> Regards\n>> Raymo\n>>\n>>\n>> On 2021-06-28 08:23, James Hilliard wrote:\n>> > On Mon, Jun 28, 2021 at 2:09 AM raymo via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> Hi ZmnSCPxj,\n>> >>\n>> >> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n>> >> Sabu is a protocol and the Gazin wallet will be an implementation of\n>> >> that protocol. We will implement it in react-native language to support\n>> >> both Android and iPhone. Of course it will be open source and GPL3.\n>> >> Here is the repository and yet is empty :)\n>> >> https://github.com/raymaot/Gazin\n>> >>\n>> >> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n>> >> will be far better than Lightning.\n>> >> Can\u2019t you see the fact that in Sabu you do not need open and close\n>> >> channels ever? Can you imagine only this feature how dramatically\n>> >> decrease the transactions cost and how increase the distribution of\n>> >> nodes and improve privacy level? it makes every mobile wallet act like a\n>> >> lightning network.\n>> >> Did you note the fact that in Sabu protocol there is no routing? And the\n>> >> only people knew about a transaction are issuer and creditor? No one\n>> >> else won\u2019t be aware of transactions and million transactions per second\n>> >> can be sent and received and repeal dynamically without any footprint on\n>> >> any DLT?\n>> >>\n>> >> The English is not my mother language and probably my paper is not a\n>> >> smooth and easy to read paper, but these are not good excuse to not even\n>> >> reading a technical paper carefully and before understanding it or at\n>> >> least trying to understanding it start to complaining.\n>> >\n>> > Considering that you have not effectively addressed any of the inaccurate\n>> > assumptions made regarding how mining works that I pointed out earlier\n>> > I assume your proposal is not viable in practice.\n>> >\n>> > See:\n>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019091.html\n>> >\n>> >>\n>> >> > All the benefits your scheme claims, are derived from the trust assumption\n>> >> No, All the benefits my scheme claims, are derived from economically\n>> >> rational decision of both issuer and creditors.\n>> >>\n>> >> Regards\n>> >> Raymo\n>> >>\n>> >>\n>> >>\n>> >> On 2021-06-28 05:20, ZmnSCPxj wrote:\n>> >> > Good morning Raymo,\n>> >> >\n>> >> >>\n>> >> >> It looks you already missed the entire design of Sabu and its\n>> >> >> restrictions. First of all, the Gazin wallet always controls the Sabu\n>> >> >> restrictions for every transaction in order to consider it as a valid\n>> >> >> transaction in a valid deal. That is, the creditor wallet controls the\n>> >> >> MT and GT in first place.\n>> >> >\n>> >> > Stop right there.\n>> >> >\n>> >> > From the above, what I get is, \"trust the Gazin wallet\".\n>> >> > Thus, the suggestion to just use Coinbase.\n>> >> > At least it has existed longer and has more current users that trust\n>> >> > it, rather than this Gazin thing.\n>> >> >\n>> >> >\n>> >> > Is Gazin open-source?\n>> >> >\n>> >> > * If Gazin is open-source, I could download the source code, make a\n>> >> > local copy that gives me a separate copy of the keys, and use the keys\n>> >> > to sign any transaction I want.\n>> >> > * If Gazin is not open-source, then why should I trust the Gazin\n>> >> > wallet until my incoming funds to an open-source wallet I control have\n>> >> > been confirmed deeply?\n>> >> >\n>> >> > Lightning is still superior because:\n>> >> >\n>> >> > * It can be open-sourced completely and even though I have keys to my\n>> >> > onchain funds, I *still* cannot steal the funds of my counterparty.\n>> >> > * Even if I connect my open-source node to a node with a closed-source\n>> >> > implementation, I know I can rely on receives from that node without\n>> >> > waiting for the transaction to be confirmed deeply.\n>> >> >\n>> >> >\n>> >> > All the benefits your scheme claims, are derived from the trust\n>> >> > assumption, which is uninteresting, we already have those, they are\n>> >> > called custodial wallets.\n>> >> > Lightning allows for non-custodiality while achieving high global TPS\n>> >> > and low fees.\n>> >> > And a central idea of Lightning is the requirement to use an n-of-n to\n>> >> > form smaller sub-moneys from the global money.\n>> >> >\n>> >> > Regards,\n>> >> > ZmnSCPxj\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-06-28T15:28:44",
                "message_text_only": "Good morning Raymo,\n\n> Hi ZmnSCPxj,\n>\n> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n> Sabu is a protocol and the Gazin wallet will be an implementation of\n> that protocol. We will implement it in react-native language to support\n> both Android and iPhone. Of course it will be open source and GPL3.\n> Here is the repository and yet is empty :)\n> https://github.com/raymaot/Gazin\n>\n> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n> will be far better than Lightning.\n> Can\u2019t you see the fact that in Sabu you do not need open and close\n> channels ever? Can you imagine only this feature how dramatically\n> decrease the transactions cost and how increase the distribution of\n> nodes and improve privacy level? it makes every mobile wallet act like a\n> lightning network.\n> Did you note the fact that in Sabu protocol there is no routing? And the\n> only people knew about a transaction are issuer and creditor? No one\n> else won\u2019t be aware of transactions and million transactions per second\n> can be sent and received and repeal dynamically without any footprint on\n> any DLT?\n>\n> The English is not my mother language and probably my paper is not a\n> smooth and easy to read paper, but these are not good excuse to not even\n> reading a technical paper carefully and before understanding it or at\n> least trying to understanding it start to complaining.\n\n\nWhat prevents the creditor from signing a transaction that is neither a valid MT nor a GT?\n\nNothing.\n\nIn Lightning, sure one side can sign a transaction that is not a valid commitment transaction, but good luck getting the other side to *also* sign the transaction; it will not.\nThus, you need n-of-n.\n\n1-of-1 is simply not secure, full stop, you need to redesign the whole thing to use *at least* 2-of-2.\nAt which point you will have reinvented Lightning.\n\nOtherwise, you are simply trusting that the wallet is implemented correctly, and in particular, that any creditor will not simply insert code in your open-source software to sign invalid transactions.\n\nWith a 1-of-1, any invalid-in-Sabu transaction can still be valid in the Bitcoin blockchain layer, thus the scheme is simply insecure.\n\nFeatures are meaningless without this kind of basic trust-minimization security.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T16:58:37",
                "message_text_only": "> What prevents the creditor from signing a transaction that is neither a valid MT nor a GT?\nPlease stop comparing Sabu and Lightning. Otherwise, it won't let you\ntrue understanding of Sabu. \nIn Sabu protocol, only the issuer (the UTXO owner) can sign the\ntransaction and decide how much money goes to whom. The engaged UTXO(s)\nbelonged to issuer and the creditor never put UTXO in transaction, thus\nnever can sign the transaction because he has no ownership on the used\nUTXOs. \nAs I already wrote in paper, the issuer creates and signs a transaction\nand delivers it to creditor(s). If a creditor intends to send all or\npart of his money to another person (AKA spending his money), he will\nask for a new signed transaction from issuer, in which a part of his\ncredit will transfer to another creditor.\n\nThe Sabu has nothing with Lightning. Sabu has a peer-to-peer network of\ndoc-watchers which maybe it was the cause you always compare it to\nLightning. \nI am not presenting lightning neither condemning it. \nI am presenting Sabu protocol. \nPlease let concentrate on how Sabu works or not works.\n\n\n\nOn 2021-06-28 15:28, ZmnSCPxj wrote:\n> Good morning Raymo,\n> \n>> Hi ZmnSCPxj,\n>>\n>> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n>> Sabu is a protocol and the Gazin wallet will be an implementation of\n>> that protocol. We will implement it in react-native language to support\n>> both Android and iPhone. Of course it will be open source and GPL3.\n>> Here is the repository and yet is empty :)\n>> https://github.com/raymaot/Gazin\n>>\n>> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n>> will be far better than Lightning.\n>> Can\u2019t you see the fact that in Sabu you do not need open and close\n>> channels ever? Can you imagine only this feature how dramatically\n>> decrease the transactions cost and how increase the distribution of\n>> nodes and improve privacy level? it makes every mobile wallet act like a\n>> lightning network.\n>> Did you note the fact that in Sabu protocol there is no routing? And the\n>> only people knew about a transaction are issuer and creditor? No one\n>> else won\u2019t be aware of transactions and million transactions per second\n>> can be sent and received and repeal dynamically without any footprint on\n>> any DLT?\n>>\n>> The English is not my mother language and probably my paper is not a\n>> smooth and easy to read paper, but these are not good excuse to not even\n>> reading a technical paper carefully and before understanding it or at\n>> least trying to understanding it start to complaining.\n> \n> \n> What prevents the creditor from signing a transaction that is neither\n> a valid MT nor a GT?\n> \n> Nothing.\n> \n> In Lightning, sure one side can sign a transaction that is not a valid\n> commitment transaction, but good luck getting the other side to *also*\n> sign the transaction; it will not.\n> Thus, you need n-of-n.\n> \n> 1-of-1 is simply not secure, full stop, you need to redesign the whole\n> thing to use *at least* 2-of-2.\n> At which point you will have reinvented Lightning.\n> \n> Otherwise, you are simply trusting that the wallet is implemented\n> correctly, and in particular, that any creditor will not simply insert\n> code in your open-source software to sign invalid transactions.\n> \n> With a 1-of-1, any invalid-in-Sabu transaction can still be valid in\n> the Bitcoin blockchain layer, thus the scheme is simply insecure.\n> \n> Features are meaningless without this kind of basic trust-minimization security.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "Alex Schoof",
                "date": "2021-06-28T17:58:47",
                "message_text_only": "Hey Raymo,\n\nHere\u2019s a scenario:\n\nAlice has one UTXO.\n\nSuppose Alice sends Bob an MT and a GT over Sabu, and Bob gives whatever\ngoods and services to Alice.\n\nAlice then goes and spends that UTXO to Charlie with a higher fee than the\nGT she sent to Bob. Charlie has no idea that Bob exists, because he gets a\nvalid UTXO. Bob can try to publish the GT, but if Alice crafts the fees\nright, the TX to Charlie will be confirmed first. Alice now has goods from\nboth Bob and Charlie, and has only paid one of them. She has is able to\ndouble spend because: (1) the gossip network you describe for sabu only\nprotects people if everyone is on sabu and playing by the rules, it does\nnot prevent spending outside of sabu; and (2) there is nothing encumbering\nthe onchain UTXO and preventing it from being spent outside of a sabu\npayment.\n\nThe reason people keep brining up Lightning is because Lightning solves\nthis problem by having a channel-open involve locking funds in a 2-of-2\nmultisig, preventing them from being spent outside of lightning until the\nchannel is torn down.\n\nIf there is nothing stopping someone from spending onchain funds outside of\nthe context of your system, then your system does not prevent double spends.\n\nHope that explanation helps.\n\nAlex\n\nOn Mon, Jun 28, 2021 at 1:36 PM raymo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> > What prevents the creditor from signing a transaction that is neither a\n> valid MT nor a GT?\n> Please stop comparing Sabu and Lightning. Otherwise, it won't let you\n> true understanding of Sabu.\n> In Sabu protocol, only the issuer (the UTXO owner) can sign the\n> transaction and decide how much money goes to whom. The engaged UTXO(s)\n> belonged to issuer and the creditor never put UTXO in transaction, thus\n> never can sign the transaction because he has no ownership on the used\n> UTXOs.\n> As I already wrote in paper, the issuer creates and signs a transaction\n> and delivers it to creditor(s). If a creditor intends to send all or\n> part of his money to another person (AKA spending his money), he will\n> ask for a new signed transaction from issuer, in which a part of his\n> credit will transfer to another creditor.\n>\n> The Sabu has nothing with Lightning. Sabu has a peer-to-peer network of\n> doc-watchers which maybe it was the cause you always compare it to\n> Lightning.\n> I am not presenting lightning neither condemning it.\n> I am presenting Sabu protocol.\n> Please let concentrate on how Sabu works or not works.\n>\n>\n>\n> On 2021-06-28 15:28, ZmnSCPxj wrote:\n> > Good morning Raymo,\n> >\n> >> Hi ZmnSCPxj,\n> >>\n> >> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n> >> Sabu is a protocol and the Gazin wallet will be an implementation of\n> >> that protocol. We will implement it in react-native language to support\n> >> both Android and iPhone. Of course it will be open source and GPL3.\n> >> Here is the repository and yet is empty :)\n> >> https://github.com/raymaot/Gazin\n> >>\n> >> I wonder why you do not look carefully into the proposal! IMHO the Sabu\n> >> will be far better than Lightning.\n> >> Can\u2019t you see the fact that in Sabu you do not need open and close\n> >> channels ever? Can you imagine only this feature how dramatically\n> >> decrease the transactions cost and how increase the distribution of\n> >> nodes and improve privacy level? it makes every mobile wallet act like a\n> >> lightning network.\n> >> Did you note the fact that in Sabu protocol there is no routing? And the\n> >> only people knew about a transaction are issuer and creditor? No one\n> >> else won\u2019t be aware of transactions and million transactions per second\n> >> can be sent and received and repeal dynamically without any footprint on\n> >> any DLT?\n> >>\n> >> The English is not my mother language and probably my paper is not a\n> >> smooth and easy to read paper, but these are not good excuse to not even\n> >> reading a technical paper carefully and before understanding it or at\n> >> least trying to understanding it start to complaining.\n> >\n> >\n> > What prevents the creditor from signing a transaction that is neither\n> > a valid MT nor a GT?\n> >\n> > Nothing.\n> >\n> > In Lightning, sure one side can sign a transaction that is not a valid\n> > commitment transaction, but good luck getting the other side to *also*\n> > sign the transaction; it will not.\n> > Thus, you need n-of-n.\n> >\n> > 1-of-1 is simply not secure, full stop, you need to redesign the whole\n> > thing to use *at least* 2-of-2.\n> > At which point you will have reinvented Lightning.\n> >\n> > Otherwise, you are simply trusting that the wallet is implemented\n> > correctly, and in particular, that any creditor will not simply insert\n> > code in your open-source software to sign invalid transactions.\n> >\n> > With a 1-of-1, any invalid-in-Sabu transaction can still be valid in\n> > the Bitcoin blockchain layer, thus the scheme is simply insecure.\n> >\n> > Features are meaningless without this kind of basic trust-minimization\n> security.\n> >\n> > Regards,\n> > ZmnSCPxj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-- \n\n\nAlex Schoof\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/2de6601e/attachment-0001.html>"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T19:07:40",
                "message_text_only": "Hey Alex,\n\nYour scenario works perfectly unless we put some restrictions on\naccepting transaction by creditor (in our case Bob). \nThese are restrictions:\nAlice has to use a UTXO (or some UTXOs) worth at least 40,000 Sat as\ntransaction input.\nAlice has to reserve 10,000 Sat as transaction fee (for MT transaction)\nregardless of transaction length or input/output amounts. \nAlice always pays at least 4,000 Sat of BTC-transaction-fee, and the\n6,000 remined fee must be paid by she and Bob in proportion to their\noutputs amounts)\nAlice can issue a transaction the has maximum 20,000 outputs for\ncreditors (Bob and others).\nThe rest (if exist) is change back to Alice address.\nThe GT is formed based on MT.\nBob considers a transaction couple (MT, GT) valid only if they respect\nthese rules.\n\nLet\u2019s put it in practice using some numbers (although you can find more\ndetailed explanation in paper).\n\nThe MT would be like that:\nInput: 40,000 Satoshi\nOutputs:\nBob: 20,000\nBTC-fee: 10,000\nChange back to Alice: 10,000\n\nBased on this MT the GT will be\nInput: 40,000 Satoshi\nOutputs:\nBob: 20,000 \u2013 20,000*70% = 6,000\nBTC-fee: 10,000 + (14,000 of Bob\u2019s output) + (1,500 of Alice\u2019s change\nback) = 25,500\nChange back to Alice: 10,000 \u2013 10,000*15% = 8,500\n\nNow if Alice wants to spend UTXO to Charlie with higher fee, she has to\npay at least 25,500 + 1 Satoshi as BTC fee in order to convince miners\nto put his fraudulent transaction instead the GT in next block. \nAlice already got 20,000 Sat profit from Bob. Now she can earn another\n14,999 Sat profit from Charlie because of same UTXO worth 40,000\nSatoshi.\nIndeed, she spent 40,000 Sat and in total got equal to 34,999 Sat goods\nor services.\nIs she a winner? \nI am not sure! \nWhat do you think?\nBy the way, we can tune the kI and kC coefficients to reduce this 34,999\nto 30,000 or even less.\nIn this case Alice rationally prefers to not cheat on Bob.\nThe complementary protection would be the mentioned BIP for miners.\nThat BIP not only solve all these .01% risks but also would be a huge\nimprovement of adapting smart contracts (and consequently DeFi) on top\nof current Bitcoin with lowest cost, but it is another story for another\nday.\n\nRaymo\n\n\nOn 2021-06-28 17:58, Alex Schoof wrote:\n> Hey Raymo,\n> \n> Here\u2019s a scenario: \n> \n> Alice has one UTXO. \n> \n> Suppose Alice sends Bob an MT and a GT over Sabu, and Bob gives\n> whatever goods and services to Alice. \n> \n> Alice then goes and spends that UTXO to Charlie with a higher fee than\n> the GT she sent to Bob. Charlie has no idea that Bob exists, because\n> he gets a valid UTXO. Bob can try to publish the GT, but if Alice\n> crafts the fees right, the TX to Charlie will be confirmed first.\n> Alice now has goods from both Bob and Charlie, and has only paid one\n> of them. She has is able to double spend because: (1) the gossip\n> network you describe for sabu only protects people if everyone is on\n> sabu and playing by the rules, it does not prevent spending outside of\n> sabu; and (2) there is nothing encumbering the onchain UTXO and\n> preventing it from being spent outside of a sabu payment. \n> \n> The reason people keep brining up Lightning is because Lightning\n> solves this problem by having a channel-open involve locking funds in\n> a 2-of-2 multisig, preventing them from being spent outside of\n> lightning until the channel is torn down. \n> \n> If there is nothing stopping someone from spending onchain funds\n> outside of the context of your system, then your system does not\n> prevent double spends.\n> \n> Hope that explanation helps. \n> \n> Alex\n> \n> On Mon, Jun 28, 2021 at 1:36 PM raymo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>>> What prevents the creditor from signing a transaction that is\n>> neither a valid MT nor a GT?\n>> Please stop comparing Sabu and Lightning. Otherwise, it won't let\n>> you\n>> true understanding of Sabu.\n>> In Sabu protocol, only the issuer (the UTXO owner) can sign the\n>> transaction and decide how much money goes to whom. The engaged\n>> UTXO(s)\n>> belonged to issuer and the creditor never put UTXO in transaction,\n>> thus\n>> never can sign the transaction because he has no ownership on the\n>> used\n>> UTXOs.\n>> As I already wrote in paper, the issuer creates and signs a\n>> transaction\n>> and delivers it to creditor(s). If a creditor intends to send all or\n>> part of his money to another person (AKA spending his money), he\n>> will\n>> ask for a new signed transaction from issuer, in which a part of his\n>> credit will transfer to another creditor.\n>>\n>> The Sabu has nothing with Lightning. Sabu has a peer-to-peer network\n>> of\n>> doc-watchers which maybe it was the cause you always compare it to\n>> Lightning.\n>> I am not presenting lightning neither condemning it.\n>> I am presenting Sabu protocol.\n>> Please let concentrate on how Sabu works or not works.\n>>\n>> On 2021-06-28 15:28, ZmnSCPxj wrote:\n>>> Good morning Raymo,\n>>>\n>>>> Hi ZmnSCPxj,\n>>>>\n>>>> Why you get the signal \u201ctrust the Gazin wallet\u201d?\n>>>> Sabu is a protocol and the Gazin wallet will be an implementation\n>> of\n>>>> that protocol. We will implement it in react-native language to\n>> support\n>>>> both Android and iPhone. Of course it will be open source and\n>> GPL3.\n>>>> Here is the repository and yet is empty :)\n>>>> https://github.com/raymaot/Gazin\n>>>>\n>>>> I wonder why you do not look carefully into the proposal! IMHO\n>> the Sabu\n>>>> will be far better than Lightning.\n>>>> Can\u2019t you see the fact that in Sabu you do not need open and\n>> close\n>>>> channels ever? Can you imagine only this feature how dramatically\n>>>> decrease the transactions cost and how increase the distribution\n>> of\n>>>> nodes and improve privacy level? it makes every mobile wallet act\n>> like a\n>>>> lightning network.\n>>>> Did you note the fact that in Sabu protocol there is no routing?\n>> And the\n>>>> only people knew about a transaction are issuer and creditor? No\n>> one\n>>>> else won\u2019t be aware of transactions and million transactions\n>> per second\n>>>> can be sent and received and repeal dynamically without any\n>> footprint on\n>>>> any DLT?\n>>>>\n>>>> The English is not my mother language and probably my paper is\n>> not a\n>>>> smooth and easy to read paper, but these are not good excuse to\n>> not even\n>>>> reading a technical paper carefully and before understanding it\n>> or at\n>>>> least trying to understanding it start to complaining.\n>>>\n>>>\n>>> What prevents the creditor from signing a transaction that is\n>> neither\n>>> a valid MT nor a GT?\n>>>\n>>> Nothing.\n>>>\n>>> In Lightning, sure one side can sign a transaction that is not a\n>> valid\n>>> commitment transaction, but good luck getting the other side to\n>> *also*\n>>> sign the transaction; it will not.\n>>> Thus, you need n-of-n.\n>>>\n>>> 1-of-1 is simply not secure, full stop, you need to redesign the\n>> whole\n>>> thing to use *at least* 2-of-2.\n>>> At which point you will have reinvented Lightning.\n>>>\n>>> Otherwise, you are simply trusting that the wallet is implemented\n>>> correctly, and in particular, that any creditor will not simply\n>> insert\n>>> code in your open-source software to sign invalid transactions.\n>>>\n>>> With a 1-of-1, any invalid-in-Sabu transaction can still be valid\n>> in\n>>> the Bitcoin blockchain layer, thus the scheme is simply insecure.\n>>>\n>>> Features are meaningless without this kind of basic\n>> trust-minimization security.\n>>>\n>>> Regards,\n>>> ZmnSCPxj\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>  -- \n> \n> Alex Schoof"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-06-29T21:42:26",
                "message_text_only": "Good morning Raymo,\n\n> Hey Alex,\n>\n> Your scenario works perfectly unless we put some restrictions on\n> accepting transaction by creditor (in our case Bob).\n> These are restrictions:\n> Alice has to use a UTXO (or some UTXOs) worth at least 40,000 Sat as\n> transaction input.\n> Alice has to reserve 10,000 Sat as transaction fee (for MT transaction)\n> regardless of transaction length or input/output amounts.\n> Alice always pays at least 4,000 Sat of BTC-transaction-fee, and the\n> 6,000 remined fee must be paid by she and Bob in proportion to their\n> outputs amounts)\n> Alice can issue a transaction the has maximum 20,000 outputs for\n> creditors (Bob and others).\n> The rest (if exist) is change back to Alice address.\n> The GT is formed based on MT.\n> Bob considers a transaction couple (MT, GT) valid only if they respect\n> these rules.\n>\n> Let\u2019s put it in practice using some numbers (although you can find more\n> detailed explanation in paper).\n>\n> The MT would be like that:\n> Input: 40,000 Satoshi\n> Outputs:\n> Bob: 20,000\n> BTC-fee: 10,000\n> Change back to Alice: 10,000\n>\n> Based on this MT the GT will be\n> Input: 40,000 Satoshi\n> Outputs:\n> Bob: 20,000 \u2013 20,00070% = 6,000\n> BTC-fee: 10,000 + (14,000 of Bob\u2019s output) + (1,500 of Alice\u2019s change\n> back) = 25,500\n> Change back to Alice: 10,000 \u2013 10,00015% = 8,500\n>\n> Now if Alice wants to spend UTXO to Charlie with higher fee, she has to\n> pay at least 25,500 + 1 Satoshi as BTC fee in order to convince miners\n> to put his fraudulent transaction instead the GT in next block.\n> Alice already got 20,000 Sat profit from Bob. Now she can earn another\n> 14,999 Sat profit from Charlie because of same UTXO worth 40,000\n> Satoshi.\n> Indeed, she spent 40,000 Sat and in total got equal to 34,999 Sat goods\n> or services.\n> Is she a winner?\n> I am not sure!\n> What do you think?\n\nYou assume here that Alice the issuer only has a single UTXO and that it creates a single transaction spending that UTXO.\n\nIt is helpful to remember that miners consider fee*rate*, but your security analysis is dependent on *fee* and not fee*rate*.\n\nNow consider, what if Alice creates 1000 UTXOs, promises GTs and MTs to 1000 different Bobs?\n\nNow, a GT has one input and two outputs.\n\n1000 GTs have 1000 overheads (`nLockTime` and `nVersion` and so on), 1000 inputs, and 2000 outputs.\n\nNow Alice the issuer, being the sole signer, can create a fraudulent transaction that spends all 1000 UTXOs and spends it to a single Carol output.\n\nThis fraudulent transaction has 1 overhead, 1000 inputs, and 1 output.\n\nDo you think Alice can get a better fee*rate* on that transaction while paying a lower aggregate *fee* than all the GTs combined?\nRemember, you based your security analysis on Alice being forced to pay a larger *fee*, but neglect that miners judge transactions based on fee*rate*, which is subtly different and not what you are relying on.\nI am sure that there exists some large enough number of UTXOs where a single aggregating fraudulent transaction will be far cheaper than the tons of little GTs your security analysis depends on.\n\nThis is why we do not use 1-of-1 signers in safe offchain protocols.\nNot your keys, not your coins.\n\n--\n\nIn addition, your analysis is based on assuming that miners are perfect rational beings of perfect rationality, ***and*** are omniscient.\n\nIn reality, miners possess bounded knowledge, i.e. they do not know everything.\n\nEven if Alice is in possession of only a single UTXO, Alice can still feed miners a transaction with lower feerate than the MT, then feed the rest of the network with a valid MT.\nBecause transactions propagate through the network but this propagation is ***not*** instantaneous, it is possible for the MT to reach the miners later than the fraudulent transaction.\nIn this window of time, a block may be mined that includes the fraudulent transaction, simply because the lucky miner never managed to hear of the correct MT.\n\nThis attack is essentially costless to Alice, especially for big enough transactions where mining fees are a negligible part of the payment.\n\nThis is why we do not use 1-of-1 signers in safe offchain protocols.\nNot your keys, not your coins.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-30T12:21:27",
                "message_text_only": "Dear ZmnSCPxj\n\nThanks for dedicating time to read carefully the Sabu proposal and many\nthanks for your accurate point. So, lets fix it.\n\nI didn\u2019t suppose Alice has only one UTXO, instead I expect every issuer\nuse hundreds or even millions UTXOs (for optimal benefit each worth\nexactly 40,000 Satoshi) in Sabu protocol in order to earn notable\nSabu-transactions-fees daily.\n\nYour scenario is correct and Alice can send a batch transaction which\nhas higher feeRate, but less fee amount comparing total fees of N number\nof GT transaction.\nIt is true, the batch transaction will win the race and will go to next\nblock instead of N small GT transactions.\nBut Alice herself is not the winner, since she paid a huge transaction\nfee to miner, while in honest acting didn\u2019t have to pay at all.\nLet\u2019s show it by numbers.\n\nImagine Alice convinced some people to pay her money and accept the MT\nand GT transactions in exchange.\nAlice issued N transactions and delivered to these guys.\nTill now Alice got money equal to N * Maximum debt per transaction,\nwhich is 20,000 N.\n\nA single GT length = length of Critical part of GT (named C) + length of\nRedundant part of GT (named R)\n\nCoefficient of Honesty benefits (called H) = C/R\nThe bigger H means less Redundant part, means less benefit in batch\ntransaction.\nThe worst H would be 1 or less than 1. I can guess H in Bitcoin\ntransaction is 4 or higher, but for now we take it 4. Probably you can\nhelp us and tell what H is exactly.\n\nThe N GTs length = N * (C + R)\nOne batch transaction length = (N * C) + R\n\nThe GT feeRate = GTfee / (C + R)\nThe batch transaction feeRate = batchFee / ((N * C) + R)\n\nWe need to batch transaction feeRate be higher than each single GT\nfeeRate (more or less the feeRate for all GTs are same).\nThus\nbatchFee / ((N * C) + R) must be bigger or at least equal to GTfee / (C\n+ R)\nso,\nbatchFee / ((N * C) + R) >= GTfee / (C + R)\n\nwe already knew H = C/R then C = HR\n\nafter simplifying\n\nbatchFee >= (GTfee * ((N * H) + 1)) / (H + 1)\n\nSo, this is the minimum fee that Alice has to pay for her batch\ntransaction in order to compete with GTs feeRate.\n\nLet\u2019s put the numbers\n>From my previous example for @Alex Schoof, we already knew that the\nGTfee is 25,500 Satoshi\nH is 4 (please let me know what is more realistic number)\nI think N in max exploitation is 10,000. If Alice takes entire block\nspace, she won\u2019t be able to put more than 10,000 inputs in a single\ntransaction in one block.\n\nSo,\nbatchFee must be higher than (25,500 * ((10,000 * 4) + 1)) / (4 + 1)\nbatchFee must be higher than 2.04 Bitcoins. While if Alice was acting\nhonestly, she had to pay zero BTC-transaction-fee, since the Sabu\ntransactions are aimed to be circulated in Sabu network forever.\n\nBut how much benefit Alice got? We already knew that Alice had fooled\nSome people by 10,000 transactions and got 10,000 transaction * 20,000\nMax debt per transaction. She got 2 Bitcoins.\n\nAfter all, she lost 0.04 BTC. She definitely is a loser, unless she has\nconspiracy with miners which is another scenario and I already explained\nit.\n\nNote these facts:\nH is higher than 4.\nIt is impossible to fit a batch transaction with 10,000 inputs and one\noutput in one block.\nAnd after all we can simply hedge batch transaction benefits by fine\ntuning the \u201cmaximum allowed debt per transaction\u201d.\n\nFinally, the complementary protection to cover 0.01% remind risk of\nissuer irrationality, would be the BIPxxx \u201cfor flagging/unflagging\npromised UTXOs\u201d which is my suggestion.\nIt will be good for Sabu.\nIt will be good for adapting wide range of innovative smart contracts on\ntop of current Bitcoin with no risk and cost.\n@James Hilliard\nIf it implemented wisely, never won't affect on network stability.\n\n\n> your analysis is based on assuming that miners are perfect rational beings of perfect rationality,\n> ***and*** are omniscient.\nThat\u2019s not true! The proposal just assume miners are looking for more\nprofit.\nThe suggested BIPxxx \u201cfor flagging/unflagging promised UTXOs\u201d (if\ncommunity accept it) would prepare a knowledge about promised UTXOs for\nminer.\n\n\n> Even if Alice is in possession of only a single UTXO, Alice can still feed miners a transaction\n> with lower feerate than the MT, then feed the rest of the network with a valid MT.\nIt is not important in what order Alice propagate which (MT, or whatever\ntransaction) to Bitcoin network.\nThe point is, before putting this transaction in next block, the\ncreditor wallet will be aware of this renege and will send the GT to\nnetwork.\nThe rest is miner\u2019s decision to put transaction with higher fee rate to\nnext block.\n\n\n> This attack is essentially costless to Alice,\n> especially for big enough transactions where mining fees are a negligible part of the payment.\nNo, in Sabu we have not big payments. Each big payment must be managed\nthrough N small transactions with each transaction max output less than\n20,000 Satoshi.\n\n\nRegards\nRaymo\n\n\n\n\nOn 2021-06-29 21:42, ZmnSCPxj wrote:\n> Good morning Raymo,\n> \n>> Hey Alex,\n>> \n>> Your scenario works perfectly unless we put some restrictions on\n>> accepting transaction by creditor (in our case Bob).\n>> These are restrictions:\n>> Alice has to use a UTXO (or some UTXOs) worth at least 40,000 Sat as\n>> transaction input.\n>> Alice has to reserve 10,000 Sat as transaction fee (for MT transaction)\n>> regardless of transaction length or input/output amounts.\n>> Alice always pays at least 4,000 Sat of BTC-transaction-fee, and the\n>> 6,000 remined fee must be paid by she and Bob in proportion to their\n>> outputs amounts)\n>> Alice can issue a transaction the has maximum 20,000 outputs for\n>> creditors (Bob and others).\n>> The rest (if exist) is change back to Alice address.\n>> The GT is formed based on MT.\n>> Bob considers a transaction couple (MT, GT) valid only if they respect\n>> these rules.\n>> \n>> Let\u2019s put it in practice using some numbers (although you can find more\n>> detailed explanation in paper).\n>> \n>> The MT would be like that:\n>> Input: 40,000 Satoshi\n>> Outputs:\n>> Bob: 20,000\n>> BTC-fee: 10,000\n>> Change back to Alice: 10,000\n>> \n>> Based on this MT the GT will be\n>> Input: 40,000 Satoshi\n>> Outputs:\n>> Bob: 20,000 \u2013 20,00070% = 6,000\n>> BTC-fee: 10,000 + (14,000 of Bob\u2019s output) + (1,500 of Alice\u2019s change\n>> back) = 25,500\n>> Change back to Alice: 10,000 \u2013 10,00015% = 8,500\n>> \n>> Now if Alice wants to spend UTXO to Charlie with higher fee, she has to\n>> pay at least 25,500 + 1 Satoshi as BTC fee in order to convince miners\n>> to put his fraudulent transaction instead the GT in next block.\n>> Alice already got 20,000 Sat profit from Bob. Now she can earn another\n>> 14,999 Sat profit from Charlie because of same UTXO worth 40,000\n>> Satoshi.\n>> Indeed, she spent 40,000 Sat and in total got equal to 34,999 Sat goods\n>> or services.\n>> Is she a winner?\n>> I am not sure!\n>> What do you think?\n> \n> You assume here that Alice the issuer only has a single UTXO and that\n> it creates a single transaction spending that UTXO.\n> \n> It is helpful to remember that miners consider fee*rate*, but your\n> security analysis is dependent on *fee* and not fee*rate*.\n> \n> Now consider, what if Alice creates 1000 UTXOs, promises GTs and MTs\n> to 1000 different Bobs?\n> \n> Now, a GT has one input and two outputs.\n> \n> 1000 GTs have 1000 overheads (`nLockTime` and `nVersion` and so on),\n> 1000 inputs, and 2000 outputs.\n> \n> Now Alice the issuer, being the sole signer, can create a fraudulent\n> transaction that spends all 1000 UTXOs and spends it to a single Carol\n> output.\n> \n> This fraudulent transaction has 1 overhead, 1000 inputs, and 1 output.\n> \n> Do you think Alice can get a better fee*rate* on that transaction\n> while paying a lower aggregate *fee* than all the GTs combined?\n> Remember, you based your security analysis on Alice being forced to\n> pay a larger *fee*, but neglect that miners judge transactions based\n> on fee*rate*, which is subtly different and not what you are relying\n> on.\n> I am sure that there exists some large enough number of UTXOs where a\n> single aggregating fraudulent transaction will be far cheaper than the\n> tons of little GTs your security analysis depends on.\n> \n> This is why we do not use 1-of-1 signers in safe offchain protocols.\n> Not your keys, not your coins.\n> \n> --\n> \n> In addition, your analysis is based on assuming that miners are\n> perfect rational beings of perfect rationality, ***and*** are\n> omniscient.\n> \n> In reality, miners possess bounded knowledge, i.e. they do not know everything.\n> \n> Even if Alice is in possession of only a single UTXO, Alice can still\n> feed miners a transaction with lower feerate than the MT, then feed\n> the rest of the network with a valid MT.\n> Because transactions propagate through the network but this\n> propagation is ***not*** instantaneous, it is possible for the MT to\n> reach the miners later than the fraudulent transaction.\n> In this window of time, a block may be mined that includes the\n> fraudulent transaction, simply because the lucky miner never managed\n> to hear of the correct MT.\n> \n> This attack is essentially costless to Alice, especially for big\n> enough transactions where mining fees are a negligible part of the\n> payment.\n> \n> This is why we do not use 1-of-1 signers in safe offchain protocols.\n> Not your keys, not your coins.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "Tao Effect",
                "date": "2021-06-28T17:29:40",
                "message_text_only": "Hi ZmnSCPxj & Raymo,\n\n> On Jun 28, 2021, at 8:28 AM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Good morning Raymo,\n> \n>> Hi ZmnSCPxj,\n>> [\u2026]\n> What prevents the creditor from signing a transaction that is neither a valid MT nor a GT?\n> \n> Nothing.\n\nHow would the creditor create such a transaction? They need the issuer\u2019s private key, so they can\u2019t create it? Am I misunderstanding the scenario you\u2019re describing? If so could you give a more detailed description?\n\nCheers,\nGreg\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/11ed8db2/attachment.html>"
            },
            {
                "author": "raymo at riseup.net",
                "date": "2021-06-28T17:38:10",
                "message_text_only": "Hi Greg,\nYou are right, the whole scenario is:\nthere is an issuer which own a UTXO\nissuers get fiat money or goods or services from creditor in exchange of\na transaction.\nthe transactions are intended to circulate in Sabu protocol instead of\nsending to Bitcoin network.\ncreditor can not sign the transaction at all. instead he can ask issuer\nto change the balances (transaction outputs) and transfer some of his\nmoney to other creditor...\nhere is complete paper to read it carefully:\nhttps://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n\nCheers\nRaymo\n\n\nOn 2021-06-28 17:29, Tao Effect wrote:\n> Hi ZmnSCPxj & Raymo,\n> \n>> On Jun 28, 2021, at 8:28 AM, ZmnSCPxj via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Good morning Raymo,\n>>\n>>> Hi ZmnSCPxj,\n>>\n>>> [\u2026]\n>> What prevents the creditor from signing a transaction that is\n>> neither a valid MT nor a GT?\n>>\n>> Nothing.\n> \n> How would the creditor create such a transaction? They need the\n> issuer\u2019s private key, so they can\u2019t create it? Am I\n> misunderstanding the scenario you\u2019re describing? If so could you\n> give a more detailed description?\n> \n> Cheers,\n> Greg"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2021-06-28T18:05:46",
                "message_text_only": "I believe Zman meant issuer.\n\nraymo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> escreveu\nno dia segunda, 28/06/2021 \u00e0(s) 18:45:\n>\n> Hi Greg,\n> You are right, the whole scenario is:\n> there is an issuer which own a UTXO\n> issuers get fiat money or goods or services from creditor in exchange of\n> a transaction.\n> the transactions are intended to circulate in Sabu protocol instead of\n> sending to Bitcoin network.\n> creditor can not sign the transaction at all. instead he can ask issuer\n> to change the balances (transaction outputs) and transfer some of his\n> money to other creditor...\n> here is complete paper to read it carefully:\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n>\n> Cheers\n> Raymo\n>\n>\n> On 2021-06-28 17:29, Tao Effect wrote:\n> > Hi ZmnSCPxj & Raymo,\n> >\n> >> On Jun 28, 2021, at 8:28 AM, ZmnSCPxj via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Good morning Raymo,\n> >>\n> >>> Hi ZmnSCPxj,\n> >>\n> >>> [\u2026]\n> >> What prevents the creditor from signing a transaction that is\n> >> neither a valid MT nor a GT?\n> >>\n> >> Nothing.\n> >\n> > How would the creditor create such a transaction? They need the\n> > issuer\u2019s private key, so they can\u2019t create it? Am I\n> > misunderstanding the scenario you\u2019re describing? If so could you\n> > give a more detailed description?\n> >\n> > Cheers,\n> > Greg\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "James Hilliard",
                "date": "2021-06-20T01:59:54",
                "message_text_only": "I think you're making a number of assumptions about mining that are\nnot accurate.\n\n> First of all, how much chance in finding next block the corrupted miners have? One percent of all Bitcoin hash powers? Or maximum 5 percent or 10? The cheaters must come up in dividing that 1.2 Bitcoin between. After all the risk/reward must fit them. They can not be a big mining pool since there is no benefit, so they will be small miners with low hash rate. If they solve the puzzle and broadcast the block, no one in the entire Bitcoin network has block transactions or seen it before in their mempool!\n\nYou're making the assumption that miners won't build on top of a block\nwith transactions they have not seen before or transactions that may\ncontain double spends of unconfirmed inputs, this is not how mining\nworks, as long as the block passes the consensus rules effectively all\nminers will mine on top of it by default, this behavior is fundamental\nto how mining currently works and is fairly deeply baked into the\ncurrent mining infrastructure.\n\n> Will they accept this block? In theory it is possible and have 0.01 percent chance but we can eliminate this small possibilities by a simple BIP for miners.\n\nWhat would this BIP look like? I don't see how this could work in a\ndecentralized way as you would need another way of reaching consensus\non what defines a valid block. Right now the chance is nearly 100\npercent that a miner will mine on top of the latest valid block, many\npools(most last I checked) will even mine on the next block before\nthey validate the latest block fully(ie validationless mining) to\nreduce their orphan rates.\n\n> We suppose the miners always control transactions with doc-watchers and avoid accepting transaction with same UTXO but different output.\n\nMiners have different mempool policy/rules for what transactions they\nthemselves mine but all miners must mine on the most work chain of\nvalid blocks otherwise they risk their own blocks being orphaned, any\nminer that does not do this is effectively guaranteed to have their\nblock orphaned right now.\n\n> Because of high Bitcoin transaction fee, this guarantee transaction will take place in next block, even if other transaction which are using the same UTXO as input existed in mempool.\n\nWhen a new transaction is broadcast miners do not immediately start\nmining on a block template that includes that transaction, the\ntemplate won't even be generated immediately when it enters a miners\nmempool in practice, for bandwidth/network efficiency reasons mining\npools batch update the stratum templates/jobs they mine against so\nthere can be significant latency between the time a transaction is\nactually broadcast and hits the miners mempool and the time the miners\nactually switch to mining on top it, these batched updates are\nessentially like point in time snapshots of the mempool and typically\nremain valid(as in the pool will accept shares submitted against that\njob as valid) until the bitcoin network finds the next block. I don't\nthink these batch updates are done more often than every 30 seconds\ntypically, while often it is on the order of multiple minutes\ndepending on the pool.\n\nRegards,\nJames\n\nOn Thu, Jun 17, 2021 at 2:14 PM raymo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi,\n> I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> https://bitcointalk.org/index.php?topic=5344020.0\n> Can you please read it and share your idea about it.\n>\n> Cheers\n> Raymo\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-22T18:20:51",
                "message_text_only": "I would be interested in seeing some more information about the benefits of\nthis approach vs alternatives up front in this write up. Eg how does the\nsecurity, cost, usability, and privacy compare to the lightning network,\nwhich would be the most likely competitor to this idea. It seems clear that\nthere is more counterparty risk here, so it would probably also be very\nhelpful to compare against traditional custodial solutions as well. If you\nhave specific claims on how this system is better than eg lightning in\ncertain contexts, it would be far easier to evaluate the protocol against\nthose claims, and would also be a lot easier for readers to be motivated to\nread the whole protocol and do a more full analysis.\n\nI agree with others that using email is probably not appropriate for a\nprotocol like this. I would highly recommend making your protocol\ntransport-agnostic, allowing users of your protocol to use any transport\nthey want.\n\nOn Sat, Jun 19, 2021 at 7:00 PM James Hilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think you're making a number of assumptions about mining that are\n> not accurate.\n>\n> > First of all, how much chance in finding next block the corrupted miners\n> have? One percent of all Bitcoin hash powers? Or maximum 5 percent or 10?\n> The cheaters must come up in dividing that 1.2 Bitcoin between. After all\n> the risk/reward must fit them. They can not be a big mining pool since\n> there is no benefit, so they will be small miners with low hash rate. If\n> they solve the puzzle and broadcast the block, no one in the entire Bitcoin\n> network has block transactions or seen it before in their mempool!\n>\n> You're making the assumption that miners won't build on top of a block\n> with transactions they have not seen before or transactions that may\n> contain double spends of unconfirmed inputs, this is not how mining\n> works, as long as the block passes the consensus rules effectively all\n> miners will mine on top of it by default, this behavior is fundamental\n> to how mining currently works and is fairly deeply baked into the\n> current mining infrastructure.\n>\n> > Will they accept this block? In theory it is possible and have 0.01\n> percent chance but we can eliminate this small possibilities by a simple\n> BIP for miners.\n>\n> What would this BIP look like? I don't see how this could work in a\n> decentralized way as you would need another way of reaching consensus\n> on what defines a valid block. Right now the chance is nearly 100\n> percent that a miner will mine on top of the latest valid block, many\n> pools(most last I checked) will even mine on the next block before\n> they validate the latest block fully(ie validationless mining) to\n> reduce their orphan rates.\n>\n> > We suppose the miners always control transactions with doc-watchers and\n> avoid accepting transaction with same UTXO but different output.\n>\n> Miners have different mempool policy/rules for what transactions they\n> themselves mine but all miners must mine on the most work chain of\n> valid blocks otherwise they risk their own blocks being orphaned, any\n> miner that does not do this is effectively guaranteed to have their\n> block orphaned right now.\n>\n> > Because of high Bitcoin transaction fee, this guarantee transaction will\n> take place in next block, even if other transaction which are using the\n> same UTXO as input existed in mempool.\n>\n> When a new transaction is broadcast miners do not immediately start\n> mining on a block template that includes that transaction, the\n> template won't even be generated immediately when it enters a miners\n> mempool in practice, for bandwidth/network efficiency reasons mining\n> pools batch update the stratum templates/jobs they mine against so\n> there can be significant latency between the time a transaction is\n> actually broadcast and hits the miners mempool and the time the miners\n> actually switch to mining on top it, these batched updates are\n> essentially like point in time snapshots of the mempool and typically\n> remain valid(as in the pool will accept shares submitted against that\n> job as valid) until the bitcoin network finds the next block. I don't\n> think these batch updates are done more often than every 30 seconds\n> typically, while often it is on the order of multiple minutes\n> depending on the pool.\n>\n> Regards,\n> James\n>\n> On Thu, Jun 17, 2021 at 2:14 PM raymo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Hi,\n> > I have a proposal for improve Bitcoin TPS and privacy, here is the post.\n> >\n> https://raymo-49157.medium.com/time-to-boost-bitcoin-circulation-million-transactions-per-second-and-privacy-1eef8568d180\n> > https://bitcointalk.org/index.php?topic=5344020.0\n> > Can you please read it and share your idea about it.\n> >\n> > Cheers\n> > Raymo\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210622/fba9e114/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Boost Bitcoin circulation, Million Transactions Per Second with stronger privacy",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Billy Tetrud",
                "James Hilliard",
                "ZmnSCPxj",
                "Erik Aronesty",
                "Ricardo Filipe",
                "raymo at riseup.net",
                "Tao Effect",
                "Alex Schoof"
            ],
            "messages_count": 28,
            "total_messages_chars_count": 131750
        }
    },
    {
        "title": "[bitcoin-dev] Tuesday\u2019s IRC workshop on L2 onchain support",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-06-17T17:01:59",
                "message_text_only": "The workshop was previously announced by ariard on the bitcoin-dev\nmailing list here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018841.html\n\nA reminder was posted to the bitcoin-dev mailing list here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019068.html\n\nThe conversation log for the workshop is here:\nhttps://gist.github.com/ariard/5f28dffe82ddad763b346a2344092ba4\n\nI\u2019ll summarize what was discussed during the meeting but please refer\nto the L2 zoology repo ariard has set up for background context and\nadditional notes: https://github.com/ariard/L2-zoology\n\nGeneral considerations\n\nI think it is worth first reiterating the obvious that there will\nnever be perfect security guarantees on network transaction fee rates\nor transaction relay. Network fee rates can in theory go up to\nanything (upper limit of infinity) and will always to some degree be\ninherently unpredictable. In addition transaction acceptance can never\nbe guaranteed even if you attempt a direct connection to a miner. At\nthe same time L2 protocols (e.g. Lightning and DLCs) elevate\ntransaction propagation and inclusion in a time sensitive mined block\nto a security assumption from what used to just be a usability\nassumption (BlueMatt). Within those confines these workshops are\nattempting to strengthen that security assumption knowing that\nguaranteeing it is out of reach.\n\nThere are considerations that blocked transaction propagation isn\u2019t\nnecessarily a problem for the victim if it is also blocked for the\nattacker. In addition some successful attacks present an opportunity\nfor the victim to divert their funds to miner fees (e.g. scorched\nearth) ensuring the attacker doesn\u2019t financially benefit from the\nattack (harding). Personally I would argue neither of these present\nmuch assurance to the victim. Out of conservatism one should assume\nthat the attacker has greater resources than the victim (e.g. a direct\nline to a miner) and knowing a victim\u2019s lost funds went to the miner\ninstead of the attacker isn\u2019t of much comfort to the victim (other\nthan potentially presenting a disincentive for the attack in the first\nplace). This is obviously further complicated if the miner is the\nattacker. In addition any incentive for miners to not mine\ntransactions to wait for a potential pay-all-to-fee are troubling\n(t-bast).\n\nNew(ish) ideas\n\nRubenSomsen brought up the idea of fee sensitive timelocks, they would\nneed a soft fork. ariard briefly discussed the idea of a transaction\nrelay overlay network. harding stated his opinion that we should be\nleaning more on miners\u2019 profit incentive rather than attempting to\nnormalize mempool policy (e.g.\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html).\nt-bast raised the prospect of mining pools exposing public APIs to\npush them transactions directly.\n\nThe impact of changes to Bitcoin Core on L2 protocols\n\nSome changes to Core (e.g. some privacy improvements) can conflict\nwith the goal of minimizing transaction propagation times.\nChris_Stewart_5 raised the idea of a nightly bitcoind build to give L2\ndevelopers a way to write regression tests against the latest builds\nof bitcoind. He added that L2 devs should write automated regression\ntest suites against bitcoind exposed RPC commands. t-bast would like a\nbitcoind \u201cevicttx\u201d RPC to remove a transaction from the mempool on\nregtest.\n\nFull RBF\n\nIn advance of the workshop ariard posted to the mailing list a\nproposal for full RBF in a future version of Bitcoin Core:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n\nProgress in this direction has been attempted in the past (e.g.\nhttps://github.com/bitcoin/bitcoin/pull/10823) BlueMatt pointed out\nthat even with full RBF it is trivial to create mempool partitions. As\nlong as RBF has a fee rate increase minimum an attacker can trivially\nsplit the mempool by broadcasting two conflicting transactions with\nthe same fee.\n\nariard plans to contact businesses (e.g. Lightning onboarding services\nrelying on zero confirmations) to check that this possible eventual\nmove to full RBF doesn\u2019t present a problem for them. There could well\nbe engineering work required in advance of the possible change being\nmade.\n\nNext week\u2019s meeting\n\nNext week\u2019s meeting (Tuesday 22nd June, 19:00 UTC,\n#l2-onchain-support, Libera) will be on fee bumping and package relay\nthat glozow has recently been working to advance in Bitcoin Core.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-22T18:01:46",
                "message_text_only": "Thanks for the Summary Michael!\n\nIt seems like fee-sensitive timelocks weren't discussed too much in the\nworkshop, unless I'm missing something. I also don't see any downside to it\ndiscussed (other than that it needs a soft-fork). It seems like that would\nbe a great way to substantially increase the resilience of the LN to\ntemporary periods of fee congestion, even potentially long-running periods\nthat last weeks. It might even help in non-temporary fee market increases\nby giving participants extra time to use some fee-bumping technique to\nclose or restructure their channels to compensate for the elevated fee\nmarket.\n\nOn Thu, Jun 17, 2021 at 1:16 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The workshop was previously announced by ariard on the bitcoin-dev\n> mailing list here:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018841.html\n>\n> A reminder was posted to the bitcoin-dev mailing list here:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019068.html\n>\n> The conversation log for the workshop is here:\n> https://gist.github.com/ariard/5f28dffe82ddad763b346a2344092ba4\n>\n> I\u2019ll summarize what was discussed during the meeting but please refer\n> to the L2 zoology repo ariard has set up for background context and\n> additional notes: https://github.com/ariard/L2-zoology\n>\n> General considerations\n>\n> I think it is worth first reiterating the obvious that there will\n> never be perfect security guarantees on network transaction fee rates\n> or transaction relay. Network fee rates can in theory go up to\n> anything (upper limit of infinity) and will always to some degree be\n> inherently unpredictable. In addition transaction acceptance can never\n> be guaranteed even if you attempt a direct connection to a miner. At\n> the same time L2 protocols (e.g. Lightning and DLCs) elevate\n> transaction propagation and inclusion in a time sensitive mined block\n> to a security assumption from what used to just be a usability\n> assumption (BlueMatt). Within those confines these workshops are\n> attempting to strengthen that security assumption knowing that\n> guaranteeing it is out of reach.\n>\n> There are considerations that blocked transaction propagation isn\u2019t\n> necessarily a problem for the victim if it is also blocked for the\n> attacker. In addition some successful attacks present an opportunity\n> for the victim to divert their funds to miner fees (e.g. scorched\n> earth) ensuring the attacker doesn\u2019t financially benefit from the\n> attack (harding). Personally I would argue neither of these present\n> much assurance to the victim. Out of conservatism one should assume\n> that the attacker has greater resources than the victim (e.g. a direct\n> line to a miner) and knowing a victim\u2019s lost funds went to the miner\n> instead of the attacker isn\u2019t of much comfort to the victim (other\n> than potentially presenting a disincentive for the attack in the first\n> place). This is obviously further complicated if the miner is the\n> attacker. In addition any incentive for miners to not mine\n> transactions to wait for a potential pay-all-to-fee are troubling\n> (t-bast).\n>\n> New(ish) ideas\n>\n> RubenSomsen brought up the idea of fee sensitive timelocks, they would\n> need a soft fork. ariard briefly discussed the idea of a transaction\n> relay overlay network. harding stated his opinion that we should be\n> leaning more on miners\u2019 profit incentive rather than attempting to\n> normalize mempool policy (e.g.\n>\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html\n> ).\n> t-bast raised the prospect of mining pools exposing public APIs to\n> push them transactions directly.\n>\n> The impact of changes to Bitcoin Core on L2 protocols\n>\n> Some changes to Core (e.g. some privacy improvements) can conflict\n> with the goal of minimizing transaction propagation times.\n> Chris_Stewart_5 raised the idea of a nightly bitcoind build to give L2\n> developers a way to write regression tests against the latest builds\n> of bitcoind. He added that L2 devs should write automated regression\n> test suites against bitcoind exposed RPC commands. t-bast would like a\n> bitcoind \u201cevicttx\u201d RPC to remove a transaction from the mempool on\n> regtest.\n>\n> Full RBF\n>\n> In advance of the workshop ariard posted to the mailing list a\n> proposal for full RBF in a future version of Bitcoin Core:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n>\n> Progress in this direction has been attempted in the past (e.g.\n> https://github.com/bitcoin/bitcoin/pull/10823) BlueMatt pointed out\n> that even with full RBF it is trivial to create mempool partitions. As\n> long as RBF has a fee rate increase minimum an attacker can trivially\n> split the mempool by broadcasting two conflicting transactions with\n> the same fee.\n>\n> ariard plans to contact businesses (e.g. Lightning onboarding services\n> relying on zero confirmations) to check that this possible eventual\n> move to full RBF doesn\u2019t present a problem for them. There could well\n> be engineering work required in advance of the possible change being\n> made.\n>\n> Next week\u2019s meeting\n>\n> Next week\u2019s meeting (Tuesday 22nd June, 19:00 UTC,\n> #l2-onchain-support, Libera) will be on fee bumping and package relay\n> that glozow has recently been working to advance in Bitcoin Core.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210622/cbbaf99b/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-06-22T18:21:39",
                "message_text_only": "Hey Billy\n\nNo, fee sensitive timelocks weren't discussed at any length in the\nworkshop. The workshops are obviously time limited but if they spur\nfuture discussion and drafted proposals (whether they need soft forks\nor not) outside of the workshops that would be great. This idea was\nraised in the meeting by Ruben Somsen so maybe Ruben has given them\nsome thought. Making timelocks conditional on the current fee rate\nseems challenging to me (where is the current network fee rate\nobtained from and how is it fed into the script?) but I haven't\nsketched out exactly how they would work.\n\nA reminder that the second workshop (on package relay and fee bumping)\nstarts at 19:00 UTC today (30 minutes after I've sent this, there may\nbe a delay before it is published to the mailing list).\n\nThanks\nMichael\n\nOn Tue, Jun 22, 2021 at 7:02 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>\n> Thanks for the Summary Michael!\n>\n> It seems like fee-sensitive timelocks weren't discussed too much in the workshop, unless I'm missing something. I also don't see any downside to it discussed (other than that it needs a soft-fork). It seems like that would be a great way to substantially increase the resilience of the LN to temporary periods of fee congestion, even potentially long-running periods that last weeks. It might even help in non-temporary fee market increases by giving participants extra time to use some fee-bumping technique to close or restructure their channels to compensate for the elevated fee market.\n>\n> On Thu, Jun 17, 2021 at 1:16 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> The workshop was previously announced by ariard on the bitcoin-dev\n>> mailing list here:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018841.html\n>>\n>> A reminder was posted to the bitcoin-dev mailing list here:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019068.html\n>>\n>> The conversation log for the workshop is here:\n>> https://gist.github.com/ariard/5f28dffe82ddad763b346a2344092ba4\n>>\n>> I\u2019ll summarize what was discussed during the meeting but please refer\n>> to the L2 zoology repo ariard has set up for background context and\n>> additional notes: https://github.com/ariard/L2-zoology\n>>\n>> General considerations\n>>\n>> I think it is worth first reiterating the obvious that there will\n>> never be perfect security guarantees on network transaction fee rates\n>> or transaction relay. Network fee rates can in theory go up to\n>> anything (upper limit of infinity) and will always to some degree be\n>> inherently unpredictable. In addition transaction acceptance can never\n>> be guaranteed even if you attempt a direct connection to a miner. At\n>> the same time L2 protocols (e.g. Lightning and DLCs) elevate\n>> transaction propagation and inclusion in a time sensitive mined block\n>> to a security assumption from what used to just be a usability\n>> assumption (BlueMatt). Within those confines these workshops are\n>> attempting to strengthen that security assumption knowing that\n>> guaranteeing it is out of reach.\n>>\n>> There are considerations that blocked transaction propagation isn\u2019t\n>> necessarily a problem for the victim if it is also blocked for the\n>> attacker. In addition some successful attacks present an opportunity\n>> for the victim to divert their funds to miner fees (e.g. scorched\n>> earth) ensuring the attacker doesn\u2019t financially benefit from the\n>> attack (harding). Personally I would argue neither of these present\n>> much assurance to the victim. Out of conservatism one should assume\n>> that the attacker has greater resources than the victim (e.g. a direct\n>> line to a miner) and knowing a victim\u2019s lost funds went to the miner\n>> instead of the attacker isn\u2019t of much comfort to the victim (other\n>> than potentially presenting a disincentive for the attack in the first\n>> place). This is obviously further complicated if the miner is the\n>> attacker. In addition any incentive for miners to not mine\n>> transactions to wait for a potential pay-all-to-fee are troubling\n>> (t-bast).\n>>\n>> New(ish) ideas\n>>\n>> RubenSomsen brought up the idea of fee sensitive timelocks, they would\n>> need a soft fork. ariard briefly discussed the idea of a transaction\n>> relay overlay network. harding stated his opinion that we should be\n>> leaning more on miners\u2019 profit incentive rather than attempting to\n>> normalize mempool policy (e.g.\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html).\n>> t-bast raised the prospect of mining pools exposing public APIs to\n>> push them transactions directly.\n>>\n>> The impact of changes to Bitcoin Core on L2 protocols\n>>\n>> Some changes to Core (e.g. some privacy improvements) can conflict\n>> with the goal of minimizing transaction propagation times.\n>> Chris_Stewart_5 raised the idea of a nightly bitcoind build to give L2\n>> developers a way to write regression tests against the latest builds\n>> of bitcoind. He added that L2 devs should write automated regression\n>> test suites against bitcoind exposed RPC commands. t-bast would like a\n>> bitcoind \u201cevicttx\u201d RPC to remove a transaction from the mempool on\n>> regtest.\n>>\n>> Full RBF\n>>\n>> In advance of the workshop ariard posted to the mailing list a\n>> proposal for full RBF in a future version of Bitcoin Core:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n>>\n>> Progress in this direction has been attempted in the past (e.g.\n>> https://github.com/bitcoin/bitcoin/pull/10823) BlueMatt pointed out\n>> that even with full RBF it is trivial to create mempool partitions. As\n>> long as RBF has a fee rate increase minimum an attacker can trivially\n>> split the mempool by broadcasting two conflicting transactions with\n>> the same fee.\n>>\n>> ariard plans to contact businesses (e.g. Lightning onboarding services\n>> relying on zero confirmations) to check that this possible eventual\n>> move to full RBF doesn\u2019t present a problem for them. There could well\n>> be engineering work required in advance of the possible change being\n>> made.\n>>\n>> Next week\u2019s meeting\n>>\n>> Next week\u2019s meeting (Tuesday 22nd June, 19:00 UTC,\n>> #l2-onchain-support, Libera) will be on fee bumping and package relay\n>> that glozow has recently been working to advance in Bitcoin Core.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at gmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-22T18:26:34",
                "message_text_only": ">  where is the current network fee rate obtained from and how is it fed\ninto the script?\n\nIt could be obtained as something like the median transaction fee rate over\na window of X blocks. Its something any full node could easily keep track\nof. And as long as hour-level or day-level granularity is acceptable, I\nwouldn't think there'd be any need to incorporate mempool information (if\nthat were even possible without introducing new attack vectors). Let me\nknow if this isn't an appropriate thread to discuss this in.\n\nOn Tue, Jun 22, 2021 at 11:21 AM Michael Folkson <michaelfolkson at gmail.com>\nwrote:\n\n> Hey Billy\n>\n> No, fee sensitive timelocks weren't discussed at any length in the\n> workshop. The workshops are obviously time limited but if they spur\n> future discussion and drafted proposals (whether they need soft forks\n> or not) outside of the workshops that would be great. This idea was\n> raised in the meeting by Ruben Somsen so maybe Ruben has given them\n> some thought. Making timelocks conditional on the current fee rate\n> seems challenging to me (where is the current network fee rate\n> obtained from and how is it fed into the script?) but I haven't\n> sketched out exactly how they would work.\n>\n> A reminder that the second workshop (on package relay and fee bumping)\n> starts at 19:00 UTC today (30 minutes after I've sent this, there may\n> be a delay before it is published to the mailing list).\n>\n> Thanks\n> Michael\n>\n> On Tue, Jun 22, 2021 at 7:02 PM Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n> >\n> > Thanks for the Summary Michael!\n> >\n> > It seems like fee-sensitive timelocks weren't discussed too much in the\n> workshop, unless I'm missing something. I also don't see any downside to it\n> discussed (other than that it needs a soft-fork). It seems like that would\n> be a great way to substantially increase the resilience of the LN to\n> temporary periods of fee congestion, even potentially long-running periods\n> that last weeks. It might even help in non-temporary fee market increases\n> by giving participants extra time to use some fee-bumping technique to\n> close or restructure their channels to compensate for the elevated fee\n> market.\n> >\n> > On Thu, Jun 17, 2021 at 1:16 PM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> The workshop was previously announced by ariard on the bitcoin-dev\n> >> mailing list here:\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018841.html\n> >>\n> >> A reminder was posted to the bitcoin-dev mailing list here:\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019068.html\n> >>\n> >> The conversation log for the workshop is here:\n> >> https://gist.github.com/ariard/5f28dffe82ddad763b346a2344092ba4\n> >>\n> >> I\u2019ll summarize what was discussed during the meeting but please refer\n> >> to the L2 zoology repo ariard has set up for background context and\n> >> additional notes: https://github.com/ariard/L2-zoology\n> >>\n> >> General considerations\n> >>\n> >> I think it is worth first reiterating the obvious that there will\n> >> never be perfect security guarantees on network transaction fee rates\n> >> or transaction relay. Network fee rates can in theory go up to\n> >> anything (upper limit of infinity) and will always to some degree be\n> >> inherently unpredictable. In addition transaction acceptance can never\n> >> be guaranteed even if you attempt a direct connection to a miner. At\n> >> the same time L2 protocols (e.g. Lightning and DLCs) elevate\n> >> transaction propagation and inclusion in a time sensitive mined block\n> >> to a security assumption from what used to just be a usability\n> >> assumption (BlueMatt). Within those confines these workshops are\n> >> attempting to strengthen that security assumption knowing that\n> >> guaranteeing it is out of reach.\n> >>\n> >> There are considerations that blocked transaction propagation isn\u2019t\n> >> necessarily a problem for the victim if it is also blocked for the\n> >> attacker. In addition some successful attacks present an opportunity\n> >> for the victim to divert their funds to miner fees (e.g. scorched\n> >> earth) ensuring the attacker doesn\u2019t financially benefit from the\n> >> attack (harding). Personally I would argue neither of these present\n> >> much assurance to the victim. Out of conservatism one should assume\n> >> that the attacker has greater resources than the victim (e.g. a direct\n> >> line to a miner) and knowing a victim\u2019s lost funds went to the miner\n> >> instead of the attacker isn\u2019t of much comfort to the victim (other\n> >> than potentially presenting a disincentive for the attack in the first\n> >> place). This is obviously further complicated if the miner is the\n> >> attacker. In addition any incentive for miners to not mine\n> >> transactions to wait for a potential pay-all-to-fee are troubling\n> >> (t-bast).\n> >>\n> >> New(ish) ideas\n> >>\n> >> RubenSomsen brought up the idea of fee sensitive timelocks, they would\n> >> need a soft fork. ariard briefly discussed the idea of a transaction\n> >> relay overlay network. harding stated his opinion that we should be\n> >> leaning more on miners\u2019 profit incentive rather than attempting to\n> >> normalize mempool policy (e.g.\n> >>\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html\n> ).\n> >> t-bast raised the prospect of mining pools exposing public APIs to\n> >> push them transactions directly.\n> >>\n> >> The impact of changes to Bitcoin Core on L2 protocols\n> >>\n> >> Some changes to Core (e.g. some privacy improvements) can conflict\n> >> with the goal of minimizing transaction propagation times.\n> >> Chris_Stewart_5 raised the idea of a nightly bitcoind build to give L2\n> >> developers a way to write regression tests against the latest builds\n> >> of bitcoind. He added that L2 devs should write automated regression\n> >> test suites against bitcoind exposed RPC commands. t-bast would like a\n> >> bitcoind \u201cevicttx\u201d RPC to remove a transaction from the mempool on\n> >> regtest.\n> >>\n> >> Full RBF\n> >>\n> >> In advance of the workshop ariard posted to the mailing list a\n> >> proposal for full RBF in a future version of Bitcoin Core:\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n> >>\n> >> Progress in this direction has been attempted in the past (e.g.\n> >> https://github.com/bitcoin/bitcoin/pull/10823) BlueMatt pointed out\n> >> that even with full RBF it is trivial to create mempool partitions. As\n> >> long as RBF has a fee rate increase minimum an attacker can trivially\n> >> split the mempool by broadcasting two conflicting transactions with\n> >> the same fee.\n> >>\n> >> ariard plans to contact businesses (e.g. Lightning onboarding services\n> >> relying on zero confirmations) to check that this possible eventual\n> >> move to full RBF doesn\u2019t present a problem for them. There could well\n> >> be engineering work required in advance of the possible change being\n> >> made.\n> >>\n> >> Next week\u2019s meeting\n> >>\n> >> Next week\u2019s meeting (Tuesday 22nd June, 19:00 UTC,\n> >> #l2-onchain-support, Libera) will be on fee bumping and package relay\n> >> that glozow has recently been working to advance in Bitcoin Core.\n> >>\n> >> --\n> >> Michael Folkson\n> >> Email: michaelfolkson at gmail.com\n> >> Keybase: michaelfolkson\n> >> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210622/ceba03a0/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-06-22T18:40:19",
                "message_text_only": "Sure, feel free to continue on this thread for discussion of fee\nsensitive timelocks. I'll start a new thread for a summary of today's\nsecond workshop.\n\nOn Tue, Jun 22, 2021 at 7:26 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>\n> >  where is the current network fee rate obtained from and how is it fed into the script?\n>\n> It could be obtained as something like the median transaction fee rate over a window of X blocks. Its something any full node could easily keep track of. And as long as hour-level or day-level granularity is acceptable, I wouldn't think there'd be any need to incorporate mempool information (if that were even possible without introducing new attack vectors). Let me know if this isn't an appropriate thread to discuss this in.\n>\n> On Tue, Jun 22, 2021 at 11:21 AM Michael Folkson <michaelfolkson at gmail.com> wrote:\n>>\n>> Hey Billy\n>>\n>> No, fee sensitive timelocks weren't discussed at any length in the\n>> workshop. The workshops are obviously time limited but if they spur\n>> future discussion and drafted proposals (whether they need soft forks\n>> or not) outside of the workshops that would be great. This idea was\n>> raised in the meeting by Ruben Somsen so maybe Ruben has given them\n>> some thought. Making timelocks conditional on the current fee rate\n>> seems challenging to me (where is the current network fee rate\n>> obtained from and how is it fed into the script?) but I haven't\n>> sketched out exactly how they would work.\n>>\n>> A reminder that the second workshop (on package relay and fee bumping)\n>> starts at 19:00 UTC today (30 minutes after I've sent this, there may\n>> be a delay before it is published to the mailing list).\n>>\n>> Thanks\n>> Michael\n>>\n>> On Tue, Jun 22, 2021 at 7:02 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>> >\n>> > Thanks for the Summary Michael!\n>> >\n>> > It seems like fee-sensitive timelocks weren't discussed too much in the workshop, unless I'm missing something. I also don't see any downside to it discussed (other than that it needs a soft-fork). It seems like that would be a great way to substantially increase the resilience of the LN to temporary periods of fee congestion, even potentially long-running periods that last weeks. It might even help in non-temporary fee market increases by giving participants extra time to use some fee-bumping technique to close or restructure their channels to compensate for the elevated fee market.\n>> >\n>> > On Thu, Jun 17, 2021 at 1:16 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> The workshop was previously announced by ariard on the bitcoin-dev\n>> >> mailing list here:\n>> >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018841.html\n>> >>\n>> >> A reminder was posted to the bitcoin-dev mailing list here:\n>> >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019068.html\n>> >>\n>> >> The conversation log for the workshop is here:\n>> >> https://gist.github.com/ariard/5f28dffe82ddad763b346a2344092ba4\n>> >>\n>> >> I\u2019ll summarize what was discussed during the meeting but please refer\n>> >> to the L2 zoology repo ariard has set up for background context and\n>> >> additional notes: https://github.com/ariard/L2-zoology\n>> >>\n>> >> General considerations\n>> >>\n>> >> I think it is worth first reiterating the obvious that there will\n>> >> never be perfect security guarantees on network transaction fee rates\n>> >> or transaction relay. Network fee rates can in theory go up to\n>> >> anything (upper limit of infinity) and will always to some degree be\n>> >> inherently unpredictable. In addition transaction acceptance can never\n>> >> be guaranteed even if you attempt a direct connection to a miner. At\n>> >> the same time L2 protocols (e.g. Lightning and DLCs) elevate\n>> >> transaction propagation and inclusion in a time sensitive mined block\n>> >> to a security assumption from what used to just be a usability\n>> >> assumption (BlueMatt). Within those confines these workshops are\n>> >> attempting to strengthen that security assumption knowing that\n>> >> guaranteeing it is out of reach.\n>> >>\n>> >> There are considerations that blocked transaction propagation isn\u2019t\n>> >> necessarily a problem for the victim if it is also blocked for the\n>> >> attacker. In addition some successful attacks present an opportunity\n>> >> for the victim to divert their funds to miner fees (e.g. scorched\n>> >> earth) ensuring the attacker doesn\u2019t financially benefit from the\n>> >> attack (harding). Personally I would argue neither of these present\n>> >> much assurance to the victim. Out of conservatism one should assume\n>> >> that the attacker has greater resources than the victim (e.g. a direct\n>> >> line to a miner) and knowing a victim\u2019s lost funds went to the miner\n>> >> instead of the attacker isn\u2019t of much comfort to the victim (other\n>> >> than potentially presenting a disincentive for the attack in the first\n>> >> place). This is obviously further complicated if the miner is the\n>> >> attacker. In addition any incentive for miners to not mine\n>> >> transactions to wait for a potential pay-all-to-fee are troubling\n>> >> (t-bast).\n>> >>\n>> >> New(ish) ideas\n>> >>\n>> >> RubenSomsen brought up the idea of fee sensitive timelocks, they would\n>> >> need a soft fork. ariard briefly discussed the idea of a transaction\n>> >> relay overlay network. harding stated his opinion that we should be\n>> >> leaning more on miners\u2019 profit incentive rather than attempting to\n>> >> normalize mempool policy (e.g.\n>> >> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html).\n>> >> t-bast raised the prospect of mining pools exposing public APIs to\n>> >> push them transactions directly.\n>> >>\n>> >> The impact of changes to Bitcoin Core on L2 protocols\n>> >>\n>> >> Some changes to Core (e.g. some privacy improvements) can conflict\n>> >> with the goal of minimizing transaction propagation times.\n>> >> Chris_Stewart_5 raised the idea of a nightly bitcoind build to give L2\n>> >> developers a way to write regression tests against the latest builds\n>> >> of bitcoind. He added that L2 devs should write automated regression\n>> >> test suites against bitcoind exposed RPC commands. t-bast would like a\n>> >> bitcoind \u201cevicttx\u201d RPC to remove a transaction from the mempool on\n>> >> regtest.\n>> >>\n>> >> Full RBF\n>> >>\n>> >> In advance of the workshop ariard posted to the mailing list a\n>> >> proposal for full RBF in a future version of Bitcoin Core:\n>> >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n>> >>\n>> >> Progress in this direction has been attempted in the past (e.g.\n>> >> https://github.com/bitcoin/bitcoin/pull/10823) BlueMatt pointed out\n>> >> that even with full RBF it is trivial to create mempool partitions. As\n>> >> long as RBF has a fee rate increase minimum an attacker can trivially\n>> >> split the mempool by broadcasting two conflicting transactions with\n>> >> the same fee.\n>> >>\n>> >> ariard plans to contact businesses (e.g. Lightning onboarding services\n>> >> relying on zero confirmations) to check that this possible eventual\n>> >> move to full RBF doesn\u2019t present a problem for them. There could well\n>> >> be engineering work required in advance of the possible change being\n>> >> made.\n>> >>\n>> >> Next week\u2019s meeting\n>> >>\n>> >> Next week\u2019s meeting (Tuesday 22nd June, 19:00 UTC,\n>> >> #l2-onchain-support, Libera) will be on fee bumping and package relay\n>> >> that glozow has recently been working to advance in Bitcoin Core.\n>> >>\n>> >> --\n>> >> Michael Folkson\n>> >> Email: michaelfolkson at gmail.com\n>> >> Keybase: michaelfolkson\n>> >> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at gmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Tuesday\u2019s IRC workshop on L2 onchain support",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Billy Tetrud",
                "Michael Folkson"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 33429
        }
    },
    {
        "title": "[bitcoin-dev] Waiting SIGHASH_ANYPREVOUT and Packing Packages",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-06-18T22:11:38",
                "message_text_only": "Hi,\n\nIt's a big chunk, so if you don't have time browse parts 1 and 2 and share\nyour 2 sats on the deployment timeline :p\n\nThis post recalls some unsolved safety holes about Lightning, how\npackage-relay or SIGHASH_ANYPREVOUT can solve the first one, how a mempool\nhardening can solve the second one, few considerations on package-relay\ndesign trade-offs and propose a rough deployment timeline.\n\n1) Lightning Safety Holes : Pre-Signed Feerate and Tx-Pinning (to skip if\nyou're a LN dev)\n\nAs of today, Lightning is suffering from 2 safety holes w.r.t to base-layer\ninteractions, widely discussed among ln devs.\n\nThe first one, the pre-signed feerate issue with future broadcasted\ntime-sensitive transactions is laid out clearly in Matt Corallo's \"CPFP\nCarve-Out Fee-Prediction Issues in Contracting Applications (eg Lightning)\"\n[0]. This issue might provoke loss of funds, even in non-adversarial\nsettings, i.e a Lightning routing hub not being able to settle backward\nonchain a successful HTLC during occurrences of sudden mempool congestion.\n\nAs blockspace demand increases with an always growing number of\nonchain/offchain bitcoin users, coupling effects are more likely to happen\nand this pre-signed feerate issue is going to become more urgent to solve\n[1]. For e.g, few percentiles of increases in feerate being overpriced by\nLightning routing hubs to close \"fractional-reserve\" backed anchor\nchannels, driving mempools congestions, provoking anchor channels\nfee-bumping reserves becoming even more under-provisioned and thus close\ndown, etc.\n\nThe second issue, malicious transaction pinnings, is documented in Bastien\nTeinturier's \"Pinning Attacks\" [2]. AFAIK, there is a rough consensus among\ndevs on the conceptual feasibility of such a class of attacks against a LN\nnode, though so far we have not seen them executed in the wild and I'm not\naware of anyone having realized them in real-world conditions. Note, there\nis a variety of attack scenarios to consider which is function of a wide\nmatrix (channel types, LN implementation's `update_fee` policy, LN\nimplementation's `cltv_delta` policy, mempool congestion feerate groups,\nrouting hubs or end nodes) Demoing against deployed LN implementations with\ndefault settings has been on my todo for a while, though a priori One\nScenario To Exploit Them All doesn't fit well.\n\nSide-note, as a LN operator, if you're worried about those security risks,\nyou can bump your `cltv_delta`/`cltv_expiry_delta` to significantly coarse\nthe attacks.\n\nI think there is an important point to underscore. Considering the state of\nknowledge we have today, I believe there is no strong interdependency\nbetween solving pre-signed feerate and tx-pinning with the same mechanism\nfrom a safety/usability standpoint. Or last such mechanism can be deployed\nby stages.\n\n2) Solving the Pre-Signed Feerate problem : Package-Relay or\nSIGHASH_ANYPREVOUT\n\nFor Lightning, either package-relay or SIGHASH_ANYPREVOUT should be able to\nsolve the pre-signed feerate issue [3]\n\nOne of the interesting points recalled during the first transaction relay\nworkshops was that L2s making unbounded security assumptions on\nnon-normative tx-relay/mempool acceptance rules sounds a wrong direction\nfor the Bitcoin ecosystem long-term, and more prone to subtle bugs/safety\nrisks across the ecosystem.\n\nI did express the contrary, public opinion a while back [4]. That said, I\nstart to agree it's wiser ecosystem-wise to keep those non-normatives rules\nas only a groundwork for weaker assumptions than consensus ones. Though it\nwould be nice for long-term L2s stability to consider them with more care\nthan today in our base-layer protocol development process [4]\n\nOn this rational, I now share the opinion it's better long-term to solve\nthe pre-signed feerate problem with a consensus change such as\nSIGHASH_ANYPREVOUT rather than having too much off-chain coins relying on\nthe weaker assumptions offered by bitcoin core's tx-relay/mempool\nacceptance rules, and far harder to replicate and disseminate across the\necosystem.\n\nHowever, if SIGHASH_ANYPREVOUT is Things Done Right(tm), should we discard\npackage-relay ?\n\nSadly, in the worst-case scenario we might never reach consensus again\nacross the ecosystem and Taproot is the last softfork. Ever :/ *sad violons\nand tissues jingle*\n\nWith this dilemma in mind, it might be wise for the LN/L2 ecosystems to\nhave a fall-back plan to solve their safety/usability issues and\npackage-relay sounds a reasonable, temporary \"patch\".\n\nEven if package-relay requires serious engineering effort in Bitcoin Core\nto avoid introducing new DoSes, swallowing well the complexity increase in\ncritical code paths such as the mempool/p2p stack and a gentle API design\nfor our friends the L2 devs, I believe it's worthy the engineering\nresources cost. From-my-completely-biased-LN-dev viewpoint :p\n\nIn the best-case scenario, we'll activate SIGHASH_ANYPREVOUT and better\nfee-bumping primitives softforks [5] slowly strip off the \"L2 fee-bumping\nprimitive\" semantic from \"package-relay\", friendly nudge the L2 ecosystem\nto seat their fee-bumping on safer, consensus assumptions and maybe keep\nthe p2p packages to improve on the malicious mempool-partitions-side or as\na replacement of our orphan logic.\n\n3) Solving Tx-Pinnings : Hardening the Mempool against Tx-Relay Jammings\nattacks\n\nCurrent Mempool anti-DoS rules have been mostly designed at a time where\nthe shared-utxo model with competing time-sensitive transactions was still\nan idea on the whiteboard. The last few years have revealed those anti-DoS\nrules as a source of security vulnerabilities for Lightning and a research\nconcern for L2s still in the early-phase of deployment [6].\n\nBeyond real-world pinning exercises against production software as a\ncomplement of the current pinning attacks research, it would be better to\nagree on a common L2 attacker model before to modify widely-relied subset\nof the mempool, such as the replace-by-fee logic or the in-mempool package\nlimits [7]. One risk of uncareful changes in this area would be to solve a\npinning vector for a L2-alice but introduce a new vuln for a L2-bob.\n\nI believe the first part of such a revamp could hopefully land somehow next\nyear. Though, IMHO, in the years to come, we'll have to do more hard\nreasoning to ensure the mempool supports advanced Bitcoin protocols (e.g\nOP_CTV congestion tree,  CoinPool, interactive cut-through, ...)\n\nNote the opinion I raised above on quality of assumptions on mempool\nbehavior, even if we harden it on the base-layer side,  L2s should be\nwell-aware the product is shipped with a guarantee limitation :p\n\n4) Considerations on Package-Relay Design\n\nPackage relay relies on at least two cleanly separate components (awesome,\nif we schedule to deprecate the higher half in the future!)\n* \"the higher half\" : extension of the mempool logic, with a new\npackage-level policy, not strictly intersecting with the tx-level policy\n* \"the lower half\" : at least three different designs, receiver initiated,\nsender-initiated and relay-initiated\n\nOne open design question for the \"higher half\" is the package-size of the\nacceptance logic, which is ultimately a function of the L2 ecosystem state.\nDo we have deployed or in deployment phase L2 protocols with a need for\nmore than 2-stage and if yes what API bounds do they expect ? That's a\nquestion I hope we'll gather feedback during next Thursday's transaction\nrelay workshops. IMO, such package API should come out with a specification\non which L2-community can be gathered and public consensus established. For\nthe same communications reasons towards downstream projects, we have a\nBIP125 standard. And especially in this case the bitcoin core protocol\ndevelopment process should carefully listen to the needs of actual L2\nusers. Also, a lot of those L2 devs, they don't speak C++ :)\n\nOne could imagine those mempool standards as \"perishable\" contracts between\na base-layer implementation and the upper layers, with ultimately the\nfull-node implementation reserving itself the right to deprecate them,\nmaybe with a lengthy-warning period ?\n\nBeyond that, I believe there is another remaining interdependency between\n\"the lower half\" design and L2s behaviors, namely bandwidth waste in case\nof a high-frequency of package redundancy. Let's say if a package is\ncomposed of {A, B}, and the package broadcaster fee-bump, triggering the\ntransformation to {A, B'}, A bandwidth at first propagation is going to be\nwasted. Note, if we assume a dynamic fee-market, this package rebroadcast\nbehavior should be common across the ecosystem. Though ultimately, the\nseriousness of this issue is going to be a function of the number of\nLightning nodes relying on base-layer tx-relay and the number of fee-bumped\nonchain operations per Lightning node.\n\nI believe it would be great to come up with simulations on this front, just\nto avoid silently nullifying all the tedious, small improvements which have\nbeen done in the last years to minimize bitcoin core node's bandwidth.\n\nAnother alternative would be to come with a cost-effective\npackage-replacement policy, so likely more complexity. But might it not\nmake sense to not economically outlaw Lightning nodes with a small fee\nbudget ?\n\nLastly, there is a consideration to have around anti-DoS measures we'll\nhave to deploy for package-relay. Too easy, and that's a security concern\nfor the base-layer, too hard, and that's introducing yet-another tx-relay\njamming vector against L2, this time at the p2p layer (though won't be the\nfirst time [8]\n\nIn any-case we should carefully consider the upgradeability of\npackage-relay v.0, like if we upgrade some components of it such as package\nformat or package-announcement scheme.\n\nSo yeah why not early 0.24 ? Maybe a bit too short with all those p2p\nquestions to clear up among core devs. Ideally, we would land in the\nbeginning/middle of the cycle to have time for beta-testing on the L2-side\nand share feedback.\n\nThough ultimately, this question of p2p design belongs to the bitcoin core\ndev process.\n\n# Deployment timeline\n\nSo what I believe as a rough deployment timeline.\n\n* \"package-relay\" in bitcoin core, early 0.24 or 0.25: a Core's release\ncycle offered to the LN/L2 ecosystem to integrate/exercise/provide feedback\non package API\n\n* \"mempool hardening\" in bitcoin core, early 0.26 or 0.27, a Core's release\ncycle offered to the whole Bitcoin ecosystem to adapt their Bitcoin\nclients, maybe with a boolean setting to smooth the new policy deployment\n\n* SIGHASH_ANYPREVOUT softfork in the coming year(s), opt-in of any LN/L2\nimplementation to migrate its fee-bumping backend on top of it\n\n* \"optimized/multi-party fee-bumping primitive\" softfork (one of tx\nmutation/sigash_iomap/sponsorship proposals) softfork in the coming decade,\nfriendly uplift of the L2 ecosystem\n\nGlad to answer any unclarity or uncorrectness of mine :)\n\nCheers,\nAntoine,\n\n[0] see\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n\n[1] \"The Coupling Principle states that as things get larger, they often\nexhibit increased interdependence between components\".\n\n[2] see\nhttps://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md\n\n[2] see \"Advances in Bitcoin Contracting : Uniform Policy and Package\nRelay\"\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-July/018063.html\n\n[3] I don't think there is a clear discussion on how SIGHASH_ANYPREVOUT\nsolves pinnings beyond those LN meetings logs:\nhttps://gnusha.org/lightning-dev/2020-06-08.log\n\n[4] And I believe such great example has been done with this recent change\nproposed for bitcoin core addr-relay policy:\nhttps://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430, where\nthe PR author did bear the burden of reaching out potentially affected\ndownstream projects.\n\n[5] Like one of tx_mutation/sighash_iomap/sponsorship proposal proposed in\nthe thread \"A Stroll through Fee-Bumping Techniques: Input-based vs\nChild-Pay-for-Parent\" :\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019031.html\n\n[6] For a discussion about fee-bumping issues for L2s extended beyond LN\nsee the analysis of the Revault protocol :\nhttps://arxiv.org/pdf/2102.09392.pdf\n\n[7] As a WIP towards establishing an attacker model, see \"Secure\nFee-Bumping for L2s\"\nhttps://bitcoin-problems.github.io/problems/fee-bumping.html\n\n[8] Tx-relay rules as a concern for second-layers has been raised early on,\nat least during p2p segwit review\nhttps://github.com/bitcoin/bitcoin/issues/8279\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210618/4f640fc7/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-19T01:34:28",
                "message_text_only": "> That's a question I hope we'll gather feedback during next Thursday's\ntransaction relay workshops.\n\nAs someone kindly pointed out to me, workshop is happening Tuesday, June\n22th. Not Thursday, mistake of mine :/\n\n\n\nLe ven. 18 juin 2021 \u00e0 18:11, Antoine Riard <antoine.riard at gmail.com> a\n\u00e9crit :\n\n> Hi,\n>\n> It's a big chunk, so if you don't have time browse parts 1 and 2 and share\n> your 2 sats on the deployment timeline :p\n>\n> This post recalls some unsolved safety holes about Lightning, how\n> package-relay or SIGHASH_ANYPREVOUT can solve the first one, how a mempool\n> hardening can solve the second one, few considerations on package-relay\n> design trade-offs and propose a rough deployment timeline.\n>\n> 1) Lightning Safety Holes : Pre-Signed Feerate and Tx-Pinning (to skip if\n> you're a LN dev)\n>\n> As of today, Lightning is suffering from 2 safety holes w.r.t to\n> base-layer interactions, widely discussed among ln devs.\n>\n> The first one, the pre-signed feerate issue with future broadcasted\n> time-sensitive transactions is laid out clearly in Matt Corallo's \"CPFP\n> Carve-Out Fee-Prediction Issues in Contracting Applications (eg Lightning)\"\n> [0]. This issue might provoke loss of funds, even in non-adversarial\n> settings, i.e a Lightning routing hub not being able to settle backward\n> onchain a successful HTLC during occurrences of sudden mempool congestion.\n>\n> As blockspace demand increases with an always growing number of\n> onchain/offchain bitcoin users, coupling effects are more likely to happen\n> and this pre-signed feerate issue is going to become more urgent to solve\n> [1]. For e.g, few percentiles of increases in feerate being overpriced by\n> Lightning routing hubs to close \"fractional-reserve\" backed anchor\n> channels, driving mempools congestions, provoking anchor channels\n> fee-bumping reserves becoming even more under-provisioned and thus close\n> down, etc.\n>\n> The second issue, malicious transaction pinnings, is documented in Bastien\n> Teinturier's \"Pinning Attacks\" [2]. AFAIK, there is a rough consensus among\n> devs on the conceptual feasibility of such a class of attacks against a LN\n> node, though so far we have not seen them executed in the wild and I'm not\n> aware of anyone having realized them in real-world conditions. Note, there\n> is a variety of attack scenarios to consider which is function of a wide\n> matrix (channel types, LN implementation's `update_fee` policy, LN\n> implementation's `cltv_delta` policy, mempool congestion feerate groups,\n> routing hubs or end nodes) Demoing against deployed LN implementations with\n> default settings has been on my todo for a while, though a priori One\n> Scenario To Exploit Them All doesn't fit well.\n>\n> Side-note, as a LN operator, if you're worried about those security risks,\n> you can bump your `cltv_delta`/`cltv_expiry_delta` to significantly coarse\n> the attacks.\n>\n> I think there is an important point to underscore. Considering the state\n> of knowledge we have today, I believe there is no strong interdependency\n> between solving pre-signed feerate and tx-pinning with the same mechanism\n> from a safety/usability standpoint. Or last such mechanism can be deployed\n> by stages.\n>\n> 2) Solving the Pre-Signed Feerate problem : Package-Relay or\n> SIGHASH_ANYPREVOUT\n>\n> For Lightning, either package-relay or SIGHASH_ANYPREVOUT should be able\n> to solve the pre-signed feerate issue [3]\n>\n> One of the interesting points recalled during the first transaction relay\n> workshops was that L2s making unbounded security assumptions on\n> non-normative tx-relay/mempool acceptance rules sounds a wrong direction\n> for the Bitcoin ecosystem long-term, and more prone to subtle bugs/safety\n> risks across the ecosystem.\n>\n> I did express the contrary, public opinion a while back [4]. That said, I\n> start to agree it's wiser ecosystem-wise to keep those non-normatives rules\n> as only a groundwork for weaker assumptions than consensus ones. Though it\n> would be nice for long-term L2s stability to consider them with more care\n> than today in our base-layer protocol development process [4]\n>\n> On this rational, I now share the opinion it's better long-term to solve\n> the pre-signed feerate problem with a consensus change such as\n> SIGHASH_ANYPREVOUT rather than having too much off-chain coins relying on\n> the weaker assumptions offered by bitcoin core's tx-relay/mempool\n> acceptance rules, and far harder to replicate and disseminate across the\n> ecosystem.\n>\n> However, if SIGHASH_ANYPREVOUT is Things Done Right(tm), should we discard\n> package-relay ?\n>\n> Sadly, in the worst-case scenario we might never reach consensus again\n> across the ecosystem and Taproot is the last softfork. Ever :/ *sad violons\n> and tissues jingle*\n>\n> With this dilemma in mind, it might be wise for the LN/L2 ecosystems to\n> have a fall-back plan to solve their safety/usability issues and\n> package-relay sounds a reasonable, temporary \"patch\".\n>\n> Even if package-relay requires serious engineering effort in Bitcoin Core\n> to avoid introducing new DoSes, swallowing well the complexity increase in\n> critical code paths such as the mempool/p2p stack and a gentle API design\n> for our friends the L2 devs, I believe it's worthy the engineering\n> resources cost. From-my-completely-biased-LN-dev viewpoint :p\n>\n> In the best-case scenario, we'll activate SIGHASH_ANYPREVOUT and better\n> fee-bumping primitives softforks [5] slowly strip off the \"L2 fee-bumping\n> primitive\" semantic from \"package-relay\", friendly nudge the L2 ecosystem\n> to seat their fee-bumping on safer, consensus assumptions and maybe keep\n> the p2p packages to improve on the malicious mempool-partitions-side or as\n> a replacement of our orphan logic.\n>\n> 3) Solving Tx-Pinnings : Hardening the Mempool against Tx-Relay Jammings\n> attacks\n>\n> Current Mempool anti-DoS rules have been mostly designed at a time where\n> the shared-utxo model with competing time-sensitive transactions was still\n> an idea on the whiteboard. The last few years have revealed those anti-DoS\n> rules as a source of security vulnerabilities for Lightning and a research\n> concern for L2s still in the early-phase of deployment [6].\n>\n> Beyond real-world pinning exercises against production software as a\n> complement of the current pinning attacks research, it would be better to\n> agree on a common L2 attacker model before to modify widely-relied subset\n> of the mempool, such as the replace-by-fee logic or the in-mempool package\n> limits [7]. One risk of uncareful changes in this area would be to solve a\n> pinning vector for a L2-alice but introduce a new vuln for a L2-bob.\n>\n> I believe the first part of such a revamp could hopefully land somehow\n> next year. Though, IMHO, in the years to come, we'll have to do more hard\n> reasoning to ensure the mempool supports advanced Bitcoin protocols (e.g\n> OP_CTV congestion tree,  CoinPool, interactive cut-through, ...)\n>\n> Note the opinion I raised above on quality of assumptions on mempool\n> behavior, even if we harden it on the base-layer side,  L2s should be\n> well-aware the product is shipped with a guarantee limitation :p\n>\n> 4) Considerations on Package-Relay Design\n>\n> Package relay relies on at least two cleanly separate components (awesome,\n> if we schedule to deprecate the higher half in the future!)\n> * \"the higher half\" : extension of the mempool logic, with a new\n> package-level policy, not strictly intersecting with the tx-level policy\n> * \"the lower half\" : at least three different designs, receiver initiated,\n> sender-initiated and relay-initiated\n>\n> One open design question for the \"higher half\" is the package-size of the\n> acceptance logic, which is ultimately a function of the L2 ecosystem state.\n> Do we have deployed or in deployment phase L2 protocols with a need for\n> more than 2-stage and if yes what API bounds do they expect ? That's a\n> question I hope we'll gather feedback during next Thursday's transaction\n> relay workshops. IMO, such package API should come out with a specification\n> on which L2-community can be gathered and public consensus established. For\n> the same communications reasons towards downstream projects, we have a\n> BIP125 standard. And especially in this case the bitcoin core protocol\n> development process should carefully listen to the needs of actual L2\n> users. Also, a lot of those L2 devs, they don't speak C++ :)\n>\n> One could imagine those mempool standards as \"perishable\" contracts\n> between a base-layer implementation and the upper layers, with ultimately\n> the full-node implementation reserving itself the right to deprecate them,\n> maybe with a lengthy-warning period ?\n>\n> Beyond that, I believe there is another remaining interdependency between\n> \"the lower half\" design and L2s behaviors, namely bandwidth waste in case\n> of a high-frequency of package redundancy. Let's say if a package is\n> composed of {A, B}, and the package broadcaster fee-bump, triggering the\n> transformation to {A, B'}, A bandwidth at first propagation is going to be\n> wasted. Note, if we assume a dynamic fee-market, this package rebroadcast\n> behavior should be common across the ecosystem. Though ultimately, the\n> seriousness of this issue is going to be a function of the number of\n> Lightning nodes relying on base-layer tx-relay and the number of fee-bumped\n> onchain operations per Lightning node.\n>\n> I believe it would be great to come up with simulations on this front,\n> just to avoid silently nullifying all the tedious, small improvements which\n> have been done in the last years to minimize bitcoin core node's bandwidth.\n>\n> Another alternative would be to come with a cost-effective\n> package-replacement policy, so likely more complexity. But might it not\n> make sense to not economically outlaw Lightning nodes with a small fee\n> budget ?\n>\n> Lastly, there is a consideration to have around anti-DoS measures we'll\n> have to deploy for package-relay. Too easy, and that's a security concern\n> for the base-layer, too hard, and that's introducing yet-another tx-relay\n> jamming vector against L2, this time at the p2p layer (though won't be the\n> first time [8]\n>\n> In any-case we should carefully consider the upgradeability of\n> package-relay v.0, like if we upgrade some components of it such as package\n> format or package-announcement scheme.\n>\n> So yeah why not early 0.24 ? Maybe a bit too short with all those p2p\n> questions to clear up among core devs. Ideally, we would land in the\n> beginning/middle of the cycle to have time for beta-testing on the L2-side\n> and share feedback.\n>\n> Though ultimately, this question of p2p design belongs to the bitcoin core\n> dev process.\n>\n> # Deployment timeline\n>\n> So what I believe as a rough deployment timeline.\n>\n> * \"package-relay\" in bitcoin core, early 0.24 or 0.25: a Core's release\n> cycle offered to the LN/L2 ecosystem to integrate/exercise/provide feedback\n> on package API\n>\n> * \"mempool hardening\" in bitcoin core, early 0.26 or 0.27, a Core's\n> release cycle offered to the whole Bitcoin ecosystem to adapt their Bitcoin\n> clients, maybe with a boolean setting to smooth the new policy deployment\n>\n> * SIGHASH_ANYPREVOUT softfork in the coming year(s), opt-in of any LN/L2\n> implementation to migrate its fee-bumping backend on top of it\n>\n> * \"optimized/multi-party fee-bumping primitive\" softfork (one of tx\n> mutation/sigash_iomap/sponsorship proposals) softfork in the coming decade,\n> friendly uplift of the L2 ecosystem\n>\n> Glad to answer any unclarity or uncorrectness of mine :)\n>\n> Cheers,\n> Antoine,\n>\n> [0] see\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n>\n> [1] \"The Coupling Principle states that as things get larger, they often\n> exhibit increased interdependence between components\".\n>\n> [2] see\n> https://github.com/t-bast/lightning-docs/blob/master/pinning-attacks.md\n>\n> [2] see \"Advances in Bitcoin Contracting : Uniform Policy and Package\n> Relay\"\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-July/018063.html\n>\n> [3] I don't think there is a clear discussion on how SIGHASH_ANYPREVOUT\n> solves pinnings beyond those LN meetings logs:\n> https://gnusha.org/lightning-dev/2020-06-08.log\n>\n> [4] And I believe such great example has been done with this recent change\n> proposed for bitcoin core addr-relay policy:\n> https://github.com/bitcoin/bitcoin/pull/21528#issuecomment-809906430,\n> where the PR author did bear the burden of reaching out potentially\n> affected downstream projects.\n>\n> [5] Like one of tx_mutation/sighash_iomap/sponsorship proposal proposed in\n> the thread \"A Stroll through Fee-Bumping Techniques: Input-based vs\n> Child-Pay-for-Parent\" :\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019031.html\n>\n> [6] For a discussion about fee-bumping issues for L2s extended beyond LN\n> see the analysis of the Revault protocol :\n> https://arxiv.org/pdf/2102.09392.pdf\n>\n> [7] As a WIP towards establishing an attacker model, see \"Secure\n> Fee-Bumping for L2s\"\n> https://bitcoin-problems.github.io/problems/fee-bumping.html\n>\n> [8] Tx-relay rules as a concern for second-layers has been raised early\n> on, at least during p2p segwit review\n> https://github.com/bitcoin/bitcoin/issues/8279\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210618/c61cd0b8/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Waiting SIGHASH_ANYPREVOUT and Packing Packages",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 26142
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] Waiting SIGHASH_ANYPREVOUT and Packing Packages",
        "thread_messages": [
            {
                "author": "David A. Harding",
                "date": "2021-06-19T13:36:53",
                "message_text_only": "On Fri, Jun 18, 2021 at 06:11:38PM -0400, Antoine Riard wrote:\n> 2) Solving the Pre-Signed Feerate problem : Package-Relay or\n> SIGHASH_ANYPREVOUT\n> \n> For Lightning, either package-relay or SIGHASH_ANYPREVOUT should be able to\n> solve the pre-signed feerate issue [3]\n>\n> [...]\n>\n> [3] I don't think there is a clear discussion on how SIGHASH_ANYPREVOUT\n> solves pinnings beyond those LN meetings logs:\n> https://gnusha.org/lightning-dev/2020-06-08.log\n\nFor anyone else looking, the most relevant line seems to be:\n\n  13:50 < BlueMatt> (sidenote: sighash_no_input is *really* elegant here\n  - assuming a lot of complicated logic in core to do so, you could\n  imagine blind-cpfp-bumping *any* commitment tx without knowing its\n  there or which one it is all with one tx.......in theory)\n\nThat might work for current LN-penalty, but I'm not sure it works for\neltoo.  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\nto refer to any prevout, that implies anyone else can do the same.\nMiners who were aware of two or more states from an eltoo channel would\nbe incentivized to rewrite to the oldest state, giving them fee revenue\nnow and ensuring fee revenue in the future when a later state update is\nbroadcast.\n\nIf the attacker using pinning is able to reuse their attack at no cost,\nthey can re-pin the channel again and force the honest user to pay\nanother anyprevout bounty to miners.  Repeat this a bunch of times and\nthe honest user has now spent more on fees than their balance from the\nclosed channel.\n\nEven if my analysis above is wrong, I would encourage you or Matt or\nsomeone to write up this anyprevout idea in more detail and distribute\nit before you promote it much more.\n\n> package-relay sounds a reasonable, temporary \"patch\".\n\nEven if every protocol based on presigned transactions can magically\nallow dynamically adding inputs and modifying outputs for fees, and we\nalso have a magic perfect transaction replacement protocol, package\nrelay is still fundamentally useful for CPFP fee bumping very low\nfeerate transactions received from an external party.  E.g. Alice pays\nBob, mempool min feerates increase and Alice's transaction is dropped,\nBob still wants the money, so he submits a package with Alice's\ntransaction plus his own high feerate spend of it.\n\nPackage relay is a clear improvement now, and one I expect to be\npermanent for as long as we're using anything like the current protocol.\n \n> # Deployment timeline\n> \n> So what I believe as a rough deployment timeline.\n\nI don't think it's appropriate to be creating timelines like this that\ndepend on the work of a large number of contributors who I don't believe\nyou've consulted.  For details on this point of view, please see\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014726.html\n\nStuff will get done when it gets done.\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210619/cfff070b/attachment.sig>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-21T08:13:32",
                "message_text_only": "Hi Dave,\n\n> That might work for current LN-penalty, but I'm not sure it works for\neltoo.\n\nWell, we have not settled yet on the eltoo design but if we take the later\nproposal in date [0], signing the update transaction with\nSIGHGASH_ANYPREVOUT lets you attach non-interactively a single-party\ncontrolled input at broadcast-time. Providing the input amount is high\nenough to bump the transaction feerate over network mempools, it should\nallow the tx to propagate across network mempools and that way solve the\npre-signed feerate problem as defined in the post ?\n\n>  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n> to refer to any prevout, that implies anyone else can do the same.\n> Miners who were aware of two or more states from an eltoo channel would\n> be incentivized to rewrite to the oldest state, giving them fee revenue\n> now and ensuring fee revenue in the future when a later state update is\n> broadcast.\n\nYep, you can add a per-participant key to lockdown the transaction and\navoid any in-flight malleability ? I think this is discussed in the \"A\nStroll through Fee-Bumping Techniques\" thread.\n\n> If the attacker using pinning is able to reuse their attack at no cost,\n> they can re-pin the channel again and force the honest user to pay\n> another anyprevout bounty to miners.\n\nThis is also true with package-relay where your counterparty, with a better\nknowledge of network mempools, can always re-broadcast a CPFP-bumped\nmalicious package ? Under this assumption, I think you should always be\nready to bump our honest package.\n\nFurther, for the clarity of the discussion, can you point to which pinning\nscenario you're thinking of or if it's new under SIGHASH_ANYPREVOUT,\ndescribe it ?\n\n> Repeat this a bunch of times and the honest user has now spent more on\nfees than their balance from the\nclosed channel.\n\nAnd sadly, as this concern also exists in case of a miner-harvesting attack\nagainst LN nodes, a concern that Gleb and I expressed more than a year ago\nin a public post [1], a good L2 client should always upper bound its\nfee-bumping reserve. I've a short though-unclear note on this notion of\nfee-bumping upper to warn other L2 engineers  in \"On Mempool Funny Games\nagainst Multi-Party Funded Transactions\"\n\nPlease read so:\n\n\"A L2 client, with only a view of its mempool at best, won't understand why\n the transaction doesn't confirm and if it's responsible for the\n fee-bumping, it might do multiple rounds of feerate increase through CPFP,\n in vain. As the fee-bumping algorithm is assumed to be known if the victim\n client is open source code, the attacker can predict when the fee-bumping\n logic reaches its upper bound.\"\n\nThough thanks for the recall! I should log dynamic-balances in RL's\n`ChannelMonitorUpdate` for our ongoing implementation of anchor, updating\nmy TODO :p\n\n> Even if my analysis above is wrong, I would encourage you or Matt or\nsomeone to write up this anyprevout idea in more detail and distribute\nit before you promote it much more.\n\nThat's a really fair point, as a lot of the reasoning was based on private\ndiscussion with Matt. Though as SIGHASH_ANYPREVOUT isn't advocated for\ncommunity consensus and those things take time, should just take a few\nhours of my time.\n\n> Even if every protocol based on presigned transactions can magically\nallow dynamically adding inputs and modifying outputs for fees, and we\nalso have a magic perfect transaction replacement protocol,\n\n\"\u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d\nArthur C. Clarke\n\nWit apart, that might be the outcome with careful bitcoin protocol\ndevelopment, where technical issues are laid out in a best effort (of\nmine!) and spread to the Bitcoin community on the most public bitcoin\ncommunication channel ?\n\nAnd humbly, on all those L2 issues I did change my opinion, as I've written\nso much explicitly in this thread post by pointing to an older post of mine\n(\"Advances in Bitcoin Contracting : Uniform Policy and Package Relay\").\nThis reversal, partially motivated by a lot of discussion with folks,\nincluding yourself, initiated since at least mid last year.\n\n> package relay is still fundamentally useful for CPFP fee bumping very low\n> feerate transactions received from an external party.  E.g. Alice pays\n> Bob, mempool min feerates increase and Alice's transaction is dropped,\n> Bob still wants the money, so he submits a package with Alice's\n> transaction plus his own high feerate spend of it.\n\nI think this point would be a reverse of our p2p design where we are now\nmaking the sender responsible for the receiver quality of its mempool\nfeerate ? This question has never been clear up during the years-long\ndiscussion of package-relay design [1].\n\nThough referring to the thread post and last week's transaction-relay\nworkshop, I did point out that package-relay might serve in the long-term\nas a mempool-sync mechanism to prevent potential malicious mempool\npartitions [2].\n\n> Package relay is a clear improvement now, and one I expect to be\npermanent for as long as we're using anything like the current protocol\n\nAgain, reading my post, I did point out that we might keep the \"lower half\"\nof package-relay and deprecate only the higher part of it as we have more\nfeerate-efficient fee-bumping primitive available. If  it sounds too much\nof a release engineering effort to synchronize on the scale of an\necosystem, think about the ongoing deprecation of Tor V2.\n\nFurther, you did express a far less assertive opinion during last Tuesday\ntransaction-relay workshops, to which a lot of folks attended, where you\npointed it might not be a good idea for L2s to make more assumptions on\nnon-normative:\n\n\"harding> I do think we should be using miners profit incentive more for\nstuff rather than trying to normalize mempool policy (which not entirely\npossible), e.g. things like\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html\n\"\n\nArguing for package-relay \"permanence\" moves in the contrary decision IMHO ?\n\n> I don't think it's appropriate to be creating timelines like this that\ndepend on the work of a large number of contributors who I don't believe\n\nThanks Dave, this is your opinion and I respect this. I'll let any\nparticipant of this mailing list make an opinion on its own, following\ntheir private judgement. It might be based from a lot of different factors,\ne.g \"trusting the experts\" or gathering diverse in-field authorities'\nopinions or reasoning from scratch based on raw, public facts.\n\nThough might I ask you on which information sources are you finding your\nbelief ? I'm curious if you're aware of any contributors who feel entitled\nto be consulted in a decentralized development process...\n\nFor the records, I did consult no one. As even in the technical circle that\nwould have been a lot of open source projects teams to reach out : LND,\nc-ligtning, Eclair, coin-teleport, revault, sapio, btcsuite, bcoin,\nlibbitcoin, wasabi's coinjoin, samourai wallet's coinjoin, ...\n\nI was lazy, I just shot a mail :p\n\nW.r.t to Greg's 4-year old's piece, I'll let him express his opinion on how\nthe expressed framework applies to my post, the Bitcoin dev stage has grown\na lot since then. What was making sense when you had like ~20 Bitcoin dev\nwith 90% of the technical knowledge doesn't scale when you have multiple\nsecond-layers specifications of which you have multiple implementations\nteams, some of them  decentralized and spread through different\ncountries/timezones, IMHO.\n\nThough, Dave if you strongly hold your opinion on my behavior, I would\ninvite you to do this intellectual work by yourself.\n\nBrowsing quickly through Greg's piece, a lot of the reasoning is based on\nFOSS experience from Linux/Juniper, which to the best of my knowledge are\ncentralized software projects ?\n\nNote, also Paul Storzc's post has the simple phrase :\n\n\"I emphasized concrete numbers, and concrete dates\"\n\nI believe my post doesn't have such numbers and concrete dates ?\n\nPresence of Core version numbers are motivated as clear signalling for L2\ndeveloppers to update their backend in case of undocumented, subtle policy\nchanges slipping in the codebase. Let's minimize CVE-2020-26895\nstyle-of-bugs across the ecosystem :/\n\nFinally, the presence of timelines in this post is also a gentle call for\nthe Bitcoin ecosystem to act on those safety holes, of which the\nseriousness has been underscored by a lot of contributors in the past,\nespecially for the pre-signed feerate problem and even before I was in the\nBitcoin stage.\n\nSo better to patch them before they do manifest in the wild, and folks\nstart to bleed coins.  What you learn from practicing security research,\nthe lack of action can be harmful :/\n\n> Stuff will get done when it gets done.\n\nDon't forget bugs might slip in but that's fine if you have the skilled\nfolks around to catch them :)\n\nAnd yes I really care about Lightning, and all those cute new L2 protocols\nfostering in the community :)\n\nFinally, you know Dave, I'm just spreading ideas.\n\nIf those ideas are sound and folks love them, awesome! They're free to use,\nstudy, share and modify them to build better systems.\n\nIf I'm wrong, like I've been in the past, like I might be today and like\nI'll be in the future, I hope they will be patient to teach me back and\nwe'll learn.\n\nHacker ethos :) ?\n\nCheers,\nAntoine\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html\n\n[1] https://github.com/bitcoin/bitcoin/issues/14895\n\n[2]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002569.html\n\nLe sam. 19 juin 2021 \u00e0 09:38, David A. Harding <dave at dtrt.org> a \u00e9crit :\n\n> On Fri, Jun 18, 2021 at 06:11:38PM -0400, Antoine Riard wrote:\n> > 2) Solving the Pre-Signed Feerate problem : Package-Relay or\n> > SIGHASH_ANYPREVOUT\n> >\n> > For Lightning, either package-relay or SIGHASH_ANYPREVOUT should be able\n> to\n> > solve the pre-signed feerate issue [3]\n> >\n> > [...]\n> >\n> > [3] I don't think there is a clear discussion on how SIGHASH_ANYPREVOUT\n> > solves pinnings beyond those LN meetings logs:\n> > https://gnusha.org/lightning-dev/2020-06-08.log\n>\n> For anyone else looking, the most relevant line seems to be:\n>\n>   13:50 < BlueMatt> (sidenote: sighash_no_input is *really* elegant here\n>   - assuming a lot of complicated logic in core to do so, you could\n>   imagine blind-cpfp-bumping *any* commitment tx without knowing its\n>   there or which one it is all with one tx.......in theory)\n>\n> That might work for current LN-penalty, but I'm not sure it works for\n> eltoo.  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n> to refer to any prevout, that implies anyone else can do the same.\n> Miners who were aware of two or more states from an eltoo channel would\n> be incentivized to rewrite to the oldest state, giving them fee revenue\n> now and ensuring fee revenue in the future when a later state update is\n> broadcast.\n>\n> If the attacker using pinning is able to reuse their attack at no cost,\n> they can re-pin the channel again and force the honest user to pay\n> another anyprevout bounty to miners.  Repeat this a bunch of times and\n> the honest user has now spent more on fees than their balance from the\n> closed channel.\n>\n> Even if my analysis above is wrong, I would encourage you or Matt or\n> someone to write up this anyprevout idea in more detail and distribute\n> it before you promote it much more.\n>\n> > package-relay sounds a reasonable, temporary \"patch\".\n>\n> Even if every protocol based on presigned transactions can magically\n> allow dynamically adding inputs and modifying outputs for fees, and we\n> also have a magic perfect transaction replacement protocol, package\n> relay is still fundamentally useful for CPFP fee bumping very low\n> feerate transactions received from an external party.  E.g. Alice pays\n> Bob, mempool min feerates increase and Alice's transaction is dropped,\n> Bob still wants the money, so he submits a package with Alice's\n> transaction plus his own high feerate spend of it.\n>\n> Package relay is a clear improvement now, and one I expect to be\n> permanent for as long as we're using anything like the current protocol.\n>\n> > # Deployment timeline\n> >\n> > So what I believe as a rough deployment timeline.\n>\n> I don't think it's appropriate to be creating timelines like this that\n> depend on the work of a large number of contributors who I don't believe\n> you've consulted.  For details on this point of view, please see\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014726.html\n>\n> Stuff will get done when it gets done.\n>\n> -Dave\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210621/7d375a2a/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-06-21T10:20:40",
                "message_text_only": "I don't want to divert from the topic of this thread (\"Waiting\nSIGHASH_ANYPREVOUT and Packing Packages\"), we can set up a separate\nthread if we want to discuss this further. But just a couple of\nthings.\n\n> Browsing quickly through Greg's piece, a lot of the reasoning is based on FOSS experience from Linux/Juniper, which to the best of my knowledge are centralized software projects ?\n\nThat is Greg's point. If Linux doesn't look further than the current\nversion and the next version with a BDFL (Linus) a decentralized\nproject like Bitcoin Core is going to struggle even more with longer\nterm roadmaps.\n\nI think it is important to discuss what order changes should be\nattempted but I agree with David that putting specific future version\nnumbers on changes is speculative at best and misleading at worst. The\nrecord of previous predictions of what will be included in particular\nfuture versions is not strong :)\n\n> What was making sense when you had like ~20 Bitcoin dev with 90% of the technical knowledge doesn't scale when you have multiple second-layers specifications\n\nIt is great that we have a larger set of contributors in the ecosystem\ntoday than back in say pre 2017. But today that set of contributors is\nspread widely across a number of different projects that didn't exist\npre 2017. Changes to Core are (generally) likely to be implemented and\nreviewed by current Core contributors as Lightning implementation\ndevelopers (generally) seem to have their hands full with their own\nimplementations.\n\nI think we can get the balance right by making progress on this\n(important) discussion whilst also maintaining humility that we don't\nknow exact timelines and that getting things merged into Core relies\non a number of people who have varying levels of interest and\nunderstanding of L2 protocols.\n\nOn Mon, Jun 21, 2021 at 9:13 AM Antoine Riard <antoine.riard at gmail.com> wrote:\n>\n> Hi Dave,\n>\n> > That might work for current LN-penalty, but I'm not sure it works for\n> eltoo.\n>\n> Well, we have not settled yet on the eltoo design but if we take the later proposal in date [0], signing the update transaction with SIGHGASH_ANYPREVOUT lets you attach non-interactively a single-party controlled input at broadcast-time. Providing the input amount is high enough to bump the transaction feerate over network mempools, it should allow the tx to propagate across network mempools and that way solve the pre-signed feerate problem as defined in the post ?\n>\n> >  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n> > to refer to any prevout, that implies anyone else can do the same.\n> > Miners who were aware of two or more states from an eltoo channel would\n> > be incentivized to rewrite to the oldest state, giving them fee revenue\n> > now and ensuring fee revenue in the future when a later state update is\n> > broadcast.\n>\n> Yep, you can add a per-participant key to lockdown the transaction and avoid any in-flight malleability ? I think this is discussed in the \"A Stroll through Fee-Bumping Techniques\" thread.\n>\n> > If the attacker using pinning is able to reuse their attack at no cost,\n> > they can re-pin the channel again and force the honest user to pay\n> > another anyprevout bounty to miners.\n>\n> This is also true with package-relay where your counterparty, with a better knowledge of network mempools, can always re-broadcast a CPFP-bumped malicious package ? Under this assumption, I think you should always be ready to bump our honest package.\n>\n> Further, for the clarity of the discussion, can you point to which pinning scenario you're thinking of or if it's new under SIGHASH_ANYPREVOUT, describe it ?\n>\n> > Repeat this a bunch of times and the honest user has now spent more on fees than their balance from the\n> closed channel.\n>\n> And sadly, as this concern also exists in case of a miner-harvesting attack against LN nodes, a concern that Gleb and I expressed more than a year ago in a public post [1], a good L2 client should always upper bound its fee-bumping reserve. I've a short though-unclear note on this notion of fee-bumping upper to warn other L2 engineers  in \"On Mempool Funny Games against Multi-Party Funded Transactions\"\n>\n> Please read so:\n>\n> \"A L2 client, with only a view of its mempool at best, won't understand why\n>  the transaction doesn't confirm and if it's responsible for the\n>  fee-bumping, it might do multiple rounds of feerate increase through CPFP,\n>  in vain. As the fee-bumping algorithm is assumed to be known if the victim\n>  client is open source code, the attacker can predict when the fee-bumping\n>  logic reaches its upper bound.\"\n>\n> Though thanks for the recall! I should log dynamic-balances in RL's `ChannelMonitorUpdate` for our ongoing implementation of anchor, updating my TODO :p\n>\n> > Even if my analysis above is wrong, I would encourage you or Matt or\n> someone to write up this anyprevout idea in more detail and distribute\n> it before you promote it much more.\n>\n> That's a really fair point, as a lot of the reasoning was based on private discussion with Matt. Though as SIGHASH_ANYPREVOUT isn't advocated for community consensus and those things take time, should just take a few hours of my time.\n>\n> > Even if every protocol based on presigned transactions can magically\n> allow dynamically adding inputs and modifying outputs for fees, and we\n> also have a magic perfect transaction replacement protocol,\n>\n> \"\u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d Arthur C. Clarke\n>\n> Wit apart, that might be the outcome with careful bitcoin protocol development, where technical issues are laid out in a best effort (of mine!) and spread to the Bitcoin community on the most public bitcoin communication channel ?\n>\n> And humbly, on all those L2 issues I did change my opinion, as I've written so much explicitly in this thread post by pointing to an older post of mine (\"Advances in Bitcoin Contracting : Uniform Policy and Package Relay\"). This reversal, partially motivated by a lot of discussion with folks, including yourself, initiated since at least mid last year.\n>\n> > package relay is still fundamentally useful for CPFP fee bumping very low\n> > feerate transactions received from an external party.  E.g. Alice pays\n> > Bob, mempool min feerates increase and Alice's transaction is dropped,\n> > Bob still wants the money, so he submits a package with Alice's\n> > transaction plus his own high feerate spend of it.\n>\n> I think this point would be a reverse of our p2p design where we are now making the sender responsible for the receiver quality of its mempool feerate ? This question has never been clear up during the years-long discussion of package-relay design [1].\n>\n> Though referring to the thread post and last week's transaction-relay workshop, I did point out that package-relay might serve in the long-term as a mempool-sync mechanism to prevent potential malicious mempool partitions [2].\n>\n> > Package relay is a clear improvement now, and one I expect to be\n> permanent for as long as we're using anything like the current protocol\n>\n> Again, reading my post, I did point out that we might keep the \"lower half\" of package-relay and deprecate only the higher part of it as we have more feerate-efficient fee-bumping primitive available. If  it sounds too much of a release engineering effort to synchronize on the scale of an ecosystem, think about the ongoing deprecation of Tor V2.\n>\n> Further, you did express a far less assertive opinion during last Tuesday transaction-relay workshops, to which a lot of folks attended, where you pointed it might not be a good idea for L2s to make more assumptions on non-normative:\n>\n> \"harding> I do think we should be using miners profit incentive more for stuff rather than trying to normalize mempool policy (which not entirely possible), e.g. things like https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html\"\n>\n> Arguing for package-relay \"permanence\" moves in the contrary decision IMHO ?\n>\n> > I don't think it's appropriate to be creating timelines like this that\n> depend on the work of a large number of contributors who I don't believe\n>\n> Thanks Dave, this is your opinion and I respect this. I'll let any participant of this mailing list make an opinion on its own, following their private judgement. It might be based from a lot of different factors, e.g \"trusting the experts\" or gathering diverse in-field authorities' opinions or reasoning from scratch based on raw, public facts.\n>\n> Though might I ask you on which information sources are you finding your belief ? I'm curious if you're aware of any contributors who feel entitled to be consulted in a decentralized development process...\n>\n> For the records, I did consult no one. As even in the technical circle that would have been a lot of open source projects teams to reach out : LND, c-ligtning, Eclair, coin-teleport, revault, sapio, btcsuite, bcoin, libbitcoin, wasabi's coinjoin, samourai wallet's coinjoin, ...\n>\n> I was lazy, I just shot a mail :p\n>\n> W.r.t to Greg's 4-year old's piece, I'll let him express his opinion on how the expressed framework applies to my post, the Bitcoin dev stage has grown a lot since then. What was making sense when you had like ~20 Bitcoin dev with 90% of the technical knowledge doesn't scale when you have multiple second-layers specifications of which you have multiple implementations teams, some of them  decentralized and spread through different countries/timezones, IMHO.\n>\n> Though, Dave if you strongly hold your opinion on my behavior, I would invite you to do this intellectual work by yourself.\n>\n> Browsing quickly through Greg's piece, a lot of the reasoning is based on FOSS experience from Linux/Juniper, which to the best of my knowledge are centralized software projects ?\n>\n> Note, also Paul Storzc's post has the simple phrase :\n>\n> \"I emphasized concrete numbers, and concrete dates\"\n>\n> I believe my post doesn't have such numbers and concrete dates ?\n>\n> Presence of Core version numbers are motivated as clear signalling for L2 developpers to update their backend in case of undocumented, subtle policy changes slipping in the codebase. Let's minimize CVE-2020-26895 style-of-bugs across the ecosystem :/\n>\n> Finally, the presence of timelines in this post is also a gentle call for the Bitcoin ecosystem to act on those safety holes, of which the seriousness has been underscored by a lot of contributors in the past, especially for the pre-signed feerate problem and even before I was in the Bitcoin stage.\n>\n> So better to patch them before they do manifest in the wild, and folks start to bleed coins.  What you learn from practicing security research, the lack of action can be harmful :/\n>\n> > Stuff will get done when it gets done.\n>\n> Don't forget bugs might slip in but that's fine if you have the skilled folks around to catch them :)\n>\n> And yes I really care about Lightning, and all those cute new L2 protocols fostering in the community :)\n>\n> Finally, you know Dave, I'm just spreading ideas.\n>\n> If those ideas are sound and folks love them, awesome! They're free to use, study, share and modify them to build better systems.\n>\n> If I'm wrong, like I've been in the past, like I might be today and like I'll be in the future, I hope they will be patient to teach me back and we'll learn.\n>\n> Hacker ethos :) ?\n>\n> Cheers,\n> Antoine\n>\n> [0] https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html\n>\n> [1] https://github.com/bitcoin/bitcoin/issues/14895\n>\n> [2] https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002569.html\n>\n> Le sam. 19 juin 2021 \u00e0 09:38, David A. Harding <dave at dtrt.org> a \u00e9crit :\n>>\n>> On Fri, Jun 18, 2021 at 06:11:38PM -0400, Antoine Riard wrote:\n>> > 2) Solving the Pre-Signed Feerate problem : Package-Relay or\n>> > SIGHASH_ANYPREVOUT\n>> >\n>> > For Lightning, either package-relay or SIGHASH_ANYPREVOUT should be able to\n>> > solve the pre-signed feerate issue [3]\n>> >\n>> > [...]\n>> >\n>> > [3] I don't think there is a clear discussion on how SIGHASH_ANYPREVOUT\n>> > solves pinnings beyond those LN meetings logs:\n>> > https://gnusha.org/lightning-dev/2020-06-08.log\n>>\n>> For anyone else looking, the most relevant line seems to be:\n>>\n>>   13:50 < BlueMatt> (sidenote: sighash_no_input is *really* elegant here\n>>   - assuming a lot of complicated logic in core to do so, you could\n>>   imagine blind-cpfp-bumping *any* commitment tx without knowing its\n>>   there or which one it is all with one tx.......in theory)\n>>\n>> That might work for current LN-penalty, but I'm not sure it works for\n>> eltoo.  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n>> to refer to any prevout, that implies anyone else can do the same.\n>> Miners who were aware of two or more states from an eltoo channel would\n>> be incentivized to rewrite to the oldest state, giving them fee revenue\n>> now and ensuring fee revenue in the future when a later state update is\n>> broadcast.\n>>\n>> If the attacker using pinning is able to reuse their attack at no cost,\n>> they can re-pin the channel again and force the honest user to pay\n>> another anyprevout bounty to miners.  Repeat this a bunch of times and\n>> the honest user has now spent more on fees than their balance from the\n>> closed channel.\n>>\n>> Even if my analysis above is wrong, I would encourage you or Matt or\n>> someone to write up this anyprevout idea in more detail and distribute\n>> it before you promote it much more.\n>>\n>> > package-relay sounds a reasonable, temporary \"patch\".\n>>\n>> Even if every protocol based on presigned transactions can magically\n>> allow dynamically adding inputs and modifying outputs for fees, and we\n>> also have a magic perfect transaction replacement protocol, package\n>> relay is still fundamentally useful for CPFP fee bumping very low\n>> feerate transactions received from an external party.  E.g. Alice pays\n>> Bob, mempool min feerates increase and Alice's transaction is dropped,\n>> Bob still wants the money, so he submits a package with Alice's\n>> transaction plus his own high feerate spend of it.\n>>\n>> Package relay is a clear improvement now, and one I expect to be\n>> permanent for as long as we're using anything like the current protocol.\n>>\n>> > # Deployment timeline\n>> >\n>> > So what I believe as a rough deployment timeline.\n>>\n>> I don't think it's appropriate to be creating timelines like this that\n>> depend on the work of a large number of contributors who I don't believe\n>> you've consulted.  For details on this point of view, please see\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014726.html\n>>\n>> Stuff will get done when it gets done.\n>>\n>> -Dave\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-06-24T13:03:21",
                "message_text_only": "Hi Michael,\n\n> Browsing quickly through Greg's piece, a lot of the reasoning is based on\nFOSS experience from Linux/Juniper, which to the best of my knowledge are\ncentralized software projects ?\n\n> That is Greg's point. If Linux doesn't look further than the current\n> version and the next version with a BDFL (Linus) a decentralized\n> project like Bitcoin Core is going to struggle even more with longer\n> term roadmaps.\n\nI was far more inclined to recall the unsolved problems for Lightning/L2s\n(pre-signed feerate/tx-pinnings) than calling out strong solutions to them.\nI believe problem spaces are quite something stable in engineering/science,\nat least until they're formalized differently. But even coming to consensus\non  the existence of problems and a shared perception of the severity of\nthem can take a long time. In fact, it might even be the hardest step in a\ndecentralized ecosystem like Bitcoin.\n\nAnd I fill in on the low-relevance of roadmaps, real development is a\ncontinuous zigzag. If we look in the past and take the transaction\nmalleability issue, I think we can observe it took multiple proposals (bip\n62, normalized txid,  sighash_noinput, ...),  of which we're even\nimplemented in Core, before to finally settle on segwit. Though I would say\nlessons were drawn about shortcomings of every transient proposal.\n\n> I think it is important to discuss what order changes should be\n> attempted but I agree with David that putting specific future version\n> numbers on changes is speculative at best and misleading at worst. The\n> record of previous predictions of what will be included in particular\n> future versions is not strong :)\n\nI recognize it wasn't delicate to put exact version numbers, though note\nmultiple, alternative versions numbers were deliberately proposed for each\nspecific change and timelines given in terms of years,  more as an invite\nto open a discussion on such changes and where/when they could take place,\nthat in anyway a finite, consistent deployment proposal.\n\nFurther, I still believe it would be cool to have a bit more coordination\nwhen Core implements sophisticated mechanisms designed for downstream\nsupport, in the sense of feedback exchanged across projects all along their\nrelease schedules. For e.g, with package-relay, as a Lightning team it's\nlikely you will have to rework your tx-broadcast module which might take a\nfew good weeks of review and test. Though, coming to this best practice\n(imho) across the different Bitcoin layers might take years and that's\nperfectly fine, we'll see what emerges :)\n\n> What was making sense when you had like ~20 Bitcoin dev with 90% of the\ntechnical knowledge doesn't scale when you have multiple second-layers\nspecifications\n\n> It is great that we have a larger set of contributors in the ecosystem\n> today than back in say pre 2017. But today that set of contributors is\n> spread widely across a number of different projects that didn't exist\n> pre 2017. Changes to Core are (generally) likely to be implemented and\n> reviewed by current Core contributors as Lightning implementation\n> developers (generally) seem to have their hands full with their own\n> implementations.\n\nWell I strongly believe that the Core review process is open to anyone :) ?\nIf some upper layers contributors are generously offering their time to\nshare back their experiences, especially during the design phase of\nsoftware features, I hope we might be on path to deliver better stuff.\n\nFurther, that's a more personal note, I'm worried long-term about\nlayer-monoculture cropping up in the ecosystem, a concern echoing the\nhistory of Internet development [0].\n\n> I think we can get the balance right by making progress on this\n> (important) discussion whilst also maintaining humility that we don't\n> know exact timelines and that getting things merged into Core relies\n> on a number of people who have varying levels of interest and\n> understanding of L2 protocols.\n\nYes, as answers to my post are showing, I might have lacked patience in\nthis case :/ Sometimes, it's hard to gauge your own cognitive dissonance on\ntopics.\n\nCheers,\nAntoine\n\n[0] See \"Interactions between Layers\" in \"General Architectural and Policy\nConsiderations\", RFC 3426\n\nLe lun. 21 juin 2021 \u00e0 06:20, Michael Folkson <michaelfolkson at gmail.com> a\n\u00e9crit :\n\n> I don't want to divert from the topic of this thread (\"Waiting\n> SIGHASH_ANYPREVOUT and Packing Packages\"), we can set up a separate\n> thread if we want to discuss this further. But just a couple of\n> things.\n>\n> > Browsing quickly through Greg's piece, a lot of the reasoning is based\n> on FOSS experience from Linux/Juniper, which to the best of my knowledge\n> are centralized software projects ?\n>\n> That is Greg's point. If Linux doesn't look further than the current\n> version and the next version with a BDFL (Linus) a decentralized\n> project like Bitcoin Core is going to struggle even more with longer\n> term roadmaps.\n>\n> I think it is important to discuss what order changes should be\n> attempted but I agree with David that putting specific future version\n> numbers on changes is speculative at best and misleading at worst. The\n> record of previous predictions of what will be included in particular\n> future versions is not strong :)\n>\n> > What was making sense when you had like ~20 Bitcoin dev with 90% of the\n> technical knowledge doesn't scale when you have multiple second-layers\n> specifications\n>\n> It is great that we have a larger set of contributors in the ecosystem\n> today than back in say pre 2017. But today that set of contributors is\n> spread widely across a number of different projects that didn't exist\n> pre 2017. Changes to Core are (generally) likely to be implemented and\n> reviewed by current Core contributors as Lightning implementation\n> developers (generally) seem to have their hands full with their own\n> implementations.\n>\n> I think we can get the balance right by making progress on this\n> (important) discussion whilst also maintaining humility that we don't\n> know exact timelines and that getting things merged into Core relies\n> on a number of people who have varying levels of interest and\n> understanding of L2 protocols.\n>\n> On Mon, Jun 21, 2021 at 9:13 AM Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n> >\n> > Hi Dave,\n> >\n> > > That might work for current LN-penalty, but I'm not sure it works for\n> > eltoo.\n> >\n> > Well, we have not settled yet on the eltoo design but if we take the\n> later proposal in date [0], signing the update transaction with\n> SIGHGASH_ANYPREVOUT lets you attach non-interactively a single-party\n> controlled input at broadcast-time. Providing the input amount is high\n> enough to bump the transaction feerate over network mempools, it should\n> allow the tx to propagate across network mempools and that way solve the\n> pre-signed feerate problem as defined in the post ?\n> >\n> > >  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n> > > to refer to any prevout, that implies anyone else can do the same.\n> > > Miners who were aware of two or more states from an eltoo channel would\n> > > be incentivized to rewrite to the oldest state, giving them fee revenue\n> > > now and ensuring fee revenue in the future when a later state update is\n> > > broadcast.\n> >\n> > Yep, you can add a per-participant key to lockdown the transaction and\n> avoid any in-flight malleability ? I think this is discussed in the \"A\n> Stroll through Fee-Bumping Techniques\" thread.\n> >\n> > > If the attacker using pinning is able to reuse their attack at no cost,\n> > > they can re-pin the channel again and force the honest user to pay\n> > > another anyprevout bounty to miners.\n> >\n> > This is also true with package-relay where your counterparty, with a\n> better knowledge of network mempools, can always re-broadcast a CPFP-bumped\n> malicious package ? Under this assumption, I think you should always be\n> ready to bump our honest package.\n> >\n> > Further, for the clarity of the discussion, can you point to which\n> pinning scenario you're thinking of or if it's new under\n> SIGHASH_ANYPREVOUT, describe it ?\n> >\n> > > Repeat this a bunch of times and the honest user has now spent more on\n> fees than their balance from the\n> > closed channel.\n> >\n> > And sadly, as this concern also exists in case of a miner-harvesting\n> attack against LN nodes, a concern that Gleb and I expressed more than a\n> year ago in a public post [1], a good L2 client should always upper bound\n> its fee-bumping reserve. I've a short though-unclear note on this notion of\n> fee-bumping upper to warn other L2 engineers  in \"On Mempool Funny Games\n> against Multi-Party Funded Transactions\"\n> >\n> > Please read so:\n> >\n> > \"A L2 client, with only a view of its mempool at best, won't understand\n> why\n> >  the transaction doesn't confirm and if it's responsible for the\n> >  fee-bumping, it might do multiple rounds of feerate increase through\n> CPFP,\n> >  in vain. As the fee-bumping algorithm is assumed to be known if the\n> victim\n> >  client is open source code, the attacker can predict when the\n> fee-bumping\n> >  logic reaches its upper bound.\"\n> >\n> > Though thanks for the recall! I should log dynamic-balances in RL's\n> `ChannelMonitorUpdate` for our ongoing implementation of anchor, updating\n> my TODO :p\n> >\n> > > Even if my analysis above is wrong, I would encourage you or Matt or\n> > someone to write up this anyprevout idea in more detail and distribute\n> > it before you promote it much more.\n> >\n> > That's a really fair point, as a lot of the reasoning was based on\n> private discussion with Matt. Though as SIGHASH_ANYPREVOUT isn't advocated\n> for community consensus and those things take time, should just take a few\n> hours of my time.\n> >\n> > > Even if every protocol based on presigned transactions can magically\n> > allow dynamically adding inputs and modifying outputs for fees, and we\n> > also have a magic perfect transaction replacement protocol,\n> >\n> > \"\u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d\n> Arthur C. Clarke\n> >\n> > Wit apart, that might be the outcome with careful bitcoin protocol\n> development, where technical issues are laid out in a best effort (of\n> mine!) and spread to the Bitcoin community on the most public bitcoin\n> communication channel ?\n> >\n> > And humbly, on all those L2 issues I did change my opinion, as I've\n> written so much explicitly in this thread post by pointing to an older post\n> of mine (\"Advances in Bitcoin Contracting : Uniform Policy and Package\n> Relay\"). This reversal, partially motivated by a lot of discussion with\n> folks, including yourself, initiated since at least mid last year.\n> >\n> > > package relay is still fundamentally useful for CPFP fee bumping very\n> low\n> > > feerate transactions received from an external party.  E.g. Alice pays\n> > > Bob, mempool min feerates increase and Alice's transaction is dropped,\n> > > Bob still wants the money, so he submits a package with Alice's\n> > > transaction plus his own high feerate spend of it.\n> >\n> > I think this point would be a reverse of our p2p design where we are now\n> making the sender responsible for the receiver quality of its mempool\n> feerate ? This question has never been clear up during the years-long\n> discussion of package-relay design [1].\n> >\n> > Though referring to the thread post and last week's transaction-relay\n> workshop, I did point out that package-relay might serve in the long-term\n> as a mempool-sync mechanism to prevent potential malicious mempool\n> partitions [2].\n> >\n> > > Package relay is a clear improvement now, and one I expect to be\n> > permanent for as long as we're using anything like the current protocol\n> >\n> > Again, reading my post, I did point out that we might keep the \"lower\n> half\" of package-relay and deprecate only the higher part of it as we have\n> more feerate-efficient fee-bumping primitive available. If  it sounds too\n> much of a release engineering effort to synchronize on the scale of an\n> ecosystem, think about the ongoing deprecation of Tor V2.\n> >\n> > Further, you did express a far less assertive opinion during last\n> Tuesday transaction-relay workshops, to which a lot of folks attended,\n> where you pointed it might not be a good idea for L2s to make more\n> assumptions on non-normative:\n> >\n> > \"harding> I do think we should be using miners profit incentive more for\n> stuff rather than trying to normalize mempool policy (which not entirely\n> possible), e.g. things like\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002664.html\n> \"\n> >\n> > Arguing for package-relay \"permanence\" moves in the contrary decision\n> IMHO ?\n> >\n> > > I don't think it's appropriate to be creating timelines like this that\n> > depend on the work of a large number of contributors who I don't believe\n> >\n> > Thanks Dave, this is your opinion and I respect this. I'll let any\n> participant of this mailing list make an opinion on its own, following\n> their private judgement. It might be based from a lot of different factors,\n> e.g \"trusting the experts\" or gathering diverse in-field authorities'\n> opinions or reasoning from scratch based on raw, public facts.\n> >\n> > Though might I ask you on which information sources are you finding your\n> belief ? I'm curious if you're aware of any contributors who feel entitled\n> to be consulted in a decentralized development process...\n> >\n> > For the records, I did consult no one. As even in the technical circle\n> that would have been a lot of open source projects teams to reach out :\n> LND, c-ligtning, Eclair, coin-teleport, revault, sapio, btcsuite, bcoin,\n> libbitcoin, wasabi's coinjoin, samourai wallet's coinjoin, ...\n> >\n> > I was lazy, I just shot a mail :p\n> >\n> > W.r.t to Greg's 4-year old's piece, I'll let him express his opinion on\n> how the expressed framework applies to my post, the Bitcoin dev stage has\n> grown a lot since then. What was making sense when you had like ~20 Bitcoin\n> dev with 90% of the technical knowledge doesn't scale when you have\n> multiple second-layers specifications of which you have multiple\n> implementations teams, some of them  decentralized and spread through\n> different countries/timezones, IMHO.\n> >\n> > Though, Dave if you strongly hold your opinion on my behavior, I would\n> invite you to do this intellectual work by yourself.\n> >\n> > Browsing quickly through Greg's piece, a lot of the reasoning is based\n> on FOSS experience from Linux/Juniper, which to the best of my knowledge\n> are centralized software projects ?\n> >\n> > Note, also Paul Storzc's post has the simple phrase :\n> >\n> > \"I emphasized concrete numbers, and concrete dates\"\n> >\n> > I believe my post doesn't have such numbers and concrete dates ?\n> >\n> > Presence of Core version numbers are motivated as clear signalling for\n> L2 developpers to update their backend in case of undocumented, subtle\n> policy changes slipping in the codebase. Let's minimize CVE-2020-26895\n> style-of-bugs across the ecosystem :/\n> >\n> > Finally, the presence of timelines in this post is also a gentle call\n> for the Bitcoin ecosystem to act on those safety holes, of which the\n> seriousness has been underscored by a lot of contributors in the past,\n> especially for the pre-signed feerate problem and even before I was in the\n> Bitcoin stage.\n> >\n> > So better to patch them before they do manifest in the wild, and folks\n> start to bleed coins.  What you learn from practicing security research,\n> the lack of action can be harmful :/\n> >\n> > > Stuff will get done when it gets done.\n> >\n> > Don't forget bugs might slip in but that's fine if you have the skilled\n> folks around to catch them :)\n> >\n> > And yes I really care about Lightning, and all those cute new L2\n> protocols fostering in the community :)\n> >\n> > Finally, you know Dave, I'm just spreading ideas.\n> >\n> > If those ideas are sound and folks love them, awesome! They're free to\n> use, study, share and modify them to build better systems.\n> >\n> > If I'm wrong, like I've been in the past, like I might be today and like\n> I'll be in the future, I hope they will be patient to teach me back and\n> we'll learn.\n> >\n> > Hacker ethos :) ?\n> >\n> > Cheers,\n> > Antoine\n> >\n> > [0]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html\n> >\n> > [1] https://github.com/bitcoin/bitcoin/issues/14895\n> >\n> > [2]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-February/002569.html\n> >\n> > Le sam. 19 juin 2021 \u00e0 09:38, David A. Harding <dave at dtrt.org> a \u00e9crit :\n> >>\n> >> On Fri, Jun 18, 2021 at 06:11:38PM -0400, Antoine Riard wrote:\n> >> > 2) Solving the Pre-Signed Feerate problem : Package-Relay or\n> >> > SIGHASH_ANYPREVOUT\n> >> >\n> >> > For Lightning, either package-relay or SIGHASH_ANYPREVOUT should be\n> able to\n> >> > solve the pre-signed feerate issue [3]\n> >> >\n> >> > [...]\n> >> >\n> >> > [3] I don't think there is a clear discussion on how\n> SIGHASH_ANYPREVOUT\n> >> > solves pinnings beyond those LN meetings logs:\n> >> > https://gnusha.org/lightning-dev/2020-06-08.log\n> >>\n> >> For anyone else looking, the most relevant line seems to be:\n> >>\n> >>   13:50 < BlueMatt> (sidenote: sighash_no_input is *really* elegant here\n> >>   - assuming a lot of complicated logic in core to do so, you could\n> >>   imagine blind-cpfp-bumping *any* commitment tx without knowing its\n> >>   there or which one it is all with one tx.......in theory)\n> >>\n> >> That might work for current LN-penalty, but I'm not sure it works for\n> >> eltoo.  If Bitcoin Core can rewrite the blind CPFP fee bump transaction\n> >> to refer to any prevout, that implies anyone else can do the same.\n> >> Miners who were aware of two or more states from an eltoo channel would\n> >> be incentivized to rewrite to the oldest state, giving them fee revenue\n> >> now and ensuring fee revenue in the future when a later state update is\n> >> broadcast.\n> >>\n> >> If the attacker using pinning is able to reuse their attack at no cost,\n> >> they can re-pin the channel again and force the honest user to pay\n> >> another anyprevout bounty to miners.  Repeat this a bunch of times and\n> >> the honest user has now spent more on fees than their balance from the\n> >> closed channel.\n> >>\n> >> Even if my analysis above is wrong, I would encourage you or Matt or\n> >> someone to write up this anyprevout idea in more detail and distribute\n> >> it before you promote it much more.\n> >>\n> >> > package-relay sounds a reasonable, temporary \"patch\".\n> >>\n> >> Even if every protocol based on presigned transactions can magically\n> >> allow dynamically adding inputs and modifying outputs for fees, and we\n> >> also have a magic perfect transaction replacement protocol, package\n> >> relay is still fundamentally useful for CPFP fee bumping very low\n> >> feerate transactions received from an external party.  E.g. Alice pays\n> >> Bob, mempool min feerates increase and Alice's transaction is dropped,\n> >> Bob still wants the money, so he submits a package with Alice's\n> >> transaction plus his own high feerate spend of it.\n> >>\n> >> Package relay is a clear improvement now, and one I expect to be\n> >> permanent for as long as we're using anything like the current protocol.\n> >>\n> >> > # Deployment timeline\n> >> >\n> >> > So what I believe as a rough deployment timeline.\n> >>\n> >> I don't think it's appropriate to be creating timelines like this that\n> >> depend on the work of a large number of contributors who I don't believe\n> >> you've consulted.  For details on this point of view, please see\n> >>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014726.html\n> >>\n> >> Stuff will get done when it gets done.\n> >>\n> >> -Dave\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210624/9995e15b/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Waiting SIGHASH_ANYPREVOUT and Packing Packages",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "Michael Folkson",
                "Antoine Riard",
                "David A. Harding"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 51220
        }
    },
    {
        "title": "[bitcoin-dev] On the recent softforks survey, forget to fulfill my answer!",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-06-21T15:05:57",
                "message_text_only": "Hi,\n\nI was super glad to see the recent survey on potential softforks for the\nnear-future of Bitcoin! I didn't have time to answer this one but will do\nso for the future. I wanna to salute the grassroots involvement in bitcoin\nprotocol development, that's cool to see :)\n\nThough softforks are what shine in the media and social networks, one\nshould not ignore they represent the aggregation of thousands of hours of\nsweat from contributors all across the ecosystem with discussion extending\nfrom IRC public or private chans, mailing list, medias, etc.\n\nWhat makes softfork discussion especially hard is that no one is following\nall those communications channels to collect the trace of information and\nas such it can be hard to reason on the Big Picture(tm). That's why\nsoft-forks take time, and we might somehow be prepared for them to take\neven more time in the future...\n\nThat said, where I would like to draw awareness of the community is about\nthe submerged part of bitcoin protocol development iceberg. Softforks are\nsexy, though you have far more areas of Bitcoin dev who would benefit from\na gentle boost by happy hands :p\n\nFor e.g, if you take Bitcoin Core, you have few ongoing projects were folks\nhave a hard time moving forward, e.g assumeutxo/mempool\nrefactos/addr-relay/rebroadcasting module/mutation testing/\nmultiprocess/wallet external signer/GUI maintenance/libbitcoin_kernel[0]\n\nThose projects start to be \"softfork\"-in-itself-size-of-engineering, and\nfor a lot of them might  require more than pure \"coding\" skills, such as\nspecification, simulations, extensive code coverage, up-to-date meeting\ndocuments. See what is currently done with the Core wiki [1]\n\nAll those projects are modifying critical areas of Bitcoin such as the\nvalidation engine or the p2p stack and AFAICT, they deserve more care.\nHopefully, by drawing the light there, more folks are going to understand\nthem, we'll have more skilled reviewers, reducing the reliance on a few\nsegments of the codebase being only understood by some seen experts and\nideally, ingenious, \"Many Eyes Make All Bugs Shallow\" :)\n\nThat said, it's only the technical ground and I believe the human layer of\nBitcoin dev might be the one where grassroots-involvement might be the most\nfruitful.\n\nI would say the Bitcoin dev stage has changed a bit since the last 18\nmonths, especially w.r.t to few factors, the arrival of massive development\nfunding, the sudden mediatisation of protocol developers and the pursued\ngeographical spreading, diversification and education of the poolset of\ncontributors.\n\nWhen I did arrive on the stage a few years ago, funding was still a hard\nquestion, even for well-known, long-term contributors and only a few actors\nwere taking care of Bitcoin. Really differently, from what we have seen on\nthe last months, where we have seen a plethora of new organisations\nentering the game and benefiting from the generosity of the Bitcoin\nindustry [2]\n\nThings have been so fast that sometimes one can wonder if there isn't a\nbubble around Bitcoin dev ? Few OGs might suggest we're back to 2017, with\nICO-like webpage pinning \"developers-as-brands\".  In reality, we see new\ngrant announcements every month or week, but still the number of reviewers\non Core doesn't seem to increase ? [3]\n\nHopefully, a lot of those new structures pretending to work for Bitcoin\nbetterness will get out of their childerness phase and slowly mature to\nsomething as sound as Chaincode or Square Crypto. Small, friendly,\npolitics-free engineering teams with years-long stability, solving bitcoin\nproblems with a \"forever\" perspective mindset.\n\nThough, as of today, you do have the opposite with the grant model. Being\nfunded on the rational that yours peers \"appreciate\" your work is more\ngoing to generate implicit compliance at review time where you should\ninstead spot their errors. Bitcoin development process is highly contrarian\nper nature, and constantly challenging your peers assumptions has been\npreserving software robustness.\n\nTime will separate the wheat from the chaff though how to make things\nbetter in the short term ? I don't know, maybe those structures could be\nexemplary and outsource their grant allocation decisions framework ? Or ask\nthem to publish grant contract under which contributors are engaging\nthemselves to observe if the usual independence provisions are present [4]\n\nIn another direction, I believe the ongoing mediatization increase of the\nBitcoin dev stage in the last months or so didn't improve the current state\nof affairs. We now see technical proposals, of which the soundness have not\nbeen thoroughly discussed in the traditional venues, being announced in big\npump as some kind of \"done-deal\", potentially sustaining the false belief\nit has been already blessed or approved by the rest of the development\ncommunity.\n\nAnd honestly, it's quite easy to approach any Bitcoin media today once\nyou're a bit technical, and rely on lingo to create a perception of\ncompetency towards your interlocutors. In fact, your talking isn't going to\nbe debunked by your peers as most of the time they have other,\non-the-ground, engineering issues to care about. Or say differently, if\nyou're a Bitcoin journalist today, it's quite easy for smart ass like me to\nhijack your production :p\n\nDon't trust, verify :)\n\nAnother bottleneck in Bitcoin development is the ongoing spreading of\ncontributors around many geographical areas and timezones, making\nintra-communication far harder. Lightning dev or Bitcoin Core technical\nmeetings might happen at the end of your local day but another attendee\nmight just get started, and with time you feel how divergence in level of\nenergies influences the serendipity of engineering discussions.\n\nCommunication might not flow smoothly through all the development\nstakeholders and how do we make communications more distributed and\nfault-tolerance without losing on the quality ? I don't have the\nanswers...Yes, the Earth isn't flat and that's an issue for Bitcoin dev :/\n\nThe ongoing increase in developer diversity is also something to salute.\nAnyone is invited to contribute without regards to technical experience,\nrace, \"expertise\", OSS experience, age, gender, language or any other\nsocial concern. I believe diversity is a force for Bitcoin development and\nI would like to congrat my fellow female Bitcoin hackers of which the\ncontinuous hard work and smartness should inspire more women to follow\ntheir tracks in the coming years. Pioneering has always been hard :/\n\nAnother remaining issue is developer education. The development of\ncryptocurrencies demands a high-level of rigor, adversarial thinking,\nthorough testing and risk-minimization development strategy. Any bug may\ncost users real money and disrupt folks' lives. We still have a lot to\nlearn from the Old Guard, which sadely are less and less active on the\ndaily ground and I would say the ecosystem infrastructure would be far more\nsane with more security-oriented folks.\n\nAs a young developer, even armed with the best intentions it takes years to\nadopt a security-first mindset and continuously extend and mature your\ntechnical stack. One has to become fluent through a wide variety of areas\nto be an efficient contributor, distributed systems, internet protocol,\napplied cryptography, database, game theory, professional english,\nquality-assurance best practices, the list is never ending and there is\nalways a nice chunk of knowledge to go after :)\n\nLastly, another uncomfortable issue to talk about is direct pressure\nexercised on the developers themselves to bend their works, as the ongoing\nCSW case sadly recalls. Flavors of those concerns  have been mentioned a\nlot through Bitcoin archives [5].\n\nSo far, I've never heard about angry calls passed backstage to Bitcoin\ncontributors, deliberately made to influence the expression of their public\ntechnical opinions. Though in the future, if that kind  of thorny situation\nhappens to you as a Bitcoin FOSS contributor, remember that you're always\nfree to discuss discretely about potential conflict of interests you\nobserve with folks of confidence around you. Or if you prefer to keep the\nanonymity, reach out to some investigative journalists under a cover\nidentity.\n\nHere is, I think that's all the area where I would be glad to see more\ngrassroot-engagement or even any coming from the industry with eager\nmotivation to help on those fronts.\n\nAsk not what Bitcoin can do for you - ask what you can do for Bitcoin :)\n\nCheers,\nAntoine\n\nPS: oh, and SIGHAsH_PURPLE for the win :p\n\n[0] That's a joke on mutation testing, it's a trillion-dollar codebase, but\nwe don't do\nmutation testing. Sad :/\n\n[1] See https://github.com/bitcoin-core/bitcoin-devwiki/wiki\n\n[2] Disclaimer: I'm not open to outbound sponsorship proposals.\n\n[3] As backed by data here :\nhttps://adamjonas.com/bitcoin/coredev/retro/coredev-2020-retro/\n\n[4] For e.g, a lot of grant legal frameworks don't have clauses\nguaranteeing the independence of the\ngeneral Bitcoin Core or Lightning development, just a smaller subset around\nvalidity of block rules,\ninspired from the BitMex open one. Clearly a hole if you ask any competent\nlawyer...\n\n[5] Flavors of those concerns have been mentioned a lot through Bitcoin\narchives:\n\nSee \"Bitcoin in 2021\":\nhttps://www.erisian.com.au/wordpress/2021/01/07/bitcoin-in-2021\n\n\" After all, if you can replace all the people who would\u2019ve objected to\nwhat you want to do, there\u2019s\nno need to sneak it in and hope no one notices in review, you can just do\nit, and even if you don\u2019t\ngetrid of everyone who would object you at least lower the chances that\nyour patch will get a thorough\nreview by whoever remains. There are a variety of ways you can do that. One\nis finding way of making\ncontributing unpleasant enough that your targets just leave on their own:\nconstant arguments about\nhings that don\u2019t really matter, slowing down progress so it feels like\nyou\u2019re just wasting time,\nand personal attacks in the media (or on social media), for instance.\nAnother is the cancel-culture\napproach of trying to make them a pariah so no one else will have anything\nto do with them.\"\n\nOr see \"Working on social contracts (was: Paper currency)\" :\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-May/005851.html\n\n\"I promise that if bad people show up with a sufficient pointy gun that\nI'll do whatever they tell me to do. I'll make bad proposals, submit\nbackdoors, and argue with querulous folks on mailing lists, diverting\nthem from real development and review work, all as commanded. Maybe\nI'll try to sneak out a warning of some kind, maybe... but with my\nlife or my families or friends lives on the line\u2014 probably not.\n\n... and I think that anyone who tells you otherwise probably just\nhasn't really thought it through.  So what is the point of commitments\nlike that?  People change, people go crazy, people are coerced. Crap\nhappens, justifications are made, life goes on\u2014 or so we hope.\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210621/fef4c314/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "On the recent softforks survey, forget to fulfill my answer!",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 11122
        }
    },
    {
        "title": "[bitcoin-dev] Taproot Fields for PSBT",
        "thread_messages": [
            {
                "author": "Andrew Chow",
                "date": "2021-06-22T21:22:28",
                "message_text_only": "Hi All,\n\nI would like to propose a BIP which defines new fields for Taproot\nsupport in PSBT.\n\nThe full text is below, and the rendered file can be found at\nhttps://github.com/achow101/bips/blob/taproot-psbt/bip-taproot-psbt.mediawiki.\n\nAndrew Chow\n\n---\n\n<pre>\n \u00a0 BIP: taproot-psbt\n \u00a0 Layer: Applications\n \u00a0 Title: Taproot Fields for PSBT\n \u00a0 Author: Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-taproot-psbt\n \u00a0 Status: draft\n \u00a0 Type: Standards Track\n \u00a0 Created: 2021-06-21\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Introduction==\n\n===Abstract===\n\nThis document proposes additional fields for BIP 174 PSBTv0 and BIP 370\nPSBTv2 that allow for\nBIP 340/341/342 Taproot data to be included in a PSBT of any version.\nThese will be fields for\nsignatures and scripts that are relevant to the creation of Taproot inputs.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n===Motivation===\n\nBIPs 340, 341, and 342 specify Taproot which provides a wholly new way\nto create and spend Bitcoin outputs.\nThe existing PSBT fields are unable to support Taproot due to the new\nsignature algorithm and the method\nby which scripts are embedded inside of a Taproot output. Therefore new\nfields must be defined to allow\nPSBTs to carry the information necessary for signing Taproot inputs.\n\n==Specification==\n\nThe new per-input types are defined as follows:\n\n{|\n! Name\n! <tt><keytype></tt>\n! <tt><keydata></tt>\n! <tt><keydata></tt> Description\n! <tt><valuedata></tt>\n! <tt><valuedata></tt> Description\n! Versions Requiring Inclusion\n! Versions Requiring Exclusion\n! Versions Allowing Inclusion\n|-\n| Taproot Key Spend Signature\n| <tt>PSBT_IN_TAP_KEY_SIG = 0x13</tt>\n| None\n| No key data <ref>'''Why is there no key data for\n<tt>PSBT_IN_TAP_KEY_SIG</tt>'''The signature in a key path spend\ncorresponds directly with the pubkey provided in the output script. Thus\nit is not necessary to provide any metadata that attaches the key path\nspend signature to a particular pubkey.</ref>\n| <tt><signature></tt>\n| The 64 or 65 byte Schnorr signature for key path spending a Taproot\noutput.\n|\n|\n| 0, 2\n|-\n| Taproot Script Spend Signature\n| <tt>PSBT_IN_TAP_SCRIPT_SIG = 0x14</tt>\n| <tt><xonlypubkey> <leafhash></tt>\n| The 32 byte X-only public key concatenated with the 32 byte hash of\nthe leaf it is part of.\n| <tt><signature></tt>\n| The 64 or 65 byte Schnorr signature for this pubkey and leaf combination.\n|\n|\n| 0, 2\n|-\n| Taproot Leaf Script\n| <tt>PSBT_IN_TAP_LEAF_SCRIPT = 0x15</tt>\n| <tt><control block></tt>\n| The control block for this leaf as specified in BIP 341. The control\nblock contains the merkle tree path to this leaf.\n| <tt><script> <8-bit uint></tt>\n| The script for this leaf as would be provided in the witness stack\nfollowed by the single byte leaf version.\n|\n|\n| 0, 2\n|-\n| Taproot Key BIP 32 Derivation Path\n| <tt>PSBT_IN_TAP_BIP32_DERIVATION = 0x16</tt>\n| <tt><xonlypubkey></tt>\n| The 32 byte X-only public key\n| <tt><hashes len> <leaf hash>* <32-bit uint> <32-bit uint>*</tt>\n| A compact size unsigned integer representing the number of leaf\nhashes, followed by a list of leaf hashes, followed by the master key\nfingerprint concatenated with the derivation path of the public key. The\nderivation path is represented as 32-bit little endian unsigned integer\nindexes concatenated with each other. Public keys are those needed to\nspend this output. The leaf hashes are of the leaves which involve this\npublic key.\n|\n|\n| 0, 2\n|-\n| Taproot Internal Key\n| <tt>PSBT_IN_TAP_INTERNAL_KEY = 0x17</tt>\n| None\n| No key data\n| <tt><pubkey></tt>\n| The X-only pubkey used as the internal key in this output.<ref>'''Why\nis the internal key provided?'''The internal key is not necessarily the\nsame key as in the Taproot output script. BIP 341 recommends tweaking\nthe key with the hash of itself. It may be necessary for signers to know\nwhat the internal key actually is so that they are able to determine\nwhether an input can be signed by it.</ref>\n|\n|\n| 0, 2\n|-\n| Taproot Merkle Root\n| <tt>PSBT_IN_TAP_MERKLE_ROOT = 0x18</tt>\n| None\n| No key data\n| <tt><pubkey></tt>\n| The 32 byte Merkle root hash\n|\n|\n| 0, 2\n|}\n\nThe new per-output types are defined as follows:\n\n{|\n! Name\n! <tt><keytype></tt>\n! <tt><keydata></tt>\n! <tt><keydata></tt> Description\n! <tt><valuedata></tt>\n! <tt><valuedata></tt> Description\n! Versions Requiring Inclusion\n! Versions Requiring Exclusion\n! Versions Allowing Inclusion\n|-\n| Taproot Internal Key\n| <tt>PSBT_OUT_TAP_INTERNAL_KEY = 0x05</tt>\n| None\n| No key data\n| <tt><pubkey></tt>\n| The X-only pubkey used as the internal key in this output.\n|\n|\n| 0, 2\n|-\n| Taproot Tree\n| <tt>PSBT_OUT_TAP_TREE = 0x06</tt>\n| None\n| No key data\n| <tt>{<8-bit uint depth> <8-bit uint leaf version> <scriptlen>\n<script>}*</tt>\n| One or more tuples representing the depth, leaf version, and script\nfor a leaf in the Taproot tree, allowing the entire tree to be\nreconstructed. The tuples must be in depth first search order so that\nthe tree is correctly reconstructed. Each tuple is an 8-bit unsigned\ninteger representing the depth in the Taproot tree for this script, an\n8-bit unsigned integer representing the leaf version, the length of the\nscript as a compact size unsigned integer, and the script itself.\n|\n|\n| 0, 2\n|-\n| Taproot Key BIP 32 Derivation Path\n| <tt>PSBT_OUT_TAP_BIP32_DERIVATION = 0x07</tt>\n| <tt><xonlypubkey></tt>\n| The 32 byte X-only public key\n| <tt><hashes len> <leaf hash>* <32-bit uint> <32-bit uint>*</tt>\n| A compact size unsigned integer representing the number of leaf\nhashes, followed by a list of leaf hashes, followed by the master key\nfingerprint concatenated with the derivation path of the public key. The\nderivation path is represented as 32-bit little endian unsigned integer\nindexes concatenated with each other. Public keys are those needed to\nspend this output. The leaf hashes are of the leaves which involve this\npublic key.\n|\n|\n| 0, 2\n|}\n\n===UTXO Types===\n\nBIP 174 recommends using <tt>PSBT_IN_NON_WITNESS_UTXO</tt> for all\ninputs because of potential attacks involving\nan updater lying about the amounts in an output. Because a Taproot\nsignature will commit to all of the amounts\nand output scripts spent by the inputs of the transaction, such attacks\nare prevented as any such lying would\nresult in an invalid signature. Thus Taproot inputs can use just\n<tt>PSBT_IN_WITNESS_UTXO</tt>.\n\n==Compatibility==\n\nThese are simply new fields added to the existing PSBT format. Because\nPSBT is designed to be extensible, old\nsoftware will ignore the new fields.\n\n==Test Vectors==\n\nTBD\n\n==Rationale==\n\n<references/>\n\n==Reference implementation==\n\nThe reference implementation of the PSBT format is available at TBD.\n\n==Acknowledgements==\n\nTBD"
            },
            {
                "author": "Salvatore Ingala",
                "date": "2021-06-28T10:03:42",
                "message_text_only": "Hi Andrew,\n\nI just have a small suggestion on this proposal.\n\nOn Tue, 22 Jun 2021 at 23:29, Andrew Chow via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> | Taproot Leaf Script\n> | <tt>PSBT_IN_TAP_LEAF_SCRIPT = 0x15</tt>\n> | <tt><control block></tt>\n> | The control block for this leaf as specified in BIP 341. The control\n> block contains the merkle tree path to this leaf.\n> | <tt><script> <8-bit uint></tt>\n> | The script for this leaf as would be provided in the witness stack\n> followed by the single byte leaf version.\n>\n\nSo far, all the defined PSBT types had a relatively short keydata (not much\nbigger than a couple of pubkeys).\nI think that is a desirable property to keep, as it is often a reasonable\nassumption that dictionary keys are not very large.\nThe control block as per BIP 341 can be up to 33 + 32*128 = 4129 bytes long.\n\nPerhaps it would be better to split this into PSBT_IN_TAP_LEAF_SCRIPT\nand PSBT_IN_TAP_LEAF_CONTROL_BLOCK (both with no keydata)?\n\nBest,\nSalvatore Ingala\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/ce41048c/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2021-06-28T16:04:19",
                "message_text_only": "Hi Salvatore,\n\nOn 6/28/21 6:03 AM, Salvatore Ingala wrote:\n\n> Hi Andrew,\n>\n> I just have a small suggestion on this proposal.\n>\n> On Tue, 22 Jun 2021 at 23:29, Andrew Chow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> | Taproot Leaf Script\n>> | <tt>PSBT_IN_TAP_LEAF_SCRIPT = 0x15</tt>\n>> | <tt><control block></tt>\n>> | The control block for this leaf as specified in BIP 341. The control\n>> block contains the merkle tree path to this leaf.\n>> | <tt><script> <8-bit uint></tt>\n>> | The script for this leaf as would be provided in the witness stack\n>> followed by the single byte leaf version.\n>\n> So far, all the defined PSBT types had a relatively short keydata (not much bigger than a couple of pubkeys).\n> I think that is a desirable property to keep, as it is often a reasonable assumption that dictionary keys are not very large.\n> The control block as per BIP 341 can be up to 33 + 32*128 = 4129 bytes long.\n>\n> Perhaps it would be better to split this into PSBT_IN_TAP_LEAF_SCRIPT and PSBT_IN_TAP_LEAF_CONTROL_BLOCK (both with no keydata)?\n\nA taproot tree can have multiple leaf scripts, and since it is possible that the actual script to be used is not known at the time scripts and control blocks are added to the PSBT, it would not be sufficient to only have two fields with no keydata. It would not be possible to specify multiple leaf scripts.\n\nFurthermore, it is possible to have the same leaf script appear multiple times in the tree. So it is not sufficient to use the leaf hash as the keydata as a script that appears multiple times would only have one control block possible, where in reality it would have more than one.\n\nThus the only way to allow multiple different leaf scripts, and the same leaf script to appear multiple times, is to use the control block as keydata.\n\nAndrew Chow\n\n> Best,\n> Salvatore Ingala\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/b423a8cc/attachment.html>"
            },
            {
                "author": "Salvatore Ingala",
                "date": "2021-06-28T19:56:37",
                "message_text_only": "Hi Andrew,\n\nThanks for the clarification, I was indeed reading it under the mistaken\nassumption that only one leaf would be added to the PSBT.\n\nEn passant, for the less experienced readers, it might be helpful if the\nkey types that are possibly present multiple times (with different keydata)\nwere somehow labeled in the tables.\n\nBest,\nSalvatore Ingala\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210628/ed746c55/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot Fields for PSBT",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Salvatore Ingala",
                "Andrew Chow"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 10537
        }
    },
    {
        "title": "[bitcoin-dev] Derivation Paths for Single Key Taproot Scripts",
        "thread_messages": [
            {
                "author": "Andrew Chow",
                "date": "2021-06-23T01:17:01",
                "message_text_only": "Hi All,\n\nI would like to propose a simple derivation path scheme for keys to be\nused in single key Taproot scripts. This is based on BIP 44 so it is\nbasically identical to BIPs 49 and 84. Like with those BIPs, the actual\nvalue to be used in the purpose level will be set to the BIP number,\nonce assigned.\n\nNote that the keys derived in this method should be for the Taproot\ninternal key, which should then be tweaked with the hash of itself as\nrecommended by BIP 341. The keys derived at this path should not be used\ndirectly as the Taproot output pubkey. Additionally, this BIP does not\nspecify new version bytes for extended key serialization because, with\nthe advent of descriptors, I think that is unnecessary. In fact, this\nBIP feels somewhat unnecessary to me, but it seems like it will be\nneeded for now in order to drive adoption and implementation of Taproot\ninto software and hardware wallets.\n\nThe text can be viewed below, with the rendered text available at\nhttps://github.com/achow101/bips/blob/taproot-bip44/bip-taproot-bip44.mediawiki\n\nAndrew Chow\n\n---\n\n<pre>\n \u00a0 BIP: bip-taproot-bip44\n \u00a0 Layer: Applications\n \u00a0 Title: Derivation scheme for P2TR based accounts\n \u00a0 Author: Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-taproot-bip44\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-22\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document suggests a derivation scheme for HD wallets whose keys are\ninvolved in single key\nP2TR ([[bip-0341.mediawiki|BIP 341]]) outputs as the Taproot internal key.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n==Motivation==\n\nWith the usage of single key P2TR transactions, it is useful to have a\ncommon derivation scheme so\nthat HD wallets that only have a backup of the HD seed can be likely to\nrecover single key Taproot\noutputs. Although there are now solutions which obviate the need for\nfixed derivation paths for\nspecific script types, many software wallets and hardware signers still\nuse seed backups which\nlack derivation path and script information. Thus we largely use the\nsame approach used in BIPs\n[[bip-0049.mediawiki|49]] and [[bip-0084.mediawiki|84]] for ease of\nimplementation.\n\n==Specifications==\n\nThis BIP defines the two needed steps to derive multiple deterministic\naddresses based on a\n[[bip-0032.mediawiki|BIP 32]] master private key.\n\n===Public key derivation===\n\nTo derive a public key from the root account, this BIP uses the same\naccount-structure as\ndefined in BIPs [[bip-0044.mediawiki|44]], [[bip-0049.mediawiki|49]],\nand [[bip-0084.mediawiki|84]],\nbut with a different purpose value for the script type.\n\n<pre>\nm / purpose' / coin_type' / account' / change / address_index\n</pre>\n\nFor the <tt>purpose</tt>-path level it uses <tt><BIPNUMBER>'</tt>.\nThe rest of the levels are used as defined in BIPs 44, 49, and 84.\n\n===Address derivation===\n\nTo derive the output key used in the P2TR script from the derived public\nkey, we use the method\nrecommended in\n[[bip-0341.mediawiki#constructing-and-spending-taproot-outputs|BIP 341]]:\n\n<pre>\ninternal_key:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lift_x(derived_key)\n32_byte_output_key: internal_key + int(HashTapTweak(bytes(internal_key)))G\n</pre>\n\nIn a transaction, the scripts and witnesses are as defined in\n[[bip-0341.mediawiki#specification|BIP 341]]:\n\n<pre>\nwitness:\u00a0\u00a0\u00a0\u00a0\u00a0 <signature>\nscriptSig:\u00a0\u00a0\u00a0 (empty)\nscriptPubKey: 1 <32_byte_output_key>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (0x5120{32_byte_output_key})\n</pre>\n\n==Backwards Compatibility==\n\nThis BIP is not backwards compatible by design.\nAn incompatible wallet will not discover these accounts at all and the\nuser will notice that\nsomething is wrong.\n\nHowever this BIP uses the same method used in BIPs 44, 49, and 84, so it\nshould not be difficult\nto implement.\n\n==Test vectors==\n\nTBD\n\n==Reference==\n\n* [[bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]]\n* [[bip-0043.mediawiki|BIP43 - Purpose Field for Deterministic Wallets]]\n* [[bip-0044.mediawiki|BIP44 - Multi-Account Hierarchy for Deterministic\nWallets]]\n* [[bip-0049.mediawiki|BIP49 - Derivation scheme for\nP2WPKH-nested-in-P2SH based accounts]]\n* [[bip-0084.mediawiki|BIP84 - Derivation scheme for P2WPKH based accounts]]\n* [[bip-0341.mediawiki|BIP341 - Taproot: SegWit version 1 spending rules]]"
            },
            {
                "author": "Craig Raw",
                "date": "2021-06-23T08:22:48",
                "message_text_only": "+1\n\nWhile other derivation schemes have been proposed, the simple \"purpose per\nscript type\" based approach started with BIP44 is very widely used and has\ndone much to improve recoverability of wallets. The products and\nunderstanding around this approach are now relatively mature, while backing\nup an output descriptor (in addition to seed words) is still not well\nunderstood or supported. Early standardisation around a known derivation\npath will ease implementation for wallets implementing Taproot and help\nprevent confusion (as we have had over the still draft BIP48). I also agree\nwe don't need (and should avoid) a new version for extended key\nserialization.\n\nCraig\n\nOn Wed, Jun 23, 2021 at 3:17 AM Andrew Chow via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi All,\n>\n> I would like to propose a simple derivation path scheme for keys to be\n> used in single key Taproot scripts. This is based on BIP 44 so it is\n> basically identical to BIPs 49 and 84. Like with those BIPs, the actual\n> value to be used in the purpose level will be set to the BIP number,\n> once assigned.\n>\n> Note that the keys derived in this method should be for the Taproot\n> internal key, which should then be tweaked with the hash of itself as\n> recommended by BIP 341. The keys derived at this path should not be used\n> directly as the Taproot output pubkey. Additionally, this BIP does not\n> specify new version bytes for extended key serialization because, with\n> the advent of descriptors, I think that is unnecessary. In fact, this\n> BIP feels somewhat unnecessary to me, but it seems like it will be\n> needed for now in order to drive adoption and implementation of Taproot\n> into software and hardware wallets.\n>\n> The text can be viewed below, with the rendered text available at\n>\n> https://github.com/achow101/bips/blob/taproot-bip44/bip-taproot-bip44.mediawiki\n>\n> Andrew Chow\n>\n> ---\n>\n> <pre>\n>    BIP: bip-taproot-bip44\n>    Layer: Applications\n>    Title: Derivation scheme for P2TR based accounts\n>    Author: Andrew Chow <andrew at achow101.com>\n>    Comments-Summary: No comments yet.\n>    Comments-URI:\n> https://github.com/bitcoin/bips/wiki/Comments:BIP-taproot-bip44\n>    Status: Draft\n>    Type: Informational\n>    Created: 2021-06-22\n>    License: BSD-2-Clause\n> </pre>\n>\n> ==Abstract==\n>\n> This document suggests a derivation scheme for HD wallets whose keys are\n> involved in single key\n> P2TR ([[bip-0341.mediawiki|BIP 341]]) outputs as the Taproot internal key.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ==Motivation==\n>\n> With the usage of single key P2TR transactions, it is useful to have a\n> common derivation scheme so\n> that HD wallets that only have a backup of the HD seed can be likely to\n> recover single key Taproot\n> outputs. Although there are now solutions which obviate the need for\n> fixed derivation paths for\n> specific script types, many software wallets and hardware signers still\n> use seed backups which\n> lack derivation path and script information. Thus we largely use the\n> same approach used in BIPs\n> [[bip-0049.mediawiki|49]] and [[bip-0084.mediawiki|84]] for ease of\n> implementation.\n>\n> ==Specifications==\n>\n> This BIP defines the two needed steps to derive multiple deterministic\n> addresses based on a\n> [[bip-0032.mediawiki|BIP 32]] master private key.\n>\n> ===Public key derivation===\n>\n> To derive a public key from the root account, this BIP uses the same\n> account-structure as\n> defined in BIPs [[bip-0044.mediawiki|44]], [[bip-0049.mediawiki|49]],\n> and [[bip-0084.mediawiki|84]],\n> but with a different purpose value for the script type.\n>\n> <pre>\n> m / purpose' / coin_type' / account' / change / address_index\n> </pre>\n>\n> For the <tt>purpose</tt>-path level it uses <tt><BIPNUMBER>'</tt>.\n> The rest of the levels are used as defined in BIPs 44, 49, and 84.\n>\n> ===Address derivation===\n>\n> To derive the output key used in the P2TR script from the derived public\n> key, we use the method\n> recommended in\n> [[bip-0341.mediawiki#constructing-and-spending-taproot-outputs|BIP 341]]:\n>\n> <pre>\n> internal_key:       lift_x(derived_key)\n> 32_byte_output_key: internal_key + int(HashTapTweak(bytes(internal_key)))G\n> </pre>\n>\n> In a transaction, the scripts and witnesses are as defined in\n> [[bip-0341.mediawiki#specification|BIP 341]]:\n>\n> <pre>\n> witness:      <signature>\n> scriptSig:    (empty)\n> scriptPubKey: 1 <32_byte_output_key>\n>                (0x5120{32_byte_output_key})\n> </pre>\n>\n> ==Backwards Compatibility==\n>\n> This BIP is not backwards compatible by design.\n> An incompatible wallet will not discover these accounts at all and the\n> user will notice that\n> something is wrong.\n>\n> However this BIP uses the same method used in BIPs 44, 49, and 84, so it\n> should not be difficult\n> to implement.\n>\n> ==Test vectors==\n>\n> TBD\n>\n> ==Reference==\n>\n> * [[bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]]\n> * [[bip-0043.mediawiki|BIP43 - Purpose Field for Deterministic Wallets]]\n> * [[bip-0044.mediawiki|BIP44 - Multi-Account Hierarchy for Deterministic\n> Wallets]]\n> * [[bip-0049.mediawiki|BIP49 - Derivation scheme for\n> P2WPKH-nested-in-P2SH based accounts]]\n> * [[bip-0084.mediawiki|BIP84 - Derivation scheme for P2WPKH based\n> accounts]]\n> * [[bip-0341.mediawiki|BIP341 - Taproot: SegWit version 1 spending rules]]\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210623/5533748e/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2021-06-30T11:07:43",
                "message_text_only": "+1 from the author of BIP43, BIP44 and BIP84. The proposed BIP follows this\npattern nicely.\n\n-- \nBest Regards / S pozdravom,\n\nPavol \"stick\" Rusnak\nCo-founder and CTO, SatoshiLabs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/62fa4dd0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Derivation Paths for Single Key Taproot Scripts",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Chow",
                "Pavol Rusnak",
                "Craig Raw"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 10428
        }
    },
    {
        "title": "[bitcoin-dev] Trinary Version Signaling for softfork upgrades",
        "thread_messages": [
            {
                "author": "Billy Tetrud",
                "date": "2021-06-26T20:21:52",
                "message_text_only": "Given the recent controversy over upgrade mechanisms for the\nnon-controversial taproot upgrade, I have been thinking about ways to solve\nthe problems that both sides brought up. In short, BIP8 LOT=true proponents\nmake the point that lazy miners failing to upgrade in a timely manner slow\ndown releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\nproponents make the point that LOT=true can lead to undesirable forks that\nmight cause a lot of chaos. I believe both points are essentially correct\nand have created a proposal\n<https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/bip-trinary-version-bits.md>\nfor soft fork upgrades that solve both problems.\n\nThe proposal uses trinary version signaling rather than binary signaling.\nFor any particular prospective soft fork upgrade, this allows for three\nsignaling states:\n\n* Actively support the change.\n* Actively oppose the change.\n* Not signaling (neither support or oppose). This is the default state.\n\nUsing this additional information, we can release non-contentious upgrades\nmuch quicker (with a much lower percent of miners signaling support). For\ncontentious upgrades, miners who oppose the change are incentivized to\nupdate their software to a version that can actively signal opposition to\nthe change. The more opposition there is, the higher the threshold\nnecessary to lock in the upgrade. With the parameters I currently\nrecommended in the proposal, this chart shows how much support signaling\nwould be necessary given a particular amount of active opposition signaling:\n\n[image: thresholdChart.png]\nIf literally no one signals opposition, a 60% threshold should be\nrelatively safe because it is a supermajority amount that is unlikely to\nchange significantly very quickly (ie if 60% of miners support the change\ntoday, its unlikely that less than a majority of miners would support the\nchange a year or two from now), and if no one is signaling opposition,\nchances are that the vast majority of the other 40% would also eventually\nsignal support.\n\nThis both gives an incentive for \"lazy\" miners to upgrade if they actually\noppose the change while at the same time allowing these lazy miners to\nremain lazy without slowing down the soft fork activation much.\n\nI think now is the right time to discuss new soft fork upgrade mechanisms,\nwhen there are no pressing soft fork upgrades ready to deploy. Waiting\nuntil we need to deploy a soft fork to discuss this will only delay things\nand cause contention again like it did with taproot.\n\nI'm very curious to know what people think of this mechanism. I would\nappreciate any comments here, or written as github issues on the proposal\nrepo itself.\n\nThanks,\nBT\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210626/7131cbaf/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: thresholdChart.png\nType: image/png\nSize: 11132 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210626/7131cbaf/attachment.png>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-06-26T21:13:04",
                "message_text_only": "BIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can \nstill slow it down.\n\nIt also already has the trinary state you seem to be describing (although \nperhaps this could be better documented in the BIP): users who oppose the \nsoftfork can and should treat the successful signal (whether MASF or UASF) as \ninvalid, thereby ensuring they do not follow a chain with the rules in force.\n\nNo additional bit is needed, as softforks are coordinated between users, NOT \nminers (who have no particular say in them, aside from their role as also \nbeing users). The miner involvement is only out of necessity (to set the bit \nin the header, which users coordinate with) and potentially to accelerate \nactivation by protecting upgrade-lagging users.\n\nLuke\n\n\nOn Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n> Given the recent controversy over upgrade mechanisms for the\n> non-controversial taproot upgrade, I have been thinking about ways to solve\n> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n> make the point that lazy miners failing to upgrade in a timely manner slow\n> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n> proponents make the point that LOT=true can lead to undesirable forks that\n> might cause a lot of chaos. I believe both points are essentially correct\n> and have created a proposal\n> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n>\n> The proposal uses trinary version signaling rather than binary signaling.\n> For any particular prospective soft fork upgrade, this allows for three\n> signaling states:\n>\n> * Actively support the change.\n> * Actively oppose the change.\n> * Not signaling (neither support or oppose). This is the default state.\n>\n> Using this additional information, we can release non-contentious upgrades\n> much quicker (with a much lower percent of miners signaling support). For\n> contentious upgrades, miners who oppose the change are incentivized to\n> update their software to a version that can actively signal opposition to\n> the change. The more opposition there is, the higher the threshold\n> necessary to lock in the upgrade. With the parameters I currently\n> recommended in the proposal, this chart shows how much support signaling\n> would be necessary given a particular amount of active opposition\n> signaling:\n>\n> [image: thresholdChart.png]\n> If literally no one signals opposition, a 60% threshold should be\n> relatively safe because it is a supermajority amount that is unlikely to\n> change significantly very quickly (ie if 60% of miners support the change\n> today, its unlikely that less than a majority of miners would support the\n> change a year or two from now), and if no one is signaling opposition,\n> chances are that the vast majority of the other 40% would also eventually\n> signal support.\n>\n> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n> oppose the change while at the same time allowing these lazy miners to\n> remain lazy without slowing down the soft fork activation much.\n>\n> I think now is the right time to discuss new soft fork upgrade mechanisms,\n> when there are no pressing soft fork upgrades ready to deploy. Waiting\n> until we need to deploy a soft fork to discuss this will only delay things\n> and cause contention again like it did with taproot.\n>\n> I'm very curious to know what people think of this mechanism. I would\n> appreciate any comments here, or written as github issues on the proposal\n> repo itself.\n>\n> Thanks,\n> BT"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-26T21:43:55",
                "message_text_only": "For some definitions of \u201cblock\u201d.\n\nWithout majority hash power support, activation simply means you are off on a chain split. Anyone can of course split off from a chain by changing a rule (soft or otherwise) at any time, so this is a bit of an empty claim.\n\nNobody can stop a person from splitting. The relevant question is how to *prevent* a split. And activation without majority hash power certainly does not \u201censure\u201d this.\n\ne\n\n> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can \n> still slow it down.\n> \n> It also already has the trinary state you seem to be describing (although \n> perhaps this could be better documented in the BIP): users who oppose the \n> softfork can and should treat the successful signal (whether MASF or UASF) as \n> invalid, thereby ensuring they do not follow a chain with the rules in force.\n> \n> No additional bit is needed, as softforks are coordinated between users, NOT \n> miners (who have no particular say in them, aside from their role as also \n> being users). The miner involvement is only out of necessity (to set the bit \n> in the header, which users coordinate with) and potentially to accelerate \n> activation by protecting upgrade-lagging users.\n> \n> Luke\n> \n> \n>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n>> Given the recent controversy over upgrade mechanisms for the\n>> non-controversial taproot upgrade, I have been thinking about ways to solve\n>> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n>> make the point that lazy miners failing to upgrade in a timely manner slow\n>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n>> proponents make the point that LOT=true can lead to undesirable forks that\n>> might cause a lot of chaos. I believe both points are essentially correct\n>> and have created a proposal\n>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>> ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n>> \n>> The proposal uses trinary version signaling rather than binary signaling.\n>> For any particular prospective soft fork upgrade, this allows for three\n>> signaling states:\n>> \n>> * Actively support the change.\n>> * Actively oppose the change.\n>> * Not signaling (neither support or oppose). This is the default state.\n>> \n>> Using this additional information, we can release non-contentious upgrades\n>> much quicker (with a much lower percent of miners signaling support). For\n>> contentious upgrades, miners who oppose the change are incentivized to\n>> update their software to a version that can actively signal opposition to\n>> the change. The more opposition there is, the higher the threshold\n>> necessary to lock in the upgrade. With the parameters I currently\n>> recommended in the proposal, this chart shows how much support signaling\n>> would be necessary given a particular amount of active opposition\n>> signaling:\n>> \n>> [image: thresholdChart.png]\n>> If literally no one signals opposition, a 60% threshold should be\n>> relatively safe because it is a supermajority amount that is unlikely to\n>> change significantly very quickly (ie if 60% of miners support the change\n>> today, its unlikely that less than a majority of miners would support the\n>> change a year or two from now), and if no one is signaling opposition,\n>> chances are that the vast majority of the other 40% would also eventually\n>> signal support.\n>> \n>> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n>> oppose the change while at the same time allowing these lazy miners to\n>> remain lazy without slowing down the soft fork activation much.\n>> \n>> I think now is the right time to discuss new soft fork upgrade mechanisms,\n>> when there are no pressing soft fork upgrades ready to deploy. Waiting\n>> until we need to deploy a soft fork to discuss this will only delay things\n>> and cause contention again like it did with taproot.\n>> \n>> I'm very curious to know what people think of this mechanism. I would\n>> appreciate any comments here, or written as github issues on the proposal\n>> repo itself.\n>> \n>> Thanks,\n>> BT\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-26T22:05:05",
                "message_text_only": "Ultimately there is only one answer to this question. Get majority hash power support.\n\nSoft fork enforcement is the same act as any other censorship enforcement, the difference is only a question of what people want. Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this question of conflicting wants, but it is not a democracy, it\u2019s a market. One votes by trading.\n\nIf one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n\nOtherwise, as mentioned below, anyone can start a new coin. But it\u2019s dishonest to imply that one can do this and all others will surely follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been shown to not always pay off.\n\ne\n\n> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> \ufeffFor some definitions of \u201cblock\u201d.\n> \n> Without majority hash power support, activation simply means you are off on a chain split. Anyone can of course split off from a chain by changing a rule (soft or otherwise) at any time, so this is a bit of an empty claim.\n> \n> Nobody can stop a person from splitting. The relevant question is how to *prevent* a split. And activation without majority hash power certainly does not \u201censure\u201d this.\n> \n> e\n> \n>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can \n>> still slow it down.\n>> \n>> It also already has the trinary state you seem to be describing (although \n>> perhaps this could be better documented in the BIP): users who oppose the \n>> softfork can and should treat the successful signal (whether MASF or UASF) as \n>> invalid, thereby ensuring they do not follow a chain with the rules in force.\n>> \n>> No additional bit is needed, as softforks are coordinated between users, NOT \n>> miners (who have no particular say in them, aside from their role as also \n>> being users). The miner involvement is only out of necessity (to set the bit \n>> in the header, which users coordinate with) and potentially to accelerate \n>> activation by protecting upgrade-lagging users.\n>> \n>> Luke\n>> \n>> \n>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n>>> Given the recent controversy over upgrade mechanisms for the\n>>> non-controversial taproot upgrade, I have been thinking about ways to solve\n>>> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n>>> make the point that lazy miners failing to upgrade in a timely manner slow\n>>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n>>> proponents make the point that LOT=true can lead to undesirable forks that\n>>> might cause a lot of chaos. I believe both points are essentially correct\n>>> and have created a proposal\n>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>>> ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n>>> \n>>> The proposal uses trinary version signaling rather than binary signaling.\n>>> For any particular prospective soft fork upgrade, this allows for three\n>>> signaling states:\n>>> \n>>> * Actively support the change.\n>>> * Actively oppose the change.\n>>> * Not signaling (neither support or oppose). This is the default state.\n>>> \n>>> Using this additional information, we can release non-contentious upgrades\n>>> much quicker (with a much lower percent of miners signaling support). For\n>>> contentious upgrades, miners who oppose the change are incentivized to\n>>> update their software to a version that can actively signal opposition to\n>>> the change. The more opposition there is, the higher the threshold\n>>> necessary to lock in the upgrade. With the parameters I currently\n>>> recommended in the proposal, this chart shows how much support signaling\n>>> would be necessary given a particular amount of active opposition\n>>> signaling:\n>>> \n>>> [image: thresholdChart.png]\n>>> If literally no one signals opposition, a 60% threshold should be\n>>> relatively safe because it is a supermajority amount that is unlikely to\n>>> change significantly very quickly (ie if 60% of miners support the change\n>>> today, its unlikely that less than a majority of miners would support the\n>>> change a year or two from now), and if no one is signaling opposition,\n>>> chances are that the vast majority of the other 40% would also eventually\n>>> signal support.\n>>> \n>>> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n>>> oppose the change while at the same time allowing these lazy miners to\n>>> remain lazy without slowing down the soft fork activation much.\n>>> \n>>> I think now is the right time to discuss new soft fork upgrade mechanisms,\n>>> when there are no pressing soft fork upgrades ready to deploy. Waiting\n>>> until we need to deploy a soft fork to discuss this will only delay things\n>>> and cause contention again like it did with taproot.\n>>> \n>>> I'm very curious to know what people think of this mechanism. I would\n>>> appreciate any comments here, or written as github issues on the proposal\n>>> repo itself.\n>>> \n>>> Thanks,\n>>> BT\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-06-27T08:47:06",
                "message_text_only": "If different users want different incompatible things (enough on each\nside), there's no way to avoid the split. We shouldn't try to avoid\nsuch a split.\nUsers decide the rules, not miners nor developers.\n\nOn Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Ultimately there is only one answer to this question. Get majority hash power support.\n>\n> Soft fork enforcement is the same act as any other censorship enforcement, the difference is only a question of what people want. Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this question of conflicting wants, but it is not a democracy, it\u2019s a market. One votes by trading.\n>\n> If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n>\n> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s dishonest to imply that one can do this and all others will surely follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been shown to not always pay off.\n>\n> e\n>\n> > On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n> >\n> > \ufeffFor some definitions of \u201cblock\u201d.\n> >\n> > Without majority hash power support, activation simply means you are off on a chain split. Anyone can of course split off from a chain by changing a rule (soft or otherwise) at any time, so this is a bit of an empty claim.\n> >\n> > Nobody can stop a person from splitting. The relevant question is how to *prevent* a split. And activation without majority hash power certainly does not \u201censure\u201d this.\n> >\n> > e\n> >\n> >> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can\n> >> still slow it down.\n> >>\n> >> It also already has the trinary state you seem to be describing (although\n> >> perhaps this could be better documented in the BIP): users who oppose the\n> >> softfork can and should treat the successful signal (whether MASF or UASF) as\n> >> invalid, thereby ensuring they do not follow a chain with the rules in force.\n> >>\n> >> No additional bit is needed, as softforks are coordinated between users, NOT\n> >> miners (who have no particular say in them, aside from their role as also\n> >> being users). The miner involvement is only out of necessity (to set the bit\n> >> in the header, which users coordinate with) and potentially to accelerate\n> >> activation by protecting upgrade-lagging users.\n> >>\n> >> Luke\n> >>\n> >>\n> >>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n> >>> Given the recent controversy over upgrade mechanisms for the\n> >>> non-controversial taproot upgrade, I have been thinking about ways to solve\n> >>> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n> >>> make the point that lazy miners failing to upgrade in a timely manner slow\n> >>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n> >>> proponents make the point that LOT=true can lead to undesirable forks that\n> >>> might cause a lot of chaos. I believe both points are essentially correct\n> >>> and have created a proposal\n> >>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n> >>> ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n> >>>\n> >>> The proposal uses trinary version signaling rather than binary signaling.\n> >>> For any particular prospective soft fork upgrade, this allows for three\n> >>> signaling states:\n> >>>\n> >>> * Actively support the change.\n> >>> * Actively oppose the change.\n> >>> * Not signaling (neither support or oppose). This is the default state.\n> >>>\n> >>> Using this additional information, we can release non-contentious upgrades\n> >>> much quicker (with a much lower percent of miners signaling support). For\n> >>> contentious upgrades, miners who oppose the change are incentivized to\n> >>> update their software to a version that can actively signal opposition to\n> >>> the change. The more opposition there is, the higher the threshold\n> >>> necessary to lock in the upgrade. With the parameters I currently\n> >>> recommended in the proposal, this chart shows how much support signaling\n> >>> would be necessary given a particular amount of active opposition\n> >>> signaling:\n> >>>\n> >>> [image: thresholdChart.png]\n> >>> If literally no one signals opposition, a 60% threshold should be\n> >>> relatively safe because it is a supermajority amount that is unlikely to\n> >>> change significantly very quickly (ie if 60% of miners support the change\n> >>> today, its unlikely that less than a majority of miners would support the\n> >>> change a year or two from now), and if no one is signaling opposition,\n> >>> chances are that the vast majority of the other 40% would also eventually\n> >>> signal support.\n> >>>\n> >>> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n> >>> oppose the change while at the same time allowing these lazy miners to\n> >>> remain lazy without slowing down the soft fork activation much.\n> >>>\n> >>> I think now is the right time to discuss new soft fork upgrade mechanisms,\n> >>> when there are no pressing soft fork upgrades ready to deploy. Waiting\n> >>> until we need to deploy a soft fork to discuss this will only delay things\n> >>> and cause contention again like it did with taproot.\n> >>>\n> >>> I'm very curious to know what people think of this mechanism. I would\n> >>> appreciate any comments here, or written as github issues on the proposal\n> >>> repo itself.\n> >>>\n> >>> Thanks,\n> >>> BT\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-27T09:21:58",
                "message_text_only": "I have not objected to anyone splitting. As I said, a split is always possible, and of course has been done on a large scale. It is only the misleading statements about inherent soft fork \u201ccompatibility\u201d and the implication that activation without hash power enforcement does not create a split that I object to. People who know better should be honest about it.\n\nFar too many people have been led to believe there is some sort of activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d). There is only a choice between creating a split and hash power enforcement. Soft forks are rule changes, and thereby incompatible - unless enforced by majority hash power.\n\nThe statements below are grossly misleading and need to be called out as such so that people can actually make this decision you speak of. This idea that \u201cusers\u201d decide the rules is not the question. The question is only how to avoid a split. If one does not care he can split at any time, no discussion required.\n\ne\n\n> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> \n> \ufeffIf different users want different incompatible things (enough on each\n> side), there's no way to avoid the split. We shouldn't try to avoid\n> such a split.\n> Users decide the rules, not miners nor developers.\n> \n>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Ultimately there is only one answer to this question. Get majority hash power support.\n>> \n>> Soft fork enforcement is the same act as any other censorship enforcement, the difference is only a question of what people want. Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this question of conflicting wants, but it is not a democracy, it\u2019s a market. One votes by trading.\n>> \n>> If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n>> \n>> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s dishonest to imply that one can do this and all others will surely follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been shown to not always pay off.\n>> \n>> e\n>> \n>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n>>> \n>>> \ufeffFor some definitions of \u201cblock\u201d.\n>>> \n>>> Without majority hash power support, activation simply means you are off on a chain split. Anyone can of course split off from a chain by changing a rule (soft or otherwise) at any time, so this is a bit of an empty claim.\n>>> \n>>> Nobody can stop a person from splitting. The relevant question is how to *prevent* a split. And activation without majority hash power certainly does not \u201censure\u201d this.\n>>> \n>>> e\n>>> \n>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can\n>>>> still slow it down.\n>>>> \n>>>> It also already has the trinary state you seem to be describing (although\n>>>> perhaps this could be better documented in the BIP): users who oppose the\n>>>> softfork can and should treat the successful signal (whether MASF or UASF) as\n>>>> invalid, thereby ensuring they do not follow a chain with the rules in force.\n>>>> \n>>>> No additional bit is needed, as softforks are coordinated between users, NOT\n>>>> miners (who have no particular say in them, aside from their role as also\n>>>> being users). The miner involvement is only out of necessity (to set the bit\n>>>> in the header, which users coordinate with) and potentially to accelerate\n>>>> activation by protecting upgrade-lagging users.\n>>>> \n>>>> Luke\n>>>> \n>>>> \n>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n>>>>> Given the recent controversy over upgrade mechanisms for the\n>>>>> non-controversial taproot upgrade, I have been thinking about ways to solve\n>>>>> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n>>>>> make the point that lazy miners failing to upgrade in a timely manner slow\n>>>>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n>>>>> proponents make the point that LOT=true can lead to undesirable forks that\n>>>>> might cause a lot of chaos. I believe both points are essentially correct\n>>>>> and have created a proposal\n>>>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>>>>> ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n>>>>> \n>>>>> The proposal uses trinary version signaling rather than binary signaling.\n>>>>> For any particular prospective soft fork upgrade, this allows for three\n>>>>> signaling states:\n>>>>> \n>>>>> * Actively support the change.\n>>>>> * Actively oppose the change.\n>>>>> * Not signaling (neither support or oppose). This is the default state.\n>>>>> \n>>>>> Using this additional information, we can release non-contentious upgrades\n>>>>> much quicker (with a much lower percent of miners signaling support). For\n>>>>> contentious upgrades, miners who oppose the change are incentivized to\n>>>>> update their software to a version that can actively signal opposition to\n>>>>> the change. The more opposition there is, the higher the threshold\n>>>>> necessary to lock in the upgrade. With the parameters I currently\n>>>>> recommended in the proposal, this chart shows how much support signaling\n>>>>> would be necessary given a particular amount of active opposition\n>>>>> signaling:\n>>>>> \n>>>>> [image: thresholdChart.png]\n>>>>> If literally no one signals opposition, a 60% threshold should be\n>>>>> relatively safe because it is a supermajority amount that is unlikely to\n>>>>> change significantly very quickly (ie if 60% of miners support the change\n>>>>> today, its unlikely that less than a majority of miners would support the\n>>>>> change a year or two from now), and if no one is signaling opposition,\n>>>>> chances are that the vast majority of the other 40% would also eventually\n>>>>> signal support.\n>>>>> \n>>>>> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n>>>>> oppose the change while at the same time allowing these lazy miners to\n>>>>> remain lazy without slowing down the soft fork activation much.\n>>>>> \n>>>>> I think now is the right time to discuss new soft fork upgrade mechanisms,\n>>>>> when there are no pressing soft fork upgrades ready to deploy. Waiting\n>>>>> until we need to deploy a soft fork to discuss this will only delay things\n>>>>> and cause contention again like it did with taproot.\n>>>>> \n>>>>> I'm very curious to know what people think of this mechanism. I would\n>>>>> appreciate any comments here, or written as github issues on the proposal\n>>>>> repo itself.\n>>>>> \n>>>>> Thanks,\n>>>>> BT\n>>>> \n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-27T18:11:46",
                "message_text_only": "@Luke\n> They can still slow it down.\n\nAbsolutely. However I think that the option of permanent failure is\nimportant. It certainly would be ideal to ensure that enough bitcoin users\nsupport the upgrade *before* releasing it, however realistically this can\nnever be more than an estimate, and estimates can sometimes be wildly\nwrong. It would be unfortunate if miners had a substantially different\nestimate of user support than the people putting in the work to release\nbitcoin upgrades. Even if upgrades are never released before it becomes\nclear that a large supermajority of users want the upgrade, if miners don't\nagree with the estimate a harmful chain split could occur. And I agree with\nEric that the goal here is to prevent a chain split during an upgrade when\npossible. This includes permanent failure of an upgrade when there is\nunexpectedly large miner opposition.\n\nThis of course does not prevent a UASF-style deployment to be done after an\ninitial failure to deploy occurs. My proposal is essentially a mechanism to\nimprove upon the speedy-trial idea, allowing for even speedier releases\n(than speedy trial) without adding additional risk of undesired chain\nsplits.\n\n> [BIP8] already has the trinary state you seem to be describing\n\nIt sounds like you're saying the trinary state of BIP8 is A. Follow the\nlongest chain, B. Follow the upgrade chain, or C. follow the non-upgraded\nchain. I agree. However the trinary state in my proposal is materially\ndifferent - it is the signaling itself that is trinary, not just which\nchain is being followed. This allows others to know and make programmatic\ndecisions (in software) based on that signaling. I'm sure you can agree\nthat does not exist in BIP8.\n\n> No additional bit is needed, as softforks are coordinated between users,\nNOT miners\n\nAnd yet there is miner involvement, as you rightly pointed out. Miners are\nneeded to set the nVersion in the header. So when you say \"no additional\nbit is needed\", could you please be clearer as to what you mean? Do you\nmean that signaling of opposition in a block can be done without any\n\"additional bit\"? Or are you just saying that it is redundant to consider\nwhat miners might be opposing an upgrade?\n\n@Jorge\n> If different users want different incompatible things... there's no way\nto avoid the split\n\nI agree. This happened with bcash, and that's fine. It was painful, but\nthere were a significant amount of users that disagreed, and they have the\nchain they want now.\n\nBut we generally all want to avoid a chain split when possible. Because\nchain splits have a cost, and that cost can be high, its likely that many\nusers would rather choose the chain with the most support rather than\nchoosing the chain with their preferred rules.\n\nHowever, the question here is: how do we estimate what fraction of users\nwants which rules? We don't have a divining rod to determine with certainty\nwhat users want. We can only make polls of various levels of inaccuracy.\nThe methods bitcoin has been using is community discussion and social\nconsensus estimation as well as miner signaling during the actual\ndeployment period. Neither of these are perfect, but they are both\nreasonable enough mechanisms. However, because both of these mechanisms are\nvery rough estimates of user sentiment, we need to consider the possibility\nthat sometimes the estimate may be substantially inaccurate when we design\ndeployment procedures. This inaccuracy is why we need multiple barriers in\nplace for an upgrade, and why we need to have higher thresholds of success\n(require larger supermajorities in both consensus and miner signaling).\n\nDevelopers obviously care about bitcoin and have an incentive (personal and\nprobably financial) to do it right. And miners have both an incentive to\nkeep the system healthy, as well as an incentive to mine on the chain that\nthe economic majority of users is using. But measuring the consensus of the\nbitcoin community can be extraordinarily difficult to do with consistent\naccuracy, and so I think miner signaling as it has been used as a second\nbarrier to entry for an upgrade is quite appropriate.\n\nOn Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n\n> I have not objected to anyone splitting. As I said, a split is always\n> possible, and of course has been done on a large scale. It is only the\n> misleading statements about inherent soft fork \u201ccompatibility\u201d and the\n> implication that activation without hash power enforcement does not create\n> a split that I object to. People who know better should be honest about it.\n>\n> Far too many people have been led to believe there is some sort of\n> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d).\n> There is only a choice between creating a split and hash power enforcement.\n> Soft forks are rule changes, and thereby incompatible - unless enforced by\n> majority hash power.\n>\n> The statements below are grossly misleading and need to be called out as\n> such so that people can actually make this decision you speak of. This idea\n> that \u201cusers\u201d decide the rules is not the question. The question is only how\n> to avoid a split. If one does not care he can split at any time, no\n> discussion required.\n>\n> e\n>\n> > On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >\n> > \ufeffIf different users want different incompatible things (enough on each\n> > side), there's no way to avoid the split. We shouldn't try to avoid\n> > such a split.\n> > Users decide the rules, not miners nor developers.\n> >\n> >> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Ultimately there is only one answer to this question. Get majority hash\n> power support.\n> >>\n> >> Soft fork enforcement is the same act as any other censorship\n> enforcement, the difference is only a question of what people want. Given\n> that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this\n> question of conflicting wants, but it is not a democracy, it\u2019s a market.\n> One votes by trading.\n> >>\n> >> If one wants to enforce a soft fork (or otherwise censor) this is\n> accomplished by mining (or paying others to do so). Anyone can mine, so\n> everyone gets a say. Mining is trading capital now for more later. If\n> enough people want to do that, they can enforce a soft fork. It\u2019s time\n> Bitcoiners stop thinking of miners as other people. Anyone can mine, and\n> that\u2019s your vote.\n> >>\n> >> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s\n> dishonest to imply that one can do this and all others will surely follow.\n> This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been\n> shown to not always pay off.\n> >>\n> >> e\n> >>\n> >>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n> >>>\n> >>> \ufeffFor some definitions of \u201cblock\u201d.\n> >>>\n> >>> Without majority hash power support, activation simply means you are\n> off on a chain split. Anyone can of course split off from a chain by\n> changing a rule (soft or otherwise) at any time, so this is a bit of an\n> empty claim.\n> >>>\n> >>> Nobody can stop a person from splitting. The relevant question is how\n> to *prevent* a split. And activation without majority hash power certainly\n> does not \u201censure\u201d this.\n> >>>\n> >>> e\n> >>>\n> >>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>>\n> >>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely.\n> They can\n> >>>> still slow it down.\n> >>>>\n> >>>> It also already has the trinary state you seem to be describing\n> (although\n> >>>> perhaps this could be better documented in the BIP): users who oppose\n> the\n> >>>> softfork can and should treat the successful signal (whether MASF or\n> UASF) as\n> >>>> invalid, thereby ensuring they do not follow a chain with the rules\n> in force.\n> >>>>\n> >>>> No additional bit is needed, as softforks are coordinated between\n> users, NOT\n> >>>> miners (who have no particular say in them, aside from their role as\n> also\n> >>>> being users). The miner involvement is only out of necessity (to set\n> the bit\n> >>>> in the header, which users coordinate with) and potentially to\n> accelerate\n> >>>> activation by protecting upgrade-lagging users.\n> >>>>\n> >>>> Luke\n> >>>>\n> >>>>\n> >>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n> wrote:\n> >>>>> Given the recent controversy over upgrade mechanisms for the\n> >>>>> non-controversial taproot upgrade, I have been thinking about ways\n> to solve\n> >>>>> the problems that both sides brought up. In short, BIP8 LOT=true\n> proponents\n> >>>>> make the point that lazy miners failing to upgrade in a timely\n> manner slow\n> >>>>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n> >>>>> proponents make the point that LOT=true can lead to undesirable\n> forks that\n> >>>>> might cause a lot of chaos. I believe both points are essentially\n> correct\n> >>>>> and have created a proposal\n> >>>>> <\n> https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n> >>>>> ip-trinary-version-bits.md> for soft fork upgrades that solve both\n> problems.\n> >>>>>\n> >>>>> The proposal uses trinary version signaling rather than binary\n> signaling.\n> >>>>> For any particular prospective soft fork upgrade, this allows for\n> three\n> >>>>> signaling states:\n> >>>>>\n> >>>>> * Actively support the change.\n> >>>>> * Actively oppose the change.\n> >>>>> * Not signaling (neither support or oppose). This is the default\n> state.\n> >>>>>\n> >>>>> Using this additional information, we can release non-contentious\n> upgrades\n> >>>>> much quicker (with a much lower percent of miners signaling\n> support). For\n> >>>>> contentious upgrades, miners who oppose the change are incentivized\n> to\n> >>>>> update their software to a version that can actively signal\n> opposition to\n> >>>>> the change. The more opposition there is, the higher the threshold\n> >>>>> necessary to lock in the upgrade. With the parameters I currently\n> >>>>> recommended in the proposal, this chart shows how much support\n> signaling\n> >>>>> would be necessary given a particular amount of active opposition\n> >>>>> signaling:\n> >>>>>\n> >>>>> [image: thresholdChart.png]\n> >>>>> If literally no one signals opposition, a 60% threshold should be\n> >>>>> relatively safe because it is a supermajority amount that is\n> unlikely to\n> >>>>> change significantly very quickly (ie if 60% of miners support the\n> change\n> >>>>> today, its unlikely that less than a majority of miners would\n> support the\n> >>>>> change a year or two from now), and if no one is signaling\n> opposition,\n> >>>>> chances are that the vast majority of the other 40% would also\n> eventually\n> >>>>> signal support.\n> >>>>>\n> >>>>> This both gives an incentive for \"lazy\" miners to upgrade if they\n> actually\n> >>>>> oppose the change while at the same time allowing these lazy miners\n> to\n> >>>>> remain lazy without slowing down the soft fork activation much.\n> >>>>>\n> >>>>> I think now is the right time to discuss new soft fork upgrade\n> mechanisms,\n> >>>>> when there are no pressing soft fork upgrades ready to deploy.\n> Waiting\n> >>>>> until we need to deploy a soft fork to discuss this will only delay\n> things\n> >>>>> and cause contention again like it did with taproot.\n> >>>>>\n> >>>>> I'm very curious to know what people think of this mechanism. I would\n> >>>>> appreciate any comments here, or written as github issues on the\n> proposal\n> >>>>> repo itself.\n> >>>>>\n> >>>>> Thanks,\n> >>>>> BT\n> >>>>\n> >>>> _______________________________________________\n> >>>> bitcoin-dev mailing list\n> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210627/e5faf2f4/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-06-29T08:32:33",
                "message_text_only": "I think the option of \"permanent failure because miners veto\" should\nactually be abandoned.\nNo, I don't think we should avoid splits when possible, I don't think we\nshould avoid splits at all costs.\n\n\nOn Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n> @Luke\n> > They can still slow it down.\n>\n> Absolutely. However I think that the option of permanent failure is\n> important. It certainly would be ideal to ensure that enough bitcoin users\n> support the upgrade *before* releasing it, however realistically this can\n> never be more than an estimate, and estimates can sometimes be wildly\n> wrong. It would be unfortunate if miners had a substantially different\n> estimate of user support than the people putting in the work to release\n> bitcoin upgrades. Even if upgrades are never released before it becomes\n> clear that a large supermajority of users want the upgrade, if miners don't\n> agree with the estimate a harmful chain split could occur. And I agree with\n> Eric that the goal here is to prevent a chain split during an upgrade when\n> possible. This includes permanent failure of an upgrade when there is\n> unexpectedly large miner opposition.\n>\n> This of course does not prevent a UASF-style deployment to be done after\n> an initial failure to deploy occurs. My proposal is essentially a mechanism\n> to improve upon the speedy-trial idea, allowing for even speedier releases\n> (than speedy trial) without adding additional risk of undesired chain\n> splits.\n>\n> > [BIP8] already has the trinary state you seem to be describing\n>\n> It sounds like you're saying the trinary state of BIP8 is A. Follow the\n> longest chain, B. Follow the upgrade chain, or C. follow the non-upgraded\n> chain. I agree. However the trinary state in my proposal is materially\n> different - it is the signaling itself that is trinary, not just which\n> chain is being followed. This allows others to know and make programmatic\n> decisions (in software) based on that signaling. I'm sure you can agree\n> that does not exist in BIP8.\n>\n> > No additional bit is needed, as softforks are coordinated between users,\n> NOT miners\n>\n> And yet there is miner involvement, as you rightly pointed out. Miners are\n> needed to set the nVersion in the header. So when you say \"no additional\n> bit is needed\", could you please be clearer as to what you mean? Do you\n> mean that signaling of opposition in a block can be done without any\n> \"additional bit\"? Or are you just saying that it is redundant to consider\n> what miners might be opposing an upgrade?\n>\n> @Jorge\n> > If different users want different incompatible things... there's no way\n> to avoid the split\n>\n> I agree. This happened with bcash, and that's fine. It was painful, but\n> there were a significant amount of users that disagreed, and they have the\n> chain they want now.\n>\n> But we generally all want to avoid a chain split when possible. Because\n> chain splits have a cost, and that cost can be high, its likely that many\n> users would rather choose the chain with the most support rather than\n> choosing the chain with their preferred rules.\n>\n> However, the question here is: how do we estimate what fraction of users\n> wants which rules? We don't have a divining rod to determine with certainty\n> what users want. We can only make polls of various levels of inaccuracy.\n> The methods bitcoin has been using is community discussion and social\n> consensus estimation as well as miner signaling during the actual\n> deployment period. Neither of these are perfect, but they are both\n> reasonable enough mechanisms. However, because both of these mechanisms are\n> very rough estimates of user sentiment, we need to consider the possibility\n> that sometimes the estimate may be substantially inaccurate when we design\n> deployment procedures. This inaccuracy is why we need multiple barriers in\n> place for an upgrade, and why we need to have higher thresholds of success\n> (require larger supermajorities in both consensus and miner signaling).\n>\n> Developers obviously care about bitcoin and have an incentive (personal\n> and probably financial) to do it right. And miners have both an incentive\n> to keep the system healthy, as well as an incentive to mine on the chain\n> that the economic majority of users is using. But measuring the consensus\n> of the bitcoin community can be extraordinarily difficult to do with\n> consistent accuracy, and so I think miner signaling as it has been used as\n> a second barrier to entry for an upgrade is quite appropriate.\n>\n> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n>\n>> I have not objected to anyone splitting. As I said, a split is always\n>> possible, and of course has been done on a large scale. It is only the\n>> misleading statements about inherent soft fork \u201ccompatibility\u201d and the\n>> implication that activation without hash power enforcement does not create\n>> a split that I object to. People who know better should be honest about it.\n>>\n>> Far too many people have been led to believe there is some sort of\n>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d).\n>> There is only a choice between creating a split and hash power enforcement.\n>> Soft forks are rule changes, and thereby incompatible - unless enforced by\n>> majority hash power.\n>>\n>> The statements below are grossly misleading and need to be called out as\n>> such so that people can actually make this decision you speak of. This idea\n>> that \u201cusers\u201d decide the rules is not the question. The question is only how\n>> to avoid a split. If one does not care he can split at any time, no\n>> discussion required.\n>>\n>> e\n>>\n>> > On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >\n>> > \ufeffIf different users want different incompatible things (enough on each\n>> > side), there's no way to avoid the split. We shouldn't try to avoid\n>> > such a split.\n>> > Users decide the rules, not miners nor developers.\n>> >\n>> >> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> Ultimately there is only one answer to this question. Get majority\n>> hash power support.\n>> >>\n>> >> Soft fork enforcement is the same act as any other censorship\n>> enforcement, the difference is only a question of what people want. Given\n>> that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this\n>> question of conflicting wants, but it is not a democracy, it\u2019s a market.\n>> One votes by trading.\n>> >>\n>> >> If one wants to enforce a soft fork (or otherwise censor) this is\n>> accomplished by mining (or paying others to do so). Anyone can mine, so\n>> everyone gets a say. Mining is trading capital now for more later. If\n>> enough people want to do that, they can enforce a soft fork. It\u2019s time\n>> Bitcoiners stop thinking of miners as other people. Anyone can mine, and\n>> that\u2019s your vote.\n>> >>\n>> >> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s\n>> dishonest to imply that one can do this and all others will surely follow.\n>> This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been\n>> shown to not always pay off.\n>> >>\n>> >> e\n>> >>\n>> >>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n>> >>>\n>> >>> \ufeffFor some definitions of \u201cblock\u201d.\n>> >>>\n>> >>> Without majority hash power support, activation simply means you are\n>> off on a chain split. Anyone can of course split off from a chain by\n>> changing a rule (soft or otherwise) at any time, so this is a bit of an\n>> empty claim.\n>> >>>\n>> >>> Nobody can stop a person from splitting. The relevant question is how\n>> to *prevent* a split. And activation without majority hash power certainly\n>> does not \u201censure\u201d this.\n>> >>>\n>> >>> e\n>> >>>\n>> >>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>\n>> >>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely.\n>> They can\n>> >>>> still slow it down.\n>> >>>>\n>> >>>> It also already has the trinary state you seem to be describing\n>> (although\n>> >>>> perhaps this could be better documented in the BIP): users who\n>> oppose the\n>> >>>> softfork can and should treat the successful signal (whether MASF or\n>> UASF) as\n>> >>>> invalid, thereby ensuring they do not follow a chain with the rules\n>> in force.\n>> >>>>\n>> >>>> No additional bit is needed, as softforks are coordinated between\n>> users, NOT\n>> >>>> miners (who have no particular say in them, aside from their role as\n>> also\n>> >>>> being users). The miner involvement is only out of necessity (to set\n>> the bit\n>> >>>> in the header, which users coordinate with) and potentially to\n>> accelerate\n>> >>>> activation by protecting upgrade-lagging users.\n>> >>>>\n>> >>>> Luke\n>> >>>>\n>> >>>>\n>> >>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>> wrote:\n>> >>>>> Given the recent controversy over upgrade mechanisms for the\n>> >>>>> non-controversial taproot upgrade, I have been thinking about ways\n>> to solve\n>> >>>>> the problems that both sides brought up. In short, BIP8 LOT=true\n>> proponents\n>> >>>>> make the point that lazy miners failing to upgrade in a timely\n>> manner slow\n>> >>>>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n>> >>>>> proponents make the point that LOT=true can lead to undesirable\n>> forks that\n>> >>>>> might cause a lot of chaos. I believe both points are essentially\n>> correct\n>> >>>>> and have created a proposal\n>> >>>>> <\n>> https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>> >>>>> ip-trinary-version-bits.md> for soft fork upgrades that solve both\n>> problems.\n>> >>>>>\n>> >>>>> The proposal uses trinary version signaling rather than binary\n>> signaling.\n>> >>>>> For any particular prospective soft fork upgrade, this allows for\n>> three\n>> >>>>> signaling states:\n>> >>>>>\n>> >>>>> * Actively support the change.\n>> >>>>> * Actively oppose the change.\n>> >>>>> * Not signaling (neither support or oppose). This is the default\n>> state.\n>> >>>>>\n>> >>>>> Using this additional information, we can release non-contentious\n>> upgrades\n>> >>>>> much quicker (with a much lower percent of miners signaling\n>> support). For\n>> >>>>> contentious upgrades, miners who oppose the change are incentivized\n>> to\n>> >>>>> update their software to a version that can actively signal\n>> opposition to\n>> >>>>> the change. The more opposition there is, the higher the threshold\n>> >>>>> necessary to lock in the upgrade. With the parameters I currently\n>> >>>>> recommended in the proposal, this chart shows how much support\n>> signaling\n>> >>>>> would be necessary given a particular amount of active opposition\n>> >>>>> signaling:\n>> >>>>>\n>> >>>>> [image: thresholdChart.png]\n>> >>>>> If literally no one signals opposition, a 60% threshold should be\n>> >>>>> relatively safe because it is a supermajority amount that is\n>> unlikely to\n>> >>>>> change significantly very quickly (ie if 60% of miners support the\n>> change\n>> >>>>> today, its unlikely that less than a majority of miners would\n>> support the\n>> >>>>> change a year or two from now), and if no one is signaling\n>> opposition,\n>> >>>>> chances are that the vast majority of the other 40% would also\n>> eventually\n>> >>>>> signal support.\n>> >>>>>\n>> >>>>> This both gives an incentive for \"lazy\" miners to upgrade if they\n>> actually\n>> >>>>> oppose the change while at the same time allowing these lazy miners\n>> to\n>> >>>>> remain lazy without slowing down the soft fork activation much.\n>> >>>>>\n>> >>>>> I think now is the right time to discuss new soft fork upgrade\n>> mechanisms,\n>> >>>>> when there are no pressing soft fork upgrades ready to deploy.\n>> Waiting\n>> >>>>> until we need to deploy a soft fork to discuss this will only delay\n>> things\n>> >>>>> and cause contention again like it did with taproot.\n>> >>>>>\n>> >>>>> I'm very curious to know what people think of this mechanism. I\n>> would\n>> >>>>> appreciate any comments here, or written as github issues on the\n>> proposal\n>> >>>>> repo itself.\n>> >>>>>\n>> >>>>> Thanks,\n>> >>>>> BT\n>> >>>>\n>> >>>> _______________________________________________\n>> >>>> bitcoin-dev mailing list\n>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/ada3537e/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-29T08:44:56",
                "message_text_only": "At least we are now acknowledging that splitting is what it\u2019s about. That\u2019s progress.\n\ne\n\n> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> \n> \ufeff\n> I think the option of \"permanent failure because miners veto\" should actually be abandoned. \n> No, I don't think we should avoid splits when possible, I don't think we should avoid splits at all costs.\n> \n> \n>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>> @Luke\n>> > They can still slow it down.\n>> \n>> Absolutely. However I think that the option of permanent failure is important. It certainly would be ideal to ensure that enough bitcoin users support the upgrade *before* releasing it, however realistically this can never be more than an estimate, and estimates can sometimes be wildly wrong. It would be unfortunate if miners had a substantially different estimate of user support than the people putting in the work to release bitcoin upgrades. Even if upgrades are never released before it becomes clear that a large supermajority of users want the upgrade, if miners don't agree with the estimate a harmful chain split could occur. And I agree with Eric that the goal here is to prevent a chain split during an upgrade when possible. This includes permanent failure of an upgrade when there is unexpectedly large miner opposition. \n>> \n>> This of course does not prevent a UASF-style deployment to be done after an initial failure to deploy occurs. My proposal is essentially a mechanism to improve upon the speedy-trial idea, allowing for even speedier releases (than speedy trial) without adding additional risk of undesired chain splits. \n>> \n>> > [BIP8] already has the trinary state you seem to be describing\n>> \n>> It sounds like you're saying the trinary state of BIP8 is A. Follow the longest chain, B. Follow the upgrade chain, or C. follow the non-upgraded chain. I agree. However the trinary state in my proposal is materially different - it is the signaling itself that is trinary, not just which chain is being followed. This allows others to know and make programmatic decisions (in software) based on that signaling. I'm sure you can agree that does not exist in BIP8. \n>> \n>> > No additional bit is needed, as softforks are coordinated between users, NOT miners\n>> \n>> And yet there is miner involvement, as you rightly pointed out. Miners are needed to set the nVersion in the header. So when you say \"no additional bit is needed\", could you please be clearer as to what you mean? Do you mean that signaling of opposition in a block can be done without any \"additional bit\"? Or are you just saying that it is redundant to consider what miners might be opposing an upgrade? \n>> \n>> @Jorge\n>> > If different users want different incompatible things... there's no way to avoid the split\n>> \n>> I agree. This happened with bcash, and that's fine. It was painful, but there were a significant amount of users that disagreed, and they have the chain they want now.\n>> \n>> But we generally all want to avoid a chain split when possible. Because chain splits have a cost, and that cost can be high, its likely that many users would rather choose the chain with the most support rather than choosing the chain with their preferred rules.\n>> \n>> However, the question here is: how do we estimate what fraction of users wants which rules? We don't have a divining rod to determine with certainty what users want. We can only make polls of various levels of inaccuracy. The methods bitcoin has been using is community discussion and social consensus estimation as well as miner signaling during the actual deployment period. Neither of these are perfect, but they are both reasonable enough mechanisms. However, because both of these mechanisms are very rough estimates of user sentiment, we need to consider the possibility that sometimes the estimate may be substantially inaccurate when we design deployment procedures. This inaccuracy is why we need multiple barriers in place for an upgrade, and why we need to have higher thresholds of success (require larger supermajorities in both consensus and miner signaling). \n>> \n>> Developers obviously care about bitcoin and have an incentive (personal and probably financial) to do it right. And miners have both an incentive to keep the system healthy, as well as an incentive to mine on the chain that the economic majority of users is using. But measuring the consensus of the bitcoin community can be extraordinarily difficult to do with consistent accuracy, and so I think miner signaling as it has been used as a second barrier to entry for an upgrade is quite appropriate. \n>> \n>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n>>> I have not objected to anyone splitting. As I said, a split is always possible, and of course has been done on a large scale. It is only the misleading statements about inherent soft fork \u201ccompatibility\u201d and the implication that activation without hash power enforcement does not create a split that I object to. People who know better should be honest about it.\n>>> \n>>> Far too many people have been led to believe there is some sort of activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d). There is only a choice between creating a split and hash power enforcement. Soft forks are rule changes, and thereby incompatible - unless enforced by majority hash power.\n>>> \n>>> The statements below are grossly misleading and need to be called out as such so that people can actually make this decision you speak of. This idea that \u201cusers\u201d decide the rules is not the question. The question is only how to avoid a split. If one does not care he can split at any time, no discussion required.\n>>> \n>>> e\n>>> \n>>> > On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>> > \n>>> > \ufeffIf different users want different incompatible things (enough on each\n>>> > side), there's no way to avoid the split. We shouldn't try to avoid\n>>> > such a split.\n>>> > Users decide the rules, not miners nor developers.\n>>> > \n>>> >> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >> \n>>> >> Ultimately there is only one answer to this question. Get majority hash power support.\n>>> >> \n>>> >> Soft fork enforcement is the same act as any other censorship enforcement, the difference is only a question of what people want. Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin resolves this question of conflicting wants, but it is not a democracy, it\u2019s a market. One votes by trading.\n>>> >> \n>>> >> If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n>>> >> \n>>> >> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s dishonest to imply that one can do this and all others will surely follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one that has been shown to not always pay off.\n>>> >> \n>>> >> e\n>>> >> \n>>> >>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n>>> >>> \n>>> >>> \ufeffFor some definitions of \u201cblock\u201d.\n>>> >>> \n>>> >>> Without majority hash power support, activation simply means you are off on a chain split. Anyone can of course split off from a chain by changing a rule (soft or otherwise) at any time, so this is a bit of an empty claim.\n>>> >>> \n>>> >>> Nobody can stop a person from splitting. The relevant question is how to *prevent* a split. And activation without majority hash power certainly does not \u201censure\u201d this.\n>>> >>> \n>>> >>> e\n>>> >>> \n>>> >>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>>> \n>>> >>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade entirely. They can\n>>> >>>> still slow it down.\n>>> >>>> \n>>> >>>> It also already has the trinary state you seem to be describing (although\n>>> >>>> perhaps this could be better documented in the BIP): users who oppose the\n>>> >>>> softfork can and should treat the successful signal (whether MASF or UASF) as\n>>> >>>> invalid, thereby ensuring they do not follow a chain with the rules in force.\n>>> >>>> \n>>> >>>> No additional bit is needed, as softforks are coordinated between users, NOT\n>>> >>>> miners (who have no particular say in them, aside from their role as also\n>>> >>>> being users). The miner involvement is only out of necessity (to set the bit\n>>> >>>> in the header, which users coordinate with) and potentially to accelerate\n>>> >>>> activation by protecting upgrade-lagging users.\n>>> >>>> \n>>> >>>> Luke\n>>> >>>> \n>>> >>>> \n>>> >>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev wrote:\n>>> >>>>> Given the recent controversy over upgrade mechanisms for the\n>>> >>>>> non-controversial taproot upgrade, I have been thinking about ways to solve\n>>> >>>>> the problems that both sides brought up. In short, BIP8 LOT=true proponents\n>>> >>>>> make the point that lazy miners failing to upgrade in a timely manner slow\n>>> >>>>> down releases of bitcoin upgrades, and BIP9 / BIP8 LOT=false\n>>> >>>>> proponents make the point that LOT=true can lead to undesirable forks that\n>>> >>>>> might cause a lot of chaos. I believe both points are essentially correct\n>>> >>>>> and have created a proposal\n>>> >>>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blob/master/b\n>>> >>>>> ip-trinary-version-bits.md> for soft fork upgrades that solve both problems.\n>>> >>>>> \n>>> >>>>> The proposal uses trinary version signaling rather than binary signaling.\n>>> >>>>> For any particular prospective soft fork upgrade, this allows for three\n>>> >>>>> signaling states:\n>>> >>>>> \n>>> >>>>> * Actively support the change.\n>>> >>>>> * Actively oppose the change.\n>>> >>>>> * Not signaling (neither support or oppose). This is the default state.\n>>> >>>>> \n>>> >>>>> Using this additional information, we can release non-contentious upgrades\n>>> >>>>> much quicker (with a much lower percent of miners signaling support). For\n>>> >>>>> contentious upgrades, miners who oppose the change are incentivized to\n>>> >>>>> update their software to a version that can actively signal opposition to\n>>> >>>>> the change. The more opposition there is, the higher the threshold\n>>> >>>>> necessary to lock in the upgrade. With the parameters I currently\n>>> >>>>> recommended in the proposal, this chart shows how much support signaling\n>>> >>>>> would be necessary given a particular amount of active opposition\n>>> >>>>> signaling:\n>>> >>>>> \n>>> >>>>> [image: thresholdChart.png]\n>>> >>>>> If literally no one signals opposition, a 60% threshold should be\n>>> >>>>> relatively safe because it is a supermajority amount that is unlikely to\n>>> >>>>> change significantly very quickly (ie if 60% of miners support the change\n>>> >>>>> today, its unlikely that less than a majority of miners would support the\n>>> >>>>> change a year or two from now), and if no one is signaling opposition,\n>>> >>>>> chances are that the vast majority of the other 40% would also eventually\n>>> >>>>> signal support.\n>>> >>>>> \n>>> >>>>> This both gives an incentive for \"lazy\" miners to upgrade if they actually\n>>> >>>>> oppose the change while at the same time allowing these lazy miners to\n>>> >>>>> remain lazy without slowing down the soft fork activation much.\n>>> >>>>> \n>>> >>>>> I think now is the right time to discuss new soft fork upgrade mechanisms,\n>>> >>>>> when there are no pressing soft fork upgrades ready to deploy. Waiting\n>>> >>>>> until we need to deploy a soft fork to discuss this will only delay things\n>>> >>>>> and cause contention again like it did with taproot.\n>>> >>>>> \n>>> >>>>> I'm very curious to know what people think of this mechanism. I would\n>>> >>>>> appreciate any comments here, or written as github issues on the proposal\n>>> >>>>> repo itself.\n>>> >>>>> \n>>> >>>>> Thanks,\n>>> >>>>> BT\n>>> >>>> \n>>> >>>> _______________________________________________\n>>> >>>> bitcoin-dev mailing list\n>>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >> _______________________________________________\n>>> >> bitcoin-dev mailing list\n>>> >> bitcoin-dev at lists.linuxfoundation.org\n>>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/dfc06d8f/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-06-29T17:55:11",
                "message_text_only": "The only alternative to a split in the problematic scenarios are 1) concede \ncentralised miner control over the network, and 2) have inconsistent \nenforcement of rules by users who don't agree on what the correct rules are, \nagain leading to centralised miner control over the network.\n\nIn other words, in this context, accepting a split between disagreeing users \nis the ONLY way Bitcoin can possibly continue as a decentralised currency. \nMaking that split as clean and well-defined as possible not only ensures the \nbest opportunity for both sides of the disagreement, but also minimises the \nrisk that the split occurs at all (since the \"losing\" side needs to concede, \nrather than passively continue the disagreement ongoing after the attempted \nprotocol change).\n\nLuke\n\n\nOn Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n> At least we are now acknowledging that splitting is what it\u2019s about. That\u2019s\n> progress.\n>\n> e\n>\n> > On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >\n> > \ufeff\n> > I think the option of \"permanent failure because miners veto\" should\n> > actually be abandoned. No, I don't think we should avoid splits when\n> > possible, I don't think we should avoid splits at all costs.\n> >\n> >> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com> wrote:\n> >> @Luke\n> >>\n> >> > They can still slow it down.\n> >>\n> >> Absolutely. However I think that the option of permanent failure is\n> >> important. It certainly would be ideal to ensure that enough bitcoin\n> >> users support the upgrade *before* releasing it, however realistically\n> >> this can never be more than an estimate, and estimates can sometimes be\n> >> wildly wrong. It would be unfortunate if miners had a substantially\n> >> different estimate of user support than the people putting in the work\n> >> to release bitcoin upgrades. Even if upgrades are never released before\n> >> it becomes clear that a large supermajority of users want the upgrade,\n> >> if miners don't agree with the estimate a harmful chain split could\n> >> occur. And I agree with Eric that the goal here is to prevent a chain\n> >> split during an upgrade when possible. This includes permanent failure\n> >> of an upgrade when there is unexpectedly large miner opposition.\n> >>\n> >> This of course does not prevent a UASF-style deployment to be done after\n> >> an initial failure to deploy occurs. My proposal is essentially a\n> >> mechanism to improve upon the speedy-trial idea, allowing for even\n> >> speedier releases (than speedy trial) without adding additional risk of\n> >> undesired chain splits.\n> >>\n> >> > [BIP8] already has the trinary state you seem to be describing\n> >>\n> >> It sounds like you're saying the trinary state of BIP8 is A. Follow the\n> >> longest chain, B. Follow the upgrade chain, or C. follow the\n> >> non-upgraded chain. I agree. However the trinary state in my proposal is\n> >> materially different - it is the signaling itself that is trinary, not\n> >> just which chain is being followed. This allows others to know and make\n> >> programmatic decisions (in software) based on that signaling. I'm sure\n> >> you can agree that does not exist in BIP8.\n> >>\n> >> > No additional bit is needed, as softforks are coordinated between\n> >> > users, NOT miners\n> >>\n> >> And yet there is miner involvement, as you rightly pointed out. Miners\n> >> are needed to set the nVersion in the header. So when you say \"no\n> >> additional bit is needed\", could you please be clearer as to what you\n> >> mean? Do you mean that signaling of opposition in a block can be done\n> >> without any \"additional bit\"? Or are you just saying that it is\n> >> redundant to consider what miners might be opposing an upgrade?\n> >>\n> >> @Jorge\n> >>\n> >> > If different users want different incompatible things... there's no\n> >> > way to avoid the split\n> >>\n> >> I agree. This happened with bcash, and that's fine. It was painful, but\n> >> there were a significant amount of users that disagreed, and they have\n> >> the chain they want now.\n> >>\n> >> But we generally all want to avoid a chain split when possible. Because\n> >> chain splits have a cost, and that cost can be high, its likely that\n> >> many users would rather choose the chain with the most support rather\n> >> than choosing the chain with their preferred rules.\n> >>\n> >> However, the question here is: how do we estimate what fraction of users\n> >> wants which rules? We don't have a divining rod to determine with\n> >> certainty what users want. We can only make polls of various levels of\n> >> inaccuracy. The methods bitcoin has been using is community discussion\n> >> and social consensus estimation as well as miner signaling during the\n> >> actual deployment period. Neither of these are perfect, but they are\n> >> both reasonable enough mechanisms. However, because both of these\n> >> mechanisms are very rough estimates of user sentiment, we need to\n> >> consider the possibility that sometimes the estimate may be\n> >> substantially inaccurate when we design deployment procedures. This\n> >> inaccuracy is why we need multiple barriers in place for an upgrade, and\n> >> why we need to have higher thresholds of success (require larger\n> >> supermajorities in both consensus and miner signaling).\n> >>\n> >> Developers obviously care about bitcoin and have an incentive (personal\n> >> and probably financial) to do it right. And miners have both an\n> >> incentive to keep the system healthy, as well as an incentive to mine on\n> >> the chain that the economic majority of users is using. But measuring\n> >> the consensus of the bitcoin community can be extraordinarily difficult\n> >> to do with consistent accuracy, and so I think miner signaling as it has\n> >> been used as a second barrier to entry for an upgrade is quite\n> >> appropriate.\n> >>\n> >>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n> >>> I have not objected to anyone splitting. As I said, a split is always\n> >>> possible, and of course has been done on a large scale. It is only the\n> >>> misleading statements about inherent soft fork \u201ccompatibility\u201d and the\n> >>> implication that activation without hash power enforcement does not\n> >>> create a split that I object to. People who know better should be\n> >>> honest about it.\n> >>>\n> >>> Far too many people have been led to believe there is some sort of\n> >>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d).\n> >>> There is only a choice between creating a split and hash power\n> >>> enforcement. Soft forks are rule changes, and thereby incompatible -\n> >>> unless enforced by majority hash power.\n> >>>\n> >>> The statements below are grossly misleading and need to be called out\n> >>> as such so that people can actually make this decision you speak of.\n> >>> This idea that \u201cusers\u201d decide the rules is not the question. The\n> >>> question is only how to avoid a split. If one does not care he can\n> >>> split at any time, no discussion required.\n> >>>\n> >>> e\n> >>>\n> >>> > On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >>> >\n> >>> > \ufeffIf different users want different incompatible things (enough on\n> >>> > each side), there's no way to avoid the split. We shouldn't try to\n> >>> > avoid such a split.\n> >>> > Users decide the rules, not miners nor developers.\n> >>> >\n> >>> >> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n> >>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>> >>\n> >>> >> Ultimately there is only one answer to this question. Get majority\n> >>> >> hash power support.\n> >>> >>\n> >>> >> Soft fork enforcement is the same act as any other censorship\n> >>> >> enforcement, the difference is only a question of what people want.\n> >>> >> Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin\n> >>> >> resolves this question of conflicting wants, but it is not a\n> >>> >> democracy, it\u2019s a market. One votes by trading.\n> >>> >>\n> >>> >> If one wants to enforce a soft fork (or otherwise censor) this is\n> >>> >> accomplished by mining (or paying others to do so). Anyone can mine,\n> >>> >> so everyone gets a say. Mining is trading capital now for more\n> >>> >> later. If enough people want to do that, they can enforce a soft\n> >>> >> fork. It\u2019s time Bitcoiners stop thinking of miners as other people.\n> >>> >> Anyone can mine, and that\u2019s your vote.\n> >>> >>\n> >>> >> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s\n> >>> >> dishonest to imply that one can do this and all others will surely\n> >>> >> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n> >>> >> that has been shown to not always pay off.\n> >>> >>\n> >>> >> e\n> >>> >>\n> >>> >>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n> >>> >>>\n> >>> >>> \ufeffFor some definitions of \u201cblock\u201d.\n> >>> >>>\n> >>> >>> Without majority hash power support, activation simply means you\n> >>> >>> are off on a chain split. Anyone can of course split off from a\n> >>> >>> chain by changing a rule (soft or otherwise) at any time, so this\n> >>> >>> is a bit of an empty claim.\n> >>> >>>\n> >>> >>> Nobody can stop a person from splitting. The relevant question is\n> >>> >>> how to *prevent* a split. And activation without majority hash\n> >>> >>> power certainly does not \u201censure\u201d this.\n> >>> >>>\n> >>> >>> e\n> >>> >>>\n> >>> >>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n> >>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>> >>>>\n> >>> >>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n> >>> >>>> entirely. They can still slow it down.\n> >>> >>>>\n> >>> >>>> It also already has the trinary state you seem to be describing\n> >>> >>>> (although perhaps this could be better documented in the BIP):\n> >>> >>>> users who oppose the softfork can and should treat the successful\n> >>> >>>> signal (whether MASF or UASF) as invalid, thereby ensuring they do\n> >>> >>>> not follow a chain with the rules in force.\n> >>> >>>>\n> >>> >>>> No additional bit is needed, as softforks are coordinated between\n> >>> >>>> users, NOT miners (who have no particular say in them, aside from\n> >>> >>>> their role as also being users). The miner involvement is only out\n> >>> >>>> of necessity (to set the bit in the header, which users coordinate\n> >>> >>>> with) and potentially to accelerate activation by protecting\n> >>> >>>> upgrade-lagging users.\n> >>> >>>>\n> >>> >>>> Luke\n> >>> >>>>\n> >>> >>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n> >>> >>>>>> wrote:\n> >>> >>>>>\n> >>> >>>>> Given the recent controversy over upgrade mechanisms for the\n> >>> >>>>> non-controversial taproot upgrade, I have been thinking about\n> >>> >>>>> ways to solve the problems that both sides brought up. In short,\n> >>> >>>>> BIP8 LOT=true proponents make the point that lazy miners failing\n> >>> >>>>> to upgrade in a timely manner slow down releases of bitcoin\n> >>> >>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n> >>> >>>>> that LOT=true can lead to undesirable forks that might cause a\n> >>> >>>>> lot of chaos. I believe both points are essentially correct and\n> >>> >>>>> have created a proposal\n> >>> >>>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n> >>> >>>>>b/master/b ip-trinary-version-bits.md> for soft fork upgrades that\n> >>> >>>>> solve both problems.\n> >>> >>>>>\n> >>> >>>>> The proposal uses trinary version signaling rather than binary\n> >>> >>>>> signaling. For any particular prospective soft fork upgrade, this\n> >>> >>>>> allows for three signaling states:\n> >>> >>>>>\n> >>> >>>>> * Actively support the change.\n> >>> >>>>> * Actively oppose the change.\n> >>> >>>>> * Not signaling (neither support or oppose). This is the default\n> >>> >>>>> state.\n> >>> >>>>>\n> >>> >>>>> Using this additional information, we can release non-contentious\n> >>> >>>>> upgrades much quicker (with a much lower percent of miners\n> >>> >>>>> signaling support). For contentious upgrades, miners who oppose\n> >>> >>>>> the change are incentivized to update their software to a version\n> >>> >>>>> that can actively signal opposition to the change. The more\n> >>> >>>>> opposition there is, the higher the threshold necessary to lock\n> >>> >>>>> in the upgrade. With the parameters I currently recommended in\n> >>> >>>>> the proposal, this chart shows how much support signaling would\n> >>> >>>>> be necessary given a particular amount of active opposition\n> >>> >>>>> signaling:\n> >>> >>>>>\n> >>> >>>>> [image: thresholdChart.png]\n> >>> >>>>> If literally no one signals opposition, a 60% threshold should be\n> >>> >>>>> relatively safe because it is a supermajority amount that is\n> >>> >>>>> unlikely to change significantly very quickly (ie if 60% of\n> >>> >>>>> miners support the change today, its unlikely that less than a\n> >>> >>>>> majority of miners would support the change a year or two from\n> >>> >>>>> now), and if no one is signaling opposition, chances are that the\n> >>> >>>>> vast majority of the other 40% would also eventually signal\n> >>> >>>>> support.\n> >>> >>>>>\n> >>> >>>>> This both gives an incentive for \"lazy\" miners to upgrade if they\n> >>> >>>>> actually oppose the change while at the same time allowing these\n> >>> >>>>> lazy miners to remain lazy without slowing down the soft fork\n> >>> >>>>> activation much.\n> >>> >>>>>\n> >>> >>>>> I think now is the right time to discuss new soft fork upgrade\n> >>> >>>>> mechanisms, when there are no pressing soft fork upgrades ready\n> >>> >>>>> to deploy. Waiting until we need to deploy a soft fork to discuss\n> >>> >>>>> this will only delay things and cause contention again like it\n> >>> >>>>> did with taproot.\n> >>> >>>>>\n> >>> >>>>> I'm very curious to know what people think of this mechanism. I\n> >>> >>>>> would appreciate any comments here, or written as github issues\n> >>> >>>>> on the proposal repo itself.\n> >>> >>>>>\n> >>> >>>>> Thanks,\n> >>> >>>>> BT\n> >>> >>>>\n> >>> >>>> _______________________________________________\n> >>> >>>> bitcoin-dev mailing list\n> >>> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>> >>\n> >>> >> _______________________________________________\n> >>> >> bitcoin-dev mailing list\n> >>> >> bitcoin-dev at lists.linuxfoundation.org\n> >>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-29T18:17:22",
                "message_text_only": "> On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n> \n> \ufeffThe only alternative to a split in the problematic scenarios are 1) concede \n> centralised miner control over the network,\n\nMiners control confirmation, entirely.\n\nThis is the nature of bitcoin. And merchants control validation, entirely. Anyone can be a miner or a merchant. Neither is inherently \u201cbetter\u201d than the other. The largest merchants are likely a handful of exchanges, likely at least as centralized as miners are pooled.\n\nSplitting does not change this.\n\n> and 2) have inconsistent \n> enforcement of rules by users who don't agree on what the correct rules are, \n\nThere are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what network he chooses to participate in.\n\n> again leading to centralised miner control over the network.\n\nLeading to? Miners control confirmation, always. Whether that is centralized, just as with merchanting, is up to individuals.\n\n> In other words, in this context, accepting a split between disagreeing users \n> is the ONLY way Bitcoin can possibly continue as a decentralised currency.\n\nNo, it is not. You are proposing splitting as the method of censorship resistance inherent to Bitcoin. Coordinating this split requires coordinated action. The whole point of bitcoin is coordinate that action based on mining (proof of work). Replacing that with a political process is just a reversion to political money.\n\n> Making that split as clean and well-defined as possible not only ensures the \n> best opportunity for both sides of the disagreement,\n\nTrivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s about how one gets others to go along with the new coin, or stay with the old. An entirely political process, which is clearly evident from the campaigns around such attempts.\n\n> but also minimises the \n> risk that the split occurs at all (since the \"losing\" side needs to concede, \n> rather than passively continue the disagreement ongoing after the attempted \n> protocol change).\n\nNobody \u201cneeds to\u201d concede once a split has occurred, which is evident in existing splits.\n\ne\n\n> Luke\n> \n> \n>> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n>> At least we are now acknowledging that splitting is what it\u2019s about. That\u2019s\n>> progress.\n>> \n>> e\n>> \n>>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>> \n>>> \ufeff\n>>> I think the option of \"permanent failure because miners veto\" should\n>>> actually be abandoned. No, I don't think we should avoid splits when\n>>> possible, I don't think we should avoid splits at all costs.\n>>> \n>>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>>>> @Luke\n>>>> \n>>>>> They can still slow it down.\n>>>> \n>>>> Absolutely. However I think that the option of permanent failure is\n>>>> important. It certainly would be ideal to ensure that enough bitcoin\n>>>> users support the upgrade *before* releasing it, however realistically\n>>>> this can never be more than an estimate, and estimates can sometimes be\n>>>> wildly wrong. It would be unfortunate if miners had a substantially\n>>>> different estimate of user support than the people putting in the work\n>>>> to release bitcoin upgrades. Even if upgrades are never released before\n>>>> it becomes clear that a large supermajority of users want the upgrade,\n>>>> if miners don't agree with the estimate a harmful chain split could\n>>>> occur. And I agree with Eric that the goal here is to prevent a chain\n>>>> split during an upgrade when possible. This includes permanent failure\n>>>> of an upgrade when there is unexpectedly large miner opposition.\n>>>> \n>>>> This of course does not prevent a UASF-style deployment to be done after\n>>>> an initial failure to deploy occurs. My proposal is essentially a\n>>>> mechanism to improve upon the speedy-trial idea, allowing for even\n>>>> speedier releases (than speedy trial) without adding additional risk of\n>>>> undesired chain splits.\n>>>> \n>>>>> [BIP8] already has the trinary state you seem to be describing\n>>>> \n>>>> It sounds like you're saying the trinary state of BIP8 is A. Follow the\n>>>> longest chain, B. Follow the upgrade chain, or C. follow the\n>>>> non-upgraded chain. I agree. However the trinary state in my proposal is\n>>>> materially different - it is the signaling itself that is trinary, not\n>>>> just which chain is being followed. This allows others to know and make\n>>>> programmatic decisions (in software) based on that signaling. I'm sure\n>>>> you can agree that does not exist in BIP8.\n>>>> \n>>>>> No additional bit is needed, as softforks are coordinated between\n>>>>> users, NOT miners\n>>>> \n>>>> And yet there is miner involvement, as you rightly pointed out. Miners\n>>>> are needed to set the nVersion in the header. So when you say \"no\n>>>> additional bit is needed\", could you please be clearer as to what you\n>>>> mean? Do you mean that signaling of opposition in a block can be done\n>>>> without any \"additional bit\"? Or are you just saying that it is\n>>>> redundant to consider what miners might be opposing an upgrade?\n>>>> \n>>>> @Jorge\n>>>> \n>>>>> If different users want different incompatible things... there's no\n>>>>> way to avoid the split\n>>>> \n>>>> I agree. This happened with bcash, and that's fine. It was painful, but\n>>>> there were a significant amount of users that disagreed, and they have\n>>>> the chain they want now.\n>>>> \n>>>> But we generally all want to avoid a chain split when possible. Because\n>>>> chain splits have a cost, and that cost can be high, its likely that\n>>>> many users would rather choose the chain with the most support rather\n>>>> than choosing the chain with their preferred rules.\n>>>> \n>>>> However, the question here is: how do we estimate what fraction of users\n>>>> wants which rules? We don't have a divining rod to determine with\n>>>> certainty what users want. We can only make polls of various levels of\n>>>> inaccuracy. The methods bitcoin has been using is community discussion\n>>>> and social consensus estimation as well as miner signaling during the\n>>>> actual deployment period. Neither of these are perfect, but they are\n>>>> both reasonable enough mechanisms. However, because both of these\n>>>> mechanisms are very rough estimates of user sentiment, we need to\n>>>> consider the possibility that sometimes the estimate may be\n>>>> substantially inaccurate when we design deployment procedures. This\n>>>> inaccuracy is why we need multiple barriers in place for an upgrade, and\n>>>> why we need to have higher thresholds of success (require larger\n>>>> supermajorities in both consensus and miner signaling).\n>>>> \n>>>> Developers obviously care about bitcoin and have an incentive (personal\n>>>> and probably financial) to do it right. And miners have both an\n>>>> incentive to keep the system healthy, as well as an incentive to mine on\n>>>> the chain that the economic majority of users is using. But measuring\n>>>> the consensus of the bitcoin community can be extraordinarily difficult\n>>>> to do with consistent accuracy, and so I think miner signaling as it has\n>>>> been used as a second barrier to entry for an upgrade is quite\n>>>> appropriate.\n>>>> \n>>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n>>>>> I have not objected to anyone splitting. As I said, a split is always\n>>>>> possible, and of course has been done on a large scale. It is only the\n>>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and the\n>>>>> implication that activation without hash power enforcement does not\n>>>>> create a split that I object to. People who know better should be\n>>>>> honest about it.\n>>>>> \n>>>>> Far too many people have been led to believe there is some sort of\n>>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d).\n>>>>> There is only a choice between creating a split and hash power\n>>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n>>>>> unless enforced by majority hash power.\n>>>>> \n>>>>> The statements below are grossly misleading and need to be called out\n>>>>> as such so that people can actually make this decision you speak of.\n>>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n>>>>> question is only how to avoid a split. If one does not care he can\n>>>>> split at any time, no discussion required.\n>>>>> \n>>>>> e\n>>>>> \n>>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>>>>> \n>>>>>> \ufeffIf different users want different incompatible things (enough on\n>>>>>> each side), there's no way to avoid the split. We shouldn't try to\n>>>>>> avoid such a split.\n>>>>>> Users decide the rules, not miners nor developers.\n>>>>>> \n>>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>>> \n>>>>>>> Ultimately there is only one answer to this question. Get majority\n>>>>>>> hash power support.\n>>>>>>> \n>>>>>>> Soft fork enforcement is the same act as any other censorship\n>>>>>>> enforcement, the difference is only a question of what people want.\n>>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin\n>>>>>>> resolves this question of conflicting wants, but it is not a\n>>>>>>> democracy, it\u2019s a market. One votes by trading.\n>>>>>>> \n>>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n>>>>>>> accomplished by mining (or paying others to do so). Anyone can mine,\n>>>>>>> so everyone gets a say. Mining is trading capital now for more\n>>>>>>> later. If enough people want to do that, they can enforce a soft\n>>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other people.\n>>>>>>> Anyone can mine, and that\u2019s your vote.\n>>>>>>> \n>>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s\n>>>>>>> dishonest to imply that one can do this and all others will surely\n>>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n>>>>>>> that has been shown to not always pay off.\n>>>>>>> \n>>>>>>> e\n>>>>>>> \n>>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>>> \n>>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n>>>>>>>> \n>>>>>>>> Without majority hash power support, activation simply means you\n>>>>>>>> are off on a chain split. Anyone can of course split off from a\n>>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n>>>>>>>> is a bit of an empty claim.\n>>>>>>>> \n>>>>>>>> Nobody can stop a person from splitting. The relevant question is\n>>>>>>>> how to *prevent* a split. And activation without majority hash\n>>>>>>>> power certainly does not \u201censure\u201d this.\n>>>>>>>> \n>>>>>>>> e\n>>>>>>>> \n>>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n>>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>>>>> \n>>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n>>>>>>>>> entirely. They can still slow it down.\n>>>>>>>>> \n>>>>>>>>> It also already has the trinary state you seem to be describing\n>>>>>>>>> (although perhaps this could be better documented in the BIP):\n>>>>>>>>> users who oppose the softfork can and should treat the successful\n>>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they do\n>>>>>>>>> not follow a chain with the rules in force.\n>>>>>>>>> \n>>>>>>>>> No additional bit is needed, as softforks are coordinated between\n>>>>>>>>> users, NOT miners (who have no particular say in them, aside from\n>>>>>>>>> their role as also being users). The miner involvement is only out\n>>>>>>>>> of necessity (to set the bit in the header, which users coordinate\n>>>>>>>>> with) and potentially to accelerate activation by protecting\n>>>>>>>>> upgrade-lagging users.\n>>>>>>>>> \n>>>>>>>>> Luke\n>>>>>>>>> \n>>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>>>>>>>>>>> wrote:\n>>>>>>>>>> \n>>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n>>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n>>>>>>>>>> ways to solve the problems that both sides brought up. In short,\n>>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners failing\n>>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n>>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n>>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n>>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n>>>>>>>>>> have created a proposal\n>>>>>>>>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n>>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades that\n>>>>>>>>>> solve both problems.\n>>>>>>>>>> \n>>>>>>>>>> The proposal uses trinary version signaling rather than binary\n>>>>>>>>>> signaling. For any particular prospective soft fork upgrade, this\n>>>>>>>>>> allows for three signaling states:\n>>>>>>>>>> \n>>>>>>>>>> * Actively support the change.\n>>>>>>>>>> * Actively oppose the change.\n>>>>>>>>>> * Not signaling (neither support or oppose). This is the default\n>>>>>>>>>> state.\n>>>>>>>>>> \n>>>>>>>>>> Using this additional information, we can release non-contentious\n>>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n>>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n>>>>>>>>>> the change are incentivized to update their software to a version\n>>>>>>>>>> that can actively signal opposition to the change. The more\n>>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n>>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n>>>>>>>>>> the proposal, this chart shows how much support signaling would\n>>>>>>>>>> be necessary given a particular amount of active opposition\n>>>>>>>>>> signaling:\n>>>>>>>>>> \n>>>>>>>>>> [image: thresholdChart.png]\n>>>>>>>>>> If literally no one signals opposition, a 60% threshold should be\n>>>>>>>>>> relatively safe because it is a supermajority amount that is\n>>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n>>>>>>>>>> miners support the change today, its unlikely that less than a\n>>>>>>>>>> majority of miners would support the change a year or two from\n>>>>>>>>>> now), and if no one is signaling opposition, chances are that the\n>>>>>>>>>> vast majority of the other 40% would also eventually signal\n>>>>>>>>>> support.\n>>>>>>>>>> \n>>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if they\n>>>>>>>>>> actually oppose the change while at the same time allowing these\n>>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n>>>>>>>>>> activation much.\n>>>>>>>>>> \n>>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n>>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n>>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to discuss\n>>>>>>>>>> this will only delay things and cause contention again like it\n>>>>>>>>>> did with taproot.\n>>>>>>>>>> \n>>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n>>>>>>>>>> would appreciate any comments here, or written as github issues\n>>>>>>>>>> on the proposal repo itself.\n>>>>>>>>>> \n>>>>>>>>>> Thanks,\n>>>>>>>>>> BT\n>>>>>>>>> \n>>>>>>>>> _______________________________________________\n>>>>>>>>> bitcoin-dev mailing list\n>>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>> \n>>>>>>> _______________________________________________\n>>>>>>> bitcoin-dev mailing list\n>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-06-29T19:28:20",
                "message_text_only": "\"Confirmation\" isn't needed for softforks. Miners controlling confirmation\ndoesn't mean miners control the rules, they never did. Read section 11 of\nthe bitcoin paper \"even with a majority of hashrate one cannot arbitrarily\nchange rules or forge signatures.\n\nYou may say users chosing the rules is \"politicial\". Isn't miners deciding\nthem for users more political? Whatever you call it, it is still how free\nsoftware works: users decide what to run.\nIt is extremely disappointing to see how few developers seem to ubderstand\nthis, or even care about users deciding or miners not deciding the rules.\nHow can we expect users to understand bitcoin when most developers don't\nseem to understand it?\n\nIt is really sad.\n\nOn Tue, Jun 29, 2021, 19:17 Eric Voskuil <eric at voskuil.org> wrote:\n\n>\n> > On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n> >\n> > \ufeffThe only alternative to a split in the problematic scenarios are 1)\n> concede\n> > centralised miner control over the network,\n>\n> Miners control confirmation, entirely.\n>\n> This is the nature of bitcoin. And merchants control validation, entirely.\n> Anyone can be a miner or a merchant. Neither is inherently \u201cbetter\u201d than\n> the other. The largest merchants are likely a handful of exchanges, likely\n> at least as centralized as miners are pooled.\n>\n> Splitting does not change this.\n>\n> > and 2) have inconsistent\n> > enforcement of rules by users who don't agree on what the correct rules\n> are,\n>\n> There are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what\n> network he chooses to participate in.\n>\n> > again leading to centralised miner control over the network.\n>\n> Leading to? Miners control confirmation, always. Whether that is\n> centralized, just as with merchanting, is up to individuals.\n>\n> > In other words, in this context, accepting a split between disagreeing\n> users\n> > is the ONLY way Bitcoin can possibly continue as a decentralised\n> currency.\n>\n> No, it is not. You are proposing splitting as the method of censorship\n> resistance inherent to Bitcoin. Coordinating this split requires\n> coordinated action. The whole point of bitcoin is coordinate that action\n> based on mining (proof of work). Replacing that with a political process is\n> just a reversion to political money.\n>\n> > Making that split as clean and well-defined as possible not only ensures\n> the\n> > best opportunity for both sides of the disagreement,\n>\n> Trivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s\n> about how one gets others to go along with the new coin, or stay with the\n> old. An entirely political process, which is clearly evident from the\n> campaigns around such attempts.\n>\n> > but also minimises the\n> > risk that the split occurs at all (since the \"losing\" side needs to\n> concede,\n> > rather than passively continue the disagreement ongoing after the\n> attempted\n> > protocol change).\n>\n> Nobody \u201cneeds to\u201d concede once a split has occurred, which is evident in\n> existing splits.\n>\n> e\n>\n> > Luke\n> >\n> >\n> >> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n> >> At least we are now acknowledging that splitting is what it\u2019s about.\n> That\u2019s\n> >> progress.\n> >>\n> >> e\n> >>\n> >>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >>>\n> >>> \ufeff\n> >>> I think the option of \"permanent failure because miners veto\" should\n> >>> actually be abandoned. No, I don't think we should avoid splits when\n> >>> possible, I don't think we should avoid splits at all costs.\n> >>>\n> >>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n> >>>> @Luke\n> >>>>\n> >>>>> They can still slow it down.\n> >>>>\n> >>>> Absolutely. However I think that the option of permanent failure is\n> >>>> important. It certainly would be ideal to ensure that enough bitcoin\n> >>>> users support the upgrade *before* releasing it, however realistically\n> >>>> this can never be more than an estimate, and estimates can sometimes\n> be\n> >>>> wildly wrong. It would be unfortunate if miners had a substantially\n> >>>> different estimate of user support than the people putting in the work\n> >>>> to release bitcoin upgrades. Even if upgrades are never released\n> before\n> >>>> it becomes clear that a large supermajority of users want the upgrade,\n> >>>> if miners don't agree with the estimate a harmful chain split could\n> >>>> occur. And I agree with Eric that the goal here is to prevent a chain\n> >>>> split during an upgrade when possible. This includes permanent failure\n> >>>> of an upgrade when there is unexpectedly large miner opposition.\n> >>>>\n> >>>> This of course does not prevent a UASF-style deployment to be done\n> after\n> >>>> an initial failure to deploy occurs. My proposal is essentially a\n> >>>> mechanism to improve upon the speedy-trial idea, allowing for even\n> >>>> speedier releases (than speedy trial) without adding additional risk\n> of\n> >>>> undesired chain splits.\n> >>>>\n> >>>>> [BIP8] already has the trinary state you seem to be describing\n> >>>>\n> >>>> It sounds like you're saying the trinary state of BIP8 is A. Follow\n> the\n> >>>> longest chain, B. Follow the upgrade chain, or C. follow the\n> >>>> non-upgraded chain. I agree. However the trinary state in my proposal\n> is\n> >>>> materially different - it is the signaling itself that is trinary, not\n> >>>> just which chain is being followed. This allows others to know and\n> make\n> >>>> programmatic decisions (in software) based on that signaling. I'm sure\n> >>>> you can agree that does not exist in BIP8.\n> >>>>\n> >>>>> No additional bit is needed, as softforks are coordinated between\n> >>>>> users, NOT miners\n> >>>>\n> >>>> And yet there is miner involvement, as you rightly pointed out. Miners\n> >>>> are needed to set the nVersion in the header. So when you say \"no\n> >>>> additional bit is needed\", could you please be clearer as to what you\n> >>>> mean? Do you mean that signaling of opposition in a block can be done\n> >>>> without any \"additional bit\"? Or are you just saying that it is\n> >>>> redundant to consider what miners might be opposing an upgrade?\n> >>>>\n> >>>> @Jorge\n> >>>>\n> >>>>> If different users want different incompatible things... there's no\n> >>>>> way to avoid the split\n> >>>>\n> >>>> I agree. This happened with bcash, and that's fine. It was painful,\n> but\n> >>>> there were a significant amount of users that disagreed, and they have\n> >>>> the chain they want now.\n> >>>>\n> >>>> But we generally all want to avoid a chain split when possible.\n> Because\n> >>>> chain splits have a cost, and that cost can be high, its likely that\n> >>>> many users would rather choose the chain with the most support rather\n> >>>> than choosing the chain with their preferred rules.\n> >>>>\n> >>>> However, the question here is: how do we estimate what fraction of\n> users\n> >>>> wants which rules? We don't have a divining rod to determine with\n> >>>> certainty what users want. We can only make polls of various levels of\n> >>>> inaccuracy. The methods bitcoin has been using is community discussion\n> >>>> and social consensus estimation as well as miner signaling during the\n> >>>> actual deployment period. Neither of these are perfect, but they are\n> >>>> both reasonable enough mechanisms. However, because both of these\n> >>>> mechanisms are very rough estimates of user sentiment, we need to\n> >>>> consider the possibility that sometimes the estimate may be\n> >>>> substantially inaccurate when we design deployment procedures. This\n> >>>> inaccuracy is why we need multiple barriers in place for an upgrade,\n> and\n> >>>> why we need to have higher thresholds of success (require larger\n> >>>> supermajorities in both consensus and miner signaling).\n> >>>>\n> >>>> Developers obviously care about bitcoin and have an incentive\n> (personal\n> >>>> and probably financial) to do it right. And miners have both an\n> >>>> incentive to keep the system healthy, as well as an incentive to mine\n> on\n> >>>> the chain that the economic majority of users is using. But measuring\n> >>>> the consensus of the bitcoin community can be extraordinarily\n> difficult\n> >>>> to do with consistent accuracy, and so I think miner signaling as it\n> has\n> >>>> been used as a second barrier to entry for an upgrade is quite\n> >>>> appropriate.\n> >>>>\n> >>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org>\n> wrote:\n> >>>>> I have not objected to anyone splitting. As I said, a split is always\n> >>>>> possible, and of course has been done on a large scale. It is only\n> the\n> >>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and\n> the\n> >>>>> implication that activation without hash power enforcement does not\n> >>>>> create a split that I object to. People who know better should be\n> >>>>> honest about it.\n> >>>>>\n> >>>>> Far too many people have been led to believe there is some sort of\n> >>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed\n> down\u201d).\n> >>>>> There is only a choice between creating a split and hash power\n> >>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n> >>>>> unless enforced by majority hash power.\n> >>>>>\n> >>>>> The statements below are grossly misleading and need to be called out\n> >>>>> as such so that people can actually make this decision you speak of.\n> >>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n> >>>>> question is only how to avoid a split. If one does not care he can\n> >>>>> split at any time, no discussion required.\n> >>>>>\n> >>>>> e\n> >>>>>\n> >>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> >>>>>>\n> >>>>>> \ufeffIf different users want different incompatible things (enough on\n> >>>>>> each side), there's no way to avoid the split. We shouldn't try to\n> >>>>>> avoid such a split.\n> >>>>>> Users decide the rules, not miners nor developers.\n> >>>>>>\n> >>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n> >>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>>>>>\n> >>>>>>> Ultimately there is only one answer to this question. Get majority\n> >>>>>>> hash power support.\n> >>>>>>>\n> >>>>>>> Soft fork enforcement is the same act as any other censorship\n> >>>>>>> enforcement, the difference is only a question of what people want.\n> >>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin\n> >>>>>>> resolves this question of conflicting wants, but it is not a\n> >>>>>>> democracy, it\u2019s a market. One votes by trading.\n> >>>>>>>\n> >>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n> >>>>>>> accomplished by mining (or paying others to do so). Anyone can\n> mine,\n> >>>>>>> so everyone gets a say. Mining is trading capital now for more\n> >>>>>>> later. If enough people want to do that, they can enforce a soft\n> >>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other people.\n> >>>>>>> Anyone can mine, and that\u2019s your vote.\n> >>>>>>>\n> >>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But\n> it\u2019s\n> >>>>>>> dishonest to imply that one can do this and all others will surely\n> >>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n> >>>>>>> that has been shown to not always pay off.\n> >>>>>>>\n> >>>>>>> e\n> >>>>>>>\n> >>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org>\n> wrote:\n> >>>>>>>>\n> >>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n> >>>>>>>>\n> >>>>>>>> Without majority hash power support, activation simply means you\n> >>>>>>>> are off on a chain split. Anyone can of course split off from a\n> >>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n> >>>>>>>> is a bit of an empty claim.\n> >>>>>>>>\n> >>>>>>>> Nobody can stop a person from splitting. The relevant question is\n> >>>>>>>> how to *prevent* a split. And activation without majority hash\n> >>>>>>>> power certainly does not \u201censure\u201d this.\n> >>>>>>>>\n> >>>>>>>> e\n> >>>>>>>>\n> >>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n> >>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>>>>>>>\n> >>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n> >>>>>>>>> entirely. They can still slow it down.\n> >>>>>>>>>\n> >>>>>>>>> It also already has the trinary state you seem to be describing\n> >>>>>>>>> (although perhaps this could be better documented in the BIP):\n> >>>>>>>>> users who oppose the softfork can and should treat the successful\n> >>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they\n> do\n> >>>>>>>>> not follow a chain with the rules in force.\n> >>>>>>>>>\n> >>>>>>>>> No additional bit is needed, as softforks are coordinated between\n> >>>>>>>>> users, NOT miners (who have no particular say in them, aside from\n> >>>>>>>>> their role as also being users). The miner involvement is only\n> out\n> >>>>>>>>> of necessity (to set the bit in the header, which users\n> coordinate\n> >>>>>>>>> with) and potentially to accelerate activation by protecting\n> >>>>>>>>> upgrade-lagging users.\n> >>>>>>>>>\n> >>>>>>>>> Luke\n> >>>>>>>>>\n> >>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n> >>>>>>>>>>> wrote:\n> >>>>>>>>>>\n> >>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n> >>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n> >>>>>>>>>> ways to solve the problems that both sides brought up. In short,\n> >>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners failing\n> >>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n> >>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n> >>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n> >>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n> >>>>>>>>>> have created a proposal\n> >>>>>>>>>> <\n> https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n> >>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades\n> that\n> >>>>>>>>>> solve both problems.\n> >>>>>>>>>>\n> >>>>>>>>>> The proposal uses trinary version signaling rather than binary\n> >>>>>>>>>> signaling. For any particular prospective soft fork upgrade,\n> this\n> >>>>>>>>>> allows for three signaling states:\n> >>>>>>>>>>\n> >>>>>>>>>> * Actively support the change.\n> >>>>>>>>>> * Actively oppose the change.\n> >>>>>>>>>> * Not signaling (neither support or oppose). This is the default\n> >>>>>>>>>> state.\n> >>>>>>>>>>\n> >>>>>>>>>> Using this additional information, we can release\n> non-contentious\n> >>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n> >>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n> >>>>>>>>>> the change are incentivized to update their software to a\n> version\n> >>>>>>>>>> that can actively signal opposition to the change. The more\n> >>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n> >>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n> >>>>>>>>>> the proposal, this chart shows how much support signaling would\n> >>>>>>>>>> be necessary given a particular amount of active opposition\n> >>>>>>>>>> signaling:\n> >>>>>>>>>>\n> >>>>>>>>>> [image: thresholdChart.png]\n> >>>>>>>>>> If literally no one signals opposition, a 60% threshold should\n> be\n> >>>>>>>>>> relatively safe because it is a supermajority amount that is\n> >>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n> >>>>>>>>>> miners support the change today, its unlikely that less than a\n> >>>>>>>>>> majority of miners would support the change a year or two from\n> >>>>>>>>>> now), and if no one is signaling opposition, chances are that\n> the\n> >>>>>>>>>> vast majority of the other 40% would also eventually signal\n> >>>>>>>>>> support.\n> >>>>>>>>>>\n> >>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if\n> they\n> >>>>>>>>>> actually oppose the change while at the same time allowing these\n> >>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n> >>>>>>>>>> activation much.\n> >>>>>>>>>>\n> >>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n> >>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n> >>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to\n> discuss\n> >>>>>>>>>> this will only delay things and cause contention again like it\n> >>>>>>>>>> did with taproot.\n> >>>>>>>>>>\n> >>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n> >>>>>>>>>> would appreciate any comments here, or written as github issues\n> >>>>>>>>>> on the proposal repo itself.\n> >>>>>>>>>>\n> >>>>>>>>>> Thanks,\n> >>>>>>>>>> BT\n> >>>>>>>>>\n> >>>>>>>>> _______________________________________________\n> >>>>>>>>> bitcoin-dev mailing list\n> >>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>>>>>>\n> >>>>>>> _______________________________________________\n> >>>>>>> bitcoin-dev mailing list\n> >>>>>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/7edacdb9/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-29T19:44:09",
                "message_text_only": "> On Jun 29, 2021, at 12:28, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> \n> \ufeff\n> \"Confirmation\" isn't needed for softforks.\n\nAll transactions require confirmation. Splitting does not change this.\n\nSoftforks are not compatible without miner enforcement. So soft forking without it has essentially the same effect as hard forking, the chain splits.\n\n> Miners controlling confirmation doesn't mean miners control the rules, they never did.\n\nPlease define \u201ccontrol\u201d because these statements hinge on that word. Nobody \u201ccontrols\u201d the rules of others, nor did anyone claim that to be the case. Majority hash power does have the ability to determine what gets confirmed. That is the central design principle of proof of work. It takes that decision out of the hands of politicians and places it at the feet of the market.\n\n> Read section 11 of the bitcoin paper \"even with a majority of hashrate one cannot arbitrarily change rules or forge signatures.\n\nNever claimed that was the case. One can run any rules that one desires.\n\n> You may say users chosing the rules is \"politicial\". Isn't miners deciding them for users more political?\n\nNo, it\u2019s economic. The largest investment in mining (including highest fees paid to incentivize it) determines censorship resistance.\n\n> Whatever you call it, it is still how free software works: users decide what to run.\n\nA *person* can run whatever software they want. Money requires that others agree (same rules), and to be money bitcoin requires confirmation.\n\n> It is extremely disappointing to see how few developers seem to ubderstand this, or even care about users deciding or miners not deciding the rules.\n\nIt\u2019s poorly understood because there are so many who should know better making very misleading statements.\n\n> How can we expect users to understand bitcoin when most developers don't seem to understand it?\n\nClearly we cannot.\n\n> It is really sad.\n> \n>> On Tue, Jun 29, 2021, 19:17 Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> > On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n>> > \n>> > \ufeffThe only alternative to a split in the problematic scenarios are 1) concede \n>> > centralised miner control over the network,\n>> \n>> Miners control confirmation, entirely.\n>> \n>> This is the nature of bitcoin. And merchants control validation, entirely. Anyone can be a miner or a merchant. Neither is inherently \u201cbetter\u201d than the other. The largest merchants are likely a handful of exchanges, likely at least as centralized as miners are pooled.\n>> \n>> Splitting does not change this.\n>> \n>> > and 2) have inconsistent \n>> > enforcement of rules by users who don't agree on what the correct rules are, \n>> \n>> There are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what network he chooses to participate in.\n>> \n>> > again leading to centralised miner control over the network.\n>> \n>> Leading to? Miners control confirmation, always. Whether that is centralized, just as with merchanting, is up to individuals.\n>> \n>> > In other words, in this context, accepting a split between disagreeing users \n>> > is the ONLY way Bitcoin can possibly continue as a decentralised currency.\n>> \n>> No, it is not. You are proposing splitting as the method of censorship resistance inherent to Bitcoin. Coordinating this split requires coordinated action. The whole point of bitcoin is coordinate that action based on mining (proof of work). Replacing that with a political process is just a reversion to political money.\n>> \n>> > Making that split as clean and well-defined as possible not only ensures the \n>> > best opportunity for both sides of the disagreement,\n>> \n>> Trivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s about how one gets others to go along with the new coin, or stay with the old. An entirely political process, which is clearly evident from the campaigns around such attempts.\n>> \n>> > but also minimises the \n>> > risk that the split occurs at all (since the \"losing\" side needs to concede, \n>> > rather than passively continue the disagreement ongoing after the attempted \n>> > protocol change).\n>> \n>> Nobody \u201cneeds to\u201d concede once a split has occurred, which is evident in existing splits.\n>> \n>> e\n>> \n>> > Luke\n>> > \n>> > \n>> >> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n>> >> At least we are now acknowledging that splitting is what it\u2019s about. That\u2019s\n>> >> progress.\n>> >> \n>> >> e\n>> >> \n>> >>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>> \n>> >>> \ufeff\n>> >>> I think the option of \"permanent failure because miners veto\" should\n>> >>> actually be abandoned. No, I don't think we should avoid splits when\n>> >>> possible, I don't think we should avoid splits at all costs.\n>> >>> \n>> >>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>> >>>> @Luke\n>> >>>> \n>> >>>>> They can still slow it down.\n>> >>>> \n>> >>>> Absolutely. However I think that the option of permanent failure is\n>> >>>> important. It certainly would be ideal to ensure that enough bitcoin\n>> >>>> users support the upgrade *before* releasing it, however realistically\n>> >>>> this can never be more than an estimate, and estimates can sometimes be\n>> >>>> wildly wrong. It would be unfortunate if miners had a substantially\n>> >>>> different estimate of user support than the people putting in the work\n>> >>>> to release bitcoin upgrades. Even if upgrades are never released before\n>> >>>> it becomes clear that a large supermajority of users want the upgrade,\n>> >>>> if miners don't agree with the estimate a harmful chain split could\n>> >>>> occur. And I agree with Eric that the goal here is to prevent a chain\n>> >>>> split during an upgrade when possible. This includes permanent failure\n>> >>>> of an upgrade when there is unexpectedly large miner opposition.\n>> >>>> \n>> >>>> This of course does not prevent a UASF-style deployment to be done after\n>> >>>> an initial failure to deploy occurs. My proposal is essentially a\n>> >>>> mechanism to improve upon the speedy-trial idea, allowing for even\n>> >>>> speedier releases (than speedy trial) without adding additional risk of\n>> >>>> undesired chain splits.\n>> >>>> \n>> >>>>> [BIP8] already has the trinary state you seem to be describing\n>> >>>> \n>> >>>> It sounds like you're saying the trinary state of BIP8 is A. Follow the\n>> >>>> longest chain, B. Follow the upgrade chain, or C. follow the\n>> >>>> non-upgraded chain. I agree. However the trinary state in my proposal is\n>> >>>> materially different - it is the signaling itself that is trinary, not\n>> >>>> just which chain is being followed. This allows others to know and make\n>> >>>> programmatic decisions (in software) based on that signaling. I'm sure\n>> >>>> you can agree that does not exist in BIP8.\n>> >>>> \n>> >>>>> No additional bit is needed, as softforks are coordinated between\n>> >>>>> users, NOT miners\n>> >>>> \n>> >>>> And yet there is miner involvement, as you rightly pointed out. Miners\n>> >>>> are needed to set the nVersion in the header. So when you say \"no\n>> >>>> additional bit is needed\", could you please be clearer as to what you\n>> >>>> mean? Do you mean that signaling of opposition in a block can be done\n>> >>>> without any \"additional bit\"? Or are you just saying that it is\n>> >>>> redundant to consider what miners might be opposing an upgrade?\n>> >>>> \n>> >>>> @Jorge\n>> >>>> \n>> >>>>> If different users want different incompatible things... there's no\n>> >>>>> way to avoid the split\n>> >>>> \n>> >>>> I agree. This happened with bcash, and that's fine. It was painful, but\n>> >>>> there were a significant amount of users that disagreed, and they have\n>> >>>> the chain they want now.\n>> >>>> \n>> >>>> But we generally all want to avoid a chain split when possible. Because\n>> >>>> chain splits have a cost, and that cost can be high, its likely that\n>> >>>> many users would rather choose the chain with the most support rather\n>> >>>> than choosing the chain with their preferred rules.\n>> >>>> \n>> >>>> However, the question here is: how do we estimate what fraction of users\n>> >>>> wants which rules? We don't have a divining rod to determine with\n>> >>>> certainty what users want. We can only make polls of various levels of\n>> >>>> inaccuracy. The methods bitcoin has been using is community discussion\n>> >>>> and social consensus estimation as well as miner signaling during the\n>> >>>> actual deployment period. Neither of these are perfect, but they are\n>> >>>> both reasonable enough mechanisms. However, because both of these\n>> >>>> mechanisms are very rough estimates of user sentiment, we need to\n>> >>>> consider the possibility that sometimes the estimate may be\n>> >>>> substantially inaccurate when we design deployment procedures. This\n>> >>>> inaccuracy is why we need multiple barriers in place for an upgrade, and\n>> >>>> why we need to have higher thresholds of success (require larger\n>> >>>> supermajorities in both consensus and miner signaling).\n>> >>>> \n>> >>>> Developers obviously care about bitcoin and have an incentive (personal\n>> >>>> and probably financial) to do it right. And miners have both an\n>> >>>> incentive to keep the system healthy, as well as an incentive to mine on\n>> >>>> the chain that the economic majority of users is using. But measuring\n>> >>>> the consensus of the bitcoin community can be extraordinarily difficult\n>> >>>> to do with consistent accuracy, and so I think miner signaling as it has\n>> >>>> been used as a second barrier to entry for an upgrade is quite\n>> >>>> appropriate.\n>> >>>> \n>> >>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org> wrote:\n>> >>>>> I have not objected to anyone splitting. As I said, a split is always\n>> >>>>> possible, and of course has been done on a large scale. It is only the\n>> >>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and the\n>> >>>>> implication that activation without hash power enforcement does not\n>> >>>>> create a split that I object to. People who know better should be\n>> >>>>> honest about it.\n>> >>>>> \n>> >>>>> Far too many people have been led to believe there is some sort of\n>> >>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed down\u201d).\n>> >>>>> There is only a choice between creating a split and hash power\n>> >>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n>> >>>>> unless enforced by majority hash power.\n>> >>>>> \n>> >>>>> The statements below are grossly misleading and need to be called out\n>> >>>>> as such so that people can actually make this decision you speak of.\n>> >>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n>> >>>>> question is only how to avoid a split. If one does not care he can\n>> >>>>> split at any time, no discussion required.\n>> >>>>> \n>> >>>>> e\n>> >>>>> \n>> >>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>>>> \n>> >>>>>> \ufeffIf different users want different incompatible things (enough on\n>> >>>>>> each side), there's no way to avoid the split. We shouldn't try to\n>> >>>>>> avoid such a split.\n>> >>>>>> Users decide the rules, not miners nor developers.\n>> >>>>>> \n>> >>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> >>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>> \n>> >>>>>>> Ultimately there is only one answer to this question. Get majority\n>> >>>>>>> hash power support.\n>> >>>>>>> \n>> >>>>>>> Soft fork enforcement is the same act as any other censorship\n>> >>>>>>> enforcement, the difference is only a question of what people want.\n>> >>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ. Bitcoin\n>> >>>>>>> resolves this question of conflicting wants, but it is not a\n>> >>>>>>> democracy, it\u2019s a market. One votes by trading.\n>> >>>>>>> \n>> >>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n>> >>>>>>> accomplished by mining (or paying others to do so). Anyone can mine,\n>> >>>>>>> so everyone gets a say. Mining is trading capital now for more\n>> >>>>>>> later. If enough people want to do that, they can enforce a soft\n>> >>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other people.\n>> >>>>>>> Anyone can mine, and that\u2019s your vote.\n>> >>>>>>> \n>> >>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But it\u2019s\n>> >>>>>>> dishonest to imply that one can do this and all others will surely\n>> >>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n>> >>>>>>> that has been shown to not always pay off.\n>> >>>>>>> \n>> >>>>>>> e\n>> >>>>>>> \n>> >>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org> wrote:\n>> >>>>>>>> \n>> >>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n>> >>>>>>>> \n>> >>>>>>>> Without majority hash power support, activation simply means you\n>> >>>>>>>> are off on a chain split. Anyone can of course split off from a\n>> >>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n>> >>>>>>>> is a bit of an empty claim.\n>> >>>>>>>> \n>> >>>>>>>> Nobody can stop a person from splitting. The relevant question is\n>> >>>>>>>> how to *prevent* a split. And activation without majority hash\n>> >>>>>>>> power certainly does not \u201censure\u201d this.\n>> >>>>>>>> \n>> >>>>>>>> e\n>> >>>>>>>> \n>> >>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n>> >>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>>> \n>> >>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n>> >>>>>>>>> entirely. They can still slow it down.\n>> >>>>>>>>> \n>> >>>>>>>>> It also already has the trinary state you seem to be describing\n>> >>>>>>>>> (although perhaps this could be better documented in the BIP):\n>> >>>>>>>>> users who oppose the softfork can and should treat the successful\n>> >>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they do\n>> >>>>>>>>> not follow a chain with the rules in force.\n>> >>>>>>>>> \n>> >>>>>>>>> No additional bit is needed, as softforks are coordinated between\n>> >>>>>>>>> users, NOT miners (who have no particular say in them, aside from\n>> >>>>>>>>> their role as also being users). The miner involvement is only out\n>> >>>>>>>>> of necessity (to set the bit in the header, which users coordinate\n>> >>>>>>>>> with) and potentially to accelerate activation by protecting\n>> >>>>>>>>> upgrade-lagging users.\n>> >>>>>>>>> \n>> >>>>>>>>> Luke\n>> >>>>>>>>> \n>> >>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>> >>>>>>>>>>> wrote:\n>> >>>>>>>>>> \n>> >>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n>> >>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n>> >>>>>>>>>> ways to solve the problems that both sides brought up. In short,\n>> >>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners failing\n>> >>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n>> >>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n>> >>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n>> >>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n>> >>>>>>>>>> have created a proposal\n>> >>>>>>>>>> <https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n>> >>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades that\n>> >>>>>>>>>> solve both problems.\n>> >>>>>>>>>> \n>> >>>>>>>>>> The proposal uses trinary version signaling rather than binary\n>> >>>>>>>>>> signaling. For any particular prospective soft fork upgrade, this\n>> >>>>>>>>>> allows for three signaling states:\n>> >>>>>>>>>> \n>> >>>>>>>>>> * Actively support the change.\n>> >>>>>>>>>> * Actively oppose the change.\n>> >>>>>>>>>> * Not signaling (neither support or oppose). This is the default\n>> >>>>>>>>>> state.\n>> >>>>>>>>>> \n>> >>>>>>>>>> Using this additional information, we can release non-contentious\n>> >>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n>> >>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n>> >>>>>>>>>> the change are incentivized to update their software to a version\n>> >>>>>>>>>> that can actively signal opposition to the change. The more\n>> >>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n>> >>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n>> >>>>>>>>>> the proposal, this chart shows how much support signaling would\n>> >>>>>>>>>> be necessary given a particular amount of active opposition\n>> >>>>>>>>>> signaling:\n>> >>>>>>>>>> \n>> >>>>>>>>>> [image: thresholdChart.png]\n>> >>>>>>>>>> If literally no one signals opposition, a 60% threshold should be\n>> >>>>>>>>>> relatively safe because it is a supermajority amount that is\n>> >>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n>> >>>>>>>>>> miners support the change today, its unlikely that less than a\n>> >>>>>>>>>> majority of miners would support the change a year or two from\n>> >>>>>>>>>> now), and if no one is signaling opposition, chances are that the\n>> >>>>>>>>>> vast majority of the other 40% would also eventually signal\n>> >>>>>>>>>> support.\n>> >>>>>>>>>> \n>> >>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if they\n>> >>>>>>>>>> actually oppose the change while at the same time allowing these\n>> >>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n>> >>>>>>>>>> activation much.\n>> >>>>>>>>>> \n>> >>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n>> >>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n>> >>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to discuss\n>> >>>>>>>>>> this will only delay things and cause contention again like it\n>> >>>>>>>>>> did with taproot.\n>> >>>>>>>>>> \n>> >>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n>> >>>>>>>>>> would appreciate any comments here, or written as github issues\n>> >>>>>>>>>> on the proposal repo itself.\n>> >>>>>>>>>> \n>> >>>>>>>>>> Thanks,\n>> >>>>>>>>>> BT\n>> >>>>>>>>> \n>> >>>>>>>>> _______________________________________________\n>> >>>>>>>>> bitcoin-dev mailing list\n>> >>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>>>>> \n>> >>>>>>> _______________________________________________\n>> >>>>>>> bitcoin-dev mailing list\n>> >>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> > \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/5c4c96b0/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-30T02:02:36",
                "message_text_only": "@Jorge\n\n>I don't think we should avoid splits at all costs.\n\nI absolutely agree that we shouldn't avoid splits at all costs. There are\nsome costs too high to pay to avoid a split. If an economic majority\nstarted wanting to increase bitcoin's blocksize to 1 GB next year, we\nshould absolutely hard fork away from that mess with a minority chain.\n\n>  I don't think we should avoid splits when possible,\n\nI want to see why exactly we disagree about avoiding chain splits \"when\npossible\". Are you really saying that we should just hard fork every time\ninstead of soft fork? Should we even bother to get widespread buy in at\nall, or should we just release the software, hardfork away, and let anyone\nthat wants to follow us follow us later? Are you not at all worried about\nthe costs associated with an increased orphan rate and reorg rate? Are you\nnot worried that an update might happen too fast and that a significant\nfraction of people that could have come along with us to the new update\nmight be left behind because they didn't have time to evaluate the\nchanged rules?\n\nDo you agree that, in a conversation about rule changes, some people want\nit their way no matter what and will hardfork to get the rules they want,\nand some people want it their way, but only if enough other people agree to\nfollow those rules too? Some people might want a rule change, but aren't\nwilling to follow, say, a 20% minority fork. Perhaps their personal cut-off\nis 40% or 50% or 75% or 90%. Do you agree those people exist?\n\nIf you do, then I don't understand why you disagree that we should avoid\nchain splits even \"when possible\". Maybe you could elaborate as to what you\nmean there.\n\n@Luke\n\nAre you in agreement with Jorge here that we should not even attempt to\navoid chain splits?\n\n> The only alternative to a split in the problematic scenarios are 1)\nconcede centralised miner control over the network, and 2) have\ninconsistent enforcement of rules by users who don't agree on what the\ncorrect rules are, again leading to centralised miner control over the\nnetwork.\n\nThere is not simply a binary \"do or do not\". There is also timing.\nNon-contentious changes can happen fast. Contentious changes need more time\nfor discussion, preparation, or coordination, even if the eventual outcome\nis the same. Do you disagree that timing issues can be\nimportant, that delays can be useful and help to avoid chain splits? Do you\nagree that miners have a (large) incentive to follow the economic majority?\nIs the goal here to do what the economic majority wants, or some other\ngroup? If so, do you think we have an accurate way of measuring what the\neconomic majority wants? Will that mechanism continue to be accurate into\nthe future?\n\nI'm asking these questions to try and figure out why we disagree here.\n\nOn Tue, Jun 29, 2021 at 12:44 PM Eric Voskuil <eric at voskuil.org> wrote:\n\n>\n> On Jun 29, 2021, at 12:28, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> \ufeff\n> \"Confirmation\" isn't needed for softforks.\n>\n>\n> All transactions require confirmation. Splitting does not change this.\n>\n> Softforks are not compatible without miner enforcement. So soft forking\n> without it has essentially the same effect as hard forking, the chain\n> splits.\n>\n> Miners controlling confirmation doesn't mean miners control the rules,\n> they never did.\n>\n>\n> Please define \u201ccontrol\u201d because these statements hinge on that word.\n> Nobody \u201ccontrols\u201d the rules of others, nor did anyone claim that to be the\n> case. Majority hash power does have the ability to determine what gets\n> confirmed. That is the central design principle of proof of work. It takes\n> that decision out of the hands of politicians and places it at the feet of\n> the market.\n>\n> Read section 11 of the bitcoin paper \"even with a majority of hashrate one\n> cannot arbitrarily change rules or forge signatures.\n>\n>\n> Never claimed that was the case. One can run any rules that one desires.\n>\n> You may say users chosing the rules is \"politicial\". Isn't miners deciding\n> them for users more political?\n>\n>\n> No, it\u2019s economic. The largest investment in mining (including highest\n> fees paid to incentivize it) determines censorship resistance.\n>\n> Whatever you call it, it is still how free software works: users decide\n> what to run.\n>\n>\n> A *person* can run whatever software they want. Money requires that others\n> agree (same rules), and to be money bitcoin requires confirmation.\n>\n> It is extremely disappointing to see how few developers seem to ubderstand\n> this, or even care about users deciding or miners not deciding the rules.\n>\n>\n> It\u2019s poorly understood because there are so many who should know better\n> making very misleading statements.\n>\n> How can we expect users to understand bitcoin when most developers don't\n> seem to understand it?\n>\n>\n> Clearly we cannot.\n>\n> It is really sad.\n>\n> On Tue, Jun 29, 2021, 19:17 Eric Voskuil <eric at voskuil.org> wrote:\n>\n>>\n>> > On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n>> >\n>> > \ufeffThe only alternative to a split in the problematic scenarios are 1)\n>> concede\n>> > centralised miner control over the network,\n>>\n>> Miners control confirmation, entirely.\n>>\n>> This is the nature of bitcoin. And merchants control validation,\n>> entirely. Anyone can be a miner or a merchant. Neither is inherently\n>> \u201cbetter\u201d than the other. The largest merchants are likely a handful of\n>> exchanges, likely at least as centralized as miners are pooled.\n>>\n>> Splitting does not change this.\n>>\n>> > and 2) have inconsistent\n>> > enforcement of rules by users who don't agree on what the correct rules\n>> are,\n>>\n>> There are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what\n>> network he chooses to participate in.\n>>\n>> > again leading to centralised miner control over the network.\n>>\n>> Leading to? Miners control confirmation, always. Whether that is\n>> centralized, just as with merchanting, is up to individuals.\n>>\n>> > In other words, in this context, accepting a split between disagreeing\n>> users\n>> > is the ONLY way Bitcoin can possibly continue as a decentralised\n>> currency.\n>>\n>> No, it is not. You are proposing splitting as the method of censorship\n>> resistance inherent to Bitcoin. Coordinating this split requires\n>> coordinated action. The whole point of bitcoin is coordinate that action\n>> based on mining (proof of work). Replacing that with a political process is\n>> just a reversion to political money.\n>>\n>> > Making that split as clean and well-defined as possible not only\n>> ensures the\n>> > best opportunity for both sides of the disagreement,\n>>\n>> Trivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s\n>> about how one gets others to go along with the new coin, or stay with the\n>> old. An entirely political process, which is clearly evident from the\n>> campaigns around such attempts.\n>>\n>> > but also minimises the\n>> > risk that the split occurs at all (since the \"losing\" side needs to\n>> concede,\n>> > rather than passively continue the disagreement ongoing after the\n>> attempted\n>> > protocol change).\n>>\n>> Nobody \u201cneeds to\u201d concede once a split has occurred, which is evident in\n>> existing splits.\n>>\n>> e\n>>\n>> > Luke\n>> >\n>> >\n>> >> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n>> >> At least we are now acknowledging that splitting is what it\u2019s about.\n>> That\u2019s\n>> >> progress.\n>> >>\n>> >> e\n>> >>\n>> >>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>\n>> >>> \ufeff\n>> >>> I think the option of \"permanent failure because miners veto\" should\n>> >>> actually be abandoned. No, I don't think we should avoid splits when\n>> >>> possible, I don't think we should avoid splits at all costs.\n>> >>>\n>> >>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>> >>>> @Luke\n>> >>>>\n>> >>>>> They can still slow it down.\n>> >>>>\n>> >>>> Absolutely. However I think that the option of permanent failure is\n>> >>>> important. It certainly would be ideal to ensure that enough bitcoin\n>> >>>> users support the upgrade *before* releasing it, however\n>> realistically\n>> >>>> this can never be more than an estimate, and estimates can sometimes\n>> be\n>> >>>> wildly wrong. It would be unfortunate if miners had a substantially\n>> >>>> different estimate of user support than the people putting in the\n>> work\n>> >>>> to release bitcoin upgrades. Even if upgrades are never released\n>> before\n>> >>>> it becomes clear that a large supermajority of users want the\n>> upgrade,\n>> >>>> if miners don't agree with the estimate a harmful chain split could\n>> >>>> occur. And I agree with Eric that the goal here is to prevent a chain\n>> >>>> split during an upgrade when possible. This includes permanent\n>> failure\n>> >>>> of an upgrade when there is unexpectedly large miner opposition.\n>> >>>>\n>> >>>> This of course does not prevent a UASF-style deployment to be done\n>> after\n>> >>>> an initial failure to deploy occurs. My proposal is essentially a\n>> >>>> mechanism to improve upon the speedy-trial idea, allowing for even\n>> >>>> speedier releases (than speedy trial) without adding additional risk\n>> of\n>> >>>> undesired chain splits.\n>> >>>>\n>> >>>>> [BIP8] already has the trinary state you seem to be describing\n>> >>>>\n>> >>>> It sounds like you're saying the trinary state of BIP8 is A. Follow\n>> the\n>> >>>> longest chain, B. Follow the upgrade chain, or C. follow the\n>> >>>> non-upgraded chain. I agree. However the trinary state in my\n>> proposal is\n>> >>>> materially different - it is the signaling itself that is trinary,\n>> not\n>> >>>> just which chain is being followed. This allows others to know and\n>> make\n>> >>>> programmatic decisions (in software) based on that signaling. I'm\n>> sure\n>> >>>> you can agree that does not exist in BIP8.\n>> >>>>\n>> >>>>> No additional bit is needed, as softforks are coordinated between\n>> >>>>> users, NOT miners\n>> >>>>\n>> >>>> And yet there is miner involvement, as you rightly pointed out.\n>> Miners\n>> >>>> are needed to set the nVersion in the header. So when you say \"no\n>> >>>> additional bit is needed\", could you please be clearer as to what you\n>> >>>> mean? Do you mean that signaling of opposition in a block can be done\n>> >>>> without any \"additional bit\"? Or are you just saying that it is\n>> >>>> redundant to consider what miners might be opposing an upgrade?\n>> >>>>\n>> >>>> @Jorge\n>> >>>>\n>> >>>>> If different users want different incompatible things... there's no\n>> >>>>> way to avoid the split\n>> >>>>\n>> >>>> I agree. This happened with bcash, and that's fine. It was painful,\n>> but\n>> >>>> there were a significant amount of users that disagreed, and they\n>> have\n>> >>>> the chain they want now.\n>> >>>>\n>> >>>> But we generally all want to avoid a chain split when possible.\n>> Because\n>> >>>> chain splits have a cost, and that cost can be high, its likely that\n>> >>>> many users would rather choose the chain with the most support rather\n>> >>>> than choosing the chain with their preferred rules.\n>> >>>>\n>> >>>> However, the question here is: how do we estimate what fraction of\n>> users\n>> >>>> wants which rules? We don't have a divining rod to determine with\n>> >>>> certainty what users want. We can only make polls of various levels\n>> of\n>> >>>> inaccuracy. The methods bitcoin has been using is community\n>> discussion\n>> >>>> and social consensus estimation as well as miner signaling during the\n>> >>>> actual deployment period. Neither of these are perfect, but they are\n>> >>>> both reasonable enough mechanisms. However, because both of these\n>> >>>> mechanisms are very rough estimates of user sentiment, we need to\n>> >>>> consider the possibility that sometimes the estimate may be\n>> >>>> substantially inaccurate when we design deployment procedures. This\n>> >>>> inaccuracy is why we need multiple barriers in place for an upgrade,\n>> and\n>> >>>> why we need to have higher thresholds of success (require larger\n>> >>>> supermajorities in both consensus and miner signaling).\n>> >>>>\n>> >>>> Developers obviously care about bitcoin and have an incentive\n>> (personal\n>> >>>> and probably financial) to do it right. And miners have both an\n>> >>>> incentive to keep the system healthy, as well as an incentive to\n>> mine on\n>> >>>> the chain that the economic majority of users is using. But measuring\n>> >>>> the consensus of the bitcoin community can be extraordinarily\n>> difficult\n>> >>>> to do with consistent accuracy, and so I think miner signaling as it\n>> has\n>> >>>> been used as a second barrier to entry for an upgrade is quite\n>> >>>> appropriate.\n>> >>>>\n>> >>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>> I have not objected to anyone splitting. As I said, a split is\n>> always\n>> >>>>> possible, and of course has been done on a large scale. It is only\n>> the\n>> >>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and\n>> the\n>> >>>>> implication that activation without hash power enforcement does not\n>> >>>>> create a split that I object to. People who know better should be\n>> >>>>> honest about it.\n>> >>>>>\n>> >>>>> Far too many people have been led to believe there is some sort of\n>> >>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed\n>> down\u201d).\n>> >>>>> There is only a choice between creating a split and hash power\n>> >>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n>> >>>>> unless enforced by majority hash power.\n>> >>>>>\n>> >>>>> The statements below are grossly misleading and need to be called\n>> out\n>> >>>>> as such so that people can actually make this decision you speak of.\n>> >>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n>> >>>>> question is only how to avoid a split. If one does not care he can\n>> >>>>> split at any time, no discussion required.\n>> >>>>>\n>> >>>>> e\n>> >>>>>\n>> >>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>>>>\n>> >>>>>> \ufeffIf different users want different incompatible things (enough on\n>> >>>>>> each side), there's no way to avoid the split. We shouldn't try to\n>> >>>>>> avoid such a split.\n>> >>>>>> Users decide the rules, not miners nor developers.\n>> >>>>>>\n>> >>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> >>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>\n>> >>>>>>> Ultimately there is only one answer to this question. Get majority\n>> >>>>>>> hash power support.\n>> >>>>>>>\n>> >>>>>>> Soft fork enforcement is the same act as any other censorship\n>> >>>>>>> enforcement, the difference is only a question of what people\n>> want.\n>> >>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ.\n>> Bitcoin\n>> >>>>>>> resolves this question of conflicting wants, but it is not a\n>> >>>>>>> democracy, it\u2019s a market. One votes by trading.\n>> >>>>>>>\n>> >>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n>> >>>>>>> accomplished by mining (or paying others to do so). Anyone can\n>> mine,\n>> >>>>>>> so everyone gets a say. Mining is trading capital now for more\n>> >>>>>>> later. If enough people want to do that, they can enforce a soft\n>> >>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other\n>> people.\n>> >>>>>>> Anyone can mine, and that\u2019s your vote.\n>> >>>>>>>\n>> >>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But\n>> it\u2019s\n>> >>>>>>> dishonest to imply that one can do this and all others will surely\n>> >>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n>> >>>>>>> that has been shown to not always pay off.\n>> >>>>>>>\n>> >>>>>>> e\n>> >>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>>>>>\n>> >>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n>> >>>>>>>>\n>> >>>>>>>> Without majority hash power support, activation simply means you\n>> >>>>>>>> are off on a chain split. Anyone can of course split off from a\n>> >>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n>> >>>>>>>> is a bit of an empty claim.\n>> >>>>>>>>\n>> >>>>>>>> Nobody can stop a person from splitting. The relevant question is\n>> >>>>>>>> how to *prevent* a split. And activation without majority hash\n>> >>>>>>>> power certainly does not \u201censure\u201d this.\n>> >>>>>>>>\n>> >>>>>>>> e\n>> >>>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n>> >>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>>>\n>> >>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n>> >>>>>>>>> entirely. They can still slow it down.\n>> >>>>>>>>>\n>> >>>>>>>>> It also already has the trinary state you seem to be describing\n>> >>>>>>>>> (although perhaps this could be better documented in the BIP):\n>> >>>>>>>>> users who oppose the softfork can and should treat the\n>> successful\n>> >>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they\n>> do\n>> >>>>>>>>> not follow a chain with the rules in force.\n>> >>>>>>>>>\n>> >>>>>>>>> No additional bit is needed, as softforks are coordinated\n>> between\n>> >>>>>>>>> users, NOT miners (who have no particular say in them, aside\n>> from\n>> >>>>>>>>> their role as also being users). The miner involvement is only\n>> out\n>> >>>>>>>>> of necessity (to set the bit in the header, which users\n>> coordinate\n>> >>>>>>>>> with) and potentially to accelerate activation by protecting\n>> >>>>>>>>> upgrade-lagging users.\n>> >>>>>>>>>\n>> >>>>>>>>> Luke\n>> >>>>>>>>>\n>> >>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>> >>>>>>>>>>> wrote:\n>> >>>>>>>>>>\n>> >>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n>> >>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n>> >>>>>>>>>> ways to solve the problems that both sides brought up. In\n>> short,\n>> >>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners\n>> failing\n>> >>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n>> >>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n>> >>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n>> >>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n>> >>>>>>>>>> have created a proposal\n>> >>>>>>>>>> <\n>> https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n>> >>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades\n>> that\n>> >>>>>>>>>> solve both problems.\n>> >>>>>>>>>>\n>> >>>>>>>>>> The proposal uses trinary version signaling rather than binary\n>> >>>>>>>>>> signaling. For any particular prospective soft fork upgrade,\n>> this\n>> >>>>>>>>>> allows for three signaling states:\n>> >>>>>>>>>>\n>> >>>>>>>>>> * Actively support the change.\n>> >>>>>>>>>> * Actively oppose the change.\n>> >>>>>>>>>> * Not signaling (neither support or oppose). This is the\n>> default\n>> >>>>>>>>>> state.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Using this additional information, we can release\n>> non-contentious\n>> >>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n>> >>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n>> >>>>>>>>>> the change are incentivized to update their software to a\n>> version\n>> >>>>>>>>>> that can actively signal opposition to the change. The more\n>> >>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n>> >>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n>> >>>>>>>>>> the proposal, this chart shows how much support signaling would\n>> >>>>>>>>>> be necessary given a particular amount of active opposition\n>> >>>>>>>>>> signaling:\n>> >>>>>>>>>>\n>> >>>>>>>>>> [image: thresholdChart.png]\n>> >>>>>>>>>> If literally no one signals opposition, a 60% threshold should\n>> be\n>> >>>>>>>>>> relatively safe because it is a supermajority amount that is\n>> >>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n>> >>>>>>>>>> miners support the change today, its unlikely that less than a\n>> >>>>>>>>>> majority of miners would support the change a year or two from\n>> >>>>>>>>>> now), and if no one is signaling opposition, chances are that\n>> the\n>> >>>>>>>>>> vast majority of the other 40% would also eventually signal\n>> >>>>>>>>>> support.\n>> >>>>>>>>>>\n>> >>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if\n>> they\n>> >>>>>>>>>> actually oppose the change while at the same time allowing\n>> these\n>> >>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n>> >>>>>>>>>> activation much.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n>> >>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n>> >>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to\n>> discuss\n>> >>>>>>>>>> this will only delay things and cause contention again like it\n>> >>>>>>>>>> did with taproot.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n>> >>>>>>>>>> would appreciate any comments here, or written as github issues\n>> >>>>>>>>>> on the proposal repo itself.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Thanks,\n>> >>>>>>>>>> BT\n>> >>>>>>>>>\n>> >>>>>>>>> _______________________________________________\n>> >>>>>>>>> bitcoin-dev mailing list\n>> >>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>>>>>\n>> >>>>>>> _______________________________________________\n>> >>>>>>> bitcoin-dev mailing list\n>> >>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/015cb80c/attachment-0001.html>"
            },
            {
                "author": "eric at voskuil.org",
                "date": "2021-06-30T08:55:47",
                "message_text_only": "All good questions.\n\n \n\n> Is the goal here to do what the economic majority wants, or some other group? If so, do you think we have an accurate way of measuring what the economic majority wants?\n\n \n\nIt\u2019s important that people understand that \u201ceconomic\u201d does not refer to people interested in, HODLing, coding, or selling Bitcoin. It is only those who are *presently accepting* it. We refer to these as \u201ceconomic nodes\u201d. Those are the people with the economic power to reject coin that they consider invalid. Only their validation is of any economic consequence in the event of a split. I see no reason to assume that the economy is any less centralized than mining is pooled. Today the support of the economy would be best measured by meeting with exchange operators. If they did not go along, any unenforced soft fork (split) would isolate everyone who thought they could continue to trade their coin on exchanges.\n\n \n\nI\u2019d also question the use of the term \u201cmajority\u201d. It applies to hash power, by design, but not to the economy. A split of any size is possible, requiring no majority. All it requires is other people to trade with.\n\n \n\nExchanges are highly regulated and compliant institutions. Mining operations are heavily pooled. Neither of these is inherently better than the other. Everyone can have a say by being a miner or being a merchant. Subeconomies can split, majority hash power can censor (which is the exact mechanism of soft fork enforcement). These ideas are straightforward and hardly worthy of debate. The interesting question is how one gets others to go along with his new coin. Make no mistake, any rule change (soft or hard) is a new coin. If hash power doesn\u2019t enforce the new rules of a soft fork, the chain is split just as if it was a hard fork.\n\n \n\nI\u2019m sure people will continue to try and devise ways to figure out who wants to come along, to try and convince people (including exchanges and miners) to do so, to reassure them that everyone else will \u201chave to\u201d, and to mislead them about the actual behavior and risks. We\u2019ve seen permanent splits, and we\u2019ve seen hash power enforced soft forks. We\u2019re likely to see more of both. But as core devs we have a responsibility to inform people, honestly, and let them decide. My only beef with this whole process has been that a widespread belief had formed, supported by far too many core devs (and even embedded in the text of deployed BIPs), that soft forks are inherently \u201cbackward compatible\u201d. This is unequivocally not true. The only such compatibility is majority hash power enforcement of a soft fork. This is not a matter of opinion, it\u2019s the core innovation of Bitcoin. Proof of Work settles the question of who has authority to order transactions. Majority hash power has that authority. Merchants can split again and again, but their miners will still have that authority. If one wants a say, one can mine.\n\n \n\ne\n\n \n\nFrom: Billy Tetrud <billy.tetrud at gmail.com> \nSent: Tuesday, June 29, 2021 7:03 PM\nTo: Eric Voskuil <eric at voskuil.org>\nCc: Jorge Tim\u00f3n <jtimon at jtimon.cc>; Luke Dashjr <luke at dashjr.org>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Trinary Version Signaling for softfork upgrades\n\n \n\n@Jorge\n\n \n\n>I don't think we should avoid splits at all costs.\n\n \n\nI absolutely agree that we shouldn't avoid splits at all costs. There are some costs too high to pay to avoid a split. If an economic majority started wanting to increase bitcoin's blocksize to 1 GB next year, we should absolutely hard fork away from that mess with a minority chain. \n\n \n\n>  I don't think we should avoid splits when possible, \n\n \n\nI want to see why exactly we disagree about avoiding chain splits \"when possible\". Are you really saying that we should just hard fork every time instead of soft fork? Should we even bother to get widespread buy in at all, or should we just release the software, hardfork away, and let anyone that wants to follow us follow us later? Are you not at all worried about the costs associated with an increased orphan rate and reorg rate? Are you not worried that an update might happen too fast and that a significant fraction of people that could have come along with us to the new update might be left behind because they didn't have time to evaluate the changed rules?\n\n \n\nDo you agree that, in a conversation about rule changes, some people want it their way no matter what and will hardfork to get the rules they want, and some people want it their way, but only if enough other people agree to follow those rules too? Some people might want a rule change, but aren't willing to follow, say, a 20% minority fork. Perhaps their personal cut-off is 40% or 50% or 75% or 90%. Do you agree those people exist? \n\n \n\nIf you do, then I don't understand why you disagree that we should avoid chain splits even \"when possible\". Maybe you could elaborate as to what you mean there. \n\n \n\n@Luke\n\n \n\nAre you in agreement with Jorge here that we should not even attempt to avoid chain splits? \n\n \n\n> The only alternative to a split in the problematic scenarios are 1) concede centralised miner control over the network, and 2) have inconsistent enforcement of rules by users who don't agree on what the correct rules are, again leading to centralised miner control over the network.\n\n \n\nThere is not simply a binary \"do or do not\". There is also timing. Non-contentious changes can happen fast. Contentious changes need more time for discussion, preparation, or coordination, even if the eventual outcome is the same. Do you disagree that timing issues can be important, that delays can be useful and help to avoid chain splits? Do you agree that miners have a (large) incentive to follow the economic majority? Is the goal here to do what the economic majority wants, or some other group? If so, do you think we have an accurate way of measuring what the economic majority wants? Will that mechanism continue to be accurate into the future? \n\n \n\nI'm asking these questions to try and figure out why we disagree here.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/cdb30f7e/attachment.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2021-06-30T06:39:41",
                "message_text_only": "> Majority hash power does have the ability to determine what gets\nconfirmed.\n\nMiners don\u2019t have the ability to decide whether a block is valid.\n\nHash power is only recognized as such if it is used for creating a valid\nblock, i.e., a block that strictly follows all the rules as set by the node\nsoftware that transacting users choose to run.\n\nIf suddenly 70% of all hash power decided to start mining blocks that are\ninvalid according to the rules set in the users\u2019 software, then these\ninvalid blocks will be disregarded. From a user perspective, 70% of all\nhash power will seem to have disappeared.\n\nIn short, users define what is Bitcoin, not miners. This is fundamental to\nbeing decentralized.\n\n\n\nOn Tue, 29 Jun 2021 at 23:17, Eric Voskuil via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> On Jun 29, 2021, at 12:28, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> \ufeff\n> \"Confirmation\" isn't needed for softforks.\n>\n>\n> All transactions require confirmation. Splitting does not change this.\n>\n> Softforks are not compatible without miner enforcement. So soft forking\n> without it has essentially the same effect as hard forking, the chain\n> splits.\n>\n> Miners controlling confirmation doesn't mean miners control the rules,\n> they never did.\n>\n>\n> Please define \u201ccontrol\u201d because these statements hinge on that word.\n> Nobody \u201ccontrols\u201d the rules of others, nor did anyone claim that to be the\n> case. Majority hash power does have the ability to determine what gets\n> confirmed. That is the central design principle of proof of work. It takes\n> that decision out of the hands of politicians and places it at the feet of\n> the market.\n>\n> Read section 11 of the bitcoin paper \"even with a majority of hashrate one\n> cannot arbitrarily change rules or forge signatures.\n>\n>\n> Never claimed that was the case. One can run any rules that one desires.\n>\n> You may say users chosing the rules is \"politicial\". Isn't miners deciding\n> them for users more political?\n>\n>\n> No, it\u2019s economic. The largest investment in mining (including highest\n> fees paid to incentivize it) determines censorship resistance.\n>\n> Whatever you call it, it is still how free software works: users decide\n> what to run.\n>\n>\n> A *person* can run whatever software they want. Money requires that others\n> agree (same rules), and to be money bitcoin requires confirmation.\n>\n> It is extremely disappointing to see how few developers seem to ubderstand\n> this, or even care about users deciding or miners not deciding the rules.\n>\n>\n> It\u2019s poorly understood because there are so many who should know better\n> making very misleading statements.\n>\n> How can we expect users to understand bitcoin when most developers don't\n> seem to understand it?\n>\n>\n> Clearly we cannot.\n>\n> It is really sad.\n>\n> On Tue, Jun 29, 2021, 19:17 Eric Voskuil <eric at voskuil.org> wrote:\n>\n>>\n>> > On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n>> >\n>> > \ufeffThe only alternative to a split in the problematic scenarios are 1)\n>> concede\n>> > centralised miner control over the network,\n>>\n>> Miners control confirmation, entirely.\n>>\n>> This is the nature of bitcoin. And merchants control validation,\n>> entirely. Anyone can be a miner or a merchant. Neither is inherently\n>> \u201cbetter\u201d than the other. The largest merchants are likely a handful of\n>> exchanges, likely at least as centralized as miners are pooled.\n>>\n>> Splitting does not change this.\n>>\n>> > and 2) have inconsistent\n>> > enforcement of rules by users who don't agree on what the correct rules\n>> are,\n>>\n>> There are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what\n>> network he chooses to participate in.\n>>\n>> > again leading to centralised miner control over the network.\n>>\n>> Leading to? Miners control confirmation, always. Whether that is\n>> centralized, just as with merchanting, is up to individuals.\n>>\n>> > In other words, in this context, accepting a split between disagreeing\n>> users\n>> > is the ONLY way Bitcoin can possibly continue as a decentralised\n>> currency.\n>>\n>> No, it is not. You are proposing splitting as the method of censorship\n>> resistance inherent to Bitcoin. Coordinating this split requires\n>> coordinated action. The whole point of bitcoin is coordinate that action\n>> based on mining (proof of work). Replacing that with a political process is\n>> just a reversion to political money.\n>>\n>> > Making that split as clean and well-defined as possible not only\n>> ensures the\n>> > best opportunity for both sides of the disagreement,\n>>\n>> Trivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s\n>> about how one gets others to go along with the new coin, or stay with the\n>> old. An entirely political process, which is clearly evident from the\n>> campaigns around such attempts.\n>>\n>> > but also minimises the\n>> > risk that the split occurs at all (since the \"losing\" side needs to\n>> concede,\n>> > rather than passively continue the disagreement ongoing after the\n>> attempted\n>> > protocol change).\n>>\n>> Nobody \u201cneeds to\u201d concede once a split has occurred, which is evident in\n>> existing splits.\n>>\n>> e\n>>\n>> > Luke\n>> >\n>> >\n>> >> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n>> >> At least we are now acknowledging that splitting is what it\u2019s about.\n>> That\u2019s\n>> >> progress.\n>> >>\n>> >> e\n>> >>\n>> >>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>\n>> >>> \ufeff\n>> >>> I think the option of \"permanent failure because miners veto\" should\n>> >>> actually be abandoned. No, I don't think we should avoid splits when\n>> >>> possible, I don't think we should avoid splits at all costs.\n>> >>>\n>> >>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>> >>>> @Luke\n>> >>>>\n>> >>>>> They can still slow it down.\n>> >>>>\n>> >>>> Absolutely. However I think that the option of permanent failure is\n>> >>>> important. It certainly would be ideal to ensure that enough bitcoin\n>> >>>> users support the upgrade *before* releasing it, however\n>> realistically\n>> >>>> this can never be more than an estimate, and estimates can sometimes\n>> be\n>> >>>> wildly wrong. It would be unfortunate if miners had a substantially\n>> >>>> different estimate of user support than the people putting in the\n>> work\n>> >>>> to release bitcoin upgrades. Even if upgrades are never released\n>> before\n>> >>>> it becomes clear that a large supermajority of users want the\n>> upgrade,\n>> >>>> if miners don't agree with the estimate a harmful chain split could\n>> >>>> occur. And I agree with Eric that the goal here is to prevent a chain\n>> >>>> split during an upgrade when possible. This includes permanent\n>> failure\n>> >>>> of an upgrade when there is unexpectedly large miner opposition.\n>> >>>>\n>> >>>> This of course does not prevent a UASF-style deployment to be done\n>> after\n>> >>>> an initial failure to deploy occurs. My proposal is essentially a\n>> >>>> mechanism to improve upon the speedy-trial idea, allowing for even\n>> >>>> speedier releases (than speedy trial) without adding additional risk\n>> of\n>> >>>> undesired chain splits.\n>> >>>>\n>> >>>>> [BIP8] already has the trinary state you seem to be describing\n>> >>>>\n>> >>>> It sounds like you're saying the trinary state of BIP8 is A. Follow\n>> the\n>> >>>> longest chain, B. Follow the upgrade chain, or C. follow the\n>> >>>> non-upgraded chain. I agree. However the trinary state in my\n>> proposal is\n>> >>>> materially different - it is the signaling itself that is trinary,\n>> not\n>> >>>> just which chain is being followed. This allows others to know and\n>> make\n>> >>>> programmatic decisions (in software) based on that signaling. I'm\n>> sure\n>> >>>> you can agree that does not exist in BIP8.\n>> >>>>\n>> >>>>> No additional bit is needed, as softforks are coordinated between\n>> >>>>> users, NOT miners\n>> >>>>\n>> >>>> And yet there is miner involvement, as you rightly pointed out.\n>> Miners\n>> >>>> are needed to set the nVersion in the header. So when you say \"no\n>> >>>> additional bit is needed\", could you please be clearer as to what you\n>> >>>> mean? Do you mean that signaling of opposition in a block can be done\n>> >>>> without any \"additional bit\"? Or are you just saying that it is\n>> >>>> redundant to consider what miners might be opposing an upgrade?\n>> >>>>\n>> >>>> @Jorge\n>> >>>>\n>> >>>>> If different users want different incompatible things... there's no\n>> >>>>> way to avoid the split\n>> >>>>\n>> >>>> I agree. This happened with bcash, and that's fine. It was painful,\n>> but\n>> >>>> there were a significant amount of users that disagreed, and they\n>> have\n>> >>>> the chain they want now.\n>> >>>>\n>> >>>> But we generally all want to avoid a chain split when possible.\n>> Because\n>> >>>> chain splits have a cost, and that cost can be high, its likely that\n>> >>>> many users would rather choose the chain with the most support rather\n>> >>>> than choosing the chain with their preferred rules.\n>> >>>>\n>> >>>> However, the question here is: how do we estimate what fraction of\n>> users\n>> >>>> wants which rules? We don't have a divining rod to determine with\n>> >>>> certainty what users want. We can only make polls of various levels\n>> of\n>> >>>> inaccuracy. The methods bitcoin has been using is community\n>> discussion\n>> >>>> and social consensus estimation as well as miner signaling during the\n>> >>>> actual deployment period. Neither of these are perfect, but they are\n>> >>>> both reasonable enough mechanisms. However, because both of these\n>> >>>> mechanisms are very rough estimates of user sentiment, we need to\n>> >>>> consider the possibility that sometimes the estimate may be\n>> >>>> substantially inaccurate when we design deployment procedures. This\n>> >>>> inaccuracy is why we need multiple barriers in place for an upgrade,\n>> and\n>> >>>> why we need to have higher thresholds of success (require larger\n>> >>>> supermajorities in both consensus and miner signaling).\n>> >>>>\n>> >>>> Developers obviously care about bitcoin and have an incentive\n>> (personal\n>> >>>> and probably financial) to do it right. And miners have both an\n>> >>>> incentive to keep the system healthy, as well as an incentive to\n>> mine on\n>> >>>> the chain that the economic majority of users is using. But measuring\n>> >>>> the consensus of the bitcoin community can be extraordinarily\n>> difficult\n>> >>>> to do with consistent accuracy, and so I think miner signaling as it\n>> has\n>> >>>> been used as a second barrier to entry for an upgrade is quite\n>> >>>> appropriate.\n>> >>>>\n>> >>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>> I have not objected to anyone splitting. As I said, a split is\n>> always\n>> >>>>> possible, and of course has been done on a large scale. It is only\n>> the\n>> >>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and\n>> the\n>> >>>>> implication that activation without hash power enforcement does not\n>> >>>>> create a split that I object to. People who know better should be\n>> >>>>> honest about it.\n>> >>>>>\n>> >>>>> Far too many people have been led to believe there is some sort of\n>> >>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed\n>> down\u201d).\n>> >>>>> There is only a choice between creating a split and hash power\n>> >>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n>> >>>>> unless enforced by majority hash power.\n>> >>>>>\n>> >>>>> The statements below are grossly misleading and need to be called\n>> out\n>> >>>>> as such so that people can actually make this decision you speak of.\n>> >>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n>> >>>>> question is only how to avoid a split. If one does not care he can\n>> >>>>> split at any time, no discussion required.\n>> >>>>>\n>> >>>>> e\n>> >>>>>\n>> >>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>>>>\n>> >>>>>> \ufeffIf different users want different incompatible things (enough on\n>> >>>>>> each side), there's no way to avoid the split. We shouldn't try to\n>> >>>>>> avoid such a split.\n>> >>>>>> Users decide the rules, not miners nor developers.\n>> >>>>>>\n>> >>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> >>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>\n>> >>>>>>> Ultimately there is only one answer to this question. Get majority\n>> >>>>>>> hash power support.\n>> >>>>>>>\n>> >>>>>>> Soft fork enforcement is the same act as any other censorship\n>> >>>>>>> enforcement, the difference is only a question of what people\n>> want.\n>> >>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ.\n>> Bitcoin\n>> >>>>>>> resolves this question of conflicting wants, but it is not a\n>> >>>>>>> democracy, it\u2019s a market. One votes by trading.\n>> >>>>>>>\n>> >>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n>> >>>>>>> accomplished by mining (or paying others to do so). Anyone can\n>> mine,\n>> >>>>>>> so everyone gets a say. Mining is trading capital now for more\n>> >>>>>>> later. If enough people want to do that, they can enforce a soft\n>> >>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other\n>> people.\n>> >>>>>>> Anyone can mine, and that\u2019s your vote.\n>> >>>>>>>\n>> >>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But\n>> it\u2019s\n>> >>>>>>> dishonest to imply that one can do this and all others will surely\n>> >>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n>> >>>>>>> that has been shown to not always pay off.\n>> >>>>>>>\n>> >>>>>>> e\n>> >>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>>>>>\n>> >>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n>> >>>>>>>>\n>> >>>>>>>> Without majority hash power support, activation simply means you\n>> >>>>>>>> are off on a chain split. Anyone can of course split off from a\n>> >>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n>> >>>>>>>> is a bit of an empty claim.\n>> >>>>>>>>\n>> >>>>>>>> Nobody can stop a person from splitting. The relevant question is\n>> >>>>>>>> how to *prevent* a split. And activation without majority hash\n>> >>>>>>>> power certainly does not \u201censure\u201d this.\n>> >>>>>>>>\n>> >>>>>>>> e\n>> >>>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n>> >>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>>>\n>> >>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n>> >>>>>>>>> entirely. They can still slow it down.\n>> >>>>>>>>>\n>> >>>>>>>>> It also already has the trinary state you seem to be describing\n>> >>>>>>>>> (although perhaps this could be better documented in the BIP):\n>> >>>>>>>>> users who oppose the softfork can and should treat the\n>> successful\n>> >>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they\n>> do\n>> >>>>>>>>> not follow a chain with the rules in force.\n>> >>>>>>>>>\n>> >>>>>>>>> No additional bit is needed, as softforks are coordinated\n>> between\n>> >>>>>>>>> users, NOT miners (who have no particular say in them, aside\n>> from\n>> >>>>>>>>> their role as also being users). The miner involvement is only\n>> out\n>> >>>>>>>>> of necessity (to set the bit in the header, which users\n>> coordinate\n>> >>>>>>>>> with) and potentially to accelerate activation by protecting\n>> >>>>>>>>> upgrade-lagging users.\n>> >>>>>>>>>\n>> >>>>>>>>> Luke\n>> >>>>>>>>>\n>> >>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>> >>>>>>>>>>> wrote:\n>> >>>>>>>>>>\n>> >>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n>> >>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n>> >>>>>>>>>> ways to solve the problems that both sides brought up. In\n>> short,\n>> >>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners\n>> failing\n>> >>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n>> >>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n>> >>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n>> >>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n>> >>>>>>>>>> have created a proposal\n>> >>>>>>>>>> <\n>> https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n>> >>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades\n>> that\n>> >>>>>>>>>> solve both problems.\n>> >>>>>>>>>>\n>> >>>>>>>>>> The proposal uses trinary version signaling rather than binary\n>> >>>>>>>>>> signaling. For any particular prospective soft fork upgrade,\n>> this\n>> >>>>>>>>>> allows for three signaling states:\n>> >>>>>>>>>>\n>> >>>>>>>>>> * Actively support the change.\n>> >>>>>>>>>> * Actively oppose the change.\n>> >>>>>>>>>> * Not signaling (neither support or oppose). This is the\n>> default\n>> >>>>>>>>>> state.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Using this additional information, we can release\n>> non-contentious\n>> >>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n>> >>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n>> >>>>>>>>>> the change are incentivized to update their software to a\n>> version\n>> >>>>>>>>>> that can actively signal opposition to the change. The more\n>> >>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n>> >>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n>> >>>>>>>>>> the proposal, this chart shows how much support signaling would\n>> >>>>>>>>>> be necessary given a particular amount of active opposition\n>> >>>>>>>>>> signaling:\n>> >>>>>>>>>>\n>> >>>>>>>>>> [image: thresholdChart.png]\n>> >>>>>>>>>> If literally no one signals opposition, a 60% threshold should\n>> be\n>> >>>>>>>>>> relatively safe because it is a supermajority amount that is\n>> >>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n>> >>>>>>>>>> miners support the change today, its unlikely that less than a\n>> >>>>>>>>>> majority of miners would support the change a year or two from\n>> >>>>>>>>>> now), and if no one is signaling opposition, chances are that\n>> the\n>> >>>>>>>>>> vast majority of the other 40% would also eventually signal\n>> >>>>>>>>>> support.\n>> >>>>>>>>>>\n>> >>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if\n>> they\n>> >>>>>>>>>> actually oppose the change while at the same time allowing\n>> these\n>> >>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n>> >>>>>>>>>> activation much.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n>> >>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n>> >>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to\n>> discuss\n>> >>>>>>>>>> this will only delay things and cause contention again like it\n>> >>>>>>>>>> did with taproot.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n>> >>>>>>>>>> would appreciate any comments here, or written as github issues\n>> >>>>>>>>>> on the proposal repo itself.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Thanks,\n>> >>>>>>>>>> BT\n>> >>>>>>>>>\n>> >>>>>>>>> _______________________________________________\n>> >>>>>>>>> bitcoin-dev mailing list\n>> >>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>>>>>\n>> >>>>>>> _______________________________________________\n>> >>>>>>> bitcoin-dev mailing list\n>> >>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/9c14659c/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-06-30T09:16:51",
                "message_text_only": "\"Softforks arentcompatible without miner enforcement\"\nCompatible with what?\n\"Softforks without miner support cause splits\".\nNo, what causes splits are 3 things:\n\n1) bugs\n2) coordination mistakes\n3) people wanting different rules.\n\nLet me give an example. Let's say all users want change A.\n\nOnly 60% miners want it.\nWhen it activates with LOT=true, will this cause a split?\n\nWell, not necessarily. Since all users will be on the chain with change A,\nall miners will quickly abandon that useless chain and start building on\nthe one that actually pays them.\n\nDo you agree that's what would happen in this example given the assumptions?\n\n\nOn Tue, Jun 29, 2021, 20:44 Eric Voskuil <eric at voskuil.org> wrote:\n\n>\n> On Jun 29, 2021, at 12:28, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> \ufeff\n> \"Confirmation\" isn't needed for softforks.\n>\n>\n> All transactions require confirmation. Splitting does not change this.\n>\n> Softforks are not compatible without miner enforcement. So soft forking\n> without it has essentially the same effect as hard forking, the chain\n> splits.\n>\n> Miners controlling confirmation doesn't mean miners control the rules,\n> they never did.\n>\n>\n> Please define \u201ccontrol\u201d because these statements hinge on that word.\n> Nobody \u201ccontrols\u201d the rules of others, nor did anyone claim that to be the\n> case. Majority hash power does have the ability to determine what gets\n> confirmed. That is the central design principle of proof of work. It takes\n> that decision out of the hands of politicians and places it at the feet of\n> the market.\n>\n> Read section 11 of the bitcoin paper \"even with a majority of hashrate one\n> cannot arbitrarily change rules or forge signatures.\n>\n>\n> Never claimed that was the case. One can run any rules that one desires.\n>\n> You may say users chosing the rules is \"politicial\". Isn't miners deciding\n> them for users more political?\n>\n>\n> No, it\u2019s economic. The largest investment in mining (including highest\n> fees paid to incentivize it) determines censorship resistance.\n>\n> Whatever you call it, it is still how free software works: users decide\n> what to run.\n>\n>\n> A *person* can run whatever software they want. Money requires that others\n> agree (same rules), and to be money bitcoin requires confirmation.\n>\n> It is extremely disappointing to see how few developers seem to ubderstand\n> this, or even care about users deciding or miners not deciding the rules.\n>\n>\n> It\u2019s poorly understood because there are so many who should know better\n> making very misleading statements.\n>\n> How can we expect users to understand bitcoin when most developers don't\n> seem to understand it?\n>\n>\n> Clearly we cannot.\n>\n> It is really sad.\n>\n> On Tue, Jun 29, 2021, 19:17 Eric Voskuil <eric at voskuil.org> wrote:\n>\n>>\n>> > On Jun 29, 2021, at 10:55, Luke Dashjr <luke at dashjr.org> wrote:\n>> >\n>> > \ufeffThe only alternative to a split in the problematic scenarios are 1)\n>> concede\n>> > centralised miner control over the network,\n>>\n>> Miners control confirmation, entirely.\n>>\n>> This is the nature of bitcoin. And merchants control validation,\n>> entirely. Anyone can be a miner or a merchant. Neither is inherently\n>> \u201cbetter\u201d than the other. The largest merchants are likely a handful of\n>> exchanges, likely at least as centralized as miners are pooled.\n>>\n>> Splitting does not change this.\n>>\n>> > and 2) have inconsistent\n>> > enforcement of rules by users who don't agree on what the correct rules\n>> are,\n>>\n>> There are no \u201ccorrect\u201d rules. Whatever rules one enforces determine what\n>> network he chooses to participate in.\n>>\n>> > again leading to centralised miner control over the network.\n>>\n>> Leading to? Miners control confirmation, always. Whether that is\n>> centralized, just as with merchanting, is up to individuals.\n>>\n>> > In other words, in this context, accepting a split between disagreeing\n>> users\n>> > is the ONLY way Bitcoin can possibly continue as a decentralised\n>> currency.\n>>\n>> No, it is not. You are proposing splitting as the method of censorship\n>> resistance inherent to Bitcoin. Coordinating this split requires\n>> coordinated action. The whole point of bitcoin is coordinate that action\n>> based on mining (proof of work). Replacing that with a political process is\n>> just a reversion to political money.\n>>\n>> > Making that split as clean and well-defined as possible not only\n>> ensures the\n>> > best opportunity for both sides of the disagreement,\n>>\n>> Trivially accomplished, just change a rule. This isn\u2019t about that. It\u2019s\n>> about how one gets others to go along with the new coin, or stay with the\n>> old. An entirely political process, which is clearly evident from the\n>> campaigns around such attempts.\n>>\n>> > but also minimises the\n>> > risk that the split occurs at all (since the \"losing\" side needs to\n>> concede,\n>> > rather than passively continue the disagreement ongoing after the\n>> attempted\n>> > protocol change).\n>>\n>> Nobody \u201cneeds to\u201d concede once a split has occurred, which is evident in\n>> existing splits.\n>>\n>> e\n>>\n>> > Luke\n>> >\n>> >\n>> >> On Tuesday 29 June 2021 08:44:56 Eric Voskuil wrote:\n>> >> At least we are now acknowledging that splitting is what it\u2019s about.\n>> That\u2019s\n>> >> progress.\n>> >>\n>> >> e\n>> >>\n>> >>>> On Jun 29, 2021, at 01:32, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>\n>> >>> \ufeff\n>> >>> I think the option of \"permanent failure because miners veto\" should\n>> >>> actually be abandoned. No, I don't think we should avoid splits when\n>> >>> possible, I don't think we should avoid splits at all costs.\n>> >>>\n>> >>>> On Sun, Jun 27, 2021, 19:12 Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>> >>>> @Luke\n>> >>>>\n>> >>>>> They can still slow it down.\n>> >>>>\n>> >>>> Absolutely. However I think that the option of permanent failure is\n>> >>>> important. It certainly would be ideal to ensure that enough bitcoin\n>> >>>> users support the upgrade *before* releasing it, however\n>> realistically\n>> >>>> this can never be more than an estimate, and estimates can sometimes\n>> be\n>> >>>> wildly wrong. It would be unfortunate if miners had a substantially\n>> >>>> different estimate of user support than the people putting in the\n>> work\n>> >>>> to release bitcoin upgrades. Even if upgrades are never released\n>> before\n>> >>>> it becomes clear that a large supermajority of users want the\n>> upgrade,\n>> >>>> if miners don't agree with the estimate a harmful chain split could\n>> >>>> occur. And I agree with Eric that the goal here is to prevent a chain\n>> >>>> split during an upgrade when possible. This includes permanent\n>> failure\n>> >>>> of an upgrade when there is unexpectedly large miner opposition.\n>> >>>>\n>> >>>> This of course does not prevent a UASF-style deployment to be done\n>> after\n>> >>>> an initial failure to deploy occurs. My proposal is essentially a\n>> >>>> mechanism to improve upon the speedy-trial idea, allowing for even\n>> >>>> speedier releases (than speedy trial) without adding additional risk\n>> of\n>> >>>> undesired chain splits.\n>> >>>>\n>> >>>>> [BIP8] already has the trinary state you seem to be describing\n>> >>>>\n>> >>>> It sounds like you're saying the trinary state of BIP8 is A. Follow\n>> the\n>> >>>> longest chain, B. Follow the upgrade chain, or C. follow the\n>> >>>> non-upgraded chain. I agree. However the trinary state in my\n>> proposal is\n>> >>>> materially different - it is the signaling itself that is trinary,\n>> not\n>> >>>> just which chain is being followed. This allows others to know and\n>> make\n>> >>>> programmatic decisions (in software) based on that signaling. I'm\n>> sure\n>> >>>> you can agree that does not exist in BIP8.\n>> >>>>\n>> >>>>> No additional bit is needed, as softforks are coordinated between\n>> >>>>> users, NOT miners\n>> >>>>\n>> >>>> And yet there is miner involvement, as you rightly pointed out.\n>> Miners\n>> >>>> are needed to set the nVersion in the header. So when you say \"no\n>> >>>> additional bit is needed\", could you please be clearer as to what you\n>> >>>> mean? Do you mean that signaling of opposition in a block can be done\n>> >>>> without any \"additional bit\"? Or are you just saying that it is\n>> >>>> redundant to consider what miners might be opposing an upgrade?\n>> >>>>\n>> >>>> @Jorge\n>> >>>>\n>> >>>>> If different users want different incompatible things... there's no\n>> >>>>> way to avoid the split\n>> >>>>\n>> >>>> I agree. This happened with bcash, and that's fine. It was painful,\n>> but\n>> >>>> there were a significant amount of users that disagreed, and they\n>> have\n>> >>>> the chain they want now.\n>> >>>>\n>> >>>> But we generally all want to avoid a chain split when possible.\n>> Because\n>> >>>> chain splits have a cost, and that cost can be high, its likely that\n>> >>>> many users would rather choose the chain with the most support rather\n>> >>>> than choosing the chain with their preferred rules.\n>> >>>>\n>> >>>> However, the question here is: how do we estimate what fraction of\n>> users\n>> >>>> wants which rules? We don't have a divining rod to determine with\n>> >>>> certainty what users want. We can only make polls of various levels\n>> of\n>> >>>> inaccuracy. The methods bitcoin has been using is community\n>> discussion\n>> >>>> and social consensus estimation as well as miner signaling during the\n>> >>>> actual deployment period. Neither of these are perfect, but they are\n>> >>>> both reasonable enough mechanisms. However, because both of these\n>> >>>> mechanisms are very rough estimates of user sentiment, we need to\n>> >>>> consider the possibility that sometimes the estimate may be\n>> >>>> substantially inaccurate when we design deployment procedures. This\n>> >>>> inaccuracy is why we need multiple barriers in place for an upgrade,\n>> and\n>> >>>> why we need to have higher thresholds of success (require larger\n>> >>>> supermajorities in both consensus and miner signaling).\n>> >>>>\n>> >>>> Developers obviously care about bitcoin and have an incentive\n>> (personal\n>> >>>> and probably financial) to do it right. And miners have both an\n>> >>>> incentive to keep the system healthy, as well as an incentive to\n>> mine on\n>> >>>> the chain that the economic majority of users is using. But measuring\n>> >>>> the consensus of the bitcoin community can be extraordinarily\n>> difficult\n>> >>>> to do with consistent accuracy, and so I think miner signaling as it\n>> has\n>> >>>> been used as a second barrier to entry for an upgrade is quite\n>> >>>> appropriate.\n>> >>>>\n>> >>>>> On Sun, Jun 27, 2021 at 2:22 AM Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>> I have not objected to anyone splitting. As I said, a split is\n>> always\n>> >>>>> possible, and of course has been done on a large scale. It is only\n>> the\n>> >>>>> misleading statements about inherent soft fork \u201ccompatibility\u201d and\n>> the\n>> >>>>> implication that activation without hash power enforcement does not\n>> >>>>> create a split that I object to. People who know better should be\n>> >>>>> honest about it.\n>> >>>>>\n>> >>>>> Far too many people have been led to believe there is some sort of\n>> >>>>> activation choice with \u201censured\u201d equal outcomes (maybe \u201cslowed\n>> down\u201d).\n>> >>>>> There is only a choice between creating a split and hash power\n>> >>>>> enforcement. Soft forks are rule changes, and thereby incompatible -\n>> >>>>> unless enforced by majority hash power.\n>> >>>>>\n>> >>>>> The statements below are grossly misleading and need to be called\n>> out\n>> >>>>> as such so that people can actually make this decision you speak of.\n>> >>>>> This idea that \u201cusers\u201d decide the rules is not the question. The\n>> >>>>> question is only how to avoid a split. If one does not care he can\n>> >>>>> split at any time, no discussion required.\n>> >>>>>\n>> >>>>> e\n>> >>>>>\n>> >>>>>> On Jun 27, 2021, at 01:47, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> >>>>>>\n>> >>>>>> \ufeffIf different users want different incompatible things (enough on\n>> >>>>>> each side), there's no way to avoid the split. We shouldn't try to\n>> >>>>>> avoid such a split.\n>> >>>>>> Users decide the rules, not miners nor developers.\n>> >>>>>>\n>> >>>>>>> On Sun, Jun 27, 2021 at 12:05 AM Eric Voskuil via bitcoin-dev\n>> >>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>\n>> >>>>>>> Ultimately there is only one answer to this question. Get majority\n>> >>>>>>> hash power support.\n>> >>>>>>>\n>> >>>>>>> Soft fork enforcement is the same act as any other censorship\n>> >>>>>>> enforcement, the difference is only a question of what people\n>> want.\n>> >>>>>>> Given that there is no collective \u201cwe\u201d, those wants differ.\n>> Bitcoin\n>> >>>>>>> resolves this question of conflicting wants, but it is not a\n>> >>>>>>> democracy, it\u2019s a market. One votes by trading.\n>> >>>>>>>\n>> >>>>>>> If one wants to enforce a soft fork (or otherwise censor) this is\n>> >>>>>>> accomplished by mining (or paying others to do so). Anyone can\n>> mine,\n>> >>>>>>> so everyone gets a say. Mining is trading capital now for more\n>> >>>>>>> later. If enough people want to do that, they can enforce a soft\n>> >>>>>>> fork. It\u2019s time Bitcoiners stop thinking of miners as other\n>> people.\n>> >>>>>>> Anyone can mine, and that\u2019s your vote.\n>> >>>>>>>\n>> >>>>>>> Otherwise, as mentioned below, anyone can start a new coin. But\n>> it\u2019s\n>> >>>>>>> dishonest to imply that one can do this and all others will surely\n>> >>>>>>> follow. This cannot be known, it\u2019s merely a gamble. And it\u2019s one\n>> >>>>>>> that has been shown to not always pay off.\n>> >>>>>>>\n>> >>>>>>> e\n>> >>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:43, Eric Voskuil <eric at voskuil.org>\n>> wrote:\n>> >>>>>>>>\n>> >>>>>>>> \ufeffFor some definitions of \u201cblock\u201d.\n>> >>>>>>>>\n>> >>>>>>>> Without majority hash power support, activation simply means you\n>> >>>>>>>> are off on a chain split. Anyone can of course split off from a\n>> >>>>>>>> chain by changing a rule (soft or otherwise) at any time, so this\n>> >>>>>>>> is a bit of an empty claim.\n>> >>>>>>>>\n>> >>>>>>>> Nobody can stop a person from splitting. The relevant question is\n>> >>>>>>>> how to *prevent* a split. And activation without majority hash\n>> >>>>>>>> power certainly does not \u201censure\u201d this.\n>> >>>>>>>>\n>> >>>>>>>> e\n>> >>>>>>>>\n>> >>>>>>>>> On Jun 26, 2021, at 14:13, Luke Dashjr via bitcoin-dev\n>> >>>>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>>>>>>>\n>> >>>>>>>>> \ufeffBIP8 LOT=True just ensures miners cannot block an upgrade\n>> >>>>>>>>> entirely. They can still slow it down.\n>> >>>>>>>>>\n>> >>>>>>>>> It also already has the trinary state you seem to be describing\n>> >>>>>>>>> (although perhaps this could be better documented in the BIP):\n>> >>>>>>>>> users who oppose the softfork can and should treat the\n>> successful\n>> >>>>>>>>> signal (whether MASF or UASF) as invalid, thereby ensuring they\n>> do\n>> >>>>>>>>> not follow a chain with the rules in force.\n>> >>>>>>>>>\n>> >>>>>>>>> No additional bit is needed, as softforks are coordinated\n>> between\n>> >>>>>>>>> users, NOT miners (who have no particular say in them, aside\n>> from\n>> >>>>>>>>> their role as also being users). The miner involvement is only\n>> out\n>> >>>>>>>>> of necessity (to set the bit in the header, which users\n>> coordinate\n>> >>>>>>>>> with) and potentially to accelerate activation by protecting\n>> >>>>>>>>> upgrade-lagging users.\n>> >>>>>>>>>\n>> >>>>>>>>> Luke\n>> >>>>>>>>>\n>> >>>>>>>>>>> On Saturday 26 June 2021 20:21:52 Billy Tetrud via bitcoin-dev\n>> >>>>>>>>>>> wrote:\n>> >>>>>>>>>>\n>> >>>>>>>>>> Given the recent controversy over upgrade mechanisms for the\n>> >>>>>>>>>> non-controversial taproot upgrade, I have been thinking about\n>> >>>>>>>>>> ways to solve the problems that both sides brought up. In\n>> short,\n>> >>>>>>>>>> BIP8 LOT=true proponents make the point that lazy miners\n>> failing\n>> >>>>>>>>>> to upgrade in a timely manner slow down releases of bitcoin\n>> >>>>>>>>>> upgrades, and BIP9 / BIP8 LOT=false proponents make the point\n>> >>>>>>>>>> that LOT=true can lead to undesirable forks that might cause a\n>> >>>>>>>>>> lot of chaos. I believe both points are essentially correct and\n>> >>>>>>>>>> have created a proposal\n>> >>>>>>>>>> <\n>> https://github.com/fresheneesz/bip-trinary-version-signaling/blo\n>> >>>>>>>>>> b/master/b ip-trinary-version-bits.md> for soft fork upgrades\n>> that\n>> >>>>>>>>>> solve both problems.\n>> >>>>>>>>>>\n>> >>>>>>>>>> The proposal uses trinary version signaling rather than binary\n>> >>>>>>>>>> signaling. For any particular prospective soft fork upgrade,\n>> this\n>> >>>>>>>>>> allows for three signaling states:\n>> >>>>>>>>>>\n>> >>>>>>>>>> * Actively support the change.\n>> >>>>>>>>>> * Actively oppose the change.\n>> >>>>>>>>>> * Not signaling (neither support or oppose). This is the\n>> default\n>> >>>>>>>>>> state.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Using this additional information, we can release\n>> non-contentious\n>> >>>>>>>>>> upgrades much quicker (with a much lower percent of miners\n>> >>>>>>>>>> signaling support). For contentious upgrades, miners who oppose\n>> >>>>>>>>>> the change are incentivized to update their software to a\n>> version\n>> >>>>>>>>>> that can actively signal opposition to the change. The more\n>> >>>>>>>>>> opposition there is, the higher the threshold necessary to lock\n>> >>>>>>>>>> in the upgrade. With the parameters I currently recommended in\n>> >>>>>>>>>> the proposal, this chart shows how much support signaling would\n>> >>>>>>>>>> be necessary given a particular amount of active opposition\n>> >>>>>>>>>> signaling:\n>> >>>>>>>>>>\n>> >>>>>>>>>> [image: thresholdChart.png]\n>> >>>>>>>>>> If literally no one signals opposition, a 60% threshold should\n>> be\n>> >>>>>>>>>> relatively safe because it is a supermajority amount that is\n>> >>>>>>>>>> unlikely to change significantly very quickly (ie if 60% of\n>> >>>>>>>>>> miners support the change today, its unlikely that less than a\n>> >>>>>>>>>> majority of miners would support the change a year or two from\n>> >>>>>>>>>> now), and if no one is signaling opposition, chances are that\n>> the\n>> >>>>>>>>>> vast majority of the other 40% would also eventually signal\n>> >>>>>>>>>> support.\n>> >>>>>>>>>>\n>> >>>>>>>>>> This both gives an incentive for \"lazy\" miners to upgrade if\n>> they\n>> >>>>>>>>>> actually oppose the change while at the same time allowing\n>> these\n>> >>>>>>>>>> lazy miners to remain lazy without slowing down the soft fork\n>> >>>>>>>>>> activation much.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I think now is the right time to discuss new soft fork upgrade\n>> >>>>>>>>>> mechanisms, when there are no pressing soft fork upgrades ready\n>> >>>>>>>>>> to deploy. Waiting until we need to deploy a soft fork to\n>> discuss\n>> >>>>>>>>>> this will only delay things and cause contention again like it\n>> >>>>>>>>>> did with taproot.\n>> >>>>>>>>>>\n>> >>>>>>>>>> I'm very curious to know what people think of this mechanism. I\n>> >>>>>>>>>> would appreciate any comments here, or written as github issues\n>> >>>>>>>>>> on the proposal repo itself.\n>> >>>>>>>>>>\n>> >>>>>>>>>> Thanks,\n>> >>>>>>>>>> BT\n>> >>>>>>>>>\n>> >>>>>>>>> _______________________________________________\n>> >>>>>>>>> bitcoin-dev mailing list\n>> >>>>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>>>>>\n>> >>>>>>> _______________________________________________\n>> >>>>>>> bitcoin-dev mailing list\n>> >>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/30263fe3/attachment-0001.html>"
            },
            {
                "author": "eric at voskuil.org",
                "date": "2021-06-30T09:52:42",
                "message_text_only": "> From: Jorge Tim\u00f3n <jtimon at jtimon.cc> \n\n>> \"Soft forks aren\u2019t compatible without miner enforcement\"\n> Compatible with what?\n\nThere is a good summary of what is meant by this term in BIP141:\nhttps://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\n\n\"Backward compatibility\nAs a soft fork, older software will continue to operate without modification. Non-upgraded nodes, however, will not see nor validate the witness data and will consider all witness programs as anyone-can-spend scripts (except a few edge cases where the witness programs are equal to 0, which the script must fail). Wallets should always be wary of anyone-can-spend scripts and treat them with suspicion. Non-upgraded nodes are strongly encouraged to upgrade in order to take advantage of the new features.\"\n\nThe explanation is however incomplete. If majority hash power does not enforce the new rules, the above is incorrect. Granted the word \"operate\" is vague, but clearly what is intended is that \"non-upgraded\" nodes will not be on a different coin. But in fact they would be. The underlying presumption is that BIP141 is not only signaled, but enforced by majority hash power.\n\n>> \"Soft forks without miner support cause splits\".\n> No, what causes splits are 3 things:\n>\n> 1) bugs\n> 2) coordination mistakes\n> 3) people wanting different rules.\n\n#3 (and possibly #4) is what we're talking about, so it's not at all clear why you said \"no\".\n\nPeople change their rules, because #3. If majority hash power does not enforce this (soft) change, it's a chain split.\n\n> Let me give an example. Let's say all users want change A.\n>\n> Only 60% miners want it.\n> When it activates with LOT=true, will this cause a split?\n\nNo, regardless of percentage adoption. You've proposed that it' is majority hash power enforced.\n\nFurthermore, the term compatibility (see above) implies that not everyone (your impossible presumption of 100%) is aligned.\n\nThis is not a debatable subject as far as I'm concerned, but it's worth discussion for those who aren't familiar.\n\ne"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-30T19:30:33",
                "message_text_only": "@Jorge\n> I disagree...  I would oppose such a change no matter what other users or\nminers say.\n\nI don't know why you think we disagree on that point. I agree that I would\noppose a change to 1GB blocks no matter what other users or miners say. You\nmust have misunderstood me there.\n\n>>  Are you really saying that we should just hard fork every time instead\nof soft fork?\n> No\n\nSo what are you advocating for then, exactly?\n\n>> Are you not at all worried about the costs associated with an increased\norphan rate and reorg rate?\n> Orphan blocks are bad, yes, not sure what the point of your question is.\n\nThe point is that if we just deployed with BIP8 LOT=true (as that seems to\nbe the kind of thing you're advocating for) and only 60% of miners had\nupgraded to the new update by the time it activates, orphans and reorg rate\nand depths would greatly increase. The point of the question is: shouldn't\nwe avoid that \"when possible\"?\n\n> What do you think of bip99?\n\nI haven't read it before, but after reading it, it seems like a reasonable\ndiscussion of possibilities and types of forks. It looks like you advocated\nthat \"miner voting\" is appropriate for some of the types of forks. And yet,\nfrom the way you're talking in this thread, it sounds like you don't think\nany consensus rule change deployment should consider miner signaling. So\nI'm confused because it seems like the things you're saying here conflict\nwith some of the things you wrote in BIP99.\n\nWhat specifically did you want me to get out of BIP99 in this context?\n\n@Eric\n> I\u2019d also question the use of the term \u201cmajority\u201d\n\nI just want to clarify that by \"economic majority\" I mean a set of users\nthat presently accept more than 50% of the volume of payments in a given\nperiod of time. I definitely agree that no majority of any kind is needed\nfor a split.\n\n\nOn Wed, Jun 30, 2021 at 2:52 AM <eric at voskuil.org> wrote:\n\n> > From: Jorge Tim\u00f3n <jtimon at jtimon.cc>\n>\n> >> \"Soft forks aren\u2019t compatible without miner enforcement\"\n> > Compatible with what?\n>\n> There is a good summary of what is meant by this term in BIP141:\n> https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\n>\n> \"Backward compatibility\n> As a soft fork, older software will continue to operate without\n> modification. Non-upgraded nodes, however, will not see nor validate the\n> witness data and will consider all witness programs as anyone-can-spend\n> scripts (except a few edge cases where the witness programs are equal to 0,\n> which the script must fail). Wallets should always be wary of\n> anyone-can-spend scripts and treat them with suspicion. Non-upgraded nodes\n> are strongly encouraged to upgrade in order to take advantage of the new\n> features.\"\n>\n> The explanation is however incomplete. If majority hash power does not\n> enforce the new rules, the above is incorrect. Granted the word \"operate\"\n> is vague, but clearly what is intended is that \"non-upgraded\" nodes will\n> not be on a different coin. But in fact they would be. The underlying\n> presumption is that BIP141 is not only signaled, but enforced by majority\n> hash power.\n>\n> >> \"Soft forks without miner support cause splits\".\n> > No, what causes splits are 3 things:\n> >\n> > 1) bugs\n> > 2) coordination mistakes\n> > 3) people wanting different rules.\n>\n> #3 (and possibly #4) is what we're talking about, so it's not at all clear\n> why you said \"no\".\n>\n> People change their rules, because #3. If majority hash power does not\n> enforce this (soft) change, it's a chain split.\n>\n> > Let me give an example. Let's say all users want change A.\n> >\n> > Only 60% miners want it.\n> > When it activates with LOT=true, will this cause a split?\n>\n> No, regardless of percentage adoption. You've proposed that it' is\n> majority hash power enforced.\n>\n> Furthermore, the term compatibility (see above) implies that not everyone\n> (your impossible presumption of 100%) is aligned.\n>\n> This is not a debatable subject as far as I'm concerned, but it's worth\n> discussion for those who aren't familiar.\n>\n> e\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/daf50f1b/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-06-30T19:42:50",
                "message_text_only": "It feels like this discussion has gotten a bit off topic. The proposal is\nintended to provide a best-of-both-worlds middleground between BIP8 and\nBIP9. It would be nice if we could bring it back to a discussion of my\nproposal in the context of other existing deployment plans (BIP8, BIP9,\ntaproot's hybrid deployment, even flag days).\n\nThe main relevant actually to my proposal that have been mentioned, as far\nas I can tell, is that Luke opined that explicit signaling of opposition\nwas unnecessary, because he thinks we shouldn't try to avoid chain splits\nwhen there's any opposition. Jorge agreed that we shouldn't try to avoid\nchain splits. But I don't really understand what either of you (Luke or\nJorge) are actually proposing is better than using my proposal. Are you\nproposing LOT=true be added as an option to my proposal? Are you proposing\nthat we should always use a LOT=true style flag day, and not even consider\nthe option of permanent failure for a deployment? Or are you simply saying\nthat miner opposition is never relevant or useful to know during a\ndeployment?\n\nEverything else has been only tenuously related:\n\n* Who \"controls\" or \"defines\" bitcoin\"?\n* Who \"controls\" what happens during a deployment?\n* Should we deploy based on miner signaling at all?\n\nIf there's so much to discuss on these philosophical points, maybe it makes\nsense to branch that off into a separate thread. I'd appreciate it if we\ncan reconnect this discussion with the proposal this thread is about.\n\n\n\nOn Wed, Jun 30, 2021 at 12:30 PM Billy Tetrud <billy.tetrud at gmail.com>\nwrote:\n\n> @Jorge\n> > I disagree...  I would oppose such a change no matter what other users\n> or miners say.\n>\n> I don't know why you think we disagree on that point. I agree that I would\n> oppose a change to 1GB blocks no matter what other users or miners say. You\n> must have misunderstood me there.\n>\n> >>  Are you really saying that we should just hard fork every time\n> instead of soft fork?\n> > No\n>\n> So what are you advocating for then, exactly?\n>\n> >> Are you not at all worried about the costs associated with an\n> increased orphan rate and reorg rate?\n> > Orphan blocks are bad, yes, not sure what the point of your question is.\n>\n> The point is that if we just deployed with BIP8 LOT=true (as that seems to\n> be the kind of thing you're advocating for) and only 60% of miners had\n> upgraded to the new update by the time it activates, orphans and reorg rate\n> and depths would greatly increase. The point of the question is: shouldn't\n> we avoid that \"when possible\"?\n>\n> > What do you think of bip99?\n>\n> I haven't read it before, but after reading it, it seems like a reasonable\n> discussion of possibilities and types of forks. It looks like you advocated\n> that \"miner voting\" is appropriate for some of the types of forks. And yet,\n> from the way you're talking in this thread, it sounds like you don't think\n> any consensus rule change deployment should consider miner signaling. So\n> I'm confused because it seems like the things you're saying here conflict\n> with some of the things you wrote in BIP99.\n>\n> What specifically did you want me to get out of BIP99 in this context?\n>\n> @Eric\n> > I\u2019d also question the use of the term \u201cmajority\u201d\n>\n> I just want to clarify that by \"economic majority\" I mean a set of users\n> that presently accept more than 50% of the volume of payments in a given\n> period of time. I definitely agree that no majority of any kind is needed\n> for a split.\n>\n>\n> On Wed, Jun 30, 2021 at 2:52 AM <eric at voskuil.org> wrote:\n>\n>> > From: Jorge Tim\u00f3n <jtimon at jtimon.cc>\n>>\n>> >> \"Soft forks aren\u2019t compatible without miner enforcement\"\n>> > Compatible with what?\n>>\n>> There is a good summary of what is meant by this term in BIP141:\n>> https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\n>>\n>> \"Backward compatibility\n>> As a soft fork, older software will continue to operate without\n>> modification. Non-upgraded nodes, however, will not see nor validate the\n>> witness data and will consider all witness programs as anyone-can-spend\n>> scripts (except a few edge cases where the witness programs are equal to 0,\n>> which the script must fail). Wallets should always be wary of\n>> anyone-can-spend scripts and treat them with suspicion. Non-upgraded nodes\n>> are strongly encouraged to upgrade in order to take advantage of the new\n>> features.\"\n>>\n>> The explanation is however incomplete. If majority hash power does not\n>> enforce the new rules, the above is incorrect. Granted the word \"operate\"\n>> is vague, but clearly what is intended is that \"non-upgraded\" nodes will\n>> not be on a different coin. But in fact they would be. The underlying\n>> presumption is that BIP141 is not only signaled, but enforced by majority\n>> hash power.\n>>\n>> >> \"Soft forks without miner support cause splits\".\n>> > No, what causes splits are 3 things:\n>> >\n>> > 1) bugs\n>> > 2) coordination mistakes\n>> > 3) people wanting different rules.\n>>\n>> #3 (and possibly #4) is what we're talking about, so it's not at all\n>> clear why you said \"no\".\n>>\n>> People change their rules, because #3. If majority hash power does not\n>> enforce this (soft) change, it's a chain split.\n>>\n>> > Let me give an example. Let's say all users want change A.\n>> >\n>> > Only 60% miners want it.\n>> > When it activates with LOT=true, will this cause a split?\n>>\n>> No, regardless of percentage adoption. You've proposed that it' is\n>> majority hash power enforced.\n>>\n>> Furthermore, the term compatibility (see above) implies that not everyone\n>> (your impossible presumption of 100%) is aligned.\n>>\n>> This is not a debatable subject as far as I'm concerned, but it's worth\n>> discussion for those who aren't familiar.\n>>\n>> e\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/81c95440/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Trinary Version Signaling for softfork upgrades",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "eric at voskuil.org",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Zac Greenwood",
                "Billy Tetrud"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 214258
        }
    },
    {
        "title": "[bitcoin-dev] Trinary Version Signaling for softfork",
        "thread_messages": [
            {
                "author": "Prayank",
                "date": "2021-06-27T12:01:27",
                "message_text_only": "Hello Eric,\nI have few questions:\n\n>\u00a0Without majority hash power support, activation simply means you are off on a chain split. \n\nSo majority hash power not following the consensus rules can result in chain split? Why would majority of miners decide to mine a chain that nobody wants to use? What are different things possible in this case based on game theory?\u00a0\n\n>\u00a0And activation without majority hash power certainly does not \u201censure\u201d this.\n\nDo miners and mining pools participate in discussions before signaling for a soft fork begins? Can they still mine something else post activation even if signaling readiness for soft fork?\u00a0\n\n>\u00a0If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n\nWho enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n\nIs soft fork signaling same as voting?\n\nAccording to my understanding, miners follow the consensus rules enforced by full nodes and get (subsidy + fees) for their work. Signaling is not voting although lot of people consider it voting including some mining pools and exchanges.\n\n\n-- \n Prayank\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210627/37586cb5/attachment.html>"
            },
            {
                "author": "eric at voskuil.org",
                "date": "2021-06-30T09:17:08",
                "message_text_only": "Hi Prayank,\n\n \n\n> So majority hash power not following the consensus rules can result in chain split?\n\n \n\nAny two people on different rules implies a chain split. That\u2019s presumably why rule changes are called forks. There is no actual concept of \u201cthe rules\u201d just one set of rules or another.\n\n \n\n> Why would majority of miners decide to mine a chain that nobody wants to use?\n\n \n\nI don\u2019t presume to know why people prefer one thing over another, or what people want to use, nor does economics.\n\n \n\n> What are different things possible in this case based on game theory?\n\n \n\nI\u2019ve seen no actual demonstration of the relevance of game theory to Bitcoin. People throw the words around quite a bit, but I can\u2019t give you an answer because I have found no evidence of a valid game theoretic model applicable to Bitcoin. It\u2019s not a game, it\u2019s a market.\n\n \n\n> Do miners and mining pools participate in discussions before signaling for a soft fork begins?\n\n \n\nWho knows, I don\u2019t get invited to round table meetings.\n\n \n\n> Can they still mine something else post activation even if signaling readiness for soft fork? \n\n \n\nA person can mine whatever they want. Signaling does not compel a miner to enforce. Each block mined is anonymous. But each miner seeing the signals of others, unless they are coordinating, would presumably assume that others will enforce.\n\n \n\n> Who enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n\n \n\nA node (software) doesn\u2019t enforce anything. Merchants enforce consensus rules when they reject trading for something that they don\u2019t consider money. Every time two people trade both party validates what they receive (not what they trade away). Those receiving Bitcoin are economically relevant and their power is a function of how much they are doing so.\n\n \n\nMiners censor, which is inconsequential unless enforced. Majority miners can enforce censorship by simply not building on any non-censoring blocks. This is what soft fork enforcement is.\n\n \n\n> Is soft fork signaling same as voting?\n\n \n\nI don\u2019t see that it needs a label apart from signaling. There are many kinds of voting. It would be hard to equate signaling with any of them. It\u2019s a public signal that the miner who mined a given block miner intends to censor, that\u2019s all.\n\n \n\n> According to my understanding, miners follow the consensus rules enforced by full nodes and get (subsidy + fees) for their work.\n\n \n\nMiners mine a chain, which ever one they want. There are many. They earn the block reward.\n\n \n\n> Signaling is not voting although lot of people consider it voting including some mining pools and exchanges.\n\n \n\nWhat people consider it is inconsequential. It has clearly defined behavior.\n\n \n\ne\n\n \n\nFrom: Prayank <prayank at tutanota.de> \nSent: Sunday, June 27, 2021 5:01 AM\nTo: eric at voskuil.org\nCc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Trinary Version Signaling for softfork\n\n \n\nHello Eric,\n\n \n\nI have few questions:\n\n \n\n> Without majority hash power support, activation simply means you are off on a chain split. \n\n \n\nSo majority hash power not following the consensus rules can result in chain split? Why would majority of miners decide to mine a chain that nobody wants to use? What are different things possible in this case based on game theory? \n\n \n\n> And activation without majority hash power certainly does not \u201censure\u201d this.\n\n \n\nDo miners and mining pools participate in discussions before signaling for a soft fork begins? Can they still mine something else post activation even if signaling readiness for soft fork? \n\n \n\n> If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n\n \n\nWho enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n\n \n\nIs soft fork signaling same as voting?\n\n \n\nAccording to my understanding, miners follow the consensus rules enforced by full nodes and get (subsidy + fees) for their work. Signaling is not voting although lot of people consider it voting including some mining pools and exchanges.\n\n \n\n \n\n-- \n\nPrayank\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/92f211f5/attachment-0001.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2021-06-30T11:33:38",
                "message_text_only": "Hi Eric,\n\n> A node (software) doesn\u2019t enforce anything. Merchants enforce consensus\nrules\n\n\u2026 by running a node which they believe to enforce the rules of Bitcoin.\n\nA node definitely enforces consensus rules and defines what is Bitcoin. I\nam quite disturbed that this is even being debated here.\n\nZac\n\n\nOn Wed, 30 Jun 2021 at 11:17, Eric Voskuil via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Prayank,\n>\n>\n>\n> > So majority hash power not following the consensus rules can result in\n> chain split?\n>\n>\n>\n> Any two people on different rules implies a chain split. That\u2019s presumably\n> why rule changes are called forks. There is no actual concept of \u201cthe\n> rules\u201d just one set of rules or another.\n>\n>\n>\n> > Why would majority of miners decide to mine a chain that nobody wants to\n> use?\n>\n>\n>\n> I don\u2019t presume to know why people prefer one thing over another, or what\n> people want to use, nor does economics.\n>\n>\n>\n> > What are different things possible in this case based on game theory?\n>\n>\n>\n> I\u2019ve seen no actual demonstration of the relevance of game theory to\n> Bitcoin. People throw the words around quite a bit, but I can\u2019t give you an\n> answer because I have found no evidence of a valid game theoretic model\n> applicable to Bitcoin. It\u2019s not a game, it\u2019s a market.\n>\n>\n>\n> > Do miners and mining pools participate in discussions before signaling\n> for a soft fork begins?\n>\n>\n>\n> Who knows, I don\u2019t get invited to round table meetings.\n>\n>\n>\n> > Can they still mine something else post activation even if signaling\n> readiness for soft fork?\n>\n>\n>\n> A person can mine whatever they want. Signaling does not compel a miner to\n> enforce. Each block mined is anonymous. But each miner seeing the signals\n> of others, unless they are coordinating, would presumably assume that\n> others will enforce.\n>\n>\n>\n> > Who enforces consensus rules technically in Bitcoin? Full nodes or\n> Miners?\n>\n>\n>\n> A node (software) doesn\u2019t enforce anything. Merchants enforce consensus\n> rules when they reject trading for something that they don\u2019t consider\n> money. Every time two people trade both party validates what they receive\n> (not what they trade away). Those receiving Bitcoin are economically\n> relevant and their power is a function of how much they are doing so.\n>\n>\n>\n> Miners censor, which is inconsequential unless enforced. Majority miners\n> can enforce censorship by simply not building on any non-censoring blocks.\n> This is what soft fork enforcement is.\n>\n>\n>\n> > Is soft fork signaling same as voting?\n>\n>\n>\n> I don\u2019t see that it needs a label apart from signaling. There are many\n> kinds of voting. It would be hard to equate signaling with any of them.\n> It\u2019s a public signal that the miner who mined a given block miner intends\n> to censor, that\u2019s all.\n>\n>\n>\n> > According to my understanding, miners follow the consensus rules\n> enforced by full nodes and get (subsidy + fees) for their work.\n>\n>\n>\n> Miners mine a chain, which ever one they want. There are many. They earn\n> the block reward.\n>\n>\n>\n> > Signaling is not voting although lot of people consider it voting\n> including some mining pools and exchanges.\n>\n>\n>\n> What people consider it is inconsequential. It has clearly defined\n> behavior.\n>\n>\n>\n> e\n>\n>\n>\n> *From:* Prayank <prayank at tutanota.de>\n> *Sent:* Sunday, June 27, 2021 5:01 AM\n> *To:* eric at voskuil.org\n> *Cc:* Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n> *Subject:* Re: [bitcoin-dev] Trinary Version Signaling for softfork\n>\n>\n>\n> Hello Eric,\n>\n>\n>\n> I have few questions:\n>\n>\n>\n> > Without majority hash power support, activation simply means you are off\n> on a chain split.\n>\n>\n>\n> So majority hash power not following the consensus rules can result in\n> chain split? Why would majority of miners decide to mine a chain that\n> nobody wants to use? What are different things possible in this case based\n> on game theory?\n>\n>\n>\n> > And activation without majority hash power certainly does not \u201censure\u201d\n> this.\n>\n>\n>\n> Do miners and mining pools participate in discussions before signaling for\n> a soft fork begins? Can they still mine something else post activation even\n> if signaling readiness for soft fork?\n>\n>\n>\n> > If one wants to enforce a soft fork (or otherwise censor) this is\n> accomplished by mining (or paying others to do so). Anyone can mine, so\n> everyone gets a say. Mining is trading capital now for more later. If\n> enough people want to do that, they can enforce a soft fork. It\u2019s time\n> Bitcoiners stop thinking of miners as other people. Anyone can mine, and\n> that\u2019s your vote.\n>\n>\n>\n> Who enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n>\n>\n>\n> Is soft fork signaling same as voting?\n>\n>\n>\n> According to my understanding, miners follow the consensus rules enforced\n> by full nodes and get (subsidy + fees) for their work. Signaling is not\n> voting although lot of people consider it voting including some mining\n> pools and exchanges.\n>\n>\n>\n>\n>\n> --\n>\n> Prayank\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/8cf81a27/attachment-0001.html>"
            },
            {
                "author": "Prayank",
                "date": "2021-06-30T12:12:35",
                "message_text_only": ">\u00a0I\u2019ve seen no actual demonstration of the relevance of game theory to Bitcoin. People throw the words around quite a bit, but I can\u2019t give you an answer because I have found no evidence of a valid game theoretic model applicable to Bitcoin. It\u2019s not a game, it\u2019s a market.\n\nAgree its difficult to predict and include all the possible things that may happen.\u00a0Two articles I had read in past that explained few things based on game theory:\n\nhttps://jimmysong.medium.com/uasf-bip148-scenarios-and-game-theory-9530336d953e\n\nhttps://jimmysong.medium.com/segwit2x-game-theory-scenarios-part-1-7f863904a72\n\n>\u00a0Who knows, I don\u2019t get invited to round table meetings.\n\nMy question was related to discussions on mailing list, IRC channels, Reddit, Twitter, GitHub etc. Not sure if everyone does but few had no issues with Taproot before signaling according to\u00a0https://web.archive.org/web/20210316221837/https://taprootactivation.com/\n\n>\u00a0Every time two people trade both party validates what they receive (not what they trade away). Those receiving Bitcoin are economically relevant and their power is a function of how much they are doing so.\n\nAgree. Running and 'using' the node for economic activity can be considered enforcing consensus rules.\n\n>\u00a0Majority miners can enforce censorship by simply not building on any non-censoring blocks. This is what soft fork enforcement is.\n\nI am not sure about this.\u00a0\n\n>\u00a0I don\u2019t see that it needs a label apart from signaling. There are many kinds of voting. It would be hard to equate signaling with any of them. It\u2019s a public signal that the miner who mined a given block miner intends to censor, that\u2019s all.\n\nSignaling can be done for many things. In this case I think miners are signaling 'readiness'.\u00a0 Pieter Wuille had answered a related question on SE:\u00a0https://bitcoin.stackexchange.com/questions/97043/is-there-an-active-list-of-bips-currently-open-for-voting/\n\nSince this is misunderstood or misinterpreted by many, I had even requested Hampus Sj\u00f6berg\u00a0to mention this in\u00a0https://taproot.watch/ :\u00a0https://github.com/hsjoberg/fork-explorer/issues/57\n\n\n-- \n Prayank\n\n\nJun 30, 2021, 14:47 by eric at voskuil.org:\n\n>\n> Hi Prayank,\n>\n>\n> \u00a0\n>\n>\n> > So majority hash power not following the consensus rules can result in chain split?\n>\n>\n> \u00a0\n>\n>\n> Any two people on different rules implies a chain split. That\u2019s presumably why rule changes are called forks. There is no actual concept of \u201cthe rules\u201d just one set of rules or another.\n>\n>\n> \u00a0\n>\n>\n> > Why would majority of miners decide to mine a chain that nobody wants to use?\n>\n>\n> \u00a0\n>\n>\n> I don\u2019t presume to know why people prefer one thing over another, or what people want to use, nor does economics.\n>\n>\n> \u00a0\n>\n>\n> > What are different things possible in this case based on game theory?\n>\n>\n> \u00a0\n>\n>\n> I\u2019ve seen no actual demonstration of the relevance of game theory to Bitcoin. People throw the words around quite a bit, but I can\u2019t give you an answer because I have found no evidence of a valid game theoretic model applicable to Bitcoin. It\u2019s not a game, it\u2019s a market.\n>\n>\n> \u00a0\n>\n>\n> > Do miners and mining pools participate in discussions before signaling for a soft fork begins?\n>\n>\n> \u00a0\n>\n>\n> Who knows, I don\u2019t get invited to round table meetings.\n>\n>\n> \u00a0\n>\n>\n> > Can they still mine something else post activation even if signaling readiness for soft fork?\u00a0\n>\n>\n> \u00a0\n>\n>\n> A person can mine whatever they want. Signaling does not compel a miner to enforce. Each block mined is anonymous. But each miner seeing the signals of others, unless they are coordinating, would presumably assume that others will enforce.\n>\n>\n> \u00a0\n>\n>\n> > Who enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n>\n>\n> \u00a0\n>\n>\n> A node (software) doesn\u2019t enforce anything. Merchants enforce consensus rules when they reject trading for something that they don\u2019t consider money. Every time two people trade both party validates what they receive (not what they trade away). Those receiving Bitcoin are economically relevant and their power is a function of how much they are doing so.\n>\n>\n> \u00a0\n>\n>\n> Miners censor, which is inconsequential unless enforced. Majority miners can enforce censorship by simply not building on any non-censoring blocks. This is what soft fork enforcement is.\n>\n>\n> \u00a0\n>\n>\n> > Is soft fork signaling same as voting?\n>\n>\n> \u00a0\n>\n>\n> I don\u2019t see that it needs a label apart from signaling. There are many kinds of voting. It would be hard to equate signaling with any of them. It\u2019s a public signal that the miner who mined a given block miner intends to censor, that\u2019s all.\n>\n>\n> \u00a0\n>\n>\n> > According to my understanding, miners follow the consensus rules enforced by full nodes and get (subsidy + fees) for their work.\n>\n>\n> \u00a0\n>\n>\n> Miners mine a chain, which ever one they want. There are many. They earn the block reward.\n>\n>\n> \u00a0\n>\n>\n> > Signaling is not voting although lot of people consider it voting including some mining pools and exchanges.\n>\n>\n> \u00a0\n>\n>\n> What people consider it is inconsequential. It has clearly defined behavior.\n>\n>\n> \u00a0\n>\n>\n> e\n>\n>\n> \u00a0\n>\n>\n>\n>\n> From:>  Prayank <prayank at tutanota.de> \n> Sent:>  Sunday, June 27, 2021 5:01 AM\n> To:>  eric at voskuil.org\n> Cc:>  Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n> Subject:>  Re: [bitcoin-dev] Trinary Version Signaling for softfork\n>\n>\n>\n>\n> \u00a0\n>\n>\n> Hello Eric,\n>\n>\n> \u00a0\n>\n>\n> I have few questions:\n>\n>\n> \u00a0\n>\n>\n> >\u00a0Without majority hash power support, activation simply means you are off on a chain split.\n>\n>\n> \u00a0\n>\n>\n> So majority hash power not following the consensus rules can result in chain split? Why would majority of miners decide to mine a chain that nobody wants to use? What are different things possible in this case based on game theory?\u00a0\n>\n>\n> \u00a0\n>\n>\n> >\u00a0And activation without majority hash power certainly does not \u201censure\u201d this.\n>\n>\n> \u00a0\n>\n>\n> Do miners and mining pools participate in discussions before signaling for a soft fork begins? Can they still mine something else post activation even if signaling readiness for soft fork?\u00a0\n>\n>\n> \u00a0\n>\n>\n> >\u00a0If one wants to enforce a soft fork (or otherwise censor) this is accomplished by mining (or paying others to do so). Anyone can mine, so everyone gets a say. Mining is trading capital now for more later. If enough people want to do that, they can enforce a soft fork. It\u2019s time Bitcoiners stop thinking of miners as other people. Anyone can mine, and that\u2019s your vote.\n>\n>\n> \u00a0\n>\n>\n> Who enforces consensus rules technically in Bitcoin? Full nodes or Miners?\n>\n>\n> \u00a0\n>\n>\n> Is soft fork signaling same as voting?\n>\n>\n> \u00a0\n>\n>\n> According to my understanding, miners follow the consensus rules enforced by full nodes and get (subsidy + fees) for their work. Signaling is not voting although lot of people consider it voting including some mining pools and exchanges.\n>\n>\n> \u00a0\n>\n>\n> \u00a0\n>\n>\n> --\n>\n>\n> Prayank\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/65f8d6a5/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-30T12:03:37",
                "message_text_only": "A million nodes saying a transaction is invalid does nothing to enforce that knowledge.\n\nAn economic node is a person who refuses to accept invalid money. A node only informs this decision, it cannot enforce it. That\u2019s up to people.\n\nAnd clearly if one is not actually accepting bitcoin for anything at the time, he is not enforcing anything.\n\nThe idea of a non-economic node is well established, nothing new here.\n\ne\n\n> On Jun 30, 2021, at 04:33, Zac Greenwood <zachgrw at gmail.com> wrote:\n> \n> \ufeff\n> Hi Eric,\n> \n> > A node (software) doesn\u2019t enforce anything. Merchants enforce consensus rules\n> \n> \u2026 by running a node which they believe to enforce the rules of Bitcoin.\n> \n> A node definitely enforces consensus rules and defines what is Bitcoin. I am quite disturbed that this is even being debated here.\n> \n> Zac\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/c2d70213/attachment.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2021-06-30T12:44:49",
                "message_text_only": "Eric,\n\n> A million nodes saying a transaction is invalid does nothing to enforce\nthat knowledge\n\nIt does. Nodes disregard invalid transactions and invalid blocks as if they\nnever existed. It is not possible for any party to transact bitcoin in a\nway that violates the set of rules enforced by the network of\nconsensus-compatible nodes that we call Bitcoin.\n\nZac\n\n\nOn Wed, Jun 30, 2021 at 2:03 PM Eric Voskuil <eric at voskuil.org> wrote:\n\n> A million nodes saying a transaction is invalid does nothing to enforce\n> that knowledge.\n>\n> An economic node is a person who refuses to accept invalid money. A node\n> only informs this decision, it cannot enforce it. That\u2019s up to people.\n>\n> And clearly if one is not actually accepting bitcoin for anything at the\n> time, he is not enforcing anything.\n>\n> The idea of a non-economic node is well established, nothing new here.\n>\n> e\n>\n> On Jun 30, 2021, at 04:33, Zac Greenwood <zachgrw at gmail.com> wrote:\n>\n> \ufeff\n> Hi Eric,\n>\n> > A node (software) doesn\u2019t enforce anything. Merchants enforce consensus\n> rules\n>\n> \u2026 by running a node which they believe to enforce the rules of Bitcoin.\n>\n> A node definitely enforces consensus rules and defines what is Bitcoin. I\n> am quite disturbed that this is even being debated here.\n>\n> Zac\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/036ff7c1/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2021-06-30T18:11:06",
                "message_text_only": "> On Jun 30, 2021, at 05:45, Zac Greenwood <zachgrw at gmail.com> wrote:\n> \n> \ufeff\n> Eric,\n> \n> > A million nodes saying a transaction is invalid does nothing to enforce that knowledge\n> \n> It does. Nodes disregard invalid transactions and invalid blocks as if they never existed. It is not possible for any party to transact bitcoin in a way that violates the set of rules enforced by the network of consensus-compatible nodes that we call Bitcoin.\n\nWhen Fincen walks into Coinbase and every other exchange (and white market business in the country), and tells them to change a rule or they are taking the CEO out in hancuffs for money laundering, I\u2019m pretty sure that their node with not be able to prevent it.\n\nEnforcement is always people. We use the term node as a metaphorical term for people who use the node to avoid taking bad money. Like those machines that test paper money, they offer no resistance themselves.\n\nA node in a closet checking transactions, unconnected to any human actually rejecting the money in trade, offers no resistance to anything. It can be forked off without any consequence whatsoever. \n\nThis subject was discussed here during the BCH split. People were setting up nodes on cloud services, to boost numbers. These non-economic nodes were of course of no consequence, which was not a matter of debate. I\u2019m explaining to you why that is.\n\nThe network ignores non-economic nodes as if they never existed.\n\n> Zac\n> \n> \n>> On Wed, Jun 30, 2021 at 2:03 PM Eric Voskuil <eric at voskuil.org> wrote:\n>> A million nodes saying a transaction is invalid does nothing to enforce that knowledge.\n>> \n>> An economic node is a person who refuses to accept invalid money. A node only informs this decision, it cannot enforce it. That\u2019s up to people.\n>> \n>> And clearly if one is not actually accepting bitcoin for anything at the time, he is not enforcing anything.\n>> \n>> The idea of a non-economic node is well established, nothing new here.\n>> \n>> e\n>> \n>>>> On Jun 30, 2021, at 04:33, Zac Greenwood <zachgrw at gmail.com> wrote:\n>>>> \n>>> \ufeff\n>>> Hi Eric,\n>>> \n>>> > A node (software) doesn\u2019t enforce anything. Merchants enforce consensus rules\n>>> \n>>> \u2026 by running a node which they believe to enforce the rules of Bitcoin.\n>>> \n>>> A node definitely enforces consensus rules and defines what is Bitcoin. I am quite disturbed that this is even being debated here.\n>>> \n>>> Zac\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210630/9f52caa5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Trinary Version Signaling for softfork",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "eric at voskuil.org",
                "Eric Voskuil",
                "Prayank",
                "Zac Greenwood"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 23544
        }
    },
    {
        "title": "[bitcoin-dev] Last week's second IRC workshop on L2 onchain support and wrap up",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-06-29T09:44:11",
                "message_text_only": "A summary of the first workshop is here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019079.html\n\nThe focus for this second workshop was fee bumping and package relay.\nFor more details on package relay see:\nhttps://github.com/ariard/L2-zoology/blob/master/workshops/package-relay-and-friends.md\n\nThe conversation log for the second workshop is here:\nhttps://gist.github.com/ariard/32b51ecceccc5c6f647bae86d083c442\n\nPackage relay background\n\nPackage relay is potentially useful for L2 protocols to address the\ninherent unpredictability of future fees. CPFP (child-pays-for-parent)\nseeks to ensure say a justice transaction, in Lightning\u2019s case, with a\nlower fee, gets confirmed in a more timely manner because miners are\nincentivized to include the child transaction in a block. To do so\nthey must include the parent transaction in that block or a preceding\nblock. By \u201cpackaging\u201d the parent and the child the initiator of the\ntransaction(s) can ensure the miner\u2019s mempool doesn\u2019t initially reject\nthe parent transaction for having a too low fee.\n\nThere has been prior work done in previous years on package relay,\nmainly by Suhas Daftuar.\n\nDraft BIP: https://gist.github.com/sdaftuar/8756699bfcad4d3806ba9f3396d4e66a\n\nPackage relay design questions: https://github.com/bitcoin/bitcoin/issues/14895\n\nRecently Gloria Zhao has been advancing package relay in Bitcoin Core:\nhttps://gist.github.com/glozow/7064717e727a3eb27fad4f8504513add\n\nPackage relay implementation\n\nAttendees seemed in agreement that enabling 2 transaction packages\nwould be sufficient (at least for now) for Lightning and DLCs. A L2\nprotocol should always be able to design a two step process where the\nfirst transaction has an effective zero fee rate and the second\ntransaction sets the fee. Restricting the size of the package to 2 may\nhave the cost of slightly longer confirmation times and/or slightly\nhigher fees (t-bast) but it compares well to the increased\nimplementation complexity of larger package sizes. Two generation:\nmulti parent, single child shouldn\u2019t introduce material implementation\ncomplexity over two generation: single parent, single child (glozow).\n\nPackage RBF (replace-by-fee) is possible where there are two competing\npackages with competing Lightning commitment transactions in them and\nthe second package is given a higher fee to attempt to get it\nconfirmed before the first package. However, supporting RBF within a\npackage (ie replacing a transaction in a package with a higher fee\ntransaction) increases implementation complexity and makes it harder\nto reason about (glozow).\n\nrgrant raised the possibility of using two packages {A,B} and {B,C} if\nthree transaction packages e.g. {A,B,C} weren\u2019t supported but it was\nsuggested it is perhaps better to just broadcast a high fee CPFP\ntransaction for the {A,B} package rather than creating two packages.\nIf the first package has been evicted from the mempool the {B,C}\npackage wouldn\u2019t propagate because it would be an orphan package\n(t-bast).\n\nglozow suggested that only hints (wtxids of transactions you think\nshould be package validated) could be communicated rather than\nrelaying the transaction themselves but there were concerns from\nothers on whether these hints would successfully propagate across the\nnetwork. Instead fee rate hints could be sent to inform a peer\u2019s\ndecision on whether it makes sense to fetch the rest of the package\n(t-bast).\n\ndarosior suggested the idea of a package based CBlockPolicyEstimator\nin Bitcoin Core if CPFP is going to be increasingly used on the\nnetwork.\n\nWitness replacement and Taproot\n\nTapscripts can be unlimited in size so with current Taproot rules you\ncould in theory go from a 100,000 vbyte witness to an empty witness.\nL2 protocols may have a UTXO shared by two parties where Alice\u2019s\nwitness for her branch is say 1,000 vbytes and Bob\u2019s witness is only\nsay 250 vbytes. Replacing Alice\u2019s larger witness with Bob\u2019s smaller\nwitness could reduce transaction fees. For Lightning the best case is\na Taproot key path spend (16 vbyte witness) and the worst case is\ngoing to be a 150 vbyte witness. Miniscript can tell you your worst\ncase transaction size and this can be used to assess the transaction\npinning risk of a bloated witness (all harding).\n\nA future soft fork could give meaning to the annex in Taproot\n(darosior) which could be used for inflating the fee rate of a\nwitness. Then you could have a same-txid-different-wtxid coming after\nwith a lower fee rate but higher vbytes size to override package\nlimits (ariard). But fee rate is purely a policy concept and the annex\noperates at the consensus level. In addition the annex can only\nincrease the weight of a transaction, it cannot decrease it (harding).\n\nWrap up and initial goals\n\nWith regards to the goals of the workshops that were initially\nannounced here:\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2021-April/003002.html\n\n1) 2 transactions packages sounds enough to support currently deployed\nL2 protocols\n2) There are ongoing discussions in the ecosystem regarding\ndeprecation of opt in RBF and implementation of full RBF:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019074.html\n3) Generally status quo and ad hoc security incident response policy\nin the case of cross-layer security issues\n4) Generally status quo on L2 security philosophy design. L2 protocol\ndesigners should seek to minimize assumptions on the base layer.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Last week's second IRC workshop on L2 onchain support and wrap up",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5577
        }
    },
    {
        "title": "[bitcoin-dev] BIP Proposals for Output Script Descriptors",
        "thread_messages": [
            {
                "author": "Andrew Chow",
                "date": "2021-06-29T21:14:39",
                "message_text_only": "Hi All,\n\nI've been working on formalizing the Output Script Descriptors that have\nbeen available in Bitcoin Core for a while into BIPs. Since descriptors\nare modular and have optional components, I've decided to split it into\n7 BIPs, rather than a single one. The first describes descriptors in\ngeneral and does not specify any particular descriptor. However it does\ndescribe the general operation, key expressions (including derivation\npaths and key origin info), and the descriptor checksum. The following 6\nBIPs specify the actual descriptors themselves. These are non-segwit\ndescriptor (pk, pkh, sh), segwit descriptors (wpkh, wsh), multisig\ndescriptors (multi, sortedmulti), the taproot descriptor (tr), the combo\ndescriptor, and opaque descriptors (raw, addr). This separation is so\nthat implementors can choose to not implement some descriptors and still\nsay which descriptors they support without being too difficult to\nunderstand.\n\nThe text of all of the documents are below, and they can also be found\non github:https://github.com/achow101/bips/tree/descriptors/\n\nThanks,\nAndrew Chow\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-general\n \u00a0 Layer: Applications\n \u00a0 Title: Output Script Descriptors General Operation\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-general\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nOutput Script Descriptors are a simple language which can be used to\ndescribe collections ofoutput scripts.\nThere can be many different descriptor fragments and functions.\nThis document describes the general syntax for descriptors, descriptor\nchecksums, and common expressions.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nBitcoin wallets traditionally have stored a set of keys which are later\nserialized and mutated to produce the output scripts that the wallet\nwatches and the addresses it provides to users.\nTypically backups have consisted of solely the private keys, nowadays\nprimarily in the form of BIP 39 mnemonics.\nHowever this backup solution is insuffient, especially since the\nintroduction of Segregated Witness which added new output types.\nGiven just the private keys, it is not possible for restored wallets to\nknow which kinds of output scripts and addresses to produce.\nThis has lead to incompatibilities between wallets when restoring a\nbackup or exporting data for a watch only wallet.\n\nFurther complicating matters are BIP 32 derivation paths.\nAlthough BIPs 44, 49, and 84 have specified standard BIP 32 derivation\npaths for different output scripts and addresses, not all wallets\nsupport them nor use those derivation paths.\nThe lack of derivation path information in these backups and exports\nleads to further incompatibilities between wallets.\n\nCurrent solutions to these issues have not been generic and can be\nviewed as being layer violations.\nSolutions such as introducing different version bytes for extended key\nserialization both are a layer violation (key derivation should be\nseparate from script type meaning) and specific only to a particular\nderivation path and script type.\n\nOutput Script Descriptors introduces a generic solution to these issues.\nScript types are specified explicitly through the use of Script Expressions.\nKey derivation paths are specified explicitly in Key Expressions.\nThese allow for creating wallet backups and exports which specify the\nexact scripts, subscripts (redeemScript, witnessScript, etc.), and keys\nto produce.\nWith the general structure specified in this BIP, new Script Expressions\ncan be introduced as new script types are added.\nLastly, the use of common terminology and existing standards allow for\nOutput Script Descriptors to be engineer readable so that the results\ncan be understood at a glance.\n\n==Specification==\n\nDescriptors consist of several types of expressions.\nThe top level expression is a <tt>SCRIPT</tt>.\nThis expression may be followed by <tt>#CHECKSUM</tt>, where\n<tt>CHECKSUM</tt> is an 8 character alphanumeric descriptor checksum.\n\n===Script Expressions===\n\nScript Expressions (denoted <tt>SCRIPT</tt>) are expressions which\ncorrespond directly with a Bitcoin script.\nThese expressions are written as functions and take arguments.\nSuch expressions have a script template which is filled with the\narguments correspondingly.\nExpressions are written with a human readable identifier string with the\narguments enclosed with parentheses.\nThe identifier string should be alphanumeric and may include underscores.\n\nThe arguments to a script expression are defined by that expression itself.\nThey could be a script expression, a key expression, or some other\nexpression entirely.\n\n===Key Expressions===\n\nA common expression used as an argument to script expressions are key\nexpressions (denoted <tt>KEY</tt>).\nThese represent a public or private key and, optionally, information\nabout the origin of that key.\nKey expressions can only be used as arguments to script expressions.\n\nKey expressions consist of:\n* Optionally, key origin information, consisting of:\n** An open bracket <tt>[</tt>\n** Exactly 8 hex characters for the fingerprint of the key where the\nderivation starts (see BIP 32 for details)\n** Followed by zero or more <tt>/NUM</tt> or <tt>/NUM'</tt>\u00a0 path\nelements to indicate the unhardened or hardened derivation steps between\nthe fingerprint and the key that follows.\n** A closing bracket <tt>]</tt>\n* Followed by the actual key, which is either:\n** A hex encoded public key, which depending the script expression, may\nbe either:\n*** 66 hex character string beginning with <tt>02</tt> or <tt>03</tt>\nrepresenting a compressed public key\n*** 130 hex character string beginning with <tt>04</tt> representing an\nuncompressed public key\n*** 64 hex character string representing an x-only public key\n** A [[https://en.bitcoin.it/wiki/Wallet_import_format|WIF]] encoded\nprivate key\n** <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded\nextended private key (as defined in BIP 32)\n*** Followed by zero or more <tt>/NUM</tt> or <tt>/NUM'</tt> path\nelements indicating BIP 32 derivation steps to be taken after the given\nextended key.\n*** Optionally followed by a single <tt>/*</tt> or <tt>/*'</tt> final\nstep to denote all direct unhardened or hardened children.\n\nIf the <tt>KEY</tt> is a BIP 32 extended key, before output scripts can\nbe created, child keys must be derived using the derivation information\nthat follows the extended key.\nWhen the final step is <tt>/*</tt> or <tt>/*'</tt>, an output script\nwill be produced for every child key index.\nThe derived key must be serialized as a compressed public key.\n\nIn the above specification, the hardened indicator <tt>'</tt> may be\nreplaced with alternative hardnened indicators of <tt>h</tt> or <tt>H</tt>.\n\n===Character Set===\n\nThe expressions used in descriptors must only contain characters within\nthis character set so that the descriptor checksum will work.\n\nThe allowed characters are:\n<pre>\n0123456789()[],'/*abcdefgh@:$%{}\nIJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\nijklmnopqrstuvwxyzABCDEFGH`#\"\\<space>\n</pre>\nNote that <tt><space></tt> on the last line is a space character.\n\nThis character set is written as 3 groups of 32 characters in this\nspecific order so that the checksum below can identify more errors.\nThe first group are the most common \"unprotected\" characters (i.e.\nthings such as hex and keypaths that do not already have their own\nchecksums).\nCase errors cause an offset that is a multiple of 32 while as many\nalphabetic characters are in the same group while following the previous\nrestrictions.\n\n===Checksum===\n\nFollwing the top level script expression is a single octothorpe\n(<tt>#</tt>) followed by the 8 character checksum.\nThe checksum is an error correcting checksum similar to bech32.\n\nThe checksum has the following properties:\n* Mistakes in a descriptor string are measured in \"symbol errors\". The\nhigher the number of symbol errors, the harder it is to detect:\n** An error substituting a character from\n<tt>0123456789()[],'/*abcdefgh@:$%{}</tt> for another in that set always\ncounts as 1 symbol error.\n*** Note that hex encoded keys are covered by these characters. Extended\nkeys (<tt>xpub</tt> and <tt>xprv</tt>) use other characters too, but\nalso have their own checksum mechansim.\n*** <tt>SCRIPT</tt> expression function names use other characters, but\nmistakes in these would generally result in an unparsable descriptor.\n** A case error always counts as 1 symbol error.\n** Any other 1 character substitution error counts as 1 or 2 symbol errors.\n* Any 1 symbol error is always detected.\n* Any 2 or 3 symbol error in a descriptor of up to 49154 characters is\nalways detected.\n* Any 4 symbol error in a descriptor of up to 507 characters is always\ndetected.\n* Any 5 symbol error in a descriptor of up to 77 characters is always\ndetected.\n* Is optimized to minimize the chance of a 5 symbol error in a\ndescriptor up to 387 characters is undetected\n* Random errors have a chance of 1 in 2<super>40</super> of being\nundetected.\n\nThe checksum itself uses the same character set as bech32:\n<tt>qpzry9x8gf2tvdw0s3jn54khce6mua7l</tt>\n\nValid descriptor strings with a checksum must pass the criteria for\nvalidity specified by the Python3 code snippet below.\nThe function <tt>descsum_check</tt> must return true when its argument\n<tt>s</tt> is a descriptor consisting in the form <tt>SCRIPT#CHECKSUM</tt>.\n\n<pre>\nINPUT_CHARSET =\n\"0123456789()[],'/*abcdefgh@:$%{}IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\\n\"\nCHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\nGENERATOR = [0xf5dee51989, 0xa9fdca3312, 0x1bab10e32d, 0x3706b1677a,\n0x644d626ffd]\n\ndef descsum_polymod(symbols):\n \u00a0\u00a0\u00a0 \"\"\"Internal function that computes the descriptor checksum.\"\"\"\n \u00a0\u00a0\u00a0 chk = 1\n \u00a0\u00a0\u00a0 for value in symbols:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 top = chk >> 35\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 chk = (chk & 0x7ffffffff) << 5 ^ value\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for i in range(5):\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 chk ^= GENERATOR[i] if ((top >> i) & 1) else 0\n \u00a0\u00a0\u00a0 return chk\n\ndef descsum_expand(s):\n \u00a0\u00a0\u00a0 \"\"\"Internal function that does the character to symbol expansion\"\"\"\n \u00a0\u00a0\u00a0 groups = []\n \u00a0\u00a0\u00a0 symbols = []\n \u00a0\u00a0\u00a0 for c in s:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if not c in INPUT_CHARSET:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return None\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 v = INPUT_CHARSET.find(c)\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 symbols.append(v & 31)\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 groups.append(v >> 5)\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if len(groups) == 3:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 symbols.append(groups[0] * 9 + groups[1] * 3 + groups[2])\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 groups = []\n \u00a0\u00a0\u00a0 if len(groups) == 1:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 symbols.append(groups[0])\n \u00a0\u00a0\u00a0 elif len(groups) == 2:\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 symbols.append(groups[0] * 3 + groups[1])\n \u00a0\u00a0\u00a0 return symbols\n\ndef descsum_check(s):\n \u00a0\u00a0\u00a0 \"\"\"Verify that the checksum is correct in a descriptor\"\"\"\n \u00a0\u00a0\u00a0 if s[-9] != '#':\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return False\n \u00a0\u00a0\u00a0 if not all(x in CHECKSUM_CHARSET for x in s[-8:]):\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return False\n \u00a0\u00a0\u00a0 symbols = descsum_expand(s[:-9]) + [CHECKSUM_CHARSET.find(x) for x\nin s[-8:]]\n \u00a0\u00a0\u00a0 return descsum_polymod(symbols) == 1\n</pre>\n\nThis implements a BCH code that has the properties described above.\nThe entire descriptor string is first processed into an array of symbols.\nThe symbol for each character is its position within its group.\nAfter every 3rd symbol, a 4th symbol is inserted which represents the\ngroup numbers combined together.\nThis means that a change that only affects the position within a group,\nor only a group number change, will only affect a single symbol.\n\nTo construct a valid checksum given a script expression, the code below\ncan be used:\n\n<pre>\ndef descsum_create(s):\n \u00a0\u00a0\u00a0 \"\"\"Add a checksum to a descriptor without\"\"\"\n \u00a0\u00a0\u00a0 symbols = descsum_expand(s) + [0, 0, 0, 0, 0, 0, 0, 0]\n \u00a0\u00a0\u00a0 checksum = descsum_polymod(symbols) ^ 1\n \u00a0\u00a0\u00a0 return s + '#' + ''.join(CHECKSUM_CHARSET[(checksum >> (5 * (7 -\ni))) & 31] for i in range(8))\n\n</pre>\n\n==Backwards Compatibility==\n\nOutput script descriptors are an entirely new language which is not\ncompatible with any existing software.\nHowever many components of the expressions reuse encodings and\nserializations defined by previous BIPs.\n\nOutput script descriptors are designed for future extension with further\nfragment types and new script expressions.\nThese will be specified in additional BIPs.\n\n==Reference Implemntation==\n\nDescriptors have been implemented in Bitcoin Core since version 0.17.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-segwit\n \u00a0 Layer: Applications\n \u00a0 Title: segwit Output Script Descriptors\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-segwit\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>wpkh()</tt>, and <tt>wsh()</tt> output\nscript descriptors.\n<tt>wpkh()</tt> descriptors take a key and produces a P2WPKH output script.\n<tt>wsh()</tt> descriptors take a script and produces a P2WSH output script.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nSegregated Witness added 2 additional standard output script formats:\nP2WPKH and P2WSH.\nThese expressions allow specifying those formats as a descriptor.\n\n==Specification==\n\nTwo new script expressions are defined: <tt>wpkh()</tt>, and <tt>wsh()</tt>.\n\n===<tt>wpkh()</tt>===\n\nThe <tt>wpkh(KEY)</tt> expression can be used as a top level expression,\nor inside of a <tt>sh()</tt> descriptor.\nIt takes a single key expression as an argument and produces a P2WPKH\noutput script.\nOnly keys which are/has compressed public keys can be contained in a\n<tt>wpkh()</tt> expression.\n\nThe output script produced is:\n<pre>\nOP_0 <KEY_hash160>\n</pre>\n\n===<tt>wsh()</tt>===\n\nThe <tt>wsh(SCRIPT)</tt> expression can be used as a top level\nexpression, or inside of a <tt>sh()</tt> descriptor.\nIt takes a single script expression as an argument and produces a P2WSH\noutput script.\n<tt>wsh()</tt> expressions also create a witnessScript which is required\nin order to spend outputs which use its output script.\nThis redeemScript is the output script produced by the <tt>SCRIPT</tt>\nargument to <tt>wsh()</tt>.\nAny key expression found in any script expression contained by a\n<tt>wsh()</tt> expression must only produce compresed public keys.\n\nThe output script produced is:\n<pre>\nOP_0 <SCRIPT_sha256>\n</pre>\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>wpkh()</tt>, and <tt>wsh()</tt> descriptors use the format and\ngeneral operation specified in\n[[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs these are a wholly new descriptors, they are not compatible with any\nimplementation.\nHowever the scripts produced are standard scripts so existing software\nare likely to be familiar with them.\n\n==Reference Implemntation==\n\n<tt>wpkh()</tt>, and <tt>wsh()</tt> descriptors have been implemented in\nBitcoin Core since version 0.17.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-non-segwit\n \u00a0 Layer: Applications\n \u00a0 Title: Non-segwit Output Script Descriptors\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-non-segwit\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>pk()</tt>, <tt>pkh()</tt>, and <tt>sh()</tt>\noutput script descriptors.\n<tt>pk()</tt> descriptors take a key and produces a P2PK output script.\n<tt>pkh()</tt> descriptors take a key and produces a P2PKH output script.\n<tt>sh()</tt> descriptors take a script and produces a P2SH output script.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nPrior to the activation of Segregated Witness, there were 3 main\nstandard output script formats: P2PK, P2PKH, and P2SH.\nThese expressions allow specifying those formats as a descriptor.\n\n==Specification==\n\nThree new script expressions are defined: <tt>pk()</tt>, <tt>pkh()</tt>,\nand <tt>sh()</tt>.\n\n===<tt>pk()</tt>===\n\nThe <tt>pk(KEY)</tt> expression can be used in any context or level of a\ndescriptor.\nIt takes a single key expression as an argument and produces a P2PK\noutput script.\nDepending on the higher level descriptors, there may be restrictions on\nthe type of public keys that can be included.\nSuch restrictions will be specified by those descriptors.\n\nThe output script produced is:\n<pre>\n<KEY> OP_CHECKSIG\n</pre>\n\n===<tt>pkh()</tt>===\n\nThe <tt>pkh(KEY)</tt> expression can be used as a top level expression,\nor inside of either a <tt>sh()</tt> or <tt>wsh()</tt> descriptor.\nIt takes a single key expression as an argument and produces a P2PKH\noutput script.\nDepending on the higher level descriptors, there may be restrictions on\nthe type of public keys that can be included.\nSuch restrictions will be specified by those descriptors.\n\nThe output script produced is:\n<pre>\nOP_DUP OP_HASH160 <KEY_hash160> OP_EQUALVERIFY OP_CHECKSIG\n</pre>\n\n===<tt>sh()</tt>===\n\nThe <tt>sh(SCRIPT)</tt> expression can only be used as a top level\nexpression.\nIt takes a single script expression as an argument and produces a P2SH\noutput script.\n<tt>sh()</tt> expressions also create a redeemScript which is required\nin order to spend outputs which use its output script.\nThis redeemScript is the output script produced by the <tt>SCRIPT</tt>\nargument to <tt>sh()</tt>.\n\nThe output script produced is:\n<pre>\nOP_HASH160 <SCRIPT_hash160> OP_EQUAL\n</pre>\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>pk()</tt>, <tt>pkh()</tt>, and <tt>sh()</tt> descriptors use the\nformat and general operation specified in\n[[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs these are a wholly new descriptors, they are not compatible with any\nimplementation.\nHowever the scripts produced are standard scripts so existing software\nare likely to be familiar with them.\n\n==Reference Implemntation==\n\n<tt>pk()</tt>, <tt>pkh()</tt>, and <tt>sh()</tt> descriptors have been\nimplemented in Bitcoin Core since version 0.17.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-tr\n \u00a0 Layer: Applications\n \u00a0 Title: tr() Output Script Descriptors\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-tr\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>tr()</tt> output script descriptors.\n<tt>tr()</tt> descriptors take a key and optionally a tree of scripts\nand produces a P2TR output script.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nTaproot added one additional standard output script format: P2TR.\nThese expressions allow specifying those formats as a descriptor.\n\n==Specification==\n\nA new script expressions are defined: <tt>tr()</tt>.\nA new expression is defined: Tree Expressions\n\n===Tree Expression===\n\nA Tree Expression (denoted <tt>TREE</tt>) is an expression which\nrepresents a tree of scripts.\nThe way the tree is represented in an output script is dependent on the\nhigher level expressions.\n\nA Tree Expression is:\n* Any Script Expression that is allowed at the level this Tree\nExpression is in.\n* A pair of Tree Expressions consisting of:\n** An open brace <tt>{</tt>\n** A Tree Expression\n** A comma <tt>,</tt>\n** A Tree Expression\n** A closing brance <tt>}</tt>\n\n===<tt>tr()</tt>===\n\nThe <tt>tr(KEY)</tt> or <tt>tr(KEY, TREE)</tt> expression can only be\nused as a top level expression.\nAll key expressions under any <tt>tr()</tt> expression must create\nx-only public keys.\n\n<tt>tr(KEY</tt> takes a single key expression as an argument and\nproduces a P2TR output script which does not have a script path.\nThe keys produced by the key expression are used as the internal key as\nspecified by [[bip-0341.mediawiki#cite_ref-22-0|BIP 341]].\nSpecifically, \"If the spending conditions do not require a script path,\nthe output key should commit to an unspendable script path instead of\nhaving no script path.\nThis can be achieved by computing the output key point as ''Q = P +\nint(hash<sub>TapTweak</sub>(bytes(P)))G''.\"\n\n<pre>\ninternal_key:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lift_x(KEY)\n32_byte_output_key: internal_key + int(HashTapTweak(bytes(internal_key)))G\nscriptPubKey:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OP_1 <32_byte_output_key>\n</pre>\n\n<tt>tr(KEY, TREE)</tt> takes a key expression as the first argument, and\na tree expression as the second argument and produces a P2TR output\nscript which has a script path.\nThe keys produced by the first key expression are used as the internal\nkey as specified by\n[[bip-0341.mediawiki#Constructing_and_spending_Taproot_outputs|BIP 341]].\nThe Tree expression becomes the Taproot script tree as described in BIP 341.\nA merkle root is computed from this tree and combined with the internal\nkey to create the Taproot output key.\n\n<pre>\ninternal_key:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 lift_x(KEY)\nmerkle_root:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 HashTapBranch(TREE)\n32_byte_output_key: internal_key + int(HashTapTweak(bytes(internal_key)\n|| merkle_root))G\nscriptPubKey:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OP_1 <32_byte_output_key>\n</pre>\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>tr()</tt> descriptors use the format and general operation specified\nin [[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs these are a wholly new descriptors, they are not compatible with any\nimplementation.\nHowever the scripts produced are standard scripts so existing software\nare likely to be familiar with them.\n\nTree Expressions are largely incompatible with existing script\nexpressions due to the restrictions in those expressions.\nAs of 2021-06-27, the only allowed script expression that can be used in\na tree expression is <tt>pk()</tt>.\nHowever there will be future BIPs that specify script expressions that\ncan be used in tree expressions.\n\n==Reference Implemntation==\n\n<tt>tr()</tt> descriptors have been implemented in Bitcoin Core since\nversion 22.0.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-multi\n \u00a0 Layer: Applications\n \u00a0 Title: Multisig Output Script Descriptors\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-multi\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>multi()</tt>, and <tt>sortedmulti()</tt>\noutput script descriptors.\nBoth functions take a threshold and one or more public keys and produce\na multisig output script.\n<tt>multi()</tt> specifies the public keys in the output script in the\norder given in the descriptor while <tt>sortedmulti()</tt> sorts the\npublic keys lexicographically when the output script is produced.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nThe most common complex script used in Bitcoin is a threshold multisig.\nThese expressions allow specifying multisig scripts as a descriptor.\n\n==Specification==\n\nTwo new script expressions are defined: <tt>multi()</tt>, and\n<tt>sortedmulti()</tt>.\nBoth expressions produce the scripts of the same template and take the\nsame arguments.\nThey are written as <tt>multi(k,KEY_1,KEY_2,...,KEY_n)</tt>.\n<tt>k</tt> is the threshold - the number of keys that must sign the\ninput for the script to be valid.\n<tt>KEY_1,KEY_2,...,KEY_n</tt> are the key expressions for the multisig.\n<tt>k</tt> must be less than or equal to <tt>n<tt>.\n\n<tt>multi()</tt> and <tt>sortedmulti()</tt> expressions can be used as a\ntop level expression, or inside of either a <tt>sh()</tt> or\n<tt>wsh()</tt> descriptor.\nDepending on the higher level descriptors, there may be restrictions on\nthe type of public keys that can be included.\n\nDepending on the higher level descriptors, there are also restrictions\non the number of keys that can be present, i.e. the maximum value of\n<tt>n</tt>.\nWhen used at the top level, there can only be at most 3 keys.\nWhen used inside of a <tt>sh()</tt> expression, there can only be most\n15 compressed public keys (this is limited by the P2SH script limit).\nOtherwise the maximum number of keys is 20.\n\nThe output script produced also depends on the value of <tt>k</tt>. If\n<tt>k</tt> is less than or equal to 16:\n<pre>\nOP_k KEY_1 KEY_2 ... KEY_n OP_CHECKMULTISIG\n</pre>\n\nif <tt>k</tt> is greater than 16:\n<pre>\nk KEY_1 KEY_2 ... KEY_n OP_CHECKMULTISIG\n</pre>\n\n===<tt>sortedmulti()</tt>===\n\nThe only change for <tt>sortedmulti()</tt> is that the keys are sorted\nlexicographically prior to the creation of the output script.\nThis sorting is on the keys that are to be put into the output script,\ni.e. after all extended keys are derived.\n\n===Multiple Extended Keys</tt>===\n\nWhen one or more the key expressions in a <tt>multi()</tt> or\n<tt>sortedmulti()</tt> expression are extended keys, the derived keys\nuse the same child index.\nThis changes the keys in lockstep and allows for output scripts to be\nindexed in the same way that the derived keys are indexed.\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>multi()</tt>, and <tt>sortedmulti()</tt> descriptors use the format\nand general operation specified in\n[[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs these are a wholly new descriptors, they are not compatible with any\nimplementation.\nHowever the scripts produced are standard scripts so existing software\nare likely to be familiar with them.\n\n==Reference Implemntation==\n\n<tt>multi()</tt>, and <tt>multi()</tt> descriptors have been implemented\nin Bitcoin Core since version 0.17.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-combo\n \u00a0 Layer: Applications\n \u00a0 Title: combo() Output Script Descriptors\n \u00a0 Author: Pieter Wuille <pieter at wuille.net>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Andrew Chow <andrew at achow101.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-combo\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>combo()</tt> output script descriptors.\nThese take a key and produce P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output\nscripts if applicable to the key.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nIn order to make the transition from traditional key based wallets to\ndescriptor based wallets easier, it is useful to be able to take a key\nand produce the scripts which have traditionally been produced by wallet\nsoftware.\n\n==Specification==\n\nA new top level script expression is defined: <tt>combo(KEY)</tt>.\nThis expression can only be used as a top level expression.\nIt takes a single key expression as an argument and produces either 2 or\n4 output scripts, depending on the key.\nA <tt>combo()</tt> expression always produces a P2PK and P2PKH script,\nthe same as putting the key in both a <tt>pk()</tt> and a <tt>pkh()</tt>\nexpression.\nIf the key is/has a compressed public key, then P2WPKH and P2SH-P2WPKH\nscripts are also produced, the same as putting the key in both a\n<tt>wpkh()</tt> and <tt>sh(wpkh())</tt> expression.\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>combo()</tt> descriptors use the format and general operation\nspecified in [[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs this is a wholly new descriptor, it is not compatible with any\nimplementation.\nHowever the scripts produced are standard scripts so existing software\nare likely to be familiar with them.\n\n==Reference Implemntation==\n\n<tt>combo</tt> descriptors have been implemented in Bitcoin Core since\nversion 0.17.\n\n---\n\n<pre>\n \u00a0 BIP: bip-descriptors-encap\n \u00a0 Layer: Applications\n \u00a0 Title: raw() and addr() Output Script Descriptors\n \u00a0 Author: Andrew Chow <andrew at achow101.com>\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Pieter Wuille <pieter at wuille.net>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI:\nhttps://github.com/bitcoin/bips/wiki/Comments:BIP-descriptors-raw\n \u00a0 Status: Draft\n \u00a0 Type: Informational\n \u00a0 Created: 2021-06-27\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis document specifies <tt>raw()</tt> and <tt>addr()</tt> output script\ndescriptors.\n<tt>raw()</tt> encapsulates a raw script as a descriptor.\n<tt>addr()</tt> encapsulates an address as a descriptor.\n\n==Copyright==\n\nThis BIP is licensed under the BSD 2-clause license.\n\n==Motivation==\n\nIn order to make descriptors maximally compatible with scripts in use\ntoday, it is useful to be able to wrap any arbitrary output script or an\naddress into a descriptor.\n\n==Specification==\n\nTwo new script expressions are defined: <tt>raw()</tt> and <tt>addr()</tt>.\n\n===<tt>raw()</tt>===\n\nThe <tt>raw(HEX)</tt> expression can only be used as a top level descriptor.\nAs the argument, it takes a hex string representing a Bitcoin script.\nThe output script produced by this descriptor is the script represented\nby <tt>HEX</tt>.\n\n===<tt>addr()</tt>===\n\nThe <tt>addr(ADDR)</tt> expression can only be used as a top level\ndescriptor.\nIt takes an address as its single argument.\nThe output script produced by this descriptor is the output script\nproduced by the address <tt>ADDR</tt>.\n\n==Test Vectors==\n\nTBD\n\n==Backwards Compatibility==\n\n<tt>raw()</tt> and <tt>addr()</tt> descriptors use the format and\ngeneral operation specified in\n[[bip-descriptor-general.mediawiki|bip-descriptor-general]].\nAs this is a wholly new descriptor, it is not compatible with any\nimplementation.\nThe reuse of existing Bitcoin addresses allows for this to be more\neasily implemented.\n\n==Reference Implemntation==\n\n<tt>raw()</tt> and <tt>addr</tt> descriptors have been implemented in\nBitcoin Core since version 0.17."
            },
            {
                "author": "Christopher Allen",
                "date": "2021-06-29T22:22:39",
                "message_text_only": "Are there any plans other than `raw` to support time locks in descriptors?\n\nAny plans for descriptors offering closer integration with miniscript?\n\nAll of Blockchain Commons libraries and tools are multisig descriptor\ncentric, and there are many scenarios that require describing time locks:\n\n   - [Designing Multisig for Independence & Resilience](\n   https://github.com/BlockchainCommons/Gordian/blob/master/Docs/Multisig.md\n   )\n\n\u2014 Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/72658551/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2021-06-29T22:35:49",
                "message_text_only": "On 6/29/21 6:22 PM, Christopher Allen wrote:\n\n> Are there any plans other than `raw` to support time locks in descriptors?\n>\n> Any plans for descriptors offering closer integration with miniscript?\n\nI expect miniscript to be a followup BIP that extends these descriptors. Miniscript has timelock functionality.\n\nAndrew\n\n> All of Blockchain Commons libraries and tools are multisig descriptor centric, and there are many scenarios that require describing time locks:\n>\n> - [Designing Multisig for Independence & Resilience](https://github.com/BlockchainCommons/Gordian/blob/master/Docs/Multisig.md)\n>\n> \u2014 Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210629/24532e70/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Proposals for Output Script Descriptors",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Chow",
                "Christopher Allen"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 31233
        }
    }
]