[
    {
        "title": "[Bitcoin-development] BIP16/17 replacement",
        "thread_messages": [
            {
                "author": "Andy Parkins",
                "date": "2012-02-01T09:46:31",
                "message_text_only": "On 2012 January 31 Tuesday, Gregory Maxwell wrote:\n\n> I think you've been deceived by people who have some interest in\n> promoting this as some sort of big controversy, or perhaps just\n> confused by the general level of noise.\n\nWell that's good that there is no real problem.\n\n> It does not, in fact\u2014 Yes, it requires a client update to make use of\n> the new functionality, but old nodes will happily continue to validate\n> things.  It's hard to express how critical this is distinctly.\n> Bitcoin is, predominantly, a zero-trust system. Nodes don't trust that\n> things were done right, the validate them for themselves.\n> \n> A breaking change of the kind you suggest is not something that would\n> be considered lightly, and this is certainly not justified for this.\n\nTo be brutally honest; I don't see how the BIP16/17 changes are any less \n\"breaking\" than what I proposed (I'm not trying to push mine; forget it, the \nlast thing bitcoin needs is another proposal if there is no real argument).  \nI will agree the changes are smaller for BIP16, since the transactions are \nleft as they are.\n\nIf BIP16/BIP17 were being honest they would too increase the version number \nof the transaction structure.  The new transaction type is not supported by \nthe old client... that's a break.  My argument would be that once you're \ngoing to break the old clients anyway, go the whole hog and fix some other \nstuff as well.\n\n> If we ever were to scrap the system, I think we very much would do\n> something like what you describe here... and as much has been\n> documented:\n> \n> https://en.bitcoin.it/wiki/Hardfork_Wishlist\n> (see \"Elimination of output scripts\")\n\nI'm glad I wasn't talking rubbish then.\n \n> But, to be clear, this stuff is pretty much fantasy. I'm doubtful that\n> it will ever happen, doubtful that we can get the kind of development\n\nMe too.  Which is a shame; as it means we're locked into quite a fair number \nof earlier decisions that will now never be changed.\n\n> resources required to pull off a true breaking change in a way that\n> people would actually trust upgrading to\u2014 at least not before a time\n> that the system is simply too big to make that kind of change.\n\nAgain: I don't see how BIP16/17 aren't \"breaking\" as well; but perhaps I'm \njust not familiar enough with the conventions.  As far as I understand; no \npre-BIP16 miner is going to allow BIP16 into the blockchain because it's not \ngoing to pass the IsStandard() test.\n\nI'd repeat: the reasonable thing to do is to increase the version number of \nthe transaction structure to indicate that they are being processed \ndifferently from old transactions.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/1fd55c20/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-02-01T09:48:13",
                "message_text_only": "On 2012 January 31 Tuesday, Luke-Jr wrote:\n\n> Both BIP 16 and 17 are backward compatible enough that people can continue\n> to use the old clients with each other. An upgrade is only required to\n> send to (or create/receive on) the new 3...-form addresses. That being\n\nIs that true?  (I'm happy to be called wrong)\n\nIt doesn't seem like it to me.  The new transaction types will be rejected by \nold clients won't they?  They don't pass IsStandard().\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/bde45eae/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-01T10:02:08",
                "message_text_only": "Op 1 feb. 2012 10:48 schreef \"Andy Parkins\" <andyparkins at gmail.com> het\nvolgende:\n>\n> On 2012 January 31 Tuesday, Luke-Jr wrote:\n>\n> > Both BIP 16 and 17 are backward compatible enough that people can\ncontinue\n> > to use the old clients with each other. An upgrade is only required to\n> > send to (or create/receive on) the new 3...-form addresses. That being\n>\n> Is that true?  (I'm happy to be called wrong)\n>\n> It doesn't seem like it to me.  The new transaction types will be\nrejected by\n> old clients won't they?  They don't pass IsStandard().\n\nIsStandard() is for accepting transactions into the memory pool.\nNon-standard transactions are verified just fine when they are in the block\nchain.\n\nBIP16/17 both create transactions that, when interpreted as old scripts,\nare valid. The only change to the protocol is that previously-valid\ntransactions become invalid. As long as a supermajority of miners enforce\nthe new rules, everyone can happily keep using their old bitcoin client.\nThey won't create the new transaction type, and don't accept them as\npayment, but they will accept the new block chain.\n\nIf we do a breaking change to the protocol - such as adding a new\ntransaction type - ALL users must upgrade. Those who don't will see a fork\nof the chain from before the first new-style transaction. That is not the\ncase now.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/a20b0ba6/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-02-01T10:25:19",
                "message_text_only": "On 2012 February 01 Wednesday, Pieter Wuille wrote:\n\n> > old clients won't they?  They don't pass IsStandard().\n> \n> IsStandard() is for accepting transactions into the memory pool.\n> Non-standard transactions are verified just fine when they are in the block\n> chain.\n\nAh.  My misunderstanding then.\n \n> If we do a breaking change to the protocol - such as adding a new\n> transaction type - ALL users must upgrade. Those who don't will see a fork\n> of the chain from before the first new-style transaction. That is not the\n> case now.\n\nThat makes a big difference.  Thanks for the correction.\n\n\nAndy\n\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/a82fe52c/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-02-01T14:14:08",
                "message_text_only": "On 2012 January 31 Tuesday, Andy Parkins wrote:\n\n>  - Increase the version number in transactions to make a new transaction\n>    structure\n>  - Dump the \"scriptPubKey\" field completely.  Everything will be pay-to-\n>    script-hash in version2 transactions\n>  - Replace it with \"hashOfClaimingScript\"\n>  - Add an \"unsignedParameters\" array.\n\nHaving thought about it; I've realised that the above is simply BIP16 without \nthe backward compatibility work in it.  If BIP16 renamed the scriptPubKey \nfield to \"hashOfClaimingScript\" and no longer ran it as a script, it woudl be \nclose to identical.  We'd simply define the field as\n\n 0xa9 0x14 <hashOfClaimingScript> 0x87\n\nDetection of this format of scriptPubKey activates \"version2\" processing of \nthe transaction.  And similarly, a new definition of scriptSig to be two \nfields:\n\n   unsignedInitialStackBlock\n   scriptClaim\n\nI'm sure nobody cares about my opinion; but that's actually been the moment \nof epiphany for me (and I raise it here, in case it is for someone else).  \nHaving previously been against BIP16, I'm now happy with BIP16 -- it's a \nprogression towards the ideal... having a literal claimScriptHash field \ninstead of scriptPubKey; and never running scriptPubKey.\n\nPotentially OP_CHECKSIG could be simplified as well because the rules could \nbe \"anything that's not the serialized script\" in scriptSig is not signed.\n\nI can imagine one day, when the network is all BIP16 compliant, that \nscriptPubKey will no longer be allowed to run as script at all.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/c2cd486b/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP16/17 replacement",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Andy Parkins"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 8127
        }
    },
    {
        "title": "[Bitcoin-development] Announcement: libcoin",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T14:18:32",
                "message_text_only": "Dear Bitcoiners,\n\nlibcoin is now in a state ready for its first release, which I would like to share with you!\n\n=== libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n\nCopenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n\nlibcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n\nThe libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n\nIn libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n\nlibcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n\nThe build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n\nThe libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n\n======\n\nRead more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n\nJoin libcoin on twitter: http://twitter.com/libcoin\n\nDownload \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n\nBest regards,\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-02-01T14:59:38",
                "message_text_only": "On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n\nVery interesting. Do you know where this speedup came from?  It's not\ntypical for straight refactors that don't change datastructures and\nthe like to see such big speedups.\n\nI see you have commented out code that disables fsync, which was my\nfirst guess since I get big speedups from doing similar things."
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T15:50:46",
                "message_text_only": "Hi Gregory,\n\nI played with the database sync as well to get further speedups, but in the latest version I could only get about 1% extra from this. \n\nIn the Satoshi client there is a bunch of sleeps and mutexes (put in there with great generosity)  for making threads run smoother and to avoid deadlock I guess.\n\nThe big change in speed came from moving from the threading based setup to the async based setup, so I think these are the culprit. Further, as I also write somewhere in the wiki. I can measure that 50% of the time is consumed in verify, so there is not much left to optimize now. Actually, Berkeley DB does a quite decent job in caching reads so not even a cache should help.\n\nCheers,\n\nM\n\nOn 01/02/2012, at 15:59, Gregory Maxwell wrote:\n\n> On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> Very interesting. Do you know where this speedup came from?  It's not\n> typical for straight refactors that don't change datastructures and\n> the like to see such big speedups.\n> \n> I see you have commented out code that disables fsync, which was my\n> first guess since I get big speedups from doing similar things.\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-02-01T16:06:13",
                "message_text_only": "Sounds great.\nDoes it support merged mining?\nAlso, I'm a bit skeptic about it being chain agnostic. I want to\nimplement a chain with demurrage and I think I'll need to also change\ncoinWallet and not only create an implementation of the interface\nChain.\nAnyway, this will make the task much easier. Thank you.\nUntil I have the time to code it, there's a little bounty (7.3 btc)\nfor this in case you're interested."
            },
            {
                "author": "Wladimir",
                "date": "2012-02-01T15:02:41",
                "message_text_only": "Sounds very nice. Congratulations with the release!\n\nAny plans for porting over bitcoin-qt?\n\nWladimir\nOp 1 feb. 2012 15:19 schreef \"Michael Gr\u00f8nager\" <gronager at ceptacle.com> het\nvolgende:\n\n> Dear Bitcoiners,\n>\n> libcoin is now in a state ready for its first release, which I would like\n> to share with you!\n>\n> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n>\n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of\n> the first version of the crypto currency library \"libcoin\" based on the\n> bitcoin/bitcoin \"Satoshi\" client.\n>\n> libcoin also maintains a version of bitcoind that is a 100% compatible\n> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n> same computer on the same files and you can call it with the same scripts.\n> And you can easily extend it without touching the basic bitcoin source\n> files.\n>\n> The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\n>\n> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n>\n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n>\n> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n>\n> The libcoin license is LGPL v. 3. This mean that you can use it in open\n> source as well as in commercial projects, but improvements should go back\n> into the libcoin library.\n>\n> ======\n>\n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>\n> Join libcoin on twitter: http://twitter.com/libcoin\n>\n> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>\n> Best regards,\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/50680bfc/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T15:52:15",
                "message_text_only": "Well, it should be simple. libcoin separates all the stuff you would like to do from a gui from the actual code, so I think it could be done cleanly. I havn't looked much at qt though... But help would be appreciated ;)\n\n/M\n\nOn 01/02/2012, at 16:02, Wladimir wrote:\n\n> Sounds very nice. Congratulations with the release!\n> \n> Any plans for porting over bitcoin-qt?\n> \n> Wladimir\n> \n> Op 1 feb. 2012 15:19 schreef \"Michael Gr\u00f8nager\" <gronager at ceptacle.com> het volgende:\n> Dear Bitcoiners,\n> \n> libcoin is now in a state ready for its first release, which I would like to share with you!\n> \n> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> \n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> \n> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> \n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> \n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> \n> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> \n> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> \n> ======\n> \n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> \n> Join libcoin on twitter: http://twitter.com/libcoin\n> \n> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> \n> Best regards,\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "slush",
                "date": "2012-02-01T15:09:58",
                "message_text_only": "Very interesting. Do you have any plans to push your refactored code into\nBitcoin upstream for future releases someday?\n\nslush\n\nOn Wed, Feb 1, 2012 at 3:18 PM, Michael Gr\u00f8nager <gronager at ceptacle.com>wrote:\n\n> Dear Bitcoiners,\n>\n> libcoin is now in a state ready for its first release, which I would like\n> to share with you!\n>\n> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n>\n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of\n> the first version of the crypto currency library \"libcoin\" based on the\n> bitcoin/bitcoin \"Satoshi\" client.\n>\n> libcoin also maintains a version of bitcoind that is a 100% compatible\n> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n> same computer on the same files and you can call it with the same scripts.\n> And you can easily extend it without touching the basic bitcoin source\n> files.\n>\n> The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\n>\n> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n>\n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n>\n> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n>\n> The libcoin license is LGPL v. 3. This mean that you can use it in open\n> source as well as in commercial projects, but improvements should go back\n> into the libcoin library.\n>\n> ======\n>\n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>\n> Join libcoin on twitter: http://twitter.com/libcoin\n>\n> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>\n> Best regards,\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/da513105/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T15:57:32",
                "message_text_only": "Would be fine for me, depends on the community, and it is one of those chunks that make many stall...\n\nThe reason for building on bitcoin/bitcoin directly is that this created a history of all changes, and this way I had a working version running each day while doing the refactoring - with my wallet at stake!\n\nHowever, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.\n\nCheers,\n\nM\n\nOn 01/02/2012, at 16:09, slush wrote:\n\n> Very interesting. Do you have any plans to push your refactored code into Bitcoin upstream for future releases someday?\n> \n> slush\n> \n> On Wed, Feb 1, 2012 at 3:18 PM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Dear Bitcoiners,\n> \n> libcoin is now in a state ready for its first release, which I would like to share with you!\n> \n> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> \n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> \n> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> \n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> \n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> \n> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> \n> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> \n> ======\n> \n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> \n> Join libcoin on twitter: http://twitter.com/libcoin\n> \n> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> \n> Best regards,\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "grarpamp",
                "date": "2012-02-01T23:50:57",
                "message_text_only": "> However, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.\n\nI'll be trying your implementation soon. And libbitcoin/subvertx too.\nPartly because they're also non-interpreted, and partly to what seems\nbetter architected...\n\nTo the minimal extent of my understanding... I'd like to see wallet\nops completely separated from background chain ops. ie: have\na chain daemon doing it's thing, updating, verifying, etc. The\ngenerator doing it's thing. And a wallet app that can independently\nmanage separate wallets in parallel, referencing the live chain files\nas needed. It seems a library would allow quality focus on the separate\nfunctions and let apps/ui's use the fn's as desired on top. Right now, it\nseems I have to run bitcoind and can only deal with one wallet at a time,\nhaving to stop it, deal with state issues, swap in a new wallet, start\nit, and repeat till illness ensues :( And when the chain is being processed\nhard by the daemon cpuwise, bitcoin RPC takes minutes to respond, if ever\nor errors out. If wallet ops or statistical queries on the chain need it for\nintegrity or reading, a db checkpoint/lock/logroll could be implemented into\nthe chain demon processes with a client lib api to trigger it as needed.\nDon't know, just saying.\n\nfyi... boost 1.48 and db 4.8.30 work fine with 0.5.2, 0.5.x, and master,\nyou just need to compile and include it by hand if you want it and\nyour package manager doesn't have it."
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-02T08:32:24",
                "message_text_only": "I agree on your architectural considerations - and with libcoin you can have several wallets in the same application ( and several RPC servers for that matter). And ... they all use the same Node / blockchain.\n\nYou will also find the RPC server in libcoin blistering fast compared to the Satoshi client. (It was actually what got me to write libcoin in the first place...). The Satoshi client HTTP server executes all rpc commands in its own thread, but to do so, it needs to stop the thread of the Node, even though the command executed is just a query (i.e. not a SendTo), you hence have two threads blocking each other and when they wait, you wait... In libcoin all the query methods access the blockChain as a const object and they can hence safely query it without intervening the work of the Node thread. The exception are the SendTo methods that first query if a transaction can take place, then pushes it to the work-queue of the Node thread and again exits immediately. The actual execution then follows once the Node has finished its current tasks (e.g. validating a block).\n\nI have attached the code for a very simple one node, two wallet, libcoin client below (~30 lines), and I have added it to the libcoin source as an example (example name: extrawallets).\n\nOnce running, you can access your extra wallet using the RPC interface:\n./extrawallet extragetbalance\nAnd youy normal wallet by:\n./extrawallet getbalance\n\nI'll leave the generalization to an n-wallet gui application to the reader ;)\n\nCheers,\n\nMichael\n\n....\n\n// The derived classes below are only to get other class names (using the auto rpc name feature)\n// I will put adding a \"setName\" method to the Method class on the todo. \nclass ExtraGetBalance : public GetBalance {\npublic:\n   ExtraGetBalance(Wallet& wallet) : GetBalance(wallet) {}\n};\nclass ExtraSendToAddress : public GetBalance {\npublic:\n   ExtraSendToAddress(Wallet& wallet) : GetBalance(wallet) {}\n};\n\nint main(int argc, char* argv[])\n{    \n   logfile = CDB::dataDir(bitcoin.dataDirSuffix()) + \"/debug.log\";\n\n   Node node; // deafult chain is bitcoin\n\n   Wallet wallet(node, \"wallet.dat\"); // add the wallet\n   Wallet extra_wallet(node, \"extra_wallet.dat\"); // add the extra wallet\n\n   thread nodeThread(&Node::run, &node); // run this as a background thread\n\n   Server server;\n\n   // Register Server methods.\n   server.registerMethod(method_ptr(new Stop(server)));\n\n   // Register Node methods.\n   server.registerMethod(method_ptr(new GetBlockCount(node)));\n   server.registerMethod(method_ptr(new GetConnectionCount(node)));\n   server.registerMethod(method_ptr(new GetDifficulty(node)));\n   server.registerMethod(method_ptr(new GetInfo(node)));\n\n   // Register Wallet methods. - note that we don't have any auth, so anyone (on localhost) can read your balance!\n   server.registerMethod(method_ptr(new GetBalance(wallet)));\n   server.registerMethod(method_ptr(new SendToAddress(wallet)), Auth(\"username\",\"password\"));\n   server.registerMethod(method_ptr(new ExtraGetBalance(wallet)));\n   server.registerMethod(method_ptr(new ExtraSendToAddress(wallet)), Auth(\"username\",\"password\"));\n   server.run();\n\n   node.shutdown();\n   nodeThread.join();\n}\n\n\nOn 02/02/2012, at 00:50, grarpamp wrote:\n\n>> However, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.\n> \n> I'll be trying your implementation soon. And libbitcoin/subvertx too.\n> Partly because they're also non-interpreted, and partly to what seems\n> better architected...\n> \n> To the minimal extent of my understanding... I'd like to see wallet\n> ops completely separated from background chain ops. ie: have\n> a chain daemon doing it's thing, updating, verifying, etc. The\n> generator doing it's thing. And a wallet app that can independently\n> manage separate wallets in parallel, referencing the live chain files\n> as needed. It seems a library would allow quality focus on the separate\n> functions and let apps/ui's use the fn's as desired on top. Right now, it\n> seems I have to run bitcoind and can only deal with one wallet at a time,\n> having to stop it, deal with state issues, swap in a new wallet, start\n> it, and repeat till illness ensues :( And when the chain is being processed\n> hard by the daemon cpuwise, bitcoin RPC takes minutes to respond, if ever\n> or errors out. If wallet ops or statistical queries on the chain need it for\n> integrity or reading, a db checkpoint/lock/logroll could be implemented into\n> the chain demon processes with a client lib api to trigger it as needed.\n> Don't know, just saying.\n> \n> fyi... boost 1.48 and db 4.8.30 work fine with 0.5.2, 0.5.x, and master,\n> you just need to compile and include it by hand if you want it and\n> your package manager doesn't have it.\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Craig B Agricola",
                "date": "2012-02-02T11:34:24",
                "message_text_only": "On Thu, Feb 02, 2012 at 09:32:24AM +0100, Michael Gr?nager wrote:\n> \n>    // Register Wallet methods. - note that we don't have any auth, so anyone (on localhost) can read your balance!\n>    server.registerMethod(method_ptr(new GetBalance(wallet)));\n>    server.registerMethod(method_ptr(new SendToAddress(wallet)), Auth(\"username\",\"password\"));\n>    server.registerMethod(method_ptr(new ExtraGetBalance(wallet)));\n>    server.registerMethod(method_ptr(new ExtraSendToAddress(wallet)), Auth(\"username\",\"password\"));\n>    server.run();\n\nThis should probably be\n\n*    server.registerMethod(method_ptr(new ExtraGetBalance(extrawallet)));\n*    server.registerMethod(method_ptr(new ExtraSendToAddress(extrawallet)), Auth(\"username\",\"password\"));\n\nright?  Easy to miss if both wallets were empty in your quick test...  Awesome job with libcoin, BTW!\n\n -Craig"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-03T00:19:02",
                "message_text_only": "> You will also find the RPC server in libcoin blistering fast compared to\nthe Satoshi client. (It was actually what got me to write libcoin in the\nfirst place...). The Satoshi client HTTP server executes all rpc commands\nin its own thread, but to do so, it needs to stop the thread of the Node,\neven though the command executed is just a query (i.e. not a SendTo), you\nhence have two threads blocking each other and when they wait, you wait...\nIn libcoin all the query methods access the blockChain as a const object\nand they can hence safely query it without intervening the work of the Node\nthread. The exception are the SendTo methods that first query if a\ntransaction can take place, then pushes it to the work-queue of the Node\nthread and again exits immediately. The actual execution then follows once\nthe Node has finished its current tasks (e.g. validating a block).\n\nHello Michael,\n\nI'm impressed by your refactorings, and hope some of them can make it into\nthe Satoshi codebase. I am however not sure what you've said above is safe.\nIn particular, how do you guarantee that no other thread modifies the\nblockchain structure while you are performing your query on it? Does the\nquery code operate on a const copy of the structure, or is there guaranteed\nonly one thread accessing it?\n\nI've been thinking about moving to read-write locks that allow multiple\nthreads reading the datastructure simultaneously, but removing the locking\nall together sounds wrong to me.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120203/270a6572/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-03T09:52:22",
                "message_text_only": "> Hello Michael,\n> \n> I'm impressed by your refactorings, and hope some of them can make it into the Satoshi codebase.\n\nThanks:)\n\n>  I am however not sure what you've said above is safe. In particular, how do you guarantee that no other thread modifies the blockchain structure while you are performing your query on it? Does the query code operate on a const copy of the structure, or is there guaranteed only one thread accessing it?\n\nThe BlockChain class encapsulates all access to the blockchain and only give you access to certain restricted queries on the chain. Actually that was the case already in the satoshi client, I have only tried to formalize and encapsulate these queries in the code instead of having all the code poking around directly in the database and the blockfile.\n\nI should note that the database still keeps a mutex to protect reads from writes.\n\nI agree that constness alone does not guarantee thread safety, it is one of the things to use to get there. Great care should be taken not to read a value that is being changed at the same time, at least if that will render the result unusable.\n\nThe list of allowed queries are the const public methods of BlockChain. Some examples :\n1.    bool isSpent(Coin coin) const;\n2.    int getNumSpent(uint256 hash) const ;\n3.    uint256 spentIn(Coin coin) const;\n\n    /// Check if the hash of a block belongs to a block in the main chain:\n4.    bool isInMainChain(const uint256 hash) const;\n    \n    /// Get the best height\n5.    int getBestHeight() const { return _bestIndex->nHeight; }\n\nOr e.g.:\n6.    void getBlock(const uint256 hash, Block& block) const;\n\n1-3. can be used to check if a COutPoint (now Coin) has been spent etc... This will only generate sane results, even if the two threads are both active on the same data structures.\nSame goes for 4. and 6. copies a block from the block file to the Block& provided so no issues here either. \n\nI do, however, admit, that an extra review of all the public const methods would be wise, to ensure that I have not overlooked something. I'll open an issue on this and use a cold winter night on looking them over again.\n\nCheers,\n\nMichael\n\n\n> \n> I've been thinking about moving to read-write locks that allow multiple threads reading the datastructure simultaneously, but removing the locking all together sounds wrong to me.\n> \n> -- \n> Pieter\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-01T15:26:45",
                "message_text_only": "On Wednesday, February 01, 2012 9:18:32 AM Michael Gr\u00f8nager wrote:\n> libcoin is now in a state ready for its first release, which I would like\n> to share with you!\n\nLooks interesting. However, it doesn't configure for me:\n    http://paste.pocoo.org/show/544135/\n\nI noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?\n\nLuke"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T15:58:28",
                "message_text_only": "Hi Luke,\n\nYour CMake cannot find boost - use ccmake or cmake-gui to help it with the location. Btw what platform are you using ?\n\n/M\n\nOn 01/02/2012, at 16:26, Luke-Jr wrote:\n\n> On Wednesday, February 01, 2012 9:18:32 AM Michael Gr\u00f8nager wrote:\n>> libcoin is now in a state ready for its first release, which I would like\n>> to share with you!\n> \n> Looks interesting. However, it doesn't configure for me:\n>    http://paste.pocoo.org/show/544135/\n> \n> I noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?\n> \n> Luke\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-01T16:15:14",
                "message_text_only": "On Wednesday, February 01, 2012 10:58:28 AM Michael Gr\u00f8nager wrote:\n> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the\n> location.\n\nI didn't see anything useful in ccmake. Boost is in the standard locations \n(/usr/include/boost/ and /usr/lib/libboost*\n\n> Btw what platform are you using ?\n\nGentoo"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T16:21:09",
                "message_text_only": "Just wrote it in another mail, but I am quite certain it is the boost version - you need 1.48 (or 1.47).\n\n/M\n\nOn 01/02/2012, at 17:15, Luke-Jr wrote:\n\n> On Wednesday, February 01, 2012 10:58:28 AM Michael Gr\u00f8nager wrote:\n>> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the\n>> location.\n> \n> I didn't see anything useful in ccmake. Boost is in the standard locations \n> (/usr/include/boost/ and /usr/lib/libboost*\n> \n>> Btw what platform are you using ?\n> \n> Gentoo\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Aidan Thornton",
                "date": "2012-02-01T16:23:49",
                "message_text_only": "On Wed, Feb 1, 2012 at 4:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, February 01, 2012 10:58:28 AM Michael Gr\u00f8nager wrote:\n>> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the\n>> location.\n>\n> I didn't see anything useful in ccmake. Boost is in the standard locations\n> (/usr/include/boost/ and /usr/lib/libboost*\n\nThe error about not finding boost is a red herring and as far as I can\ntell bogus. The problem is that it finds Qt and tries to configure\nsome Qt code that doesn't seem to have actually been released. Try\nhttp://pastebin.ca/2108766\n\n>> Btw what platform are you using ?\n>\n> Gentoo\n\nAlso, you'll probably need to set BDB_INCLUDE_PATH manually or it\nwon't find db.h\n\nHope this helps,\nAidan"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T16:20:22",
                "message_text_only": "OK - from your path it looks like linux. What version of Boost do you use. I require 1.47 or 1.48. - I will change that, but it is quite handy for signal_sets - will make an alternative scheme though.\n\nAnd, as for 0.4 vs 0.5 - I have tried to follow the changes, which were mostly (?) related to the integration of the qt client, which would have to be re-done anyway. Then there were some deadlock fixes, that I don't need ;). A fix for a special attack, that I have included. But I will go over everything again.\n\nCheers,\n\nM\n\n\n\nOn 01/02/2012, at 16:26, Luke-Jr wrote:\n\n> On Wednesday, February 01, 2012 9:18:32 AM Michael Gr\u00f8nager wrote:\n>> libcoin is now in a state ready for its first release, which I would like\n>> to share with you!\n> \n> Looks interesting. However, it doesn't configure for me:\n>    http://paste.pocoo.org/show/544135/\n> \n> I noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?\n> \n> Luke\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-01T16:23:21",
                "message_text_only": "On Wednesday, February 01, 2012 11:20:22 AM Michael Gr\u00f8nager wrote:\n> OK - from your path it looks like linux. What version of Boost do you use.\n> I require 1.47 or 1.48. - I will change that, but it is quite handy for\n> signal_sets - will make an alternative scheme though.\n\nBoost 1.46.1 is the latest stable on Gentoo.\n\n> And, as for 0.4 vs 0.5 - I have tried to follow the changes, which were\n> mostly (?) related to the integration of the qt client, which would have\n> to be re-done anyway. Then there were some deadlock fixes, that I don't\n> need ;). A fix for a special attack, that I have included. But I will go\n> over everything again.\n\nPerhaps it would be easier to merge with the latest 0.4.x branch:\n    git://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable.git"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-01T17:37:39",
                "message_text_only": "On Wednesday, February 01, 2012 11:20:22 AM Michael Gr\u00f8nager wrote:\n> OK - from your path it looks like linux. What version of Boost do you use.\n> I require 1.47 or 1.48. - I will change that, but it is quite handy for\n> signal_sets - will make an alternative scheme though.\n\nUpgrading to 1.47 did not change the error at all... :/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-01T17:51:14",
                "message_text_only": "In the CMakeLists.txt file in the libcoin root find the lines regarding Boost - it says \n\n... 1.48  ...\n\nChange that to 1.47 and try again. I suggest you first remove your CMakeCache.txt though...\n\n(the Qt stuff is most likely not the culprit)\n\n/M\n\n\n\nOn 01/02/2012, at 18:37, Luke-Jr wrote:\n\n> On Wednesday, February 01, 2012 11:20:22 AM Michael Gr\u00f8nager wrote:\n>> OK - from your path it looks like linux. What version of Boost do you use.\n>> I require 1.47 or 1.48. - I will change that, but it is quite handy for\n>> signal_sets - will make an alternative scheme though.\n> \n> Upgrading to 1.47 did not change the error at all... :/\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-23T17:31:53",
                "message_text_only": "Hi Michael!\n\n Thank you for libcoin! It is a awesome evolution for Bitcoin and for the\nCryptoCurrencies as a hole... Thanks!!!\n\n Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\nmachine, I have compiled and running Bitcoin (from sources), Namecoin,\nDevcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\ncompile libcoin, I got:\n\n----\nuser at desk:~/libcoin$ ./configure\n-- The C compiler identification is GNU\n-- The CXX compiler identification is GNU\n-- Check for working C compiler: /usr/bin/gcc\n-- Check for working C compiler: /usr/bin/gcc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Looking for include files CMAKE_HAVE_PTHREAD_H\n-- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE\n-- Looking for XOpenDisplay in\n/usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n-- Looking for XOpenDisplay in\n/usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n-- Looking for gethostbyname\n-- Looking for gethostbyname - found\n-- Looking for connect\n-- Looking for connect - found\n-- Looking for remove\n-- Looking for remove - found\n-- Looking for shmat\n-- Looking for shmat - found\n-- Looking for IceConnectionNumber in ICE\n-- Looking for IceConnectionNumber in ICE - found\n-- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n-- Boost version: 1.42.0\n-- Found the following Boost libraries:\n--   date_time\n--   regex\n--   filesystem\n--   system\n--   program_options\n--   thread\n-- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n-- Looking for Q_WS_X11\n-- Looking for Q_WS_X11 - found\n-- Looking for Q_WS_WIN\n-- Looking for Q_WS_WIN - not found.\n-- Looking for Q_WS_QWS\n-- Looking for Q_WS_QWS - not found.\n-- Looking for Q_WS_MAC\n-- Looking for Q_WS_MAC - not found.\n-- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n-- Found wxWidgets: TRUE\n\nThe build system is configured to install libraries to /usr/local/lib\nYour applications may not be able to find your installed libraries unless\nyou:\n    set your LD_LIBRARY_PATH (user specific) or\n    update your ld.so configuration (system wide)\nYou have an ld.so.conf.d directory on your system, so if you wish to ensure\nthat\napplications find the installed libcoin libraries, system wide, you could\ninstall an\nlibcoin specific ld.so configuration with:\n    sudo make install_ld_conf\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/libcoin\n----\n\n Now I tried make, without success:\n\n----\n.....\nScript.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined\nreference to `BN_init'\nScript.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\nundefined reference to `BN_copy'\nScript.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\nundefined reference to `BN_set_negative'\nScript.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\nundefined reference to `BN_clear_free'\nScript.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\nundefined reference to `BN_clear_free'\n../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,\nunsigned int)':\nScript.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\nint)]+0x16): undefined reference to `BN_init'\nScript.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\nint)]+0x2c): undefined reference to `BN_lshift'\nScript.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\nint)]+0xad): undefined reference to `BN_clear_free'\n../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,\nunsigned int)':\nScript.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\nint)]+0xf): undefined reference to `BN_init'\nScript.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\nint)]+0x1e): undefined reference to `BN_copy'\nScript.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\nint)]+0x47): undefined reference to `BN_clear_free'\nScript.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\nint)]+0xcb): undefined reference to `BN_clear_free'\n../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,\nCBigNum const&)':\nScript.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum\nconst&)]+0x14): undefined reference to `BN_cmp'\n../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\nCBigNum const&)':\nScript.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\nconst&)]+0x14): undefined reference to `BN_cmp'\n../../lib/libcoin.a(Script.o): In function `uint256\nHash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\nchar, std::allocator<unsigned char> > >\n>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\nstd::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\nchar*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\nScript.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\nHash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\nchar, std::allocator<unsigned char> > >\n>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\nstd::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\nchar*, std::vector<unsigned char, std::allocator<unsigned char> >\n>)]+0x6d): undefined reference to `SHA256'\nScript.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\nHash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\nchar, std::allocator<unsigned char> > >\n>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\nstd::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\nchar*, std::vector<unsigned char, std::allocator<unsigned char> >\n>)]+0xb8): undefined reference to `SHA256'\ncollect2: ld returned 1 exit status\nmake[2]: *** [bin/bitcoind] Error 1\nmake[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\nmake: *** [all] Error 2\n-----\n\n What can I do?!\n\nBest,\nThiago\n\n\nOn 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n\n> Dear Bitcoiners,\n>\n> libcoin is now in a state ready for its first release, which I would like\n> to share with you!\n>\n> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n>\n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of\n> the first version of the crypto currency library \"libcoin\" based on the\n> bitcoin/bitcoin \"Satoshi\" client.\n>\n> libcoin also maintains a version of bitcoind that is a 100% compatible\n> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n> same computer on the same files and you can call it with the same scripts.\n> And you can easily extend it without touching the basic bitcoin source\n> files.\n>\n> The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\n>\n> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n>\n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n>\n> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n>\n> The libcoin license is LGPL v. 3. This mean that you can use it in open\n> source as well as in commercial projects, but improvements should go back\n> into the libcoin library.\n>\n> ======\n>\n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>\n> Join libcoin on twitter: http://twitter.com/libcoin\n>\n> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>\n> Best regards,\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/676ab00f/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-23T19:48:23",
                "message_text_only": "Hi Martinx,\n\nI am looking into it now - I just tried on my Ubuntu 11.10 - I got by Script.cpp with no problems.\n\nI have Boost 1.48.1, but I can't see that causing the issue - I will retry with a cleaner machine...\n\n/M\n\nOn 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Hi Michael!\n> \n> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> \n> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> \n> ----\n> user at desk:~/libcoin$ ./configure \n> -- The C compiler identification is GNU\n> -- The CXX compiler identification is GNU\n> -- Check for working C compiler: /usr/bin/gcc\n> -- Check for working C compiler: /usr/bin/gcc -- works\n> -- Detecting C compiler ABI info\n> -- Detecting C compiler ABI info - done\n> -- Check for working CXX compiler: /usr/bin/c++\n> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> -- Detecting CXX compiler ABI info\n> -- Detecting CXX compiler ABI info - done\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> -- Looking for pthread_create in pthreads\n> -- Looking for pthread_create in pthreads - not found\n> -- Looking for pthread_create in pthread\n> -- Looking for pthread_create in pthread - found\n> -- Found Threads: TRUE \n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> -- Looking for gethostbyname\n> -- Looking for gethostbyname - found\n> -- Looking for connect\n> -- Looking for connect - found\n> -- Looking for remove\n> -- Looking for remove - found\n> -- Looking for shmat\n> -- Looking for shmat - found\n> -- Looking for IceConnectionNumber in ICE\n> -- Looking for IceConnectionNumber in ICE - found\n> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> -- Boost version: 1.42.0\n> -- Found the following Boost libraries:\n> --   date_time\n> --   regex\n> --   filesystem\n> --   system\n> --   program_options\n> --   thread\n> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so \n> -- Looking for Q_WS_X11\n> -- Looking for Q_WS_X11 - found\n> -- Looking for Q_WS_WIN\n> -- Looking for Q_WS_WIN - not found.\n> -- Looking for Q_WS_QWS\n> -- Looking for Q_WS_QWS - not found.\n> -- Looking for Q_WS_MAC\n> -- Looking for Q_WS_MAC - not found.\n> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> -- Found wxWidgets: TRUE \n> \n> The build system is configured to install libraries to /usr/local/lib\n> Your applications may not be able to find your installed libraries unless you:\n>    set your LD_LIBRARY_PATH (user specific) or\n>    update your ld.so configuration (system wide)\n> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> applications find the installed libcoin libraries, system wide, you could install an\n> libcoin specific ld.so configuration with:\n>    sudo make install_ld_conf\n> \n> -- Configuring done\n> -- Generating done\n> -- Build files have been written to: /home/user/libcoin\n> ----\n> \n> Now I tried make, without success:\n> \n> ----\n> .....\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> collect2: ld returned 1 exit status\n> make[2]: *** [bin/bitcoind] Error 1\n> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> make: *** [all] Error 2\n> -----\n> \n> What can I do?!\n> \n> Best,\n> Thiago\n> \n> \n> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Dear Bitcoiners,\n> \n> libcoin is now in a state ready for its first release, which I would like to share with you!\n> \n> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> \n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> \n> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> \n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> \n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> \n> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> \n> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> \n> ======\n> \n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> \n> Join libcoin on twitter: http://twitter.com/libcoin\n> \n> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> \n> Best regards,\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-23T20:01:15",
                "message_text_only": "I tried on another 11.10 machine with the normal boost 1.42 and things also worked as they should.\n\nHowever, I noticed a difference between your cmake output and mine:\n\n> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so \n\n-- Found OpenSSL: /usr/lib/i386-linux-gnu/libssl.so;/usr/lib/i386-linux-gnu/libcrypto.so (found version \"1..\")\n\nAre you sure that the openssl libraries/includes found are the correct ones ? cmake finds your openssl libraries at /usr/lib/ which most likely will make it think that the includes are at /usr/include. I can see that at least X11 stuff is in /usr/lib/x386-linux-gnu like my openssl.\n\nCould there be an issue there ?\n\nSHA256 would normally be found in openssl/sha.h but if that is somehow corrupt ?\n\nCheers,\n\nM\n\nPS: to get more debug output, please try a \"make VERBOSE=1\" That will show what g++ flags that are used, and might help us.\n\nOn 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Hi Michael!\n> \n>  Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> \n>  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> \n> ----\n> user at desk:~/libcoin$ ./configure \n> -- The C compiler identification is GNU\n> -- The CXX compiler identification is GNU\n> -- Check for working C compiler: /usr/bin/gcc\n> -- Check for working C compiler: /usr/bin/gcc -- works\n> -- Detecting C compiler ABI info\n> -- Detecting C compiler ABI info - done\n> -- Check for working CXX compiler: /usr/bin/c++\n> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> -- Detecting CXX compiler ABI info\n> -- Detecting CXX compiler ABI info - done\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> -- Looking for pthread_create in pthreads\n> -- Looking for pthread_create in pthreads - not found\n> -- Looking for pthread_create in pthread\n> -- Looking for pthread_create in pthread - found\n> -- Found Threads: TRUE \n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> -- Looking for gethostbyname\n> -- Looking for gethostbyname - found\n> -- Looking for connect\n> -- Looking for connect - found\n> -- Looking for remove\n> -- Looking for remove - found\n> -- Looking for shmat\n> -- Looking for shmat - found\n> -- Looking for IceConnectionNumber in ICE\n> -- Looking for IceConnectionNumber in ICE - found\n> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> -- Boost version: 1.42.0\n> -- Found the following Boost libraries:\n> --   date_time\n> --   regex\n> --   filesystem\n> --   system\n> --   program_options\n> --   thread\n> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so \n> -- Looking for Q_WS_X11\n> -- Looking for Q_WS_X11 - found\n> -- Looking for Q_WS_WIN\n> -- Looking for Q_WS_WIN - not found.\n> -- Looking for Q_WS_QWS\n> -- Looking for Q_WS_QWS - not found.\n> -- Looking for Q_WS_MAC\n> -- Looking for Q_WS_MAC - not found.\n> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> -- Found wxWidgets: TRUE \n> \n> The build system is configured to install libraries to /usr/local/lib\n> Your applications may not be able to find your installed libraries unless you:\n>     set your LD_LIBRARY_PATH (user specific) or\n>     update your ld.so configuration (system wide)\n> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> applications find the installed libcoin libraries, system wide, you could install an\n> libcoin specific ld.so configuration with:\n>     sudo make install_ld_conf\n> \n> -- Configuring done\n> -- Generating done\n> -- Build files have been written to: /home/user/libcoin\n> ----\n> \n>  Now I tried make, without success:\n> \n> ----\n> .....\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> collect2: ld returned 1 exit status\n> make[2]: *** [bin/bitcoind] Error 1\n> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> make: *** [all] Error 2\n> -----\n> \n>  What can I do?!\n> \n> Best,\n> Thiago\n> \n> \n> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Dear Bitcoiners,\n> \n> libcoin is now in a state ready for its first release, which I would like to share with you!\n> \n> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> \n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> \n> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> \n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> \n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> \n> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> \n> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> \n> ======\n> \n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> \n> Join libcoin on twitter: http://twitter.com/libcoin\n> \n> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> \n> Best regards,\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-23T20:35:47",
                "message_text_only": "Hi Martinx,\n\nAnother note:\n\nboost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n\nYou should do a :\n\nsudo apt-get upgrade libboost-dev-all\n\nto get the 1.46.1 library\n\n/M\n\n\nOn 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Hi Michael!\n> \n>  Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> \n>  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> \n> ----\n> user at desk:~/libcoin$ ./configure \n> -- The C compiler identification is GNU\n> -- The CXX compiler identification is GNU\n> -- Check for working C compiler: /usr/bin/gcc\n> -- Check for working C compiler: /usr/bin/gcc -- works\n> -- Detecting C compiler ABI info\n> -- Detecting C compiler ABI info - done\n> -- Check for working CXX compiler: /usr/bin/c++\n> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> -- Detecting CXX compiler ABI info\n> -- Detecting CXX compiler ABI info - done\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> -- Looking for pthread_create in pthreads\n> -- Looking for pthread_create in pthreads - not found\n> -- Looking for pthread_create in pthread\n> -- Looking for pthread_create in pthread - found\n> -- Found Threads: TRUE \n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> -- Looking for gethostbyname\n> -- Looking for gethostbyname - found\n> -- Looking for connect\n> -- Looking for connect - found\n> -- Looking for remove\n> -- Looking for remove - found\n> -- Looking for shmat\n> -- Looking for shmat - found\n> -- Looking for IceConnectionNumber in ICE\n> -- Looking for IceConnectionNumber in ICE - found\n> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> -- Boost version: 1.42.0\n> -- Found the following Boost libraries:\n> --   date_time\n> --   regex\n> --   filesystem\n> --   system\n> --   program_options\n> --   thread\n> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so \n> -- Looking for Q_WS_X11\n> -- Looking for Q_WS_X11 - found\n> -- Looking for Q_WS_WIN\n> -- Looking for Q_WS_WIN - not found.\n> -- Looking for Q_WS_QWS\n> -- Looking for Q_WS_QWS - not found.\n> -- Looking for Q_WS_MAC\n> -- Looking for Q_WS_MAC - not found.\n> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> -- Found wxWidgets: TRUE \n> \n> The build system is configured to install libraries to /usr/local/lib\n> Your applications may not be able to find your installed libraries unless you:\n>     set your LD_LIBRARY_PATH (user specific) or\n>     update your ld.so configuration (system wide)\n> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> applications find the installed libcoin libraries, system wide, you could install an\n> libcoin specific ld.so configuration with:\n>     sudo make install_ld_conf\n> \n> -- Configuring done\n> -- Generating done\n> -- Build files have been written to: /home/user/libcoin\n> ----\n> \n>  Now I tried make, without success:\n> \n> ----\n> .....\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> collect2: ld returned 1 exit status\n> make[2]: *** [bin/bitcoind] Error 1\n> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> make: *** [all] Error 2\n> -----\n> \n>  What can I do?!\n> \n> Best,\n> Thiago\n> \n> \n> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Dear Bitcoiners,\n> \n> libcoin is now in a state ready for its first release, which I would like to share with you!\n> \n> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> \n> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> \n> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> \n> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> \n> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> \n> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> \n> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> \n> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> \n> ======\n> \n> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> \n> Join libcoin on twitter: http://twitter.com/libcoin\n> \n> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> \n> Best regards,\n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-23T23:29:58",
                "message_text_only": "AWESOME!!!\n\nI can compile libcoin at my Ubuntu 11.10... I just need to install:\n\nsudo aptitude install libboost1.46-all-dev\n\n...alongside with another already installed dependencies, and now it works!!\n\nThank you!\nThiago\n\n2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> Hi Martinx,\n>\n> Another note:\n>\n> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to\n> compile coinHTTP with that specific combination: sslv2 has been removed\n> from openssl, but boost still references it.)\n>\n> You should do a :\n>\n> sudo apt-get upgrade libboost-dev-all\n>\n> to get the 1.46.1 library\n>\n> /M\n>\n>\n> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Hi Michael!\n> >\n> >  Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n> the CryptoCurrencies as a hole... Thanks!!!\n> >\n> >  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\n> machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> >\n> > ----\n> > user at desk:~/libcoin$ ./configure\n> > -- The C compiler identification is GNU\n> > -- The CXX compiler identification is GNU\n> > -- Check for working C compiler: /usr/bin/gcc\n> > -- Check for working C compiler: /usr/bin/gcc -- works\n> > -- Detecting C compiler ABI info\n> > -- Detecting C compiler ABI info - done\n> > -- Check for working CXX compiler: /usr/bin/c++\n> > -- Check for working CXX compiler: /usr/bin/c++ -- works\n> > -- Detecting CXX compiler ABI info\n> > -- Detecting CXX compiler ABI info - done\n> > -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> > -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> > -- Looking for pthread_create in pthreads\n> > -- Looking for pthread_create in pthreads - not found\n> > -- Looking for pthread_create in pthread\n> > -- Looking for pthread_create in pthread - found\n> > -- Found Threads: TRUE\n> > -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> > -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> > -- Looking for gethostbyname\n> > -- Looking for gethostbyname - found\n> > -- Looking for connect\n> > -- Looking for connect - found\n> > -- Looking for remove\n> > -- Looking for remove - found\n> > -- Looking for shmat\n> > -- Looking for shmat - found\n> > -- Looking for IceConnectionNumber in ICE\n> > -- Looking for IceConnectionNumber in ICE - found\n> > -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> > -- Boost version: 1.42.0\n> > -- Found the following Boost libraries:\n> > --   date_time\n> > --   regex\n> > --   filesystem\n> > --   system\n> > --   program_options\n> > --   thread\n> > -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> > -- Looking for Q_WS_X11\n> > -- Looking for Q_WS_X11 - found\n> > -- Looking for Q_WS_WIN\n> > -- Looking for Q_WS_WIN - not found.\n> > -- Looking for Q_WS_QWS\n> > -- Looking for Q_WS_QWS - not found.\n> > -- Looking for Q_WS_MAC\n> > -- Looking for Q_WS_MAC - not found.\n> > -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> > -- Found wxWidgets: TRUE\n> >\n> > The build system is configured to install libraries to /usr/local/lib\n> > Your applications may not be able to find your installed libraries\n> unless you:\n> >     set your LD_LIBRARY_PATH (user specific) or\n> >     update your ld.so configuration (system wide)\n> > You have an ld.so.conf.d directory on your system, so if you wish to\n> ensure that\n> > applications find the installed libcoin libraries, system wide, you\n> could install an\n> > libcoin specific ld.so configuration with:\n> >     sudo make install_ld_conf\n> >\n> > -- Configuring done\n> > -- Generating done\n> > -- Build files have been written to: /home/user/libcoin\n> > ----\n> >\n> >  Now I tried make, without success:\n> >\n> > ----\n> > .....\n> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> > ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,\n> unsigned int)':\n> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x16): undefined reference to `BN_init'\n> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x2c): undefined reference to `BN_lshift'\n> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0xad): undefined reference to `BN_clear_free'\n> > ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,\n> unsigned int)':\n> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xf): undefined reference to `BN_init'\n> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x1e): undefined reference to `BN_copy'\n> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x47): undefined reference to `BN_clear_free'\n> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xcb): undefined reference to `BN_clear_free'\n> > ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,\n> CBigNum const&)':\n> > Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> > ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\n> CBigNum const&)':\n> > Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> > ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> >\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> > collect2: ld returned 1 exit status\n> > make[2]: *** [bin/bitcoind] Error 1\n> > make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n> Error 2\n> > make: *** [all] Error 2\n> > -----\n> >\n> >  What can I do?!\n> >\n> > Best,\n> > Thiago\n> >\n> >\n> > On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> > Dear Bitcoiners,\n> >\n> > libcoin is now in a state ready for its first release, which I would\n> like to share with you!\n> >\n> > === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n> >\n> > Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release\n> of the first version of the crypto currency library \"libcoin\" based on the\n> bitcoin/bitcoin \"Satoshi\" client.\n> >\n> > libcoin also maintains a version of bitcoind that is a 100% compatible\n> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n> same computer on the same files and you can call it with the same scripts.\n> And you can easily extend it without touching the basic bitcoin source\n> files.\n> >\n> > The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\n> >\n> > In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> >\n> > libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> >\n> > The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >\n> > The libcoin license is LGPL v. 3. This mean that you can use it in open\n> source as well as in commercial projects, but improvements should go back\n> into the libcoin library.\n> >\n> > ======\n> >\n> > Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >\n> > Join libcoin on twitter: http://twitter.com/libcoin\n> >\n> > Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >\n> > Best regards,\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Keep Your Developer Skills Current with LearnDevNow!\n> > The most comprehensive online learning library for Microsoft developers\n> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> > Metro Style Apps, more. Free future releases when you subscribe now!\n> > http://p.sf.net/sfu/learndevnow-d2d\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/ca0085c4/attachment.html>"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-24T02:17:57",
                "message_text_only": "Hi Michael!\n\n I just run \"bitcoind\", from libcoin (\"sudo make install\") sources, with\nempty ~/.bitcoin directory and:\n\nTerminal 1: bitcoind # apparently okay\n\nTerminal 2:\n\n$ bitcoind getinfo # okay\n{\n    \"version\" : 40001,\n    \"blocks\" : 57733,\n    \"connections\" : 8,\n    \"difficulty\" : 11.84622815,\n    \"testnet\" : false\n}\n\n# sleep a couple minutes\n\n$ bitcoind getinfo # ok\n{\n    \"version\" : 40001,\n    \"blocks\" : 67527,\n    \"connections\" : 8,\n    \"difficulty\" : 45.38582234,\n    \"testnet\" : false\n}\n\n\nBut...\n\n\n$ bitcoind help\nHTTP error code: 404\nJSON RPC Error code: -36001\nMethod not found.\n\n$ bitcoind getaccountaddress \"\"\nHTTP error code: 401\nError: couldn't parse reply from server\n\n$ bitcoind listaccounts\nHTTP error code: 401\nError: couldn't parse reply from server\n\n\n Any tips?! lol\n\nThanks!\nThiago\n\n2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> AWESOME!!!\n>\n> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n>\n> sudo aptitude install libboost1.46-all-dev\n>\n> ...alongside with another already installed dependencies, and now it\n> works!!\n>\n> Thank you!\n> Thiago\n>\n> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>\n>> Hi Martinx,\n>>\n>> Another note:\n>>\n>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try\n>> to compile coinHTTP with that specific combination: sslv2 has been removed\n>> from openssl, but boost still references it.)\n>>\n>> You should do a :\n>>\n>> sudo apt-get upgrade libboost-dev-all\n>>\n>> to get the 1.46.1 library\n>>\n>> /M\n>>\n>>\n>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>>\n>> > Hi Michael!\n>> >\n>> >  Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n>> the CryptoCurrencies as a hole... Thanks!!!\n>> >\n>> >  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\n>> machine, I have compiled and running Bitcoin (from sources), Namecoin,\n>> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n>> compile libcoin, I got:\n>> >\n>> > ----\n>> > user at desk:~/libcoin$ ./configure\n>> > -- The C compiler identification is GNU\n>> > -- The CXX compiler identification is GNU\n>> > -- Check for working C compiler: /usr/bin/gcc\n>> > -- Check for working C compiler: /usr/bin/gcc -- works\n>> > -- Detecting C compiler ABI info\n>> > -- Detecting C compiler ABI info - done\n>> > -- Check for working CXX compiler: /usr/bin/c++\n>> > -- Check for working CXX compiler: /usr/bin/c++ -- works\n>> > -- Detecting CXX compiler ABI info\n>> > -- Detecting CXX compiler ABI info - done\n>> > -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>> > -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>> > -- Looking for pthread_create in pthreads\n>> > -- Looking for pthread_create in pthreads - not found\n>> > -- Looking for pthread_create in pthread\n>> > -- Looking for pthread_create in pthread - found\n>> > -- Found Threads: TRUE\n>> > -- Looking for XOpenDisplay in\n>> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>> > -- Looking for XOpenDisplay in\n>> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>> > -- Looking for gethostbyname\n>> > -- Looking for gethostbyname - found\n>> > -- Looking for connect\n>> > -- Looking for connect - found\n>> > -- Looking for remove\n>> > -- Looking for remove - found\n>> > -- Looking for shmat\n>> > -- Looking for shmat - found\n>> > -- Looking for IceConnectionNumber in ICE\n>> > -- Looking for IceConnectionNumber in ICE - found\n>> > -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>> > -- Boost version: 1.42.0\n>> > -- Found the following Boost libraries:\n>> > --   date_time\n>> > --   regex\n>> > --   filesystem\n>> > --   system\n>> > --   program_options\n>> > --   thread\n>> > -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>> > -- Looking for Q_WS_X11\n>> > -- Looking for Q_WS_X11 - found\n>> > -- Looking for Q_WS_WIN\n>> > -- Looking for Q_WS_WIN - not found.\n>> > -- Looking for Q_WS_QWS\n>> > -- Looking for Q_WS_QWS - not found.\n>> > -- Looking for Q_WS_MAC\n>> > -- Looking for Q_WS_MAC - not found.\n>> > -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>> > -- Found wxWidgets: TRUE\n>> >\n>> > The build system is configured to install libraries to /usr/local/lib\n>> > Your applications may not be able to find your installed libraries\n>> unless you:\n>> >     set your LD_LIBRARY_PATH (user specific) or\n>> >     update your ld.so configuration (system wide)\n>> > You have an ld.so.conf.d directory on your system, so if you wish to\n>> ensure that\n>> > applications find the installed libcoin libraries, system wide, you\n>> could install an\n>> > libcoin specific ld.so configuration with:\n>> >     sudo make install_ld_conf\n>> >\n>> > -- Configuring done\n>> > -- Generating done\n>> > -- Build files have been written to: /home/user/libcoin\n>> > ----\n>> >\n>> >  Now I tried make, without success:\n>> >\n>> > ----\n>> > .....\n>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n>> undefined reference to `BN_init'\n>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n>> undefined reference to `BN_copy'\n>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n>> undefined reference to `BN_set_negative'\n>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n>> undefined reference to `BN_clear_free'\n>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n>> undefined reference to `BN_clear_free'\n>> > ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,\n>> unsigned int)':\n>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n>> int)]+0x16): undefined reference to `BN_init'\n>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n>> int)]+0x2c): undefined reference to `BN_lshift'\n>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n>> int)]+0xad): undefined reference to `BN_clear_free'\n>> > ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,\n>> unsigned int)':\n>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n>> int)]+0xf): undefined reference to `BN_init'\n>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n>> int)]+0x1e): undefined reference to `BN_copy'\n>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n>> int)]+0x47): undefined reference to `BN_clear_free'\n>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n>> int)]+0xcb): undefined reference to `BN_clear_free'\n>> > ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,\n>> CBigNum const&)':\n>> > Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum\n>> const&)]+0x14): undefined reference to `BN_cmp'\n>> > ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\n>> CBigNum const&)':\n>> > Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\n>> const&)]+0x14): undefined reference to `BN_cmp'\n>> > ../../lib/libcoin.a(Script.o): In function `uint256\n>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n>> char, std::allocator<unsigned char> > >\n>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n>> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>> >\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n>> char, std::allocator<unsigned char> > >\n>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n>> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n>> >)]+0x6d): undefined reference to `SHA256'\n>> >\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n>> char, std::allocator<unsigned char> > >\n>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n>> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n>> >)]+0xb8): undefined reference to `SHA256'\n>> > collect2: ld returned 1 exit status\n>> > make[2]: *** [bin/bitcoind] Error 1\n>> > make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n>> Error 2\n>> > make: *** [all] Error 2\n>> > -----\n>> >\n>> >  What can I do?!\n>> >\n>> > Best,\n>> > Thiago\n>> >\n>> >\n>> > On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n>> wrote:\n>> > Dear Bitcoiners,\n>> >\n>> > libcoin is now in a state ready for its first release, which I would\n>> like to share with you!\n>> >\n>> > === libcoin is a crypto currency library based on the bitcoin/bitcoin\n>> \"Satoshi\" client. ===\n>> >\n>> > Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release\n>> of the first version of the crypto currency library \"libcoin\" based on the\n>> bitcoin/bitcoin \"Satoshi\" client.\n>> >\n>> > libcoin also maintains a version of bitcoind that is a 100% compatible\n>> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n>> same computer on the same files and you can call it with the same scripts.\n>> And you can easily extend it without touching the basic bitcoin source\n>> files.\n>> >\n>> > The libcoin/bitcoind client downloads the entire block chain 3.5 times\n>> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n>> modern laptop!\n>> >\n>> > In libcoin, the Satoshi client code has been completely refactored,\n>> properly encapsulating classes, removing all globals, moving from threads\n>> and mutexes to a pure asynchronous approach. Functionalities have been\n>> divided into logical units and libraries, minimizing dependencies for e.g.\n>> thin clients.\n>> >\n>> > libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n>> litecoin, ...) specific settings are maintained from a single class (Chain)\n>> and hence experiments with chain settings, mining, security and digital\n>> currencies for research and educational purposes are easily accessible. See\n>> the ponzicoin example for how you define your own chain.\n>> >\n>> > The build system of libcoin is based on CMake and supports builds of\n>> static and dynamic libraries on Linux, Mac OS X, and Windows.\n>> >\n>> > The libcoin license is LGPL v. 3. This mean that you can use it in open\n>> source as well as in commercial projects, but improvements should go back\n>> into the libcoin library.\n>> >\n>> > ======\n>> >\n>> > Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>> >\n>> > Join libcoin on twitter: http://twitter.com/libcoin\n>> >\n>> > Download \"libcoin Satoshi release\":\n>> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>> >\n>> > Best regards,\n>> >\n>> > Michael Gronager, PhD\n>> > Director, Ceptacle\n>> > Jens Juels Gade 33\n>> > 2100 Copenhagen E\n>> > Mobile: +45 31 45 14 01\n>> > E-mail: gronager at ceptacle.com\n>> > Web: http://www.ceptacle.com/\n>> >\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > Keep Your Developer Skills Current with LearnDevNow!\n>> > The most comprehensive online learning library for Microsoft developers\n>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> > Metro Style Apps, more. Free future releases when you subscribe now!\n>> > http://p.sf.net/sfu/learndevnow-d2d\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>> Michael Gronager, PhD\n>> Director, Ceptacle\n>> Jens Juels Gade 33\n>> 2100 Copenhagen E\n>> Mobile: +45 31 45 14 01\n>> E-mail: gronager at ceptacle.com\n>> Web: http://www.ceptacle.com/\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120224/cde27daa/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-24T07:44:38",
                "message_text_only": "Hi Thiago\n\nI had in mind using the JSON RPC 2.0 system.description standard command instead of help, but I got sidetracked implementing it. Will look into it asap. Thanks for noting!\n\n/M\n\nOn 24/02/2012, at 03:17, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Hi Michael!\n> \n> I just run \"bitcoind\", from libcoin (\"sudo make install\") sources, with empty ~/.bitcoin directory and:\n> \n> Terminal 1: bitcoind # apparently okay\n> \n> Terminal 2:\n> \n> $ bitcoind getinfo # okay\n> {\n>    \"version\" : 40001,\n>    \"blocks\" : 57733,\n>    \"connections\" : 8,\n>    \"difficulty\" : 11.84622815,\n>    \"testnet\" : false\n> }\n> \n> # sleep a couple minutes\n> \n> $ bitcoind getinfo # ok\n> {\n>    \"version\" : 40001,\n>    \"blocks\" : 67527,\n>    \"connections\" : 8,\n>    \"difficulty\" : 45.38582234,\n>    \"testnet\" : false\n> }\n> \n> \n> But...\n> \n> \n> $ bitcoind help\n> HTTP error code: 404\n> JSON RPC Error code: -36001\n> Method not found.\n> \n> $ bitcoind getaccountaddress \"\"\n> HTTP error code: 401\n> Error: couldn't parse reply from server\n> \n> $ bitcoind listaccounts\n> HTTP error code: 401\n> Error: couldn't parse reply from server\n> \n> \n> Any tips?! lol\n> \n> Thanks!\n> Thiago\n> \n> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> AWESOME!!!\n> \n> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> \n> sudo aptitude install libboost1.46-all-dev\n> \n> ...alongside with another already installed dependencies, and now it works!!\n> \n> Thank you!\n> Thiago\n> \n> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi Martinx,\n> \n> Another note:\n> \n> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> \n> You should do a :\n> \n> sudo apt-get upgrade libboost-dev-all\n> \n> to get the 1.46.1 library\n> \n> /M\n> \n> \n> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n>> Hi Michael!\n>> \n>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n>> \n>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n>> \n>> ----\n>> user at desk:~/libcoin$ ./configure\n>> -- The C compiler identification is GNU\n>> -- The CXX compiler identification is GNU\n>> -- Check for working C compiler: /usr/bin/gcc\n>> -- Check for working C compiler: /usr/bin/gcc -- works\n>> -- Detecting C compiler ABI info\n>> -- Detecting C compiler ABI info - done\n>> -- Check for working CXX compiler: /usr/bin/c++\n>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n>> -- Detecting CXX compiler ABI info\n>> -- Detecting CXX compiler ABI info - done\n>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>> -- Looking for pthread_create in pthreads\n>> -- Looking for pthread_create in pthreads - not found\n>> -- Looking for pthread_create in pthread\n>> -- Looking for pthread_create in pthread - found\n>> -- Found Threads: TRUE\n>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>> -- Looking for gethostbyname\n>> -- Looking for gethostbyname - found\n>> -- Looking for connect\n>> -- Looking for connect - found\n>> -- Looking for remove\n>> -- Looking for remove - found\n>> -- Looking for shmat\n>> -- Looking for shmat - found\n>> -- Looking for IceConnectionNumber in ICE\n>> -- Looking for IceConnectionNumber in ICE - found\n>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>> -- Boost version: 1.42.0\n>> -- Found the following Boost libraries:\n>> --   date_time\n>> --   regex\n>> --   filesystem\n>> --   system\n>> --   program_options\n>> --   thread\n>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>> -- Looking for Q_WS_X11\n>> -- Looking for Q_WS_X11 - found\n>> -- Looking for Q_WS_WIN\n>> -- Looking for Q_WS_WIN - not found.\n>> -- Looking for Q_WS_QWS\n>> -- Looking for Q_WS_QWS - not found.\n>> -- Looking for Q_WS_MAC\n>> -- Looking for Q_WS_MAC - not found.\n>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>> -- Found wxWidgets: TRUE\n>> \n>> The build system is configured to install libraries to /usr/local/lib\n>> Your applications may not be able to find your installed libraries unless you:\n>>    set your LD_LIBRARY_PATH (user specific) or\n>>    update your ld.so configuration (system wide)\n>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n>> applications find the installed libcoin libraries, system wide, you could install an\n>> libcoin specific ld.so configuration with:\n>>    sudo make install_ld_conf\n>> \n>> -- Configuring done\n>> -- Generating done\n>> -- Build files have been written to: /home/user/libcoin\n>> ----\n>> \n>> Now I tried make, without success:\n>> \n>> ----\n>> .....\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n>> collect2: ld returned 1 exit status\n>> make[2]: *** [bin/bitcoind] Error 1\n>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n>> make: *** [all] Error 2\n>> -----\n>> \n>> What can I do?!\n>> \n>> Best,\n>> Thiago\n>> \n>> \n>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> Dear Bitcoiners,\n>> \n>> libcoin is now in a state ready for its first release, which I would like to share with you!\n>> \n>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n>> \n>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n>> \n>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n>> \n>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n>> \n>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n>> \n>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n>> \n>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n>> \n>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n>> \n>> ======\n>> \n>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>> \n>> Join libcoin on twitter: http://twitter.com/libcoin\n>> \n>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>> \n>> Best regards,\n>> \n>> Michael Gronager, PhD\n>> Director, Ceptacle\n>> Jens Juels Gade 33\n>> 2100 Copenhagen E\n>> Mobile: +45 31 45 14 01\n>> E-mail: gronager at ceptacle.com\n>> Web: http://www.ceptacle.com/\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-24T16:17:45",
                "message_text_only": "Hi Thiago,\n\nForgot to comment on the two latter:\n\n> $ bitcoind getaccountaddress \"\"\n> HTTP error code: 401\n> Error: couldn't parse reply from server\n> \n> $ bitcoind listaccounts\n> HTTP error code: 401\n> Error: couldn't parse reply from server\n> \n\n401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n\nSee in the bitcoind.cpp file for commands that you can use with and without auth...\n\nThose that contains an \"auth\" requires auth:\n\n       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n\nAs opposed to:\n\n       server.registerMethod(method_ptr(new GetInfo(node))); \n\nauth is defined by:\n\n       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n\nso you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n\n/M\n\n\n> \n> Any tips?! lol\n> \n> Thanks!\n> Thiago\n> \n> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> AWESOME!!!\n> \n> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> \n> sudo aptitude install libboost1.46-all-dev\n> \n> ...alongside with another already installed dependencies, and now it works!!\n> \n> Thank you!\n> Thiago\n> \n> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi Martinx,\n> \n> Another note:\n> \n> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> \n> You should do a :\n> \n> sudo apt-get upgrade libboost-dev-all\n> \n> to get the 1.46.1 library\n> \n> /M\n> \n> \n> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n>> Hi Michael!\n>> \n>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n>> \n>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n>> \n>> ----\n>> user at desk:~/libcoin$ ./configure\n>> -- The C compiler identification is GNU\n>> -- The CXX compiler identification is GNU\n>> -- Check for working C compiler: /usr/bin/gcc\n>> -- Check for working C compiler: /usr/bin/gcc -- works\n>> -- Detecting C compiler ABI info\n>> -- Detecting C compiler ABI info - done\n>> -- Check for working CXX compiler: /usr/bin/c++\n>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n>> -- Detecting CXX compiler ABI info\n>> -- Detecting CXX compiler ABI info - done\n>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>> -- Looking for pthread_create in pthreads\n>> -- Looking for pthread_create in pthreads - not found\n>> -- Looking for pthread_create in pthread\n>> -- Looking for pthread_create in pthread - found\n>> -- Found Threads: TRUE\n>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>> -- Looking for gethostbyname\n>> -- Looking for gethostbyname - found\n>> -- Looking for connect\n>> -- Looking for connect - found\n>> -- Looking for remove\n>> -- Looking for remove - found\n>> -- Looking for shmat\n>> -- Looking for shmat - found\n>> -- Looking for IceConnectionNumber in ICE\n>> -- Looking for IceConnectionNumber in ICE - found\n>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>> -- Boost version: 1.42.0\n>> -- Found the following Boost libraries:\n>> --   date_time\n>> --   regex\n>> --   filesystem\n>> --   system\n>> --   program_options\n>> --   thread\n>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>> -- Looking for Q_WS_X11\n>> -- Looking for Q_WS_X11 - found\n>> -- Looking for Q_WS_WIN\n>> -- Looking for Q_WS_WIN - not found.\n>> -- Looking for Q_WS_QWS\n>> -- Looking for Q_WS_QWS - not found.\n>> -- Looking for Q_WS_MAC\n>> -- Looking for Q_WS_MAC - not found.\n>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>> -- Found wxWidgets: TRUE\n>> \n>> The build system is configured to install libraries to /usr/local/lib\n>> Your applications may not be able to find your installed libraries unless you:\n>>    set your LD_LIBRARY_PATH (user specific) or\n>>    update your ld.so configuration (system wide)\n>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n>> applications find the installed libcoin libraries, system wide, you could install an\n>> libcoin specific ld.so configuration with:\n>>    sudo make install_ld_conf\n>> \n>> -- Configuring done\n>> -- Generating done\n>> -- Build files have been written to: /home/user/libcoin\n>> ----\n>> \n>> Now I tried make, without success:\n>> \n>> ----\n>> .....\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n>> collect2: ld returned 1 exit status\n>> make[2]: *** [bin/bitcoind] Error 1\n>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n>> make: *** [all] Error 2\n>> -----\n>> \n>> What can I do?!\n>> \n>> Best,\n>> Thiago\n>> \n>> \n>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> Dear Bitcoiners,\n>> \n>> libcoin is now in a state ready for its first release, which I would like to share with you!\n>> \n>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n>> \n>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n>> \n>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n>> \n>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n>> \n>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n>> \n>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n>> \n>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n>> \n>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n>> \n>> ======\n>> \n>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>> \n>> Join libcoin on twitter: http://twitter.com/libcoin\n>> \n>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>> \n>> Best regards,\n>> \n>> Michael Gronager, PhD\n>> Director, Ceptacle\n>> Jens Juels Gade 33\n>> 2100 Copenhagen E\n>> Mobile: +45 31 45 14 01\n>> E-mail: gronager at ceptacle.com\n>> Web: http://www.ceptacle.com/\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n>"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-24T18:49:40",
                "message_text_only": "Hi Michael,\n\n Thank you for your attention!\n\n Now, I'm trying to start libcoin's bitcoind using high ports but, it\nalways try to listen at 8332, no matter what I \"say\"...\n\n Look:\n\n$ cat .bitcoin/bitcoin.conf\nserver=1\ndaemon=1\nrpcuser=libcoin\nrpcpassword=LibCoin13\nrpcport=10332\nport=10333\n\n But:\n\n/usr/local/bin/bitcoind\nError: Address already in use\n\nterminate called after throwing an instance of 'DbException'\n  what():  DbEnv::close: Invalid argument\nAborted\n\n When I \"strace it\", I can see:\n\n...\nbind(12, {sa_family=AF_INET, sin_port=htons(8333),\nsin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n...\n\n I already tried:\n\n/usr/local/bin/bitcoind --rpcport 10332\n/usr/local/bin/bitcoind --rpcport=10332\n\n Without success...\n\nThanks again!\nThiago\n\n2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> Hi Thiago,\n>\n> Forgot to comment on the two latter:\n>\n> > $ bitcoind getaccountaddress \"\"\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n> > $ bitcoind listaccounts\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n>\n> 401 = permission denied - you need to setup username / password either on\n> the commandline or in the bicoin.conf file to access those commands...\n>\n> See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n>\n> Those that contains an \"auth\" requires auth:\n>\n>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n>\n> As opposed to:\n>\n>       server.registerMethod(method_ptr(new GetInfo(node)));\n>\n> auth is defined by:\n>\n>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not\n> set, all authenticated methods becomes disallowed.\n>\n> so you just experience the case explained in the comment ;) I admit that\n> the output could be more readable, though!\n>\n> /M\n>\n>\n> >\n> > Any tips?! lol\n> >\n> > Thanks!\n> > Thiago\n> >\n> > 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> > AWESOME!!!\n> >\n> > I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >\n> > sudo aptitude install libboost1.46-all-dev\n> >\n> > ...alongside with another already installed dependencies, and now it\n> works!!\n> >\n> > Thank you!\n> > Thiago\n> >\n> > 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi Martinx,\n> >\n> > Another note:\n> >\n> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try\n> to compile coinHTTP with that specific combination: sslv2 has been removed\n> from openssl, but boost still references it.)\n> >\n> > You should do a :\n> >\n> > sudo apt-get upgrade libboost-dev-all\n> >\n> > to get the 1.46.1 library\n> >\n> > /M\n> >\n> >\n> > On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Hi Michael!\n> >>\n> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n> the CryptoCurrencies as a hole... Thanks!!!\n> >>\n> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\n> machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> >>\n> >> ----\n> >> user at desk:~/libcoin$ ./configure\n> >> -- The C compiler identification is GNU\n> >> -- The CXX compiler identification is GNU\n> >> -- Check for working C compiler: /usr/bin/gcc\n> >> -- Check for working C compiler: /usr/bin/gcc -- works\n> >> -- Detecting C compiler ABI info\n> >> -- Detecting C compiler ABI info - done\n> >> -- Check for working CXX compiler: /usr/bin/c++\n> >> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >> -- Detecting CXX compiler ABI info\n> >> -- Detecting CXX compiler ABI info - done\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >> -- Looking for pthread_create in pthreads\n> >> -- Looking for pthread_create in pthreads - not found\n> >> -- Looking for pthread_create in pthread\n> >> -- Looking for pthread_create in pthread - found\n> >> -- Found Threads: TRUE\n> >> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >> -- Looking for gethostbyname\n> >> -- Looking for gethostbyname - found\n> >> -- Looking for connect\n> >> -- Looking for connect - found\n> >> -- Looking for remove\n> >> -- Looking for remove - found\n> >> -- Looking for shmat\n> >> -- Looking for shmat - found\n> >> -- Looking for IceConnectionNumber in ICE\n> >> -- Looking for IceConnectionNumber in ICE - found\n> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >> -- Boost version: 1.42.0\n> >> -- Found the following Boost libraries:\n> >> --   date_time\n> >> --   regex\n> >> --   filesystem\n> >> --   system\n> >> --   program_options\n> >> --   thread\n> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >> -- Looking for Q_WS_X11\n> >> -- Looking for Q_WS_X11 - found\n> >> -- Looking for Q_WS_WIN\n> >> -- Looking for Q_WS_WIN - not found.\n> >> -- Looking for Q_WS_QWS\n> >> -- Looking for Q_WS_QWS - not found.\n> >> -- Looking for Q_WS_MAC\n> >> -- Looking for Q_WS_MAC - not found.\n> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >> -- Found wxWidgets: TRUE\n> >>\n> >> The build system is configured to install libraries to /usr/local/lib\n> >> Your applications may not be able to find your installed libraries\n> unless you:\n> >>    set your LD_LIBRARY_PATH (user specific) or\n> >>    update your ld.so configuration (system wide)\n> >> You have an ld.so.conf.d directory on your system, so if you wish to\n> ensure that\n> >> applications find the installed libcoin libraries, system wide, you\n> could install an\n> >> libcoin specific ld.so configuration with:\n> >>    sudo make install_ld_conf\n> >>\n> >> -- Configuring done\n> >> -- Generating done\n> >> -- Build files have been written to: /home/user/libcoin\n> >> ----\n> >>\n> >> Now I tried make, without success:\n> >>\n> >> ----\n> >> .....\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,\n> unsigned int)':\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x16): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x2c): undefined reference to `BN_lshift'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0xad): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,\n> unsigned int)':\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xf): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x1e): undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x47): undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xcb): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,\n> CBigNum const&)':\n> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\n> CBigNum const&)':\n> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> >>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> >> collect2: ld returned 1 exit status\n> >> make[2]: *** [bin/bitcoind] Error 1\n> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n> Error 2\n> >> make: *** [all] Error 2\n> >> -----\n> >>\n> >> What can I do?!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >>\n> >> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> >> Dear Bitcoiners,\n> >>\n> >> libcoin is now in a state ready for its first release, which I would\n> like to share with you!\n> >>\n> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n> >>\n> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release\n> of the first version of the crypto currency library \"libcoin\" based on the\n> bitcoin/bitcoin \"Satoshi\" client.\n> >>\n> >> libcoin also maintains a version of bitcoind that is a 100% compatible\n> drop-in replacement of the bitcoin/bitcoind client: You can use it on the\n> same computer on the same files and you can call it with the same scripts.\n> And you can easily extend it without touching the basic bitcoin source\n> files.\n> >>\n> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\n> >>\n> >> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> >>\n> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> >>\n> >> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>\n> >> The libcoin license is LGPL v. 3. This mean that you can use it in open\n> source as well as in commercial projects, but improvements should go back\n> into the libcoin library.\n> >>\n> >> ======\n> >>\n> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>\n> >> Join libcoin on twitter: http://twitter.com/libcoin\n> >>\n> >> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>\n> >> Best regards,\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Keep Your Developer Skills Current with LearnDevNow!\n> >> The most comprehensive online learning library for Microsoft developers\n> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> >> Metro Style Apps, more. Free future releases when you subscribe now!\n> >> http://p.sf.net/sfu/learndevnow-d2d\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> >\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120224/19e15bb1/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-24T19:40:00",
                "message_text_only": "Just copied your bitcoin.conf file to my system and the server connects just fine to RPC on 10332\nand I get using curl:\n\nMacGronager:bin gronager$ curl --data-binary '{\"jsonrpc\": \"2.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'Content-Type: application/json' http://127.0.0.1:10332\n{\"jsonrpc\":\"2.0\",\"result\":168299,\"error\":null,\"id\":\"curltest\"}\n\nDidn't do a retest on linux, but I am quite certain that it works there well as I had it running for weeks on port 9332 on amazon.\n\nHowever, the \"port\" parameter will not work\n\n> ...\n> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> ...\n\nand as you can see it connects to 8333 - that for the bitcoin protocol.\n\nI havn't implemented \"port\" (have a look at the possible options in bitcoind.cpp). It was not on the official help list in bitcoind 0.4.0 (see init.cpp or do a bitcoin/bitcoind -help). But, I can implement it over the weekend if your need it.\n\nI also tested the bitcoind --rpcport=10332 and it worked too using the commandline - both running as server and client.\n\n/M\n\n\n>  I already tried:\n> \n> /usr/local/bin/bitcoind --rpcport 10332\n> /usr/local/bin/bitcoind --rpcport=10332\n> \n>  Without success...\n> \n> Thanks again!\n> Thiago\n> \n> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi Thiago,\n> \n> Forgot to comment on the two latter:\n> \n> > $ bitcoind getaccountaddress \"\"\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n> > $ bitcoind listaccounts\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n> \n> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n> \n> See in the bitcoind.cpp file for commands that you can use with and without auth...\n> \n> Those that contains an \"auth\" requires auth:\n> \n>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> \n> As opposed to:\n> \n>       server.registerMethod(method_ptr(new GetInfo(node)));\n> \n> auth is defined by:\n> \n>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n> \n> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n> \n> /M\n> \n> \n> >\n> > Any tips?! lol\n> >\n> > Thanks!\n> > Thiago\n> >\n> > 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> > AWESOME!!!\n> >\n> > I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >\n> > sudo aptitude install libboost1.46-all-dev\n> >\n> > ...alongside with another already installed dependencies, and now it works!!\n> >\n> > Thank you!\n> > Thiago\n> >\n> > 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi Martinx,\n> >\n> > Another note:\n> >\n> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> >\n> > You should do a :\n> >\n> > sudo apt-get upgrade libboost-dev-all\n> >\n> > to get the 1.46.1 library\n> >\n> > /M\n> >\n> >\n> > On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Hi Michael!\n> >>\n> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> >>\n> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> >>\n> >> ----\n> >> user at desk:~/libcoin$ ./configure\n> >> -- The C compiler identification is GNU\n> >> -- The CXX compiler identification is GNU\n> >> -- Check for working C compiler: /usr/bin/gcc\n> >> -- Check for working C compiler: /usr/bin/gcc -- works\n> >> -- Detecting C compiler ABI info\n> >> -- Detecting C compiler ABI info - done\n> >> -- Check for working CXX compiler: /usr/bin/c++\n> >> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >> -- Detecting CXX compiler ABI info\n> >> -- Detecting CXX compiler ABI info - done\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >> -- Looking for pthread_create in pthreads\n> >> -- Looking for pthread_create in pthreads - not found\n> >> -- Looking for pthread_create in pthread\n> >> -- Looking for pthread_create in pthread - found\n> >> -- Found Threads: TRUE\n> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >> -- Looking for gethostbyname\n> >> -- Looking for gethostbyname - found\n> >> -- Looking for connect\n> >> -- Looking for connect - found\n> >> -- Looking for remove\n> >> -- Looking for remove - found\n> >> -- Looking for shmat\n> >> -- Looking for shmat - found\n> >> -- Looking for IceConnectionNumber in ICE\n> >> -- Looking for IceConnectionNumber in ICE - found\n> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >> -- Boost version: 1.42.0\n> >> -- Found the following Boost libraries:\n> >> --   date_time\n> >> --   regex\n> >> --   filesystem\n> >> --   system\n> >> --   program_options\n> >> --   thread\n> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >> -- Looking for Q_WS_X11\n> >> -- Looking for Q_WS_X11 - found\n> >> -- Looking for Q_WS_WIN\n> >> -- Looking for Q_WS_WIN - not found.\n> >> -- Looking for Q_WS_QWS\n> >> -- Looking for Q_WS_QWS - not found.\n> >> -- Looking for Q_WS_MAC\n> >> -- Looking for Q_WS_MAC - not found.\n> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >> -- Found wxWidgets: TRUE\n> >>\n> >> The build system is configured to install libraries to /usr/local/lib\n> >> Your applications may not be able to find your installed libraries unless you:\n> >>    set your LD_LIBRARY_PATH (user specific) or\n> >>    update your ld.so configuration (system wide)\n> >> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> >> applications find the installed libcoin libraries, system wide, you could install an\n> >> libcoin specific ld.so configuration with:\n> >>    sudo make install_ld_conf\n> >>\n> >> -- Configuring done\n> >> -- Generating done\n> >> -- Build files have been written to: /home/user/libcoin\n> >> ----\n> >>\n> >> Now I tried make, without success:\n> >>\n> >> ----\n> >> .....\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> >> collect2: ld returned 1 exit status\n> >> make[2]: *** [bin/bitcoind] Error 1\n> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> >> make: *** [all] Error 2\n> >> -----\n> >>\n> >> What can I do?!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >>\n> >> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> >> Dear Bitcoiners,\n> >>\n> >> libcoin is now in a state ready for its first release, which I would like to share with you!\n> >>\n> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> >>\n> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> >>\n> >> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> >>\n> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> >>\n> >> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> >>\n> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> >>\n> >> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>\n> >> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> >>\n> >> ======\n> >>\n> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>\n> >> Join libcoin on twitter: http://twitter.com/libcoin\n> >>\n> >> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>\n> >> Best regards,\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Keep Your Developer Skills Current with LearnDevNow!\n> >> The most comprehensive online learning library for Microsoft developers\n> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> >> Metro Style Apps, more. Free future releases when you subscribe now!\n> >> http://p.sf.net/sfu/learndevnow-d2d\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> >\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-24T19:57:40",
                "message_text_only": "OK - didn't took the weekend:\n\nsupport for \"port\" is on github now :)\n\nOnly took two lines:\n\n            (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n\nand using the port option in the Node constructor (was there already):\n\n        Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n\n/M\n\n\n\nOn 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Hi Michael,\n> \n>  Thank you for your attention!\n> \n>  Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n> \n>  Look:\n> \n> $ cat .bitcoin/bitcoin.conf \n> server=1\n> daemon=1\n> rpcuser=libcoin\n> rpcpassword=LibCoin13\n> rpcport=10332\n> port=10333\n> \n>  But:\n> \n> /usr/local/bin/bitcoind\n> Error: Address already in use\n> \n> terminate called after throwing an instance of 'DbException'\n>   what():  DbEnv::close: Invalid argument\n> Aborted\n> \n>  When I \"strace it\", I can see:\n> \n> ...\n> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> ...\n> \n>  I already tried:\n> \n> /usr/local/bin/bitcoind --rpcport 10332\n> /usr/local/bin/bitcoind --rpcport=10332\n> \n>  Without success...\n> \n> Thanks again!\n> Thiago\n> \n> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> Hi Thiago,\n> \n> Forgot to comment on the two latter:\n> \n> > $ bitcoind getaccountaddress \"\"\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n> > $ bitcoind listaccounts\n> > HTTP error code: 401\n> > Error: couldn't parse reply from server\n> >\n> \n> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n> \n> See in the bitcoind.cpp file for commands that you can use with and without auth...\n> \n> Those that contains an \"auth\" requires auth:\n> \n>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> \n> As opposed to:\n> \n>       server.registerMethod(method_ptr(new GetInfo(node)));\n> \n> auth is defined by:\n> \n>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n> \n> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n> \n> /M\n> \n> \n> >\n> > Any tips?! lol\n> >\n> > Thanks!\n> > Thiago\n> >\n> > 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> > AWESOME!!!\n> >\n> > I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >\n> > sudo aptitude install libboost1.46-all-dev\n> >\n> > ...alongside with another already installed dependencies, and now it works!!\n> >\n> > Thank you!\n> > Thiago\n> >\n> > 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi Martinx,\n> >\n> > Another note:\n> >\n> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n> >\n> > You should do a :\n> >\n> > sudo apt-get upgrade libboost-dev-all\n> >\n> > to get the 1.46.1 library\n> >\n> > /M\n> >\n> >\n> > On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Hi Michael!\n> >>\n> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n> >>\n> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n> >>\n> >> ----\n> >> user at desk:~/libcoin$ ./configure\n> >> -- The C compiler identification is GNU\n> >> -- The CXX compiler identification is GNU\n> >> -- Check for working C compiler: /usr/bin/gcc\n> >> -- Check for working C compiler: /usr/bin/gcc -- works\n> >> -- Detecting C compiler ABI info\n> >> -- Detecting C compiler ABI info - done\n> >> -- Check for working CXX compiler: /usr/bin/c++\n> >> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >> -- Detecting CXX compiler ABI info\n> >> -- Detecting CXX compiler ABI info - done\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >> -- Looking for pthread_create in pthreads\n> >> -- Looking for pthread_create in pthreads - not found\n> >> -- Looking for pthread_create in pthread\n> >> -- Looking for pthread_create in pthread - found\n> >> -- Found Threads: TRUE\n> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >> -- Looking for gethostbyname\n> >> -- Looking for gethostbyname - found\n> >> -- Looking for connect\n> >> -- Looking for connect - found\n> >> -- Looking for remove\n> >> -- Looking for remove - found\n> >> -- Looking for shmat\n> >> -- Looking for shmat - found\n> >> -- Looking for IceConnectionNumber in ICE\n> >> -- Looking for IceConnectionNumber in ICE - found\n> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >> -- Boost version: 1.42.0\n> >> -- Found the following Boost libraries:\n> >> --   date_time\n> >> --   regex\n> >> --   filesystem\n> >> --   system\n> >> --   program_options\n> >> --   thread\n> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >> -- Looking for Q_WS_X11\n> >> -- Looking for Q_WS_X11 - found\n> >> -- Looking for Q_WS_WIN\n> >> -- Looking for Q_WS_WIN - not found.\n> >> -- Looking for Q_WS_QWS\n> >> -- Looking for Q_WS_QWS - not found.\n> >> -- Looking for Q_WS_MAC\n> >> -- Looking for Q_WS_MAC - not found.\n> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >> -- Found wxWidgets: TRUE\n> >>\n> >> The build system is configured to install libraries to /usr/local/lib\n> >> Your applications may not be able to find your installed libraries unless you:\n> >>    set your LD_LIBRARY_PATH (user specific) or\n> >>    update your ld.so configuration (system wide)\n> >> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n> >> applications find the installed libcoin libraries, system wide, you could install an\n> >> libcoin specific ld.so configuration with:\n> >>    sudo make install_ld_conf\n> >>\n> >> -- Configuring done\n> >> -- Generating done\n> >> -- Build files have been written to: /home/user/libcoin\n> >> ----\n> >>\n> >> Now I tried make, without success:\n> >>\n> >> ----\n> >> .....\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n> >> collect2: ld returned 1 exit status\n> >> make[2]: *** [bin/bitcoind] Error 1\n> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n> >> make: *** [all] Error 2\n> >> -----\n> >>\n> >> What can I do?!\n> >>\n> >> Best,\n> >> Thiago\n> >>\n> >>\n> >> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> >> Dear Bitcoiners,\n> >>\n> >> libcoin is now in a state ready for its first release, which I would like to share with you!\n> >>\n> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n> >>\n> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n> >>\n> >> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n> >>\n> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n> >>\n> >> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n> >>\n> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n> >>\n> >> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>\n> >> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n> >>\n> >> ======\n> >>\n> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>\n> >> Join libcoin on twitter: http://twitter.com/libcoin\n> >>\n> >> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>\n> >> Best regards,\n> >>\n> >> Michael Gronager, PhD\n> >> Director, Ceptacle\n> >> Jens Juels Gade 33\n> >> 2100 Copenhagen E\n> >> Mobile: +45 31 45 14 01\n> >> E-mail: gronager at ceptacle.com\n> >> Web: http://www.ceptacle.com/\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Keep Your Developer Skills Current with LearnDevNow!\n> >> The most comprehensive online learning library for Microsoft developers\n> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> >> Metro Style Apps, more. Free future releases when you subscribe now!\n> >> http://p.sf.net/sfu/learndevnow-d2d\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n> >\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-25T02:11:29",
                "message_text_only": "Thank you!!!\n\nIt is all working now! Except \"help\"...\n\nNice work Michael!!\n\nBest,\nThiago\n\n2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> OK - didn't took the weekend:\n>\n> support for \"port\" is on github now :)\n>\n> Only took two lines:\n>\n>            (\"port\", value<unsigned short>(&port)->default_value(8333),\n> \"Listen on specified port for the p2p protocol\")\n>\n> and using the port option in the Node constructor (was there already):\n>\n>        Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\",\n> lexical_cast<string>(port)); // it is also here we specify the use of a\n> proxy!\n>\n> /M\n>\n>\n>\n> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Hi Michael,\n> >\n> >  Thank you for your attention!\n> >\n> >  Now, I'm trying to start libcoin's bitcoind using high ports but, it\n> always try to listen at 8332, no matter what I \"say\"...\n> >\n> >  Look:\n> >\n> > $ cat .bitcoin/bitcoin.conf\n> > server=1\n> > daemon=1\n> > rpcuser=libcoin\n> > rpcpassword=LibCoin13\n> > rpcport=10332\n> > port=10333\n> >\n> >  But:\n> >\n> > /usr/local/bin/bitcoind\n> > Error: Address already in use\n> >\n> > terminate called after throwing an instance of 'DbException'\n> >   what():  DbEnv::close: Invalid argument\n> > Aborted\n> >\n> >  When I \"strace it\", I can see:\n> >\n> > ...\n> > bind(12, {sa_family=AF_INET, sin_port=htons(8333),\n> sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> > ...\n> >\n> >  I already tried:\n> >\n> > /usr/local/bin/bitcoind --rpcport 10332\n> > /usr/local/bin/bitcoind --rpcport=10332\n> >\n> >  Without success...\n> >\n> > Thanks again!\n> > Thiago\n> >\n> > 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > Hi Thiago,\n> >\n> > Forgot to comment on the two latter:\n> >\n> > > $ bitcoind getaccountaddress \"\"\n> > > HTTP error code: 401\n> > > Error: couldn't parse reply from server\n> > >\n> > > $ bitcoind listaccounts\n> > > HTTP error code: 401\n> > > Error: couldn't parse reply from server\n> > >\n> >\n> > 401 = permission denied - you need to setup username / password either\n> on the commandline or in the bicoin.conf file to access those commands...\n> >\n> > See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n> >\n> > Those that contains an \"auth\" requires auth:\n> >\n> >       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >\n> > As opposed to:\n> >\n> >       server.registerMethod(method_ptr(new GetInfo(node)));\n> >\n> > auth is defined by:\n> >\n> >       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not\n> set, all authenticated methods becomes disallowed.\n> >\n> > so you just experience the case explained in the comment ;) I admit that\n> the output could be more readable, though!\n> >\n> > /M\n> >\n> >\n> > >\n> > > Any tips?! lol\n> > >\n> > > Thanks!\n> > > Thiago\n> > >\n> > > 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> > > AWESOME!!!\n> > >\n> > > I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> > >\n> > > sudo aptitude install libboost1.46-all-dev\n> > >\n> > > ...alongside with another already installed dependencies, and now it\n> works!!\n> > >\n> > > Thank you!\n> > > Thiago\n> > >\n> > > 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > > Hi Martinx,\n> > >\n> > > Another note:\n> > >\n> > > boost 1.42 and openssl 1.0 has a conflict (you will see it when you\n> try to compile coinHTTP with that specific combination: sslv2 has been\n> removed from openssl, but boost still references it.)\n> > >\n> > > You should do a :\n> > >\n> > > sudo apt-get upgrade libboost-dev-all\n> > >\n> > > to get the 1.46.1 library\n> > >\n> > > /M\n> > >\n> > >\n> > > On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> > >\n> > >> Hi Michael!\n> > >>\n> > >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n> the CryptoCurrencies as a hole... Thanks!!!\n> > >>\n> > >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\n> machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> > >>\n> > >> ----\n> > >> user at desk:~/libcoin$ ./configure\n> > >> -- The C compiler identification is GNU\n> > >> -- The CXX compiler identification is GNU\n> > >> -- Check for working C compiler: /usr/bin/gcc\n> > >> -- Check for working C compiler: /usr/bin/gcc -- works\n> > >> -- Detecting C compiler ABI info\n> > >> -- Detecting C compiler ABI info - done\n> > >> -- Check for working CXX compiler: /usr/bin/c++\n> > >> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> > >> -- Detecting CXX compiler ABI info\n> > >> -- Detecting CXX compiler ABI info - done\n> > >> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> > >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> > >> -- Looking for pthread_create in pthreads\n> > >> -- Looking for pthread_create in pthreads - not found\n> > >> -- Looking for pthread_create in pthread\n> > >> -- Looking for pthread_create in pthread - found\n> > >> -- Found Threads: TRUE\n> > >> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> > >> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> > >> -- Looking for gethostbyname\n> > >> -- Looking for gethostbyname - found\n> > >> -- Looking for connect\n> > >> -- Looking for connect - found\n> > >> -- Looking for remove\n> > >> -- Looking for remove - found\n> > >> -- Looking for shmat\n> > >> -- Looking for shmat - found\n> > >> -- Looking for IceConnectionNumber in ICE\n> > >> -- Looking for IceConnectionNumber in ICE - found\n> > >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> > >> -- Boost version: 1.42.0\n> > >> -- Found the following Boost libraries:\n> > >> --   date_time\n> > >> --   regex\n> > >> --   filesystem\n> > >> --   system\n> > >> --   program_options\n> > >> --   thread\n> > >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> > >> -- Looking for Q_WS_X11\n> > >> -- Looking for Q_WS_X11 - found\n> > >> -- Looking for Q_WS_WIN\n> > >> -- Looking for Q_WS_WIN - not found.\n> > >> -- Looking for Q_WS_QWS\n> > >> -- Looking for Q_WS_QWS - not found.\n> > >> -- Looking for Q_WS_MAC\n> > >> -- Looking for Q_WS_MAC - not found.\n> > >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> > >> -- Found wxWidgets: TRUE\n> > >>\n> > >> The build system is configured to install libraries to /usr/local/lib\n> > >> Your applications may not be able to find your installed libraries\n> unless you:\n> > >>    set your LD_LIBRARY_PATH (user specific) or\n> > >>    update your ld.so configuration (system wide)\n> > >> You have an ld.so.conf.d directory on your system, so if you wish to\n> ensure that\n> > >> applications find the installed libcoin libraries, system wide, you\n> could install an\n> > >> libcoin specific ld.so configuration with:\n> > >>    sudo make install_ld_conf\n> > >>\n> > >> -- Configuring done\n> > >> -- Generating done\n> > >> -- Build files have been written to: /home/user/libcoin\n> > >> ----\n> > >>\n> > >> Now I tried make, without success:\n> > >>\n> > >> ----\n> > >> .....\n> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> > >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum\n> const&, unsigned int)':\n> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x16): undefined reference to `BN_init'\n> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x2c): undefined reference to `BN_lshift'\n> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0xad): undefined reference to `BN_clear_free'\n> > >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum\n> const&, unsigned int)':\n> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xf): undefined reference to `BN_init'\n> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x1e): undefined reference to `BN_copy'\n> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x47): undefined reference to `BN_clear_free'\n> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xcb): undefined reference to `BN_clear_free'\n> > >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum\n> const&, CBigNum const&)':\n> > >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> > >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\n> CBigNum const&)':\n> > >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> > >> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> > >>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> > >>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> > >> collect2: ld returned 1 exit status\n> > >> make[2]: *** [bin/bitcoind] Error 1\n> > >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n> Error 2\n> > >> make: *** [all] Error 2\n> > >> -----\n> > >>\n> > >> What can I do?!\n> > >>\n> > >> Best,\n> > >> Thiago\n> > >>\n> > >>\n> > >> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> > >> Dear Bitcoiners,\n> > >>\n> > >> libcoin is now in a state ready for its first release, which I would\n> like to share with you!\n> > >>\n> > >> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n> > >>\n> > >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the\n> release of the first version of the crypto currency library \"libcoin\" based\n> on the bitcoin/bitcoin \"Satoshi\" client.\n> > >>\n> > >> libcoin also maintains a version of bitcoind that is a 100%\n> compatible drop-in replacement of the bitcoin/bitcoind client: You can use\n> it on the same computer on the same files and you can call it with the same\n> scripts. And you can easily extend it without touching the basic bitcoin\n> source files.\n> > >>\n> > >> The libcoin/bitcoind client downloads the entire block chain 3.5\n> times faster than the bitcoin/bitcoind client. This is less than 90 minutes\n> on a modern laptop!\n> > >>\n> > >> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> > >>\n> > >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> > >>\n> > >> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n> > >>\n> > >> The libcoin license is LGPL v. 3. This mean that you can use it in\n> open source as well as in commercial projects, but improvements should go\n> back into the libcoin library.\n> > >>\n> > >> ======\n> > >>\n> > >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> > >>\n> > >> Join libcoin on twitter: http://twitter.com/libcoin\n> > >>\n> > >> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> > >>\n> > >> Best regards,\n> > >>\n> > >> Michael Gronager, PhD\n> > >> Director, Ceptacle\n> > >> Jens Juels Gade 33\n> > >> 2100 Copenhagen E\n> > >> Mobile: +45 31 45 14 01\n> > >> E-mail: gronager at ceptacle.com\n> > >> Web: http://www.ceptacle.com/\n> > >>\n> > >>\n> > >>\n> ------------------------------------------------------------------------------\n> > >> Keep Your Developer Skills Current with LearnDevNow!\n> > >> The most comprehensive online learning library for Microsoft\n> developers\n> > >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n> MVC3,\n> > >> Metro Style Apps, more. Free future releases when you subscribe now!\n> > >> http://p.sf.net/sfu/learndevnow-d2d\n> > >> _______________________________________________\n> > >> Bitcoin-development mailing list\n> > >> Bitcoin-development at lists.sourceforge.net\n> > >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >>\n> > >\n> > > Michael Gronager, PhD\n> > > Director, Ceptacle\n> > > Jens Juels Gade 33\n> > > 2100 Copenhagen E\n> > > Mobile: +45 31 45 14 01\n> > > E-mail: gronager at ceptacle.com\n> > > Web: http://www.ceptacle.com/\n> > >\n> > >\n> > >\n> >\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120225/f28e38b5/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-26T17:57:35",
                "message_text_only": "And if you do an update now \"help\" is there too ;)\n\n/M\n\nOn 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> Thank you!!!\n> \n> It is all working now! Except \"help\"...\n> \n> Nice work Michael!!\n> \n> Best,\n> Thiago\n> \n> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> OK - didn't took the weekend:\n> \n> support for \"port\" is on github now :)\n> \n> Only took two lines:\n> \n>           (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n> \n> and using the port option in the Node constructor (was there already):\n> \n>       Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n> \n> /M\n> \n> \n> \n> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n>> Hi Michael,\n>> \n>> Thank you for your attention!\n>> \n>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n>> \n>> Look:\n>> \n>> $ cat .bitcoin/bitcoin.conf\n>> server=1\n>> daemon=1\n>> rpcuser=libcoin\n>> rpcpassword=LibCoin13\n>> rpcport=10332\n>> port=10333\n>> \n>> But:\n>> \n>> /usr/local/bin/bitcoind\n>> Error: Address already in use\n>> \n>> terminate called after throwing an instance of 'DbException'\n>>  what():  DbEnv::close: Invalid argument\n>> Aborted\n>> \n>> When I \"strace it\", I can see:\n>> \n>> ...\n>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n>> ...\n>> \n>> I already tried:\n>> \n>> /usr/local/bin/bitcoind --rpcport 10332\n>> /usr/local/bin/bitcoind --rpcport=10332\n>> \n>> Without success...\n>> \n>> Thanks again!\n>> Thiago\n>> \n>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>> Hi Thiago,\n>> \n>> Forgot to comment on the two latter:\n>> \n>>> $ bitcoind getaccountaddress \"\"\n>>> HTTP error code: 401\n>>> Error: couldn't parse reply from server\n>>> \n>>> $ bitcoind listaccounts\n>>> HTTP error code: 401\n>>> Error: couldn't parse reply from server\n>>> \n>> \n>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n>> \n>> See in the bitcoind.cpp file for commands that you can use with and without auth...\n>> \n>> Those that contains an \"auth\" requires auth:\n>> \n>>      server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n>> \n>> As opposed to:\n>> \n>>      server.registerMethod(method_ptr(new GetInfo(node)));\n>> \n>> auth is defined by:\n>> \n>>      Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n>> \n>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n>> \n>> /M\n>> \n>> \n>>> \n>>> Any tips?! lol\n>>> \n>>> Thanks!\n>>> Thiago\n>>> \n>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>>> AWESOME!!!\n>>> \n>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n>>> \n>>> sudo aptitude install libboost1.46-all-dev\n>>> \n>>> ...alongside with another already installed dependencies, and now it works!!\n>>> \n>>> Thank you!\n>>> Thiago\n>>> \n>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>>> Hi Martinx,\n>>> \n>>> Another note:\n>>> \n>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n>>> \n>>> You should do a :\n>>> \n>>> sudo apt-get upgrade libboost-dev-all\n>>> \n>>> to get the 1.46.1 library\n>>> \n>>> /M\n>>> \n>>> \n>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>>> \n>>>> Hi Michael!\n>>>> \n>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n>>>> \n>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n>>>> \n>>>> ----\n>>>> user at desk:~/libcoin$ ./configure\n>>>> -- The C compiler identification is GNU\n>>>> -- The CXX compiler identification is GNU\n>>>> -- Check for working C compiler: /usr/bin/gcc\n>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n>>>> -- Detecting C compiler ABI info\n>>>> -- Detecting C compiler ABI info - done\n>>>> -- Check for working CXX compiler: /usr/bin/c++\n>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n>>>> -- Detecting CXX compiler ABI info\n>>>> -- Detecting CXX compiler ABI info - done\n>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>>>> -- Looking for pthread_create in pthreads\n>>>> -- Looking for pthread_create in pthreads - not found\n>>>> -- Looking for pthread_create in pthread\n>>>> -- Looking for pthread_create in pthread - found\n>>>> -- Found Threads: TRUE\n>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>>>> -- Looking for gethostbyname\n>>>> -- Looking for gethostbyname - found\n>>>> -- Looking for connect\n>>>> -- Looking for connect - found\n>>>> -- Looking for remove\n>>>> -- Looking for remove - found\n>>>> -- Looking for shmat\n>>>> -- Looking for shmat - found\n>>>> -- Looking for IceConnectionNumber in ICE\n>>>> -- Looking for IceConnectionNumber in ICE - found\n>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>>>> -- Boost version: 1.42.0\n>>>> -- Found the following Boost libraries:\n>>>> --   date_time\n>>>> --   regex\n>>>> --   filesystem\n>>>> --   system\n>>>> --   program_options\n>>>> --   thread\n>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>>>> -- Looking for Q_WS_X11\n>>>> -- Looking for Q_WS_X11 - found\n>>>> -- Looking for Q_WS_WIN\n>>>> -- Looking for Q_WS_WIN - not found.\n>>>> -- Looking for Q_WS_QWS\n>>>> -- Looking for Q_WS_QWS - not found.\n>>>> -- Looking for Q_WS_MAC\n>>>> -- Looking for Q_WS_MAC - not found.\n>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>>>> -- Found wxWidgets: TRUE\n>>>> \n>>>> The build system is configured to install libraries to /usr/local/lib\n>>>> Your applications may not be able to find your installed libraries unless you:\n>>>>   set your LD_LIBRARY_PATH (user specific) or\n>>>>   update your ld.so configuration (system wide)\n>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n>>>> applications find the installed libcoin libraries, system wide, you could install an\n>>>> libcoin specific ld.so configuration with:\n>>>>   sudo make install_ld_conf\n>>>> \n>>>> -- Configuring done\n>>>> -- Generating done\n>>>> -- Build files have been written to: /home/user/libcoin\n>>>> ----\n>>>> \n>>>> Now I tried make, without success:\n>>>> \n>>>> ----\n>>>> .....\n>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n>>>> collect2: ld returned 1 exit status\n>>>> make[2]: *** [bin/bitcoind] Error 1\n>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n>>>> make: *** [all] Error 2\n>>>> -----\n>>>> \n>>>> What can I do?!\n>>>> \n>>>> Best,\n>>>> Thiago\n>>>> \n>>>> \n>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>>>> Dear Bitcoiners,\n>>>> \n>>>> libcoin is now in a state ready for its first release, which I would like to share with you!\n>>>> \n>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n>>>> \n>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n>>>> \n>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n>>>> \n>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n>>>> \n>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n>>>> \n>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n>>>> \n>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n>>>> \n>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n>>>> \n>>>> ======\n>>>> \n>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>>>> \n>>>> Join libcoin on twitter: http://twitter.com/libcoin\n>>>> \n>>>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>>>> \n>>>> Best regards,\n>>>> \n>>>> Michael Gronager, PhD\n>>>> Director, Ceptacle\n>>>> Jens Juels Gade 33\n>>>> 2100 Copenhagen E\n>>>> Mobile: +45 31 45 14 01\n>>>> E-mail: gronager at ceptacle.com\n>>>> Web: http://www.ceptacle.com/\n>>>> \n>>>> \n>>>> ------------------------------------------------------------------------------\n>>>> Keep Your Developer Skills Current with LearnDevNow!\n>>>> The most comprehensive online learning library for Microsoft developers\n>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n>>>> http://p.sf.net/sfu/learndevnow-d2d\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> \n>>> \n>>> Michael Gronager, PhD\n>>> Director, Ceptacle\n>>> Jens Juels Gade 33\n>>> 2100 Copenhagen E\n>>> Mobile: +45 31 45 14 01\n>>> E-mail: gronager at ceptacle.com\n>>> Web: http://www.ceptacle.com/\n>>> \n>>> \n>>> \n>> \n>> \n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-02-27T19:03:39",
                "message_text_only": "AWESOME!! Thank you!!\n\nAnyway, I found a new problem... lol\n\n/usr/local/bin/bitcoind getinfo #okay\n{\n    \"version\" : 40001,\n    \"blocks\" : 168753,\n    \"connections\" : 8,\n    \"difficulty\" : 1376302.26788638,\n    \"testnet\" : false\n}\n\n/usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n\n/usr/local/bin/bitcoind listaccounts # NOT okay...\n{\n}\n\n/usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n\n/usr/local/bin/bitcoind listaccounts # NOT okay...\n{\n    \"teste\" : 0.00000000\n}\n\nWhere is my default account listed at \"listaccounts\" output?!\n\nBest,\nThiago\n\n2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> And if you do an update now \"help\" is there too ;)\n>\n> /M\n>\n> On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Thank you!!!\n> >\n> > It is all working now! Except \"help\"...\n> >\n> > Nice work Michael!!\n> >\n> > Best,\n> > Thiago\n> >\n> > 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> > OK - didn't took the weekend:\n> >\n> > support for \"port\" is on github now :)\n> >\n> > Only took two lines:\n> >\n> >           (\"port\", value<unsigned short>(&port)->default_value(8333),\n> \"Listen on specified port for the p2p protocol\")\n> >\n> > and using the port option in the Node constructor (was there already):\n> >\n> >       Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" :\n> \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the\n> use of a proxy!\n> >\n> > /M\n> >\n> >\n> >\n> > On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >\n> >> Hi Michael,\n> >>\n> >> Thank you for your attention!\n> >>\n> >> Now, I'm trying to start libcoin's bitcoind using high ports but, it\n> always try to listen at 8332, no matter what I \"say\"...\n> >>\n> >> Look:\n> >>\n> >> $ cat .bitcoin/bitcoin.conf\n> >> server=1\n> >> daemon=1\n> >> rpcuser=libcoin\n> >> rpcpassword=LibCoin13\n> >> rpcport=10332\n> >> port=10333\n> >>\n> >> But:\n> >>\n> >> /usr/local/bin/bitcoind\n> >> Error: Address already in use\n> >>\n> >> terminate called after throwing an instance of 'DbException'\n> >>  what():  DbEnv::close: Invalid argument\n> >> Aborted\n> >>\n> >> When I \"strace it\", I can see:\n> >>\n> >> ...\n> >> bind(12, {sa_family=AF_INET, sin_port=htons(8333),\n> sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n> >> ...\n> >>\n> >> I already tried:\n> >>\n> >> /usr/local/bin/bitcoind --rpcport 10332\n> >> /usr/local/bin/bitcoind --rpcport=10332\n> >>\n> >> Without success...\n> >>\n> >> Thanks again!\n> >> Thiago\n> >>\n> >> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >> Hi Thiago,\n> >>\n> >> Forgot to comment on the two latter:\n> >>\n> >>> $ bitcoind getaccountaddress \"\"\n> >>> HTTP error code: 401\n> >>> Error: couldn't parse reply from server\n> >>>\n> >>> $ bitcoind listaccounts\n> >>> HTTP error code: 401\n> >>> Error: couldn't parse reply from server\n> >>>\n> >>\n> >> 401 = permission denied - you need to setup username / password either\n> on the commandline or in the bicoin.conf file to access those commands...\n> >>\n> >> See in the bitcoind.cpp file for commands that you can use with and\n> without auth...\n> >>\n> >> Those that contains an \"auth\" requires auth:\n> >>\n> >>      server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n> >>\n> >> As opposed to:\n> >>\n> >>      server.registerMethod(method_ptr(new GetInfo(node)));\n> >>\n> >> auth is defined by:\n> >>\n> >>      Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not\n> set, all authenticated methods becomes disallowed.\n> >>\n> >> so you just experience the case explained in the comment ;) I admit\n> that the output could be more readable, though!\n> >>\n> >> /M\n> >>\n> >>\n> >>>\n> >>> Any tips?! lol\n> >>>\n> >>> Thanks!\n> >>> Thiago\n> >>>\n> >>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n> >>> AWESOME!!!\n> >>>\n> >>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n> >>>\n> >>> sudo aptitude install libboost1.46-all-dev\n> >>>\n> >>> ...alongside with another already installed dependencies, and now it\n> works!!\n> >>>\n> >>> Thank you!\n> >>> Thiago\n> >>>\n> >>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> >>> Hi Martinx,\n> >>>\n> >>> Another note:\n> >>>\n> >>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you\n> try to compile coinHTTP with that specific combination: sslv2 has been\n> removed from openssl, but boost still references it.)\n> >>>\n> >>> You should do a :\n> >>>\n> >>> sudo apt-get upgrade libboost-dev-all\n> >>>\n> >>> to get the 1.46.1 library\n> >>>\n> >>> /M\n> >>>\n> >>>\n> >>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> >>>\n> >>>> Hi Michael!\n> >>>>\n> >>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for\n> the CryptoCurrencies as a hole... Thanks!!!\n> >>>>\n> >>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this\n> machine, I have compiled and running Bitcoin (from sources), Namecoin,\n> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to\n> compile libcoin, I got:\n> >>>>\n> >>>> ----\n> >>>> user at desk:~/libcoin$ ./configure\n> >>>> -- The C compiler identification is GNU\n> >>>> -- The CXX compiler identification is GNU\n> >>>> -- Check for working C compiler: /usr/bin/gcc\n> >>>> -- Check for working C compiler: /usr/bin/gcc -- works\n> >>>> -- Detecting C compiler ABI info\n> >>>> -- Detecting C compiler ABI info - done\n> >>>> -- Check for working CXX compiler: /usr/bin/c++\n> >>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n> >>>> -- Detecting CXX compiler ABI info\n> >>>> -- Detecting CXX compiler ABI info - done\n> >>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n> >>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n> >>>> -- Looking for pthread_create in pthreads\n> >>>> -- Looking for pthread_create in pthreads - not found\n> >>>> -- Looking for pthread_create in pthread\n> >>>> -- Looking for pthread_create in pthread - found\n> >>>> -- Found Threads: TRUE\n> >>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n> >>>> -- Looking for XOpenDisplay in\n> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n> >>>> -- Looking for gethostbyname\n> >>>> -- Looking for gethostbyname - found\n> >>>> -- Looking for connect\n> >>>> -- Looking for connect - found\n> >>>> -- Looking for remove\n> >>>> -- Looking for remove - found\n> >>>> -- Looking for shmat\n> >>>> -- Looking for shmat - found\n> >>>> -- Looking for IceConnectionNumber in ICE\n> >>>> -- Looking for IceConnectionNumber in ICE - found\n> >>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n> >>>> -- Boost version: 1.42.0\n> >>>> -- Found the following Boost libraries:\n> >>>> --   date_time\n> >>>> --   regex\n> >>>> --   filesystem\n> >>>> --   system\n> >>>> --   program_options\n> >>>> --   thread\n> >>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n> >>>> -- Looking for Q_WS_X11\n> >>>> -- Looking for Q_WS_X11 - found\n> >>>> -- Looking for Q_WS_WIN\n> >>>> -- Looking for Q_WS_WIN - not found.\n> >>>> -- Looking for Q_WS_QWS\n> >>>> -- Looking for Q_WS_QWS - not found.\n> >>>> -- Looking for Q_WS_MAC\n> >>>> -- Looking for Q_WS_MAC - not found.\n> >>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n> >>>> -- Found wxWidgets: TRUE\n> >>>>\n> >>>> The build system is configured to install libraries to /usr/local/lib\n> >>>> Your applications may not be able to find your installed libraries\n> unless you:\n> >>>>   set your LD_LIBRARY_PATH (user specific) or\n> >>>>   update your ld.so configuration (system wide)\n> >>>> You have an ld.so.conf.d directory on your system, so if you wish to\n> ensure that\n> >>>> applications find the installed libcoin libraries, system wide, you\n> could install an\n> >>>> libcoin specific ld.so configuration with:\n> >>>>   sudo make install_ld_conf\n> >>>>\n> >>>> -- Configuring done\n> >>>> -- Generating done\n> >>>> -- Build files have been written to: /home/user/libcoin\n> >>>> ----\n> >>>>\n> >>>> Now I tried make, without success:\n> >>>>\n> >>>> ----\n> >>>> .....\n> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):\n> undefined reference to `BN_init'\n> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):\n> undefined reference to `BN_copy'\n> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):\n> undefined reference to `BN_set_negative'\n> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):\n> undefined reference to `BN_clear_free'\n> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):\n> undefined reference to `BN_clear_free'\n> >>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum\n> const&, unsigned int)':\n> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x16): undefined reference to `BN_init'\n> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0x2c): undefined reference to `BN_lshift'\n> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned\n> int)]+0xad): undefined reference to `BN_clear_free'\n> >>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum\n> const&, unsigned int)':\n> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xf): undefined reference to `BN_init'\n> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x1e): undefined reference to `BN_copy'\n> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0x47): undefined reference to `BN_clear_free'\n> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned\n> int)]+0xcb): undefined reference to `BN_clear_free'\n> >>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum\n> const&, CBigNum const&)':\n> >>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,\n> CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n> >>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,\n> CBigNum const&)':\n> >>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum\n> const&)]+0x14): undefined reference to `BN_cmp'\n> >>>> ../../lib/libcoin.a(Script.o): In function `uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n> >>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0x6d): undefined reference to `SHA256'\n> >>>>\n> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256\n> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned\n> char, std::allocator<unsigned char> > >\n> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,\n> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned\n> char*, std::vector<unsigned char, std::allocator<unsigned char> >\n> >)]+0xb8): undefined reference to `SHA256'\n> >>>> collect2: ld returned 1 exit status\n> >>>> make[2]: *** [bin/bitcoind] Error 1\n> >>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]\n> Error 2\n> >>>> make: *** [all] Error 2\n> >>>> -----\n> >>>>\n> >>>> What can I do?!\n> >>>>\n> >>>> Best,\n> >>>> Thiago\n> >>>>\n> >>>>\n> >>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com>\n> wrote:\n> >>>> Dear Bitcoiners,\n> >>>>\n> >>>> libcoin is now in a state ready for its first release, which I would\n> like to share with you!\n> >>>>\n> >>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin\n> \"Satoshi\" client. ===\n> >>>>\n> >>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the\n> release of the first version of the crypto currency library \"libcoin\" based\n> on the bitcoin/bitcoin \"Satoshi\" client.\n> >>>>\n> >>>> libcoin also maintains a version of bitcoind that is a 100%\n> compatible drop-in replacement of the bitcoin/bitcoind client: You can use\n> it on the same computer on the same files and you can call it with the same\n> scripts. And you can easily extend it without touching the basic bitcoin\n> source files.\n> >>>>\n> >>>> The libcoin/bitcoind client downloads the entire block chain 3.5\n> times faster than the bitcoin/bitcoind client. This is less than 90 minutes\n> on a modern laptop!\n> >>>>\n> >>>> In libcoin, the Satoshi client code has been completely refactored,\n> properly encapsulating classes, removing all globals, moving from threads\n> and mutexes to a pure asynchronous approach. Functionalities have been\n> divided into logical units and libraries, minimizing dependencies for e.g.\n> thin clients.\n> >>>>\n> >>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,\n> litecoin, ...) specific settings are maintained from a single class (Chain)\n> and hence experiments with chain settings, mining, security and digital\n> currencies for research and educational purposes are easily accessible. See\n> the ponzicoin example for how you define your own chain.\n> >>>>\n> >>>> The build system of libcoin is based on CMake and supports builds of\n> static and dynamic libraries on Linux, Mac OS X, and Windows.\n> >>>>\n> >>>> The libcoin license is LGPL v. 3. This mean that you can use it in\n> open source as well as in commercial projects, but improvements should go\n> back into the libcoin library.\n> >>>>\n> >>>> ======\n> >>>>\n> >>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n> >>>>\n> >>>> Join libcoin on twitter: http://twitter.com/libcoin\n> >>>>\n> >>>> Download \"libcoin Satoshi release\":\n> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n> >>>>\n> >>>> Best regards,\n> >>>>\n> >>>> Michael Gronager, PhD\n> >>>> Director, Ceptacle\n> >>>> Jens Juels Gade 33\n> >>>> 2100 Copenhagen E\n> >>>> Mobile: +45 31 45 14 01\n> >>>> E-mail: gronager at ceptacle.com\n> >>>> Web: http://www.ceptacle.com/\n> >>>>\n> >>>>\n> >>>>\n> ------------------------------------------------------------------------------\n> >>>> Keep Your Developer Skills Current with LearnDevNow!\n> >>>> The most comprehensive online learning library for Microsoft\n> developers\n> >>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n> MVC3,\n> >>>> Metro Style Apps, more. Free future releases when you subscribe now!\n> >>>> http://p.sf.net/sfu/learndevnow-d2d\n> >>>> _______________________________________________\n> >>>> Bitcoin-development mailing list\n> >>>> Bitcoin-development at lists.sourceforge.net\n> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>\n> >>>\n> >>> Michael Gronager, PhD\n> >>> Director, Ceptacle\n> >>> Jens Juels Gade 33\n> >>> 2100 Copenhagen E\n> >>> Mobile: +45 31 45 14 01\n> >>> E-mail: gronager at ceptacle.com\n> >>> Web: http://www.ceptacle.com/\n> >>>\n> >>>\n> >>>\n> >>\n> >>\n> >\n> > Michael Gronager, PhD\n> > Director, Ceptacle\n> > Jens Juels Gade 33\n> > 2100 Copenhagen E\n> > Mobile: +45 31 45 14 01\n> > E-mail: gronager at ceptacle.com\n> > Web: http://www.ceptacle.com/\n> >\n> >\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120227/f256a79d/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-27T21:03:27",
                "message_text_only": "I tried this and got:\n\n./bitcoind listaccount:\n{\n}\n\nbitcoind getnewaddress\n1DumTDw6quNqnUegJsXL2AJjDA9fmxRY7o\n\n./bitcoind setaccount 1DumTDw6quNqnUegJsXL2AJjDA9fmxRY7o test\n\n./bitcoind listaccounts{\n   \"\" : 0.00000000,\n   \"test\" : 0.00000000\n}\n\nSeem like the default account ( \"\" ) need to be initialized ?? Will test the same with the old client and see if it behaves similarly..\n\n/M\n\n\nOn 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> AWESOME!! Thank you!!\n> \n> Anyway, I found a new problem... lol\n> \n> /usr/local/bin/bitcoind getinfo #okay\n> {\n>    \"version\" : 40001,\n>    \"blocks\" : 168753,\n>    \"connections\" : 8,\n>    \"difficulty\" : 1376302.26788638,\n>    \"testnet\" : false\n> }\n> \n> /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> \n> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> {\n> }\n> \n> /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> \n> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> {\n>    \"teste\" : 0.00000000\n> }\n> \n> Where is my default account listed at \"listaccounts\" output?!\n> \n> Best,\n> Thiago\n> \n> 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> And if you do an update now \"help\" is there too ;)\n> \n> /M\n> \n> On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n>> Thank you!!!\n>> \n>> It is all working now! Except \"help\"...\n>> \n>> Nice work Michael!!\n>> \n>> Best,\n>> Thiago\n>> \n>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>> OK - didn't took the weekend:\n>> \n>> support for \"port\" is on github now :)\n>> \n>> Only took two lines:\n>> \n>>          (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n>> \n>> and using the port option in the Node constructor (was there already):\n>> \n>>      Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n>> \n>> /M\n>> \n>> \n>> \n>> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>> \n>>> Hi Michael,\n>>> \n>>> Thank you for your attention!\n>>> \n>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n>>> \n>>> Look:\n>>> \n>>> $ cat .bitcoin/bitcoin.conf\n>>> server=1\n>>> daemon=1\n>>> rpcuser=libcoin\n>>> rpcpassword=LibCoin13\n>>> rpcport=10332\n>>> port=10333\n>>> \n>>> But:\n>>> \n>>> /usr/local/bin/bitcoind\n>>> Error: Address already in use\n>>> \n>>> terminate called after throwing an instance of 'DbException'\n>>> what():  DbEnv::close: Invalid argument\n>>> Aborted\n>>> \n>>> When I \"strace it\", I can see:\n>>> \n>>> ...\n>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n>>> ...\n>>> \n>>> I already tried:\n>>> \n>>> /usr/local/bin/bitcoind --rpcport 10332\n>>> /usr/local/bin/bitcoind --rpcport=10332\n>>> \n>>> Without success...\n>>> \n>>> Thanks again!\n>>> Thiago\n>>> \n>>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>>> Hi Thiago,\n>>> \n>>> Forgot to comment on the two latter:\n>>> \n>>>> $ bitcoind getaccountaddress \"\"\n>>>> HTTP error code: 401\n>>>> Error: couldn't parse reply from server\n>>>> \n>>>> $ bitcoind listaccounts\n>>>> HTTP error code: 401\n>>>> Error: couldn't parse reply from server\n>>>> \n>>> \n>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n>>> \n>>> See in the bitcoind.cpp file for commands that you can use with and without auth...\n>>> \n>>> Those that contains an \"auth\" requires auth:\n>>> \n>>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n>>> \n>>> As opposed to:\n>>> \n>>>     server.registerMethod(method_ptr(new GetInfo(node)));\n>>> \n>>> auth is defined by:\n>>> \n>>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n>>> \n>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n>>> \n>>> /M\n>>> \n>>> \n>>>> \n>>>> Any tips?! lol\n>>>> \n>>>> Thanks!\n>>>> Thiago\n>>>> \n>>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>>>> AWESOME!!!\n>>>> \n>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n>>>> \n>>>> sudo aptitude install libboost1.46-all-dev\n>>>> \n>>>> ...alongside with another already installed dependencies, and now it works!!\n>>>> \n>>>> Thank you!\n>>>> Thiago\n>>>> \n>>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>>>> Hi Martinx,\n>>>> \n>>>> Another note:\n>>>> \n>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n>>>> \n>>>> You should do a :\n>>>> \n>>>> sudo apt-get upgrade libboost-dev-all\n>>>> \n>>>> to get the 1.46.1 library\n>>>> \n>>>> /M\n>>>> \n>>>> \n>>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>>>> \n>>>>> Hi Michael!\n>>>>> \n>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n>>>>> \n>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n>>>>> \n>>>>> ----\n>>>>> user at desk:~/libcoin$ ./configure\n>>>>> -- The C compiler identification is GNU\n>>>>> -- The CXX compiler identification is GNU\n>>>>> -- Check for working C compiler: /usr/bin/gcc\n>>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n>>>>> -- Detecting C compiler ABI info\n>>>>> -- Detecting C compiler ABI info - done\n>>>>> -- Check for working CXX compiler: /usr/bin/c++\n>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n>>>>> -- Detecting CXX compiler ABI info\n>>>>> -- Detecting CXX compiler ABI info - done\n>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>>>>> -- Looking for pthread_create in pthreads\n>>>>> -- Looking for pthread_create in pthreads - not found\n>>>>> -- Looking for pthread_create in pthread\n>>>>> -- Looking for pthread_create in pthread - found\n>>>>> -- Found Threads: TRUE\n>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>>>>> -- Looking for gethostbyname\n>>>>> -- Looking for gethostbyname - found\n>>>>> -- Looking for connect\n>>>>> -- Looking for connect - found\n>>>>> -- Looking for remove\n>>>>> -- Looking for remove - found\n>>>>> -- Looking for shmat\n>>>>> -- Looking for shmat - found\n>>>>> -- Looking for IceConnectionNumber in ICE\n>>>>> -- Looking for IceConnectionNumber in ICE - found\n>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>>>>> -- Boost version: 1.42.0\n>>>>> -- Found the following Boost libraries:\n>>>>> --   date_time\n>>>>> --   regex\n>>>>> --   filesystem\n>>>>> --   system\n>>>>> --   program_options\n>>>>> --   thread\n>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>>>>> -- Looking for Q_WS_X11\n>>>>> -- Looking for Q_WS_X11 - found\n>>>>> -- Looking for Q_WS_WIN\n>>>>> -- Looking for Q_WS_WIN - not found.\n>>>>> -- Looking for Q_WS_QWS\n>>>>> -- Looking for Q_WS_QWS - not found.\n>>>>> -- Looking for Q_WS_MAC\n>>>>> -- Looking for Q_WS_MAC - not found.\n>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>>>>> -- Found wxWidgets: TRUE\n>>>>> \n>>>>> The build system is configured to install libraries to /usr/local/lib\n>>>>> Your applications may not be able to find your installed libraries unless you:\n>>>>>  set your LD_LIBRARY_PATH (user specific) or\n>>>>>  update your ld.so configuration (system wide)\n>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n>>>>> applications find the installed libcoin libraries, system wide, you could install an\n>>>>> libcoin specific ld.so configuration with:\n>>>>>  sudo make install_ld_conf\n>>>>> \n>>>>> -- Configuring done\n>>>>> -- Generating done\n>>>>> -- Build files have been written to: /home/user/libcoin\n>>>>> ----\n>>>>> \n>>>>> Now I tried make, without success:\n>>>>> \n>>>>> ----\n>>>>> .....\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n>>>>> collect2: ld returned 1 exit status\n>>>>> make[2]: *** [bin/bitcoind] Error 1\n>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n>>>>> make: *** [all] Error 2\n>>>>> -----\n>>>>> \n>>>>> What can I do?!\n>>>>> \n>>>>> Best,\n>>>>> Thiago\n>>>>> \n>>>>> \n>>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>>>>> Dear Bitcoiners,\n>>>>> \n>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!\n>>>>> \n>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n>>>>> \n>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n>>>>> \n>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n>>>>> \n>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n>>>>> \n>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n>>>>> \n>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n>>>>> \n>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n>>>>> \n>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n>>>>> \n>>>>> ======\n>>>>> \n>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>>>>> \n>>>>> Join libcoin on twitter: http://twitter.com/libcoin\n>>>>> \n>>>>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>>>>> \n>>>>> Best regards,\n>>>>> \n>>>>> Michael Gronager, PhD\n>>>>> Director, Ceptacle\n>>>>> Jens Juels Gade 33\n>>>>> 2100 Copenhagen E\n>>>>> Mobile: +45 31 45 14 01\n>>>>> E-mail: gronager at ceptacle.com\n>>>>> Web: http://www.ceptacle.com/\n>>>>> \n>>>>> \n>>>>> ------------------------------------------------------------------------------\n>>>>> Keep Your Developer Skills Current with LearnDevNow!\n>>>>> The most comprehensive online learning library for Microsoft developers\n>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n>>>>> http://p.sf.net/sfu/learndevnow-d2d\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> \n>>>> \n>>>> Michael Gronager, PhD\n>>>> Director, Ceptacle\n>>>> Jens Juels Gade 33\n>>>> 2100 Copenhagen E\n>>>> Mobile: +45 31 45 14 01\n>>>> E-mail: gronager at ceptacle.com\n>>>> Web: http://www.ceptacle.com/\n>>>> \n>>>> \n>>>> \n>>> \n>>> \n>> \n>> Michael Gronager, PhD\n>> Director, Ceptacle\n>> Jens Juels Gade 33\n>> 2100 Copenhagen E\n>> Mobile: +45 31 45 14 01\n>> E-mail: gronager at ceptacle.com\n>> Web: http://www.ceptacle.com/\n>> \n>> \n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-28T09:03:40",
                "message_text_only": "Hi again - and thanks for testing and finding this!\n\nI have fixed the bug you reported:\n\nThe culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific. \n\nA git pull will fix it ;)\n\nCheers,\n\nMichael\n\n\nOn 27/02/2012, at 20:03, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n\n> AWESOME!! Thank you!!\n> \n> Anyway, I found a new problem... lol\n> \n> /usr/local/bin/bitcoind getinfo #okay\n> {\n>    \"version\" : 40001,\n>    \"blocks\" : 168753,\n>    \"connections\" : 8,\n>    \"difficulty\" : 1376302.26788638,\n>    \"testnet\" : false\n> }\n> \n> /usr/local/bin/bitcoind getaccountaddress \"\"  # okay...\n> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87\n> \n> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> {\n> }\n> \n> /usr/local/bin/bitcoind getaccountaddress \"teste\" # okay\n> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT\n> \n> /usr/local/bin/bitcoind listaccounts # NOT okay...\n> {\n>    \"teste\" : 0.00000000\n> }\n> \n> Where is my default account listed at \"listaccounts\" output?!\n> \n> Best,\n> Thiago\n> \n> 2012/2/26 Michael Gr\u00f8nager <gronager at ceptacle.com>\n> And if you do an update now \"help\" is there too ;)\n> \n> /M\n> \n> On 25/02/2012, at 03:11, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n> \n>> Thank you!!!\n>> \n>> It is all working now! Except \"help\"...\n>> \n>> Nice work Michael!!\n>> \n>> Best,\n>> Thiago\n>> \n>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>> OK - didn't took the weekend:\n>> \n>> support for \"port\" is on github now :)\n>> \n>> Only took two lines:\n>> \n>>          (\"port\", value<unsigned short>(&port)->default_value(8333), \"Listen on specified port for the p2p protocol\")\n>> \n>> and using the port option in the Node constructor (was there already):\n>> \n>>      Node node(chain, data_dir, args.count(\"nolisten\") ? \"\" : \"0.0.0.0\", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!\n>> \n>> /M\n>> \n>> \n>> \n>> On 24/02/2012, at 19:49, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>> \n>>> Hi Michael,\n>>> \n>>> Thank you for your attention!\n>>> \n>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I \"say\"...\n>>> \n>>> Look:\n>>> \n>>> $ cat .bitcoin/bitcoin.conf\n>>> server=1\n>>> daemon=1\n>>> rpcuser=libcoin\n>>> rpcpassword=LibCoin13\n>>> rpcport=10332\n>>> port=10333\n>>> \n>>> But:\n>>> \n>>> /usr/local/bin/bitcoind\n>>> Error: Address already in use\n>>> \n>>> terminate called after throwing an instance of 'DbException'\n>>> what():  DbEnv::close: Invalid argument\n>>> Aborted\n>>> \n>>> When I \"strace it\", I can see:\n>>> \n>>> ...\n>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = -1 EADDRINUSE (Address already in use)\n>>> ...\n>>> \n>>> I already tried:\n>>> \n>>> /usr/local/bin/bitcoind --rpcport 10332\n>>> /usr/local/bin/bitcoind --rpcport=10332\n>>> \n>>> Without success...\n>>> \n>>> Thanks again!\n>>> Thiago\n>>> \n>>> 2012/2/24 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>>> Hi Thiago,\n>>> \n>>> Forgot to comment on the two latter:\n>>> \n>>>> $ bitcoind getaccountaddress \"\"\n>>>> HTTP error code: 401\n>>>> Error: couldn't parse reply from server\n>>>> \n>>>> $ bitcoind listaccounts\n>>>> HTTP error code: 401\n>>>> Error: couldn't parse reply from server\n>>>> \n>>> \n>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...\n>>> \n>>> See in the bitcoind.cpp file for commands that you can use with and without auth...\n>>> \n>>> Those that contains an \"auth\" requires auth:\n>>> \n>>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);\n>>> \n>>> As opposed to:\n>>> \n>>>     server.registerMethod(method_ptr(new GetInfo(node)));\n>>> \n>>> auth is defined by:\n>>> \n>>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.\n>>> \n>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!\n>>> \n>>> /M\n>>> \n>>> \n>>>> \n>>>> Any tips?! lol\n>>>> \n>>>> Thanks!\n>>>> Thiago\n>>>> \n>>>> 2012/2/23 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>>>> AWESOME!!!\n>>>> \n>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:\n>>>> \n>>>> sudo aptitude install libboost1.46-all-dev\n>>>> \n>>>> ...alongside with another already installed dependencies, and now it works!!\n>>>> \n>>>> Thank you!\n>>>> Thiago\n>>>> \n>>>> 2012/2/23 Michael Gr\u00f8nager <gronager at ceptacle.com>\n>>>> Hi Martinx,\n>>>> \n>>>> Another note:\n>>>> \n>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)\n>>>> \n>>>> You should do a :\n>>>> \n>>>> sudo apt-get upgrade libboost-dev-all\n>>>> \n>>>> to get the 1.46.1 library\n>>>> \n>>>> /M\n>>>> \n>>>> \n>>>> On 23/02/2012, at 18:31, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>>>> \n>>>>> Hi Michael!\n>>>>> \n>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!\n>>>>> \n>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:\n>>>>> \n>>>>> ----\n>>>>> user at desk:~/libcoin$ ./configure\n>>>>> -- The C compiler identification is GNU\n>>>>> -- The CXX compiler identification is GNU\n>>>>> -- Check for working C compiler: /usr/bin/gcc\n>>>>> -- Check for working C compiler: /usr/bin/gcc -- works\n>>>>> -- Detecting C compiler ABI info\n>>>>> -- Detecting C compiler ABI info - done\n>>>>> -- Check for working CXX compiler: /usr/bin/c++\n>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works\n>>>>> -- Detecting CXX compiler ABI info\n>>>>> -- Detecting CXX compiler ABI info - done\n>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H\n>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found\n>>>>> -- Looking for pthread_create in pthreads\n>>>>> -- Looking for pthread_create in pthreads - not found\n>>>>> -- Looking for pthread_create in pthread\n>>>>> -- Looking for pthread_create in pthread - found\n>>>>> -- Found Threads: TRUE\n>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so\n>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found\n>>>>> -- Looking for gethostbyname\n>>>>> -- Looking for gethostbyname - found\n>>>>> -- Looking for connect\n>>>>> -- Looking for connect - found\n>>>>> -- Looking for remove\n>>>>> -- Looking for remove - found\n>>>>> -- Looking for shmat\n>>>>> -- Looking for shmat - found\n>>>>> -- Looking for IceConnectionNumber in ICE\n>>>>> -- Looking for IceConnectionNumber in ICE - found\n>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so\n>>>>> -- Boost version: 1.42.0\n>>>>> -- Found the following Boost libraries:\n>>>>> --   date_time\n>>>>> --   regex\n>>>>> --   filesystem\n>>>>> --   system\n>>>>> --   program_options\n>>>>> --   thread\n>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so\n>>>>> -- Looking for Q_WS_X11\n>>>>> -- Looking for Q_WS_X11 - found\n>>>>> -- Looking for Q_WS_WIN\n>>>>> -- Looking for Q_WS_WIN - not found.\n>>>>> -- Looking for Q_WS_QWS\n>>>>> -- Looking for Q_WS_QWS - not found.\n>>>>> -- Looking for Q_WS_MAC\n>>>>> -- Looking for Q_WS_MAC - not found.\n>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)\n>>>>> -- Found wxWidgets: TRUE\n>>>>> \n>>>>> The build system is configured to install libraries to /usr/local/lib\n>>>>> Your applications may not be able to find your installed libraries unless you:\n>>>>>  set your LD_LIBRARY_PATH (user specific) or\n>>>>>  update your ld.so configuration (system wide)\n>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that\n>>>>> applications find the installed libcoin libraries, system wide, you could install an\n>>>>> libcoin specific ld.so configuration with:\n>>>>>  sudo make install_ld_conf\n>>>>> \n>>>>> -- Configuring done\n>>>>> -- Generating done\n>>>>> -- Build files have been written to: /home/user/libcoin\n>>>>> ----\n>>>>> \n>>>>> Now I tried make, without success:\n>>>>> \n>>>>> ----\n>>>>> .....\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'\n>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'\n>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'\n>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':\n>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':\n>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'\n>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':\n>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'\n>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'\n>>>>> collect2: ld returned 1 exit status\n>>>>> make[2]: *** [bin/bitcoind] Error 1\n>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2\n>>>>> make: *** [all] Error 2\n>>>>> -----\n>>>>> \n>>>>> What can I do?!\n>>>>> \n>>>>> Best,\n>>>>> Thiago\n>>>>> \n>>>>> \n>>>>> On 1 February 2012 12:18, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>>>>> Dear Bitcoiners,\n>>>>> \n>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!\n>>>>> \n>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin \"Satoshi\" client. ===\n>>>>> \n>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library \"libcoin\" based on the bitcoin/bitcoin \"Satoshi\" client.\n>>>>> \n>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.\n>>>>> \n>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\n>>>>> \n>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.\n>>>>> \n>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.\n>>>>> \n>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.\n>>>>> \n>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.\n>>>>> \n>>>>> ======\n>>>>> \n>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki\n>>>>> \n>>>>> Join libcoin on twitter: http://twitter.com/libcoin\n>>>>> \n>>>>> Download \"libcoin Satoshi release\": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1\n>>>>> \n>>>>> Best regards,\n>>>>> \n>>>>> Michael Gronager, PhD\n>>>>> Director, Ceptacle\n>>>>> Jens Juels Gade 33\n>>>>> 2100 Copenhagen E\n>>>>> Mobile: +45 31 45 14 01\n>>>>> E-mail: gronager at ceptacle.com\n>>>>> Web: http://www.ceptacle.com/\n>>>>> \n>>>>> \n>>>>> ------------------------------------------------------------------------------\n>>>>> Keep Your Developer Skills Current with LearnDevNow!\n>>>>> The most comprehensive online learning library for Microsoft developers\n>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>>>>> Metro Style Apps, more. Free future releases when you subscribe now!\n>>>>> http://p.sf.net/sfu/learndevnow-d2d\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> \n>>>> \n>>>> Michael Gronager, PhD\n>>>> Director, Ceptacle\n>>>> Jens Juels Gade 33\n>>>> 2100 Copenhagen E\n>>>> Mobile: +45 31 45 14 01\n>>>> E-mail: gronager at ceptacle.com\n>>>> Web: http://www.ceptacle.com/\n>>>> \n>>>> \n>>>> \n>>> \n>>> \n>> \n>> Michael Gronager, PhD\n>> Director, Ceptacle\n>> Jens Juels Gade 33\n>> 2100 Copenhagen E\n>> Mobile: +45 31 45 14 01\n>> E-mail: gronager at ceptacle.com\n>> Web: http://www.ceptacle.com/\n>> \n>> \n> \n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n> \n> \n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-02-02T17:36:07",
                "message_text_only": "On Thu, Feb 2, 2012 at 12:12 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> sync, libbitcoin only made it to height 138k (of course, because the\n> time is mostly spent late in the chain 138k is not very far along\u2014 I'm\n> guessing it's going to take libbitcoin 3x-4x longer all said)\n\nIt ended up taking almost exactly twice as long, FWIW."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-02-02T17:46:36",
                "message_text_only": "On Thu, Feb 2, 2012 at 12:36 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Thu, Feb 2, 2012 at 12:12 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> sync, libbitcoin only made it to height 138k (of course, because the\n>> time is mostly spent late in the chain 138k is not very far along\u2014 I'm\n>> guessing it's going to take libbitcoin 3x-4x longer all said)\n>\n> It ended up taking almost exactly twice as long, FWIW.\n\n(and Gah: forgive the  autocompletion  of my fingers: I'm apparently\nunable to type the word coin without prefacing it with bit)  *libcoin*\nnot libbitcoin."
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Craig B Agricola",
                "slush",
                "Wladimir",
                "Aidan Thornton",
                "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "Jorge Tim\u00f3n",
                "Michael Gr\u00f8nager",
                "Gregory Maxwell",
                "Pieter Wuille",
                "grarpamp"
            ],
            "messages_count": 40,
            "total_messages_chars_count": 240710
        }
    },
    {
        "title": "[Bitcoin-development] libcoin (HEAD) now supports boost < 1.47 - please test",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-02T13:46:05",
                "message_text_only": "I have added a simplified fall back class to the boost::asio::signal_set. This should enable compilation on platforms with less than bleeding edge versions of Boost. Most notably most of the currently deployed Linux'es that use Boost 1.42.\n\nI also updated the root CMakeLists.txt to only require 1.42. It works for me, but I also recognize the fact that committers machines has some intrinsic magic that just makes things work, hiding actual errors for the them ;)\n\nPlease test and feed back.\n\nCheers,\n\nMichael\n\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-02T16:30:11",
                "message_text_only": "On Thursday, February 02, 2012 8:46:05 AM Michael Gr\u00f8nager wrote:\n> Please test and feed back.\n\nI found the problem: you are trying to use static libraries. Best practices \nare to use shared libraries (except for specific scenarios like universal \n\"Linux\" binaries) and most distros do not have static libraries installed by \ndefault.\n\nThe coinQt stuff was also creating a problem.\n\nI am able to build with this patch:\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex dea37c4..b876881 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -352,7 +352,7 @@ ENDIF(BDB_FOUND)\n #Note: We need as a minimum Boost 1.47 to support the signal_set used in \nServer. A backup signal_set has been created, though.\n SET(Boost_NO_BOOST_CMAKE ON)\n SET(Boost_ADDITIONAL_VERSIONS \"1.47\" \"1.47.0\" \"1.48\" \"1.48.0\")\n-SET(Boost_USE_STATIC_LIBS        ON)\n+#SET(Boost_USE_STATIC_LIBS        ON)\n SET(Boost_USE_MULTITHREADED      ON)\n SET(Boost_USE_STATIC_RUNTIME    OFF)\n \n@@ -804,9 +804,9 @@ SET(PKGCONFIG_FILES\n #  libcoin-coinMine\n )\n \n-IF(QT4_FOUND)\n-  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)\n-ENDIF(QT4_FOUND)\n+#IF(QT4_FOUND)\n+#  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)\n+#ENDIF(QT4_FOUND)\n \n FOREACH(PKGCONFIG_FILE ${PKGCONFIG_FILES})\n   CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/pkgconfig/${PKGCONFIG_FILE}.pc.in\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 0011392..67044d1 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -19,9 +19,9 @@ FOREACH( mylibfolder\n \n ENDFOREACH()\n \n-IF (QT4_FOUND AND NOT ANDROID)\n-    ADD_SUBDIRECTORY(coinQt)\n-ENDIF()\n+#IF (QT4_FOUND AND NOT ANDROID)\n+#    ADD_SUBDIRECTORY(coinQt)\n+#ENDIF()\n \n IF(ANDROID)\n     configure_file(\"${LIBCOIN_ANDROID_TEMPLATES}/Android.mk.src.in\" \n\"${CMAKE_CURRENT_BINARY_DIR}/Android.mk\")"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-02T22:43:07",
                "message_text_only": "Thanks for the patch and the detective work!\n\nEnabling dynamic libs was on my TODO, but on the Redmond_OS_not_to_be_mentioned you need to :\n* prepend class definitions with __declspec(dllexport) when you compile the dll\n* prepend class definitions with __declspec(dllimport) when you use the dll\nI just love the way they spoil their developers...\n\nI have the framework to automate this with CMake from a former project, but I havn't tested it for libcoin yet, hence the static build. And well, iOS also has this fetich for static libs.\n\nI also recall another issue with dll's: If you define a global variable it is shared between all executables using this dll. I have still a handful of globals to clean out, namely those related to logging - I will do so, but it has not yet been a top priority. \n\nSo, feel free to use dynamic libs on unix'es, but on windows it is .libs for a little while longer.\n\nWill fix the Qt stuff in CMake - thanks!\n\nCheers,\n\nMichael\n\n\nOn 02/02/2012, at 17:30, Luke-Jr wrote:\n\n> On Thursday, February 02, 2012 8:46:05 AM Michael Gr\u00f8nager wrote:\n>> Please test and feed back.\n> \n> I found the problem: you are trying to use static libraries. Best practices \n> are to use shared libraries (except for specific scenarios like universal \n> \"Linux\" binaries) and most distros do not have static libraries installed by \n> default.\n> \n> The coinQt stuff was also creating a problem.\n> \n> I am able to build with this patch:\n> diff --git a/CMakeLists.txt b/CMakeLists.txt\n> index dea37c4..b876881 100644\n> --- a/CMakeLists.txt\n> +++ b/CMakeLists.txt\n> @@ -352,7 +352,7 @@ ENDIF(BDB_FOUND)\n> #Note: We need as a minimum Boost 1.47 to support the signal_set used in \n> Server. A backup signal_set has been created, though.\n> SET(Boost_NO_BOOST_CMAKE ON)\n> SET(Boost_ADDITIONAL_VERSIONS \"1.47\" \"1.47.0\" \"1.48\" \"1.48.0\")\n> -SET(Boost_USE_STATIC_LIBS        ON)\n> +#SET(Boost_USE_STATIC_LIBS        ON)\n> SET(Boost_USE_MULTITHREADED      ON)\n> SET(Boost_USE_STATIC_RUNTIME    OFF)\n> \n> @@ -804,9 +804,9 @@ SET(PKGCONFIG_FILES\n> #  libcoin-coinMine\n> )\n> \n> -IF(QT4_FOUND)\n> -  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)\n> -ENDIF(QT4_FOUND)\n> +#IF(QT4_FOUND)\n> +#  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)\n> +#ENDIF(QT4_FOUND)\n> \n> FOREACH(PKGCONFIG_FILE ${PKGCONFIG_FILES})\n>   CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/pkgconfig/${PKGCONFIG_FILE}.pc.in\n> diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\n> index 0011392..67044d1 100644\n> --- a/src/CMakeLists.txt\n> +++ b/src/CMakeLists.txt\n> @@ -19,9 +19,9 @@ FOREACH( mylibfolder\n> \n> ENDFOREACH()\n> \n> -IF (QT4_FOUND AND NOT ANDROID)\n> -    ADD_SUBDIRECTORY(coinQt)\n> -ENDIF()\n> +#IF (QT4_FOUND AND NOT ANDROID)\n> +#    ADD_SUBDIRECTORY(coinQt)\n> +#ENDIF()\n> \n> IF(ANDROID)\n>     configure_file(\"${LIBCOIN_ANDROID_TEMPLATES}/Android.mk.src.in\" \n> \"${CMAKE_CURRENT_BINARY_DIR}/Android.mk\")\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-02T23:27:31",
                "message_text_only": "On Thursday, February 02, 2012 5:43:07 PM Michael Gr\u00f8nager wrote:\n> Enabling dynamic libs was on my TODO, but on the\n> Redmond_OS_not_to_be_mentioned you need to : * prepend class definitions\n> with __declspec(dllexport) when you compile the dll * prepend class\n> definitions with __declspec(dllimport) when you use the dll I just love\n> the way they spoil their developers...\n\nI hadn't even thought of this. Sounds like a pain :/\n\nThe problem I had was related to *using* static libraries; ie, boost.\nI have libboost*.so, but libboost*.a"
            }
        ],
        "thread_summary": {
            "title": "libcoin (HEAD) now supports boost < 1.47 - please test",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Michael Gr\u00f8nager"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6063
        }
    },
    {
        "title": "[Bitcoin-development] BIP 20 Rejected, process for BIP 21N",
        "thread_messages": [
            {
                "author": "Gary Rowe",
                "date": "2012-02-02T17:07:12",
                "message_text_only": "BlueMatt, did the BIP0021 Wiki entry for \"req:\" to \"req-\" get updated? I'm\nlooking there now and it seems to be still at \"req:\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120202/754589f8/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-02-02T17:39:07",
                "message_text_only": "Not yet, its up to genjix (Amir) to do that.  See\nhttps://github.com/genjix/bips/pull/2\n\nMatt\n\nOn Thu, 2012-02-02 at 17:07 +0000, Gary Rowe wrote:\n> BlueMatt, did the BIP0021 Wiki entry for \"req:\" to \"req-\" get updated?\n> I'm looking there now and it seems to be still at \"req:\"\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-02-02T17:46:11",
                "message_text_only": "OK - I've added a comment to the pull request.\n\nOn 2 February 2012 17:39, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n\n> Not yet, its up to genjix (Amir) to do that.  See\n> https://github.com/genjix/bips/pull/2\n>\n> Matt\n>\n> On Thu, 2012-02-02 at 17:07 +0000, Gary Rowe wrote:\n> > BlueMatt, did the BIP0021 Wiki entry for \"req:\" to \"req-\" get updated?\n> > I'm looking there now and it seems to be still at \"req:\"\n> >\n> ------------------------------------------------------------------------------\n> > Keep Your Developer Skills Current with LearnDevNow!\n> > The most comprehensive online learning library for Microsoft developers\n> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> > Metro Style Apps, more. Free future releases when you subscribe now!\n> > http://p.sf.net/sfu/learndevnow-d2d\n> > _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120202/4db373e4/attachment.html>"
            },
            {
                "author": "thomasV1 at gmx.de",
                "date": "2012-02-04T14:03:25",
                "message_text_only": "Just another question concerning BIP21:\n\nOn the wiki, the description of the \"message\" parameter reads:\n\"message that shown to the user after scanning the QR code\"\n\nI believe that the purpose of this parameter is to contain a description of the  transaction. This has use cases that go beyond QR codes.\n\nIf I am right, then I would say that naming it \"message\" is misleading. In fact, \"message\" suggests that a message will be sent to someone (the recipient of the funds? a third party?), which is not the case here. That parameter should probably be called \"description\". \n\n-- \nEmpfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir\nbelohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-02-04T16:03:17",
                "message_text_only": "Seems reasonable to me.\nOn 4 Feb 2012 14:03, <thomasV1 at gmx.de> wrote:\n\n> Just another question concerning BIP21:\n>\n> On the wiki, the description of the \"message\" parameter reads:\n> \"message that shown to the user after scanning the QR code\"\n>\n> I believe that the purpose of this parameter is to contain a description\n> of the  transaction. This has use cases that go beyond QR codes.\n>\n> If I am right, then I would say that naming it \"message\" is misleading. In\n> fact, \"message\" suggests that a message will be sent to someone (the\n> recipient of the funds? a third party?), which is not the case here. That\n> parameter should probably be called \"description\".\n>\n> --\n> Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir\n> belohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de\n>\n>\n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120204/018b4fbb/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-02-04T17:15:02",
                "message_text_only": "I changed the description of the message parameter to be a bit more\ndescriptive, however, I dont want to change the name of the parameter\nbecause some clients have already implemented that and I really prefer\nto make as minor of changes as possible to this BIP even if it is\nofficially only a Draft.  \n\nMatt\n\nOn Sat, 2012-02-04 at 16:03 +0000, Gary Rowe wrote:\n> Seems reasonable to me.\n> \n> On 4 Feb 2012 14:03, <thomasV1 at gmx.de> wrote:\n>         Just another question concerning BIP21:\n>         \n>         On the wiki, the description of the \"message\" parameter reads:\n>         \"message that shown to the user after scanning the QR code\"\n>         \n>         I believe that the purpose of this parameter is to contain a\n>         description of the  transaction. This has use cases that go\n>         beyond QR codes.\n>         \n>         If I am right, then I would say that naming it \"message\" is\n>         misleading. In fact, \"message\" suggests that a message will be\n>         sent to someone (the recipient of the funds? a third party?),\n>         which is not the case here. That parameter should probably be\n>         called \"description\"."
            }
        ],
        "thread_summary": {
            "title": "BIP 20 Rejected, process for BIP 21N",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gary Rowe",
                "Matt Corallo",
                "thomasV1 at gmx.de"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 6432
        }
    },
    {
        "title": "[Bitcoin-development]  Announcement: libcoin",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2012-02-02T17:12:04",
                "message_text_only": "On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr\u00f8nager\n<gronager at ceptacle.com> > The libcoin/bitcoind client downloads the\nentire block chain 3.5 times faster than the bitcoin/bitcoind client.\nThis is less than 90 minutes on a modern laptop!\n\nI'm guessing that you benchmarked this against the version you forked\nfrom rather than the current reference client?\n\nIf so\u2014 I suspect your speedup was almost entirely because you removed\nthe secure allocator and as a result fixed the mlock performance bug\n[https://bitcointalk.org/index.php?topic=56491.0] as a side effect. On\nsome systems the mlock issue makes a very big difference (on other\nsystems not so much).\n\nIn any case, I finally got libbitcoin built and I'm disappointed to\nreport that in the same time it takes the reference client to fully\nsync, libbitcoin only made it to height 138k (of course, because the\ntime is mostly spent late in the chain 138k is not very far along\u2014 I'm\nguessing it's going to take libbitcoin 3x-4x longer all said)\n\nI assume the reason it's actually slower is because it's CPU bound on\nECDSA checks, which are skipped in bitcoin in blocks up to the highest\nhardcoded checkpoint. \u00a0Without that difference I suspect libbitcoin\nwould be about the same speed\u2014 maybe a little faster because of the\nother changes you mentioned (though, e.g. lock profiling shows hardly\nany contention during sync).\n\nI don't doubt your rpc performance is a lot better. There is a\nlongstanding pull request for async rpc for the reference client that\nhasn't been merged."
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1526
        }
    },
    {
        "title": "[Bitcoin-development] 0.5.2 tag in github ??",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-03T09:22:23",
                "message_text_only": "Hi Gavin, others?\n\nI am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).\n\nHowever, I cannot find any tag with v0.5.2 in github:\nhttps://github.com/bitcoin/bitcoin/tags\n\nAm I missing something, or wasn't that release tagged ?\n\nWhat I am looking for in particular is the number \"140700\", the last block not to be verified - I can see this in:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/checkpoints.cpp\n\nBut I would like to be sure that this is also the number used in 0.5.2.\n\nThanks,\n\nMichael"
            },
            {
                "author": "Aidan Thornton",
                "date": "2012-02-03T09:52:19",
                "message_text_only": "On Fri, Feb 3, 2012 at 9:22 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Hi Gavin, others?\n>\n> I am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).\n>\n> However, I cannot find any tag with v0.5.2 in github:\n> https://github.com/bitcoin/bitcoin/tags\n\nI think that tag's in\nhttps://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable\n- a certain amount of developer politics seems to be involved, and\nv0.5.2 may not have been pushed to the official github repository."
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-03T09:59:01",
                "message_text_only": "Hi Aidan,\n\nThanks, and the number is still 140700 - do we have a policy / logic on adding new checkpoints ? It seems to me that the number could easily be bumped to 160000 by now ?\n\nCheers,\n\nMichael\n \nOn 03/02/2012, at 10:52, Aidan Thornton wrote:\n\n> On Fri, Feb 3, 2012 at 9:22 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> Hi Gavin, others?\n>> \n>> I am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).\n>> \n>> However, I cannot find any tag with v0.5.2 in github:\n>> https://github.com/bitcoin/bitcoin/tags\n> \n> I think that tag's in\n> https://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable\n> - a certain amount of developer politics seems to be involved, and\n> v0.5.2 may not have been pushed to the official github repository.\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-02-03T13:45:30",
                "message_text_only": "On Fri, Feb 3, 2012 at 4:52 AM, Aidan Thornton <makosoft at gmail.com> wrote:\n> I think that tag's in\n> https://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable\n> - a certain amount of developer politics seems to be involved, and\n> v0.5.2 may not have been pushed to the official github repository.\n\nNo developer politics are involved\u2014 the cuts to the stable versions\nhave always been done from Luke's repository simply because he\nmaintains it."
            }
        ],
        "thread_summary": {
            "title": "0.5.2 tag in github ??",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gr\u00f8nager",
                "Gregory Maxwell",
                "Aidan Thornton"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 2917
        }
    },
    {
        "title": "[Bitcoin-development] BIP 21 accepted, new BIP 19",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-02-05T12:41:52",
                "message_text_only": "BIP 21 had broad consensus among the major implementations:\nhttps://en.bitcoin.it/wiki/BIP_0021\n\n\nBIP 19 is a document to propose adding a new payment type to the scripting system's template list.\nhttps://en.bitcoin.it/wiki/BIP_0019\n\nI haven't fully evaluated it completely but it seems solid. My only thoughts is that it uses a bunch of arithmetic operators which can behave in strange ways.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120205/b5de775a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 21 accepted, new BIP 19",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 575
        }
    },
    {
        "title": "[Bitcoin-development] Version 0.6 release candidate 1 plan",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-06T15:44:09",
                "message_text_only": "There are several major changes in git HEAD that are ready for wider\ntesting. The best way of getting lots of testing is to release\nbinaries, so I'm going to be pulling together a release candidate in\nthe next day or two.\n\nThe goal will be to get at least a full month of release candidate\nreview/testing before releasing a 0.6 final, with zero High Priority\nbugs ( https://github.com/bitcoin/bitcoin/issues?labels=Priority+High&state=open\n)\n\nHere's the proposed TODO list for a rc1:\n\nPull:\n800 : bug fix, multiple output display fix in GUI\n799 : Have bitcoind recomend a secure RPC password\n769 : Make transactions with extra data in scriptSig non-standard\n\nRebase/pull:\n795 : Fix minimize to tray\n\nPull a modified version of:\n755 : Don't vote for /P2SH/ unless -p2sh specified\n\nI'd like to pull 787 (CAddrMan: stochastic address manager) but it\ndidn't pass my sanity tests.\n\nI'm going to start a separate discussion thread with some thoughts on\nrolling out higher-level multisignature support.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-06T15:54:25",
                "message_text_only": "On Monday, February 06, 2012 10:44:09 AM Gavin Andresen wrote:\n> There are several major changes in git HEAD that are ready for wider\n> testing. The best way of getting lots of testing is to release\n> binaries, so I'm going to be pulling together a release candidate in\n> the next day or two.\n\nThere are still many other pull requests that seem to be ready, but perhaps \nthose can just as well wait for 0.7 if the 0.6 changes are deemed too much to \nadd onto. Here are some that seem to be well-tested, and have been part of \nnext-test for a while:\n\t719 coinbaser (already verbally accepted by Gavin for 0.6 a while ago!)\n\t568 rpc_keepalive\n\t565 optimize_FastGetWork\n\t715 bugfix_client_name\n\t562 optimize_ToHex\n\n> 769 : Make transactions with extra data in scriptSig non-standard\n\nIf this affects relaying, it will significantly harm the ability to replace \nthe current spammy \"green address\" scheme with a sensible extra signature \nsystem. On the miner end, it could significantly harm adoption of such a \nsystem.\n\n> Pull a modified version of:\n> 755 : Don't vote for /P2SH/ unless -p2sh specified\n\nWhat else do I need to change for this?\n\n> I'd like to pull 787 (CAddrMan: stochastic address manager) but it\n> didn't pass my sanity tests.\n\nI can also confirm I have seen at least one addr.db corruption with this.\n\nLuke"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-07T15:04:36",
                "message_text_only": "On Monday, February 06, 2012 10:54:25 AM Luke-Jr wrote:\n> > 769 : Make transactions with extra data in scriptSig non-standard\n> \n> If this affects relaying, it will significantly harm the ability to replace\n> the current spammy \"green address\" scheme with a sensible extra signature\n> system. On the miner end, it could significantly harm adoption of such a\n> system.\n\nFWIW, at least MtGox was OK with the plan to move to non-blockchain-spam\n0-confirmation via an extra signature. Why do you ignore this possibility, and \nmerge stuff that will break it? Do you have an alternative solution to the \nproblem of green addresses spamming the blockchain? As I noted in the pull \nrequest, stripping extra data has no negative impact on normal transactions, \nand clients creating these can be written to expect the txnid to change (or \nsimply not care what the txnid is)."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-07T16:14:00",
                "message_text_only": "On Tuesday, February 07, 2012 10:04:36 AM Luke-Jr wrote:\n> On Monday, February 06, 2012 10:54:25 AM Luke-Jr wrote:\n> > > 769 : Make transactions with extra data in scriptSig non-standard\n> > \n> > If this affects relaying, it will significantly harm the ability to\n> > replace the current spammy \"green address\" scheme with a sensible extra\n> > signature system. On the miner end, it could significantly harm adoption\n> > of such a system.\n\ngmaxwell explained to me why this is no longer needed on IRC.\nI withdraw my objection."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-07T16:14:14",
                "message_text_only": "> Do you have an alternative solution to the\n> problem of green addresses spamming the blockchain?\n\nSure, here's one:\n\nGreen address provider give a REST-ful API, that provides the\nfollowing functionality:\n\n+ Give transaction ID and credentials, request that the transaction be\ndeclared \"green\"\n  (sender's wallet site/software would do this)\n\n+ Give transaction ID, return boolean \"has this transaction been\ndeeclared green?\"\n\n\n\nAs I said, I think any design that relies on clients recognizing two\nvariations of a transaction is a very bad idea.\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "Version 0.6 release candidate 1 plan",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Gavin Andresen"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 4298
        }
    },
    {
        "title": "[Bitcoin-development] Multisignature transaction support in the GUI",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-06T16:07:00",
                "message_text_only": "I've been testing how the Bitcoin-Qt GUI deals with multisignature transactions.\n\nThe good news is it seems to display them just fine; even my\ninsanely-messy test wallets look reasonable.\n\nIt does not support sending multisig/BIP16 transactions, which is\ndefinitely a feature for the main network (we don't want users sending\nthem until they will get relayed, get mined, AND will be fully\nverified by a large super-majority of miners).\n\nBut... to encourage more testing it might make sense to enable sending\nmultisig transactions in the GUI if (fTestNet).\n\nSo I see two possible paths:\n\n1) Leave the GUI as-is; require multisig testing to use the RPC interface.\n Note: the RPC call that make multisig sends possible\n(addmultisigaddress) is disabled for the main network for the 0.6\nrelease.\n Don't start rolling out GUI support until the next (0.7?) release cycle.\n\n2) Start implementing multisig support in the GUI during the 0.6\nrelease process, enabled only for test network. This could be as\nsimple as allowing the 35-character BIP16 multisig addresses in the\n'send' dialog, to as complicated as adding/extending dialogs that let\nyou create multisig addresses to add to your address book.\n\nAdvantage of (1) is it should mean 0.6 gets to final release faster.\n\nAdvantage of (2) is it should mean more testing of multisig, and fewer\nbug reports of \"I added a multisig address via RPC but I can't send to\nit using the GUI\"\n\nMy opinion: I think it is worth allowing send-to-multisig-address via\nthe GUI (should be a very simple change to the address validation\nlogic).  But creating multisig addresses via the GUI should wait until\nthe next release.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Wladimir",
                "date": "2012-02-06T17:27:20",
                "message_text_only": "On Mon, Feb 6, 2012 at 5:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>\n> Advantage of (2) is it should mean more testing of multisig, and fewer\n> bug reports of \"I added a multisig address via RPC but I can't send to\n> it using the GUI\"\n>\n> My opinion: I think it is worth allowing send-to-multisig-address via\n> the GUI (should be a very simple change to the address validation\n> logic).  But creating multisig addresses via the GUI should wait until\n> the next release.\n>\n\nI think we should go with (2), changing the maximum address length and\nvalidation is very easy. We'd need to\n\n   - Change BitcoinAddressValidator::MaxAddressLength to 35\n   - The addresses are validated with walletmodel->validateAddress which in\n   turn calls CBitcoinAddress addressParsed(addr) and then isValid(). Does\n   this work for the new addresses?\n\nThe set of allowed characters is still the same, so BitcoinAddressValidator\ndoesn't have to be changed.\n\nAdvanced dialogs for constructing the addresses / adding them to the\naddress book could wait for 0.7.0.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120206/834f01fc/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-02-06T18:03:35",
                "message_text_only": "On Mon, Feb 6, 2012 at 6:27 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Mon, Feb 6, 2012 at 5:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>\n>>\n>> Advantage of (2) is it should mean more testing of multisig, and fewer\n>> bug reports of \"I added a multisig address via RPC but I can't send to\n>> it using the GUI\"\n>>\n>> My opinion: I think it is worth allowing send-to-multisig-address via\n>> the GUI (should be a very simple change to the address validation\n>> logic).  But creating multisig addresses via the GUI should wait until\n>> the next release.\n>>\n>\n> I think we should go with (2), changing the maximum address length and\n> validation is very easy. We'd need to\n>\n\nAnd maybe WalletModel::sendCoins has to be changed.\nDoes CScript.SetBitcoinAddress work for the new address type?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120206/71a12fad/attachment.html>"
            },
            {
                "author": "Aidan Thornton",
                "date": "2012-02-07T11:52:19",
                "message_text_only": "On Mon, Feb 6, 2012 at 5:27 PM, Wladimir <laanwj at gmail.com> wrote:\n> Change BitcoinAddressValidator::MaxAddressLength to 35\n> The addresses are validated with walletmodel->validateAddress which in turn\n> calls\u00a0CBitcoinAddress addressParsed(addr) and then isValid(). Does this work\n> for the new addresses?\n\nShould do (unless BIP 16 broke something). In fact both the GUI and\nRPC commands use CBitcoinAddress and IsValid to validate addresses in\nthat way.\n\n> And maybe WalletModel::sendCoins has to be changed.\n> Does\u00a0CScript.SetBitcoinAddress work for the new address type?\n\nAgain, should do, and it's used by the RPC commands for sending\nBitcoins as well. Really there's not a lot that needs to be changed.\nI'm pretty sure even the change in MaxAddressLength is only necessary\nto send coins to multisig addresses on testnet, sending them on\nmainnet should just work."
            }
        ],
        "thread_summary": {
            "title": "Multisignature transaction support in the GUI",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Gavin Andresen",
                "Aidan Thornton"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 4786
        }
    },
    {
        "title": "[Bitcoin-development] Scaling at the end user level",
        "thread_messages": [
            {
                "author": "grarpamp",
                "date": "2012-02-08T05:18:44",
                "message_text_only": "A freshly deployed client on an old p4 has been idly crunching away\nat building and verifying the initial chain for about a week now. It\nshould be done in a day or two. This seems rather untenable for\nnew users. Have any groups published proposals for distributing\na weekly precomputed bootstrap chain?\nrsync? db_dump > git > db_load?\nThere is also 50% or more compression available in the index\nand chain.\nOf some known future issues... raw transaction rate, the eventual pay\n(or extort?, depending on how megapools pan out) to process mining\nenvironment, and scaling the client count itself... this one appears to\nbe already present."
            },
            {
                "author": "grarpamp",
                "date": "2012-02-08T07:21:51",
                "message_text_only": "> I never did track down this exact issue but it's an artificial\n> slowdown.. meaning compression and whatever else wouldn't help much.\n\nI meant for anyone who wanted to distribute the dataset as a project.\n\n> It has something to do with the database file locking and flushing..\n> on some systems I've seen the block chain get fully done in 10-20\n> mins and on others it slows down to the point where it will never\n> catch up.. but not in a way that's related to the age of the computer\n> or anything. You might want to experiment if you want to track this\n> down.. try building your own libs\n\nRather than use dated/modified packages, I compiled current versions\nof all component sources manually.\n\n> and compare different operating\n> systems, on the same hardware to get a more 'true' comparison maybe.\n\nTrue. Used them all before, happy with BSD for now. Just knowing\nwhat the general setup is on those zippy systems should suffice.\nie: blindly fishing for such a zippy system to compare through various\ninstall tests doesn't sound too appealing. It's different than benchmarking.\n\nDatapoint: The system below is not zippy.\n\n> I think everyone is vaguely aware of the problem but it has not\n> been tracked down and eliminated. I don't think the problem is\n> within bitcoin itself but in how truthfully the database file is\n> actually written to disk.\n\nAm I correct in guessing that, given a certain height, the data\nin blkindex and blk0001 should be the same across instances?\n\n# file blk*\nblk0001.dat:             data\nblkindex.dat:            Berkeley DB (Btree, version 9, native byte-order)\n\nPursuant to comparison, what is the format of blk0001.dat?\n\n> If it really gets flushed to disk every\n> block like bitcoin wants it to be, then there is no way that you\n> could get more than 50-60 blocks per second through it (due to\n> rotational latency), but on some operating systems and versions/options\n> it seems to end up caching the writes and flies through it at\n> thousands of blocks per second. The problem is similar to what's\n> mentioned here: http://www.sqlite.org/faq.html#q19\n\nI'm not running Linux with asynchronous data and metadata\nturned on by default if that's what you mean :) ZFS, disk crypto,\nstandard drive write cache. Looking at it, I'm largely buried in\nthat crypto at 8MB/sec or so.\n\n> Perhaps it's as simple as some default in the db lib.. and it seems\n> to default to different things on different version/operating\n> systems/filesystems.\n\nHmm, I compiled everything with the defaults. Will go back and\nlook at bdb options. I don't think there was anything interesting\nthere. I'd bet a lot is tied to the fs and cpu.\nSingle core p4 at 1.8 512k/2g isn't much up against ZFS+disk crypto.\n\nIt seems to take its time and roll up all but the last database file (of\na hundred or more) on receiving sigterm. Is it supposed to roll\nand delete the last log too? Can I safely delete everything but\nthe blk* files? (wallet excepted of course :)\n\nCurrently, in KiB...\n\nrunning:\n853716  database\n747881  blk0001.dat\n290601  blkindex.dat\n4361    addr.dat\n137     __db.005\n137     __db.004\n137     __db.003\n137     __db.002\n41      __db.006\n25      __db.001\n\nsigterm:\n750569  blk0001.dat\n291497  blkindex.dat\n8465    database/log.0000000nnn\n4361    addr.dat\n\ndatabase/log.0000000133: Berkeley DB (Log, version 16, native byte-order)"
            },
            {
                "author": "Wladimir",
                "date": "2012-02-08T08:34:38",
                "message_text_only": "On Wed, Feb 8, 2012 at 6:18 AM, grarpamp <grarpamp at gmail.com> wrote:\n\n> A freshly deployed client on an old p4 has been idly crunching away\n> at building and verifying the initial chain for about a week now. It\n> should be done in a day or two. This seems rather untenable for\n> new users. Have any groups published proposals for distributing\n> a weekly precomputed bootstrap chain?\n> rsync? db_dump > git > db_load?\n> There is also 50% or more compression available in the index\n> and chain.\n>\n\nI have proposed packaging part of the block chain (doesn't even have to be\nweekly, just until the last checkpoint), but people fear it runs contrary\nto the distributed approach of Bitcoin.\n\nWhich is kind of true:\n\n- If it is imported un-validated, you have to rely on the packager to lie\nto you (insert false transactions etc)\n- If it has to be validated, you win nothing, your computer has to crunch\nfor days anyway\n\nBTW: On such an old computer you should probably use one of the thin\nclients.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120208/14a9214b/attachment.html>"
            },
            {
                "author": "grarpamp",
                "date": "2012-02-08T19:32:33",
                "message_text_only": ">> Have any groups published proposals for distributing\n>> a weekly precomputed bootstrap chain?\n>> rsync? db_dump > git > db_load?\n>> There is also 50% or more compression available in the index\n>> and chain.\n\n> I have proposed packaging part of the block chain (doesn't even have to be\n> weekly, just until the last checkpoint), but people fear it runs contrary to\n> the distributed approach of Bitcoin.\n\nGit repos are backed by strong hashes. Each commit could be a single\nblock dump, perhaps into a file hierarchy. Trusted entities, pools, etc\ncould sign at a checkpoint/height. Blockchain tools\nwould need made that can take the blk* and export single blocks and\nprocess/export up to a certain block and quit. Everyone would do a\ncomparison and sign a commit hash. Everyone else git pulls. Having\nthe block toolset is a key prequisite to any sort of distribution. They don't\nexist now :( Maybe the two bitcoin compatible library projects out there\nwill implement them :) Torrents are also strongly hashed and could be\nsigned as well.\n\nMaking the blockchain tools would be the most important thing to start.\n\n> BTW: On such an old computer you should probably use one of the thin\n> clients.\n\nIf that means not validating the chain, then it's as above. I'm not sure if it's\nright to not care about the history if only making new transactions with a new\nkey post install time and then only validating new transactions as they come\nin. Will have a look."
            }
        ],
        "thread_summary": {
            "title": "Scaling at the end user level",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "grarpamp"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6622
        }
    },
    {
        "title": "[Bitcoin-development] 0.6 Release Candidate 1",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-08T16:27:03",
                "message_text_only": "I'd like version 0.6 to get lots of review, \"soak time\" and testing, so\nplease download and run release candidate 1 from:\n\u00a0http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/\n\nYou can review the code changes using github's compare feature:\n https://github.com/bitcoin/bitcoin/compare/v0.5.2...v0.6.0rc1\n\nPlease report bugs using the github issue tracker.\n\n\nRelease notes:\n\nNEW FEATURES SINCE BITCOIN VERSION 0.5\n--------------------------------------\nBitcoin-Qt can display and save QR codes for sending\nand receiving addresses.\n\nNew context menu on addresses to copy/edit/delete them.\n\nNew Sign Message dialog that allows you to prove that you\nown a bitcoin address by creating a digital\nsignature.\n\nWallets created with this version of bitcoin will\nuse 33-byte 'compressed' public keys instead of\n65-byte public keys, resulting in smaller\ntransactions and less traffic on the bitcoin\nnetwork. The shorter keys are completely\ncompatible with older versions.\n\nNew command-line argument -blocknotify=<command>\nthat will spawn a shell process to run <command>\nwhen a new block is accepted.\n\nvalidateaddress JSON-RPC api command output includes\ntwo new fields for addresses in the wallet:\n\u00a0pubkey : hexadecimal public key\n\u00a0iscompressed : true if pubkey is a short 33-byte key\n\nNew JSON-RPC api commands for dumping/importing\nprivate keys from the wallet (dumprivkey, importprivkey).\n\nNew JSON-RPC api command for getting information about\nblocks (getblock, getblockhash).\n\nNew JSON-RPC api command for getting extra information\nrelated to mining (getmininginfo).\n\n\nNOTABLE CHANGES\n---------------\n\nThe -nolisten, -noupnp and -nodnsseed command-line\noptions were renamed to -listen, -upnp and -dnsseed,\nwith a default value of 1. The old names are still\nsupported for compatibility (so specifying -nolisten\nis automatically interpreted as -listen=0; every\nboolean argument can now be specified as either\n-foo or -nofoo).\n\nThe -noirc command-line options was renamed to\n-irc, with a default value of 0. Run -irc=1 to\nget the old behavior.\n\n\nPRELIMINARY SUPPORT FOR MULTISIGNATURE TRANSACTIONS\n---------------------------------------------------\n\nThis release has preliminary support for multisignature\ntransactions-- transactions that require authorization\nfrom more than one person or device before they\nwill be accepted by the bitcoin network.\n\nPrior to this release, multisignature transactions\nwere considered 'non-standard' and were ignored;\nwith this release multisignature transactions are\nconsidered standard and will start to be relayed\nand accepted into blocks.\n\nIt is expected that future releases of Bitcoin-Qt\nwill support the creation of multisignature transactions,\nonce enough of the network has upgraded so relaying\nand validating them is robust.\n\nFor this release, creation and testing of multisignature\ntransactions is limited to the bitcoin test network using\nthe \"addmultisigaddress\" JSON-RPC api call.\n\nShort multisignature address support is included in this\nrelease, as specified in BIP 16. Run with -bip16=0 to\nturn off support for BIP 16.\n\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "0.6 Release Candidate 1",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3105
        }
    },
    {
        "title": "[Bitcoin-development] Some state/data file info",
        "thread_messages": [
            {
                "author": "grarpamp",
                "date": "2012-02-10T02:33:38",
                "message_text_only": "I've been playing with the tools in db 4.8.30, and bitcoin stable...\nMy blockchain is up to date. Bitcoin is not running.\n\n#  strings database/*\nThis will at times yield the addresses in your wallet.\nSo it's not exactly in compliance with 'only your wallet file matters'.\n\nBitcoin always leaves behind at least one \"database/log.nnn\" file.\nShouldn't it roll and delete it on exit like it does the other state files?\nParticularly after a simple \"we're able to do nothing but local\noperations\" invocation\nlike: bitcoind -proxy=127.0.0.1:9050 -keypool=0 -connect=127.0.0.1\n-nodnsseed -noirc\n\nSimilarly, the \".lock\" file is never deleted.\nShouldn't it be upon exit?\n\nVacuuming addr, blkindex, and wallet with \"db_dump | db_load\" will save\nsignificant space. I do not yet know how to view or validate blk0001.dat.\n\nWhen left with junk, I've been removing everything except:\naddr.dat - node addresses\nbitcoin.conf - config\nblk0001.dat - blocks\nblkindex.dat - index to blocks\nwallet.dat - wallet"
            }
        ],
        "thread_summary": {
            "title": "Some state/data file info",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "grarpamp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 988
        }
    },
    {
        "title": "[Bitcoin-development] coinexplorer - a local \"blockexplorer\"",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-10T11:53:14",
                "message_text_only": "I have just uploaded a new application to libcoin: \"coinexplorer\"\n\nIt enables queries similar to that of blockexplorer.com, but locally on your own chain.\n\ncoinexplorer builds on a new library addition: coinStat, that is a collection of classes for gathering and querying the block chain for other information than the ones used directly by the Node.\n\ncoinexplorer uses the HTTP GET feature of the coinHTTP/Server class to enable a simple search webpage, so you can do block searches by either commandline:\n\tbitcoind search <Address>\n\nor simply by pointing you browser at http://localhost:8332 \n\nI apologize for the rudimentary interface, but I am not really a javascript/html5 savvy... So a more modern interface is left as an exercise for those who are.\n\nYou will find coinexplorer in the latest git:\n\thttps://github.com/ceptacle/libcoin\n\nCheers,\n\nMichael\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            }
        ],
        "thread_summary": {
            "title": "coinexplorer - a local \"blockexplorer\"",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gr\u00f8nager"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1023
        }
    },
    {
        "title": "[Bitcoin-development] IRC meeting Tuesday, Feb 14, 21:00 UTC",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-14T02:49:03",
                "message_text_only": "Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd\nlike to chat about:\n\nStatus of BIP 16 support (progress towards 50% hashing power).\n\nProtocol change coming up Feb. 20 (checksums in version messages).\n\nDuplicate coinbase issue (and requiring block height in the coinbase\nas a solution).\n\nThen when we're done talking tech we can all send each other bitcoins\nwith addresses that are cute Valentine's day messages...\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "slush",
                "date": "2012-02-14T06:09:30",
                "message_text_only": "Hello Gavin,\n\nexcuse me, but do you think it's good idea to have IRC meeting on\nValentine's evening? Some of us have girlfriends :-).\n\nslush\n\nOn Tue, Feb 14, 2012 at 3:49 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd\n> like to chat about:\n>\n> Status of BIP 16 support (progress towards 50% hashing power).\n>\n> Protocol change coming up Feb. 20 (checksums in version messages).\n>\n> Duplicate coinbase issue (and requiring block height in the coinbase\n> as a solution).\n>\n> Then when we're done talking tech we can all send each other bitcoins\n> with addresses that are cute Valentine's day messages...\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120214/9dcf5699/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-02-14T07:23:23",
                "message_text_only": "On Tue, Feb 14, 2012 at 7:09 AM, slush <slush at centrum.cz> wrote:\n\n> Hello Gavin,\n>\n> excuse me, but do you think it's good idea to have IRC meeting on\n> Valentine's evening? Some of us have girlfriends :-).\n>\n\nI have a girlfriend but she hates valentines day so it is ok with me:-)\n\nWladimir\n\n\n>\n> slush\n>\n>\n> On Tue, Feb 14, 2012 at 3:49 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>\n>> Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd\n>> like to chat about:\n>>\n>> Status of BIP 16 support (progress towards 50% hashing power).\n>>\n>> Protocol change coming up Feb. 20 (checksums in version messages).\n>>\n>> Duplicate coinbase issue (and requiring block height in the coinbase\n>> as a solution).\n>>\n>> Then when we're done talking tech we can all send each other bitcoins\n>> with addresses that are cute Valentine's day messages...\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120214/326965ef/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "IRC meeting Tuesday, Feb 14, 21:00 UTC",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "slush",
                "Wladimir",
                "Gavin Andresen"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4243
        }
    },
    {
        "title": "[Bitcoin-development] 14 Feb IRC meeting summary",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-15T19:20:10",
                "message_text_only": "Full conversation starts here:\n  http://bitcoinstats.com/irc/bitcoin-dev/logs/2012/02/14/5#l2892558\n\nSummary of what was discussed/decided; please correct anything I get wrong:\n\n1. BIP 16 support is at about 34% of hashing power, so we'll continue\nto ask big pools and miners to upgrade and will re-evaluate support on\nMarch 1'st, with a potential switchover date if there is enough\nsupport of March 15'th.\n\n2. On February 20'th the protocol changes to include checksums on the\ninitial version messages. version includes an 'addrFrom' field with\nyour IP address, and there are (unconfirmed) reports of NAT routers\nchanging the contents of packets to modify the inside-the-NAT IP\naddress to the outside-the-NAT address. If you've got a router that\ndoes that, then the version message checksum will be wrong and you'll\nbe unable to connect.\n\nTwo things are being done to address this:\n\n+ A patch that puts the outside-the-NAT IP address in addrFrom. That's\na good idea in any case, exposing interior IP addresses was a mistake.\nThere will be either a 0.5.3 or 0.5.2.1 release available for anybody\naffected.\n\n+ An alert will be sent next Friday on the main network directing\npeople to a to-be-created bitcoin.org/feb20 web page explaining the\nissue.\n\n3. The third issue was how to deal with potential chain-splitting\nattacks involving duplicate coinbase transactions. The general\nconsensus is that in the long-term requiring that the first four bytes\nof every coinbase be the block height is the best solution, but\nlooking for and 'discouraging' just blocks that have duplicate\ncoinbases is a reasonable short-term solution.\n\nThere's still some research and thinking to be done on this issue (see\nthe IRC discussion for details), but I expect that the final version\nof bitcoin-qt/bitcoind version 0.6 will be putting the block height\ninto coinbases that it creates.\n\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "14 Feb IRC meeting summary",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1887
        }
    },
    {
        "title": "[Bitcoin-development] 2012-02-17 next[-test]",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2012-02-17T16:33:41",
                "message_text_only": "849 gavin/testnetmining\n\t852 Fix #846. Allow negative options in bitcoin.conf\n\t719 coinbaser\n^^ next ^^\n\t834 sje/BackupWallet\n\t570 force_send\n\t806 sipa/threadid\n\t816 sipa/lameversion\n^^ 037497c ^^\n\t854 laanwj/2012_02_qtipc\n\t841 sipa/getalltransactions\n\t787 sipa/addrman\n\t823 sipa/nodupcon\n\t829 sipa/multilocal\n\t568 rpc_keepalive\n\t565 optimize_FastGetWork\n\t837 sje/ShowImmatureBalance\n\t838 laanwj/201202_guiaddsuffix\n\t853 laanwj/2012_02_altminimizetray\n\t855 sje/ToggleHide\n^^ 4b7e5f5 ^^\n\t780 checkhashverify\n\t715 bugfix_client_name\n\t559 accept_nonstdtxn\n\t552 base58_liberal_parsing\n\t553 bugfix_qt_uri_amount_parser\n\t562 optimize_ToHex\n^^ next-test ^^"
            }
        ],
        "thread_summary": {
            "title": "2012-02-17 next",
            "categories": [
                "Bitcoin-development",
                "-test"
            ],
            "authors": [
                "Luke-Jr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 649
        }
    },
    {
        "title": "[Bitcoin-development] off-topic: bitcoin-forum...",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-02-19T16:38:05",
                "message_text_only": "I am trying to post on the bitcoin forums (bitcointalk.org), but I am only able to reply and post on some of the regional forums?!?!? On the bitcoin dev and alternative client forums I have no post / reply button...\n\nI don't consider myself an IT illiterate, and I have even tried to create a new user to see if that would help, but no luck....\n\nCan any of you please share with me the secret on how to post there ???\n\nIn the expectation of a embarrassingly simple answer...\n\nMichael"
            },
            {
                "author": "Harald Schilly",
                "date": "2012-02-19T16:42:36",
                "message_text_only": "On Sun, Feb 19, 2012 at 17:38, Michael Gronager <gronager at ceptacle.com> wrote:\n> In the expectation of a embarrassingly simple answer...\n\nyou probably need to be whitelisted, but i'm not sure.\nhttps://bitcointalk.org/index.php?topic=15911.0\n\nh"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-19T16:45:42",
                "message_text_only": "Thanks!\n\n\"required 5 posts and 4 hours\"\n\nWell, that is not so easy if you cannot post ;) I will apply for whitelisting - strange policy though...\n\n/M\n\nOn 19/02/2012, at 17:42, Harald Schilly wrote:\n\n> On Sun, Feb 19, 2012 at 17:38, Michael Gronager <gronager at ceptacle.com> wrote:\n>> In the expectation of a embarrassingly simple answer...\n> \n> you probably need to be whitelisted, but i'm not sure.\n> https://bitcointalk.org/index.php?topic=15911.0\n> \n> h\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Harald Schilly",
                "date": "2012-02-19T16:46:49",
                "message_text_only": "On Sun, Feb 19, 2012 at 17:45, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> strange policy though...\n\nwell, spammers are everywhere :)\n\nh"
            },
            {
                "author": "Wladimir",
                "date": "2012-02-19T16:51:56",
                "message_text_only": "On Sun, Feb 19, 2012 at 5:45 PM, Michael Gr\u00f8nager <gronager at ceptacle.com>wrote:\n\n> Thanks!\n>\n> \"required 5 posts and 4 hours\"\n>\n> Well, that is not so easy if you cannot post ;) I will apply for\n> whitelisting - strange policy though...\n>\n\nIt was instated in times that the forums were much more busy. There were a\nlot of new people that trolled the forum with questions immediately, which\nwere answered throughout the forum already. This policy forces people to\nhang around the newbie forums a bit before being able to post to the \"full\"\nforum. I'm not sure it's really needed anymore -- anyway, it used to be\nmuch more strict and you'll have no problems getting whitelisted.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120219/90d7c624/attachment.html>"
            },
            {
                "author": "grarpamp",
                "date": "2012-02-19T21:32:58",
                "message_text_only": "> I am trying to post on the bitcoin forums (bitcointalk.org)\n\nI wish there were a bitcoin-user mailing list??? But the one on\nsourceforge is dead. Forums are too full of avatars, smilies,\nsigblocks and dead mass to be of much use. Not to mention\nwhen they vanish, any content dies with it instead of living\non in various archives."
            },
            {
                "author": "Daniel F",
                "date": "2012-02-19T22:57:58",
                "message_text_only": "on 02/19/2012 04:32 PM grarpamp said the following:\n>> I am trying to post on the bitcoin forums (bitcointalk.org)\n> I wish there were a bitcoin-user mailing list??? But the one on\n> sourceforge is dead. Forums are too full of avatars, smilies,\n> sigblocks and dead mass to be of much use. Not to mention\n> when they vanish, any content dies with it instead of living\n> on in various archives.\nSome time ago i started a googlegroup mailing list, bitcoin-discussion.\nIt's been pretty low-volume... but it's something. :)\n\nhttp://groups.google.com/group/bitcoin-discussion\n\nor we could try to revive the bitcoin-list ml on sf."
            },
            {
                "author": "grarpamp",
                "date": "2012-02-20T00:13:13",
                "message_text_only": "> Some time ago i started a googlegroup mailing list, bitcoin-discussion.\n> It's been pretty low-volume... but it's something. :)\n> http://groups.google.com/group/bitcoin-discussion\n\nUnfortunately it appears to be just as dead as the one\non sourceforge.\n\n> or we could try to revive the bitcoin-list ml on sf.\n\nWell there's a couple things I see...\n\n1) Yes, IMO, a real mailing list for users needs to exist.\nAmong the prior reasons... lists tend to house a more\ntechnical crowd than forums which are magnets for\ninitiates.\n2) There was originally one client. Now there are many,\nall adherant to the same bitcoin spec. So while:\n bitcoin-development at lists.sourceforge.net\nrepresents the dev community for the original client,\nit may not, or won't be, for any other client.\nAnd as:\n bitcoin-list at lists.sourceforge.net\nwas for, and is administratively tied to, the original client...\nit may not be the place, or a welcome one, to hold talk of all\nthe adherant clients.\n3) The sourceforge list browsing interface is ridiculously\nlame and overweight, and it doesn't appear to be setting\na '^Reply-to: ' header which is bad. Googlegroups would\nbe an ok site I suppose. And a pure MailMan interface would\nbe even better and more customarily accepted.\n\nSo for the user list, I'd suggest:\n1) Search a bit to make sure there's not already a busy list\nout there somewhere. Check the list aggregator sites\nlike markmail, gmane, etc too.\n2) Charter it as bitcoin protocol, client agnostic.\n3) Find an impartial administrative and robust home for the list\nwith browsable, searchable and hopefully downloadable archives.\n4) Make the announcement to other known client lists/forums.\n5) Close any relevant old lists.\n6) Promote via similar announcement from time to time.\n\n\nhttp://groups.google.com/group/bitcoin-discussion/about\nDescription: A place for discussion related to bitcoin.\n\nIs this sufficient charter to go with? Is the creator/maintainer\nknown impartial? What happens to ongoing list operations when\nsaid people vanish? It is presumed googlegroups itself is robust."
            },
            {
                "author": "Daniel F",
                "date": "2012-02-20T02:32:34",
                "message_text_only": "on 02/19/2012 07:13 PM grarpamp said the following:\n>> Some time ago i started a googlegroup mailing list, bitcoin-discussion.\n>> It's been pretty low-volume... but it's something. :)\n>> http://groups.google.com/group/bitcoin-discussion\n> \n> Unfortunately it appears to be just as dead as the one\n> on sourceforge.\n\nThat's exactly what i said above, in a more euphemistic fashion :D\n\n> Well there's a couple things I see...\n> \n> 1) Yes, IMO, a real mailing list for users needs to exist.\n> Among the prior reasons... lists tend to house a more\n> technical crowd than forums which are magnets for\n> initiates.\n\nindeed.\n\n> 2) There was originally one client. Now there are many,\n> all adherant to the same bitcoin spec. So while:\n>  bitcoin-development at lists.sourceforge.net\n> represents the dev community for the original client,\n> it may not, or won't be, for any other client.\n> And as:\n>  bitcoin-list at lists.sourceforge.net\n> was for, and is administratively tied to, the original client...\n> it may not be the place, or a welcome one, to hold talk of all\n> the adherant clients.\n\ni'm sure that with the list being unused, we could change the charter\nand do whatever with it, and the people who matter probably won't object.\n\n> 3) The sourceforge list browsing interface is ridiculously\n> lame and overweight, and it doesn't appear to be setting\n> a '^Reply-to: ' header which is bad. Googlegroups would\n> be an ok site I suppose. And a pure MailMan interface would\n> be even better and more customarily accepted.\n\nIndeed, good points on all counts.\n\n> So for the user list, I'd suggest:\n> 1) Search a bit to make sure there's not already a busy list\n> out there somewhere. Check the list aggregator sites\n> like markmail, gmane, etc too.\n> 2) Charter it as bitcoin protocol, client agnostic.\n> 3) Find an impartial administrative and robust home for the list\n> with browsable, searchable and hopefully downloadable archives.\n> 4) Make the announcement to other known client lists/forums.\n> 5) Close any relevant old lists.\n> 6) Promote via similar announcement from time to time.\n\ngood points. re 1), i'm pretty sure that -dev is the most active\nbitcoin-related public mailing list. things may have changed in the past\nhalf-year, but it seems unlikely.\n\n> http://groups.google.com/group/bitcoin-discussion/about\n> Description: A place for discussion related to bitcoin.\n> \n> Is this sufficient charter to go with? Is the creator/maintainer\n> known impartial? What happens to ongoing list operations when\n> said people vanish? It is presumed googlegroups itself is robust.\n\ncharter can be changed if needed. creator/maintainer, that being me, is\ngenerally known to be a pretty decent guy :). i'm not attached to this\nparticular list though, but whatever happens, i'd hope that there will\nbe more people willing to share administrative duties. not sure if\ngooglegroups is the best interface, if we can find some good free host\nwith mailman, downloadable archives, the works, that may be preferable.\ni started that group on gg simply because it was free and easily\navailable and easy to set up."
            }
        ],
        "thread_summary": {
            "title": "off-topic: bitcoin-forum...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Wladimir",
                "Harald Schilly",
                "Michael Gr\u00f8nager",
                "Daniel F",
                "grarpamp"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 8494
        }
    },
    {
        "title": "[Bitcoin-development] Git repo choices",
        "thread_messages": [
            {
                "author": "grarpamp",
                "date": "2012-02-19T22:00:22",
                "message_text_only": "I'm a little unclear on which repo is which and\nfor what intended uses. And other than #1,\ntheir descriptions on the hubs are minimal.\nI'm not the best with git, but getting there.\nAre these the right way to think of them?\nAnd that #1 and #3 are what most builders\nand hacks should be tracking?\n\n#1\nhttps://github.com/bitcoin/bitcoin.git\n\nThe current development tree. As such, HEAD/master/origin\nmay at times not be exactly reliable/usable.\n\n#2\nhttps://git.gitorious.org/bitcoin/bitcoind.git\n\nA copy of some chunk of #1 that then died\noff around v0.4.0. Purposed similar to #3?\n\n#3\nhttps://git.gitorious.org/bitcoin/bitcoind-stable.git\n\nAnother copy of #1. For development along stable\nbranches and making release cuts from same?\nReleases get pulled back to #1 for keeping?\nThe HEAD/master/origin should be reliable.\n\nWhy is this functoin not a part of #1?\n\nThanks."
            }
        ],
        "thread_summary": {
            "title": "Git repo choices",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "grarpamp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 866
        }
    },
    {
        "title": "[Bitcoin-development] BIP-13",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-20T11:17:01",
                "message_text_only": "Just posted this on the wiki BIP-13 discussion - should I make it into a BIP of its own ?\n\n---\nThe \"version\" portion of the address has so far been labeled \"network id\", and indicates from which network and which chain the address can be used for. I think that this change from network id to version is much more fundamental and should not just be squeezed in along with bip16/17. The right way to do this is to structure the bitcoin address into:\n\nbase58-encode: [one-byte network ID][20-byte hash][one-byte address class][3-byte checksum]\n\nThis will move the possibility of using a faulty address from 1 to 4bill to 1 to 24mio. Recall that for most other payment systems this checksum is 1 to 9! So it should be sufficient. An old client will then render the new addresses as useless and they will still maintain their old familiar 1xxx look - the whole point in multisig is that it should not be a matter of the paying party to worry about securing wallet of the receiver, hence he should not be bothered with a new \"3\" kind of address now... --Michael Gronager/libcoin 10:49, 20 February 2012 (GMT)"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-20T14:18:37",
                "message_text_only": "On Monday, February 20, 2012 6:17:01 AM Michael Gr\u00f8nager wrote:\n> Just posted this on the wiki BIP-13 discussion - should I make it into a\n> BIP of its own ?\n\nIf you must. However, BIP 13 has been pretty much undisputed, and only held \nback by BIP 16/17 so far...\n\n> The \"version\" portion of the address has so far been labeled \"network id\",\n> and indicates from which network and which chain the address can be used\n> for.\n\nWhere do you see this? It has always been \"version\" as far as I am aware, and \nwe discussed formalizing the details of the bits in it a few months back.\nIn any case, it was certainly originally intended as \"version\" as can be \nobserved in Satoshi's reference implementation."
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-20T15:47:53",
                "message_text_only": "> \n>> The \"version\" portion of the address has so far been labeled \"network id\",\n>> and indicates from which network and which chain the address can be used\n>> for.\n> \n> Where do you see this? It has always been \"version\" as far as I am aware, and \n> we discussed formalizing the details of the bits in it a few months back.\n> In any case, it was certainly originally intended as \"version\" as can be \n> observed in Satoshi's reference implementation.\n\nSee: https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses\n\nAnd the attached graphics - here it is defined as network byte and network id.\n\nAnyway - can probably live with some bit level subdivision into network id and address class.\n\n/M"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-20T17:17:07",
                "message_text_only": "RE:\n> base58-encode: [one-byte network ID][20-byte hash][one-byte address\nclass][3-byte checksum]\n\nHow will the code distinguish between the old scheme:\n[one-byte-version][20-byte-hash][4-byte-checksum]\nand the new?\n\n1 in 256 old addresses will have a first-byte-of-checksum that matches the\nnew address class; I guess the code would do something like:\n\na) If the 4-byte checksum matches, then assume it is a singlesig address (1\nin 2^32 multisig addresses will incorrectly match)\nb) If the one-byte-address-class and 3-byte checksum match, then it is a\nvalid p2sh\nc) Otherwise, invalid address\n\nThe 1 in 2^32 multisig addresses also being valid singlesig addresses makes\nme think this scheme won't work-- an attacker willing to generate 8 billion\nor so ECDSA keys could generate a single/multisig collision.  I'm not sure\nhow that could be leveraged to their advantage, but I bet they'd find a way.\n\nRE: should it be a BIP:  The BIP process is described in BIP\n0001<https://en.bitcoin.it/wiki/BIP_0001#BIP_Work_Flow>,\nand you're following it perfectly so far:\n\n1) Post a rough draft of the idea here to see if there's any chance it'll\nbe adopted\n2) Assuming a positive response and no major flaws: write up a draft BIP\n3) Post the draft BIP here, where it can be picked apart.\n4) Assuming no major flaws, ask the BIP editor (Amir) for a BIP number\n\nI'd also encourage you to actually implement your idea between steps 3 and\n4. But in this particular case, I think an attacker being able to create\nsinglesig/p2sh address collisions counts as a major flaw.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120220/6f1b9f1d/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-20T21:29:57",
                "message_text_only": "> How will the code distinguish between the old scheme:\n> [one-byte-version][20-byte-hash][4-byte-checksum]\n> and the new?\n> \n> 1 in 256 old addresses will have a first-byte-of-checksum that matches the new address class; I guess the code would do something like:\n> \n> a) If the 4-byte checksum matches, then assume it is a singlesig address (1 in 2^32 multisig addresses will incorrectly match)\n> b) If the one-byte-address-class and 3-byte checksum match, then it is a valid p2sh\n> c) Otherwise, invalid address\n\nExactly!\n\n> \n> The 1 in 2^32 multisig addresses also being valid singlesig addresses makes me think this scheme won't work-- an attacker willing to generate 8 billion or so ECDSA keys could generate a single/multisig collision.  I'm not sure how that could be leveraged to their advantage, but I bet they'd find a way.\n\nNope - its almost like calling the version:0+5 possible collision with new evil, say \"ponzicoin\" with version=5 a possible flaw that could be exploited... And you can already create non-existing addresses with a matching checksum...\n\n> I'd also encourage you to actually implement your idea between steps 3 and 4. But in this particular case, I think an attacker being able to create singlesig/p2sh address collisions counts as a major flaw.\n\nI will rest my case, not due to the \"flaw\", but I got some info on the bitfields of the \"version\" (thanks Luke!) - this makes the +5 less arbitrary, however, I don't think the bitfield interpretation is that well known, so there might already be \"version\"-collisions...:\n\nNetwork class:\n00xxxxxx - main network\n01xxxxxx - reserved\n10xxxxxx - reserved\n11xxxxxx - test network\n\nNetwork:\nxx00xxxx - bitcoin\nxx01xxxx - reserved\nxx10xxxx - OTHER (next octet)\nxx11xxxx - Namecoin\n\nNetwork specific:\nxxxx000y - PubKeyHash\nxxxx001y - reserved\nxxxx010y - p2sh\nxxxx011y - public key (raw)\nxxxx100y - signature\nxxxx101y - reserved\nxxxx110y - private key (raw)\nxxxx111y - OTHER (next octet)\n\ny = 0/1 depending on aesthetics (I guess to force the address to be either 1 or 3). \n\nThis also opens up for extensions - (if xx10xxxx or xxxx111x) the next byte will be part of the version.\n\n/M\n\n> \n> -- \n> --\n> Gavin Andresen"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-22T16:29:59",
                "message_text_only": "Hi Gavin / Luke,\n\nBIP-13 again... I started to implement a bitfield based parsing of the version byte using the description I got from Luke, but I then discovered that it does not hold:\nNetwork class:\n00xxxxxx - main network\n01xxxxxx - reserved\n10xxxxxx - reserved\n11xxxxxx - test network\n\nNetwork:\nxx00xxxx - bitcoin\nxx01xxxx - reserved\nxx10xxxx - OTHER (next octet)\nxx11xxxx - Namecoin\n\nNetwork specific:\nxxxx000y - PubKeyHash\nxxxx001y - reserved\nxxxx010y - p2sh\nxxxx011y - public key (raw)\nxxxx100y - signature\nxxxx101y - reserved\nxxxx110y - private key (raw)\nxxxx111y - OTHER (next octet)\n\nHowever, the definitions en base58.h are:\n\n        PUBKEY_ADDRESS = 0, (00000000)\n        SCRIPT_ADDRESS = 5, (00000101)\n        PUBKEY_ADDRESS_TEST = 111, (01101111) !!!\n        SCRIPT_ADDRESS_TEST = 196, (11000100) !!!\n\n[as a side note litecoin is 48 (00110000) and namecoin is 52 (00110100)]\n\nSo there is no logic ?? I have searched the mailing list and the forum for discussions on this but found it hard to find any. If I overlooked something please direct me.\n\nCheers,\n\nM\n\nPS: I have said so before, but it would *really* be nice if discussions / conclusions / irc-summaries were taking place at one place - e.g. at the bitcoin-dev mailing list, not at 5-10 different threads in bitcointalk or in bip notes or solely on IRC...\n\n\nOn 20/02/2012, at 18:17, Gavin Andresen wrote:\n\n> RE:\n> > base58-encode: [one-byte network ID][20-byte hash][one-byte address class][3-byte checksum]\n> \n> How will the code distinguish between the old scheme:\n> [one-byte-version][20-byte-hash][4-byte-checksum]\n> and the new?\n> \n> 1 in 256 old addresses will have a first-byte-of-checksum that matches the new address class; I guess the code would do something like:\n> \n> a) If the 4-byte checksum matches, then assume it is a singlesig address (1 in 2^32 multisig addresses will incorrectly match)\n> b) If the one-byte-address-class and 3-byte checksum match, then it is a valid p2sh\n> c) Otherwise, invalid address\n> \n> The 1 in 2^32 multisig addresses also being valid singlesig addresses makes me think this scheme won't work-- an attacker willing to generate 8 billion or so ECDSA keys could generate a single/multisig collision.  I'm not sure how that could be leveraged to their advantage, but I bet they'd find a way.\n> \n> RE: should it be a BIP:  The BIP process is described in BIP 0001, and you're following it perfectly so far:\n> \n> 1) Post a rough draft of the idea here to see if there's any chance it'll be adopted\n> 2) Assuming a positive response and no major flaws: write up a draft BIP\n> 3) Post the draft BIP here, where it can be picked apart.\n> 4) Assuming no major flaws, ask the BIP editor (Amir) for a BIP number\n> \n> I'd also encourage you to actually implement your idea between steps 3 and 4. But in this particular case, I think an attacker being able to create singlesig/p2sh address collisions counts as a major flaw.\n> \n> -- \n> --\n> Gavin Andresen\n\nMichael Gronager, PhD\nDirector, Ceptacle\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 45 14 01\nE-mail: gronager at ceptacle.com\nWeb: http://www.ceptacle.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-22T16:40:19",
                "message_text_only": ">\n> However, the definitions en base58.h are:\n>\n>        PUBKEY_ADDRESS = 0, (00000000)\n>        SCRIPT_ADDRESS = 5, (00000101)\n>        PUBKEY_ADDRESS_TEST = 111, (01101111) !!!\n>        SCRIPT_ADDRESS_TEST = 196, (11000100) !!!\n>\n> [as a side note litecoin is 48 (00110000) and namecoin is 52 (00110100)]\n>\n> So there is no logic ?? I have searched the mailing list and the forum for\n> discussions on this but found it hard to find any. If I overlooked\n> something please direct me.\n>\n\nPUBKEY_ADDRESS_TEST is/was supposed to change (the logic for it being 111\nwas \"eleven is Gavin's favorite number\"), but I have higher priority things\nto do than make all the necessary code changes to upgrade testnet wallets\n(unfortunately the address:account mappings in the wallet store the address\nbase58-encoded) and the testnet faucet and get theymos to change the\nblockexplorer.com/testnet site to change the version number and publicize\nthe change so anybody else who has created testnet infrastructure changes.\n\nIf you'd like to spearhead that effort, be my guest, but it is not as\ntrivial as just changing the definition.\n\nLuke can explain why SCRIPT_ADDRESS_TEST is 196, my memory is fuzzy about\nthat (it always decodes to the same digit in base58 maye?)\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120222/4e0f3f10/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-22T16:43:53",
                "message_text_only": "On Wednesday, February 22, 2012 11:29:59 AM Michael Gr\u00f8nager wrote:\n>         SCRIPT_ADDRESS_TEST = 196, (11000100) !!!\n> 11xxxxxx - test network\n> xx00xxxx - bitcoin\n> xxxx010y - p2sh\n\nThis fits...\n\n>         PUBKEY_ADDRESS_TEST = 111, (01101111) !!!\n\nWhat Gavin said."
            }
        ],
        "thread_summary": {
            "title": "BIP-13",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Michael Gr\u00f8nager",
                "Gavin Andresen"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 11300
        }
    },
    {
        "title": "[Bitcoin-development] BitcoinQt eating 100% CPU",
        "thread_messages": [
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-02-21T20:33:14",
                "message_text_only": "Hi Wladimir / others,\n\nI just downloaded the latest (0.6 rc1) source of bitcoin-qt and built it using qt-creator on MacOSX 10.7.3. Nice and easy experience, even though I had to change BDB version to 5.1 ;)\n\nHowever, when running it, it is using 100% CPU (after initial block chain download that is...)\n* All activity in debug.log seems normal (blocks/txes/addresses are processes and accepted etc) so it is not stuck (at least not in the MessageThread)\n* Sampling the process shows that the majority of time in each thread is used for:\n** __semwait_signal\n** kevent\n** __select\n** mach_msg_trap\n** boost::date_time::micro_sec_clock\n\nNone of this would usually alert me - sleeping and waiting for conditions should not consume CPU, the only issue seems to be the last line which is called from qtipcserver.cpp line 31:\n\n       if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n\nAs I see it this should not consume cpu either, but, it is the only thing that seems a bit strange..\n\nHave you seen this before?\n\n/M"
            },
            {
                "author": "Michael Gronager",
                "date": "2012-02-23T20:02:46",
                "message_text_only": "A follow up on my mail from the other day (got it send from the wrong email address...)\n\nI now exit the ipc thread at startup by inserting:\n\nvoid ipcThread(void* parg)\n{\n   ipcShutdown();\n   return;\n\nBitcoin-Qt is now running nicely using around 0.9% CPU. So it seems like the culprit was indeed line 31:\n\nif(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n\nOthers, who have seen similar issues ?\n\nCheers,\n\nM \n\nOn 21/02/2012, at 21:33, Michael Gr\u00f8nager wrote:\n\n> Hi Wladimir / others,\n> \n> I just downloaded the latest (0.6 rc1) source of bitcoin-qt and built it using qt-creator on MacOSX 10.7.3. Nice and easy experience, even though I had to change BDB version to 5.1 ;)\n> \n> However, when running it, it is using 100% CPU (after initial block chain download that is...)\n> * All activity in debug.log seems normal (blocks/txes/addresses are processes and accepted etc) so it is not stuck (at least not in the MessageThread)\n> * Sampling the process shows that the majority of time in each thread is used for:\n> ** __semwait_signal\n> ** kevent\n> ** __select\n> ** mach_msg_trap\n> ** boost::date_time::micro_sec_clock\n> \n> None of this would usually alert me - sleeping and waiting for conditions should not consume CPU, the only issue seems to be the last line which is called from qtipcserver.cpp line 31:\n> \n>      if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n> \n> As I see it this should not consume cpu either, but, it is the only thing that seems a bit strange..\n> \n> Have you seen this before?\n> \n> /M"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-23T20:26:40",
                "message_text_only": "Bitcoin-Qt is now running nicely using around 0.9% CPU. So it seems like\n> the culprit was indeed line 31:\n>\n> if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n>\n> Others, who have seen similar issues ?\n>\n>\nI can definitely reproduce the issue on my mac.\n\nIf I recall correctly, the Mac Bitcoin-Qt does not register itself as a\nbitcoin: URL handler, so the easiest fix for the 0.6 release would be to\njust never launch the ipcThread #ifdef Q_WS_MAC\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/f36c1cef/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-23T20:33:41",
                "message_text_only": "On Thursday, February 23, 2012 3:26:40 PM Gavin Andresen wrote:\n> If I recall correctly, the Mac Bitcoin-Qt does not register itself as a\n> bitcoin: URL handler, so the easiest fix for the 0.6 release would be to\n> just never launch the ipcThread #ifdef Q_WS_MAC\n\nWouldn't that prevent the user from registering it?"
            }
        ],
        "thread_summary": {
            "title": "BitcoinQt eating 100% CPU",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Michael Gronager",
                "Michael Gr\u00f8nager",
                "Gavin Andresen"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3565
        }
    },
    {
        "title": "[Bitcoin-development] Where to have discussions...",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-22T16:44:06",
                "message_text_only": "On Wed, Feb 22, 2012 at 11:29 AM, Michael Gr\u00f8nager <gronager at ceptacle.com>wrote:\n\n> PS: I have said so before, but it would *really* be nice if discussions /\n> conclusions / irc-summaries were taking place at one place - e.g. at the\n> bitcoin-dev mailing list, not at 5-10 different threads in bitcointalk or\n> in bip notes or solely on IRC...\n\n\nI've been trying to move discussions to this mailing list, by starting\nconversations here and posting links to the mailing list archives in the\ndiscussion forums just so people know there is a conversation going on.\n\nIRC conversations are great for rapid back-and-forth brainstorming, so I\nexpect a lot of work to continue getting done via IRC, but once there's\ngeneral consensus there I expect issues to migrate here.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120222/8b0aeadb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Where to have discussions...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 973
        }
    },
    {
        "title": "[Bitcoin-development] libcoin - fixed post Feb 20 version 0.2 bug.",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-02-24T11:57:06",
                "message_text_only": "The bitcoin 0.2 protocol (the one with no checksums on version/verack) ended its life Feb 20th.\n\nI had forgot to add the date check in libcoin, so after Feb 20th you might have seen some errors in the log file (and having trouble getting blocks) - the code is fixed now...\n\nAlso, there are a lot of updates for 0.6:\n* New internal address classes: PubKeyHash and ScriptHash to support P2SH\n* Adapted a lot of other code from the 0.6 branch\n* Support for BitcoinQt: I am porting BitcoinQt to use libcoin - this required a couple of interface enhancements. More on this later...\n\n(detail:\nhttps://github.com/ceptacle/libcoin/commit/98531e971152d4fff41c30b14d58b9fd548b21db\n)\n\nCheers,\n\nMichael"
            }
        ],
        "thread_summary": {
            "title": "libcoin - fixed post Feb 20 version 0.2 bug.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 690
        }
    },
    {
        "title": "[Bitcoin-development] Announcement: libcoin/BitcoinQt aka libcoinqt",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-02-24T14:09:11",
                "message_text_only": "I have just finalized porting BitcoinQt to build using libcoin as its basic crypto library.\n\nYou can find the project at:\n\nhttps://github.com/ceptacle/libcoinqt\n\nIt is based on the latest 0.6 branch of BitcoinQt.\n\nThere are a few things not yet ported:\n* update the splash text while loading\n* some of the globals have not found a replacement (see optionmodel for details on this)\n* UPnP - this awaits the similar functionality in libcoin\n* Proxy support - same...\n\nTo build libcoinqt you need to first build libcoin, then build libcoinqt using qmake or Qt Creator.\n\nNote: I have only tested on MacOSX - more tests and features next week.\n\nHave a nice weekend!\n\nMichael"
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin/BitcoinQt aka libcoinqt",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 669
        }
    },
    {
        "title": "[Bitcoin-development] Building BDB on MingW",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-02-24T22:15:37",
                "message_text_only": "I followed the instructions from build-msw.txt and am getting the same issue from here:\n\nhttps://bitcointalk.org/index.php?topic=45507.0\n\n\nMSYS shell:\n\ncd /c/db-4.8.30.NC-mgw/build_unix\nsh ../dist/configure --enable-mingw --enable-cxx\nmake\n\n$ make\n\n./libtool --mode=compile gcc -c -I. -I../dist/.. \u00a0-O3 \u00a0../dist/../mutex/mut_win32.c\nlibtool: compile: \u00a0gcc -c -I. -I../dist/.. -O3 ../dist/../mutex/mut_win32.c \u00a0-DDLL_EXPORT -DPIC -o .libs/mut_win32.o\nIn file included from ./db_int.h:886:0,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from ../dist/../mutex/mut_win32.c:12:\n../dist/../dbinc/repmgr.h:502:13: error: two or more data types in declaration specifiers\n../dist/../dbinc/repmgr.h:502:1: warning: useless type name in empty declaration\nmake: *** [mut_win32.lo] Error 1[/quote]\n\nAny ideas? Sadly the proposed fix in that thread didn't work."
            },
            {
                "author": "Wladimir",
                "date": "2012-02-25T07:18:39",
                "message_text_only": "On Fri, Feb 24, 2012 at 11:15 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> I followed the instructions from build-msw.txt and am getting the same\n> issue from here:\n>\n> https://bitcointalk.org/index.php?topic=45507.0\n>\n>\n> Any ideas? Sadly the proposed fix in that thread didn't work.\n>\n\nhttps://forums.oracle.com/forums/thread.jspa?messageID=4018239\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120225/7e6d4505/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-02-26T13:51:32",
                "message_text_only": "Thanks. Using --disable-thread_api --disable-replication got it to compile, but now when actually running bitcoind it throws DbRunRecoveryException over the DB_RUNRECOVERY flag.\n\nIt seems people aren't actually using MingW to compile bitcoind on Windows? The lack of pthreads seems crippling and there's lots of missing functions like strncasecmp, _strlwr, _fileno and swprintf.\n\n\n________________________________\n From: Wladimir <laanwj at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com> \nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net> \nSent: Saturday, February 25, 2012 7:18 AM\nSubject: Re: [Bitcoin-development] Building BDB on MingW\n \n\n\n\n\nOn Fri, Feb 24, 2012 at 11:15 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nI followed the instructions from build-msw.txt and am getting the same issue from here:\n>\n>https://bitcointalk.org/index.php?topic=45507.0\n>\n>\n>Any ideas? Sadly the proposed fix in that thread didn't work.\n>\n\nhttps://forums.oracle.com/forums/thread.jspa?messageID=4018239\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120226/49b57a3c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Building BDB on MingW",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Amir Taaki"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2600
        }
    },
    {
        "title": "[Bitcoin-development] BIP 16 status update",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-27T16:10:17",
                "message_text_only": "Mining support for BIP 16 is still under 50%, and won't possibly be over\n50% by March 1.  Which means we need a new evaluation/switchover date:\n\nRe-evaluate support: March 15'th\nTarget switchover: April 1\n\nIf you're already supporting BIP16, restart bitcoind with the argument:\n  -paytoscripthashtime=1333238400\n\n... to delay switchover until April 1.\n\nHopefully this will be the last delay; Tycho has told me that deepbit will\nsupport BIP16 as soon as he's able to merge and test the changes, which\nwill put support at well over 55%.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120227/f73a84df/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 16 status update",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 740
        }
    },
    {
        "title": "[Bitcoin-development] Duplicate transactions vulnerability",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-02-28T16:48:39",
                "message_text_only": "Hello all,\n\nas some of you may know, a vulnerability has been found in how the\nBitcoin reference client deals with duplicate transactions. Exploiting\nit is rather complex, requires some hash power, and has no financial\nbenefit for the attacker. Still, it's a security hole, and we'd like\nto fix this as soon as possible.\n\nA simple way to fix this, is adding an extra protocol rule[1]:\n\n  Do not allow blocks to contain a transaction whose hash is equal to\nthat of a former transaction which has not yet been completely spent.\n\nI've written about it in BIP30[2]. There is a patch for the reference\nclient, which has been tested and verified to make the attack\nimpossible. The change is backward compatible in the same way BIP16\nis: if a supermajority of mining power implements it, old clients can\ncontinue to function without risk.\n\nThe purpose of this mail is asking for support for adding this rule to\nthe protocol rules. If there is consensus this rule is the solution, I\nhope pools and miners can agree to update their nodes without lengthy\ncoinbase-flagging procedure that would only delay a solution. So, who\nis in favor?\n\n  [1] https://en.bitcoin.it/wiki/Protocol_rules\n  [2] https://en.bitcoin.it/wiki/BIP_0030\n\n-- \nPieter"
            },
            {
                "author": "Brautigam R\u00f3bert",
                "date": "2012-02-28T17:12:12",
                "message_text_only": "On 02/28/2012 05:48 PM, Pieter Wuille wrote:\n> Hello all,\n\nHi,\n\n> as some of you may know, a vulnerability has been found in how the\n> Bitcoin reference client deals with duplicate transactions. Exploiting\n> it is rather complex, requires some hash power, and has no financial\n> benefit for the attacker. Still, it's a security hole, and we'd like\n> to fix this as soon as possible.\n>\n> A simple way to fix this, is adding an extra protocol rule[1]:\n>\n>    Do not allow blocks to contain a transaction whose hash is equal to\n> that of a former transaction which has not yet been completely spent.\n\nI don't know whether I understand this correctly, but there should be no \nduplicate transaction hashes at all. So the rule should be: Do not allow \nblocks to contain transaction hashes which are already present in that \nbranch.\n\nIf by a freak accident a transaction has the same hash as another \ntransaction in the chain, shouldn't the transaction be \"tweaked\" in some \nway to avoid collision (generate a new target address for it or \nsomething)? In any case this seams very-very unlikely to happen, or am I \nmissing something?\n\nRobert."
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-28T17:18:12",
                "message_text_only": "On Tue, Feb 28, 2012 at 18:12, Brautigam R\u00f3bert\n<robert.brautigam at netmind.hu> wrote:\n>> A simple way to fix this, is adding an extra protocol rule[1]:\n>>\n>> \u00a0 \u00a0Do not allow blocks to contain a transaction whose hash is equal to\n>> that of a former transaction which has not yet been completely spent.\n>\n> I don't know whether I understand this correctly, but there should be no\n> duplicate transaction hashes at all. So the rule should be: Do not allow\n> blocks to contain transaction hashes which are already present in that\n> branch.\n\nAs explained in the BIP, that would prevent pruning, as it would\nrequire each full node to keep a database with all transaction hashes\never.\n\n> If by a freak accident a transaction has the same hash as another\n> transaction in the chain, shouldn't the transaction be \"tweaked\" in some\n> way to avoid collision (generate a new target address for it or\n> something)? In any case this seams very-very unlikely to happen, or am I\n> missing something?\n\nIt won't happen by accident. Duplicate coinbase transactions are\npossible however (by badly written software, or malicious intent).\nTransactions that spend duplcate coinbases can be made to have the\nsame hash as well.\n\n-- \nPieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-28T18:10:41",
                "message_text_only": ">\n> The purpose of this mail is asking for support for adding this rule to\n> the protocol rules. If there is consensus this rule is the solution, I\n> hope pools and miners can agree to update their nodes without lengthy\n> coinbase-flagging procedure that would only delay a solution. So, who\n> is in favor?\n\nPieter\n>\n\nMost of you might already know this, but I'm strongly in favor of doing\nthis as soon as possible.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/926bf896/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-02-28T18:23:01",
                "message_text_only": "On Tuesday, February 28, 2012 11:48:39 AM Pieter Wuille wrote:\n> A simple way to fix this, is adding an extra protocol rule[1]:\n> \n>   Do not allow blocks to contain a transaction whose hash is equal to\n> that of a former transaction which has not yet been completely spent.\n> \n> I've written about it in BIP30[2]. There is a patch for the reference\n> client, which has been tested and verified to make the attack\n> impossible.\n\nHas it been verified to make even rocconor's complicated transaction-based \nversion impossible?\n\n> The purpose of this mail is asking for support for adding this rule to\n> the protocol rules. If there is consensus this rule is the solution, I\n> hope pools and miners can agree to update their nodes without lengthy\n> coinbase-flagging procedure that would only delay a solution. So, who\n> is in favor?\n\nCan we do this in two steps? First, prefer blocks which don't break the rule; \nonce 55%+ are confirmed to have upgraded, then it is safe to treat it as a \nhard rule."
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-28T20:24:15",
                "message_text_only": "On Tue, Feb 28, 2012 at 01:23:01PM -0500, Luke-Jr wrote:\n> Has it been verified to make even rocconor's complicated transaction-based \n> version impossible?\n\nYes, he tried it on testnet against a patched node.\n\n> > The purpose of this mail is asking for support for adding this rule to\n> > the protocol rules. If there is consensus this rule is the solution, I\n> > hope pools and miners can agree to update their nodes without lengthy\n> > coinbase-flagging procedure that would only delay a solution. So, who\n> > is in favor?\n> \n> Can we do this in two steps? First, prefer blocks which don't break the rule; \n> once 55%+ are confirmed to have upgraded, then it is safe to treat it as a \n> hard rule.\n\nI prefer to avoid this if possible, as it increases the size of the patch\nsignificantly. In particular, it would require the discouragement-system to\nbe backported to whatever versions pools are running. The current proposal\nonly requires adding 6 lines of code.\n\n-- \nPieter"
            },
            {
                "author": "Ben Reeves",
                "date": "2012-02-28T20:35:05",
                "message_text_only": "I might be wrong but I think perhaps it would help to get this fix out before the p2sh protocol change. Otherwise a miner could combine a duplicate coinbase and an invalid P2SH transaction to create a block which can have excellent network propagation and still be guaranteed to be orphaned. This makes the attack significantly easier to perform.\n\nIf someone were to do this on the day of the P2SH switchover they could corrupt the database of all clients < 0.6 with only a single block. If it was done on an early block and was widespread enough it would make it difficult for new clients to find a genuine non-corrupted copy of the blockchain to download.\n\nThank You,\nBen Reeves\nwww.blockchain.info\n\n\nOn 28 Feb 2012, at 18:23, Luke-Jr wrote:\n\n> On Tuesday, February 28, 2012 11:48:39 AM Pieter Wuille wrote:\n>> A simple way to fix this, is adding an extra protocol rule[1]:\n>> \n>>  Do not allow blocks to contain a transaction whose hash is equal to\n>> that of a former transaction which has not yet been completely spent.\n>> \n>> I've written about it in BIP30[2]. There is a patch for the reference\n>> client, which has been tested and verified to make the attack\n>> impossible.\n> \n> Has it been verified to make even rocconor's complicated transaction-based \n> version impossible?\n> \n>> The purpose of this mail is asking for support for adding this rule to\n>> the protocol rules. If there is consensus this rule is the solution, I\n>> hope pools and miners can agree to update their nodes without lengthy\n>> coinbase-flagging procedure that would only delay a solution. So, who\n>> is in favor?\n> \n> Can we do this in two steps? First, prefer blocks which don't break the rule; \n> once 55%+ are confirmed to have upgraded, then it is safe to treat it as a \n> hard rule.\n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/6ef43bce/attachment.html>"
            },
            {
                "author": "Zooko Wilcox-O'Hearn",
                "date": "2012-02-29T01:41:31",
                "message_text_only": "Could you spell out the attack explicitly? Presumably there aren't a\nlot of people with the \"malice energy\" to perform the attack but not\nto figure it out for themselves. I, however, have the \"niceness\nenergy\" to think about it for a few minutes but not to figure it out\nfor myself. If in your opinion it is realistically dangerous to post\nit publicly, would you be so kind as to include me in the private\nsharing of the explanation?\n\nBy the way, I found a couple of cases of slightly bad handling of\nmerkle trees when I inspected the code (v0.4) that was, I'm 99% sure,\nnot exploitable. I never got around to reporting it yet. I'm sorry\nabout that. My discoveries might interact with the one you're talking\nabout here. I should definitely explain mine to y'all soon. (Possibly\nin private for the first pass, in case it is more exploitable than I\nthought, or has become exploitable since v0.4.)\n\nI showed it to a couple of other people at the time who helped me make\nsure that it wasn't exploitable.\n\nI'll make time to explain what I found within a week.\n\nRegards,\n\nZooko"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-29T16:47:48",
                "message_text_only": "On Tue, Feb 28, 2012 at 06:41:31PM -0700, Zooko Wilcox-O'Hearn wrote:\n> Could you spell out the attack explicitly? Presumably there aren't a\n> lot of people with the \"malice energy\" to perform the attack but not\n> to figure it out for themselves. I, however, have the \"niceness\n> energy\" to think about it for a few minutes but not to figure it out\n> for myself. If in your opinion it is realistically dangerous to post\n> it publicly, would you be so kind as to include me in the private\n> sharing of the explanation?\n\nIt's not exactly a secret anymore, as the patch also references it.\nRussell O'Connor described the attack on his blog:\nhttp://r6.ca/blog/20120206T005236Z.html\n\n-- \nPieter"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-02-29T17:02:29",
                "message_text_only": "I support BIP 30.\n\nI gave it a thought. The other ways of resolving this issue, all have various niggles. This is the best way.\n\n\n________________________________\n From: Pieter Wuille <pieter.wuille at gmail.com>\nTo: Zooko Wilcox-O'Hearn <zooko at zooko.com> \nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net> \nSent: Wednesday, February 29, 2012 4:47 PM\nSubject: Re: [Bitcoin-development] Duplicate transactions vulnerability\n \nOn Tue, Feb 28, 2012 at 06:41:31PM -0700, Zooko Wilcox-O'Hearn wrote:\n> Could you spell out the attack explicitly? Presumably there aren't a\n> lot of people with the \"malice energy\" to perform the attack but not\n> to figure it out for themselves. I, however, have the \"niceness\n> energy\" to think about it for a few minutes but not to figure it out\n> for myself. If in your opinion it is realistically dangerous to post\n> it publicly, would you be so kind as to include me in the private\n> sharing of the explanation?\n\nIt's not exactly a secret anymore, as the patch also references it.\nRussell O'Connor described the attack on his blog:\nhttp://r6.ca/blog/20120206T005236Z.html\n\n-- \nPieter\n\n------------------------------------------------------------------------------\nVirtualization & Cloud Management Using Capacity Planning\nCloud computing makes use of virtualization - but cloud computing \nalso focuses on allowing computing to be delivered as a service.\nhttp://www.accelacomm.com/jaw/sfnl/114/51521223/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120229/87a7dc28/attachment.html>"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-02-29T21:00:44",
                "message_text_only": "> The purpose of this mail is asking for support for adding this rule to\n> the protocol rules. If there is consensus this rule is the solution, I\n> hope pools and miners can agree to update their nodes without lengthy\n> coinbase-flagging procedure that would only delay a solution. So, who\n> is in favor?\n\nLooks good to me. I also second the notion that we should deploy this \nquickly, given that it's a bug fix.\n\n\nOn 2/28/2012 5:48 PM, Pieter Wuille wrote:\n> Hello all,\n>\n> as some of you may know, a vulnerability has been found in how the\n> Bitcoin reference client deals with duplicate transactions. Exploiting\n> it is rather complex, requires some hash power, and has no financial\n> benefit for the attacker. Still, it's a security hole, and we'd like\n> to fix this as soon as possible.\n>\n> A simple way to fix this, is adding an extra protocol rule[1]:\n>\n>    Do not allow blocks to contain a transaction whose hash is equal to\n> that of a former transaction which has not yet been completely spent.\n>\n> I've written about it in BIP30[2]. There is a patch for the reference\n> client, which has been tested and verified to make the attack\n> impossible. The change is backward compatible in the same way BIP16\n> is: if a supermajority of mining power implements it, old clients can\n> continue to function without risk.\n>\n> The purpose of this mail is asking for support for adding this rule to\n> the protocol rules. If there is consensus this rule is the solution, I\n> hope pools and miners can agree to update their nodes without lengthy\n> coinbase-flagging procedure that would only delay a solution. So, who\n> is in favor?\n>\n>    [1] https://en.bitcoin.it/wiki/Protocol_rules\n>    [2] https://en.bitcoin.it/wiki/BIP_0030\n>"
            },
            {
                "author": "Ben Reeves",
                "date": "2012-02-29T22:05:55",
                "message_text_only": "Assuming 50% of hashing power adopts BIP30 but the actual client\ninstall base is relatively low the patch will likely result in a\n\"hard\" blockchain split if someone takes advantage.\n\nA malicious miner can produce a duplicate coinbase which the majority\nof clients will accept but the majority of hashing power won't.\nSpending the coinbase output after disconnection will cause the\nblockchain to fork. All none BIP30 clients on the short blockchain\nwill be vulnerable to transaction reversal of 6 confirmations or more.\n\nIt is a relatively inexpensive attack to perform (costing the attacker\nonly one valid block ~$240) and could be quite disruptive. I think\nthis should be patched in DisconnectBlock() (if it hasn't already?)\nbefore any protocol change - maybe a new mapByCoinbase multimap is\nneeded.\n\nThank You,\nBen Reeves\nwww.blockchain.info\n\nOn Tue, Feb 28, 2012 at 4:48 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hello all,\n>\n> as some of you may know, a vulnerability has been found in how the\n> Bitcoin reference client deals with duplicate transactions. Exploiting\n> it is rather complex, requires some hash power, and has no financial\n> benefit for the attacker. Still, it's a security hole, and we'd like\n> to fix this as soon as possible.\n>\n> A simple way to fix this, is adding an extra protocol rule[1]:\n>\n> \u00a0Do not allow blocks to contain a transaction whose hash is equal to\n> that of a former transaction which has not yet been completely spent.\n>\n> I've written about it in BIP30[2]. There is a patch for the reference\n> client, which has been tested and verified to make the attack\n> impossible. The change is backward compatible in the same way BIP16\n> is: if a supermajority of mining power implements it, old clients can\n> continue to function without risk.\n>\n> The purpose of this mail is asking for support for adding this rule to\n> the protocol rules. If there is consensus this rule is the solution, I\n> hope pools and miners can agree to update their nodes without lengthy\n> coinbase-flagging procedure that would only delay a solution. So, who\n> is in favor?\n>\n> \u00a0[1] https://en.bitcoin.it/wiki/Protocol_rules\n> \u00a0[2] https://en.bitcoin.it/wiki/BIP_0030\n>\n> --\n> Pieter\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-02-29T22:38:13",
                "message_text_only": "In other words when we roll out the update, we have to make sure we have\n>>50% not just 50%.  Something like 60%-75% should do fine (IMHO).  In\nother words we just have to be very, very vocal about the change when it\nhappens and make sure miners are all on board.\n\nMatt\n\nOn Wed, 2012-02-29 at 22:05 +0000, Ben Reeves wrote:\n> Assuming 50% of hashing power adopts BIP30 but the actual client\n> install base is relatively low the patch will likely result in a\n> \"hard\" blockchain split if someone takes advantage.\n> \n> A malicious miner can produce a duplicate coinbase which the majority\n> of clients will accept but the majority of hashing power won't.\n> Spending the coinbase output after disconnection will cause the\n> blockchain to fork. All none BIP30 clients on the short blockchain\n> will be vulnerable to transaction reversal of 6 confirmations or more.\n> \n> It is a relatively inexpensive attack to perform (costing the attacker\n> only one valid block ~$240) and could be quite disruptive. I think\n> this should be patched in DisconnectBlock() (if it hasn't already?)\n> before any protocol change - maybe a new mapByCoinbase multimap is\n> needed.\n> \n> Thank You,\n> Ben Reeves\n> www.blockchain.info\n> \n> On Tue, Feb 28, 2012 at 4:48 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> > Hello all,\n> >\n> > as some of you may know, a vulnerability has been found in how the\n> > Bitcoin reference client deals with duplicate transactions. Exploiting\n> > it is rather complex, requires some hash power, and has no financial\n> > benefit for the attacker. Still, it's a security hole, and we'd like\n> > to fix this as soon as possible.\n> >\n> > A simple way to fix this, is adding an extra protocol rule[1]:\n> >\n> >  Do not allow blocks to contain a transaction whose hash is equal to\n> > that of a former transaction which has not yet been completely spent.\n> >\n> > I've written about it in BIP30[2]. There is a patch for the reference\n> > client, which has been tested and verified to make the attack\n> > impossible. The change is backward compatible in the same way BIP16\n> > is: if a supermajority of mining power implements it, old clients can\n> > continue to function without risk.\n> >\n> > The purpose of this mail is asking for support for adding this rule to\n> > the protocol rules. If there is consensus this rule is the solution, I\n> > hope pools and miners can agree to update their nodes without lengthy\n> > coinbase-flagging procedure that would only delay a solution. So, who\n> > is in favor?\n> >\n> >  [1] https://en.bitcoin.it/wiki/Protocol_rules\n> >  [2] https://en.bitcoin.it/wiki/BIP_0030\n> >\n> > --\n> > Pieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-02-29T22:46:55",
                "message_text_only": "On Wed, Feb 29, 2012 at 5:05 PM, Ben Reeves <support at pi.uk.com> wrote:\n> A malicious miner can produce a duplicate coinbase which the majority\n> of clients will accept but the majority of hashing power won't.\n> Spending the coinbase output after....\n\nThat can't happen until the coinbase matures, which takes 100 blocks.\nAnd it won't mature because a majority of hashing power is rejecting\nit, right?\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Ben Reeves",
                "date": "2012-02-29T23:00:42",
                "message_text_only": "I'm not sure. What if they use a coinbase of a block that has already matured?\n\nOn Wed, Feb 29, 2012 at 10:46 PM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> On Wed, Feb 29, 2012 at 5:05 PM, Ben Reeves <support at pi.uk.com> wrote:\n>> A malicious miner can produce a duplicate coinbase which the majority\n>> of clients will accept but the majority of hashing power won't.\n>> Spending the coinbase output after....\n>\n> That can't happen until the coinbase matures, which takes 100 blocks.\n> And it won't mature because a majority of hashing power is rejecting\n> it, right?\n>\n> --\n> --\n> Gavin Andresen"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-02-29T23:45:59",
                "message_text_only": "On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:\n> I'm not sure. What if they use a coinbase of a block that has already matured?\n\nIndeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.\nThe 100-blocks maturity will not help against is.\n\nI'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-\ncompatible way, though.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Duplicate transactions vulnerability",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Amir Taaki",
                "Brautigam R\u00f3bert",
                "Zooko Wilcox-O'Hearn",
                "Gavin Andresen",
                "Ben Reeves",
                "Matt Corallo",
                "Stefan Thomas",
                "Pieter Wuille"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 20909
        }
    },
    {
        "title": "[Bitcoin-development] Anything to chat about today at 21:00 UTC ?",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-02-28T18:56:26",
                "message_text_only": "I'll be in the #bitcoin-development IRC channel in two hours, for the\nsemi-regular Tuesday IRC meeting. Things that might be worth some\ndiscussion:\n\n+ The duplicate coinbase attack/fix, and strategy for rolling out sipa's\nfix.\n\n+ 0.6 release schedule\n\n+ Is there anything we can do to attract a great Windows developer?  (we've\ngot issues piling up...)\n\n+ Multisignature next-steps: who is working on what?\n\nAm I forgetting anything?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/7d93b246/attachment.html>"
            },
            {
                "author": "D.H.",
                "date": "2012-02-28T19:33:16",
                "message_text_only": "I probably won't be on IRC but...\n\n> Is there anything we can do to attract a great Windows developer?\n\nA couple of months ago I mentioned the possibility to get free advertising\nfor open source projects on StackOverflow. Perhaps this is the time to do\nit, we could make an ad specifically for windows developers. See this:\n\nhttp://meta.stackoverflow.com/questions/114442/open-source-advertising-sidebar-1h-2012\n\nShouldn't be a problem for us to get 30 votes with some help from the forum.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/e70ce284/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Anything to chat about today at 21:00 UTC ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "D.H."
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1311
        }
    },
    {
        "title": "[Bitcoin-development] getmemorypool BIP process",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2012-02-28T22:06:20",
                "message_text_only": "Please review and comment/critique:\n    https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool"
            }
        ],
        "thread_summary": {
            "title": "getmemorypool BIP process",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 91
        }
    },
    {
        "title": "[Bitcoin-development] NATPMP and proxy support in libcoin",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-02-29T13:09:26",
                "message_text_only": "I just finished adding NATPMP, together with IDG UPnP, to libcoin. This enables libcoin/bitcoind to setup port mapping also on Apple routers (AirPort Extreme/Express/TimeMachine) and a few other that supports this protocol.\n\nlibcoin/bitcoind first tried to setup mapping using UPnP, if that fails it resorts to using PMP. \n\nIt chooses a lease time of (default) 20 minutes and renews this every 10 minutes. This also means that if you are running libcoin on your laptop it will, when e.g. moved to your work, just setup the mapping there and the mapping back home will silently expire.\n\nTo include portmapping in libcoin/bitcoind the only thing needed is to add the PortMapper class and start it:\n\n        PortMapper mapper(node.get_io_service(), port);\n        if(portmap) mapper.start();\n\nwhere \"portmap\" is the former \"upnp\" command line option.\n\nAlso note that I choose to include the relevant portions of miniupnpc and libnatpmp in the coinNAT library to make it easier to build.\n\nI choose to make a rather aggressive setting for quitting searching for an IGD device (3 seconds). If I waited too long here the PMP port mapping would only kick in after the other clients had tried to connect to the new node and timed out.\n\nIf it is too small please notify me - I only have access to a UPnP router sporadicly. \n\nAnd btw: Also added proxy capability to libcoin (have a look in coinChain/Proxy.h for implementation details).\n\nCheers,\n\nMichael"
            }
        ],
        "thread_summary": {
            "title": "NATPMP and proxy support in libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1443
        }
    }
]