[
    {
        "title": "[bitcoin-dev] A possible solution for the block size limit: Detection and rejection of bloated blocks by full nodes.",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2015-07-01T02:52:16",
                "message_text_only": "A simple hack to achieve this would be phase shifting the transaction fees\nby one block. There may be other problems, but also potential\nbenefits, with that though.\nThis hack works because then a miner would orphan a block which didn't\nproperly reward them, which makes it very costly for even a miner to put in\na bunch of transactions for free. This phase can be adjusted to different\namounts, spread over multiple blocks, or even randomly selected at the time\nof mining from a pool of un-fee claimed blocks (although this would require\nsome seeding to create a pool of any size greater than 1).\n\nAgain, this is probably a bad idea and I haven't thought it through\ncompletely, but just tossing it out there.\n\nPs sorry if you're seeing this many times I think it bounced due to the\nnot-subscribed rule (sent from my other account)\nOn Wednesday, July 1, 2015, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> The problem with this approach is that you need 100% exact behaviour for\n> every node on the network in their decision to reject a particular block.\n> So we need a 100% mempool synchronization across all nodes - otherwise just\n> an attempted double spend could result in a fork in the network because\n> some nodes saw it and some didn't. And actually, if we had 100% mempool\n> synchronization, we wouldn't need a blockchain in the first place, because\n> we could just use \"first to enter mempool\" as validity criterion.\n>\n> On Wed, Jul 1, 2015 at 1:41 AM, Peter Grigor <peter at grigor.ws\n> <javascript:_e(%7B%7D,'cvml','peter at grigor.ws');>> wrote:\n>\n>> The block size debate centers around one concern it seems. To wit: if\n>> block size is increased malicious miners may publish unreasonably large\n>> \"bloated\" blocks. The way a miner would do this is to generate a plethora\n>> of private, non-propagated transactions and include these in the block they\n>> solve.\n>>\n>> It seems to me that these bloated blocks could easily be detected by\n>> other miners and full nodes: they will contain a very high percentage of\n>> transactions that aren't found in the nodes' own memory pools. This\n>> signature can be exploited to allow nodes to reject these bloated blocks.\n>> The key here is that any malicious miner that publishes a block that is\n>> bloated with his own transactions would contain a ridiculous number of\n>> transactions that *absolutely no other full node has in its mempool*.\n>>\n>> Simply put, a threshold would be set by nodes on the allowable number of\n>> non-mempool transactions allowed in a solved block (say, maybe, 50% -- I\n>> really don't know what it should be). If a block is published which\n>> contains more that this threshold of non-mempool transactions then it is\n>> rejected.\n>>\n>> If this idea works the block size limitation could be completely removed.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n\n-- \n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/58eeb253/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "A possible solution for the block size limit: Detection and rejection of bloated blocks by full nodes.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3345
        }
    },
    {
        "title": "[bitcoin-dev] Reaching consensus on policy to continually increase block size limit as hardware improves, and a few other critical issues",
        "thread_messages": [
            {
                "author": "Michael Naber",
                "date": "2015-07-01T07:15:15",
                "message_text_only": "This is great: Adam agrees that we should scale the block size limit\ndiscretionarily upward within the limits of technology, and continually so\nas hardware improves. Peter and others: What stands in the way of broader\nconsensus on this?\n\n\nWe also agree on a lot of other important things:\n-- block size is not a free variable\n-- there are trade-offs between node requirements and block size\n-- those trade-offs have impacts on decentralization\n-- it is important to keep decentralization strong\n-- computing technology is currently not easily capable of running a global\ntransaction network where every transaction is broadcast to every node\n-- we may need some solution (perhaps lightning / hub and spoke / other\nthings) that can help with this\n\nWe likely also agree that:\n-- whatever that solution may be, we want bitcoin to be the \"hub\" / core of\nit\n-- this hub needs to exhibit the characteristic of globally aware global\nconsensus, where every node knows about (awareness) and agrees on\n(consensus) every transaction\n-- Critically, the Bitcoin Core Goal: the goal of Bitcoin core is to build\nthe \"best\" globally aware globally consensus network, recognizing there are\ncomplex tradeoffs in doing this.\n\n\nThere are a few important things we still don't agree on though. Our\ndisagreement on these things is causing us to have trouble making progress\nmeeting the goal of Bitcoin Core. It is critical we address the following\npoints of disagreement. Please help get agreement on these issues below by\nsharing your thoughts:\n\n1) Some believe that fees and therefore hash-rate will be high by limiting\ncapacity, and that we need to limit capacity to have a \"healthy fee market\".\n\nThink of the airplane analogy: If some day technology exists to ship a\nhundred million people (transactions) on a plane (block) then do you really\nwant to fight to outlaw those planes? Airlines are regulated so they have\nto pay to screen each passenger to a minimum standard, so even if the plane\nhas unlimited capacity, they still have to pay to meet minimum security for\neach passenger.\n\nJust like we can set the block limit, so can we \"regulate the airline\nsecurity requirements\" and set a minimum fee size for the sake of security.\nIf technology allows running 100,000 transactions per second in 25 years,\nand we set the minimum fee size to one penny, then each block is worth a\nminimum of $600,000. Miners should be ok with that and so should everyone\nelse.\n\n\n2) Some believe that it is better for (a) network reliability and (b)\nvalidation of transaction integrity, to have every user run a \"full node\"\nin order to use Bitcoin Core.\n\nI don't agree with this. I'll break this into two pieces of network\nreliability and transaction integrity.\n\nNetwork Reliability\n\n\nImagine you're setting up an email server for a big company. You decide to\nset up a main server, and two fail-over servers. Somebody says that they're\nreally concerned about reliability and asks you to add another couple\nfail-over servers. So you agree. But at some point there's limited benefit\nto adding more servers: and there's real cost -- all those servers need to\nkeep in sync with one another, and they need to be maintained, etc. And\nthere's limited return: how likely is it really that all those servers are\ngoing to go down?\n\nBitcoin is obviously different from corporate email servers. In one sense,\nyou've got miners and volunteer nodes rather than centrally managed ones,\nso nodes are much more likely to go down. But at the end of the day, is our\nup-time really going to be that much better when you have a million nodes\nversus a few thousand?\n\nCloud storage copies your data a half dozen times to a few different data\ncenters. But they don't copy it a half a million times. At some point the\nadded redundancy doesn't matter for reliability. We just don't need\nmillions of nodes to participate in a broadcast network to ensure network\nreliability.\n\nTransaction Integrity\n\nThink of open source software: you trust it because you know it can be\naudited easily, but you probably don't take the time to audit yourself\nevery piece of open source software you use. And so it is with\nBitcoin: People need to be able to easily validate the blockchain, but they\ndon't need to be able to validate it every time they use it, and they\ncertainly don't need to validate it when using Bitcoin on their Apple\nwatches.\n\nIf I can lease a server in a data center for a few hours at fifty cents an\nhour to validate the block chain, then the total cost for me to\nindependently validate the blockchain is just a couple dollars. Compare\nthat to my cost to independently validate other parts of the system -- like\nthe source code! Where's the real cost here?\n\nIf the goal of decentralization is to ensure transaction integrity and\nnetwork reliability, then we just don't need lots of nodes or every user\nrunning a node to meet that goal. If the goal of decentralization is\nsomething else: what is it?\n\n3) Some believe that we should make Bitcoin Core to run as a high-memory\nserver-grade software rather than for people's desktops.\n\nI think this is a great idea.\n\nThe meaningful impact to the goals of decentralization by limiting which\nhardware nodes can run on will be minimal compared with the huge gains in\ncapacity. Why does increasing capacity of Bitcoin Core matter when we can\n\"increase capacity\" by moving to hub and spoke / lightning? Maybe we should\nask why does growing more apples matter if we can grow more oranges instead?\n\nHub and spoke and lightning are useful means of making lower cost\ntransactions, but they're not the same as Bitcoin Core. Stick to the goal:\nthe goal of Bitcoin core is to build the \"best\" globally aware globally\nconsensus network, recognizing there are complex tradeoffs in doing this.\n\nHub and spoke and lightning could be great when you want lower-cost fees\nand don't really care about global awareness. Poker chips are great when\nyou're in a casino. We don't talk about lightning networks to the guy who\ndesigns poker chips, and we shouldn't be talking about them to the guy who\nbuilds globally aware consensus networks either.\n\nDo people even want increased capacity when they can use hub and spoke /\nlightning? If you think they might be willing to pay $600,000 every ten\nminutes for it (see above) then yes. Increase capacity, and let the market\ndecide if that capacity gets used.\n\n\n\nOn Tue, Jun 30, 2015 at 3:54 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> Not that I'm arguing against scaling within tech limits - I agree we\n> can and should - but note block-size is not a free variable.  The\n> system is a balance of factors, interests and incentives.\n>\n> As Greg said here\n>\n> https://www.reddit.com/r/Bitcoin/comments/3b0593/to_fork_or_not_to_fork/cshphic?context=3\n> there are multiple things we should usefully do with increased\n> bandwidth:\n>\n> a) improve decentralisation and hence security/policy\n> neutrality/fungibility (which is quite weak right now by a number of\n> measures)\n> b) improve privacy (privacy features tend to consume bandwidth, eg see\n> the Confidential Transactions feature) or more incremental features.\n> c) increase throughput\n>\n> I think some of the within tech limits bandwidth should be\n> pre-allocated to decentralisation improvements given a) above.\n>\n> And I think that we should also see work to improve decentralisation\n> with better pooling protocols that people are working on, to remove\n> some of the artificial centralisation in the system.\n>\n> Secondly on the interests and incentives - miners also play an\n> important part of the ecosystem and have gone through some lean times,\n> they may not be overjoyed to hear a plan to just whack the block-size\n> up to 8MB.  While it's true (within some limits) that miners could\n> collectively keep blocks smaller, there is the ongoing reality that\n> someone else can take break ranks and take any fee however de minimis\n> fee if there is a huge excess of space relative to current demand and\n> drive fees to zero for a few years.  A major thing even preserving\n> fees is wallet defaults, which could be overridden(plus protocol\n> velocity/fee limits).\n>\n> I think solutions that see growth scale more smoothly - like Jeff\n> Garzik's and Greg Maxwell's and Gavin Andresen's (though Gavin's\n> starts with a step) are far less likely to create perverse unforeseen\n> side-effects.  Well we can foresee this particular effect, but the\n> market and game theory can surprise you so I think you generally want\n> the game-theory & market effects to operate within some more smoothly\n> changing caps, with some user or miner mutual control of the cap.\n>\n> So to be concrete here's some hypotheticals (unvalidated numbers):\n>\n> a) X MB cap with miner policy limits (simple, lasts a while)\n> b) starting at 1MB and growing to 2*X MB cap with 10%/year growth\n> limiter + policy limits\n> c) starting at 1MB and growing to 3*X MB cap with 15%/year growth\n> limiter + Jeff Garzik's miner vote.\n> d) starting at 1MB and growing to 4*X MB cap with 20%/year growth\n> limiter + Greg Maxwell's flexcap\n>\n> I think it would be good to see some tests of achievable network\n> bandwidth on a range of networks, but as an illustration say X is 2MB.\n>\n> Rationale being the weaker the signalling mechanism between users and\n> user demanded size (in most models communicated via miners), the more\n> risk something will go in an unforeseen direction and hence the lower\n> the cap and more conservative the growth curve.\n>\n> 15% growth limiter is not Nielsen's law by intent.  Akamai have data\n> on what they serve, and it's more like 15% per annum, but very\n> variable by country\n>\n> http://www.akamai.com/stateoftheinternet/soti-visualizations.html#stoi-graph\n> CISCO expect home DSL to double in 5 years\n> (\n> http://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/VNI_Hyperconnectivity_WP.html\n> ), which is about the same number.\n>\n> (Thanks to Rusty for data sources for 15% number).\n>\n> This also supports the claim I have made a few times here, that it is\n> not realistic to support massive growth without algorithmic\n> improvement from Lightning like or extension-block like opt-in\n> systems.  People who are proposing that we ramp blocksizes to create\n> big headroom are I think from what has been said over time, often\n> without advertising it clearly, actually assuming and being ok with\n> the idea that full nodes move into data-centers period and small\n> business/power user validation becomes a thing of the distant past.\n> Further the aggressive auto-growth risks seeing that trend continuing\n> into higher tier data-centers with negative implications for\n> decentralisation.  The odd proponent seems OK with even that too.\n>\n> Decentralisation is key to Bitcoin's security model, and it's\n> differentiating properties.  I think those aggressive growth numbers\n> stray into the zone of losing efficiency.  By which I mean in\n> scalability or privacy systems if you make a trade-off too far, it\n> becomes time to re-asses what you're doing.  For example at that level\n> of centralisation, alternative designs are more network efficient,\n> while achieving the same effective (weak) decentralisation.  In\n> Bitcoin I see this as a strong argument not to push things to that\n> extreme, the core functionality must remain for Lightning and other\n> scaling approaches to remain secure by using the Bitcoin as a secure\n> anchor.  If we heavily centralise and weaken the security of the main\n> Bitcoin chain, there remains nothing secure to build on.\n>\n> Therefore I think it's more appropriate for high scale to rely on\n> lightning, or a semi-centralised trade-offs being in the side-chain\n> model or similar, where the higher risk of centralisation is opt-in\n> and not exposed back (due to the security firewall) to the Bitcoin\n> network itself.\n>\n> People who would like to try the higher tier data-center and\n> throughput by high bandwidth use route should in my opinion run that\n> experiment as a layer 2 side-chain or analogous.  There are a few ways\n> to do that.  And it would be appropriate to my mind that we discuss\n> them here also.\n>\n> An experiment like that could run in parallel with lightning, maybe it\n> could be done faster, or offer different trade-offs, so could be an\n> interesting and useful thing to see work on.\n>\n> > On Tue, Jun 30, 2015 at 12:25 PM, Peter Todd <pete at petertodd.org> wrote:\n> >> Which of course raises another issue: if that was the plan, then all you\n> >> can do is double capacity, with no clear way to scaling beyond that.\n> >> Why bother?\n>\n> A secondary function can be a market signalling - market evidence\n> throughput can increase, and there is a technical process that is\n> effectively working on it.  While people may not all understand the\n> trade-offs and decentralisation work that should happen in parallel,\n> nor the Lightning protocol's expected properties - they can appreciate\n> perceived progress and an evidently functioning process.  Kind of a\n> weak rationale, from a purely technical perspective, but it may some\n> value, and is certainly less risky than a unilateral fork.\n>\n> As I recall Gavin has said things about this area before also\n> (demonstrate throughput progress to the market).\n>\n> Another factor that people have said, which I think I agree with\n> fairly much is that if we can chose something conservative, that there\n> is wide-spread support for, it can be safer to do it with moderate\n> lead time.  Then if there is an implied 3-6mo lead time we are maybe\n> projecting ahead a bit further on block-size utilisation.  Of course\n> the risk is we overshoot demand but there probably should be some\n> balance between that risk and the risk of doing a more rushed change\n> that requires system wide upgrade of all non-SPV software, where\n> stragglers risk losing money.\n>\n> As well as scaling block-size within tech limits, we should include a\n> commitment to improve decentralisation, and I think any proposal\n> should be reasonably well analysed in terms of bandwidth assumptions\n> and game-theory.  eg In IETF documents they have a security\n> considerations section, and sometimes a privacy section.  In BIPs\n> maybe we need a security, privacy and decentralisation/fungibility\n> section.\n>\n> Adam\n>\n> NB some new list participants may not be aware that miners are\n> imposing local policy limits eg at 750kB and that a 250kB policy\n> existed in the past and those limits saw utilisation and were\n> unilaterally increased unevenly.  I'm not sure if anyone has a clear\n> picture of what limits are imposed by hash-rate even today.  That's\n> why Pieter posed the question - are we already at the policy limit -\n> maybe the blocks we're seeing are closely tracking policy limits, if\n> someone mapped that and asked miners by hash-rate etc.\n>\n> On 30 June 2015 at 18:35, Michael Naber <mickeybob at gmail.com> wrote:\n> > Re: Why bother doubling capacity? So that we could have 2x more network\n> > participants of course.\n> >\n> > Re: No clear way to scaling beyond that: Computers are getting more\n> capable\n> > aren't they? We'll increase capacity along with hardware.\n> >\n> > It's a good thing to scale the network if technology permits it. How can\n> you\n> > argue with that?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/6d43b13a/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Reaching consensus on policy to continually increase block size limit as hardware improves, and a few other critical issues",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Naber"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 15440
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin governance",
        "thread_messages": [
            {
                "author": "NxtChg",
                "date": "2015-07-01T08:45:12",
                "message_text_only": "(sorry for the long post, I tried)\n\nI've been thinking about how we could build an effective Bitcoin governance, but couldn't come up with anything remotely plausible.\n\nIt seems we might go a different way, though, with Core and XT continue co-existing in parallel, mostly in a compatible state, out of the need that \"there can be only one\".\n\nBoth having the same technical protocol, but different people, structure, processes and political standing; serving as a kind of two-party system and keeping each other in check.\n\nTheir respective power will be determined by the number of Core vs XT nodes running and people/businesses on board. They will have to negotiate any significant change at the risk of yet another full fork.\n\nAnd occasionally the full forks will still happen and the minority will have to concede and change their protocol to match the winning side.\n\nCan there be any other way? Can you really control a decentralized system with a centralized governance, like Core Devs or TBF?\n\n----\n\nIn this view, what's happening is a step _towards_ decentralization, not away from it. It proves that Bitcoin is indeed a decentralized system and that minority cannot impose its will.\n\nFor the sides to agree now would actually be a bad thing, because that would mean kicking the governance problem down the road.\n\nAnd we _need_ to go through this painful split at least once. The block size issue is perfect: controversial enough to push the split, but not controversial enough so one side couldn't win.\n\n----\n\nIf this is where we're heading then both sides should probably start thinking of themselves as opposition parties, instead of whatever they think of themselves now.\n\nPeople and businesses ultimately decide and they need a way to cast a Yes/No vote on proposed changes. Hence the two-party system.\n\nIf the split in power is, say, 60/40 and the leading party introduces an unpopular change, it can quickly lose its advantage.\n\nWe already have the \"democratic party\" on the left with Gavin and Mike representing the wish of the majority and the \"conservative party\" on the right, who would prefer things to stay the way they are.\n\n----\n\nFinally, I propose to improve the voting mechanism of Bitcoin to serve this new reality better.\n\nUsing the upcoming fork as an opportunity, we could add something like 8-byte votes into blocks:\n\n* first 4 bytes: fork/party ID, like 'CORE' or 'XT'\n* second 4 bytes: proposition number\n\n(or at least add the ID somewhere so the parties wouldn't have to negotiate block version numbers). \n\n\nMiners are in the business of mining coins, so they are good \"sensors\" of where the economic majority will be.\n\nWe will have a representative democracy, with miners serving as 'hubs', collecting all the noise and chatter and casting it into a vote.\n\nThis is not perfect, but nothing ever is."
            },
            {
                "author": "Jeffrey Paul",
                "date": "2015-07-01T08:54:10",
                "message_text_only": "If people attempt to govern Bitcoin, Bitcoin falls apart.\n\nThat's why there is no voting and there are no unnecessary hard forks; Bitcoin operates on consensus.\n\nEngineering and research along these lines is folly, as any attempt to impose such concepts as \"voting\" will rightfully find itself with nothing to govern.\n\nIt is a common misconception that the core devs govern Bitcoin; indeed they are the core devs only because they do not try to govern. I urge you to review the history of the term \"unix\" for an instructive example of what happens in systems that do not depend on consensus. \n\nAnd now back to regularly scheduled development, I hope.\n\nBest,\n-jp\n\nPS: A personal request to the list: could we please limit ourselves to posting about the research and development of Bitcoin Core? Many of us must stay continually abreast of all progress on Bitcoin Core by reading all of -dev daily and subjecting everyone's email inboxes to hundreds of pet theories about governance and block size opinions without patches or simulations is simply abusing the list membership to soapbox. I encourage you to make blog posts instead and post them to /r/Bitcoin or suchlike versus taking up attention span on an *engineering* mailing list.\n\n-- \nJeffrey Paul   +1 (312) 361-0355\n5539 AD00 DE4C 42F3 AFE1 1575 0524 43F4 DF2A 55C2\n\n> On 01.07.2015, at 10:45, NxtChg <nxtchg at hush.com> wrote:\n> \n> (sorry for the long post, I tried)\n> \n> I've been thinking about how we could build an effective Bitcoin governance, but couldn't come up with anything remotely plausible.\n> \n> It seems we might go a different way, though, with Core and XT continue co-existing in parallel, mostly in a compatible state, out of the need that \"there can be only one\".\n> \n> Both having the same technical protocol, but different people, structure, processes and political standing; serving as a kind of two-party system and keeping each other in check.\n> \n> Their respective power will be determined by the number of Core vs XT nodes running and people/businesses on board. They will have to negotiate any significant change at the risk of yet another full fork.\n> \n> And occasionally the full forks will still happen and the minority will have to concede and change their protocol to match the winning side.\n> \n> Can there be any other way? Can you really control a decentralized system with a centralized governance, like Core Devs or TBF?\n> \n> ----\n> \n> In this view, what's happening is a step _towards_ decentralization, not away from it. It proves that Bitcoin is indeed a decentralized system and that minority cannot impose its will.\n> \n> For the sides to agree now would actually be a bad thing, because that would mean kicking the governance problem down the road.\n> \n> And we _need_ to go through this painful split at least once. The block size issue is perfect: controversial enough to push the split, but not controversial enough so one side couldn't win.\n> \n> ----\n> \n> If this is where we're heading then both sides should probably start thinking of themselves as opposition parties, instead of whatever they think of themselves now.\n> \n> People and businesses ultimately decide and they need a way to cast a Yes/No vote on proposed changes. Hence the two-party system.\n> \n> If the split in power is, say, 60/40 and the leading party introduces an unpopular change, it can quickly lose its advantage.\n> \n> We already have the \"democratic party\" on the left with Gavin and Mike representing the wish of the majority and the \"conservative party\" on the right, who would prefer things to stay the way they are.\n> \n> ----\n> \n> Finally, I propose to improve the voting mechanism of Bitcoin to serve this new reality better.\n> \n> Using the upcoming fork as an opportunity, we could add something like 8-byte votes into blocks:\n> \n> * first 4 bytes: fork/party ID, like 'CORE' or 'XT'\n> * second 4 bytes: proposition number\n> \n> (or at least add the ID somewhere so the parties wouldn't have to negotiate block version numbers). \n> \n> \n> Miners are in the business of mining coins, so they are good \"sensors\" of where the economic majority will be.\n> \n> We will have a representative democracy, with miners serving as 'hubs', collecting all the noise and chatter and casting it into a vote.\n> \n> This is not perfect, but nothing ever is.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-01T12:20:27",
                "message_text_only": ">It is a common misconception that the core devs govern Bitcoin;\n\nThey set standards rather than govern.  It is an important standard, but \nit is a voluntary standard.  How important that standard in terms of \ndefining the consensus rules is subject to speculation and the amount of \ninfluence depends on the specific circumstances. Maybe some wording can \nbe changed to reflect that it is a voluntary standard.\n\nRuss"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-01T17:28:30",
                "message_text_only": "On 07/01/2015 03:54 AM, Jeffrey Paul wrote:\n> could we please limit ourselves to posting about the research and development of Bitcoin Core?\n\nIf that's the purpose of this list, then it is misleadingly named.\n\nIf development of Bitcoin Core, the application, is to be considered\nindependent from development of Bitcoin, the protocol, then Bitcoin Core\ndevelopment needs its own list.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/d98bb8f5/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/d98bb8f5/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin governance",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Milly Bitcoin",
                "Jeffrey Paul",
                "NxtChg",
                "Justus Ranvier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8704
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin core 0.11.0 release candidate 3 available",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-01T11:42:59",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello,\n\nI've just uploaded Bitcoin Core 0.11.0rc3 executables to:\n\nhttps://bitcoin.org/bin/bitcoin-core-0.11.0/test/\n\nThe source code can be found in the source tarball or in git under the tag 'v0.11.0rc3'\n\nPreliminary release notes can be found here:\n\nhttps://github.com/bitcoin/bitcoin/blob/0.11/doc/release-notes.md\n\nChanges since rc2:\n+- #6319 `3f8fcc9` doc: update mailing list address\n+- #6303 `b711599` gitian: add a gitian-win-signer descriptor\n+- #6246 `8ea6d37` Fix build on FreeBSD\n+- #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n+- #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n+- #6333 `41bbc85` Hardcoded seeds update June 2015\n+- #6354 `bdf0d94` Gitian windows signing normalization\n\nThanks to everyone that participated in development, translation or in the gitian build process,\n\nWladimir\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJVk9IfAAoJEHSBCwEjRsmmm84H/AoBHiKKEIuT/86+VSs+1ICY\nsUTXF5Q0qeAELSKO2auq1wOAA62UuhUd46S+lAWe3cL3G2UJzFt0WWXq2fOUjKur\n27HTutmY9Oy/7fGLGT0CNCuXJ8bKGoUzIx4nhNEMvaucangaKpHtSCPAzqkEY4mW\ncCuAh3pHR3xgfA5EYfBxq2jGUEC5iUzmsvEL4LXoBKt60f9AI/H08IFSa9uyJZAS\nf5HyVtYF5/OZxD1GUyAfSfeSteBRBkoqRNww0LE6b0PQE9ZHLZzsUxngsOkPKMQU\nOJGgDMkgO/7c6gfpHCBLdWkSQEJuRfH/EeVnM5poOjwrGiWewc0O/+svT2WdfRo=\n=rESk\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin core 0.11.0 release candidate 3 available",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1391
        }
    },
    {
        "title": "[bitcoin-dev] RFC: HD Bitmessage address derivation based on BIP-43",
        "thread_messages": [
            {
                "author": "Kristov Atlas",
                "date": "2015-07-01T17:07:23",
                "message_text_only": "Hi Justus,\n\nWhat are the potential applications for this BIP?\n\n-Kr\nOn Jun 30, 2015 1:53 PM, \"Justus Ranvier\" <justus.ranvier at monetas.net>\nwrote:\n\n> Monetas has developed a Bitmessage address derivation method from an\n> HD seed based on BIP-43.\n>\n>\n> https://github.com/monetas/bips/blob/bitmessage/bip-bm01.mediawiki\n>\n>\n> We're proposing this as a BIP per the BIP-43 recommendation in order\n> to reserve a purpose code.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/8418af96/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-02T15:45:05",
                "message_text_only": "The primary purpose is to allow Bitmessage users to benefit from\neternal key backups by generating their addresses from a seed.\n\n\nIn addition, they can use the same seed for a Bitcoin wallet and a\nBitmessage client.\n\n\nThis method also enables future use cases where senders calculate\nBitmessage addresses based on a recipient's extended public key and\nsome other index value.\n\nOn Wed, Jul 1, 2015 at 12:07 PM, Kristov Atlas\n<kristovatlas.lists at gmail.com> wrote:\n> Hi Justus,\n>\n> What are the potential applications for this BIP?\n>\n> -Kr\n>\n> On Jun 30, 2015 1:53 PM, \"Justus Ranvier\" <justus.ranvier at monetas.net>\n> wrote:\n>>\n>> Monetas has developed a Bitmessage address derivation method from an\n>> HD seed based on BIP-43.\n>>\n>>\n>> https://github.com/monetas/bips/blob/bitmessage/bip-bm01.mediawiki\n>>\n>>\n>> We're proposing this as a BIP per the BIP-43 recommendation in order\n>> to reserve a purpose code.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "RFC: HD Bitmessage address derivation based on BIP-43",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Kristov Atlas",
                "Justus Ranvier"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1895
        }
    },
    {
        "title": "[bitcoin-dev] BIP Process and Votes",
        "thread_messages": [
            {
                "author": "odinn",
                "date": "2015-07-01T22:34:01",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nPossibly relevant to this discussion (though old)\n\nhttps://gist.github.com/gavinandresen/2355445 (last changed in 2012 I\nthink?)\n\nand\n\nhttps://bitcoin.stackexchange.com/questions/30817/what-is-a-soft-fork\n(which cites gavin's gist shown above)\n\n\n\n\n\nOn 06/25/2015 05:42 PM, Milly Bitcoin wrote:\n> That description makes sense.  It also makes sense to separate out\n> the hard fork from the soft fork process.   Right now some people\n> want to use the soft fork procedure for a hard fork simply because\n> there is no other way to do it.\n> \n> I am under the impression that most users expect\n> changes/improvements that would require a hard fork so I think some\n> kind of process needs to be developed.  Taking the responsibility\n> off the shoulder of the core maintainer also makes sense.  The hard\n> fork issue is too much of a distraction for people trying to\n> maintain the nuts and bolts of the underlying system.\n> \n> I saw a suggestion that regularly scheduled hard forks should be \n> planned.  That seems to make sense so you would have some sort of \n> schedule where you would have cut off dates for hard-fork BIP \n> submissions.  That way you avoid the debates over whether there\n> should be hard forks to what should be contained within the hard\n> fork (if needed).  It makes sense to follow the BIP process as\n> close as possible.  Possibly adding another step after \"Dev\n> acceptance\" to include input from others such as\n> merchants/exchanges/miners/users.  It will only be an approximation\n> of \"decentralization\" and the process won't be perfect but if you\n> want to move forward then you need some way to do it.\n> \n> Russ\n> \n> \n> On 6/25/2015 4:05 PM, Tier Nolan wrote:\n>> On Thu, Jun 25, 2015 at 2:50 AM, Mark Friedenbach \n>> <mark at friedenbach.org <mailto:mark at friedenbach.org>> wrote:\n>> \n>> I'm sorry but this is absolutely not the case, Milly. The reason \n>> that people get defensive is that we have a carefully\n>> constructed process that does work (thank you very much!) and is\n>> well documented.\n>> \n>> \n>> There is no process for handling hard forks, which aren't bug\n>> fixes.\n>> \n>> Soft forks have a defined process of something like\n>> \n>> - BIP proposal + discussion - Proposed code - Dev acceptance -\n>> Release - Miner vote/acceptance\n>> \n>> The devs have a weak veto.  If they refuse to move forward with \n>> changes, miners could perform a soft fork on their own.  They\n>> don't want to do that, as it would be controversial and the devs\n>> know the software better.\n>> \n>> The miner veto is stronger (for soft forks) but not absolute.\n>> The devs could checkpoint/blacklist a chain if miners implemented\n>> a fork that wasn't acceptable (assuming the community backed\n>> them).\n>> \n>> When ASICs arrived, it was pointed out by some that the devs\n>> could hit back if ASICs weren't made publicly available.  If they\n>> slightly tweaked the hashing algorithm, then current generation\n>> of ASICs would be useless.   The potential threat may have acted\n>> as a disincentive for ASIC manufacturers to use the ASICs\n>> themselves.\n>> \n>> Moving forward with agreement between all involved is the\n>> recommended and desirable approach.\n>> \n>> Consensus between all parties is the goal but isn't absolutely \n>> required.  This escape valve is partly what makes consensus work.\n>> If you dig your heels in, then the other side can bypass you, but\n>> they have an incentive to try to convince you to compromise\n>> first.  The outcome is better if a middle ground can be found.\n>> \n>> Hard forks are different.  The \"checks and balances\" of weak\n>> vetoes are not present.  This means that things can devolve from\n>> consensus to mutual veto.  Consensus ceases to be a goal and\n>> becomes a requirement.\n>> \n>> This is partly a reflection of the nature of hard forks.\n>> Everyone needs to upgrade.  On the other hand, if most of the\n>> various groups upgrade, then users of the legacy software would\n>> have to upgrade or get left behind.  If 5% of the users decided\n>> not to upgrade, should they be allowed to demand that nobody else\n>> does?\n>> \n>> There is clearly some kind of threshold that is reasonable.\n>> \n>> The fundamental problem is that there isn't agreement on what\n>> the block size is.  Is it equal in status to the 21 million BTC\n>> limit?\n>> \n>> If Satoshi had said that 1MB was part of the definition of\n>> Bitcoin, then I think people would accept it to the same extent\n>> as they accept the 21 million coin limit.  It might cause people\n>> to leave the coin though.\n>> \n>> It was intended to be temporary, but people have realized that\n>> it might be a good idea to keep it.  In effect both sides could\n>> argue that they should be considered the status quo.\n>> \n>> I wonder if a coin toss would be acceptable :).  \"Come to an\n>> agreement or we decide by coin toss\"\n>> \n>> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVlGrZAAoJEGxwq/inSG8C2wYH/3VZgzpbJrgprqNMDwWsMoxx\nDFbgjQfOrHbVvAQebSlcH1FXPnzVZZSbxMlQAbDXr4lpREvMPQiomixCmkTTepob\nzKhJu/bGYgLVqcXSDYuJTwCKgHfzTj02Q8D8ViFZdsPOHLIuhcAAq+KgioUHH+Ps\nv2kWA48ePTHVxqNd79S2CKjk5Gyo99YIMAjbQOuC6DbW/y1hNmQP7iQPn6UUe4pY\nqyLLDa6ccKvJslq3chXGK/alhGHZ5lyEYZY43qiL9cBEgqEn6kHC5gveqQxvXMvj\nrOoZbAKCAc9GdlhUplRt5MhF35FTFvbaBTAq07/95Xo4C8DIhmXesHgmPtc1OqI=\n=n7Pa\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BIP Process and Votes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5882
        }
    },
    {
        "title": "[bitcoin-dev] Draft BIP : fixed-schedule block size increase",
        "thread_messages": [
            {
                "author": "odinn",
                "date": "2015-07-01T22:49:12",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n(My replies below)\n\nOn 06/26/2015 06:47 AM, Tier Nolan wrote:\n> On Thu, Jun 25, 2015 at 3:07 PM, Adam Back <adam at cypherspace.org \n> <mailto:adam at cypherspace.org>> wrote:\n> \n> The hard-cap serves the purpose of a safety limit in case our \n> understanding about the economics, incentives or game-theory is\n> wrong worst case.\n> \n> \n> True.\n\nYep.\n\n> \n> BIP 100 and 101 could be combined.  Would that increase consensus?\n\nPossibly ~ In my past message(s), I've suggested that Jeff's BIP 100\nis a better alternative to Gavin's proposal(s), but that I didn't\nthink that this should be taken to mean that I am saying one thing is\n\"superior\" to Gavin's work, rather, I emphasized that Gavin work with\nJeff and Adam.\n\nAt least, at this stage the things are in a BIP process.\n\nIf the BIP 100 and BIP 101 would be combined, what would that look\nlike on paper?\n\n> \n> - Miner vote threshold reached - Wait notice period or until\n> earliest start time - Block size default target set to 1 MB - Soft\n> limit set to 1MB - Hard limit set to 8MB + double every 2 years -\n> Miner vote to decide soft limit (lowest size ignoring bottom 20%\n> but 1MB minimum)\n> \n> Block size updates could be aligned with the difficulty setting\n> and based on the last 2016 blocks.\n> \n> Miners could leave the 1MB limit in place initially.  The vote is\n> to get the option to increase the block size.\n> \n> Legacy clients would remain in the network until >80% of miners\n> vote to raise the limit and a miner produces a >1MB block.\n> \n> If the growth rate over-estimates hardware improvements, the devs\n> could add a limit into the core client.  If they give notice and\n> enough users update, then miners would have to accept it.\n> \n> The block size becomes min(miner's vote, core devs).  Even if 4\n> years notice is given, blocks would only be 4X optimal.\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVlG5oAAoJEGxwq/inSG8C0r4H/0eklB9GxgHdl4LK7UoLeYYb\nhlCiIJZ1+sRhTRIHrBtZO+nb2Uy3jLdqO9eOL4z9OXk3TCRBFwSdWrwsZXbzy3tC\n5TmYlHvLSpfjiUxpP9JcO5E2VwFvB80pKkjPuUhwFVngh0HHsTA1IinUt52ZW1QP\nwTdgKFHw3QL9zcfEXljVa3Ih9ssqrl5Eoab8vE2yr3p3QHR7caRLY1gFyKKIRxVH\nYQangx6D33JcxyAcDNhYqavyt02lHxscqyZo6I4XUvE/aZVmSVTlm2zg7xdR7aCZ\n0PlDwzpMD6Zk2QO/5qPPPos/5VETT0ompFK62go/hY2uB4cm+yZw3FFxR+Kknog=\n=rtTH\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Draft BIP : fixed-schedule block size increase",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2691
        }
    },
    {
        "title": "[bitcoin-dev] BIP 68 Questions",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-07-02T02:38:58",
                "message_text_only": "Hi Mark,\n\n        It looks like the code in BIP 68 compares the input's nSequence\nagainst the transaction's nLockTime:\n\n        if ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD)\n            nMinHeight = std::max(nMinHeight, (int)tx.nLockTime);\n        else\n            nMinTime = std::max(nMinTime, (int64_t)tx.nLockTime);\n    \n        if (nMinHeight >= nBlockHeight)\n            return nMinHeight;\n        if (nMinTime >= nBlockTime)\n            return nMinTime;\n            \nSo if transaction B spends the output of transaction A:\n\n1.  If A is in the blockchain already, you don't need a relative\n    locktime since you know A's time.\n2.  If it isn't, you can't create B since you don't know what\n    value to set nLockTime to.\n\nHow was this supposed to work?\n\nThanks,\nRusty."
            },
            {
                "author": "Rusty Russell",
                "date": "2015-07-03T01:19:16",
                "message_text_only": "Rusty Russell <rusty at rustcorp.com.au> writes:\n> Hi Mark,\n>\n>         It looks like the code in BIP 68 compares the input's nSequence\n> against the transaction's nLockTime:\n\nNo, forget this.  I misread the code.  Mark ELI5'd to me offlist, thanks!\n\nFWIW, the code works :)\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "BIP 68 Questions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1065
        }
    },
    {
        "title": "[bitcoin-dev] Defining a min spec",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-02T04:04:19",
                "message_text_only": "Hi folks,\n\nI\u2019m a game developer. I write time critical code for a living and have to deal with memory, CPU, GPU and I/O budgets on a daily basis. These budgets are based on what we call a minimum specification (of hardware); min spec for short. In most cases the min spec is based on entry model machines that are available during launch, and will give the user an enjoyable experience when playing our games. Obviously, we can turn on a number of bells and whistles for people with faster machines, but that\u2019s not the point of this mail.\n\nThe point is, can we define a min spec for Bitcoin Core? The number one reason for this is: if you know how your changes affect your available budgets, then the risk of breaking something due to capacity problems is reduced to practically zero.\n\nOne way of doing so is to work backwards from what we have right now: Block size (network / disk I/O), SigOps/block (CPU), UTXO size (memory), etc. Then there\u2019s Pieter\u2019s analysis of network bottlenecks and how it affects orphan rates that could be used to set some form of cap on what transfer time + verification time should be to keep the orphan rate at an acceptable level.\n\nSo taking all of the above (and more) into account, what configuration would be the bare minimum to comfortably run Bitcoin Core at maximum load and can it be reasonably expected to still be out there in the field running Bitcoin Core? Also, can the parameters that were used to determine this min spec be codified in some way so that they can later be used if Bitcoin Core is optimized (or extended with new functionality) and see how it affects the min spec? Basically, with any reasonably big change, one of the first questions could be: \u201cHow does this change affect min spec?\"\n\nFor example, currently OpenSSL is used to verify the signatures in the transactions. The new secp256k1 implementation is several times faster than (depending on CPU architecture, I\u2019m sure) OpenSSL\u2019s implementation. So it would result in faster verification time. This can then result in the following things; either network I/O and CPU requirements are adjusted downward in the min spec (you can run the new Bitcoin Core on a cheaper configuration), or other parameters can be adjusted upwards (number of SigOps / transaction, block size?), through proper rollout obviously. Since we know how min spec is affected by these changes, they should be non-controversial by default. Nobody running min spec is going to be affected by it, etc.\n\nEvery change that has a positive effect on min spec (do more on the same hardware) basically pushes the need to start following any of the curve laws (Nielsen, Moore) forward. No need for miners / node operators to upgrade.\n\nOnce we hit what we call SOL (Speed Of Light, the fastest something can go on a specific platform) it\u2019s time to start looking at periodically adjusting min spec upwards, or by that time maybe it\u2019s possible to use conservative plots of the curve laws as a basis.\n\nLastly, a benchmark test could be developed that can tell everyone running Bitcoin Core how their setup compares to the min spec and how long they can expect to run on this setup.\n\nWhat do you guys think?\n\n\njp\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/172ef784/attachment.sig>"
            },
            {
                "author": "Henning Kopp",
                "date": "2015-07-02T07:18:14",
                "message_text_only": "Hi Jean-Paul,\n\nthat's a very interesting point of view and I have never thought about\nit this way, since I have a totally different background.\n\nHow would you go on about defining a min spec? Is this done by testing\nthe software on different hardware configurations or are you looking\nat the requirements a priori?\n\nBest regards\nHenning\n\n\nOn Wed, Jul 01, 2015 at 09:04:19PM -0700, Jean-Paul Kogelman wrote:\n> Hi folks,\n> \n> I\u2019m a game developer. I write time critical code for a living and have to deal with memory, CPU, GPU and I/O budgets on a daily basis. These budgets are based on what we call a minimum specification (of hardware); min spec for short. In most cases the min spec is based on entry model machines that are available during launch, and will give the user an enjoyable experience when playing our games. Obviously, we can turn on a number of bells and whistles for people with faster machines, but that\u2019s not the point of this mail.\n> \n> The point is, can we define a min spec for Bitcoin Core? The number one reason for this is: if you know how your changes affect your available budgets, then the risk of breaking something due to capacity problems is reduced to practically zero.\n> \n> One way of doing so is to work backwards from what we have right now: Block size (network / disk I/O), SigOps/block (CPU), UTXO size (memory), etc. Then there\u2019s Pieter\u2019s analysis of network bottlenecks and how it affects orphan rates that could be used to set some form of cap on what transfer time + verification time should be to keep the orphan rate at an acceptable level.\n> \n> So taking all of the above (and more) into account, what configuration would be the bare minimum to comfortably run Bitcoin Core at maximum load and can it be reasonably expected to still be out there in the field running Bitcoin Core? Also, can the parameters that were used to determine this min spec be codified in some way so that they can later be used if Bitcoin Core is optimized (or extended with new functionality) and see how it affects the min spec? Basically, with any reasonably big change, one of the first questions could be: \u201cHow does this change affect min spec?\"\n> \n> For example, currently OpenSSL is used to verify the signatures in the transactions. The new secp256k1 implementation is several times faster than (depending on CPU architecture, I\u2019m sure) OpenSSL\u2019s implementation. So it would result in faster verification time. This can then result in the following things; either network I/O and CPU requirements are adjusted downward in the min spec (you can run the new Bitcoin Core on a cheaper configuration), or other parameters can be adjusted upwards (number of SigOps / transaction, block size?), through proper rollout obviously. Since we know how min spec is affected by these changes, they should be non-controversial by default. Nobody running min spec is going to be affected by it, etc.\n> \n> Every change that has a positive effect on min spec (do more on the same hardware) basically pushes the need to start following any of the curve laws (Nielsen, Moore) forward. No need for miners / node operators to upgrade.\n> \n> Once we hit what we call SOL (Speed Of Light, the fastest something can go on a specific platform) it\u2019s time to start looking at periodically adjusting min spec upwards, or by that time maybe it\u2019s possible to use conservative plots of the curve laws as a basis.\n> \n> Lastly, a benchmark test could be developed that can tell everyone running Bitcoin Core how their setup compares to the min spec and how long they can expect to run on this setup.\n> \n> What do you guys think?\n> \n> \n> jp\n\n\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-- \nHenning Kopp\nInstitute of Distributed Systems\nUlm University, Germany\n\nOffice: O27 - 3402\nPhone: +49 731 50-24138\nWeb: http://www.uni-ulm.de/in/vs/~kopp"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-02T08:33:08",
                "message_text_only": "In the case of Bitcoin Core, for a starting point, you basically have to work backwards from what we have right now. We know some of the bounds already. Block size already tells you a lot about your bandwidth requirements, and Pieter\u2019s simulations gives you even more information when you take orphan rates into account. There\u2019s also a hard cap on the number of SigOps if I recall correctly, so that\u2019s probably a good starting point for a MIPS metric, etc.\n\nMemory is probably the hardest to pin down since some memory structures like (from what I understand, correct me if I\u2019m wrong) the UTXO database live fully in memory and are basically unbounded. Perhaps this can somehow be capped at a certain size and move all the really old UTXO\u2019s that are unlikely to move to disk and just take the CPU / disk hit in the unlikely event that they are referenced by a new block. Has the address database been capped yet? Mempool? I realize that it\u2019s probably debatable whether or not this behaviour should be independent of available memory since any bugs here could affect consensus (especially the UTXO db).\n\nUltimately, what comes out of it is a list of numbers. A Mbit network I/O, B MIPS, C MB memory, D Disk space, etc. At that point you can debate whether or not such a machine can be considered an entrypoint bitcoin full node. You round up the numbers that are not really available anymore in off the shelf hardware (like disk space) and you round down the numbers that seem too high. For all we know we\u2019re already over budget on some of the metrics that we decide to track as min spec. Network I/O for example. At that point you can start focussed research into bringing Bitcoin Core back into budget on those metrics. Then the discussion moves from \u201cit\u2019s probably too high\u201d to \u201cwe\u2019re X% over budget\u201d.\n\nThe most valuable thing that could come out of this is to get some kind of formulation how all the different levers in Bitcoin Core affect the min spec and ideally have a benchmark tool. For example, we could settle on a min spec that would exclude the Raspberry Pi 1 on MIPS, but when secp256k1 is enabled for validation, the MIPS requirement could drop significantly, allowing us to adjust the min spec downward to include the Raspberry Pi 1 again (again, just an example).\n\nIdeally some people would have the actual min spec machine built and running. The cost of that shouldn\u2019t be too high (it\u2019s the min spec after all) and I\u2019m sure people would be happy to chip in a couple bits for this.\n\nRemember, the min spec should be able to handle Bitcoin Core running under full load; that\u2019s maxed out blocks with maxed out SigOps, etc.\n\n\njp\n\n\n> On Jul 2, 2015, at 12:18 AM, Henning Kopp <henning.kopp at uni-ulm.de> wrote:\n> \n> Hi Jean-Paul,\n> \n> that's a very interesting point of view and I have never thought about\n> it this way, since I have a totally different background.\n> \n> How would you go on about defining a min spec? Is this done by testing\n> the software on different hardware configurations or are you looking\n> at the requirements a priori?\n> \n> Best regards\n> Henning\n> \n> \n> On Wed, Jul 01, 2015 at 09:04:19PM -0700, Jean-Paul Kogelman wrote:\n>> Hi folks,\n>> \n>> I\u2019m a game developer. I write time critical code for a living and have to deal with memory, CPU, GPU and I/O budgets on a daily basis. These budgets are based on what we call a minimum specification (of hardware); min spec for short. In most cases the min spec is based on entry model machines that are available during launch, and will give the user an enjoyable experience when playing our games. Obviously, we can turn on a number of bells and whistles for people with faster machines, but that\u2019s not the point of this mail.\n>> \n>> The point is, can we define a min spec for Bitcoin Core? The number one reason for this is: if you know how your changes affect your available budgets, then the risk of breaking something due to capacity problems is reduced to practically zero.\n>> \n>> One way of doing so is to work backwards from what we have right now: Block size (network / disk I/O), SigOps/block (CPU), UTXO size (memory), etc. Then there\u2019s Pieter\u2019s analysis of network bottlenecks and how it affects orphan rates that could be used to set some form of cap on what transfer time + verification time should be to keep the orphan rate at an acceptable level.\n>> \n>> So taking all of the above (and more) into account, what configuration would be the bare minimum to comfortably run Bitcoin Core at maximum load and can it be reasonably expected to still be out there in the field running Bitcoin Core? Also, can the parameters that were used to determine this min spec be codified in some way so that they can later be used if Bitcoin Core is optimized (or extended with new functionality) and see how it affects the min spec? Basically, with any reasonably big change, one of the first questions could be: \u201cHow does this change affect min spec?\"\n>> \n>> For example, currently OpenSSL is used to verify the signatures in the transactions. The new secp256k1 implementation is several times faster than (depending on CPU architecture, I\u2019m sure) OpenSSL\u2019s implementation. So it would result in faster verification time. This can then result in the following things; either network I/O and CPU requirements are adjusted downward in the min spec (you can run the new Bitcoin Core on a cheaper configuration), or other parameters can be adjusted upwards (number of SigOps / transaction, block size?), through proper rollout obviously. Since we know how min spec is affected by these changes, they should be non-controversial by default. Nobody running min spec is going to be affected by it, etc.\n>> \n>> Every change that has a positive effect on min spec (do more on the same hardware) basically pushes the need to start following any of the curve laws (Nielsen, Moore) forward. No need for miners / node operators to upgrade.\n>> \n>> Once we hit what we call SOL (Speed Of Light, the fastest something can go on a specific platform) it\u2019s time to start looking at periodically adjusting min spec upwards, or by that time maybe it\u2019s possible to use conservative plots of the curve laws as a basis.\n>> \n>> Lastly, a benchmark test could be developed that can tell everyone running Bitcoin Core how their setup compares to the min spec and how long they can expect to run on this setup.\n>> \n>> What do you guys think?\n>> \n>> \n>> jp\n> \n> \n> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> --\n> Henning Kopp\n> Institute of Distributed Systems\n> Ulm University, Germany\n> \n> Office: O27 - 3402\n> Phone: +49 731 50-24138\n> Web: http://www.uni-ulm.de/in/vs/~kopp\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/25b86f6a/attachment.sig>"
            },
            {
                "author": "Mistr Bigs",
                "date": "2015-07-02T12:33:39",
                "message_text_only": "I'm an end user running a full node on an aging laptop.\nI think this is a great suggestion! I'd love to know what system\nrequirements are needed for running Bitcoin Core.\n\nOn Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com>\nwrote:\n\n> I\u2019m a game developer. I write time critical code for a living and have to\n> deal with memory, CPU, GPU and I/O budgets on a daily basis. These budgets\n> are based on what we call a minimum specification (of hardware); min spec\n> for short. In most cases the min spec is based on entry model machines that\n> are available during launch, and will give the user an enjoyable experience\n> when playing our games. Obviously, we can turn on a number of bells and\n> whistles for people with faster machines, but that\u2019s not the point of this\n> mail.\n>\n> The point is, can we define a min spec for Bitcoin Core? The number one\n> reason for this is: if you know how your changes affect your available\n> budgets, then the risk of breaking something due to capacity problems is\n> reduced to practically zero.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/605b7e8b/attachment.html>"
            },
            {
                "author": "Owen Gunden",
                "date": "2015-07-02T14:52:45",
                "message_text_only": "I'm also a user who runs a full node, and I also like this idea. I think \nGavin has done some back-of-the-envelope calculations around this stuff, \nbut nothing so clearly defined as what you propose.\n\nOn 07/02/2015 08:33 AM, Mistr Bigs wrote:\n> I'm an end user running a full node on an aging laptop.\n> I think this is a great suggestion! I'd love to know what system\n> requirements are needed for running Bitcoin Core.\n>\n> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>> wrote:\n>\n>     I\u2019m a game developer. I write time critical code for a living and\n>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>     These budgets are based on what we call a minimum specification (of\n>     hardware); min spec for short. In most cases the min spec is based\n>     on entry model machines that are available during launch, and will\n>     give the user an enjoyable experience when playing our games.\n>     Obviously, we can turn on a number of bells and whistles for people\n>     with faster machines, but that\u2019s not the point of this mail.\n>\n>     The point is, can we define a min spec for Bitcoin Core? The number\n>     one reason for this is: if you know how your changes affect your\n>     available budgets, then the risk of breaking something due to\n>     capacity problems is reduced to practically zero.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-03T03:13:14",
                "message_text_only": "Might I suggest that the min-spec, if developed, target the RISC-V Rocket\narchitecture (running on FPGA, I suppose) as a reference point for\nperformance? This may be much lower performance than desirable, however, it\nmeans that we don't lock people into using large-vendor chipsets which have\nunknown, or known to be bad, security properties such as Intel AMT.\n\nIn general, targeting open hardware seems to me to be more critical than\nperformance metrics for the long term health of Bitcoin, however,\nperformance is still important.\n\nDoes anyone know how the RISC-V FPGA performance stacks up to, say, a\nRaspberry Pi?\n\nOn Thu, Jul 2, 2015 at 10:52 PM, Owen Gunden <ogunden at phauna.org> wrote:\n\n> I'm also a user who runs a full node, and I also like this idea. I think\n> Gavin has done some back-of-the-envelope calculations around this stuff,\n> but nothing so clearly defined as what you propose.\n>\n> On 07/02/2015 08:33 AM, Mistr Bigs wrote:\n>\n>> I'm an end user running a full node on an aging laptop.\n>> I think this is a great suggestion! I'd love to know what system\n>> requirements are needed for running Bitcoin Core.\n>>\n>> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n>> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>> wrote:\n>>\n>>     I\u2019m a game developer. I write time critical code for a living and\n>>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>>     These budgets are based on what we call a minimum specification (of\n>>     hardware); min spec for short. In most cases the min spec is based\n>>     on entry model machines that are available during launch, and will\n>>     give the user an enjoyable experience when playing our games.\n>>     Obviously, we can turn on a number of bells and whistles for people\n>>     with faster machines, but that\u2019s not the point of this mail.\n>>\n>>     The point is, can we define a min spec for Bitcoin Core? The number\n>>     one reason for this is: if you know how your changes affect your\n>>     available budgets, then the risk of breaking something due to\n>>     capacity problems is reduced to practically zero.\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>  _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/881fb610/attachment-0001.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-03T03:25:03",
                "message_text_only": "If the freedom to pick architecture exists, Moxie is a nice, compact, easy\nto audit alternative:\n     http://moxielogic.org/blog/pages/architecture.html\n     https://github.com/jgarzik/moxiebox\n\nScaling can occur at the core level, rather than hyper-pipelining, keeping\nthe architecture itself nice and clean and simple.\n\n\n\nOn Thu, Jul 2, 2015 at 11:13 PM, Jeremy Rubin <\njeremy.l.rubin.travel at gmail.com> wrote:\n\n> Might I suggest that the min-spec, if developed, target the RISC-V Rocket\n> architecture (running on FPGA, I suppose) as a reference point for\n> performance? This may be much lower performance than desirable, however, it\n> means that we don't lock people into using large-vendor chipsets which have\n> unknown, or known to be bad, security properties such as Intel AMT.\n>\n> In general, targeting open hardware seems to me to be more critical than\n> performance metrics for the long term health of Bitcoin, however,\n> performance is still important.\n>\n> Does anyone know how the RISC-V FPGA performance stacks up to, say, a\n> Raspberry Pi?\n>\n> On Thu, Jul 2, 2015 at 10:52 PM, Owen Gunden <ogunden at phauna.org> wrote:\n>\n>> I'm also a user who runs a full node, and I also like this idea. I think\n>> Gavin has done some back-of-the-envelope calculations around this stuff,\n>> but nothing so clearly defined as what you propose.\n>>\n>> On 07/02/2015 08:33 AM, Mistr Bigs wrote:\n>>\n>>> I'm an end user running a full node on an aging laptop.\n>>> I think this is a great suggestion! I'd love to know what system\n>>> requirements are needed for running Bitcoin Core.\n>>>\n>>> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n>>> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>> wrote:\n>>>\n>>>     I\u2019m a game developer. I write time critical code for a living and\n>>>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>>>     These budgets are based on what we call a minimum specification (of\n>>>     hardware); min spec for short. In most cases the min spec is based\n>>>     on entry model machines that are available during launch, and will\n>>>     give the user an enjoyable experience when playing our games.\n>>>     Obviously, we can turn on a number of bells and whistles for people\n>>>     with faster machines, but that\u2019s not the point of this mail.\n>>>\n>>>     The point is, can we define a min spec for Bitcoin Core? The number\n>>>     one reason for this is: if you know how your changes affect your\n>>>     available budgets, then the risk of breaking something due to\n>>>     capacity problems is reduced to practically zero.\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>  _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/b79de4df/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-03T04:19:45",
                "message_text_only": "Ideally, the metrics that we settle on would be architecture agnostic and have some sort of conversion metric to map it onto any specific architecture. An Intel based architecture is going to perform vastly different from an ARM based one for example.\n\nSimple example: The PS3 PPE and Xbox 360 CPU are RISC processors that run at 3.2GHz, but their non-vector performance is rather poor. You\u2019d be lucky to get about 33% effective utilization out of them (up to 50%, tops, but that\u2019s really pushing it), so if you were to map this onto another architecture, you\u2019d have at least a 3x conversion from this end alone (the other end could also have a scaling factor).\n\nUltimately, how these values are expressed isn\u2019t the important part. It\u2019s the ability to measure the impact of a change that\u2019s important. If some metric changes by, say, 5%, then it doesn\u2019t really matter if it\u2019s expressed in MIPS, INTOPS, MB or GB. The fact that it changed is what matters and what the effect is on the baseline (that ultimately could be expressed as a certain specific hardware configuration). It would probably be practical to have a number of comparable concrete min spec configurations and even more ideal would be if people in the community would have these systems up and running to do actual on-target performance benchmarks.\n\n\njp\n\n\n> On Jul 2, 2015, at 8:13 PM, Jeremy Rubin <jeremy.l.rubin.travel at gmail.com> wrote:\n> \n> Might I suggest that the min-spec, if developed, target the RISC-V Rocket architecture (running on FPGA, I suppose) as a reference point for performance? This may be much lower performance than desirable, however, it means that we don't lock people into using large-vendor chipsets which have unknown, or known to be bad, security properties such as Intel AMT.\n> \n> In general, targeting open hardware seems to me to be more critical than performance metrics for the long term health of Bitcoin, however, performance is still important.\n> \n> Does anyone know how the RISC-V FPGA performance stacks up to, say, a Raspberry Pi?\n> \n> On Thu, Jul 2, 2015 at 10:52 PM, Owen Gunden <ogunden at phauna.org <mailto:ogunden at phauna.org>> wrote:\n> I'm also a user who runs a full node, and I also like this idea. I think Gavin has done some back-of-the-envelope calculations around this stuff, but nothing so clearly defined as what you propose.\n> \n> On 07/02/2015 08:33 AM, Mistr Bigs wrote:\n> I'm an end user running a full node on an aging laptop.\n> I think this is a great suggestion! I'd love to know what system\n> requirements are needed for running Bitcoin Core.\n> \n> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com> <mailto:jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>>> wrote:\n> \n>     I\u2019m a game developer. I write time critical code for a living and\n>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>     These budgets are based on what we call a minimum specification (of\n>     hardware); min spec for short. In most cases the min spec is based\n>     on entry model machines that are available during launch, and will\n>     give the user an enjoyable experience when playing our games.\n>     Obviously, we can turn on a number of bells and whistles for people\n>     with faster machines, but that\u2019s not the point of this mail.\n> \n>     The point is, can we define a min spec for Bitcoin Core? The number\n>     one reason for this is: if you know how your changes affect your\n>     available budgets, then the risk of breaking something due to\n>     capacity problems is reduced to practically zero.\n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/348ca562/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/348ca562/attachment.sig>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-03T05:33:03",
                "message_text_only": "Jean-Paul,\n\nI think you're missing what I'm saying -- the point of my suggestion to\nmake Rocket a min-spec is more along the lines of saying that the Rocket\nserves as a fixed point, Bitcoin Core performance must be acceptable on\nthat platform, however it can be lower. Yes there are conversion factors\nand different architectures will perform differently. However, there still\nmust be some baseline, a point at which we can say processors below it no\nlonger are supported. I am saying that line should never be set so high as\nto exclude presently available open hardware.\n\nUltimately, this ends up making an odd, but nice, goal for Bitcoin\ndevelopment. If Bitcoin Core needs more MIPS, the community must ensure the\navailability of open hardware that it can run on.\n\nJeff,\n\nMoxie looks fantastic! The reason I thought RISC-V was a good selection is\nthe very active development community which is pushing the performance of\nthe ISA implementations forward. Can you speak to the health of Moxie\ndevelopment? Ultimately, ensuring support for many open architectures would\nbe preferable. Are there other reasonable open-source processors that you\nare aware of?\n\nI would be willing to work on a design a Bitcoin specific open-hardware\nprocessor, up to the FPGA bound, if this would be useful for this goal.\n\nOn Fri, Jul 3, 2015 at 12:19 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com\n> wrote:\n\n> Ideally, the metrics that we settle on would be architecture agnostic and\n> have some sort of conversion metric to map it onto any specific\n> architecture. An Intel based architecture is going to perform vastly\n> different from an ARM based one for example.\n>\n> Simple example: The PS3 PPE and Xbox 360 CPU are RISC processors that run\n> at 3.2GHz, but their non-vector performance is rather poor. You\u2019d be lucky\n> to get about 33% effective utilization out of them (up to 50%, tops, but\n> that\u2019s really pushing it), so if you were to map this onto another\n> architecture, you\u2019d have at least a 3x conversion from this end alone (the\n> other end could also have a scaling factor).\n>\n> Ultimately, how these values are expressed isn\u2019t the important part. It\u2019s\n> the ability to measure the impact of a change that\u2019s important. If some\n> metric changes by, say, 5%, then it doesn\u2019t really matter if it\u2019s expressed\n> in MIPS, INTOPS, MB or GB. The fact that it changed is what matters and\n> what the effect is on the baseline (that ultimately could be expressed as a\n> certain specific hardware configuration). It would probably be practical to\n> have a number of comparable concrete min spec configurations and even more\n> ideal would be if people in the community would have these systems up and\n> running to do actual on-target performance benchmarks.\n>\n>\n> jp\n>\n>\n> On Jul 2, 2015, at 8:13 PM, Jeremy Rubin <jeremy.l.rubin.travel at gmail.com>\n> wrote:\n>\n> Might I suggest that the min-spec, if developed, target the RISC-V Rocket\n> architecture (running on FPGA, I suppose) as a reference point for\n> performance? This may be much lower performance than desirable, however, it\n> means that we don't lock people into using large-vendor chipsets which have\n> unknown, or known to be bad, security properties such as Intel AMT.\n>\n> In general, targeting open hardware seems to me to be more critical than\n> performance metrics for the long term health of Bitcoin, however,\n> performance is still important.\n>\n> Does anyone know how the RISC-V FPGA performance stacks up to, say, a\n> Raspberry Pi?\n>\n> On Thu, Jul 2, 2015 at 10:52 PM, Owen Gunden <ogunden at phauna.org> wrote:\n>\n>> I'm also a user who runs a full node, and I also like this idea. I think\n>> Gavin has done some back-of-the-envelope calculations around this stuff,\n>> but nothing so clearly defined as what you propose.\n>>\n>> On 07/02/2015 08:33 AM, Mistr Bigs wrote:\n>>\n>>> I'm an end user running a full node on an aging laptop.\n>>> I think this is a great suggestion! I'd love to know what system\n>>> requirements are needed for running Bitcoin Core.\n>>>\n>>> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n>>> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>> wrote:\n>>>\n>>>     I\u2019m a game developer. I write time critical code for a living and\n>>>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>>>     These budgets are based on what we call a minimum specification (of\n>>>     hardware); min spec for short. In most cases the min spec is based\n>>>     on entry model machines that are available during launch, and will\n>>>     give the user an enjoyable experience when playing our games.\n>>>     Obviously, we can turn on a number of bells and whistles for people\n>>>     with faster machines, but that\u2019s not the point of this mail.\n>>>\n>>>     The point is, can we define a min spec for Bitcoin Core? The number\n>>>     one reason for this is: if you know how your changes affect your\n>>>     available budgets, then the risk of breaking something due to\n>>>     capacity problems is reduced to practically zero.\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>  _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/80b655af/attachment-0001.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-03T06:18:25",
                "message_text_only": "I get it. :) Being able to run Bitcoin Core on open hardware is a noble (and important) goal! I hope that once we\u2019ve figured out what the current requirements are that we can adjust these requirements (if needed) to include certain open hardware platforms. But that\u2019s the next step. Bitcoin Core is a project in flight. Let\u2019s first see where we\u2019re at.\n\nWhat are the critical wall-time requirements? As discussed earlier, the block propagation times are very important to keep orphan rates low. This sounds like one of the inputs that can be used to model bandwidth and CPU requirements. Other inputs for this could be as simple as the minimum number of connected nodes (multiplier on outbound bandwidth, but not CPU), etc. It wouldn\u2019t surprise me if many of the real world requirements will center around Bitcoin Core\u2019s ability to talk to the outside world.\n\njp\n\n\n> On Jul 2, 2015, at 10:33 PM, Jeremy Rubin <jeremy.l.rubin.travel at gmail.com> wrote:\n> \n> Jean-Paul,\n> \n> I think you're missing what I'm saying -- the point of my suggestion to make Rocket a min-spec is more along the lines of saying that the Rocket serves as a fixed point, Bitcoin Core performance must be acceptable on that platform, however it can be lower. Yes there are conversion factors and different architectures will perform differently. However, there still must be some baseline, a point at which we can say processors below it no longer are supported. I am saying that line should never be set so high as to exclude presently available open hardware.\n> \n> Ultimately, this ends up making an odd, but nice, goal for Bitcoin development. If Bitcoin Core needs more MIPS, the community must ensure the availability of open hardware that it can run on.\n> \n> Jeff,\n> \n> Moxie looks fantastic! The reason I thought RISC-V was a good selection is the very active development community which is pushing the performance of the ISA implementations forward. Can you speak to the health of Moxie development? Ultimately, ensuring support for many open architectures would be preferable. Are there other reasonable open-source processors that you are aware of?\n> \n> I would be willing to work on a design a Bitcoin specific open-hardware processor, up to the FPGA bound, if this would be useful for this goal.\n> \n> On Fri, Jul 3, 2015 at 12:19 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>> wrote:\n> Ideally, the metrics that we settle on would be architecture agnostic and have some sort of conversion metric to map it onto any specific architecture. An Intel based architecture is going to perform vastly different from an ARM based one for example.\n> \n> Simple example: The PS3 PPE and Xbox 360 CPU are RISC processors that run at 3.2GHz, but their non-vector performance is rather poor. You\u2019d be lucky to get about 33% effective utilization out of them (up to 50%, tops, but that\u2019s really pushing it), so if you were to map this onto another architecture, you\u2019d have at least a 3x conversion from this end alone (the other end could also have a scaling factor).\n> \n> Ultimately, how these values are expressed isn\u2019t the important part. It\u2019s the ability to measure the impact of a change that\u2019s important. If some metric changes by, say, 5%, then it doesn\u2019t really matter if it\u2019s expressed in MIPS, INTOPS, MB or GB. The fact that it changed is what matters and what the effect is on the baseline (that ultimately could be expressed as a certain specific hardware configuration). It would probably be practical to have a number of comparable concrete min spec configurations and even more ideal would be if people in the community would have these systems up and running to do actual on-target performance benchmarks.\n> \n> \n> jp\n> \n> \n>> On Jul 2, 2015, at 8:13 PM, Jeremy Rubin <jeremy.l.rubin.travel at gmail.com <mailto:jeremy.l.rubin.travel at gmail.com>> wrote:\n>> \n>> Might I suggest that the min-spec, if developed, target the RISC-V Rocket architecture (running on FPGA, I suppose) as a reference point for performance? This may be much lower performance than desirable, however, it means that we don't lock people into using large-vendor chipsets which have unknown, or known to be bad, security properties such as Intel AMT.\n>> \n>> In general, targeting open hardware seems to me to be more critical than performance metrics for the long term health of Bitcoin, however, performance is still important.\n>> \n>> Does anyone know how the RISC-V FPGA performance stacks up to, say, a Raspberry Pi?\n>> \n>> On Thu, Jul 2, 2015 at 10:52 PM, Owen Gunden <ogunden at phauna.org <mailto:ogunden at phauna.org>> wrote:\n>> I'm also a user who runs a full node, and I also like this idea. I think Gavin has done some back-of-the-envelope calculations around this stuff, but nothing so clearly defined as what you propose.\n>> \n>> On 07/02/2015 08:33 AM, Mistr Bigs wrote:\n>> I'm an end user running a full node on an aging laptop.\n>> I think this is a great suggestion! I'd love to know what system\n>> requirements are needed for running Bitcoin Core.\n>> \n>> On Thu, Jul 2, 2015 at 6:04 AM, Jean-Paul Kogelman\n>> <jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com> <mailto:jeanpaulkogelman at me.com <mailto:jeanpaulkogelman at me.com>>> wrote:\n>> \n>>     I\u2019m a game developer. I write time critical code for a living and\n>>     have to deal with memory, CPU, GPU and I/O budgets on a daily basis.\n>>     These budgets are based on what we call a minimum specification (of\n>>     hardware); min spec for short. In most cases the min spec is based\n>>     on entry model machines that are available during launch, and will\n>>     give the user an enjoyable experience when playing our games.\n>>     Obviously, we can turn on a number of bells and whistles for people\n>>     with faster machines, but that\u2019s not the point of this mail.\n>> \n>>     The point is, can we define a min spec for Bitcoin Core? The number\n>>     one reason for this is: if you know how your changes affect your\n>>     available budgets, then the risk of breaking something due to\n>>     capacity problems is reduced to practically zero.\n>> \n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/e7e20133/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/e7e20133/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-03T10:55:30",
                "message_text_only": "On Fri, Jul 3, 2015 at 1:33 AM, Jeremy Rubin <\njeremy.l.rubin.travel at gmail.com> wrote:\n\n> Moxie looks fantastic! The reason I thought RISC-V was a good selection is\n> the very active development community which is pushing the performance of\n> the ISA implementations forward. Can you speak to the health of Moxie\n> development? Ultimately, ensuring support for many open architectures would\n> be preferable. Are there other reasonable open-source processors that you\n> are aware of?\n>\n> I would be willing to work on a design a Bitcoin specific open-hardware\n> processor, up to the FPGA bound, if this would be useful for this goal.\n>\n\nMoxie was designed to be small and efficient from the compiler standpoint.\nAs a side effect, it is easy to audit from a security perspective.  It\nstarted life as a simulator + gcc compiler backend, and then later became\nan FPGA implementation.\n\nMoxie would benefit from focused effort in building out the hardware side\nto be efficient on FPGA, developing and testing multi-core support and\nrelated efforts.  This area is less mature and could use attention.  Start\nat https://github.com/atgreen/moxiedev/tree/master/moxie/cores/moxie\n\nIn terms of other projects, there are many open source processor cores at\nhttp://opencores.org\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/c7a71728/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Defining a min spec",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Owen Gunden",
                "Jean-Paul Kogelman",
                "Mistr Bigs",
                "Henning Kopp",
                "Jeremy Rubin"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 43181
        }
    },
    {
        "title": "[bitcoin-dev] REQ BIP # / Discuss - Sweep incoming unconfirmed transactions with a bounty.",
        "thread_messages": [
            {
                "author": "Dan Bryant",
                "date": "2015-07-02T04:44:41",
                "message_text_only": "This is a process BIP request to add functionality to the Bitcoin-Core\nreference implementation.  If accepted, this could also add\nflexibility into any future fee schedules.\n\nhttps://github.com/d4n13/bips/blob/master/bip-00nn.mediawiki\n\nNote, left the formatting in, since mediawiki is a fairly light markup.\n==================================\n<pre>\n  BIP: nn\n  Title: Sweep unconfirmed transactions by including their outputs in\nhigh fee transactions\n  Author: Dan Bryant <dkbryant at gmail.com>\n  Status: Draft\n  Type: Process\n  Created: 2015-07-01\n</pre>\n\n==Abstract==\n\nThis BIP describes an enhancement to the reference client that\naddresses the need incentive inclusion of unconfirmed transactions.\nThis method will create new high fee (or bounty) transactions that\nspend the desired unconfirmed transactions.  To claim the high fee\n(bounty) transactions, miners will need to include the desired\nunconfirmed transactions.\n\n==Motivation==\n\nThere are times when an individual receives a payment from someone\nthat is in a poorly crafted transaction.  This transaction may include\nno fees, or insufficient fees to be included by many miners.  The\nrecipient would be willing to pay a nominal transaction fee to have\nthe payment transaction swept into the next block, but has no simple\nway to craft this incentive.\n\nThis BIP could be highly desirable for merchants who may have little\ncontrol over the type of wallets their customers use.  A merchant will\nwant to ensure that all POS transactions to their hot wallet be given\na high probability of inclusion in the next block.  This BIP would\nallow the merchant to sweep all their POS transactions currently in\nthe mempool into one high fee sweep, thus greatly increasing the\nchance that they are in the next block.\n\nAlthough many wallets have the ability to tailor the transaction fees\nof payments that are sent, this BIP is unique in the sense that it\nallows people to offer a bounty for transactions that are incoming.\n\n==Specification==\n\nThis BIP would have two implementations; an automatic sweep of\nincoming unconfirmed transaction setting, and a manual sweep of\nunconfirmed transaction setting.  Both would have the ability to set\nthe fee amount the user would like to pay for the sweep.\n\n====Automatic sweep of incoming unconfirmed transactions====\n\nAn automatic sweep configuration may be ideal for merchants who want\nto ensure that their incoming transactions are not skipped over by\nminers.  An automatic sweep setting would consist of four fields,\n<tt>'''sweep_fee'''</tt>, <tt>'''skipped_count'''</tt>, and\n<tt>'''btc_threshold'''</tt>\n\nCurrently, the standard transaction fee is 0.0001 BTC, a generous\nsweep bounty would be 0.001 BTC.  Skipped-count will control the age\nof unconfirmed transactions to include in the sweep.  If skipped-count\nis set to three, then any incoming transaction that remains\nunconfirmed for 3 blocks would trigger a sweep.  A skipped-count of 0\nwould trigger a sweep whenever any transaction is skipped, or if it\nreaches an age of 10 minutes, regardless of how long the current block\nis taking.\n\nAs a safeguard to paying a bounty for small \"dust\" transactions, a\nminimum btc-threshold would be required for any automatic\nconfiguration.  A good starting threshold would be 0.10 BTC.  These\nautomatic settings would allow a wallet implementing this BIP to\nautomatically perform a sweep of unconfirmed transactions whenever\nmore than 0.10 BTC of incoming transactions were detected in the\nmempool.  Furthermore, no more than one automatic sweep would be\nperformed in any 10 minute window.\n\nWhenever a sweep is triggered, all incoming unconfirmed transactions\nshould be swept, not simply the ones that triggered the sweep.  These\nwould include new transactions as well as dust transactions.  Each\nsweep transaction would go to a new wallet address since recycling\nwallet addresses is poor practice.\n\n====Manual sweep of incoming unconfirmed transactions====\n\nA manual sweep of incoming unconfirmed transactions would be a special\ntype of \"Send\" in the current reference implementation.  A manual\nsweep would auto-fill a send transaction with all currently\nunconfirmed incoming transactions in the mempool.  The fee field would\nbe completely settable by the user and would auto-fill with the\nsuggestions of 0.001 BTC\n\nA manual sweep would also be available as a context option when\nselecting any unconfirmed transaction.\n\n==Compatibility==\n\nWallet software that does not support this BIP will continue to\noperate without modification.\n\n==Examples==\n\n<pre>\n //unconf_tx = ef7c0cbf6ba5af68d2ea239bba709b26ff7b0b669839a63bb01c2cb8e8de481e\n //hifee_tx  = f5a5ce5988cc72b9b90e8d1d6c910cda53c88d2175177357cc2f2cf0899fbaad\n //rcpt_addr = moQR7i8XM4rSGoNwEsw3h4YEuduuP6mxw7 # recipient controlled addr.\n //chng_addr = mvbnrCX3bg1cDRUu8pkecrvP6vQkSLDSou # recipient controlled addr.\n\n // UNCONF_TX - Assume a zero fee TX that miners are refusing in mempool\n {\n     \"txid\" : \"$unconf_tx\",\n     //...\n     \"vin\" : [\n     //...\n     ],\n     \"vout\" : [\n         {\n             \"value\" : 1.50000000,\n             \"n\" : 0,\n             \"scriptPubKey\" : {\n                 //...\n                 \"addresses\" : [\n                     \"$rcpt_addr\"\n                 ]\n             }\n         }\n     ]\n }\n\n // HIFEE_TX - Requires UNCONF_TX to be included in order to claim the\n //  high (0.001 BTC) fee.  Note this transaction is going from one\n //  address to another in the same wallet.  Both are controlled by the\n //  recipient.\n {\n     \"txid\" : \"$hifee_tx\",\n     //...\n     \"vin\" : [\n         {\n             \"txid\" : \"$unconf_tx\",\n             \"vout\" : 0\n             //...\n         }\n     ],\n     \"vout\" : [\n         {\n             \"value\" : 1.49900000,\n             \"n\" : 0,\n             \"scriptPubKey\" : {\n                 //...\n                 \"addresses\" : [\n                     \"$chng_addr\"\n                 ]\n             }\n         }\n     ]\n }\n</pre>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-02T04:52:57",
                "message_text_only": "This is called child pays for parent and there is a three year old pull\nrequest implementing it:\n\nhttps://github.com/bitcoin/bitcoin/pull/1647\n\nThe points regarding sweep transaction UI is out of scope for a BIP I'm\nafraid. I suggest talking with wallet authors, and if agreement can be\nfound writing a pull request.\nOn Jul 1, 2015 9:44 PM, \"Dan Bryant\" <dkbryant at gmail.com> wrote:\n\n> This is a process BIP request to add functionality to the Bitcoin-Core\n> reference implementation.  If accepted, this could also add\n> flexibility into any future fee schedules.\n>\n> https://github.com/d4n13/bips/blob/master/bip-00nn.mediawiki\n>\n> Note, left the formatting in, since mediawiki is a fairly light markup.\n> ==================================\n> <pre>\n>   BIP: nn\n>   Title: Sweep unconfirmed transactions by including their outputs in\n> high fee transactions\n>   Author: Dan Bryant <dkbryant at gmail.com>\n>   Status: Draft\n>   Type: Process\n>   Created: 2015-07-01\n> </pre>\n>\n> ==Abstract==\n>\n> This BIP describes an enhancement to the reference client that\n> addresses the need incentive inclusion of unconfirmed transactions.\n> This method will create new high fee (or bounty) transactions that\n> spend the desired unconfirmed transactions.  To claim the high fee\n> (bounty) transactions, miners will need to include the desired\n> unconfirmed transactions.\n>\n> ==Motivation==\n>\n> There are times when an individual receives a payment from someone\n> that is in a poorly crafted transaction.  This transaction may include\n> no fees, or insufficient fees to be included by many miners.  The\n> recipient would be willing to pay a nominal transaction fee to have\n> the payment transaction swept into the next block, but has no simple\n> way to craft this incentive.\n>\n> This BIP could be highly desirable for merchants who may have little\n> control over the type of wallets their customers use.  A merchant will\n> want to ensure that all POS transactions to their hot wallet be given\n> a high probability of inclusion in the next block.  This BIP would\n> allow the merchant to sweep all their POS transactions currently in\n> the mempool into one high fee sweep, thus greatly increasing the\n> chance that they are in the next block.\n>\n> Although many wallets have the ability to tailor the transaction fees\n> of payments that are sent, this BIP is unique in the sense that it\n> allows people to offer a bounty for transactions that are incoming.\n>\n> ==Specification==\n>\n> This BIP would have two implementations; an automatic sweep of\n> incoming unconfirmed transaction setting, and a manual sweep of\n> unconfirmed transaction setting.  Both would have the ability to set\n> the fee amount the user would like to pay for the sweep.\n>\n> ====Automatic sweep of incoming unconfirmed transactions====\n>\n> An automatic sweep configuration may be ideal for merchants who want\n> to ensure that their incoming transactions are not skipped over by\n> miners.  An automatic sweep setting would consist of four fields,\n> <tt>'''sweep_fee'''</tt>, <tt>'''skipped_count'''</tt>, and\n> <tt>'''btc_threshold'''</tt>\n>\n> Currently, the standard transaction fee is 0.0001 BTC, a generous\n> sweep bounty would be 0.001 BTC.  Skipped-count will control the age\n> of unconfirmed transactions to include in the sweep.  If skipped-count\n> is set to three, then any incoming transaction that remains\n> unconfirmed for 3 blocks would trigger a sweep.  A skipped-count of 0\n> would trigger a sweep whenever any transaction is skipped, or if it\n> reaches an age of 10 minutes, regardless of how long the current block\n> is taking.\n>\n> As a safeguard to paying a bounty for small \"dust\" transactions, a\n> minimum btc-threshold would be required for any automatic\n> configuration.  A good starting threshold would be 0.10 BTC.  These\n> automatic settings would allow a wallet implementing this BIP to\n> automatically perform a sweep of unconfirmed transactions whenever\n> more than 0.10 BTC of incoming transactions were detected in the\n> mempool.  Furthermore, no more than one automatic sweep would be\n> performed in any 10 minute window.\n>\n> Whenever a sweep is triggered, all incoming unconfirmed transactions\n> should be swept, not simply the ones that triggered the sweep.  These\n> would include new transactions as well as dust transactions.  Each\n> sweep transaction would go to a new wallet address since recycling\n> wallet addresses is poor practice.\n>\n> ====Manual sweep of incoming unconfirmed transactions====\n>\n> A manual sweep of incoming unconfirmed transactions would be a special\n> type of \"Send\" in the current reference implementation.  A manual\n> sweep would auto-fill a send transaction with all currently\n> unconfirmed incoming transactions in the mempool.  The fee field would\n> be completely settable by the user and would auto-fill with the\n> suggestions of 0.001 BTC\n>\n> A manual sweep would also be available as a context option when\n> selecting any unconfirmed transaction.\n>\n> ==Compatibility==\n>\n> Wallet software that does not support this BIP will continue to\n> operate without modification.\n>\n> ==Examples==\n>\n> <pre>\n>  //unconf_tx =\n> ef7c0cbf6ba5af68d2ea239bba709b26ff7b0b669839a63bb01c2cb8e8de481e\n>  //hifee_tx  =\n> f5a5ce5988cc72b9b90e8d1d6c910cda53c88d2175177357cc2f2cf0899fbaad\n>  //rcpt_addr = moQR7i8XM4rSGoNwEsw3h4YEuduuP6mxw7 # recipient controlled\n> addr.\n>  //chng_addr = mvbnrCX3bg1cDRUu8pkecrvP6vQkSLDSou # recipient controlled\n> addr.\n>\n>  // UNCONF_TX - Assume a zero fee TX that miners are refusing in mempool\n>  {\n>      \"txid\" : \"$unconf_tx\",\n>      //...\n>      \"vin\" : [\n>      //...\n>      ],\n>      \"vout\" : [\n>          {\n>              \"value\" : 1.50000000,\n>              \"n\" : 0,\n>              \"scriptPubKey\" : {\n>                  //...\n>                  \"addresses\" : [\n>                      \"$rcpt_addr\"\n>                  ]\n>              }\n>          }\n>      ]\n>  }\n>\n>  // HIFEE_TX - Requires UNCONF_TX to be included in order to claim the\n>  //  high (0.001 BTC) fee.  Note this transaction is going from one\n>  //  address to another in the same wallet.  Both are controlled by the\n>  //  recipient.\n>  {\n>      \"txid\" : \"$hifee_tx\",\n>      //...\n>      \"vin\" : [\n>          {\n>              \"txid\" : \"$unconf_tx\",\n>              \"vout\" : 0\n>              //...\n>          }\n>      ],\n>      \"vout\" : [\n>          {\n>              \"value\" : 1.49900000,\n>              \"n\" : 0,\n>              \"scriptPubKey\" : {\n>                  //...\n>                  \"addresses\" : [\n>                      \"$chng_addr\"\n>                  ]\n>              }\n>          }\n>      ]\n>  }\n> </pre>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150701/fd6ae770/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-02T04:57:21",
                "message_text_only": "PR#1647 only addresses miner policy, though, right? I believe the BIP is addressing the user-facing side of this functionality. CPFP mining policy does very little good if wallets don't offer any way for users to goose up incoming transactions.\n\n\nOn Wednesday, 1 July 2015, at 9:52 pm, Mark Friedenbach wrote:\n> This is called child pays for parent and there is a three year old pull\n> request implementing it:\n> \n> https://github.com/bitcoin/bitcoin/pull/1647\n> \n> The points regarding sweep transaction UI is out of scope for a BIP I'm\n> afraid. I suggest talking with wallet authors, and if agreement can be\n> found writing a pull request.\n> On Jul 1, 2015 9:44 PM, \"Dan Bryant\" <dkbryant at gmail.com> wrote:\n> \n> > This is a process BIP request to add functionality to the Bitcoin-Core\n> > reference implementation.  If accepted, this could also add\n> > flexibility into any future fee schedules.\n> >\n> > https://github.com/d4n13/bips/blob/master/bip-00nn.mediawiki"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-02T13:13:35",
                "message_text_only": "I wonder if that would be a viable way for payment services to pay to\nprotect against double spending.\n\nIf the payment processor was handling 1000 BTC every block and was willing\nto pay 0.1% fees, then it could create a transaction with 1BTC in fees.\n\nIf an attacker tried to double spend a transaction of 0.1BTC, then even if\nhe was to spend the entire transaction to fees, the payment processor would\nbe able to out bid him.\n\nIt kind of works like insurance.  The payment processor combines lots of\nsmall double spend threats and protects them with a single transaction.\n\nThe processor could keep sending out a larger and large transaction (with\nfee) until eventually a block is found.\n\nIt requires RBF.  First seen safe would be incompatible, if the double\nspender gets their transaction into the system first.\n\nA 1BTC fee transaction in nearly every block would also be a boost for\nnetwork security.\n\nIt avoids Peter Todd's complaint that mining pools might make secret deals\nwith payment services.  The transaction would be public and all miners\ncould include it in their block.\n\nOn Thu, Jul 2, 2015 at 5:57 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> PR#1647 only addresses miner policy, though, right? I believe the BIP is\n> addressing the user-facing side of this functionality. CPFP mining policy\n> does very little good if wallets don't offer any way for users to goose up\n> incoming transactions.\n>\n>\n> On Wednesday, 1 July 2015, at 9:52 pm, Mark Friedenbach wrote:\n> > This is called child pays for parent and there is a three year old pull\n> > request implementing it:\n> >\n> > https://github.com/bitcoin/bitcoin/pull/1647\n> >\n> > The points regarding sweep transaction UI is out of scope for a BIP I'm\n> > afraid. I suggest talking with wallet authors, and if agreement can be\n> > found writing a pull request.\n> > On Jul 1, 2015 9:44 PM, \"Dan Bryant\" <dkbryant at gmail.com> wrote:\n> >\n> > > This is a process BIP request to add functionality to the Bitcoin-Core\n> > > reference implementation.  If accepted, this could also add\n> > > flexibility into any future fee schedules.\n> > >\n> > > https://github.com/d4n13/bips/blob/master/bip-00nn.mediawiki\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150702/9496215d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-03T21:56:58",
                "message_text_only": "On Wed, Jul 01, 2015 at 09:52:57PM -0700, Mark Friedenbach wrote:\n> This is called child pays for parent and there is a three year old pull\n> request implementing it:\n> \n> https://github.com/bitcoin/bitcoin/pull/1647\n\nCPFP probably needs changes to the P2P layer to be able to support RBF\nscorched earth well unfortunately, as currently transactions are\nprocessed individually and out of context. In the RBF case you'd need to\nkeep previously removed transactions in a buffer and evaluate new\ntransactions against that buffer - relatively complex.\n\nThe other big issue is that existing wallets don't appear to be very\ngood at preventing double-spends. There's lots of edge cases where\ntransations aren't recorded correctly, like crashes, shutting down\nunexpected etc. and in those cases there's a high chance of the wallet\nsending a double-spend by accident. There's also coinjoin to consider -\nplainly incompatible. With scorched-earth this will lead to losses.\n\nFortunately you can implement scorched-earth using SIGHASH_ANYONECANPAY\ninstead on an opt-in basis, which wallets could add only if they've\ntaken the special engineering considerations into account first:\n\n    \"Replace-by-fee scorched-earth without child-pays-for-parent\",\n    Peter Todd, Bitcoin-development mailing list, Apr 28th 2014\n    http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005620.html\n\nFor the OP: I'd be interested in pursuing this further.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000015665ce75a321e5827cdf9af667eaa75aaeefbc315514da5\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/04164a73/attachment.sig>"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-06T04:14:14",
                "message_text_only": "On Wed, Jul 01, 2015 at 09:52:57PM -0700, Mark Friedenbach wrote:\n> This is called child pays for parent and there is a three year old pull\n> request implementing it:\n>\n> https://github.com/bitcoin/bitcoin/pull/1647\n\nUnderstood... When I wrote the BIP proposal I was assuming\n(incorrectly) that CPFP TX selection was already being done by miners,\nbut I see now that certain trees could bloom the TX selection latency\nas miners would need to be more dependency aware.  Perhaps the BIP66\norphan block chain shows that some miners may not always be counted on\nto ensure that all TX stuffed in a block have dependencies met.\nCertainly not until the PR1647 is fully merged and deployed.\n\nOn Wed, Jul 1, 2015 at 11:57 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> PR#1647 only addresses miner policy, though, right? I believe the BIP is\n> addressing the user-facing side of this functionality. CPFP mining policy\n> does very little good if wallets don't offer any way for users to goose up\n> incoming transactions.\n\nOn Wed, Jul 01, 2015 at 09:52:57PM -0700, Mark Friedenbach wrote:\n> The points regarding sweep transaction UI is out of scope for a BIP I'm\n> afraid. I suggest talking with wallet authors, and if agreement can be\n> found writing a pull request.\n\nYes... although I certainly admit, I didn't know about CPFP or I would\nhave called it out as a requirement for this UI enhancement request.\nI'll see if I can't get some wallet authors interested in this as a\nfeature enhancement when PR1647 commits.\n\nPerhaps there are risks raised if CPFP is not enabled but these sweep\ntx enter the mempool.  If miners take the high fee \"children\" but\nignore the low fee \"parents\" then the child might enter the blockchain\nwithout the parent.  If miners were light on block validation,\nwouldn't it be possible that the child may go forward with many\nconfirmations, while the parent patiently waits in the mempool?  This\ncould be bad since spending the child may look good, as it might have\nmany confirmations, while its parent has few.\n\nOn Fri, Jul 3, 2015 at 4:56 PM, Peter Todd <pete at petertodd.org> wrote:\n> \"Replace-by-fee scorched-earth without child-pays-for-parent\",\n> Peter Todd, Bitcoin-development mailing list, Apr 28th 2014\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005620.html\n\nVery good!  So if I follow, RPF can work one of two ways:\n\nIn the \"countermeasure\" form, spender gives receiver a partially\nsigned \"countermeasure\" transactions with juiced up fees.\n\nIn the \"anyonecanpay\" form, spender signs the transaction with\nANYONECANPAY bit allowing the reviver to add fees at will.\n\nOne question I did have about RBF is this.. Is it correct to presume\nthat the spender doesn't send the incomplete \"countermeasure\"\ntransaction to the network?  If they did, wouldn't they get flagged on\nDoS code banning them from peers?\n\nCorollary question.  If the \"countermeasure\" transaction is not\nbroadcast, is it sent to the receiver via back channel (email, etc)\n\nI'll try to clean up the draft BIP to include CPFP dependencies and\nRBF capabilities.  Whether it belongs in a BIP or a PR, its just a doc\nto outline my thoughts at this point.  Not burning a whole in my head,\nso may take some time.\n\nThx."
            },
            {
                "author": "Micha Bailey",
                "date": "2015-07-06T04:20:30",
                "message_text_only": "On Monday, July 6, 2015, Dan Bryant <dkbryant at gmail.com> wrote:\n\n> On Wed, Jul 01, 2015 at 09:52:57PM -0700, Mark Friedenbach wrote:\n> > This is called child pays for parent and there is a three year old pull\n> > request implementing it:\n> >\n> > https://github.com/bitcoin/bitcoin/pull/1647\n>\n> Understood... When I wrote the BIP proposal I was assuming\n> (incorrectly) that CPFP TX selection was already being done by miners,\n> but I see now that certain trees could bloom the TX selection latency\n> as miners would need to be more dependency aware.  Perhaps the BIP66\n> orphan block chain shows that some miners may not always be counted on\n> to ensure that all TX stuffed in a block have dependencies met.\n> Certainly not until the PR1647 is fully merged and deployed.\n>\n> On Wed, Jul 1, 2015 at 11:57 PM, Matt Whitlock <bip at mattwhitlock.name\n> <javascript:;>> wrote:\n> > PR#1647 only addresses miner policy, though, right? I believe the BIP is\n> > addressing the user-facing side of this functionality. CPFP mining policy\n> > does very little good if wallets don't offer any way for users to goose\n> up\n> > incoming transactions.\n>\n> On Wed, Jul 01, 2015 at 09:52:57PM -0700, Mark Friedenbach wrote:\n> > The points regarding sweep transaction UI is out of scope for a BIP I'm\n> > afraid. I suggest talking with wallet authors, and if agreement can be\n> > found writing a pull request.\n>\n> Yes... although I certainly admit, I didn't know about CPFP or I would\n> have called it out as a requirement for this UI enhancement request.\n> I'll see if I can't get some wallet authors interested in this as a\n> feature enhancement when PR1647 commits.\n>\n> Perhaps there are risks raised if CPFP is not enabled but these sweep\n> tx enter the mempool.  If miners take the high fee \"children\" but\n> ignore the low fee \"parents\" then the child might enter the blockchain\n> without the parent.  If miners were light on block validation,\n> wouldn't it be possible that the child may go forward with many\n> confirmations, while the parent patiently waits in the mempool?  This\n> could be bad since spending the child may look good, as it might have\n> many confirmations, while its parent has few.\n\n\nA child is a transaction that spends outputs of another transaction, the\nparent. The child cannot be confirmed before the parent, because the\noutputs being spent do not yet exist.\n\n\n>\n> On Fri, Jul 3, 2015 at 4:56 PM, Peter Todd <pete at petertodd.org\n> <javascript:;>> wrote:\n> > \"Replace-by-fee scorched-earth without child-pays-for-parent\",\n> > Peter Todd, Bitcoin-development mailing list, Apr 28th 2014\n> >\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005620.html\n>\n> Very good!  So if I follow, RPF can work one of two ways:\n>\n> In the \"countermeasure\" form, spender gives receiver a partially\n> signed \"countermeasure\" transactions with juiced up fees.\n>\n> In the \"anyonecanpay\" form, spender signs the transaction with\n> ANYONECANPAY bit allowing the reviver to add fees at will.\n>\n> One question I did have about RBF is this.. Is it correct to presume\n> that the spender doesn't send the incomplete \"countermeasure\"\n> transaction to the network?  If they did, wouldn't they get flagged on\n> DoS code banning them from peers?\n\n\nA transaction that is not completely signed won't be relayed, correct, and\nit cannot be mined.\n\n\n> Corollary question.  If the \"countermeasure\" transaction is not\n> broadcast, is it sent to the receiver via back channel (email, etc)\n>\n> I'll try to clean up the draft BIP to include CPFP dependencies and\n> RBF capabilities.  Whether it belongs in a BIP or a PR, its just a doc\n> to outline my thoughts at this point.  Not burning a whole in my head,\n> so may take some time.\n>\n> Thx.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <javascript:;>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150706/8c82606a/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-07-06T04:24:55",
                "message_text_only": "On Monday, July 06, 2015 4:14:14 AM Dan Bryant wrote:\n> When I wrote the BIP proposal I was assuming (incorrectly) that CPFP TX\n> selection was already being done by miners,\n\nNo, this is correct. It's just not included in the reference policy.\nMiners are not expected to use the reference policy as-is, and some of them do \nin fact use CPFP.\n\nLuke"
            },
            {
                "author": "Aaron Voisine",
                "date": "2015-07-09T06:17:03",
                "message_text_only": "Do you have any idea how much hashing power is using CPFP? It's a useful\nmetric for wallet developers to know what sort of confirmation times they\nmight be able to get when attempting to use it.\n\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\n\nOn Sun, Jul 5, 2015 at 9:24 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Monday, July 06, 2015 4:14:14 AM Dan Bryant wrote:\n> > When I wrote the BIP proposal I was assuming (incorrectly) that CPFP TX\n> > selection was already being done by miners,\n>\n> No, this is correct. It's just not included in the reference policy.\n> Miners are not expected to use the reference policy as-is, and some of\n> them do\n> in fact use CPFP.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150708/0f48f29b/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-07-09T06:22:42",
                "message_text_only": "On Thursday, July 09, 2015 6:17:03 AM Aaron Voisine wrote:\n> Do you have any idea how much hashing power is using CPFP? It's a useful\n> metric for wallet developers to know what sort of confirmation times they\n> might be able to get when attempting to use it.\n\nNot sure. At least 4% (Eligius)?"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-09T07:19:06",
                "message_text_only": "FYI, looks like someone was trying to boost up a transaction tonight\nand managed to get it pushed through.\n\nparent: 4cc3e2b6407ae8cdc1fd62cb3235f9c92654277684da8970db19a0169e44c68c\nchild: 161b302d1af8b6eacf1140726b26c67fa72ecf4f7f7e6cd8d83ef492b8b490ea\ngchld: 4f6821b50c046ae40d488aa18d88d41c9d0686daedf835b68b8c5086b73939fd\nggch: 0c159d19f6452f12512a4ec16868a3af00fe381a0913f4fc69b3fc14c4588aa9\ngggch: 4e4f96c5ba416961be347ffc496e8ce12046191ab7fb252e88966ce365d2bc5f\n\nthough it's position in the block doesn't seem to be a priority / fee cut line."
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-15T08:26:24",
                "message_text_only": "Offering a bounty for this feature\n\nSpecifically...\n\nAnyone who can put a CPFP transaction creation feature into any wallet\nfeatured on the bitcoin homepage (ref1) can claim this bounty.  The\nfunds are being raised by donation.  The funds will be dispersed from\nthe following address when the bounty is claimed:\n3FEUByMeaxrNmBCVYjvsnhyAjiUdat5i7M\n\nCurrently there isn't much in there, but I welcome angels to fill the bucket.\n\nHere's proof that the multisig address is not 1 of 1:\nhttps://bitcointalk.org/index.php?topic=1122956.0\n\nBounty announce: https://bitcointalk.org/index.php?topic=1123464.0\n\nref1: https://bitcoin.org/en/choose-your-wallet"
            }
        ],
        "thread_summary": {
            "title": "REQ BIP # / Discuss - Sweep incoming unconfirmed transactions with a bounty.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Aaron Voisine",
                "Dan Bryant",
                "Peter Todd",
                "Matt Whitlock",
                "Tier Nolan",
                "Luke Dashjr",
                "Mark Friedenbach",
                "Micha Bailey"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 28492
        }
    },
    {
        "title": "[bitcoin-dev] Mailing List Administrivia - GPG, Archives, Breakage, TODO, mirrors, etc",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-07-03T22:07:51",
                "message_text_only": "On Sat, Jun 27, 2015 at 04:54:00PM -0700, Jeff Garzik wrote:\n> Generally agreed w/ all this.\n> \n> To preserve digital signatures now and in the future, and make mbox\n> archives actually useful, a minimum modification policy is needed.\n\nACK\n\nI'd support making the raw archives public for archiving as well.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000015665ce75a321e5827cdf9af667eaa75aaeefbc315514da5\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/6b4be9dd/attachment.sig>"
            },
            {
                "author": "grarpamp",
                "date": "2015-07-16T04:57:19",
                "message_text_only": "On Sun, Jun 28, 2015 at 10:27 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> Mailman's obscure_addresses option is now disabled.  It has been pretty\n> useless as a spam mitigation measure anyway.\n>\n> This is a test message to see if mailman continues to break --clearsign GPG\n> signatures for messages that contain an e-mail address like\n> test at example.com.\n\nStill broken, in both the web \"archives\" and the \"mbox\" archives.\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/009252.html\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June.txt.gz\n\nNote also, as outlined with other issues in the OP, the below attachment\nwill not appear in the \"mbox\" archives, thus becoming lost to mirrors and\nusers rightly attempting to use the \"mbox\" archives as their canonical source\nfor local seeding or MUA access.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: lost.c\nType: text/x-csrc\nSize: 223 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/63f50962/attachment-0001.bin>"
            },
            {
                "author": "grarpamp",
                "date": "2015-07-16T05:08:59",
                "message_text_only": "> will not appear in the \"mbox\" archives, thus becoming lost to mirrors and\n\nAnd the attachment link for users of the web \"archive\" has stripped off the\nfinal blank line that was present in the original attachment. Thus it would\nfail any detached signatures authors may choose to make.\n\nSHA1 (lost.c) = 4c6284510d73031eac16ddac53363137f39499e0\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009439.html\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/63f50962/attachment-0001.bin"
            }
        ],
        "thread_summary": {
            "title": "Mailing List Administrivia - GPG, Archives, Breakage, TODO, mirrors, etc",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "grarpamp",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2304
        }
    },
    {
        "title": "[bitcoin-dev]  Fork of invalid blocks due to BIP66 violations",
        "thread_messages": [
            {
                "author": "Raystonn",
                "date": "2015-07-04T03:11:47",
                "message_text_only": "We need some analysis on why this has happened.\u00a0 It appears the larger hashrate is violating BIP66.\u00a0 Thus it appears the network is rejecting this BIP, though potentially accidentally.\u00a0 If this is an accident, how is such a large portion of hashrate forking, and what can we do to avoid this in the future?\n\nRaystonn"
            }
        ],
        "thread_summary": {
            "title": "Fork of invalid blocks due to BIP66 violations",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Raystonn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 316
        }
    },
    {
        "title": "[bitcoin-dev] Fork of invalid blocks due to BIP66 violations",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-04T03:17:17",
                "message_text_only": "On Sat, Jul 4, 2015 at 3:11 AM, Raystonn <raystonn at hotmail.com> wrote:\n> We need some analysis on why this has happened.  It appears the larger hashrate is violating BIP66.  Thus it appears the network is rejecting this BIP, though potentially accidentally.  If this is an accident, how is such a large portion of hashrate forking, and what can we do to avoid this in the future?\n\nA near majority of the hashrate on the network appears to be SPV mining.\n\nBtcnuggets was a non-upgraded miner that produced an invalid block\nafter the lock in and f2pool and antpool have been extending it.\nFortunately their extension contains no transactions (an artifact of\nSPV mining).  Obviously a complete understanding is going to take some\ntime;  though I would note that this general failure mode was one we\nwere aware of and is part of the reason the treshold is so high."
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-04T03:30:16",
                "message_text_only": "On Sat, Jul 04, 2015 at 03:17:17AM +0000, Gregory Maxwell wrote:\n> On Sat, Jul 4, 2015 at 3:11 AM, Raystonn <raystonn at hotmail.com> wrote:\n> > We need some analysis on why this has happened.  It appears the larger hashrate is violating BIP66.  Thus it appears the network is rejecting this BIP, though potentially accidentally.  If this is an accident, how is such a large portion of hashrate forking, and what can we do to avoid this in the future?\n> \n> A near majority of the hashrate on the network appears to be SPV mining.\n\nAs for what \"SPV mining\" is:\n\nWhile blocks are propagating throughout the network, frequently it's\npossible for miners to get the header of the block before they get and\nfully validate the block itself. This is just a few seconds to tens of\nseconds, but that's a big deal for profitability. So miners have been\nrunning custom patches that mine on top of the longest chain they know\nabout, even if they haven't actually verified the blocks in it due to\npropagation delays.\n\nUnfortunately the Bitcoin protocol lets you do that, and the extra % of\nrevenue makes a big difference when you take into account the low profit\nmargins of mining these days. BIP66 happened to trigger this issue this\ntime, but actually *any* miner creating an invalid block for *any*\nreason would have done so with the software miners are running right\nnow.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000001242e0216eb113f1c50e4c18ecfbc8b9c0224ec82ec391d6\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/c7e9a56c/attachment.sig>"
            },
            {
                "author": "odinn",
                "date": "2015-07-04T03:32:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\"The Wall Street of Bitcoin\"\n\nOn 07/03/2015 08:30 PM, Peter Todd wrote:\n> On Sat, Jul 04, 2015 at 03:17:17AM +0000, Gregory Maxwell wrote:\n>> On Sat, Jul 4, 2015 at 3:11 AM, Raystonn <raystonn at hotmail.com>\n>> wrote:\n>>> We need some analysis on why this has happened.  It appears the\n>>> larger hashrate is violating BIP66.  Thus it appears the\n>>> network is rejecting this BIP, though potentially accidentally.\n>>> If this is an accident, how is such a large portion of hashrate\n>>> forking, and what can we do to avoid this in the future?\n>> \n>> A near majority of the hashrate on the network appears to be SPV\n>> mining.\n> \n> As for what \"SPV mining\" is:\n> \n> While blocks are propagating throughout the network, frequently\n> it's possible for miners to get the header of the block before they\n> get and fully validate the block itself. This is just a few seconds\n> to tens of seconds, but that's a big deal for profitability. So\n> miners have been running custom patches that mine on top of the\n> longest chain they know about, even if they haven't actually\n> verified the blocks in it due to propagation delays.\n> \n> Unfortunately the Bitcoin protocol lets you do that, and the extra\n> % of revenue makes a big difference when you take into account the\n> low profit margins of mining these days. BIP66 happened to trigger\n> this issue this time, but actually *any* miner creating an invalid\n> block for *any* reason would have done so with the software miners\n> are running right now.\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVl1PeAAoJEGxwq/inSG8C2LAIAK9FbCODbTu2t2yktusv37Sd\nzf5/ApqciZ01X4oiQHHKXIgzhYgNenv2dnRsBsrGtn53L1AopXOiSIcz8ECCYsjp\nlwiKitebU7VukDlCu07ZQpff62Hm34lsqo2oXZHSC/lKYXD5llixgCmNrs2CTYrF\nbWxCr2pngr+azDFX9hUSr6c48MO8Id8hdiWIcYwofNOcUACloqgJ/SaZZqT5OSXj\ngk3Iq0ltTQdc71z7g8G1cqHfL/Nu47X0XnwVt8UAOn0b8bo3Hbz3QegPXoj1tik2\nj8lJUqm3lwKdIky2i50OWxL/agaXou3jJy19jhziW5sRh3tkZfC4BbI+wazfRyk=\n=dW9O\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-04T10:04:40",
                "message_text_only": "On Sat, Jul 4, 2015 at 4:30 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> As for what \"SPV mining\" is:\n>\n> While blocks are propagating throughout the network, frequently it's\n> possible for miners to get the header of the block before they get and\n> fully validate the block itself. This is just a few seconds to tens of\n> seconds, but that's a big deal for profitability. So miners have been\n> running custom patches that mine on top of the longest chain they know\n> about, even if they haven't actually verified the blocks in it due to\n> propagation delays.\n>\n\nIs the invalid fork pretty much all empty blocks then?\n\nSPV mining isn't inherently dangerous, if it is only for a short period of\ntime.  It can boost the total work for the block chain.\n\nInherently, invalid blocks are rare, so assuming a header is valid is the\ncorrect assumption.\n\nFor safety (for the miner), SPV miners should switch back to full mining\nafter 20-30 seconds without fully validating the chain that they are on.\n\n- header received\n- header verified (they skipped this step)\n- build on header with empty block\n- receive full block\n-- mark header as invalid if this step times out\n- verify full block\n-- mark header as invalid if verification fails\n- build on full block with non-empty block\n\nAn easier rule is that you only build on a header if the header's parent\n(or even grandparent) has been fully verified.  That rule would prevent the\nillegal fork from growing past 1-2 blocks.  It would mean that SPV miners\nwould start wasting hashing power once the invalid fork hit 2 blocks.  They\nwouldn't even build on their own block.\n\nI guess miners never added code of that kind?  That is pretty shocking that\na majority would SPV mine without that safeguard against the main\nvulnerability of SPV mining.\n\nEven waiting a few minutes before switch back would protect against this.\n\nWorse, in this case, is that it wasn't just an invalid block, it was an\ninvalid header chain.  They could have done the check with headers only.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/378fcbfd/attachment.html>"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-04T05:17:38",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/cbb990ba/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-04T05:22:09",
                "message_text_only": "On Fri, Jul 03, 2015 at 10:17:38PM -0700, Raystonn wrote:\n\nYeah, I was really surprised when I found out today that bitcoinj\ndoesn't implement any of the soft-fork code. There's no excuse for not\ndoing that frankly. :(\n\n> <p dir=\"ltr\">SPV clients are at risk in scenarios like this.  We should encourage them to check node versions against the minimum required for safety.  This check should be upgraded when new BIPs go into effect.  It won't help against malicious nodes.  But it will help in cases such as today's.<br>\n> </p>\n> <div class=\"gmail_quote\">On 3 Jul 2015 8:17 pm, Gregory Maxwell &lt;gmaxwell at gmail.com&gt; wrote:<br type='attribution'><blockquote class=\"quote\" style=\"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex\">\n> \n> \n> \n> <div>\n> <div>On Sat, Jul 4, 2015 at 3:11 AM, Raystonn &lt;raystonn&#64;hotmail.com&gt; wrote:<br />\n> &gt; We need some analysis on why this has happened.\u00a0 It appears the larger hashrate is violating BIP66.\u00a0 Thus it appears the network is rejecting this BIP, though potentially accidentally.\u00a0 If this is an accident, how is such a large portion of hashrate forking, and what can we do to avoid this in the future?<br />\n> <br />\n> A near majority of the hashrate on the network appears to be SPV mining.<br />\n> <br />\n> Btcnuggets was a non-upgraded miner that produced an invalid block<br />\n> after the lock in and f2pool and antpool have been extending it.<br />\n> Fortunately their extension contains no transactions (an artifact of<br />\n> SPV mining).\u00a0 Obviously a complete understanding is going to take some<br />\n> time;\u00a0 though I would note that this general failure mode was one we<br />\n> were aware of and is part of the reason the treshold is so high.<br />\n> </div>\n> </div>\n> \n> </blockquote></div>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000014870ea5d966efbae21588be363949de7cb3838f42b00e2f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 646 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/f9c7ec74/attachment.sig>"
            },
            {
                "author": "odinn",
                "date": "2015-07-04T05:40:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nRaystonn,\n\nHow would an average SPV wallet user know anything about this at all?\nThey might not know it is even happening, or if they have some idea\nthat something is wrong, then they wouldn't know what to do.\n\nSay you use Electrum, some older version like 1.9.  Electrum's current\nversion is 2.3.3.  Or say you use a slightly older version like 2.2.\nIn any event, how is an end user possibly going to know which of\nElectrum's (or any other SPV wallet's) versions are \"the minimum\nrequired for safety?\" (so as to know they would need to upgrade\nbecause problems)?  Is this just something where it's really down to\ncommunity announcements on websites and reddits and the like?\n\n\n\nOn 07/03/2015 10:17 PM, Raystonn wrote:\n> SPV clients are at risk in scenarios like this. We should encourage\n> them to check node versions against the minimum required for\n> safety. This check should be upgraded when new BIPs go into effect.\n> It won't help against malicious nodes. But it will help in cases\n> such as today's.\n> \n> On 3 Jul 2015 8:17 pm, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n> On Sat, Jul 4, 2015 at 3:11 AM, Raystonn <raystonn at hotmail.com>\n> wrote:\n>> We need some analysis on why this has happened.  It appears the\n> larger hashrate is violating BIP66.  Thus it appears the network\n> is rejecting this BIP, though potentially accidentally.  If this is\n> an accident, how is such a large portion of hashrate forking, and\n> what can we do to avoid this in the future?\n> \n> A near majority of the hashrate on the network appears to be SPV\n> mining.\n> \n> Btcnuggets was a non-upgraded miner that produced an invalid block \n> after the lock in and f2pool and antpool have been extending it. \n> Fortunately their extension contains no transactions (an artifact\n> of SPV mining).  Obviously a complete understanding is going to\n> take some time;  though I would note that this general failure mode\n> was one we were aware of and is part of the reason the treshold is\n> so high.\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVl3HCAAoJEGxwq/inSG8CXXIH/0s8o09UwRld+upM2pdAovMu\n1SBCg/JeK3jXvqJDjyAbYe22WbnW8ykrZdujo1MFGuoZWbgrrSXo581lpyCy3O6c\nSZYfAJee4eILzBl4MOwiAImcJBE3zOBCKT/DDaD1Qc8XvX6ReWJFYZgHsp/5F/BL\nVlwVV9505V3X2G+y+3XOPwLggCu6m0MkRgeUjNTwdn+j6Yg6/NjJbS+YDDgjZ9dM\ny3+uGA9Ek0bCLwjceUh8xAEwb+QUJrJgrNIo1vjuy+NRl18s1rUSx1YGTRkAD8eV\nspdGTmXClx/phNnsR072hsqYRSj0CzhV8cQnEAh3ZmB4/RMhcxeNDmGw4rFNwD4=\n=71aR\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-04T05:43:14",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/00001bc8/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-04T05:44:53",
                "message_text_only": "On Fri, Jul 03, 2015 at 10:43:14PM -0700, Raystonn wrote:\n> <p dir=\"ltr\">The SPV clients should be checking node versions.  This is for wallet authors to implement.  End-users should just stay current with their chosen wallet software.<br>\n\nNodes can and do lie about what version they are all the time.\n\nFact is, SPV means you're trusting other people to check the rules for\nyou. In this particular case bitcoinj could have - and should have -\nchecked the BIP66 soft-fork rules, but in general there's no easy\nsolution to this problem.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a43884e675843f56df90feffeabf56c4e7350f96b623f00\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/74dae0dc/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-04T15:18:19",
                "message_text_only": "On 07/04/2015 12:44 AM, Peter Todd wrote:\n> Fact is, SPV means you're trusting other people to check the rules for\n> you. In this particular case bitcoinj could have - and should have -\n> checked the BIP66 soft-fork rules, but in general there's no easy\n> solution to this problem.\n\nIn general, the situation can be improved if there existed proofs which\nvalidating full nodes could broadcast which would tell SPV nodes why the\nbranch it sees with the most proof of work is actually invalid.\n\nAs far as I can tell, producing such proofs is reasonably\nstraightforward for all cases except the case where a block is invalid\nbecause it contains a transaction which references a non-existent output.\n\nThe shortest proof that a particular transaction does not exist in the\nblockchain is the entire blockchain.\n\nIf each transaction input identified the block containing the referenced\noutpoint, then the proof of non-existence is either the block in\nquestion, or the list of block headers (to show that the block doesn't\nexist). That's a significant improvement in proof size over the entire\nblockchain.\n\nProving the non-existence of a particular transaction in a specific\nblock could be made easier for future blocks by requiring transactions\nto be ordered in the merkle tree by their hashes.  Then it would just\nrequire a few nodes in the tree to show that the transaction isn't in\nthe place where it should be.\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/b4ea50d8/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/b4ea50d8/attachment-0001.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-04T15:35:49",
                "message_text_only": "On Sat, Jul 4, 2015 at 4:18 PM, Justus Ranvier <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> In general, the situation can be improved if there existed proofs which\n> validating full nodes could broadcast which would tell SPV nodes why the\n> branch it sees with the most proof of work is actually invalid.\n>\n\nYeah, fraud proofs have been suggested lots of times in the past.\n\nIn this case, they weren't even needed.  Fully updated SPV clients should\nalso have rejected the invalid fork.  All the information required to\nreject it was in the header chain.\n\nThe problem wasn't SPV miners, it was SPV-miners where the SPV part wasn't\nupgraded to handle v3 blocks.\n\n\n> As far as I can tell, producing such proofs is reasonably\n> straightforward for all cases except the case where a block is invalid\n> because it contains a transaction which references a non-existent output.\n>\n\nEven that can be handled with UTXO set commitments.  If the UTXO tree is\nsorted you can prove that an entry doesn't exist.\n\nWhat cannot be handled is proving that a block is invalid if the\ntransaction data for the block is withheld.\n\n\n> If each transaction input identified the block containing the referenced\n> outpoint, then the proof of non-existence is either the block in\n> question, or the list of block headers (to show that the block doesn't\n> exist). That's a significant improvement in proof size over the entire\n> blockchain.\n>\n\nThat is reasonable.  Unconfirmed transactions can't include that info\nthough.\n\nIt could be committed in as an extra commitment.\n\nOne issue is that you need to prove of of these commitments too.\n\nA transaction which points to the wrong block would also be provable in the\nsame way.\n\n\n> Proving the non-existence of a particular transaction in a specific\n> block could be made easier for future blocks by requiring transactions\n> to be ordered in the merkle tree by their hashes.  Then it would just\n> require a few nodes in the tree to show that the transaction isn't in\n> the place where it should be.\n>\n\nYou could just have an extra merkle tree.\n\nYou would only need to include the block hashes for all transactions to\nshow that the two trees don't match.  That is 32 bytes per transaction\nrather than the full 200-500 bytes per transaction.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/c8cf948e/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-04T16:01:37",
                "message_text_only": "On 07/04/2015 10:35 AM, Tier Nolan wrote:\n> Even that can be handled with UTXO set commitments.  If the UTXO tree is\n> sorted you can prove that an entry doesn't exist.\n\nHow do we know if a committed UTXO set is valid? If a majority of the\nhashing power is willing to extend an invalid branch, it's reasonable to\nassume they'd be willing to commit an invalid UTXO set as well.\n\nIn order for the committed UTXO set to be reliable at a minimum it will\nneed to contain at a source block reference for each item in the set.\nThat would enable fraud proof to show that the committed UTXO set\ncontains invalid entries.\n\n>> If each transaction input identified the block containing the referenced\n>> outpoint, then the proof of non-existence is either the block in\n>> question, or the list of block headers (to show that the block doesn't\n>> exist). That's a significant improvement in proof size over the entire\n>> blockchain.\n>>\n> \n> That is reasonable.  Unconfirmed transactions can't include that info\n> though.\n> \n> It could be committed in as an extra commitment.\n\nI agree the information should be an extra commitment produced by the\nminer, rather than changing the format of the transaction, since the\nauthor of a transaction can't always know the required information ahead\nof time.\n\n> One issue is that you need to prove of of these commitments too.\n\nIf items in the the proof tree are required to be sorted, then it's easy\nto proof that an item is missing.\n\n\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/fdca1cb1/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/fdca1cb1/attachment-0001.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-04T17:58:46",
                "message_text_only": "On Sat, Jul 4, 2015 at 5:01 PM, Justus Ranvier <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> How do we know if a committed UTXO set is valid? If a majority of the\n> hashing power is willing to extend an invalid branch, it's reasonable to\n> assume they'd be willing to commit an invalid UTXO set as well.\n>\n\nYou can prove that it wasn't updated correctly.\n\nFor each transaction, the UTXO tree root before and after is committed.\n\nYou show the root before, and the root after and show that the after root\nis wrong.  You also need to include some merkle paths to prove the\ntransform.\n\n\n> If items in the the proof tree are required to be sorted, then it's easy\n> to proof that an item is missing.\n>\n\nYes, you can mostly get short proofs for each step, but you have to make\nsure your proofs are also provable.\n\nIt means going through everything that needs to be proved for a block to be\nvalid.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/51ecf7e0/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-04T23:33:24",
                "message_text_only": "On 07/04/2015 12:58 PM, Tier Nolan wrote:\n> Yes, you can mostly get short proofs for each step, but you have to make\n> sure your proofs are also provable.\n> \n> It means going through everything that needs to be proved for a block to be\n> valid.\n\nI think the problem is tractable if some reasonable assumptions are made\nabout the ability of SPV clients to perform validity checks that don't\ninvolve any state outside a single transaction (or block):\n\nhttps://gist.github.com/justusranvier/451616fa4697b5f25f60\n\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/52430715/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/52430715/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-05T01:32:16",
                "message_text_only": "On Sun, Jul 5, 2015 at 12:33 AM, Justus Ranvier <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> I think the problem is tractable if some reasonable assumptions are made\n> about the ability of SPV clients to perform validity checks that don't\n> involve any state outside a single transaction (or block):\n>\n> https://gist.github.com/justusranvier/451616fa4697b5f25f60\n>\n>\nI agree, it is definitely tractable.\n\nIf Bitcoin was being designed from scratch, it could be made even easier.\n\nAs things stand, the extra commitment information needs to be added to\nextra trees, which themselves need to be checked.\n\nThe \"prover\", in your example, should ideally store additional meta-data\nalong with each block.\n\nIf P2SH was made mandatory, then much of the transaction validation could\nbe performed on the transaction alone.\n\nBoth the signature and the public key would be included in the spending\ntransaction.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/c335ce43/attachment-0001.html>"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-04T05:46:29",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150703/3589410a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fork of invalid blocks due to BIP66 violations",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Raystonn",
                "Peter Todd",
                "Tier Nolan",
                "Gregory Maxwell",
                "Justus Ranvier"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 23911
        }
    },
    {
        "title": "[bitcoin-dev] July 4th 2015 invalid block fork postmortem BIP number request",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-04T06:15:06",
                "message_text_only": "Unless there are objections I intend to assign myself a BIP number for\na postmortem for this event.\n\nI've already been reaching out to parties involved in or impacted by\nthe fork to gather information, but I do not intend to begin drafting\nfor a few days (past expirence has shown that it takes time to gain\nmore complete understanding after an event).\n\nIf anyone is aware of services or infrastructure which were impacted\nby this which I should contact to gain insight for the analysis,\nplease contact me off-list.\n\nIf anyone is interested in contributing to an analysis, let me know\nand I'll link you to my repository when I begin drafting.  If you have\nbegun your own write up, please do not send it to me yet-- I'd rather\ncollect more data before drawing any analysis from it myself.\n\nThanks."
            }
        ],
        "thread_summary": {
            "title": "July 4th 2015 invalid block fork postmortem BIP number request",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 796
        }
    },
    {
        "title": "[bitcoin-dev] List of approved pools",
        "thread_messages": [
            {
                "author": "Geir Harald Hansen",
                "date": "2015-07-04T11:54:49",
                "message_text_only": "How do I get Bitminter on the list of approved pools at\nhttps://bitcoin.org/en/alert/2015-07-04-spv-mining ?\n\nRegards,\nGeir H. Hansen, Bitminter"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-04T12:19:09",
                "message_text_only": "You can open an issue or submit a pull request on GitHub:\nhttps://github.com/bitcoin-dot-org/bitcoin.org/blob/master/_alerts/2015-07-04-spv-mining.html\n\n- Jameson\n\nOn Sat, Jul 4, 2015 at 7:54 AM, Geir Harald Hansen <operator at bitminter.com>\nwrote:\n\n> How do I get Bitminter on the list of approved pools at\n> https://bitcoin.org/en/alert/2015-07-04-spv-mining ?\n>\n> Regards,\n> Geir H. Hansen, Bitminter\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/026a8689/attachment.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2015-07-04T15:42:32",
                "message_text_only": "On Sat, Jul 04, 2015 at 01:54:49PM +0200, Geir Harald Hansen wrote:\n> How do I get Bitminter on the list of approved pools at\n> https://bitcoin.org/en/alert/2015-07-04-spv-mining ?\n\nPlease add known good/bad pools here:\n\n    https://en.bitcoin.it/wiki/Comparison_of_mining_pools#SPV_Mining_.2F_Old_Bitcoin_Core\n\nI will update the Bitcoin.org alert to point there.\n\nWe're especially in need of information about pools that are still SPV\nmining so that we can make accurate guesses about how many additional\nconfirmations are needed while the situation persists.\n\nThank you,\n\n-Dave\n-- \nDavid A. Harding\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/4d3f423d/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "List of approved pools",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jameson Lopp",
                "Geir Harald Hansen",
                "David A. Harding"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1795
        }
    },
    {
        "title": "[bitcoin-dev] [BIP draft] Flexible Offer and Acceptance Smart Contract",
        "thread_messages": [
            {
                "author": "Michael Ruddy",
                "date": "2015-07-05T02:30:41",
                "message_text_only": "I first submitted this idea as an example usage for BIP65.\nThe feedback was that this might be large enough to be a BIP on its own.\nSo, I'm submitting here for review and feedback.\n\nIn short, this informational BIP describes two Bitcoin script constructs\nthat utilize the CHECKLOCKTIMEVERIFY opcode to create a smart contract that\nallows a specific offer, with flexible expiration time, to be presented and\neither accepted (optionally into escrow), or withdrawn/rejected.\n\nThe BIP draft can be found at:\n\n\nhttps://github.com/mruddy/bips/blob/bip-xx-offer-accept-escrow/bip-offer-accept-escrow.mediawiki\n\nAn small example usage implementation can be found at:\n\n  https://github.com/mruddy/flexpiration\n\n\n- Michael Ruddy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150704/afa1e4fa/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Flexible Offer and Acceptance Smart Contract",
            "categories": [
                "bitcoin-dev",
                "BIP draft"
            ],
            "authors": [
                "Michael Ruddy"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 901
        }
    },
    {
        "title": "[bitcoin-dev] BIP 68 (Relative Locktime) bug",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-07-05T15:00:38",
                "message_text_only": "BIP 68 uses nSequence to specify relative locktime, but nSequence also\ncontinues to condition the transaction-level locktime.\n\nThis dual effect will prevent a transaction from having an effective\nnLocktime without also requiring at least one of its inputs to be mined\nat least one block (or one second) ahead of its parent.\n\nThe fix is to shift the semantics so that nSequence = MAX_INT - 1\nspecifies 0 relative locktime, rather than 1.  This change will also\npreserve the semantics of transactions that have already been created\nwith the specific nSequence value MAX_INT - 1 (for example all\ntransactions created by the bitcoin core wallet starting in 0.11)."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-05T16:17:19",
                "message_text_only": "Can you construct an example? Are there use cases where there is a need for\nan enforced lock time in a transaction with inputs that are not confirmed\nat the time the lock time expires?\nOn Jul 5, 2015 8:00 AM, \"Tom Harding\" <tomh at thinlink.com> wrote:\n\n> BIP 68 uses nSequence to specify relative locktime, but nSequence also\n> continues to condition the transaction-level locktime.\n>\n> This dual effect will prevent a transaction from having an effective\n> nLocktime without also requiring at least one of its inputs to be mined\n> at least one block (or one second) ahead of its parent.\n>\n> The fix is to shift the semantics so that nSequence = MAX_INT - 1\n> specifies 0 relative locktime, rather than 1.  This change will also\n> preserve the semantics of transactions that have already been created\n> with the specific nSequence value MAX_INT - 1 (for example all\n> transactions created by the bitcoin core wallet starting in 0.11).\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/1a2b9b0d/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-07-05T16:21:44",
                "message_text_only": "I would say yes. Just putting a locktime in transaction may help against\nfee sniping, even in transactions that are allowed to be mined at the same\ntime as some of their dependencies?\nOn Jul 5, 2015 6:17 PM, \"Mark Friedenbach\" <mark at friedenbach.org> wrote:\n\n> Can you construct an example? Are there use cases where there is a need\n> for an enforced lock time in a transaction with inputs that are not\n> confirmed at the time the lock time expires?\n> On Jul 5, 2015 8:00 AM, \"Tom Harding\" <tomh at thinlink.com> wrote:\n>\n>> BIP 68 uses nSequence to specify relative locktime, but nSequence also\n>> continues to condition the transaction-level locktime.\n>>\n>> This dual effect will prevent a transaction from having an effective\n>> nLocktime without also requiring at least one of its inputs to be mined\n>> at least one block (or one second) ahead of its parent.\n>>\n>> The fix is to shift the semantics so that nSequence = MAX_INT - 1\n>> specifies 0 relative locktime, rather than 1.  This change will also\n>> preserve the semantics of transactions that have already been created\n>> with the specific nSequence value MAX_INT - 1 (for example all\n>> transactions created by the bitcoin core wallet starting in 0.11).\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/f360820c/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-05T16:25:17",
                "message_text_only": "Since you're removing a working capability, you should be the one to\nprove it is unneeded.\n\nBut the simple example is the case where the input is also locked.\n\n\nOn 7/5/2015 9:17 AM, Mark Friedenbach wrote:\n>\n> Can you construct an example? Are there use cases where there is a\n> need for an enforced lock time in a transaction with inputs that are\n> not confirmed at the time the lock time expires?\n>\n> On Jul 5, 2015 8:00 AM, \"Tom Harding\" <tomh at thinlink.com\n> <mailto:tomh at thinlink.com>> wrote:\n>\n>     BIP 68 uses nSequence to specify relative locktime, but nSequence also\n>     continues to condition the transaction-level locktime.\n>\n>     This dual effect will prevent a transaction from having an effective\n>     nLocktime without also requiring at least one of its inputs to be\n>     mined\n>     at least one block (or one second) ahead of its parent.\n>\n>     The fix is to shift the semantics so that nSequence = MAX_INT - 1\n>     specifies 0 relative locktime, rather than 1.  This change will also\n>     preserve the semantics of transactions that have already been created\n>     with the specific nSequence value MAX_INT - 1 (for example all\n>     transactions created by the bitcoin core wallet starting in 0.11).\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/7e1dd1b2/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-05T17:07:12",
                "message_text_only": "Note that you can put 0 in the sequence number field and it would work just\nas expected under the old rules. I will perhaps suggest instead that\nBitcoin Core post-0.11 switch to doing this instead for that case.\n\nOn Sun, Jul 5, 2015 at 8:00 AM, Tom Harding <tomh at thinlink.com> wrote:\n\n> BIP 68 uses nSequence to specify relative locktime, but nSequence also\n> continues to condition the transaction-level locktime.\n>\n> This dual effect will prevent a transaction from having an effective\n> nLocktime without also requiring at least one of its inputs to be mined\n> at least one block (or one second) ahead of its parent.\n>\n> The fix is to shift the semantics so that nSequence = MAX_INT - 1\n> specifies 0 relative locktime, rather than 1.  This change will also\n> preserve the semantics of transactions that have already been created\n> with the specific nSequence value MAX_INT - 1 (for example all\n> transactions created by the bitcoin core wallet starting in 0.11).\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/eb52ca21/attachment-0001.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-05T19:50:59",
                "message_text_only": "Or you could flip the definition of your activation bit.  That would\navoid the inversion and put relative locktimes outside the realm of both\nthe MAX_INT and MAX_INT - 1 values.\n\nIt would also allow an explicit relative locktime of 0, which would help\napplications avoid accidentally finalizing the whole transaction when\nthey only meant to not impose a relative locktime on one input.\n\n\nOn 7/5/2015 10:07 AM, Mark Friedenbach wrote:\n> Note that you can put 0 in the sequence number field and it would work\n> just as expected under the old rules. I will perhaps suggest instead\n> that Bitcoin Core post-0.11 switch to doing this instead for that case.\n>\n> On Sun, Jul 5, 2015 at 8:00 AM, Tom Harding <tomh at thinlink.com\n> <mailto:tomh at thinlink.com>> wrote:\n>\n>     BIP 68 uses nSequence to specify relative locktime, but nSequence also\n>     continues to condition the transaction-level locktime.\n>\n>     This dual effect will prevent a transaction from having an effective\n>     nLocktime without also requiring at least one of its inputs to be\n>     mined\n>     at least one block (or one second) ahead of its parent.\n>\n>     The fix is to shift the semantics so that nSequence = MAX_INT - 1\n>     specifies 0 relative locktime, rather than 1.  This change will also\n>     preserve the semantics of transactions that have already been created\n>     with the specific nSequence value MAX_INT - 1 (for example all\n>     transactions created by the bitcoin core wallet starting in 0.11).\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/c0628db2/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-05T19:57:00",
                "message_text_only": "Never mind that last bit.  I overlooked that the other inputs can\nindependently make the tx non-final.\n\nOn 7/5/2015 12:50 PM, Tom Harding wrote:\n>\n> It would also allow an explicit relative locktime of 0, which would\n> help applications avoid accidentally finalizing the whole transaction\n> when they only meant to not impose a relative locktime on one input.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/d3c22ca9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 68 (Relative Locktime) bug",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pieter Wuille",
                "Tom Harding",
                "Mark Friedenbach"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 9267
        }
    },
    {
        "title": "[bitcoin-dev] Thoughts on Forks, Scalability, and other Bitcoin inconveniences.",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-05T18:50:23",
                "message_text_only": "Blockchain validation has become too expensive to properly secure the\nnetwork as per our original security model. The level of validation\nrequired to comply with our security model has become completely\nimpractical for most use cases. Block space is still cheap only because of\nblock reward subsidy (which decreases exponentially with time). The\neconomics are already completely jacked - larger blocks will only worsen\nthis disparity.\n\nThe only practical way for the network to function at present (and what has\nessentially ended up happening, if often tacitly) is by introducing trust,\nin validators, miners, relayers, explorer websites, online wallets,\netc...which in and of itself wouldn't be the end of the world were it not\nfor the fact that the raison d'etre of bitcoin is trustlessness - and the\nsecurity model is very much based on this idea. Because of this, there's\nbeen a tendency to deny that bitcoin cannot presently scale without trust.\nThis is horrible because our entire security model has gone out the\nwindow...and has been replaced with something that isn't specified at all!\n\nWe don't really know the boundaries of our model, as the fork a couple of\ndays ago demonstrated. Right now we're basically trusting a few devs and\nsome mining pool operators that until now have been willing to cooperate\nfor the benefit of the network. It is dangerous to assume this will\ncontinue perpetually. Even assuming the best intentions, an incident might\noccur that this cooperation cannot easily repair.\n\nWe need to either solve the validation cost/bottleneck issue...or we need\nto construct a new security model that takes these trust assumptions into\naccount.\n\n- Eric Lombrozo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/d52e2a17/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-05T19:55:47",
                "message_text_only": "I should clarify that by \"most use cases\" I'm not envisioning a bunch of\ncryptogeeks [us, or at least myself and a few of us] happily buying up hard\ndisks, waiting hours, days, weeks to spawn up new full nodes. I'm\nenvisioning a world where every person has access to this technology and\nfinds it practical, convenient, and safe ti use.\n\n- Eric Lombrozo\nOn Jul 5, 2015 11:50 AM, \"Eric Lombrozo\" <elombrozo at gmail.com> wrote:\n\n> Blockchain validation has become too expensive to properly secure the\n> network as per our original security model. The level of validation\n> required to comply with our security model has become completely\n> impractical for most use cases. Block space is still cheap only because of\n> block reward subsidy (which decreases exponentially with time). The\n> economics are already completely jacked - larger blocks will only worsen\n> this disparity.\n>\n> The only practical way for the network to function at present (and what\n> has essentially ended up happening, if often tacitly) is by introducing\n> trust, in validators, miners, relayers, explorer websites, online wallets,\n> etc...which in and of itself wouldn't be the end of the world were it not\n> for the fact that the raison d'etre of bitcoin is trustlessness - and the\n> security model is very much based on this idea. Because of this, there's\n> been a tendency to deny that bitcoin cannot presently scale without trust.\n> This is horrible because our entire security model has gone out the\n> window...and has been replaced with something that isn't specified at all!\n>\n> We don't really know the boundaries of our model, as the fork a couple of\n> days ago demonstrated. Right now we're basically trusting a few devs and\n> some mining pool operators that until now have been willing to cooperate\n> for the benefit of the network. It is dangerous to assume this will\n> continue perpetually. Even assuming the best intentions, an incident might\n> occur that this cooperation cannot easily repair.\n>\n> We need to either solve the validation cost/bottleneck issue...or we need\n> to construct a new security model that takes these trust assumptions into\n> account.\n>\n> - Eric Lombrozo\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/b7b3df23/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-05T20:33:40",
                "message_text_only": "On 07/05/2015 01:50 PM, Eric Lombrozo wrote:\n> The only practical way for the network to function at present (and what has\n> essentially ended up happening, if often tacitly) is by introducing trust,\n> in validators, miners, relayers, explorer websites, online wallets,\n> etc...which in and of itself wouldn't be the end of the world were it not\n> for the fact that the raison d'etre of bitcoin is trustlessness - and the\n> security model is very much based on this idea. Because of this, there's\n> been a tendency to deny that bitcoin cannot presently scale without trust.\n> This is horrible because our entire security model has gone out the\n> window...and has been replaced with something that isn't specified at all!\n\nWhen I read this, I get the impression that you (and possibly many\nothers) never actually understood the Bitcoin security model in the\nfirst place.\n\nBitcoin is a digital cash system that prevents double spending without\nusing a trusted third party.\n\nMore specifically, successful double spending in Bitcoin requires an\nattacker to pay a proof of work cost that exceeds the cumulative proof\nof work paid by all non-attackers since the original spend.\n\nThe security model holds for any user who has access to the complete\nblockchain, and currently does not hold for all users who do not. An\nattacker can double spend without paying the full PoW cost the security\nmodel requires if users do not have a full copy of the blockchain which\nwhich to verify the attacker's blocks.\n\nThat's a problem, but it's not an unfixable problem.\n\nThe reason an attacker can fool SPV clients into accepting invalid\nblocks is because there exists no mechanism via which honest nodes can\nprove the invalidity of blocks.\n\nImplement that mechanism, and the security of SPV clients will far more\nclosely resemble the security of full nodes.\n\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/1fe13a75/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/1fe13a75/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-05T20:53:51",
                "message_text_only": "Perhaps I didn't write that so well if I gave that impression. Perhaps\ntaking a look at some of my work in this space would make you think\notherwise. (yes, I've implemented an entire SPV stack from scratch...look\nit up.)\n\nBut all patronizing aside, your claim that \"the reason an attacker can fool\nSPV clients into accepting invalid blocks is because there exists no\nmechanism via which honest nodes can prove the invalidity of blocks\" is\nexactly to the point...and building such a mechanism would address the\nfirst of the two options I give: make it cheap to securely validate or take\ntrust into account.\n\n- Eric Lombrozo\n\nOn Jul 5, 2015 1:34 PM, \"Justus Ranvier\" <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> On 07/05/2015 01:50 PM, Eric Lombrozo wrote:\n> > The only practical way for the network to function at present (and what\n> has\n> > essentially ended up happening, if often tacitly) is by introducing\n> trust,\n> > in validators, miners, relayers, explorer websites, online wallets,\n> > etc...which in and of itself wouldn't be the end of the world were it not\n> > for the fact that the raison d'etre of bitcoin is trustlessness - and the\n> > security model is very much based on this idea. Because of this, there's\n> > been a tendency to deny that bitcoin cannot presently scale without\n> trust.\n> > This is horrible because our entire security model has gone out the\n> > window...and has been replaced with something that isn't specified at\n> all!\n>\n> When I read this, I get the impression that you (and possibly many\n> others) never actually understood the Bitcoin security model in the\n> first place.\n>\n> Bitcoin is a digital cash system that prevents double spending without\n> using a trusted third party.\n>\n> More specifically, successful double spending in Bitcoin requires an\n> attacker to pay a proof of work cost that exceeds the cumulative proof\n> of work paid by all non-attackers since the original spend.\n>\n> The security model holds for any user who has access to the complete\n> blockchain, and currently does not hold for all users who do not. An\n> attacker can double spend without paying the full PoW cost the security\n> model requires if users do not have a full copy of the blockchain which\n> which to verify the attacker's blocks.\n>\n> That's a problem, but it's not an unfixable problem.\n>\n> The reason an attacker can fool SPV clients into accepting invalid\n> blocks is because there exists no mechanism via which honest nodes can\n> prove the invalidity of blocks.\n>\n> Implement that mechanism, and the security of SPV clients will far more\n> closely resemble the security of full nodes.\n>\n>\n> --\n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/c247cb61/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-05T21:05:43",
                "message_text_only": "On 07/05/2015 03:53 PM, Eric Lombrozo wrote:\n> Perhaps I didn't write that so well if I gave that impression. Perhaps\n> taking a look at some of my work in this space would make you think\n> otherwise. (yes, I've implemented an entire SPV stack from scratch...look\n> it up.)\n\nI get concerned when I hear statement like \"the raison d'etre of bitcoin\nis trustlessness\" because it implies that Bitcoin promises infinite\nsecurity, which has never been the case.\n\nI don't think we can meaningfully discuss Bitcoin security issues if\nevery proposal is compared to a straw standard of perfection which is\nachievable. When everybody expects infinite security then the perfect\nturns into the enemy of the good (and the achievable).\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/d55e44a6/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/d55e44a6/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-05T21:08:12",
                "message_text_only": "I was saying that somewhat tongue-in-cheek...sorry that didn't come through\nin the text.\nOn Jul 5, 2015 2:05 PM, \"Justus Ranvier\" <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> On 07/05/2015 03:53 PM, Eric Lombrozo wrote:\n> > Perhaps I didn't write that so well if I gave that impression. Perhaps\n> > taking a look at some of my work in this space would make you think\n> > otherwise. (yes, I've implemented an entire SPV stack from scratch...look\n> > it up.)\n>\n> I get concerned when I hear statement like \"the raison d'etre of bitcoin\n> is trustlessness\" because it implies that Bitcoin promises infinite\n> security, which has never been the case.\n>\n> I don't think we can meaningfully discuss Bitcoin security issues if\n> every proposal is compared to a straw standard of perfection which is\n> achievable. When everybody expects infinite security then the perfect\n> turns into the enemy of the good (and the achievable).\n>\n> --\n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150705/4861c8cd/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Thoughts on Forks, Scalability, and other Bitcoin inconveniences.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Justus Ranvier"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 12957
        }
    },
    {
        "title": "[bitcoin-dev] Introduce N testnet chains to test different block sizes",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-06T16:50:37",
                "message_text_only": "I have created the following PR that simplifies testing of different\nblock sizes and (if it were merged) would also slightly simplify a\nfuture block size change hardfork.\n\nhttps://github.com/bitcoin/bitcoin/pull/6382\n\nI hope someone finds this useful. Please, post to github if you find\nany issues. But, please, don't discuss the block size issue itself in\nthis post or the PR, the size is simply -blocksize.\n\nI repeat the text here:\n\nIt would be generally good to have more people collecting data and\nconduction simulations related to different consensus maximum block sizes.\nThis PR attempts to simplify that work.\nEven if it may take long until it is merged (because it requires many\nlittle steps to be taken first), this branch (or a fork of it) can be\nused right now for\ntesting purposes.\n\nOne can use it, for example, like this: ```./src/qt/bitcoin-qt\n-chain=sizetest -debug -printtoconsole -gen=1 -genproclimit=20\n-blocksize=2000000```\n\nI will rebase and update the list of dependencies accordingly as\nthings get merged.\n\nDependencies:\n\n- Chainparams: Translations: DRY: options and error strings #6235\n- CTestNetParams and CRegTestParams extend directly from CChainParams #6381"
            }
        ],
        "thread_summary": {
            "title": "Introduce N testnet chains to test different block sizes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1185
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin philosophical musings and pressures 7 years in [drifted from: txrate, forking, etc]",
        "thread_messages": [
            {
                "author": "grarpamp",
                "date": "2015-07-07T19:21:50",
                "message_text_only": "> Then again maybe I am missing the key reasoning for this fork.\n\nPeople often miss the fundamental reasons Bitcoin exists,\nthe various conjoined ethos behind its creation. This is to be\nexpected, it's so far ouside any thinking or life process they've\never had to do or been exposed to. It's also partly why figuring\nout what to do or code or adopt, is hard. And certainly not made\nany easier by the long term need and the current value at stake.\n\nCreating a system in which a Botswanan can give a few bits\nof their impoverished wages to their friend in Mumbai without\nit being gated, permitted, hierarchied, middlemanned, taxed,\ntracked, stolen and feed-upon until pointless... this simply\ndoesn't compute for these people. Their school of thought is\ncentralization, profit, control and oppression. So of course they\nsee txrate ramming up against an artificial wall as perfectly fine,\nit enables and perpetuates their legacy ways.\n\nRegardless of whichever technical way the various walls are torn down,\nwhat's important is that they are. And that those who are thinking\noutside the box do, and continue to, take time to school these\nlegacy people such that they might someday become enlightened\nand join the ethos.\n\nOtherwise might as well work for ICBC, JPMC, HSBC, BNP, MUFG\nand your favorite government. Probably not as much fun though."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin philosophical musings and pressures 7 years in ",
            "categories": [
                "bitcoin-dev",
                "drifted from: txrate, forking, etc"
            ],
            "authors": [
                "grarpamp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1341
        }
    },
    {
        "title": "[bitcoin-dev] Upcoming DOS vulnerability announcements for Bitcoin Core",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-07T23:14:18",
                "message_text_only": "On Sat, Jun 27, 2015 at 6:21 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On July 7th I will be making public details of several serious denial of\n> service vulnerabilities which have fixed in recent versions of Bitcoin Core,\n> including CVE-2015-3641.\n>\n> I strongly recommend anyone running production nodes exposed to inbound\n> connections from the internet upgrade to 0.10.2 as soon as possible.\n>\n> Upgrading older systems, especially miners, is also important due to the\n> BIP66 soft-fork which is about to reach enforcing status, see also:\n> http://sourceforge.net/p/bitcoin/mailman/message/34199290/\n\n\nJust an update here-- I'm delaying this somewhat due to recent network\nturbulance and unusual attempted DOS attack activity on relayed\ninfrastructure.\nI've also had some requests from other cryptocurrency implementors to\nuse a somewhat longer horizon here."
            }
        ],
        "thread_summary": {
            "title": "Upcoming DOS vulnerability announcements for Bitcoin Core",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 874
        }
    },
    {
        "title": "[bitcoin-dev] [Bitcoin-development] Mining centralization pressure from non-uniform propagation speed",
        "thread_messages": [
            {
                "author": "Mashuri Clark",
                "date": "2015-07-08T19:15:08",
                "message_text_only": "Would it be easy to code in another variable?  I think it would be useful to\nknow how a per-node imposed max block size limit (with this limit, a node\nwould still accept all incoming blocks, but refuse to relay any above a\nspecified size) would affect orphan rates and reorgs.  Example: What would\nthe orphan rate be of an 8MB block if 80% of all nodes refuse to relay it?\nThe resulting data would provide insight into how nodes can enforce a\ndynamic maximum block size in absence of a hard limit.\n\n \n\nI would do this myself but I am not a coder.  I'm hoping someone here who is\ncapable finds this data worth pursuing.\n\n \n\n--\n\nMC\n\n \n\n\n\n---\nThis email has been checked for viruses by Avast antivirus software.\nhttps://www.avast.com/antivirus\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150708/52b2bb7f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Mining centralization pressure from non-uniform propagation speed",
            "categories": [
                "bitcoin-dev",
                "Bitcoin-development"
            ],
            "authors": [
                "Mashuri Clark"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 923
        }
    },
    {
        "title": "[bitcoin-dev] Can we penalize peers who relay rejected replacement txs?",
        "thread_messages": [
            {
                "author": "Matt Whitlock",
                "date": "2015-07-09T23:55:00",
                "message_text_only": "I'm presently running my full node with Peter Todd's full replace-by-fee patch set [1]. I am seeing a LOT of messages in the log about replacement transactions being rejected due to their paying less in fees than the transactions they would replace. I understand that this could happen legitimately from time to time, due to my node's receiving a replacing transaction prior to receiving the replaced transaction; however, due to the ongoing spam attack, I am seeing a steady stream of these rejection messages, dozens per second at times. I am wondering if each replacement rejection ought to penalize the peer who relayed the offending transaction, and if the penalty builds up enough, then the peer could be temporarily banned, similar to how other \"misbehaving\" peers are treated.\n\n[1] https://github.com/petertodd/bitcoin/commits/replace-by-fee-v0.10.2"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-10T01:57:27",
                "message_text_only": "Replace-by-anything can only work if conflicts are relayed, so the\nsolution is not to act against the peer.\n\nAlex Morcos offered a suggestion on IRC -- track recently-rejected\ntxid's and don't getdata them.  The idea sounds good to me.\n\n\nOn 7/9/2015 4:55 PM, Matt Whitlock wrote:\n> I'm presently running my full node with Peter Todd's full replace-by-fee patch set [1]. I am seeing a LOT of messages in the log about replacement transactions being rejected due to their paying less in fees than the transactions they would replace. I understand that this could happen legitimately from time to time, due to my node's receiving a replacing transaction prior to receiving the replaced transaction; however, due to the ongoing spam attack, I am seeing a steady stream of these rejection messages, dozens per second at times. I am wondering if each replacement rejection ought to penalize the peer who relayed the offending transaction, and if the penalty builds up enough, then the peer could be temporarily banned, similar to how other \"misbehaving\" peers are treated.\n>\n> [1] https://github.com/petertodd/bitcoin/commits/replace-by-fee-v0.10.2\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-10T02:00:45",
                "message_text_only": "On Thursday, 9 July 2015, at 6:57 pm, Tom Harding wrote:\n> Replace-by-anything can only work if conflicts are relayed, so the\n> solution is not to act against the peer.\n> \n> Alex Morcos offered a suggestion on IRC -- track recently-rejected\n> txid's and don't getdata them.  The idea sounds good to me.\n\nWhile that's probably a good idea, it wouldn't do much to reduce the load. I am not seeing many repeated transaction hashes among the \"rejected replacement\" messages in my log."
            },
            {
                "author": "Raystonn",
                "date": "2015-07-10T00:42:06",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150709/64a11931/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-10T01:12:14",
                "message_text_only": "Um, it's called \"replace-by-fee\" for a reason. The transaction [set] paying the highest fee [rate] is always the one that will be accepted. You can't use the order in which transactions were received to determine which one is the \"replacing\" transaction and which is/are the \"replaced\" transaction(s) because order is not defined for transactions in the mempool. (Ordering transactions is precisely why we must have a block chain.)\n\n\nOn Thursday, 9 July 2015, at 5:42 pm, Raystonn wrote:\n> It is a mistake for RBF to assume a transaction with lower fee is invalid.  If I paid a higher fee to get a one hour confirmation in the current congestion, I might want to drop back to a lower fee if I see the spam stop.\n> \n> On 9 Jul 2015 4:55 pm, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > I'm presently running my full node with Peter Todd's full replace-by-fee patch set [1]. I am seeing a LOT of messages in the log about replacement transactions being rejected due to their paying less in fees than the transactions they would replace. I understand that this could happen legitimately from time to time, due to my node's receiving a replacing transaction prior to receiving the replaced transaction; however, due to the ongoing spam attack, I am seeing a steady stream of these rejection messages, dozens per second at times. I am wondering if each replacement rejection ought to penalize the peer who relayed the offending transaction, and if the penalty builds up enough, then the peer could be temporarily banned, similar to how other \"misbehaving\" peers are treated.\n> > \n> > [1] https://github.com/petertodd/bitcoin/commits/replace-by-fee-v0.10.2"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-10T01:18:28",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150709/27c792da/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-10T01:36:38",
                "message_text_only": "My reasons for wanting this are two-fold:\n\n1.) To reduce the CPU load due to Bitcoind. Presently I am seeing periods of time in which Bitcoind is pegging a CPU core. Given that the flood of spam transactions appears mostly to be invalid under RBF rules, I would like to cut off the flood coming into my node by temp-banning the peers who are relaying invalid replacement transactions.\n\n2.) If enough other nodes also implement this banning rule, then we could potentially cut off the flood of spam right at the source. Then the spammer would be forced to build and publish *non-conflicting* transactions to continue the attack, and this would be much costlier to maintain, as then *all* of the spam transactions could eventually have their fees collected by miners, not just some non-conflicting subset of the spam.\n\n\nOn Thursday, 9 July 2015, at 6:27 pm, Patrick Strateman wrote:\n> What do you gain by banning peers doing this?\n> \n> I'm thinking practically nothing.\n> \n> On Jul 9, 2015 4:55 PM, \"Matt Whitlock\" <bip at mattwhitlock.name> wrote:\n> \n> > I'm presently running my full node with Peter Todd's full replace-by-fee\n> > patch set [1]. I am seeing a LOT of messages in the log about replacement\n> > transactions being rejected due to their paying less in fees than the\n> > transactions they would replace. I understand that this could happen\n> > legitimately from time to time, due to my node's receiving a replacing\n> > transaction prior to receiving the replaced transaction; however, due to\n> > the ongoing spam attack, I am seeing a steady stream of these rejection\n> > messages, dozens per second at times. I am wondering if each replacement\n> > rejection ought to penalize the peer who relayed the offending transaction,\n> > and if the penalty builds up enough, then the peer could be temporarily\n> > banned, similar to how other \"misbehaving\" peers are treated.\n> >\n> > [1] https://github.com/petertodd/bitcoin/commits/replace-by-fee-v0.10.2"
            }
        ],
        "thread_summary": {
            "title": "Can we penalize peers who relay rejected replacement txs?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Matt Whitlock",
                "Raystonn",
                "Tom Harding"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 6563
        }
    },
    {
        "title": "[bitcoin-dev] A Proposed Compromise to the Block Size Limit",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-07-10T02:55:15",
                "message_text_only": ">> On 6/28/2015 9:32 AM, Raystonn . wrote:\n>>> Write coalescing works fine when you have multiple writes headed to\n>>> the same (contiguous) location.  Will lightning be useful when we\n>>> have more unique transactions being sent to different addresses, and\n>>> not just multiple transactions between the same sender and address? \n>>> I have doubts. \n\n> On 6/28/2015 10:29 AM, Gavin Andresen wrote:\n>> Don't get me wrong, I think the Lightning Network is a fantastic idea\n>> and a great experiment and will likely be used for all sorts of great\n>> payment innovations (micropayments for bandwidth maybe, or maybe\n>> paying workers by the hour instead of at the end of the month). But I\n>> don't think it is a scaling solution for the types of payments the\n>> Bitcoin network is handling today.\n\nOn 6/28/2015 11:58 AM, Adam Back wrote:\n> Lightning allows Bitcoin to scale even without a block-size increase,\n> and therefore considerably impacts any calculation of how much\n> block-size is required.  In this light you appear to have been\n> attempting to push through a change without even understanding the\n> alternatives or greater ecosystem.\n\n\nLightning Network (LN) does not \"allow Bitcoin to scale\".  LN is a\nbitcoin application.  The properties of LN are dependent on bitcoin, but\nthey are distinct from bitcoin.\n\nIn particular, an under-appreciated aspect of LN is that in order for\nyour interactions to be consolidated and consume less blockchain space,\nyou must give up significant control of the money you send AND the money\nyou receive.\n\nIf either sender or receiver wants to record a transaction in the\nblockchain immediately, there is no space savings versus bitcoin.  More\nblockchain space is actually, used, due to LN overhead.\n\nIf both sender and receiver are willing to delay recording in the\nblockchain, then the situation is analogous to using banks.  Sender's\nhub pays from sender channel, to receiver channel at receiver's hub.\n\nNeither side fully relinquishes custody of the money in their multisig\npayment hub channels -- this is an improvement on traditional bank\naccounts -- BUT...\n\n  - Sender is required to lock funds under his hub's signature - this is\nwell discussed\n  - Less well discussed: *to achieve any consolidation at all, receiver\nmust ALSO be willing to lock received funds under his hub's signature*\n\nI'll put it another way.  LN only \"solves\" the scaling problem if\nreceiver's hub has pre-commited sufficient funds to cover the receipts,\nAND if receiver endures for a period of time -- directly related to the\nscaling factor -- being unable to spend money received UNLESS his\npayment hub signs off on his spend instructions."
            }
        ],
        "thread_summary": {
            "title": "A Proposed Compromise to the Block Size Limit",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tom Harding"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2662
        }
    },
    {
        "title": "[bitcoin-dev] Why not Child-Pays-For-Parent?",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2015-07-10T16:09:43",
                "message_text_only": "Hey guys,\n\nWith all the recent congestion and discussion regarding FSS-RBF, I was wondering if there good reasons not to have CPFP as a default policy? Or is it?\n\nI was also wondering, with CPFP, should the transaction fee be based on total transactions size, or the sum of each transaction\u2019s required fee? For example, a third transaction C whose unconfirmed utxo from transaction B has an unconfirmed utxo in transaction A (all of A\u2019s inputs are confirmed), with each A, B and C being ~300bytes, should C\u2019s transaction fee be 0.0001 btc for the ~1kb it is about to commit to the blockchain, or 0.0003 btc for the 3 transactions it is going to commit.\n\nI tried to test it out a few days ago, sending 0.0008 btc without any fee, then that utxo into another transaction w/ 0.0001 btc. It still hasn\u2019t confirmed, which could be any of: a) CPFP doesn\u2019t have enough hash power, b) the amounts are too small, c) the coins are too new, d) the fee should have actually been 0.0002 btc, e) the congestion is just too great; or some combination.\n\nJust curious as whatnot\u2026\n\nThanks,\nRicMoo\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>\nwww: http://GeneticMistakes.com <http://geneticmistakes.com/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/1dd11f95/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-10T16:13:29",
                "message_text_only": "CPFP is interesting, but it does not fully cover the case it is trying to\naddress:   If TX_a goes out without sufficient fee, sending out a new TX_b\nwill not help TX_a suddenly reach nodes/miners that ignored TX_a.\n\n\nOn Fri, Jul 10, 2015 at 12:09 PM, Richard Moore <me at ricmoo.com> wrote:\n\n> Hey guys,\n>\n> With all the recent congestion and discussion regarding FSS-RBF, I was\n> wondering if there good reasons not to have CPFP as a default policy? Or is\n> it?\n>\n> I was also wondering, with CPFP, should the transaction fee be based on\n> total transactions size, or the sum of each transaction\u2019s required fee? For\n> example, a third transaction C whose unconfirmed utxo from transaction B\n> has an unconfirmed utxo in transaction A (all of A\u2019s inputs are confirmed),\n> with each A, B and C being ~300bytes, should C\u2019s transaction fee be 0.0001\n> btc for the ~1kb it is about to commit to the blockchain, or 0.0003 btc for\n> the 3 transactions it is going to commit.\n>\n> I tried to test it out a few days ago, sending 0.0008 btc without any fee,\n> then that utxo into another transaction w/ 0.0001 btc. It still hasn\u2019t\n> confirmed, which could be any of: a) CPFP doesn\u2019t have enough hash power,\n> b) the amounts are too small, c) the coins are too new, d) the fee should\n> have actually been 0.0002 btc, e) the congestion is just too great; or some\n> combination.\n>\n> Just curious as whatnot\u2026\n>\n> Thanks,\n> RicMoo\n>\n> .\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n>\n> Richard Moore ~ Founder\n> Genetic Mistakes Software inc.\n> phone: (778) 882-6125\n> email: ricmoo at geneticmistakes.com\n> www: http://GeneticMistakes.com\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/5fb1e521/attachment.html>"
            },
            {
                "author": "Richard Moore",
                "date": "2015-07-10T16:25:20",
                "message_text_only": "By ignored, do you mean the nodes/miners didn\u2019t even include the low fee transaction in their memory pools, so would no longer have access to it? If a node decides to not include it in its memory pool for this reason, I guess it won\u2019t send out any INV messages either?\n\nCould the broadcaster of TX_b rebroadcast TX_a? Then I guess any node that did add it to its memory pool would realize it\u2019s not new and not rebroadcast it to those who didn\u2019t, so it won\u2019t propagate\u2026 Although, after receiving the orphan transaction TX_b, it could re-(pay attention) to an INV with TX_a (for a short-ish time to prevent further DoS vectors)? Assuming the sender of TX_b has a copy of TX_a\u2026\n\n\n> On Jul 10, 2015, at 12:13 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> \n> CPFP is interesting, but it does not fully cover the case it is trying to address:   If TX_a goes out without sufficient fee, sending out a new TX_b will not help TX_a suddenly reach nodes/miners that ignored TX_a.\n> \n> \n> On Fri, Jul 10, 2015 at 12:09 PM, Richard Moore <me at ricmoo.com <mailto:me at ricmoo.com>> wrote:\n> Hey guys,\n> \n> With all the recent congestion and discussion regarding FSS-RBF, I was wondering if there good reasons not to have CPFP as a default policy? Or is it?\n> \n> I was also wondering, with CPFP, should the transaction fee be based on total transactions size, or the sum of each transaction\u2019s required fee? For example, a third transaction C whose unconfirmed utxo from transaction B has an unconfirmed utxo in transaction A (all of A\u2019s inputs are confirmed), with each A, B and C being ~300bytes, should C\u2019s transaction fee be 0.0001 btc for the ~1kb it is about to commit to the blockchain, or 0.0003 btc for the 3 transactions it is going to commit.\n> \n> I tried to test it out a few days ago, sending 0.0008 btc without any fee, then that utxo into another transaction w/ 0.0001 btc. It still hasn\u2019t confirmed, which could be any of: a) CPFP doesn\u2019t have enough hash power, b) the amounts are too small, c) the coins are too new, d) the fee should have actually been 0.0002 btc, e) the congestion is just too great; or some combination.\n> \n> Just curious as whatnot\u2026\n> \n> Thanks,\n> RicMoo\n> \n> .\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n> \n> Richard Moore ~ Founder\n> Genetic Mistakes Software inc.\n> phone: (778) 882-6125 <tel:%28778%29%20882-6125>\n> email: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>\n> www: http://GeneticMistakes.com <http://geneticmistakes.com/>\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>\nwww: http://GeneticMistakes.com <http://geneticmistakes.com/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/c2959632/attachment-0001.html>"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-10T16:26:22",
                "message_text_only": "Some miners have voluntarily deployed CPFP.\n\nI had a thread about it earlier this month where some other ideas got\ntossed around.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009304.html\n\nThe specific pull request to get it into the reference implementation\nis still open based on a merge conflict\nhttps://github.com/bitcoin/bitcoin/pull/1647\n\nPeter Todd has another thread on RBF which you mentioned earlier\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005620.html\n\nThere is also a beautiful example of CPFP in action from Eligius in\nthis transaction:\nhttps://blockchain.info/tx/4cc3e2b6407ae8cdc1fd62cb3235f9c92654277684da8970db19a0169e44c68c\n\nFollow the spent outputs and you will see the person is trying to\nincentive the transaction by upping the fees of dependent\ntransactions.  It set in the mempool until Eligius won a block, then\nit made it into the chain.  CPFP still works, but only in an Eligius\nblock (that I can see).  So it's better than nothing."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-10T16:28:02",
                "message_text_only": "On Fri, Jul 10, 2015 at 5:09 PM, Richard Moore <me at ricmoo.com> wrote:\n\n> I was also wondering, with CPFP, should the transaction fee be based on\n> total transactions size, or the sum of each transaction\u2019s required fee? For\n> example, a third transaction C whose unconfirmed utxo from transaction B\n> has an unconfirmed utxo in transaction A (all of A\u2019s inputs are confirmed),\n> with each A, B and C being ~300bytes, should C\u2019s transaction fee be 0.0001\n> btc for the ~1kb it is about to commit to the blockchain, or 0.0003 btc for\n> the 3 transactions it is going to commit.\n>\n\nIt should be whatever gives the highest fee.  In effect, child pays for\nparent creates compound transactions.\n\nA: 250 bytes, 0 fee\nB: 300 bytes: 0.0005 fee\nC: 400 bytes: 0.0001 fee\n\nThere are 3 combinations to consider\n\nA: 0 fee for 250 bytes = 0 per byte\nA&B: 0.0005 fee for 550 bytes = 0.91 uBTC per byte\nA&B&C: 0.0006 fee for 950 bytes = 0.63uBTC per byte\n\nThis means that the A&B combination has the best fee per byte value.  A&B\nshould be added to the memory pool (if 0.91 uBTC per byte is above the\nthreshold).\n\nOnce A&B are added, then C can be reconsidered on its own.\n\nC: 0.0001 for 400 bytes = 0.25 BTC per byte\n\nIf that is above the threshold, then C should be added.\n\nIn practice, it isn't possible to check every combination.  If there are N\ntransactions, then checking all triple combinations costs around N cubed.\n\nA 2 pass system could get a reasonably efficient result.\n\nB is 0.0005 fee for 300 bytes = 1.67 uBTC per byte and is assumed to be a\nhigh value transaction.\n\nThe algorithm would be\n\nPass 1:\nProcess all transactions in order of BTC per byte, until block is full\n    If the transaction's parents are either already in the pool or a\nprevious block, add the transaction.\n\nPass 1:\nProcess all non-included transactions in order of BTC per byte, until block\nis full\n    If the transaction's parents are either already in the pool or a\nprevious block, add the transaction.\n\n    Otherwise, consider the transaction plus all non-included ancestors as\na single transaction\n        If this combined transaction has a higher BTC per byte than the\nlowest transaction(s),\n            add the combined transaction\n            drop the other transaction(s)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/68d6acca/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-10T16:31:01",
                "message_text_only": "This is a good explanation but it does not address reachability.  TX_a, the\nfirst tx sent out on the network, presumably has insufficient fee to get\nmined - which also means it did not necessarily even reach all miners.\n\nSimply sending out TX_b with added fee does not guarantee that nodes\nsuddenly have TX_a, which they may have ignored/dropped before.\n\n\n\nOn Fri, Jul 10, 2015 at 12:28 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n>\n>\n> On Fri, Jul 10, 2015 at 5:09 PM, Richard Moore <me at ricmoo.com> wrote:\n>\n>> I was also wondering, with CPFP, should the transaction fee be based on\n>> total transactions size, or the sum of each transaction\u2019s required fee? For\n>> example, a third transaction C whose unconfirmed utxo from transaction B\n>> has an unconfirmed utxo in transaction A (all of A\u2019s inputs are confirmed),\n>> with each A, B and C being ~300bytes, should C\u2019s transaction fee be 0.0001\n>> btc for the ~1kb it is about to commit to the blockchain, or 0.0003 btc for\n>> the 3 transactions it is going to commit.\n>>\n>\n> It should be whatever gives the highest fee.  In effect, child pays for\n> parent creates compound transactions.\n>\n> A: 250 bytes, 0 fee\n> B: 300 bytes: 0.0005 fee\n> C: 400 bytes: 0.0001 fee\n>\n> There are 3 combinations to consider\n>\n> A: 0 fee for 250 bytes = 0 per byte\n> A&B: 0.0005 fee for 550 bytes = 0.91 uBTC per byte\n> A&B&C: 0.0006 fee for 950 bytes = 0.63uBTC per byte\n>\n> This means that the A&B combination has the best fee per byte value.  A&B\n> should be added to the memory pool (if 0.91 uBTC per byte is above the\n> threshold).\n>\n> Once A&B are added, then C can be reconsidered on its own.\n>\n> C: 0.0001 for 400 bytes = 0.25 BTC per byte\n>\n> If that is above the threshold, then C should be added.\n>\n> In practice, it isn't possible to check every combination.  If there are N\n> transactions, then checking all triple combinations costs around N cubed.\n>\n> A 2 pass system could get a reasonably efficient result.\n>\n> B is 0.0005 fee for 300 bytes = 1.67 uBTC per byte and is assumed to be a\n> high value transaction.\n>\n> The algorithm would be\n>\n> Pass 1:\n> Process all transactions in order of BTC per byte, until block is full\n>     If the transaction's parents are either already in the pool or a\n> previous block, add the transaction.\n>\n> Pass 1:\n> Process all non-included transactions in order of BTC per byte, until\n> block is full\n>     If the transaction's parents are either already in the pool or a\n> previous block, add the transaction.\n>\n>     Otherwise, consider the transaction plus all non-included ancestors as\n> a single transaction\n>         If this combined transaction has a higher BTC per byte than the\n> lowest transaction(s),\n>             add the combined transaction\n>             drop the other transaction(s)\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/24c24be6/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-07-10T17:02:43",
                "message_text_only": "On 07/10/2015 11:31 AM, Jeff Garzik wrote:\n> This is a good explanation but it does not address reachability.  TX_a, the\n> first tx sent out on the network, presumably has insufficient fee to get\n> mined - which also means it did not necessarily even reach all miners.\n> \n> Simply sending out TX_b with added fee does not guarantee that nodes\n> suddenly have TX_a, which they may have ignored/dropped before.\n\nI'm not sure why that's actually a problem.\n\nCPFP is initiated by the recipient of the parent transaction, and so if\nthe recipient is creating this transaction in the first place they must\nhave a copy of the parent transaction which can/should broadcast at the\nsame time.\n\nIf the child reaches a CPFP miner, then presumably the parents made it\nas well (any path between the sender and the miner that doesn't relay\nthe parent should reject the child as trying to spend non-existent\ncoins), so both of the transactions can be mined at the same time.\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/9318baa9/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/9318baa9/attachment-0001.sig>"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-10T17:16:40",
                "message_text_only": "On Fri, Jul 10, 2015 at 11:31 AM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> This is a good explanation but it does not address reachability.  TX_a, the\n> first tx sent out on the network, presumably has insufficient fee to get\n> mined - which also means it did not necessarily even reach all miners.\n>\n> Simply sending out TX_b with added fee does not guarantee that nodes\n> suddenly have TX_a, which they may have ignored/dropped before.\n\nTrue... there are two propagation thresholds... \"-minrelaytxfee\"\n(defaults to 1000 sotoshi/kbyte) and \"relaypriority\" (defaults to\nTrue).  If -relaypriority is True, then items with a priority above\n57600000 (currently <ref1>) will still be relayed, even if their TxFee\nis below MinRelayTxFee.\n\nTherefore even if miners are using bitcoind rules for mempool tx\ncreation, they can still configure how and what they propagate.\n\nThe flip-side of this is that a transactions priority will go up the\nlonger it ages (in the mempool).  So it would be possible (if\nrelaypriority was on) for even a lowfee transaction to become\nrelayable eventually simply based on relaypriority\n\nref1: https://en.bitcoin.it/wiki/Transaction_fees\n\nOn Fri, Jul 10, 2015 at 12:02 PM, Justus Ranvier\n<justus at openbitcoinprivacyproject.org> wrote:\n> CPFP is initiated by the recipient of the parent transaction, and so if\n> the recipient is creating this transaction in the first place they must\n> have a copy of the parent transaction which can/should broadcast at the\n> same time.\n>\n> If the child reaches a CPFP miner, then presumably the parents made it\n> as well (any path between the sender and the miner that doesn't relay\n> the parent should reject the child as trying to spend non-existent\n> coins), so both of the transactions can be mined at the same time.\n\nIf the recipient is running a full node with incoming connections.\nI'm not sure if SPV clients rebroadcast both spend and receive\ntransactions."
            },
            {
                "author": "Alex Morcos",
                "date": "2015-07-10T17:51:00",
                "message_text_only": "I think the biggest problem with merging CPFP right now is that at least in\nits current implementation it is not efficient enough in certain\nsituations,.\n\nOn Fri, Jul 10, 2015 at 1:02 PM, Justus Ranvier <\njustus at openbitcoinprivacyproject.org> wrote:\n\n> On 07/10/2015 11:31 AM, Jeff Garzik wrote:\n> > This is a good explanation but it does not address reachability.  TX_a,\n> the\n> > first tx sent out on the network, presumably has insufficient fee to get\n> > mined - which also means it did not necessarily even reach all miners.\n> >\n> > Simply sending out TX_b with added fee does not guarantee that nodes\n> > suddenly have TX_a, which they may have ignored/dropped before.\n>\n> I'm not sure why that's actually a problem.\n>\n> CPFP is initiated by the recipient of the parent transaction, and so if\n> the recipient is creating this transaction in the first place they must\n> have a copy of the parent transaction which can/should broadcast at the\n> same time.\n>\n> If the child reaches a CPFP miner, then presumably the parents made it\n> as well (any path between the sender and the miner that doesn't relay\n> the parent should reject the child as trying to spend non-existent\n> coins), so both of the transactions can be mined at the same time.\n>\n> --\n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/4b36fab9/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-10T19:39:14",
                "message_text_only": "It depends on what kind of inefficiency.  Inefficient could mean that it\nuses a lot of CPU power.\n\nIf it gets a good solution rather than the best solution, it is still worth\nhaving.\n\nOn Fri, Jul 10, 2015 at 6:51 PM, Alex Morcos <morcos at gmail.com> wrote:\n\n> I think the biggest problem with merging CPFP right now is that at least\n> in its current implementation it is not efficient enough in certain\n> situations,.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/5fa8f160/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-07-10T21:10:32",
                "message_text_only": "AFAIK the only thing holding it up is lack of unit tests. If anyone would like \nto implement those, I expect it'd be merged fairly soon. Then the problem is, \nas Jeff mentioned, getting the parent transactions relayed despite failing \nrelay policy on their own.\n\nLuke"
            },
            {
                "author": "Micha Bailey",
                "date": "2015-07-11T20:28:27",
                "message_text_only": "Right. The issue (AIUI) is that, right now, even though transactions are\nevaluated for inclusion as a group with CPFP, they're not yet evaluated for\nrelaying as a unit, nor can they be, because the current p2p protocol\ndoesn't have a way to send multiple transactions in a single protocol\nmessage to signify that they should be evaluated together.\n\nOn Saturday, July 11, 2015, Luke Dashjr <luke at dashjr.org> wrote:\n\n> AFAIK the only thing holding it up is lack of unit tests. If anyone would\n> like\n> to implement those, I expect it'd be merged fairly soon. Then the problem\n> is,\n> as Jeff mentioned, getting the parent transactions relayed despite failing\n> relay policy on their own.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <javascript:;>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/02eb77a2/attachment.html>"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-07-11T21:30:24",
                "message_text_only": "I think a compromise will be somewhere in the middle.  I think most people\nwould be OK with TXs that don't have enough fees for P2P transfer to stay\nin deadmans land.  Most people are stuck in a situation where they payed\nenough to get it into (and keep it in) the pool, but not enough to get it\nout.\n\nIf we could get CPFP that only worked on TXs that met the minimum threshold\nfor peer propagation, then I think we would be in much better position to\nbattle this spam flood.\n\nOn Sat, Jul 11, 2015 at 3:28 PM, Micha Bailey <michabailey at gmail.com> wrote:\n\n> Right. The issue (AIUI) is that, right now, even though transactions are\n> evaluated for inclusion as a group with CPFP, they're not yet evaluated for\n> relaying as a unit, nor can they be, because the current p2p protocol\n> doesn't have a way to send multiple transactions in a single protocol\n> message to signify that they should be evaluated together.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/9ba24f71/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-11T22:29:07",
                "message_text_only": "It sounds like you are seeking transaction expiration from the mempool, not\nCPFP.\n\n\n\nOn Sat, Jul 11, 2015 at 4:30 PM, Dan Bryant <dkbryant at gmail.com> wrote:\n\n> I think a compromise will be somewhere in the middle.  I think most people\n> would be OK with TXs that don't have enough fees for P2P transfer to stay\n> in deadmans land.  Most people are stuck in a situation where they payed\n> enough to get it into (and keep it in) the pool, but not enough to get it\n> out.\n>\n> If we could get CPFP that only worked on TXs that met the minimum\n> threshold for peer propagation, then I think we would be in much better\n> position to battle this spam flood.\n>\n> On Sat, Jul 11, 2015 at 3:28 PM, Micha Bailey <michabailey at gmail.com>\n> wrote:\n>\n>> Right. The issue (AIUI) is that, right now, even though transactions are\n>> evaluated for inclusion as a group with CPFP, they're not yet evaluated for\n>> relaying as a unit, nor can they be, because the current p2p protocol\n>> doesn't have a way to send multiple transactions in a single protocol\n>> message to signify that they should be evaluated together.\n>>\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/3180630b/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-12T10:18:47",
                "message_text_only": "I keep seeing (on /r/bitcoin) mentions of a 24-hour or 48-hour (varying accounts) interval at which miners clear their mempools. Is this a matter of local policy or something Bitcoin Core does by design?\n\n\nOn Saturday, 11 July 2015, at 5:29 pm, Jeff Garzik wrote:\n> It sounds like you are seeking transaction expiration from the mempool, not\n> CPFP.\n> \n> On Sat, Jul 11, 2015 at 4:30 PM, Dan Bryant <dkbryant at gmail.com> wrote:\n> \n> > I think a compromise will be somewhere in the middle.  I think most people\n> > would be OK with TXs that don't have enough fees for P2P transfer to stay\n> > in deadmans land.  Most people are stuck in a situation where they payed\n> > enough to get it into (and keep it in) the pool, but not enough to get it\n> > out.\n> >\n> > If we could get CPFP that only worked on TXs that met the minimum\n> > threshold for peer propagation, then I think we would be in much better\n> > position to battle this spam flood.\n> >\n> > On Sat, Jul 11, 2015 at 3:28 PM, Micha Bailey <michabailey at gmail.com>\n> > wrote:\n> >\n> >> Right. The issue (AIUI) is that, right now, even though transactions are\n> >> evaluated for inclusion as a group with CPFP, they're not yet evaluated for\n> >> relaying as a unit, nor can they be, because the current p2p protocol\n> >> doesn't have a way to send multiple transactions in a single protocol\n> >> message to signify that they should be evaluated together."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-11T23:19:14",
                "message_text_only": "On Sat, Jul 11, 2015 at 10:30 PM, Dan Bryant <dkbryant at gmail.com> wrote:\n\n> I think a compromise will be somewhere in the middle.  I think most people\n> would be OK with TXs that don't have enough fees for P2P transfer to stay\n> in deadmans land.  Most people are stuck in a situation where they payed\n> enough to get it into (and keep it in) the pool, but not enough to get it\n> out.\n>\n\nAgreed.  A lot of the functionality could be achieved by a system that\nworks in most cases.  Even if 100 transaction chains aren't supported, 3-5\ntransaction chains would give a significant fraction of the desired\nfunctionality.\n\nAt the moment, a transaction is only added into the memory pool if it meets\nthe relay threshold and spends transactions that are either in the memory\npool or in a block.\n\nThere is an orphan pool that can store up to 100 orphans.\n\nThe same could be done for child pays for parent.  A node could remember\nthe last 100 transactions (up to 5000 bytes) that were rejected from the\nmemory pool due to insufficient relay fees.\n\nThis allows nodes to send a chain of transactions in a row.  If the child\nis sent last, then the parent(s) will be in the unrelayed transaction pool.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150712/ff0bec33/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-10T17:28:14",
                "message_text_only": "On Fri, Jul 10, 2015 at 5:31 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n> This is a good explanation but it does not address reachability.  TX_a,\n> the first tx sent out on the network, presumably has insufficient fee to\n> get mined - which also means it did not necessarily even reach all miners.\n>\n> Simply sending out TX_b with added fee does not guarantee that nodes\n> suddenly have TX_a, which they may have ignored/dropped before.\n>\n\nWhen the peer adds both parent and child to the memory pool, it should\nforward both of them.\n\nCPFP inherently requires that nodes keep transactions that they have\nrejected due to low fees.\n\nIf peers requested parents, then it would be possible to forward them\nonwards.\n\nIf a node receives a high-fee transaction and doesn't have the parent, it\ncould request the parent.\n\nSpam protection could be handled by banning nodes which send lots of\n\"children\" and then never having the parent to the transaction.\n\nThe rule would be that forwarding a transaction means that you have all its\nparents back to transactions contained in blocks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150710/cb1110a8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Why not Child-Pays-For-Parent?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Dan Bryant",
                "Matt Whitlock",
                "Tier Nolan",
                "Richard Moore",
                "Alex Morcos",
                "Luke Dashjr",
                "Micha Bailey",
                "Justus Ranvier"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 27422
        }
    },
    {
        "title": "[bitcoin-dev] SPV Mining reveals a problematic incentive issue.",
        "thread_messages": [
            {
                "author": "Nathan Wilcox",
                "date": "2015-07-11T08:05:25",
                "message_text_only": "Thesis: The disincentive miners have for verifying transactions is\nproblematic and weakens the network's robustness against forks.\n\nAccording to the 2015-07-04 bitcoin.org alert [1]_ so-called \"SPV Mining\"\nhas become popular across a large portion of miners, and this enabled the\nconsensus-violating forks to persist. Peter Todd provides an explanation\nof the incentive for SPV Mining over in another thread [2]_.\n\n.. [1] https://bitcoin.org/en/alert/2015-07-04-spv-mining#cause\n\n.. [2]\nhttps://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg00404.html\n\nIf there is a cost to verifying transactions in a received block, then\nthere is an incentive to *not verify transactions*.  However, this is\nbalanced by the a risk of mining atop an invalid block.\n\nIf we imagine all miners verify all transactions, except Charlie the\nCheapskate, then it's in Charlie's interest to forego transaction\nverification.  If all miners make a similar wager, then in the extreme,\nno miners verify any transactions, and the expected cost of skipping\ntransaction verification becomes very high.\n\nUnfortunately, it's difficult to measure how many miners are not\nvalidating transactions, since there's no evidence of this until they\nmine atop on invalid block. Because of this, I worry that over time,\nmore and more miners cut this particular corner, to save on costs.\n\nIf true, then the network continues to grow more brittle towards the kind\nof forking-persistence behavior we saw from the July 4th (and 5th) forks.\n\nThis gets weird.  For example, a malicious miner which suspects a large\nfraction of miners are neglecting transaction verification may choose to\nforego a block reward by throwing an erroneous transaction into their\nwinning block, then, as all the \"SPV Miners\" run off along a worthless\nchain, they can reap a higher reward rate due to controlling a larger\nnetwork capacity fraction on the valid chain.\n\nCan we fix this?\n\n--\nNathan Wilcox\nLeast Authoritarian\n\nemail: nathan at leastauthority.com\ntwitter: @least_nathan\n\nStandard Disclaimer: I'm behind on dev archives, irc logs, bitcointalk,\nthe wiki...  if this has been discussed before I appreciate mentions of\nthat fact.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/1d90f07c/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-11T09:24:48",
                "message_text_only": "All miners should validate transactions precisely because of the latest\nattack you've described. Full miners can gain a lot from this attack to\nleverage their full validation against spv miners who blindly spend energy\nhashing on top of something that may be worthless crap. SPV mining makes no\nsense, but some miners claim they're doind it for very short periods of\ntime, which shouldn't be as bad as doing it all the time.\n\nI think it would be more rational for them to keep mining on top of the old\nblock until they've fully validated the new block (which shouldn't take so\nlong anyway), even if this slightly increases the orphan rate.\nOn Jul 11, 2015 10:05 AM, \"Nathan Wilcox\" <nathan at leastauthority.com> wrote:\n\n> Thesis: The disincentive miners have for verifying transactions is\n> problematic and weakens the network's robustness against forks.\n>\n> According to the 2015-07-04 bitcoin.org alert [1]_ so-called \"SPV Mining\"\n> has become popular across a large portion of miners, and this enabled the\n> consensus-violating forks to persist. Peter Todd provides an explanation\n> of the incentive for SPV Mining over in another thread [2]_.\n>\n> .. [1] https://bitcoin.org/en/alert/2015-07-04-spv-mining#cause\n>\n> .. [2]\n> https://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg00404.html\n>\n> If there is a cost to verifying transactions in a received block, then\n> there is an incentive to *not verify transactions*.  However, this is\n> balanced by the a risk of mining atop an invalid block.\n>\n> If we imagine all miners verify all transactions, except Charlie the\n> Cheapskate, then it's in Charlie's interest to forego transaction\n> verification.  If all miners make a similar wager, then in the extreme,\n> no miners verify any transactions, and the expected cost of skipping\n> transaction verification becomes very high.\n>\n> Unfortunately, it's difficult to measure how many miners are not\n> validating transactions, since there's no evidence of this until they\n> mine atop on invalid block. Because of this, I worry that over time,\n> more and more miners cut this particular corner, to save on costs.\n>\n> If true, then the network continues to grow more brittle towards the kind\n> of forking-persistence behavior we saw from the July 4th (and 5th) forks.\n>\n> This gets weird.  For example, a malicious miner which suspects a large\n> fraction of miners are neglecting transaction verification may choose to\n> forego a block reward by throwing an erroneous transaction into their\n> winning block, then, as all the \"SPV Miners\" run off along a worthless\n> chain, they can reap a higher reward rate due to controlling a larger\n> network capacity fraction on the valid chain.\n>\n> Can we fix this?\n>\n> --\n> Nathan Wilcox\n> Least Authoritarian\n>\n> email: nathan at leastauthority.com\n> twitter: @least_nathan\n>\n> Standard Disclaimer: I'm behind on dev archives, irc logs, bitcointalk,\n> the wiki...  if this has been discussed before I appreciate mentions of\n> that fact.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/2515cb25/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-11T10:39:38",
                "message_text_only": "On Sat, Jul 11, 2015 at 10:24 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> I think it would be more rational for them to keep mining on top of the\n> old block until they've fully validated the new block (which shouldn't take\n> so long anyway), even if this slightly increases the orphan rate.\n\n\nIncreased orphan rate means that the network is (slightly) less secure.\n\nIf miners have a 5% orphan rate, then an attacker can launch a 51% attack\nwith 49% of the network.\n\nIt isn't a massive difference, but it is there.\n\nAs long as miners switch back to non-SPV mining after a timeout, SPV-mining\nis safe for everyone.\n\nThe average cost to the miner from building on an invalid block is small,\nas long as invalid blocks only happen rarely.\n\nMiners still have an incentive to do full validation, so that they can\ninclude transactions and get transaction fees.\n\nSPV-mining is to prevent hashing hardware from having to waste power when\nit isn't needed.\n\nIt may be less of a problem if (when?) electricity costs dominate hardware\ncapital costs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/eda24489/attachment.html>"
            },
            {
                "author": "Nathan Wilcox",
                "date": "2015-07-11T12:09:16",
                "message_text_only": "On Sat, Jul 11, 2015 at 2:24 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> All miners should validate transactions precisely because of the latest\nattack you've described.\n\nThe problem is one of individual incentives leading to a systemic problem.\n\"All X should do...\" solutions which are oblivious to individual incentives\ndon't scale, eg: \"If all factories avoid emitting pollution they don't pay\nfor...\" does not work if individual factories save their own costs by\ndumping into the environment.  No one wants environmental catastrophe, and\nno one wants a blockchain where miners don't validate transactions, but\nthere may be a systemic problem of incentives.\n\nThe bitcoin.org claim that \"about half\" of miner capacity does SPV Mining,\nis consistent with the incentives problem as I described it.  However, I\ndon't claim the state of mining is certainly due to these incentives and\nnot other incentives we haven't discussed.  Also, there may be other\nincentives that outweigh this issue.\n\n\nOn Sat, Jul 11, 2015 at 3:39 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n>\n>\n> On Sat, Jul 11, 2015 at 10:24 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n>> I think it would be more rational for them to keep mining on top of the\n>> old block until they've fully validated the new block (which shouldn't take\n>> so long anyway), even if this slightly increases the orphan rate.\n>\n>\n> Increased orphan rate means that the network is (slightly) less secure.\n>\n> If miners have a 5% orphan rate, then an attacker can launch a 51% attack\n> with 49% of the network.\n>\n> It isn't a massive difference, but it is there.\n>\n> As long as miners switch back to non-SPV mining after a timeout,\n> SPV-mining is safe for everyone.\n>\n>\nIf there's any cost to non-SPV mining, and the chance that an incoming\nblock contains only valid transactions is very high, isn't there still an\nincentive to make this timeout longer and longer?\n\n\nThe average cost to the miner from building on an invalid block is small,\n> as long as invalid blocks only happen rarely.\n>\n>\nYes. If it's rare enough, then skipping transaction validation saves more\ncost than the expected cost of mining atop an invalid block.  ... but if\neveryone follows that logic, the chance is no longer rare.\n\n\n\n> Miners still have an incentive to do full validation, so that they can\n> include transactions and get transaction fees.\n>\n>\nThis is a good point.  If the benefit to skipping verification outweighs\nexpected transaction costs, then a non-validating miner might also choose\nto mine empty blocks with only their coinbase.  (I recall hearing this\noccurred somewhat regularly around 2013, but I haven't paid attention since\nthen.  How common are empty blocks these days?)\n\nThis is a benefit of the world where transaction fees approach or surpass\nblock reward.\n\n\nSPV-mining is to prevent hashing hardware from having to waste power when\n> it isn't needed.\n>\n>\nIt may be less of a problem if (when?) electricity costs dominate hardware\n> capital costs.\n>\n\nOh.  This is a different explanation than Peter Todd's I linked to above,\nwhich claimed it was network latency in receiving transactions.\n\nCould you explain this a bit more?  What is not needed, the hashing\nhardware or the power?  How does SPV Mining affect that?\n\nI'll bet there are many individual rationales for SPV-Mining, but\nultimately they come down to dropping a cost based on a bet about other\nminers' behavior.\n\n\n\n\n\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nNathan Wilcox\nLeast Authoritarian\n\nemail: nathan at leastauthority.com\ntwitter: @least_nathan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/d25d7fea/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-11T13:17:53",
                "message_text_only": "On Sat, Jul 11, 2015 at 1:09 PM, Nathan Wilcox <nathan at leastauthority.com>\nwrote:\n\n>\n> If there's any cost to non-SPV mining, and the chance that an incoming\n> block contains only valid transactions is very high, isn't there still an\n> incentive to make this timeout longer and longer?\n>\n\nThe benefit drops off pretty quickly as the timeout increases (and\neventually goes negative).\n\nYou could look at it that headers having 4 states.\n\n1) Valid\n2) Probably Valid\n3) Probably Invalid\n4) Invalid\n\nSPV mining puts newly received headers into the \"probably valid\" category.\n\nIt builds empty (coinbase only) blocks on top of probably valid headers and\nbuild empty blocks on the header.\n\nOnce it receives the full block, it can change the state to Valid.  At that\npoint, it can build full blocks on top of the header.\n\nAs time passes without the full block being received/validated, it becomes\nless and less likely that the block is actually valid.\n\nThe timeout is to recognize that fact.  Making the timeout 24 hours is not\nlikely to give the miner much benefit over making it 1-2 minutes.\n\nSetting the timeout to low means that the miner sometimes switches away\nfrom a header that turns out to be valid.\n\nSetting it to high means that the miner ends up staying to long on a header\nthat turns out to be invalid.\n\nAt some point, the second effect is stronger than the first effect.  The\ntimeout needs to be high enough so switching away from valid headers is\nrare but low enough so that it doesn't stay on invalid headers for ages.\n\nIf 99% of full blocks are received (and validated) within 30 seconds of the\nheader arriving, then it is reasonable for the miner to assume that if the\nfull block hasn't arrived within 60 seconds of the header arriving, then\nthe header is for an invalid block.\n\nYes. If it's rare enough, then skipping transaction validation saves more\n> cost than the expected cost of mining atop an invalid block.  ... but if\n> everyone follows that logic, the chance is no longer rare.\n>\n\nSPV miners don't actually produce invalid blocks though (other than\nbuilding on invalid blocks).  The full blocks they produce are still fully\nchecked blocks.\n\n\n> SPV-mining is to prevent hashing hardware from having to waste power when\n>> it isn't needed.\n>>\n>>\n> It may be less of a problem if (when?) electricity costs dominate hardware\n>> capital costs.\n>>\n>\n> Oh.  This is a different explanation than Peter Todd's I linked to above,\n> which claimed it was network latency in receiving transactions.\n>\n\nSPV mining is mainly to protect against latency.  The reason that matters\nis that latency means that hashers end up building on blocks even though a\nnew block has been found.\n\nYou can look at it as wasting hashing power due to latency.\n\nIn the world where minting fees are very low, there is no point in SPV\nmining.\n\nI assume at the point, the memory pool/queue is a few blocks deep.  This\nmeans that the pool can create a full block without having to wait for new\ntransactions to be sent in.\n\nIt still needs to wait for the new full block before it knows which\ntransactions to remove from its memory pool.\n\nPools have to pay their hashers for hashing power.  When minting fees are\ntiny, pools only get income only from tx fees.\n\nThere is no point in creating empty blocks, since they don't pay anything.\n\nBetween when the block is found and the pool has a new block ready to mine,\nthere is no incentive for the pool to give out new work.  The stratum\nprotocol could be modified so pools can say.  (It might already support\nthis)\n\n<Send work to hashers>\n\n-- block is found by some other pool --\n\n<Cancel work for miners>\n\n-- pool builds new block --\n\n<Send new work to hashers>\n\nThe cancel command says that the pool will not accept any of the work that\nhas been made obsolete.\n\nThis gives a window of 20-30 seconds after each block where the pool has\ninvalidated the old work, but does not send new work.  Hashers' hardware\nwould be stalled.\n\nOn the other hand, the pool that found the block could create a new block\nstraight away.  There is an incentive for hashers to have a connection to\nmultiple pools.\n\nPools might go pure pay per share.  The protocol would say how much they\nare willing to pay for a share and the local mining proxy would pick the\nmost profitable pool.  This eliminates pools having lots of ways of saying\nhow they charge fees, you just connect to lots of pools and go with the one\nthat pays the most.\n\nMore interestingly, the average fee per byte for transactions in the memory\npool is likely to increase as time passes since the last block.\n\nWhen two blocks are found very fast one after another, the second block is\nlikely to have lower average fees.  This is because the first block would\nhave included most of the high value transactions and there wasn't enough\ntime for new ones to arrive before the second block was found.\n\nHashers would end up getting variable payouts based on how long since the\nlast block was received.  If some miners increase/decrease their output\nbased on the fees the pools offer, then as time passes since the last\nblock, the hashing rate would increase.  This reduces the variation in\nblock to block times.\n\nFor example, if there was 1.5MB of transactions in the memory pool and they\nall paid the same fee per byte, then the block would be a full block at\nthat rate.  However, there would only be 0.5MB of transactions left.  This\nmeans that the next block would be half full and only be able to pay out\n50% of the fee, but the difficulty would be the same.  The pay per hash\nwould be 50% lower.  Once 0.5MB of new transactions arrive, the fee would\nbe back up to the same as the previous block.\n\nIf there are major SHA256 altcoins (or side chains), then miners might end\nup switching between coins.  The longer a coin went without a new block\nbeing found, the more tx fees available in the memory pool, so the more\nhashing power would decide to switch to that coin.\n\nThere could be a situation where adding a few more transactions to the\nmemory pool of a coin would cause a 100X increasing in hashing until the\nblock was found and then it stalling again as the hashing power switches\naway.  This is similar to alt coins getting blasted by coin switching pools\nand then dropping to almost no power.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/08dc0f8c/attachment-0001.html>"
            },
            {
                "author": "Dave Hudson",
                "date": "2015-07-11T15:04:47",
                "message_text_only": "> On 11 Jul 2015, at 14:17, Tier Nolan <tier.nolan at gmail.com> wrote:\n> \n> On Sat, Jul 11, 2015 at 1:09 PM, Nathan Wilcox <nathan at leastauthority.com <mailto:nathan at leastauthority.com>> wrote:\n> \n> If there's any cost to non-SPV mining, and the chance that an incoming block contains only valid transactions is very high, isn't there still an incentive to make this timeout longer and longer?\n> \n> The benefit drops off pretty quickly as the timeout increases (and eventually goes negative).\n> \n> Hashers would end up getting variable payouts based on how long since the last block was received.  If some miners increase/decrease their output based on the fees the pools offer, then as time passes since the last block, the hashing rate would increase.  This reduces the variation in block to block times.\n> \n> For example, if there was 1.5MB of transactions in the memory pool and they all paid the same fee per byte, then the block would be a full block at that rate.  However, there would only be 0.5MB of transactions left.  This means that the next block would be half full and only be able to pay out 50% of the fee, but the difficulty would be the same.  The pay per hash would be 50% lower.  Once 0.5MB of new transactions arrive, the fee would be back up to the same as the previous block.\n\nThis would probably be worse. The 1 MB would include the highest fee transactions, leaving the lowest fees in the remaining 0.5 MB.\n\n> If there are major SHA256 altcoins (or side chains), then miners might end up switching between coins.  The longer a coin went without a new block being found, the more tx fees available in the memory pool, so the more hashing power would decide to switch to that coin.\n> \n> There could be a situation where adding a few more transactions to the memory pool of a coin would cause a 100X increasing in hashing until the block was found and then it stalling again as the hashing power switches away.  This is similar to alt coins getting blasted by coin switching pools and then dropping to almost no power.\n\n\nIf hashing isn't constantly applied all the time then the inter-block times will expand and the difficulty will reduce. This means that a pool that decides to use all of its available hashing 100% of the time now has a distinct advantage over those who are playing nicely. This is the same problem that the \"proof of idle\" idea had; it only works if no-one chooses to try to exploit it (which seems very unlikely).\n\nOne might ask why a pool might wish to try to exploit this, but let's assume we have a fees-only reward, so here's a quick thought experiment - the numbers are only approximate and would need a thorough simulation but serve for discussion:\n\nSay, for the sake of argument that over a nominal 10 minute period we see 10 BTC worth of transaction fees. If the mempool is empty of interesting fees at the start of a block then we might like to imagine that rational miners will power down their hashing to save energy costs until the fees are worthwhile. Let's assume, for the sake of argument, that this nominally takes 5 minutes.\n\nAfter 5 minutes we go from 0% to 100% as all hashing engines switch on. The difficulty will have corrected to mean that 100% of the work will nominally happen in the next 5 minutes, but that means that a malicious miner has a 2x amplification of their nominal hashing rate to do mischief in the preceding 5 minutes.\n\nSuch a malicious miner would choose to spend their 5 minutes re-mining the previous block, but dropping some amount of the transactions from it. Let's say that they try to re-mine only 9.5 BTC out the previous 10 BTC. If they succeed then they're offering everyone else an extra 0.5 BTC (5%) if they mine on top of their re-mined block and as an incentive to orphan the original block. Rational miners would definitely choose to build on the re-mined block because they get more reward from doing so.\n\nOf course the extra hashing that our malicious miner is doing will actually push the difficulty back up somewhat, but they're still running at an advantage over the long-term. I've also ignored some of the other security implications of the hashing amplification effects (e.g. 25% of the hash rate can end up controlling 50% of the blocks in the scenario above).\n\nAn obvious objection to this scenario is that everyone would notice the malicious mining. Statistically, yes, the orphan rate would be much higher, but there's no guarantee that anyone could ever work out who was behind this. It's all too easy to create an \"unknown\" pool, or a series of \"unknown\" pools. Of course our malicious miner might choose to only target blocks that had particularly high fees associated with it, in which case the orphan rate might barely change.\n\nThe only way I can see that this wouldn't be the case would be if there were always useful fees available to mine immediately after a block is found. If block space is kept moderately scarce then immediately a block is found then everyone will keep mining and the incentives to try to deliberately orphan the last block are dramatically reduced.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/3208fd52/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-11T16:26:30",
                "message_text_only": "On Sat, Jul 11, 2015 at 4:04 PM, Dave Hudson <dave at hashingit.com> wrote:\n\n> This would probably be worse. The 1 MB would include the highest fee\n> transactions, leaving the lowest fees in the remaining 0.5 MB.\n>\n\nRight, in the example, I was assuming all transactions had the same fee per\nbyte.\n\n\n> If hashing isn't constantly applied all the time then the inter-block\n> times will expand and the difficulty will reduce. This means that a pool\n> that decides to use all of its available hashing 100% of the time now has a\n> distinct advantage over those who are playing nicely. This is the same\n> problem that the \"proof of idle\" idea had; it only works if no-one chooses\n> to try to exploit it (which seems very unlikely).\n>\n\nUh, I don't think so.  Pools would offer a price per hash based on how much\ntx fees that they can get at that moment.\n\nOffering more than that would mean they make a loss on average.\n\nSay, for the sake of argument that over a nominal 10 minute period we see\n> 10 BTC worth of transaction fees. If the mempool is empty of interesting\n> fees at the start of a block then we might like to imagine that rational\n> miners will power down their hashing to save energy costs until the fees\n> are worthwhile. Let's assume, for the sake of argument, that this nominally\n> takes 5 minutes.\n>\n\nI think the hardware would be able to power down nearly instantly.\nGranted, if they have generators or similar, they may not be able to do it\nso fast.\n\nSwitching to an altcoin is pretty much instant though.\n\n\n> After 5 minutes we go from 0% to 100% as all hashing engines switch on.\n> The difficulty will have corrected to mean that 100% of the work will\n> nominally happen in the next 5 minutes, but that means that a malicious\n> miner has a 2x amplification of their nominal hashing rate to do mischief\n> in the preceding 5 minutes.\n>\n\nI think you need to split it into hashers and pools, rather than miners.\nHashers have to pay electricity costs to keep their equipment running.\nPowering down for 5 minutes is cheaper than using that hashing for other\nthings.\n\nThe ratio of capital costs and electricity determines which wins out.\n\nIn the example given, it would work out as something like this.\n\n0 mins: pool offers 0\n2 mins: pool offers 20% of average\n4 mins: pool offers 40% of average\n6 mins: pool offers 60% of average\n8 mins: pool offers 80% of average\n10 mins: pool offers 100% of average\n12 mins: pool offers 120% of average\n14 mins: pool offers 140% of average\n...\n\nThis means that more and more miners will accept the offer as time passes.\nIf a miner was using solar power for their miners, then they might as well\nrun it for the full 10 mins, since it is pointless to leave the equipment\noff.  With batteries they could shift some of their output to the more\nprofitable period.\n\nSuch a malicious miner would choose to spend their 5 minutes re-mining the\n> previous block, but dropping some amount of the transactions from it. Let's\n> say that they try to re-mine only 9.5 BTC out the previous 10 BTC. If they\n> succeed then they're offering everyone else an extra 0.5 BTC (5%) if they\n> mine on top of their re-mined block and as an incentive to orphan the\n> original block. Rational miners would definitely choose to build on the\n> re-mined block because they get more reward from doing so.\n>\n\nIf they find that block, it will be a tie with the other block, but created\nmuch later.  That means that nobody will build on the block they found.\n\n\n> Of course the extra hashing that our malicious miner is doing will\n> actually push the difficulty back up somewhat, but they're still running at\n> an advantage over the long-term. I've also ignored some of the other\n> security implications of the hashing amplification effects (e.g. 25% of the\n> hash rate can end up controlling 50% of the blocks in the scenario above).\n>\n> I think mining strategy once minting fees are greatly reduced is an\ninteresting question.  We can't assume that miners are all going to build\non the tip.\n\nIn your example, you can bribe the miner of the next block by paying to\nOP_TRUE.\n\nA <- B <-C\n\nAssume that C pays 1BTC in fees and the miner creates a new version of C\nthat pays 1.1BTC in fees.\n\nC' pays 1.1 BTC in fees and also pays 0.05BTC to OP_TRUE.\n\nThis means that miners who build on C' instead of C get a 0.05BTC 'bribe'\nto ignore the fact that C' was found much later.\n\nIt isn't clear if other miners would be better off building D anyway, since\nthey could take 100% of the fees.\n\nIf the average fees per block was 1BTC and someone send a block that pays\n10BTC in fees, it could stall the block chain.  You can do the same bribery\ntrick.\n\nIf C has the 10BTC transaction, you can create a C' block and pay 1BTC to\nOP_TRUE.  The miner who builds on C' include a transaction which pays that\nmoney to him.\n\nAnother miner can produce C'' that pays 2BTC to OP_TRUE.\n\n\n> The only way I can see that this wouldn't be the case would be if there\n> were always useful fees available to mine immediately after a block is\n> found. If block space is kept moderately scarce then immediately a block is\n> found then everyone will keep mining and the incentives to try to\n> deliberately orphan the last block are dramatically reduced.\n>\n\nTrue, if there is multiple blocks worth of transactions in the memory pool,\nthen losing one block's worth of transactions won't drop the total fees\ndown to zero.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/088faeb4/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-12T18:37:19",
                "message_text_only": "On Sat, Jul 11, 2015 at 12:39 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>\n>\n> On Sat, Jul 11, 2015 at 10:24 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>\n>> I think it would be more rational for them to keep mining on top of the\n>> old block until they've fully validated the new block (which shouldn't take\n>> so long anyway), even if this slightly increases the orphan rate.\n>\n>\n> Increased orphan rate means that the network is (slightly) less secure.\n>\n> If miners have a 5% orphan rate, then an attacker can launch a 51% attack\n> with 49% of the network.\n>\n> It isn't a massive difference, but it is there.\n\nIf miners aren't validating the blocks they mine on top of, an\nattacker can do more nasty things I think.\n\n> As long as miners switch back to non-SPV mining after a timeout, SPV-mining\n> is safe for everyone.\n>\n> The average cost to the miner from building on an invalid block is small, as\n> long as invalid blocks only happen rarely.\n>\n> Miners still have an incentive to do full validation, so that they can\n> include transactions and get transaction fees.\n>\n> SPV-mining is to prevent hashing hardware from having to waste power when it\n> isn't needed.\n\nAs long as miners switch back to the new longest chain after they\nvalidate the block, mining on top of the\nnon-most-work-but-surely-valid may be less risky than mining on top of\na most-work-but-potentially-invalid block.\nThis has risks too. In both cases, if they don't mine a block during\nthe block validation, everything is fine.\nIf they successfully SPV mine, they risk having mined on top of an\ninvalid block, which not only means lost coins for them but high risk\nfor regular SPV users.\nIf they successfully mine on top of the previous block, they start a\nmini-race that they can win or not, but the impact to regular SPV\nusers is much lower.\nThe later may be slightly less profitable, but I bet the difference is\nnegligible. It would be interesting to know if miners actually did\nthis numbers and how (in case their model is incomplete or flawed).\n\nIt is important to note that while SPV mining requires you to produce\nempty blocks, mining on the previous on top of the previous block\nallows you to include transactions and earn fees.\nIn a future where block rewards aren't so overwhelmingly dominated by\nsubsidies, the numbers will run against SPV mining.\nIn a future without (or with negligible) subsidy, SPV mining is always\ninferior to just keep mining on top of the same block you were mining\nuntil you fully validate the next one.\n\n> It may be less of a problem if (when?) electricity costs dominate hardware\n> capital costs.\n\nThis seems correct (for both cases).\nIt's also less worrying the shorter the full validation time of a block is."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-12T18:54:38",
                "message_text_only": "On Sun, Jul 12, 2015 at 7:37 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> As long as miners switch back to the new longest chain after they\n> validate the block, mining on top of the\n> non-most-work-but-surely-valid may be less risky than mining on top of\n> a most-work-but-potentially-invalid block.\n>\n\nIt depends on how long they are waiting.  If they receive a header, it is\nvery likely to be part of a valid block.\n\nThe more time that passes, the more likely that the header's block was\ninvalid after all.\n\nThis tradeoff is what the timeout takes into account.  For a short period\nof time after the header is received, it is probably valid but eventually,\nas time passes without it being fully validated, it is more likely to be\nfalse after all.\n\nIf they successfully SPV mine, they risk having mined on top of an\n> invalid block, which not only means lost coins for them but high risk\n> for regular SPV users.\n>\n\nWith a 1 minute timeout, there is only a 10% chance they will find another\nblock.\n\nIt is important that when a header is marked as \"probably invalid\" that all\nthe header's children are also updated too.  The whole chain times out.\n\nIt is important to note that while SPV mining requires you to produce\n> empty blocks, mining on the previous on top of the previous block\n> allows you to include transactions and earn fees.\n> In a future where block rewards aren't so overwhelmingly dominated by\n> subsidies, the numbers will run against SPV mining.\n>\n\nAgreed.  Transaction only fees changes the whole incentive structure.\n\nA fee pool has been suggested to keep things as they are now.  All fees\n(mint & tx fees) are paid into a fee pool.  1% of the total pool fund is\npaid to the coinbase.\n\nThis keeps the total payout per block reasonably stable.  On the other\nhand, it removes the incentive to actually include transactions at all.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150712/6473eead/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-13T16:04:53",
                "message_text_only": "On Sat, Jul 11, 2015 at 11:24:48AM +0200, Jorge Tim\u00f3n wrote:\n> All miners should validate transactions precisely because of the latest\n> attack you've described. Full miners can gain a lot from this attack to\n> leverage their full validation against spv miners who blindly spend energy\n> hashing on top of something that may be worthless crap. SPV mining makes no\n> sense, but some miners claim they're doind it for very short periods of\n> time, which shouldn't be as bad as doing it all the time.\n>\n> I think it would be more rational for them to keep mining on top of the old\n> block until they've fully validated the new block (which shouldn't take so\n> long anyway), even if this slightly increases the orphan rate.\n\nYou're missing something really critical about what F2Pool/AntPool were\n(are?) doing: They're finding out about new blocks not by getting block\nheaders from just anywhere, but by connecting to other pools' via\nstratum anonymously and determining what block hash they're telling the\nhashers at the pool to work on. (e.g. what prevblockhash is in the block\nheader of shares being generated)\n\nIf other pools try to fake this information they're immediately and\ndirectly losing money, because they're telling their own hashers to make\ninvalid blocks. This of course has a high chance of being detected, and\ncan easily be FUDed into \"STOP MINING AT FOO POOL!\" reardless of what\nthe ivory tower game theory might say. The only hope the pools have is\nto somehow identify which connections correspond to other pools with\nhigh reliability and target just those connections - good luck on that.\n\n\nAnyway, all this concern about SPV mining is misguided: relying purely\non SPV w/ low #'s of confirmations just isn't very smart. What SPV can\ndo - at least while the inflation subsidy is still high - is give\nreasonable protection against your third-party-run trusted full nodes\nfrom lying to you, simply because doing so has well-defined costs in\nterms of energy to create fake blocks. Targetting enough people at once\nto make a fake block a worthwhile investment is difficult, particularly\nwhen you take into account how timing works in the defenders favor - the\nattacker probably only has a small % of hashing power, so they're going\nto wait a long time to find their fake block. Between that and a trusted\nthird party-run full node you're probably reasonably safe, for now.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000086007e31decd6eb80e07f77271ef50c69e1e6342161f4e5\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150713/4cc5aaa3/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-13T17:33:31",
                "message_text_only": ">\n> On Sat, Jul 11, 2015 at 11:24:48AM +0200, Jorge Tim\u00f3n wrote:\n> > All miners should validate transactions precisely because of the latest\n> > attack you've described. Full miners can gain a lot from this attack to\n> > leverage their full validation against spv miners who blindly spend\n> energy\n> > hashing on top of something that may be worthless crap. SPV mining makes\n> no\n> > sense, but some miners claim they're doind it for very short periods of\n> > time, which shouldn't be as bad as doing it all the time.\n> >\n> > I think it would be more rational for them to keep mining on top of the\n> old\n> > block until they've fully validated the new block (which shouldn't take\n> so\n> > long anyway), even if this slightly increases the orphan rate.\n>\n> You're missing something really critical about what F2Pool/AntPool were\n> (are?) doing: They're finding out about new blocks not by getting block\n> headers from just anywhere, but by connecting to other pools' via\n> stratum anonymously and determining what block hash they're telling the\n> hashers at the pool to work on. (e.g. what prevblockhash is in the block\n> header of shares being generated)\n>\n> If other pools try to fake this information they're immediately and\n> directly losing money, because they're telling their own hashers to make\n> invalid blocks. This of course has a high chance of being detected, and\n> can easily be FUDed into \"STOP MINING AT FOO POOL!\" reardless of what\n> the ivory tower game theory might say. The only hope the pools have is\n> to somehow identify which connections correspond to other pools with\n> high reliability and target just those connections - good luck on that.\n>\n>\n> Anyway, all this concern about SPV mining is misguided: relying purely\n> on SPV w/ low #'s of confirmations just isn't very smart. What SPV can\n> do - at least while the inflation subsidy is still high - is give\n> reasonable protection against your third-party-run trusted full nodes\n> from lying to you, simply because doing so has well-defined costs in\n> terms of energy to create fake blocks. Targetting enough people at once\n> to make a fake block a worthwhile investment is difficult, particularly\n> when you take into account how timing works in the defenders favor - the\n> attacker probably only has a small % of hashing power, so they're going\n> to wait a long time to find their fake block. Between that and a trusted\n> third party-run full node you're probably reasonably safe, for now.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000086007e31decd6eb80e07f77271ef50c69e1e6342161f4e5\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150713/78b77a62/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-13T17:49:40",
                "message_text_only": "My other email client messed up. I apologize for the blank message.\n\nAnyhow...\n\nEven though the cost of mining bad blocks is high enough to deter most\ndeliberate attacks, if we're not properly validating blocks, this\ndeterrence does not stop bugs nor version issues and it opens up attack\nvectors like someone hacking into a mining pool server.\n\nIt is imperative we continue to look for ways to make secure validation\ncheaper. I would make this #1 priority. Not only is it crucial to the\nintegrity of our security model - it is crucial for scalability and\ndecentralization as well.\n\n- Eric Lombrozo\nOn Jul 13, 2015 11:05 AM, \"Peter Todd\" <pete at petertodd.org> wrote:\n\n> On Sat, Jul 11, 2015 at 11:24:48AM +0200, Jorge Tim\u00f3n wrote:\n> > All miners should validate transactions precisely because of the latest\n> > attack you've described. Full miners can gain a lot from this attack to\n> > leverage their full validation against spv miners who blindly spend\n> energy\n> > hashing on top of something that may be worthless crap. SPV mining makes\n> no\n> > sense, but some miners claim they're doind it for very short periods of\n> > time, which shouldn't be as bad as doing it all the time.\n> >\n> > I think it would be more rational for them to keep mining on top of the\n> old\n> > block until they've fully validated the new block (which shouldn't take\n> so\n> > long anyway), even if this slightly increases the orphan rate.\n>\n> You're missing something really critical about what F2Pool/AntPool were\n> (are?) doing: They're finding out about new blocks not by getting block\n> headers from just anywhere, but by connecting to other pools' via\n> stratum anonymously and determining what block hash they're telling the\n> hashers at the pool to work on. (e.g. what prevblockhash is in the block\n> header of shares being generated)\n>\n> If other pools try to fake this information they're immediately and\n> directly losing money, because they're telling their own hashers to make\n> invalid blocks. This of course has a high chance of being detected, and\n> can easily be FUDed into \"STOP MINING AT FOO POOL!\" reardless of what\n> the ivory tower game theory might say. The only hope the pools have is\n> to somehow identify which connections correspond to other pools with\n> high reliability and target just those connections - good luck on that.\n>\n>\n> Anyway, all this concern about SPV mining is misguided: relying purely\n> on SPV w/ low #'s of confirmations just isn't very smart. What SPV can\n> do - at least while the inflation subsidy is still high - is give\n> reasonable protection against your third-party-run trusted full nodes\n> from lying to you, simply because doing so has well-defined costs in\n> terms of energy to create fake blocks. Targetting enough people at once\n> to make a fake block a worthwhile investment is difficult, particularly\n> when you take into account how timing works in the defenders favor - the\n> attacker probably only has a small % of hashing power, so they're going\n> to wait a long time to find their fake block. Between that and a trusted\n> third party-run full node you're probably reasonably safe, for now.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000086007e31decd6eb80e07f77271ef50c69e1e6342161f4e5\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150713/f95a2c26/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-11T15:34:54",
                "message_text_only": "The miners with invalid blocks were punished with a loss of bitcoin\nincome...\n\n\nOn Sat, Jul 11, 2015 at 4:05 AM, Nathan Wilcox <nathan at leastauthority.com>\nwrote:\n\n> Thesis: The disincentive miners have for verifying transactions is\n> problematic and weakens the network's robustness against forks.\n>\n> According to the 2015-07-04 bitcoin.org alert [1]_ so-called \"SPV Mining\"\n> has become popular across a large portion of miners, and this enabled the\n> consensus-violating forks to persist. Peter Todd provides an explanation\n> of the incentive for SPV Mining over in another thread [2]_.\n>\n> .. [1] https://bitcoin.org/en/alert/2015-07-04-spv-mining#cause\n>\n> .. [2]\n> https://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg00404.html\n>\n> If there is a cost to verifying transactions in a received block, then\n> there is an incentive to *not verify transactions*.  However, this is\n> balanced by the a risk of mining atop an invalid block.\n>\n> If we imagine all miners verify all transactions, except Charlie the\n> Cheapskate, then it's in Charlie's interest to forego transaction\n> verification.  If all miners make a similar wager, then in the extreme,\n> no miners verify any transactions, and the expected cost of skipping\n> transaction verification becomes very high.\n>\n> Unfortunately, it's difficult to measure how many miners are not\n> validating transactions, since there's no evidence of this until they\n> mine atop on invalid block. Because of this, I worry that over time,\n> more and more miners cut this particular corner, to save on costs.\n>\n> If true, then the network continues to grow more brittle towards the kind\n> of forking-persistence behavior we saw from the July 4th (and 5th) forks.\n>\n> This gets weird.  For example, a malicious miner which suspects a large\n> fraction of miners are neglecting transaction verification may choose to\n> forego a block reward by throwing an erroneous transaction into their\n> winning block, then, as all the \"SPV Miners\" run off along a worthless\n> chain, they can reap a higher reward rate due to controlling a larger\n> network capacity fraction on the valid chain.\n>\n> Can we fix this?\n>\n> --\n> Nathan Wilcox\n> Least Authoritarian\n>\n> email: nathan at leastauthority.com\n> twitter: @least_nathan\n>\n> Standard Disclaimer: I'm behind on dev archives, irc logs, bitcointalk,\n> the wiki...  if this has been discussed before I appreciate mentions of\n> that fact.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150711/29fc8b6d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "SPV Mining reveals a problematic incentive issue.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Eric Lombrozo",
                "Peter Todd",
                "Dave Hudson",
                "Tier Nolan",
                "Nathan Wilcox",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 45076
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.11.0 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-12T15:49:12",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.11.0 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n\nThis is a new major version release, bringing both new features and\nbug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nThe entire distribution is also available as torrent:\n\n    magnet:?xt=urn:btih:82f0d2fa100d6db8a8c1338768dcb9e4e524da13&dn=bitcoin-core-0.11.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility. There are no\nknown problems when downgrading from 0.11.x to 0.10.x.\n\nImportant information\n======================\n\nTransaction flooding\n- ---------------------\n\nAt the time of this release, the P2P network is being flooded with low-fee\ntransactions. This causes a ballooning of the mempool size.\n\nIf this growth of the mempool causes problematic memory use on your node, it is\npossible to change a few configuration options to work around this. The growth\nof the mempool can be monitored with the RPC command `getmempoolinfo`.\n\nOne is to increase the minimum transaction relay fee `minrelaytxfee`, which\ndefaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\nrejected, and thus fewer transactions entering the mempool.\n\nThe other is to restrict the relaying of free transactions with\n`limitfreerelay`. This option sets the number of kB/minute at which\nfree transactions (with enough priority) will be accepted. It defaults to 15.\nReducing this number reduces the speed at which the mempool can grow due\nto free transactions.\n\nFor example, add the following to `bitcoin.conf`:\n\n    minrelaytxfee=0.00005 \n    limitfreerelay=5\n\nMore robust solutions are being worked on for a follow-up release.\n\nNotable changes\n===============\n\nBlock file pruning\n- ----------------------\n\nThis release supports running a fully validating node without maintaining a copy \nof the raw block and undo data on disk. To recap, there are four types of data \nrelated to the blockchain in the bitcoin system: the raw blocks as received over \nthe network (blk???.dat), the undo data (rev???.dat), the block index and the \nUTXO set (both LevelDB databases). The databases are built from the raw data.\n\nBlock pruning allows Bitcoin Core to delete the raw block and undo data once \nit's been validated and used to build the databases. At that point, the raw data \nis used only to relay blocks to other nodes, to handle reorganizations, to look \nup old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \nfor rescanning the wallet. The block index continues to hold the metadata about \nall blocks in the blockchain.\n\nThe user specifies how much space to allot for block & undo files. The minimum \nallowed is 550MB. Note that this is in addition to whatever is required for the \nblock index and UTXO databases. The minimum was chosen so that Bitcoin Core will \nbe able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \nminutes per block). In rare instances it is possible that the amount of space \nused will exceed the pruning target in order to keep the required last 288 \nblocks on disk.\n\nBlock pruning works during initial sync in the same way as during steady state, \nby deleting block files \"as you go\" whenever disk space is allocated. Thus, if \nthe user specifies 550MB, once that level is reached the program will begin \ndeleting the oldest block and undo files, while continuing to download the \nblockchain.\n\nFor now, block pruning disables block relay.  In the future, nodes with block \npruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \nactive chain. \n\nBlock pruning is currently incompatible with running a wallet due to the fact \nthat block data is used for rescanning the wallet and importing keys or \naddresses (which require a rescan.) However, running the wallet with block \npruning will be supported in the near future, subject to those limitations.\n\nBlock pruning is also incompatible with -txindex and will automatically disable \nit.\n\nOnce you have pruned blocks, going back to unpruned state requires \nre-downloading the entire blockchain. To do this, re-start the node with \n- -reindex. Note also that any problem that would cause a user to reindex (e.g., \ndisk corruption) will cause a pruned node to redownload the entire blockchain. \nFinally, note that when a pruned node reindexes, it will delete any blk???.dat \nand rev???.dat files in the data directory prior to restarting the download.\n\nTo enable block pruning on the command line:\n\n- - `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n\nModified RPC calls:\n\n- - `getblockchaininfo` now includes whether we are in pruned mode or not.\n- - `getblock` will check if the block's data has been pruned and if so, return an \nerror.\n- - `getrawtransaction` will no longer be able to locate a transaction that has a \nUTXO but where its block file has been pruned. \n\nPruning is disabled by default.\n\nBig endian support\n- --------------------\n\nExperimental support for big-endian CPU architectures was added in this\nrelease. All little-endian specific code was replaced with endian-neutral\nconstructs. This has been tested on at least MIPS and PPC hosts. The build\nsystem will automatically detect the endianness of the target.\n\nMemory usage optimization\n- --------------------------\n\nThere have been many changes in this release to reduce the default memory usage\nof a node, among which:\n\n- - Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n  precise where this grossly underestimated memory usage before\n- - Reduce size of per-peer data structure (#6064 and others); this increases the\n  number of connections that can be supported with the same amount of memory\n- - Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n  virtual) memory needed\n\nFee estimation changes\n- ----------------------\n\nThis release improves the algorithm used for fee estimation.  Previously, -1\nwas returned when there was insufficient data to give an estimate.  Now, -1\nwill also be returned when there is no fee or priority high enough for the\ndesired confirmation target. In those cases, it can help to ask for an estimate\nfor a higher target number of blocks. It is not uncommon for there to be no\nfee or priority high enough to be reliably (85%) included in the next block and\nfor this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n\nPrivacy: Disable wallet transaction broadcast\n- ----------------------------------------------\n\nThis release adds an option `-walletbroadcast=0` to prevent automatic\ntransaction broadcast and rebroadcast (#5951). This option allows separating\ntransaction submission from the node functionality.\n\nMaking use of this, third-party scripts can be written to take care of\ntransaction (re)broadcast:\n\n- - Send the transaction as normal, either through RPC or the GUI\n- - Retrieve the transaction data through RPC using `gettransaction` (NOT\n  `getrawtransaction`). The `hex` field of the result will contain the raw\n  hexadecimal representation of the transaction\n- - The transaction can then be broadcasted through arbitrary mechanisms\n  supported by the script\n\nOne such application is selective Tor usage, where the node runs on the normal\ninternet but transactions are broadcasted over Tor.\n\nFor an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n\nPrivacy: Stream isolation for Tor\n- ----------------------------------\n\nThis release adds functionality to create a new circuit for every peer\nconnection, when the software is used with Tor. The new option,\n`-proxyrandomize`, is on by default.\n\nWhen enabled, every outgoing connection will (potentially) go through a\ndifferent exit node. That significantly reduces the chance to get unlucky and\npick a single exit node that is either malicious, or widely banned from the P2P\nnetwork. This improves connection reliability as well as privacy, especially\nfor the initial connections.\n\n**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\nauthentication, but doesn't require it, this change may cause that proxy to reject\nconnections. A user and password is sent where they weren't before. This setup\nis exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\ndisable the behavior.\n\n0.11.0 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n### RPC and REST\n- - #5461 `5f7279a` signrawtransaction: validate private key\n- - #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n- - #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n- - #5476 `c986972` Add time offset into getpeerinfo output\n- - #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n- - #5599 `40e96a3` Get rid of the internal miner's hashmeter\n- - #5711 `87ecfb0` Push down RPC locks\n- - #5754 `1c4e3f9` fix getblocktemplate lock issue\n- - #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n- - #5548 `d48ce48` Add /rest/chaininfos\n- - #5992 `4c4f1b4` Push down RPC reqWallet flag\n- - #6036 `585b5db` Show zero value txouts in listunspent\n- - #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n- - #5418 `16341cc` Report missing inputs in sendrawtransaction\n- - #5937 `40f5e8d` show script verification errors in signrawtransaction result\n- - #5420 `1fd2d39` getutxos REST command (based on Bip64)\n- - #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n- - #6226 `5901596` json: fail read_string if string contains trailing garbage\n\n### Configuration and command-line options\n- - #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n- - #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n- - #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n- - #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n- - #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n- - #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n- - #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n\n### Block and transaction handling\n- - #5367 `dcc1304` Do all block index writes in a batch\n- - #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n- - #5459 `4406c3e` Reject headers that build on an invalid parent\n- - #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n- - #5580 `40d65eb` Preemptively catch a few potential bugs\n- - #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n- - #5564 `a89b837` clarify obscure uses of EvalScript()\n- - #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n- - #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n- - #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n- - #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n- - #5948 `b36f1ce` Use GetAncestor to compute new target\n- - #5959 `a0bfc69` Add additional block index consistency checks\n- - #6058 `7e0e7f8` autoprune minor post-merge improvements\n- - #5159 `2cc1372` New fee estimation code\n- - #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n- - #6129 `2a82298` Bug fix for clearing fCheckForPruning\n- - #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n- - #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n- - #5985 `37b4e42` Fix removing of orphan transactions\n- - #6221 `6cb70ca` Prune: Support noncontiguous block files\n- - #6256 `fce474c` Use best header chain timestamps to detect partitioning\n- - #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n\n### P2P protocol and network code\n- - #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n- - #5770 `32a8b6a` Sanitize command strings before logging them\n- - #5859 `dd4ffce` Add correct bool combiner for net signals\n- - #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n- - #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n- - #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n- - #5971 `18d2832` replace absolute sleep with conditional wait\n- - #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n- - #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n- - #6080 `31c0bf1` Add jonasschnellis dns seeder\n- - #5976 `9f7809f` Reduce download timeouts as blocks arrive\n- - #6172 `b4bbad1` Ignore getheaders requests when not synced\n- - #5875 `304892f` Be stricter in processing unrequested blocks\n- - #6333 `41bbc85` Hardcoded seeds update June 2015\n\n### Validation\n- - #5143 `48e1765` Implement BIP62 rule 6\n- - #5713 `41e6e4c` Implement BIP66\n\n### Build system\n- - #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n- - #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n- - #5514 `ed11d53` Fix 'make distcheck'\n- - #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n- - #5582 `e8a6639` Osx toolchain update\n- - #5684 `ab64022` osx: bump build sdk to 10.9\n- - #5695 `23ef5b7` depends: latest config.guess and config.sub\n- - #5509 `31dedb4` Fixes when compiling in c++11 mode\n- - #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n- - #5510 `7c3fbc3` Big endian support\n- - #5149 `c7abfa5` Add script to verify all merge commits are signed\n- - #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n- - #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n- - #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n- - #6285 `ef1d506` Fix scheduler build with some boost versions.\n- - #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n- - #6303 `b711599` gitian: add a gitian-win-signer descriptor\n- - #6246 `8ea6d37` Fix build on FreeBSD\n- - #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n- - #6354 `bdf0d94` Gitian windows signing normalization\n\n### Wallet\n- - #2340 `811c71d` Discourage fee sniping with nLockTime\n- - #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n- - #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n- - #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n- - #5319 `93b7544` Clean up wallet encryption code\n- - #5831 `df5c246` Subtract fee from amount\n- - #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n- - #5511 `23c998d` Sort pending wallet transactions before reaccepting\n- - #6126 `26e08a1` Change default nTxConfirmTarget to 2\n- - #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n- - #6276 `c9fd907` Fix getbalance * 0\n\n### GUI\n- - #5219 `f3af0c8` New icons\n- - #5228 `bb3c75b` HiDPI (retina) support for splash screen\n- - #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n- - #5488 `851dfc7` Light blue icon color for regtest\n- - #5547 `a39aa74` New icon for the debug window\n- - #5493 `e515309` Adopt style colour for button icons\n- - #5557 `70477a0` On close of splashscreen interrupt verifyDB\n- - #5559 `83be8fd` Make the command-line-args dialog better\n- - #5144 `c5380a9` Elaborate on signverify message dialog warning\n- - #5489 `d1aa3c6` Optimize PNG files\n- - #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n- - #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n- - #5626 `ab0d798` Fix icon sizes and column width\n- - #5683 `c7b22aa` add new osx dmg background picture\n- - #5620 `7823598` Payment request expiration bug fix\n- - #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n- - #5753 `0f44672` Add bitcoin logo to about screen\n- - #5629 `a956586` Prevent amount overflow problem with payment requests\n- - #5830 `215475a` Don't save geometry for options and about/help window\n- - #5793 `d26f0b2` Honor current network when creating autostart link\n- - #5847 `f238add` Startup script for centos, with documentation\n- - #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n- - #5898 `bb56781` Fix rpc console font size to flexible metrics\n- - #5467 `bc8535b` Payment request / server work - part 2\n- - #6161 `180c164` Remove movable option for toolbar\n- - #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n\n### Tests\n- - #5453 `2f2d337` Add ability to run single test manually to RPC tests\n- - #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n- - #5530 `565b300` Additional rpc tests\n- - #5611 `37b185c` Fix spurious windows test failures after 012598880c\n- - #5613 `2eda47b` Fix smartfees test for change to relay policy\n- - #5612 `e3f5727` Fix zapwallettxes test\n- - #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n- - #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n- - #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n- - #5855 `d7989c0` Travis: run unit tests in different orders\n- - #5852 `cdae53e` Reinitialize state in between individual unit tests.\n- - #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n- - #5940 `446bb70` Regression test for ResendWalletTransactions\n- - #6052 `cf7adad` fix and enable bip32 unit test\n- - #6039 `734f80a` tests: Error when setgenerate is used on regtest\n- - #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n- - #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n- - #6075 `df1609f` Add additional script edge condition tests\n- - #5981 `da38dc6` Python P2P testing \n- - #5958 `9ef00c3` Add multisig rpc tests\n- - #6112 `fec5c0e` Add more script edge condition tests\n\n### Miscellaneous\n- - #5457, #5506, #5952, #6047 Update libsecp256k1\n- - #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n- - #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n- - #5654, #5764 Adding jonasschnelli's GPG key\n- - #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n- - #5679 `beff11a` Get rid of DetectShutdownThread\n- - #5787 `9bd8c9b` Add fanquake PGP key\n- - #5366 `47a79bb` No longer check osx compatibility in RenameThread\n- - #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n- - #5708 `8b298ca` Add list of implemented BIPs\n- - #5809 `46bfbe7` Add bitcoin-cli man page\n- - #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n- - #5749 `d734d87` Help messages correctly formatted (79 chars)\n- - #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n- - #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n- - #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n- - #5965 `7c6bfb1` Add git-subtree-check.sh script\n- - #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n- - #6064 `b46e7c2` Several changes to mruset\n- - #6104 `3e2559c` Show an init message while activating best chain\n- - #6125 `351f73e` Clean up parsing of bool command line args\n- - #5964 `b4c219b` Lightweight task scheduler\n- - #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n- - #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n- - #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n- - #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n- - #6186 `182686c` Fix two problems in CSubnet parsing\n- - #6174 `df992b9` doc: add translation strings policy\n- - #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n- - #6264 `94cd705` Remove translation for -help-debug options\n- - #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n- - #6319 `3f8fcc9` doc: update mailing list address\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 21E14\n- - Adam Weiss\n- - Alex Morcos\n- - ayeowch\n- - azeteki\n- - Ben Holden-Crowther\n- - bikinibabe\n- - BitcoinPRReadingGroup\n- - Blake Jakopovic\n- - BtcDrak\n- - charlescharles\n- - Chris Arnesen\n- - Ciemon\n- - CohibAA\n- - Corinne Dashjr\n- - Cory Fields\n- - Cozz Lovan\n- - Daira Hopwood\n- - Daniel Kraft\n- - Dave Collins\n- - David A. Harding\n- - dexX7\n- - Earlz\n- - Eric Lombrozo\n- - Eric R. Schulz\n- - Everett Forth\n- - Flavien Charlon\n- - fsb4000\n- - Gavin Andresen\n- - Gregory Maxwell\n- - Heath\n- - Ivan Pustogarov\n- - Jacob Welsh\n- - Jameson Lopp\n- - Jason Lewicki\n- - Jeff Garzik\n- - Jonas Schnelli\n- - Jonathan Brown\n- - Jorge Tim\u00f3n\n- - joshr\n- - jtimon\n- - Julian Yap\n- - Luca Venturini\n- - Luke Dashjr\n- - Manuel Araoz\n- - MarcoFalke\n- - Matt Bogosian\n- - Matt Corallo\n- - Micha\n- - Michael Ford\n- - Mike Hearn\n- - mrbandrews\n- - Nicolas Benoit\n- - paveljanik\n- - Pavel Jan\u00edk\n- - Pavel Vasin\n- - Peter Todd\n- - Philip Kaufmann\n- - Pieter Wuille\n- - pstratem\n- - randy-waterhouse\n- - rion\n- - Rob Van Mieghem\n- - Ross Nicoll\n- - Ruben de Vries\n- - sandakersmann\n- - Shaul Kfir\n- - Shawn Wilkinson\n- - sinetek\n- - Suhas Daftuar\n- - svost\n- - Thomas Zander\n- - Tom Harding\n- - UdjinM6\n- - Vitalii Demianets\n- - Wladimir J. van der Laan\n\nAnd all those who contributed additional code review and/or security research:\n\n- - Sergio Demian Lerner\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJVooumAAoJEHSBCwEjRsmm+Q8H/3vff2/a7iSYTNtaM6tzVV8u\nMrRel/DowjcNQhMEcmKWoUWEzMuoWol/MbsLBaQvVXg9/8w9V5Cbji02cA2EDbpp\n6zbSBwWgVgiQcfI1EERd6K6s7d+iJ/BNGOovAmtFJZVSh8RplC0TQ9C5ZSemijSK\npjzMER0iBgtL4o2MGfpYXvL7e0DKqQ6S+IsBCI3aLiAu2wWnkaoMNol/06+GFgZA\nUTX3QzeC/qaNYBtPNq4F8z+p024ATxVhWuUKP0tLQKVBUKJ5YWcCxwpGVIKkwSa/\nri7zf0K+t65mpdLteIagHuWXpB6jOXp3n/X3aKKNAnEGdEyYmUIM+1XloOI+au0=\n=o4yU\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-12T16:41:00",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n/Re-transmission: signature was botched in previous mail/\n\nBitcoin Core version 0.11.0 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n\nThis is a new major version release, bringing both new features and\nbug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nThe entire distribution is also available as torrent:\n\n     magnet:?xt=urn:btih:82f0d2fa100d6db8a8c1338768dcb9e4e524da13&dn=bitcoin-core-0.11.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility. There are no\nknown problems when downgrading from 0.11.x to 0.10.x.\n\nImportant information\n======================\n\nTransaction flooding\n- ---------------------\n\nAt the time of this release, the P2P network is being flooded with low-fee\ntransactions. This causes a ballooning of the mempool size.\n\nIf this growth of the mempool causes problematic memory use on your node, it is\npossible to change a few configuration options to work around this. The growth\nof the mempool can be monitored with the RPC command `getmempoolinfo`.\n\nOne is to increase the minimum transaction relay fee `minrelaytxfee`, which\ndefaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\nrejected, and thus fewer transactions entering the mempool.\n\nThe other is to restrict the relaying of free transactions with\n`limitfreerelay`. This option sets the number of kB/minute at which\nfree transactions (with enough priority) will be accepted. It defaults to 15.\nReducing this number reduces the speed at which the mempool can grow due\nto free transactions.\n\nFor example, add the following to `bitcoin.conf`:\n\n    minrelaytxfee=0.00005 \n    limitfreerelay=5\n\nMore robust solutions are being worked on for a follow-up release.\n\nNotable changes\n===============\n\nBlock file pruning\n- ----------------------\n\nThis release supports running a fully validating node without maintaining a copy \nof the raw block and undo data on disk. To recap, there are four types of data \nrelated to the blockchain in the bitcoin system: the raw blocks as received over \nthe network (blk???.dat), the undo data (rev???.dat), the block index and the \nUTXO set (both LevelDB databases). The databases are built from the raw data.\n\nBlock pruning allows Bitcoin Core to delete the raw block and undo data once \nit's been validated and used to build the databases. At that point, the raw data \nis used only to relay blocks to other nodes, to handle reorganizations, to look \nup old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \nfor rescanning the wallet. The block index continues to hold the metadata about \nall blocks in the blockchain.\n\nThe user specifies how much space to allot for block & undo files. The minimum \nallowed is 550MB. Note that this is in addition to whatever is required for the \nblock index and UTXO databases. The minimum was chosen so that Bitcoin Core will \nbe able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \nminutes per block). In rare instances it is possible that the amount of space \nused will exceed the pruning target in order to keep the required last 288 \nblocks on disk.\n\nBlock pruning works during initial sync in the same way as during steady state, \nby deleting block files \"as you go\" whenever disk space is allocated. Thus, if \nthe user specifies 550MB, once that level is reached the program will begin \ndeleting the oldest block and undo files, while continuing to download the \nblockchain.\n\nFor now, block pruning disables block relay.  In the future, nodes with block \npruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \nactive chain. \n\nBlock pruning is currently incompatible with running a wallet due to the fact \nthat block data is used for rescanning the wallet and importing keys or \naddresses (which require a rescan.) However, running the wallet with block \npruning will be supported in the near future, subject to those limitations.\n\nBlock pruning is also incompatible with -txindex and will automatically disable \nit.\n\nOnce you have pruned blocks, going back to unpruned state requires \nre-downloading the entire blockchain. To do this, re-start the node with \n- -reindex. Note also that any problem that would cause a user to reindex (e.g., \ndisk corruption) will cause a pruned node to redownload the entire blockchain. \nFinally, note that when a pruned node reindexes, it will delete any blk???.dat \nand rev???.dat files in the data directory prior to restarting the download.\n\nTo enable block pruning on the command line:\n\n- - `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n\nModified RPC calls:\n\n- - `getblockchaininfo` now includes whether we are in pruned mode or not.\n- - `getblock` will check if the block's data has been pruned and if so, return an \nerror.\n- - `getrawtransaction` will no longer be able to locate a transaction that has a \nUTXO but where its block file has been pruned. \n\nPruning is disabled by default.\n\nBig endian support\n- --------------------\n\nExperimental support for big-endian CPU architectures was added in this\nrelease. All little-endian specific code was replaced with endian-neutral\nconstructs. This has been tested on at least MIPS and PPC hosts. The build\nsystem will automatically detect the endianness of the target.\n\nMemory usage optimization\n- --------------------------\n\nThere have been many changes in this release to reduce the default memory usage\nof a node, among which:\n\n- - Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n  precise where this grossly underestimated memory usage before\n- - Reduce size of per-peer data structure (#6064 and others); this increases the\n  number of connections that can be supported with the same amount of memory\n- - Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n  virtual) memory needed\n\nFee estimation changes\n- ----------------------\n\nThis release improves the algorithm used for fee estimation.  Previously, -1\nwas returned when there was insufficient data to give an estimate.  Now, -1\nwill also be returned when there is no fee or priority high enough for the\ndesired confirmation target. In those cases, it can help to ask for an estimate\nfor a higher target number of blocks. It is not uncommon for there to be no\nfee or priority high enough to be reliably (85%) included in the next block and\nfor this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n\nPrivacy: Disable wallet transaction broadcast\n- ----------------------------------------------\n\nThis release adds an option `-walletbroadcast=0` to prevent automatic\ntransaction broadcast and rebroadcast (#5951). This option allows separating\ntransaction submission from the node functionality.\n\nMaking use of this, third-party scripts can be written to take care of\ntransaction (re)broadcast:\n\n- - Send the transaction as normal, either through RPC or the GUI\n- - Retrieve the transaction data through RPC using `gettransaction` (NOT\n  `getrawtransaction`). The `hex` field of the result will contain the raw\n  hexadecimal representation of the transaction\n- - The transaction can then be broadcasted through arbitrary mechanisms\n  supported by the script\n\nOne such application is selective Tor usage, where the node runs on the normal\ninternet but transactions are broadcasted over Tor.\n\nFor an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n\nPrivacy: Stream isolation for Tor\n- ----------------------------------\n\nThis release adds functionality to create a new circuit for every peer\nconnection, when the software is used with Tor. The new option,\n`-proxyrandomize`, is on by default.\n\nWhen enabled, every outgoing connection will (potentially) go through a\ndifferent exit node. That significantly reduces the chance to get unlucky and\npick a single exit node that is either malicious, or widely banned from the P2P\nnetwork. This improves connection reliability as well as privacy, especially\nfor the initial connections.\n\n**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\nauthentication, but doesn't require it, this change may cause that proxy to reject\nconnections. A user and password is sent where they weren't before. This setup\nis exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\ndisable the behavior.\n\n0.11.0 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n### RPC and REST\n- - #5461 `5f7279a` signrawtransaction: validate private key\n- - #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n- - #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n- - #5476 `c986972` Add time offset into getpeerinfo output\n- - #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n- - #5599 `40e96a3` Get rid of the internal miner's hashmeter\n- - #5711 `87ecfb0` Push down RPC locks\n- - #5754 `1c4e3f9` fix getblocktemplate lock issue\n- - #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n- - #5548 `d48ce48` Add /rest/chaininfos\n- - #5992 `4c4f1b4` Push down RPC reqWallet flag\n- - #6036 `585b5db` Show zero value txouts in listunspent\n- - #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n- - #5418 `16341cc` Report missing inputs in sendrawtransaction\n- - #5937 `40f5e8d` show script verification errors in signrawtransaction result\n- - #5420 `1fd2d39` getutxos REST command (based on Bip64)\n- - #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n- - #6226 `5901596` json: fail read_string if string contains trailing garbage\n\n### Configuration and command-line options\n- - #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n- - #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n- - #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n- - #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n- - #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n- - #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n- - #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n\n### Block and transaction handling\n- - #5367 `dcc1304` Do all block index writes in a batch\n- - #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n- - #5459 `4406c3e` Reject headers that build on an invalid parent\n- - #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n- - #5580 `40d65eb` Preemptively catch a few potential bugs\n- - #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n- - #5564 `a89b837` clarify obscure uses of EvalScript()\n- - #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n- - #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n- - #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n- - #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n- - #5948 `b36f1ce` Use GetAncestor to compute new target\n- - #5959 `a0bfc69` Add additional block index consistency checks\n- - #6058 `7e0e7f8` autoprune minor post-merge improvements\n- - #5159 `2cc1372` New fee estimation code\n- - #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n- - #6129 `2a82298` Bug fix for clearing fCheckForPruning\n- - #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n- - #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n- - #5985 `37b4e42` Fix removing of orphan transactions\n- - #6221 `6cb70ca` Prune: Support noncontiguous block files\n- - #6256 `fce474c` Use best header chain timestamps to detect partitioning\n- - #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n\n### P2P protocol and network code\n- - #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n- - #5770 `32a8b6a` Sanitize command strings before logging them\n- - #5859 `dd4ffce` Add correct bool combiner for net signals\n- - #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n- - #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n- - #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n- - #5971 `18d2832` replace absolute sleep with conditional wait\n- - #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n- - #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n- - #6080 `31c0bf1` Add jonasschnellis dns seeder\n- - #5976 `9f7809f` Reduce download timeouts as blocks arrive\n- - #6172 `b4bbad1` Ignore getheaders requests when not synced\n- - #5875 `304892f` Be stricter in processing unrequested blocks\n- - #6333 `41bbc85` Hardcoded seeds update June 2015\n\n### Validation\n- - #5143 `48e1765` Implement BIP62 rule 6\n- - #5713 `41e6e4c` Implement BIP66\n\n### Build system\n- - #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n- - #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n- - #5514 `ed11d53` Fix 'make distcheck'\n- - #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n- - #5582 `e8a6639` Osx toolchain update\n- - #5684 `ab64022` osx: bump build sdk to 10.9\n- - #5695 `23ef5b7` depends: latest config.guess and config.sub\n- - #5509 `31dedb4` Fixes when compiling in c++11 mode\n- - #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n- - #5510 `7c3fbc3` Big endian support\n- - #5149 `c7abfa5` Add script to verify all merge commits are signed\n- - #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n- - #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n- - #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n- - #6285 `ef1d506` Fix scheduler build with some boost versions.\n- - #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n- - #6303 `b711599` gitian: add a gitian-win-signer descriptor\n- - #6246 `8ea6d37` Fix build on FreeBSD\n- - #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n- - #6354 `bdf0d94` Gitian windows signing normalization\n\n### Wallet\n- - #2340 `811c71d` Discourage fee sniping with nLockTime\n- - #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n- - #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n- - #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n- - #5319 `93b7544` Clean up wallet encryption code\n- - #5831 `df5c246` Subtract fee from amount\n- - #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n- - #5511 `23c998d` Sort pending wallet transactions before reaccepting\n- - #6126 `26e08a1` Change default nTxConfirmTarget to 2\n- - #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n- - #6276 `c9fd907` Fix getbalance * 0\n\n### GUI\n- - #5219 `f3af0c8` New icons\n- - #5228 `bb3c75b` HiDPI (retina) support for splash screen\n- - #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n- - #5488 `851dfc7` Light blue icon color for regtest\n- - #5547 `a39aa74` New icon for the debug window\n- - #5493 `e515309` Adopt style colour for button icons\n- - #5557 `70477a0` On close of splashscreen interrupt verifyDB\n- - #5559 `83be8fd` Make the command-line-args dialog better\n- - #5144 `c5380a9` Elaborate on signverify message dialog warning\n- - #5489 `d1aa3c6` Optimize PNG files\n- - #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n- - #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n- - #5626 `ab0d798` Fix icon sizes and column width\n- - #5683 `c7b22aa` add new osx dmg background picture\n- - #5620 `7823598` Payment request expiration bug fix\n- - #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n- - #5753 `0f44672` Add bitcoin logo to about screen\n- - #5629 `a956586` Prevent amount overflow problem with payment requests\n- - #5830 `215475a` Don't save geometry for options and about/help window\n- - #5793 `d26f0b2` Honor current network when creating autostart link\n- - #5847 `f238add` Startup script for centos, with documentation\n- - #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n- - #5898 `bb56781` Fix rpc console font size to flexible metrics\n- - #5467 `bc8535b` Payment request / server work - part 2\n- - #6161 `180c164` Remove movable option for toolbar\n- - #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n\n### Tests\n- - #5453 `2f2d337` Add ability to run single test manually to RPC tests\n- - #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n- - #5530 `565b300` Additional rpc tests\n- - #5611 `37b185c` Fix spurious windows test failures after 012598880c\n- - #5613 `2eda47b` Fix smartfees test for change to relay policy\n- - #5612 `e3f5727` Fix zapwallettxes test\n- - #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n- - #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n- - #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n- - #5855 `d7989c0` Travis: run unit tests in different orders\n- - #5852 `cdae53e` Reinitialize state in between individual unit tests.\n- - #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n- - #5940 `446bb70` Regression test for ResendWalletTransactions\n- - #6052 `cf7adad` fix and enable bip32 unit test\n- - #6039 `734f80a` tests: Error when setgenerate is used on regtest\n- - #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n- - #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n- - #6075 `df1609f` Add additional script edge condition tests\n- - #5981 `da38dc6` Python P2P testing \n- - #5958 `9ef00c3` Add multisig rpc tests\n- - #6112 `fec5c0e` Add more script edge condition tests\n\n### Miscellaneous\n- - #5457, #5506, #5952, #6047 Update libsecp256k1\n- - #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n- - #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n- - #5654, #5764 Adding jonasschnelli's GPG key\n- - #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n- - #5679 `beff11a` Get rid of DetectShutdownThread\n- - #5787 `9bd8c9b` Add fanquake PGP key\n- - #5366 `47a79bb` No longer check osx compatibility in RenameThread\n- - #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n- - #5708 `8b298ca` Add list of implemented BIPs\n- - #5809 `46bfbe7` Add bitcoin-cli man page\n- - #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n- - #5749 `d734d87` Help messages correctly formatted (79 chars)\n- - #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n- - #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n- - #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n- - #5965 `7c6bfb1` Add git-subtree-check.sh script\n- - #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n- - #6064 `b46e7c2` Several changes to mruset\n- - #6104 `3e2559c` Show an init message while activating best chain\n- - #6125 `351f73e` Clean up parsing of bool command line args\n- - #5964 `b4c219b` Lightweight task scheduler\n- - #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n- - #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n- - #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n- - #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n- - #6186 `182686c` Fix two problems in CSubnet parsing\n- - #6174 `df992b9` doc: add translation strings policy\n- - #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n- - #6264 `94cd705` Remove translation for -help-debug options\n- - #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n- - #6319 `3f8fcc9` doc: update mailing list address\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 21E14\n- - Adam Weiss\n- - Alex Morcos\n- - ayeowch\n- - azeteki\n- - Ben Holden-Crowther\n- - bikinibabe\n- - BitcoinPRReadingGroup\n- - Blake Jakopovic\n- - BtcDrak\n- - charlescharles\n- - Chris Arnesen\n- - Ciemon\n- - CohibAA\n- - Corinne Dashjr\n- - Cory Fields\n- - Cozz Lovan\n- - Daira Hopwood\n- - Daniel Kraft\n- - Dave Collins\n- - David A. Harding\n- - dexX7\n- - Earlz\n- - Eric Lombrozo\n- - Eric R. Schulz\n- - Everett Forth\n- - Flavien Charlon\n- - fsb4000\n- - Gavin Andresen\n- - Gregory Maxwell\n- - Heath\n- - Ivan Pustogarov\n- - Jacob Welsh\n- - Jameson Lopp\n- - Jason Lewicki\n- - Jeff Garzik\n- - Jonas Schnelli\n- - Jonathan Brown\n- - Jorge Tim\u00f3n\n- - joshr\n- - jtimon\n- - Julian Yap\n- - Luca Venturini\n- - Luke Dashjr\n- - Manuel Araoz\n- - MarcoFalke\n- - Matt Bogosian\n- - Matt Corallo\n- - Micha\n- - Michael Ford\n- - Mike Hearn\n- - mrbandrews\n- - Nicolas Benoit\n- - paveljanik\n- - Pavel Jan\u00edk\n- - Pavel Vasin\n- - Peter Todd\n- - Philip Kaufmann\n- - Pieter Wuille\n- - pstratem\n- - randy-waterhouse\n- - rion\n- - Rob Van Mieghem\n- - Ross Nicoll\n- - Ruben de Vries\n- - sandakersmann\n- - Shaul Kfir\n- - Shawn Wilkinson\n- - sinetek\n- - Suhas Daftuar\n- - svost\n- - Thomas Zander\n- - Tom Harding\n- - UdjinM6\n- - Vitalii Demianets\n- - Wladimir J. van der Laan\n\nAnd all those who contributed additional code review and/or security research:\n\n- - Sergio Demian Lerner\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJVophhAAoJEHSBCwEjRsmmL9sH/1flr5GRMtYrEMJtXyWc5n6m\ngQfapX0IJ3vO9hV2nhTQcXo/BTZqbsVN1ZOh/TqUklE/EiLFqwU3S6KEzlelOzOd\nJqNNB5jELmThU6/GtzjFNqwPjyr1KZDthA08MFw3YSNO8vOtfn2VJwG1ydBsQHxy\nWrVmoKA4g7ttTmF4i5AmUXARWjnvMSdrTNlYnBkkq/DdovHN3QVSe5w2tN9OGhGz\nZo+QGppuaRrJGl7dJWM3W4CsHcAOMY41aLm+fgtieW5VR77MJVMkiOzR3WrP2IGI\n8BjUKlNQxvQ1iXfJl9oVGcVE16dJiaR1FlZVm+p+9oBzCPWjFO1OUr+AVm/o74E=\n=uDa+\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-12T17:13:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n/Re-transmission-2: signature was botched in previous mails due to UTF-8 conversion issue, last attempt/\n\nBitcoin Core version 0.11.0 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n\nThis is a new major version release, bringing both new features and\nbug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nThe entire distribution is also available as torrent:\n\n    magnet:?xt=urn:btih:82f0d2fa100d6db8a8c1338768dcb9e4e524da13&dn=bitcoin-core-0.11.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility. There are no\nknown problems when downgrading from 0.11.x to 0.10.x.\n\nImportant information\n======================\n\nTransaction flooding\n- ---------------------\n\nAt the time of this release, the P2P network is being flooded with low-fee\ntransactions. This causes a ballooning of the mempool size.\n\nIf this growth of the mempool causes problematic memory use on your node, it is\npossible to change a few configuration options to work around this. The growth\nof the mempool can be monitored with the RPC command `getmempoolinfo`.\n\nOne is to increase the minimum transaction relay fee `minrelaytxfee`, which\ndefaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\nrejected, and thus fewer transactions entering the mempool.\n\nThe other is to restrict the relaying of free transactions with\n`limitfreerelay`. This option sets the number of kB/minute at which\nfree transactions (with enough priority) will be accepted. It defaults to 15.\nReducing this number reduces the speed at which the mempool can grow due\nto free transactions.\n\nFor example, add the following to `bitcoin.conf`:\n\n    minrelaytxfee=0.00005 \n    limitfreerelay=5\n\nMore robust solutions are being worked on for a follow-up release.\n\nNotable changes\n===============\n\nBlock file pruning\n- ----------------------\n\nThis release supports running a fully validating node without maintaining a copy \nof the raw block and undo data on disk. To recap, there are four types of data \nrelated to the blockchain in the bitcoin system: the raw blocks as received over \nthe network (blk???.dat), the undo data (rev???.dat), the block index and the \nUTXO set (both LevelDB databases). The databases are built from the raw data.\n\nBlock pruning allows Bitcoin Core to delete the raw block and undo data once \nit's been validated and used to build the databases. At that point, the raw data \nis used only to relay blocks to other nodes, to handle reorganizations, to look \nup old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \nfor rescanning the wallet. The block index continues to hold the metadata about \nall blocks in the blockchain.\n\nThe user specifies how much space to allot for block & undo files. The minimum \nallowed is 550MB. Note that this is in addition to whatever is required for the \nblock index and UTXO databases. The minimum was chosen so that Bitcoin Core will \nbe able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \nminutes per block). In rare instances it is possible that the amount of space \nused will exceed the pruning target in order to keep the required last 288 \nblocks on disk.\n\nBlock pruning works during initial sync in the same way as during steady state, \nby deleting block files \"as you go\" whenever disk space is allocated. Thus, if \nthe user specifies 550MB, once that level is reached the program will begin \ndeleting the oldest block and undo files, while continuing to download the \nblockchain.\n\nFor now, block pruning disables block relay.  In the future, nodes with block \npruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \nactive chain. \n\nBlock pruning is currently incompatible with running a wallet due to the fact \nthat block data is used for rescanning the wallet and importing keys or \naddresses (which require a rescan.) However, running the wallet with block \npruning will be supported in the near future, subject to those limitations.\n\nBlock pruning is also incompatible with -txindex and will automatically disable \nit.\n\nOnce you have pruned blocks, going back to unpruned state requires \nre-downloading the entire blockchain. To do this, re-start the node with \n- -reindex. Note also that any problem that would cause a user to reindex (e.g., \ndisk corruption) will cause a pruned node to redownload the entire blockchain. \nFinally, note that when a pruned node reindexes, it will delete any blk???.dat \nand rev???.dat files in the data directory prior to restarting the download.\n\nTo enable block pruning on the command line:\n\n- - `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n\nModified RPC calls:\n\n- - `getblockchaininfo` now includes whether we are in pruned mode or not.\n- - `getblock` will check if the block's data has been pruned and if so, return an \nerror.\n- - `getrawtransaction` will no longer be able to locate a transaction that has a \nUTXO but where its block file has been pruned. \n\nPruning is disabled by default.\n\nBig endian support\n- --------------------\n\nExperimental support for big-endian CPU architectures was added in this\nrelease. All little-endian specific code was replaced with endian-neutral\nconstructs. This has been tested on at least MIPS and PPC hosts. The build\nsystem will automatically detect the endianness of the target.\n\nMemory usage optimization\n- --------------------------\n\nThere have been many changes in this release to reduce the default memory usage\nof a node, among which:\n\n- - Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n  precise where this grossly underestimated memory usage before\n- - Reduce size of per-peer data structure (#6064 and others); this increases the\n  number of connections that can be supported with the same amount of memory\n- - Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n  virtual) memory needed\n\nFee estimation changes\n- ----------------------\n\nThis release improves the algorithm used for fee estimation.  Previously, -1\nwas returned when there was insufficient data to give an estimate.  Now, -1\nwill also be returned when there is no fee or priority high enough for the\ndesired confirmation target. In those cases, it can help to ask for an estimate\nfor a higher target number of blocks. It is not uncommon for there to be no\nfee or priority high enough to be reliably (85%) included in the next block and\nfor this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n\nPrivacy: Disable wallet transaction broadcast\n- ----------------------------------------------\n\nThis release adds an option `-walletbroadcast=0` to prevent automatic\ntransaction broadcast and rebroadcast (#5951). This option allows separating\ntransaction submission from the node functionality.\n\nMaking use of this, third-party scripts can be written to take care of\ntransaction (re)broadcast:\n\n- - Send the transaction as normal, either through RPC or the GUI\n- - Retrieve the transaction data through RPC using `gettransaction` (NOT\n  `getrawtransaction`). The `hex` field of the result will contain the raw\n  hexadecimal representation of the transaction\n- - The transaction can then be broadcasted through arbitrary mechanisms\n  supported by the script\n\nOne such application is selective Tor usage, where the node runs on the normal\ninternet but transactions are broadcasted over Tor.\n\nFor an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n\nPrivacy: Stream isolation for Tor\n- ----------------------------------\n\nThis release adds functionality to create a new circuit for every peer\nconnection, when the software is used with Tor. The new option,\n`-proxyrandomize`, is on by default.\n\nWhen enabled, every outgoing connection will (potentially) go through a\ndifferent exit node. That significantly reduces the chance to get unlucky and\npick a single exit node that is either malicious, or widely banned from the P2P\nnetwork. This improves connection reliability as well as privacy, especially\nfor the initial connections.\n\n**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\nauthentication, but doesn't require it, this change may cause that proxy to reject\nconnections. A user and password is sent where they weren't before. This setup\nis exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\ndisable the behavior.\n\n0.11.0 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n### RPC and REST\n- - #5461 `5f7279a` signrawtransaction: validate private key\n- - #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n- - #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n- - #5476 `c986972` Add time offset into getpeerinfo output\n- - #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n- - #5599 `40e96a3` Get rid of the internal miner's hashmeter\n- - #5711 `87ecfb0` Push down RPC locks\n- - #5754 `1c4e3f9` fix getblocktemplate lock issue\n- - #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n- - #5548 `d48ce48` Add /rest/chaininfos\n- - #5992 `4c4f1b4` Push down RPC reqWallet flag\n- - #6036 `585b5db` Show zero value txouts in listunspent\n- - #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n- - #5418 `16341cc` Report missing inputs in sendrawtransaction\n- - #5937 `40f5e8d` show script verification errors in signrawtransaction result\n- - #5420 `1fd2d39` getutxos REST command (based on Bip64)\n- - #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n- - #6226 `5901596` json: fail read_string if string contains trailing garbage\n\n### Configuration and command-line options\n- - #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n- - #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n- - #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n- - #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n- - #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n- - #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n- - #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n\n### Block and transaction handling\n- - #5367 `dcc1304` Do all block index writes in a batch\n- - #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n- - #5459 `4406c3e` Reject headers that build on an invalid parent\n- - #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n- - #5580 `40d65eb` Preemptively catch a few potential bugs\n- - #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n- - #5564 `a89b837` clarify obscure uses of EvalScript()\n- - #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n- - #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n- - #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n- - #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n- - #5948 `b36f1ce` Use GetAncestor to compute new target\n- - #5959 `a0bfc69` Add additional block index consistency checks\n- - #6058 `7e0e7f8` autoprune minor post-merge improvements\n- - #5159 `2cc1372` New fee estimation code\n- - #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n- - #6129 `2a82298` Bug fix for clearing fCheckForPruning\n- - #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n- - #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n- - #5985 `37b4e42` Fix removing of orphan transactions\n- - #6221 `6cb70ca` Prune: Support noncontiguous block files\n- - #6256 `fce474c` Use best header chain timestamps to detect partitioning\n- - #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n\n### P2P protocol and network code\n- - #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n- - #5770 `32a8b6a` Sanitize command strings before logging them\n- - #5859 `dd4ffce` Add correct bool combiner for net signals\n- - #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n- - #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n- - #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n- - #5971 `18d2832` replace absolute sleep with conditional wait\n- - #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n- - #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n- - #6080 `31c0bf1` Add jonasschnellis dns seeder\n- - #5976 `9f7809f` Reduce download timeouts as blocks arrive\n- - #6172 `b4bbad1` Ignore getheaders requests when not synced\n- - #5875 `304892f` Be stricter in processing unrequested blocks\n- - #6333 `41bbc85` Hardcoded seeds update June 2015\n\n### Validation\n- - #5143 `48e1765` Implement BIP62 rule 6\n- - #5713 `41e6e4c` Implement BIP66\n\n### Build system\n- - #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n- - #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n- - #5514 `ed11d53` Fix 'make distcheck'\n- - #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n- - #5582 `e8a6639` Osx toolchain update\n- - #5684 `ab64022` osx: bump build sdk to 10.9\n- - #5695 `23ef5b7` depends: latest config.guess and config.sub\n- - #5509 `31dedb4` Fixes when compiling in c++11 mode\n- - #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n- - #5510 `7c3fbc3` Big endian support\n- - #5149 `c7abfa5` Add script to verify all merge commits are signed\n- - #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n- - #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n- - #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n- - #6285 `ef1d506` Fix scheduler build with some boost versions.\n- - #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n- - #6303 `b711599` gitian: add a gitian-win-signer descriptor\n- - #6246 `8ea6d37` Fix build on FreeBSD\n- - #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n- - #6354 `bdf0d94` Gitian windows signing normalization\n\n### Wallet\n- - #2340 `811c71d` Discourage fee sniping with nLockTime\n- - #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n- - #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n- - #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n- - #5319 `93b7544` Clean up wallet encryption code\n- - #5831 `df5c246` Subtract fee from amount\n- - #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n- - #5511 `23c998d` Sort pending wallet transactions before reaccepting\n- - #6126 `26e08a1` Change default nTxConfirmTarget to 2\n- - #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n- - #6276 `c9fd907` Fix getbalance * 0\n\n### GUI\n- - #5219 `f3af0c8` New icons\n- - #5228 `bb3c75b` HiDPI (retina) support for splash screen\n- - #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n- - #5488 `851dfc7` Light blue icon color for regtest\n- - #5547 `a39aa74` New icon for the debug window\n- - #5493 `e515309` Adopt style colour for button icons\n- - #5557 `70477a0` On close of splashscreen interrupt verifyDB\n- - #5559 `83be8fd` Make the command-line-args dialog better\n- - #5144 `c5380a9` Elaborate on signverify message dialog warning\n- - #5489 `d1aa3c6` Optimize PNG files\n- - #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n- - #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n- - #5626 `ab0d798` Fix icon sizes and column width\n- - #5683 `c7b22aa` add new osx dmg background picture\n- - #5620 `7823598` Payment request expiration bug fix\n- - #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n- - #5753 `0f44672` Add bitcoin logo to about screen\n- - #5629 `a956586` Prevent amount overflow problem with payment requests\n- - #5830 `215475a` Don't save geometry for options and about/help window\n- - #5793 `d26f0b2` Honor current network when creating autostart link\n- - #5847 `f238add` Startup script for centos, with documentation\n- - #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n- - #5898 `bb56781` Fix rpc console font size to flexible metrics\n- - #5467 `bc8535b` Payment request / server work - part 2\n- - #6161 `180c164` Remove movable option for toolbar\n- - #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n\n### Tests\n- - #5453 `2f2d337` Add ability to run single test manually to RPC tests\n- - #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n- - #5530 `565b300` Additional rpc tests\n- - #5611 `37b185c` Fix spurious windows test failures after 012598880c\n- - #5613 `2eda47b` Fix smartfees test for change to relay policy\n- - #5612 `e3f5727` Fix zapwallettxes test\n- - #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n- - #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n- - #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n- - #5855 `d7989c0` Travis: run unit tests in different orders\n- - #5852 `cdae53e` Reinitialize state in between individual unit tests.\n- - #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n- - #5940 `446bb70` Regression test for ResendWalletTransactions\n- - #6052 `cf7adad` fix and enable bip32 unit test\n- - #6039 `734f80a` tests: Error when setgenerate is used on regtest\n- - #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n- - #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n- - #6075 `df1609f` Add additional script edge condition tests\n- - #5981 `da38dc6` Python P2P testing \n- - #5958 `9ef00c3` Add multisig rpc tests\n- - #6112 `fec5c0e` Add more script edge condition tests\n\n### Miscellaneous\n- - #5457, #5506, #5952, #6047 Update libsecp256k1\n- - #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n- - #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n- - #5654, #5764 Adding jonasschnelli's GPG key\n- - #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n- - #5679 `beff11a` Get rid of DetectShutdownThread\n- - #5787 `9bd8c9b` Add fanquake PGP key\n- - #5366 `47a79bb` No longer check osx compatibility in RenameThread\n- - #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n- - #5708 `8b298ca` Add list of implemented BIPs\n- - #5809 `46bfbe7` Add bitcoin-cli man page\n- - #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n- - #5749 `d734d87` Help messages correctly formatted (79 chars)\n- - #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n- - #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n- - #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n- - #5965 `7c6bfb1` Add git-subtree-check.sh script\n- - #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n- - #6064 `b46e7c2` Several changes to mruset\n- - #6104 `3e2559c` Show an init message while activating best chain\n- - #6125 `351f73e` Clean up parsing of bool command line args\n- - #5964 `b4c219b` Lightweight task scheduler\n- - #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n- - #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n- - #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n- - #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n- - #6186 `182686c` Fix two problems in CSubnet parsing\n- - #6174 `df992b9` doc: add translation strings policy\n- - #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n- - #6264 `94cd705` Remove translation for -help-debug options\n- - #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n- - #6319 `3f8fcc9` doc: update mailing list address\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 21E14\n- - Adam Weiss\n- - Alex Morcos\n- - ayeowch\n- - azeteki\n- - Ben Holden-Crowther\n- - bikinibabe\n- - BitcoinPRReadingGroup\n- - Blake Jakopovic\n- - BtcDrak\n- - charlescharles\n- - Chris Arnesen\n- - Ciemon\n- - CohibAA\n- - Corinne Dashjr\n- - Cory Fields\n- - Cozz Lovan\n- - Daira Hopwood\n- - Daniel Kraft\n- - Dave Collins\n- - David A. Harding\n- - dexX7\n- - Earlz\n- - Eric Lombrozo\n- - Eric R. Schulz\n- - Everett Forth\n- - Flavien Charlon\n- - fsb4000\n- - Gavin Andresen\n- - Gregory Maxwell\n- - Heath\n- - Ivan Pustogarov\n- - Jacob Welsh\n- - Jameson Lopp\n- - Jason Lewicki\n- - Jeff Garzik\n- - Jonas Schnelli\n- - Jonathan Brown\n- - Jorge Tim\u00f3n\n- - joshr\n- - jtimon\n- - Julian Yap\n- - Luca Venturini\n- - Luke Dashjr\n- - Manuel Araoz\n- - MarcoFalke\n- - Matt Bogosian\n- - Matt Corallo\n- - Micha\n- - Michael Ford\n- - Mike Hearn\n- - mrbandrews\n- - Nicolas Benoit\n- - paveljanik\n- - Pavel Jan\u00edk\n- - Pavel Vasin\n- - Peter Todd\n- - Philip Kaufmann\n- - Pieter Wuille\n- - pstratem\n- - randy-waterhouse\n- - rion\n- - Rob Van Mieghem\n- - Ross Nicoll\n- - Ruben de Vries\n- - sandakersmann\n- - Shaul Kfir\n- - Shawn Wilkinson\n- - sinetek\n- - Suhas Daftuar\n- - svost\n- - Thomas Zander\n- - Tom Harding\n- - UdjinM6\n- - Vitalii Demianets\n- - Wladimir J. van der Laan\n\nAnd all those who contributed additional code review and/or security research:\n\n- - Sergio Demian Lerner\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJVoqAZAAoJEHSBCwEjRsmmgEUH/iUJPAweG5lEQRg1WnCVFz0w\nZlbrKfVOp9UVMpqH5rEnwizhBVWwT9zGqwflXczWa+MlGPb9YFd7yqxW7Jb8Ip5g\n1zLOBy+GFw2uA1dEoFXnjEJhFblaDMUN+Yqvcrw5V/gtLfiaX0Z0aP/cyS+dFKpQ\nKpjv4IhW3nGlvQJS1FvdEoMR6rbERPxCRKAZdIVluyfJibo9NFVfGywjp+OZMmiS\nEcoX+ucF3TfsiUo7oxDWlq8SLJm2aqHe/IPtYGOVCn/97JTQ3E0r/lxvI6t89LBU\nfokEunKmzrgXOIkSk3cSHJWBLYAXk60/OV0rZtJwakInpsTu9+dUdN7C5aOSycs=\n=jEo7\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "odinn",
                "date": "2015-07-15T11:20:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThe numbering of the version, though. <shivers>\n\nOn 07/12/2015 08:49 AM, Wladimir J. van der Laan wrote:\n> Bitcoin Core version 0.11.0 is now available from:\n> \n> <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n> \n> This is a new major version release, bringing both new features\n> and bug fixes.\n> \n> Please report bugs using the issue tracker at github:\n> \n> <https://github.com/bitcoin/bitcoin/issues>\n> \n> The entire distribution is also available as torrent:\n> \n> magnet:?xt=urn:btih:82f0d2fa100d6db8a8c1338768dcb9e4e524da13&dn=bitcoi\nn-core-0.11.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&\ntr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftrack\ner.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&\ntr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbi\nn%2F\n>\n>  Upgrading and downgrading =========================\n> \n> How to Upgrade --------------\n> \n> If you are running an older version, shut it down. Wait until it\n> has completely shut down (which might take a few minutes for older\n> versions), then run the installer (on Windows) or just copy over\n> /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on\n> Linux).\n> \n> Downgrade warning ------------------\n> \n> Because release 0.10.0 and later makes use of headers-first\n> synchronization and parallel block download (see further), the\n> block files and databases are not backwards-compatible with\n> pre-0.10 versions of Bitcoin Core or other software:\n> \n> * Blocks will be stored on disk out of order (in the order they\n> are received, really), which makes it incompatible with some tools\n> or other programs. Reindexing using earlier versions will also not\n> work anymore as a result of this.\n> \n> * The block index database will now hold headers for which no block\n> is stored on disk, which earlier versions won't support.\n> \n> If you want to be able to downgrade smoothly, make a backup of your\n> entire data directory. Without this your node will need start\n> syncing (or importing from bootstrap.dat) anew afterwards. It is\n> possible that the data from a completely synchronised 0.10 node may\n> be usable in older versions as-is, but this is not supported and\n> may break as soon as the older version attempts to reindex.\n> \n> This does not affect wallet forward or backward compatibility.\n> There are no known problems when downgrading from 0.11.x to\n> 0.10.x.\n> \n> Important information ======================\n> \n> Transaction flooding ---------------------\n> \n> At the time of this release, the P2P network is being flooded with\n> low-fee transactions. This causes a ballooning of the mempool\n> size.\n> \n> If this growth of the mempool causes problematic memory use on your\n> node, it is possible to change a few configuration options to work\n> around this. The growth of the mempool can be monitored with the\n> RPC command `getmempoolinfo`.\n> \n> One is to increase the minimum transaction relay fee\n> `minrelaytxfee`, which defaults to 0.00001. This will cause\n> transactions with fewer BTC/kB fee to be rejected, and thus fewer\n> transactions entering the mempool.\n> \n> The other is to restrict the relaying of free transactions with \n> `limitfreerelay`. This option sets the number of kB/minute at\n> which free transactions (with enough priority) will be accepted. It\n> defaults to 15. Reducing this number reduces the speed at which the\n> mempool can grow due to free transactions.\n> \n> For example, add the following to `bitcoin.conf`:\n> \n> minrelaytxfee=0.00005 limitfreerelay=5\n> \n> More robust solutions are being worked on for a follow-up release.\n> \n> Notable changes ===============\n> \n> Block file pruning ----------------------\n> \n> This release supports running a fully validating node without\n> maintaining a copy of the raw block and undo data on disk. To\n> recap, there are four types of data related to the blockchain in\n> the bitcoin system: the raw blocks as received over the network\n> (blk???.dat), the undo data (rev???.dat), the block index and the \n> UTXO set (both LevelDB databases). The databases are built from the\n> raw data.\n> \n> Block pruning allows Bitcoin Core to delete the raw block and undo\n> data once it's been validated and used to build the databases. At\n> that point, the raw data is used only to relay blocks to other\n> nodes, to handle reorganizations, to look up old transactions (if\n> -txindex is enabled or via the RPC/REST interfaces), or for\n> rescanning the wallet. The block index continues to hold the\n> metadata about all blocks in the blockchain.\n> \n> The user specifies how much space to allot for block & undo files.\n> The minimum allowed is 550MB. Note that this is in addition to\n> whatever is required for the block index and UTXO databases. The\n> minimum was chosen so that Bitcoin Core will be able to maintain at\n> least 288 blocks on disk (two days worth of blocks at 10 minutes\n> per block). In rare instances it is possible that the amount of\n> space used will exceed the pruning target in order to keep the\n> required last 288 blocks on disk.\n> \n> Block pruning works during initial sync in the same way as during\n> steady state, by deleting block files \"as you go\" whenever disk\n> space is allocated. Thus, if the user specifies 550MB, once that\n> level is reached the program will begin deleting the oldest block\n> and undo files, while continuing to download the blockchain.\n> \n> For now, block pruning disables block relay.  In the future, nodes\n> with block pruning will at a minimum relay \"new\" blocks, meaning\n> blocks that extend their active chain.\n> \n> Block pruning is currently incompatible with running a wallet due\n> to the fact that block data is used for rescanning the wallet and\n> importing keys or addresses (which require a rescan.) However,\n> running the wallet with block pruning will be supported in the near\n> future, subject to those limitations.\n> \n> Block pruning is also incompatible with -txindex and will\n> automatically disable it.\n> \n> Once you have pruned blocks, going back to unpruned state requires\n>  re-downloading the entire blockchain. To do this, re-start the\n> node with -reindex. Note also that any problem that would cause a\n> user to reindex (e.g., disk corruption) will cause a pruned node to\n> redownload the entire blockchain. Finally, note that when a pruned\n> node reindexes, it will delete any blk???.dat and rev???.dat files\n> in the data directory prior to restarting the download.\n> \n> To enable block pruning on the command line:\n> \n> - `-prune=N`: where N is the number of MB to allot for raw block &\n> undo data.\n> \n> Modified RPC calls:\n> \n> - `getblockchaininfo` now includes whether we are in pruned mode or\n> not. - `getblock` will check if the block's data has been pruned\n> and if so, return an error. - `getrawtransaction` will no longer be\n> able to locate a transaction that has a UTXO but where its block\n> file has been pruned.\n> \n> Pruning is disabled by default.\n> \n> Big endian support --------------------\n> \n> Experimental support for big-endian CPU architectures was added in\n> this release. All little-endian specific code was replaced with\n> endian-neutral constructs. This has been tested on at least MIPS\n> and PPC hosts. The build system will automatically detect the\n> endianness of the target.\n> \n> Memory usage optimization --------------------------\n> \n> There have been many changes in this release to reduce the default\n> memory usage of a node, among which:\n> \n> - Accurate UTXO cache size accounting (#6102); this makes the\n> option `-dbcache` precise where this grossly underestimated memory\n> usage before - Reduce size of per-peer data structure (#6064 and\n> others); this increases the number of connections that can be\n> supported with the same amount of memory - Reduce the number of\n> threads (#5964, #5679); lowers the amount of (esp. virtual) memory\n> needed\n> \n> Fee estimation changes ----------------------\n> \n> This release improves the algorithm used for fee estimation.\n> Previously, -1 was returned when there was insufficient data to\n> give an estimate.  Now, -1 will also be returned when there is no\n> fee or priority high enough for the desired confirmation target. In\n> those cases, it can help to ask for an estimate for a higher target\n> number of blocks. It is not uncommon for there to be no fee or\n> priority high enough to be reliably (85%) included in the next\n> block and for this reason, the default for `-txconfirmtarget=n` has\n> changed from 1 to 2.\n> \n> Privacy: Disable wallet transaction broadcast \n> ----------------------------------------------\n> \n> This release adds an option `-walletbroadcast=0` to prevent\n> automatic transaction broadcast and rebroadcast (#5951). This\n> option allows separating transaction submission from the node\n> functionality.\n> \n> Making use of this, third-party scripts can be written to take care\n> of transaction (re)broadcast:\n> \n> - Send the transaction as normal, either through RPC or the GUI -\n> Retrieve the transaction data through RPC using `gettransaction`\n> (NOT `getrawtransaction`). The `hex` field of the result will\n> contain the raw hexadecimal representation of the transaction - The\n> transaction can then be broadcasted through arbitrary mechanisms \n> supported by the script\n> \n> One such application is selective Tor usage, where the node runs on\n> the normal internet but transactions are broadcasted over Tor.\n> \n> For an example script see\n> [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n> \n> Privacy: Stream isolation for Tor \n> ----------------------------------\n> \n> This release adds functionality to create a new circuit for every\n> peer connection, when the software is used with Tor. The new\n> option, `-proxyrandomize`, is on by default.\n> \n> When enabled, every outgoing connection will (potentially) go\n> through a different exit node. That significantly reduces the\n> chance to get unlucky and pick a single exit node that is either\n> malicious, or widely banned from the P2P network. This improves\n> connection reliability as well as privacy, especially for the\n> initial connections.\n> \n> **Important note:** If a non-Tor SOCKS5 proxy is configured that\n> supports authentication, but doesn't require it, this change may\n> cause that proxy to reject connections. A user and password is sent\n> where they weren't before. This setup is exceedingly rare, but in\n> this case `-proxyrandomize=0` can be passed to disable the\n> behavior.\n> \n> 0.11.0 Change log =================\n> \n> Detailed release notes follow. This overview includes changes that\n> affect behavior, not code moves, refactors and string updates. For\n> convenience in locating the code changes and accompanying\n> discussion, both the pull request and git merge commit are\n> mentioned.\n> \n> ### RPC and REST - #5461 `5f7279a` signrawtransaction: validate\n> private key - #5444 `103f66b` Add\n> /rest/headers/<count>/<hash>.<ext> - #4964 `95ecc0a` Add\n> scriptPubKey field to validateaddress RPC call - #5476 `c986972`\n> Add time offset into getpeerinfo output - #5540 `84eba47` Add\n> unconfirmed and immature balances to getwalletinfo - #5599\n> `40e96a3` Get rid of the internal miner's hashmeter - #5711\n> `87ecfb0` Push down RPC locks - #5754 `1c4e3f9` fix\n> getblocktemplate lock issue - #5756 `5d901d8` Fix\n> getblocktemplate_proposals test by mining one block - #5548\n> `d48ce48` Add /rest/chaininfos - #5992 `4c4f1b4` Push down RPC\n> reqWallet flag - #6036 `585b5db` Show zero value txouts in\n> listunspent - #5199 `6364408` Add RPC call `gettxoutproof` to\n> generate and verify merkle blocks - #5418 `16341cc` Report missing\n> inputs in sendrawtransaction - #5937 `40f5e8d` show script\n> verification errors in signrawtransaction result - #5420 `1fd2d39`\n> getutxos REST command (based on Bip64) - #6193 `42746b0` [REST]\n> remove json input for getutxos, limit to query max. 15 outpoints -\n> #6226 `5901596` json: fail read_string if string contains trailing\n> garbage\n> \n> ### Configuration and command-line options - #5636 `a353ad4` Add\n> option `-allowselfsignedrootcertificate` to allow self signed root\n> certs (for testing payment requests) - #5900 `3e8a1f2` Add a\n> consistency check `-checkblockindex` for the block chain data\n> structures - #5951 `7efc9cf` Make it possible to disable wallet\n> transaction broadcast (using `-walletbroadcast=0`) - #5911\n> `b6ea3bc` privacy: Stream isolation for Tor (on by default, use\n> `-proxyrandomize=0` to disable) - #5863 `c271304` Add autoprune\n> functionality (`-prune=<size>`) - #6153 `0bcf04f` Parameter\n> interaction: disable upnp if -proxy set - #6274 `4d9c7fe` Add\n> option `-alerts` to opt out of alert system\n> \n> ### Block and transaction handling - #5367 `dcc1304` Do all block\n> index writes in a batch - #5253 `203632d` Check against MANDATORY\n> flags prior to accepting to mempool - #5459 `4406c3e` Reject\n> headers that build on an invalid parent - #5481 `055f3ae` Apply\n> AreSane() checks to the fees from the network - #5580 `40d65eb`\n> Preemptively catch a few potential bugs - #5349 `f55c5e9` Implement\n> test for merkle tree malleability in CPartialMerkleTree - #5564\n> `a89b837` clarify obscure uses of EvalScript() - #5521 `8e4578a`\n> Reject non-final txs even in testnet/regtest - #5707 `6af674e`\n> Change hardcoded character constants to descriptive named constants\n> for db keys - #5286 `fcf646c` Change the default maximum OP_RETURN\n> size to 80 bytes - #5710 `175d86e` Add more information to errors\n> in ReadBlockFromDisk - #5948 `b36f1ce` Use GetAncestor to compute\n> new target - #5959 `a0bfc69` Add additional block index consistency\n> checks - #6058 `7e0e7f8` autoprune minor post-merge improvements -\n> #5159 `2cc1372` New fee estimation code - #6102 `6fb90d8` Implement\n> accurate UTXO cache size accounting - #6129 `2a82298` Bug fix for\n> clearing fCheckForPruning - #5947 `e9af4e6` Alert if it is very\n> likely we are getting a bad chain - #6203 `c00ae64` Remove P2SH\n> coinbase flag, no longer interesting - #5985 `37b4e42` Fix removing\n> of orphan transactions - #6221 `6cb70ca` Prune: Support\n> noncontiguous block files - #6256 `fce474c` Use best header chain\n> timestamps to detect partitioning - #6233 `a587606` Advance\n> pindexLastCommonBlock for blocks in chainActive\n> \n> ### P2P protocol and network code - #5507 `844ace9` Prevent DOS\n> attacks on in-flight data structures - #5770 `32a8b6a` Sanitize\n> command strings before logging them - #5859 `dd4ffce` Add correct\n> bool combiner for net signals - #5876 `8e4fd0c` Add a NODE_GETUTXO\n> service bit and document NODE_NETWORK - #6028 `b9311fb` Move\n> nLastTry from CAddress to CAddrInfo - #5662 `5048465` Change\n> download logic to allow calling getdata on inbound peers - #5971\n> `18d2832` replace absolute sleep with conditional wait - #5918\n> `7bf5d5e` Use equivalent PoW for non-main-chain requests - #6059\n> `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for\n> fixed seeds - #6080 `31c0bf1` Add jonasschnellis dns seeder - #5976\n> `9f7809f` Reduce download timeouts as blocks arrive - #6172\n> `b4bbad1` Ignore getheaders requests when not synced - #5875\n> `304892f` Be stricter in processing unrequested blocks - #6333\n> `41bbc85` Hardcoded seeds update June 2015\n> \n> ### Validation - #5143 `48e1765` Implement BIP62 rule 6 - #5713\n> `41e6e4c` Implement BIP66\n> \n> ### Build system - #5501 `c76c9d2` Add mips, mipsel and aarch64 to\n> depends platforms - #5334 `cf87536` libbitcoinconsensus: Add\n> pkg-config support - #5514 `ed11d53` Fix 'make distcheck' - #5505\n> `a99ef7d` Build winshutdownmonitor.cpp on Windows only - #5582\n> `e8a6639` Osx toolchain update - #5684 `ab64022` osx: bump build\n> sdk to 10.9 - #5695 `23ef5b7` depends: latest config.guess and\n> config.sub - #5509 `31dedb4` Fixes when compiling in c++11 mode -\n> #5819 `f8e68f7` release: use static libstdc++ and disable reduced\n> exports by default - #5510 `7c3fbc3` Big endian support - #5149\n> `c7abfa5` Add script to verify all merge commits are signed - #6082\n> `7abbb7e` qt: disable qt tests when one of the checks for the gui\n> fails - #6244 `0401aa2` configure: Detect (and reject) LibreSSL -\n> #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo\n> for OSX signatures - #6285 `ef1d506` Fix scheduler build with some\n> boost versions. - #6280 `25c2216` depends: fix Boost 1.55 build on\n> GCC 5 - #6303 `b711599` gitian: add a gitian-win-signer descriptor \n> - #6246 `8ea6d37` Fix build on FreeBSD - #6282 `daf956b` fix crash\n> on shutdown when e.g. changing -txindex and abort action - #6354\n> `bdf0d94` Gitian windows signing normalization\n> \n> ### Wallet - #2340 `811c71d` Discourage fee sniping with nLockTime \n> - #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and\n> add a maxtxfee option - #5508 `9a5cabf` Add RandAddSeedPerfmon to\n> MakeNewKey - #4805 `8204e19` Do not flush the wallet in\n> AddToWalletIfInvolvingMe(..) - #5319 `93b7544` Clean up wallet\n> encryption code - #5831 `df5c246` Subtract fee from amount - #6076\n> `6c97fd1` wallet: fix boost::get usage with boost 1.58 - #5511\n> `23c998d` Sort pending wallet transactions before reaccepting -\n> #6126 `26e08a1` Change default nTxConfirmTarget to 2 - #6183\n> `75a4d51` Fix off-by-one error w/ nLockTime in the wallet - #6276\n> `c9fd907` Fix getbalance * 0\n> \n> ### GUI - #5219 `f3af0c8` New icons - #5228 `bb3c75b` HiDPI\n> (retina) support for splash screen - #5258 `73cbf0a` The RPC\n> Console should be a QWidget to make window more independent - #5488\n> `851dfc7` Light blue icon color for regtest - #5547 `a39aa74` New\n> icon for the debug window - #5493 `e515309` Adopt style colour for\n> button icons - #5557 `70477a0` On close of splashscreen interrupt\n> verifyDB - #5559 `83be8fd` Make the command-line-args dialog\n> better - #5144 `c5380a9` Elaborate on signverify message dialog\n> warning - #5489 `d1aa3c6` Optimize PNG files - #5649 `e0cd2f5` Use\n> text-color icons for system tray Send/Receive menu entries - #5651\n> `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a\n> simple tilde - #5626 `ab0d798` Fix icon sizes and column width -\n> #5683 `c7b22aa` add new osx dmg background picture - #5620\n> `7823598` Payment request expiration bug fix - #5729 `9c4a5a5`\n> Allow unit changes for read-only BitcoinAmountField - #5753\n> `0f44672` Add bitcoin logo to about screen - #5629 `a956586`\n> Prevent amount overflow problem with payment requests - #5830\n> `215475a` Don't save geometry for options and about/help window -\n> #5793 `d26f0b2` Honor current network when creating autostart link \n> - #5847 `f238add` Startup script for centos, with documentation -\n> #5915 `5bd3a92` Fix a static qt5 crash when using certain versions\n> of libxcb - #5898 `bb56781` Fix rpc console font size to flexible\n> metrics - #5467 `bc8535b` Payment request / server work - part 2 -\n> #6161 `180c164` Remove movable option for toolbar - #6160 `0d862c2`\n> Overviewpage: make sure warning icons gets colored\n> \n> ### Tests - #5453 `2f2d337` Add ability to run single test manually\n> to RPC tests - #5421 `886eb57` Test unexecuted OP_CODESEPARATOR -\n> #5530 `565b300` Additional rpc tests - #5611 `37b185c` Fix spurious\n> windows test failures after 012598880c - #5613 `2eda47b` Fix\n> smartfees test for change to relay policy - #5612 `e3f5727` Fix\n> zapwallettxes test - #5642 `30a5b5f` Prepare paymentservertests for\n> new unit tests - #5784 `e3a3cd7` Fix usage of NegateSignatureS in\n> script_tests - #5813 `ee9f2bf` Add unit tests for next difficulty\n> calculations - #5855 `d7989c0` Travis: run unit tests in different\n> orders - #5852 `cdae53e` Reinitialize state in between individual\n> unit tests. - #5883 `164d7b6` tests: add a BasicTestingSetup and\n> apply to all tests - #5940 `446bb70` Regression test for\n> ResendWalletTransactions - #6052 `cf7adad` fix and enable bip32\n> unit test - #6039 `734f80a` tests: Error when setgenerate is used\n> on regtest - #6074 `948beaf` Correct the PUSHDATA4 minimal encoding\n> test in script_invalid.json - #6032 `e08886d` Stop nodes after RPC\n> tests, even with --nocleanup - #6075 `df1609f` Add additional\n> script edge condition tests - #5981 `da38dc6` Python P2P testing -\n> #5958 `9ef00c3` Add multisig rpc tests - #6112 `fec5c0e` Add more\n> script edge condition tests\n> \n> ### Miscellaneous - #5457, #5506, #5952, #6047 Update libsecp256k1 \n> - #5437 `84857e8` Add missing CAutoFile::IsNull() check in main -\n> #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where\n> possible - #5654, #5764 Adding jonasschnelli's GPG key - #5477\n> `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated -\n> #5679 `beff11a` Get rid of DetectShutdownThread - #5787 `9bd8c9b`\n> Add fanquake PGP key - #5366 `47a79bb` No longer check osx\n> compatibility in RenameThread - #5689 `07f4386` openssl: abstract\n> out OPENSSL_cleanse - #5708 `8b298ca` Add list of implemented BIPs \n> - #5809 `46bfbe7` Add bitcoin-cli man page - #5839 `86eb461` keys:\n> remove libsecp256k1 verification until it's actually supported -\n> #5749 `d734d87` Help messages correctly formatted (79 chars) -\n> #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was\n> corrupted - #5849 `41259ca` contrib/init/bitcoind.openrc:\n> Compatibility with previous OpenRC init script variables - #5950\n> `41113e3` Fix locale fallback and guard tests against invalid\n> locale settings - #5965 `7c6bfb1` Add git-subtree-check.sh script -\n> #6033 `1623f6e` FreeBSD, OpenBSD thread renaming - #6064 `b46e7c2`\n> Several changes to mruset - #6104 `3e2559c` Show an init message\n> while activating best chain - #6125 `351f73e` Clean up parsing of\n> bool command line args - #5964 `b4c219b` Lightweight task\n> scheduler - #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to\n> Bitcoin-Core.app - #6168 `b3024f0` contrib/linearize: Support\n> linearization of testnet blocks - #6098 `7708fcd` Update Windows\n> resource files (and add one for bitcoin-tx) - #6159 `e1412d3` Catch\n> errors on datadir lock and pidfile delete - #6186 `182686c` Fix two\n> problems in CSubnet parsing - #6174 `df992b9` doc: add translation\n> strings policy - #6210 `dfdb6dd` build: disable optional use of gmp\n> in internal secp256k1 build - #6264 `94cd705` Remove translation\n> for -help-debug options - #6286 `3902c15` Remove berkeley-db4\n> workaround in MacOSX build docs - #6319 `3f8fcc9` doc: update\n> mailing list address\n> \n> Credits =======\n> \n> Thanks to everyone who directly contributed to this release:\n> \n> - 21E14 - Adam Weiss - Alex Morcos - ayeowch - azeteki - Ben\n> Holden-Crowther - bikinibabe - BitcoinPRReadingGroup - Blake\n> Jakopovic - BtcDrak - charlescharles - Chris Arnesen - Ciemon -\n> CohibAA - Corinne Dashjr - Cory Fields - Cozz Lovan - Daira\n> Hopwood - Daniel Kraft - Dave Collins - David A. Harding - dexX7 -\n> Earlz - Eric Lombrozo - Eric R. Schulz - Everett Forth - Flavien\n> Charlon - fsb4000 - Gavin Andresen - Gregory Maxwell - Heath - Ivan\n> Pustogarov - Jacob Welsh - Jameson Lopp - Jason Lewicki - Jeff\n> Garzik - Jonas Schnelli - Jonathan Brown - Jorge Tim\u00f3n - joshr -\n> jtimon - Julian Yap - Luca Venturini - Luke Dashjr - Manuel Araoz -\n> MarcoFalke - Matt Bogosian - Matt Corallo - Micha - Michael Ford -\n> Mike Hearn - mrbandrews - Nicolas Benoit - paveljanik - Pavel\n> Jan\u00edk - Pavel Vasin - Peter Todd - Philip Kaufmann - Pieter Wuille \n> - pstratem - randy-waterhouse - rion - Rob Van Mieghem - Ross\n> Nicoll - Ruben de Vries - sandakersmann - Shaul Kfir - Shawn\n> Wilkinson - sinetek - Suhas Daftuar - svost - Thomas Zander - Tom\n> Harding - UdjinM6 - Vitalii Demianets - Wladimir J. van der Laan\n> \n> And all those who contributed additional code review and/or\n> security research:\n> \n> - Sergio Demian Lerner\n> \n> As well as everyone that helped translating on\n> [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVpkHzAAoJEGxwq/inSG8CYXQH/j+RkquHT6F+gjbST9eMNshI\n9ydEnqL68o5FtZfRCdfrv3+GbXtsf7OFK9O/67denujiMR5OCQHCLZsV9bPpVrib\nAsxVHzu+YWavjcyrlnKR4NAI9BUNNJzmsoBK2uD2c2niqT4CsbHMLssUuYXO3xM9\nnKIlkn8ZZhbnJEJhM3UESh99KLPXqnKsmu++ZjGZdRnBPD1RGNbRuUCwqzUeij4L\nFyzj5X3UWFloF+oI9IGy7/wRYRrJ0k9q9NSJPU5Xv9RRZ63T4lv1phNMzYFzFve5\n48HF+6+BSa+JUh4SihjEAuVNeHtPDMhZMCxkx/YTNDDjUL8UEFDKNc/xmx+ObFM=\n=rpNr\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.11.0 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 96472
        }
    },
    {
        "title": "[bitcoin-dev] About hardware accelerators advantages for full-node (not mining)",
        "thread_messages": [
            {
                "author": "Alex Barcelo",
                "date": "2015-07-13T12:55:14",
                "message_text_only": "I am searching for guidance and opinion in the subject's matter. I will begin with my use case, too see whether my ideas makes sense or not.\n\nI have a Jetson TK1[1], which is a GPU (CUDA) powered development board. I thought that it may be a power-efficient device (in bitcoin environment), and thought about having it as a full-node. Either as a public full-node, if it makes sense, or a local full-node, to allow my PCs to perform relay onto the bitcoind in the Jetson. My idea is to run a bitcoind daemon on the Jetson as a node with high performance-per-watt (also cheap and repurposable). A pure-CPU implementation of bitcoind will clog the CPU\n\nI assume that there are a bunch of heavy-compute highly-parallel functions which could be \"outsourced\" to a GPU. I may want to fork and/or contribute on that. However, maybe I am speaking nonsense. I have more background on parallel programming than my knowledge on bitcoin protocol. So, before coding a complete mess, I wanted to hear some opinions on the idea/configuration.\n\n[1] https://developer.nvidia.com/jetson-tk1\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150713/5867bac9/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-13T13:47:57",
                "message_text_only": "The main processor load is for signature verification.\n\nThis requires a hash function call, some large number maths and an elliptic\ncurve operation.  The elliptic curve stuff is the longest step.\n\nThis takes around 1ms per signature on normal hardware, but optimized code\nis faster.\n\nThe main task is to prove that\n\nR = u1 * G + u2 * Q\n\nG is a constant, and the rest are different per signature.\n\nSome of the core team have created a fast CPU implementation.\n\n https://github.com/bitcoin/secp256k1.git\n\nThere was talk of batch verification of signatures.  The process might take\n16 signatures and compute them together.\n\nI think a lot of the benefit of the GPU would be lost due to communication\nbandwidth.  GPU miners benefit from needing very little information to be\nsent to the GPU routine.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150713/18205823/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "About hardware accelerators advantages for full-node (not mining)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tier Nolan",
                "Alex Barcelo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2232
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: extend bip70 with OpenAlias",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-13T13:06:08",
                "message_text_only": "Dear Bitcoin developers,\n\nI would like to propose an extension of the signature scheme used in\nthe Payment Protocol (BIP70), in order to authorize payment requests\nsigned by user at domain aliases, where the alias is verified using\nDNSSEC (OpenAlias).\n\nNote that the Payment Protocol already includes the possibility to\nsign requests with user at domain aliases, using so-called \"SSL email\ncertificates\". Email certificates do not require ownership of a domain\nname. They are usually delivered by a trusted CA, to the owner of an\nemail address.\n\nSo, why extend BIP70? Well, I believe that SSL email certificates, as\nthey exist today, are not well suited for payment requests. The core\nissue is that email certificates are not delivered by the entity that\nowns the same domain. This has the following implications:\n\n1. No cross-verification. Two different CAs may deliver certificates\n   for the same email address. Thus, if a user's mailbox is\n   compromised, the hacker can obtain a new certificate for the\n   compromised email address, from another CA, and sign payment\n   requests with it.  OTOH, if the certificate was delivered by the\n   same entity, they could require revokation of the existing\n   certificate before issuing a new one. Revocation of a certificate\n   would require signing a challenge with the corresponding private\n   key.\n\n2. Dilution of responsibilities. Three parties are involved in the\n   security of an email certificate: the owner of the email address,\n   the CA who signs the certificate, and the owner of the domain\n   hosting the email service. If something goes wrong and a user\n   claims that a payment request was not signed by them, it is not\n   possible to determine who is to blame: the user, the domain owner\n   or the CA? Any of these parties could have obtained or issued a new\n   certificate.  OTOH, if the alias \"user at domain\" was issued by\n   \"domain\", we would have clear semantics and clear\n   responsibilities. Instead of involving three parties, as in \"User X\n   hosted at domain Y was verified by trusted authority Z who is not\n   shown in the alias\", the alias only involves two parties: \"user X\n   was verified by domain Y\". If domain Y misbehaves and issues a\n   second certificate for user X, while the first certificate is still\n   valid, then the first certificate can serve as a public proof that\n   they misbehaved.\n\n3. Lowest common denominator: email is only a communication channel,\n   used for authentication by some CAs. Other CAs may decide to use\n   other, possibly better, identity verification procedures. However,\n   because of the absence of cross verification, the security of the\n   whole scheme will always be the security of an email address,\n   because it remains the method used by less regarding CAs.\n\nIn fact, these issues are so bad that I believe BIP70 should be\namended to reject email certificates.\n\nThese issues would be solved, if we could enforce that the user at domain\ncertificate was delivered by the same entity that controls the domain.\nHow can we do that? Clearly, we need to change the certificate chain\nvalidation procedure. I see two methods to achieve this:\n\n  1. Keep using TLS and change the certificate chain validation.\n  2. Use DNSSEC and Openalias.\n\n\nMethod 1: Modified chain validation.\n------------------------------------\n\nThis introduces a new type of user certificate, where:\n\n - The commonName is a user at domain alias.\n - The certificate for user at domain must be issued by a domain\n   certificate for the same domain (with some rules to allow\n   wildcards).\n - Validation of the user at domain certificate does not require the\n   issuer certificate to have a CA bit.\n\nThis solution would probably be the easiest to deploy, because it uses\nTLS certificate chain validation, which is already available in BIP70\ncompatible wallets. However, it will break compatibility with the\nexisting certificate validation procedures.\n\n\nMethod 2: DNSSEC and OpenAlias.\n-------------------------------\n\nOpenAlias (http://openalias.org) is a standard for storing Bitcoin\naddresses and public keys in DNS TXT records. DNSSEC chain validation\nimposes that a record is signed by its parent.\n\nIn order to use DNSSEC with BIP70, we may add a new pki_type to BIP70\npayment requests (let me call it 'dnssec+btc'), that indicates that\nthe request has been signed with a Bitcoin public key, and that the\nchain validation uses DNSSEC. The chain of signatures may be included\nin the payment request.\n\nThis solution has my preference. It has been implemented in Electrum\nand will be available in version 2.4.\n\n\n\nPlease let me know what you think. Standardizing that proposal will\nprobably require a new BIP number, because BIP70 is already final. I\nam willing to help doing that. OpenAlias developers have also expressed\ntheir support, and are willing to provide assistance."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-13T22:31:36",
                "message_text_only": "Hi Thomas,\n\nFYI there is a company called Netki is also working on a kind of DNSSEC\nintegration with BIP70, there's a thread here about their efforts:\n\n\nhttps://groups.google.com/forum/#!searchin/bitcoinj/dnssec/bitcoinj/QFAH1F2dEwE/36oWDwREEV4J\n\nIf you would like to work on this, perhaps it's worth teaming up with them?\nObviously they plan to have an open spec and open source implementation.\n\nNow w.r.t. the other things - I think we have discussed this before, but to\nreiterate:  the biggest flaw with doing things the way you suggest is that\nin practice, no email provider is going to implement your scheme any time\nsoon. Most obviously the big web mail providers won't. Therefore hardly\nanyone will use it.\n\nWhilst having an extension cannot really hurt, obviously, BIP70 will not be\namended to reduce the certificate types it allows in favour of a system\nthat has a very low chance of mainstream adoption. Restricting options like\nthat would just make no sense at all.\n\nI think your primary concern is that if your email account is hacked,\nsomeone could get a cert issued in your name, and you'd be unable to revoke\nit? But that's not quite true. Every CA I know of allows you to revoke a\ncertificate that was issued for your email address if you have access to\nthat email address. Now, if you don't know that this issuance took place,\nyou cannot invoke that procedure of course .... but that's what certificate\ntransparency is already working on solving in a scalable manner:\n\n  https://crt.sh/\n\nThat site doesn't currently index email address certs, but it certainly\ncould with minimal extra effort by the creators as they're almost identical\nto domain name certs.\n\nSo the existing infrastructure seems to have everything in place to solve\nthat issue.\n\nNow, if you still want a mechanism that eliminates the CA entirely, I think\nthere's a better approach which is backwards compatible with existing email\nproviders. It works like this:\n\n   1. User sends a public key in the subject line to a one-time collector\n   address like <random-number>@publish-email-headers.net    (who runs this\n   service is arbitrary as they do not need to be trusted). On receiving the\n   email, the headers are made available via\n   https://publish-email-headers.net/<random-number> for download by the\n   users wallet.\n\n   2. The act of sending the email triggers DKIM signing of the subject\n   line and From header, and thus, the public key and email address are bound\n   together via the ESP's own signing key.\n\n   3. The textual email headers can be run through the DKIM validation\n   algorithm in combination with the domain key retrieved via DNS.\n\nWith this scheme, setup is largely automatic and involves the wallet asking\nthe operating system to open a mailto: URL. The user just has to press\n\"send\" and the wallet can then sit on a long-lived HTTPS connection waiting\nfor the headers to turn up. Once the headers are downloaded, they can be\nsaved to disk and this becomes your \"DKIM certificate\" which can then be\nused with a new pki_type in BIP70.\n\nNote the following useful characteristics of this approach:\n\n   1. It does not require the email provider to know/care about Bitcoin.\n   DKIM is already widely deployed by major email providers due to its\n   benefits for spam and phishing protection: the majority of all email on the\n   internet is DKIM signed. So you automatically have a system that works with\n   nearly all consumer email accounts.\n\n   2. The enrolment UI is straightforward, assuming the user has a working\n   mailto: handler on their system. Even webmail services like Gmail can\n   attach themselves to mailto: handling these days.\n\n   3. There are DKIM validation libraries already in existence, so new code\n   required is minimal.\n\nAnd the downsides:\n\n   1. There is no way to revoke such a \"certificate\" because you have, of\n   course, abandoned the PKI which specifies how to handle all these details.\n   You could potentially hijack/reuse OCSP to allow such a custom cert to be\n   revoked, but then the question is, who actually runs such a revocation\n   server. Doing things like this is why we have CAs in the first place.\n\n   2. The UX leaves a bit of binary nonsense in the users sent folder that\n   clutters up their account.\n\n   3. Does it even solve the right problem? A lot of users don't actually\n   use emails as identifiers anymore. In the modern world people are using\n   their social networking profiles (i.e. Facebook) and phone numbers (e.g.\n   for WhatsApp) as the personal identifier of choice. Email address support\n   might be solving yesterdays problem.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/58de7de1/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-14T06:42:42",
                "message_text_only": "Mike Hearn wrote:\n\n> Hi Thomas,\n> \n> FYI there is a company called Netki is also working on a kind of DNSSEC\n> integration with BIP70, \n> there's a thread here about their efforts:\n> https://groups.google.com/forum/#!searchin/bitcoinj/dnssec/bitcoinj/QFAH1F2dEwE/36oWDwREEV4J\n\nHi Mike,\n\nThanks! I believe it is better to keep the current discussion on\nbitcoin-dev, though.\n\n> If you would like to work on this, perhaps it's worth teaming up with them?\n> Obviously they plan to have an open spec and open source implementation.\n> \n\nI would love to work with Netki. However, it's not clear to me what they\nare selling. OpenAlias is an open standard, not a company. In contrast,\nNetki have very long Terms of Service, that do not help understand what\npart of their solution is open-source, and what is the product. They\nsurely know about OpenAlias, it would be nice to hear what they think\nabout it.\n\n> Now w.r.t. the other things - I think we have discussed this before, but to\n> reiterate:  the biggest flaw with doing things the way you suggest is that\n> in practice, no email provider is going to implement your scheme any time\n> soon. Most obviously the big web mail providers won't. Therefore hardly\n> anyone will use it.\n> \n\nWhat I propose does not rely on email. Please read again.\nI am proposing an alternative way to sign BIP70 requests. This is\nindependent from the communication channel used to send/receive them.\n\n> Whilst having an extension cannot really hurt, obviously, BIP70 will not be\n> amended to reduce the certificate types it allows in favour of a system\n> that has a very low chance of mainstream adoption. Restricting options like\n> that would just make no sense at all.\n> \n\nHardly anyone uses email certificates today, so I don't think it would\naffect a lot of users. In contrast, it would increase the security of\nall users who don't use email certs, because they may receive a payment\nrequest signed by an email cert.\n\n> I think your primary concern is that if your email account is hacked,\n> someone could get a cert issued in your name, and you'd be unable to revoke\n> it? \n\nIf your email account is hacked and someone else gets a certificate in\nyour name, you'd be unable to *know* about it, because they would use a\ndifferent CA.\n\n> But that's not quite true. Every CA I know of allows you to revoke a\n> certificate that was issued for your email address if you have access to\n> that email address. Now, if you don't know that this issuance took place,\n> you cannot invoke that procedure of course .... but that's what certificate\n> transparency is already working on solving in a scalable manner:\n> \n>   https://crt.sh/\n> \n> That site doesn't currently index email address certs, but it certainly\n> could with minimal extra effort by the creators as they're almost identical\n> to domain name certs.\n> \n> So the existing infrastructure seems to have everything in place to solve\n> that issue. \n\nThat does not look so... not until (1) BIP70 wallets integrate with\nhttps://crt.sh, (2) you convince that service to index email certs (3)\nyou convince all CAs to report all email certs they issue to crt.sh.\n\nGood luck with that!\n\n\n> Now, if you still want a mechanism that eliminates the CA entirely, I think\n> there's a better approach which is backwards compatible with existing email\n> providers. It works like this: [...]\n\nAgain, that olution is for email only. We both agree that this is\nsolving yesterdays problems, so there's no need to discuss that."
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-14T11:19:52",
                "message_text_only": "> If your email account is hacked and someone else gets a certificate in\n> your name, you'd be unable to *know* about it, because they would use a\n> different CA.\n\nMaybe I am confused but I thought you are using DNSSEC to sign the zones \nso only the domain owner could issue certificates for a zone (or \ncorresponding email address).  If you have \"example.com\" the domain \nowner of the domain would sign zone \"joe.example.com\" which can \ncorrespond to the \"joe at example.com\" email address.  Under this scenario \nyou would only have one CA per domain.\n\nRuss"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-14T13:13:45",
                "message_text_only": "Le 14/07/2015 13:19, Milly Bitcoin a \u00e9crit :\n> \n>> If your email account is hacked and someone else gets a certificate in\n>> your name, you'd be unable to *know* about it, because they would use a\n>> different CA.\n> \n> Maybe I am confused but I thought you are using DNSSEC to sign the zones\n> so only the domain owner could issue certificates for a zone (or\n> corresponding email address).  If you have \"example.com\" the domain\n> owner of the domain would sign zone \"joe.example.com\" which can\n> correspond to the \"joe at example.com\" email address.  Under this scenario\n> you would only have one CA per domain.\n> \n\nOne CA per domain is indeed what I want to achieve. The paragraph you\nquoted was about the current situation with email certs, where that is\nnot the case."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-14T11:45:06",
                "message_text_only": "Hi Thomas,\n\nRe: NetKi, I think any proposal in this space has to be an open standard,\nalmost by the definition of what it is. At any rate, it may be worth\ntalking to them. They have signed up to implement their system at least.\n\nI did understand that your proposal does not rely on email - for instance a\nweb forum could issue username at reddit.com type aliases, even if those are\nnot also email accounts. I am just continuing the comparison against email\naddress certs.\n\nIt's also the case that a domain can use the DKIM setup without actually\noffering email accounts. They can just have a web form or API that triggers\nsending of the signed email (or simply, providing the signed headers\nthemselves). Thus the same system can be used transparently by both email\nproviders and other sites that don't give their users email addresses, but\nwould still like to use the same system.\n\nHardly anyone uses email certificates today, so I don't think it would\n> affect a lot of users.\n\n\nNo, but obviously we'd like to change that! The holdup is not the\ncertificate side of things, really, but rather the lack of a\nstore-and-forward network for signed payment requests. I keep asking\nsomeone to build one but I fear the problem is almost too simple ......\neveryone who looks at this decides to solve 12 other problems\nsimultaneously, it gets complicated, then they never launch :(\n\nOnce there's a simple and robust way to get PaymentRequest's from one end\nuser to another, even when that first user is offline, then getting an\nemail cert issued is no big deal.\n\nThat does not look so... not until (1) BIP70 wallets integrate with\n> https://crt.sh, (2) you convince that service to index email certs (3)\n> you convince all CAs to report all email certs they issue to crt.sh.\n>\n\nAny solution that separates identity providers from certificate issuers\nwould have these requirements, though. And as many identity providers today\ndo not wish to become CAs too, it seems fundamental.\n\nI don't think it's such a problem, mind you. The crt.sh website is actually\na frontend to the CT protocol, which is a somewhat blockchain like audit\nlog that's eventually intended to contain all issued certificates. Right\nnow, of course, they focus on SSL certs because those are the most common\nand important. If other kinds of certs became more widely used, support in\nthe infrastructure would follow.\n\n\n\nDon't get me wrong - I would like to see a way for a domain to delegate\nBIP70 signing power to a third party. For instance, this would mean payment\nprocessors like BitPay could sign on the behalf of the merchant, and the\nmerchant identity would then show up in wallets. The \"chain a cert off a\ndomain cert\" trick would be a good way to do that, though rather than\nhacking the X.509 stack to validate invalid stuff, at this point it may as\nwell be a custom (better) cert format. There's little reason to use X.509\nbeyond backwards compatibility.\n\nBut the most popular identity providers today either don't care about\nBitcoin at all, or worse, are developing competitors to it. So for real\nadoption to occur, we must have solutions that do not require identity\nprovider cooperation. I realise this is a business reason rather than a\ntechnical reason, but it's a very strong one - so bootstrapping off\nexisting infrastructure with a split CA/ID provider design still makes much\nmore sense to me.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/ebdd5af6/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-19T11:18:29",
                "message_text_only": "Hi Mike,\n\nThe reason why I would like to extend BIP70 is because it is currently\nnot being used in transactions between end-users. BIP70 works very well\nin B2C situations, where users buy products from a website. However,\nend-users still share Bitcoin addresses.\n\nBefore BIP70 was written, I had proposed \"Signed URIs\", where the\nsignature is a public proof that a payee requested a payment. This is\none of the main benefits of BIP70, and I still want to bring it to\nuser-to-user transactions.\n\nI believe one of the main barriers to BIP70 adoption is that bitcoin:\nURIs have been extended in a way that requires the request to be hosted\non a webserver. You may complain about the lack of store-and-forward\nnetwork, despite the apparent simplicity of creating one such network.\nHowever, that does not mean we should absolutely do things that way and\nwait until such a network exists.\n\nBitcoin addresses do not require a webserver. If we want to build\nsomething that competes with that, we should have at least that level of\nconvenience.\n\nEC signatures are short, and they can be shared by copy-paste, or added\nto a bitcoin: URI. This is a features of my \"Signed URIs\" proposal, that\nwas lost in BIP70. Indeed, signed URIs were self-contained. A serialized\npayment request can also be made very short, if it is signed by a EC\nkey, and if it does not include the chain of certificates. Such a\n\"lightweight request\" can be base58-encoded, and easily shared by\ncopy-paste, or passed in a bitcoin: URI.\n\nSize is another reason why I proposed to use DNSSEC in BIP70 (the first\nreason is that the subdomain is signed by the domain, not by an external\nCA). Indeed, DNSSEC provides a canonical way to download the chain of\nsignatures needed to verify a record. Thus, the chain of signatures does\nnot need to be included in the payment request; it can be downloaded and\narchived by the verifier.\n\nNow, I understand that SSL vertificates have distinct advantages over\nDNSSEC; for example, CA-signed SSL certificates have a legal value,\nwhich is important for dispute resolution.\n\nWould it be possible to create the same kind of \"lightweight payment\nrequests\" using SSL certificates? Probably, if the final signing key is\na EC key, and if the payment request does not include the whole chain of\ncertificates. (However, that would require an additional infrastructure\nto publish the chain of certificates, and I do not think that x509\ncertification path are unique, which makes things more complicated, but\nnot impossible).\n\nSorry if I did not answer point-by-point to your post. I felt that I\nfailed to explain one of the reasons why I want to use DNSSEC in the\nvalidation of payment requests.\n\nThomas\n\n\n\n\nLe 14/07/2015 13:45, Mike Hearn a \u00e9crit :\n> Hi Thomas,\n> \n> Re: NetKi, I think any proposal in this space has to be an open standard,\n> almost by the definition of what it is. At any rate, it may be worth\n> talking to them. They have signed up to implement their system at least.\n> \n> I did understand that your proposal does not rely on email - for instance a\n> web forum could issue username at reddit.com type aliases, even if those are\n> not also email accounts. I am just continuing the comparison against email\n> address certs.\n> \n> It's also the case that a domain can use the DKIM setup without actually\n> offering email accounts. They can just have a web form or API that triggers\n> sending of the signed email (or simply, providing the signed headers\n> themselves). Thus the same system can be used transparently by both email\n> providers and other sites that don't give their users email addresses, but\n> would still like to use the same system.\n> \n> Hardly anyone uses email certificates today, so I don't think it would\n>> affect a lot of users.\n> \n> \n> No, but obviously we'd like to change that! The holdup is not the\n> certificate side of things, really, but rather the lack of a\n> store-and-forward network for signed payment requests. I keep asking\n> someone to build one but I fear the problem is almost too simple ......\n> everyone who looks at this decides to solve 12 other problems\n> simultaneously, it gets complicated, then they never launch :(\n> \n> Once there's a simple and robust way to get PaymentRequest's from one end\n> user to another, even when that first user is offline, then getting an\n> email cert issued is no big deal.\n> \n> That does not look so... not until (1) BIP70 wallets integrate with\n>> https://crt.sh, (2) you convince that service to index email certs (3)\n>> you convince all CAs to report all email certs they issue to crt.sh.\n>>\n> \n> Any solution that separates identity providers from certificate issuers\n> would have these requirements, though. And as many identity providers today\n> do not wish to become CAs too, it seems fundamental.\n> \n> I don't think it's such a problem, mind you. The crt.sh website is actually\n> a frontend to the CT protocol, which is a somewhat blockchain like audit\n> log that's eventually intended to contain all issued certificates. Right\n> now, of course, they focus on SSL certs because those are the most common\n> and important. If other kinds of certs became more widely used, support in\n> the infrastructure would follow.\n> \n> \n> \n> Don't get me wrong - I would like to see a way for a domain to delegate\n> BIP70 signing power to a third party. For instance, this would mean payment\n> processors like BitPay could sign on the behalf of the merchant, and the\n> merchant identity would then show up in wallets. The \"chain a cert off a\n> domain cert\" trick would be a good way to do that, though rather than\n> hacking the X.509 stack to validate invalid stuff, at this point it may as\n> well be a custom (better) cert format. There's little reason to use X.509\n> beyond backwards compatibility.\n> \n> But the most popular identity providers today either don't care about\n> Bitcoin at all, or worse, are developing competitors to it. So for real\n> adoption to occur, we must have solutions that do not require identity\n> provider cooperation. I realise this is a business reason rather than a\n> technical reason, but it's a very strong one - so bootstrapping off\n> existing infrastructure with a split CA/ID provider design still makes much\n> more sense to me.\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-20T13:46:39",
                "message_text_only": "Hey Thomas,\n\nWas great to hang out with you in Berlin last week!\n\n\n> Bitcoin addresses do not require a webserver. If we want to build\n> something that competes with that, we should have at least that level of\n> convenience.\n>\n\nAbsolutely agree! Convenience for the user is an absolute must. I just\ndon't know how to let users exchange large data packets without some kind\nof server acting as a dropbox in the middle. That leaves two solutions:\n\n1) Set up a way for users to exchange large data packets by using other\npeople's web servers, e.g. with no user visible signup flow (pure p2p/done\nautomatically in the background by user wallets)\n\n2) Make the data packets small instead.\n\nWe can debate better signing methods that work towards (2). The reason I am\nunsure about this is that the point of BIP70 is to be extended with useful\nfeatures. Even if we find a way to squeeze a human-meaningful\nsignature/cert into a URI, that's only one of BIP70s features. The next set\nwe want to add might end up running out of space again.\n\nA lot of the problems come from how limited QR codes are. So perhaps there\nis also a third approach: either find a better replacement for QR codes\n(maybe something that uses colour like Microsoft Tag\n<http://tag.microsoft.com/what-is-tag/home.aspx>), or drop them as a design\nconstraint.\n\nCalling Jeff Garzik, Jeff, are you there? I recall BitPay did some\nexperiments to find out how much data you can stuff into a QR code before\nit hurts scannability too much, do you have a writeup anywhere?\n\nThis is the main reason I feel uneasy about anything that isn't \"build a\nstore+forward network\". QR codes are so fundamental to our ecosystem, but\nsooooooo limited, that I'm not sure how else to move forward. We were told\nwhen designing BIP70 that even putting a URL in the QR code is pushing it!\nThere was talk of compressing the URL in some way. So adding even an ECC\nsignature which is much longer seems risky.\n\nWe can imagine a parallel universe where our societies technology was more\nNFC oriented: laptops had NFC tags in them, phones had better NFC support\netc. Then we would have more bytes to play with and we wouldn't face this\npointer-indirection problem :( But laptops don't have the hardware and\nApple sits on their NFC API because they can't imagine any use case that\nisn't credit cards :( :(\n\nTo get more specific, DNSSEC uses RSA 1024 bit. This causes two problems:\n\n   1. A DNSSEC proof is large, bytes wise. Even a single RSA signature\n   won't fit nicely in a QR code, I think.\n\n   2. 1024 bit is the absolute minimum strength you can get away with,\n   really. DNSSEC assumes frequent key rotations to try and help, which\n   complicates things.\n\nSo I'm not sure using DNSSEC fixes the usability problem we want to fix.\n\nI will do a separate reply to break out some thoughts on replacing QR codes.\n\nWould it be possible to create the same kind of \"lightweight payment\n> requests\" using SSL certificates? Probably, if the final signing key is\n> a EC key, and if the payment request does not include the whole chain of\n> certificates.\n\n\nGiven that the pre-existing value of the PKI is much lower for individuals\nthan for companies/websites, where they all have certs already, building a\nBitcoin-specific or entirely new/independent PKI for people is not so\nunthinkable, I agree.\n\nIn theory such a cert could be as minimal as:\n\n<ECC signature>thomasv at electrum.org\n\nso literally just a signature + a UTF-8 string, and that's it! You don't\nneed anything more if you're willing to sacrifice extensibility,\nrevocability, etc.\n\nThe pubkey of the CA would be obtained by running the pubkey recovery\nalgorithm on the signature, and then checked against a table of trusted\npubkeys.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/5d80acee/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-20T14:32:09",
                "message_text_only": "hi Mike,\n\nI hope you had a good trip!\n\n\n> To get more specific, DNSSEC uses RSA 1024 bit. This causes two problems:\n> \n>    1. A DNSSEC proof is large, bytes wise. Even a single RSA signature\n>    won't fit nicely in a QR code, I think.\n> \n>    2. 1024 bit is the absolute minimum strength you can get away with,\n>    really. DNSSEC assumes frequent key rotations to try and help, which\n>    complicates things.\n> \n> So I'm not sure using DNSSEC fixes the usability problem we want to fix.\n> \n\nIn my previous post, I was suggesting to *not* include the proof in the\nrequest, because the payer can download it independently. Only the final\nsignature is needed. What makes DNSSEC interesting is not the size of\nthe proof, but rather the fact that you can request it easily, and in a\ncanonical way.\n\nA typical lightweight payment request, serialized with EC signature and\nwithout the proof, would be about 150 bytes long.\n\n\n> I will do a separate reply to break out some thoughts on replacing QR codes.\n> \n> Would it be possible to create the same kind of \"lightweight payment\n>> requests\" using SSL certificates? Probably, if the final signing key is\n>> a EC key, and if the payment request does not include the whole chain of\n>> certificates.\n> \n> \n> Given that the pre-existing value of the PKI is much lower for individuals\n> than for companies/websites, where they all have certs already, building a\n> Bitcoin-specific or entirely new/independent PKI for people is not so\n> unthinkable, I agree.\n> \n> In theory such a cert could be as minimal as:\n> \n> <ECC signature>thomasv at electrum.org\n> \n> so literally just a signature + a UTF-8 string, and that's it! You don't\n> need anything more if you're willing to sacrifice extensibility,\n> revocability, etc.\n\nAgain, we don't have to sacrifice revocability, if the proof is\ndownloaded separately.\n\n> \n> The pubkey of the CA would be obtained by running the pubkey recovery\n> algorithm on the signature, and then checked against a table of trusted\n> pubkeys.\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-20T14:42:05",
                "message_text_only": ">\n> In my previous post, I was suggesting to *not* include the proof in the\n> request, because the payer can download it independently. Only the final\n> signature is needed. What makes DNSSEC interesting is not the size of\n> the proof, but rather the fact that you can request it easily, and in a\n> canonical way.\n>\n\nYes, but you still need the final signature. Is it possible to use an EC\nsignature with DNSSEC? I thought it was an all-RSA system. If I'm wrong\nabout that, and all you need is 32 bytes, then my argument does not hold.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/7c3a721f/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-20T14:52:51",
                "message_text_only": "Le 20/07/2015 16:42, Mike Hearn a \u00e9crit :\n>>\n>> In my previous post, I was suggesting to *not* include the proof in the\n>> request, because the payer can download it independently. Only the final\n>> signature is needed. What makes DNSSEC interesting is not the size of\n>> the proof, but rather the fact that you can request it easily, and in a\n>> canonical way.\n>>\n> \n> Yes, but you still need the final signature. Is it possible to use an EC\n> signature with DNSSEC? I thought it was an all-RSA system. If I'm wrong\n> about that, and all you need is 32 bytes, then my argument does not hold.\n> \n\nThe final signature is a signature of the payment request, it is not\npart of DNSSEC. So, yes, that signature can be EC.\n\nThe DNSSEC proof is used to verify that the public key, which is\nrecovered from the signature, corresponds to the alias.\n\nThe payment requests I am currently playing with have the following values:\n\npki_type = \"dnssec+btc\" (btc means that the signature is checked against\na Bitcoin address stored in DNS)\npki_data = the user's alias (DNS key)"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-20T15:14:03",
                "message_text_only": ">\n> The final signature is a signature of the payment request, it is not\n> part of DNSSEC. So, yes, that signature can be EC.\n>\n\nRight, got it. I think we've been talking about two related but separate\nissues (DNSSEC vs squeezing payment requests into URIs/qrcodes somehow).\nSo: DNSSEC attests via an RSA chain to some EC key stored in the wallet\nwhich is then used to sign the payment request or URI, which also contains\na domain name.\n\n\n> The payment requests I am currently playing with have the following values:\n>\n> pki_type = \"dnssec+btc\" (btc means that the signature is checked against\n> a Bitcoin address stored in DNS)\n> pki_data = the user's alias (DNS key)\n\n\nBy \"alias\" you mean domain name? I'm not sure what DNS key means in this\ncontext.\n\nI'm still not really convinced that a domain name under some new roots is\nan identity people will want to use, but yes, I guess your approach would\nwork for those who do want it.\n\nIt still may be worth exploring the compact cert+optimized BIP70 (no\nDNSSEC) in a qrcode if making a network that stores small bits of data\nreally is beyond us :(\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/cbf39169/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-20T15:34:04",
                "message_text_only": "Le 20/07/2015 17:14, Mike Hearn a \u00e9crit :\n> \n> By \"alias\" you mean domain name? I'm not sure what DNS key means in this\n> context.\n> \n\nyes, sorry, I mean the domain name corresponding to the TXT record.\nit's called 'alias' in the context of OpenAlias.\n\n\n> I'm still not really convinced that a domain name under some new roots is\n> an identity people will want to use, but yes, I guess your approach would\n> work for those who do want it.\n\nWhat do you mean by \"under some new roots\" ?\n\nIf I believe Netki, there is enough people who want to have a Bitcoin\naddress stored in DNS, for at least one company to thrive. :)\n\nAll I am proposing is a new usage for these already existing DNS\nrecords; not only to receive BTC, but also to sign requests with them.\n\n> It still may be worth exploring the compact cert+optimized BIP70 (no\n> DNSSEC) in a qrcode if making a network that stores small bits of data\n> really is beyond us :(\n> \nHeh, pastebin + base64 encoding the PR could work. However, it might\nviolate their ToS. More seriously, there might be some legal issues for\na company willing to provide that kind of service.\n\nRe QR codes: 150 bytes, using base43 encoding, is not too bad."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-20T16:09:03",
                "message_text_only": ">\n> What do you mean by \"under some new roots\" ?\n>\n\nI mean, most users will need to sign up for some new identity under a DNS\ntree that they don't currently use (whether that's netki.com or whatever).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/b04b987a/attachment.html>"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-14T08:29:25",
                "message_text_only": "Hi Mike,\n\nFYI there is a company called Netki is also working on a kind of DNSSEC\n> integration with BIP70, there's a thread here about their efforts:\n>\n>\n>\n> https://groups.google.com/forum/#!searchin/bitcoinj/dnssec/bitcoinj/QFAH1F2dEwE/36oWDwREEV4J\n>\n> If you would like to work on this, perhaps it's worth teaming up with them?\n> Obviously they plan to have an open spec and open source implementation.\n>\n\nNetki's solution is incredibly limited, it's a single return value and no\nmetadata (where OA encapsulates metadata in KV pairs). This does not lend\nitself well to handling BIP70-style communication.\n\nAs an aside, they also seem to have a complete disregard for lookup\nprivacy, which we address in OpenAlias by means of DNSCrypt encrypted\nlookups. To that end we have even written the first independent DNSCrypt\nimplementation (ie. over-and-above dnscrypt-proxy) which provides a full\nPython implementation that uses libsodium / nacl if available, but falls\nback to a 100% Python slownacl implementation:\nhttps://github.com/openalias/dnscrypt-python\n\nRiccardo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/625dd0fb/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-18T13:29:39",
                "message_text_only": "Le 14/07/2015 19:29, Justin Newton a \u00e9crit :\n\n> Hi there.  You are correct that we are a company providing a service,\n> however, that service is also based on an open standard which we are\n> proposing.  I'll be honest that we haven't done the greatest job in\n> promoting the standard so far.  More coming soon on that front.  Any\n> of the Open Source Wallet Name resolvers that we have created do\n> lookups against the standard record formats, and not directly against\n> our servers in any way.  Information on the record formats as well as\n> links to the lookup API server and some early libraries can be found\n> here:  https://www.netki.com/#/developers and here:\n> https://github.com/netkicorp\n> \n\nSorry to answer late, and thanks for the clarification. After talking\nwith you, I believe that it will not be difficult to agree on a common\nstandard, that gives maximum freedom to everyone.\n\nI also believe that it is in Netki's interest to convey the message that\nthey are actively promoting an open standard, and not pushing a private\nsolution. For this reason, and assuming that the future standard\nsatisfies you fully, will you mind if that standard carries a neutral\nname (such as \"OpenAlias v2\", or \"BIP xx\"), instead of being named after\nyour company? I reckon that is purely a PR issue.\n\n\n> To break it down briefly, we have an open lookup standard based on\n> both the namecoin blockchain as well as traditional DNSSEC.  (You can\n> choose your own adventure of using namecoin based names or traditional\n> ICANN names).\n\nI would rather not make Namecoin part of the standard, because .bit\nrecords cannot be verified easily by lightweight/spv wallets; they would\nneed a copy of the Namecoin blockchain for that.\n\n> Differences:\n> \n> 1> We do not use DNSCrypt.  I understand why you chose to, but we were\n> concerned about broad interoperability and easy broad distribution of\n> hosting, so decided not to use it.  We have other ways of achieving\n> privacy, using HD Wallets and Payment Requests.\n> \n\nAs far as Electrum is concerned, I do not see DNSCrypt as something\nusable in the short term. I do not think it should be mandated, because\nthere are other ways of achieving privacy, as you say.\n\n> 2> We have the option of storing a URL rather than just a wallet\n> address in the TXT record.  This allows a second level lookup against\n> the URL to get back a unique HD Wallet address or Payment Request each\n> time, further protecting user privacy and security.  Using Wallet\n> Names with Payment Requests allows for the user experience of typing\n> in an easy to remember name and getting back the \"green lock\" and who\n> the validated recipient is.  This also provides an auto audit of the\n> end to end DNS SEC process, in the case the path were somehow\n> compromised, the signature on the payment request can provide an\n> additional check.\n> \n\nI see value in the ability to store differerent types of strings in TXT\nrecords. In particular, I have the need to store an email address, and\nmore than one Bitcoin address or xpubkey per alias.\n\n> 3> We use a 2 tier lookup format.  The first lookup returns a list of\n> currencies or payment types supported by the Wallet Name.  The second\n> lookup goes to a record specific to that currency type to get the\n> address to go to.  We believe this to be a more scalable solution in a\n> world where someone can have both multiple digital currency types, but\n> then also multiple types of colored coins, and wants a simple way to\n> share a single name for all of those different addresses.  This allows\n> the wallet to do the work behind the scene of choosing the currency it\n> wants to send, and automatically getting back the right address to\n> send to, without the user having to do anything different.\n> \n\nThis seems to be a major difference, and I believe it makes sense to do\nit the way you describe. Does that solution fully replace the tags used\nin OpenAlias, or does it make sense to combine these two systems?\n\n\n> 4> We mandate DNSSEC while you make it optional.  We did this because\n> we believe giving the user the option of NOT using DNSSEC is like\n> letting them order a car with no brakes.  We weren't sure how we would\n> explain to them why their money was gone when they really didn't\n> understand the risks they were taking up front. We had a lot of\n> discussion about it before coming to the decision we did, and I can\n> see why you went the other way, although I do believe we made the\n> right choice.\n\nI agree on this; there is no point using OpenAlias without DNSSEC.\nWallets can use fallback servers if the default DNS does not have DNSSEC.\n\n> \n> \n> Additionally, we just released another open source API server to help\n> with the \"other half\" of the lookup problem.  Its in its infancy, and\n> we are certainly taking feedback on it at this time.  It is called\n> Addressimo <https://github.com/netkicorp/addressimo> and will serve\n> unique HD Wallet addresses or Payment Requests for every lookup, thus\n> allowing a user to have a private, secure way to share a Wallet Name\n> that can be used to send them any digital currency.\n> \n\n> I'd love to talk here or offline about merging standards going\n> forward.  As an FYI, Verisign has also delivered a standard to the\n> IETF using DNSSEC to pass payment information here:\n> https://tools.ietf.org/html/draft-wiley-paymentassoc-00  We have\n> started discussions with them about merging standards as well.\n> \n\nThat is nice, but may be out of scope here. Isn't there a risk that\ninvolving the IETF would make the process a lot slower? Of course it\nwould be great, but maybe we should try to reach consensus at our level\nfirst (the bitcoin level), before trying to merge with them.\n\n\n> \n> They actually have a really nice way in their standard to encode email\n> addresses that more or less ensures that there won't be name space\n> collision in the case that there is already a record \"joe.user.com\"\n> and you want to create one for \"joe at user.com\" that we are looking at\n> adding to what we are doing in the next update to our record formats.\n> \n> \n> In any case, I'd much rather we had one effort going forward than\n> multiples, so let's talk!\n>"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-18T23:01:39",
                "message_text_only": "On Sat, Jul 18, 2015 at 6:29 AM, Thomas Voegtlin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Le 14/07/2015 19:29, Justin Newton a \u00e9crit :\n>\n\n>\n> Sorry to answer late, and thanks for the clarification. After talking\n> with you, I believe that it will not be difficult to agree on a common\n> standard, that gives maximum freedom to everyone.\n\n100% agreed.\n\n>\n> I also believe that it is in Netki's interest to convey the message that\n> they are actively promoting an open standard, and not pushing a private\n> solution. For this reason, and assuming that the future standard\n> satisfies you fully, will you mind if that standard carries a neutral\n> name (such as \"OpenAlias v2\", or \"BIP xx\"), instead of being named after\n> your company? I reckon that is purely a PR issue.\n\nTo be clear, the current name of the service is Wallet Name Service,\nNetki has tended to be tagged to it as people are associating the\nservice with us.  We also intend to offer more services than just\nthis, so its actually not really good for us to think of Netki as the\nservice name.  I have no issues with a neutral name for the lookup\nstandard.\n\n\n>\n>\n> > To break it down briefly, we have an open lookup standard based on\n> > both the namecoin blockchain as well as traditional DNSSEC.  (You can\n> > choose your own adventure of using namecoin based names or traditional\n> > ICANN names).\n>\n> I would rather not make Namecoin part of the standard, because .bit\n> records cannot be verified easily by lightweight/spv wallets; they would\n> need a copy of the Namecoin blockchain for that.\n\nYou are the second person to raise this.  Clearly this is an item that\nrequires some discussion before anything is decided for sure.  We had\ngone this direction (and I assume Riccardo did as well) to provide a\ncensor resistant option as well as one that would be low cost for\nindividuals to be able register their own names.  This also allows for\nlookups that never leave the local network.  The trade off there for\nmobile wallets was one I feel we failed to properly consider.\n\n\n<SNIPPING AREAS OF APPARENT AGREEMENT>\n>\n> > 3> We use a 2 tier lookup format.  The first lookup returns a list of\n> > currencies or payment types supported by the Wallet Name.  The second\n> > lookup goes to a record specific to that currency type to get the\n> > address to go to.  We believe this to be a more scalable solution in a\n> > world where someone can have both multiple digital currency types, but\n> > then also multiple types of colored coins, and wants a simple way to\n> > share a single name for all of those different addresses.  This allows\n> > the wallet to do the work behind the scene of choosing the currency it\n> > wants to send, and automatically getting back the right address to\n> > send to, without the user having to do anything different.\n> >\n>\n> This seems to be a major difference, and I believe it makes sense to do\n> it the way you describe. Does that solution fully replace the tags used\n> in OpenAlias, or does it make sense to combine these two systems?\n\nI think combining formats to use both the two level lookups and tags\ncould have value.  Tags could include information like versioning, as\nwell as whether what is being returned is an address, URL for further\nlookup, or other piece of information.\n\n\n\n<SNIPPING MORE AGREEMENT>\n\n>\n> > I'd love to talk here or offline about merging standards going\n> > forward.  As an FYI, Verisign has also delivered a standard to the\n> > IETF using DNSSEC to pass payment information here:\n> > https://tools.ietf.org/html/draft-wiley-paymentassoc-00  We have\n> > started discussions with them about merging standards as well.\n> >\n>\n> That is nice, but may be out of scope here. Isn't there a risk that\n> involving the IETF would make the process a lot slower? Of course it\n> would be great, but maybe we should try to reach consensus at our level\n> first (the bitcoin level), before trying to merge with them.\n\nI concur with this approach.  I think it makes sense for us to stay in\ncontact and communication with the IETF side with the hope of ending\nup with something that is, in the end the same, or at least\ncompatible.  I also agree that we shouldn't wait on the IETF to move\nahead ourselves, more stay in communication with them so that we don't\nend up accidentally going in opposite directions, and also so we can\nlearn best practices from each other along the way.\n\nAs you can see, this has been our approach up until now where we have\ngone ahead and built and expanded our \"standard\" based on our\ndiscussions and integrations with other industry participants.\n\nThanks for the feedback!\n\nJustin\n\n\n\n\n-- \n\nJustin W. Newton\nFounder/CEO\nNetKi, Inc.\n\njustin at netki.com\n+1.818.261.4248"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-20T08:56:27",
                "message_text_only": "Le 19/07/2015 01:01, Justin Newton via bitcoin-dev a \u00e9crit :\n>>\n>> I would rather not make Namecoin part of the standard, because .bit\n>> records cannot be verified easily by lightweight/spv wallets; they would\n>> need a copy of the Namecoin blockchain for that.\n> \n> You are the second person to raise this.  Clearly this is an item that\n> requires some discussion before anything is decided for sure.  We had\n> gone this direction (and I assume Riccardo did as well) to provide a\n> censor resistant option as well as one that would be low cost for\n> individuals to be able register their own names.  This also allows for\n> lookups that never leave the local network.  The trade off there for\n> mobile wallets was one I feel we failed to properly consider.\n> \n\nI think our common goal should be to standardize DNS records holding\nBitcoin addresses, because they are going to be used by both Netki and\nElectrum.\n\nYou and Ricardo may find it useful to have other types of lookups, such\nas Namecoin, and that's fine with me, but I do not want that to slow\ndown or stall the current standardisation effort, because Namecoin\nlookups are clearly not an option for lightweight wallets. That is what\nI meant by 'not part of the standard'; let's work on what we have in\ncommon :)"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-14T19:07:28",
                "message_text_only": "> To break it down briefly, we have an open lookup standard based on\n> both the namecoin blockchain as well as traditional DNSSEC.  (You can\n> choose your own adventure of using namecoin based names or traditional\n> ICANN names).\n\n\nGood, that's roughly analogous with what OpenAlias defines.\n\nWe DO provide a service where we will register or host\n> names on your behalf. However if you follow the format and host them\n> yourself, everything will work just fine, and our open source lookup\n> server and libraries will provide those results exactly the same as if\n> the names were hosted with us.\n\n\nAlso good, much the same as https://cryptoname.co and https://xmr.link\n\n\n> To that end, we have had conversations\n> with several companies in the space who intend to host their own\n> names, and we intend to work with them on the effort to ensure our\n> documentation is sufficient to ensure they can successfully do so.\n>\n> In terms of comparisons to OpenAlias, I think there are a lot of\n> similarities, but a few differences.  First the similarities:\n>\n>\n> 1> We both use DNSSEC.\n>\n> 2> We both have the option of storing the address directly in the DNS\n> record.\n>\n>\n> Differences:\n>\n> 1> We do not use DNSCrypt.  I understand why you chose to, but we were\n> concerned about broad interoperability and easy broad distribution of\n> hosting, so decided not to use it.  We have other ways of achieving\n> privacy, using HD Wallets and Payment Requests.\n>\n\nAnd this is the part where you guys look really, really incompetent (and I\ndon't mean that in a terribly demeaning way, it's just that you're in a\nspace where you want to be a domain expert, not make a series of\nembarrassing and public faux pas).\n\nDNSCrypt requires NO work on the part of the alias creator, DNS server,\nSOA, or anything else. It is entirely client side, and allows for *private\nlookups*. HD Wallets and Payment Requests are inconsequential, an ISP still\nknows every DNS resolution their users are performing.\n\nWhen using dnscrypt-proxy to perform private lookups they are done against\nthe 55 free and public DNSCrypt resolvers [1], provided by oVPN, OpenNIC,\nOpenDNS, okTurtles, CloudNS, and various individuals. OpenAlias links to\nand recommends four of these specifically, as they have the unique\ncombination of providing Namecoin lookups, supporting DNSSEC validation for\nlightweight verification, and claiming not to store logs.\n\nTherefore, DNSCrypt provides encrypted, private, secure, end-user lookups\nwith no implication on the creation side. That you are unaware of this\n(when presumably you at least read the Wikipedia article on the topic) and\nare not embracing it is quite surprising, to say the least.\n\n\n> 2> We have the option of storing a URL rather than just a wallet\n> address in the TXT record.  This allows a second level lookup against\n> the URL to get back a unique HD Wallet address or Payment Request each\n> time, further protecting user privacy and security.  Using Wallet\n> Names with Payment Requests allows for the user experience of typing\n> in an easy to remember name and getting back the \"green lock\" and who\n> the validated recipient is.  This also provides an auto audit of the\n> end to end DNS SEC process, in the case the path were somehow\n> compromised, the signature on the payment request can provide an\n> additional check.\n>\n\nOpenAlias supports this as well, except it does it better by allowing the\nKV pairs to also contain a TLSA record before the request, which\neffectively makes it a DANE-secured interaction. Your interaction requires\nthe trusting of multiple CAs, which is an inherent weakness.\n\n3> We use a 2 tier lookup format.  The first lookup returns a list of\n> currencies or payment types supported by the Wallet Name.  The second\n> lookup goes to a record specific to that currency type to get the\n> address to go to.  We believe this to be a more scalable solution in a\n> world where someone can have both multiple digital currency types, but\n> then also multiple types of colored coins, and wants a simple way to\n> share a single name for all of those different addresses.  This allows\n> the wallet to do the work behind the scene of choosing the currency it\n> wants to send, and automatically getting back the right address to\n> send to, without the user having to do anything different.\n>\n\nWe do the same thing, except in a single call. Here's an example of a\nrecord that has both XMR and BTC addresses:\nhttps://api.openalias.org/donate.getmonero.org?view=full (here are the DNS\nrecords for that:\nhttp://mxtoolbox.com/SuperTool.aspx?action=txt%3adonate.getmonero.org&run=toolpage\n)\n\n\n> 4> We mandate DNSSEC while you make it optional.  We did this because\n> we believe giving the user the option of NOT using DNSSEC is like\n> letting them order a car with no brakes.  We weren't sure how we would\n> explain to them why their money was gone when they really didn't\n> understand the risks they were taking up front. We had a lot of\n> discussion about it before coming to the decision we did, and I can\n> see why you went the other way, although I do believe we made the\n> right choice.\n>\n\nWith OpenAlias a DNSSEC fail is a soft fail, and the user has to confirm\nthe address. The reasons are threefold:\n\n1. At the moment only 83.5% of the TLDs are signed [2]. The unsigned ones\ninclude some biggies like .sg, .za, and .to\n\n2. Even if the zone *is* signed, DNSSEC deployment is hard. Unmanaged\nDNSSEC deployment is out of scope for probably 99.9% of users, even the\nusually-technically-ok Bitcoin crowd. Managed DNSSEC is available, but is\nquite pricey. UltraDNS, Dyn, and GoDaddy (ikr?) are the three big\nproviders, and of those three only GoDaddy has a consumer-affordable\nproduct.\n\n3. ThomasV and I have done a stack of testing behind residential and\ncommercial routers where DNSSEC simply fails (eg. the router runs a really\noutdated DNS server that doesn't provide RRSIGs in its response, or the ISP\ndoesn't care about DNSSEC). Unsurprisingly, this can be fixed by...you\nguessed it...doing the lookup via DNSCrypt.\n\nUntil we are closer to the bulk of all TLDs being signed, and DNSSEC\nbecomes at least a little more ubiquitous, we can't lock out huge portions\nof the Internet, because then we're not really providing a useful and\nusable solution. All we can is make it more difficult to pay an unverified\ndomain.\n\nOf course, if your aim is to force people to use you as a domain registrar,\nthen it makes total sense why you'd lock people out;)\n\nAdditionally, we just released another open source API server to help\n> with the \"other half\" of the lookup problem.  Its in its infancy, and\n> we are certainly taking feedback on it at this time.  It is called\n> Addressimo <https://github.com/netkicorp/addressimo> and will serve\n> unique HD Wallet addresses or Payment Requests for every lookup, thus\n> allowing a user to have a private, secure way to share a Wallet Name\n> that can be used to send them any digital currency.\n>\n\nOh snap...https://github.com/openalias/openalias-api\n\n\n> I'd love to talk here or offline about merging standards going\n> forward.  As an FYI, Verisign has also delivered a standard to the\n> IETF using DNSSEC to pass payment information here:\n> https://tools.ietf.org/html/draft-wiley-paymentassoc-00  We have\n> started discussions with them about merging standards as well.\n>\n>\n> They actually have a really nice way in their standard to encode email\n> addresses that more or less ensures that there won't be name space\n> collision in the case that there is already a record \"joe.user.com\"\n> and you want to create one for \"joe at user.com\" that we are looking at\n> adding to what we are doing in the next update to our record formats.\n>\n\nOpenAlias (and your system) doesn't really have to worry about that, as TXT\nrecords can live side-by-side with A / CNAME / MX etc. records. More\nimportantly, OpenAlias especially doesn't have to worry about it, because\nOpenAlias TXT records have a prefix: \"oa1:\" for OpenAlias v1 records. The\nrisk of there being a legitimate TXT record that starts with oa1: and\n*isn't* an OpenAlias record is, well, pretty negligible.\n\nIn any case, I'd much rather we had one effort going forward than\n> multiples, so let's talk!\n>\n\nI agree, and you guys are in an ideal position to change to supporting the\nOpenAlias standard (and enhancing it) without skipping a beat. We would\ndefinitely appreciate and take your input and efforts, and that would make\nOpenAlias v2 (oa2:) a standard built out in conjunction with Netki.\n\nNot only do you get Electrum support without lifting a finger, but it will\ngo a long way to repairing your relationship with the open-source community\nat large, several proponents of which have taken great umbrage at what you\nwere previously pushing as a closed-source, centralised system.\n\nRiccardo\n\nFootnotes:\n\n[1] -\nhttps://github.com/jedisct1/dnscrypt-proxy/blob/master/dnscrypt-resolvers.csv\n[2] - http://stats.research.icann.org/dns/tld_report/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/8b285f92/attachment.html>"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-17T00:55:10",
                "message_text_only": "I am breaking this into a couple of pieces as my first response has been in\na moderator queue for some time because it is too long.\n\n\nTL;DR version - Wallet Name Service has always been a decentralized and\ndistributed service that it no way requires you to ever touch the Netki\ninfrastructure.  We want to work with the community, as we have been from\nthe beginning, to come up with the best standard possible.\n\nLonger answers inline below.\n\n\n\nOn Tue, Jul 14, 2015 at 12:07 PM, Riccardo Spagni <ric at spagni.net> wrote:\n\n>\n>\n>> In terms of comparisons to OpenAlias, I think there are a lot of\n>> similarities, but a few differences.  First the similarities:\n>>\n>>\n>> 1> We both use DNSSEC.\n>>\n>> 2> We both have the option of storing the address directly in the DNS\n>> record.\n>>\n>>\n>> Differences:\n>>\n>> 1> We do not use DNSCrypt.  I understand why you chose to, but we were\n>> concerned about broad interoperability and easy broad distribution of\n>> hosting, so decided not to use it.  We have other ways of achieving\n>> privacy, using HD Wallets and Payment Requests.\n>>\n>\n> And this is the part where you guys look really, really incompetent (and I\n> don't mean that in a terribly demeaning way, it's just that you're in a\n> space where you want to be a domain expert, not make a series of\n> embarrassing and public faux pas).\n>\n>\n> I appreciate the thought :)  I think where we differ is on where we\nbelieve the trade offs should be on perceived privacy versus censorship\nresistance and centralization.\n\n\nBy having a limited number of proxies people need to go through to easily\nimplement, be it the 4 you recommend, or 53, you actually have a very\nlimited number of actors for an authority or hacker to go to in order to be\nable to install/force logging, or censorship.  This very centralization\nforces us back to a model where we need to trust a very small number of\nactors in order for the system to operate as designed.  This, to me,\nappears to be the opposite of the goals of the bitcoin ecosystem.  To\nensure this point is clear, I strongly believe recommending people focus\nall lookups through 4 centralized \"proxies\" is a bad idea and counter to\nbitcoin's ideals.\n\n\nThe fact that hackers or state actors need to corrupt only a small number\nof servers/services in order to gain global visibility into all queries, I\nbelieve, breaks any perceived privacy gains from using DNSCrypt.  A very\nsmall number of hacks or subpoenas and everyone's records are fair game in\none place.\n\n\nFor the highly privacy conscious they can, today do their DNS lookups over\na non logging VPN connection without forcing everyone else through a\nhandful of centralized servers.  Or they can use DNSCrypt optionally\nthemselves.  All of our tools have always been open source and folks can\nmodify them for their own desired uses, or submit pull requests with their\nown ideas.\n\nWe'd love to hear others thoughts on this.  While I believe that for now\nthe centralization trade offs required to use DNSCrypt today (via a limited\nnumber of proxies) outweigh any perceived privacy benefits it provides, we\nare always open to what others in the community believe and have made\nmodifications to how things work before as a result of feedback from\nindustry participants.\n\n\n\n\n\n\n>\n>\n>> 2> We have the option of storing a URL rather than just a wallet\n>> address in the TXT record.  This allows a second level lookup against\n>> the URL to get back a unique HD Wallet address or Payment Request each\n>> time, further protecting user privacy and security.  Using Wallet\n>> Names with Payment Requests allows for the user experience of typing\n>> in an easy to remember name and getting back the \"green lock\" and who\n>> the validated recipient is.  This also provides an auto audit of the\n>> end to end DNS SEC process, in the case the path were somehow\n>> compromised, the signature on the payment request can provide an\n>> additional check.\n>>\n>\n> OpenAlias supports this as well, except it does it better by allowing the\n> KV pairs to also contain a TLSA record before the request, which\n> effectively makes it a DANE-secured interaction. Your interaction requires\n> the trusting of multiple CAs, which is an inherent weakness.\n>\n\nI think DANE is a great idea.  We were just discussing that with Andreas\nS., and are currently looking at whether we want to add this as optional\nversus mandatory, based on how widely available DANE is for folks using\nservices like Cloudflare, Akamai, etc for their DNS, which many providers\nin the space today are.\n\nOf course, the security conscious could setup DANE on the URL we use AS\nIS.  There is no need to create a special kv pair for this as is done in\nOpenAlias.  As you know, DNSSEC and HTTPS support this today out of the box.\n\nThe CA validation, in our case, is an ADDITIONAL signature based validation\nto the DNSSEC chain, not a replacement for it.\n\n\n [CONTINUED]\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/c798d824/attachment.html>"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-17T00:58:10",
                "message_text_only": "[continued]\n\n\n\n> 3> We use a 2 tier lookup format.  The first lookup returns a list of\n>> currencies or payment types supported by the Wallet Name.  The second\n>> lookup goes to a record specific to that currency type to get the\n>> address to go to.  We believe this to be a more scalable solution in a\n>> world where someone can have both multiple digital currency types, but\n>> then also multiple types of colored coins, and wants a simple way to\n>> share a single name for all of those different addresses.  This allows\n>> the wallet to do the work behind the scene of choosing the currency it\n>> wants to send, and automatically getting back the right address to\n>> send to, without the user having to do anything different.\n>>\n>\n> We do the same thing, except in a single call. Here's an example of a\n> record that has both XMR and BTC addresses:\n> https://api.openalias.org/donate.getmonero.org?view=full (here are the\n> DNS records for that:\n> http://mxtoolbox.com/SuperTool.aspx?action=txt%3adonate.getmonero.org&run=toolpage\n> )\n>\n\n\nWe looked at doing this in a single lookup as you did.  With one or two\ncurrencies this can be potentially more efficient.  As the number of\nsupported currencies and addresses under a single name grows, however, this\nsolution becomes potentially more problematic.  Please follow the use cases\nbelow:\n\nUse case 1:  Wallet Name = \"bob.foo.bar\" or OpenAlias = \"bob.foo.bar\"\n\nThe only currency supported is bitcoin, and there are no colored coin\nformats supported.\n\nOpenAlias case:\n\n1 packet lookup to \"bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\n\nWallet Name case:\n\n1 packet lookup to \"_wallet.bob.foo.bar\"\n1 packet response with supported address types\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 4 packets\n\nWallet Name Case 1a:\n\nThe wallet doing the lookup knows it wants bitcoin, so it skips the\nsupported addresses lookup\n\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\nIn this use case we might create more traffic, but it could also be reduced\nby doing smart lookups.\n\n\nUse case 2:  Wallet Name = \"bob.foo.bar\" or OpenAlias = \"bob.foo.bar\"\n\nMany currencies and colored coin addresses are supported under the same\nname, lets say 100.  When you count different currencies and colored coin\ntypes, it could easily be hundreds, or over a thousand.\n\n\nOpenAlias case:\n\n1 packet lookup to \"bob.foo.bar\"\n100 packet responses with various addresses\n\n= 101 packets\n\n\nWallet Name case:\n\n1 packet lookup to \"_wallet.bob.foo.bar\"\n1 packet response with supported address types\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 4 packets\n\nWallet Name Case 2a:\n\nThe wallet doing the lookup knows it wants bitcoin, so it skips the\nsupported addresses lookup\n\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\n\nWhile you may end doing \"less lookups\" under Open Alias, as it scales, you\nend up causing a significant amount of extra, unnecessary traffic.\n\nIn addition to the obvious impact of being orders of magnitude more\nwasteful than necessary, it also creates privacy \"leakage\" by returning\nsomeone 100 different addresses when they only asked for one.\n\nFinally, because a single packet UDP transaction for a DNS lookup can\ncreate possibly hundreds of packets in response, the service can\nessentially become an amplifier for DDoS attacks.  (If I spoof the source\naddress of my target with a query to a lookup that issues hundreds of\npackets in response to one packet, and I can have a real impact :( )\n\n\n\n\n>\n>\n>> 4> We mandate DNSSEC while you make it optional.  We did this because\n>> we believe giving the user the option of NOT using DNSSEC is like\n>> letting them order a car with no brakes.  We weren't sure how we would\n>> explain to them why their money was gone when they really didn't\n>> understand the risks they were taking up front. We had a lot of\n>> discussion about it before coming to the decision we did, and I can\n>> see why you went the other way, although I do believe we made the\n>> right choice.\n>>\n>\n> With OpenAlias a DNSSEC fail is a soft fail, and the user has to confirm\n> the address. The reasons are threefold:\n>\n> 1. At the moment only 83.5% of the TLDs are signed [2]. The unsigned ones\n> include some biggies like .sg, .za, and .to\n>\n\nI think this is a good point, and one we weighed.  When we were making our\noriginal decisions.  Given the importance of ensuring that the lookups\nreturn the correct value, and the known vulnerabilities in DNS without\nDNSSEC, coupled with the fact that ICANN has mandated all zones and\nregistries move to DNSSEC, our belief was and is that it was worth the\ntrade off that there were cases where existing domains would not work.\n\n\nIt is important to note, that ICANN has \"required\" for some years that\nregistrars and registries support DNSSEC on the domains they register.  I\npersonally believe we shouldn't delay use of DNSSEC until their registries\nhad come up to current required Internet standards.  (Here are ICANN's\nregistrar requirements showing the DNSSEC requirement, btw:\nhttps://www.icann.org/resources/pages/approved-with-specs-2013-09-17-en#operation\n)\n\nThat said, what do others in the industry think?  We are basing our current\nstandard on our believed best practices, and defaulted to \"first, lose no\nmoney\", given the irreversibility of bitcoin.\n\n\n\n> 2. Even if the zone *is* signed, DNSSEC deployment is hard. Unmanaged\n> DNSSEC deployment is out of scope for probably 99.9% of users, even the\n> usually-technically-ok Bitcoin crowd. Managed DNSSEC is available, but is\n> quite pricey. UltraDNS, Dyn, and GoDaddy (ikr?) are the three big\n> providers, and of those three only GoDaddy has a consumer-affordable\n> product.\n>\n\n\nI think \"DNSSEC is hard\" is a bit of a boogey man that's not really true.\nWe are working on developing registrar by registrar instructions of how to\ndo this, and we have typically found that if you are setting up DNS by\nyourself, adding DNSSEC doesn't take a lot of additional time, maybe an\nhour or so depending on your registrar.\n\nThis known concern, however, is why when we launched our product (based on\nour standard record formats) that we wanted to launch it with a variety of\noptions for people.\n\nIn addition to these options there are also other hosting providers, and\ncertain registrars that will allow you to setup DNSSEC on their DNS\nplatforms.\n\n\n1> One could choose the \"0 click\" installation process of just getting a\nfree Wallet Name underneath their provider's name space.  This option has\nbeen free to end users in all cases so far, and I expect it always will be\nin the future (although that is up to the partner, so some may choose to\ncharge).\n\n2> If they wanted some provider independence, but someone to manage things\nfor them, they can register a name through us and manage everything via our\nweb interface.  This can cost them as little as $1.95/yr through us.\n\n3> Finally, for the \"do it yourselfer\" who wants full control themselves,\nthey can simply follow the formats on our developer page and do the whole\nthing themselves.  If they do this by registering their own \".bit\" this\nwill cost them less than $0.25.  If they have an existing domain name, even\nless.\n\n\n\n\n\n\n>\n> 3. ThomasV and I have done a stack of testing behind residential and\n> commercial routers where DNSSEC simply fails (eg. the router runs a really\n> outdated DNS server that doesn't provide RRSIGs in its response, or the ISP\n> doesn't care about DNSSEC). Unsurprisingly, this can be fixed by...you\n> guessed it...doing the lookup via DNSCrypt.\n>\n\nThat's some interesting data, and runs counter to the research of the IETF\nDNS working group.  If you are willing to share your data, I can put you in\ntouch with the appropriate folks there to share your research.  I'd also\nlove to see it!\n\n\n\n>\n> Until we are closer to the bulk of all TLDs being signed, and DNSSEC\n> becomes at least a little more ubiquitous, we can't lock out huge portions\n> of the Internet, because then we're not really providing a useful and\n> usable solution. All we can is make it more difficult to pay an unverified\n> domain.\n>\n> Of course, if your aim is to force people to use you as a domain\n> registrar, then it makes total sense why you'd lock people out;)\n>\n\nI'd argue that we aren't locking \"huge portions\" of the Internet.  You are\ncorrect that about 15% of TLD's are not yet signed, even though they were\nrequired to be by ICANN.\n\nAs I said above, I believe the requirement to not lose money and the fact\nthat other options are available for those running on TLD's that are out of\ncompliance, is worth the trade off that some existing names won't work\nuntil their TLD's come into compliance with current Internet standards.\n\nAnd, as we covered above, we don't force anyone to use our registrar, nor\nany of our services in order for Wallet Names to work for them.  We never\nhave.  It's just not who we are.\n\n\n\n\n\n>\n> Additionally, we just released another open source API server to help\n>> with the \"other half\" of the lookup problem.  Its in its infancy, and\n>> we are certainly taking feedback on it at this time.  It is called\n>> Addressimo <https://github.com/netkicorp/addressimo> and will serve\n>> unique HD Wallet addresses or Payment Requests for every lookup, thus\n>> allowing a user to have a private, secure way to share a Wallet Name\n>> that can be used to send them any digital currency.\n>>\n>\n> Oh snap...https://github.com/openalias/openalias-api\n>\n\nThese are actually vastly different pieces of software, at least from the\ndescription, and a first read of the code.  My understanding is the\nsoftware you linked to here basically takes the DNS work out of lookups for\npeople, as we released: https://github.com/netkicorp/wns-api-server  Its\nour Wallet Name Lookup server.\n\nAddressimo, as I described above, provides a different purpose.  Its a way\nfor service providers, mobile wallet providers or end users to have an\nonline server that can serve unique wallet addresses ala HD Wallets (BIP32)\nor signed Payment Requests (BIP0070).  This allows for an easy way to\nincrease security and privacy by serving a unique address for every\nrequest, and/or sign the address (and other optional data) with an X509\nprivate key to prove ownership of the address in a way independent of and\nsupplemental to the DNSSEC chain (also can be DANE for yet another layer of\nsecurity).  It also supports offline signing of the Payment Requests so the\nserver doesn't have to have access to a private key, or need to be trusted.\n\n\n\n\n\n>\n>\n> In any case, I'd much rather we had one effort going forward than\n>> multiples, so let's talk!\n>>\n>\n> I agree, and you guys are in an ideal position to change to supporting the\n> OpenAlias standard (and enhancing it) without skipping a beat. We would\n> definitely appreciate and take your input and efforts, and that would make\n> OpenAlias v2 (oa2:) a standard built out in conjunction with Netki.\n>\n> Not only do you get Electrum support without lifting a finger, but it will\n> go a long way to repairing your relationship with the open-source community\n> at large, several proponents of which have taken great umbrage at what you\n> were previously pushing as a closed-source, centralised system.\n>\n>\nI'm a little confused by these closing statements.  Our system has, from\nthe beginning been open in terms of the fact that anyone could both serve\nnames or do lookups without ever touching our servers, talking to us, or us\neven knowing that they did it or that they even exist.  Our system has\nNEVER been one where folks were required to use us for any portion of the\nservice, and from our first beta product launch our open source tools did\nall lookups against DNS records and the blockchain, never any proprietary\nservers or interfaces on our side.\n\nIn terms of the format itself being open, we have already made several\nextensions and modifications to it as a result of conversations with\nindustry participants in order to ensure that what we are building meets\nthe needs of the community at large.  We will gladly continue to do so, it\nis how we ensure we are building something everyone needs!\n\nI'd love to know where you got information that we were in some way a\nclosed and centralized system so that we can have an opportunity to clarify\nthat misconception.\n\n\nIn terms of finding a common standard, as I said, I am thrilled to have the\nconversations, but there are some places, highlighted above, that would\ncause me to hesitate to \"just implement\" the Open Alias standard.  I can\nalso see places where bringing the formats together to one standard could\nhave strong benefits, for example:\n\nI think formatting the record as a key value pair with versioning has\nmerit, and would love to move it in to what we are doing (and likely will).\n\nOn the other side, I think the two level lookup provides a lot of value at\nscale over trying to send back a bunch of text records when only a small\nportion of the data is used.\n\nI'd love to hear thoughts from others in the community on mandating DNSSEC\nand thoughts on DNSCrypt.  I have a strong opinion on both of those but\nwould love to engage in thoughtful dialogue around what path best suits the\nneed of the community.\n\n\nLooking forward to the discussion!\n\nOn Thu, Jul 16, 2015 at 5:55 PM, Justin Newton <justin at netki.com> wrote:\n\n> I am breaking this into a couple of pieces as my first response has been\n> in a moderator queue for some time because it is too long.\n>\n>\n> TL;DR version - Wallet Name Service has always been a decentralized and\n> distributed service that it no way requires you to ever touch the Netki\n> infrastructure.  We want to work with the community, as we have been from\n> the beginning, to come up with the best standard possible.\n>\n> Longer answers inline below.\n>\n>\n>\n> On Tue, Jul 14, 2015 at 12:07 PM, Riccardo Spagni <ric at spagni.net> wrote:\n>\n>>\n>>\n>>> In terms of comparisons to OpenAlias, I think there are a lot of\n>>> similarities, but a few differences.  First the similarities:\n>>>\n>>>\n>>> 1> We both use DNSSEC.\n>>>\n>>> 2> We both have the option of storing the address directly in the DNS\n>>> record.\n>>>\n>>>\n>>> Differences:\n>>>\n>>> 1> We do not use DNSCrypt.  I understand why you chose to, but we were\n>>> concerned about broad interoperability and easy broad distribution of\n>>> hosting, so decided not to use it.  We have other ways of achieving\n>>> privacy, using HD Wallets and Payment Requests.\n>>>\n>>\n>> And this is the part where you guys look really, really incompetent (and\n>> I don't mean that in a terribly demeaning way, it's just that you're in a\n>> space where you want to be a domain expert, not make a series of\n>> embarrassing and public faux pas).\n>>\n>>\n>> I appreciate the thought :)  I think where we differ is on where we\n> believe the trade offs should be on perceived privacy versus censorship\n> resistance and centralization.\n>\n>\n> By having a limited number of proxies people need to go through to easily\n> implement, be it the 4 you recommend, or 53, you actually have a very\n> limited number of actors for an authority or hacker to go to in order to be\n> able to install/force logging, or censorship.  This very centralization\n> forces us back to a model where we need to trust a very small number of\n> actors in order for the system to operate as designed.  This, to me,\n> appears to be the opposite of the goals of the bitcoin ecosystem.  To\n> ensure this point is clear, I strongly believe recommending people focus\n> all lookups through 4 centralized \"proxies\" is a bad idea and counter to\n> bitcoin's ideals.\n>\n>\n> The fact that hackers or state actors need to corrupt only a small number\n> of servers/services in order to gain global visibility into all queries, I\n> believe, breaks any perceived privacy gains from using DNSCrypt.  A very\n> small number of hacks or subpoenas and everyone's records are fair game in\n> one place.\n>\n>\n> For the highly privacy conscious they can, today do their DNS lookups over\n> a non logging VPN connection without forcing everyone else through a\n> handful of centralized servers.  Or they can use DNSCrypt optionally\n> themselves.  All of our tools have always been open source and folks can\n> modify them for their own desired uses, or submit pull requests with their\n> own ideas.\n>\n> We'd love to hear others thoughts on this.  While I believe that for now\n> the centralization trade offs required to use DNSCrypt today (via a limited\n> number of proxies) outweigh any perceived privacy benefits it provides, we\n> are always open to what others in the community believe and have made\n> modifications to how things work before as a result of feedback from\n> industry participants.\n>\n>\n>\n>\n>\n>\n>>\n>>\n>>> 2> We have the option of storing a URL rather than just a wallet\n>>> address in the TXT record.  This allows a second level lookup against\n>>> the URL to get back a unique HD Wallet address or Payment Request each\n>>> time, further protecting user privacy and security.  Using Wallet\n>>> Names with Payment Requests allows for the user experience of typing\n>>> in an easy to remember name and getting back the \"green lock\" and who\n>>> the validated recipient is.  This also provides an auto audit of the\n>>> end to end DNS SEC process, in the case the path were somehow\n>>> compromised, the signature on the payment request can provide an\n>>> additional check.\n>>>\n>>\n>> OpenAlias supports this as well, except it does it better by allowing the\n>> KV pairs to also contain a TLSA record before the request, which\n>> effectively makes it a DANE-secured interaction. Your interaction requires\n>> the trusting of multiple CAs, which is an inherent weakness.\n>>\n>\n> I think DANE is a great idea.  We were just discussing that with Andreas\n> S., and are currently looking at whether we want to add this as optional\n> versus mandatory, based on how widely available DANE is for folks using\n> services like Cloudflare, Akamai, etc for their DNS, which many providers\n> in the space today are.\n>\n> Of course, the security conscious could setup DANE on the URL we use AS\n> IS.  There is no need to create a special kv pair for this as is done in\n> OpenAlias.  As you know, DNSSEC and HTTPS support this today out of the box.\n>\n> The CA validation, in our case, is an ADDITIONAL signature based\n> validation to the DNSSEC chain, not a replacement for it.\n>\n>\n>  [CONTINUED]\n>\n>\n\n\n-- \n\nJustin W. Newton\nFounder/CEO\nNetKi, Inc.\n\njustin at netki.com\n+1.818.261.4248\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/56745b7b/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PastedGraphic-1.tiff\nType: image/tiff\nSize: 10972 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/56745b7b/attachment.tiff>"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-17T01:01:20",
                "message_text_only": "[continued]\n\n\n\n> 3> We use a 2 tier lookup format.  The first lookup returns a list of\n>> currencies or payment types supported by the Wallet Name.  The second\n>> lookup goes to a record specific to that currency type to get the\n>> address to go to.  We believe this to be a more scalable solution in a\n>> world where someone can have both multiple digital currency types, but\n>> then also multiple types of colored coins, and wants a simple way to\n>> share a single name for all of those different addresses.  This allows\n>> the wallet to do the work behind the scene of choosing the currency it\n>> wants to send, and automatically getting back the right address to\n>> send to, without the user having to do anything different.\n>>\n>\n> We do the same thing, except in a single call. Here's an example of a\n> record that has both XMR and BTC addresses:\n> https://api.openalias.org/donate.getmonero.org?view=full (here are the\n> DNS records for that:\n> http://mxtoolbox.com/SuperTool.aspx?action=txt%3adonate.getmonero.org&run=toolpage\n> )\n>\n\n\nWe looked at doing this in a single lookup as you did.  With one or two\ncurrencies this can be potentially more efficient.  As the number of\nsupported currencies and addresses under a single name grows, however, this\nsolution becomes potentially more problematic.  Please follow the use cases\nbelow:\n\nUse case 1:  Wallet Name = \"bob.foo.bar\" or OpenAlias = \"bob.foo.bar\"\n\nThe only currency supported is bitcoin, and there are no colored coin\nformats supported.\n\nOpenAlias case:\n\n1 packet lookup to \"bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\n\nWallet Name case:\n\n1 packet lookup to \"_wallet.bob.foo.bar\"\n1 packet response with supported address types\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 4 packets\n\nWallet Name Case 1a:\n\nThe wallet doing the lookup knows it wants bitcoin, so it skips the\nsupported addresses lookup\n\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\nIn this use case we might create more traffic, but it could also be reduced\nby doing smart lookups.\n\n\nUse case 2:  Wallet Name = \"bob.foo.bar\" or OpenAlias = \"bob.foo.bar\"\n\nMany currencies and colored coin addresses are supported under the same\nname, lets say 100.  When you count different currencies and colored coin\ntypes, it could easily be hundreds, or over a thousand.\n\n\nOpenAlias case:\n\n1 packet lookup to \"bob.foo.bar\"\n100 packet responses with various addresses\n\n= 101 packets\n\n\nWallet Name case:\n\n1 packet lookup to \"_wallet.bob.foo.bar\"\n1 packet response with supported address types\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 4 packets\n\nWallet Name Case 2a:\n\nThe wallet doing the lookup knows it wants bitcoin, so it skips the\nsupported addresses lookup\n\n1 packet lookup to \"_btc._wallet.bob.foo.bar\"\n1 packet response with bitcoin address\n\n= 2 packets\n\n\nWhile you may end doing \"less lookups\" under Open Alias, as it scales, you\nend up causing a significant amount of extra, unnecessary traffic.\n\nIn addition to the obvious impact of being orders of magnitude more\nwasteful than necessary, it also creates privacy \"leakage\" by returning\nsomeone 100 different addresses when they only asked for one.\n\nFinally, because a single packet UDP transaction for a DNS lookup can\ncreate possibly hundreds of packets in response, the service can\nessentially become an amplifier for DDoS attacks.  (If I spoof the source\naddress of my target with a query to a lookup that issues hundreds of\npackets in response to one packet, and I can have a real impact :( )\n\n\n\n\n>\n>\n>> 4> We mandate DNSSEC while you make it optional.  We did this because\n>> we believe giving the user the option of NOT using DNSSEC is like\n>> letting them order a car with no brakes.  We weren't sure how we would\n>> explain to them why their money was gone when they really didn't\n>> understand the risks they were taking up front. We had a lot of\n>> discussion about it before coming to the decision we did, and I can\n>> see why you went the other way, although I do believe we made the\n>> right choice.\n>>\n>\n> With OpenAlias a DNSSEC fail is a soft fail, and the user has to confirm\n> the address. The reasons are threefold:\n>\n> 1. At the moment only 83.5% of the TLDs are signed [2]. The unsigned ones\n> include some biggies like .sg, .za, and .to\n>\n\nI think this is a good point, and one we weighed.  When we were making our\noriginal decisions.  Given the importance of ensuring that the lookups\nreturn the correct value, and the known vulnerabilities in DNS without\nDNSSEC, coupled with the fact that ICANN has mandated all zones and\nregistries move to DNSSEC, our belief was and is that it was worth the\ntrade off that there were cases where existing domains would not work.\n\n\nIt is important to note, that ICANN has \"required\" for some years that\nregistrars and registries support DNSSEC on the domains they register.  I\npersonally believe we shouldn't delay use of DNSSEC until their registries\nhad come up to current required Internet standards.  (Here are ICANN's\nregistrar requirements showing the DNSSEC requirement, btw:\nhttps://www.icann.org/resources/pages/approved-with-specs-2013-09-17-en#operation\n)\n\nThat said, what do others in the industry think?  We are basing our current\nstandard on our believed best practices, and defaulted to \"first, lose no\nmoney\", given the irreversibility of bitcoin.\n\n\n\n> 2. Even if the zone *is* signed, DNSSEC deployment is hard. Unmanaged\n> DNSSEC deployment is out of scope for probably 99.9% of users, even the\n> usually-technically-ok Bitcoin crowd. Managed DNSSEC is available, but is\n> quite pricey. UltraDNS, Dyn, and GoDaddy (ikr?) are the three big\n> providers, and of those three only GoDaddy has a consumer-affordable\n> product.\n>\n\n\nI think \"DNSSEC is hard\" is a bit of a boogey man that's not really true.\nWe are working on developing registrar by registrar instructions of how to\ndo this, and we have typically found that if you are setting up DNS by\nyourself, adding DNSSEC doesn't take a lot of additional time, maybe an\nhour or so depending on your registrar.\n\nThis known concern, however, is why when we launched our product (based on\nour standard record formats) that we wanted to launch it with a variety of\noptions for people.\n\nIn addition to these options there are also other hosting providers, and\ncertain registrars that will allow you to setup DNSSEC on their DNS\nplatforms.\n\n\n1> One could choose the \"0 click\" installation process of just getting a\nfree Wallet Name underneath their provider's name space.  This option has\nbeen free to end users in all cases so far, and I expect it always will be\nin the future (although that is up to the partner, so some may choose to\ncharge).\n\n2> If they wanted some provider independence, but someone to manage things\nfor them, they can register a name through us and manage everything via our\nweb interface.  This can cost them as little as $1.95/yr through us.\n\n3> Finally, for the \"do it yourselfer\" who wants full control themselves,\nthey can simply follow the formats on our developer page and do the whole\nthing themselves.  If they do this by registering their own \".bit\" this\nwill cost them less than $0.25.  If they have an existing domain name, even\nless.\n\n\n\n\n\n\n>\n> 3. ThomasV and I have done a stack of testing behind residential and\n> commercial routers where DNSSEC simply fails (eg. the router runs a really\n> outdated DNS server that doesn't provide RRSIGs in its response, or the ISP\n> doesn't care about DNSSEC). Unsurprisingly, this can be fixed by...you\n> guessed it...doing the lookup via DNSCrypt.\n>\n\nThat's some interesting data, and runs counter to the research of the IETF\nDNS working group.  If you are willing to share your data, I can put you in\ntouch with the appropriate folks there to share your research.  I'd also\nlove to see it!\n\n\n\n>\n> Until we are closer to the bulk of all TLDs being signed, and DNSSEC\n> becomes at least a little more ubiquitous, we can't lock out huge portions\n> of the Internet, because then we're not really providing a useful and\n> usable solution. All we can is make it more difficult to pay an unverified\n> domain.\n>\n> Of course, if your aim is to force people to use you as a domain\n> registrar, then it makes total sense why you'd lock people out;)\n>\n\nI'd argue that we aren't locking \"huge portions\" of the Internet.  You are\ncorrect that about 15% of TLD's are not yet signed, even though they were\nrequired to be by ICANN.\n\nAs I said above, I believe the requirement to not lose money and the fact\nthat other options are available for those running on TLD's that are out of\ncompliance, is worth the trade off that some existing names won't work\nuntil their TLD's come into compliance with current Internet standards.\n\nAnd, as we covered above, we don't force anyone to use our registrar, nor\nany of our services in order for Wallet Names to work for them.  We never\nhave.  It's just not who we are.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/7ccc45ce/attachment-0001.html>"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-17T01:02:00",
                "message_text_only": "[CONTINUED]\n\n>\n> Additionally, we just released another open source API server to help\n>> with the \"other half\" of the lookup problem.  Its in its infancy, and\n>> we are certainly taking feedback on it at this time.  It is called\n>> Addressimo <https://github.com/netkicorp/addressimo> and will serve\n>> unique HD Wallet addresses or Payment Requests for every lookup, thus\n>> allowing a user to have a private, secure way to share a Wallet Name\n>> that can be used to send them any digital currency.\n>>\n>\n> Oh snap...https://github.com/openalias/openalias-api\n>\n\nThese are actually vastly different pieces of software, at least from the\ndescription, and a first read of the code.  My understanding is the\nsoftware you linked to here basically takes the DNS work out of lookups for\npeople, as we released: https://github.com/netkicorp/wns-api-server  Its\nour Wallet Name Lookup server.\n\nAddressimo, as I described above, provides a different purpose.  Its a way\nfor service providers, mobile wallet providers or end users to have an\nonline server that can serve unique wallet addresses ala HD Wallets (BIP32)\nor signed Payment Requests (BIP0070).  This allows for an easy way to\nincrease security and privacy by serving a unique address for every\nrequest, and/or sign the address (and other optional data) with an X509\nprivate key to prove ownership of the address in a way independent of and\nsupplemental to the DNSSEC chain (also can be DANE for yet another layer of\nsecurity).  It also supports offline signing of the Payment Requests so the\nserver doesn't have to have access to a private key, or need to be trusted.\n\n\n\n\n\n>\n>\n> In any case, I'd much rather we had one effort going forward than\n>> multiples, so let's talk!\n>>\n>\n> I agree, and you guys are in an ideal position to change to supporting the\n> OpenAlias standard (and enhancing it) without skipping a beat. We would\n> definitely appreciate and take your input and efforts, and that would make\n> OpenAlias v2 (oa2:) a standard built out in conjunction with Netki.\n>\n> Not only do you get Electrum support without lifting a finger, but it will\n> go a long way to repairing your relationship with the open-source community\n> at large, several proponents of which have taken great umbrage at what you\n> were previously pushing as a closed-source, centralised system.\n>\n>\nI'm a little confused by these closing statements.  Our system has, from\nthe beginning been open in terms of the fact that anyone could both serve\nnames or do lookups without ever touching our servers, talking to us, or us\neven knowing that they did it or that they even exist.  Our system has\nNEVER been one where folks were required to use us for any portion of the\nservice, and from our first beta product launch our open source tools did\nall lookups against DNS records and the blockchain, never any proprietary\nservers or interfaces on our side.\n\nIn terms of the format itself being open, we have already made several\nextensions and modifications to it as a result of conversations with\nindustry participants in order to ensure that what we are building meets\nthe needs of the community at large.  We will gladly continue to do so, it\nis how we ensure we are building something everyone needs!\n\nI'd love to know where you got information that we were in some way a\nclosed and centralized system so that we can have an opportunity to clarify\nthat misconception.\n\n\nIn terms of finding a common standard, as I said, I am thrilled to have the\nconversations, but there are some places, highlighted above, that would\ncause me to hesitate to \"just implement\" the Open Alias standard.  I can\nalso see places where bringing the formats together to one standard could\nhave strong benefits, for example:\n\nI think formatting the record as a key value pair with versioning has\nmerit, and would love to move it in to what we are doing (and likely will).\n\nOn the other side, I think the two level lookup provides a lot of value at\nscale over trying to send back a bunch of text records when only a small\nportion of the data is used.\n\nI'd love to hear thoughts from others in the community on mandating DNSSEC\nand thoughts on DNSCrypt.  I have a strong opinion on both of those but\nwould love to engage in thoughtful dialogue around what path best suits the\nneed of the community.\n\n\nLooking forward to the discussion!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/63581188/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-23T09:48:08",
                "message_text_only": "Le 17/07/2015 03:01, Justin Newton via bitcoin-dev a \u00e9crit :\n>> 3> We use a 2 tier lookup format. [...]\n>>\n>> We do the same thing, except in a single call. [...]\n> \n> We looked at doing this in a single lookup as you did.  With one or two\n> currencies this can be potentially more efficient.  As the number of\n> supported currencies and addresses under a single name grows, however, this\n> solution becomes potentially more problematic. [...]\n\nHi Justin,\n\nYour lookup solution is indeed more efficient than OpenAlias, and more\nrobust to DoS. However, that is not because you use a two-tier lookup.\n\nIndeed, instead of having the following records:\n_wallet.sample = \"btc ltc\"\n_btc._wallet.sample = \"mybitcoinadress\"\n\nyou could simply have:\n_wallet.sample = \"btc ltc\"\n_btc.sample = \"mybitcoinaddress\"\n\nIn practice, a wallet supporting only Bitcoin will skip the currencies\nlookup in both cases, and go directly for the _btc record.\n\nOne benefit of having an intermediate \"_wallet\" level is to allow zone\ndelegation. Is that the reason for that choice?\n\nThomas"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-23T13:07:37",
                "message_text_only": "Le 23/07/2015 11:48, Thomas Voegtlin via bitcoin-dev a \u00e9crit :\n> \n> One benefit of having an intermediate \"_wallet\" level is to allow zone\n> delegation. Is that the reason for that choice?\n> \n\nThinking about it, I think that it would be better to separate those two\noperations: on one hand, the listing of TXT records under a name, and on\nthe other hand, the possibility to use Zone Delegation.\n\nFor example, let us use the \"_oa2\" name (Openalias version 2) when we\nneed to introduce an intermediate level, and \"_oa2_keys\" for key listing.\n\nHere is an example:\n\n_oa2_keys.sample      3600 IN TXT \"btc ltc email fullname\"\n_btc.sample           3600 IN TXT \"bitcoinaddress\"\n_ltc.sample           3600 IN TXT \"litecoinaddress\"\n_btc.sample           3600 IN TXT \"otherbitcoinaddress\"\n_email.sample         3600 IN TXT \"john.smith at googlemail.com\"\n_fullname.sample      3600 IN TXT \"John Smith\"\n\nZone Delegation: Let us assume example.com wants to delegate all its\nBitcoin aliases to Netki. We introduce an intermediate level, with the\n\"_oa2\" name. In the alias, this string is translated as \"@\"\n\njohn._oa2.example.com        <--  will be looked up as john at example.com\n_btc.john._oa2.example.com   <--  bitcoin address of john at example.com"
            },
            {
                "author": "Justin Newton",
                "date": "2015-07-27T21:51:51",
                "message_text_only": "Thomas,\n  I think this is interesting and has some good thoughts behind it.  For\nclarity, are you recommending that the \"_oa2\" portion of the domain name be\n\"hidden\" as a way to make it easier to delegate just wallet names from a\nzone?\n\n\n\nOn Thu, Jul 23, 2015 at 6:07 AM, Thomas Voegtlin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Le 23/07/2015 11:48, Thomas Voegtlin via bitcoin-dev a \u00e9crit :\n> >\n> > One benefit of having an intermediate \"_wallet\" level is to allow zone\n> > delegation. Is that the reason for that choice?\n> >\n>\n> Thinking about it, I think that it would be better to separate those two\n> operations: on one hand, the listing of TXT records under a name, and on\n> the other hand, the possibility to use Zone Delegation.\n>\n> For example, let us use the \"_oa2\" name (Openalias version 2) when we\n> need to introduce an intermediate level, and \"_oa2_keys\" for key listing.\n>\n> Here is an example:\n>\n> _oa2_keys.sample      3600 IN TXT \"btc ltc email fullname\"\n> _btc.sample           3600 IN TXT \"bitcoinaddress\"\n> _ltc.sample           3600 IN TXT \"litecoinaddress\"\n> _btc.sample           3600 IN TXT \"otherbitcoinaddress\"\n> _email.sample         3600 IN TXT \"john.smith at googlemail.com\"\n> _fullname.sample      3600 IN TXT \"John Smith\"\n>\n> Zone Delegation: Let us assume example.com wants to delegate all its\n> Bitcoin aliases to Netki. We introduce an intermediate level, with the\n> \"_oa2\" name. In the alias, this string is translated as \"@\"\n>\n> john._oa2.example.com        <--  will be looked up as john at example.com\n> _btc.john._oa2.example.com   <--  bitcoin address of john at example.com\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \n\nJustin W. Newton\nFounder/CEO\nNetKi, Inc.\n\njustin at netki.com\n+1.818.261.4248\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/9f2e9f77/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PastedGraphic-1.tiff\nType: image/tiff\nSize: 10972 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/9f2e9f77/attachment-0001.tiff>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-31T20:34:55",
                "message_text_only": "Le 27/07/2015 23:51, Justin Newton via bitcoin-dev a \u00e9crit :\n> Thomas,\n>   I think this is interesting and has some good thoughts behind it.  For\n> clarity, are you recommending that the \"_oa2\" portion of the domain name be\n> \"hidden\" as a way to make it easier to delegate just wallet names from a\n> zone?\n> \n\nI don't think you can completely \"hide\" it, because you need to know\nwhere the _oa2 is in the name, in order to perform requests. In my\nproposal it was denoted by a @ character in the alias:\n\nx at y.z -> x._oa2.y.w"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-16T16:18:37",
                "message_text_only": "> I appreciate the thought :)  I think where we differ is on where we\n> believe the trade offs should be on perceived privacy versus censorship\n> resistance and centralization.\n>\n>\n> By having a limited number of proxies people need to go through to easily\n> implement, be it the 4 you recommend, or 53, you actually have a very\n> limited number of actors for an authority or hacker to go to in order to be\n> able to install/force logging, or censorship.  This very centralization\n> forces us back to a model where we need to trust a very small number of\n> actors in order for the system to operate as designed.  This, to me,\n> appears to be the opposite of the goals of the bitcoin ecosystem.  To\n> ensure this point is clear, I strongly believe recommending people focus\n> all lookups through 4 centralized \"proxies\" is a bad idea and counter to\n> bitcoin's ideals.\n>\n>\n> The fact that hackers or state actors need to corrupt only a small number\n> of servers/services in order to gain global visibility into all queries, I\n> believe, breaks any perceived privacy gains from using DNSCrypt.  A very\n> small number of hacks or subpoenas and everyone's records are fair game in\n> one place.\n>\n\nYou're misstating (or not understanding) the attack surface.\n\nState-level attackers won't compromise 50+ DNSCrypt servers, they can get\nthe information on lookups a lot more trivially. Censorship resistance and\nprotection from state-level attackers comes from the decentralised side of\nOpenAlias (ie. Namecoin resolution, preferably done using a local copy of\nthe NMC blockchain). Since Netki supports Namecoin resolution too there is\nno need to worry about protecting end users from that.\n\nThere is, however, a need to protect users from man-in-the-middle attacks\nwhere the data is not modified en-route, but it is sniffed. Who you pay in\na financial transaction is, and should be, privileged information between\nyourself and that person. By encouraging open DNS lookups you're\neffectively hanging that information out for all to see.\n\nIt is true that there are only 4 DNSCrypt servers we are comfortable\nrecommending. It is also true that there were, at one stage, only 4\nElectrum servers. There were also only 4 Bitcoin nodes. As something grows\nand becomes more useful and usable the number of voluntary participants\nbecomes much greater, and we will provide the necessary tools to enable\nthese volunteers.\n\nSo in a world where tens of thousands of Bitcoiners are using an aliasing\nstandard (which, in and of itself, is a convenience service anyway), and\nhundreds of individuals and companies are hosting DNSCrypt resolvers, is it\neven a valid argument to harp on the number of \"proxies\"? Thus it is not\nworth talking about today. It is definitely worth discussing in future if\nthe number of DNSCrypt resolvers doesn't increase, but that is a different\ndiscussion for a different time.\n\n\n> For the highly privacy conscious they can, today do their DNS lookups over\n> a non logging VPN connection without forcing everyone else through a\n> handful of centralized servers.  Or they can use DNSCrypt optionally\n> themselves.  All of our tools have always been open source and folks can\n> modify them for their own desired uses, or submit pull requests with their\n> own ideas.\n>\n\nEveryone should be highly privacy conscious when it comes to financial\ntransactions, and it would be unconscionable of both you and I not to\ndefend end-user privacy.\n\nWe'd love to hear others thoughts on this.  While I believe that for now\n> the centralization trade offs required to use DNSCrypt today (via a limited\n> number of proxies) outweigh any perceived privacy benefits it provides, we\n> are always open to what others in the community believe and have made\n> modifications to how things work before as a result of feedback from\n> industry participants.\n>\n\nIt's important to remember that the \"paranoid\" won't use an aliasing\nservice, or at best will use a local Namecoin blockchain for that purpose.\nThis is a convenience service to provide general and broad appeal for the\nnon-technical, and those are the very people that need to be protected from\nnosey neighbours / workmates / ISPs. Privacy is not only (or even at all)\nabout protecting people buying drugs on a darknet market, it is about\ndefending personal liberties.\n\nI think DANE is a great idea.  We were just discussing that with Andreas\n> S., and are currently looking at whether we want to add this as optional\n> versus mandatory, based on how widely available DANE is for folks using\n> services like Cloudflare, Akamai, etc for their DNS, which many providers\n> in the space today are.\n>\n> Of course, the security conscious could setup DANE on the URL we use AS\n> IS.  There is no need to create a special kv pair for this as is done in\n> OpenAlias.  As you know, DNSSEC and HTTPS support this today out of the box.\n>\n\nEmbedding the TLSA record in a KV pair just means that pinning takes one\nless step.\n\n\n> The CA validation, in our case, is an ADDITIONAL signature based\n> validation to the DNSSEC chain, not a replacement for it.\n>\n\nWithout DANE it's a weakness. It's trusting an additional CA (over and\nabove the domain owner), when we know that this is - and has been - an\nissue in the past. Were it not an issue DANE (or certificate pinning in\ngeneral) would not have to exist.\n\n\n> We looked at doing this in a single lookup as you did.  With one or two\n> currencies this can be potentially more efficient.  As the number of\n> supported currencies and addresses under a single name grows, however, this\n> solution becomes potentially more problematic.  Please follow the use cases\n> below:\n>\n\n(snipped quote for brevity)\n\nMany currencies and colored coin addresses are supported under the same\n> name, lets say 100.  When you count different currencies and colored coin\n> types, it could easily be hundreds, or over a thousand.\n>\n\nCoinmarketcap lists 643 currencies and assets, of which only 131 have had\nmore than $500 in trade volume in the last 24 hours (and only 8 have done\nover $100 000 in volume). ShapeShift only lists 44 of those. I seriously\ndoubt that a convenience service such as aliasing will find great use\namongst every fly-by-night scamcoin that crops up, but that is an aside.\n\nWhile you may end doing \"less lookups\" under Open Alias, as it scales, you\n> end up causing a significant amount of extra, unnecessary traffic.\n>\n\n\"Scale\" is a misnomer. Someone trying to collect every single active\ncryptocurrency and house them all under a single sub-domain is an outlier,\nnot a problem to be faced at scale. I do not think we will see a large\nscale movement to \"collect\" all the various cryptocurrency tokens, no\nmatter how worthless they are, and then subsequently setup aliases for them.\n\n\n> In addition to the obvious impact of being orders of magnitude more\n> wasteful than necessary, it also creates privacy \"leakage\" by returning\n> someone 100 different addresses when they only asked for one.\n>\n\nI'm not sure how this is any greater leakage than 100 individual requests\nfor the openly accessible data, especially since it would be encrypted if\nmade via DNSCrypt?\n\n\n> Finally, because a single packet UDP transaction for a DNS lookup can\n> create possibly hundreds of packets in response, the service can\n> essentially become an amplifier for DDoS attacks.  (If I spoof the source\n> address of my target with a query to a lookup that issues hundreds of\n> packets in response to one packet, and I can have a real impact :( )\n>\n\nNaughty naughty, you're doing that thing again where you're using a\nsmattering of expertise to appear knowledgeable about a subject.\n\nSo let's hypothetically say that an individual was crazy enough to have all\n643 of the Coinmarketcap currencies/assets aliased on a single sub-domain.\nThe OpenAlias example of a Monero address (with a recipient name) is 157\nbytes long, due to there being two public keys serialised in the address,\nplus the ~12 bytes of overhead per RR (the DNS wire format uses label\ncompression, so the FQDN wouldn't be repeated for each returned record).\nLet's call it 170 bytes. That makes the returned data just over 100kb.\n\nNow let's first address a couple of things, assuming that someone would be\nnuts enough to do this:\n\n1. This is way larger than the UDP packet maximum, and this would never\ncome back as a \"regular\" ol' DNS request (512 bytes max). This may seem\nbad, until you consider that DNSSEC responses are almost assured to exceed\n512 bytes (eg. an NXDOMAIN with NSEC3). The size of the response is big,\nbut that's hardly something to write home about.\n\n2. If the DNS server supports RFC2671 (EDNS) then it would try and send it\nvia UDP, and as long as the client says it can receive such a huge response\nover UDP it'll come over the wire.\n\n3. However, because RFC2671 can result in a DNS amplification attack, it's\nbeen obsoleted by RFC6891 (EDNS0), which is pretty much ubiquitous for all\nresolvers that support DNSSEC (because of the very large DNSSEC responses,\nand the fact that DNSSEC resolvers want to avoid participation in an\namplification attack). EDNS0 mitigates amplification attacks.\n\n4. In the event that an EDNS0 response fails (eg. the client says it can't\naccept anything over, say, 4kb, which is quite common) then there's an\nautomatic and silent switch to DNS-over-TCP (RFC5966). DNS-over-TCP uses\nTFO (TCP Fast Open) to do an extremely fast handshake and passing a cookie\nto the client in the SYN-ACK, which can then be used for subsequent\nrequests, but data is still carried in the SYN. TFO mitigates amplification\nattacks.\n\nYou can't both be overly concerned about amplification attacks *and* use\nDNSSEC, which necessitates large records. And, at any rate, the issue with\namplification attacks *isn't* the size of the records (there are tons of\nrecords just under 4kb, like an ANY request against isc.org, that are far\nbetter suited to amplification attacks), it is the number of recursive open\nresolvers. There is improvement in this space, though, and many open\nrecursive resolvers have been fixed in recent years.\n\nIt is important to note, that ICANN has \"required\" for some years that\n> registrars and registries support DNSSEC on the domains they register.  I\n> personally believe we shouldn't delay use of DNSSEC until their registries\n> had come up to current required Internet standards.  (Here are ICANN's\n> registrar requirements showing the DNSSEC requirement, btw:\n> https://www.icann.org/resources/pages/approved-with-specs-2013-09-17-en#operation\n> )\n>\n\nDoesn't really matter what they require as long as there are zones that\nremain unsigned. Plus it's not like new .za / .sg / .to registrations\nmagically get DNSSEC, they're also out of luck.\n\n\n> That said, what do others in the industry think?  We are basing our\n> current standard on our believed best practices, and defaulted to \"first,\n> lose no money\", given the irreversibility of bitcoin.\n>\n\nOh, ok. \"First, lose no money, but it's ok if your ISP / neighbour /\ncolleague reports you to the cops because you sent a donation somewhere you\nshouldn't.\"\n\n\n> I think \"DNSSEC is hard\" is a bit of a boogey man that's not really true.\n> We are working on developing registrar by registrar instructions of how to\n> do this, and we have typically found that if you are setting up DNS by\n> yourself, adding DNSSEC doesn't take a lot of additional time, maybe an\n> hour or so depending on your registrar.\n>\n\nAdding the DS record to a domain is trivial, but to use DNSSEC with Gandi\nor GoDaddy (if you don't have their PremiumDNS product) you have to host\nyour own DNS server. Sorry, but that is a non-trivial task. Even worse: you\nneed to secure your private KSK and not keep it on the server, and if\nBitcoiners are anything to go by this won't happen.\n\nOh, and incidentally, ENOM/Namecheap doesn't have DNSSEC support yet.\n\nYou're literally layering complexity on top of a convenience service, and\nto what end?\n\nThis known concern, however, is why when we launched our product (based on\n> our standard record formats) that we wanted to launch it with a variety of\n> options for people.\n>\n\nThat's completely, 100% centralised. You're creating decentralisation\ntheatre by providing \"options\" that no ordinary person will use.\n\nThat's some interesting data, and runs counter to the research of the IETF\n> DNS working group.  If you are willing to share your data, I can put you in\n> touch with the appropriate folks there to share your research.  I'd also\n> love to see it!\n>\n\nI doubt that very much. See:\nhttp://stats.labs.apnic.net/dnssec/XA?c=XA&x=1&g=1&r=1&w=30\n\nAs can be seen, only ~14% of all DNS queries request DNSSEC validation.\nThat's very far from ubiquitous, and completely matches what Thomas and I\nfound in Berlin. Unsurprisingly, this stat is particularly bad given that\nit also shows that ~15% of all queries are being handled by Google's Public\nDNS, without which the stat would be much lower.\n\nI'd argue that we aren't locking \"huge portions\" of the Internet.  You are\n> correct that about 15% of TLD's are not yet signed, even though they were\n> required to be by ICANN.\n>\n\nFine, so we're just cutting Africa out, then?\nhttp://www.internetsociety.org/deploy360/wp-content/uploads/2015/06/cctlddnssec-2015-06-19.pdf\n\nEven beyond that, ICANN's page listing DNSSEC-capable registrars (last\nupdated December 2014) only lists only a handful:\nhttps://www.icann.org/resources/pages/deployment-2012-02-25-en\n\nAs I said above, I believe the requirement to not lose money and the fact\n> that other options are available for those running on TLD's that are out of\n> compliance, is worth the trade off that some existing names won't work\n> until their TLD's come into compliance with current Internet standards.\n>\n\nA soft fail doesn't magically let the money go. It warns users of the risk\nand asks them to verify the address by site. This could even be built out\nso that higher value transactions (say, anything over $1000) hard fails in\nthe absence of DNSSEC, and anything particularly high value (say, anything\nover $50 000) refuses to use an alias at all and requires an actual\ncryptocurrency address.\n\nI'm a little confused by these closing statements.  Our system has, from\n> the beginning been open in terms of the fact that anyone could both serve\n> names or do lookups without ever touching our servers, talking to us, or us\n> even knowing that they did it or that they even exist.  Our system has\n> NEVER been one where folks were required to use us for any portion of the\n> service, and from our first beta product launch our open source tools did\n> all lookups against DNS records and the blockchain, never any proprietary\n> servers or interfaces on our side.\n>\n\nNow you're just trolling.\n\nhttps://github.com/bitpay/copay/pull/2431/files\n\nWhich has this lovely line in it:\nhttps://github.com/wdawg33/copay/blob/be6c3e80ab7601d245b186f7802d7050992eb1f0/config.js#L98\n\nSo you provide an open standard that uses DNS...but then you wanted to\nforce CoPay users to use your centralised API?\n\nI'd love to know where you got information that we were in some way a\n> closed and centralized system so that we can have an opportunity to clarify\n> that misconception.\n>\n\nIn December 2014 your website had no \"developer\" section (curl -s\nhttps://web.archive.org/web/20141221141023/https://netki.com/ | grep\n\"Developers\")\n\nThe first time that section got scraped was the end of April:\nhttps://web.archive.org/web/20150428231016/https://www.netki.com/partials/developers.html\n\nEven in its current form your website makes no mention of alternatives or\noptions for those wishing to secure an alias. End users are undoubtedly\nleft with the distinct impression that they can only get one by paying you.\n\nRiccardo\n\nPS. your mail won't go to the list if you CC the list address, you may want\nto resend it\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/259e73fd/attachment-0001.html>"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-17T08:00:13",
                "message_text_only": "> I appreciate the thought :)  I think where we differ is on where we believe the\n> trade offs should be on perceived privacy versus censorship resistance and\n> centralization.\n>\n> By having a limited number of proxies people need to go through to easily\n> implement, be it the 4 you recommend, or 53, you actually have a very limited\n> number of actors for an authority or hacker to go to in order to be able to\n> install/force logging, or censorship.  This very centralization forces us back\n> to a model where we need to trust a very small number of actors in order for\n> the system to operate as designed.  This, to me, appears to be the opposite of\n> the goals of the bitcoin ecosystem.  To ensure this point is clear, I strongly\n> believe recommending people focus all lookups through 4 centralized \"proxies\"\n> is a bad idea and counter to bitcoin's ideals.\n>\n> The fact that hackers or state actors need to corrupt only a small number of\n> servers/services in order to gain global visibility into all queries, I\n> believe, breaks any perceived privacy gains from using DNSCrypt.  A very small\n> number of hacks or subpoenas and everyone's records are fair game in one place.\n\nYou're misstating (or not understanding) the attack surface.\n\nState-level attackers won't compromise 50+ DNSCrypt servers, they can get the\ninformation on lookups a lot more trivially. Censorship resistance and\nprotection from state-level attackers comes from the decentralised side of\nOpenAlias (ie. Namecoin resolution, preferably done using a local copy of the\nNMC blockchain). Since Netki supports Namecoin resolution too there is no need\nto worry about protecting end users from that.\n\nThere is, however, a need to protect users from man-in-the-middle attacks where\nthe data is not modified en-route, but it is sniffed. Who you pay in a financial\ntransaction is, and should be, privileged information between yourself and that\nperson. By encouraging open DNS lookups you're effectively hanging that\ninformation out for all to see.\n\nIt is true that there are only 4 DNSCrypt servers we are comfortable\nrecommending. It is also true that there were, at one stage, only 4 Electrum\nservers. There were also only 4 Bitcoin nodes. As something grows and becomes\nmore useful and usable the number of voluntary participants becomes much\ngreater, and we will provide the necessary tools to enable these volunteers.\n\nSo in a world where tens of thousands of Bitcoiners are using an aliasing\nstandard (which, in and of itself, is a convenience service anyway), and\nhundreds of individuals and companies are hosting DNSCrypt resolvers, is it even\na valid argument to harp on the number of \"proxies\"? Thus it is not worth\ntalking about today. It is definitely worth discussing in future if the number\nof DNSCrypt resolvers doesn't increase, but that is a different discussion for a\ndifferent time.\n\n> For the highly privacy conscious they can, today do their DNS lookups over a\n> non logging VPN connection without forcing everyone else through a handful of\n> centralized servers.  Or they can use DNSCrypt optionally themselves.  All of\n> our tools have always been open source and folks can modify them for their own\n> desired uses, or submit pull requests with their own ideas.\n\nEveryone should be highly privacy conscious when it comes to financial\ntransactions, and it would be unconscionable of both you and I not to defend\nend-user privacy.\n\n> We'd love to hear others thoughts on this.  While I believe that for now the\n> centralization trade offs required to use DNSCrypt today (via a limited number\n> of proxies) outweigh any perceived privacy benefits it provides, we are always\n> open to what others in the community believe and have made modifications to how\n> things work before as a result of feedback from industry participants.\n\nIt's important to remember that the \"paranoid\" won't use an aliasing service, or\nat best will use a local Namecoin blockchain for that purpose. This is a\nconvenience service to provide general and broad appeal for the non-technical,\nand those are the very people that need to be protected from nosey neighbours /\nworkmates / ISPs. Privacy is not only (or even at all) about protecting people\nbuying drugs on a darknet market, it is about defending personal liberties.\n\n> I think DANE is a great idea.  We were just discussing that with Andreas S.,\n> and are currently looking at whether we want to add this as optional versus\n> mandatory, based on how widely available DANE is for folks using services like\n> Cloudflare, Akamai, etc for their DNS, which many providers in the space today\n> are.\n>\n> Of course, the security conscious could setup DANE on the URL we use AS IS.\n> There is no need to create a special kv pair for this as is done in OpenAlias.\n> As you know, DNSSEC and HTTPS support this today out of the box.\n\nEmbedding the TLSA record in a KV pair just means that pinning takes one less\nstep.\n\n> The CA validation, in our case, is an ADDITIONAL signature based validation to\n> the DNSSEC chain, not a replacement for it.\n\nWithout DANE it's a weakness. It's trusting an additional CA (over and above the\ndomain owner), when we know that this is - and has been - an issue in the past.\nWere it not an issue DANE (or certificate pinning in general) would not have to\nexist.\n\n> We looked at doing this in a single lookup as you did.  With one or two\n> currencies this can be potentially more efficient.  As the number of supported\n> currencies and addresses under a single name grows, however, this solution\n> becomes potentially more problematic.  Please follow the use cases below:\n\n(snipped quote for brevity)\n\n> Many currencies and colored coin addresses are supported under the same name,\n> lets say 100.  When you count different currencies and colored coin types, it\n> could easily be hundreds, or over a thousand.\n\nCoinmarketcap lists 643 currencies and assets, of which only 131 have had more\nthan $500 in trade volume in the last 24 hours (and only 8 have done over $100\n000 in volume). ShapeShift only lists 44 of those. I seriously doubt that a\nconvenience service such as aliasing will find great use amongst every\nfly-by-night scamcoin that crops up, but that is an aside.\n\n> While you may end doing \"less lookups\" under Open Alias, as it scales, you end\n> up causing a significant amount of extra, unnecessary traffic.\n\n\"Scale\" is a misnomer. Someone trying to collect every single active\ncryptocurrency and house them all under a single sub-domain is an outlier, not a\nproblem to be faced at scale. I do not think we will see a large scale movement\nto \"collect\" all the various cryptocurrency tokens, no matter how worthless they\nare, and then subsequently setup aliases for them.\n\n> In addition to the obvious impact of being orders of magnitude more wasteful\n> than necessary, it also creates privacy \"leakage\" by returning someone 100\n> different addresses when they only asked for one.\n\nI'm not sure how this is any greater leakage than 100 individual requests for\nthe openly accessible data, especially since it would be encrypted if made via\nDNSCrypt?\n\n> Finally, because a single packet UDP transaction for a DNS lookup can create\n> possibly hundreds of packets in response, the service can essentially become an\n> amplifier for DDoS attacks.  (If I spoof the source address of my target with a\n> query to a lookup that issues hundreds of packets in response to one packet,\n> and I can have a real impact :( )\n\nNaughty naughty, you're doing that thing again where you're using a smattering\nof expertise to appear knowledgeable about a subject.\n\nSo let's hypothetically say that an individual was crazy enough to have all 643\nof the Coinmarketcap currencies/assets aliased on a single sub-domain. The\nOpenAlias example of a Monero address (with a recipient name) is 157 bytes long,\ndue to there being two public keys serialised in the address, plus the ~12 bytes\nof overhead per RR (the DNS wire format uses label compression, so the FQDN\nwouldn't be repeated for each returned record). Let's call it 170 bytes. That\nmakes the returned data just over 100kb.\n\nNow let's first address a couple of things, assuming that someone would be nuts\nenough to do this:\n\n1. This is way larger than the UDP packet maximum, and this would never come\nback as a \"regular\" ol' DNS request (512 bytes max). This may seem bad, until\nyou consider that DNSSEC responses are almost assured to exceed 512 bytes (eg.\nan NXDOMAIN with NSEC3). The size of the response is big, but that's hardly\nsomething to write home about.\n\n2. If the DNS server supports RFC2671 (EDNS) then it would try and send it via\nUDP, and as long as the client says it can receive such a huge response over UDP\nit'll come over the wire.\n\n3. However, because RFC2671 can result in a DNS amplification attack, it's been\nobsoleted by RFC6891 (EDNS0), which is pretty much ubiquitous for all resolvers\nthat support DNSSEC (because of the very large DNSSEC responses, and the fact\nthat DNSSEC resolvers want to avoid participation in an amplification attack).\nEDNS0 mitigates amplification attacks.\n\n4. In the event that an EDNS0 response fails (eg. the client says it can't\naccept anything over, say, 4kb, which is quite common) then there's an automatic\nand silent switch to DNS-over-TCP (RFC5966). DNS-over-TCP uses TFO (TCP Fast\nOpen) to do an extremely fast handshake and passing a cookie to the client in\nthe SYN-ACK, which can then be used for subsequent requests, but data is still\ncarried in the SYN. TFO mitigates amplification attacks.\n\nYou can't both be overly concerned about amplification attacks *and* use DNSSEC,\nwhich necessitates large records. And, at any rate, the issue with amplification\nattacks *isn't* the size of the records (there are tons of records just under\n4kb, like an ANY request against isc.org, that are far better suited to\namplification attacks), it is the number of recursive open resolvers. There is\nimprovement in this space, though, and many open recursive resolvers have been\nfixed in recent years.\n\n> It is important to note, that ICANN has \"required\" for some years that\n> registrars and registries support DNSSEC on the domains they register.  I\n> personally believe we shouldn't delay use of DNSSEC until their registries had\n> come up to current required Internet standards.  (Here are ICANN's registrar\n> requirements showing the DNSSEC requirement, btw:\n> https://www.icann.org/resources/pages/approved-with-specs-2013-09-17-en#\n> operation)\n\nDoesn't really matter what they require as long as there are zones that remain\nunsigned. Plus it's not like new .za / .sg / .to registrations magically get\nDNSSEC, they're also out of luck.\n\n> That said, what do others in the industry think?  We are basing our current\n> standard on our believed best practices, and defaulted to \"first, lose no\n> money\", given the irreversibility of bitcoin.\n\nOh, ok. \"First, lose no money, but it's ok if your ISP / neighbour / colleague\nreports you to the cops because you sent a donation somewhere you shouldn't.\"\n\n> I think \"DNSSEC is hard\" is a bit of a boogey man that's not really true.  We\n> are working on developing registrar by registrar instructions of how to do\n> this, and we have typically found that if you are setting up DNS by yourself,\n> adding DNSSEC doesn't take a lot of additional time, maybe an hour or so\n> depending on your registrar.\n\nAdding the DS record to a domain is trivial, but to use DNSSEC with Gandi or\nGoDaddy (if you don't have their PremiumDNS product) you have to host your own\nDNS server. Sorry, but that is a non-trivial task. Even worse: you need to\nsecure your private KSK and not keep it on the server, and if Bitcoiners are\nanything to go by this won't happen.\n\nOh, and incidentally, ENOM/Namecheap doesn't have DNSSEC support yet.\n\nYou're literally layering complexity on top of a convenience service, and to\nwhat end?\n\n> This known concern, however, is why when we launched our product (based on our\n> standard record formats) that we wanted to launch it with a variety of options\n> for people.\n\nThat's completely, 100% centralised. You're creating decentralisation theatre by\nproviding \"options\" that no ordinary person will use.\n\n> That's some interesting data, and runs counter to the research of the IETF DNS\n> working group.  If you are willing to share your data, I can put you in touch\n> with the appropriate folks there to share your research.  I'd also love to see\n> it!\n\nI doubt that very much. See:\nhttp://stats.labs.apnic.net/dnssec/XA?c=XA&x=1&g=1&r=1&w=30\n\nAs can be seen, only ~14% of all DNS queries request DNSSEC validation. That's\nvery far from ubiquitous, and completely matches what Thomas and I found in\nBerlin. Unsurprisingly, this stat is particularly bad given that it also shows\nthat ~15% of all queries are being handled by Google's Public DNS, without which\nthe stat would be much lower.\n\n> I'd argue that we aren't locking \"huge portions\" of the Internet.  You are\n> correct that about 15% of TLD's are not yet signed, even though they were\n> required to be by ICANN.\n\nFine, so we're just cutting Africa out, then?\nhttp://www.internetsociety.org/deploy360/wp-content/uploads/2015/06/cctlddnssec-\n2015-06-19.pdf\n\nEven beyond that, ICANN's page listing DNSSEC-capable registrars (last updated\nDecember 2014) only lists only a handful:\nhttps://www.icann.org/resources/pages/deployment-2012-02-25-en\n\n> As I said above, I believe the requirement to not lose money and the fact that\n> other options are available for those running on TLD's that are out of\n> compliance, is worth the trade off that some existing names won't work until\n> their TLD's come into compliance with current Internet standards.\n\nA soft fail doesn't magically let the money go. It warns users of the risk and\nasks them to verify the address by site. This could even be built out so that\nhigher value transactions (say, anything over $1000) hard fails in the absence\nof DNSSEC, and anything particularly high value (say, anything over $50 000)\nrefuses to use an alias at all and requires an actual cryptocurrency address.\n\n> I'm a little confused by these closing statements.  Our system has, from the\n> beginning been open in terms of the fact that anyone could both serve names or\n> do lookups without ever touching our servers, talking to us, or us even knowing\n> that they did it or that they even exist.  Our system has NEVER been one where\n> folks were required to use us for any portion of the service, and from our\n> first beta product launch our open source tools did all lookups against DNS\n> records and the blockchain, never any proprietary servers or interfaces on our\n> side.\n\nNow you're just trolling.\n\nhttps://github.com/bitpay/copay/pull/2431/files\n\nWhich has this lovely line in it:\nhttps://github.com/wdawg33/copay/blob/be6c3e80ab7601d245b186f7802d7050992eb1f0/\nconfig.js#L98\n\nSo you provide an open standard that uses DNS...but then you wanted to force\nCoPay users to use your centralised API?\n\n> I'd love to know where you got information that we were in some way a closed\n> and centralized system so that we can have an opportunity to clarify that\n> misconception.\n\nIn December 2014 your website had no \"developer\" section (curl -s\nhttps://web.archive.org/web/20141221141023/https://netki.com/ | grep\n\"Developers\")\n\nThe first time that section got scraped was the end of April:\nhttps://web.archive.org/web/20150428231016/https://www.netki.com/partials/\ndevelopers.html\n\nEven in its current form your website makes no mention of alternatives or\noptions for those wishing to secure an alias. End users are undoubtedly left\nwith the distinct impression that they can only get one by paying you.\n\nRiccardo"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-18T11:21:14",
                "message_text_only": "It is worth noting that DNS lookups can be done via Tor. In effect that\ngives you 1000+ proxies instead of 56 or 4. BitcoinJ already has code that\ncan do this.\n\nI would agree that it makes sense for proxying of DNS requests to be an\noptional part of the protocol. Wallet developers can then compete on\nprivacy vs robustness vs whatever other issues there may be.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150718/fac4423c/attachment.html>"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-18T11:40:58",
                "message_text_only": "> It is worth noting that DNS lookups can be done via Tor. In effect that\n> gives you 1000+ proxies instead of 56 or 4. BitcoinJ already has code that\n> can do this.\n\nAgreed, although I guess the bootstrap time for that is a little on\nthe high side, and maybe a little too chunky on mobile devices, but\nit's absolutely worthwhile as an option. DNSSEC is great because it\ndoesn't allow resolvers to lie, they can't even pretend that a record\ndoesn't exist.\n\n> I would agree that it makes sense for proxying of DNS requests to be an\n> optional part of the protocol. Wallet developers can then compete on privacy\n> vs robustness vs whatever other issues there may be.\n\nMy current thinking with Electrum (that ThomasV and I have bounced\naround) is to make the default policy DNSCrypt -> fallback to\nOpenAlias API pool (which can return DNSSEC data for verification) ->\nfallback to default resolver. Turning off DNSCrypt will then make it\ndefault resolver -> fallback to OpenAlias API pool. Turning off the\nAPI pool will make it default resolver or fail. Default resolver can\nbe set to OS resolver (default) or custom resolvers (eg. Google Public\nDNS).\n\nRiccardo"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-18T11:46:26",
                "message_text_only": ">\n> Agreed, although I guess the bootstrap time for that is a little on\n> the high side, and maybe a little too chunky on mobile devices\n\n\nWith warm Tor directory caches it's surprisingly fast - fast enough to be\nusable and I'm a notorious stickler for low latency UX. If you want to do\nLOTS of lookups so you can cross-check and merge their answers, that's\nslower of course.\n\nWith cold Tor caches it's indeed too slow. However, reaching \"tor by\ndefault\" is a part time hobby of the bitcoinj project for a while now and\nthere are plenty of ideas for how to make things fast enough. For instance,\nusing a cold cache whilst simultaneously refreshing it in the background,\ndoing nightly refreshes when charging, lengthening the expiry time, and the\nTor guys I believe want to implement directory differentials too which\nwould also help.\n\n\n\n> My current thinking with Electrum (that ThomasV and I have bounced\n> around) is to make the default policy DNSCrypt -> fallback to\n> OpenAlias API pool (which can return DNSSEC data for verification) ->\n> fallback to default resolver.\n\n\nThat seems reasonable for Electrum. I don't strongly care about these\nprotocols myself (and Justin knows this already), but whatever is decided\nshould give maximum freedom to wallet developers who disagree with you and\nwish to explore other tradeoffs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150718/22387d55/attachment.html>"
            },
            {
                "author": "Riccardo Spagni",
                "date": "2015-07-27T22:46:50",
                "message_text_only": "There are several reasons why we rejected doing it this way with OpenAlias:\n\n1. It adds complexity for the alias creator. This may seem\nunimportant, but the OpenAlias standard was created to empower people\nto create their own aliases as simply as possible, not to make it\noverly complex.\n\n2. It's harder to mess things up by dropping a sub-record; you either\nhave the complete, valid record, or you don't. With a \"tiered\" system\nyou can claim that you support a particular alias, but then lack all\nor some of the records for it.\n\n3. You retain both forward and backwards compatibility (no need to\nintroduce a new OA version unnecessarily), as you can have an \"old\" KV\npair and a \"new\" KV pair within the same record. The addition of KV\npairs doesn't require the application to know the new pairs exist,\nwhich makes it more extensible.\n\n4. Even better - since an application gets the whole record it can\nstart off with a minimum viable product that merely gets the address,\nand then at a later stage when support is added for additional\nmetadata *it already has the metadata* and can interpret it.\n\n5. You can still do DNS delegation (proper, SOA delegation) or you can\ndo delegation via a KV pair of some sort (say, a reroute= pair or\nsomething). In both cases delegation requires an additional lookup, so\nthere's nothing saved or improved with the two-tier system.\n\nIn this instance, as in many others, simplicity trumps complexity, and\nthe bonus is that the simpler solution is more extensible and\nflexible.\n\nRiccardo\n\n> Thinking about it, I think that it would be better to separate those two\n> operations: on one hand, the listing of TXT records under a name, and on\n> the other hand, the possibility to use Zone Delegation.\n>\n> For example, let us use the \"_oa2\" name (Openalias version 2) when we\n> need to introduce an intermediate level, and \"_oa2_keys\" for key listing.\n>\n> Here is an example:\n>\n> _oa2_keys.sample      3600 IN TXT \"btc ltc email fullname\"\n> _btc.sample           3600 IN TXT \"bitcoinaddress\"\n> _ltc.sample           3600 IN TXT \"litecoinaddress\"\n> _btc.sample           3600 IN TXT \"otherbitcoinaddress\"\n> _email.sample         3600 IN TXT \"john.smith at googlemail.com\"\n> _fullname.sample      3600 IN TXT \"John Smith\"\n>\n> Zone Delegation: Let us assume example.com wants to delegate all its\n> Bitcoin aliases to Netki. We introduce an intermediate level, with the\n> \"_oa2\" name. In the alias, this string is translated as \"@\"\n>\n> john._oa2.example.com        <--  will be looked up as john at example.com\n> _btc.john._oa2.example.com   <--  bitcoin address of john at example.com"
            }
        ],
        "thread_summary": {
            "title": "Proposal: extend bip70 with OpenAlias",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Thomas Voegtlin",
                "Mike Hearn",
                "Milly Bitcoin",
                "Justin Newton",
                "Riccardo Spagni"
            ],
            "messages_count": 33,
            "total_messages_chars_count": 137870
        }
    },
    {
        "title": "[bitcoin-dev]  Proposal: extend bip70 with OpenAlias",
        "thread_messages": [
            {
                "author": "Justin Newton",
                "date": "2015-07-14T17:29:02",
                "message_text_only": "[Sorry to break list threading, I joined the list to respond here, and\ndon't have the original message to respond to]\n\n[Copying message 9412 from thomasv at electrum.org]\n\nMike Hearn wrote:\n\n>* Hi Thomas,\n*> >* FYI there is a company called Netki is also working on a kind of DNSSEC\n*>* integration with BIP70,\n*>* there's a thread here about their efforts:\n*>* https://groups.google.com/forum/#!searchin/bitcoinj/dnssec/bitcoinj/QFAH1F2dEwE/36oWDwREEV4J\n<https://groups.google.com/forum/#!searchin/bitcoinj/dnssec/bitcoinj/QFAH1F2dEwE/36oWDwREEV4J>\n*\nHi Mike,\n\nThanks! I believe it is better to keep the current discussion on\nbitcoin-dev, though.\n\n>* If you would like to work on this, perhaps it's worth teaming up with them?\n*>* Obviously they plan to have an open spec and open source implementation.\n*>\nI would love to work with Netki. However, it's not clear to me what they\nare selling. OpenAlias is an open standard, not a company. In contrast,\nNetki have very long Terms of Service, that do not help understand what\npart of their solution is open-source, and what is the product. They\nsurely know about OpenAlias, it would be nice to hear what they think\nabout it.\n\n[FROM JUSTIN]\n\n\nHi there.  You are correct that we are a company providing a service,\nhowever, that service is also based on an open standard which we are\nproposing.  I'll be honest that we haven't done the greatest job in\npromoting the standard so far.  More coming soon on that front.  Any\nof the Open Source Wallet Name resolvers that we have created do\nlookups against the standard record formats, and not directly against\nour servers in any way.  Information on the record formats as well as\nlinks to the lookup API server and some early libraries can be found\nhere:  https://www.netki.com/#/developers and here:\nhttps://github.com/netkicorp\n\n\nTo break it down briefly, we have an open lookup standard based on\nboth the namecoin blockchain as well as traditional DNSSEC.  (You can\nchoose your own adventure of using namecoin based names or traditional\nICANN names).  We DO provide a service where we will register or host\nnames on your behalf. However if you follow the format and host them\nyourself, everything will work just fine, and our open source lookup\nserver and libraries will provide those results exactly the same as if\nthe names were hosted with us.  To that end, we have had conversations\nwith several companies in the space who intend to host their own\nnames, and we intend to work with them on the effort to ensure our\ndocumentation is sufficient to ensure they can successfully do so.\n\nIn terms of comparisons to OpenAlias, I think there are a lot of\nsimilarities, but a few differences.  First the similarities:\n\n\n1> We both use DNSSEC.\n\n2> We both have the option of storing the address directly in the DNS record.\n\n\nDifferences:\n\n1> We do not use DNSCrypt.  I understand why you chose to, but we were\nconcerned about broad interoperability and easy broad distribution of\nhosting, so decided not to use it.  We have other ways of achieving\nprivacy, using HD Wallets and Payment Requests.\n\n\n2> We have the option of storing a URL rather than just a wallet\naddress in the TXT record.  This allows a second level lookup against\nthe URL to get back a unique HD Wallet address or Payment Request each\ntime, further protecting user privacy and security.  Using Wallet\nNames with Payment Requests allows for the user experience of typing\nin an easy to remember name and getting back the \"green lock\" and who\nthe validated recipient is.  This also provides an auto audit of the\nend to end DNS SEC process, in the case the path were somehow\ncompromised, the signature on the payment request can provide an\nadditional check.\n\n\n3> We use a 2 tier lookup format.  The first lookup returns a list of\ncurrencies or payment types supported by the Wallet Name.  The second\nlookup goes to a record specific to that currency type to get the\naddress to go to.  We believe this to be a more scalable solution in a\nworld where someone can have both multiple digital currency types, but\nthen also multiple types of colored coins, and wants a simple way to\nshare a single name for all of those different addresses.  This allows\nthe wallet to do the work behind the scene of choosing the currency it\nwants to send, and automatically getting back the right address to\nsend to, without the user having to do anything different.\n\n4> We mandate DNSSEC while you make it optional.  We did this because\nwe believe giving the user the option of NOT using DNSSEC is like\nletting them order a car with no brakes.  We weren't sure how we would\nexplain to them why their money was gone when they really didn't\nunderstand the risks they were taking up front. We had a lot of\ndiscussion about it before coming to the decision we did, and I can\nsee why you went the other way, although I do believe we made the\nright choice.\n\n\nAdditionally, we just released another open source API server to help\nwith the \"other half\" of the lookup problem.  Its in its infancy, and\nwe are certainly taking feedback on it at this time.  It is called\nAddressimo <https://github.com/netkicorp/addressimo> and will serve\nunique HD Wallet addresses or Payment Requests for every lookup, thus\nallowing a user to have a private, secure way to share a Wallet Name\nthat can be used to send them any digital currency.\n\nI'd love to talk here or offline about merging standards going\nforward.  As an FYI, Verisign has also delivered a standard to the\nIETF using DNSSEC to pass payment information here:\nhttps://tools.ietf.org/html/draft-wiley-paymentassoc-00  We have\nstarted discussions with them about merging standards as well.\n\n\nThey actually have a really nice way in their standard to encode email\naddresses that more or less ensures that there won't be name space\ncollision in the case that there is already a record \"joe.user.com\"\nand you want to create one for \"joe at user.com\" that we are looking at\nadding to what we are doing in the next update to our record formats.\n\n\nIn any case, I'd much rather we had one effort going forward than\nmultiples, so let's talk!\n\n[/FROM JUSTIN]\n\n\n\n\nJustin W. Newton\nFounder/CEO\nNetKi, Inc.\n\njustin at netki.com\n+1.818.261.4248\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/cb6f564d/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PastedGraphic-1.tiff\nType: image/tiff\nSize: 10972 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150714/cb6f564d/attachment-0001.tiff>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: extend bip70 with OpenAlias",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Justin Newton"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6666
        }
    },
    {
        "title": "[bitcoin-dev] Mempool \"Expected Byte Stay\" policy",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-07-15T00:24:23",
                "message_text_only": "Spammers out there are being very disrepectful of my fullnode resources \nthese days!  I'm making some changes. In case others are interested, \nhere's a description:\n\nThere is now a maximum size for the memory pool.  Space is allocated \nwith a pretty simple rule.  For each tx, I calculate MY COST of \ncontinuing to hold it in the mempool.  I measure the cost to me by \n\"expected byte stay\":\n\nexpectedByteStay = sizeBytes * expectedBlocksToConfirm(feeRate)\n\n\nRule 1: When there's not enough space for a new tx, I try to make space \nby evicting txes with expectedByteStay higher than tx.\n\nI'm NOT worrying about\n  - Fees\n    EXCEPT via their effect on confirmation time\n\n  - Coin age\n    You already made money on your old coins.  Pay up.\n\n  - CPFP\n    Child's expectedBlocksToConfirm is max'ed with its\n    parent, then parent expectedByteStay is ADDED to child's\n\n  - Replacement\n    You'll get another chance in 2 hours (see below).\n\n\nRule 2: A transaction and its dependents are evicted on its 2-hour \nanniversary, whether space is required or not\n\n\nThe latest expectedBlocksToConfirm(feeRate) table is applied to the \nentire mempool periodically.\n\nWhat do you think?  I'll let you know how it works out.  I'm putting a \nlot of faith in the new fee estimation (particularly its size \nindependence).  Another possibility is clog-ups by transactions that \nlook like they'll confirm next block, but don't because of factors other \nthan fees (other people's blacklists?)"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-15T19:18:49",
                "message_text_only": "On Tuesday 14. July 2015 17.24.23 Tom Harding via bitcoin-dev wrote:\n> Rule 2: A transaction and its dependents are evicted on its 2-hour \n> anniversary, whether space is required or not\n\nInstead of 2 hours, why not a number of blocks?\n-- \nThomas Zander"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-15T23:15:24",
                "message_text_only": "On 7/15/2015 12:18 PM, Thomas Zander via bitcoin-dev wrote:\n> On Tuesday 14. July 2015 17.24.23 Tom Harding via bitcoin-dev wrote:\n>> Rule 2: A transaction and its dependents are evicted on its 2-hour\n>> anniversary, whether space is required or not\n> Instead of 2 hours, why not a number of blocks?\n\nSo users/wallets can know when they should rebroadcast and consider \nincreasing the fee.\n\n\nUsing 12 blocks, there is a 5% chance he has to wait 3 hours.*\n\nUsing 120 minutes, there is only a .23% chance that fewer than 4 blocks \nhave occurred.**\n\n\n\n\n\n*\nTable[{x, 1 - CDF[ErlangDistribution[12, 1/10], x]}, {x, 0, 240, 10}] \n//N //TableForm\n0.      1.\n10.    1.\n20.    0.999999\n30.    0.999929\n40.    0.999085\n50.    0.994547\n60.    0.979908\n70.    0.94665\n80.    0.888076\n90.    0.803008\n100.    0.696776\n110.    0.579267\n120.    0.461597\n130.    0.353165\n140.    0.26004\n150.    0.184752\n160.    0.126993\n170.    0.0846691\n180.    0.0548874\n190.    0.0346726\n200.    0.0213868\n210.    0.0129048\n220.    0.00762994\n230.    0.00442702\n240.    0.00252413\n\n\n\n\n\n**\nTable[{x, CDF[PoissonDistribution[1/10 * 120], x]}, {x, 0, 20}] //N \n//TableForm\n0.    6.14421*10^-6\n1.    0.0000798748\n2.    0.000522258\n3.    0.00229179\n4.    0.00760039\n5.    0.020341\n6.    0.0458223\n7.    0.0895045\n8.    0.155028\n9.    0.242392\n10.    0.347229\n11.    0.461597\n12.    0.575965\n13.    0.681536\n14.    0.772025\n15.    0.844416\n16.    0.898709\n17.    0.937034\n18.    0.962584\n19.    0.97872\n20.    0.988402"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-16T09:38:54",
                "message_text_only": "On Wednesday 15. July 2015 16.15.24 Tom Harding via bitcoin-dev wrote:\n> On 7/15/2015 12:18 PM, Thomas Zander via bitcoin-dev wrote:\n> > On Tuesday 14. July 2015 17.24.23 Tom Harding via bitcoin-dev wrote:\n> >> Rule 2: A transaction and its dependents are evicted on its 2-hour\n> >> anniversary, whether space is required or not\n> > \n> > Instead of 2 hours, why not a number of blocks?\n> \n> So users/wallets can know when they should rebroadcast and consider \n> increasing the fee.\n> \n> \n> Using 12 blocks, there is a 5% chance he has to wait 3 hours.*\n> \n> Using 120 minutes, there is only a .23% chance that fewer than 4 blocks \n> have occurred.**\n\nUsing the good old saying; results in the past are no indication of the \nfuture.\nI see a logic error in your thinking.\n\nYour assumption that time is a better indicator is false. Naturally time \nitself is universal, but blocks are known by wallets too. Its just as good.\n\nThis assumption of yours leans heavily on block mining times, and that is\nnot guaranteed in the future.  Imagine one day half the miners dropping and \nblocks take much longer for a week or so.  Your assumptions just broke the \nmempool.\n\n-- \nThomas Zander"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-16T16:50:58",
                "message_text_only": "On 7/16/2015 2:38 AM, Thomas Zander via bitcoin-dev wrote:\n> On Wednesday 15. July 2015 16.15.24 Tom Harding via bitcoin-dev wrote:\n>> On 7/15/2015 12:18 PM, Thomas Zander via bitcoin-dev wrote:\n>>> On Tuesday 14. July 2015 17.24.23 Tom Harding via bitcoin-dev wrote:\n>>>> Rule 2: A transaction and its dependents are evicted on its 2-hour\n>>>> anniversary, whether space is required or not\n>>> Instead of 2 hours, why not a number of blocks?\n>> So users/wallets can know when they should rebroadcast and consider\n>> increasing the fee.\n>>\n>>\n>> Using 12 blocks, there is a 5% chance he has to wait 3 hours.*\n>>\n>> Using 120 minutes, there is only a .23% chance that fewer than 4 blocks\n>> have occurred.**\n> Using the good old saying; results in the past are no indication of the\n> future.\n> I see a logic error in your thinking.\n>\n> Your assumption that time is a better indicator is false. Naturally time\n> itself is universal, but blocks are known by wallets too. Its just as good.\n>\n> This assumption of yours leans heavily on block mining times, and that is\n> not guaranteed in the future.  Imagine one day half the miners dropping and\n> blocks take much longer for a week or so.  Your assumptions just broke the\n> mempool.\n>\n\nIt's not a question of right vs. wrong.  Either method has consequences \nfor user expectations and behavior.\n\nWith fixed-block mempool expiration, the expiration time is variable.  \nUser can get an alert, but at an unpredictable time.\n\nWith fixed-timeout, the likelihood of expiration is more variable \n(expiration occurrence is unpredictable regardless), but any expiration \nwill occur at the timeout."
            }
        ],
        "thread_summary": {
            "title": "Mempool \"Expected Byte Stay\" policy",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Thomas Zander",
                "Tom Harding"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6016
        }
    },
    {
        "title": "[bitcoin-dev] Significant losses by double-spending unconfirmed transactions",
        "thread_messages": [
            {
                "author": "simongreen at airmail.cc",
                "date": "2015-07-15T03:29:25",
                "message_text_only": "With my black hat on I recently performed numerous profitable \ndouble-spend attacks against zeroconf accepting fools. With my white hat \non, I'm warning everyone. The strategy is simple:\n\ntx1: To merchant, but dust/low-fee/reused-address/large-size/etc. \nanything that miners don't always accept.\n\ntx2: After merchant gives up valuable thing in return, normal tx without \ntriggering spam protections. (loltasticly a Mike Hearn Bitcoin XT node \nwas used to relay the double-spends)\n\nExample success story: tx1 paying Shapeshift.io with 6uBTC output is not \ndust under post-Hearn-relay-drop rules, but is dust under \npre-Hearn-relay-drop rules, followed by tx2 w/o the output and not \npaying Shapeshift.io. F2Pool/Eligius/BTCChina/AntPool etc. are all \nminers who have reverted Hearn's 10x relay fee drop as recommended by \nv0.11.0 release notes and accept these double-spends. Shapeshift.io lost \n~3 BTC this week in multiple txs. (they're no longer accepting zeroconf)\n\nExample success story #2: tx1 with post-Hearn-relay drop fee, followed \nby tx2 with higher fee. Such stupidly low fee txs just don't get mined, \nso wait for a miner to mine tx2. Bought a silly amount of reddit gold \noff Coinbase this way among other things. I'm surprised that reddit \ndidn't cancel the \"fools-gold\" after tx reversal. (did Coinbase \nguarantee those txs?) Also found multiple Bitcoin ATMs vulnerable to \nthis attack. (but simulated attack with tx2s still paying ATM because \ndidn't want to go to trouble of good phys opsec)\n\nShoutouts to BitPay who did things right and notified merchant properly \nwhen tx was reversed.\n\nIn summary, every target depending on zeroconf vulnerable and lost \nsignificant sums of money to totally trivial attacks with high \nprobability. No need for RBF to do this, just normal variations in miner \npolicy. Shapeshift claims to use Super Sophisticated Network Sybil \nAttacking Monitoring from Blockcypher, but relay nodes != miner policy.\n\nConsider yourself warned! My hat is whiter than most, and my skills not \nparticularly good.\n\nWhat to do? Users: Listen to the experts and stop relying on zeroconf. \nBlack hats: Profit!"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-15T14:35:21",
                "message_text_only": "You perform a valuable service with your demonstration, but you\nneglected to include the txid's to show that you actually did it.\n\nYour advice is must-follow for anyone relying on an unconfirmed tx: it\nmust pay a good fee and be highly relayable/minable.\n\n\nOn 7/14/2015 8:29 PM, simongreen--- via bitcoin-dev wrote:\n> tx1: To merchant, but dust/low-fee/reused-address/large-size/etc.\n> anything that miners don't always accept."
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-15T15:18:25",
                "message_text_only": "On Wed, Jul 15, 2015 at 07:35:21AM -0700, Tom Harding via bitcoin-dev wrote:\n> \n> You perform a valuable service with your demonstration, but you\n> neglected to include the txid's to show that you actually did it.\n \n> Your advice is must-follow for anyone relying on an unconfirmed tx: it\n> must pay a good fee and be highly relayable/minable.\n\nActually, I was looking at what I believe was (part of?) this attack\nyesterday in the logs on my full-RBF nodes and the txs involved *did*\nhave good fees and were highly relayable/minable - the double-spent txs\nhad near 100% propagation on blockchain.info (who has unfortunately\npurged the relevant data already)\n\nShapeshift.io depends on Blockcypher's \"confidence factor\" model(1)\nunder the hood - yet another one of those sybil attacking network\nmonitoring things - to estimate tx confirmation probability by looking\nat the % of nodes a tx has propagated too. But miners frequently use\ncustomized Bitcoin Core codebases that don't follow normal policies, so\nthose measurements don't actually tell you what you need to know.\n\nhapeshift confirmed(2) the attack - confirming that they disabled\nunconfirmed tx acceptance - said they're going to \"improve\" their\nsystem... It'll be interesting to see what that actually entails.\n\n1) https://medium.com/blockcypher-blog/from-zero-to-hero-bitcoin-transactions-in-8-seconds-7c9edcb3b734\n2) https://www.reddit.com/r/Bitcoin/comments/3ddkhy/bitcoindev_significant_losses_by_doublespending/ct468p7\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010bf087ed645cba129e2523930d5cde636ddbae9e03aef9c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/8a1f1ad2/attachment.sig>"
            },
            {
                "author": "Me",
                "date": "2015-07-15T15:49:13",
                "message_text_only": "Thank you Simon for sharing your tests, if possible can you share TX hashes please. I would recommend to send them money post-mortem. What you did is really valuable information, however it can be classified as fraud. I really don\u2019t want open this topic here, just suggesting to keep your record clean :-) \n\n\n\n> the double-spent txs\n> had near 100% propagation on blockchain.info (who has unfortunately\n> purged the relevant data already)\n\n\nCan you please share the TX Hash\n\n\n\n> Blockcypher's \"confidence factor\" model(1)\n> under the hood - yet another one of those sybil attacking network\n> monitoring things\n\n\nPeter, I noticed on your twitter you have a lot of bad things to say about Blockcypher and their business model (which I might not full agree, but totally respect), can you share any evidence they perform any form of Sybil attack on the network, please. \n\n\n\n\n\n\n> On Jul 15, 2015, at 8:18 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Wed, Jul 15, 2015 at 07:35:21AM -0700, Tom Harding via bitcoin-dev wrote:\n>> \n>> You perform a valuable service with your demonstration, but you\n>> neglected to include the txid's to show that you actually did it.\n> \n>> Your advice is must-follow for anyone relying on an unconfirmed tx: it\n>> must pay a good fee and be highly relayable/minable.\n> \n> Actually, I was looking at what I believe was (part of?) this attack\n> yesterday in the logs on my full-RBF nodes and the txs involved *did*\n> have good fees and were highly relayable/minable - the double-spent txs\n> had near 100% propagation on blockchain.info (who has unfortunately\n> purged the relevant data already)\n> \n> Shapeshift.io depends on Blockcypher's \"confidence factor\" model(1)\n> under the hood - yet another one of those sybil attacking network\n> monitoring things - to estimate tx confirmation probability by looking\n> at the % of nodes a tx has propagated too. But miners frequently use\n> customized Bitcoin Core codebases that don't follow normal policies, so\n> those measurements don't actually tell you what you need to know.\n> \n> hapeshift confirmed(2) the attack - confirming that they disabled\n> unconfirmed tx acceptance - said they're going to \"improve\" their\n> system... It'll be interesting to see what that actually entails.\n> \n> 1) https://medium.com/blockcypher-blog/from-zero-to-hero-bitcoin-transactions-in-8-seconds-7c9edcb3b734\n> 2) https://www.reddit.com/r/Bitcoin/comments/3ddkhy/bitcoindev_significant_losses_by_doublespending/ct468p7\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 000000000000000010bf087ed645cba129e2523930d5cde636ddbae9e03aef9c\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Bastiaan van den Berg",
                "date": "2015-07-15T15:53:22",
                "message_text_only": "On Wed, Jul 15, 2015 at 5:49 PM, Me via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > Blockcypher's \"confidence factor\" model(1)\n> > under the hood - yet another one of those sybil attacking network\n> > monitoring things\n>\n>\n> Peter, I noticed on your twitter you have a lot of bad things to say about\n> Blockcypher and their business model (which I might not full agree, but\n> totally respect), can you share any evidence they perform any form of Sybil\n> attack on the network, please.\n\n\n? He says it -monitors- for such a attack, usually monitoring does not\ninclude causing it ;)\n\n--\nbuZz\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/2a85d431/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-15T15:59:03",
                "message_text_only": "On Wed, Jul 15, 2015 at 08:49:13AM -0700, Me wrote:\n> > Blockcypher's \"confidence factor\" model(1)\n> > under the hood - yet another one of those sybil attacking network\n> > monitoring things\n> \n> \n> Peter, I noticed on your twitter you have a lot of bad things to say about Blockcypher and their business model (which I might not full agree, but totally respect), can you share any evidence they perform any form of Sybil attack on the network, please. \n\nFor Blockcypher to succesfully do what they claim to do they need to\nconnect to a large % of nodes on the network; that right there is a\nsybil attack. It's an approach that uses up connection slots for the\nentire network and isn't scalable; if more than a few services were\ndoing that the Bitcoin network would become significantly less reliable,\nat some point collapsing entirely.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000093f699ccdb323aa638af1131249ec2e1bacbf367163807a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/286e3fda/attachment.sig>"
            },
            {
                "author": "Me",
                "date": "2015-07-15T16:06:48",
                "message_text_only": "Have you talk to them? If not, how can you be sure they don\u2019t run large number of standard nodes and actually make the network stronger? Personally I never bring claims like this if I just assume. A lot of people in the community really trust you, do you realize you potentially hurt them for no reason?\n\n\nbtw I do not work for them nor have any money invested in them in case anybody asks\n\n\n\n\n\n> On Jul 15, 2015, at 8:59 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> On Wed, Jul 15, 2015 at 08:49:13AM -0700, Me wrote:\n>>> Blockcypher's \"confidence factor\" model(1)\n>>> under the hood - yet another one of those sybil attacking network\n>>> monitoring things\n>> \n>> \n>> Peter, I noticed on your twitter you have a lot of bad things to say about Blockcypher and their business model (which I might not full agree, but totally respect), can you share any evidence they perform any form of Sybil attack on the network, please. \n> \n> For Blockcypher to succesfully do what they claim to do they need to\n> connect to a large % of nodes on the network; that right there is a\n> sybil attack. It's an approach that uses up connection slots for the\n> entire network and isn't scalable; if more than a few services were\n> doing that the Bitcoin network would become significantly less reliable,\n> at some point collapsing entirely.\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 0000000000000000093f699ccdb323aa638af1131249ec2e1bacbf367163807a"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-07-15T16:11:43",
                "message_text_only": "On Wed, Jul 15, 2015 at 12:06 PM, Me via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Have you talk to them? If not, how can you be sure they don\u2019t run large\n> number of standard nodes and actually make the network stronger? Personally\n> I never bring claims like this if I just assume. A lot of people in the\n> community really trust you, do you realize you potentially hurt them for no\n> reason?\n>\n\nRunning normal full nodes only provides extra service to nodes\nsynchronizing and lightweight clients. It does not \"make the network\nstronger\" in the sense that it does not reduce the trust the participants\nneed to have in each other.\n\nIt's such a misconception that running many nodes somehow helps. It's much\nbetter that you run and control one or a few full nodes which you actually\nuse to validate your transactions, than to run 1000s of nodes in third\nparty datacenters. The latter only looks more decentralized.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/1b2a1d26/attachment.html>"
            },
            {
                "author": "Me",
                "date": "2015-07-15T16:41:24",
                "message_text_only": "> It's such a misconception that running many nodes somehow helps. It's much better that you run and control one or a few full nodes which you actually use to validate your transactions, than to run 1000s of nodes in third party datacenters. The latter only looks more decentralized.\n\n\nI guess we sort of disagree here, perhaps my word \u201cstrength\u201d was not the right word. Yes, running 6000 vs 7000 nodes makes no difference for the network strength, but (a) running 50 nodes vs 5000 does make a difference. I would love to see how the number of nodes drop if companies like blockcypher turn off their servers. Obviously it would not go 50. (b) running different clients (if blockcypher runs non-reference-bitcoinD client) makes the network less open wide-spread bugs\n\n\nI feel we are really derailing the original topic btw  :-)\n\n\n\n\n\n> On Jul 15, 2015, at 9:11 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> \n> On Wed, Jul 15, 2015 at 12:06 PM, Me via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> Have you talk to them? If not, how can you be sure they don\u2019t run large number of standard nodes and actually make the network stronger? Personally I never bring claims like this if I just assume. A lot of people in the community really trust you, do you realize you potentially hurt them for no reason?\n> \n> Running normal full nodes only provides extra service to nodes synchronizing and lightweight clients. It does not \"make the network stronger\" in the sense that it does not reduce the trust the participants need to have in each other.\n> \n> It's such a misconception that running many nodes somehow helps. It's much better that you run and control one or a few full nodes which you actually use to validate your transactions, than to run 1000s of nodes in third party datacenters. The latter only looks more decentralized.\n> \n> -- \n> Pieter\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/8fca9ae0/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-15T16:12:24",
                "message_text_only": "Below are 2 examples why a systematic risk analysis needs to be used. \nThe current situation is that you have developers making hyperbolic, \ndemonizing statements that users are \"spammers\" and engaged in Sybil \n\"attacks.\"  Characterizing these activities as spam and Sybil attacks is \nnot a systematic analysis, it is closer to the process used at the Salem \nWitch trials.\n\nIf this process of demonetization is to take its natural course then \nthese statements are \"developer attacks\" from a developer system that \nlacks proper incentives and is rife with conflicts of interest.\n\nRuss\n\n\n>... they need to\n> connect to a large % of nodes on the network; that right there is a\n> sybil attack. It's an approach that uses up connection slots for the\n> entire network and isn't scalable; if more than a few services were\n> doing that the Bitcoin network would become significantly less reliable,\n> at some point collapsing entirely.\n\n...\n\n > Spammers out there are being very disrepectful of my fullnode resources"
            },
            {
                "author": "Matthieu Riou",
                "date": "2015-07-15T18:25:17",
                "message_text_only": "Hi,\n\nThanks for the bug report Simon, \"responsible\" disclosure on public forums\nis always appreciated. We're working with ShapeShift to make sure we can\nprotect them appropriately against this specific attack in the future. As\n\"Me\" and Adrian advised, I would also encourage you return the funds.\n\nRegarding Peter's accusations on Twitter/Reddit/listserve, we have no idea\nwhy we are his target. He has never met with our CEO, has no idea of our\nbusiness model, nor our company objectives. All his comments about us are\nhis speculations. I'm sure Peter knows what a Sybil attack actually is and\nmaking such claims on a public forum is completely unfounded and uncalled\nfor. Stretching definitions beyond the point where they make sense is a\ncommon rhetoric and political tool, not necessarily appropriate in a\nprofessional or technical context.\n\nWe offer useful services for many startups like ourselves. We are good\nactors in this space. As a startup we are also constrained by limited\nresources (we're funded but far from larger companies resources). Companies\naren't built in a single day and we hope to do more to help\ndecentralization in the future as well. We're trying to further the\necosystem with our small team, so the pot shots are puzzling.\n\nThanks,\nMatthieu\n\nOn Wed, Jul 15, 2015 at 9:12 AM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Below are 2 examples why a systematic risk analysis needs to be used. The\n> current situation is that you have developers making hyperbolic, demonizing\n> statements that users are \"spammers\" and engaged in Sybil \"attacks.\"\n> Characterizing these activities as spam and Sybil attacks is not a\n> systematic analysis, it is closer to the process used at the Salem Witch\n> trials.\n>\n> If this process of demonetization is to take its natural course then these\n> statements are \"developer attacks\" from a developer system that lacks\n> proper incentives and is rife with conflicts of interest.\n>\n> Russ\n>\n>\n>  ... they need to\n>> connect to a large % of nodes on the network; that right there is a\n>> sybil attack. It's an approach that uses up connection slots for the\n>> entire network and isn't scalable; if more than a few services were\n>> doing that the Bitcoin network would become significantly less reliable,\n>> at some point collapsing entirely.\n>>\n>\n> ...\n>\n> > Spammers out there are being very disrepectful of my fullnode resources\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/a09b81f2/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-15T19:32:59",
                "message_text_only": "On Wed, Jul 15, 2015 at 11:25:17AM -0700, Matthieu Riou via bitcoin-dev wrote:\n> Hi,\n> \n> Thanks for the bug report Simon, \"responsible\" disclosure on public forums\n> is always appreciated. We're working with ShapeShift to make sure we can\n> protect them appropriately against this specific attack in the future. As\n> \"Me\" and Adrian advised, I would also encourage you return the funds.\n> \n> Regarding Peter's accusations on Twitter/Reddit/listserve, we have no idea\n> why we are his target. He has never met with our CEO, has no idea of our\n> business model, nor our company objectives. All his comments about us are\n> his speculations. I'm sure Peter knows what a Sybil attack actually is and\n> making such claims on a public forum is completely unfounded and uncalled\n> for. Stretching definitions beyond the point where they make sense is a\n> common rhetoric and political tool, not necessarily appropriate in a\n> professional or technical context.\n\n\"In a Sybil attack the attacker subverts the reputation system of a\npeer-to-peer network by creating a large number of pseudonymous\nidentities, using them to gain a disproportionately large influence.\"\n\nQuoting your API docs:\n\n\"[Blockcypher is] always connected to a statistically significant number\nof nodes on the network - we target anywhere between 10 to 20% of the\nactive nodes on any given blockchain\"\n-http://dev.blockcypher.com/#confidence-factor\n\nIn the case of Bitcoin, there's something like 6,000 nodes, so if that\n20% is achived via outgoing connections you'd have 600 to 1200 active\noutgoing connections using up network resources.  Meanwhile, the default\nis 8 outgoing connections - you're using about two orders of magnitude\nmore resources.\n\nIf you are achieving that via incoming connections, you're placing a big\npart of the relay network under central control. As we've seen in the\ncase of Chainalysis's sybil attack, even unintentional confirguation\nscrewups can cause serious and widespread issues due to the large number\nof nodes that can fail in one go. (note how Chainalysis's actions were\ndescribed(1) as a sybil attack by multiple Bitcoin devs, including\nGregory Maxwell, Wladimir van der Laan, and myself)\n\nRight now the P2P network has relatively weak protections against sybil\nattacks, but efforts are being made to find ways to defend against them.\nAs anti-sybil attack technology improves, you'll be able to\nsimultaneously connect to a smaller and smaller % of the network, and\nyour confidence factor technology will degrade further.\n\nQuestions: How exactly does your monitoring network work? Do you make\nincoming, outgoing, or both types of connections? What subnet(s) do the\nconnections come from? What software makes those connections?\n\n> We offer useful services for many startups like ourselves. We are good\n> actors in this space. As a startup we are also constrained by limited\n> resources (we're funded but far from larger companies resources). Companies\n> aren't built in a single day and we hope to do more to help\n> decentralization in the future as well. We're trying to further the\n> ecosystem with our small team, so the pot shots are puzzling.\n\nWhat you are doing is inherently incompatible with decentralization.\nYour service simply doesn't scale; it's a server only a small number of\ncentralized entities can provide without causing the P2P network to\ncollapse due to resource exhaustion.\n\nQuestion: Do you have relationships with mining pools? For instance, are\nyou looking at contracts to have transactions mined to guarantee\nconfirmations?\n\n1) http://www.coindesk.com/chainalysis-ceo-denies-launching-sybil-attack-on-bitcoin-network/\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000b675c4d825a10c278b8d63ee4df90a19393f3b6498fd073\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/d8b266f6/attachment.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-15T19:57:27",
                "message_text_only": "> (note how Chainalysis's actions were\n> described(1) as a sybil attack by multiple Bitcoin devs, including\n> Gregory Maxwell, Wladimir van der Laan, and myself)\n\nAs far as I know none of those people are security experts nor do they \nengage in systematic risk and threat analysis.  Simply because they are \nexperts in Bitcoin development does not make them expert in other areas. \n  Many of those involved in Bitcoin think that because they know Bitcoin \nthat they somehow have become experts in other areas.  That is one \nreason why so many Bitcoin companies have been hacked.\n\nAn \"attack\" according to ISO/IEC 27000 \"is any attempt to destroy, \nexpose, alter, disable, steal or gain unauthorized access to or make \nunauthorized use of an asset.\"  The situation you are describing is not \nan \"attack,\" they are providing a service.  Satoshi Dice is also not \n\"spam,\" it is again providing a service within the rules set forth in \nthe software.  The people going around claiming these are \"spam\" and \n\"attacks\" spend too much time of Reddit or they have an ulterior motive. \n  In any case these baseless accusations and arguments waste inordinate \namounts of time.\n\nRuss"
            },
            {
                "author": "Matthieu Riou",
                "date": "2015-07-16T00:08:05",
                "message_text_only": "On Wed, Jul 15, 2015 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:\n\n>\n> \"In a Sybil attack the attacker subverts the reputation system of a\n> peer-to-peer network by creating a large number of pseudonymous\n> identities, using them to gain a disproportionately large influence.\"\n>\n\nOur \"identities\" aren't pseudonymous.\n\nIn the case of Bitcoin, there's something like 6,000 nodes, so if that\n> 20% is achived via outgoing connections you'd have 600 to 1200 active\n> outgoing connections using up network resources.  Meanwhile, the default\n> is 8 outgoing connections - you're using about two orders of magnitude\n> more resources.\n>\n\nYou're not talking about a Sybil attack anymore, just resource use. We do\nknow how to change default configurations to offer more connections.\n\nIf you are achieving that via incoming connections, you're placing a big\n> part of the relay network under central control. As we've seen in the\n> case of Chainalysis's sybil attack, even unintentional confirguation\n> screwups can cause serious and widespread issues due to the large number\n> of nodes that can fail in one go. (note how Chainalysis's actions were\n> described(1) as a sybil attack by multiple Bitcoin devs, including\n> Gregory Maxwell, Wladimir van der Laan, and myself)\n>\n\nWe're not Chainanalysis and we do not run hundreds of distinct nodes. Just\na few well-tuned ones.\n\n\n> What you are doing is inherently incompatible with decentralization.\n>\n\nThat's a matter of opinion. One could argue your actions and control\nattempts hurt decentralization. Either way, no one should play the\ndecentralization police or act as a gatekeeper.\n\nQuestion: Do you have relationships with mining pools? For instance, are\n> you looking at contracts to have transactions mined to guarantee\n> confirmations?\n>\n\nNo, we do not. We do not know anyone else having such contracts. As you\nknow, Coinbase also denied having such contracts in place [1]. But you seem\nto have more relationships with mining pools than we do.\n\nThanks,\nMatthieu\nCTO and Founder, BlockCypher\n\n[1]\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008864.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/d6778351/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-07-16T05:18:25",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nPersonally, I hope more people develop on-chain microtransaction\nsystems (so long as open source, etc) ~ see\nhttp://dev.blockcypher.com/#microtransaction-api ~ and I hope the\nbitcoin community figures out ways to re-examine dust, rather than\nviewing it as a \"problem,\" but instead, to re-examine this and\ninterpret it as an \"opportunity\" for microgiving. (I won't claim there\naren't challenges there, but I'll just throw that out there again..)\n\n- - Please see, my little project, http://abis.io\n\nOn 07/15/2015 05:08 PM, Matthieu Riou via bitcoin-dev wrote:\n> On Wed, Jul 15, 2015 at 12:32 PM, Peter Todd <pete at petertodd.org \n> <mailto:pete at petertodd.org>> wrote:\n> \n> \n> \"In a Sybil attack the attacker subverts the reputation system of\n> a peer-to-peer network by creating a large number of pseudonymous \n> identities, using them to gain a disproportionately large\n> influence.\"\n> \n> \n> Our \"identities\" aren't pseudonymous.\n> \n> In the case of Bitcoin, there's something like 6,000 nodes, so if\n> that 20% is achived via outgoing connections you'd have 600 to 1200\n> active outgoing connections using up network resources.  Meanwhile,\n> the default is 8 outgoing connections - you're using about two\n> orders of magnitude more resources.\n> \n> \n> You're not talking about a Sybil attack anymore, just resource use.\n> We do know how to change default configurations to offer more\n> connections.\n> \n> If you are achieving that via incoming connections, you're placing\n> a big part of the relay network under central control. As we've\n> seen in the case of Chainalysis's sybil attack, even unintentional\n> confirguation screwups can cause serious and widespread issues due\n> to the large number of nodes that can fail in one go. (note how\n> Chainalysis's actions were described(1) as a sybil attack by\n> multiple Bitcoin devs, including Gregory Maxwell, Wladimir van der\n> Laan, and myself)\n> \n> \n> We're not Chainanalysis and we do not run hundreds of distinct\n> nodes. Just a few well-tuned ones.\n> \n> \n> What you are doing is inherently incompatible with\n> decentralization.\n> \n> \n> That's a matter of opinion. One could argue your actions and\n> control attempts hurt decentralization. Either way, no one should\n> play the decentralization police or act as a gatekeeper.\n> \n> Question: Do you have relationships with mining pools? For\n> instance, are you looking at contracts to have transactions mined\n> to guarantee confirmations?\n> \n> \n> No, we do not. We do not know anyone else having such contracts. As\n> you know, Coinbase also denied having such contracts in place [1].\n> But you seem to have more relationships with mining pools than we\n> do.\n> \n> Thanks, Matthieu CTO and Founder, BlockCypher\n> \n> [1]\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/00886\n4.html\n>\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVpz6hAAoJEGxwq/inSG8CdAMIAJfJcJaXyFjUVLi6iA03tpot\n8e0SONC+kadLRTUn8GzAlpSgvKLcfqO5WvNKsjJenckrP+B6oSlT2e2u0QGehxl4\ngGfTksOPzrBFCfWOZnVAaDr4uR7OAHM/AjXkpn1gQJsh+xBhyeUF1xapPeR/M+9e\nyXFtV0itZve93sKrtlo+J/VShEi9mPBYrFrJBK9o17ir5chXW/xzqGm1Ny3fS72U\n/g9zkdt+LBidaLXdPvfBjjmux18BM+IAifO41C9Q0eIN6x0zajvPd/Y3Mm5J/QUe\np8qvj2Px75AYSCV0qzgMhETZdwYFor04f2zJ8u3WUB+AbupM9hewqvfPGiUi1qU=\n=S/aI\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-17T11:59:20",
                "message_text_only": "On Wed, Jul 15, 2015 at 05:08:05PM -0700, Matthieu Riou via bitcoin-dev wrote:\n> On Wed, Jul 15, 2015 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> >\n> > \"In a Sybil attack the attacker subverts the reputation system of a\n> > peer-to-peer network by creating a large number of pseudonymous\n> > identities, using them to gain a disproportionately large influence.\"\n> >\n> \n> Our \"identities\" aren't pseudonymous.\n\nThen are you willing to tell us what IP addresses your nodes connect\nfrom? This is important network stability information due to how nodes\nprevent a lack of diversity in their outgoing connections.\n\n> In the case of Bitcoin, there's something like 6,000 nodes, so if that\n> > 20% is achived via outgoing connections you'd have 600 to 1200 active\n> > outgoing connections using up network resources.  Meanwhile, the default\n> > is 8 outgoing connections - you're using about two orders of magnitude\n> > more resources.\n> >\n> \n> You're not talking about a Sybil attack anymore, just resource use. We do\n> know how to change default configurations to offer more connections.\n\nThe Bitcoin P2P network's primary concern is reliability through\ndiversity; you are harming that resource.\n\nSo to be clear, you have both a high level of outgoing and incoming\nconnections? Given that Bitcoin nodes only connect to eight outgoing\npeers, how do you manage to connect to your claimed 10%-20% of all\nreachable nodes? Obviously you can't be doing that with just incoming\nconnections, unless you're running hundreds of nodes, or doing an addr\nspamming attack.\n\n> If you are achieving that via incoming connections, you're placing a big\n> > part of the relay network under central control. As we've seen in the\n> > case of Chainalysis's sybil attack, even unintentional confirguation\n> > screwups can cause serious and widespread issues due to the large number\n> > of nodes that can fail in one go. (note how Chainalysis's actions were\n> > described(1) as a sybil attack by multiple Bitcoin devs, including\n> > Gregory Maxwell, Wladimir van der Laan, and myself)\n> >\n> \n> We're not Chainanalysis and we do not run hundreds of distinct nodes. Just\n> a few well-tuned ones.\n\nIt's actually marginally better for the network if you're using hundreds\nof distinct nodes rather than just a few to do this sybil attack - the\nchance of your small number of nodes suddenly going off-line and causing\npropagation issues is more than hundreds of nodes all going off-line\nsuddenly. Additionally it's easier for bad actors to survail your few\ninternet connections to easily get tx propagation information from the\nnetwork than it is to survail Chainalysis's setup. (ironic I know)\n\n> > What you are doing is inherently incompatible with decentralization.\n> >\n> \n> That's a matter of opinion. One could argue your actions and control\n> attempts hurt decentralization. Either way, no one should play the\n> decentralization police or act as a gatekeeper.\n\n\"Control attempts\"? Care to explain?\n\nRe: \"gatekeeping\" - fact is your business model and technology can only\nbe succesfully run by a small number of entities at once, resulting in a\nsituation where those few companies act as gatekeepers for access to\nzeroconf confirmation probability information.\n\n> Question: Do you have relationships with mining pools? For instance, are\n> > you looking at contracts to have transactions mined to guarantee\n> > confirmations?\n> >\n> \n> No, we do not. We do not know anyone else having such contracts. As you\n> know, Coinbase also denied having such contracts in place [1]. But you seem\n> to have more relationships with mining pools than we do.\n\nNice cheap shot there. My \"relationships\" are nothing more than people\nbeing willing to talk to me, ask me for advice, and warn me about\npossible threats. They're not legal contracts.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000138147be90db48b8338de6d58cc6b60e6ad360f6ef486d8c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/f048beea/attachment.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-17T12:56:49",
                "message_text_only": "> My \"relationships\" are nothing more than people\n> being willing to talk to me, ask me for advice, and warn me about\n> possible threats. They're not legal contracts.\n\nYour actions make it appear as if you attack companies with the hope of \nlanding consulting fees.  I assume if companies hire you as a consultant \nor put you on some advisory board then you stop badmouthing them.  These \ntype of developer attacks are a high risk issue due to the small number \nof developers who have been given authority by the github gatekeeper and \nthe lack of an incentive system for Bitcoin devlelopers.\n\nI have been suggesting a systematic risk analysis to reduce the \nprobability of such an attack.  If you have a systematic risk analysis \nthen when there are issue you judge it against a standard.  That \nreplaces the current situation where developers haphazardly make claims \nin twitter, Reddit, and blog posts and create drama and confusion.\n\nRuss"
            },
            {
                "author": "Adrian Macneil",
                "date": "2015-07-15T17:01:56",
                "message_text_only": "> With my white hat on\n\n> Shapeshift.io lost ~3 BTC this week in multiple txs\n\nI assume as a self proclaimed \"white hat\", you contacted the relevant\ncompanies and returned their funds? Theft is still theft, regardless of\nwhether you are doing it for research or not.\n\nOn Tue, Jul 14, 2015 at 8:29 PM, simongreen--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> With my black hat on I recently performed numerous profitable double-spend\n> attacks against zeroconf accepting fools. With my white hat on, I'm warning\n> everyone. The strategy is simple:\n>\n> tx1: To merchant, but dust/low-fee/reused-address/large-size/etc. anything\n> that miners don't always accept.\n>\n> tx2: After merchant gives up valuable thing in return, normal tx without\n> triggering spam protections. (loltasticly a Mike Hearn Bitcoin XT node was\n> used to relay the double-spends)\n>\n> Example success story: tx1 paying Shapeshift.io with 6uBTC output is not\n> dust under post-Hearn-relay-drop rules, but is dust under\n> pre-Hearn-relay-drop rules, followed by tx2 w/o the output and not paying\n> Shapeshift.io. F2Pool/Eligius/BTCChina/AntPool etc. are all miners who have\n> reverted Hearn's 10x relay fee drop as recommended by v0.11.0 release notes\n> and accept these double-spends. Shapeshift.io lost ~3 BTC this week in\n> multiple txs. (they're no longer accepting zeroconf)\n>\n> Example success story #2: tx1 with post-Hearn-relay drop fee, followed by\n> tx2 with higher fee. Such stupidly low fee txs just don't get mined, so\n> wait for a miner to mine tx2. Bought a silly amount of reddit gold off\n> Coinbase this way among other things. I'm surprised that reddit didn't\n> cancel the \"fools-gold\" after tx reversal. (did Coinbase guarantee those\n> txs?) Also found multiple Bitcoin ATMs vulnerable to this attack. (but\n> simulated attack with tx2s still paying ATM because didn't want to go to\n> trouble of good phys opsec)\n>\n> Shoutouts to BitPay who did things right and notified merchant properly\n> when tx was reversed.\n>\n> In summary, every target depending on zeroconf vulnerable and lost\n> significant sums of money to totally trivial attacks with high probability.\n> No need for RBF to do this, just normal variations in miner policy.\n> Shapeshift claims to use Super Sophisticated Network Sybil Attacking\n> Monitoring from Blockcypher, but relay nodes != miner policy.\n>\n> Consider yourself warned! My hat is whiter than most, and my skills not\n> particularly good.\n>\n> What to do? Users: Listen to the experts and stop relying on zeroconf.\n> Black hats: Profit!\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150715/3b6fa212/attachment.html>"
            },
            {
                "author": "Arne Brutschy",
                "date": "2015-07-16T14:30:15",
                "message_text_only": "Hello,\n\nWhat are these pre- and post-Hearn-relay drop rules you are speaking\nabout? Can anybody shed some light on this? (I am aware of the\nminrelaytxfee setting proposed in the 0.11.0 release notes, I just\ndon't see what this has to do with Mike Hearn, BitcoinXT, and whether\nthere's a code change related to this that I missed).\n\nRelated: is there somewhere a chart that plots `estimatefee` over\ntime? Would be interesting to see how the fee market evolved over\nthese past weeks.\n\nRegards\nArne\n\nOn 15/07/15 05:29, simongreen--- via bitcoin-dev wrote:\n> With my black hat on I recently performed numerous profitable \n> double-spend attacks against zeroconf accepting fools. With my\n> white hat on, I'm warning everyone. The strategy is simple:\n> \n> tx1: To merchant, but dust/low-fee/reused-address/large-size/etc. \n> anything that miners don't always accept.\n> \n> tx2: After merchant gives up valuable thing in return, normal tx\n> without triggering spam protections. (loltasticly a Mike Hearn\n> Bitcoin XT node was used to relay the double-spends)\n> \n> Example success story: tx1 paying Shapeshift.io with 6uBTC output\n> is not dust under post-Hearn-relay-drop rules, but is dust under \n> pre-Hearn-relay-drop rules, followed by tx2 w/o the output and not \n> paying Shapeshift.io. F2Pool/Eligius/BTCChina/AntPool etc. are all \n> miners who have reverted Hearn's 10x relay fee drop as recommended\n> by v0.11.0 release notes and accept these double-spends.\n> Shapeshift.io lost ~3 BTC this week in multiple txs. (they're no\n> longer accepting zeroconf)\n> \n> Example success story #2: tx1 with post-Hearn-relay drop fee,\n> followed by tx2 with higher fee. Such stupidly low fee txs just\n> don't get mined, so wait for a miner to mine tx2. Bought a silly\n> amount of reddit gold off Coinbase this way among other things. I'm\n> surprised that reddit didn't cancel the \"fools-gold\" after tx\n> reversal. (did Coinbase guarantee those txs?) Also found multiple\n> Bitcoin ATMs vulnerable to this attack. (but simulated attack with\n> tx2s still paying ATM because didn't want to go to trouble of good\n> phys opsec)\n> \n> Shoutouts to BitPay who did things right and notified merchant\n> properly when tx was reversed.\n> \n> In summary, every target depending on zeroconf vulnerable and lost \n> significant sums of money to totally trivial attacks with high \n> probability. No need for RBF to do this, just normal variations in\n> miner policy. Shapeshift claims to use Super Sophisticated Network\n> Sybil Attacking Monitoring from Blockcypher, but relay nodes !=\n> miner policy.\n> \n> Consider yourself warned! My hat is whiter than most, and my skills\n> not particularly good.\n> \n> What to do? Users: Listen to the experts and stop relying on\n> zeroconf. Black hats: Profit!\n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nArne Brutschy <abrutschy at xylon.de>"
            },
            {
                "author": "Me",
                "date": "2015-07-16T14:50:16",
                "message_text_only": "> minrelaytxfee setting proposed in the 0.11.0 release notes\n\nmy guess, he is talking about this https://bitcoin.org/en/glossary/minimum-relay-fee <https://bitcoin.org/en/glossary/minimum-relay-fee> - slam dunk technique for doublespend\n\n\n\n> Related: is there somewhere a chart that plots `estimatefee` over\n> time? Would be interesting to see how the fee market evolved over\n> these past weeks.\n\nI find this useful\nhttps://bitcoinfees.github.io/ <https://bitcoinfees.github.io/>\n\n\n\n\n\n> On Jul 16, 2015, at 7:30 AM, Arne Brutschy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Hello,\n> \n> What are these pre- and post-Hearn-relay drop rules you are speaking\n> about? Can anybody shed some light on this? (I am aware of the\n> minrelaytxfee setting proposed in the 0.11.0 release notes, I just\n> don't see what this has to do with Mike Hearn, BitcoinXT, and whether\n> there's a code change related to this that I missed).\n> \n> Related: is there somewhere a chart that plots `estimatefee` over\n> time? Would be interesting to see how the fee market evolved over\n> these past weeks.\n> \n> Regards\n> Arne\n> \n> On 15/07/15 05:29, simongreen--- via bitcoin-dev wrote:\n>> With my black hat on I recently performed numerous profitable \n>> double-spend attacks against zeroconf accepting fools. With my\n>> white hat on, I'm warning everyone. The strategy is simple:\n>> \n>> tx1: To merchant, but dust/low-fee/reused-address/large-size/etc. \n>> anything that miners don't always accept.\n>> \n>> tx2: After merchant gives up valuable thing in return, normal tx\n>> without triggering spam protections. (loltasticly a Mike Hearn\n>> Bitcoin XT node was used to relay the double-spends)\n>> \n>> Example success story: tx1 paying Shapeshift.io with 6uBTC output\n>> is not dust under post-Hearn-relay-drop rules, but is dust under \n>> pre-Hearn-relay-drop rules, followed by tx2 w/o the output and not \n>> paying Shapeshift.io. F2Pool/Eligius/BTCChina/AntPool etc. are all \n>> miners who have reverted Hearn's 10x relay fee drop as recommended\n>> by v0.11.0 release notes and accept these double-spends.\n>> Shapeshift.io lost ~3 BTC this week in multiple txs. (they're no\n>> longer accepting zeroconf)\n>> \n>> Example success story #2: tx1 with post-Hearn-relay drop fee,\n>> followed by tx2 with higher fee. Such stupidly low fee txs just\n>> don't get mined, so wait for a miner to mine tx2. Bought a silly\n>> amount of reddit gold off Coinbase this way among other things. I'm\n>> surprised that reddit didn't cancel the \"fools-gold\" after tx\n>> reversal. (did Coinbase guarantee those txs?) Also found multiple\n>> Bitcoin ATMs vulnerable to this attack. (but simulated attack with\n>> tx2s still paying ATM because didn't want to go to trouble of good\n>> phys opsec)\n>> \n>> Shoutouts to BitPay who did things right and notified merchant\n>> properly when tx was reversed.\n>> \n>> In summary, every target depending on zeroconf vulnerable and lost \n>> significant sums of money to totally trivial attacks with high \n>> probability. No need for RBF to do this, just normal variations in\n>> miner policy. Shapeshift claims to use Super Sophisticated Network\n>> Sybil Attacking Monitoring from Blockcypher, but relay nodes !=\n>> miner policy.\n>> \n>> Consider yourself warned! My hat is whiter than most, and my skills\n>> not particularly good.\n>> \n>> What to do? Users: Listen to the experts and stop relying on\n>> zeroconf. Black hats: Profit!\n>> \n>> _______________________________________________ bitcoin-dev mailing\n>> list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> -- \n> Arne Brutschy <abrutschy at xylon.de>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/591bbb75/attachment.html>"
            },
            {
                "author": "Greg Schvey",
                "date": "2015-07-16T15:33:48",
                "message_text_only": "Simon - tx hashes or it didn't happen\n\nKidding aside, would be great if you could share the confirmed and\ndouble-spent hashes so the rest of us can dive in and learn from this.\n\nOn Thu, Jul 16, 2015 at 7:50 AM, Me via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> minrelaytxfee setting proposed in the 0.11.0 release notes\n>\n> my guess, he is talking about this\n> https://bitcoin.org/en/glossary/minimum-relay-fee - slam dunk technique\n> for doublespend\n>\n>\n>\n> Related: is there somewhere a chart that plots `estimatefee` over\n> time? Would be interesting to see how the fee market evolved over\n> these past weeks.\n>\n>\n> I find this useful\n> https://bitcoinfees.github.io/\n>\n>\n>\n>\n>\n> On Jul 16, 2015, at 7:30 AM, Arne Brutschy via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hello,\n>\n> What are these pre- and post-Hearn-relay drop rules you are speaking\n> about? Can anybody shed some light on this? (I am aware of the\n> minrelaytxfee setting proposed in the 0.11.0 release notes, I just\n> don't see what this has to do with Mike Hearn, BitcoinXT, and whether\n> there's a code change related to this that I missed).\n>\n> Related: is there somewhere a chart that plots `estimatefee` over\n> time? Would be interesting to see how the fee market evolved over\n> these past weeks.\n>\n> Regards\n> Arne\n>\n> On 15/07/15 05:29, simongreen--- via bitcoin-dev wrote:\n>\n> With my black hat on I recently performed numerous profitable\n> double-spend attacks against zeroconf accepting fools. With my\n> white hat on, I'm warning everyone. The strategy is simple:\n>\n> tx1: To merchant, but dust/low-fee/reused-address/large-size/etc.\n> anything that miners don't always accept.\n>\n> tx2: After merchant gives up valuable thing in return, normal tx\n> without triggering spam protections. (loltasticly a Mike Hearn\n> Bitcoin XT node was used to relay the double-spends)\n>\n> Example success story: tx1 paying Shapeshift.io <http://shapeshift.io>\n> with 6uBTC output\n> is not dust under post-Hearn-relay-drop rules, but is dust under\n> pre-Hearn-relay-drop rules, followed by tx2 w/o the output and not\n> paying Shapeshift.io <http://shapeshift.io>.\n> F2Pool/Eligius/BTCChina/AntPool etc. are all\n> miners who have reverted Hearn's 10x relay fee drop as recommended\n> by v0.11.0 release notes and accept these double-spends.\n> Shapeshift.io <http://shapeshift.io> lost ~3 BTC this week in multiple\n> txs. (they're no\n> longer accepting zeroconf)\n>\n> Example success story #2: tx1 with post-Hearn-relay drop fee,\n> followed by tx2 with higher fee. Such stupidly low fee txs just\n> don't get mined, so wait for a miner to mine tx2. Bought a silly\n> amount of reddit gold off Coinbase this way among other things. I'm\n> surprised that reddit didn't cancel the \"fools-gold\" after tx\n> reversal. (did Coinbase guarantee those txs?) Also found multiple\n> Bitcoin ATMs vulnerable to this attack. (but simulated attack with\n> tx2s still paying ATM because didn't want to go to trouble of good\n> phys opsec)\n>\n> Shoutouts to BitPay who did things right and notified merchant\n> properly when tx was reversed.\n>\n> In summary, every target depending on zeroconf vulnerable and lost\n> significant sums of money to totally trivial attacks with high\n> probability. No need for RBF to do this, just normal variations in\n> miner policy. Shapeshift claims to use Super Sophisticated Network\n> Sybil Attacking Monitoring from Blockcypher, but relay nodes !=\n> miner policy.\n>\n> Consider yourself warned! My hat is whiter than most, and my skills\n> not particularly good.\n>\n> What to do? Users: Listen to the experts and stop relying on\n> zeroconf. Black hats: Profit!\n>\n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> --\n> Arne Brutschy <abrutschy at xylon.de>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150716/127ff899/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-18T11:43:14",
                "message_text_only": ">\n> What are these pre- and post-Hearn-relay drop rules you are speaking\n> about?\n\n\nHe's talking about patches I didn't even write (Gavin and Tom did), but\nhave included in Bitcoin XT:\n\n   https://github.com/bitcoinxt/bitcoinxt\n\nSee the README section starting with \"Relaying of double spends\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150718/b7e23feb/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-18T15:09:40",
                "message_text_only": "On Sat, Jul 18, 2015 at 01:43:14PM +0200, Mike Hearn via bitcoin-dev wrote:\n> >\n> > What are these pre- and post-Hearn-relay drop rules you are speaking\n> > about?\n> \n> \n> He's talking about patches I didn't even write (Gavin and Tom did), but\n> have included in Bitcoin XT:\n\nNo, he's talking about the min-relay-fee drop that you wrote:\n\nhttps://github.com/bitcoin/bitcoin/pull/3305\n\nBased on what I saw in my logs, the double-spends were mainly being done\nby exploiting the fact that much of the hashing power has reverted your\n10x relay fee drop as it makes wasting bandwidth and mempool RAM easy.\n(so much so that crashing nodes with OOM's is fairly cheap)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a56b9b96af356cc8411cea940bb6c25b9cd934f99f9e174\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150718/8b71fb8e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Significant losses by double-spending unconfirmed transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Arne Brutschy",
                "Bastiaan van den Berg",
                "Milly Bitcoin",
                "Mike Hearn",
                "Peter Todd",
                "Pieter Wuille",
                "Matthieu Riou",
                "Me",
                "Greg Schvey",
                "simongreen at airmail.cc",
                "Adrian Macneil",
                "Tom Harding"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 49980
        }
    },
    {
        "title": "[bitcoin-dev] BIP0074 Draft (Dynamic Rate Lookup)",
        "thread_messages": [
            {
                "author": "David Barnes | Bitcoin Co. Ltd.",
                "date": "2015-07-17T02:26:01",
                "message_text_only": "Please take a look at my BIP0074 draft proposal (this is my first one so\nmay be incorrectly formatted)\nhttps://github.com/bitcoincoltd/bips/blob/master/bip-0074.mediawiki\n\nThis proposal will make it possible for a simpler form of Bitcoin\npayment at physical shop locations.\n\nCurrently when making a Bitcoin payment at a shop the merchant needs to\nhave an app of some kind so that they can calculate the amount of\nbitcoins you need to pay them to cover your purchase (of for example:\n$9.99).\n\nThe problem is that many employees are not properly trained on the\nBitcoin app, or the owner is the one with the app and he is often not\nthere.  When visiting \"Bitcoin Accepting\" estabishments you will often\nrun into this problem.  The businesses often don't get enough Bitcoin\nbusiness to warrant training sessions or dedicate hardware to run the app.\n\nA simpler way to accept payments would be for the merchant to have a\nfixed QR code, and no app at all.  However a printed QR code can't\ncalculate any exchange rates, and so it would be up to the customer to\nchoose how much to pay.\n\nThis can be result in some problems as the customer may be using their\ndefault wallet exchange rates, or their preferred international\nexchange. While the merchant may be actually using a local exchange or\nservice to exchange the coins to local currency, and there may be some\ndiscrepancy between what the customer thinks the rate should be and what\nthe merchant thinks the rate should be.\n\nEnter BIP0074, so that the merchant can specify which exchange rates\nthey are using, and the customer and then look up the rates from this\nsource and pay according to these rates.\n\nDavid Barnes"
            },
            {
                "author": "David Barnes | Bitcoin Co. Ltd.",
                "date": "2015-07-17T03:30:56",
                "message_text_only": "There are a number of services that offer Bitcoin payment notification\nvia SMS.\n\nIf the cashier only has a dumb-phone (or smart phone without Bitcoin\napp) they can receive notification of the payment...all without any need\nfor an app or internet access.\n\nI envision that their dynamic rate provider will also be offer the SMS\nnotification service; but independent services are also available.\n\nDavid Barnes\n\nOn 7/17/2015 10:21 AM, Paul Rabahy wrote:\n> The biggest hole I see in this scheme is how does the cashier verify\n> that the payment has been made successfully? If both the cashier and\n> the customer need to scan this new QR code, how is that any better\n> than just the cashier scanning the QR code and showing the customer an\n> aggregate QR code.\n>\n> I understand wanting to make IRL bitcoin purchases easier, but I do\n> not believe that this proposal will actually help.\n>"
            },
            {
                "author": "David Barnes | Bitcoin Co. Ltd.",
                "date": "2015-07-17T08:50:55",
                "message_text_only": "I picked up the next available number myself, but can be changed to \nanything, the 74 is unimportant to the proposal.\n\nDavid Barnes\n\nOn 7/17/2015 2:54 PM, Micha Bailey wrote:\n> Did Greg assign this number? He didn't do it here on the ML. You're \n> not supposed to use arbitrary numbers, certainly not numbers that are \n> close/similar to ones already assigned.\n>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-17T12:24:24",
                "message_text_only": "You should rename your file to something like \"bip-draft-dynamic-rate-lookup\". Using an arbitrary BIP number will cause confusion when that BIP number is actually assigned later.\n\n\nOn Friday, 17 July 2015, at 3:50 pm, David Barnes | Bitcoin Co. Ltd. via bitcoin-dev wrote:\n> I picked up the next available number myself, but can be changed to \n> anything, the 74 is unimportant to the proposal.\n> \n> David Barnes\n> \n> On 7/17/2015 2:54 PM, Micha Bailey wrote:\n> > Did Greg assign this number? He didn't do it here on the ML. You're \n> > not supposed to use arbitrary numbers, certainly not numbers that are \n> > close/similar to ones already assigned.\n> >\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "David Barnes | Bitcoin Co. Ltd.",
                "date": "2015-07-17T12:40:58",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/bfe1409e/attachment.html>"
            },
            {
                "author": "David Barnes | Bitcoin Co. Ltd.",
                "date": "2015-07-17T15:47:24",
                "message_text_only": "Thomas,\n\nLet me answer your questions below; but let me give you a little preface\nabout how I envision the full cycle working.\n\nMy company has setup a service here:  https://coinpay.in.th/services/print/\nThe service will work as follows:\n\n- Merchants print out a QR code with address (and hopefully a DRL URL too)\n- When customers wish to pay Bitcoin they scan the QR code pay the\namount the merchant tells them (such as \"This kebab is 235 Thai Baht\")\n- Merchant / Staff instantly receive an SMS that payment is received\n\nBut currently the customers wallet does not have DRL, so will not give\nthe exact same exchange rate that we are giving the merchant, so that\nthe amount the merchant receives will not be the exact 235 Thai Baht\nthat they requested, but maybe 225, or 242.24 etc...as the customers is\ncurrently picking any exchange basically out of thin air.\n\nWith this BIP it would allow the customer's wallet to know the exact\nrate that merchant is receiving, therefore when the merchant requests\n\"235 Thai Baht\" they actually receive exactly 235 Thai Baht.\n\nBut why do this?  Apps work fine; smart phones are fine, merchants are\ncurrently fine.\nIn my experience (running a merchant service, and exchange in Thailand\nfor 2 years and hosting 80+ Bitcoin meetup events) currently merchants\nare not fine.  Almost everyone I meet at the meetups has been traveling\naround looking for places to pay Bitcoin, only to find that when the ask\nfor the bill \"the own (aka the only guy in the place interested in\nBitcoin) is not here\".\n\nPushing the angle of trying to get the merchants to properly train their\nstaff, or have a dedicated Bitcoin accepting phone/tablet is making\nalmost no progress, so we can trying to tackle the problem from a\ndifferent angle and come up with something that requires no training,\nand no owner (Bitcoin interested guy) to be there.\n\nBut for it to work really seamlessly the merchant and customer need to\nbe on the same page with regards to the exchange rating being used.\n\nAnd now to answer your questions:\n\n> (0) Stores don't usually have any control of their exchange rate.\n> Normally they rely on a service provider to do that, who decides the\n> Bitcoin amount. This by design side-steps customers being able to\n> enter a dollar amount (they get a BTC amount), or staff wondering how\n> much bitcoin to charge (because they enter a dollar amount).\nThis BIP assumes that the staff do not have any app.  They are just\nringing up the customer in their standard POS and telling the customer\nthe fiat amount they must pay.\nAlso assumes that the merchant is going to be moving the coins to a\nservice or exchange to convert so need to use the rates from that\nservice/exchange.\n\n> (1) \"A simpler way to accept payments would be for the merchant to\n> have a fixed QR code, and no app at all.\"\n>\n> But then, how do they know that a payment took place at all? Trust\n> that the buyers app isn't showing a screenshot with the stores\n> [static] address, that the buyer may know from a previous encounter?\n>\nIn the service we are running there will be an SMS notification sent to\nthe staff.  There are also a number of services that provide SMS\nnotification upon Bitcoin transactions to a specific address.\nBut also in some cases they may just be willing to trust the customer;\nespecially for small food items, or repeat customers etc...\n\n> (2) I suppose a DRP is required also provide historic access to\n> pricing data? I don't see any mention of this in the BIP, but it\n> appears necessary to allow the merchant to reconcile payments whenever\n> they get online.\n>\n> (This could be a service each DRP provides - \"we'll log all\n> transactions to your stores offline address, and show you the supposed\n> value according to us at this time\". Without something like this, the\n> merchant will end up using Blockchain.info who have their OWN exchange\n> rates, compounding the issue)\n>\nYes the DRP may provide historical rates.  Or in the case of our service\nan order is created in our system and rate is saved at the moment the\nunconfirmed Bitcoin transaction is received.\nBut this is outside the scope of this BIP, which is simply to lookup the\ncurrent spot rate the DRP is offering.\n\n> (3) You're certainly right that requesting dollar amounts from\n> customers leads to problems, but, assuming an offline store (no app,\n> or no Internet perhaps), how can they be certain that the payment went\n> through, or that it was paid at the correct amount?\nWith our service the merchant will receive an SMS that payment is been\ncompleted, and the amount of the payment (in the fiat currency)\nBut this is outside the scope of the actual BIP as the merchant is free\nto use whatever method they want to get notified of a payment.\n\n> I'm curious what use case you have that warrants such a setup? It\n> seems to lead to difficulties for the merchant:\n>\n>  (i) identifying the origin of a payment.\nThis is somewhat outside of the scope of the BIP, but within our service\nit would be quite easy for them to match up orders in our system with\nreceipts from their POS seeing as an order is received in our system at\nthe first moment the unconfirmed transaction appears.  And with DRL it\nshould match the exact fiat amount they requested.\n\n>  (ii) identifying what payment went missing, from months ago. \nI'm unclear why a payment would go missing, unless you are referring to\ndouble spends, or Bitcoin transactions sent with insufficient fees?  In\nthis case our service would provide a warning that the transaction was\nunlikely to confirm.\n\n>  (iii) what if the transaction took a day to confirm. (The exchange\n> rate can change in the time between the customer /sending/ the funds,\n> and the funds actually /confirming /and being recorded at the DRP's\n> rate for that time. Ie, DRP notices a payment on the merchants\n> address. The market rate now sees this as $47.39, even though it was\n> originally sent for 50$ by the payer)\nIn the case of our service the rate is locked at the moment of the\nunconfirmed transaction, so not an issue.\n\n> My main issue is that each of these problems would go away if\n> merchants just had an internet connection, which seems a must to use\n> bitcoin.\n>\nIt's not so much an issue with not having internet, it's more the issue\nof not being properly trained on how to use the apps/internet.  And even\nwith training the staff are easily going to forget if they don't see a\nBitcoin customer for several weeks at a time.\n\nThis is based on a lot of first hand experience and feedback from\nBitcoin customers and merchants...based on other stories I hear from\npeople trying to pay with Bitcoin at physical locations I don't think\nthis issue is isolated to Thailand only."
            }
        ],
        "thread_summary": {
            "title": "BIP0074 Draft (Dynamic Rate Lookup)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Matt Whitlock",
                "David Barnes | Bitcoin Co. Ltd."
            ],
            "messages_count": 6,
            "total_messages_chars_count": 10575
        }
    },
    {
        "title": "[bitcoin-dev] BIP 102 - kick the can down the road to 2MB",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-07-17T15:55:19",
                "message_text_only": "Opening a mailing list thread on this BIP:\n\nBIP PR: https://github.com/bitcoin/bips/pull/173\nCode PR: https://github.com/bitcoin/bitcoin/pull/6451\n\nThe general intent of this BIP is as a minimum viable alternative plan to\nmy preferred proposal (BIP 100).\n\nIf agreement is not reached on a more comprehensive solution, then this\nsolution is at least available and a known quantity.  A good backup plan.\n\nBenefits:  conservative increase.  proves network can upgrade.  permits\nsome added growth, while the community & market gathers data on how an\nincreased block size impacts privacy, security, centralization, transaction\nthroughput and other metrics.  2MB seems to be a Least Common Denominator\non an increase.\n\nCosts:  requires a hard fork.  requires another hard fork down the road.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/f81af759/attachment.html>"
            },
            {
                "author": "Andrew",
                "date": "2015-07-17T16:11:17",
                "message_text_only": "What are you trying to do? Break the ice with a hard fork so that later it\nbecomes easier to do so, with people more complacent towards it? There are\nmany solutions to the scaling problem that do not require a hard fork and\nare quite simple to implement actually, and don't come with the\ncomplications involved with a hard fork. I'm not a reputable developer on\nthis list, so my opinion probably doesn't matter much, but I watched and\nanalyzed this situation closely and I don't like this idea.\n\nOn Fri, Jul 17, 2015 at 3:55 PM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Opening a mailing list thread on this BIP:\n>\n> BIP PR: https://github.com/bitcoin/bips/pull/173\n> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>\n> The general intent of this BIP is as a minimum viable alternative plan to\n> my preferred proposal (BIP 100).\n>\n> If agreement is not reached on a more comprehensive solution, then this\n> solution is at least available and a known quantity.  A good backup plan.\n>\n> Benefits:  conservative increase.  proves network can upgrade.  permits\n> some added growth, while the community & market gathers data on how an\n> increased block size impacts privacy, security, centralization, transaction\n> throughput and other metrics.  2MB seems to be a Least Common Denominator\n> on an increase.\n>\n> Costs:  requires a hard fork.  requires another hard fork down the road.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nPGP: B6AC 822C 451D 6304 6A28  49E9 7DB7 011C D53B 5647\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/540d1554/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-17T16:12:05",
                "message_text_only": "Transaction sizes are still limited to 1MB with this patch.  While this\nisn't technically a change, it does mean that both are no longer linked\ntogether.\n\nSince this has no voting step, I assume the intention is that as a\ncompromise suggestion, it would have full support.\n\nIt establishes a precedent for hard forks not to require a vote though.\n\nOn Fri, Jul 17, 2015 at 4:55 PM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Opening a mailing list thread on this BIP:\n>\n> BIP PR: https://github.com/bitcoin/bips/pull/173\n> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>\n> The general intent of this BIP is as a minimum viable alternative plan to\n> my preferred proposal (BIP 100).\n>\n> If agreement is not reached on a more comprehensive solution, then this\n> solution is at least available and a known quantity.  A good backup plan.\n>\n> Benefits:  conservative increase.  proves network can upgrade.  permits\n> some added growth, while the community & market gathers data on how an\n> increased block size impacts privacy, security, centralization, transaction\n> throughput and other metrics.  2MB seems to be a Least Common Denominator\n> on an increase.\n>\n> Costs:  requires a hard fork.  requires another hard fork down the road.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/1858d303/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-17T16:14:13",
                "message_text_only": "On Fri, Jul 17, 2015 at 5:12 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> While this isn't technically a change, it does mean that both are no\n> longer linked together.\n>\n\nI meant both block and transaction sizes are no longer linked together.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/2fcef783/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-17T17:57:47",
                "message_text_only": "I'd back this if we can't find a permanent solution - 2MB gives us a lot \nmore wiggle room in the interim at least; one of my concerns with block \nsize is 3 transactions per second is absolutely tiny, and we need space \nfor the network to search for an equilibrium between volume and pricing \nwithout risk of an adoption spike rendering it essentially unusable.\n\nI'd favour switching over by block height rather than time, and I'd \nsuggest that given virtually every wallet/node out there will require \ntesting (even if many do not currently enforce a limit and therefore do \nnot need changing), 6 months should be considered a minimum target. I'd \nopen with a suggestion of block 390k as a target.\n\nRoss\n\nOn 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n> Opening a mailing list thread on this BIP:\n>\n> BIP PR: https://github.com/bitcoin/bips/pull/173\n> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>\n> The general intent of this BIP is as a minimum viable alternative plan \n> to my preferred proposal (BIP 100).\n>\n> If agreement is not reached on a more comprehensive solution, then \n> this solution is at least available and a known quantity.  A good \n> backup plan.\n>\n> Benefits:  conservative increase.  proves network can upgrade. \n>  permits some added growth, while the community & market gathers data \n> on how an increased block size impacts privacy, security, \n> centralization, transaction throughput and other metrics.  2MB seems \n> to be a Least Common Denominator on an increase.\n>\n> Costs:  requires a hard fork.  requires another hard fork down the road.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/2d34be24/attachment.html>"
            },
            {
                "author": "Chris Wardell",
                "date": "2015-07-17T19:06:33",
                "message_text_only": "I would prefer a dynamic solution that did not necessitate a second hard\nfork down the road.\n\nI propose doubling the block size every 100k blocks (~2 years)\n\nblock 400,000 = 2MB (2016)\nblock 500,000 = 4MB (2017)\nblock 600,000 = 8MB (2018)\n\nChris\n\n\nOn Fri, Jul 17, 2015 at 1:57 PM, Ross Nicoll via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>  I'd back this if we can't find a permanent solution - 2MB gives us a lot\n> more wiggle room in the interim at least; one of my concerns with block\n> size is 3 transactions per second is absolutely tiny, and we need space for\n> the network to search for an equilibrium between volume and pricing without\n> risk of an adoption spike rendering it essentially unusable.\n>\n> I'd favour switching over by block height rather than time, and I'd\n> suggest that given virtually every wallet/node out there will require\n> testing (even if many do not currently enforce a limit and therefore do not\n> need changing), 6 months should be considered a minimum target. I'd open\n> with a suggestion of block 390k as a target.\n>\n> Ross\n>\n>\n> On 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n>\n>  Opening a mailing list thread on this BIP:\n>\n>  BIP PR: https://github.com/bitcoin/bips/pull/173\n> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>\n>  The general intent of this BIP is as a minimum viable alternative plan\n> to my preferred proposal (BIP 100).\n>\n>  If agreement is not reached on a more comprehensive solution, then this\n> solution is at least available and a known quantity.  A good backup plan.\n>\n>  Benefits:  conservative increase.  proves network can upgrade.  permits\n> some added growth, while the community & market gathers data on how an\n> increased block size impacts privacy, security, centralization, transaction\n> throughput and other metrics.  2MB seems to be a Least Common Denominator\n> on an increase.\n>\n>  Costs:  requires a hard fork.  requires another hard fork down the road.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing listbitcoin-dev at lists.linuxfoundation.orghttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/5e09fdb8/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-17T19:13:14",
                "message_text_only": "I'll leave others to comment on whether we can get consensus on that, \nbut your years listed are inconsistent with everything else you've \nwritten. Should be:\n\nblock 400,000 = 2MB (2016)\nblock 500,000 = 4MB (2018)\nblock 600,000 = 8MB (2020)\n\nOn 17/07/2015 20:06, Chris Wardell via bitcoin-dev wrote:\n> I would prefer a dynamic solution that did not necessitate a second \n> hard fork down the road.\n>\n> I propose doubling the block size every 100k blocks (~2 years)\n>\n> block 400,000 = 2MB (2016)\n> block 500,000 = 4MB (2017)\n> block 600,000 = 8MB (2018)\n>\n> Chris\n>\n>\n> On Fri, Jul 17, 2015 at 1:57 PM, Ross Nicoll via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     I'd back this if we can't find a permanent solution - 2MB gives us\n>     a lot more wiggle room in the interim at least; one of my concerns\n>     with block size is 3 transactions per second is absolutely tiny,\n>     and we need space for the network to search for an equilibrium\n>     between volume and pricing without risk of an adoption spike\n>     rendering it essentially unusable.\n>\n>     I'd favour switching over by block height rather than time, and\n>     I'd suggest that given virtually every wallet/node out there will\n>     require testing (even if many do not currently enforce a limit and\n>     therefore do not need changing), 6 months should be considered a\n>     minimum target. I'd open with a suggestion of block 390k as a target.\n>\n>     Ross\n>\n>\n>     On 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n>>     Opening a mailing list thread on this BIP:\n>>\n>>     BIP PR: https://github.com/bitcoin/bips/pull/173\n>>     Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>>\n>>     The general intent of this BIP is as a minimum viable alternative\n>>     plan to my preferred proposal (BIP 100).\n>>\n>>     If agreement is not reached on a more comprehensive solution,\n>>     then this solution is at least available and a known quantity.  A\n>>     good backup plan.\n>>\n>>     Benefits:  conservative increase.  proves network can upgrade.\n>>      permits some added growth, while the community & market gathers\n>>     data on how an increased block size impacts privacy, security,\n>>     centralization, transaction throughput and other metrics.  2MB\n>>     seems to be a Least Common Denominator on an increase.\n>>\n>>     Costs:  requires a hard fork.  requires another hard fork down\n>>     the road.\n>>\n>>\n>>\n>>\n>>     _______________________________________________\n>>     bitcoin-dev mailing list\n>>     bitcoin-dev at lists.linuxfoundation.org\n>>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/201c99fb/attachment-0001.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-19T22:51:07",
                "message_text_only": "Further to that - please disregard what I said about using block height. \nHad failed to realise that in using contextual information (block \nheight) it complicates block validation (i.e. it would be impossible to \ntell if a block is too big, without having all previous blocks first). \nBlock time is in fact the better option.\n\nRoss\n\nOn 17/07/2015 18:57, Ross Nicoll via bitcoin-dev wrote:\n> I'd back this if we can't find a permanent solution - 2MB gives us a \n> lot more wiggle room in the interim at least; one of my concerns with \n> block size is 3 transactions per second is absolutely tiny, and we \n> need space for the network to search for an equilibrium between volume \n> and pricing without risk of an adoption spike rendering it essentially \n> unusable.\n>\n> I'd favour switching over by block height rather than time, and I'd \n> suggest that given virtually every wallet/node out there will require \n> testing (even if many do not currently enforce a limit and therefore \n> do not need changing), 6 months should be considered a minimum target. \n> I'd open with a suggestion of block 390k as a target.\n>\n> Ross\n>\n> On 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n>> Opening a mailing list thread on this BIP:\n>>\n>> BIP PR: https://github.com/bitcoin/bips/pull/173\n>> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>>\n>> The general intent of this BIP is as a minimum viable alternative \n>> plan to my preferred proposal (BIP 100).\n>>\n>> If agreement is not reached on a more comprehensive solution, then \n>> this solution is at least available and a known quantity.  A good \n>> backup plan.\n>>\n>> Benefits:  conservative increase.  proves network can upgrade. \n>>  permits some added growth, while the community & market gathers data \n>> on how an increased block size impacts privacy, security, \n>> centralization, transaction throughput and other metrics.  2MB seems \n>> to be a Least Common Denominator on an increase.\n>>\n>> Costs:  requires a hard fork.  requires another hard fork down the road.\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150719/f1ee52d6/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-21T09:26:35",
                "message_text_only": "I still disagree. Using height instead of time may make the\nimplementation more complex by requiring some additional preparations\nbut using height is in fact a simpler design. Why relay on clocks that\nwe know will differ in different computers and places when we have a\nuniversal tick with every block?\n\nBtw, BIP16 and BIP34 could be changed to height-based activation\nalready. BIP16 simply should have used height instead of time from the\nbeginning.\n\nOn Mon, Jul 20, 2015 at 12:51 AM, Ross Nicoll via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Further to that - please disregard what I said about using block height. Had\n> failed to realise that in using contextual information (block height) it\n> complicates block validation (i.e. it would be impossible to tell if a block\n> is too big, without having all previous blocks first). Block time is in fact\n> the better option.\n>\n> Ross\n>\n>\n> On 17/07/2015 18:57, Ross Nicoll via bitcoin-dev wrote:\n>\n> I'd back this if we can't find a permanent solution - 2MB gives us a lot\n> more wiggle room in the interim at least; one of my concerns with block size\n> is 3 transactions per second is absolutely tiny, and we need space for the\n> network to search for an equilibrium between volume and pricing without risk\n> of an adoption spike rendering it essentially unusable.\n>\n> I'd favour switching over by block height rather than time, and I'd suggest\n> that given virtually every wallet/node out there will require testing (even\n> if many do not currently enforce a limit and therefore do not need\n> changing), 6 months should be considered a minimum target. I'd open with a\n> suggestion of block 390k as a target.\n>\n> Ross\n>\n> On 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n>\n> Opening a mailing list thread on this BIP:\n>\n> BIP PR: https://github.com/bitcoin/bips/pull/173\n> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>\n> The general intent of this BIP is as a minimum viable alternative plan to my\n> preferred proposal (BIP 100).\n>\n> If agreement is not reached on a more comprehensive solution, then this\n> solution is at least available and a known quantity.  A good backup plan.\n>\n> Benefits:  conservative increase.  proves network can upgrade.  permits some\n> added growth, while the community & market gathers data on how an increased\n> block size impacts privacy, security, centralization, transaction throughput\n> and other metrics.  2MB seems to be a Least Common Denominator on an\n> increase.\n>\n> Costs:  requires a hard fork.  requires another hard fork down the road.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-21T13:04:12",
                "message_text_only": "On Tue, Jul 21, 2015 at 11:26:35AM +0200, Jorge Tim\u00f3n via bitcoin-dev wrote:\n> I still disagree. Using height instead of time may make the\n> implementation more complex by requiring some additional preparations\n> but using height is in fact a simpler design. Why relay on clocks that\n> we know will differ in different computers and places when we have a\n> universal tick with every block?\n\nThe Bitcoin protocol fundementally uses time in a consensus-critical\nmanner anyway; miners vote on what time it is via the median time\nmechanism.\n\nTriggering events based on median time is compatable with consensus and\ngives more human scale predictability as to when events may happen. In\naddition the median time is guaranteed to be monotonic by the consensus\nrules.\n\nSee the version bits proposal for an example of its use:\n\nhttps://gist.github.com/sipa/bf69659f43e763540550#Specification\n\n\nHaving said that, in general triggering events without verifying a\nsupermajority of miner support can be very dangerous. Without miner\nsupport the chain is insecure, and can be attacked. For instance a\nblocksize limit increase that a majority of miners choose not to\nimplement raises huge risks of reorg for any miners who attempt to\ncreate large blocks, and huge risks of payment reversal for any\nmerchants accepting transactions in such blocks. Note how with BIP102,\nextending the original Bitcoin chain is inherently an attack on the\nGarzik chain.\n\nFor that reason I think BIP102 is extremely poorly designed. I can only\nconclude that Jeff Garzik is either deliberately trolling us and/or\nmanipulating discussion with a badly designed proposal that he doesn't\nactually expect to be adopted verbatim, or is incompetent.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000031c12b6af038524fd5dd28115b7f5591e046423cebaf6d1\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150721/46dd463a/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-21T13:58:46",
                "message_text_only": "On Tue, Jul 21, 2015 at 09:04:12AM -0400, Peter Todd via bitcoin-dev wrote:\n> For that reason I think BIP102 is extremely poorly designed. I can only\n> conclude that Jeff Garzik is either deliberately trolling us and/or\n> manipulating discussion with a badly designed proposal that he doesn't\n> actually expect to be adopted verbatim, or is incompetent.\n\nExpanding on that a bit:\n\nOn Tue, Jul 21, 2015 at 09:14:26PM +0800, Jeremy Rubin wrote:\n> unsolicited feedback:\n>\n> I'd send a quick apology for this bit\n>\n> \"\"\"\n> For that reason I think BIP102 is extremely poorly designed. I can only\n> conclude that Jeff Garzik is either deliberately trolling us and/or\n> manipulating discussion with a badly designed proposal that he doesn't\n> actually expect to be adopted verbatim, or is incompetent.\n> \"\"\"\n>\n> it's a little over the top.\n>\n> I think that Garzik is probably releasing it in reaction to the fact\n> certain people are only looking at something with code attached.\n>\n> No need to call someone stupid for sharing a proposal... although it seems\n> sketchy that he got a BIP # for this. You want to foster a less hostile\n> community...\n\nI don't agree with you at all.\n\nThis is a case where if Jeff doesn't understand that issue, he's\nproposing changes that he's not competent enough to understand, and it'd\nsave us a lot of review effort if he left that discussion. Equally, Jeff\nis in a position in the dev community where he should be that competent;\nif he actually isn't it does a lot of good for the broader community to\nchange that opinion.\n\nI personally *don't* think he's doing that, rather I believe he knows\nfull well it's a bad patch and is proposing it because he wants to push\ndiscussion towards a solution. Often trolling the a audience with bad\npatches is an effective way to motivate people to respond by writing\nbetter ones; Jeff has told me he often does exactly that.\n\nI think in this case we shouldn't do anything, so short-circuiting that\nprocess by pointing out what he's doing publicly makes sense.\n\nRe: BIP #'s, we explicitly have a policy of allocating them for stupid\nideas, to avoid having to be gatekeepers. Ironically that makes it\nharder to get a BIP # if you know what you're doing, because Gregory\nMaxwell will argue against you in private and delay actually allocating\none if he knows you should know better. :)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000d9cad4228c0396ff49c1de60f8ee155928eee22705f6619\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150721/2ba8accd/attachment.sig>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-22T15:51:23",
                "message_text_only": "On 7/21/2015 6:58 AM, Peter Todd via bitcoin-dev wrote:\n> Re: BIP #'s, we explicitly have a policy of allocating them for stupid \n> ideas, to avoid having to be gatekeepers. Ironically that makes it \n> harder to get a BIP # if you know what you're doing, because Gregory \n> Maxwell will argue against you in private and delay actually \n> allocating one if he knows you should know better. :)\n\nKalle asked for a BIP# for his PoP standardization proposal one month \nago.   Should he have known better?"
            },
            {
                "author": "Sriram Karra",
                "date": "2015-07-22T17:02:49",
                "message_text_only": "On Tue, Jul 21, 2015 at 7:28 PM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\n> I personally *don't* think he's doing that, rather I believe he knows\n> full well it's a bad patch and is proposing it because he wants to push\n> discussion towards a solution. Often trolling the a audience with bad\n> patches is an effective way to motivate people to respond by writing\n> better ones; Jeff has told me he often does exactly that.\n>\n> I think in this case we shouldn't do anything, so short-circuiting that\n> process by pointing out what he's doing publicly makes sense.\n>\n\nAssuming that's what Jeff is doing, how does preventing better solutions\nfrom emerging 'make sense'?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/5852b2ca/attachment.html>"
            },
            {
                "author": "Sriram Karra",
                "date": "2015-07-22T17:40:58",
                "message_text_only": "On Wed, Jul 22, 2015 at 10:32 PM, Sriram Karra <karra.etc at gmail.com> wrote:\n\n>\n> On Tue, Jul 21, 2015 at 7:28 PM, Peter Todd via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n>> I personally *don't* think he's doing that, rather I believe he knows\n>> full well it's a bad patch and is proposing it because he wants to push\n>> discussion towards a solution. Often trolling the a audience with bad\n>> patches is an effective way to motivate people to respond by writing\n>> better ones; Jeff has told me he often does exactly that.\n>>\n>> I think in this case we shouldn't do anything, so short-circuiting that\n>> process by pointing out what he's doing publicly makes sense.\n>>\n>\n> Assuming that's what Jeff is doing, how does preventing better solutions\n> from emerging 'make sense'?\n>\n\nPeter, sorry,  scratch that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/b36d6328/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-22T17:43:19",
                "message_text_only": "On Tue, Jul 21, 2015 at 6:58 AM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I don't agree with you at all.\n>\n> This is a case where if Jeff doesn't understand that issue, he's\n> proposing changes that he's not competent enough to understand, and it'd\n> save us a lot of review effort if he left that discussion. Equally, Jeff\n> is in a position in the dev community where he should be that competent;\n> if he actually isn't it does a lot of good for the broader community to\n> change that opinion.\n>\n> I personally *don't* think he's doing that, rather I believe he knows\n> full well it's a bad patch and is proposing it because he wants to push\n> discussion towards a solution. Often trolling the a audience with bad\n> patches is an effective way to motivate people to respond by writing\n> better ones; Jeff has told me he often does exactly that.\n>\n>\nmmmm kay.  Let's try to keep it technical, please.\n\n2MB is a limit that has been discussed as a viable next-step, meeting with\nthe most consensus.\n\n2MB gets beyond the 1MB hard fork issue, while still remaining within a\nsafety cap that should ensure the system does not go \"off the rails\" as\nsome has predicted.\n\nSecurity, privacy and centralization are not going to disappear at 2MB.\n\nFurther, a limited step gains valuable field data for judging whether\nfurther steps are warranted - thus informing the \"better block size\nsolution\" development process.\n\nFinally, as stated in the initial PR, it is intended as a viable fallback\nshould we reach a point of criticality where the user community feels a\nblock size increase is warranted, yet cannot reach consensus on a fancy,\nall-consuming solution be it 20MB, flexcap, BIP 100, BIP 102, etc.\n\nI am open to suggestions for improving BIP 102.  The goal is a minimum\ncomplexity fallback that others have previously agreed was a useful\nkick-the-can compromise - a static 2MB cap.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/0b2bf624/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-22T22:30:25",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nSorry, but I think you need to re-read my first message. What you've written below has nothing to do with what I actually said re: how you're BIP102 and associated pull-req doesn't measure miner consensus.\n\n\nOn 22 July 2015 13:43:19 GMT-04:00, Jeff Garzik <jgarzik at gmail.com> wrote:\n>On Tue, Jul 21, 2015 at 6:58 AM, Peter Todd via bitcoin-dev <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I don't agree with you at all.\n>>\n>> This is a case where if Jeff doesn't understand that issue, he's\n>> proposing changes that he's not competent enough to understand, and\n>it'd\n>> save us a lot of review effort if he left that discussion. Equally,\n>Jeff\n>> is in a position in the dev community where he should be that\n>competent;\n>> if he actually isn't it does a lot of good for the broader community\n>to\n>> change that opinion.\n>>\n>> I personally *don't* think he's doing that, rather I believe he knows\n>> full well it's a bad patch and is proposing it because he wants to\n>push\n>> discussion towards a solution. Often trolling the a audience with bad\n>> patches is an effective way to motivate people to respond by writing\n>> better ones; Jeff has told me he often does exactly that.\n>>\n>>\n>mmmm kay.  Let's try to keep it technical, please.\n>\n>2MB is a limit that has been discussed as a viable next-step, meeting\n>with\n>the most consensus.\n>\n>2MB gets beyond the 1MB hard fork issue, while still remaining within a\n>safety cap that should ensure the system does not go \"off the rails\" as\n>some has predicted.\n>\n>Security, privacy and centralization are not going to disappear at 2MB.\n>\n>Further, a limited step gains valuable field data for judging whether\n>further steps are warranted - thus informing the \"better block size\n>solution\" development process.\n>\n>Finally, as stated in the initial PR, it is intended as a viable\n>fallback\n>should we reach a point of criticality where the user community feels a\n>block size increase is warranted, yet cannot reach consensus on a\n>fancy,\n>all-consuming solution be it 20MB, flexcap, BIP 100, BIP 102, etc.\n>\n>I am open to suggestions for improving BIP 102.  The goal is a minimum\n>complexity fallback that others have previously agreed was a useful\n>kick-the-can compromise - a static 2MB cap.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsBl2\nAAoJEMCF8hzn9Lnc47AIAICM9pA+Jc6rkJ14U0vYqzhwTHmxuaNTXodmI1z88OKM\nzCCJQHNw/Xhy339/ZGFeUuVS/Csw275dtzZutLoZamnGnQLh9LllxYFzN8eGJkCL\nEcfo0JcyhduwUihgDfzgE++z5/Q0z5sIo+pZBNipqXW1+N0P/GAvYlHqeb9r0uXG\nccJghZUTwqzm6aySfvXVveTmp0AtjVko1jP1sTxF2pI/RIqBdMY4wEsZvmEhX7Tk\ng2iRiPWiEIYR1qETm6e5aQ/tj8W73932s15ozIM35nD5QId5qotQHTVttLAruQvl\n2Z35F79TIYDvYtnnRNWIsOyiwreH/y5c0kSUIgrjASA=\n=+jTv\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-23T05:39:20",
                "message_text_only": "Quoting Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> Sorry, but I think you need to re-read my first message. What you've  \n> written below has nothing to do with what I actually said re: how  \n> you're BIP102 and associated pull-req doesn't measure miner consensus.\n>\n>\n\nI think I have already answered this with my previous mail. If there  \nis consensus among major exchanges and merchants, the preference of  \nminers are not particularly relevant. A checkpoint could be  \nimplemented in a decentralized way to make sure miners of the original  \nchain won't be able to overtake the new chain.\n\nBitcoin has no intrinsic value. Bitcoin has value because people are  \nwilling to exchange it with something really valuable (e.g. a pizza;  \nor USD which could buy a pizza). If most bitcoin-accepting business  \nagree to follow BIP102 and ONLY BIP102, then BIP102 is THE Bitcoin,  \nand the original chain is just a dSHA256 alt-coin which one can't even  \nmerge mine with BIP102. Switching to BIP102 is the only economically  \nviable choice for miners.\n\nHaving said that, a miner voting may still be useful. It is just to  \nmake sure enough miners are ready for the change, instead of measuring  \ntheir consensus. For example, the new rule will be implemented 1) 1  \nweek after 70% of miners are ready; or 2) on 1 Feb 2016, whichever  \nhappens first.\n\nFor SPV wallets, they have to strengthen their security model after  \nthe BIP66 fork, anyway. They should be able to identify potential  \nconsensus fork in the network and stop accepting incoming txs when it  \nis in doubt. My \"version 0 flag block\" proposal could be a good  \ngeneric way to indicate a hardfork to SPV wallets. (see my previous  \nemail on this topic)"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-22T17:00:41",
                "message_text_only": "Quoting Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:\n\n>\n> Having said that, in general triggering events without verifying a\n> supermajority of miner support can be very dangerous. Without miner\n> support the chain is insecure, and can be attacked. For instance a\n> blocksize limit increase that a majority of miners choose not to\n> implement raises huge risks of reorg for any miners who attempt to\n> create large blocks, and huge risks of payment reversal for any\n> merchants accepting transactions in such blocks. Note how with BIP102,\n> extending the original Bitcoin chain is inherently an attack on the\n> Garzik chain.\n>\n> For that reason I think BIP102 is extremely poorly designed. I can only\n> conclude that Jeff Garzik is either deliberately trolling us and/or\n> manipulating discussion with a badly designed proposal that he doesn't\n> actually expect to be adopted verbatim, or is incompetent.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000031c12b6af038524fd5dd28115b7f5591e046423cebaf6d1\n\nTo avoid any risk of reorg, the hardfork may require that the first  \nblock with GetMedianTimePast() after a pre-determined time (the \"flag  \nblock\") MUST be version 0. The exception is applied ONLY to the flag  \nblock.\n\nAlternatively, the hardfork may require that the flag block MUST be  \nlarger than 1MB. Comparing with exploiting the block version, this  \ndoes not require additional exceptions in consensus rules. However,  \nminer may need to artificially inflate the size of the flag block and  \nthat could be trouble in coding. I don't have any preference.\n\nOld nodes will not accept the new chain because it violates BIP66 /  \nblock size limit. New nodes will not accept the old chain because its  \nflag block is not version 0 / not larger than 1MB.\n\nThis is actually checkpointing in a decentralized way. In that case,  \nwe can say goodbye to the old chain forever, as long as all major  \nmerchants and exchanges agree to upgrade. Miner support is less  \nrelevant. It is a no-brainer for miners to support the new chain,  \nunless they don't want to sell or spend their bitcoin, or just give up  \nmining after heavily investing in ASIC.\n\njl2012"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-21T22:05:14",
                "message_text_only": "Not so much that the implementation is difficult, as it requires context \nto validate a block size, rather than being able to validate it without \nrequiring the preceeding blocks. Yes, time on different machines may \nvary, but block time is safe to use for this, because it's a \nstraight-forward test of \"if block time is acceptable and block time is \nafter <date> then maximum block size allowed is n MB otherwise m MB\".\n\nRoss\n\nOn 21/07/2015 10:26, Jorge Tim\u00f3n wrote:\n> I still disagree. Using height instead of time may make the\n> implementation more complex by requiring some additional preparations\n> but using height is in fact a simpler design. Why relay on clocks that\n> we know will differ in different computers and places when we have a\n> universal tick with every block?\n>\n> Btw, BIP16 and BIP34 could be changed to height-based activation\n> already. BIP16 simply should have used height instead of time from the\n> beginning.\n>\n> On Mon, Jul 20, 2015 at 12:51 AM, Ross Nicoll via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Further to that - please disregard what I said about using block height. Had\n>> failed to realise that in using contextual information (block height) it\n>> complicates block validation (i.e. it would be impossible to tell if a block\n>> is too big, without having all previous blocks first). Block time is in fact\n>> the better option.\n>>\n>> Ross\n>>\n>>\n>> On 17/07/2015 18:57, Ross Nicoll via bitcoin-dev wrote:\n>>\n>> I'd back this if we can't find a permanent solution - 2MB gives us a lot\n>> more wiggle room in the interim at least; one of my concerns with block size\n>> is 3 transactions per second is absolutely tiny, and we need space for the\n>> network to search for an equilibrium between volume and pricing without risk\n>> of an adoption spike rendering it essentially unusable.\n>>\n>> I'd favour switching over by block height rather than time, and I'd suggest\n>> that given virtually every wallet/node out there will require testing (even\n>> if many do not currently enforce a limit and therefore do not need\n>> changing), 6 months should be considered a minimum target. I'd open with a\n>> suggestion of block 390k as a target.\n>>\n>> Ross\n>>\n>> On 17/07/2015 16:55, Jeff Garzik via bitcoin-dev wrote:\n>>\n>> Opening a mailing list thread on this BIP:\n>>\n>> BIP PR: https://github.com/bitcoin/bips/pull/173\n>> Code PR: https://github.com/bitcoin/bitcoin/pull/6451\n>>\n>> The general intent of this BIP is as a minimum viable alternative plan to my\n>> preferred proposal (BIP 100).\n>>\n>> If agreement is not reached on a more comprehensive solution, then this\n>> solution is at least available and a known quantity.  A good backup plan.\n>>\n>> Benefits:  conservative increase.  proves network can upgrade.  permits some\n>> added growth, while the community & market gathers data on how an increased\n>> block size impacts privacy, security, centralization, transaction throughput\n>> and other metrics.  2MB seems to be a Least Common Denominator on an\n>> increase.\n>>\n>> Costs:  requires a hard fork.  requires another hard fork down the road.\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T11:24:52",
                "message_text_only": "Peter Todd, as discussed on IRC, I'm not opposed to median time, which\nhas many of the properties nheight has, I'm just opposed to just using\nnTime which is what all \"hardfork proposals\" I've seen so far\n(including this one) do.\n\nOn Wed, Jul 22, 2015 at 12:05 AM, Ross Nicoll <jrn at jrn.me.uk> wrote:\n> On 21/07/2015 10:26, Jorge Tim\u00f3n wrote:\n>>\n>> I still disagree. Using height instead of time may make the\n>> implementation more complex by requiring some additional preparations\n>> but using height is in fact a simpler design. Why relay on clocks that\n>> we know will differ in different computers and places when we have a\n>> universal tick with every block?\n>\n> Not so much that the implementation is difficult, as it requires context to\n> validate a block size, rather than being able to validate it without\n> requiring the preceeding blocks. Yes, time on different machines may vary,\n> but block time is safe to use for this, because it's a straight-forward test\n> of \"if block time is acceptable and block time is after <date> then maximum\n> block size allowed is n MB otherwise m MB\".\n\nNo, the height is in the current block after bip34, no context required.\nIn any case, you already have the nHeight in most functions that would\nrequire it (for example, main::ConnectBlock).\nThe median time actually needs a context (the last 10 headers), but\nit's not hard to calculate and pass around either.\nBut simply using nTime is not a good idea. Leaving aside time zones,\neinstein and all that it introduces edge cases and weird incentives\nfor no good reason.\nIf the goal is to make it \"human-schedule-friendly\", median time\nshould be good enough.\nIf we're going to make miners 95% confirm after the date/height, I\nstill prefer the height, but as said median time seems a reasonable\ncompromise.\n\nCan we move the \"height/medianTime/nTime\" and \"is it good to confirm\nthat the change is uncontroversial to miners by requiring 95% to\nactivate the consensus change, like we do with uncontroversial\nsoftforks?\" discussions to the thread with my bip draft (\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n) on precisely this subject?\nI have requested a bip number.\nLet's please have an uncontroversial hardfork to set a precedent.\nHopefully that way we may decouple some parts of the blocksize\ndiscussion."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-07-17T20:29:16",
                "message_text_only": "On Friday, July 17, 2015 3:55:19 PM Jeff Garzik via bitcoin-dev wrote:\n> BIP PR: https://github.com/bitcoin/bips/pull/173\n\nI'm concerned that miners are prematurely bumping their soft limit to 1 MB \nlately. The only reason block size limit lifting is remotely reasonable is if \nwe can trust miners to at the very least keep their soft limits set at a \nmanageable size, but this assumption appears to already be failing in \npractice.\n\nWe are unlikely to approach 1 MB of actual volume by November, so I would \nprefer to see the activation date on this moved later - maybe November 2016, \nif not 2017. It would also be an improvement to try to follow reasonably-\nexpected bandwidth increases, so 15% (1.15 MB) rather than doubling. Doubling \nin only a few months seems to be far from a \"conservative\" increase.\n\nIf we can get some kind of commitment from miners not to move their soft \nlimits beyond 1 MB until some future-agreed-on point, maybe the BIP is \nacceptable as-is.\n\nOn Friday, July 17, 2015 4:12:05 PM Tier Nolan via bitcoin-dev wrote:\n> It establishes a precedent for hard forks not to require a vote though.\n\nHardforks are not something where voting makes sense. They need consensus \namong /nodes/, not majority among /miners/. No hardfork has ever had such a \nvote.\n\nLuke"
            },
            {
                "author": "Angel Leon",
                "date": "2015-07-17T21:13:25",
                "message_text_only": "When blocks are found under or over the 10 minute threshold, hashing\ndifficulty is raised or reduced dinamically to keep a balance. This\nintelligent measure has avoided us having discussions and kept a balance.\n\nThe same way you can't assume how much hashpower there will be to find the\nnext blocks, why can't we have a\nfunction that adapts to the transactional volume on the blockchain, one\nwhich allows us to grow/shrink an acceptable maximum block size. We're not\nputting caps on processing, why should we put a date based cap on\ntransactional volume per block? You can't predict the future, but you can\nlook at what's happened recently to correct these limits.\n\nSuch function/filter should be able to recognize real sustained growth in\ntransactional volume and let us adjust the maximum accepted blocksize to\nallow for the organic growth that will come due to real activity from\nthings like distributed market-places, decentralized bitcoin based services\n(and all the things the community dreams about and might be building\nalready), truly decentralized technological breakthroughs that geniunely\nneed to use the blockchain. <Going the off-chain way only leads to\ncentralization and personal/corporate agendas, which to me goes against the\nBitcoin ethos>\n\nIt should be able to adapt fast enough so that we don't have episodes where\npeople need to wait 4 hours to days for transactions to get on the\nblockchain and be confirmed. I believe proposals that include \"every\n100,000 blocks\" are out of touch with reality, the blocksize needs to adapt\nthe same way blockdifficulty already adapts to growth or lack of hashing\npower.\n\nI'm not a statistician/mathematician, but I'm sure if we propose the\nparameters that need to be considered for a realistic blocksize that\nreflects the needs of the Bitcoin network users, there's plenty of\ncrypto/statistician/mathematician brain power to propose such filtering\nfunction here.\n\nThings that could be considered:\n- median number of transactions per block (between 6 to 12 hours, you\nshould be able to adjust to a real shopping sprint for instance, or huge\npop band/artist decides to sell concert tickets on Bitcoin)\n- median fees offered per transaction (can we detect spammers)\n- median blocksizes\n- median size per transaction\n- number of new addresses signing off transactions, number of addresses\nwe've already seen in the blockchain before (are these spammers creating\nlots of new addresses to move around the same outputs, is there an\nefficient way to detect the likelyhood of a transaction being spam? Bayes?\nNo clue, no mathematician)\n- median velocity between which an address receives an input and sends it\nto another one?\n- more things I've no knowledge of since I'm not familiar with the details,\nbut could immediatly come to mind to the experts.\n\nMining Centralization is already happening due to its competitive nature,\nwe don't complain or try to force hashing limits, we shouldn't do the same\nfor storage. There will be no shortage of blockchain mirrors, and those\ninterested in running full nodes, will surely find a way to do so.\n\nAngel\n\nhttp://twitter.com/gubatron\n\nOn Fri, Jul 17, 2015 at 4:29 PM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Friday, July 17, 2015 3:55:19 PM Jeff Garzik via bitcoin-dev wrote:\n> > BIP PR: https://github.com/bitcoin/bips/pull/173\n>\n> I'm concerned that miners are prematurely bumping their soft limit to 1 MB\n> lately. The only reason block size limit lifting is remotely reasonable is\n> if\n> we can trust miners to at the very least keep their soft limits set at a\n> manageable size, but this assumption appears to already be failing in\n> practice.\n>\n> We are unlikely to approach 1 MB of actual volume by November, so I would\n> prefer to see the activation date on this moved later - maybe November\n> 2016,\n> if not 2017. It would also be an improvement to try to follow reasonably-\n> expected bandwidth increases, so 15% (1.15 MB) rather than doubling.\n> Doubling\n> in only a few months seems to be far from a \"conservative\" increase.\n>\n> If we can get some kind of commitment from miners not to move their soft\n> limits beyond 1 MB until some future-agreed-on point, maybe the BIP is\n> acceptable as-is.\n>\n> On Friday, July 17, 2015 4:12:05 PM Tier Nolan via bitcoin-dev wrote:\n> > It establishes a precedent for hard forks not to require a vote though.\n>\n> Hardforks are not something where voting makes sense. They need consensus\n> among /nodes/, not majority among /miners/. No hardfork has ever had such a\n> vote.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/7415d690/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-17T22:25:06",
                "message_text_only": "On Fri, Jul 17, 2015 at 9:29 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> Hardforks are not something where voting makes sense. They need consensus\n> among /nodes/, not majority among /miners/. No hardfork has ever had such a\n> vote.\n>\n\nAgreed.\n\nI meant that since some of the new hard fork proposals use a voting system\nfor activation, they may not want to establish that precedent.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/b2bc54e3/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-18T09:22:14",
                "message_text_only": "On Sat, Jul 18, 2015 at 12:25 AM, Tier Nolan via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Fri, Jul 17, 2015 at 9:29 PM, Luke Dashjr <luke at dashjr.org> wrote:\n>>\n>> Hardforks are not something where voting makes sense. They need consensus\n>> among /nodes/, not majority among /miners/. No hardfork has ever had such\n>> a\n>> vote.\n>\n>\n> Agreed.\n>\n> I meant that since some of the new hard fork proposals use a voting system\n> for activation, they may not want to establish that precedent.\n\nI wonder how many people read\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\napart from you..."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-18T09:24:46",
                "message_text_only": "Sorry...\nMore specifically, how many people made it to\nhttps://github.com/jtimon/bips/blob/bip-forks/bip-forks.org#uncontroversial-hardforks\n\nOn Sat, Jul 18, 2015 at 11:22 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> On Sat, Jul 18, 2015 at 12:25 AM, Tier Nolan via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> On Fri, Jul 17, 2015 at 9:29 PM, Luke Dashjr <luke at dashjr.org> wrote:\n>>>\n>>> Hardforks are not something where voting makes sense. They need consensus\n>>> among /nodes/, not majority among /miners/. No hardfork has ever had such\n>>> a\n>>> vote.\n>>\n>>\n>> Agreed.\n>>\n>> I meant that since some of the new hard fork proposals use a voting system\n>> for activation, they may not want to establish that precedent.\n>\n> I wonder how many people read\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n> apart from you..."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-24T08:52:24",
                "message_text_only": "On Friday 17. July 2015 20.29.16 Luke Dashjr via bitcoin-dev wrote:\n> We are unlikely to approach 1 MB of actual volume by November, so I would \n> prefer to see the activation date on this moved later - maybe November\n> 2016,  if not 2017. It would also be an improvement to try to follow\n> reasonably- expected bandwidth increases, so 15% (1.15 MB) rather than\n> doubling. Doubling in only a few months seems to be far from a\n> \"conservative\" increase.\n\nThe reference to bandwidth increases makes no sense, the bandwidth in most of \nthe world is already far exceeding the 8Mb limit. Not everyone lives where you \nlive :)\n\nIn Germany you buy a 150Mbit connection for a flatrate and a cheap monthly \nrate, for instance.  Not saying that Germany is where all the miners are, but \nsince 150Mbit allows one to comfortably have 16 megabyte blocks, it is a good \nexample of how far off Luke's calculations are from real-world.\n\nI don't belief your argument to push forward holds.\n-- \nThomas Zander"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T09:43:00",
                "message_text_only": "> Sent: Friday, July 24, 2015 at 10:52 AM\n> From: \"Thomas Zander via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] BIP 102 - kick the can down the road to 2MB\n>\n> \n> The reference to bandwidth increases makes no sense, the bandwidth in most of \n> the world is already far exceeding the 8Mb limit. Not everyone lives where you \n> live :)\n> \n> In Germany you buy a 150Mbit connection for a flatrate and a cheap monthly \n> rate, for instance.  Not saying that Germany is where all the miners are, but \n> since 150Mbit allows one to comfortably have 16 megabyte blocks, it is a good \n> example of how far off Luke's calculations are from real-world.\n\nI'll have better stats available soon, but this does not reflect the current state of the network. \n\nOnly 4% of my initial crawl presented bandwidth above your stated 18MB/s."
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-18T04:32:48",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nAs an alternative to the preferred BIP100 this proposal is good\nbecause it establishes a plan of action for dealing with the recent\nramp-up (100% increase) in number of transactions and transaction\nsize. Arguably, a transitory spam attack, yes, but with a speculative\nrally brewing (and implied increases in network usage) this BIP may\nprove to be just-in-time.\n\nSolutions favoring dynamic vs. scheduled increases in blocksize (and\nby how much) are interesting and the proponents should explore and map\nout their proposal with data sets, trend projections and future\nscenarios. It will require labor and time, but convince the list about\nthe scientific merit of your proposal.\n\nIn the meantime, the current \"sufficient\" state of network capacity\nmay soon experience \"insufficient\" moments. Developer confluence\naround a workable plan and testing should, reasonably, begin now.\n\nJeff's proposal addresses an approaching capacity crunch whilst\nhonoring decentralization and providing time for testing and\nalternative future innovations. It's the best solution the user base\nand developers currently have for all the reasons Jeff gives:\nconservative blocksize increase, added capacity, low impact and\nminimal implication for the network and its users.\n\nThen, many of the more far-reaching proposals being offered can be\ntested, formalized, and fleshed out with scenario data.\n\n\nOn 07/17/2015 10:55 PM, Jeff Garzik via bitcoin-dev wrote:\n> Opening a mailing list thread on this BIP:\n> \n> BIP PR: https://github.com/bitcoin/bips/pull/173 Code PR:\n> https://github.com/bitcoin/bitcoin/pull/6451\n> \n> The general intent of this BIP is as a minimum viable alternative\n> plan to my preferred proposal (BIP 100).\n> \n> If agreement is not reached on a more comprehensive solution, then\n> this solution is at least available and a known quantity.  A good\n> backup plan.\n> \n> Benefits:  conservative increase.  proves network can upgrade.\n> permits some added growth, while the community & market gathers\n> data on how an increased block size impacts privacy, security,\n> centralization, transaction throughput and other metrics.  2MB\n> seems to be a Least Common Denominator on an increase.\n> \n> Costs:  requires a hard fork.  requires another hard fork down the\n> road.\n> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVqdbsAAoJEGwAhlQc8H1m3LIIAJeBKYp0HYWYONlBxFNeQfa8\n4EpYmMxwTSsDZ62CxdinxEGY3eQTqQo0GGAjpfSict4hq9ivSy74eHRb7AZihdYm\nznEVGMnedyMtSDvfyaUdIj/kkUX4k9mrcLyAAJB//E2e2BYQgs3esTAYx2ScCBiR\nt/UQ9gIolezasUIEmEovaQG4vOXtwMEtlzXrYy7EiAGhtoBvb1w3CJ3xa8iuF4e7\naXsleE98e44wjs0T/xLbuV4d8lBpnb0i0laOH4rpl77plpTc1HlDzjjqibourPb7\nSPZhfwnk5f++3PlNc/dtwEJLFw8p578S5aDWZhUX7h+DfRXSqF6WCxYvv6XdUGQ=\n=eoPX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-17T22:40:58",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150717/719347de/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 102 - kick the can down the road to 2MB",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Andrew",
                "Raystonn",
                "Slurms MacKenzie",
                "Peter Todd",
                "Angel Leon",
                "Thomas Zander",
                "Tier Nolan",
                "Sriram Karra",
                "Chris Wardell",
                "Jorge Tim\u00f3n",
                "Ross Nicoll",
                "Luke Dashjr",
                "Venzen Khaosan",
                "jl2012 at xbt.hk",
                "Tom Harding"
            ],
            "messages_count": 29,
            "total_messages_chars_count": 54022
        }
    },
    {
        "title": "[bitcoin-dev] Do we really need a mempool? (for relay nodes)",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-07-18T18:52:59",
                "message_text_only": "As in, do relay nodes need to keep a record of the transactions they've\nrelayed? Strictly speaking, the answer is no: one a tx is relayed modulo\nDoS concerns the entire thing can be discarded by the node. (unconfirmed\ntxs spending other unconfirmed txs can be handled by creating packages\nof transactions, evaluated as a whole)\n\nTo mitigate DoS concerns, we of course have to have some per-UTXO limit\non bandwidth relayed, but that task can be accomplished by simply\nmaintaining some kind of per-UTXO record of bandwidth used. For instance\nif the weighted fee and fee/KB were recorded, and forced to - say -\ndouble for each additional tx relayed that spent a given UTXO you would\nhave a clear and simple upper limit of lifetime bandwidth. Equally it's\neasy to limit bandwidth moment to moment by asking peers for highest\nfee/KB transactions they advertise first, stopping when our bandwidth\nlimit is reached.\n\nYou probably could even remove IsStandard() pretty much entirely with\nthe right increasingly expensive \"replacement\" policy, relying on it\nalone to provide anti-DoS. Obviously this would simplify some of the\ndebates around mining policy! This could even be re-used for scalable a\ngeneral-purpose messaging network paid by coin ownership if the UTXO set\nis split up, and some kind of expiration over time policy is\nimplemented.\n\nMiners of course would still want to have a mempool, but that codebase\nmay prove simpler if it doesn't have to work double-duty for relaying as\nwell.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000b675c4d825a10c278b8d63ee4df90a19393f3b6498fd073\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 646 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150719/62fd1782/attachment.sig>"
            },
            {
                "author": "Patrick Strateman",
                "date": "2015-07-18T19:46:01",
                "message_text_only": "Relay nodes do not need a mempool, but do need some mechanism to avoid\nDoS issues.\n\nWallet nodes can use the mempool for fee estimation (in addition to\nlooking at past blocks).\n\nOn 07/18/2015 11:52 AM, Peter Todd via bitcoin-dev wrote:\n> As in, do relay nodes need to keep a record of the transactions they've\n> relayed? Strictly speaking, the answer is no: one a tx is relayed modulo\n> DoS concerns the entire thing can be discarded by the node. (unconfirmed\n> txs spending other unconfirmed txs can be handled by creating packages\n> of transactions, evaluated as a whole)\n>\n> To mitigate DoS concerns, we of course have to have some per-UTXO limit\n> on bandwidth relayed, but that task can be accomplished by simply\n> maintaining some kind of per-UTXO record of bandwidth used. For instance\n> if the weighted fee and fee/KB were recorded, and forced to - say -\n> double for each additional tx relayed that spent a given UTXO you would\n> have a clear and simple upper limit of lifetime bandwidth. Equally it's\n> easy to limit bandwidth moment to moment by asking peers for highest\n> fee/KB transactions they advertise first, stopping when our bandwidth\n> limit is reached.\n>\n> You probably could even remove IsStandard() pretty much entirely with\n> the right increasingly expensive \"replacement\" policy, relying on it\n> alone to provide anti-DoS. Obviously this would simplify some of the\n> debates around mining policy! This could even be re-used for scalable a\n> general-purpose messaging network paid by coin ownership if the UTXO set\n> is split up, and some kind of expiration over time policy is\n> implemented.\n>\n> Miners of course would still want to have a mempool, but that codebase\n> may prove simpler if it doesn't have to work double-duty for relaying as\n> well.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150718/55ceedea/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-07-19T08:59:49",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nSome brief thoughts, adding here a suggestion for a dynamic approach\nto the issue. (e.g. each additional tx relayed has some thing\nassociated with it, that is, a \"doubling\" for each additional tx\nrelayed that spends a given UTXO, doesn't sound like it would be the\nmost dynamic approach to the issue; considering that full nodes use\nthe (UTXOs) to establish if transactions are valid \u2013 all inputs to a\ntransaction must be in the UTXO database for it to be valid, but\nrather, would end up ratcheting upward the fee/kB for each additional\ntx relayed, as proposed).\n\nA more dynamic fee approach would be a better one, imho, but how is\nthis to occur?\n\nQuoting from Gavin Andresen's http://gavinandresen.ninja/utxo-uhoh,\n\"The entire UTXO set doesn\u2019t have to be in RAM; it can be stored on an\nSSD or spinning hard disk. The access pattern to the UTXO is not\nrandom; outputs that were spent recently are more likely to be\nre-spent than outputs that have not been spent in a long time. Bitcoin\nCore already has a multi-level UTXO cache, thanks to the hard work of\nPieter Wuille.\"\n\nThe relay nodes would, in this scenario that is proposed here in this\nmessage, be confirming and discarding; the wallet nodes, if I\nunderstand properly, in this scenario, as proposed, should be\nretaining (keeping a record of the transactions they've relayed and\nusing a mempool).\n\nThere are some questions here:\n\n- - How is the mempool to be limited?\n- - What is the mechanism by which the UTXO set is stored (or proposed\nto be stored)?\n- - How would dynamic fee determinations be calculated?\n- - Please describe more the general purpose messaging network?\n\nThank you\n\n\n\nOn 07/18/2015 12:46 PM, Patrick Strateman via bitcoin-dev wrote:\n> Relay nodes do not need a mempool, but do need some mechanism to\n> avoid DoS issues.\n> \n> Wallet nodes can use the mempool for fee estimation (in addition\n> to looking at past blocks).\n> \n> On 07/18/2015 11:52 AM, Peter Todd via bitcoin-dev wrote:\n>> As in, do relay nodes need to keep a record of the transactions\n>> they've relayed? Strictly speaking, the answer is no: one a tx is\n>> relayed modulo DoS concerns the entire thing can be discarded by\n>> the node. (unconfirmed txs spending other unconfirmed txs can be\n>> handled by creating packages of transactions, evaluated as a\n>> whole)\n>> \n>> To mitigate DoS concerns, we of course have to have some per-UTXO\n>> limit on bandwidth relayed, but that task can be accomplished by\n>> simply maintaining some kind of per-UTXO record of bandwidth\n>> used. For instance if the weighted fee and fee/KB were recorded,\n>> and forced to - say - double for each additional tx relayed that\n>> spent a given UTXO you would have a clear and simple upper limit\n>> of lifetime bandwidth. Equally it's easy to limit bandwidth\n>> moment to moment by asking peers for highest fee/KB transactions\n>> they advertise first, stopping when our bandwidth limit is\n>> reached.\n>> \n>> You probably could even remove IsStandard() pretty much entirely\n>> with the right increasingly expensive \"replacement\" policy,\n>> relying on it alone to provide anti-DoS. Obviously this would\n>> simplify some of the debates around mining policy! This could\n>> even be re-used for scalable a general-purpose messaging network\n>> paid by coin ownership if the UTXO set is split up, and some kind\n>> of expiration over time policy is implemented.\n>> \n>> Miners of course would still want to have a mempool, but that\n>> codebase may prove simpler if it doesn't have to work double-duty\n>> for relaying as well.\n>> \n>> \n>> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVq2cFAAoJEGxwq/inSG8CIo4IAJAZ97NvW6Qdjd6HLN8q2074\nsEUGdDeonARiQZXLfGyTJVg43Yb6LKPqkjWPQEgl9LLNni8t99iUqu3BJxedRDjd\n8x+/F8n5VJrUrn1pXUcbC1aWss1y8JPTO2KpF/WL254IFc8iE8MJf4YF8PDSgy5j\n9uW8NvWvdT4dz+rXu9vqfcplz8x7NGQ+CWN2N2JlChhKLMFprXPIx8a7NQwaKdrY\nlTpgAJWGMyPGNCmYQprBjIjOfp8tdTLQFlsLUAsXDmEisJX9goRVGMsHOWLTREoA\nl3kTgM0WMv6MIG7NOQQcWLD7cZdwWYR9e49hc27VcHt2R/FTepvnwPqo2GtE0tM=\n=eRbR\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-20T22:14:41",
                "message_text_only": "On Sat, Jul 18, 2015 at 9:46 PM, Patrick Strateman via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Relay nodes do not need a mempool, but do need some mechanism to avoid DoS\n> issues.\n>\n> Wallet nodes can use the mempool for fee estimation (in addition to looking\n> at past blocks).\n\nExactly, so an anti-DoS mechanism that would be sufficient for a\nnon-mempool node would be also useful for small values in -maxmempool.\nI think a simple cache for transaction validations should be enough.\nPlease, review a draft for that in the newest #6448.\n\nhttps://github.com/bitcoin/bitcoin/pull/6448\n\nI would be happy to rebase it back to 0.11 and even 0.10."
            }
        ],
        "thread_summary": {
            "title": "Do we really need a mempool? (for relay nodes)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Jorge Tim\u00f3n",
                "Peter Todd",
                "Patrick Strateman"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 9278
        }
    },
    {
        "title": "[bitcoin-dev] QR code alternatives (was: Proposal: extend bip70 with OpenAlias)",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2015-07-20T14:40:36",
                "message_text_only": "Hey Thomas,\n\nHere are some thoughts on a third way we can tackle our BIP 70 usability\nproblem sans servers: by finding an upgrade to QR codes that give us more\nspace and then optimising the hell out of BIP70 to make it fit.\n\n*Better QR codes*\n\nLet's start with this paper, High Capacity Colored Two Dimensional Codes\n<http://proceedings2010.imcsit.org/pliks/79.pdf>. It develops an upgrade to\nstandard QR codes that extend them with the use of colour. The resulting\ncodes have ~4x the capacity but similar levels of scanning robustness.\n\nThis paper is also interesting: DualCodes\n<https://books.google.at/books?id=O5a6BQAAQBAJ&pg=PA25&lpg=PA25&dq=%22DualCodes:+Backward+Compatible+Multi-layer+2D-Barcodes%22&source=bl&ots=ql_G8iyXXi&sig=9-VwhFLbkfgh2Fi0tdM3AWOyajA&hl=en&sa=X&redir_esc=y#v=onepage&q=%22DualCodes%3A%20Backward%20Compatible%20Multi-layer%202D-Barcodes%22&f=false>\n\nIt works by overlaying one QR code on top of another using shades of grey.\nThe resulting code is still scannable by older applications (backwards\ncompatibility!) but an enhanced reader can also extract the second code.\nThey explicitly mention digital signatures as a possible use case.\n\nIn both cases the code does not appear to be available but the same\napproach was used: extend libqrcode for creation and ZXing for decoding\n(Android). We could ask the authors and see if they're willing to open\nsource their work.\n\nBIP 70 has the potential to add many features. But most of them, even the\nextensions currently proposed only as ideas, can be expressed with\nrelatively few bytes.\n\nSo with a 4x boost in capacity, or a 2x boost with backwards compat, what\ncould we do?\n\n*Optimised BIP70*\n\nIf we define our own certificate formats and by implication our own CAs,\nthen we can easily make a certificate be 32 bytes for the ECC\nsignature+length of the asserted textual identity, e.g. email address.\n\nCan we go smaller? Arguably, yes. 32 bytes for a signature is for Really\nStrong Security\u2122 (a 256 bit curve), which gives 128 bits of security. If we\nare willing to accept that a strong adversary could eventually forge a\ncertificate, we can drop down to a weaker curve, like a 128 bit cure with\n64 bits of security. This is well within reach of, say, an academic team\nbut would still pose a significant hurdle for run of the mill payment\nfraudsters. If these short CA keys expired frequently, like once a month,\nthe system could still be secure enough.\n\nAs we are defining our own PKI we can make CA keys expire however\nfrequently we like, up to the expiry period of the BIP70 request itself.\nThus certificates that expire monthly is not an issue if the wallet has a\nway to automatically refresh the certificate by using a longer term\nstronger credential that it keeps around on disk.\n\nIf we accept a single payment address i.e. no clever tricks around merge\navoidance, such a QR code could look like this:\n\nbitcoin:1aBcD1234....?x=serialized_payment_request\n\nHowever this requires text mode and wastes bytes at the front for the URI\ntype.\n\nIf we're willing to accept QR codes that can't be read by a standalone app\nand which requires an embedded reader, then we can just scrap the legacy\nand serialise a binary BIP70 request directly into the QR code. Andreas'\nwallet, for example, can already handle this because it has an embedded QR\nreader. I don't know what the situation on iOS is like.\n\nIf we were to use the DualCodes system we could define the primary QR code\nas being an unsigned payment request, and the second layer as being the\nsignature/pki data.\n\n*Getting response data back to the recipient*\n\nOne reason to have a store/forward network is the \"forward\" part: we don't\nonly want to host a static PaymentRequest, but also receive a private\nresponse e.g. for the memo field, or to implement the well known \"Stealth\nAddress\" / ECDH in the payment protocol proposals:\n\nhttps://medium.com/@octskyward/ecdh-in-the-payment-protocol-cb2f81962c1b\n\nStealth addresses try and (ab)use the block chain as a store/forward layer\nand break SPV in the process as well as wasting lots of resources. ECDH in\nBIP70 avoids those issues but at the cost of requiring a separate\nstore-and-forward network with some notion of account privacy.\n\nThese ideas come with another steep price: restoring a wallet from seed\nwords is no longer possible. You must have the extra random data to\ncalculate the private keys for money sent to you :(  If you lose the extra\ndata you lose the money. It can be fixed but only by having wallets\nregularly sweep the sent money to keys derived from the BIP32 seed, meaning\nprivacy-hurting merging and extra traffic.\n\nI don't know of any way to solve this except by using some servers,\nsomewhere, that store the Payment messages for people: potentially for a\nlong period of time. If we have such servers, then having them host BIP70\nrequests is not a big extra requirement.\n\nI have imagined this being a p2p-ish network of HTTPS servers that accept\nPOSTs and GETs. But if we are thinking about alternatives, it could also be\na separate service of the existing Bitcoin P2P network. That's what\nOP_RETURN (ab)use effectively does. But as these messages don't really have\nto be kept forever, a different system could be used: Payment messages\ncould be broadcast along with their transactions and stored at every node,\nwaiting for download. But unlike regular transactions, they are not stored\nforever in a block chain. They are just written to disk and eventually\nerased, perhaps, ordered in a mempool like way where more fee attached ==\nstored for longer, even though the nodes storing the data aren't actually\nreceiving the fee.\n\nA signature over the Payment metadata using the same output keys as the\ntransaction would bind them together for the purposes of broadcast, but\ndoesn't need to be stored after that.\n\nAs the data storage is just a helpful service but not fundamentally\nrequired, nodes could shard themselves by announcing in their addr messages\nthat they only store Payment metadata for e.g. the half which have a hash\nstarting with a one bit. And when outputs are seen being spent, the\nassociated Payment metadata can be erased too, as by then it's fair to\nassume that the users wallet has downloaded the metadata and no longer\ncares about it.\n\nOf course you have then all the regular DoS issues. But any P2P network\nthat stores data on the behalf of others has these.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/7b5c3cb0/attachment-0001.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-07-21T08:20:17",
                "message_text_only": "Hmm, the advanced QR code standards are perhaps even useful if we don't\nchange anything about BIP7x. Because if we can cram more data without\nloosing scanning performance this maybe means also we can stay with the\ndata we have but improve scanning?"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2015-07-21T08:42:02",
                "message_text_only": "As a side note, you may be interested about the 2D-Doc, which is a new\nFrench standard used to protect documents such as address proofs or\ninvoice. I've been involved with it closely at work.\n\nEvery 2d-Doc include an ECDSA signature inside a 2D barcode, the key being\nthat the barcode is a Datamatrix and not a QR code.\n\nIf any of you can read French, the technical specification of the standard\ncan be found here ::\nhttps://ants.gouv.fr/content/download/516/5665/version/4/file/ANTS_2D-Doc_CABSpec_v2.0.1_erratum.pdf\n\nBasically, a short summary of the protected document is encoded inside the\nbarcode, followed by an ECDSA signature of the summary (still in the\nbarcode). The signature is done by an official, government-approved 2D-Doc\nemitter. The 2D-Code contains a short reference (a few bytes) to designate\nwhich emitter signed it, and then you can lookup the 2D-Doc TSL supplied by\nthe French government to get all the X509 Certificates from every emitters\nyou are interested in, in order to check the signature.\n\nWhile 2D-Doc solve a very different problem than Bitcoin + BIP70, you may\nbe interested in knowing about it as hundred of thousands of them have been\nemitted successfully while solving one of the problem you face : embedding\nan ECDSA signature inside a 2D barcode.\n\nThank you for your time,\n\nCl\u00e9ment Elbaz\n\nLe mar. 21 juil. 2015 \u00e0 10:20, Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Hmm, the advanced QR code standards are perhaps even useful if we don't\n> change anything about BIP7x. Because if we can cram more data without\n> loosing scanning performance this maybe means also we can stay with the\n> data we have but improve scanning?\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150721/44c85c6b/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-21T10:25:33",
                "message_text_only": "Thanks Clement!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150721/85e320fc/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-21T14:58:39",
                "message_text_only": "Le 20/07/2015 16:40, Mike Hearn a \u00e9crit :\n> \n> If we accept a single payment address i.e. no clever tricks around merge\n> avoidance, such a QR code could look like this:\n> \n> bitcoin:1aBcD1234....?x=serialized_payment_request\n> \n> However this requires text mode and wastes bytes at the front for the URI\n> type.\n> \n\nIt is possible to be both backward-compatible and to avoid wasting space\nin URIs, if we simply assume that the payment request is a single\nstandard output + amount (that scenario will probably cover 99% of the\ncases, and the few other cases may not need QR codes). We generate a\nserialized bip70 PR from the parameters found in the URI, sign that\nstring, and add the signature to the URI.\n\nExample:\n\nbitcoin:1H14AiSc4PqkK9VTmeutZU3edSy3HS5HL8?amount=1&message=here%20is%20a%20test&time=1437489571&exp=604800&name=ecdsa.net&sig=3Quot6m2RsR43NgV8VQQx3Ngf5u8wZY18mu523x3ViLrA3WLwSoQum2Znw3gRsTgfADpHuEiyyjnpxCLKWrkR4RQM\n\n'time' is the timestamp of the request\n'exp' is the duration of validity, 1 week here\n(it saves a few bits to express it that way)\n\n'name' is the domain name of the signer\n'sig' is the signature\n\nThe QR code derived from that URI is perfectly scannable with a phone."
            }
        ],
        "thread_summary": {
            "title": "QR code alternatives (was: Proposal: extend bip70 with OpenAlias)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Cl\u00e9ment Elbaz",
                "Mike Hearn",
                "Thomas Voegtlin",
                "Andreas Schildbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 10289
        }
    },
    {
        "title": "[bitcoin-dev] For discussion: limit transaction size to mitigate CVE-2013-2292",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2015-07-20T19:10:26",
                "message_text_only": "Draft BIP to prevent a potential CPU exhaustion attack if a significantly\nlarger maximum blocksize is adopted:\n\n  Title: Limit maximum transaction size\n  Author: Gavin Andresen <gavinandresen at gmail.com>\n  Status: Draft\n  Type: Standards Track\n  Created: 2015-07-17\n\n==Abstract==\n\nMitigate a potential CPU exhaustion denial-of-service attack by limiting\nthe maximum size of a transaction included in a block.\n\n==Motivation==\n\nSergio Demian Lerner reported that a maliciously constructed block could\ntake several minutes to validate, due to the way signature hashes are\ncomputed for OP_CHECKSIG/OP_CHECKMULTISIG ([[\nhttps://bitcointalk.org/?topic=140078|CVE-2013-2292]]).\nEach signature validation can require hashing most of the transaction's\nbytes, resulting in O(s*b) scaling (where n is the number of signature\noperations and m is the number of bytes in the transaction, excluding\nsignatures). If there are no limits on n or m the result is O(n^2) scaling.\n\nThis potential attack was mitigated by changing the default relay and\nmining policies so transactions larger than 100,000 bytes were not\nrelayed across the network or included in blocks. However, a miner\nnot following the default policy could choose to include a\ntransaction that filled the entire one-megaybte block and took\na long time to validate.\n\n==Specification==\n\nAfter deployment, the maximum serialized size of a transaction allowed\nin a block shall be 100,000 bytes.\n\n==Compatibility==\n\nThis change should be compatible with existing transaction-creation\nsoftware,\nbecause transactions larger than 100,000 bytes have been considered\n\"non-standard\"\n(they are not relayed or mined by default) for years.\n\nSoftware that assembles transactions into blocks and that validates blocks\nmust be\nupdated to reject oversize transactions.\n\n==Deployment==\n\nThis change will be deployed with BIP 100 or BIP 101.\n\n==Discussion==\n\nAlternatives to this BIP:\n\n1. A new consensus rule that limits the number of signature operations in a\nsingle transaction instead of limiting size. This might be more compatible\nwith\nfuture opcodes that require larger-than-100,000-byte transactions, although\nany such future opcodes would likely require changes to the Script\nvalidation\nrules anyway (e.g. the 520-byte limit on data items).\n\n2. Fix the SIG opcodes so they don't re-hash variations of the\ntransaction's data.\nThis is the \"most correct\" solution, but would require updating every\npiece of transaction-creating and transaction-validating software to change\nhow\nthey compute the signature hash.\n\n==References==\n\n[[https://bitcointalk.org/?topic=140078|CVE-2013-2292]]: Sergio Demian\nLerner's original report\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/04cdfad9/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-20T19:43:51",
                "message_text_only": "On Mon, Jul 20, 2015 at 8:10 PM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> After deployment, the maximum serialized size of a transaction allowed\n> in a block shall be 100,000 bytes.\n>\n\nThis could render transactions with a locktime in the future as unspendable.\n\nIt is pretty low probability that someone has created a >100kB locked\ntransaction though.\n\nIt violates the principle that no fork should render someone's coins\nunspendable.\n\nAt the cost of weakening the protection, the rule could be made to only\napply to version 2 transactions.\n\n\n*Specification*\n\n    The transaction version is increased to version two.\n\n    All coinbase transactions must be version two or higher.\n\n    If any of its parent transactions are version two or higher\n    then the transaction must be version two or higher.\n\n    The maximum serialized size of a version two transactions allowed in\n    a block is 100,000 bytes.\n\n\nAs time passes more and more of the UTXO set will be from version two\ntransactions.  To launch the attack, the attacker needs an historical UTXO\nentry.\n\nStandard software would create version two transactions even if all inputs\nwere version one.\n\nThe rule could be applied to all transactions most of the time, and have\ndaily blocks that allow legacy transactions.\n\n    This rule shall apply to version 1 transactions too unless the block\nheight is\n    a multiple of 100.\n\nAt the risk of encouraging feature creep, if the transaction size is being\nlimited, it would be useful to also limit the size of all its inputs.\n\nThis helps with fraud proofs and offline signing.\n\n\n*Specification*\n    The transaction version is increased to version two.\n\n    All coinbase transactions must be version two or higher.\n\n    If any of its parent transactions are version two or higher\n    then the transaction must be version two or higher.\n\n    The maximum serialized size of a version two transactions allowed in\n    a block is 100,000 bytes.\n\n    The maximum of the total serialized size of a version two transaction\nand all\n    of its parents allowed in a block shall be 200,000 bytes.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/ff1d1869/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-20T20:30:08",
                "message_text_only": "On Mon, Jul 20, 2015 at 3:43 PM, Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This could render transactions with a locktime in the future as\n> unspendable.\n>\n> It is pretty low probability that someone has created a >100kB locked\n> transaction though.\n>\n> It violates the principle that no fork should render someone's coins\n> unspendable.\n>\n\nMmmm.... you'd have to:\n\na) Have lost or thrown away the keys to the unspent transaction outputs\nb) Have created a locktime'd transaction with a lock time after the\nBIP100/101 switchover times\nthat is more than 100,000 bytes big\nc) Have some special relationship with a miner that you trust to still be\naround when the transaction\nunlocks that would mine the bigger-than-standard transaction for you.\n\nI don't think adding extra complexity to consensus-critical code to support\nsuch an incredibly unlikely\nscenario is the right decision here. I think it is more likely that the\nextra complexity would trigger a bug\nthat causes a loss of bitcoin greater than the amount of bitcoin tied up in\nlocktime'ed transactions\n(because I think there are approximately zero BTC tied up in >100K\nlocktime'ed transactions).\n\n\nRE: limit size of transaction+parents:  Feature creep, belongs in another\nBIP in my opinion. This one\nis focused on fixing CVE-2013-2292\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/05a16bf2/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-20T19:58:27",
                "message_text_only": "I take it there's no feasibility in suggesting the script execution code \nhas run time maximums? I'm aware these would be much harder to have \nconsensus on, but would seem like the better solution if at all possible.\n\nRoss\n\nOn 20/07/2015 20:10, Gavin Andresen via bitcoin-dev wrote:\n> Draft BIP to prevent a potential CPU exhaustion attack if a \n> significantly larger maximum blocksize is adopted:\n>\n>   Title: Limit maximum transaction size\n>   Author: Gavin Andresen <gavinandresen at gmail.com \n> <mailto:gavinandresen at gmail.com>>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2015-07-17\n>\n> ==Abstract==\n>\n> Mitigate a potential CPU exhaustion denial-of-service attack by limiting\n> the maximum size of a transaction included in a block.\n>\n> ==Motivation==\n>\n> Sergio Demian Lerner reported that a maliciously constructed block could\n> take several minutes to validate, due to the way signature hashes are\n> computed for OP_CHECKSIG/OP_CHECKMULTISIG \n> ([[https://bitcointalk.org/?topic=140078|CVE-2013-2292]] \n> <https://bitcointalk.org/?topic=140078%7CCVE-2013-2292]]>).\n> Each signature validation can require hashing most of the transaction's\n> bytes, resulting in O(s*b) scaling (where n is the number of signature\n> operations and m is the number of bytes in the transaction, excluding\n> signatures). If there are no limits on n or m the result is O(n^2) \n> scaling.\n>\n> This potential attack was mitigated by changing the default relay and\n> mining policies so transactions larger than 100,000 bytes were not\n> relayed across the network or included in blocks. However, a miner\n> not following the default policy could choose to include a\n> transaction that filled the entire one-megaybte block and took\n> a long time to validate.\n>\n> ==Specification==\n>\n> After deployment, the maximum serialized size of a transaction allowed\n> in a block shall be 100,000 bytes.\n>\n> ==Compatibility==\n>\n> This change should be compatible with existing transaction-creation \n> software,\n> because transactions larger than 100,000 bytes have been considered \n> \"non-standard\"\n> (they are not relayed or mined by default) for years.\n>\n> Software that assembles transactions into blocks and that validates \n> blocks must be\n> updated to reject oversize transactions.\n>\n> ==Deployment==\n>\n> This change will be deployed with BIP 100 or BIP 101.\n>\n> ==Discussion==\n>\n> Alternatives to this BIP:\n>\n> 1. A new consensus rule that limits the number of signature operations \n> in a\n> single transaction instead of limiting size. This might be more \n> compatible with\n> future opcodes that require larger-than-100,000-byte transactions, \n> although\n> any such future opcodes would likely require changes to the Script \n> validation\n> rules anyway (e.g. the 520-byte limit on data items).\n>\n> 2. Fix the SIG opcodes so they don't re-hash variations of the \n> transaction's data.\n> This is the \"most correct\" solution, but would require updating every\n> piece of transaction-creating and transaction-validating software to \n> change how\n> they compute the signature hash.\n>\n> ==References==\n>\n> [[https://bitcointalk.org/?topic=140078|CVE-2013-2292] \n> <https://bitcointalk.org/?topic=140078%7CCVE-2013-2292]>]: Sergio \n> Demian Lerner's original report\n>\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150720/b969dd16/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-20T20:55:57",
                "message_text_only": "On Mon, Jul 20, 2015 at 7:10 PM, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Mitigate a potential CPU exhaustion denial-of-service attack by limiting\n> the maximum size of a transaction included in a block.\n\nThis seems like a fairly indirect approach. The resource being watched\nfor is not the size (otherwise two transactions for 200k would be\nstrictly worse than one 200k transactions) but the potential of N^2\ncosts related to repeated hashing in checksig; which this ignores.\n\nThe cost of the indirection is forclosing future applications which\ninvolve larger signatures but have no quadratic component and are thus\nfast to verify-- or requring yet another hard fork to remove the\nlimit, or a kludgy soft fork that splits the same data across two\n\"transactions\" which get processed as a unit... all would be\nunfortunate.\n\nAlternative 1 sounds more attractive to be for this reason as it's more direct."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-21T18:09:19",
                "message_text_only": "On Mon, Jul 20, 2015 at 4:55 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Jul 20, 2015 at 7:10 PM, Gavin Andresen via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Mitigate a potential CPU exhaustion denial-of-service attack by limiting\n> > the maximum size of a transaction included in a block.\n>\n> This seems like a fairly indirect approach. The resource being watched\n> for is not the size (otherwise two transactions for 200k would be\n> strictly worse than one 200k transactions) but the potential of N^2\n> costs related to repeated hashing in checksig; which this ignores.\n>\n\nYes.  The tradeoff is implementation complexity: it is trivial to check\ntransaction size,\nnot as trivial to count signature operations, because\nnumber-of-bytes-in-transaction\ndoesn't require any context.\n\nBut I would REALLY hate myself if in ten years a future version of me was\nstruggling to\nget consensus to move away from some stupid 100,000 byte transaction size\nlimit\nI imposed to mitigate a potential DoS attack.\n\nSo I agree, a limit on sigops is the right way to go. And if that is being\nchanged,\nmight as well accurately count exactly how many sigops a transaction\nactually\nrequires to be validated...\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150721/258a0bc6/attachment.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-21T18:18:00",
                "message_text_only": "I think it's not a horrible idea to just add a field into the transaction\nmetadata for N_SIG_OPS in the script_sig\n\nIt is much simpler in implementation if the concern is complexity (once a\ntransaction goes above N_SIG_OPS it could be considered invalid, number\ncomputed must be equal). It wouldn't even need to be stored permanently as\nit can be pruned easily and recomputed later (hashes would protect against\nbuggy complicated sig counting code).\n\nFurthermore, it would differentiate a branch with different counts well.\n\n\n\nOn Wed, Jul 22, 2015 at 2:09 AM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Jul 20, 2015 at 4:55 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>\n>> On Mon, Jul 20, 2015 at 7:10 PM, Gavin Andresen via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Mitigate a potential CPU exhaustion denial-of-service attack by limiting\n>> > the maximum size of a transaction included in a block.\n>>\n>> This seems like a fairly indirect approach. The resource being watched\n>> for is not the size (otherwise two transactions for 200k would be\n>> strictly worse than one 200k transactions) but the potential of N^2\n>> costs related to repeated hashing in checksig; which this ignores.\n>>\n>\n> Yes.  The tradeoff is implementation complexity: it is trivial to check\n> transaction size,\n> not as trivial to count signature operations, because\n> number-of-bytes-in-transaction\n> doesn't require any context.\n>\n> But I would REALLY hate myself if in ten years a future version of me was\n> struggling to\n> get consensus to move away from some stupid 100,000 byte transaction size\n> limit\n> I imposed to mitigate a potential DoS attack.\n>\n> So I agree, a limit on sigops is the right way to go. And if that is being\n> changed,\n> might as well accurately count exactly how many sigops a transaction\n> actually\n> requires to be validated...\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/6ff84cc8/attachment-0001.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-23T15:41:18",
                "message_text_only": "On Mon, Jul 20, 2015 at 4:55 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Jul 20, 2015 at 7:10 PM, Gavin Andresen via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Mitigate a potential CPU exhaustion denial-of-service attack by limiting\n> > the maximum size of a transaction included in a block.\n>\n> This seems like a fairly indirect approach. The resource being watched\n> for is not the size (otherwise two transactions for 200k would be\n> strictly worse than one 200k transactions) but the potential of N^2\n> costs related to repeated hashing in checksig; which this ignores.\n>\n\nTo get a feeling for the implementation complexity / correctness tradeoff,\nI implemented changes to Core to count exactly how many signature operations\nare performed and how many bytes are hashed to compute sighashes:\n\nhttps://github.com/gavinandresen/bitcoin-git/commit/08ecd6f67d977271faa92bc1890b8f94b15c2792\n\nI haven't benchmarked how much keeping track of the counts affects\nperformance (but I expect\nit to be minimal compared to ECDSA signature validation, accessing inputs\nfrom the UTXO, etc).\n\nI like the idea of a consensus rule that directly addresses the attack--\ne.g. \"validating\na transaction must not require more than X megabytes hashed to compute\nsignature hashes.\"\n(or: \"validating a block must not require more than X megabytes hashed...\"\nwhich is\nmore symmetric with the current \"maximum number of sigops allowed per\nblock\")\n\nThinking about this and looking at block 364,292, I think I see a simple\noptimization that would\nspeed up validation for transactions with lots of inputs:  use\nSIGHASH_ANYONECANPAY\nfor all of the inputs instead of SIGHASH_ALL.\n\n(which would make the transaction malleable-- if that's a concern, then\nmake one of the inputs\nSIGHASH_ALL and the rest SIGHASH_ANYONECANPAY-- I think this is a change\nthat\nshould be made to Core and other wallets should make).\n\n---\n\nI'd like to hear from maintainers of other full implementations: how hard\nwould it be for you\nto keep track of the number of bytes hashed to validate a transaction or\nblock, and use\nit as a consensus rule?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/f0db9377/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-24T20:59:40",
                "message_text_only": "After thinking about it, implementing it, and doing some benchmarking, I'm\nconvinced replacing the existing, messy, ad-hoc sigop-counting consensus\nrules is the right thing to do.\n\nThe last two commits in this branch are an implementation:\n   https://github.com/gavinandresen/bitcoin-git/commits/count_hash_size\n\n>From the commit message in the last commit:\n\nSummary of old rules / new rules:\n\nOld rules: 20,000 inaccurately-counted-sigops for a 1MB block\nNew: 80,000 accurately-counted sigops for an 8MB block\n\nA scan of the last 100,000 blocks for high-sigop blocks gets\na maximum of 7,350 sigops in block 364,773 (in a single, huge,\n~1MB transaction).\n\nFor reference, Pieter Wuille's libsecp256k1 validation code\nvalidates about 10,000 signatures per second on a single\n2.7GHZ CPU core.\n\nOld rules: no limit for number of bytes hashed to generate\nsignature hashes\n\nNew rule: 1.3gigabytes hashed per 8MB block to generate\nsignature hashes\n\nBlock 364,422 contains a single ~1MB transaction that requires\n1.2GB of data hashed to generate signature hashes.\n\nTODO: benchmark Core's sighash-creation code ('openssl speed sha256'\nreports something like 1GB per second on my machine).\n\nNote that in normal operation most validation work is done as transactions\nare received from the network, and can be cached so it doesn't have to be\nrepeated when a new block is found. The limits described in this BIP are\nintended, as the existing sigop limits are intended, to be an extra \"belt\nand suspenders\" measure to mitigate any possible attack that involves\ncreating and broadcasting a very expensive-to-verify block.\n\n\nDraft BIP:\n\n  BIP: ??\n  Title: Consensus rules to limit CPU time required to validate blocks\n  Author: Gavin Andresen <gavinandresen at gmail.com>\n  Status: Draft\n  Type: Standards Track\n  Created: 2015-07-24\n\n==Abstract==\n\nMitigate potential CPU exhaustion denial-of-service attacks by limiting\nthe maximum number of ECDSA signature verfications done per block,\nand limiting the number of bytes hashed to compute signature hashes.\n\n==Motivation==\n\nSergio Demian Lerner reported that a maliciously constructed block could\ntake several minutes to validate, due to the way signature hashes are\ncomputed for OP_CHECKSIG/OP_CHECKMULTISIG ([[\nhttps://bitcointalk.org/?topic=140078|CVE-2013-2292]]).\nEach signature validation can require hashing most of the transaction's\nbytes, resulting in O(s*b) scaling (where s is the number of signature\noperations and b is the number of bytes in the transaction, excluding\nsignatures). If there are no limits on s or b the result is O(n^2) scaling\n(where n is a multiple of the number of bytes in the block).\n\nThis potential attack was mitigated by changing the default relay and\nmining policies so transactions larger than 100,000 bytes were not\nrelayed across the network or included in blocks. However, a miner\nnot following the default policy could choose to include a\ntransaction that filled the entire one-megaybte block and took\na long time to validate.\n\n==Specification==\n\nAfter deployment, the existing consensus rule for maximum number of\nsignature operations per block (20,000, counted in two different,\nidiosyncratic, ad-hoc ways) shall be replaced by the following two rules:\n\n1. The maximum number of ECDSA verify operations required to validate\nall of the transactions in a block must be less than or equal to\nthe maximum block size in bytes divided by 100 (rounded down).\n\n2. The maximum number of bytes hashed to compute ECDSA signatures for\nall transactions in a block must be less than or equal to the\nmaximum block size in bytes times 160.\n\n==Compatibility==\n\nThis change is compatible with existing transaction-creation software,\nbecause transactions larger than 100,000 bytes have been considered\n\"non-standard\"\n(they are not relayed or mined by default) for years, and a block full of\n\"standard\" transactions will be well-under the limits.\n\nSoftware that assembles transactions into blocks and software that validates\nblocks must be updated to enforce the new consensus rules.\n\n==Deployment==\n\nThis change will be deployed with BIP 100 or BIP 101.\n\n==Discussion==\n\nLinking these consensus rules to the maximum block size allows more\ntransactions\nand/or transactions with more inputs or outputs to be included if the\nmaximum\nblock size increases.\n\nThe constants are chosen to be maximally compatible with the existing\nconsensus rule,\nand to virtually eliminate the possibility that bitcoins could be lost if\nsomebody had locked some funds in a pre-signed, expensive-to-validate,\nlocktime-in-the-future\ntransaction.\n\nBut they are chosen to put a reasonable upper bound on the CPU time\nrequired to validate\na maximum-sized block.\n\n===Alternatives to this BIP:===\n\n1. A simple limit on transaction size (e.g. any transaction in a block must\nbe 100,000\nbytes or smaller).\n\n2. Fix the CHECKSIG/CHECKMULTISIG opcodes so they don't re-hash variations\nof\nthe transaction's data. This is the \"most correct\" solution, but would\nrequire\nupdating every piece of transaction-creating and transaction-validating\nsoftware\nto change how they compute the signature hash, and to avoid potential\nattacks would\nstill require some limit on how many such operations were permitted.\n\n==References==\n\n[[https://bitcointalk.org/?topic=140078|CVE-2013-2292]]: Sergio Demian\nLerner's original report\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/742c5a7d/attachment-0001.html>"
            },
            {
                "author": "odinn",
                "date": "2015-07-25T00:47:51",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nInteresting, so this basically would merge into an already existing\nBIP (Jeff Garzik's).  However, it proposes some changes.\n\nOK\n\nCVE-2013-2292 is a severity thingy of \"high\" which is described as\n\n\"bitcoind and Bitcoin-Qt 0.8.0 and earlier allow remote attackers to\ncause a denial of service (electricity consumption) by mining a block\nto create a nonstandard Bitcoin transaction containing multiple\nOP_CHECKSIG script opcodes.\"\n\n(munches popcorn)\n\nI do appreciate seeing the effort toward working something toward /\ninto Garzik's proposal.  The general idea that I suggested before - to\nwork some new ideas (not XT-related), into a BIP, and to work with\nJeff Garzik on getting something done, seems to be the direction that\nyou are taking... so I'm hopeful that continues.\n\n- -O\n\nOn 07/24/2015 01:59 PM, Gavin Andresen via bitcoin-dev wrote:\n> After thinking about it, implementing it, and doing some\n> benchmarking, I'm convinced replacing the existing, messy, ad-hoc\n> sigop-counting consensus rules is the right thing to do.\n> \n> The last two commits in this branch are an implementation: \n> https://github.com/gavinandresen/bitcoin-git/commits/count_hash_size\n>\n>  From the commit message in the last commit:\n> \n> Summary of old rules / new rules:\n> \n> Old rules: 20,000 inaccurately-counted-sigops for a 1MB block New:\n> 80,000 accurately-counted sigops for an 8MB block\n> \n> A scan of the last 100,000 blocks for high-sigop blocks gets a\n> maximum of 7,350 sigops in block 364,773 (in a single, huge, ~1MB\n> transaction).\n> \n> For reference, Pieter Wuille's libsecp256k1 validation code \n> validates about 10,000 signatures per second on a single 2.7GHZ CPU\n> core.\n> \n> Old rules: no limit for number of bytes hashed to generate \n> signature hashes\n> \n> New rule: 1.3gigabytes hashed per 8MB block to generate signature\n> hashes\n> \n> Block 364,422 contains a single ~1MB transaction that requires \n> 1.2GB of data hashed to generate signature hashes.\n> \n> TODO: benchmark Core's sighash-creation code ('openssl speed\n> sha256' reports something like 1GB per second on my machine).\n> \n> Note that in normal operation most validation work is done as \n> transactions are received from the network, and can be cached so\n> it doesn't have to be repeated when a new block is found. The\n> limits described in this BIP are intended, as the existing sigop\n> limits are intended, to be an extra \"belt and suspenders\" measure\n> to mitigate any possible attack that involves creating and\n> broadcasting a very expensive-to-verify block.\n> \n> \n> Draft BIP:\n> \n> BIP: ?? Title: Consensus rules to limit CPU time required to\n> validate blocks Author: Gavin Andresen <gavinandresen at gmail.com \n> <mailto:gavinandresen at gmail.com>> Status: Draft Type: Standards\n> Track Created: 2015-07-24\n> \n> ==Abstract==\n> \n> Mitigate potential CPU exhaustion denial-of-service attacks by\n> limiting the maximum number of ECDSA signature verfications done\n> per block, and limiting the number of bytes hashed to compute\n> signature hashes.\n> \n> ==Motivation==\n> \n> Sergio Demian Lerner reported that a maliciously constructed block\n> could take several minutes to validate, due to the way signature\n> hashes are computed for OP_CHECKSIG/OP_CHECKMULTISIG \n> ([[https://bitcointalk.org/?topic=140078|CVE-2013-2292]]). Each\n> signature validation can require hashing most of the transaction's \n> bytes, resulting in O(s*b) scaling (where s is the number of\n> signature operations and b is the number of bytes in the\n> transaction, excluding signatures). If there are no limits on s or\n> b the result is O(n^2) scaling (where n is a multiple of the number\n> of bytes in the block).\n> \n> This potential attack was mitigated by changing the default relay\n> and mining policies so transactions larger than 100,000 bytes were\n> not relayed across the network or included in blocks. However, a\n> miner not following the default policy could choose to include a \n> transaction that filled the entire one-megaybte block and took a\n> long time to validate.\n> \n> ==Specification==\n> \n> After deployment, the existing consensus rule for maximum number\n> of signature operations per block (20,000, counted in two\n> different, idiosyncratic, ad-hoc ways) shall be replaced by the\n> following two rules:\n> \n> 1. The maximum number of ECDSA verify operations required to\n> validate all of the transactions in a block must be less than or\n> equal to the maximum block size in bytes divided by 100 (rounded\n> down).\n> \n> 2. The maximum number of bytes hashed to compute ECDSA signatures\n> for all transactions in a block must be less than or equal to the \n> maximum block size in bytes times 160.\n> \n> ==Compatibility==\n> \n> This change is compatible with existing transaction-creation\n> software, because transactions larger than 100,000 bytes have been\n> considered \"non-standard\" (they are not relayed or mined by\n> default) for years, and a block full of \"standard\" transactions\n> will be well-under the limits.\n> \n> Software that assembles transactions into blocks and software that\n> validates blocks must be updated to enforce the new consensus\n> rules.\n> \n> ==Deployment==\n> \n> This change will be deployed with BIP 100 or BIP 101.\n> \n> ==Discussion==\n> \n> Linking these consensus rules to the maximum block size allows\n> more transactions and/or transactions with more inputs or outputs\n> to be included if the maximum block size increases.\n> \n> The constants are chosen to be maximally compatible with the\n> existing consensus rule, and to virtually eliminate the possibility\n> that bitcoins could be lost if somebody had locked some funds in a\n> pre-signed, expensive-to-validate, locktime-in-the-future \n> transaction.\n> \n> But they are chosen to put a reasonable upper bound on the CPU\n> time required to validate a maximum-sized block.\n> \n> ===Alternatives to this BIP:===\n> \n> 1. A simple limit on transaction size (e.g. any transaction in a\n> block must be 100,000 bytes or smaller).\n> \n> 2. Fix the CHECKSIG/CHECKMULTISIG opcodes so they don't re-hash \n> variations of the transaction's data. This is the \"most correct\"\n> solution, but would require updating every piece of\n> transaction-creating and transaction-validating software to change\n> how they compute the signature hash, and to avoid potential attacks\n> would still require some limit on how many such operations were\n> permitted.\n> \n> ==References==\n> \n> [[https://bitcointalk.org/?topic=140078|CVE-2013-2292]]: Sergio\n> Demian Lerner's original report\n> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVsty2AAoJEGxwq/inSG8ChnsH/1zvxxYlKE4LPdwx9PPdk4Pi\nW9Vj1RAX+J57f+kxE6tVZRLkIVo0vpTPqDaNMAcvsDWPdlK1wQKrjzws1qN8UpiO\nyoMHAu8TC+HMoV+wJZVHafXf/e+PitWMS2P2HMZFVSlh7m/nsZNvjkykgyBNgaoh\nwf4SQOSoorCUr4HDDsw32lmMq5Sohaq3Z+WSXKik8awel6OcerVPDwAWkb79tXTC\nTHI+t3YjLhQjwXNvs3Iwn7z1iYSSUbZUoUlOpCwaeVx6tdtDgW4vzzohCOEl2VqO\nz8K6TM60+01pHAbrsWv9ItOBus8wJWHEyUFcdshf71BaNq2NHfijyCy9dCxtgWg=\n=speV\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "For discussion: limit transaction size to mitigate CVE-2013-2292",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Tier Nolan",
                "Gregory Maxwell",
                "Ross Nicoll",
                "Gavin Andresen",
                "Jeremy Rubin"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 30260
        }
    },
    {
        "title": "[bitcoin-dev] Making Electrum more anonymous",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-22T15:51:02",
                "message_text_only": "Hello,\n\nAlthough Electrum clients connect to several servers in order to fetch\nblock headers, they typically request address balances and address\nhistories from a single server. This means that the chosen server knows\nthat a given set of addresses belong to the same wallet. That is true\neven if Electrum is used over TOR.\n\nThere have been various proposals to improve on that, but none of them\nreally convinced me so far. One recurrent proposal has been to create\nsubsets of wallet addresses, and to send them to separate servers. In my\nopinion, this does not really improve anonymity, because it requires\ntrusting more servers.\n\nHere is an idea, inspired by TOR, on which I would like to have some\nfeedback: We create an anonymous routing layer between Electrum servers\nand clients.\n\n* Each server S publishes a RSA public key, KS\n* Each client receives a list of available servers and their pubkeys\n* For each wallet address, addr_i, a client chooses a server S_i, and a\nRSA keypair (K_addr_i, k_addr_i)\n* The client creates a list of encrypted requests. Each request contains\naddr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n* The client chooses a main server M, and sends the list of encrypted\nrequests to M\n* M dispatches the client's requests to the corresponding servers S_i\n(without the client's IP address.)\n* Each server decrypts the requests it receives, performs the request,\nand encrypts the result with K_addr_i\n* M receives encrypted responses, and forwards them to the client.\n* The client decrypts the encrypted response with k_addr_i\n\nWhat do you think? What are the costs and benefits of such an approach?\n\n(Note: this will not work if all servers, or a large fraction of them,\nare controlled by the same entity that controls M)\n\n\nThomas"
            },
            {
                "author": "Natanael",
                "date": "2015-07-22T16:04:32",
                "message_text_only": "- Sent from my tablet\nDen 22 jul 2015 17:51 skrev \"Thomas Voegtlin via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org>:\n>\n> Hello,\n>\n> Although Electrum clients connect to several servers in order to fetch\n> block headers, they typically request address balances and address\n> histories from a single server. This means that the chosen server knows\n> that a given set of addresses belong to the same wallet. That is true\n> even if Electrum is used over TOR.\n>\n> There have been various proposals to improve on that, but none of them\n> really convinced me so far. One recurrent proposal has been to create\n> subsets of wallet addresses, and to send them to separate servers. In my\n> opinion, this does not really improve anonymity, because it requires\n> trusting more servers.\n>\n> Here is an idea, inspired by TOR, on which I would like to have some\n> feedback: We create an anonymous routing layer between Electrum servers\n> and clients.\n\nWhy not look at something like Dissent? http://dedis.cs.yale.edu/dissent/\n\nThis protocol reduces the impact of Sybil attacks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/55192dba/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-22T16:30:36",
                "message_text_only": "Hi Thomas,\n\nThe scheme is essentially onion routing. The set of {M} are entry nodes\nand the set of {S} are exit nodes. The weaknesses are as you would see\nin an analogous TOR implementation:\n\n(1) The lack of relay nodes {R} make collaboration between any subset of\n{M} and {S} trivial.\n\n(2) OR is a mixnet, so the size of the network matters a lot.\n\n(3) The directory is a perpetual weakness.\n\n(4) Content is visible to the exit node (or the final service). This\nmeans each address must be passed via a distinct route to prevent\ncorrelation.\n\ne\n\nOn 07/22/2015 08:51 AM, Thomas Voegtlin via bitcoin-dev wrote:\n> Hello,\n> \n> Although Electrum clients connect to several servers in order to fetch\n> block headers, they typically request address balances and address\n> histories from a single server. This means that the chosen server knows\n> that a given set of addresses belong to the same wallet. That is true\n> even if Electrum is used over TOR.\n> \n> There have been various proposals to improve on that, but none of them\n> really convinced me so far. One recurrent proposal has been to create\n> subsets of wallet addresses, and to send them to separate servers. In my\n> opinion, this does not really improve anonymity, because it requires\n> trusting more servers.\n> \n> Here is an idea, inspired by TOR, on which I would like to have some\n> feedback: We create an anonymous routing layer between Electrum servers\n> and clients.\n> \n> * Each server S publishes a RSA public key, KS\n> * Each client receives a list of available servers and their pubkeys\n> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> RSA keypair (K_addr_i, k_addr_i)\n> * The client creates a list of encrypted requests. Each request contains\n> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> * The client chooses a main server M, and sends the list of encrypted\n> requests to M\n> * M dispatches the client's requests to the corresponding servers S_i\n> (without the client's IP address.)\n> * Each server decrypts the requests it receives, performs the request,\n> and encrypts the result with K_addr_i\n> * M receives encrypted responses, and forwards them to the client.\n> * The client decrypts the encrypted response with k_addr_i\n> \n> What do you think? What are the costs and benefits of such an approach?\n> \n> (Note: this will not work if all servers, or a large fraction of them,\n> are controlled by the same entity that controls M)\n> \n> \n> Thomas\n> _______________________________________________\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/f06a04f6/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-22T22:20:33",
                "message_text_only": "I should add that the obvious resolution to this set of problems is to\nuse a distinct Tor route for each Bitcoin address, not to reinvent Tor\nand reproduce its community. So ultimately this is easy to implement,\nbut the downside is performance.\n\nBut it's important to keep in mind that poor-performing perfect privacy\nfor address monitoring is trivial to achieve - just sync the full\nblockchain.\n\nPresumably if you don't trust a server to protect your privacy, you also\ndon't trust it with your money. So any robust privacy optimization would\nat least be designed to support partial (SPV) chain clients. It would\nalso need to support wallet restoration from backup.\n\nThe level of privacy will always be a performance trade-off. The ideal\nsolution would allow a client to balance privacy against performance.\n\ne\n\nOn 07/22/2015 09:30 AM, Eric Voskuil wrote:\n> Hi Thomas,\n> \n> The scheme is essentially onion routing. The set of {M} are entry nodes\n> and the set of {S} are exit nodes. The weaknesses are as you would see\n> in an analogous TOR implementation:\n> \n> (1) The lack of relay nodes {R} make collaboration between any subset of\n> {M} and {S} trivial.\n> \n> (2) OR is a mixnet, so the size of the network matters a lot.\n> \n> (3) The directory is a perpetual weakness.\n> \n> (4) Content is visible to the exit node (or the final service). This\n> means each address must be passed via a distinct route to prevent\n> correlation.\n> \n> e\n> \n> On 07/22/2015 08:51 AM, Thomas Voegtlin via bitcoin-dev wrote:\n>> Hello,\n>>\n>> Although Electrum clients connect to several servers in order to fetch\n>> block headers, they typically request address balances and address\n>> histories from a single server. This means that the chosen server knows\n>> that a given set of addresses belong to the same wallet. That is true\n>> even if Electrum is used over TOR.\n>>\n>> There have been various proposals to improve on that, but none of them\n>> really convinced me so far. One recurrent proposal has been to create\n>> subsets of wallet addresses, and to send them to separate servers. In my\n>> opinion, this does not really improve anonymity, because it requires\n>> trusting more servers.\n>>\n>> Here is an idea, inspired by TOR, on which I would like to have some\n>> feedback: We create an anonymous routing layer between Electrum servers\n>> and clients.\n>>\n>> * Each server S publishes a RSA public key, KS\n>> * Each client receives a list of available servers and their pubkeys\n>> * For each wallet address, addr_i, a client chooses a server S_i, and a\n>> RSA keypair (K_addr_i, k_addr_i)\n>> * The client creates a list of encrypted requests. Each request contains\n>> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n>> * The client chooses a main server M, and sends the list of encrypted\n>> requests to M\n>> * M dispatches the client's requests to the corresponding servers S_i\n>> (without the client's IP address.)\n>> * Each server decrypts the requests it receives, performs the request,\n>> and encrypts the result with K_addr_i\n>> * M receives encrypted responses, and forwards them to the client.\n>> * The client decrypts the encrypted response with k_addr_i\n>>\n>> What do you think? What are the costs and benefits of such an approach?\n>>\n>> (Note: this will not work if all servers, or a large fraction of them,\n>> are controlled by the same entity that controls M)\n>>\n>>\n>> Thomas\n>> _______________________________________________\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/bba8ae1a/attachment.sig>"
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-07-22T23:07:12",
                "message_text_only": "I would recommend the following solution as a decent compromise between\ncomplexity and privacy:\n\n1) Encourage electrum server operators to have their servers reachable as\ntor hidden services (.onion addresses)\n2) Make sure server discovery works well with .onion addresses\n3) Make the privacy a user configurable setting:\n  - None - Allows any server connection type\n  - SSL - Requires SSL at least, no plain text\n  - Tor - Requires tor, no direct TCP\n  - Multi-Tor - Uses a variety of tor paths to reach a variety of servers\n(maybe configurable number of servers)\n\nDefault should be 'SSL' probably.\n\n\n\n\n\n\n\n\nOn Wed, Jul 22, 2015 at 3:20 PM Eric Voskuil via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I should add that the obvious resolution to this set of problems is to\n> use a distinct Tor route for each Bitcoin address, not to reinvent Tor\n> and reproduce its community. So ultimately this is easy to implement,\n> but the downside is performance.\n>\n> But it's important to keep in mind that poor-performing perfect privacy\n> for address monitoring is trivial to achieve - just sync the full\n> blockchain.\n>\n> Presumably if you don't trust a server to protect your privacy, you also\n> don't trust it with your money. So any robust privacy optimization would\n> at least be designed to support partial (SPV) chain clients. It would\n> also need to support wallet restoration from backup.\n>\n> The level of privacy will always be a performance trade-off. The ideal\n> solution would allow a client to balance privacy against performance.\n>\n> e\n>\n> On 07/22/2015 09:30 AM, Eric Voskuil wrote:\n> > Hi Thomas,\n> >\n> > The scheme is essentially onion routing. The set of {M} are entry nodes\n> > and the set of {S} are exit nodes. The weaknesses are as you would see\n> > in an analogous TOR implementation:\n> >\n> > (1) The lack of relay nodes {R} make collaboration between any subset of\n> > {M} and {S} trivial.\n> >\n> > (2) OR is a mixnet, so the size of the network matters a lot.\n> >\n> > (3) The directory is a perpetual weakness.\n> >\n> > (4) Content is visible to the exit node (or the final service). This\n> > means each address must be passed via a distinct route to prevent\n> > correlation.\n> >\n> > e\n> >\n> > On 07/22/2015 08:51 AM, Thomas Voegtlin via bitcoin-dev wrote:\n> >> Hello,\n> >>\n> >> Although Electrum clients connect to several servers in order to fetch\n> >> block headers, they typically request address balances and address\n> >> histories from a single server. This means that the chosen server knows\n> >> that a given set of addresses belong to the same wallet. That is true\n> >> even if Electrum is used over TOR.\n> >>\n> >> There have been various proposals to improve on that, but none of them\n> >> really convinced me so far. One recurrent proposal has been to create\n> >> subsets of wallet addresses, and to send them to separate servers. In my\n> >> opinion, this does not really improve anonymity, because it requires\n> >> trusting more servers.\n> >>\n> >> Here is an idea, inspired by TOR, on which I would like to have some\n> >> feedback: We create an anonymous routing layer between Electrum servers\n> >> and clients.\n> >>\n> >> * Each server S publishes a RSA public key, KS\n> >> * Each client receives a list of available servers and their pubkeys\n> >> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> >> RSA keypair (K_addr_i, k_addr_i)\n> >> * The client creates a list of encrypted requests. Each request contains\n> >> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> >> * The client chooses a main server M, and sends the list of encrypted\n> >> requests to M\n> >> * M dispatches the client's requests to the corresponding servers S_i\n> >> (without the client's IP address.)\n> >> * Each server decrypts the requests it receives, performs the request,\n> >> and encrypts the result with K_addr_i\n> >> * M receives encrypted responses, and forwards them to the client.\n> >> * The client decrypts the encrypted response with k_addr_i\n> >>\n> >> What do you think? What are the costs and benefits of such an approach?\n> >>\n> >> (Note: this will not work if all servers, or a large fraction of them,\n> >> are controlled by the same entity that controls M)\n> >>\n> >>\n> >> Thomas\n> >> _______________________________________________\n> >\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/da02ff32/attachment.html>"
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-07-22T16:41:24",
                "message_text_only": "I've thought about this as well, (in addition to making a java\nimplementation of the electrum server).\n\nOne solution would be for the client to combine all the addresses they are\ninterested in into a single bloom filter and send that to the server.\n\nIt would be pretty expensive for the server to check every address against\nthe bloom filter, but maybe for recent blocks (client can send how behind\nthey are) and for new transactions it wouldn't be bad at all.\n\nThe client could end up receiving a bunch of transactions they weren't\ninterested in but it would likely be manageable.\n\nThe client would also need to be fairly clever, including a set of static\nruse addresses and dynamic ruse addresses that they include in the filter.\nThat way a server would have a hard time using the bloom filter as a\nfingerprint and figuring out which addresses are the real ones.\n\nAn alternative would be the server sending a bloom filter of addresses in\neach block and then the client requesting entire blocks.  This would use\nmore bandwidth, but it seems like it would be pretty simple to implement\nand give good anonymity.\n\nBasically the idea is to spend more bandwidth and CPU to keep the server in\nthe dark on what the client really wants.\n\nOn Wed, Jul 22, 2015 at 8:51 AM Thomas Voegtlin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> Although Electrum clients connect to several servers in order to fetch\n> block headers, they typically request address balances and address\n> histories from a single server. This means that the chosen server knows\n> that a given set of addresses belong to the same wallet. That is true\n> even if Electrum is used over TOR.\n>\n> There have been various proposals to improve on that, but none of them\n> really convinced me so far. One recurrent proposal has been to create\n> subsets of wallet addresses, and to send them to separate servers. In my\n> opinion, this does not really improve anonymity, because it requires\n> trusting more servers.\n>\n> Here is an idea, inspired by TOR, on which I would like to have some\n> feedback: We create an anonymous routing layer between Electrum servers\n> and clients.\n>\n> * Each server S publishes a RSA public key, KS\n> * Each client receives a list of available servers and their pubkeys\n> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> RSA keypair (K_addr_i, k_addr_i)\n> * The client creates a list of encrypted requests. Each request contains\n> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> * The client chooses a main server M, and sends the list of encrypted\n> requests to M\n> * M dispatches the client's requests to the corresponding servers S_i\n> (without the client's IP address.)\n> * Each server decrypts the requests it receives, performs the request,\n> and encrypts the result with K_addr_i\n> * M receives encrypted responses, and forwards them to the client.\n> * The client decrypts the encrypted response with k_addr_i\n>\n> What do you think? What are the costs and benefits of such an approach?\n>\n> (Note: this will not work if all servers, or a large fraction of them,\n> are controlled by the same entity that controls M)\n>\n>\n> Thomas\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/0cc44782/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-22T21:18:51",
                "message_text_only": ">\n> One solution would be for the client to combine all the addresses they are\n> interested in into a single bloom filter and send that to the server.\n>\n\n<snip extra ideas>\n\nHey Joseph,\n\nAll those ideas are ones we had years ago and they are implemented in the\ncurrent Bitcoin protocol.\n\nThe trick, as you may know, is this bit:\n\nThe client would also need to be fairly clever\n>\n\nIt turns out making a sufficiently clever client to fool even advanced\nobservers is a lot of programming work, assuming you wish for the Ultimate\nSolution which lets you allocate a desired quantity of bandwidth and then\nuse it to maximize privacy.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/0c849b21/attachment.html>"
            },
            {
                "author": "gb",
                "date": "2015-07-22T23:11:46",
                "message_text_only": "Why RSA?\n\n> \n> Here is an idea, inspired by TOR, on which I would like to have some\n> feedback: We create an anonymous routing layer between Electrum servers\n> and clients.\n> \n> * Each server S publishes a RSA public key, KS\n> * Each client receives a list of available servers and their pubkeys\n> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> RSA keypair (K_addr_i, k_addr_i)\n> * The client creates a list of encrypted requests. Each request contains\n> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> * The client chooses a main server M, and sends the list of encrypted\n> requests to M\n> * M dispatches the client's requests to the corresponding servers S_i\n> (without the client's IP address.)\n> * Each server decrypts the requests it receives, performs the request,\n> and encrypts the result with K_addr_i\n> * M receives encrypted responses, and forwards them to the client.\n> * The client decrypts the encrypted response with k_addr_i\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-23T00:07:14",
                "message_text_only": "This is a good point. I didn't delve into the specifics of\nimplementation due to the larger issues that I raised. Libbitcoin Server\nuses CurveZMQ, an implementation of CurveCP.\n\nhttp://curvecp.org\nhttp://curvezmq.org\nhttps://en.bitcoin.it/wiki/Libbitcoin_Server\n\ne\n\nOn 07/22/2015 04:11 PM, gb via bitcoin-dev wrote:\n> Why RSA?\n> \n>>\n>> Here is an idea, inspired by TOR, on which I would like to have some\n>> feedback: We create an anonymous routing layer between Electrum servers\n>> and clients.\n>>\n>> * Each server S publishes a RSA public key, KS\n>> * Each client receives a list of available servers and their pubkeys\n>> * For each wallet address, addr_i, a client chooses a server S_i, and a\n>> RSA keypair (K_addr_i, k_addr_i)\n>> * The client creates a list of encrypted requests. Each request contains\n>> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n>> * The client chooses a main server M, and sends the list of encrypted\n>> requests to M\n>> * M dispatches the client's requests to the corresponding servers S_i\n>> (without the client's IP address.)\n>> * Each server decrypts the requests it receives, performs the request,\n>> and encrypts the result with K_addr_i\n>> * M receives encrypted responses, and forwards them to the client.\n>> * The client decrypts the encrypted response with k_addr_i\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/d1fdfd0f/attachment-0001.sig>"
            },
            {
                "author": "s7r",
                "date": "2015-07-24T11:12:39",
                "message_text_only": "Hi,\n\nI think this would be too complicated in practice and you'd have to\ndefend against many other types of attacks, including but not limited to\nSybil attacks, misbehaving servers not responding to requests,\nmisbehaving servers not forwarding requests, you'd need some kind of\ndirectory servers or master servers which sign and authenticate the\npublic server keys, otherwise someone can poison that data and provide\nthe clients with wrong server keys.\n\nSecondly, you'd not use RSA for this, but rather Ed25519 which is\nfaster, more cpu efficient and provides better security.\n\nLast but not least, I don't see this as a major issue and I really thin\nit is not worth your time. Better work on electrum server defenses,\nhardening them against DoS. After all, Electrum is a SPV based Bitcoin\nwallet, so it cannot be more anonymous than Bitcoin itself, which we\nalready know it is pseudonymous, not anonymous and transactions can\n/will be linked to addresses. This is just a limitation of Bitcoin as it\nis today, and using SPV you assume the risk of trusting the server, it's\njust how SPV should work. As a pro, it gives you the ability to sync\nimmediately and not download the entire blockchain.\n\nPrivacy concerned people should run their own Electrum server and make\nit accessible via .onion, and connect the bitcoind running on the\nelectrum server host only to other onion peers (onlynet=tor). We should\nhighlight that using Electrum with Tor cannot leak more that some\naddresses belong to the same wallet, which is not the end of the world.\n\nOn 7/22/2015 6:51 PM, Thomas Voegtlin via bitcoin-dev wrote:\n> Hello,\n> \n> Although Electrum clients connect to several servers in order to fetch\n> block headers, they typically request address balances and address\n> histories from a single server. This means that the chosen server knows\n> that a given set of addresses belong to the same wallet. That is true\n> even if Electrum is used over TOR.\n> \n> There have been various proposals to improve on that, but none of them\n> really convinced me so far. One recurrent proposal has been to create\n> subsets of wallet addresses, and to send them to separate servers. In my\n> opinion, this does not really improve anonymity, because it requires\n> trusting more servers.\n> \n> Here is an idea, inspired by TOR, on which I would like to have some\n> feedback: We create an anonymous routing layer between Electrum servers\n> and clients.\n> \n> * Each server S publishes a RSA public key, KS\n> * Each client receives a list of available servers and their pubkeys\n> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> RSA keypair (K_addr_i, k_addr_i)\n> * The client creates a list of encrypted requests. Each request contains\n> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> * The client chooses a main server M, and sends the list of encrypted\n> requests to M\n> * M dispatches the client's requests to the corresponding servers S_i\n> (without the client's IP address.)\n> * Each server decrypts the requests it receives, performs the request,\n> and encrypts the result with K_addr_i\n> * M receives encrypted responses, and forwards them to the client.\n> * The client decrypts the encrypted response with k_addr_i\n> \n> What do you think? What are the costs and benefits of such an approach?\n> \n> (Note: this will not work if all servers, or a large fraction of them,\n> are controlled by the same entity that controls M)\n> \n> \n> Thomas\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T21:20:06",
                "message_text_only": "> Sent: Friday, July 24, 2015 at 2:12 PM\n> From: \"s7r via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Making Electrum more anonymous\n>\n> Privacy concerned people should run their own Electrum server and make\n> it accessible via .onion, and connect the bitcoind running on the\n> electrum server host only to other onion peers (onlynet=tor). We should\n> highlight that using Electrum with Tor cannot leak more that some\n> addresses belong to the same wallet, which is not the end of the world.\n> \n\nIt leaks your timezone too. As pointed out in another thread running a electrum-server instance is no easy task and can't really be suggested to another as a sensible thing to run for themselves. Enthusiasts maybe, but they'll just want to run Bitcoin core and skip the behemoth middleman."
            },
            {
                "author": "Stefan Richter",
                "date": "2015-07-23T12:23:35",
                "message_text_only": "This looks like a prime application for this PIR library:\nhttp://percy.sourceforge.net/apidocs/index.html\n\nEric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nschrieb am Do., 23. Juli 2015 um 02:07 Uhr:\n\n> This is a good point. I didn't delve into the specifics of\n> implementation due to the larger issues that I raised. Libbitcoin Server\n> uses CurveZMQ, an implementation of CurveCP.\n>\n> http://curvecp.org\n> http://curvezmq.org\n> https://en.bitcoin.it/wiki/Libbitcoin_Server\n>\n> e\n>\n> On 07/22/2015 04:11 PM, gb via bitcoin-dev wrote:\n> > Why RSA?\n> >\n> >>\n> >> Here is an idea, inspired by TOR, on which I would like to have some\n> >> feedback: We create an anonymous routing layer between Electrum servers\n> >> and clients.\n> >>\n> >> * Each server S publishes a RSA public key, KS\n> >> * Each client receives a list of available servers and their pubkeys\n> >> * For each wallet address, addr_i, a client chooses a server S_i, and a\n> >> RSA keypair (K_addr_i, k_addr_i)\n> >> * The client creates a list of encrypted requests. Each request contains\n> >> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n> >> * The client chooses a main server M, and sends the list of encrypted\n> >> requests to M\n> >> * M dispatches the client's requests to the corresponding servers S_i\n> >> (without the client's IP address.)\n> >> * Each server decrypts the requests it receives, performs the request,\n> >> and encrypts the result with K_addr_i\n> >> * M receives encrypted responses, and forwards them to the client.\n> >> * The client decrypts the encrypted response with k_addr_i\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/63b8773b/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-24T02:26:28",
                "message_text_only": "I've looked at IT-PIR for Libbitcoin. It's certainly more elegant than\nonion routing for query privacy, but doesn't improve on the collusion\nproblem. As a result the related directory problem would also remain.\n\n\"This protocol sacrifices some level of privacy to gain robustness.\nBecause of this  we need to assume that there is no collusion between\nsome number of servers. In some  settings, it is unclear how this\nrequirement can be enforced or detected. This uncertainty  may make this\nprotocol less desirable than others with different privacy guarantees.\"\n\nhttp://www.cypherpunks.ca/~iang/pubs/hybridpir-pets.pdf\n\nFrom the same source, regarding aforementioned options:\n\n\"An assumption used in many PETs, including mix networks, secret\nsharing, onion routing and some voting protocols, is that no more than\nsome threshold of agents are colluding against the user to discover the\nprivate information.\"\n\nAnother option is computationally-bounded CPIR, but from the same source:\n\n\"The main problem with the CPIR protocols already  discussed is that\nthey do not generally perform queries faster than the trivial protocol.\"\n\nWhere the \"trivial protocol\" in our problem is full blockchain download.\n\nWRT an alternative CPIR proposed in 2007:\n\n\"The idea behind their protocol is to add noise to the query in a way\nthat the server  cannot discover which record the client is interested\nin, but with the secret information  that the client has, she can remove\nthe noise from the server\u2019s response.\"\n\nThis is the idea behind stealth prefix queries:\n\nhttps://github.com/libbitcoin/libbitcoin-explorer/wiki/bx-fetch-stealth\n\nFrom our perspective, another important objective of query privacy is\nallowing the caller make the trade-off between the relative levels of\nprivacy and performance - from absolute to non-existent. In some cases\nprivacy is neither required nor desired.\n\nPrefix filtering accomplishes the client-tuning objective. It also does\nnot suffer server collusion attacks nor is it dependent on computational\nbounds. The primary trade-off becomes result set (download) size against\nprivacy.\n\ne\n\nOn 07/23/2015 05:23 AM, Stefan Richter wrote:\n> This looks like a prime application for this PIR\n> library: http://percy.sourceforge.net/apidocs/index.html\n> \n> Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> schrieb am Do., 23. Juli\n> 2015 um 02:07 Uhr:\n> \n>     This is a good point. I didn't delve into the specifics of\n>     implementation due to the larger issues that I raised. Libbitcoin Server\n>     uses CurveZMQ, an implementation of CurveCP.\n> \n>     http://curvecp.org\n>     http://curvezmq.org\n>     https://en.bitcoin.it/wiki/Libbitcoin_Server\n> \n>     e\n> \n>     On 07/22/2015 04:11 PM, gb via bitcoin-dev wrote:\n>     > Why RSA?\n>     >\n>     >>\n>     >> Here is an idea, inspired by TOR, on which I would like to have some\n>     >> feedback: We create an anonymous routing layer between Electrum\n>     servers\n>     >> and clients.\n>     >>\n>     >> * Each server S publishes a RSA public key, KS\n>     >> * Each client receives a list of available servers and their pubkeys\n>     >> * For each wallet address, addr_i, a client chooses a server S_i,\n>     and a\n>     >> RSA keypair (K_addr_i, k_addr_i)\n>     >> * The client creates a list of encrypted requests. Each request\n>     contains\n>     >> addr_i and K_addr_i, and is encrypted with the pubkey KS_i of S_i\n>     >> * The client chooses a main server M, and sends the list of encrypted\n>     >> requests to M\n>     >> * M dispatches the client's requests to the corresponding servers S_i\n>     >> (without the client's IP address.)\n>     >> * Each server decrypts the requests it receives, performs the\n>     request,\n>     >> and encrypts the result with K_addr_i\n>     >> * M receives encrypted responses, and forwards them to the client.\n>     >> * The client decrypts the encrypted response with k_addr_i\n> \n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/7613c6a2/attachment.sig>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T03:42:07",
                "message_text_only": "Keep in mind this is the similar premise as claimed to be offered by BIP37 bloom filters, but faulty assumptions and implementation failure in BitcoinJ have meant that bloom filters uniquely identify the wallet and offer no privacy for the user no matter what the settings are. If you imagine a system where there is somehow complete separation and anonymization between all requests and subscriptions, the timing still leaks the association between the addresses to the listeners. The obvious solution to that is to use a very high latency mix network, but I somehow doubt that there's any desire for a wallet with SPV security that takes a week to return results. \n\n\n> Sent: Friday, July 24, 2015 at 4:26 AM\n> From: \"Eric Voskuil via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: \"Stefan Richter\" <richter at cs.rwth-aachen.de>, gb <kiwigb at yahoo.com>, \"Thomas Voegtlin\" <thomasv at electrum.org>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Making Electrum more anonymous\n>\n> \n> From our perspective, another important objective of query privacy is\n> allowing the caller make the trade-off between the relative levels of\n> privacy and performance - from absolute to non-existent. In some cases\n> privacy is neither required nor desired.\n> \n> Prefix filtering accomplishes the client-tuning objective. It also does\n> not suffer server collusion attacks nor is it dependent on computational\n> bounds. The primary trade-off becomes result set (download) size against\n> privacy.\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-24T04:44:18",
                "message_text_only": "On 07/23/2015 08:42 PM, Slurms MacKenzie via bitcoin-dev wrote:\n>> From: \"Eric Voskuil via bitcoin-dev\"\n>>\n>> From our perspective, another important objective of query privacy is\n>> allowing the caller make the trade-off between the relative levels of\n>> privacy and performance - from absolute to non-existent. In some\n>> cases privacy is neither required nor desired.\n>>\n>> Prefix filtering accomplishes the client-tuning objective. It also\n>> does not suffer server collusion attacks nor is it dependent on\n>> computational bounds. The primary trade-off becomes result set\n>> (download) size against privacy.\n>\n> Keep in mind this is the similar premise as claimed to be offered by\n> BIP37 bloom filters, but faulty assumptions and implementation\n> failure in BitcoinJ have meant that bloom filters uniquely identify\n> the wallet and offer no privacy for the user no matter what the\n> settings are.\n\nYes, quite true. And without the ability to search using filters there\nis no private restore from backup short of downloading the full chain,\nrendering the idea rather pointless.\n\nThis is why privacy remains a significant issue. Privacy is an essential\naspect of fungibility. This is a central problem for Bitcoin. The\ncorrelation of addresses within transactions is of course problematic.\nPossibly zero knowledge proof will at some point come to the rescue. But\nthe correlation of addresses via search works against the benefits of\naddress non-reuse, and the correlation of addresses to IP addresses\nworks against the use of private addresses.\n\nSolving the latter two problems can go a long way to reducing the impact\nof the former. But currently the only solution is to run a full chain\nwallet. This is not a viable solution for many scenarios, and getting\nless so.\n\nThis is not a problem that can be ignored, nor is it unique to Electrum.\nThe Bloom filter approach was problematic, but that doesn't preclude the\nexistence of valid solutions.\n\n> If you imagine a system where there is somehow complete\n> separation and anonymization between all requests and subscriptions,\n> the timing still leaks the association between the addresses to the\n> listeners.\n\nWell because of presumed relationship in time these are not actually\nseparated requests. Which is why even the (performance-unrealistic)\noption of a distinct Tor route for each independent address request is\n*still* problematic.\n\n> The obvious solution to that is to use a very high latency\n> mix network, but I somehow doubt that there's any desire for a wallet\n> with SPV security that takes a week to return results.\n\nIntroducing truly-random timing variations into the mixnet solutions can\nmitigate timing attacks, but yes, this just makes the already\nintolerable performance problem much worse.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/d0b298ac/attachment.sig>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T09:38:44",
                "message_text_only": "> Sent: Friday, July 24, 2015 at 6:44 AM\n> From: \"Eric Voskuil\" <eric at voskuil.org>\n> To: \"Slurms MacKenzie\" <slurms at gmx.us>, bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Making Electrum more anonymous\n> \n> This is why privacy remains a significant issue. Privacy is an essential\n> aspect of fungibility. This is a central problem for Bitcoin. \n\nSomewhat under discussed too, really. Peoples money doesn't fly out the window when their privacy is ripped out from under them, as such discussing it seems a little meaningless. As some of the most popular wallets don't even use change addresses, for the comfort of the developers and at the cost of the user. \n\n\n> Solving the latter two problems can go a long way to reducing the impact\n> of the former. But currently the only solution is to run a full chain\n> wallet. This is not a viable solution for many scenarios, and getting\n> less so.\n\nWhich makes the general clambering for demise of the full node wallet all the more baffling.\n\n\n> Well because of presumed relationship in time these are not actually\n> separated requests. Which is why even the (performance-unrealistic)\n> option of a distinct Tor route for each independent address request is\n> *still* problematic.\n\nYep, any leak is a useful leak. Even if you only expose one single address request to me, I now have an idea of what timezone you are in and can eliminate it from other implausible ones. Onion routing is not a solution in my mind, you're just asking for people to sybil attack Electrum clients to capture as much timing data as possible. There's no defending against that.\n\n\n> Introducing truly-random timing variations into the mixnet solutions can\n> mitigate timing attacks, but yes, this just makes the already\n> intolerable performance problem much worse.\n\nRealistically this is all too broken to be building wallets on top of. \n\nSPV clients are neither secure nor private, we should feel guilty for ever promoting them."
            }
        ],
        "thread_summary": {
            "title": "Making Electrum more anonymous",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Natanael",
                "Thomas Voegtlin",
                "Slurms MacKenzie",
                "Mike Hearn",
                "s7r",
                "Stefan Richter",
                "gb",
                "Joseph Gleason \u2448"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 38797
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core and hard forks",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2015-07-22T16:52:20",
                "message_text_only": "Hello all,\n\nI'd like to talk a bit about my view on the relation between the Bitcoin\nCore project, and the consensus rules of Bitcoin.\n\nI believe it is the responsibility of the maintainers/developers of Bitcoin\nCore to create software which helps guarantee the security and operation of\nthe Bitcoin network.\n\nIn addition to normal software maintenance, bug fixes and performance\nimprovements, this includes DoS protection mechanism deemed necessary to\nkeep the network operational. Sometimes, such (per-node configurable)\npolicies have had economic impact, for example the dust rule.\n\nThis also includes participating in discussions about consensus changes,\nbut not the responsibility to decide on them - only to implement them when\nagreed upon. It would be irresponsible and dangerous to the network and\nthus the users of the software to risk forks, or to take a leading role in\npushing dramatic changes. Bitcoin Core developers obviously have the\nability to make any changes to the codebase or its releases, but it is\nstill up to the community to choose to run that code.\n\nSome people have called the prospect of limited block space and the\ndevelopment of a fee market a change in policy compared to the past. I\nrespectfully disagree with that. Bitcoin Core is not running the Bitcoin\neconomy, and its developers have no authority to set its rules. Change in\neconomics is always happening, and should be expected. Worse, intervening\nin consensus changes would make the ecosystem more dependent on the group\ntaking that decision, not less.\n\nSo to point out what I consider obvious: if Bitcoin requires central\ncontrol over its rules by a group of developers, it is completely\nuninteresting to me. Consensus changes should be done using consensus, and\nthe default in case of controversy is no change.\n\n===\n\nMy personal opinion is that we - as a community - should indeed let a fee\nmarket develop, and rather sooner than later, and that \"kicking the can\ndown the road\" is an incredibly dangerous precedent: if we are willing to\ngo through the risk of a hard fork because of a fear of change of\neconomics, then I believe that community is not ready to deal with change\nat all. And some change is inevitable, at any block size. Again, this does\nnot mean the block size needs to be fixed forever, but its intent should be\ngrowing with the evolution of technology, not a panic reaction because a\nfear of change.\n\nBut I am not in any position to force this view. I only hope that people\ndon't think a fear of economic change is reason to give up consensus.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/0a8c7519/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-22T17:18:45",
                "message_text_only": "So, if consensus shouldn't really be between the developers (which is \nfine), should we empower users to control consensus? I've been working \non a fork framework anyway, which can support reasonably arbitrary \nconsensus changes (currently against block height, but moving towards \nblock time). Theoretically it could be modified to load consensus \nparameters (which block size would have to be added to) from disk at \nstartup, rather than having them hard-coded.\n\nIs that considered desirable? Will raise as a PR if so. If not, where do \nwe draw a line between developer and user consensus?\n\nRoss\n\nOn 22/07/2015 17:52, Pieter Wuille via bitcoin-dev wrote:\n>\n> Hello all,\n>\n> I'd like to talk a bit about my view on the relation between the \n> Bitcoin Core project, and the consensus rules of Bitcoin.\n>\n> I believe it is the responsibility of the maintainers/developers of \n> Bitcoin Core to create software which helps guarantee the security and \n> operation of the Bitcoin network.\n>\n> In addition to normal software maintenance, bug fixes and performance \n> improvements, this includes DoS protection mechanism deemed necessary \n> to keep the network operational. Sometimes, such (per-node \n> configurable) policies have had economic impact, for example the dust \n> rule.\n>\n> This also includes participating in discussions about consensus \n> changes, but not the responsibility to decide on them - only to \n> implement them when agreed upon. It would be irresponsible and \n> dangerous to the network and thus the users of the software to risk \n> forks, or to take a leading role in pushing dramatic changes. Bitcoin \n> Core developers obviously have the ability to make any changes to the \n> codebase or its releases, but it is still up to the community to \n> choose to run that code.\n>\n> Some people have called the prospect of limited block space and the \n> development of a fee market a change in policy compared to the past. I \n> respectfully disagree with that. Bitcoin Core is not running the \n> Bitcoin economy, and its developers have no authority to set its \n> rules. Change in economics is always happening, and should be \n> expected. Worse, intervening in consensus changes would make the \n> ecosystem more dependent on the group taking that decision, not less.\n>\n> So to point out what I consider obvious: if Bitcoin requires central \n> control over its rules by a group of developers, it is completely \n> uninteresting to me. Consensus changes should be done using consensus, \n> and the default in case of controversy is no change.\n>\n> ===\n>\n> My personal opinion is that we - as a community - should indeed let a \n> fee market develop, and rather sooner than later, and that \"kicking \n> the can down the road\" is an incredibly dangerous precedent: if we are \n> willing to go through the risk of a hard fork because of a fear of \n> change of economics, then I believe that community is not ready to \n> deal with change at all. And some change is inevitable, at any block \n> size. Again, this does not mean the block size needs to be fixed \n> forever, but its intent should be growing with the evolution of \n> technology, not a panic reaction because a fear of change.\n>\n> But I am not in any position to force this view. I only hope that \n> people don't think a fear of economic change is reason to give up \n> consensus.\n>\n> -- \n> Pieter\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/1b3907fd/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-22T17:32:00",
                "message_text_only": ">default in case of controversy is no change.\n\nI think the result of this would probably be that no controversial \nchanges ever get implemented via this process so others will hard fork \nthe code and eventually make this process irrelevant.  Since you need \nclose to 100% agreement the irrelevance would have to come as a step \nfunction which will manifest itself in a rather disruptive manner.\n\nThe question is really is this hark-forking disruption worse than coming \nup with some kind of process to handle controversial changes.\n\nRuss"
            },
            {
                "author": "Bryan Cheng",
                "date": "2015-07-22T18:45:01",
                "message_text_only": "Pieter, I agree with the overall gist of your statement (that Bitcoin is a\nconsensus-driven protocol that's incompatible with certain forms of central\ngovernance) but I respectfully disagree with some of the conclusions you're\ndrawing.\n\n> Consensus changes should be done using consensus, _and the default in\ncase of controversy is no change_.\n\n(emphasis mine)\n\nI think that there's a disconnect between the idea that Bitcoin Core making\na consensus-driven change in turn means that the network is being forced\ndown a certain path. This takes away a great deal of the individual agency\nthat makes Bitcoin what it is today. Upgrading to a version of Bitcoin Core\nthat is incompatible with your ideals is in no way a forced choice, as you\nhave stated in your email; forks, alternative clients, or staying on an\nolder version are all valid choices. If the majority of the network chooses\nnot to endorse a specific change, then the majority of the network will\ncontinue to operate just fine without it, and properly structured consensus\nrules will pull the minority along as well. (For example, re: block sizes,\nif the majority of hashing power remains on a version or fork that does not\nmine >1MB blocks, a chain of <1MB blocks will continue to be the longest,\nand up to date clients will still respect that. That is consensus at work,\npure and simple.)\n\nObviously Core is in a unique position as a reference client and ignoring\nthat would be irresponsible. If broad consensus among the developers cannot\nbe reached, then Core should not make a given change. However, freezing\nCore's ability to make changes in light of _any_ controversy is allowing a\nfew voices to dictate direction and is counter to any kind of\nconsensus-driven decision making.\n\nPlacing Core and its developers on some sort of pedestal where we believe\nthat they dictate policy and therefore shouldn't be allowed to take any\nrisks will create the very situation that you're advocating against- that a\nsmall group of developers have control over Bitcoin's policies. Instead, we\nshould strive to treat Core as _just another Bitcoin Client_, we should\neducate users to make informed choices about the version of software they\nare running and the choices implicit in that, and we should allow consensus\nat the protocol level to make the decisions on the overall direction of the\nnetwork.\n\n> My personal opinion is that we - as a community - should indeed let a fee\nmarket develop, and rather sooner than later\n\nI will keep this brief because this is straying off topic of the idea of\nthis thread- but I don't believe that increasing Bitcoin's capacity as a\nnetwork is inherently incompatible with the development of a fee market,\nand considering a fee market to be formed of only a single set of variables\n(transaction rate versus block size) is not sound economic analysis.\n\nOn Wed, Jul 22, 2015 at 10:32 AM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> default in case of controversy is no change.\n>>\n>\n> I think the result of this would probably be that no controversial changes\n> ever get implemented via this process so others will hard fork the code and\n> eventually make this process irrelevant.  Since you need close to 100%\n> agreement the irrelevance would have to come as a step function which will\n> manifest itself in a rather disruptive manner.\n>\n> The question is really is this hark-forking disruption worse than coming\n> up with some kind of process to handle controversial changes.\n>\n> Russ\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/6f2fbfdd/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-22T17:33:18",
                "message_text_only": "On Wed, Jul 22, 2015 at 9:52 AM, Pieter Wuille via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Some people have called the prospect of limited block space and the\n> development of a fee market a change in policy compared to the past. I\n> respectfully disagree with that. Bitcoin Core is not running the Bitcoin\n> economy, and its developers have no authority to set its rules. Change in\n> economics is always happening, and should be expected. Worse, intervening\n> in consensus changes would make the ecosystem more dependent on the group\n> taking that decision, not less.\n>\n>\nThis completely ignores *reality*, what users have experienced for the past\n~6 years.\n\n\"Change in economics is always happening\" does not begin to approach the\nscale of the change.\n\nFor the entirety of bitcoin's history, absent long blocks and traffic\nbursts, fee pressure has been largely absent.\n\nMoving to a new economic policy where fee pressure is consistently present\nis radically different from what users, markets, and software have\nexperienced and *lived.*\n\nAnalysis such as [1][2] and more shows that users will hit a \"painful\"\n\"wall\" and market disruption will occur - eventually settling to a new\nequilibrium after a period of chaos - when blocks are consistently full.\n\n[1] http://hashingit.com/analysis/34-bitcoin-traffic-bulletin\n[2] http://gavinandresen.ninja/why-increasing-the-max-block-size-is-urgent\n\nFirst, users & market are forced through this period of chaos by \"let a fee\nmarket develop\" as the whole market changes to a radically different\neconomic policy, once the network has never seen before.\n\nNext, when blocks are consistently full, the past consensus was that block\nsize limit will be increased eventually.  What happens at that point?\n\nAnswer - Users & market are forced through a second period of chaos and\ndisruption as the fee market is rebooted *again* by changing the block size\nlimit.\n\nThe average user hears a lot of noise on both sides of the block size\ndebate, and really has no idea that the new \"let a fee market develop\"\nBitcoin Core policy is going to *raise fees* on them.\n\nIt is clear that\n- \"let the fee market develop, Right Now\" has not been thought through\n- Users are not prepared for a brand new economic policy\n- Users are unaware that a brand new economic policy will be foisted upon\nthem\n\n\n\n> So to point out what I consider obvious: if Bitcoin requires central\n> control over its rules by a group of developers, it is completely\n> uninteresting to me. Consensus changes should be done using consensus, and\n> the default in case of controversy is no change.\n>\n\nFalse.\n\nAll that has to do be done to change bitcoin to a new economic policy - not\nseen in the entire 6 year history of bitcoin - is to stonewall work on\nblock size.\n\nClosing size increase PRs and failing to participate in planning for a\nblock size increase accomplishes your stated goal of changing bitcoin to a\nnew economic policy.\n\n\"no [code] change\"... changes bitcoin to a brand new economic policy,\npicking economic winners & losers.  Some businesses will be priced out of\nbitcoin, etc.\n\nStonewalling size increase changes is just as much as a Ben Bernanke/FOMC\nmove as increasing the hard limit by hard fork.\n\n\n\n> My personal opinion is that we - as a community - should indeed let a fee\n> market develop, and rather sooner than later, and that \"kicking the can\n> down the road\" is an incredibly dangerous precedent: if we are willing to\n> go through the risk of a hard fork because of a fear of change of\n> economics, then I believe that community is not ready to deal with change\n> at all. And some change is inevitable, at any block size. Again, this does\n> not mean the block size needs to be fixed forever, but its intent should be\n> growing with the evolution of technology, not a panic reaction because a\n> fear of change.\n>\n> But I am not in any position to force this view. I only hope that people\n> don't think a fear of economic change is reason to give up consensus.\n>\n\nActually you are.\n\nWhen size increase progress gets frozen out of Bitcoin Core, that just\n*increases* the chances that progress must be made through a contentious\nhard fork.\n\nFurther, it increases the market disruption users will experience, as\ndescribed above.\n\nThink about the users.  Please.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/fb24245a/attachment-0001.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-22T18:01:53",
                "message_text_only": "Addendum:\n\nPlease do not interpret - as many have - my points as advocating against\nletting a fee market ever develop(!).\n\nFees are useful against DoS, increasing cost of attack etc.  Further,\ncontinuing the artificially-low fee policy ad infinitum is unsustainable\nand constitutes a moral hazard.\n\nExamine from the user's point of view.  If you want to develop a fee\nmarket, think it through in the context of user expectation/experience -\nwhich translates to how software is written and users behave, the context\nof market disruption, and the context of further block size increases.\n\nTransition to a new economic policy should be planned.  It should give\nusers and markets time to adjust.\n\nIt is grossly irresponsible to simply drop users into a new economic policy\nwith no warning and no preparation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/a2a73eea/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-07-22T18:03:55",
                "message_text_only": "Jeff I respectively disagree with many of your points, but let me just\npoint out 2.\n\nOver the last 6 years there may not have been fee pressure, but certainly\nthere was the expectation that it was going to happen.  Look at all the\nwork that has been put into fee estimation, why do that work if the\nexpectation was there would be no fee pressure?\n\nI know you respect Pieter's work, so I don't want to twist your words, but\nfor the clarity of other people reading these posts, it sounds like you're\naccusing Pieter and others of stonewalling size increases and not\nparticipating in planning for them.  Without debate, no one has done more\nfor this project to make eventual size increases technically feasible than\nPieter.  We only have the privilege of even having this debate as a result\nof his work.\n\n\n\nOn Wed, Jul 22, 2015 at 1:33 PM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Jul 22, 2015 at 9:52 AM, Pieter Wuille via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Some people have called the prospect of limited block space and the\n>> development of a fee market a change in policy compared to the past. I\n>> respectfully disagree with that. Bitcoin Core is not running the Bitcoin\n>> economy, and its developers have no authority to set its rules. Change in\n>> economics is always happening, and should be expected. Worse, intervening\n>> in consensus changes would make the ecosystem more dependent on the group\n>> taking that decision, not less.\n>>\n>>\n> This completely ignores *reality*, what users have experienced for the\n> past ~6 years.\n>\n> \"Change in economics is always happening\" does not begin to approach the\n> scale of the change.\n>\n> For the entirety of bitcoin's history, absent long blocks and traffic\n> bursts, fee pressure has been largely absent.\n>\n> Moving to a new economic policy where fee pressure is consistently present\n> is radically different from what users, markets, and software have\n> experienced and *lived.*\n>\n> Analysis such as [1][2] and more shows that users will hit a \"painful\"\n> \"wall\" and market disruption will occur - eventually settling to a new\n> equilibrium after a period of chaos - when blocks are consistently full.\n>\n> [1] http://hashingit.com/analysis/34-bitcoin-traffic-bulletin\n> [2] http://gavinandresen.ninja/why-increasing-the-max-block-size-is-urgent\n>\n> First, users & market are forced through this period of chaos by \"let a\n> fee market develop\" as the whole market changes to a radically different\n> economic policy, once the network has never seen before.\n>\n> Next, when blocks are consistently full, the past consensus was that block\n> size limit will be increased eventually.  What happens at that point?\n>\n> Answer - Users & market are forced through a second period of chaos and\n> disruption as the fee market is rebooted *again* by changing the block\n> size limit.\n>\n> The average user hears a lot of noise on both sides of the block size\n> debate, and really has no idea that the new \"let a fee market develop\"\n> Bitcoin Core policy is going to *raise fees* on them.\n>\n> It is clear that\n> - \"let the fee market develop, Right Now\" has not been thought through\n> - Users are not prepared for a brand new economic policy\n> - Users are unaware that a brand new economic policy will be foisted upon\n> them\n>\n>\n>\n>> So to point out what I consider obvious: if Bitcoin requires central\n>> control over its rules by a group of developers, it is completely\n>> uninteresting to me. Consensus changes should be done using consensus, and\n>> the default in case of controversy is no change.\n>>\n>\n> False.\n>\n> All that has to do be done to change bitcoin to a new economic policy -\n> not seen in the entire 6 year history of bitcoin - is to stonewall work on\n> block size.\n>\n> Closing size increase PRs and failing to participate in planning for a\n> block size increase accomplishes your stated goal of changing bitcoin to a\n> new economic policy.\n>\n> \"no [code] change\"... changes bitcoin to a brand new economic policy,\n> picking economic winners & losers.  Some businesses will be priced out of\n> bitcoin, etc.\n>\n> Stonewalling size increase changes is just as much as a Ben Bernanke/FOMC\n> move as increasing the hard limit by hard fork.\n>\n>\n>\n>> My personal opinion is that we - as a community - should indeed let a fee\n>> market develop, and rather sooner than later, and that \"kicking the can\n>> down the road\" is an incredibly dangerous precedent: if we are willing to\n>> go through the risk of a hard fork because of a fear of change of\n>> economics, then I believe that community is not ready to deal with change\n>> at all. And some change is inevitable, at any block size. Again, this does\n>> not mean the block size needs to be fixed forever, but its intent should be\n>> growing with the evolution of technology, not a panic reaction because a\n>> fear of change.\n>>\n>> But I am not in any position to force this view. I only hope that people\n>> don't think a fear of economic change is reason to give up consensus.\n>>\n>\n> Actually you are.\n>\n> When size increase progress gets frozen out of Bitcoin Core, that just\n> *increases* the chances that progress must be made through a contentious\n> hard fork.\n>\n> Further, it increases the market disruption users will experience, as\n> described above.\n>\n> Think about the users.  Please.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/2fd9f799/attachment-0001.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-22T18:24:57",
                "message_text_only": "On Wed, Jul 22, 2015 at 11:03 AM, Alex Morcos <morcos at gmail.com> wrote:\n\n> Over the last 6 years there may not have been fee pressure, but certainly\n> there was the expectation that it was going to happen.  Look at all the\n> work that has been put into fee estimation, why do that work if the\n> expectation was there would be no fee pressure?\n>\n\nThere is a vast difference between what software developers have been\nchattering about in the background versus what the users actually\nexperience in the field.\n\nTo the user, talk of a fee market is equivalent to talk about block size -\nvarious opinions are tossed about, but it doesn't really impact them.  Fees\nhave been low for 6 years.\n\nWe see this with the actual data - no fee pressure on average for the\nentirety of bitcoin's history.  We see this with the recent stress tests,\nwhich exposed dumb wallet behavior WRT fees.   Users -and software- had the\nexpectation\n\nRemember, this is not a judgement on whether or not fee market/pressure\nshould exist.  It is simply a factual observation that users/market have\nnot experienced this new economic policy.\n\nThat opens the question - *why now?*   Why make bitcoin growth more\nexpensive at this time in its young life?  Many smart people would prefer\nthat bitcoin continue to grow, rather than making the system more expensive\nto use right now.\n\nChoosing \"let a fee market develop\" -- *today* -- is picking economic\nsides, picking winners & losers in the market.\n\nThis new policy should be debated and consensus achieved, not simply rolled\nout by fiat without user notification.\n\nOtherwise it is engaging in precisely the economic wizardry that this\nthread opened with decrying.\n\nJust like block size, there are multiple sides to the fee market debate.\nHowever, Bitcoin Core has (unfortunately) outsized decision making power in\nthat simply avoiding progress on block size limit will achieve the \"let a\nfee market develop\" economic policy change.  Ironic but true - sitting\naround and doing nothing dumps users into a new economic policy.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/bc0495dc/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T12:17:14",
                "message_text_only": "On Wed, Jul 22, 2015 at 8:24 PM, Jeff Garzik via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> To the user, talk of a fee market is equivalent to talk about block size -\n> various opinions are tossed about, but it doesn't really impact them.  Fees\n> have been low for 6 years.\n>\n> We see this with the actual data - no fee pressure on average for the\n> entirety of bitcoin's history.  We see this with the recent stress tests,\n> which exposed dumb wallet behavior WRT fees.   Users -and software- had the\n> expectation\n\nThat's because demand for space (transactions) was always lower than\nthe supply (block space) and no market price (fees) arose.\nNow the market (not the supply) has changed: demand has increased.\nWith a fixed supply, it was perfectly reasonable to expect that fees\nwould rise (from zero).\nIf the user expectation is that a price would never arise because\nsupply is going to be increased ad infinitum and they will always be\nable to send fast in-chain bitcoin transactions for free, just like\nbreath air (an abundant resource) for free, then we should change that\nexpectation as soon as possible.\n\n> Remember, this is not a judgement on whether or not fee market/pressure\n> should exist.  It is simply a factual observation that users/market have not\n> experienced this new economic policy.\n\nIt is not a new economic policy, it is a new market situation. Please,\nstop saying that.\n\n> That opens the question - why now?   Why make bitcoin growth more expensive\n> at this time in its young life?  Many smart people would prefer that bitcoin\n> continue to grow, rather than making the system more expensive to use right\n> now.\n\nIf \"not now\", then when?\nI've been asking that question repeatedly and the closest to an answer\nthat I got from the \"not now side\" was \"the hashrate being paid by\nfees instead of subsidy it's too far away in the future to worry about\nit now\".\nThat answer is not very satisfying to me.\n\n> Choosing \"let a fee market develop\" -- today -- is picking economic sides,\n> picking winners & losers in the market.\n\nYes, business plans that rely on free in-chain transactions may fail,\nbusiness plans that are planning for a future with fees and without\nsubsidies may get the advantage they deserve. But \"kicking the can\" is\njust picking winners and losers in opposite way.\nYou seem to imply that rewarding inertia and laziness is the best\noption for short-term bitcoin adoption and you may be right.\nI simply think these arguments shouldn't be considered at all: the\ncriteria for the consensus block size should be purely based on\ntechnological capacity (propagation benchmarking, etc) and\ncentralization concerns (those in the \"not now side\" have already seen\nthis 2-year-old video[1], right?).\nBut it seems to me that the \"not now side\" has no centralization\nconcerns at all and their true position is \"not ever hit the blocksize\nlimit\", that's the only explanation I can find to their lack of\nanswers to the \"when do you think we should allow users to notice that\nthere's a limit in the blocksize to guarantee that the system can be\ndecentralized?\". I've even read that the consensus limit \"was just a\ntemporary measure\". Then Gavin lowers his 32 GB limit to an 8 GB\n\"compromise\".\nMaybe I'm being paranoid, but I'm really afraid that when the  \"not\nnow side\" wins this battle (like they've won for 6 years, as you say)\nthey will simply advance the front and start another battle, because\ntheir true hidden faction is the \"not ever side\".\nPlease, Jeff, Gavin, Mike, show me that I'm wrong on this point.\nPlease, answer my question this time.\nIf \"not now\", then when?\n\n[1] https://www.youtube.com/watch?v=cZp7UGgBR0I"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-23T16:17:51",
                "message_text_only": "On 7/23/2015 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n\n> If the user expectation is that a price would never arise because\n> supply is going to be increased ad infinitum and they will always be\n> able to send fast in-chain bitcoin transactions for free, just like\n> breath air (an abundant resource) for free, then we should change that\n> expectation as soon as possible. \n\nNo.  We should accept that reality may change, and we should promote\nunderstanding of that fact.\n\nWe should not artificially manipulate the market \"as soon as possible,\"\nsince we ourselves don't know much at all about how the market will\nunfold in the future.\n\n\n> the criteria for the consensus block size should be purely based on\n> technological capacity (propagation benchmarking, etc) and\n> centralization concerns\n\nRight, purely these.  There is no place for artificially manipulating\nexpectations.\n\n\n> they will simply advance the front and start another battle, because\n> their true hidden faction is the \"not ever side\". Please, Jeff, Gavin,\n> Mike, show me that I'm wrong on this point. Please, answer my question\n> this time. If \"not now\", then when?\n\nBitcoin has all the hash power.  The merkle root has effectively\ninfinite capacity.  We should be asking HOW to scale the supporting\ninformation propagation system appropriately, not WHEN to limit the\ncapacity of the primary time-stamping machine.\n\nWe haven't tried yet.  I can't answer for the people you asked, but\npersonally I haven't thought much about when we should declare failure."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-23T16:28:44",
                "message_text_only": "On Thu, Jul 23, 2015 at 12:17 PM, Tom Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 7/23/2015 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n> > they will simply advance the front and start another battle, because\n> > their true hidden faction is the \"not ever side\". Please, Jeff, Gavin,\n> > Mike, show me that I'm wrong on this point. Please, answer my question\n> > this time. If \"not now\", then when?\n>\n> Bitcoin has all the hash power.  The merkle root has effectively\n> infinite capacity.  We should be asking HOW to scale the supporting\n> information propagation system appropriately, not WHEN to limit the\n> capacity of the primary time-stamping machine.\n>\n> We haven't tried yet.  I can't answer for the people you asked, but\n> personally I haven't thought much about when we should declare failure.\n\n\nYes! Lets plan for success!\n\nI'd really like to move from \"IMPOSSIBLE because...  (electrum hasn't been\noptimized\n(by the way: you should run on SSDs, LevelDB isn't designed for spinning\ndisks),\nwhat if the network is attacked?  (attacked HOW???), current p2p network is\nusing\nthe simplest, stupidest possible block propagation algorithm...)\"\n\n... to \"lets work together and work through the problems and scale it up.\"\n\nI'm frankly tired of all the negativity here; so tired of it I've decided\nto mostly ignore\nall the debate for a while, not respond to misinformation I see being spread\n(like \"miners have some incentive to create slow-to-propagate blocks\"),\nwork with people like Tom and Mike who have a 'lets get it done' attitude,\nand\nfocus on what it will take to scale up.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/9a8c53b6/attachment.html>"
            },
            {
                "author": "cipher anthem",
                "date": "2015-07-23T16:50:45",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/aa972a99/attachment.html>"
            },
            {
                "author": "Robert Learney",
                "date": "2015-07-23T17:14:06",
                "message_text_only": "That\u2019s not exactly what\u2019s happened though, is it Cipher? Gavin put forward 20Mb then after analysis and discussion has moved to 8Mb, whereas the other camp of core developers is firmly stuck in the \u20181Mb or bust\u2019 group.\n\n-Rob.\n\n> On 23 Jul 2015, at 17:50, cipher anthem via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Why not help on a project that actually seems to offer great scalability like the lightning network? There have been great progress there.\n>  \n> Seems like you did your calculations some time ago to prove that your increase is reasonable, yet when others come with different numbers that don't support your position you say it doesn't matter.\n>  \n> Sent: Thursday, July 23, 2015 at 4:28 PM\n> From: \"Gavin Andresen via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: \"Tom Harding\" <tomh at thinlink.com>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Bitcoin Core and hard forks\n> On Thu, Jul 23, 2015 at 12:17 PM, Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <x-msg://14/bitcoin-dev@lists.linuxfoundation.org>> wrote:\n> On 7/23/2015 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n> > they will simply advance the front and start another battle, because\n> > their true hidden faction is the \"not ever side\". Please, Jeff, Gavin,\n> > Mike, show me that I'm wrong on this point. Please, answer my question\n> > this time. If \"not now\", then when?\n> \n> Bitcoin has all the hash power.  The merkle root has effectively\n> infinite capacity.  We should be asking HOW to scale the supporting\n> information propagation system appropriately, not WHEN to limit the\n> capacity of the primary time-stamping machine.\n> \n> We haven't tried yet.  I can't answer for the people you asked, but\n> personally I haven't thought much about when we should declare failure.\n>  \n> Yes! Lets plan for success!\n>  \n> I'd really like to move from \"IMPOSSIBLE because...  (electrum hasn't been optimized\n> (by the way: you should run on SSDs, LevelDB isn't designed for spinning disks),\n> what if the network is attacked?  (attacked HOW???), current p2p network is using\n> the simplest, stupidest possible block propagation algorithm...)\"\n>  \n> ... to \"lets work together and work through the problems and scale it up.\"\n>  \n> I'm frankly tired of all the negativity here; so tired of it I've decided to mostly ignore\n> all the debate for a while, not respond to misinformation I see being spread\n> (like \"miners have some incentive to create slow-to-propagate blocks\"),\n> work with people like Tom and Mike who have a 'lets get it done' attitude, and\n> focus on what it will take to scale up.\n>  \n> --\n> --\n> Gavin Andresen\n>  \n> _______________________________________________ bitcoin-dev mailing list bitcoin-dev at lists.linuxfoundation.org https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>_______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/a80e6328/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T18:21:25",
                "message_text_only": "> On Jul 23, 2015, at 10:14 AM, Robert Learney via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> That\u2019s not exactly what\u2019s happened though, is it Cipher? Gavin put forward 20Mb then after analysis and discussion has moved to 8Mb, whereas the other camp of core developers is firmly stuck in the \u20181Mb or bust\u2019 group.\n\nThe issue isn\u2019t really whether it\u2019s 1MB or 2MB or 4MB or 8MB or whatever. First of all, the burden of justifying this change should be on those proposing a hardfork. The default is to not have a hard fork. Second of all, it\u2019s not really about *whether* the block size is increased\u2026but about *when* and *how* it is increased. There\u2019s a good argument to be made that right now it is more important to address issues such as the fact that validation is so expensive (which as others and myself have pointed out has led to a collapse of the security model in the past, requiring manual intervention to temporarily \u201cfix\u201d)\u2026and the fact that we don\u2019t yet have great solutions to dealing with fees, which are a crucial component of the design of the protocol.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/262a77d2/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/262a77d2/attachment-0001.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T18:47:08",
                "message_text_only": "On Thu, Jul 23, 2015 at 7:14 PM, Robert Learney via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> That\u2019s not exactly what\u2019s happened though, is it Cipher? Gavin put forward\n> 20Mb then after analysis and discussion has moved to 8Mb, whereas the other\n> camp of core developers is firmly stuck in the \u20181Mb or bust\u2019 group.\n\nHis proposals actually end up with 20 GB and 8 GB respectively. I'm\nnot sure if you count me on the \u20181Mb or bust\u2019 group, but I'm not\nfirmly stuck anywhere.\nI've never said that the block size should never be increased, that it\nshouldn't change now, that 8 MB is too much or anything like that\nbecause I simply don't have the data (and I don't think anybody has\nit). I invite people to collect that data and I've written a patch to\nbitcoin to facilitate that task.\nDo you really think that's an obstructionist attitude?\n\nMy position could be summarized like this:\n\n- We're going to hit the limit tomorrow, and Bitcoin will fail when we do.\n- I'm not so sure we will hit the limit tomorrow but even accepting\nthe premise, this is a non sequitur. Fees will probably rise, but\nthat's not necessarily a bad thing. A limit that is meaningful in\npractice must happen eventually, mustn't it? If not now, when are we\nplanning to let that \"disaster\" happen?\n- That's too far in the future to worry about it.\n- Does that mean waiting, say, 4 more subsidy halvings, 8? 10?\n- Just don't worry about it\n\nI'm not opposing to anything, I'm just patiently waiting for some\nanswers that never seem to arrive.\nIf people interpret questions or the fact that when people use\nfallacious arguments I like to identify the concrete fallacy they're\nusing and state it so publicly (I do it for sport and \"against all\nsides\") as \"opposition\", I don't really think I can do anything about\nit."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T17:43:06",
                "message_text_only": "> On Jul 23, 2015, at 9:28 AM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I'd really like to move from \"IMPOSSIBLE because...  (electrum hasn't been optimized\n> (by the way: you should run on SSDs, LevelDB isn't designed for spinning disks),\n> what if the network is attacked?  (attacked HOW???), current p2p network is using\n> the simplest, stupidest possible block propagation algorithm...)\"\n> \n> ... to \"lets work together and work through the problems and scale it up.\"\n\nLet\u2019s be absolutely clear about one thing - block size increases are *not* about scaling the network. Can we please stop promoting this falsehood? It doesn\u2019t matter by what number we multiply the block size\u2026we can NEVER satisfy the full demand if we insist on every single transaction from every single person everywhere in the world being on the blockchain\u2026it\u2019s just absurd.\n\nIncreasing block size only temporarily addresses one significant issue - how to postpone having to deal with transaction fees, which by design, are how the cost of operating the Bitcoin network (which is already very expensive) is supposed to be paid for ultimately. Suggesting we avoid dealing with this constitutes a new economic policy - dealing with it is the default economic policy we\u2019ve all known about from the beginning\u2026so please stop claiming otherwise.\n\n> On Jul 23, 2015, at 9:50 AM, cipher anthem via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Why not help on a project that actually seems to offer great scalability like the lightning network? There have been great progress there.\n\n\nExactly. There\u2019s been tremendous progress here in addressing scalability, yet I don\u2019t see you participating in that discussion, Gavin.\n\n> On Jul 23, 2015, at 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> But it seems to me that the \"not now side\" has no centralization\n> concerns at all and their true position is \"not ever hit the blocksize\n> limit\", that's the only explanation I can find to their lack of\n> answers to the \"when do you think we should allow users to notice that\n> there's a limit in the blocksize to guarantee that the system can be\n> decentralized?\".\n\nI agree with what you\u2019re saying, Jorge\u2026but It\u2019s even worse than that. The July 4th fork illustrated that the security model of the network itself could be at risk from the increasing costs in validation causing people to rely on others to validate for them\u2026and increasing block size only makes the problem worse.\n\n- Eric Lombrozo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/0f431ef8/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/0f431ef8/attachment-0001.sig>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-23T18:10:22",
                "message_text_only": "On Thu, Jul 23, 2015 at 1:43 PM, Eric Lombrozo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> On Jul 23, 2015, at 9:28 AM, Gavin Andresen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I'd really like to move from \"IMPOSSIBLE because...  (electrum hasn't been\n> optimized\n> (by the way: you should run on SSDs, LevelDB isn't designed for spinning\n> disks),\n> what if the network is attacked?  (attacked HOW???), current p2p network\n> is using\n> the simplest, stupidest possible block propagation algorithm...)\"\n>\n> ... to \"lets work together and work through the problems and scale it up.\"\n>\n>\n> Let\u2019s be absolutely clear about one thing - block size increases are *not*\n> about scaling the network. Can we please stop promoting this falsehood? It\n> doesn\u2019t matter by what number we multiply the block size\u2026we can NEVER\n> satisfy the full demand if we insist on every single transaction from every\n> single person everywhere in the world being on the blockchain\u2026it\u2019s just\n> absurd.\n>\n>\nIncreasing block size only temporarily addresses one significant issue -\n> how to postpone having to deal with transaction fees, which by design, are\n> how the cost of operating the Bitcoin network (which is already very\n> expensive) is supposed to be paid for ultimately. Suggesting we avoid\n> dealing with this constitutes a new economic policy - dealing with it is\n> the default economic policy we\u2019ve all known about from the beginning\u2026so\n> please stop claiming otherwise.\n>\n>\nLarger block sizes don't scale the network, they merely increase how much\nload we allow the network to bear. On the flip side, the scalability\nproposals will still require larger blocks if we are ever to support\nanything close to resembling \"mainstream\" usage. This is not an either/or\nproposition - we clearly need both.\n\n- Jameson\n\n> On Jul 23, 2015, at 9:50 AM, cipher anthem via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Why not help on a project that actually seems to offer great scalability\n> like the lightning network? There have been great progress there.\n>\n>\n> Exactly. There\u2019s been tremendous progress here in addressing scalability,\n> yet I don\u2019t see you participating in that discussion, Gavin.\n>\n> On Jul 23, 2015, at 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> But it seems to me that the \"not now side\" has no centralization\n> concerns at all and their true position is \"not ever hit the blocksize\n> limit\", that's the only explanation I can find to their lack of\n> answers to the \"when do you think we should allow users to notice that\n> there's a limit in the blocksize to guarantee that the system can be\n> decentralized?\".\n>\n>\n> I agree with what you\u2019re saying, Jorge\u2026but It\u2019s even worse than that. The\n> July 4th fork illustrated that the security model of the network itself\n> could be at risk from the increasing costs in validation causing people to\n> rely on others to validate for them\u2026and increasing block size only makes\n> the problem worse.\n>\n> - Eric Lombrozo\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/a658ea27/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T19:14:50",
                "message_text_only": "> On Jul 23, 2015, at 11:10 AM, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n> \n> Larger block sizes don't scale the network, they merely increase how much load we allow the network to bear.\n\nVery well put, Jameson. And the cost of bearing this load must be paid for. And unless we\u2019re willing to accept that computational resources are finite and subject to the same economic issues as any other finite resource, our incentive model collapses the security of the network will be significantly at risk. Whatever your usability concerns may be regarding fees, when the security model\u2019s busted usability issues are moot.\n\nLarger blocks support more transactions\u2026but they also incur \u03a9(n) overhead in bandwidth, CPU, and space. These are finite resources that must be paid for somehow\u2026and as we all already know miners are willing to cut corners on all this and push the costs onto others (not to mention wallets and online block explorers). And who can really blame them? It\u2019s rational behavior given the skewed incentives.\n\n> On the flip side, the scalability proposals will still require larger blocks if we are ever to support anything close to resembling \"mainstream\" usage. This is not an either/or proposition - we clearly need both.\n\nMainstream usage of cryptocurrency will be enabled primarily by direct party-to-party contract negotiation\u2026with the use of the blockchain primarily as a dispute resolution mechanism. The block size isn\u2019t about scaling but about supply and demand of finite resources. As demand for block space increases, we can address it either by increasing computational resources (block size) or by increasing fees. But to do the former we need a way to offset the increase in cost by making sure that those who contribute said resources have incentive to do so.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/6b2ba5e8/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/6b2ba5e8/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-23T19:35:10",
                "message_text_only": "On Thu, Jul 23, 2015 at 3:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> Mainstream usage of cryptocurrency will be enabled primarily by direct\n> party-to-party contract negotiation\u2026with the use of the blockchain\n> primarily as a dispute resolution mechanism. The block size isn\u2019t about\n> scaling but about supply and demand of finite resources. As demand for\n> block space increases, we can address it either by increasing computational\n> resources (block size) or by increasing fees. But to do the former we need\n> a way to offset the increase in cost by making sure that those who\n> contribute said resources have incentive to do so.\n\n\nThere are so many things wrong with this paragraph I just can't let it\nslide.\n\n\"Mainstream usage will be enabled primarily by...\"  Maybe. Maybe not, we\ndon't know what use case(s) will primarily take cryptocurrency mainstream.\nI believe it is a big mistake to pick one and bet \"THIS is going to be the\nwinner\".\n\n\"we can address it either by... or...\"  False dichotomy. There are lots of\nthings we can do to decrease costs, and a lot of things have ALREADY been\ndone (e.g. running a pruned full node).  I HATE the \"it must be this or\nthat\" \"us or them\" attitude, it fosters unproductive bickering and\nnegativity.\n\n(and yes, I'm human, I'm sure you can find instances in the recent past\nwhere I did it, too... mea culpa)\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/76ddbef2/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T19:39:33",
                "message_text_only": "> On Jul 23, 2015, at 12:35 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> \n> \n> On Thu, Jul 23, 2015 at 3:14 PM, Eric Lombrozo <elombrozo at gmail.com <mailto:elombrozo at gmail.com>> wrote:\n> Mainstream usage of cryptocurrency will be enabled primarily by direct party-to-party contract negotiation\u2026with the use of the blockchain primarily as a dispute resolution mechanism. The block size isn\u2019t about scaling but about supply and demand of finite resources. As demand for block space increases, we can address it either by increasing computational resources (block size) or by increasing fees. But to do the former we need a way to offset the increase in cost by making sure that those who contribute said resources have incentive to do so.\n> \n> There are so many things wrong with this paragraph I just can't let it slide.\n> \n> \"Mainstream usage will be enabled primarily by...\"  Maybe. Maybe not, we don't know what use case(s) will primarily take cryptocurrency mainstream. I believe it is a big mistake to pick one and bet \"THIS is going to be the winner\".\n> \n> \"we can address it either by... or...\"  False dichotomy. There are lots of things we can do to decrease costs, and a lot of things have ALREADY been done (e.g. running a pruned full node).  I HATE the \"it must be this or that\" \"us or them\" attitude, it fosters unproductive bickering and negativity.\n> \n> (and yes, I'm human, I'm sure you can find instances in the recent past where I did it, too... mea culpa)\n> \n> --\n> --\n> Gavin Andresen\n> \n\nRegarding rhetoric, fair enough, Gavin - I\u2019m human and I could be wrong. It is my educated best guess, a conclusion I\u2019ve drawn given my understanding of computer science, economics, and what\u2019s been happening in this space.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/a2e0c0b4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/a2e0c0b4/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T19:51:29",
                "message_text_only": "> On Jul 23, 2015, at 12:35 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> \n> There are lots of things we can do to decrease costs, and a lot of things have ALREADY been done (e.g. running a pruned full node).\n\nI also wanted to point out I fully agree with you that there are still many optimizations we could do to reduce costs, and think many of these things are certainly worth doing. However, there\u2019s only so much we can do in this regard. Sooner or later we still run up against theoretical limitations. These optimizations can reduce costs by some factor\u2026but they are highly unlikely to overcome the \u03a9(n) validation complexity barring some major algorithmic breakthrough (and perhaps allowing for nondeterminism, perhaps accepting a negligible but finite error probability).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/8b4fd65c/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/8b4fd65c/attachment-0001.sig>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-23T19:52:11",
                "message_text_only": "On Thu, Jul 23, 2015 at 3:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n>\n> On Jul 23, 2015, at 11:10 AM, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n>\n> Larger block sizes don't scale the network, they merely increase how much\n> load we allow the network to bear.\n>\n>\n> Very well put, Jameson. And the cost of bearing this load must be paid\n> for. And unless we\u2019re willing to accept that computational resources are\n> finite and subject to the same economic issues as any other finite\n> resource, our incentive model collapses the security of the network will be\n> significantly at risk. Whatever your usability concerns may be regarding\n> fees, when the security model\u2019s busted usability issues are moot.\n>\n> Larger blocks support more transactions\u2026but they also incur \u03a9(n) overhead\n> in bandwidth, CPU, and space. These are finite resources that must be paid\n> for somehow\u2026and as we all already know miners are willing to cut corners on\n> all this and push the costs onto others (not to mention wallets and online\n> block explorers). And who can really blame them? It\u2019s rational behavior\n> given the skewed incentives.\n>\n\nRunning a node certainly has real-world costs that shouldn't be ignored.\nThere are plenty of advocates who argue that Bitcoin should strive to keep\nit feasible for the average user to run their own node (as opposed to\nSatoshi's vision of beefy servers in data centers.) My impression is that\neven most of these advocates agree that it will be acceptable to eventually\nincrease block sizes as resources become faster and cheaper because it\nwon't be 'pricing out' the average user from running their own node. If\nthis is the case, it seems to me that we have a problem given that there is\nno established baseline for the acceptable performance / hardware cost\nrequirements to run a node. I'd really like to see further clarification\nfrom these advocates around the acceptable cost of running a node and how\nwe can measure the global reduction in hardware and bandwidth costs in\norder to establish a baseline that we can use to justify additional\nresource usage by nodes.\n\n- Jameson\n\n>\n> On the flip side, the scalability proposals will still require larger\n> blocks if we are ever to support anything close to resembling \"mainstream\"\n> usage. This is not an either/or proposition - we clearly need both.\n>\n>\n> Mainstream usage of cryptocurrency will be enabled primarily by direct\n> party-to-party contract negotiation\u2026with the use of the blockchain\n> primarily as a dispute resolution mechanism. The block size isn\u2019t about\n> scaling but about supply and demand of finite resources. As demand for\n> block space increases, we can address it either by increasing computational\n> resources (block size) or by increasing fees. But to do the former we need\n> a way to offset the increase in cost by making sure that those who\n> contribute said resources have incentive to do so.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/9407b8c4/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T20:26:19",
                "message_text_only": "On Thu, Jul 23, 2015 at 9:52 PM, Jameson Lopp via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Running a node certainly has real-world costs that shouldn't be ignored.\n> There are plenty of advocates who argue that Bitcoin should strive to keep\n> it feasible for the average user to run their own node (as opposed to\n> Satoshi's vision of beefy servers in data centers.) My impression is that\n> even most of these advocates agree that it will be acceptable to eventually\n> increase block sizes as resources become faster and cheaper because it won't\n> be 'pricing out' the average user from running their own node. If this is\n> the case, it seems to me that we have a problem given that there is no\n> established baseline for the acceptable performance / hardware cost\n> requirements to run a node. I'd really like to see further clarification\n> from these advocates around the acceptable cost of running a node and how we\n> can measure the global reduction in hardware and bandwidth costs in order to\n> establish a baseline that we can use to justify additional resource usage by\n> nodes.\n\nAlthough I don't have a concrete proposals myself, I agree that\nwithout having any common notion of what the \"minimal target hardware\"\nlooks like, it is very difficult to discuss other things that depend\non that.\nIf there's data that shows that a 100 usd raspberry pi with a 1 MB\nconnection in say, India (I actually have no idea about internet\nspeeds there) size X is a viable full node, then I don't think anybody\ncan reasonably oppose to rising the block size to X, and such a\nhardfork can perfectly be uncontroversial.\nI'm exaggerating ultra-low specifications, but it's just an example to\nillustrate your point.\nThere was a thread about formalizing such \"minimum hardware\nrequirements\", but I think the discussion simply finished there:\n- Let's do this\n- Yeah, let's do it\n- +1, let's have concrete values, I generally agree."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T20:52:26",
                "message_text_only": "> On Thu, Jul 23, 2015 at 3:14 PM, Eric Lombrozo <elombrozo at gmail.com <mailto:elombrozo at gmail.com>> wrote:\n> Mainstream usage of cryptocurrency will be enabled primarily by direct party-to-party contract negotiation\u2026with the use of the blockchain primarily as a dispute resolution mechanism. The block size isn\u2019t about scaling but about supply and demand of finite resources. As demand for block space increases, we can address it either by increasing computational resources (block size) or by increasing fees. But to do the former we need a way to offset the increase in cost by making sure that those who contribute said resources have incentive to do so.\u2019\n\nI should also point out, improvements in hardware and network infrastructure can also reduce costs\u2026and we could very well have a model where resource requirements can be increased as technology improves. However, currently, the computational cost of validation is clearly growing far more quickly than the cost of computational resources is going down. There are 7,000,000,000 people in the world. Payment networks in the developed world already regularly handle thousands of transactions a second. Even with highly optimized block propagation, pruning, and signature validation, we\u2019re still many orders shy of being able to satisfy demand. To achieve mainstream adoption, we\u2019ll have to pass through a period of quasi-exponential growth in userbase (until the market saturates\u2026or until the network resources run out). Unless we\u2019re able to achieve a validation complexity of O(polylog n) or better, it\u2019s not a matter of having a negative attitude about the prospects\u2026it\u2019s just math. Whether we have 2MB or 20MB or 100MB blocks (even assuming the above mentioned optimizations and that the computational resources exist and are willing to handle it) we will not be able to satisfy demand if we insist on requiring global validation for all transactions.\n\n\n> On Jul 23, 2015, at 1:26 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> \n> On Thu, Jul 23, 2015 at 9:52 PM, Jameson Lopp via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Running a node certainly has real-world costs that shouldn't be ignored.\n>> There are plenty of advocates who argue that Bitcoin should strive to keep\n>> it feasible for the average user to run their own node (as opposed to\n>> Satoshi's vision of beefy servers in data centers.) My impression is that\n>> even most of these advocates agree that it will be acceptable to eventually\n>> increase block sizes as resources become faster and cheaper because it won't\n>> be 'pricing out' the average user from running their own node. If this is\n>> the case, it seems to me that we have a problem given that there is no\n>> established baseline for the acceptable performance / hardware cost\n>> requirements to run a node. I'd really like to see further clarification\n>> from these advocates around the acceptable cost of running a node and how we\n>> can measure the global reduction in hardware and bandwidth costs in order to\n>> establish a baseline that we can use to justify additional resource usage by\n>> nodes.\n> \n> Although I don't have a concrete proposals myself, I agree that\n> without having any common notion of what the \"minimal target hardware\"\n> looks like, it is very difficult to discuss other things that depend\n> on that.\n> If there's data that shows that a 100 usd raspberry pi with a 1 MB\n> connection in say, India (I actually have no idea about internet\n> speeds there) size X is a viable full node, then I don't think anybody\n> can reasonably oppose to rising the block size to X, and such a\n> hardfork can perfectly be uncontroversial.\n> I'm exaggerating ultra-low specifications, but it's just an example to\n> illustrate your point.\n> There was a thread about formalizing such \"minimum hardware\n> requirements\", but I think the discussion simply finished there:\n> - Let's do this\n> - Yeah, let's do it\n> - +1, let's have concrete values, I generally agree.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/fbe5e705/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/fbe5e705/attachment.sig>"
            },
            {
                "author": "Benedict Chan",
                "date": "2015-07-23T23:42:42",
                "message_text_only": "On Thu, Jul 23, 2015 at 1:52 PM, Eric Lombrozo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Jul 23, 2015 at 3:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>\n>> Mainstream usage of cryptocurrency will be enabled primarily by direct\n>> party-to-party contract negotiation\u2026with the use of the blockchain primarily\n>> as a dispute resolution mechanism. The block size isn\u2019t about scaling but\n>> about supply and demand of finite resources. As demand for block space\n>> increases, we can address it either by increasing computational resources\n>> (block size) or by increasing fees. But to do the former we need a way to\n>> offset the increase in cost by making sure that those who contribute said\n>> resources have incentive to do so.\u2019\n>\n>\n> I should also point out, improvements in hardware and network infrastructure\n> can also reduce costs\u2026and we could very well have a model where resource\n> requirements can be increased as technology improves. However, currently,\n> the computational cost of validation is clearly growing far more quickly\n> than the cost of computational resources is going down. There are\n> 7,000,000,000 people in the world. Payment networks in the developed world\n> already regularly handle thousands of transactions a second. Even with\n> highly optimized block propagation, pruning, and signature validation, we\u2019re\n> still many orders shy of being able to satisfy demand. To achieve mainstream\n> adoption, we\u2019ll have to pass through a period of quasi-exponential growth in\n> userbase (until the market saturates\u2026or until the network resources run\n> out). Unless we\u2019re able to achieve a validation complexity of O(polylog n)\n> or better, it\u2019s not a matter of having a negative attitude about the\n> prospects\u2026it\u2019s just math. Whether we have 2MB or 20MB or 100MB blocks (even\n> assuming the above mentioned optimizations and that the computational\n> resources exist and are willing to handle it) we will not be able to satisfy\n> demand if we insist on requiring global validation for all transactions.\n>\n\nScaling the network will come in the form of a combination of many\noptimizations. Just because we do not know for sure how to eventually\nserve 7 billion people does not mean we should make decisions on\nglobal validation that impact our ability to serve the current set of\nusers.\n\nAlso, blocking a change because it's \"more important to address issues\nsuch as...\" other improvements will further slow down the discussion.\nI believe an increase will not prevent the development of other\nimprovements that we need - in contrast, the sooner we can get over\nthe limit (which, as you agree, needs to be changed at some point),\nthe sooner we can get back to work.\n\n>\n> On Jul 23, 2015, at 1:26 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> On Thu, Jul 23, 2015 at 9:52 PM, Jameson Lopp via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Running a node certainly has real-world costs that shouldn't be ignored.\n> There are plenty of advocates who argue that Bitcoin should strive to keep\n> it feasible for the average user to run their own node (as opposed to\n> Satoshi's vision of beefy servers in data centers.) My impression is that\n> even most of these advocates agree that it will be acceptable to eventually\n> increase block sizes as resources become faster and cheaper because it won't\n> be 'pricing out' the average user from running their own node. If this is\n> the case, it seems to me that we have a problem given that there is no\n> established baseline for the acceptable performance / hardware cost\n> requirements to run a node. I'd really like to see further clarification\n> from these advocates around the acceptable cost of running a node and how we\n> can measure the global reduction in hardware and bandwidth costs in order to\n> establish a baseline that we can use to justify additional resource usage by\n> nodes.\n>\n>\n> Although I don't have a concrete proposals myself, I agree that\n> without having any common notion of what the \"minimal target hardware\"\n> looks like, it is very difficult to discuss other things that depend\n> on that.\n> If there's data that shows that a 100 usd raspberry pi with a 1 MB\n> connection in say, India (I actually have no idea about internet\n> speeds there) size X is a viable full node, then I don't think anybody\n> can reasonably oppose to rising the block size to X, and such a\n> hardfork can perfectly be uncontroversial.\n> I'm exaggerating ultra-low specifications, but it's just an example to\n> illustrate your point.\n> There was a thread about formalizing such \"minimum hardware\n> requirements\", but I think the discussion simply finished there:\n> - Let's do this\n> - Yeah, let's do it\n> - +1, let's have concrete values, I generally agree.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T23:57:02",
                "message_text_only": "> On Jul 23, 2015, at 4:42 PM, Benedict Chan <bencxr at fragnetics.com> wrote:\n> \n> Scaling the network will come in the form of a combination of many\n> optimizations. Just because we do not know for sure how to eventually\n> serve 7 billion people does not mean we should make decisions on\n> global validation that impact our ability to serve the current set of\n> users.\n\nAgreed. But I believe the economic and security arguments I gave regarding fees and incentives still hold and are largely separate from the scalability issue. Please correct me if I overlooked something.\n\n\n> Also, blocking a change because it's \"more important to address issues\n> such as...\" other improvements will further slow down the discussion.\n> I believe an increase will not prevent the development of other\n> improvements that we need - in contrast, the sooner we can get over\n> the limit (which, as you agree, needs to be changed at some point),\n> the sooner we can get back to work.\n\nAn increase in block size at this time will exacerbate security concerns around nodes relying on other nodes to validate (particularly miners and wallets). It\u2019s not really a matter of having limited developer resources that need to be budgeted, as you seem to suggest.\n\nRegarding developments on properly handling fees, there must exist the economic need for it before there\u2019s an earnest effort to solve it. Increasing the block size right now will, in all likelihood, delay this effort. I\u2019d much prefer to first let the fee market evolve because it\u2019s a crucial component to the protocol\u2019s design and its security model\u2026and so we can get a better sense for fee economics. Then we might be able to figure out better approaches to block size changes in the future that makes sense economically\u2026perhaps with mechanisms that can dynamically adjust it to reflect resource availability and network load.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/7bcddf71/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/7bcddf71/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T00:04:07",
                "message_text_only": "I should also add that I think those who claim that fee pressure will scare away users and break the industry are *seriously* underestimating human ingenuity in the face of a challenge. We can do this - we can overcome this obstacle\u2026we can find good solutions to a fee market. Unless someone can come up with another way to pay for the operation of the network, we NEED to do this. What makes anyone think it will be easier to do later rather than now? The longer we wait, the lower block rewards get, the larger the deployed infrastructure, the larger our userbase, the HARDER it will be to solve it. We should solve it now - we will be much better off for it\u2026and so will our users.\n\n\n> On Jul 23, 2015, at 4:57 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> \n>> On Jul 23, 2015, at 4:42 PM, Benedict Chan <bencxr at fragnetics.com <mailto:bencxr at fragnetics.com>> wrote:\n>> \n>> Scaling the network will come in the form of a combination of many\n>> optimizations. Just because we do not know for sure how to eventually\n>> serve 7 billion people does not mean we should make decisions on\n>> global validation that impact our ability to serve the current set of\n>> users.\n> \n> Agreed. But I believe the economic and security arguments I gave regarding fees and incentives still hold and are largely separate from the scalability issue. Please correct me if I overlooked something.\n> \n> \n>> Also, blocking a change because it's \"more important to address issues\n>> such as...\" other improvements will further slow down the discussion.\n>> I believe an increase will not prevent the development of other\n>> improvements that we need - in contrast, the sooner we can get over\n>> the limit (which, as you agree, needs to be changed at some point),\n>> the sooner we can get back to work.\n> \n> An increase in block size at this time will exacerbate security concerns around nodes relying on other nodes to validate (particularly miners and wallets). It\u2019s not really a matter of having limited developer resources that need to be budgeted, as you seem to suggest.\n> \n> Regarding developments on properly handling fees, there must exist the economic need for it before there\u2019s an earnest effort to solve it. Increasing the block size right now will, in all likelihood, delay this effort. I\u2019d much prefer to first let the fee market evolve because it\u2019s a crucial component to the protocol\u2019s design and its security model\u2026and so we can get a better sense for fee economics. Then we might be able to figure out better approaches to block size changes in the future that makes sense economically\u2026perhaps with mechanisms that can dynamically adjust it to reflect resource availability and network load.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/2a0f074c/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/2a0f074c/attachment-0001.sig>"
            },
            {
                "author": "Simon Liu",
                "date": "2015-07-24T00:20:37",
                "message_text_only": "Increasing the block size does not hinder research and development of\nLightning or other technologies.\n\n\nOn 07/23/2015 05:04 PM, Eric Lombrozo via bitcoin-dev wrote:\n> I should also add that I think those who claim that fee pressure will\n> scare away users and break the industry are *seriously* underestimating\n> human ingenuity in the face of a challenge. We can do this - we can\n> overcome this obstacle\u2026we can find good solutions to a fee market.\n> Unless someone can come up with another way to pay for the operation of\n> the network, we NEED to do this. What makes anyone think it will be\n> easier to do later rather than now? The longer we wait, the lower block\n> rewards get, the larger the deployed infrastructure, the larger our\n> userbase, the HARDER it will be to solve it. We should solve it now - we\n> will be much better off for it\u2026and so will our users.\n>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T00:22:53",
                "message_text_only": "You are not going to get a fair fee market if your only form of enforcement is the threat of exclusion.\n\nA more fair fee market will develop if miners start offering quality of service, preferably at multiple tiers. At that point any interference from a block size cap will only be detrimental. In fact it will only highlight what the cap is actually for; to prevent monster blocks. \n\nAdd better QoS tools for miners and extend the cap (when possible) and there's your fee market.\n\njp\n\n\n> On Jul 24, 2015, at 8:04 AM, Eric Lombrozo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I should also add that I think those who claim that fee pressure will scare away users and break the industry are *seriously* underestimating human ingenuity in the face of a challenge. We can do this - we can overcome this obstacle\u2026we can find good solutions to a fee market. Unless someone can come up with another way to pay for the operation of the network, we NEED to do this. What makes anyone think it will be easier to do later rather than now? The longer we wait, the lower block rewards get, the larger the deployed infrastructure, the larger our userbase, the HARDER it will be to solve it. We should solve it now - we will be much better off for it\u2026and so will our users.\n> \n> \n>>> On Jul 23, 2015, at 4:57 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>> \n>>> \n>>> On Jul 23, 2015, at 4:42 PM, Benedict Chan <bencxr at fragnetics.com> wrote:\n>>> \n>>> Scaling the network will come in the form of a combination of many\n>>> optimizations. Just because we do not know for sure how to eventually\n>>> serve 7 billion people does not mean we should make decisions on\n>>> global validation that impact our ability to serve the current set of\n>>> users.\n>> \n>> Agreed. But I believe the economic and security arguments I gave regarding fees and incentives still hold and are largely separate from the scalability issue. Please correct me if I overlooked something.\n>> \n>> \n>>> Also, blocking a change because it's \"more important to address issues\n>>> such as...\" other improvements will further slow down the discussion.\n>>> I believe an increase will not prevent the development of other\n>>> improvements that we need - in contrast, the sooner we can get over\n>>> the limit (which, as you agree, needs to be changed at some point),\n>>> the sooner we can get back to work.\n>> \n>> An increase in block size at this time will exacerbate security concerns around nodes relying on other nodes to validate (particularly miners and wallets). It\u2019s not really a matter of having limited developer resources that need to be budgeted, as you seem to suggest.\n>> \n>> Regarding developments on properly handling fees, there must exist the economic need for it before there\u2019s an earnest effort to solve it. Increasing the block size right now will, in all likelihood, delay this effort. I\u2019d much prefer to first let the fee market evolve because it\u2019s a crucial component to the protocol\u2019s design and its security model\u2026and so we can get a better sense for fee economics. Then we might be able to figure out better approaches to block size changes in the future that makes sense economically\u2026perhaps with mechanisms that can dynamically adjust it to reflect resource availability and network load.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/596bbb00/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T00:32:21",
                "message_text_only": "> On Jul 23, 2015, at 5:22 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n> \n> You are not going to get a fair fee market if your only form of enforcement is the threat of exclusion.\n> \n> A more fair fee market will develop if miners start offering quality of service, preferably at multiple tiers. At that point any interference from a block size cap will only be detrimental. In fact it will only highlight what the cap is actually for; to prevent monster blocks.\n> \n> Add better QoS tools for miners and extend the cap (when possible) and there's your fee market.\n> \n> jp\n\nNot sure what you mean by QoS here. Either your transaction is included or it isn\u2019t. It\u2019s not like you can upgrade to a master suite with a view or anything.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/2d67e8c5/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T00:38:15",
                "message_text_only": "Are you referring to mining contracts?\n\n> On Jul 23, 2015, at 5:32 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> \n>> On Jul 23, 2015, at 5:22 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>> \n>> You are not going to get a fair fee market if your only form of enforcement is the threat of exclusion.\n>> \n>> A more fair fee market will develop if miners start offering quality of service, preferably at multiple tiers. At that point any interference from a block size cap will only be detrimental. In fact it will only highlight what the cap is actually for; to prevent monster blocks.\n>> \n>> Add better QoS tools for miners and extend the cap (when possible) and there's your fee market.\n>> \n>> jp\n> \n> Not sure what you mean by QoS here. Either your transaction is included or it isn\u2019t. It\u2019s not like you can upgrade to a master suite with a view or anything.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/e5292776/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T00:45:04",
                "message_text_only": "Quality of service as in:\n\n> X satoshi / kb = included in block currently worked on;\n\n> Y satoshi / kb = included in next block;\n\n> Z satoshi / kb = included in block after that, etc.\n\nBlock count starts when transaction is first seen. Miners can set X, Y, Z. \n\nMarket develops when miners start setting different values and adding more transactions to blocks as opposed to other miners with higher settings. \n\nIt basically comes down to the miners themselves if they want a healthy fee market. If they stick to their guns, their influence on the fees will be proportional to their hashing power.\n\njp\n\n> On Jul 24, 2015, at 8:32 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> \n>> On Jul 23, 2015, at 5:22 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>> \n>> You are not going to get a fair fee market if your only form of enforcement is the threat of exclusion.\n>> \n>> A more fair fee market will develop if miners start offering quality of service, preferably at multiple tiers. At that point any interference from a block size cap will only be detrimental. In fact it will only highlight what the cap is actually for; to prevent monster blocks.\n>> \n>> Add better QoS tools for miners and extend the cap (when possible) and there's your fee market.\n>> \n>> jp\n> \n> Not sure what you mean by QoS here. Either your transaction is included or it isn\u2019t. It\u2019s not like you can upgrade to a master suite with a view or anything."
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T00:49:20",
                "message_text_only": "And it's obvious how a size cap would interfere with such a QoS scheme. Miners wouldn't be able to deliver the below guarantees if they have to start excluding transactions.\n\n\n\n> On Jul 24, 2015, at 8:45 AM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Quality of service as in:\n> \n>> X satoshi / kb = included in block currently worked on;\n> \n>> Y satoshi / kb = included in next block;\n> \n>> Z satoshi / kb = included in block after that, etc.\n> \n> Block count starts when transaction is first seen. Miners can set X, Y, Z. \n> \n> Market develops when miners start setting different values and adding more transactions to blocks as opposed to other miners with higher settings. \n> \n> It basically comes down to the miners themselves if they want a healthy fee market. If they stick to their guns, their influence on the fees will be proportional to their hashing power.\n> \n> jp\n> \n>> On Jul 24, 2015, at 8:32 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> \n>> \n>>> On Jul 23, 2015, at 5:22 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>>> \n>>> You are not going to get a fair fee market if your only form of enforcement is the threat of exclusion.\n>>> \n>>> A more fair fee market will develop if miners start offering quality of service, preferably at multiple tiers. At that point any interference from a block size cap will only be detrimental. In fact it will only highlight what the cap is actually for; to prevent monster blocks.\n>>> \n>>> Add better QoS tools for miners and extend the cap (when possible) and there's your fee market.\n>>> \n>>> jp\n>> \n>> Not sure what you mean by QoS here. Either your transaction is included or it isn\u2019t. It\u2019s not like you can upgrade to a master suite with a view or anything.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-24T00:53:50",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>And it's obvious how a size cap would interfere with such a QoS scheme.\n>Miners wouldn't be able to deliver the below guarantees if they have to\n>start excluding transactions.\n\nAs mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n\n\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\nAAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\nVIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\ni83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\nDFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\nPcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n=LY1+\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T01:03:26",
                "message_text_only": "Doesn't matter.\n\nIt's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n\njp\n\n\n> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n> \n> \n> \n>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>> Miners wouldn't be able to deliver the below guarantees if they have to\n>> start excluding transactions.\n> \n> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n> \n> \n> -----BEGIN PGP SIGNATURE-----\n> \n> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n> =LY1+\n> -----END PGP SIGNATURE-----\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T01:08:45",
                "message_text_only": "By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n\nNegotiating directly with miners via smart contracts seems difficult at best.\n\n\n> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Doesn't matter.\n> \n> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n> \n> jp\n> \n> \n>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>> \n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>> \n>> \n>> \n>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \n>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>> start excluding transactions.\n>> \n>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>> \n>> \n>> -----BEGIN PGP SIGNATURE-----\n>> \n>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>> =LY1+\n>> -----END PGP SIGNATURE-----\n>> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/569da4c2/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T01:25:57",
                "message_text_only": "I think implicit QoS is far simpler to implement, requires less parties and is closer to what Bitcoin started out as: a peer-to-peer digital cash system, not a peer-to-let-me-handle-that-for-you-to-peer system.\n\njp\n\n> On Jul 24, 2015, at 9:08 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n> \n> Negotiating directly with miners via smart contracts seems difficult at best.\n> \n> \n>> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Doesn't matter.\n>> \n>> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n>> \n>> jp\n>> \n>> \n>>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>>> \n>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>> Hash: SHA256\n>>> \n>>> \n>>> \n>>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>>> start excluding transactions.\n>>> \n>>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>>> \n>>> \n>>> -----BEGIN PGP SIGNATURE-----\n>>> \n>>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>>> =LY1+\n>>> -----END PGP SIGNATURE-----\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T01:28:25",
                "message_text_only": "I suppose you can use a timelocked output that is spendable by anyone you could go somewhat in this direction\u2026the thing is it still means the wallet must make fee estimations rather than being able to get a quick quote.\n\n> On Jul 23, 2015, at 6:25 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n> \n> I think implicit QoS is far simpler to implement, requires less parties and is closer to what Bitcoin started out as: a peer-to-peer digital cash system, not a peer-to-let-me-handle-that-for-you-to-peer system.\n> \n> jp\n> \n>> On Jul 24, 2015, at 9:08 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> \n>> By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n>> \n>> Negotiating directly with miners via smart contracts seems difficult at best.\n>> \n>> \n>>> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \n>>> Doesn't matter.\n>>> \n>>> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n>>> \n>>> jp\n>>> \n>>> \n>>>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>>>> \n>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>> Hash: SHA256\n>>>> \n>>>> \n>>>> \n>>>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>> \n>>>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>>>> start excluding transactions.\n>>>> \n>>>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>>>> \n>>>> \n>>>> -----BEGIN PGP SIGNATURE-----\n>>>> \n>>>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>>>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>>>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>>>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>>>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>>>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>>>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>>>> =LY1+\n>>>> -----END PGP SIGNATURE-----\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/e7496cfa/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T01:37:20",
                "message_text_only": "I think it\u2019s pretty clear by now that the assumption that all nodes have pretty similar computational resources leads to very misplaced incentives. Ultimately, cryptocurrencies will allow direct outsourcing of computation, making it possible to distribute computational tasks in an economically sensible way.\n\nWallets should be assumed to have low computational resources and intermittent Internet connections for the foreseeable future if we ever intend for this to be a practical payment system, methinks.\n\n\n> On Jul 23, 2015, at 6:28 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> I suppose you can use a timelocked output that is spendable by anyone you could go somewhat in this direction\u2026the thing is it still means the wallet must make fee estimations rather than being able to get a quick quote.\n> \n>> On Jul 23, 2015, at 6:25 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>> \n>> I think implicit QoS is far simpler to implement, requires less parties and is closer to what Bitcoin started out as: a peer-to-peer digital cash system, not a peer-to-let-me-handle-that-for-you-to-peer system.\n>> \n>> jp\n>> \n>>> On Jul 24, 2015, at 9:08 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>> \n>>> By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n>>> \n>>> Negotiating directly with miners via smart contracts seems difficult at best.\n>>> \n>>> \n>>>> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> Doesn't matter.\n>>>> \n>>>> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n>>>> \n>>>> jp\n>>>> \n>>>> \n>>>>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>>>>> \n>>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>>> Hash: SHA256\n>>>>> \n>>>>> \n>>>>> \n>>>>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>> \n>>>>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>>>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>>>>> start excluding transactions.\n>>>>> \n>>>>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>>>>> \n>>>>> \n>>>>> -----BEGIN PGP SIGNATURE-----\n>>>>> \n>>>>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>>>>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>>>>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>>>>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>>>>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>>>>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>>>>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>>>>> =LY1+\n>>>>> -----END PGP SIGNATURE-----\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/61072561/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T01:42:12",
                "message_text_only": "Miners could include their fee tiers in the coinbase, but this is obviously open to manipulation, with little recourse (unless they are a pool and miners move away because of it). \n\nIn any event, I think that trying out a solution that is both simple and involves the least number of parties necessary is preferable.\n\nHave miners set their tiers, have users select the level of quality they want, ignore the block size.\n\nMiners will adapt their tiers depending on how many transactions actually end up in them. If for example they set the first tier to be $1 to be included in the current block and no user chooses that level of service, they've obviously priced themselves out of the market. The opposite is also true; if a tier is popular they can choose to increase the cost of that tier.\n\njp \n\n> On Jul 24, 2015, at 9:28 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> I suppose you can use a timelocked output that is spendable by anyone you could go somewhat in this direction\u2026the thing is it still means the wallet must make fee estimations rather than being able to get a quick quote.\n> \n>> On Jul 23, 2015, at 6:25 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>> \n>> I think implicit QoS is far simpler to implement, requires less parties and is closer to what Bitcoin started out as: a peer-to-peer digital cash system, not a peer-to-let-me-handle-that-for-you-to-peer system.\n>> \n>> jp\n>> \n>>> On Jul 24, 2015, at 9:08 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>> \n>>> By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n>>> \n>>> Negotiating directly with miners via smart contracts seems difficult at best.\n>>> \n>>> \n>>>> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> Doesn't matter.\n>>>> \n>>>> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n>>>> \n>>>> jp\n>>>> \n>>>> \n>>>>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>>>>> \n>>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>>> Hash: SHA256\n>>>>> \n>>>>> \n>>>>> \n>>>>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>> \n>>>>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>>>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>>>>> start excluding transactions.\n>>>>> \n>>>>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>>>>> \n>>>>> \n>>>>> -----BEGIN PGP SIGNATURE-----\n>>>>> \n>>>>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>>>>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>>>>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>>>>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>>>>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>>>>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>>>>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>>>>> =LY1+\n>>>>> -----END PGP SIGNATURE-----\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T01:55:25",
                "message_text_only": "I agree that the fewer the necessary parties the better - however, some entities are much better positioned to offer certain services on the network than others - and the fact we can trustlessly negotiate smart contracts with them is one of the most significant developments in the cryptospace - it\u2019s one of the most revolutionary aspects of this technology\u2026it accomplishes something we\u2019ve never really been able to do before.\n\nNotice that third parties can encapsulate complex tasks and provide a far simpler interface. Crypto contracts provide the incentives for them to do this. And by having competition and transparency, these services automatically get optimized via human ingenuity. We don\u2019t need to design top-down for it.\n\n> On Jul 23, 2015, at 6:42 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n> \n> Miners could include their fee tiers in the coinbase, but this is obviously open to manipulation, with little recourse (unless they are a pool and miners move away because of it).\n> \n> In any event, I think that trying out a solution that is both simple and involves the least number of parties necessary is preferable.\n> \n> Have miners set their tiers, have users select the level of quality they want, ignore the block size.\n> \n> Miners will adapt their tiers depending on how many transactions actually end up in them. If for example they set the first tier to be $1 to be included in the current block and no user chooses that level of service, they've obviously priced themselves out of the market. The opposite is also true; if a tier is popular they can choose to increase the cost of that tier.\n> \n> jp\n> \n>> On Jul 24, 2015, at 9:28 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> \n>> I suppose you can use a timelocked output that is spendable by anyone you could go somewhat in this direction\u2026the thing is it still means the wallet must make fee estimations rather than being able to get a quick quote.\n>> \n>>> On Jul 23, 2015, at 6:25 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>>> \n>>> I think implicit QoS is far simpler to implement, requires less parties and is closer to what Bitcoin started out as: a peer-to-peer digital cash system, not a peer-to-let-me-handle-that-for-you-to-peer system.\n>>> \n>>> jp\n>>> \n>>>> On Jul 24, 2015, at 9:08 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>>> \n>>>> By using third parties separate from individual miners that do bidding on your behalf you get a mechanism that allows QoS guarantees and shifting the complexity and risk from the wallet with little computational resources to a service with abundance of them. Using timelocked contracts it\u2019s possible to enforce the guarantees.\n>>>> \n>>>> Negotiating directly with miners via smart contracts seems difficult at best.\n>>>> \n>>>> \n>>>>> On Jul 23, 2015, at 6:03 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>> \n>>>>> Doesn't matter.\n>>>>> \n>>>>> It's not going to be perfect given the block time variance among other factors but it's far more workable than guessing whether or not your transaction is going to end up in a block at all.\n>>>>> \n>>>>> jp\n>>>>> \n>>>>> \n>>>>>> On Jul 24, 2015, at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n>>>>>> \n>>>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>>>> Hash: SHA256\n>>>>>> \n>>>>>> \n>>>>>> \n>>>>>>> On 23 July 2015 20:49:20 GMT-04:00, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>>> \n>>>>>>> And it's obvious how a size cap would interfere with such a QoS scheme.\n>>>>>>> Miners wouldn't be able to deliver the below guarantees if they have to\n>>>>>>> start excluding transactions.\n>>>>>> \n>>>>>> As mining is a random, poisson process, obviously giving guarantees without a majority of hashing power isn't possible.\n>>>>>> \n>>>>>> \n>>>>>> -----BEGIN PGP SIGNATURE-----\n>>>>>> \n>>>>>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsYyK\n>>>>>> AAoJEMCF8hzn9Lnc47AH/28WlecQLb37CiJpcvXO9tC4zqYEodurtB9nBHTSJrug\n>>>>>> VIEXZW53pSTdd3vv2qpGIlHxuYP8QmDSATztwQLuN6XWEszz7TO8MXBfLxKqZyGu\n>>>>>> i83WqSGjMAfwqjl0xR1G7PJgt4+E+0vaAFZc98vLCgZnedbiXRVtTGjhofG1jjTc\n>>>>>> DFMwMZHP0eqWTwtWwqUvnA7PTFHxdqoJruY/t1KceN+JDbBCJWMxBDswU64FXcVH\n>>>>>> 0ecsk9nhLMyylBX/2v4HjCXyayocH8jQ+FpLSP0xxERyS+f1npFX9cxFMq24uXqn\n>>>>>> PcnZfLfaSJ6gMbmhbYG5wYDKN3u732j7dLzSJnMW6jk=\n>>>>>> =LY1+\n>>>>>> -----END PGP SIGNATURE-----\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/79d0ce0e/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T00:56:02",
                "message_text_only": "> On Jul 23, 2015, at 5:45 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n> \n> Quality of service as in:\n> \n>> X satoshi / kb = included in block currently worked on;\n> \n>> Y satoshi / kb = included in next block;\n> \n>> Z satoshi / kb = included in block after that, etc.\n> \n> Block count starts when transaction is first seen. Miners can set X, Y, Z.\n> \n> Market develops when miners start setting different values and adding more transactions to blocks as opposed to other miners with higher settings.\n> \n> It basically comes down to the miners themselves if they want a healthy fee market. If they stick to their guns, their influence on the fees will be proportional to their hashing power.\n> \n> jp\n\n\nThe scheme I\u2019ve been considering is the use of services (separate from miners) that guarantee inclusion for you for some predetermined price and then do the bidding on your behalf. Via contracts you can guarantee you get included within a certain number of blocks or you receive a full refund\u2026or even possibly receive compensation for failure to deliver.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/c498890b/attachment-0001.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-24T01:05:58",
                "message_text_only": "There really isn't any need for a 3rd party here. Those \"services\" can just be the miners themselves.\n\n\njp\n\n> On Jul 24, 2015, at 8:56 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> \n>> On Jul 23, 2015, at 5:45 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n>> \n>> Quality of service as in:\n>> \n>>> X satoshi / kb = included in block currently worked on;\n>> \n>>> Y satoshi / kb = included in next block;\n>> \n>>> Z satoshi / kb = included in block after that, etc.\n>> \n>> Block count starts when transaction is first seen. Miners can set X, Y, Z.\n>> \n>> Market develops when miners start setting different values and adding more transactions to blocks as opposed to other miners with higher settings.\n>> \n>> It basically comes down to the miners themselves if they want a healthy fee market. If they stick to their guns, their influence on the fees will be proportional to their hashing power.\n>> \n>> jp\n> \n> \n> The scheme I\u2019ve been considering is the use of services (separate from miners) that guarantee inclusion for you for some predetermined price and then do the bidding on your behalf. Via contracts you can guarantee you get included within a certain number of blocks or you receive a full refund\u2026or even possibly receive compensation for failure to deliver."
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-23T18:12:35",
                "message_text_only": "> Sent: Thursday, July 23, 2015 at 7:28 PM\n> From: \"Gavin Andresen via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: \"Tom Harding\" <tomh at thinlink.com>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Bitcoin Core and hard forks\n> \n> I'm frankly tired of all the negativity here\n\nYou complained about the lack of quantitative analysis being used, I gave it to you. There's nothing \"negative\" about displaying data which doesn't completely back up what your position is, I made a sensible conclusion based on the facts I have in front of me. Ignoring the information I collected and presented for you is incredibly childish. \n\n\n> I'd really like to move from \"IMPOSSIBLE because...  (electrum hasn't been optimized\n> (by the way: you should run on SSDs, LevelDB isn't designed for spinning disks),\n\nI should stress that I didn't present that timing information as a dig against their software, it just happens to be something I have direct access to and can prevent clean data about. The point that I was attempting to make is that Bitcoin Core isn't the only piece of software in the ecosystem with performance problems, given that a large portion of users have Electrum wallets it would be insane not to consider the impact changes will have on the people that charitably run servers for the community. \n\nBy the way, is that an offer to buy my dedicated server some new SSDs? \n\n\n> work with people like Tom and Mike who have a 'lets get it done' attitude, and\n> focus on what it will take to scale up.\n\nScaling up isn't tweaking parameters and ignoring the brickwork falling around your head. You mention that you think the merkle tree can hold an unlimited amount of information, that's all very well so long as people can actually validate the thing. Miners aren't even willing to validate their own blocks at the peril of losing $7000 USD (on two occasions now), so why would anybody else?"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-23T18:57:04",
                "message_text_only": ">\n> You complained about the lack of quantitative analysis being used, I gave\n> it to you. There's nothing \"negative\" about displaying data which doesn't\n> completely back up what your position is, I made a sensible conclusion\n> based on the facts I have in front of me. Ignoring the information I\n> collected and presented for you is incredibly childish.\n>\n\nHe hasn't ignored you, and he wasn't responding to your email specifically\nbut rather the general attitude displayed in this forum for the last\nseveral months (and I'd argue the last year or so).\n\nYour data is interesting but ultimately tell us what we already know - that\nthe next bottleneck after the hard coded limit could easily be propagation\nspeed. The solution is likely to be a better protocol. Matt's custom\nnetwork already has optimised things, rolling some of those ideas into the\nP2P protocol may be a good place to start, or something fancier like IBLTs.\n\nRegardless, the *next* bottleneck is not the protocol, it's the hard cap.\n\nSo the conclusion remains unchanged: Bitcoin must grow, and solutions for\nscaling it up will be found as the need arises.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/23883077/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T17:51:11",
                "message_text_only": "On Thu, Jul 23, 2015 at 6:17 PM, Tom Harding via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 7/23/2015 5:17 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n>\n>> If the user expectation is that a price would never arise because\n>> supply is going to be increased ad infinitum and they will always be\n>> able to send fast in-chain bitcoin transactions for free, just like\n>> breath air (an abundant resource) for free, then we should change that\n>> expectation as soon as possible.\n>\n> No.  We should accept that reality may change, and we should promote\n> understanding of that fact.\n>\n> We should not artificially manipulate the market \"as soon as possible,\"\n> since we ourselves don't know much at all about how the market will\n> unfold in the future.\n\nWe know perfectly well that the system will need to eventually be\nsustained by fees.\nWe should stop misinforming new users talking them about how bitcoin\ntransactions \"are free\", because they're clearly not.\n\n>> the criteria for the consensus block size should be purely based on\n>> technological capacity (propagation benchmarking, etc) and\n>> centralization concerns\n>\n> Right, purely these.  There is no place for artificially manipulating\n> expectations.\n\nAm I \"artificially manipulating expectations\" ?\n\n>> they will simply advance the front and start another battle, because\n>> their true hidden faction is the \"not ever side\". Please, Jeff, Gavin,\n>> Mike, show me that I'm wrong on this point. Please, answer my question\n>> this time. If \"not now\", then when?\n>\n> Bitcoin has all the hash power.  The merkle root has effectively\n> infinite capacity.  We should be asking HOW to scale the supporting\n> information propagation system appropriately, not WHEN to limit the\n> capacity of the primary time-stamping machine.\n\nTimestamping data using the blockchain is not the same as including\nthat the data in the blockchain itself because the later is a scarce\nresource.\nThe \"timestamping space\" is already unlimited today with no changes.\nYou can use a bitcoin transaction to timestamp an unbounded amount of\nexternal data using exactly 0 extra bytes in your transaction!\nHere's the code: https://github.com/Blockstream/contracthashtool\n\nAnd I'm very interested in scaling Bitcoin, I just disagree that\nchanging a constant is a \"scaling solution\".\n\nOn Thu, Jul 23, 2015 at 6:28 PM, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Jul 23, 2015 at 12:17 PM, Tom Harding via bitcoin-dev\n>> We haven't tried yet.  I can't answer for the people you asked, but\n>> personally I haven't thought much about when we should declare failure.\n>\n>\n> Yes! Lets plan for success!\n\nI extremely disagree that having a block limit is failure. It's a\ndesign decision to protect the system against centralization (which we\nwill be able to rise as we solve technical and centralization problems\nwe have today).\nBut thank you for being more clear about it now, Gavin. You won't stop\non a 8GB or 32GB limit because you think having ANY limit would be a\nfailure.\nIs that correct?\nIf not, can you please answer clearly when and why you think the\nblocksize should be lower than demand (when you will be ok with\nbitcoin users having to pay fees for the service they're enjoying)?\nIf your answer is \"never\", I would prefer to hear it from you than\njust concluding it by the lack of an answer."
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-24T06:30:28",
                "message_text_only": "On 7/23/2015 10:51 AM, Jorge Tim\u00f3n wrote:\n> We know perfectly well that the system will need to eventually be\n> sustained by fees.\n\nFee revenue can rise just as easily without increased BTC fee rates.\n\nTwo avenues that are just as effective: increased exchange rate,\nincreased number of fee-paying transactions.  Neither of these avenues\nbenefits from increased \"fee pressure\" (scarcity of block space).\n\n\n> I just disagree that changing a constant is a \"scaling solution\".\n>\n\nNobody here thinks that.  Even on Reddit, not very many people seem to\nthink that."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-24T09:24:01",
                "message_text_only": "On Jul 24, 2015 8:30 AM, \"Tom Harding\" <tomh at thinlink.com> wrote:\n>\n> On 7/23/2015 10:51 AM, Jorge Tim\u00f3n wrote:\n> > We know perfectly well that the system will need to eventually be\n> > sustained by fees.\n>\n> Fee revenue can rise just as easily without increased BTC fee rates.\n>\n> Two avenues that are just as effective: increased exchange rate,\n> increased number of fee-paying transactions.  Neither of these avenues\n> benefits from increased \"fee pressure\" (scarcity of block space).\n>\n\nWhy do you expect users to \"increase the number of fee-paying transactions\"\nif their free transactions reliably get mined relatively fast?\nAnd if it's good that they pay fees, why is not good when the reason they\ndo it is because there's limited space in the block? Is user's paying fees\nsoon a good thing or the \"catastrophe\" we need to avoid by rising the block\nsize, what is it? Or is there something else wrong with having a limit\nother than \"fees will hurt short-term adoption\"? I'm confused about your\nposition now...\n\nRegarding \"increasing the exchange rate\" it would be really nice to just\npush a button and double bitcoin's price just before the next subsidy\nhalving, but unfortunately that's something out of our control.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/f546c1a4/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-24T22:50:36",
                "message_text_only": "On 7/24/2015 2:24 AM, Jorge Tim\u00f3n wrote:\n\n> Regarding \"increasing the exchange rate\" it would be really nice to\n> just push a button and double bitcoin's price just before the next\n> subsidy halving, but unfortunately that's something out of our control. \n\nJorge, right now, from the activity on github, you are working at least\nas hard as anyone else, probably harder.  Why?  Why, if not to make\nbitcoin more valuable?\n\nEven apart from the convenience/curse of real-time exchange markets,\njust with an abstract definition of \"value,\" isn't that exactly what a\ndeveloper can influence, if not \"control?\"\n\nIsn't figuring out ways to increase the value of bitcoin what we are doing?"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-28T11:29:36",
                "message_text_only": "On Sat, Jul 25, 2015 at 12:50 AM, Tom Harding <tomh at thinlink.com> wrote:\n> On 7/24/2015 2:24 AM, Jorge Tim\u00f3n wrote:\n>\n>> Regarding \"increasing the exchange rate\" it would be really nice to\n>> just push a button and double bitcoin's price just before the next\n>> subsidy halving, but unfortunately that's something out of our control.\n>\n> Jorge, right now, from the activity on github, you are working at least\n> as hard as anyone else, probably harder.\n\nMy level of contributions are irrelevant to this discussion. But\nstill, I feel I should clarify some of the metrics you are looking to.\nMost of my contributions so far are code refactors (with a small\nchange on the command-line options and a small optimization here and\nthere). This type of changes is usually better done incrementally to\nbe less risky and disruptive (this is specially important for\nconsensus-related code), and that makes my total commit count\nunusually high, even when some people have contributed more in new\nfunctionality than me in a single commit.\nAlso code movements (often required as part of these refactors)\nproduce unusually high total diff counts even when they require little\nless than copy and paste (once you know what you want to move and\nwhere, of course).\nIf I didn't thought this work is extremely important in the long term\n(among other things, to make the code more accessible to new\nreviewers/developers) I wouldn't be doing it, but you can't just\ncompare contributions counting commits or lines changed, that's not\nhow it works.\nGithub may say that I'm #10 with 96 commits / 9,371 ++ / 8,962 --, but\nit's obvious to me that, say, gmaxwell #13 with 71 commits / 807 ++ /\n707 -- has done a lot more for Bitcoin Core than I have.\nEven if it was true that I'm the person currently coding more for\nBitcoin Core, I wouldn't write any of that if I had no hope of getting\nreview, so review is certain sense much more important than coding.\n\n> Why?  Why, if not to make\n> bitcoin more valuable?\n\nWho cares?\nIf my work is good for the software, my motivations are irrelevant. If\nI accidentally PR a bug, my motivations are again: the bug should not\nbe accepted no matter how pure and noble my intentions are.\nBut, no, making Bitcoin's price (no offense taken, but there's an\nspanish say that goes like this \"S\u00f3lo un necio confunde valor y\nprecio\" which translates to \"Only a fool confuses value and price\")\nrise is not one of my main motivations.\nI'm much more concerned about the long term success of the currency\n(for which turnover is a much more interesting metric than market cap\nIMO) and about learning a technology that I believe will revolutionize\nthe world, but maybe you don't believe me. There's a Bitcoin incentive\nas part of my Blockstream's contract, so I have a financial incentive\nfor Bitcoin's price to increase, but, in fact, when I started\ncontributing to bitcoin core my bitcoin holdings where extremely low.\nIt bothers me that so many people seem to assume that Bitcoin\ndevelopers are also hardcore currency speculators and are also good at\nit (I can say Bitcoin has teach me that I'm a terrible day-trader\nmyself).\nThere's many reasons to contribute to Bitcoin core and none of them\nare relevant to this discussion.\n\n> Even apart from the convenience/curse of real-time exchange markets,\n> just with an abstract definition of \"value,\" isn't that exactly what a\n> developer can influence, if not \"control?\"\n\nThe fact is that there's no \"bitcoin developer dance\" that makes it\nrain and also raises bitcoin's market price 100 usd. And suggesting\n\"rising the price\" as a solution to any problem just cannot be\nconsidered a serious proposal.\nNo, we can't just ACK a \"double the price\" PR when the next halving comes.\n\n> Isn't figuring out ways to increase the value of bitcoin what we are doing?\n\nIf that's what you're doing as a currency speculator, that's fine.\nIt's just off-topic to this list.\nAnd, no, that's not \"what I am doing\" as a software developer.\nI want the system to improve, like that \"Jessie J\" singer said, forget\nabout the priceeeeeeeeee, yeah."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-28T11:32:30",
                "message_text_only": "s/no offense taken/no offense intended"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-28T16:44:42",
                "message_text_only": "Jorge,\n\nWe obviously disagree fundamentally on the role of societal adoption, in \nthe system that Satoshi designed.\n\nAdoption is well ahead of Satoshi's schedule, and the measure of this is \nthe exchange rate.  It is at once an imperfect measure, and one of the \nmost perfect markets that has ever existed.\n\nAs long as hardware, electric power, and bandwidth are priced in fiat \ncurrency, the exchange rate is a critical variable to security, \ncapacity, and other metrics of network health.\n\nIt's not inconsistent that you consider the exchange rate irrelevant.  \nIn fact it explains why you believe that Satoshi's timetable for \ntransitioning to fee incentives can be summarily tossed aside and \nreplaced with something you think is better.\n\nHere's an English saying I just invented.  A bunch of geniuses can do a \nlot more damage than one fool."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-28T17:33:29",
                "message_text_only": "That's not what I said. We don't seem able to communicate with each other\nefficiently, probably my fault since English is not my native language. But\nI don't want to use more of my time (or yours) in this discussion, since\nit's clearly unproductive.\nOn Jul 28, 2015 6:45 PM, \"Tom Harding\" <tomh at thinlink.com> wrote:\n\n> Jorge,\n>\n> We obviously disagree fundamentally on the role of societal adoption, in\n> the system that Satoshi designed.\n>\n> Adoption is well ahead of Satoshi's schedule, and the measure of this is\n> the exchange rate.  It is at once an imperfect measure, and one of the most\n> perfect markets that has ever existed.\n>\n> As long as hardware, electric power, and bandwidth are priced in fiat\n> currency, the exchange rate is a critical variable to security, capacity,\n> and other metrics of network health.\n>\n> It's not inconsistent that you consider the exchange rate irrelevant.  In\n> fact it explains why you believe that Satoshi's timetable for transitioning\n> to fee incentives can be summarily tossed aside and replaced with something\n> you think is better.\n>\n> Here's an English saying I just invented.  A bunch of geniuses can do a\n> lot more damage than one fool.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/c22de55e/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-22T19:17:44",
                "message_text_only": "> On Jul 22, 2015, at 10:33 AM, Jeff Garzik via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Wed, Jul 22, 2015 at 9:52 AM, Pieter Wuille via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> Some people have called the prospect of limited block space and the development of a fee market a change in policy compared to the past. I respectfully disagree with that. Bitcoin Core is not running the Bitcoin economy, and its developers have no authority to set its rules. Change in economics is always happening, and should be expected. Worse, intervening in consensus changes would make the ecosystem more dependent on the group taking that decision, not less.\n> \n> \n> \n> This completely ignores reality, what users have experienced for the past ~6 years.\n> \n> \"Change in economics is always happening\" does not begin to approach the scale of the change.\n> \n> For the entirety of bitcoin's history, absent long blocks and traffic bursts, fee pressure has been largely absent.\n\nThis is only because of the fact that only a negligible portion of miner income comes from fees - the vast majority still continues to be subsidized by block rewards. The original design of the protocol was such that this subsidy would be decreased over time to let fees become the predominant source of income for miners. Until we have fee pressures, there\u2019s no incentive for the industry to find solutions to real problems that need solving. I think you underestimate the ingenuity of people when pressed for real solutions. The main barrier to Bitcoin adoption is NOT this issue\u2026and I believe the priorities are misplaced here. We\u2019ve had over six years to start working on solutions but we keep \u201ckicking the can down the road\u201d - until when?!?! I believe unless there\u2019s a strong need to find a solution no solutions will really be found.\n\n> \n> Moving to a new economic policy where fee pressure is consistently present is radically different from what users, markets, and software have experienced and lived.\n> \n> Analysis such as [1][2] and more shows that users will hit a \"painful\" \"wall\" and market disruption will occur - eventually settling to a new equilibrium after a period of chaos - when blocks are consistently full.\n> \n> [1] http://hashingit.com/analysis/34-bitcoin-traffic-bulletin <http://hashingit.com/analysis/34-bitcoin-traffic-bulletin>\n> [2] http://gavinandresen.ninja/why-increasing-the-max-block-size-is-urgent <http://gavinandresen.ninja/why-increasing-the-max-block-size-is-urgent>\n> \n> First, users & market are forced through this period of chaos by \"let a fee market develop\" as the whole market changes to a radically different economic policy, once the network has never seen before.\n> \n> Next, when blocks are consistently full, the past consensus was that block size limit will be increased eventually.  What happens at that point?\n> \n> Answer - Users & market are forced through a second period of chaos and disruption as the fee market is rebooted again by changing the block size limit.\n> \n> The average user hears a lot of noise on both sides of the block size debate, and really has no idea that the new \"let a fee market develop\" Bitcoin Core policy is going to raise fees on them.\n> \n> It is clear that\n> - \"let the fee market develop, Right Now\" has not been thought through\n> - Users are not prepared for a brand new economic policy\n> - Users are unaware that a brand new economic policy will be foisted upon them\n> \n\nThe current userbase and market is still tiny - we have to think bigger than this. We already go through loads of pain to use the current system\u2026and quite frankly, there are a number of other significant issues that I think are far bigger obstacles to widespread adoption than \u201cI have to pay a fee\u201d. For example, the current cost of verification is too high to continue to ensure the security of the network (as the July 4th fork clearly illustrated)\u2026and places huge centralization pressures on validation\u2026and simply will not support hundreds of millions of users or billions of users. Increasing block size actually worsens the scaling properties, it does not improve them. We need better scaling solutions - almost certainly this will require avoiding the need for global consensus for the vast majority of transactions (nested consensus or off-chain direct party-to-party contract negotiation, the lightning network, etc. The focus on reducing fee pressure by increasing block size is a distraction from far more fundamental issues, IMHO.\n\n> \n> So to point out what I consider obvious: if Bitcoin requires central control over its rules by a group of developers, it is completely uninteresting to me. Consensus changes should be done using consensus, and the default in case of controversy is no change.\n> \n> \n> False.\n> \n> All that has to do be done to change bitcoin to a new economic policy - not seen in the entire 6 year history of bitcoin - is to stonewall work on block size.\n> \n> Closing size increase PRs and failing to participate in planning for a block size increase accomplishes your stated goal of changing bitcoin to a new economic policy.\n> \n\nWrong - the economic policy of bitcoin has always been, from the beginning, to subsidize blocks initially and transition to fees. Artificially continuing to rely on block reward subsidies is what is a new economic policy. We\u2019re already six years in, pretty soon another halving is coming - how long are we going to wait to start transitioning? The lower block reward subsidies are, the more pain fee pressures will cause.\n\n\n> \"no [code] change\"... changes bitcoin to a brand new economic policy, picking economic winners & losers.  Some businesses will be priced out of bitcoin, etc.\n> \n> Stonewalling size increase changes is just as much as a Ben Bernanke/FOMC move as increasing the hard limit by hard fork.\n> \n> \n> My personal opinion is that we - as a community - should indeed let a fee market develop, and rather sooner than later, and that \"kicking the can down the road\" is an incredibly dangerous precedent: if we are willing to go through the risk of a hard fork because of a fear of change of economics, then I believe that community is not ready to deal with change at all. And some change is inevitable, at any block size. Again, this does not mean the block size needs to be fixed forever, but its intent should be growing with the evolution of technology, not a panic reaction because a fear of change.\n> \n> But I am not in any position to force this view. I only hope that people don't think a fear of economic change is reason to give up consensus.\n> \n> \n> Actually you are.\n> \n> When size increase progress gets frozen out of Bitcoin Core, that just increases the chances that progress must be made through a contentious hard fork.\n> \n> Further, it increases the market disruption users will experience, as described above.\n> \n> Think about the users.  Please.\n> \n\nI think about the billions of people out there in the world that could be using this technology that simply have no access to it right now. The majority or them which are unbanked, etc\u2026\n\nMore the reason to go through the steps needed while we\u2019re still small to correct the core issues.\n\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/e4c83d05/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/e4c83d05/attachment-0001.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-22T21:43:20",
                "message_text_only": "Hi Pieter,\n\nI think a core area of disagreement is this:\n\n> Bitcoin Core is not running the Bitcoin economy, and its developers have\n> no authority to set its rules.\n>\nIn fact Bitcoin Core is running the Bitcoin economy, and its developers do\nhave the authority to set its rules. This is enforced by the reality of\n~100% market share and limited github commit access.\n\nYou may not like this situation, but it is what it is. By refusing to make\na release with different rules, people who disagree are faced with only two\noptions:\n\n1. Swallow it even if they hate it\n2. Fork the project and fork the block chain with it (XT)\n\nThere are no alternatives. People who object to (2) are inherently\nsuggesting (1) is the only acceptable path, which not surprisingly, makes a\nlot of people very angry.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/36316a52/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-22T21:56:50",
                "message_text_only": "> On Jul 22, 2015, at 2:43 PM, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Hi Pieter,\n> \n> I think a core area of disagreement is this:\n> Bitcoin Core is not running the Bitcoin economy, and its developers have no authority to set its rules.\n> \n> In fact Bitcoin Core is running the Bitcoin economy, and its developers do have the authority to set its rules. This is enforced by the reality of ~100% market share and limited github commit access.\n> \n> You may not like this situation, but it is what it is. By refusing to make a release with different rules, people who disagree are faced with only two options:\n> \n> 1. Swallow it even if they hate it\n> 2. Fork the project and fork the block chain with it (XT)\n> \n> There are no alternatives. People who object to (2) are inherently suggesting (1) is the only acceptable path, which not surprisingly, makes a lot of people very angry.\n\nIt would be truly awesome to be able to give people more choice on consensus rules. Unfortunately, cryptoledgers do not fork gracefully (yet). Until we\u2019re able to merge blockchain forks like we\u2019re able to merge git repo forks, the safest option is no fork.\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/4006ffa5/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/4006ffa5/attachment-0001.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-22T22:01:32",
                "message_text_only": ">\n> Until we\u2019re able to merge blockchain forks like we\u2019re able to merge git\n> repo forks, the safest option is no fork.\n>\n\nBlock chain forks merge in the same way as git forks all the time, that's\nhow the reorg algorithm works. Transactions that didn't make it into the\npost-reorg chain go back into the mempool and miners attempt to reinclude\nthem: this is the \"merge\" process. If they now conflict with other\ntransactions they are dropped and this is \"resolving merge conflicts\".\n\nHowever you have to want to merge with the new chain. If your software is\nprogrammed not to do that out of some bizarre belief that throttling your\nown user base is a good idea, then of course, no merge happens. Once you\nstop telling your computer to do that, you can then merge (reorg) back onto\nthe main chain again.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/88e446a6/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-22T22:09:26",
                "message_text_only": "> On Jul 22, 2015, at 3:01 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> \n> Until we\u2019re able to merge blockchain forks like we\u2019re able to merge git repo forks, the safest option is no fork.\n> \n> Block chain forks merge in the same way as git forks all the time, that's how the reorg algorithm works. Transactions that didn't make it into the post-reorg chain go back into the mempool and miners attempt to reinclude them: this is the \"merge\" process. If they now conflict with other transactions they are dropped and this is \"resolving merge conflicts\".\n> \n\nBlockchain reorgs are part of the consensus rules. We\u2019re talking not about forks caused by network partitions\u2026but forks caused by the use of distinct consensus rules.\n\n> However you have to want to merge with the new chain. If your software is programmed not to do that out of some bizarre belief that throttling your own user base is a good idea, then of course, no merge happens. Once you stop telling your computer to do that, you can then merge (reorg) back onto the main chain again.\n> \n\nYou cannot merge two chains that have incompatible transactions in them without throwing away one of the two conflicting transactions (along with all dependencies). In the reorg process, this occurs naturally\u2026and we allow for it by using confirmation count as a metric of irreversibility. Until one chain wins (by overwhelming consensus) or all chains include a particular transaction in question, we cannot treat that transaction as irreversible. Propose a model in which we can still reliably measure irreversibility in the presence of multiple chains and you might have a point.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/fbddb23c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/fbddb23c/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T01:53:36",
                "message_text_only": "> On Jul 22, 2015, at 3:01 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> \n> Until we\u2019re able to merge blockchain forks like we\u2019re able to merge git repo forks, the safest option is no fork.\n> \n> Block chain forks merge in the same way as git forks all the time, that's how the reorg algorithm works. Transactions that didn't make it into the post-reorg chain go back into the mempool and miners attempt to reinclude them: this is the \"merge\" process. If they now conflict with other transactions they are dropped and this is \"resolving merge conflicts\".\n> \n> However you have to want to merge with the new chain. If your software is programmed not to do that out of some bizarre belief that throttling your own user base is a good idea, then of course, no merge happens. Once you stop telling your computer to do that, you can then merge (reorg) back onto the main chain again.\n> \n\nMike, you might be surprized to learn that there are other hard fork proposals out there besides increasing block size.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/f856c464/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/f856c464/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-07-22T22:30:59",
                "message_text_only": "I wouldn't go quite that far.  The reality is somewhere in the middle, as\nBryan Cheng noted in this thread:\n\nQuoting BC,\n> Upgrading to a version of Bitcoin Core that is incompatible with your\nideals is in no way a forced choice, as you have stated in your email;\nforks, alternative clients, or staying on an older version are all valid\nchoices. If the majority of the network chooses not to endorse a specific\nchange, then the majority of the network will continue to operate just fine\nwithout it, and properly structured consensus rules will pull the minority\nalong as well.\n\nThe developers *propose* a new version, by publishing a new release.  The\nindividual network nodes choose to accept or reject that.\n\nSo I respectfully disagree with \"core devs don't control the network\" and\n\"core devs control the network\" both.\n\nThere are checks-and-balances that make the system work.  Consensus is most\nstrongly measured by user actions after software release.  If the\ndevelopers fail to reflect user consensus, the network will let us know.\n\n\n\n\n\n\n\n\n\n\n\nOn Wed, Jul 22, 2015 at 2:43 PM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Pieter,\n>\n> I think a core area of disagreement is this:\n>\n>> Bitcoin Core is not running the Bitcoin economy, and its developers have\n>> no authority to set its rules.\n>>\n> In fact Bitcoin Core is running the Bitcoin economy, and its developers do\n> have the authority to set its rules. This is enforced by the reality of\n> ~100% market share and limited github commit access.\n>\n> You may not like this situation, but it is what it is. By refusing to make\n> a release with different rules, people who disagree are faced with only two\n> options:\n>\n> 1. Swallow it even if they hate it\n> 2. Fork the project and fork the block chain with it (XT)\n>\n> There are no alternatives. People who object to (2) are inherently\n> suggesting (1) is the only acceptable path, which not surprisingly, makes a\n> lot of people very angry.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/f4c37787/attachment-0001.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-23T00:27:09",
                "message_text_only": "On 7/22/2015 9:52 AM, Pieter Wuille via bitcoin-dev wrote:\n> It would be irresponsible and dangerous to the network and thus the \n> users of the software to risk forks, or to take a leading role in \n> pushing dramatic changes.\n\nCount me among those who see allowing bitcoin to become \nspace-constrained, without technical reason, as a dramatic change. \nEspecially when the reasons cited in support are\n\n  - Various species of vaporware\n  - Amateurish economic thinking surrounding fees\n  - \"We don't support it because not everyone supports it because we \ndon't support it because ...\" infinite descent"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T00:37:11",
                "message_text_only": "> On Jul 22, 2015, at 5:27 PM, Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On 7/22/2015 9:52 AM, Pieter Wuille via bitcoin-dev wrote:\n>> It would be irresponsible and dangerous to the network and thus the users of the software to risk forks, or to take a leading role in pushing dramatic changes.\n> \n> Count me among those who see allowing bitcoin to become space-constrained, without technical reason, as a dramatic change. Especially when the reasons cited in support are\n> \n> - Various species of vaporware\n> - Amateurish economic thinking surrounding fees\n> - \"We don't support it because not everyone supports it because we don't support it because ...\" infinite descent\n> \n\nI take it you mean allowing bitcoin to *not* become space-constrained - because all real-world computers are space-constrained\u2026\n\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/6e8520af/attachment.sig>"
            },
            {
                "author": "Edmund Edgar",
                "date": "2015-07-23T04:40:29",
                "message_text_only": "> So to point out what I consider obvious: if Bitcoin requires central\n> control over its rules by a group of developers, it is completely\n> uninteresting to me. Consensus changes should be done using consensus, and\n> the default in case of controversy is no change.\n\nThis is a really interesting thread. Since we're no longer talking\nabout a consensus of the core committers, which would be central\ncontrol, but instead something broader, could you say a bit more about\nwhat this consensus might look like, and how we'll know if we've got\none?\n\nIn plain language \"no controversy\" sounds like very high bar for a\ndiverse community like this; Even bringing in P2SH kicked up a fair\nbit of fur and feathers. Do you have a definition in mind where it\nisn't an _impossibly_ high one?\n\n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\nsupport at realitykeys.com\nhttps://www.realitykeys.com"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-27T12:08:29",
                "message_text_only": "On Wed, Jul 22, 2015 at 12:52:20PM -0400, Pieter Wuille via bitcoin-dev wrote:\n> Hello all,\n> \n> I'd like to talk a bit about my view on the relation between the Bitcoin\n> Core project, and the consensus rules of Bitcoin.\n> \n> I believe it is the responsibility of the maintainers/developers of Bitcoin\n> Core to create software which helps guarantee the security and operation of\n> the Bitcoin network.\n> \n> In addition to normal software maintenance, bug fixes and performance\n> improvements, this includes DoS protection mechanism deemed necessary to\n> keep the network operational. Sometimes, such (per-node configurable)\n> policies have had economic impact, for example the dust rule.\n> \n> This also includes participating in discussions about consensus changes,\n> but not the responsibility to decide on them - only to implement them when\n> agreed upon. It would be irresponsible and dangerous to the network and\n> thus the users of the software to risk forks, or to take a leading role in\n> pushing dramatic changes. Bitcoin Core developers obviously have the\n> ability to make any changes to the codebase or its releases, but it is\n> still up to the community to choose to run that code.\n> \n> Some people have called the prospect of limited block space and the\n> development of a fee market a change in policy compared to the past. I\n> respectfully disagree with that. Bitcoin Core is not running the Bitcoin\n> economy, and its developers have no authority to set its rules. Change in\n> economics is always happening, and should be expected. Worse, intervening\n> in consensus changes would make the ecosystem more dependent on the group\n> taking that decision, not less.\n> \n> So to point out what I consider obvious: if Bitcoin requires central\n> control over its rules by a group of developers, it is completely\n> uninteresting to me. Consensus changes should be done using consensus, and\n> the default in case of controversy is no change.\n\nIt's worth reminding people that Bitcoin Core, Bitcoin XT, my own\nBitcoin RBF, Luke-Jr's Bitcoin distribution, etc. are all software\npackages that implement the Bitcoin protocol. Like many protocols,\nchanging the Bitcoin protocol isn't easy, and requires a broad consensus\namong many players for any change to proceed smoothly. Conversely,\nchanging non-protocol aspects of any of those software packages is easy,\nand requires little to no coordination.\n\nOf course, in practice the Bitcoin Core dev team does have a lot of\ninfluence, to the point where soft-forks proposed by them are adopted\npretty much blindly by most users. This is essentially a meta-consensus:\nthe community is assuming what the Bitcoin Core team releases will be a\ngood idea to run as well as non-controversial without necessarily\ninvestigating too closely. The Core dev team has a strong track record\nof making good decisions with very few mistakes, while still adding new\nfeatures, fixing security bugs, and improving performance significantly.\nThat leads to a fairly strong meta-consensus of \"Just run Bitcoin Core\"\n\nOf course, if the Core team was taking changes and making controversial\nchanges, I suspect that meta-consensus would quickly break down! So it's\nnot as strong as it looks - the Core team doesn't really have the\nability to push through controversial changes, and the Core team acts\naccordingly.\n\nIf you don't agree with that \"meta-consensus\", running an alternative\nBitcoin protocol implementation such as Bitcoin XT is a logical way of\nshowing your support for a different way of coming to consensus on\nprotocol changes. It's not totally clear yet what that way actually is,\nbut it's certainly shaping up to have a lot less emphasis on broad\nconsensus among the technical community. (of course, the XT team to date\nhas much less experience with the Bitcoin protocol and codebase than the\ncombined Core team does)\n\nThe ugly thing is I think everyone in this process recognises the\nmeta-consensus nature of the debate already. Notice how Gavin Andresen's\ninitial blocksize posts were in the form of a non-technical blog, making\nnon-technical arguments to the public - not the Core dev team - in ways\nnot conducive to open response.  A rather annoying example is Jeff\nGarzik's recent efforts: a fundementally broken troll pull-req raising\nthe blocksize to 2MB that simply can't be merged for reasons unrelated\nto the blocksize, followed by very public and loud efforts to spin a\nnon-issue - closing a pull-req that had no real impact on blockchain\ncapacity - into a broader reddit furor over a \"changed\" policy on\nscaling. As a PR effort to the public this was fairly effective: framing\nthe Core dev team's actions as a change and raising the blocksize as a\ndefault action puts the team on the defensive. As a way of building\nconsensus among the Core dev team, Garzik's actions are very\ncounterproductive.\n\nI personally have a fairly high tolerance to trolling, but I wouldn't be\nsurprised if other devs start getting tired of this stuff and just leave\nBitcoin development to focus on more productive stuff. To many it's\ndiscouraging when the other side gets to \"promise ponies\" - we've got a\nfundamentally uphill PR battle in arguing for the development of\nscalability tech.\n\nFor the long term, I think it'd be useful for research to be done on how\nto better manage these social issues. I suspect a lot of the problem -\nat least for non-scalable blockchain designs - stems from how\ncentralization failures aren't gradual, and the ease of relying on trust\nrather than verification. While we get a lot of warning of issues, the\nwarning isn't directly associated with losses at first, making the\nproblem hard to explain to the general public.\n\n> ===\n> \n> My personal opinion is that we - as a community - should indeed let a fee\n> market develop, and rather sooner than later, and that \"kicking the can\n> down the road\" is an incredibly dangerous precedent: if we are willing to\n> go through the risk of a hard fork because of a fear of change of\n> economics, then I believe that community is not ready to deal with change\n> at all. And some change is inevitable, at any block size. Again, this does\n> not mean the block size needs to be fixed forever, but its intent should be\n> growing with the evolution of technology, not a panic reaction because a\n> fear of change.\n\nAgreed.\n\nYou know, those promoting the idea of a \"one-time-only\" blocksize\nincrease would do well to get the stakeholders affected to publicly\nexplain what exactly are their plans with regard to scalability in the\nlong run. If they don't have any, then it's a strong sign that said\nstakeholders don't actually intend to have a \"one-time-only\" blocksize\nincrease. Remember that there's no guarantee that the technology\nlimiting the blocksize will improve as fast as desired, or even for that\nmatter, improve at all. (bandwidth is limited by politics far more than\nit is limited by technology)\n\nThere's strong parallels to zeroconf safety, where as far as I can tell\nthe relevant stakeholders - pretty much all large payment providers -\nhave no plans at all to move to genuine decentralized zeroconf\ntechnology. Rather they have backup plans to get into dangerous and\ncentralizing mining contracts if zeroconf security gets any worse,\nsomething Coinbase even publicly admitted on this list.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000014e0038d4c6614025cf655cc976fcd11ee4c4f7861136b9f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/6f1d75d7/attachment.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-27T12:44:42",
                "message_text_only": "> The ugly thing is I think everyone in this process recognises the\n> meta-consensus nature of the debate already. Notice how Gavin Andresen's\n> initial blocksize posts were in the form of a non-technical blog, making\n> non-technical arguments to the public - not the Core dev team - in ways\n> not conducive to open response.  A rather annoying example is Jeff\n> Garzik's recent efforts: a fundementally broken troll pull-req raising\n> the blocksize to 2MB that simply can't be merged for reasons unrelated\n> to the blocksize, followed by very public and loud efforts to spin a\n> non-issue - closing a pull-req that had no real impact on blockchain\n> capacity - into a broader reddit furor over a \"changed\" policy on\n> scaling. As a PR effort to the public this was fairly effective: framing\n> the Core dev team's actions as a change and raising the blocksize as a\n> default action puts the team on the defensive. As a way of building\n> consensus among the Core dev team, Garzik's actions are very\n> counterproductive.\n\nYou are correct.  It is also counterproductive to take cheap shots at \nvendors in order to garner consulting revenue.  Measuring risk in a \nsystematic way against known metrics is the way to go.  Tweeting, \nblogging, and drama are generally counterproductive.\n\nWhen the issue is raised most of the developers shun the idea so until \nsome of the developers become mature and experienced you will be left \nwith all this teenager nonsense where everybody calls each other \n\"trolls\" on Reddit instead of engaging in real risk analysis.\n\nRuss"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-22T22:40:24",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/282f6685/attachment.html>"
            },
            {
                "author": "Cory Fields",
                "date": "2015-07-22T23:42:10",
                "message_text_only": "I'm not sure why Bitcoin Core and the rules and policies that it\nenforces are being conflated in this thread. There's nothing stopping\nus from adding the ability for the user to decide what their consensus\nparameters should be at runtime. In fact, that's already in use:\n./bitcoind -testnet. As mentioned in another thread, the chain params\ncould even come from a config file that the user could edit without\ntouching the code.\n\nI realize that it'd be opening Pandora's Box, and likely met with very\nloud and reasonable arguments about the obvious terrible implications,\nbut it's at least an alternative to the current status quo of Core's\nconflation with the consensus rules. The idea really is no different\nthan suggesting that someone fork the codebase and implement their own\nchanges, it just cuts out most of the work required.\n\nWith that in place, consensus changes would be more about lobbying and\ncoalitions, and less about pull requests.\n\nCory\n\nOn Wed, Jul 22, 2015 at 6:40 PM, Raystonn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> If the developers fail to reflect user consensus, the network will let us\n>> know.\n>\n> This is true with the caveat that there must be more than one option present\n> for the network to show it's preference.  If developers discourage anything\n> that forks from the rules enforced by Bitcoin Core, they harm the network's\n> ability to inform us of a failure to reflect user consensus.\n>\n> On 22 Jul 2015 3:31 pm, Jeff Garzik via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I wouldn't go quite that far.  The reality is somewhere in the middle, as\n> Bryan Cheng noted in this thread:\n>\n> Quoting BC,\n>> Upgrading to a version of Bitcoin Core that is incompatible with your\n>> ideals is in no way a forced choice, as you have stated in your email;\n>> forks, alternative clients, or staying on an older version are all valid\n>> choices. If the majority of the network chooses not to endorse a specific\n>> change, then the majority of the network will continue to operate just fine\n>> without it, and properly structured consensus rules will pull the minority\n>> along as well.\n>\n> The developers propose a new version, by publishing a new release.  The\n> individual network nodes choose to accept or reject that.\n>\n> So I respectfully disagree with \"core devs don't control the network\" and\n> \"core devs control the network\" both.\n>\n> There are checks-and-balances that make the system work.  Consensus is most\n> strongly measured by user actions after software release.  If the developers\n> fail to reflect user consensus, the network will let us know.\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> On Wed, Jul 22, 2015 at 2:43 PM, Mike Hearn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi Pieter,\n>\n> I think a core area of disagreement is this:\n>\n> Bitcoin Core is not running the Bitcoin economy, and its developers have no\n> authority to set its rules.\n>\n> In fact Bitcoin Core is running the Bitcoin economy, and its developers do\n> have the authority to set its rules. This is enforced by the reality of\n> ~100% market share and limited github commit access.\n>\n> You may not like this situation, but it is what it is. By refusing to make a\n> release with different rules, people who disagree are faced with only two\n> options:\n>\n> 1. Swallow it even if they hate it\n> 2. Fork the project and fork the block chain with it (XT)\n>\n> There are no alternatives. People who object to (2) are inherently\n> suggesting (1) is the only acceptable path, which not surprisingly, makes a\n> lot of people very angry.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-22T23:53:39",
                "message_text_only": "FWIW, I had worked on something similar a while back: https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf <https://github.com/CodeShark/bitcoin/blob/coinparams_new/altconf/bitcoin.conf>\n\nI like the idea in principle\u2026but we should require a new genesis block, different magic bytes, and a different network port at the very least. :)\n\n> On Jul 22, 2015, at 4:42 PM, Cory Fields via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I'm not sure why Bitcoin Core and the rules and policies that it\n> enforces are being conflated in this thread. There's nothing stopping\n> us from adding the ability for the user to decide what their consensus\n> parameters should be at runtime. In fact, that's already in use:\n> ./bitcoind -testnet. As mentioned in another thread, the chain params\n> could even come from a config file that the user could edit without\n> touching the code.\n> \n> I realize that it'd be opening Pandora's Box, and likely met with very\n> loud and reasonable arguments about the obvious terrible implications,\n> but it's at least an alternative to the current status quo of Core's\n> conflation with the consensus rules. The idea really is no different\n> than suggesting that someone fork the codebase and implement their own\n> changes, it just cuts out most of the work required.\n> \n> With that in place, consensus changes would be more about lobbying and\n> coalitions, and less about pull requests.\n> \n> Cory\n> \n> On Wed, Jul 22, 2015 at 6:40 PM, Raystonn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> If the developers fail to reflect user consensus, the network will let us\n>>> know.\n>> \n>> This is true with the caveat that there must be more than one option present\n>> for the network to show it's preference.  If developers discourage anything\n>> that forks from the rules enforced by Bitcoin Core, they harm the network's\n>> ability to inform us of a failure to reflect user consensus.\n>> \n>> On 22 Jul 2015 3:31 pm, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> I wouldn't go quite that far.  The reality is somewhere in the middle, as\n>> Bryan Cheng noted in this thread:\n>> \n>> Quoting BC,\n>>> Upgrading to a version of Bitcoin Core that is incompatible with your\n>>> ideals is in no way a forced choice, as you have stated in your email;\n>>> forks, alternative clients, or staying on an older version are all valid\n>>> choices. If the majority of the network chooses not to endorse a specific\n>>> change, then the majority of the network will continue to operate just fine\n>>> without it, and properly structured consensus rules will pull the minority\n>>> along as well.\n>> \n>> The developers propose a new version, by publishing a new release.  The\n>> individual network nodes choose to accept or reject that.\n>> \n>> So I respectfully disagree with \"core devs don't control the network\" and\n>> \"core devs control the network\" both.\n>> \n>> There are checks-and-balances that make the system work.  Consensus is most\n>> strongly measured by user actions after software release.  If the developers\n>> fail to reflect user consensus, the network will let us know.\n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> On Wed, Jul 22, 2015 at 2:43 PM, Mike Hearn via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Hi Pieter,\n>> \n>> I think a core area of disagreement is this:\n>> \n>> Bitcoin Core is not running the Bitcoin economy, and its developers have no\n>> authority to set its rules.\n>> \n>> In fact Bitcoin Core is running the Bitcoin economy, and its developers do\n>> have the authority to set its rules. This is enforced by the reality of\n>> ~100% market share and limited github commit access.\n>> \n>> You may not like this situation, but it is what it is. By refusing to make a\n>> release with different rules, people who disagree are faced with only two\n>> options:\n>> \n>> 1. Swallow it even if they hate it\n>> 2. Fork the project and fork the block chain with it (XT)\n>> \n>> There are no alternatives. People who object to (2) are inherently\n>> suggesting (1) is the only acceptable path, which not surprisingly, makes a\n>> lot of people very angry.\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/81ebd82e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/81ebd82e/attachment.sig>"
            },
            {
                "author": "Cory Fields",
                "date": "2015-07-23T00:05:53",
                "message_text_only": "On Wed, Jul 22, 2015 at 7:53 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> FWIW, I had worked on something similar a while back:\n> https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf\n>\n> I like the idea in principle\u2026but we should require a new genesis block,\n> different magic bytes, and a different network port at the very least. :)\n>\n\nNot sure if serious, so I'll assume you are :)\n\nWhy? The idea in this case would be to allow the user to decide\nbetween (say) \"./bitcoind -1mbchain\" and \"./bitcoind -2mbchain\" at\nruntime rather than the likely alternative of \"./bitcoind\" vs\n\"./bitcoin-fork\".\n\nChain params may be identical other than the value of some future\nevent (miner vote for example), in which case the configs would run\nidentically until that point.\n\nIf your concern is about nodes with different configs communicating\nwith eachother, I'd like to reiterate: the idea really is no different\nthan suggesting that someone fork the codebase and implement their own\nchanges, it just cuts out most of the work required.\n\nCory\n\n> On Jul 22, 2015, at 4:42 PM, Cory Fields via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I'm not sure why Bitcoin Core and the rules and policies that it\n> enforces are being conflated in this thread. There's nothing stopping\n> us from adding the ability for the user to decide what their consensus\n> parameters should be at runtime. In fact, that's already in use:\n> ./bitcoind -testnet. As mentioned in another thread, the chain params\n> could even come from a config file that the user could edit without\n> touching the code.\n>\n> I realize that it'd be opening Pandora's Box, and likely met with very\n> loud and reasonable arguments about the obvious terrible implications,\n> but it's at least an alternative to the current status quo of Core's\n> conflation with the consensus rules. The idea really is no different\n> than suggesting that someone fork the codebase and implement their own\n> changes, it just cuts out most of the work required.\n>\n> With that in place, consensus changes would be more about lobbying and\n> coalitions, and less about pull requests.\n>\n> Cory\n>\n> On Wed, Jul 22, 2015 at 6:40 PM, Raystonn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> If the developers fail to reflect user consensus, the network will let us\n> know.\n>\n>\n> This is true with the caveat that there must be more than one option present\n> for the network to show it's preference.  If developers discourage anything\n> that forks from the rules enforced by Bitcoin Core, they harm the network's\n> ability to inform us of a failure to reflect user consensus.\n>\n> On 22 Jul 2015 3:31 pm, Jeff Garzik via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I wouldn't go quite that far.  The reality is somewhere in the middle, as\n> Bryan Cheng noted in this thread:\n>\n> Quoting BC,\n>\n> Upgrading to a version of Bitcoin Core that is incompatible with your\n> ideals is in no way a forced choice, as you have stated in your email;\n> forks, alternative clients, or staying on an older version are all valid\n> choices. If the majority of the network chooses not to endorse a specific\n> change, then the majority of the network will continue to operate just fine\n> without it, and properly structured consensus rules will pull the minority\n> along as well.\n>\n>\n> The developers propose a new version, by publishing a new release.  The\n> individual network nodes choose to accept or reject that.\n>\n> So I respectfully disagree with \"core devs don't control the network\" and\n> \"core devs control the network\" both.\n>\n> There are checks-and-balances that make the system work.  Consensus is most\n> strongly measured by user actions after software release.  If the developers\n> fail to reflect user consensus, the network will let us know.\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> On Wed, Jul 22, 2015 at 2:43 PM, Mike Hearn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi Pieter,\n>\n> I think a core area of disagreement is this:\n>\n> Bitcoin Core is not running the Bitcoin economy, and its developers have no\n> authority to set its rules.\n>\n> In fact Bitcoin Core is running the Bitcoin economy, and its developers do\n> have the authority to set its rules. This is enforced by the reality of\n> ~100% market share and limited github commit access.\n>\n> You may not like this situation, but it is what it is. By refusing to make a\n> release with different rules, people who disagree are faced with only two\n> options:\n>\n> 1. Swallow it even if they hate it\n> 2. Fork the project and fork the block chain with it (XT)\n>\n> There are no alternatives. People who object to (2) are inherently\n> suggesting (1) is the only acceptable path, which not surprisingly, makes a\n> lot of people very angry.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T00:13:42",
                "message_text_only": "> On Jul 22, 2015, at 5:05 PM, Cory Fields <lists at coryfields.com> wrote:\n> \n> On Wed, Jul 22, 2015 at 7:53 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> FWIW, I had worked on something similar a while back:\n>> https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf\n>> \n>> I like the idea in principle\u2026but we should require a new genesis block,\n>> different magic bytes, and a different network port at the very least. :)\n>> \n> \n> Not sure if serious, so I'll assume you are :)\n\nOnly being partly serious - I strongly am in favor of a sufficiently modularized codebase that swapping out consensus rules is fairly straightforward and easy to test. I\u2019m not in favor of encouraging forking an existing blockchain without having mechanisms in place to gracefully merge back without significant network disruptions. We do not have this yet.\n\n> Why? The idea in this case would be to allow the user to decide\n> between (say) \"./bitcoind -1mbchain\" and \"./bitcoind -2mbchain\" at\n> runtime rather than the likely alternative of \"./bitcoind\" vs\n> \"./bitcoin-fork\u201d.\n\nThat\u2019s exactly what my coinparams_new branch does. Adding a parameter for maximum block size would be straightforward.\n\n> Chain params may be identical other than the value of some future\n> event (miner vote for example), in which case the configs would run\n> identically until that point.\n\nYes, indeed - this would be a special case.\n\n> If your concern is about nodes with different configs communicating\n> with eachother, I'd like to reiterate: the idea really is no different\n> than suggesting that someone fork the codebase and implement their own\n> changes, it just cuts out most of the work required.\n\nI do not encourage anyone to try to fork an existing blockchain without first securing overwhelming (near unanimous) consensus\u2026or without having yet built a mechanism that can merge divergent chains gracefully.\n\n> Cory\n> \n>> On Jul 22, 2015, at 4:42 PM, Cory Fields via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> I'm not sure why Bitcoin Core and the rules and policies that it\n>> enforces are being conflated in this thread. There's nothing stopping\n>> us from adding the ability for the user to decide what their consensus\n>> parameters should be at runtime. In fact, that's already in use:\n>> ./bitcoind -testnet. As mentioned in another thread, the chain params\n>> could even come from a config file that the user could edit without\n>> touching the code.\n>> \n>> I realize that it'd be opening Pandora's Box, and likely met with very\n>> loud and reasonable arguments about the obvious terrible implications,\n>> but it's at least an alternative to the current status quo of Core's\n>> conflation with the consensus rules. The idea really is no different\n>> than suggesting that someone fork the codebase and implement their own\n>> changes, it just cuts out most of the work required.\n>> \n>> With that in place, consensus changes would be more about lobbying and\n>> coalitions, and less about pull requests.\n>> \n>> Cory\n>> \n>> On Wed, Jul 22, 2015 at 6:40 PM, Raystonn via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> If the developers fail to reflect user consensus, the network will let us\n>> know.\n>> \n>> \n>> This is true with the caveat that there must be more than one option present\n>> for the network to show it's preference.  If developers discourage anything\n>> that forks from the rules enforced by Bitcoin Core, they harm the network's\n>> ability to inform us of a failure to reflect user consensus.\n>> \n>> On 22 Jul 2015 3:31 pm, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> I wouldn't go quite that far.  The reality is somewhere in the middle, as\n>> Bryan Cheng noted in this thread:\n>> \n>> Quoting BC,\n>> \n>> Upgrading to a version of Bitcoin Core that is incompatible with your\n>> ideals is in no way a forced choice, as you have stated in your email;\n>> forks, alternative clients, or staying on an older version are all valid\n>> choices. If the majority of the network chooses not to endorse a specific\n>> change, then the majority of the network will continue to operate just fine\n>> without it, and properly structured consensus rules will pull the minority\n>> along as well.\n>> \n>> \n>> The developers propose a new version, by publishing a new release.  The\n>> individual network nodes choose to accept or reject that.\n>> \n>> So I respectfully disagree with \"core devs don't control the network\" and\n>> \"core devs control the network\" both.\n>> \n>> There are checks-and-balances that make the system work.  Consensus is most\n>> strongly measured by user actions after software release.  If the developers\n>> fail to reflect user consensus, the network will let us know.\n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> \n>> On Wed, Jul 22, 2015 at 2:43 PM, Mike Hearn via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Hi Pieter,\n>> \n>> I think a core area of disagreement is this:\n>> \n>> Bitcoin Core is not running the Bitcoin economy, and its developers have no\n>> authority to set its rules.\n>> \n>> In fact Bitcoin Core is running the Bitcoin economy, and its developers do\n>> have the authority to set its rules. This is enforced by the reality of\n>> ~100% market share and limited github commit access.\n>> \n>> You may not like this situation, but it is what it is. By refusing to make a\n>> release with different rules, people who disagree are faced with only two\n>> options:\n>> \n>> 1. Swallow it even if they hate it\n>> 2. Fork the project and fork the block chain with it (XT)\n>> \n>> There are no alternatives. People who object to (2) are inherently\n>> suggesting (1) is the only acceptable path, which not surprisingly, makes a\n>> lot of people very angry.\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/aedc9049/attachment.sig>"
            },
            {
                "author": "Cory Fields",
                "date": "2015-07-23T00:34:23",
                "message_text_only": "On Wed, Jul 22, 2015 at 8:13 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>\n>> On Jul 22, 2015, at 5:05 PM, Cory Fields <lists at coryfields.com> wrote:\n>>\n>> On Wed, Jul 22, 2015 at 7:53 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>> FWIW, I had worked on something similar a while back:\n>>> https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf\n>>>\n>>> I like the idea in principle\u2026but we should require a new genesis block,\n>>> different magic bytes, and a different network port at the very least. :)\n>>>\n>>\n>> Not sure if serious, so I'll assume you are :)\n>\n> Only being partly serious - I strongly am in favor of a sufficiently modularized codebase that swapping out consensus rules is fairly straightforward and easy to test. I\u2019m not in favor of encouraging forking an existing blockchain without having mechanisms in place to gracefully merge back without significant network disruptions. We do not have this yet.\n>\n\nAgain, why? If someone wants to create a scamcoin, they can. If\nsomeone wants to burn money on a scamcoin, equally, they can. I'm not\nsure how this is any different. If someone manages to garner realistic\nsupport for a hard-fork, I don't see the benefit in forcing them to\nuse forked software.. that only leaves Core in the middle because it's\nforced to choose a side (not choosing is unfortunately a side as\nwell). It doesn't remove the reality of the split.\n\n>> Why? The idea in this case would be to allow the user to decide\n>> between (say) \"./bitcoind -1mbchain\" and \"./bitcoind -2mbchain\" at\n>> runtime rather than the likely alternative of \"./bitcoind\" vs\n>> \"./bitcoin-fork\u201d.\n>\n> That\u2019s exactly what my coinparams_new branch does. Adding a parameter for maximum block size would be straightforward.\n>\n>> Chain params may be identical other than the value of some future\n>> event (miner vote for example), in which case the configs would run\n>> identically until that point.\n>\n> Yes, indeed - this would be a special case.\n>\n>> If your concern is about nodes with different configs communicating\n>> with eachother, I'd like to reiterate: the idea really is no different\n>> than suggesting that someone fork the codebase and implement their own\n>> changes, it just cuts out most of the work required.\n>\n> I do not encourage anyone to try to fork an existing blockchain without first securing overwhelming (near unanimous) consensus\u2026or without having yet built a mechanism that can merge divergent chains gracefully.\n\nWell of course. It would be a terrible idea. People would try it and\nfail, and lose money. But for those crying foul at Core for being the\nconsensus/policy gatekeeper, it seems to me that user-selectable\nparams is the only logical solution."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-23T00:43:02",
                "message_text_only": "> On Jul 22, 2015, at 5:34 PM, Cory Fields <lists at coryfields.com> wrote:\n> \n> On Wed, Jul 22, 2015 at 8:13 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>> \n>>> On Jul 22, 2015, at 5:05 PM, Cory Fields <lists at coryfields.com> wrote:\n>>> \n>>> On Wed, Jul 22, 2015 at 7:53 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>>> FWIW, I had worked on something similar a while back:\n>>>> https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf\n>>>> \n>>>> I like the idea in principle\u2026but we should require a new genesis block,\n>>>> different magic bytes, and a different network port at the very least. :)\n>>>> \n>>> \n>>> Not sure if serious, so I'll assume you are :)\n>> \n>> Only being partly serious - I strongly am in favor of a sufficiently modularized codebase that swapping out consensus rules is fairly straightforward and easy to test. I\u2019m not in favor of encouraging forking an existing blockchain without having mechanisms in place to gracefully merge back without significant network disruptions. We do not have this yet.\n>> \n> \n> Again, why? If someone wants to create a scamcoin, they can. If\n> someone wants to burn money on a scamcoin, equally, they can. I'm not\n> sure how this is any different. If someone manages to garner realistic\n> support for a hard-fork, I don't see the benefit in forcing them to\n> use forked software.. that only leaves Core in the middle because it's\n> forced to choose a side (not choosing is unfortunately a side as\n> well). It doesn't remove the reality of the split.\n\nIn general, new consensus rules are not trivial to implement. Block size limits are exceptional in being so simple to change in the code. So what you\u2019re proposing sounds more like a plugin model supporting dynamic linking than a configuration file.\n\n>>> Why? The idea in this case would be to allow the user to decide\n>>> between (say) \"./bitcoind -1mbchain\" and \"./bitcoind -2mbchain\" at\n>>> runtime rather than the likely alternative of \"./bitcoind\" vs\n>>> \"./bitcoin-fork\u201d.\n>> \n>> That\u2019s exactly what my coinparams_new branch does. Adding a parameter for maximum block size would be straightforward.\n>> \n>>> Chain params may be identical other than the value of some future\n>>> event (miner vote for example), in which case the configs would run\n>>> identically until that point.\n>> \n>> Yes, indeed - this would be a special case.\n>> \n>>> If your concern is about nodes with different configs communicating\n>>> with eachother, I'd like to reiterate: the idea really is no different\n>>> than suggesting that someone fork the codebase and implement their own\n>>> changes, it just cuts out most of the work required.\n>> \n>> I do not encourage anyone to try to fork an existing blockchain without first securing overwhelming (near unanimous) consensus\u2026or without having yet built a mechanism that can merge divergent chains gracefully.\n> \n> Well of course. It would be a terrible idea. People would try it and\n> fail, and lose money. But for those crying foul at Core for being the\n> consensus/policy gatekeeper, it seems to me that user-selectable\n> params is the only logical solution.\n\nThe real problem isn\u2019t so much the difficulty of creating forks of the codebase - but the fact that unless a fork has overwhelming support, blockchains cannot guarantee irreversibility of transactions\u2026which defeats their entire purpose.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/a2ffbaef/attachment-0001.sig>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-07-23T07:24:48",
                "message_text_only": "The code so far is fairly limited in scope, essentially making it \npossible to change the values in consensus/params.h based on block \nheight. The actual code to interpret those values does need to be \nprovided ahead of time, of course, so there's still developer time to \nimplement, it just moves consensus arguments to the users.\n\nLoading the values from disk rather than hard-coding them is a \nreasonably straight forward extension to the code, in theory. The \nexisting work has application-specific changes that would need stripping \nout, but you can get an idea of what this would look like from \nhttps://github.com/rnicoll/dogecoin/commit/949b1ccd88ff13c74a3c1a7b9faa7f36c1085904\n\nRoss\n\nOn 23/07/2015 01:43, Eric Lombrozo via bitcoin-dev wrote:\n>> On Jul 22, 2015, at 5:34 PM, Cory Fields <lists at coryfields.com> wrote:\n>>\n>> On Wed, Jul 22, 2015 at 8:13 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>>> On Jul 22, 2015, at 5:05 PM, Cory Fields <lists at coryfields.com> wrote:\n>>>>\n>>>> On Wed, Jul 22, 2015 at 7:53 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>>>>> FWIW, I had worked on something similar a while back:\n>>>>> https://github.com/CodeShark/bitcoin/tree/coinparams_new/altconf\n>>>>>\n>>>>> I like the idea in principle\u2026but we should require a new genesis block,\n>>>>> different magic bytes, and a different network port at the very least. :)\n>>>>>\n>>>> Not sure if serious, so I'll assume you are :)\n>>> Only being partly serious - I strongly am in favor of a sufficiently modularized codebase that swapping out consensus rules is fairly straightforward and easy to test. I\u2019m not in favor of encouraging forking an existing blockchain without having mechanisms in place to gracefully merge back without significant network disruptions. We do not have this yet.\n>>>\n>> Again, why? If someone wants to create a scamcoin, they can. If\n>> someone wants to burn money on a scamcoin, equally, they can. I'm not\n>> sure how this is any different. If someone manages to garner realistic\n>> support for a hard-fork, I don't see the benefit in forcing them to\n>> use forked software.. that only leaves Core in the middle because it's\n>> forced to choose a side (not choosing is unfortunately a side as\n>> well). It doesn't remove the reality of the split.\n> In general, new consensus rules are not trivial to implement. Block size limits are exceptional in being so simple to change in the code. So what you\u2019re proposing sounds more like a plugin model supporting dynamic linking than a configuration file.\n>\n>>>> Why? The idea in this case would be to allow the user to decide\n>>>> between (say) \"./bitcoind -1mbchain\" and \"./bitcoind -2mbchain\" at\n>>>> runtime rather than the likely alternative of \"./bitcoind\" vs\n>>>> \"./bitcoin-fork\u201d.\n>>> That\u2019s exactly what my coinparams_new branch does. Adding a parameter for maximum block size would be straightforward.\n>>>\n>>>> Chain params may be identical other than the value of some future\n>>>> event (miner vote for example), in which case the configs would run\n>>>> identically until that point.\n>>> Yes, indeed - this would be a special case.\n>>>\n>>>> If your concern is about nodes with different configs communicating\n>>>> with eachother, I'd like to reiterate: the idea really is no different\n>>>> than suggesting that someone fork the codebase and implement their own\n>>>> changes, it just cuts out most of the work required.\n>>> I do not encourage anyone to try to fork an existing blockchain without first securing overwhelming (near unanimous) consensus\u2026or without having yet built a mechanism that can merge divergent chains gracefully.\n>> Well of course. It would be a terrible idea. People would try it and\n>> fail, and lose money. But for those crying foul at Core for being the\n>> consensus/policy gatekeeper, it seems to me that user-selectable\n>> params is the only logical solution.\n> The real problem isn\u2019t so much the difficulty of creating forks of the codebase - but the fact that unless a fork has overwhelming support, blockchains cannot guarantee irreversibility of transactions\u2026which defeats their entire purpose.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/e1376731/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-23T00:49:54",
                "message_text_only": "On 07/22/2015 05:13 PM, Eric Lombrozo via bitcoin-dev wrote:\n> Only being partly serious - I strongly am in favor of a sufficiently\nmodularized codebase that swapping out consensus rules is fairly\nstraightforward and easy to test...\n\nWe (libbitcoin) have taken the time to publish and maintain bitcoind's\n\"libbitcoinconsensus\" source files as an independent C++ library (with\nJava and Python bindings).\n\nhttps://en.bitcoin.it/wiki/Libbitcoin_Consensus\n\nIt can be easily verified against bitcoind sources and in builds of\nlibbitcoin-blockchain it can be swapped out for libbitcoin's native\nconsensus checks.\n\nhttps://en.bitcoin.it/wiki/Libbitcoin_Blockchain#Consensus_Validation\n\nSo there is really no reason to consider the original client synonymous\nwith consensus. I initially argued for this library to be natively\nisolated from bitcoind, but that didn't seem to be in the cards so we\ndid it independently.\n\nIn any case I agree with your stated need for this isolation (if not the\nmeans) for the reasons you state. The community needs to move beyond a\nlargely singular and monolithic codebase that is holding that position\nin part due to fear about consensus bug forks.\n\nTo make choice regarding consensus an actual choice (and thereby actual\nconsensus) the modularity you suggest is essential. One must be able to\ntake new developments without having to take consensus changes. The\noption to fork the codebase is not reasonable for most people. At this\npoint there is no defensible reason for coupling consensus checks with\nother features.\n\ne\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/3bf1af8a/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T18:12:33",
                "message_text_only": "On Thu, Jul 23, 2015 at 1:42 AM, Cory Fields via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I'm not sure why Bitcoin Core and the rules and policies that it\n> enforces are being conflated in this thread. There's nothing stopping\n> us from adding the ability for the user to decide what their consensus\n> parameters should be at runtime. In fact, that's already in use:\n> ./bitcoind -testnet. As mentioned in another thread, the chain params\n> could even come from a config file that the user could edit without\n> touching the code.\n\nFor what is worth, here's yet another piece of code from the \"doing\nnothing\" side:\n\nhttps://github.com/bitcoin/bitcoin/pull/6382\n\nIt allows you to create a regtest-like testchain with a maximum block\nsize chosen at run time.\nRusty used a less generic testchain for testing 8 MB blocks:\n\nhttp://rusty.ozlabs.org/?p=509\n\nUnfortunately I don't know of anybody that has used my patch to test\nany other size (maybe there's not that much interest in testing other\nsizes after all?).\n\nI'm totally in favor of preemptively adapting the code so that when a\nnew blocksize is to be deployed, adapting the code is not a problem.\nDevelopers can agree on many changes in the code without users having\nto agree on a concrete block size first.\nI offer my help to do that. That's what I'm trying to do in #6382 and\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008961.html\nbut to my surprise that gets disregarded as \"doing nothing\" and as\n\"having a negative attitude\", when not simply ignored."
            },
            {
                "author": "Gareth Williams",
                "date": "2015-07-23T08:24:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nI've seen a lot of talk on this list debating the role of Bitcoin Core and its maintainers WRT consensus, typically focused around whether they can technically force anyone to run their code (of course, they can't.)\n\nI've yet to see the discussion framed in terms of influence and leadership. Which is why I want to highlight:\n\n>I believe it is the responsibility of the maintainers/developers of\n>Bitcoin\n>Core to create software which helps guarantee the security and\n>operation of\n>the Bitcoin network\n\nPerhaps s/helps guarantee/promotes/ , but this stands out as an excellent description of Bitcoin Core's relationship to the Bitcoin network.\n\nDefaults are powerful. Users technically /can/ compile and run any code they like, but very few even bother to change configurable settings. They just want a trusted brand (\"Bitcoin Core\") that does the right thing out of the box. Bitcoin Core and its maintainers play a valuable /leadership/ role for the network. Whether they can force people to run their code is uninteresting -- people trust them.\n\nThat trust is well earned, precisely because they have always promoted the operation and security of the network.\n\nIn light of this responsibility it seems unreasonable for anyone to expect Core maintainers to promote patches that endanger network consensus (e.g. user configurable consensus parameters.)\n\nConsensus is order of business #1. If we can't all agree to use the same money then the grand experiment is resolved as a failure. Everyone has consensus parameters they'd (strongly) prefer. Somebody needs to heard us all toward using the same ones, sometimes even in the face of very high costs.\n\n- -Gareth\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFABAEBCgAqBQJVsKPgIxxHYXJldGggV2lsbGlhbXMgPGdhY3J1eEBnbWFpbC5j\nb20+AAoJEEY5w2E3jkVEZuEIAIKC9jTO33y4YC/cl1mO/+ux9YUqBlFUpuElKjNe\nNLUIqPANrMV3nTjUm666Hk3tVHk8IpYLUU1pRuYBAT17d1t/2bFC4CpfpWssF9Nw\nYhoYOKKVMvLUR4DRlkyhMD4YxorJ/TGiuEaFD4K/1s5uKf1+7Vj/BTi+SP+AIAIW\ngTbn2CA3T4n8WjDYADE0dqcYSqzt2M1fjXB+Ld95JGLun8m+6lDPhFy/o5aGhBk6\n5j86SITT9UtyyA6oaV5NNNgumcNBievnVwjTxjaWm8CBJlJ5jNpW65PQGkoSnCgz\nTpYt/wZHcdSqBeNHyno9XaEBSm99Ylk3i2Z1dGQwrSsZU0Q=\n=0pac\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Alice Larson",
                "date": "2015-07-27T17:05:48",
                "message_text_only": "> You are correct.  It is also counterproductive to take cheap shots at\n> vendors in order to garner consulting revenue.  Measuring risk in a\n> systematic way against known metrics is the way to go.  Tweeting,\n> blogging, and drama are generally counterproductive.\n> \n> When the issue is raised most of the developers shun the idea so until\n> some of the developers become mature and experienced you will be left\n> with all this teenager nonsense where everybody calls each other\n> \"trolls\" on Reddit instead of engaging in real risk analysis.\n\nThe twitter teenage nonsense from Todd is ridiculous: \nhttps://twitter.com/playatodd (warning, triggering)\n\nMike Hearn has mentioned a few times how Todd's habit of creating drama \non twitter and reddit every time anyone wants to change something in \nBitcoin in a way he doesn't like is driving away vendors. Openly \ncommenting on a female developers cleavage on twitter, as well as \nreferring to a female journalist as \"naughty\" is disgusting. Him \nconstantly hitting on women developers in Bitcoin is driving away \nfemales."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-27T17:22:29",
                "message_text_only": "https://twitter.com/petertoddbtc\n\nThanks for the triggering warning, if not for that I may have gone into\nseizures.\n\ne\n\n\nOn 07/27/2015 10:05 AM, Alice Larson via bitcoin-dev wrote:\n> The twitter teenage nonsense from Todd is ridiculous:\n> https://twitter.com/playatodd (warning, triggering)\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/74be8e11/attachment.sig>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-28T04:55:31",
                "message_text_only": "Eric Voskuil, Alice Larson, others:\n\nPersonal attacks or bullying of any kind are not tolerated on this mailing list.\n\nThis list is meant to be a low-volume community for technical proposals and discussion regarding Bitcoin. See the archive for say, 2012, for example.\n\nWhat Peter Todd or anyone else is doing on Twitter or other places is not relevant here. This list is not a pillory for your issues, nor a place to exhibit your personal hobby horses.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core and hard forks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Milly Bitcoin",
                "cipher anthem",
                "Benedict Chan",
                "Wladimir J. van der Laan",
                "Tom Harding",
                "Raystonn",
                "Bryan Cheng",
                "Mike Hearn",
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Ross Nicoll",
                "Jeff Garzik",
                "Eric Voskuil",
                "Simon Liu",
                "Jean-Paul Kogelman",
                "Gareth Williams",
                "Alice Larson",
                "Gavin Andresen",
                "Jameson Lopp",
                "Robert Learney",
                "Cory Fields",
                "Eric Lombrozo",
                "Slurms MacKenzie",
                "Alex Morcos",
                "Edmund Edgar",
                "Pieter Wuille"
            ],
            "messages_count": 79,
            "total_messages_chars_count": 193011
        }
    },
    {
        "title": "[bitcoin-dev]  Bitcoin, Perceptions, and Expectations",
        "thread_messages": [
            {
                "author": "Raystonn .",
                "date": "2015-07-24T02:12:26",
                "message_text_only": "There is now a pull request to remove mention of \"zero or low fees\", \"fast \ninternational payments\", and \"instant peer-to-peer transactions\" from \nbitcoin.org.  For those non-technical users who do not read source code, \nthis may come across as the breaking of the social contract on what Bitcoin \nis ultimately intended to be.  It looks like we already have a Reddit post \non the subject as well.\n\nRaystonn"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin, Perceptions, and Expectations",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Raystonn ."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 407
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin, Perceptions, and Expectations",
        "thread_messages": [
            {
                "author": "Jonas Schnelli",
                "date": "2015-07-24T08:48:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n> There is now a pull request to remove mention of \"zero or low\n> fees\", \"fast international payments\", and \"instant peer-to-peer\n> transactions\" from bitcoin.org.  For those non-technical users who\n> do not read source code, this may come across as the breaking of\n> the social contract on what Bitcoin is ultimately intended to be.\n> It looks like we already have a Reddit post on the subject as\n> well.\n\nThis PR makes absolutely sense.\nA documentation or description should reflect how a system works NOW.\nNot how it *was working and how it *might work once.\n\nThe concept of free transaction just doens't really work well with the\ncurrent system and advertising bitcoin with \"free transaction\" is\nmissleading.\n\n/jonas\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAEBAgAGBQJVsfvOAAoJECnUvLZBb1PseawP/1KrqKw5IGKUHmTf1E+oOLmq\nnD7c1JekBGrJc7Lk0PfKZqS21aQZIt145DnFPv//u/C43x3zt7QSggMNSVYJmI85\nAnrTRRP18TBGDm9CwVFjTbZ4tY/sRoDX9XMDBtlGDdAABX47C493PEI9pXZ5pRc7\ncuLsSTKNqQdJgl3vUydfwddgaaVKPWN+zO72lZVo/edrUwzpjqjO3tu/+36ytto7\nEbm/vxOT+afrcFfAt3ZwuSwx7uiVoqsVRAwV1LWobod2wejpkUxf7Qkb1XRraSEV\nm2opX6UAmPc3emKP+nT2ufDUM3z8YnW1WgjGB6UDXcCge+X5B7aXICI+qOzVR5Ck\ndjf4XMY9gXku26K72zk27XxmutajAYzsFvFbhm+HYa1q9yKRvDg8A9hYZ/6sKPQD\ns6Hn3jou75YVz0mLpAKP7hkP7AmzOkS2gq/M/6SL3Fq+B3mObRMhpMgcpebzT2Oq\np7vLuh5OejcBX7VasVeodAEh9BkTJH9ll72QaJ63C4AjZ1Si87CnijIf8ACmmSxQ\nwImwWs7aH0/x8xwxrpZzvVTf0/4hrPu5St6IMhz0DZlEaKJ/Rg6gI2/UKy/jma6u\n6uVEGBft4eJH+zQN1Ddral5d56P3DSW7ClLLjiMXx1NpB2U1XAWDXNybqYIrSlvX\nej0qto4XVj20K3JS3CMl\n=e71j\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-24T09:42:53",
                "message_text_only": "Well, I think \"fast international transactions\" is still true. An hour is\npretty fast when you compare it with several days. But yeah, \"free\" and\n\"instant\" are misleading words.\nLow fees may be ok. One thing that is not mentioned often is that the fact\nthat the system is p2p is what makes transactions irreversible (otherwise a\ncourt order can tell any centralized server to cancel any transaction).\nIrreversible transactions don't need proportional fees, because there's\nnothing being ensured and the amount being moved is irrelevant. So even if\nwe have a future with 5 usd fees, that's still a very low fee for moving,\nsay 1 M usd worth of btc. So I'm not opposed to talking about low fees,\njust not free and not instant (although lightning can actually provide free\nand instant transactions).\nOn Jul 24, 2015 10:48 AM, \"Jonas Schnelli via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n>\n> > There is now a pull request to remove mention of \"zero or low\n> > fees\", \"fast international payments\", and \"instant peer-to-peer\n> > transactions\" from bitcoin.org.  For those non-technical users who\n> > do not read source code, this may come across as the breaking of\n> > the social contract on what Bitcoin is ultimately intended to be.\n> > It looks like we already have a Reddit post on the subject as\n> > well.\n>\n> This PR makes absolutely sense.\n> A documentation or description should reflect how a system works NOW.\n> Not how it *was working and how it *might work once.\n>\n> The concept of free transaction just doens't really work well with the\n> current system and advertising bitcoin with \"free transaction\" is\n> missleading.\n>\n> /jonas\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1\n>\n> iQIcBAEBAgAGBQJVsfvOAAoJECnUvLZBb1PseawP/1KrqKw5IGKUHmTf1E+oOLmq\n> nD7c1JekBGrJc7Lk0PfKZqS21aQZIt145DnFPv//u/C43x3zt7QSggMNSVYJmI85\n> AnrTRRP18TBGDm9CwVFjTbZ4tY/sRoDX9XMDBtlGDdAABX47C493PEI9pXZ5pRc7\n> cuLsSTKNqQdJgl3vUydfwddgaaVKPWN+zO72lZVo/edrUwzpjqjO3tu/+36ytto7\n> Ebm/vxOT+afrcFfAt3ZwuSwx7uiVoqsVRAwV1LWobod2wejpkUxf7Qkb1XRraSEV\n> m2opX6UAmPc3emKP+nT2ufDUM3z8YnW1WgjGB6UDXcCge+X5B7aXICI+qOzVR5Ck\n> djf4XMY9gXku26K72zk27XxmutajAYzsFvFbhm+HYa1q9yKRvDg8A9hYZ/6sKPQD\n> s6Hn3jou75YVz0mLpAKP7hkP7AmzOkS2gq/M/6SL3Fq+B3mObRMhpMgcpebzT2Oq\n> p7vLuh5OejcBX7VasVeodAEh9BkTJH9ll72QaJ63C4AjZ1Si87CnijIf8ACmmSxQ\n> wImwWs7aH0/x8xwxrpZzvVTf0/4hrPu5St6IMhz0DZlEaKJ/Rg6gI2/UKy/jma6u\n> 6uVEGBft4eJH+zQN1Ddral5d56P3DSW7ClLLjiMXx1NpB2U1XAWDXNybqYIrSlvX\n> ej0qto4XVj20K3JS3CMl\n> =e71j\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/5856bbe6/attachment-0001.html>"
            },
            {
                "author": "Vincent Truong",
                "date": "2015-07-24T14:37:15",
                "message_text_only": "\"Fast transactions\"\nFast transactions implies it is slower than Visa, and Visa is 'instant' by\ncomparison from the spender's POV. Bitcoin is still very instant because\nwallets still send notifications/pings when transactions are first seen,\nnot when it goes into a block. We shouldn't mislead people into thinking a\ntransaction literally takes 10 minutes to travel the globe.\n\nMaybe this feels like PR speak. But being too humble about Bitcoin's\nattributes isn't a good idea either.\n\nIf we're going to look at perception, image and expectations, perhaps we\ncan start to look at redefining some terminology too. Like confirmations,\nwhich is an arbitrary concept. Where possible we should describe it with\nfinance terminology.\n\n\"0 conf transaction\"\n0 conf is the 'transaction' - just the act of making an exchange. It\ndoesn't imply safe and I believe using the word 'settle' in place of\nconfirmations will automatically click with merchants.\n\n\"1st conf\"\nA 'confirmation' is a 'settlement'. If it is 'settled', it implies final\n(except by court order), whereas confirmation usually means 'ah, I've seen\nit come through'. I rarely hear any sales clerk call credit card\ntransactions confirmed. More often you will hear 'approved' instead.\nAlthough 1st conf can be overtaken, so...\n\n\"n confirmations\"\nThis term can probably stay since I can't come up with a better word.\nSettlements only happen once, putting a number next to it breaks the\nmeaning of the word. \"Settled with 4 confirmations\" seems pretty clear.\nAlternatively I think instead of displaying a meaningless number we ought\nto go by a percentage (the double spend improbability) and go by\n'confidence'. \"Settled with 92% confidence.\" Or we can pick an arbitrary\nnumber like 6 and use 'settling...' and 'settled' when reached.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150725/77062ad2/attachment.html>"
            },
            {
                "author": "gb",
                "date": "2015-07-25T02:18:11",
                "message_text_only": "Validated - (seen on network) \n\nSettled/Cleared - 1 conf\n\nFinalised - 6 confs\n\nOn Sat, 2015-07-25 at 00:37 +1000, Vincent Truong via bitcoin-dev wrote:\n> \n> \"Fast transactions\"\n> Fast transactions implies it is slower than Visa, and Visa is\n> 'instant' by comparison from the spender's POV. Bitcoin is still very\n> instant because wallets still send notifications/pings when\n> transactions are first seen, not when it goes into a block. We\n> shouldn't mislead people into thinking a transaction literally takes\n> 10 minutes to travel the globe.\n> \n> Maybe this feels like PR speak. But being too humble about Bitcoin's\n> attributes isn't a good idea either.\n> \n> If we're going to look at perception, image and expectations, perhaps\n> we can start to look at redefining some terminology too. Like\n> confirmations, which is an arbitrary concept. Where possible we should\n> describe it with finance terminology.\n> \n> \"0 conf transaction\"\n> 0 conf is the 'transaction' - just the act of making an exchange. It\n> doesn't imply safe and I believe using the word 'settle' in place of\n> confirmations will automatically click with merchants.\n> \n> \"1st conf\"\n> A 'confirmation' is a 'settlement'. If it is 'settled', it implies\n> final (except by court order), whereas confirmation usually means 'ah,\n> I've seen it come through'. I rarely hear any sales clerk call credit\n> card transactions confirmed. More often you will hear 'approved'\n> instead. Although 1st conf can be overtaken, so...\n> \n> \"n confirmations\"\n> This term can probably stay since I can't come up with a better word.\n> Settlements only happen once, putting a number next to it breaks the\n> meaning of the word. \"Settled with 4 confirmations\" seems pretty\n> clear. Alternatively I think instead of displaying a meaningless\n> number we ought to go by a percentage (the double spend improbability)\n> and go by 'confidence'. \"Settled with 92% confidence.\" Or we can pick\n> an arbitrary number like 6 and use 'settling...' and 'settled' when\n> reached.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-25T11:22:24",
                "message_text_only": "How do you explain to end users that a \"validated\" transaction can instantly become completely unspendable by a mined block? This seems like setting up people to just be Finney attacked even more.\n\n\n> Sent: Saturday, July 25, 2015 at 4:18 AM\n> From: \"gb via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: \"Vincent Truong\" <vincent.truong at procabiak.com>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Bitcoin, Perceptions, and Expectations\n>\n> \n> Validated - (seen on network) \n> \n> Settled/Cleared - 1 conf\n> \n> Finalised - 6 confs\n>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-07-25T15:04:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nFWIW, the 6 confirmations figure came from a modest estimate of a miner\nwith 10% of the hash rate, such that there is < 0.1% probability of the\ntransaction being undone.\n\nI wonder at times if this figure should fluctuate with the hashrate of\nthe largest player. Presently, AntMiner has 20% of the hashrate,\nrequiring 11 blocks to give you the same certainty. And previously when\nGHash.io had 45%, the number of blocks to wait would be 340 - over two days!\n\nWith this in mind, I would be wary about publishing these numbers as\nthey are prone to change.\n\nOn 25/07/15 03:18, gb via bitcoin-dev wrote:\n>\n> Validated - (seen on network)\n>\n> Settled/Cleared - 1 conf\n>\n> Finalised - 6 confs\n>\n> On Sat, 2015-07-25 at 00:37 +1000, Vincent Truong via bitcoin-dev wrote:\n>>\n>> \"Fast transactions\"\n>> Fast transactions implies it is slower than Visa, and Visa is\n>> 'instant' by comparison from the spender's POV. Bitcoin is still very\n>> instant because wallets still send notifications/pings when\n>> transactions are first seen, not when it goes into a block. We\n>> shouldn't mislead people into thinking a transaction literally takes\n>> 10 minutes to travel the globe.\n>>\n>> Maybe this feels like PR speak. But being too humble about Bitcoin's\n>> attributes isn't a good idea either.\n>>\n>> If we're going to look at perception, image and expectations, perhaps\n>> we can start to look at redefining some terminology too. Like\n>> confirmations, which is an arbitrary concept. Where possible we should\n>> describe it with finance terminology.\n>>\n>> \"0 conf transaction\"\n>> 0 conf is the 'transaction' - just the act of making an exchange. It\n>> doesn't imply safe and I believe using the word 'settle' in place of\n>> confirmations will automatically click with merchants.\n>>\n>> \"1st conf\"\n>> A 'confirmation' is a 'settlement'. If it is 'settled', it implies\n>> final (except by court order), whereas confirmation usually means 'ah,\n>> I've seen it come through'. I rarely hear any sales clerk call credit\n>> card transactions confirmed. More often you will hear 'approved'\n>> instead. Although 1st conf can be overtaken, so...\n>>\n>> \"n confirmations\"\n>> This term can probably stay since I can't come up with a better word.\n>> Settlements only happen once, putting a number next to it breaks the\n>> meaning of the word. \"Settled with 4 confirmations\" seems pretty\n>> clear. Alternatively I think instead of displaying a meaningless\n>> number we ought to go by a percentage (the double spend improbability)\n>> and go by 'confidence'. \"Settled with 92% confidence.\" Or we can pick\n>> an arbitrary number like 6 and use 'settling...' and 'settled' when\n>> reached.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n- -- \nMy PGP key can be found here <https://thomaskerin.io/me.pub.asc>\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCgAGBQJVs6WBAAoJEAiDZR291eTlmA4P/1uARaRISbq6ZN9gSy+Tsq+N\naooU/irB06IdTnOrxqW/iAS2M2SxqTq5/M6PVMK6LAefRuAAYE6KeDQb5/n2QWIM\nvBgVeDPBVkq+KHOJlaswO962kl/Mr9TC9xb9hbfB9IdQACLbSwfyQ+cYNY3RRnvl\nJkgj7boVjA4o/lE/BxTshPTriQNtVl9c6OxOfXsZotpTphSlMGIUrEHR/t2rjbcV\nyPeTwHFIAaqcCMivYvfsk24JD9DiygwGVvjqwQPsNF8H9y6xor+QAc23aaD8WPi1\n1J91bfRxJWghxyGmsPx1G/EVi/0retE1tZdkyqlahThdSACZtUfA997V0KT/DrdH\nsvHjNclViHExWGL7cUd2s9AMjIz1vr0tUGxvU7KsZT2kEXP0qp96mjIfo0TkZbUb\nxsYMKujE8ZRpn8+CakfeT7RMtAhGIRvtPDQDm+Qv84A6JOufrgF4C0B00/9kERIe\ng5hH2YG2R4YD40G4wtxEGpk/2jcdWc37CJ+T17+7m8MgPFNmX8V5YsAFwfPe6iAt\n1QON3crilFRYCawYcOypbjh4hb5O5Usvg0msUrvzaRJ7Gj6K/SmFdG4hOepCHbPc\ng2Bu15ifdmaCa8ssZHK+HJmhbGTMkDqdBnv2lziR8TXIC/se2+y7Iasz4eVkfG1/\nRkDgokFOv7YA5aqp5ZHn\n=VgWS\n-----END PGP SIGNATURE-----\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150725/efb395b9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin, Perceptions, and Expectations",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Slurms MacKenzie",
                "Thomas Kerin",
                "gb",
                "Jorge Tim\u00f3n",
                "Vincent Truong",
                "Jonas Schnelli"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 13426
        }
    },
    {
        "title": "[bitcoin-dev] BIP: Short Term Use Addresses for Scalability",
        "thread_messages": [
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-22T20:15:09",
                "message_text_only": "While we're all debating the block size, please review this proposal to\nmodestly increase the number of transactions per block.\n\nhttps://gist.github.com/JeremyRubin/4d17d28d5c681a93fa63\n\nBest,\n\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/79674044/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-22T20:34:27",
                "message_text_only": "Rather than re-enable OP_LEFT, a NOP could be re-purposed in a soft fork.\n\nOP_DUP OP_HASH160 [pubKeyHash[:LEN_PARAM]] [LEN_PARAM] OP_LEFTEQUALVERIFY\nOP_DROP OP_CHECKSIG\n\nA B L OP_LEFTEQUALVERIFY checks if the leftmost L bytes of A and B match.\nIf not, then the script immediately fails.  If either array is less than L\nbytes or if there are fewer than 3 values on the stack, then it also fails.\n\nThe OP_DROP is needed as the new opcode must count as a NOP for legacy\nnodes.\n\nA change like this would only cause a once-off improvement in efficiency,\nso it is less likely to be worth the effort.\n\nIt also requires most clients to be updated to support the new address\nsystem.\n\nA different BIP could be added for that.\n\nAn alternative way to add new opcodes is to use a different script engine\nlike with P2SH.\n\n\nOn Wed, Jul 22, 2015 at 9:15 PM, Jeremy Rubin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> While we're all debating the block size, please review this proposal to\n> modestly increase the number of transactions per block.\n>\n> https://gist.github.com/JeremyRubin/4d17d28d5c681a93fa63\n>\n> Best,\n>\n> Jeremy\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/f9295b82/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-22T21:06:02",
                "message_text_only": "On Wed, Jul 22, 2015 at 4:34 PM, Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> It also requires most clients to be updated to support the new address\n> system.\n\n\nThat's the killer: introducing Yet Another Type of Bitcoin Address takes a\nvery long time and requires a lot of people to change their code. At least,\nthat was the lesson learned when we introduced P2SH addresses.\n\nI think it's just not worth it for a very modest space savings (10 bytes,\nwhen scriptSig+scriptPubKey is about 120 bytes), especially with the\nextreme decrease in security (going from 2^160 to 2^80 to brute-force).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150722/39f4e2ee/attachment.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-23T04:05:22",
                "message_text_only": "I think the catch here is that under STUA (short term use address) there is\na strict incentive, you can reduce the transaction fee for these txns. This\nalso fits with the general model that you pay the miners for security. My\nbelief is that when there is a savings benefit to be had large players will\nprefer it at a minimum, and users will desire it.\n\n\nYour analysis of saving is inaccurate, it comes to be at or greater than 20\nbytes because there is typically 2 UTXOs or more. I get that this is still\nmarginal, but when the margins are tight this is a pretty decent gain.\n\n\nThe security decrease is actually less extreme than it seems. This is for\nmultiple reasons:\n1) you can select LEN_PARAM when you make the tx to be secure at that time\nAdding a byte or two gets much more security while still keeping it lean.\n2) For a small transaction, the hash power is less rewarding than just\nworking on the blockchain or doing something else\n3) These addresses are only for use for short term, not perm storage. As\nsuch, if you model the threat it isn't great (I'm using this address for\none day, someone grinds it in that time).\n4) Because it is a UTXO saving, it reduces memory bloat.t\n\nIt would be interesting to get a more exact analysis on the time needed to\nrun a brute force as it involves computing a valid keypair and hashing for\neach attempt.\n\n\n\nOn Thu, Jul 23, 2015 at 5:06 AM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Jul 22, 2015 at 4:34 PM, Tier Nolan via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> It also requires most clients to be updated to support the new address\n>> system.\n>\n>\n> That's the killer: introducing Yet Another Type of Bitcoin Address takes a\n> very long time and requires a lot of people to change their code. At least,\n> that was the lesson learned when we introduced P2SH addresses.\n>\n> I think it's just not worth it for a very modest space savings (10 bytes,\n> when scriptSig+scriptPubKey is about 120 bytes), especially with the\n> extreme decrease in security (going from 2^160 to 2^80 to brute-force).\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/e0168550/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-23T04:55:46",
                "message_text_only": "Quoting Gavin Andresen via bitcoin-dev  \n<bitcoin-dev at lists.linuxfoundation.org>:\n\n> On Wed, Jul 22, 2015 at 4:34 PM, Tier Nolan via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> It also requires most clients to be updated to support the new address\n>> system.\n>\n>\n> That's the killer: introducing Yet Another Type of Bitcoin Address takes a\n> very long time and requires a lot of people to change their code. At least,\n> that was the lesson learned when we introduced P2SH addresses.\n>\n> I think it's just not worth it for a very modest space savings (10 bytes,\n> when scriptSig+scriptPubKey is about 120 bytes), especially with the\n> extreme decrease in security (going from 2^160 to 2^80 to brute-force).\n>\n> --\n> --\n> Gavin Andresen\n\nI think it would only save ~5% with all overhead (value, sequence,  \nlocktime, version, etc.) counted\n\nA better way is to introduce shorter ECDSA keys, which will save a lot  \nof space for public key and signature. It is safe as long as the  \noutput value is much lower than the cost of attack.\n\nIf this happens, I think it will be part of the OP_MAST which will  \nrequire a new address type anyway."
            },
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-23T06:05:12",
                "message_text_only": "A standard transaction is 225 bytes, leading to a savings of 8.6%.\n\nHowever, that is essentially the minimum saving. For other sizes (eg, 10\noutputs) which seem to be pretty frequent savings can be greater.\n\nFurthermore, it is important to note that this is a memory saving for the\nUTXO pool so the reduction there is more (not super familiar with how the\nUTXO pool is stored, but it should be a better savings than 8.6%).\n\n\nDoes anyone have the tools currently to be able to easily run through the\nchain and analyze the impact of this change on historical data more\ndirectly?\n\nOn Thu, Jul 23, 2015 at 12:55 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Quoting Gavin Andresen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>  On Wed, Jul 22, 2015 at 4:34 PM, Tier Nolan via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>  It also requires most clients to be updated to support the new address\n>>> system.\n>>>\n>>\n>>\n>> That's the killer: introducing Yet Another Type of Bitcoin Address takes a\n>> very long time and requires a lot of people to change their code. At\n>> least,\n>> that was the lesson learned when we introduced P2SH addresses.\n>>\n>> I think it's just not worth it for a very modest space savings (10 bytes,\n>> when scriptSig+scriptPubKey is about 120 bytes), especially with the\n>> extreme decrease in security (going from 2^160 to 2^80 to brute-force).\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>\n> I think it would only save ~5% with all overhead (value, sequence,\n> locktime, version, etc.) counted\n>\n> A better way is to introduce shorter ECDSA keys, which will save a lot of\n> space for public key and signature. It is safe as long as the output value\n> is much lower than the cost of attack.\n>\n> If this happens, I think it will be part of the OP_MAST which will require\n> a new address type anyway.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/56642c15/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP: Short Term Use Addresses for Scalability",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk",
                "Tier Nolan",
                "Jeremy Rubin",
                "Gavin Andresen"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 8684
        }
    },
    {
        "title": "[bitcoin-dev] Process for BIP number allocation",
        "thread_messages": [
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-07-23T10:21:55",
                "message_text_only": "Hi all\n\nI suggest that we add to the \"BIP Editor Responsibilities & Workflow\"\nsection of BIP0001 that if the BIP editor for some reason won't handle\nthe BIP within a week, he/she should notify the author within that\nsame week with an estimate on when it will be handled.\n\nMaybe we could extend it to two weeks instead, the important thing is\nthat the author knows what to expect.\n\nI'm trying to get BIP numbers allocated for Proof of Payment. I have\nrequested it from the BIP editor Gregory Maxwell with CC this list. I\nalso emailed Gregory in private about it. So far I have not seen any\nreaction to my requests.\n\nThere are a number of BIP proposals floating arount right now, I don't\nknow the exact status of them all, but this is roughly how it looks\nfor some of them:\n\nDate of request, bip#, Author, Title\njuly 4, -, Gregory Maxwell, Invalid Block Fork Postmortem\njune 29, -, Peter Todd, Full Replace-by-Fee Deployment Schedule\njune 22, 101, Gavin Andresen, Increase Maximum Block Size\njune 17, 68, Mark Friedenbach, Consensus-enforced transaction\nreplacement signalled via sequence numbers\njune 6, -,Kalle Rosenbaum, Proof of Payment\njune 6, -,Kalle Rosenbaum, Proof of Payment URI scheme\njune 6, 69?, Kristov Atlas, Lexicographical Indexing of Transaction\nInputs and Outputs\n\nI think that the de facto process for BIP allocation and inclusion in\nthe bips repository is unclear. When a number is requested, the author\nshould at least get a reply from the bip editor that the request is\nseen by him/her. Also, if the editor disapproves on the BIP for some\nreason, the author must be notified somehow within reasonable and\npredictable time.\n\nRegards,\nKalle"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-23T19:29:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 23 July 2015 06:21:55 GMT-04:00, Kalle Rosenbaum via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hi all\n>\n>I suggest that we add to the \"BIP Editor Responsibilities & Workflow\"\n>section of BIP0001 that if the BIP editor for some reason won't handle\n>the BIP within a week, he/she should notify the author within that\n>same week with an estimate on when it will be handled.\n>\n>Maybe we could extend it to two weeks instead, the important thing is\n>that the author knows what to expect.\n>\n>I'm trying to get BIP numbers allocated for Proof of Payment. I have\n>requested it from the BIP editor Gregory Maxwell with CC this list. I\n>also emailed Gregory in private about it. So far I have not seen any\n>reaction to my requests.\n\nTo be clear, where is an implementation of your proposed BIP?\n\nThe philosophy of the process - particularly for non-consensus BIPs - is running code, preferably in production. An actual number for the standard that code implements isn't a barrier to that process.\n\nRemember that it's convenient for all if the number of BIPs out there isn't significantly higher than the number of actual standards in place that are being used.\n\n\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsUBy\nAAoJEMCF8hzn9Lnc47AIAI11FdNBCFr9TybCvxKS32Idk4aZ4fveJ6ucHZx1PWPl\nlzoz/CJBZGolWF9jWnpyiCnNxl64MjflNxi62ZD+VS4SEl0uHcYXdqXsNQzk9OoK\nbZFXHJ57jZlHCwpwiLM72EWN6AZG/XZZFXisNRAvoYqryHdb5dDmVok0wPH87qOH\nPBTlspyaKH4/OFDpslCdoDTLHcMxlasiyqNdC5NxC7eB1WpEtyGbOd1twvNeNH00\n1opJNuajiUm1vJEhMS67a9DhfnYf9/3TDRtkc0lrYfF3r1n2aVtyzlPcJANX/cWa\n7L9HtC4WpVLqny0AiTs5dK6DxPIUy/u2Q9yFZ2oL6dM=\n=RW4h\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-07-23T21:36:45",
                "message_text_only": "A PoP-enabled fork of Mycelium is available at\nhttps://github.com/kallerosenbaum/wallet and the server (validating\ncode) is available at https://github.com/kallerosenbaum/poppoc/\n\nThere's also a demo site using the server code at\nhttp://www.rosenbaum.se:8080/ and a demo video at\nhttps://www.youtube.com/watch?v=euzZcoCilhc\n\nMycelium Binaries are also available on the demo site.\n\nRegards,\nKalle\n\n2015-07-23 21:29 GMT+02:00, Peter Todd <pete at petertodd.org>:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 23 July 2015 06:21:55 GMT-04:00, Kalle Rosenbaum via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>Hi all\n>>\n>>I suggest that we add to the \"BIP Editor Responsibilities & Workflow\"\n>>section of BIP0001 that if the BIP editor for some reason won't handle\n>>the BIP within a week, he/she should notify the author within that\n>>same week with an estimate on when it will be handled.\n>>\n>>Maybe we could extend it to two weeks instead, the important thing is\n>>that the author knows what to expect.\n>>\n>>I'm trying to get BIP numbers allocated for Proof of Payment. I have\n>>requested it from the BIP editor Gregory Maxwell with CC this list. I\n>>also emailed Gregory in private about it. So far I have not seen any\n>>reaction to my requests.\n>\n> To be clear, where is an implementation of your proposed BIP?\n>\n> The philosophy of the process - particularly for non-consensus BIPs - is\n> running code, preferably in production. An actual number for the standard\n> that code implements isn't a barrier to that process.\n>\n> Remember that it's convenient for all if the number of BIPs out there isn't\n> significantly higher than the number of actual standards in place that are\n> being used.\n>\n>\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsUBy\n> AAoJEMCF8hzn9Lnc47AIAI11FdNBCFr9TybCvxKS32Idk4aZ4fveJ6ucHZx1PWPl\n> lzoz/CJBZGolWF9jWnpyiCnNxl64MjflNxi62ZD+VS4SEl0uHcYXdqXsNQzk9OoK\n> bZFXHJ57jZlHCwpwiLM72EWN6AZG/XZZFXisNRAvoYqryHdb5dDmVok0wPH87qOH\n> PBTlspyaKH4/OFDpslCdoDTLHcMxlasiyqNdC5NxC7eB1WpEtyGbOd1twvNeNH00\n> 1opJNuajiUm1vJEhMS67a9DhfnYf9/3TDRtkc0lrYfF3r1n2aVtyzlPcJANX/cWa\n> 7L9HtC4WpVLqny0AiTs5dK6DxPIUy/u2Q9yFZ2oL6dM=\n> =RW4h\n> -----END PGP SIGNATURE-----\n>\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-24T02:26:13",
                "message_text_only": "On Thu, Jul 23, 2015 at 11:36:45PM +0200, Kalle Rosenbaum wrote:\n> A PoP-enabled fork of Mycelium is available at\n> https://github.com/kallerosenbaum/wallet and the server (validating\n> code) is available at https://github.com/kallerosenbaum/poppoc/\n> \n> There's also a demo site using the server code at\n> http://www.rosenbaum.se:8080/ and a demo video at\n> https://www.youtube.com/watch?v=euzZcoCilhc\n> \n> Mycelium Binaries are also available on the demo site.\n\nGood!\n\nNow get people to actually use this and get back to us.\n\nRemember that once there's actual adoption, BIP #'s will and have been\nassigned even for standards that are dangerous and badly designed; the\nbarrier for non-consensus-stuff is the desire to avoid assigning a bunch\nof numbers for things that never get used.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000402fe6fb9ad613c93e12bddfc6ec02a2bd92f002050594d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/e8ec7645/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Process for BIP number allocation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Kalle Rosenbaum",
                "Peter Todd"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6802
        }
    },
    {
        "title": "[bitcoin-dev] [Bitcoin-development] [BIP draft] Motivation and deployment of consensus rules changes ([soft/hard]forks)",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T11:10:45",
                "message_text_only": "Discussions about whether to get miner's confirmation on\nuncontroversial hardforks or not, and about whether to use nHeight,\nnMedianTime or just use nTime are spreading all around. Hopefully\ngetting a BIP number (even though this is still a draft) will help\nconcentrating discussions about deployment of uncontroversial\nhardforks to a single place.\nGreg, can I get a BIP number for this?\n\nOn Sun, Jun 21, 2015 at 12:54 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> On Sun, Jun 21, 2015 at 11:31 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>\n>> You mean the timewarp fix can be coded as a softfork instead of a\n>> hardfork? How so?\n>\n>\n> The easiest would be a rule requiring that all blocks are within 1 day of\n> the median of the previous 11 blocks.  At the moment, you need to be greater\n> than that value.  This would add a condition at the other end.\n>\n> It wouldn't be a total fix, but it would protect against the exploit.\n>\n> A stricter soft fork would be that the two blocks in question have to have\n> the same timestamp.  This would force the off by 1 and the correct value to\n> give the same result.\n>\n>> If that's the case, do you have a better candidate?\n>\n>\n> I think it is fine, since fixing it \"right\" does require a hard fork,\n> especially if it is only to show a non controversial hard fork.\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-07-31T17:40:59",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nI really think there should be a document before a BIP number is assigned.\n\n\nOn 23/07/15 12:10, Jorge Tim\u00f3n via bitcoin-dev wrote:\n> Discussions about whether to get miner's confirmation on\n> uncontroversial hardforks or not, and about whether to use nHeight,\n> nMedianTime or just use nTime are spreading all around. Hopefully\n> getting a BIP number (even though this is still a draft) will help\n> concentrating discussions about deployment of uncontroversial\n> hardforks to a single place.\n> Greg, can I get a BIP number for this?\n>\n> On Sun, Jun 21, 2015 at 12:54 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>> On Sun, Jun 21, 2015 at 11:31 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>>\n>>> You mean the timewarp fix can be coded as a softfork instead of a\n>>> hardfork? How so?\n>>\n>>\n>> The easiest would be a rule requiring that all blocks are within 1 day of\n>> the median of the previous 11 blocks.  At the moment, you need to be\ngreater\n>> than that value.  This would add a condition at the other end.\n>>\n>> It wouldn't be a total fix, but it would protect against the exploit.\n>>\n>> A stricter soft fork would be that the two blocks in question have to\nhave\n>> the same timestamp.  This would force the off by 1 and the correct\nvalue to\n>> give the same result.\n>>\n>>> If that's the case, do you have a better candidate?\n>>\n>>\n>> I think it is fine, since fixing it \"right\" does require a hard fork,\n>> especially if it is only to show a non controversial hard fork.\n>>\n>>\n------------------------------------------------------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n- -- \nMy PGP key can be found here: <https://thomaskerin.io/me.pub.asc>\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCgAGBQJVu7MlAAoJEAiDZR291eTlGnkP/jG/oW2PfPwDt6t+1UJ7P1LO\n/NDtpUI5wiPQ6aXBmqKSx7FxZ9QJQM1tB1SpGhFosOXXSiYLjNos0l0S6oRw7yGC\nLzXmbNTL863F0vOfRU35yxQJbcUi6gOHk8E/oo2X/V+BgAoc4cweK4080C8k1vki\n7kPPiSek4erMo7TVNb5vsHkOI6QXhKNV/lFuSOuRAwklRY5vL2BZi56HekOnoFdr\niHebmRrjL7R+IFzasnWtHh6KGs51tg02SOPTMXwJ/H+xDqN9LXk/DJUbp9QhEa+t\nTwojQBj7D+HMWavaLRVjVQOcvxxm3PTwZHmHxzfrx3kG5nsZNWrebWElHikW8BuW\ndg6Yq/6mIW59HPyNSc5HCBnNonKpZebsQU0rdzOcwWFdk0SZ1TuKrYjNu9uDVGpo\nod21hIpGYa1FTxk1HQ63PMf5SKmLunvHOehWw8pmXy44k3WVkABAhi7YNIbA8Qvj\nDJ+k9wtypDBraoQh1yur4r1cBbBVcbaxRwv42MBGhtTXPVzRu6CikJNwa65z1AqT\nAM3av8+IIgiq9dYn1uzDh1BQGSsB5YYQZ3QDHpM1DxCvjXvmgf4RdFwC0Q0B0X3S\njnWebazQvxN9qsylHAJeTZ0+rJCsx+R3Fl2Myasz/c3a6uaYJVi9/N0j3yRm1EYt\n3Py8BGrArkIe3CeXaTCV\n=Yh0o\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T20:37:43",
                "message_text_only": "On Fri, Jul 31, 2015 at 7:40 PM, Thomas Kerin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I really think there should be a document before a BIP number is assigned.\n\nThere was a document from the start, but after I got the BIP number, I\nwas renaming the file, moving from org-mode to mediawiki and getting\nthe code ready.\nI'm sorry, I broke the old link to the document, here's the new one:\nhttps://github.com/jtimon/bips/blob/bip-forks/bip-0099.mediawiki\n\nMaybe I should create a PR already to have a permanent link, I don't know.\nAs said in the document, the code is now here:\nhttps://github.com/bitcoin/bitcoin/compare/0.11...jtimon:hardfork-timewarp-0.11\n\nAlso, I should mention that one particular discussion related to this\nBIP (whether we should use Block.nTime, median time or block.nHeight\nfor the activation thresholds) is being discussed in:\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n\nThe BIP is currently assuming that the preferred choice for all\nnon-emergency uncontroversial hardforks is defining a starting\nblock.nHeight after which miners start confirming their upgrade. Once\nthe 95% threshold is reached the hardfork takes effect.\nLong after that, after that first block enforcing the new rules is\ndeeply buried, that check can simply replaced by re-defining the\nthreshold height not with the height when miners started voting, but\nsimply with the height in which the rules started being enforced for\nthe first time (see https://github.com/bitcoin/bitcoin/pull/5966/files\n)."
            }
        ],
        "thread_summary": {
            "title": "Motivation and deployment of consensus rules changes (forks)",
            "categories": [
                "bitcoin-dev",
                "Bitcoin-development",
                "BIP draft",
                "soft/hard"
            ],
            "authors": [
                "Thomas Kerin",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6054
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Node Speed Test",
        "thread_messages": [
            {
                "author": "slurms at gmx.us",
                "date": "2015-07-23T14:19:59",
                "message_text_only": "On this day, the Bitcoin network was crawled and reachable nodes surveyed to find their maximum throughput in order to determine if it can safely support a faster block rate. Specifically this is an attempt to prove or disprove the common statement that 1MB blocks were only suitable slower internet connections in 2009 when Bitcoin launched, and that connection speeds have improved to the point of obviously supporting larger blocks.\n\n\nThe testing methodology is as follows:\n\n\u00a0* Nodes were randomly selected from a peers.dat, 5% of the reachable nodes in the network were contacted.\n\n\u00a0* A random selection of blocks was downloaded from each peer.\n\n\u00a0* There is some bias towards higher connection speeds, very slow connections (<30KB/s) timed out in order to run the test at a reasonable rate.\n\n\u00a0* The connecting node was in Amsterdam with a 1GB NIC. \n\n\u00a0\nResults:\n\n * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n\n * 16% of connected nodes uploaded blocks faster than 10MB/s.\n\n * Raw data, one line per connected node, kilobytes per second http://pastebin.com/raw.php?i=6b4NuiVQ\n\n\nThis does not support the theory that the network has the available bandwidth for increased block sizes, as in its current state 37% of nodes would fail to upload a 20MB block to a single peer in under 20 seconds (referencing a number quoted by Gavin). If the bar for suitability is placed at taking only 1% of the block time (6 seconds) to upload one block to one peer, then 69% of the network fails for 20MB blocks. For comparison, only 10% fail this metric for 1MB blocks."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-23T15:04:39",
                "message_text_only": "Ahh, data... a breath of fresh air...\n\nCan you re-analyze for 8MB blocks?  There is no current proposal for 20MB\nblocks.\n\nAlso, most hashing power is now using Matt Corallo's fast block propagation\nnetwork; slow 'block' propagation to merchants/end-users doesn't really\nmatter (as long as it doesn't get anywhere near the 10-minute block time).\n\nOn Thu, Jul 23, 2015 at 10:19 AM, slurms--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On this day, the Bitcoin network was crawled and reachable nodes surveyed\n> to find their maximum throughput in order to determine if it can safely\n> support a faster block rate. Specifically this is an attempt to prove or\n> disprove the common statement that 1MB blocks were only suitable slower\n> internet connections in 2009 when Bitcoin launched, and that connection\n> speeds have improved to the point of obviously supporting larger blocks.\n>\n>\n> The testing methodology is as follows:\n>\n>  * Nodes were randomly selected from a peers.dat, 5% of the reachable\n> nodes in the network were contacted.\n>\n>  * A random selection of blocks was downloaded from each peer.\n>\n>  * There is some bias towards higher connection speeds, very slow\n> connections (<30KB/s) timed out in order to run the test at a reasonable\n> rate.\n>\n>  * The connecting node was in Amsterdam with a 1GB NIC.\n>\n>\n> Results:\n>\n>  * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n>\n>  * 16% of connected nodes uploaded blocks faster than 10MB/s.\n>\n>  * Raw data, one line per connected node, kilobytes per second\n> http://pastebin.com/raw.php?i=6b4NuiVQ\n>\n>\n> This does not support the theory that the network has the available\n> bandwidth for increased block sizes, as in its current state 37% of nodes\n> would fail to upload a 20MB block to a single peer in under 20 seconds\n> (referencing a number quoted by Gavin). If the bar for suitability is\n> placed at taking only 1% of the block time (6 seconds) to upload one block\n> to one peer, then 69% of the network fails for 20MB blocks. For comparison,\n> only 10% fail this metric for 1MB blocks.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/d834f223/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-23T15:55:14",
                "message_text_only": "Are you willing to share the code that you used to run the test?\n\n- Jameson\n\nOn Thu, Jul 23, 2015 at 10:19 AM, slurms--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On this day, the Bitcoin network was crawled and reachable nodes surveyed\n> to find their maximum throughput in order to determine if it can safely\n> support a faster block rate. Specifically this is an attempt to prove or\n> disprove the common statement that 1MB blocks were only suitable slower\n> internet connections in 2009 when Bitcoin launched, and that connection\n> speeds have improved to the point of obviously supporting larger blocks.\n>\n>\n> The testing methodology is as follows:\n>\n>  * Nodes were randomly selected from a peers.dat, 5% of the reachable\n> nodes in the network were contacted.\n>\n>  * A random selection of blocks was downloaded from each peer.\n>\n>  * There is some bias towards higher connection speeds, very slow\n> connections (<30KB/s) timed out in order to run the test at a reasonable\n> rate.\n>\n>  * The connecting node was in Amsterdam with a 1GB NIC.\n>\n>\n> Results:\n>\n>  * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n>\n>  * 16% of connected nodes uploaded blocks faster than 10MB/s.\n>\n>  * Raw data, one line per connected node, kilobytes per second\n> http://pastebin.com/raw.php?i=6b4NuiVQ\n>\n>\n> This does not support the theory that the network has the available\n> bandwidth for increased block sizes, as in its current state 37% of nodes\n> would fail to upload a 20MB block to a single peer in under 20 seconds\n> (referencing a number quoted by Gavin). If the bar for suitability is\n> placed at taking only 1% of the block time (6 seconds) to upload one block\n> to one peer, then 69% of the network fails for 20MB blocks. For comparison,\n> only 10% fail this metric for 1MB blocks.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/312f6262/attachment.html>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-23T17:14:31",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/004e3b9e/attachment.html>"
            },
            {
                "author": "Pindar Wong",
                "date": "2015-07-23T17:41:33",
                "message_text_only": "This looks like the beginnings of some great analysis.\n\nPer Peter's remarks, I think it would be productive to run the test(s) on a\nsimulated network with worst case network failure(s) so that we can\ndetermine the safety margin needed.\n\nI have potential access to h/w resources that would be available for\nrunning such tests at the necessary scales.\n\nCheers,\n\np.\n\n\nOn Fri, Jul 24, 2015 at 1:14 AM, Slurms MacKenzie via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The library used isn't open source, so unfortunately not. It shouldn't be\n> too hard to replicate in python-bitcoinlib or bitcoinj though.\n>\n> *Sent:* Thursday, July 23, 2015 at 6:55 PM\n> *From:* \"Jameson Lopp\" <jameson.lopp at gmail.com>\n> *To:* slurms at gmx.us\n> *Cc:* bitcoin-dev at lists.linuxfoundation.org\n> *Subject:* Re: [bitcoin-dev] Bitcoin Node Speed Test\n>  Are you willing to share the code that you used to run the test?\n>\n> - Jameson\n>\n> On Thu, Jul 23, 2015 at 10:19 AM, slurms--- via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On this day, the Bitcoin network was crawled and reachable nodes surveyed\n>> to find their maximum throughput in order to determine if it can safely\n>> support a faster block rate. Specifically this is an attempt to prove or\n>> disprove the common statement that 1MB blocks were only suitable slower\n>> internet connections in 2009 when Bitcoin launched, and that connection\n>> speeds have improved to the point of obviously supporting larger blocks.\n>>\n>>\n>> The testing methodology is as follows:\n>>\n>>  * Nodes were randomly selected from a peers.dat, 5% of the reachable\n>> nodes in the network were contacted.\n>>\n>>  * A random selection of blocks was downloaded from each peer.\n>>\n>>  * There is some bias towards higher connection speeds, very slow\n>> connections (<30KB/s) timed out in order to run the test at a reasonable\n>> rate.\n>>\n>>  * The connecting node was in Amsterdam with a 1GB NIC.\n>>\n>>\n>> Results:\n>>\n>>  * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n>>\n>>  * 16% of connected nodes uploaded blocks faster than 10MB/s.\n>>\n>>  * Raw data, one line per connected node, kilobytes per second\n>> http://pastebin.com/raw.php?i=6b4NuiVQ\n>>\n>>\n>> This does not support the theory that the network has the available\n>> bandwidth for increased block sizes, as in its current state 37% of nodes\n>> would fail to upload a 20MB block to a single peer in under 20 seconds\n>> (referencing a number quoted by Gavin). If the bar for suitability is\n>> placed at taking only 1% of the block time (6 seconds) to upload one block\n>> to one peer, then 69% of the network fails for 20MB blocks. For comparison,\n>> only 10% fail this metric for 1MB blocks.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/48d9276d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-23T16:05:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 23 July 2015 10:19:59 GMT-04:00, slurms--- via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>This does not support the theory that the network has the available\n>bandwidth for increased block sizes, as in its current state 37% of\n>nodes would fail to upload a 20MB block to a single peer in under 20\n>seconds (referencing a number quoted by Gavin). If the bar for\n>suitability is placed at taking only 1% of the block time (6 seconds)\n>to upload one block to one peer, then 69% of the network fails for 20MB\n>blocks. For comparison, only 10% fail this metric for 1MB blocks.\n\nNote how due to bandwidth being generally asymetric your findings are probably optimistic - you've measured download capacity. On top of that upload is further reduced by the fact that multiple peers at once need to be sent blocks for reliability.\n\nSecondly you're measuring a network that isn't under attack - we need significant additional margin to resist attack as performance is consensus-critical.\n\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsRCj\nAAoJEMCF8hzn9Lnc47AIAIQbznavjd2Rbqxeq5a3GLqeYoI4BZIQYqfWky+6OQtq\nyGRKaqPtGuES5y9L0k7efivT385mOl87PWnWMy61xxZ9FJgoS+YHkEx8K4tfgfA2\nyLOKzeFSar2ROCcjHYyPWa2XXjRbNmiLzfNuQyIBArg/Ch9//iXUUM+GG0mChF5k\nnUxLstXgXDNh5H8xkHeLi4lEbt9HFiwcZnT1Tzeo2dvVTujrtyNb/zEhNZScMXDc\nUOlT8rBLxzHlytKdXt1GNKIq0feTRJNbreBh7/EB4nYTT54CItaaVXul0LdHd5/2\nkgKtdbUdeyaRUKrKcvxiuIwclyoOuRQp0DZThsB262o=\n=tBUM\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-07-23T19:56:36",
                "message_text_only": "He measured the upload capacity of the peers by downloading from them, or\nam I being dumb? :)\n\n\n2015-07-23 18:05 GMT+02:00 Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 23 July 2015 10:19:59 GMT-04:00, slurms--- via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >This does not support the theory that the network has the available\n> >bandwidth for increased block sizes, as in its current state 37% of\n> >nodes would fail to upload a 20MB block to a single peer in under 20\n> >seconds (referencing a number quoted by Gavin). If the bar for\n> >suitability is placed at taking only 1% of the block time (6 seconds)\n> >to upload one block to one peer, then 69% of the network fails for 20MB\n> >blocks. For comparison, only 10% fail this metric for 1MB blocks.\n>\n> Note how due to bandwidth being generally asymetric your findings are\n> probably optimistic - you've measured download capacity. On top of that\n> upload is further reduced by the fact that multiple peers at once need to\n> be sent blocks for reliability.\n>\n> Secondly you're measuring a network that isn't under attack - we need\n> significant additional margin to resist attack as performance is\n> consensus-critical.\n>\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsRCj\n> AAoJEMCF8hzn9Lnc47AIAIQbznavjd2Rbqxeq5a3GLqeYoI4BZIQYqfWky+6OQtq\n> yGRKaqPtGuES5y9L0k7efivT385mOl87PWnWMy61xxZ9FJgoS+YHkEx8K4tfgfA2\n> yLOKzeFSar2ROCcjHYyPWa2XXjRbNmiLzfNuQyIBArg/Ch9//iXUUM+GG0mChF5k\n> nUxLstXgXDNh5H8xkHeLi4lEbt9HFiwcZnT1Tzeo2dvVTujrtyNb/zEhNZScMXDc\n> UOlT8rBLxzHlytKdXt1GNKIq0feTRJNbreBh7/EB4nYTT54CItaaVXul0LdHd5/2\n> kgKtdbUdeyaRUKrKcvxiuIwclyoOuRQp0DZThsB262o=\n> =tBUM\n> -----END PGP SIGNATURE-----\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/a4aa2bc7/attachment.html>"
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-07-23T19:57:38",
                "message_text_only": "That is how I read it as well.\n\n\nOn Thu, Jul 23, 2015 at 12:56 PM Marcel Jamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> He measured the upload capacity of the peers by downloading from them, or\n> am I being dumb? :)\n>\n>\n> 2015-07-23 18:05 GMT+02:00 Peter Todd via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>>\n>>\n>> On 23 July 2015 10:19:59 GMT-04:00, slurms--- via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >This does not support the theory that the network has the available\n>> >bandwidth for increased block sizes, as in its current state 37% of\n>> >nodes would fail to upload a 20MB block to a single peer in under 20\n>> >seconds (referencing a number quoted by Gavin). If the bar for\n>> >suitability is placed at taking only 1% of the block time (6 seconds)\n>> >to upload one block to one peer, then 69% of the network fails for 20MB\n>> >blocks. For comparison, only 10% fail this metric for 1MB blocks.\n>>\n>> Note how due to bandwidth being generally asymetric your findings are\n>> probably optimistic - you've measured download capacity. On top of that\n>> upload is further reduced by the fact that multiple peers at once need to\n>> be sent blocks for reliability.\n>>\n>> Secondly you're measuring a network that isn't under attack - we need\n>> significant additional margin to resist attack as performance is\n>> consensus-critical.\n>>\n>> -----BEGIN PGP SIGNATURE-----\n>>\n>> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJVsRCj\n>> AAoJEMCF8hzn9Lnc47AIAIQbznavjd2Rbqxeq5a3GLqeYoI4BZIQYqfWky+6OQtq\n>> yGRKaqPtGuES5y9L0k7efivT385mOl87PWnWMy61xxZ9FJgoS+YHkEx8K4tfgfA2\n>> yLOKzeFSar2ROCcjHYyPWa2XXjRbNmiLzfNuQyIBArg/Ch9//iXUUM+GG0mChF5k\n>> nUxLstXgXDNh5H8xkHeLi4lEbt9HFiwcZnT1Tzeo2dvVTujrtyNb/zEhNZScMXDc\n>> UOlT8rBLxzHlytKdXt1GNKIq0feTRJNbreBh7/EB4nYTT54CItaaVXul0LdHd5/2\n>> kgKtdbUdeyaRUKrKcvxiuIwclyoOuRQp0DZThsB262o=\n>> =tBUM\n>> -----END PGP SIGNATURE-----\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/1b3c9718/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-24T02:55:14",
                "message_text_only": "On Thu, Jul 23, 2015 at 09:56:36PM +0200, Marcel Jamin wrote:\n> He measured the upload capacity of the peers by downloading from them, or\n> am I being dumb? :)\n\nLol, no, I'm being dumb. :)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000402fe6fb9ad613c93e12bddfc6ec02a2bd92f002050594d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/11017c4c/attachment.sig>"
            },
            {
                "author": "Leo Wandersleb",
                "date": "2015-07-23T16:36:53",
                "message_text_only": "Thank you a lot for doing this test!\n\nTwo questions:\n\n1) A node is typically connected to many nodes that would all in parallel\ndownload said block. In your test you measured how fast new blocks that\npresumably are being uploaded in parallel to all those other nodes are being\nuploaded? Or did you download blocks while those nodes were basically idle?\n\n2) What is your percentage of the very slow connections?\n\nOn 07/23/2015 11:19 AM, slurms--- via bitcoin-dev wrote:\n> On this day, the Bitcoin network was crawled and reachable nodes surveyed to find their maximum throughput in order to determine if it can safely support a faster block rate. Specifically this is an attempt to prove or disprove the common statement that 1MB blocks were only suitable slower internet connections in 2009 when Bitcoin launched, and that connection speeds have improved to the point of obviously supporting larger blocks.\n>\n>\n> The testing methodology is as follows:\n>\n>  * Nodes were randomly selected from a peers.dat, 5% of the reachable nodes in the network were contacted.\n>\n>  * A random selection of blocks was downloaded from each peer.\n>\n>  * There is some bias towards higher connection speeds, very slow connections (<30KB/s) timed out in order to run the test at a reasonable rate.\n>\n>  * The connecting node was in Amsterdam with a 1GB NIC. \n>\n>  \n> Results:\n>\n>  * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n>\n>  * 16% of connected nodes uploaded blocks faster than 10MB/s.\n>\n>  * Raw data, one line per connected node, kilobytes per second http://pastebin.com/raw.php?i=6b4NuiVQ\n>\n>\n> This does not support the theory that the network has the available bandwidth for increased block sizes, as in its current state 37% of nodes would fail to upload a 20MB block to a single peer in under 20 seconds (referencing a number quoted by Gavin). If the bar for suitability is placed at taking only 1% of the block time (6 seconds) to upload one block to one peer, then 69% of the network fails for 20MB blocks. For comparison, only 10% fail this metric for 1MB blocks.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/042b0879/attachment-0001.sig>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-23T17:12:04",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/82f24718/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-07-24T02:48:03",
                "message_text_only": "You may see much better throughput if you run a few servers around the\nglobe and test based on closest-by-geoip. TCP throughput is rather\nsignificantly effected by latency, though I'm not really sure what you\nshould be testing here, ideally.\n\nOn 07/23/15 14:19, slurms--- via bitcoin-dev wrote:\n> On this day, the Bitcoin network was crawled and reachable nodes surveyed to find their maximum throughput in order to determine if it can safely support a faster block rate. Specifically this is an attempt to prove or disprove the common statement that 1MB blocks were only suitable slower internet connections in 2009 when Bitcoin launched, and that connection speeds have improved to the point of obviously supporting larger blocks.\n> \n> \n> The testing methodology is as follows:\n> \n>  * Nodes were randomly selected from a peers.dat, 5% of the reachable nodes in the network were contacted.\n> \n>  * A random selection of blocks was downloaded from each peer.\n> \n>  * There is some bias towards higher connection speeds, very slow connections (<30KB/s) timed out in order to run the test at a reasonable rate.\n> \n>  * The connecting node was in Amsterdam with a 1GB NIC. \n> \n>  \n> Results:\n> \n>  * 37% of connected nodes failed to upload blocks faster than 1MB/s.\n> \n>  * 16% of connected nodes uploaded blocks faster than 10MB/s.\n> \n>  * Raw data, one line per connected node, kilobytes per second http://pastebin.com/raw.php?i=6b4NuiVQ\n> \n> \n> This does not support the theory that the network has the available bandwidth for increased block sizes, as in its current state 37% of nodes would fail to upload a 20MB block to a single peer in under 20 seconds (referencing a number quoted by Gavin). If the bar for suitability is placed at taking only 1% of the block time (6 seconds) to upload one block to one peer, then 69% of the network fails for 20MB blocks. For comparison, only 10% fail this metric for 1MB blocks.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T03:19:35",
                "message_text_only": "Yes that is completely doable for the next crawl, however I am not sure how much that reflects the behavior bitcoind would see when making connections. Nodes do not make any attempt to sync with close peers, which is an undesirable property if you are attempting to be sybil resistant. With some quick playing around it seems that you do get the expected speedup with close proximity, but it's not a particularly huge difference at present. I'll keep working on it and see where I get. \n\n\n> Sent: Friday, July 24, 2015 at 4:48 AM\n> From: \"Matt Corallo via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Bitcoin Node Speed Test\n>\n> You may see much better throughput if you run a few servers around the\n> globe and test based on closest-by-geoip. TCP throughput is rather\n> significantly effected by latency, though I'm not really sure what you\n> should be testing here, ideally."
            },
            {
                "author": "grarpamp",
                "date": "2015-07-24T03:54:31",
                "message_text_only": "On Thu, Jul 23, 2015 at 10:19 AM, slurms--- via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>  * A random selection of blocks was downloaded from each peer.\n\nIf the selection is different for each peer the results will be broken."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Node Speed Test",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Leo Wandersleb",
                "slurms at gmx.us",
                "Slurms MacKenzie",
                "Peter Todd",
                "Marcel Jamin",
                "Gavin Andresen",
                "Matt Corallo",
                "Jameson Lopp",
                "Pindar Wong",
                "grarpamp",
                "Joseph Gleason \u2448"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 22603
        }
    },
    {
        "title": "[bitcoin-dev] Libconsensus separated repository (was Bitcoin Core and hard forks)",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T14:30:06",
                "message_text_only": "On Thu, Jul 23, 2015 at 2:49 AM, Eric Voskuil via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 07/22/2015 05:13 PM, Eric Lombrozo via bitcoin-dev wrote:\n>> Only being partly serious - I strongly am in favor of a sufficiently\n> modularized codebase that swapping out consensus rules is fairly\n> straightforward and easy to test...\n>\n> We (libbitcoin) have taken the time to publish and maintain bitcoind's\n> \"libbitcoinconsensus\" source files as an independent C++ library (with\n> Java and Python bindings).\n>\n> https://en.bitcoin.it/wiki/Libbitcoin_Consensus\n>\n> It can be easily verified against bitcoind sources and in builds of\n> libbitcoin-blockchain it can be swapped out for libbitcoin's native\n> consensus checks.\n>\n> https://en.bitcoin.it/wiki/Libbitcoin_Blockchain#Consensus_Validation\n>\n> So there is really no reason to consider the original client synonymous\n> with consensus. I initially argued for this library to be natively\n> isolated from bitcoind, but that didn't seem to be in the cards so we\n> did it independently.\n\nI think there were some misunderstandings in our previous conversation\nabout this topic.\nI completely agree with having a separated repository for libconsensus\n(that's the whole point, alternative implementations can be\nconsensus-safe by using it, and in the event of a schism fork[1], they\ncan fork just that smaller project without having to relay on Bitcoin\nCore [satoshi] at all).\nBut I thought you also wanted Bitcoin Core to use libconsensus instead\nof just having a subtree/subrepository like it currently does with\nlibsecp256k1.\nI'm not sure if that would ever be accepted, but in any case we're\ncertainly far away from that goal. Here are some things that need to\nhappen first:\n\n1) Finish encapsulating consensus code so that it can be built without\nany (we've done it only with script-related code so far). Here are\nsome related PRs (other people havee done other things that help with\nthis as well):\n\n** MERGED or DELETED\n*** MERGED Consensus: Decouple pow from chainparams #5812 [consensuspow]\n*** DELETED MOVEONLY: Move constants and globals to consensus.h and\npolicy.o #5696 [consensus_policy0]\n*** DELETED Refactor: Create CCoinsViewEfficient interface for\nCCoinsViewCache #5747 [coins]\n*** MERGED Chainparams: Refactor: Decouple IsSuperMajority from\nParams() #5968 [params_consensus]\n*** MERGED Remove redundant getter\nCChainParams::SubsidyHalvingInterval() #5996 [params_subsidy]\n*** MERGED Separate CValidationState from main #5669 [consensus]\n*** DELETED Consensus: Refactor: Separate CheckFinalTx from\nmain::IsFinalTx #6063 [consensus_finaltx]\n*** MERGED Consensus: Decouple ContextualCheckBlockHeader from\ncheckpoints #5975 [consensus_checkpoints]\n*** MERGED Separate Consensus::CheckTxInputs and GetSpendHeight in\nCheckInputs #6061 [consensus_inputs]\n*** MERGED Bugfix: Don't check the genesis block header before\naccepting it #6299 [5975-quick-fix]\n** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\nConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n** REBASE MOVEONLY: Move most of consensus functions (pre-block) #6051\n[consensus_moveonly]\n** REBASE Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\ninto independent function #6009 [consensus_mediantime]\n** DEPENDENT Consensus: Refactor: Consensus version of\nCheckBlockHeader() #6035 [consensus_checkblockheader]\n** DEPENDENT Consensus: Consensus version of pow functions [consensus_pow2]\n\n2) Finish libconsensus's API: expose more things than VerifyScript, at\nthe very least, also expose VerifyTx, VerifyHeader and VerifyBlock.\nFeedback from alternative implementations like libbitcoin is extremely\nvaluable here. Some related closed-for-now PRs:\n\n** DEPENDENT API: Expose bitcoinconsensus_verify_header() in\nlibconsensus #5995 [consensus_header]\n** DEPENDENT API: Expose bitcoinconsensus_verify_block() in\nlibconsensus #5946 [consensus_tip]\n** REBASE Chainparams: Explicit Consensus::Params arg in consensus\nfunctions #6024 [params_consensus2]\n\n3) Move libconsensus to a separate repository as a\nsubtree/subrepository of Bitcoin Core.\n\nOnly after all that we can discuss whether Bitcoin Core itself should\ninclude libconsensus' code or just use its API directly.\nI hope that after all this, libbitcoin also reconsiders whether to\nreimplement its own libconsensus or use the \"official\" one directly\ninstead.\n\n> In any case I agree with your stated need for this isolation (if not the\n> means) for the reasons you state. The community needs to move beyond a\n> largely singular and monolithic codebase that is holding that position\n> in part due to fear about consensus bug forks.\n\nI completely agree. That's the goal of libconsensus (and an\nalternative implementation like libbitcoin being able to use it\nwithout sacrificing any of its current or future design differences\nfrom Bitcoin Core would be a sign of success in this reward).\nUnfortunately any changes that touch consensus code are risky and\ntherefore slow. And when consensus encapsulation changes conflict with\nother changes (not because the other changes need to change consensus\nbut because consensus code is still coupled with policy and other\nbitcoind-specific code), refactors are never prioritized. Ironically,\nyou need to encapsulate the consensus code to avoid such conflicts,\nwhich would make all non-consensus changes far less risky (reducing\nthe consensus-critical review development bottleneck).\n\nUnfortunately and ironically again, safer, small and incremental\nchanges are less interesting for reviewers.\nFor example, I've been trying to move consensus code to the consensus\nfolder for a long time. The correctness of a MOVEONLY change is\ntrivial to review for anyone who knows how to copy/paste in its\nfavorite editor and how to use git diff, but will I ever get answers\nto my questions in [1]?\nI know there's many people who really care about this, Cory Fields,\nWladimir and Pieter Wuille to name a few have reviewed many of this\nchanges (I've just got used to publicly whine about lack of review on\nthis front and policy encapsulation [very related fronts] as an\nattempt to get some attention: not always, but begging for review\nactually works some times).\n\nAnother unfortunate fact is that although a script-only libconsensus\nallows you to avoid a big part of all possible consensus fork bugs,\nthere cannot be users of a finished libconsensus to ask things to util\na finished libconsensus actually exists. At the same time, the future\nusers (alternative implementations, since bitcoin core is already\n\"using libconsensus\") are the most relevant people to listen when it\ncomes to the C API. That's why I beg you to comment on [2], even if\n#5995 is currently closed. Your input on [1] would be very appreciated\nas well (maybe you think it's better to expose verifyTx before\nexposing verifyHeader, even if exposing verifyHeader is something that\ncould be done faster).\n\n > To make choice regarding consensus an actual choice (and thereby actual\n> consensus) the modularity you suggest is essential. One must be able to\n> take new developments without having to take consensus changes. The\n> option to fork the codebase is not reasonable for most people. At this\n> point there is no defensible reason for coupling consensus checks with\n> other features.\n\nWould you agree that asking people to fork an independent libconsensus\nproject instead of having to fork the full Bitcoin-qt is much more\nreasonable?\nI mean, I agree with your points. If \"the specification of the\nconsensus rules is an implementation\", then that implementation\nshouldn't be coupled with a bunch of policy and non-consensus\ntechnical choices (storage, dependencies, p2p protocol...). But I\nstill think that \"the specification of the consensus rules should be a\nconcrete implementation\" rather than based purely on a natural\nlanguage like English.\nI believe that's the only point where we fundamentally disagree, but\nit shouldn't be a barrier in our common goal of taking \"power\" away\nfrom Bitcoin Core development. If we're successful Bitcoin Core won't\nhave any privileged position with regards to, say, libbitcoin when it\ncomes to deciding consensus rules changes.\nYou see, people like Mike Hearn believe that \"uncontroversial\nacceptance by Bitcoin Core devs\" is the same as \"uncontroversial\nacceptance by all users of the system\" (for a libbitcoin developer\nlike you, obviously a superset of Bitcoin Core's users). He thinks\nthat Gavin proposal is only a schism consensus fork[3] because the\ncode is in github/bitcoinxt/bitcoinxt instead of\ngithub/bitcoin/bitcoin, not because PeterTodd-the-user-of-the-system\n(he doesn't care about him) opposes it.\nBut let's imagine a different situation:\n\n1) libconsensus us finished and used by libbitcoin\n2) Bitcoin Core was unanimously in favor of Gavin's 32 GB initial\nproposal and the changes are applied to bitcoin/bitcoin and\nbitcoin/libconsensus (or Bitcoin Core has a dictator like Mike\nwants[4] and he accepts it, it doesn't really matter for this\nexample).\n\nBut let's also assume that X% of the users and 10% of the miners are\nagainst that Schism hardfork, and they don't want to be forced to\nchange the rules by any influential group, mining, economic or user\nmajority.\nLibbitcoin cannot be forced to accept the next, controversial version\nof bitcoin/libconsensus, so you guys fork libbitcoin/libconsensus out\nof the last ok version.\nCentralized-bitcoin and old-bitcoin would become 2 separated\ncurrencies and some people would likely lose money in the transition\nfrom one currency to 2 of them, but the users of old-bitcoin have the\nright of keeping the rules they signed up for and the only responsible\npeople for this likely-catastrophic schism would be the Bitcoin core\ndevelopers for trying to impose consensus changes into others against\ntheir will. Trying to impose consensus changes against the will of\nsome users is wrong, and it is irrelevant if that happens in Bitcoin\nCore or Bitcoin Tx (if it is uncontroversial, it's also irrelevant\nwhere it gets implemented first).\n\nI really believe bitcoin needs competitive alternative implementations\nand I believe libconsensus is a tool to help that happen and reduce\nthe \"gatekeeping\" friction that there's (unfortunately) around Bitcoin\nCore. I look forward to any potential collaboration on this front.\nEven if you still want to maintain a reimplementation of libconsensus\n(which I humbly think it's a mistake, but I don't think there's any\npoint on keep discussing that, since we know we disagree) we can\ncollaborate on the future common API of a complete libconsensus (with\nverifyBlock and all). I really hope we can do that.\n\n[1] https://github.com/bitcoin/bitcoin/pull/6051#issuecomment-120708121\n\n[2] (kind of outdated, but the API is what matters here)\nhttps://github.com/jtimon/bitcoin/commit/00b9b227afc8669a877984561329dde75d3d8942\n\n[3] https://github.com/jtimon/bips/blob/bip-forks/bip-forks.org#schism1-hardforks\n\n[4] http://lmgtfy.com/?q=mike+hearn+dictator&l=1"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-23T14:57:38",
                "message_text_only": "On 7/23/2015 10:30 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n\n> [4] http://lmgtfy.com/?q=mike+hearn+dictator&l=1\n> _______________________________________________\n\n\nYou spend too much time on reddit.  All this drama queen stuff is \ngetting ridiculous.\n\n\nRuss"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-23T21:02:20",
                "message_text_only": "On Thu, Jul 23, 2015 at 4:57 PM, Milly Bitcoin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 7/23/2015 10:30 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n>\n>> [4] http://lmgtfy.com/?q=mike+hearn+dictator&l=1\n\nMike has sincerely said that he would like \"Bitcoin Core to have a\nbenevolent dictator like other free software projects\", and I wanted\nto make clear that I wasn't putting words in his mouth but it's\nactually something very easy to find on the internet. But I now\nrealize that the search can be interpreted as me calling him dictator\nor something of the sort. That wasn't my intention. In fact, Mike's\npoint of view on Bitcoin Core development wasn't even relevant for my\nexample so I shouldn't even have mentioned him in the first place. I\napologize for both mistakes, but please let's keep this thread focused\non libconsensus.\n\n> You spend too much time on reddit.\n\nI actually don't spend much time on reddit: I don't particularly like\nit. But I do spend some time in reddit so, I agree: I spend too much\ntime on reddit."
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-23T21:30:18",
                "message_text_only": "> Mike has sincerely said that he would like \"Bitcoin Core to have a\n > benevolent dictator like other free software projects\", and I wanted\n > to make clear that I wasn't putting words in his mouth\n\nHe is just pointing out reality. Decentralization is really just a \ncollection of centralized processes. If you ever want to change anything \nsomeone, somewhere has to make a decision.\n\nSatoshi was the first dictator and he set the consensus rules for his \nversion of Bitcoin and that is what people accepted. Those rules did not \nappear by magic nor did they appear via some unexplained 'consensus' \nmechanism. He made decisions and updated the code or accepted updates \nmade by others.\n\nRuss"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-28T06:40:42",
                "message_text_only": "On 07/23/2015 07:30 AM, Jorge Tim\u00f3n wrote:\n> On Thu, Jul 23, 2015 at 2:49 AM, Eric Voskuil via bitcoin-dev wrote:\n>> On 07/22/2015 05:13 PM, Eric Lombrozo via bitcoin-dev wrote:\n>>> Only being partly serious - I strongly am in favor of a sufficiently\n>>> modularized codebase that swapping out consensus rules is fairly\n>>> straightforward and easy to test...\n>>\n>> We (libbitcoin) have taken the time to publish and maintain bitcoind's\n>> \"libbitcoinconsensus\" source files as an independent C++ library...\n\n> I think there were some misunderstandings in our previous conversation\n> about this topic.\n> I completely agree with having a separated repository for libconsensus\n> (that's the whole point, alternative implementations can be\n> consensus-safe by using it, and in the event of a schism fork[1], they\n> can fork just that smaller project without having to relay on Bitcoin\n> Core [satoshi] at all).\n> But I thought you also wanted Bitcoin Core to use libconsensus instead\n> of just having a subtree/subrepository like it currently does with\n> libsecp256k1.\n\nlibsecp256k1 has it's own repository, libbitcoinconsensus doesn't.  A\nseparate repository was what I considered as a requirement for us to use it.\n\n> I'm not sure if that would ever be accepted, but in any case we're\n> certainly far away from that goal.\n\nIf it's not certain whether this would even be accepted, the commitment\nto a community consensus library is too weak to take a strong dependency\non. But for us it's moot, as we have made the already accomplished that\ngoal.\n\n> Here are some things that need to\n> happen first:\n> \n> 1) Finish encapsulating consensus code so that it can be built without\n> any (we've done it only with script-related code so far). Here are\n> some related PRs (other people have done other things that help with\n> this as well):\n...\n> 2) Finish libconsensus's API: expose more things than VerifyScript, at\n> the very least, also expose VerifyTx, VerifyHeader and VerifyBlock.\n> Feedback from alternative implementations like libbitcoin is extremely\n> valuable here. Some related closed-for-now PRs:\n\nIn our earlier discussion I believe you said that the library would not\nbe undergoing significant change or feature creep. If this is the very\nleast that's projected it would seem that constraint will not hold.\n\n> 3) Move libconsensus to a separate repository as a\n> subtree/subrepository of Bitcoin Core.\n> \n> Only after all that we can discuss whether Bitcoin Core itself should\n> include libconsensus' code or just use its API directly.\n\nI don't think it's a question of whether it *should* use its own library\nas it is published for others - this is a practically self-evident\nconclusion.\n\n> I hope that after all this, libbitcoin also reconsiders whether to\n> reimplement its own libconsensus or use the \"official\" one directly\n> instead.\n\nWe use a fork of libsecp256k1 and would probably do the same with the\nconsensus library if it was cleanly isolated.\n\n>> In any case I agree with your stated need for this isolation (if not the\n>> means) for the reasons you state. The community needs to move beyond a\n>> largely singular and monolithic codebase that is holding that position\n>> in part due to fear about consensus bug forks.\n> \n> I completely agree. That's the goal of libconsensus (and an\n> alternative implementation like libbitcoin being able to use it\n> without sacrificing any of its current or future design differences\n> from Bitcoin Core would be a sign of success in this reward).\n\nIt's a performance sacrifice, and then there's the OpenSSL dependency,\nbut these are both optional within our stack - so the application\ndeveloper has the option. So the only downside is that we are\nmaintaining the conditional compilation.\n\n> Unfortunately any changes that touch consensus code are risky and\n> therefore slow. And when consensus encapsulation changes conflict with\n> other changes (not because the other changes need to change consensus\n> but because consensus code is still coupled with policy and other\n> bitcoind-specific code), refactors are never prioritized. Ironically,\n> you need to encapsulate the consensus code to avoid such conflicts,\n> which would make all non-consensus changes far less risky (reducing\n> the consensus-critical review development bottleneck).\n> \n> Unfortunately and ironically again, safer, small and incremental\n> changes are less interesting for reviewers.\n> For example, I've been trying to move consensus code to the consensus\n> folder for a long time. The correctness of a MOVEONLY change is\n> trivial to review for anyone who knows how to copy/paste in its\n> favorite editor and how to use git diff, but will I ever get answers\n> to my questions in [1]?\n\nI think it's worthwhile work, especially if you are passionate about the\nlonger term objectives. I haven't been involved in these reviews as I\nspend very little time with the satoshi client\n\n> I know there's many people who really care about this, Cory Fields,\n> Wladimir and Pieter Wuille to name a few have reviewed many of this\n> changes (I've just got used to publicly whine about lack of review on\n> this front and policy encapsulation [very related fronts] as an\n> attempt to get some attention: not always, but begging for review\n> actually works some times).\n\nWell a cynic might observe that fear of consensus bugs is what keeps\npeople on the satoshi client, and therefore accelerating the development\nof a clean and independent consensus library would be a very low priority.\n\n> Another unfortunate fact is that although a script-only libconsensus\n> allows you to avoid a big part of all possible consensus fork bugs,\n> there cannot be users of a finished libconsensus to ask things to until\n> a finished libconsensus actually exists.\n\nSoftware is never finished, but this exists and we are using it.\n\n> At the same time, the future\n> users (alternative implementations, since bitcoin core is already\n> \"using libconsensus\") \n\nIt is using the same source files, but AFAICT not the library.\n\n> are the most relevant people to listen when it\n> comes to the C API. That's why I beg you to comment on [2], even if\n> #5995 is currently closed. Your input on [1] would be very appreciated\n> as well (maybe you think it's better to expose verifyTx before\n> exposing verifyHeader, even if exposing verifyHeader is something that\n> could be done faster).\n\nI haven't looked at any of these commits, but I'll make some time to at\nleast give a cursory review.\n\n>  > To make choice regarding consensus an actual choice (and thereby actual\n>> consensus) the modularity you suggest is essential. One must be able to\n>> take new developments without having to take consensus changes. The\n>> option to fork the codebase is not reasonable for most people. At this\n>> point there is no defensible reason for coupling consensus checks with\n>> other features.\n> \n> Would you agree that asking people to fork an independent libconsensus\n> project instead of having to fork the full Bitcoin-qt is much more\n> reasonable?\n\nYes, of course. We've already done it. For each release of the satoshi\nclient since we made libbitcoin-consensus I've copied the sources. It's\npretty much automated and easy to visually verify that the sources\nmatch. That would be quite a bit more difficult if there wasn't an\nindependent build.\n\n> I mean, I agree with your points. If \"the specification of the\n> consensus rules is an implementation\", then that implementation\n> shouldn't be coupled with a bunch of policy and non-consensus\n> technical choices (storage, dependencies, p2p protocol...). But I\n> still think that \"the specification of the consensus rules should be a\n> concrete implementation\" rather than based purely on a natural\n> language like English.\n\nUseful specifications often have two reference implementations. It's the\nidea that there can be only one legitimate implementation that's\nproblematic.\n\n> I believe that's the only point where we fundamentally disagree, but\n> it shouldn't be a barrier in our common goal of taking \"power\" away\n> from Bitcoin Core development. If we're successful Bitcoin Core won't\n> have any privileged position with regards to, say, libbitcoin when it\n> comes to deciding consensus rules changes.\n\nI don't think we disagree on anything fundamental. My issues with the\nlibrary were (1) the lack of isolation, (2) the fact that the satoshi\nclient wouldn't actually use the library, and (3) backtracking to use\nOpenSSL, which we had recently removed from libbitcoin.\n\n..\n\n> 1) libconsensus us finished and used by libbitcoin\n> 2) Bitcoin Core was unanimously in favor of Gavin's 32 GB initial\n> proposal and the changes are applied to bitcoin/bitcoin and\n> bitcoin/libconsensus (or Bitcoin Core has a dictator like Mike\n> wants[4] and he accepts it, it doesn't really matter for this\n> example).\n> \n> But let's also assume that X% of the users and 10% of the miners are\n> against that Schism hardfork, and they don't want to be forced to\n> change the rules by any influential group, mining, economic or user\n> majority.\n> Libbitcoin cannot be forced to accept the next, controversial version\n> of bitcoin/libconsensus, so you guys fork libbitcoin/libconsensus out\n> of the last ok version.\n\nThis is already done.\n\n> Centralized-bitcoin and old-bitcoin would become 2 separated\n> currencies and some people would likely lose money in the transition\n> from one currency to 2 of them, but the users of old-bitcoin have the\n> right of keeping the rules they signed up for and the only responsible\n> people for this likely-catastrophic schism would be the Bitcoin core\n> developers for trying to impose consensus changes into others against\n> their will. Trying to impose consensus changes against the will of\n> some users is wrong, and it is irrelevant if that happens in Bitcoin\n> Core or Bitcoin Tx (if it is uncontroversial, it's also irrelevant\n> where it gets implemented first).\n\nI don't disagree, but you previously argued that *everyone* had to agree\non consensus. Above you are making the argument that people can choose\nto disagree. Yes, this is important. Yet it's unrealistic for any\nalternative consensus to overcome inertia unless there are widely\ndeployed independent implementations.\n\n> I really believe bitcoin needs competitive alternative implementations\n> and I believe libconsensus is a tool to help that happen and reduce\n> the \"gatekeeping\" friction that there's (unfortunately) around Bitcoin\n> Core. I look forward to any potential collaboration on this front.\n> Even if you still want to maintain a reimplementation of libconsensus\n> (which I humbly think it's a mistake, but I don't think there's any\n> point on keep discussing that, since we know we disagree) we can\n> collaborate on the future common API of a complete libconsensus (with\n> verifyBlock and all). I really hope we can do that.\n\nI'm maintain our fork of the consensus sources until they are (1)\nproperly isolated from the satoshi client and (2) the satoshi client\nuses the actual library.\n\nI don't see it as important or even productive to try and wedge the\nconsensus library into the repository/build for bitcoind and Bitcoin-QT.\nIt's straightforward to maintain the consensus library independently.\nAlways willing to work with you on it, although we're all busy, and this\nisn't my top priority presently.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/1eaee5ae/attachment.sig>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-28T08:47:19",
                "message_text_only": "On Mon, Jul 27, 2015 at 11:40:42PM -0700, Eric Voskuil via bitcoin-dev wrote:\n\n> It's a performance sacrifice, and then there's the OpenSSL dependency,\n> but these are both optional within our stack - so the application\n> developer has the option. So the only downside is that we are\n> maintaining the conditional compilation.\n\nNow that BIP66 became active, and only strict DER signatures are allowed, the OpenSSL dependency can be removed from consensus.\n\nPieter Wuille will do an announcement on this soon.\n\nWladimir"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-28T09:58:33",
                "message_text_only": "Ok, I'm going to separate terms: current-libconsensus from theoretical\nfuture-libconsensus (implementing ALL consensus rules).\n\nOn Tue, Jul 28, 2015 at 8:40 AM, Eric Voskuil <eric at voskuil.org> wrote:\n> libsecp256k1 has it's own repository, libbitcoinconsensus doesn't.  A\n> separate repository was what I considered as a requirement for us to use it.\n\nWe want to complete future-libconsensus (decouple all the consensus\nrules from the rest of the bitcoin core code) first.\nThen we can move future-libconsensus to a subrepository/subtree like\nlibsecp256k1 and I believe everybody wants this to eventually happen.\nSeparating current-libconsensus now may make completing\nfuture-libconsensus harder.\n\n>> I'm not sure if that would ever be accepted, but in any case we're\n>> certainly far away from that goal.\n>\n> If it's not certain whether this would even be accepted, the commitment\n> to a community consensus library is too weak to take a strong dependency\n> on. But for us it's moot, as we have made the already accomplished that\n> goal.\n\nWhat I mean is that once it is separated to a subtree, there's one more step:\n\nMake Bitcoin Core use future-libconsensus' API instead of a subtree.\nDecoupling future-libconsensus from Bitcoin Core is one thing, and\nDecoupling Bitcoin Core from future-libconsensus is another thing: you\nneed to decouple Bitcoin Core from all future-libconsensus\nimplementation internals. For example, script/sign (part of Bitcoin\nCore) depends on individual non-API-exposed classes in\ncurrent-libconsensus.\nMoving from a subtree to a completely separated library is what I\ndon't know will ever happen, but I don't think this is \"unfairly\nadvantageous\" for Bitcoin Core or anything like that: other\nimplementations can also use future-libcosensus as a subtree instead\nof the C API as well.\n\nYou have accomplished the goal of separating curren-libconsensus, not\nfuture-libconsensus.\nIn fact, if you complete the equivalent of future-libconsensus in\nlibbitcoin and separate that, maybe that's a better place to start\ndrafting a full API.\n\n>> 2) Finish libconsensus's API: expose more things than VerifyScript, at\n>> the very least, also expose VerifyTx, VerifyHeader and VerifyBlock.\n>> Feedback from alternative implementations like libbitcoin is extremely\n>> valuable here. Some related closed-for-now PRs:\n>\n> In our earlier discussion I believe you said that the library would not\n> be undergoing significant change or feature creep. If this is the very\n> least that's projected it would seem that constraint will not hold.\n\nfuture-libconsensus will not have significant changes *once it is\ncompleted*. Currently future-libconsensus is spread around many places\ninclusing src/main, so that obviously needs to change before it can be\nseparated to an independent repo.\n\n>> 3) Move libconsensus to a separate repository as a\n>> subtree/subrepository of Bitcoin Core.\n>>\n>> Only after all that we can discuss whether Bitcoin Core itself should\n>> include libconsensus' code or just use its API directly.\n>\n> I don't think it's a question of whether it *should* use its own library\n> as it is published for others - this is a practically self-evident\n> conclusion.\n\nWell, Bitcoin Core is \"currently the only user of future-libconsensus\"\nsince bitcoin core and future-libconsensus are currently mutually\ncoupled.\nBitcoin Core will always keep using future-libconsensus. The only\nquestion is whether it will use it through the C API or as a\nsubtree/subrepository (both options are also available to other\nimplementations). I don't know if decoupling Bitcoin Core from\nfuture-libconsensus' implementation details enough to be able to\ndirectly use the API is worth it or if anyone will be interested in\ndoing so. For me this last step is not all that interesting: if we\nhave an independent repo with a full API that other implementations\ncan use, I don't really care about Bitcoin Core not going through the\nAPI and using including all the code directly instead.\n\n>> I hope that after all this, libbitcoin also reconsiders whether to\n>> reimplement its own libconsensus or use the \"official\" one directly\n>> instead.\n>\n> We use a fork of libsecp256k1 and would probably do the same with the\n> consensus library if it was cleanly isolated.\n\nGreat.\n\n>>> In any case I agree with your stated need for this isolation (if not the\n>>> means) for the reasons you state. The community needs to move beyond a\n>>> largely singular and monolithic codebase that is holding that position\n>>> in part due to fear about consensus bug forks.\n>>\n>> I completely agree. That's the goal of libconsensus (and an\n>> alternative implementation like libbitcoin being able to use it\n>> without sacrificing any of its current or future design differences\n>> from Bitcoin Core would be a sign of success in this reward).\n>\n> It's a performance sacrifice, and then there's the OpenSSL dependency,\n> but these are both optional within our stack - so the application\n> developer has the option. So the only downside is that we are\n> maintaining the conditional compilation.\n\nAs I told you before the reason why current-libconsensus is using\nOpenSSL instead of libsecp256k1 is that the very authors of\nlibsecp256k1 warned that using libsecp256k1 for validation was\nconsensus risky. As Wladimir said, Pieter Wuille will make an\nannouncement about this soon.\nIn any case, as I told you in previous conversations, the plan is to\nmove from OpenSSL to libsecp256k1 for validation too (so libconsensus\nwil drop the OpenSSL dependency and this is just a temporary concern).\n\n> I think it's worthwhile work, especially if you are passionate about the\n> longer term objectives. I haven't been involved in these reviews as I\n> spend very little time with the satoshi client\n\nWell, the questions about the API are just in english, no need to\ndeeply know Bitcoin Core's (satoshi client) internals.\nBut maybe we should have an independent mailing list for\nconsensus-only things. Not all future-libconsensus users will be\ninterested in Bitcoin Core-specific discussions, and making them\nsubscribe and filter seems like an unnecessary burden to\nparticipation.\n\n> Well a cynic might observe that fear of consensus bugs is what keeps\n> people on the satoshi client, and therefore accelerating the development\n> of a clean and independent consensus library would be a very low priority.\n\nI think that's precisely what makes it a high priority in the eyes of\nall the people working on it or reviewing related changes.\nBut, yes, I guess \"evil-thinking\", maybe that's what make it a low\npriority for someone evil that wants Bitcoin Core's implementation\nhave more importance than it shold forever. I prefer not to evil-think\nand just attribute it to having other priorities or just apathy about\nit.\n\n>> Another unfortunate fact is that although a script-only libconsensus\n>> allows you to avoid a big part of all possible consensus fork bugs,\n>> there cannot be users of a finished libconsensus to ask things to until\n>> a finished libconsensus actually exists.\n>\n> Software is never finished, but this exists and we are using it.\n\nBy \"finished\" I mean a future-libconsensus that implements ALL\nconsensus rules. We don't have that yet.\n\n>> At the same time, the future\n>> users (alternative implementations, since bitcoin core is already\n>> \"using libconsensus\")\n>\n> It is using the same source files, but AFAICT not the library.\n\nBitcoin Core is the ONLY \"user\" of future-libconsensus (which actually\nonly exists inside Bitcoin Core and it's not exposed).\nCurrent-libconsensus is used by Bitcoin Core and also exposed as an\nindependent build (not a separated repository yet).\n\nOnce future-Bitcoin's API is completed and the code in a different\nrepo, how is Bitcoin Core using the API instead of the sources\ndirectly of any importance to other implementations?\nThat's really the part that I cannot understand. It will be a problem\nBitcoin Core, but if other implementations want to have (and maybe\nsolve later) the same problem they can use a subtree too and start\ncoupling their code with implementations details from\nfuture-libconsensus.\nWhy would they want to do that? Again, I have no idea. I don't\nunderstand what the complain is here.\n\n>> are the most relevant people to listen when it\n>> comes to the C API. That's why I beg you to comment on [2], even if\n>> #5995 is currently closed. Your input on [1] would be very appreciated\n>> as well (maybe you think it's better to expose verifyTx before\n>> exposing verifyHeader, even if exposing verifyHeader is something that\n>> could be done faster).\n>\n> I haven't looked at any of these commits, but I'll make some time to at\n> least give a cursory review.\n\nGreat. I mean, I wasn't asking about reviewing the commits themselves\n(which is also great if you do), but rather on answering the questions\nI'm making there, ie: what to expose next (ie VerifyTx or\nVerifyHeader)? would this be an acceptable way to expose VerifyHeader\n? Which of he step-checks functions is worth exposing too (Bitcoin\nCore is currently using some to prevent DoS attacks, for example)?\n\n>> Would you agree that asking people to fork an independent libconsensus\n>> project instead of having to fork the full Bitcoin-qt is much more\n>> reasonable?\n>\n> Yes, of course. We've already done it. For each release of the satoshi\n> client since we made libbitcoin-consensus I've copied the sources. It's\n> pretty much automated and easy to visually verify that the sources\n> match. That would be quite a bit more difficult if there wasn't an\n> independent build.\n\nWell, neither libbitcoincosnensus nor libbitcoin-consensus implements\nall the consensus rules.\nThat's what makes them different from future-libconsensus.\nBut great, we're confirming more views that we share.\n\n> Useful specifications often have two reference implementations. It's the\n> idea that there can be only one legitimate implementation that's\n> problematic.\n\nWell, this is where I fear we will never agree. I think \"Bitcoin is\ndifferent\" in this reward and you disagree.\nMaybe Pieter's explanation is more convincing to you:\nhttps://youtu.be/PxW5D9xCIsc?t=769\nOtherwise, I think I'll stop trying convincing you.\nBut one last try:\n\nIf there's 2 \"specification implementations\":\n\n1) widely deployed but containing 1 bug\n2) not deployed anywhere but more readable and without the bug.\n\nWhen the bug is found, is it a consensus rule or not?\nIf it is, it turns out the second implementation wasn't an specification at all.\nIf it's not, nobody has been ever following consensus rules!!\n\n>> I believe that's the only point where we fundamentally disagree, but\n>> it shouldn't be a barrier in our common goal of taking \"power\" away\n>> from Bitcoin Core development. If we're successful Bitcoin Core won't\n>> have any privileged position with regards to, say, libbitcoin when it\n>> comes to deciding consensus rules changes.\n>\n> I don't think we disagree on anything fundamental. My issues with the\n> library were (1) the lack of isolation, (2) the fact that the satoshi\n> client wouldn't actually use the library, and (3) backtracking to use\n> OpenSSL, which we had recently removed from libbitcoin.\n\n1) Working on it\n2) The Satohi client has been using all along and it will use it\nforever (maybe not through the API, but I don't get what the problem\nwith that is).\n3) There will be an announce about this soon.\n\n>> Libbitcoin cannot be forced to accept the next, controversial version\n>> of bitcoin/libconsensus, so you guys fork libbitcoin/libconsensus out\n>> of the last ok version.\n>\n> This is already done.\n\nOnce future-libconsensus exists as a separated repository, I don't\nthink you want to preemptively fork it unless you're actually changing\nsomething.\n\n> I don't disagree, but you previously argued that *everyone* had to agree\n> on consensus. Above you are making the argument that people can choose\n> to disagree. Yes, this is important. Yet it's unrealistic for any\n> alternative consensus to overcome inertia unless there are widely\n> deployed independent implementations.\n\nIdeally schism consensus-rules changes will never happen, since they\neffectively divide the currency in 2 and force the users to chose\n(apart from other complications).\nBut if someone is trying to impose a schism fork (from Bitcoin Core,\nfrom the new future-lbiconsensus repo or from anywhere else) it\nbecomes trivial to protect your implementation against forced changes.\nIdeally all consensus changes will be uncontroversial or not happen at all.\nBut I think about non-ideal cases too.\n\n> I'm maintain our fork of the consensus sources until they are (1)\n> properly isolated from the satoshi client and (2) the satoshi client\n> uses the actual library.\n\n1) Reasonable.\n2) You mean use it through the API? Seriously, why do you care?\n\n> I don't see it as important or even productive to try and wedge the\n> consensus library into the repository/build for bitcoind and Bitcoin-QT.\n> It's straightforward to maintain the consensus library independently.\n\nTo be clear, Bitcoin Core's using future-libconsensus through a\nsubtree instead of the API is not a preference or a goal: it is just\nhow things will be just after completing and separating\nfuture-libconsensus. Making it use the API instead of the subtree will\nbe additional work. I'm not sure I will want/have time to do it and I\ndon't know of anyone planning to do that (which seems very reasonably\ngiven that a separated future-libconsensus is a dependency for such a\nchange).\n\n> Always willing to work with you on it, although we're all busy, and this\n> isn't my top priority presently.\n\nIs it because \"fear of consensus bugs is what keeps people on the\nsatoshi client\" and you want to keep things this way?\nSorry, just joking about your previous \"cynic\" comment. See? Don't\nattribute to malice what can be attributed to lack of time."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-29T20:38:39",
                "message_text_only": "On 07/28/2015 02:58 AM, Jorge Tim\u00f3n wrote:\n>> I haven't looked at any of these commits, but I'll make some time to at\n>> least give a cursory review.\n> \n> Great. I mean, I wasn't asking about reviewing the commits themselves\n> (which is also great if you do), but rather on answering the questions\n> I'm making there, ie: what to expose next (ie VerifyTx or\n> VerifyHeader)?\n\nOh, I misunderstood your ask then. I don't have a preference on\nprioritizing VerifyTx vs VerifyHeader.\n\n> would this be an acceptable way to expose\n> VerifyHeader?\n\nI'm not sure how you mean to expose it, could you clarify?\n\n> Which of he step-checks functions is worth exposing too (Bitcoin\n> Core is currently using some to prevent DoS attacks, for example)?\n\nI don't see any reason to expose checkpoints in this library. They are\ntrivial to implement and are not part of consensus.\n\n>>> Would you agree that asking people to fork an independent libconsensus\n>>> project instead of having to fork the full Bitcoin-qt is much more\n>>> reasonable?\n>>\n>> Yes, of course. We've already done it. For each release of the satoshi\n>> client since we made libbitcoin-consensus I've copied the sources. It's\n>> pretty much automated and easy to visually verify that the sources\n>> match. That would be quite a bit more difficult if there wasn't an\n>> independent build.\n> \n> Well, neither libbitcoincosnensus nor libbitcoin-consensus implements\n> all the consensus rules.\n> That's what makes them different from future-libconsensus.\n> But great, we're confirming more views that we share.\n\nNothing can eliminate all consensus risk, not even a common full node\nimplementation.\n\n>> Useful specifications often have two reference implementations. It's the\n>> idea that there can be only one legitimate implementation that's\n>> problematic.\n> \n> Well, this is where I fear we will never agree. I think \"Bitcoin is\n> different\" in this reward and you disagree.\n> Maybe Pieter's explanation is more convincing to you:\n> https://youtu.be/PxW5D9xCIsc?t=769\n> Otherwise, I think I'll stop trying convincing you.\n\nMaybe I wasn't sufficiently explicit. It is problematic. That is the\ncore issue we are dealing with. That doesn't mean I disagree with the\nobjectives of an independent community consensus library.\n\nThe premise of the \"one true library\" idea is that there is *no way* to\nsufficiently test for consensus bugs in any software release. That of\ncourse means that each release of the satoshi client poses a significant\nrisk to the network. This risk is presently greater than that posed by\nother implementations simply because of adoption. That is the basis of\nthe red herring argument:\n\nhttps://blog.conformal.com/the-bitcoin-consensus-red-herring\n\nThe bottom line is that nobody has control over this process. There are,\nand will always be, a multitude of consensus implementations that intend\nto target the same coin. Presently there are multiple versions of the\nsatoshi client, and this has produced forks, and will continue to do so.\n\nIsolating the satoshi consensus checks to an independent library serves\nnot to eliminate that risk, but can reduce it somewhat. Importantly it\nwill allow various implementations to overcome a perception problem,\nwhich will improve implementation diversity and developer participation.\n\n>>> I believe that's the only point where we fundamentally disagree, but\n>>> it shouldn't be a barrier in our common goal of taking \"power\" away\n>>> from Bitcoin Core development. If we're successful Bitcoin Core won't\n>>> have any privileged position with regards to, say, libbitcoin when it\n>>> comes to deciding consensus rules changes.\n>>\n>> I don't think we disagree on anything fundamental. My issues with the\n>> library were (1) the lack of isolation, (2) the fact that the satoshi\n>> client wouldn't actually use the library, and (3) backtracking to use\n>> OpenSSL, which we had recently removed from libbitcoin.\n> \n> 1) Working on it\n\nFor the sake of clarity, this is now a non-issue for us.\n\n> 2) The Satoshi client has been using all along and it will use it\n> forever (maybe not through the API, but I don't get what the problem\n> with that is).\n\nAgain, I consider this a requirement for us to link directly to it as a\nlibrary. If the sources are isolated into an independent repo, but the\nsatoshi client is embedding its own copies, one must continue to diff\nthe client sources against the library sources. We are doing this\nalready, so the benefit to having the independent repo is in no longer\nhaving to do this.\n\nThere are also differences in the build system that can affect outcome.\nComparing those differences across repos can be more challenging. For\nthis reason I consider it important to your objective that the satoshi\nclient actually use the library - as I assume it will at some point.\n\nIf the satoshi client folks are to maintain a consensus library for the\ncommunity it's also important to show a commitment to its independence.\nDogfooding is of course a software engineering best practice. But there\nis also the cynical perspective - the independent library in some ways\nworks against an advantage of the satoshi client.\n\nI personally don't think the committers are parochial enough to let this\nbecome an issue. We are all after something bigger. But if there was\npush-back against using the library it would be a red flag. So until\nthat point passes I would just maintain our independent library, cloning\nthe sources from the satoshi client.\n\n> 3) There will be an announce about this soon.\n\nYes, I've seen this as a temporary setback.\n\n...\n>> Always willing to work with you on it, although we're all busy, and this\n>> isn't my top priority presently.\n> \n> Is it because \"fear of consensus bugs is what keeps people on the\n> satoshi client\" and you want to keep things this way?\n\nNo, I see it as less significant to the adoption of libbitcoin-server\nthan other issues we are working on, especially given the existence of\nlibbitcoin-consensus. I also trust you will make progress regardless.\n\ne\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/f0b54988/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-29T21:46:49",
                "message_text_only": "On Wed, Jul 29, 2015 at 10:38 PM, Eric Voskuil <eric at voskuil.org> wrote:\n> On 07/28/2015 02:58 AM, Jorge Tim\u00f3n wrote:\n> Oh, I misunderstood your ask then. I don't have a preference on\n> prioritizing VerifyTx vs VerifyHeader.\n\nOk, let's assume we want to expose verifyHeader first (which I think\nwill be easier).\n\n>> would this be an acceptable way to expose\n>> VerifyHeader?\n>\n> I'm not sure how you mean to expose it, could you clarify?\n\nIn https://github.com/bitcoin/bitcoin/pull/5995 I had one (probably\nstupid) proposal.\nBut it had so many preparations commits that I had to close it.\nIn the last commit\nhttps://github.com/jtimon/bitcoin/commit/00b9b227afc8669a877984561329dde75d3d8942\nyou can see that I'm adding a new function in\nscript/bitcoinconsensus.cpp with the following declaration:\n\nint bitcoinconsensus_verify_header(const unsigned char* blockHeader,\nunsigned int blockHeaderLen,\n const Consensus::Params& params, int64_t nTime, CBlockIndexBase*\npindexPrev, PrevIndexGetter indexGetter,\n bitcoinconsensus_error* err)\n\nThe ugly parts that you may not like are the CBlockIndexBase struct\n(or maybe it's not so unreasonable) and the function pointer\nPrevIndexGetter.\nTo see their \"ugliness\" you can look at:\n\nhttps://github.com/jtimon/bitcoin/commit/4528ec69617f1b6d6c8f0d73dc4091cded7c216c\n\nThe PrevIndexGetter function pointer that Bitcoin Core would use\ninternally would be:\n\nconst CBlockIndexBase* GetPrevIndex(const CBlockIndexBase* pindex)\n{\n    return ((CBlockIndex*)pindex)->pprev;\n}\n\nwith an ugly casting. But, well, I guess that's only ugly for Bitcoin\nCore, not necessarily for other libconsensus users, which can define\ntheir own function pointer, provided that it's of the form:\n\ntypedef const CBlockIndexBase* (*PrevIndexGetter)(const CBlockIndexBase*);\n\nThe struct that I think needs more refinement (and I just used what I\nconsidered easier to implement at the time) is the CBlockIndexBase\nstruct itself:\n\n+struct CBlockIndexBase\n+{\n+ //! pointer to the hash of the block, if any. Memory is owned by\nthis CBlockIndexBase\n+ const uint256* phashBlock;\n+ //! block header\n+ int32_t nVersion;\n+ uint256 hashMerkleRoot;\n+ uint32_t nTime;\n+ uint32_t nBits;\n+ uint32_t nNonce;\n+ //! height of the entry in the chain. The genesis block has height 0\n+ int nHeight;\n+};\n\nI don't like phashBlock being a pointer instead of just a ref or even an object\nShould that struct have a CBlockIndexBase* pprev; field (moving it\ndown from CBlockIndex)?\nThat's the kind of question where your feedback seems very important\nfrom other-implementations developers (because you won't necessarily\ntake into account the difficulty of the refactors required in Bitcoin\nCore to expose the right interface, and \"libconsensus shouldn't care\"\neither, all we want is the best interface).\n\n>> Which of he step-checks functions is worth exposing too (Bitcoin\n>> Core is currently using some to prevent DoS attacks, for example)?\n>\n> I don't see any reason to expose checkpoints in this library. They are\n> trivial to implement and are not part of consensus.\n\nAgreed, and I would say all of the checkpoint check separation has\nbeen done already.\nWhat I mean by step functions is...look at verfyHeader internals, for example:\n\nhttps://github.com/jtimon/bitcoin/commit/11ede96f59f611ede596a1335e896b1fef4fb5b2\n\nIt internally calls Consensus::CheckBlockHeader (quite cheap with no\ncontext required) and Consensus::ContextualCheckBlockHeader (not so\ncheap).\nBitcoin Core never calls (yet) the full verifyHeader at once. It does\nthe cheap tests first and the expensive later. For example,\n\ncall CheckBlockHeader, then CheckBlock (also cheap), then\nContextualCheckBlockHeader and then ContextualCheckBlock.\n\nThe question is, will other implementations want access to these\nnot-full-but-cheap tests?\nIn other words, apart from exposing VerifyHeader that fully validates\nall consensus rules for a header, do we also want to expose\nCheckBlockHeader and ContextualCheckBlockHeader to give more\nflexibility to libconsensus' users?\n\nI think, yes, other implementations will want this for the same DoS\nreasons that Bitcoin Core currently wants them. But it would be nice\nto know what a second person thinks about this.\n\n> Nothing can eliminate all consensus risk, not even a common full node\n> implementation.\n\nIn fact, one thing does: never changing the code again (but the cure\nwould be worse than the illness).\nAgreed, any software changes in the consensus code can cause consensus\nforks (and that's why you don't want to touch libconsensus that much\nonce it's separated).\n\n\n>>> Useful specifications often have two reference implementations. It's the\n>>> idea that there can be only one legitimate implementation that's\n>>> problematic.\n>>\n>> Well, this is where I fear we will never agree. I think \"Bitcoin is\n>> different\" in this reward and you disagree.\n>> Maybe Pieter's explanation is more convincing to you:\n>> https://youtu.be/PxW5D9xCIsc?t=769\n>> Otherwise, I think I'll stop trying convincing you.\n>\n> Maybe I wasn't sufficiently explicit. It is problematic. That is the\n> core issue we are dealing with. That doesn't mean I disagree with the\n> objectives of an independent community consensus library.\n>\n> The premise of the \"one true library\" idea is that there is *no way* to\n> sufficiently test for consensus bugs in any software release. That of\n> course means that each release of the satoshi client poses a significant\n> risk to the network. This risk is presently greater than that posed by\n> other implementations simply because of adoption. That is the basis of\n> the red herring argument:\n\nWell, the \"one true library\" will be much better than the current \"one\ntrue full node\".\nThe \"one true library\" would be the specification of the consensus\nrules, but that doesn't mean you can't fork and modify it however you\nwant.\n\n> The bottom line is that nobody has control over this process. There are,\n> and will always be, a multitude of consensus implementations that intend\n> to target the same coin. Presently there are multiple versions of the\n> satoshi client, and this has produced forks, and will continue to do so.\n\nI get this point, even if the current satoshi client contains the\nconsensus rules specification (and many other things, obviously), that\ndoesn't mean is somehow protected from forking with itself if the\nconsensus code is changed in the wrong way accidentally. But the more\nseparated libconsensus and Bitcoin Core (satoshi client) are, the less\nlikely that changes in Bitcoin Core that weren't supposed to change\nconsensus rules actually do it by accident (like last time with the\nmigration out of bdb).\n\n> Isolating the satoshi consensus checks to an independent library serves\n> not to eliminate that risk, but can reduce it somewhat. Importantly it\n> will allow various implementations to overcome a perception problem,\n> which will improve implementation diversity and developer participation.\n\nI think alternative implementations using a full libconsensus can\nincrease their adoption a lot, since they become just as vulnerable to\nconsensus forks as Bitcoin Core (instead of more vulnerable like now).\n\n>>>> I believe that's the only point where we fundamentally disagree, but\n>>>> it shouldn't be a barrier in our common goal of taking \"power\" away\n>>>> from Bitcoin Core development. If we're successful Bitcoin Core won't\n>>>> have any privileged position with regards to, say, libbitcoin when it\n>>>> comes to deciding consensus rules changes.\n>>>\n>>> I don't think we disagree on anything fundamental. My issues with the\n>>> library were (1) the lack of isolation, (2) the fact that the satoshi\n>>> client wouldn't actually use the library, and (3) backtracking to use\n>>> OpenSSL, which we had recently removed from libbitcoin.\n>>\n>> 1) Working on it\n>\n> For the sake of clarity, this is now a non-issue for us.\n\nYou mean libbitcoin's code is better organized than Bitcoin Core's?\nI don't doubt it. Maybe we can create a full-libbitcoin-libconsensus\nfirst and work on the API there.\n\n>> 2) The Satoshi client has been using all along and it will use it\n>> forever (maybe not through the API, but I don't get what the problem\n>> with that is).\n>\n> Again, I consider this a requirement for us to link directly to it as a\n> library. If the sources are isolated into an independent repo, but the\n> satoshi client is embedding its own copies, one must continue to diff\n> the client sources against the library sources. We are doing this\n> already, so the benefit to having the independent repo is in no longer\n> having to do this.\n\nOh, I see, you don't like that libsecp256k1 is currently a subtree of\nBitcoin Core either for the same reasons, right?\nTo not need to know when the changes in libconsensus are applied in\nBitcoin Core.\nMhmm, once libconsensus is complete, why would you care about it?\nYou just care about the libconsensus version (which doesn't have to\ncoincide with Bitcoin Core versions anymore).\n\n> There are also differences in the build system that can affect outcome.\n> Comparing those differences across repos can be more challenging. For\n> this reason I consider it important to your objective that the satoshi\n> client actually use the library - as I assume it will at some point.\n\nFor the sake of clarity, please say \"use the library's API\". It's\ngoing to use the library one way or another.\n\n> If the satoshi client folks are to maintain a consensus library for the\n> community it's also important to show a commitment to its independence.\n> Dogfooding is of course a software engineering best practice. But there\n> is also the cynical perspective - the independent library in some ways\n> works against an advantage of the satoshi client.\n>\n> I personally don't think the committers are parochial enough to let this\n> become an issue. We are all after something bigger. But if there was\n> push-back against using the library it would be a red flag. So until\n> that point passes I would just maintain our independent library, cloning\n> the sources from the satoshi client.\n\nTo be clear, I don't oppose to \"dogfooding\", it's just clear to me\nthat it will take even longer.\nSo what I don't understand is \"once libbitcoin is complete and ready\nfor us to use, we will keep using our reimplementation of consensus\nuntil Bitcoin Core uses the API as well. If Bitcoin core doesn't use\nthe API, we prefer not to use the library at all and keep having the\nsame consensus risk. We will do what we think it's worse for us until\nBitcoin Core uses the library through the API\".\n\n>> 3) There will be an announce about this soon.\n>\n> Yes, I've seen this as a temporary setback.\n\nAnd we will hopefully migrate the current libconsensus from openSSL to\nlibsecp256k1 soon. So we will be able to enjoy libsecp256k1's\nperformance improvements without risking consensus. One problem less.\n\n>>> Always willing to work with you on it, although we're all busy, and this\n>>> isn't my top priority presently.\n>>\n>> Is it because \"fear of consensus bugs is what keeps people on the\n>> satoshi client\" and you want to keep things this way?\n>\n> No, I see it as less significant to the adoption of libbitcoin-server\n> than other issues we are working on, especially given the existence of\n> libbitcoin-consensus. I also trust you will make progress regardless.\n\nThis was just a joke because you said something similar earlier.\nDon't take it seriously."
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-07-28T08:43:14",
                "message_text_only": "On Thu, Jul 23, 2015 at 04:30:06PM +0200, Jorge Tim\u00f3n via bitcoin-dev wrote:\n\n> I think there were some misunderstandings in our previous conversation\n> about this topic.\n> I completely agree with having a separated repository for libconsensus\n> (that's the whole point, alternative implementations can be\n> consensus-safe by using it, and in the event of a schism fork[1], they\n> can fork just that smaller project without having to relay on Bitcoin\n> Core [satoshi] at all).\n\nIndeed.\n\n> But I thought you also wanted Bitcoin Core to use libconsensus instead\n> of just having a subtree/subrepository like it currently does with\n> libsecp256k1.\n> I'm not sure if that would ever be accepted, but in any case we're\n> certainly far away from that goal. Here are some things that need to\n> happen first:\n\nI don't see any reason why Bitcoin Core would not use the consensus library. Eating our own dogfood and such.\n\nBiggest risk, as I've said before, is that the refactoring loading to a (more complete) consensus library will result in code that is no longer bug-for-bug compatible with previous versions, thus defeating its entire purpose and introducing fork risk.\n\nIf that can be avoided - for example by going from here to there using pure code moves, as you're trying to do - I'm all for it.\n\n> 2) Finish libconsensus's API: expose more things than VerifyScript, at\n> the very least, also expose VerifyTx, VerifyHeader and VerifyBlock.\n> Feedback from alternative implementations like libbitcoin is extremely\n> valuable here. Some related closed-for-now PRs:\n\nAgreed.\n\n> 3) Move libconsensus to a separate repository as a\n> subtree/subrepository of Bitcoin Core.\n\nIf the rest is done, this is the easy part :)\n\n> Unfortunately and ironically again, safer, small and incremental\n> changes are less interesting for reviewers.\n> For example, I've been trying to move consensus code to the consensus\n> folder for a long time. The correctness of a MOVEONLY change is\n> trivial to review for anyone who knows how to copy/paste in its\n> favorite editor and how to use git diff, but will I ever get answers\n> to my questions in [1]?\n\nCode review capacity is still our greatest bottleneck.\nAnd I don't see any way out of that, unfortunately.\n\n> I know there's many people who really care about this, Cory Fields,\n> Wladimir and Pieter Wuille to name a few have reviewed many of this\n> changes (I've just got used to publicly whine about lack of review on\n> this front and policy encapsulation [very related fronts] as an\n> attempt to get some attention: not always, but begging for review\n> actually works some times).\n\nI do really care about this.\n\nWladimir"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-28T10:09:22",
                "message_text_only": "On Tue, Jul 28, 2015 at 10:43 AM, Wladimir J. van der Laan\n<laanwj at gmail.com> wrote:\n> On Thu, Jul 23, 2015 at 04:30:06PM +0200, Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> But I thought you also wanted Bitcoin Core to use libconsensus instead\n>> of just having a subtree/subrepository like it currently does with\n>> libsecp256k1.\n>> I'm not sure if that would ever be accepted, but in any case we're\n>> certainly far away from that goal. Here are some things that need to\n>> happen first:\n>\n> I don't see any reason why Bitcoin Core would not use the consensus library. Eating our own dogfood and such.\n\nAs explained to Eric, it's not that I don't want Bitcoin Core to use\nfuture-libconsensu through the API instead of a subtree: it's just\nthat that's more long-term and more work. And I don't see why other\nimplementations should really care about it.\n\n> Biggest risk, as I've said before, is that the refactoring loading to a (more complete) consensus library will result in code that is no longer bug-for-bug compatible with previous versions, thus defeating its entire purpose and introducing fork risk.\n>\n> If that can be avoided - for example by going from here to there using pure code moves, as you're trying to do - I'm all for it.\n\nWell, pure movements will not be enough, parameters will have to\nchange, incompatible dependencies have to be removed (ie util.h which\ncontains globals), etc.\nBut yes, I think we can do it with only low-risk and easy-to-review commits.\n\n>> 3) Move libconsensus to a separate repository as a\n>> subtree/subrepository of Bitcoin Core.\n>\n> If the rest is done, this is the easy part :)\n\nAnd still, this doesn't require Bitcoin Core to use the API, a subtree\nis enough at first.\nThis \"easy step\" doesn't guarantee that Bitcoin Core is using\nfuture-libconsensus' API.\n\n> Code review capacity is still our greatest bottleneck.\n> And I don't see any way out of that, unfortunately.\n\nI really think these code separations help with this (ie there are\nmany more people in the world with enough knowledge to review the qt\nor even policy parts than there's people able to review consensus\nchanges).\n\n> I do really care about this.\n\nI know and I said so."
            }
        ],
        "thread_summary": {
            "title": "Libconsensus separated repository (was Bitcoin Core and hard forks)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Milly Bitcoin",
                "Jorge Tim\u00f3n",
                "Eric Voskuil",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 61460
        }
    },
    {
        "title": "[bitcoin-dev] Electrum Server Speed Test",
        "thread_messages": [
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-23T15:56:05",
                "message_text_only": "Similar to the Bitcoin Node Speed Test, this is a quick quantitative look at how the Electrum server software handles under load. The Electrum wallet is extremely popular, and the distributed servers which power it are all hosted by volunteers without budget. The server requires a fully indexed Bitcoin Core daemon running, and produces sizable external index in order to allow SPV clients to quickly retrieve their history. \n\n    3.9G    electrum/utxo\n    67M     electrum/undo\n    19G     electrum/hist\n    1.4G    electrum/addr\n    24G     electrum/\n\nBased on my own logs produced by the electrum-server console, it takes this server (Xeon, lots of memory, 7200 RPM RAID) approximately 3.7 minutes per megabyte of block to process into the index. This seems to hold true through the 10 or so blocks I have in my scroll buffer, the contents of blocks seem to be of approximately the same processing load. Continuing this trend with the current inter-block time of 9.8 minutes, an electrum-server instance running on modest-high end dedicated server is able to support up to 2.64 MB block sizes before permanently falling behind the chain."
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-07-23T17:18:59",
                "message_text_only": "I have concerns about the performance of the Electrum server software as\nwell.  It seems to load data one block at a time (which normally makes\nsense) and I think it is even single threaded on transactions inside the\nblock.\n\nTo try to addresses these issues, I made my own implementation of the\nelectrum server.  It doesn't support UTXO (yet) but happily interacts with\nall the clients I've tested.  It is heavily multithreaded, uses mongodb as\na key value store and bitcoinj for block and transaction parsing.\n\nhttps://github.com/fireduck64/jelectrum\n\nYou can hit a running instance at:\nb.1209k.com:50002:s\nor\nb.1209k.com:50001:t\n\nA synced node uses 347G of mongodb storage.\n\nHere are the recent blocks imported, with number of transactions and import\ntime.\nhttp://pastebin.com/cfW3C2L6\nThese times are based on having mongodb on SSD.\nThe CPU is 8 core Intel(R) Xeon(R) CPU E5430  @ 2.66GHz\n\nI'd be happy to help with anything you need to evaluate it.\n\n\nOn Thu, Jul 23, 2015 at 9:01 AM Slurms MacKenzie via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Similar to the Bitcoin Node Speed Test, this is a quick quantitative look\n> at how the Electrum server software handles under load. The Electrum wallet\n> is extremely popular, and the distributed servers which power it are all\n> hosted by volunteers without budget. The server requires a fully indexed\n> Bitcoin Core daemon running, and produces sizable external index in order\n> to allow SPV clients to quickly retrieve their history.\n>\n>     3.9G    electrum/utxo\n>     67M     electrum/undo\n>     19G     electrum/hist\n>     1.4G    electrum/addr\n>     24G     electrum/\n>\n> Based on my own logs produced by the electrum-server console, it takes\n> this server (Xeon, lots of memory, 7200 RPM RAID) approximately 3.7 minutes\n> per megabyte of block to process into the index. This seems to hold true\n> through the 10 or so blocks I have in my scroll buffer, the contents of\n> blocks seem to be of approximately the same processing load. Continuing\n> this trend with the current inter-block time of 9.8 minutes, an\n> electrum-server instance running on modest-high end dedicated server is\n> able to support up to 2.64 MB block sizes before permanently falling behind\n> the chain.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/2fe297d2/attachment-0001.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-07-23T17:28:12",
                "message_text_only": "Great data points, but isn't this an argument for improving Electrum Server's database performance, not for holding Bitcoin back?\n\n(Nice alias, by the way. Whimmy wham wham wozzle!)\n\n\nOn Thursday, 23 July 2015, at 5:56 pm, Slurms MacKenzie via bitcoin-dev wrote:\n> Similar to the Bitcoin Node Speed Test, this is a quick quantitative look at how the Electrum server software handles under load. The Electrum wallet is extremely popular, and the distributed servers which power it are all hosted by volunteers without budget. The server requires a fully indexed Bitcoin Core daemon running, and produces sizable external index in order to allow SPV clients to quickly retrieve their history. \n> \n>     3.9G    electrum/utxo\n>     67M     electrum/undo\n>     19G     electrum/hist\n>     1.4G    electrum/addr\n>     24G     electrum/\n> \n> Based on my own logs produced by the electrum-server console, it takes this server (Xeon, lots of memory, 7200 RPM RAID) approximately 3.7 minutes per megabyte of block to process into the index. This seems to hold true through the 10 or so blocks I have in my scroll buffer, the contents of blocks seem to be of approximately the same processing load. Continuing this trend with the current inter-block time of 9.8 minutes, an electrum-server instance running on modest-high end dedicated server is able to support up to 2.64 MB block sizes before permanently falling behind the chain. \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-07-23T17:41:17",
                "message_text_only": "I think our friendly original party worm is just trying to evaluate where\nwe are currently so arguments can be based on data.\n\nI would tend to agree that there are performance improvements to be made\nand would rather do that work than limit the block size.\n\n\n\n\nOn Thu, Jul 23, 2015 at 10:28 AM Matt Whitlock via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Great data points, but isn't this an argument for improving Electrum\n> Server's database performance, not for holding Bitcoin back?\n>\n> (Nice alias, by the way. Whimmy wham wham wozzle!)\n>\n>\n> On Thursday, 23 July 2015, at 5:56 pm, Slurms MacKenzie via bitcoin-dev\n> wrote:\n> > Similar to the Bitcoin Node Speed Test, this is a quick quantitative\n> look at how the Electrum server software handles under load. The Electrum\n> wallet is extremely popular, and the distributed servers which power it are\n> all hosted by volunteers without budget. The server requires a fully\n> indexed Bitcoin Core daemon running, and produces sizable external index in\n> order to allow SPV clients to quickly retrieve their history.\n> >\n> >     3.9G    electrum/utxo\n> >     67M     electrum/undo\n> >     19G     electrum/hist\n> >     1.4G    electrum/addr\n> >     24G     electrum/\n> >\n> > Based on my own logs produced by the electrum-server console, it takes\n> this server (Xeon, lots of memory, 7200 RPM RAID) approximately 3.7 minutes\n> per megabyte of block to process into the index. This seems to hold true\n> through the 10 or so blocks I have in my scroll buffer, the contents of\n> blocks seem to be of approximately the same processing load. Continuing\n> this trend with the current inter-block time of 9.8 minutes, an\n> electrum-server instance running on modest-high end dedicated server is\n> able to support up to 2.64 MB block sizes before permanently falling behind\n> the chain.\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/947413eb/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2015-07-23T17:58:52",
                "message_text_only": "There is some room for optimization in the Electrum server:\n - the utxo database (patricia tree) should be made a binary tree.\n - the server is written in python, which is slow.\n\nI am not too worried about the short-term; a block takes on average 15s\nto process on my server. For example, here are the last blocks in my log:\n\n[23/07/2015-17:11:57] catch_up: block 366604 (0.145s 27.278s)\n[23/07/2015-17:37:55] catch_up: block 366605 (0.126s 24.453s)\n[23/07/2015-17:50:23] catch_up: block 366606 (0.133s 21.666s)\n[23/07/2015-18:03:22] catch_up: block 366607 (0.110s 31.680s)\n[23/07/2015-18:11:14] catch_up: block 366608 (0.093s 18.269s)\n[23/07/2015-18:26:38] catch_up: block 366609 (0.115s 27.925s)\n[23/07/2015-18:29:07] catch_up: block 366610 (0.062s 8.163s)\n[23/07/2015-18:44:18] catch_up: block 366611 (0.118s 21.294s)\n[23/07/2015-18:52:14] catch_up: block 366612 (0.075s 12.535s)\n[23/07/2015-18:58:54] catch_up: block 366613 (0.100s 17.857s)\n[23/07/2015-19:04:18] catch_up: block 366614 (0.061s 11.174s)\n[23/07/2015-19:10:31] catch_up: block 366615 (0.064s 10.151s)\n[23/07/2015-19:11:04] catch_up: block 366616 (0.035s 2.962s)\n[23/07/2015-19:19:53] catch_up: block 366617 (0.081s 13.125s)\n[23/07/2015-19:25:23] catch_up: block 366618 (0.037s 8.377s)\n[23/07/2015-19:28:08] catch_up: block 366619 (0.044s 3.984s)\n[23/07/2015-19:30:36] catch_up: block 366620 (0.051s 6.105s)\n[23/07/2015-19:40:05] catch_up: block 366621 (0.058s 14.632s)\n[23/07/2015-19:42:10] catch_up: block 366622 (0.040s 4.143s)\n\nThat server is a Hetzner EX40 box, rented for 50 eur/month. Of course if\nyou run the electrum server on a cheap VPS, performance might not be as\ngood.\n\n\n\nLe 23/07/2015 17:56, Slurms MacKenzie via bitcoin-dev a \u00e9crit :\n> Similar to the Bitcoin Node Speed Test, this is a quick quantitative look at how the Electrum server software handles under load. The Electrum wallet is extremely popular, and the distributed servers which power it are all hosted by volunteers without budget. The server requires a fully indexed Bitcoin Core daemon running, and produces sizable external index in order to allow SPV clients to quickly retrieve their history. \n> \n>     3.9G    electrum/utxo\n>     67M     electrum/undo\n>     19G     electrum/hist\n>     1.4G    electrum/addr\n>     24G     electrum/\n> \n> Based on my own logs produced by the electrum-server console, it takes this server (Xeon, lots of memory, 7200 RPM RAID) approximately 3.7 minutes per megabyte of block to process into the index. This seems to hold true through the 10 or so blocks I have in my scroll buffer, the contents of blocks seem to be of approximately the same processing load. Continuing this trend with the current inter-block time of 9.8 minutes, an electrum-server instance running on modest-high end dedicated server is able to support up to 2.64 MB block sizes before permanently falling behind the chain. \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-07-23T18:21:17",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nDoes \"to process into the index\" include time for transport and/or\nblock validation (presumably by bitcoind) or this this exclusively the\ntime for Electrum Server to index a validated block?\n\ne\n\nOn 07/23/2015 08:56 AM, Slurms MacKenzie via bitcoin-dev wrote:\n\n> Similar to the Bitcoin Node Speed Test, this is a quick\n> quantitative\nlook at how the Electrum server software handles under load. The\nElectrum wallet is extremely popular, and the distributed servers\nwhich power it are all hosted by volunteers without budget. The server\nrequires a fully indexed Bitcoin Core daemon running, and produces\nsizable external index in order to allow SPV clients to quickly\nretrieve their history.\n> \n> \n> 3.9G    electrum/utxo 67M     electrum/undo 19G     electrum/hist \n> 1.4G    electrum/addr 24G     electrum/\n> \n> \n> Based on my own logs produced by the electrum-server console, it\ntakes this server (Xeon, lots of memory, 7200 RPM RAID) approximately\n3.7 minutes per megabyte of block to process into the index. This\nseems to hold true through the 10 or so blocks I have in my scroll\nbuffer, the contents of blocks seem to be of approximately the same\nprocessing load. Continuing this trend with the current inter-block\ntime of 9.8 minutes, an electrum-server instance running on\nmodest-high end dedicated server is able to support up to 2.64 MB\nblock sizes before permanently falling behind the chain.\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVsTCdAAoJEDzYwH8LXOFOLpgIAIAe5QBTTgpe2kyYrqamUKNI\nuasljmNQi3In/rdxNm9Ga+vwTsBg7f4v/xHVrQYAGxdjjZxs0h9bOmAvuc+p2fad\nZeHC/vewrtLxB2aVj5JVbSk5ik57ePyk3SmghTpGMAhgTIWkceIrxR+Fq7TFOlqn\nNGnTuBSSsGL9nY57hIFwMJb2CKdPwMVLL/0gjVQ9Llqt+Fu31eSRhDzHOvJnkofO\nxwVrVGgST2GE73np3WA0jvzRHjFgsPnQknhjLGQiTgDKsKL0BywE9/Vke2zVNyP7\ncAlTQoScEal++9u0h3D475lsxv43V0Rxafc7W0a/OyfXujJ2AlixgV8PlLwhvaY=\n=DK5K\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-23T18:26:41",
                "message_text_only": "That's purely the time on the wall for electrum-server, validation in bitcoind happens before. As ThomasV has pointed out it is significantly faster with a solid state disk (but much more expensive to operate), if we get to that point it'll only be expensive servers with lots of SSD space which are able to keep up with the current software. \n\nI was mostly trying to make a point about other software being impacted in ways which aren't really discussed, rather than a specific dig about electrum-server. I should have made that more clear. \n\n\n> Sent: Thursday, July 23, 2015 at 9:21 PM\n> From: \"Eric Voskuil\" <eric at voskuil.org>\n> To: \"Slurms MacKenzie\" <slurms at gmx.us>, bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Electrum Server Speed Test\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> Does \"to process into the index\" include time for transport and/or\n> block validation (presumably by bitcoind) or this this exclusively the\n> time for Electrum Server to index a validated block?\n> \n> e\n>"
            }
        ],
        "thread_summary": {
            "title": "Electrum Server Speed Test",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Thomas Voegtlin",
                "Slurms MacKenzie",
                "Matt Whitlock",
                "Joseph Gleason \u2448"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 13815
        }
    },
    {
        "title": "[bitcoin-dev] BIP draft: Hardfork bit",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-23T16:23:21",
                "message_text_only": "Please feel free to comment, for technical issues and language\n\nBIP: ??\nTitle: Hardfork bit\nAuthor: jl2012 <jl2012 at xbt.hk>\nStatus: Draft\nType: Standard Track\nCreated: 2015-07-23\n\nAbstract\n\nThis document specifies a proposed change to the semantics of the most  \nsignificant bit of the \u201cversion\u201d field in Bitcoin block headers, as a  \nmechanism to indicate a hardfork is deployed. It alleviates certain  \nrisks related to a hardfork by introducing an explicit \u201cpoint of no  \nreturn\u201d in the blockchain. This is a general mechanism which should be  \nemployed by any planned hardfork in the future.\n\nMotivation\n\nHardforks in Bitcoin are usually considered as difficult and risky, because:\n\n1) Hardforks require not only support of miners, but also, most  \nimportantly, supermajority support of the Bitcoin economy. As a  \nresult, softfork deployment mechanisms described in BIP 34 or BIP XX  \n\u201cVersion bits\u201d (https://gist.github.com/sipa/bf69659f43e763540550) are  \nnot enough for introducing hardforks safely.\n\n2) Full nodes and SPV nodes following original consensus rules may not  \nbe aware of the deployment of a hardfork. They may stick to an  \neconomic-minority fork and unknowingly accept devalued legacy tokens.\n\n3) In the case which the original consensus rules are also valid under  \nthe new consensus rules, users following the new chain may  \nunexpectedly reorg back to the original chain if it grows faster than  \nthe new one. People may find their confirmed transactions becoming  \nunconfirmed and lose money.\n\nThe first issue involves soliciting support for a hardfork proposal,  \nwhich is more a political topic than a technical one. This proposal  \naims at alleviating the risks related to the second and third issues.  \nIt should be employed by any planned hardfork in the future.\n\nDefinitions\n\nSee BIP YY \u201cMotivation and deployment of consensus rules changes\u201d\nhttps://github.com/jtimon/bips/blob/bip-forks/bip-forks.org\n\nSpecification\n\nHardfork bit: The most significant bit in nVersion is defined as the  \nhardfork bit. Currently, blocks with this header bit setting to 1 are  \ninvalid, since BIP34 interprets nVersion as a signed number and  \nrequires it to be >=2 (with BIP66, >=3). Among the 640 bits in the  \nblock header, this is the only one which is fixed and serves no  \npurpose, and therefore the best way to indicate the deployment of a  \nhardfork.\n\nFlag block: Any planned hardfork must have one and only one flag block  \nwhich is the \u201cpoint of no return\u201d. To ensure monotonicity, flag block  \nshould be determined by block height, or as the first block with  \nGetMedianTimePast() greater than a threshold. Other mechanisms could  \nbe difficult for SPV nodes to follow. The height/time threshold could  \nbe a predetermined value or relative to other events (e.g. 1000 blocks  \n/ 10 days after 75% of miner support). The exact mechanism is out of  \nthe scope of this BIP. No matter what mechanism is used, the threshold  \nis consensus critical. It must be publicly verifiable with only  \nblockchain data and the programme source code, and preferably  \nSPV-friendly.\n\nFlag block is constructed in a way that nodes with the original  \nconsensus rules must reject. On the other hand, nodes with the new  \nconsensus rules must reject a block if it is not a flag block while it  \nis supposed to be. To achieve these goals, the flag block must 1) have  \nthe hardfork bit setting to 1, 2) include a short predetermined unique  \ndescription of the hardfork anywhere in its coinbase, and 3) follow  \nany other rules required by the hardfork. If these conditions are not  \nfully satisfied, upgraded nodes shall reject the block.\n\nThe hardfork bit must be turned off in the decedents of the flag  \nblock, until the deployment of the next hardfork. The requirement of  \ncoinbase message is also limited to the flag block. In the rare case  \nthat multiple hardforks share the same flag block, the coinbase shall  \ninclude all relevant messages and the order/position of the messages  \nshall not be consensus critical.\n\nAlthough a hardfork is officially deployed after the flag block, the  \nexact behavioural change is out of the scope of this BIP. For example,  \na hardfork may not be fully active until certain time after the flag  \nblock.\n\nAutomatic warning system: When a flag block is found on the network,  \nfull nodes and SPV nodes should look into its coinbase. They should  \nalert their users and/or stop accepting incoming transactions if it is  \nan unknown hardfork. It should be noted that the warning system could  \nbecome a DoS vector if the attacker is willing to give up the block  \nreward. Therefore, the warning may be issued only if a few blocks are  \nbuilt on top of the flag block in a reasonable time frame. This will  \nin turn increase the risk in case of a real planned hardfork so it is  \nup to the wallet programmers to decide the optimal strategy. Human  \nwarning system (e.g. the emergency alert system in Bitcoin Core) could  \nfill the gap.\n\nCompatibility\n\nAs a mechanism to indicate hardfork deployment, this BIP breaks  \nbackward compatibility intentionally. However, without further changes  \nin the block header format, full nodes and SPV nodes could still  \nverify the PoW of a flag block and its descendants.\n\nThis proposal is also compatible with the BIP XX \u201cVersion bits\u201d. The  \nversion bits mechanism could be employed to measure miner support  \ntowards a hardfork proposal, and to determine the height or time  \nthreshold of the flag block. Also, miners of the flag block may still  \ncast votes for other concurrent softfork or hardfork proposals as  \nnormal.\n\nAfter the flag block is generated, a miner may support either fork but  \nnot both. It is not possible for miners in one fork to attack or  \novertake the other fork because the forks are mutually exclusive."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-07-23T17:59:40",
                "message_text_only": "On Thu, Jul 23, 2015 at 5:23 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 2) Full nodes and SPV nodes following original consensus rules may not be\n> aware of the deployment of a hardfork. They may stick to an\n> economic-minority fork and unknowingly accept devalued legacy tokens.\n>\n\nThis change means that they are kicked off the main chain immediately when\nthe fork activates.\n\nThe change is itself a hard fork.  Clients have be updated to get the\nbenefits.\n\n3) In the case which the original consensus rules are also valid under the\n> new consensus rules, users following the new chain may unexpectedly reorg\n> back to the original chain if it grows faster than the new one. People may\n> find their confirmed transactions becoming unconfirmed and lose money.\n>\n\nI don't understand the situation here.  Is the assumption of a group of\nminers suddenly switching (for example, they realise that they didn't\nintend to support the new rules)?\n\n>\n> Flag block is constructed in a way that nodes with the original consensus\n> rules must reject. On the other hand, nodes with the new consensus rules\n> must reject a block if it is not a flag block while it is supposed to be.\n> To achieve these goals, the flag block must 1) have the hardfork bit\n> setting to 1, 2) include a short predetermined unique description of the\n> hardfork anywhere in its coinbase, and 3) follow any other rules required\n> by the hardfork. If these conditions are not fully satisfied, upgraded\n> nodes shall reject the block.\n>\n\nOk, so set the bit and then include BIP-GIT-HASH of the canonical BIP on\ngithub in the coinbase?\n\nSince it is a hard fork, the version field could be completely\nre-purposed.  Set the bit and add the BIP number as the lower bits in the\nversion field.  This lets SPV clients check if they know about the hard\nfork.\n\nThere network protocol could be updated to add getdata support for asking\nfor a coinbase only merkleblock.  This would allow SPV clients to obtain\nthe coinbase.\n\nAutomatic warning system: When a flag block is found on the network, full\n> nodes and SPV nodes should look into its coinbase. They should alert their\n> users and/or stop accepting incoming transactions if it is an unknown\n> hardfork. It should be noted that the warning system could become a DoS\n> vector if the attacker is willing to give up the block reward. Therefore,\n> the warning may be issued only if a few blocks are built on top of the flag\n> block in a reasonable time frame. This will in turn increase the risk in\n> case of a real planned hardfork so it is up to the wallet programmers to\n> decide the optimal strategy. Human warning system (e.g. the emergency alert\n> system in Bitcoin Core) could fill the gap.\n>\n\nIf the rule was that hard forks only take effect 100 blocks after the flag\nblock, then this problem is eliminated.\n\nEmergency hard forks may still have to take effect immediately though, so\nit would have to be a custom not a rule.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/3e7c184a/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-23T19:26:33",
                "message_text_only": "Quoting Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:\n\n> On Thu, Jul 23, 2015 at 5:23 PM, jl2012 via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> 2) Full nodes and SPV nodes following original consensus rules may not be\n>> aware of the deployment of a hardfork. They may stick to an\n>> economic-minority fork and unknowingly accept devalued legacy tokens.\n>>\n>\n> This change means that they are kicked off the main chain immediately when\n> the fork activates.\n>\n> The change is itself a hard fork.  Clients have be updated to get the\n> benefits.\n\nI refrain from calling it the \"main chain\". I use \"original chain\" and  \n\"new chain\" instead as I make no assumption about the distribution of  \nmining power. This BIP still works when we have a 50/50 hardfork. The  \nmain point is to protect all users on both chains, and allow them to  \nmake an informed choice.\n\n\n> 3) In the case which the original consensus rules are also valid under the\n>> new consensus rules, users following the new chain may unexpectedly reorg\n>> back to the original chain if it grows faster than the new one. People may\n>> find their confirmed transactions becoming unconfirmed and lose money.\n>>\n>\n> I don't understand the situation here.  Is the assumption of a group of\n> miners suddenly switching (for example, they realise that they didn't\n> intend to support the new rules)?\n>\n\nAgain, as I make no assumption about the mining power distribution,  \nthe new chain may actually have less miner support. Without any  \nprotection (AFAIK, for example, BIP100, 101, 102), the weaker new  \nchain will get 51%-attacked by the original chain constantly.\n\n\n>>\n>> Flag block is constructed in a way that nodes with the original consensus\n>> rules must reject. On the other hand, nodes with the new consensus rules\n>> must reject a block if it is not a flag block while it is supposed to be.\n>> To achieve these goals, the flag block must 1) have the hardfork bit\n>> setting to 1, 2) include a short predetermined unique description of the\n>> hardfork anywhere in its coinbase, and 3) follow any other rules required\n>> by the hardfork. If these conditions are not fully satisfied, upgraded\n>> nodes shall reject the block.\n>>\n>\n> Ok, so set the bit and then include BIP-GIT-HASH of the canonical BIP on\n> github in the coinbase?\n\nI guess the git hash is not known until the code is written? (correct  \nme if I'm wrong) As the coinbase message is consensus-critical, it  \nmust be part of the source code and therefore you can't use any kind  \nof hash of the code itself (a chicken-and-egg problem)\n\n> Since it is a hard fork, the version field could be completely\n> re-purposed.  Set the bit and add the BIP number as the lower bits in the\n> version field.  This lets SPV clients check if they know about the hard\n> fork.\n\nThis may not be compatible with the other version bits voting mechanisms.\n\n> There network protocol could be updated to add getdata support for asking\n> for a coinbase only merkleblock.  This would allow SPV clients to obtain\n> the coinbase.\n\nYes\n\n\n> Automatic warning system: When a flag block is found on the network, full\n>> nodes and SPV nodes should look into its coinbase. They should alert their\n>> users and/or stop accepting incoming transactions if it is an unknown\n>> hardfork. It should be noted that the warning system could become a DoS\n>> vector if the attacker is willing to give up the block reward. Therefore,\n>> the warning may be issued only if a few blocks are built on top of the flag\n>> block in a reasonable time frame. This will in turn increase the risk in\n>> case of a real planned hardfork so it is up to the wallet programmers to\n>> decide the optimal strategy. Human warning system (e.g. the emergency alert\n>> system in Bitcoin Core) could fill the gap.\n>>\n>\n> If the rule was that hard forks only take effect 100 blocks after the flag\n> block, then this problem is eliminated.\n>\n> Emergency hard forks may still have to take effect immediately though, so\n> it would have to be a custom not a rule.\n\nThe flag block itself is a hardfork already and old miners will not  \nmine on top of the flag block. So your suggestion won't be helpful in  \nthis situation.\n\nTo make it really meaningful, we need to consume one more bit of the  \n'version' field (\"notice bit\"). Supporting miners will turn on the  \nnotice bit, and include a message in coinbase (\"notice block\"). When a  \nfull node/SPV node find many notice blocks with the same coinbase  \nmessage, they could bet that the subsequent flag block is a legit one.  \nHowever, an attacker may still troll you by injecting an invalid flag  \nblock after many legit notice blocks. So I'm not sure if it is worth  \nthe added complexity."
            },
            {
                "author": "Gareth Williams",
                "date": "2015-07-24T01:17:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n>I don't understand the situation here.  Is the assumption of a group of\n>miners suddenly switching (for example, they realise that they didn't\n>intend to support the new rules)?\n\nOr they're economically rational miners, and a large difficulty decrease on the original chain, without an equally large decrease in the value of original chain tokens, has made it profitable to switch?\n\nIt's dangerous to assume all miners will continue to support the side they have initially signaled. They're only invested in the chain they mine for a short time (until coinbase maturity.)\n\nIf both sides if a fork retain value you'd expect mining to redistribute itself WRT short term profitability at every difficulty adjustment, irrespective of initially signaled support for the fork.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFABAEBCgAqBQJVsZIuIxxHYXJldGggV2lsbGlhbXMgPGdhY3J1eEBnbWFpbC5j\nb20+AAoJEEY5w2E3jkVEN7YIAIlgaAahHCssIEXYzqB1gRKYRP4fPsq8NtOMrkki\ndc1gfKmprlPDShFvu2Hn5L8amP51ouRpmDSJwNyU//1DyU5p1tcWTAtkHr6SY7TY\nuJtcPMM03BUD2i3rXSY4FbpWn8aOoUnQrkYFhx5Y/Aru+l47C0I5KF4fgMag7FhI\nRxkTFylvq7uWvu0QCUkVh1MgohNxMqIGAvE5t8yoj5LxrNzOq95TcOGwFngWCdJM\na5BADFjq7v4j/+cP748ZTPcLUusTQTwEuIsCIhpwwiKADsy1FKjmAdHhKTff/6wn\ncpNYvwimKNSSESCwzAnxekaJCTXpEOWQV7/6FO9vJbTMKw8=\n=/hJk\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BIP draft: Hardfork bit",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk",
                "Tier Nolan",
                "Gareth Williams"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 15067
        }
    },
    {
        "title": "[bitcoin-dev] BIP Draft: Minimum Viable TXIn Hash",
        "thread_messages": [
            {
                "author": "Jeremy Rubin",
                "date": "2015-07-23T20:12:19",
                "message_text_only": "Please see the following draft BIP which should decrease the amount of\nbytes needed per transaction. This is very much a draft BIP, as the design\nspace for this type of improvement is large.\n\nThis BIP can be rolled out by a soft fork.\n\nImprovements are around 12% for  standard \"one in two out\" txn, and even\nmore with more inputs hashes.\n\nhttps://gist.github.com/JeremyRubin/e175662d2b8bf814a688\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/2088f57c/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-07-25T19:51:53",
                "message_text_only": "On Thursday, July 23, 2015 8:12:19 PM Jeremy Rubin via bitcoin-dev wrote:\n> Please see the following draft BIP which should decrease the amount of\n> bytes needed per transaction. This is very much a draft BIP, as the design\n> space for this type of improvement is large.\n> \n> This BIP can be rolled out by a soft fork.\n> \n> Improvements are around 12% for  standard \"one in two out\" txn, and even\n> more with more inputs hashes.\n> \n> https://gist.github.com/JeremyRubin/e175662d2b8bf814a688\n\nThis looks like just a p2p protocol optimisation, which doesn't even need a \nsoftfork. You do need to document the suggested protocol changes more \nspecifically, however.\n\nLuke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-25T22:05:28",
                "message_text_only": ">From your draft:\n\n\"It could also more easily, ignoring the difficulties of a hard-fork\nperiod, be rolled out as a hard fork to avoid hokey-pokey.[1]\n[...]\n\n[1] Because someone asked... The Txid Hokey Pokey: you put the tail\nend in, you put the tail end out, you put the tail end in and you hash\nit all about you do the hokey pokey and you solve the block difficulty\nbound, that's what it's all about!\"\n\nReading this, the first thing that comes to mind is \"What the h#$% is\na hokey pokey?\"\n\n>From https://en.wikipedia.org/wiki/Hokey_cokey : \"It is well known in\nEnglish-speaking countries.\".\nThat explains why I haven't heard about it in my whole life.\nIt may things clearer for people in these countries, but at least to\nme, it just makes things more complicated: the analogy (that I still\ndon't understand after skimming the wikipedia article) doesn't allow\nme to understand the actual explanation.\n\nCan you please rewrite that with a more culturally-neutral analogy (or\njust no analogy and just leave the explanation)?\n\nOn Sat, Jul 25, 2015 at 9:51 PM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thursday, July 23, 2015 8:12:19 PM Jeremy Rubin via bitcoin-dev wrote:\n>\n> This looks like just a p2p protocol optimisation, which doesn't even need a\n> softfork. You do need to document the suggested protocol changes more\n> specifically, however.\n\nI think his goal is to make it a consensus change so that confirmed\ntransactions can also use less space in blocks.\nBut, yes, I don't think it gives you anything to enforce it as a\nconsensus rule (all you care about is the savings when transmitting\nthe transactions and blocks).\nIn fact, I'm not sure how would that work, would the \"compact tx\"\nproduce a different hash than the non-compact one?"
            }
        ],
        "thread_summary": {
            "title": "BIP Draft: Minimum Viable TXIn Hash",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Jeremy Rubin"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3035
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Roadmap 2015, or \"If We Do Nothing\" Analysis",
        "thread_messages": [
            {
                "author": "Dave Scotese",
                "date": "2015-07-24T02:57:12",
                "message_text_only": "I used Google to establish that there is not already a post from 2015 that\nmentions \"roadmap\" in the subject line.  Such would be a good skeleton for\nanyone new to the list (like me).\n\n1. Increase the 7 Tx per second - by increasing block size.\n\n2. Do something about the trend toward centralization.  This is really two\nissues in my mind:\nA) Mining is falling to an ever shrinking number of businesses with the\ninfrastructure to run a datacenter.\nB) The protocol as it is will soon make common computing machines\ninadequate for running full nodes, and as a result they will not be able to\ncontribute to the ecosystem in meaningful ways.\n\nFeel free to copy and then remove or alter any of that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150723/ea7fd11a/attachment.html>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T03:37:30",
                "message_text_only": "It's worth noting that even massive companies with $30M USD of funding don't run a single Bitcoin Core node, which is somewhat against the general concept people present of companies having an incentive to run their own to protect their own wallet. \n\n\n> Sent:\u00a0Friday, July 24, 2015 at 4:57 AM\n> From:\u00a0\"Dave Scotese via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To:\u00a0bitcoin-dev at lists.linuxfoundation.org\n> Subject:\u00a0[bitcoin-dev] Bitcoin Roadmap 2015, or \"If We Do Nothing\" Analysis\n> \n> B) The protocol as it is will soon make common computing machines inadequate for running full nodes, and as a result they will not be able to contribute to the ecosystem in meaningful ways."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-24T11:38:46",
                "message_text_only": ">\n> It's worth noting that even massive companies with $30M USD of funding\n> don't run a single Bitcoin Core node\n\n\nThis has nothing to do with block sizes, and everything to do with Core not\ndirectly providing the services businesses actually want.\n\nThe whole \"node count is falling because of block sizes\" is nothing more\nthan conjecture presented as fact. The existence of multiple companies who\ncould easily afford to do this but don't because they perceive it as\nvalueless should be a wakeup call there.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/1b990dec/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-24T14:09:13",
                "message_text_only": "(Claim of large bitcoin ecosystem companies without full nodes) this\nsays to me rather we have a need for education: I run a full node\nmyself (intermittently), just for my puny collection of bitcoins.  If\nI ran a business with custody of client funds I'd wake up in a cold\nsweat at night about the security and integrity of the companies full\nnodes, and reconciliation of client funds against them.\n\nHowever I'm not sure the claim is accurate ($30m funding and no full\nnode) but to take the hypothetical that this pattern exists, security\npeople and architects at such companies must insist on the company\nrunning their own full node to depend on and cross check from\notherwise they would be needlessly putting their client's funds at\nrisk.\n\nThe crypto currency security standards document probably covers\nrequirement for fullnode somewhere\nhttps://cryptoconsortium.github.io/CCSS/ - we need some kind of basic\nminimum bar standard for companies to aim for and this seems like a\nreasonable start!\n\nReducing custody in my opinion should also be an aim eg 2 of 2\nmultisig + timelock seems like a more prudent approach, transaction\nthroughput permitting.  Right now exchange volume wouldnt fit on\nchain, once bitcoin scaling has improved, perhaps it can.  I am\noptimistic that within a year Bitcoin scaling and decentralisation\nwill look much better with current active work on decentralisation,\nlayer 2 scaling solutions.  As part of that I could see a modest\nblocksize increase to smooth out the transition to layer 2.\n\nIn terms of a constructive discussion, I think it's interesting to\ntalk about the root cause and solutions: decentralisation (more\neconomically dependent full nodes, lower miner policy centralisation),\nmore layer 2 work.  People interested in scaling, if they havent,\nshould go read the lightning paper, look at the github and participate\nin protocol or code work.  I think realistically we can have this\nrunning inside of a year.  That significantly changes the dynamic.\nSimilarly a significant part of mining centralisation is artificial\nand work is underway that will improve that.\n\nWhat I mean about decentralisation is if decentralisation simple\nmetrics were in a healthy place, it would be a simple conversation to\nmake use of bandwidth improvements (in the range of 15%/year per Cisco\nnumbers) to get more throughput.  I do think flexcap is interesting as\na way to add one more control variable such that we can have\neconomically validated scaling.  Pushing fees to zero and increasing\ncentralisation to levels that weaken security with economically weak\npayments is probably not desirable.  Without flexcap it seems the next\nbest thing we can do is rely on miners to balance user utility against\nmining revenue, and it seems plausible that they would in extremis but\nto my mind there are factors suggesting this could be problematic\nincrementally: miners have not often been responsive to editing\ndefaults, or reacting to security or soft-fork upgrades; miners may\nhave some conflict of interest of users, eg they could use switching\ncost economics to optimise for miner profit at the expense of user\nutility, or attack each other in selfish-miner or other variants as\nminers are also pitted against each other while being held honest by\neconomically dependent full nodes.\n\nAdam"
            },
            {
                "author": "Simon Liu",
                "date": "2015-07-24T15:22:44",
                "message_text_only": "Would a 1MB increase to 2MB, as outlined in BIP 102, be considered a\n\"modest\" increase?\n\nOn 07/24/2015 07:09 AM, Adam Back via bitcoin-dev wrote:\n> I am\n> optimistic that within a year Bitcoin scaling and decentralisation\n> will look much better with current active work on decentralisation,\n> layer 2 scaling solutions.  As part of that I could see a modest\n> blocksize increase to smooth out the transition to layer 2."
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-24T17:40:39",
                "message_text_only": "On Fri, Jul 24, 2015 at 07:09:13AM -0700, Adam Back via bitcoin-dev wrote:\n> (Claim of large bitcoin ecosystem companies without full nodes) this\n> says to me rather we have a need for education: I run a full node\n> myself (intermittently), just for my puny collection of bitcoins.  If\n> I ran a business with custody of client funds I'd wake up in a cold\n> sweat at night about the security and integrity of the companies full\n> nodes, and reconciliation of client funds against them.\n> \n> However I'm not sure the claim is accurate ($30m funding and no full\n> node) but to take the hypothetical that this pattern exists, security\n> people and architects at such companies must insist on the company\n> running their own full node to depend on and cross check from\n> otherwise they would be needlessly putting their client's funds at\n> risk.\n\nFWIW, blockchain.info is obviously *not* running a full node as their\nwallet was accepting invalid confirmations on transactions caused by the\nrecent BIP66 related fork; blockchain.info has $30m in funding.\n\nCoinbase also was not running a full node not all that long ago, instead\nrunning a custom Ruby implementation that caused their service to go\ndown whenever it forked. (and would have also accepted invalid\nconfirmations) I believe right now they're running that implementation\nbehind a full node however.\n\n> The crypto currency security standards document probably covers\n> requirement for fullnode somewhere\n> https://cryptoconsortium.github.io/CCSS/ - we need some kind of basic\n> minimum bar standard for companies to aim for and this seems like a\n> reasonable start!\n\nActually I've been trying to get the CCSS standard to cover full nodes,\nand have been getting push-back:\n\nhttps://github.com/CryptoConsortium/CCSS/issues/15\n\ntl;dr: Running a full node is *not* required by the standard right now\nat any certification level.\n\nThis is of course completely ridiculous... But I haven't had much much\ntime to put into getting that changed so maybe we just need some better\nexplanations to the others maintaining the standard. That said, if the\nstandard stays that way, obviously I'm going to have to ask to have my\nname taken off it.\n\n> In terms of a constructive discussion, I think it's interesting to\n> talk about the root cause and solutions: decentralisation (more\n> economically dependent full nodes, lower miner policy centralisation),\n> more layer 2 work.  People interested in scaling, if they havent,\n> should go read the lightning paper, look at the github and participate\n> in protocol or code work.  I think realistically we can have this\n> running inside of a year.  That significantly changes the dynamic.\n> Similarly a significant part of mining centralisation is artificial\n> and work is underway that will improve that.\n\nI would point out that lack of understanding of how Bitcoin works, as\nwell as a lack of understanding of security engineering in general, is\nprobably a significant contributor to these problems. Furthermore\nBitcoin and cryptocurrencies in general are still small enough that many\nforseeable low probability but high impact events haven't happened,\nmaking it difficult to explain to non-technical stakeholders why they\nshould be listening to experts rather than charlatans and fools.\n\nAfter a few major centralization related failures have occured, we'll\nhave an easier job here. Unfortunately there's also a good chance we\nonly get one shot at this due to how easy it is to kill PoW systems at\nbirth...\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000014438a428adfcf4d113a09b87e4a552a1608269ff137ef2d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/a3a73338/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T20:28:28",
                "message_text_only": "> On Jul 24, 2015, at 10:40 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Fri, Jul 24, 2015 at 07:09:13AM -0700, Adam Back via bitcoin-dev wrote:\n>> (Claim of large bitcoin ecosystem companies without full nodes) this\n>> says to me rather we have a need for education: I run a full node\n>> myself (intermittently), just for my puny collection of bitcoins.  If\n>> I ran a business with custody of client funds I'd wake up in a cold\n>> sweat at night about the security and integrity of the companies full\n>> nodes, and reconciliation of client funds against them.\n>> \n>> However I'm not sure the claim is accurate ($30m funding and no full\n>> node) but to take the hypothetical that this pattern exists, security\n>> people and architects at such companies must insist on the company\n>> running their own full node to depend on and cross check from\n>> otherwise they would be needlessly putting their client's funds at\n>> risk.\n> \n> FWIW, blockchain.info is obviously *not* running a full node as their\n> wallet was accepting invalid confirmations on transactions caused by the\n> recent BIP66 related fork; blockchain.info has $30m in funding.\n> \n> Coinbase also was not running a full node not all that long ago, instead\n> running a custom Ruby implementation that caused their service to go\n> down whenever it forked. (and would have also accepted invalid\n> confirmations) I believe right now they're running that implementation\n> behind a full node however.\n> \n>> The crypto currency security standards document probably covers\n>> requirement for fullnode somewhere\n>> https://cryptoconsortium.github.io/CCSS/ - we need some kind of basic\n>> minimum bar standard for companies to aim for and this seems like a\n>> reasonable start!\n> \n> Actually I've been trying to get the CCSS standard to cover full nodes,\n> and have been getting push-back:\n> \n> https://github.com/CryptoConsortium/CCSS/issues/15\n> \n> tl;dr: Running a full node is *not* required by the standard right now\n> at any certification level.\n> \n> This is of course completely ridiculous... But I haven't had much much\n> time to put into getting that changed so maybe we just need some better\n> explanations to the others maintaining the standard. That said, if the\n> standard stays that way, obviously I'm going to have to ask to have my\n> name taken off it.\n\nFor the record, there\u2019s pretty much unanimous agreement that running a full node should be a requirement at the higher levels of certification (if not the lower ones as well). I\u2019m not sure exactly what pushback you\u2019re referring to.\n\n\n>> In terms of a constructive discussion, I think it's interesting to\n>> talk about the root cause and solutions: decentralisation (more\n>> economically dependent full nodes, lower miner policy centralisation),\n>> more layer 2 work.  People interested in scaling, if they havent,\n>> should go read the lightning paper, look at the github and participate\n>> in protocol or code work.  I think realistically we can have this\n>> running inside of a year.  That significantly changes the dynamic.\n>> Similarly a significant part of mining centralisation is artificial\n>> and work is underway that will improve that.\n> \n> I would point out that lack of understanding of how Bitcoin works, as\n> well as a lack of understanding of security engineering in general, is\n> probably a significant contributor to these problems. Furthermore\n> Bitcoin and cryptocurrencies in general are still small enough that many\n> forseeable low probability but high impact events haven't happened,\n> making it difficult to explain to non-technical stakeholders why they\n> should be listening to experts rather than charlatans and fools.\n> \n> After a few major centralization related failures have occured, we'll\n> have an easier job here. Unfortunately there's also a good chance we\n> only get one shot at this due to how easy it is to kill PoW systems at\n> birth...\n> \n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000014438a428adfcf4d113a09b87e4a552a1608269ff137ef2d\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/99f69216/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T20:31:46",
                "message_text_only": "Peter, it\u2019s a work in evolution, it\u2019s not complete yet. It\u2019s still missing a bunch of stuff - please feel free to contribute.\n\n> On Jul 24, 2015, at 1:28 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n>> \n>> On Jul 24, 2015, at 10:40 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> On Fri, Jul 24, 2015 at 07:09:13AM -0700, Adam Back via bitcoin-dev wrote:\n>>> (Claim of large bitcoin ecosystem companies without full nodes) this\n>>> says to me rather we have a need for education: I run a full node\n>>> myself (intermittently), just for my puny collection of bitcoins.  If\n>>> I ran a business with custody of client funds I'd wake up in a cold\n>>> sweat at night about the security and integrity of the companies full\n>>> nodes, and reconciliation of client funds against them.\n>>> \n>>> However I'm not sure the claim is accurate ($30m funding and no full\n>>> node) but to take the hypothetical that this pattern exists, security\n>>> people and architects at such companies must insist on the company\n>>> running their own full node to depend on and cross check from\n>>> otherwise they would be needlessly putting their client's funds at\n>>> risk.\n>> \n>> FWIW, blockchain.info is obviously *not* running a full node as their\n>> wallet was accepting invalid confirmations on transactions caused by the\n>> recent BIP66 related fork; blockchain.info has $30m in funding.\n>> \n>> Coinbase also was not running a full node not all that long ago, instead\n>> running a custom Ruby implementation that caused their service to go\n>> down whenever it forked. (and would have also accepted invalid\n>> confirmations) I believe right now they're running that implementation\n>> behind a full node however.\n>> \n>>> The crypto currency security standards document probably covers\n>>> requirement for fullnode somewhere\n>>> https://cryptoconsortium.github.io/CCSS/ - we need some kind of basic\n>>> minimum bar standard for companies to aim for and this seems like a\n>>> reasonable start!\n>> \n>> Actually I've been trying to get the CCSS standard to cover full nodes,\n>> and have been getting push-back:\n>> \n>> https://github.com/CryptoConsortium/CCSS/issues/15\n>> \n>> tl;dr: Running a full node is *not* required by the standard right now\n>> at any certification level.\n>> \n>> This is of course completely ridiculous... But I haven't had much much\n>> time to put into getting that changed so maybe we just need some better\n>> explanations to the others maintaining the standard. That said, if the\n>> standard stays that way, obviously I'm going to have to ask to have my\n>> name taken off it.\n> \n> For the record, there\u2019s pretty much unanimous agreement that running a full node should be a requirement at the higher levels of certification (if not the lower ones as well). I\u2019m not sure exactly what pushback you\u2019re referring to.\n> \n> \n>>> In terms of a constructive discussion, I think it's interesting to\n>>> talk about the root cause and solutions: decentralisation (more\n>>> economically dependent full nodes, lower miner policy centralisation),\n>>> more layer 2 work.  People interested in scaling, if they havent,\n>>> should go read the lightning paper, look at the github and participate\n>>> in protocol or code work.  I think realistically we can have this\n>>> running inside of a year.  That significantly changes the dynamic.\n>>> Similarly a significant part of mining centralisation is artificial\n>>> and work is underway that will improve that.\n>> \n>> I would point out that lack of understanding of how Bitcoin works, as\n>> well as a lack of understanding of security engineering in general, is\n>> probably a significant contributor to these problems. Furthermore\n>> Bitcoin and cryptocurrencies in general are still small enough that many\n>> forseeable low probability but high impact events haven't happened,\n>> making it difficult to explain to non-technical stakeholders why they\n>> should be listening to experts rather than charlatans and fools.\n>> \n>> After a few major centralization related failures have occured, we'll\n>> have an easier job here. Unfortunately there's also a good chance we\n>> only get one shot at this due to how easy it is to kill PoW systems at\n>> birth...\n>> \n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 000000000000000014438a428adfcf4d113a09b87e4a552a1608269ff137ef2d\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/0e2bcbdf/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/0e2bcbdf/attachment.sig>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-07-24T15:08:24",
                "message_text_only": "On Fri, Jul 24, 2015 at 4:38 AM, Mike Hearn <hearn at vinumeris.com> wrote:\n\n> It's worth noting that even massive companies with $30M USD of funding\n>> don't run a single Bitcoin Core node\n>\n>\n> This has nothing to do with block sizes, and everything to do with Core\n> not directly providing the services businesses actually want.\n>\n> The whole \"node count is falling because of block sizes\" is nothing more\n> than conjecture presented as fact. The existence of multiple companies who\n> could easily afford to do this but don't because they perceive it as\n> valueless should be a wakeup call there.\n>\n\nRegardless of why node count is falling, many people who used to run a full\nnode stopped doing so.  To mitigate that, their chances of getting\nsomething out of it have to be greater.  What if propagating a valid\ntransaction generated a small chance of earning a piece of the fee?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/9fb27b1b/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-24T13:39:08",
                "message_text_only": "On Friday 24. July 2015 05.37.30 Slurms MacKenzie via bitcoin-dev wrote:\n> It's worth noting that even massive companies with $30M USD of funding don't\n> run a single Bitcoin Core node,\n\nI assume you mean that they don't have a Bitcoin Core node that is open to \nincoming connections. Since that is the only thing you can actually test, no?\n\nMost companies are still terrified of accepting incoming connections from the \nscary Internet. So I'm not entirely surprised by this conclusion.  I would be \nvery surprised if companies don't actually have a node at all.\n-- \nThomas Zander"
            },
            {
                "author": "Peter Todd",
                "date": "2015-07-24T17:43:20",
                "message_text_only": "On Fri, Jul 24, 2015 at 03:39:08PM +0200, Thomas Zander via bitcoin-dev wrote:\n> On Friday 24. July 2015 05.37.30 Slurms MacKenzie via bitcoin-dev wrote:\n> > It's worth noting that even massive companies with $30M USD of funding don't\n> > run a single Bitcoin Core node,\n> \n> I assume you mean that they don't have a Bitcoin Core node that is open to \n> incoming connections. Since that is the only thing you can actually test, no?\n\nWe can test the fact that blockchain.info's wallet and block explorer\nhas behaved in a way consistent with not running a full node - they have\nshown invalid data that any full node would reject on multiple\noccasions, most recently invalid confirmations during the BIP66 fork.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000006baf20e289b563e3ec69320275086169a47e9c58d4abfba\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/9fa29c09/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-24T20:23:27",
                "message_text_only": "Thanks for bringing up the CCSS, Adam and Peter.\n\nI was actually working on a post inviting everyone in this mailing list to come and participate\u2026but you guys beat me to it. :)\n\nThe CCSS is an open standard, born out of the belief that sharing the industry's best practices amongst each other and with the community at large benefits everyone.\n\nTo read more about it and how you can contribute, please visit http://blog.cryptoconsortium.org/contributing-to-the-ccss/ <http://blog.cryptoconsortium.org/contributing-to-the-ccss/>\n\nThe standard:  https://cryptoconsortium.github.io/CCSS/ <https://cryptoconsortium.github.io/CCSS/>\n\nThe github repository: https://github.com/CryptoConsortium/CCSS <https://github.com/CryptoConsortium/CCSS>\n\n\n- Eric\n\n> On Jul 24, 2015, at 10:43 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Fri, Jul 24, 2015 at 03:39:08PM +0200, Thomas Zander via bitcoin-dev wrote:\n>> On Friday 24. July 2015 05.37.30 Slurms MacKenzie via bitcoin-dev wrote:\n>>> It's worth noting that even massive companies with $30M USD of funding don't\n>>> run a single Bitcoin Core node,\n>> \n>> I assume you mean that they don't have a Bitcoin Core node that is open to\n>> incoming connections. Since that is the only thing you can actually test, no?\n> \n> We can test the fact that blockchain.info's wallet and block explorer\n> has behaved in a way consistent with not running a full node - they have\n> shown invalid data that any full node would reject on multiple\n> occasions, most recently invalid confirmations during the BIP66 fork.\n> \n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000006baf20e289b563e3ec69320275086169a47e9c58d4abfba\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/b837dbd2/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/b837dbd2/attachment.sig>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-24T21:12:38",
                "message_text_only": "They do not run anything but BitcoinJ (evidenced by them blindly following invalid chains), so no proper consensus checking going on here at all. Connected to my nodes is a bad peer (doesn\u2019t relay inventory but downloads everything) from 37.187.136.15, with the user agent /BitcoinJ:0.12SNAPHOT/Satoshi:0.2.0/ which is owned by blockchain.info. You can also submit an invalid transaction through their /pushtx interface and get a mixture of noise and BitcoinJ error messages out of it as well. \n\nIf even the people who have to their claim hundreds of thousands of wallets are relying on their security don\u2019t bother running even a single node to sanity check against, who are we really going to expect people to in the future if the load goes 8x, 16x, 32x higher? Like CoinBase and others, these are the companies which are claimed will be the ones supporting the network with ludicrous sized blocks because they have a financial incentive to. \n\nWell, they don't even do it now when it could be achieved with a $5 VPS. \n\n\n> Sent: Friday, July 24, 2015 at 8:43 PM\n> From: \"Peter Todd via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To: \"Thomas Zander\" <thomas at thomaszander.se>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Bitcoin Roadmap 2015, or \"If We Do Nothing\" Analysis\n> We can test the fact that blockchain.info's wallet and block explorer\n> has behaved in a way consistent with not running a full node - they have\n> shown invalid data that any full node would reject on multiple\n> occasions, most recently invalid confirmations during the BIP66 fork."
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-24T15:40:39",
                "message_text_only": "On 7/23/2015 10:57 PM, Dave Scotese via bitcoin-dev wrote:\n> I used Google to establish that there is not already a post from 2015\n> that mentions \"roadmap\" in the subject line.  Such would be a good\n> skeleton for anyone new to the list (like me).\n\nJust a point about terminology:\n\nRoadmap - A plan of proposed changed used to meet some sort of goal.  If \nthe goal is increased scaling then you list a series of changes that \nneed to be done to achieve that goal.\n\nBaseline - That is the \"If We Do Nothing\" Analysis.  Each proposed \nchange will generally have one or more alternatives which are compared \nto the \"baseline.\"\n\nthose would be 2 different documents.\n\nRuss"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-07-25T02:23:00",
                "message_text_only": "Incentivize investigations for public consumption.  The people on this list\nare the ones who probably care the most.\n\nWhen I looked up that IP address, the Whois info names \"OVH\" and \"Octave\nKlaba\" (who founded OVH, according to Wikipedia) as the owner.  \"\nblockchain.info\" appears in the HTML header as retrieved by the\n\"Anti-Hacker Alliance\" (\nhttp://anti-hacker-alliance.com/index.php?details=37.187.136.15).\nBlockchain.info itself returns IP addresses managed by CloudFlare whenever\nI try it.\n\nOn Fri, Jul 24, 2015 at 2:12 PM, Slurms MacKenzie via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> They do not run anything but BitcoinJ (evidenced by them blindly following\n> invalid chains), so no proper consensus checking going on here at all.\n> Connected to my nodes is a bad peer (doesn\u2019t relay inventory but downloads\n> everything) from 37.187.136.15, with the user agent\n> /BitcoinJ:0.12SNAPHOT/Satoshi:0.2.0/ which is owned by blockchain.info.\n> You can also submit an invalid transaction through their /pushtx interface\n> and get a mixture of noise and BitcoinJ error messages out of it as well.\n>\n> If even the people who have to their claim hundreds of thousands of\n> wallets are relying on their security don\u2019t bother running even a single\n> node to sanity check against, who are we really going to expect people to\n> in the future if the load goes 8x, 16x, 32x higher? Like CoinBase and\n> others, these are the companies which are claimed will be the ones\n> supporting the network with ludicrous sized blocks because they have a\n> financial incentive to.\n>\n> Well, they don't even do it now when it could be achieved with a $5 VPS.\n>\n>\n> > Sent: Friday, July 24, 2015 at 8:43 PM\n> > From: \"Peter Todd via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org>\n> > To: \"Thomas Zander\" <thomas at thomaszander.se>\n> > Cc: bitcoin-dev at lists.linuxfoundation.org\n> > Subject: Re: [bitcoin-dev] Bitcoin Roadmap 2015, or \"If We Do Nothing\"\n> Analysis\n> > We can test the fact that blockchain.info's wallet and block explorer\n> > has behaved in a way consistent with not running a full node - they have\n> > shown invalid data that any full node would reject on multiple\n> > occasions, most recently invalid confirmations during the BIP66 fork.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/5b4b2169/attachment.html>"
            },
            {
                "author": "Slurms MacKenzie",
                "date": "2015-07-25T11:19:43",
                "message_text_only": "The answer to that is a less illegal than probing other peoples web servers. Up until recently the reverse name lookup for that IP address was markets.blockchain.info, which I resolve when I log incoming connections in an attempt to filter out some abusive clients coming from university connections. \n\nOther people have noticed these abusive clients too. There\u2019s mentions of other connections running the same version of BitcoinJ coming from sources that appear to be blockchain.info which display similar behavior. A user in #bitcoin-dev was complaining about this client hammering closed ports with connections when they are kicked off. \n\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/02/09#l1423513396.0\n\u00a0\n\u00a0\n> Sent:\u00a0Saturday, July 25, 2015 at 4:23 AM\n> From:\u00a0\"Dave Scotese via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To:\u00a0bitcoin-dev at lists.linuxfoundation.org\n> Subject:\u00a0Re: [bitcoin-dev] Bitcoin Roadmap 2015, or \"If We Do Nothing\" Analysis\n\n> When I looked up that IP address, the Whois info names \"OVH\" and \"Octave Klaba\" (who founded OVH, according  to Wikipedia) as the owner.\u00a0 \"blockchain.info[http://blockchain.info]\" appears in the HTML header as retrieved by the \"Anti-Hacker Alliance\" (http://anti-hacker-alliance.com/index.php?details=37.187.136.15[http://anti-hacker-alliance.com/index.php?details=37.187.136.15]).\u00a0 Blockchain.info itself returns IP addresses managed by CloudFlare whenever I try it."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Roadmap 2015, or \"If We Do Nothing\" Analysis",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Slurms MacKenzie",
                "Adam Back",
                "Mike Hearn",
                "Milly Bitcoin",
                "Peter Todd",
                "Thomas Zander",
                "Dave Scotese",
                "Simon Liu"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 30840
        }
    },
    {
        "title": "[bitcoin-dev] [Bitcoin-development] BIP for Proof of Payment",
        "thread_messages": [
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-07-24T06:55:12",
                "message_text_only": "These BIPs have been assigned 120 and 121:\n\n120: Proof of Payment\n121: Proof of Payment URI scheme\n\nRegards,\nKalle\nDen 24 jul 2015 08:27 skrev \"Kalle Rosenbaum\" <kalle at rosenbaum.se>:\n\n> These BIPs have been assigned 120 and 121:\n>\n> 120: Proof of Payment\n> 121: Proof of Payment URI scheme\n>\n> Regards,\n> Kalle\n> Den 21 jun 2015 16:39 skrev \"Kalle Rosenbaum\" <kalle at rosenbaum.se>:\n>\n>> Hi Greg!\n>>\n>> After a lot of constructive discussion, feedback and updating, I'm\n>> requesting that you please assign these proposals BIP numbers. It's both\n>> the \"Proof of Payment\" proposal and the \"Proof of Payment URI scheme\"\n>> proposal that I'm referring to.\n>>\n>> The wikimedia source is available here:\n>> https://github.com/kallerosenbaum/poppoc/wiki/Proof-of-Payment-BIP and\n>> https://github.com/kallerosenbaum/poppoc/wiki/btcpop-scheme-BIP.\n>>\n>> Is this what you need in order to proceed or is there something else you\n>> need from me?\n>>\n>> Best regards,\n>> /Kalle\n>>\n>> 2015-06-17 11:51 GMT+02:00 Kalle Rosenbaum <kalle at rosenbaum.se>:\n>>\n>>> 2015-06-16 21:48 GMT+02:00 Pieter Wuille <pieter.wuille at gmail.com>:\n>>> > I don't see why existing software could create a 40-byte OP_RETURN but\n>>> not\n>>> > larger? The limitation comes from a relay policy in full nodes, not a\n>>> > limitation is wallet software... and PoPs are not relayed on the\n>>> network.\n>>>\n>>> You are probably right here. The thing is that I don't know how *all*\n>>> wallet signing and validating software is written, so I figure it's\n>>> better to stick to a \"valid\" output. Since I don't *need* more data\n>>> than 40 bytes, why bother. There's another constraint to this as well:\n>>> The other BIP proposal, \"Proof of Payment URI scheme\", includes a\n>>> nonce parameter in the URI. If the nonce is very long, the QR code\n>>> will be unnecessarily big. The server should try to detect a brute\n>>> force of the 48 bit nonce, or at least delay the pop requests by some\n>>> 100 ms or so.\n>>>\n>>> Do you think this is an actual problem, and why? Is your suggestion to\n>>> use a bigger nonce, given the above?\n>>>\n>>> >\n>>> > Regarding sharing, I think you're talking about a different use case.\n>>> Say\n>>> > you want to pay for 1-week valid entrance to some venue. I thought the\n>>> > purpose of the PoP was to be sure that only the person who paid for\n>>> it, and\n>>> > not anyone else can use it during that week.\n>>> >\n>>>\n>>> That's right. That's one use case. You pay for the 1-week entrance and\n>>> then you use your wallet to sign PoPs when you enter the venue.\n>>>\n>>> > My argument against that is that the original payer can also hand the\n>>> > private keys in his wallet to someone else, who would then become able\n>>> to\n>>> > create PoPs for the service. He does not lose anything by this,\n>>> assuming the\n>>> > address is not reused.\n>>> >\n>>>\n>>> Yes, that is possible. It's about the same as giving out a\n>>> username/password for a service that you have paid for. In the case of\n>>> a concert ticket, it's simple. Just allow one entrance per payment.\n>>> But in the example you gave, it's a bit more complicated. You could\n>>> for example give all guests a bracelet upon first entry or upon first\n>>> exit. Or you can put a stamp on people leaving the venue, and demand\n>>> that all re-entries show the stamp, possibly along with a new PoP.\n>>> Pretty much as is done already. Different use cases will need\n>>> different protection. In this example, the value added by PoP is that\n>>> the venue does not have to distribute tickets in advance. This in turn\n>>> allows for better privacy for the customer, who don't have to give out\n>>> personal information such as an email-address.\n>>>\n>>> > So, using a token does not change anything, except it can be provided\n>>> to the\n>>> > payer - instead of relying on creating an implicit identity based on\n>>> who\n>>> > seems to have held particular private keys in the past.\n>>> >\n>>>\n>>> Yes, that's a difference, but it comes at the cost of security. The\n>>> stolen token can be used over and over. In the case of PoP it's only\n>>> usable once, and it's only created when it's actually needed,\n>>> minimizing the window of opportunity for the thief.\n>>>\n>>> Regards,\n>>> Kalle\n>>>\n>>> > On Jun 16, 2015 9:41 PM, \"Kalle Rosenbaum\" <kalle at rosenbaum.se> wrote:\n>>> >>\n>>> >> 2015-06-16 21:25 GMT+02:00 Pieter Wuille <pieter.wuille at gmail.com>:\n>>> >> > You can't avoid sharing the token, and you can't avoid sharing the\n>>> >> > private\n>>> >> > keys used for signing either. If they are single use, you don't lose\n>>> >> > anything by sharing them.\n>>> >>\n>>> >> Forwarding the PoP request would be a way to avoid sharing keys, as\n>>> >> suggested above.\n>>> >>\n>>> >> >\n>>> >> > Also you are not creating a real transaction. Why does the OP_RETURN\n>>> >> > limitation matter?\n>>> >>\n>>> >> This was discussed in the beginning of this thread: \"The idea is to\n>>> >> simplify implementation. Existing software can be used as is to sign\n>>> >> and validate PoPs\"\n>>> >>\n>>> >> Regards,\n>>> >> Kalle\n>>> >>\n>>> >> >\n>>> >> > On Jun 16, 2015 9:22 PM, \"Kalle Rosenbaum\" <kalle at rosenbaum.se>\n>>> wrote:\n>>> >> >>\n>>> >> >> Thank you for your comments Pieter! Please find my answers below.\n>>> >> >>\n>>> >> >> 2015-06-16 16:31 GMT+02:00 Pieter Wuille <pieter.wuille at gmail.com\n>>> >:\n>>> >> >> > On Mon, Jun 15, 2015 at 1:59 PM, Kalle Rosenbaum <\n>>> kalle at rosenbaum.se>\n>>> >> >> > wrote:\n>>> >> >> >>\n>>> >> >> >> 2015-06-15 12:00 GMT+02:00 Pieter Wuille <\n>>> pieter.wuille at gmail.com>:\n>>> >> >> >> I'm not sure if we will be able to support PoP with CoinJoin.\n>>> Maybe\n>>> >> >> >> someone with more insight into CoinJoin have some input?\n>>> >> >> >\n>>> >> >> >\n>>> >> >> > Not really. The problem is that you assume a transaction\n>>> corresponds\n>>> >> >> > to\n>>> >> >> > a\n>>> >> >> > single payment. This is true for simple wallet use cases, but not\n>>> >> >> > compatible\n>>> >> >> > with CoinJoin, or with systems that for example would want to\n>>> combine\n>>> >> >> > multiple payments in a single transaction.\n>>> >> >> >\n>>> >> >>\n>>> >> >> Yes, you are right. It's not compatible with CoinJoin and the\n>>> likes.\n>>> >> >>\n>>> >> >> >\n>>> >> >> > 48 bits seems low to me, but it does indeed solve the problem.\n>>> Why\n>>> >> >> > not\n>>> >> >> > 128\n>>> >> >> > or 256 bits?\n>>> >> >>\n>>> >> >> The nonce is limited because of the OP_RETURN output being limited\n>>> to\n>>> >> >> 40 bytes of data: 2 bytes version, 32 bytes txid, 6 bytes nonce.\n>>> >> >>\n>>> >> >> >\n>>> >> >> >> > Why does anyone care who paid? This is like walking into a\n>>> >> >> >> > coffeshop,\n>>> >> >> >> > noticing I don't have money with me, let me friend pay for\n>>> me, and\n>>> >> >> >> > then\n>>> >> >> >> > have\n>>> >> >> >> > the shop insist that I can't drink it because I'm not the\n>>> buyer.\n>>> >> >> >>\n>>> >> >> >> If you pay as you use the service (ie pay for coffee upfront),\n>>> >> >> >> there's\n>>> >> >> >> no need for PoP. Please see the Motivation section. But you are\n>>> >> >> >> right\n>>> >> >> >> that you must have the wallet(s) that paid at hand when you\n>>> issue a\n>>> >> >> >> PoP.\n>>> >> >> >>\n>>> >> >> >> >\n>>> >> >> >> > Track payments, don't try to assign identities to payers.\n>>> >> >> >>\n>>> >> >> >> Please elaborate, I don't understand what you mean here.\n>>> >> >> >\n>>> >> >> >\n>>> >> >> > I think that is a mistake. You should not assume that the wallet\n>>> who\n>>> >> >> > held\n>>> >> >> > the coins is the payer/buyer. That's what I said earlier; you're\n>>> >> >> > implicitly\n>>> >> >> > creating an identity (the one who holds these keys) based on the\n>>> >> >> > transaction. This seems fundamentally wrong to me, and not\n>>> necessary.\n>>> >> >> > The\n>>> >> >> > receiver should not care who paid or how, he should care what was\n>>> >> >> > payed\n>>> >> >> > for.\n>>> >> >>\n>>> >> >> You are saying that it's a problem that the wallet used to pay,\n>>> must\n>>> >> >> also be used to issue the PoP? That may very well be a problem in\n>>> some\n>>> >> >> cases. People using PoP should of course be aware of it's\n>>> limitations\n>>> >> >> and act accordingly, i.e. don't pay for concert tickets for a\n>>> friend\n>>> >> >> and expect your friend to be able to enter the arena with her\n>>> wallet.\n>>> >> >> As Tom Harding noted, it is possible to transfer keys to your\n>>> friend's\n>>> >> >> wallet, but that might not be desirable if those keys are also used\n>>> >> >> for other payments. Also that would weaken the security of an HD\n>>> >> >> wallet, since a chain code along with a private key would reveal\n>>> all\n>>> >> >> keys in that tree. Another solution is that your friend forwards\n>>> the\n>>> >> >> PoP request to your wallet, through twitter or SMS, and you send\n>>> the\n>>> >> >> PoP for her. Maybe that forwarding mechanism can be built into\n>>> wallets\n>>> >> >> and automated so that the wallet automatically suggests to sign the\n>>> >> >> PoP for your friend. This is probably something to investigate\n>>> >> >> further, but not within the scope of this BIP.\n>>> >> >>\n>>> >> >> Of course the simplest solution would be to send money to your\n>>> friend\n>>> >> >> first so that she can pay for the ticket from her own wallet, but\n>>> >> >> that's not always feasible.\n>>> >> >>\n>>> >> >> >\n>>> >> >> > The easiest solution to this IMHO would be an extension to the\n>>> >> >> > payment\n>>> >> >> > protocol that gives you (or your wallet) a token in return for\n>>> >> >> > paying,\n>>> >> >> > and\n>>> >> >> > that knowledge of that token is used to gain access to the\n>>> services\n>>> >> >> > you\n>>> >> >> > provide.\n>>> >> >> >\n>>> >> >>\n>>> >> >> That token would then be reusable. Someone stealing it would be\n>>> able\n>>> >> >> to use it as much as she wants. That is what I want to avoid with\n>>> PoP.\n>>> >> >> The BIP proposal briefly mentions something like this in the\n>>> >> >> rationale. I also had a discussion about this with Mike Hearn on\n>>> this\n>>> >> >> list on Mars 13 that I think covers most pros and cons of the\n>>> >> >> different approaches.\n>>> >> >>\n>>> >> >> While your suggestion does indeed separate the transaction from the\n>>> >> >> proof of payment, it also assumes that the token is held in the\n>>> wallet\n>>> >> >> that pays. Otherwise you would need to keep it in another safe\n>>> place,\n>>> >> >> remember it's reusable. Where would that be? How would you transfer\n>>> >> >> that token to your friend?\n>>> >> >>\n>>> >> >> Thank you again for your comments. I appreciate it.\n>>> >> >>\n>>> >> >> Best regards,\n>>> >> >> Kalle\n>>> >> >>\n>>> >> >> > --\n>>> >> >> > Pieter\n>>> >> >> >\n>>>\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/34e83c0a/attachment-0001.html>"
            },
            {
                "author": "Sriram Karra",
                "date": "2015-07-27T08:14:43",
                "message_text_only": "On Fri, Jul 24, 2015 at 12:25 PM, Kalle Rosenbaum via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> These BIPs have been assigned 120 and 121:\n>\nDid you break open the bubbly? From the outside it certainly looked harder\nthan everything else about this proposal combined.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/84ee276b/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-07-26T21:13:49",
                "message_text_only": "(Resending to the new bitcoin-dev list after sending to the old list)\n\n2015-07-25 21:34 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n> Then why do you assume they have a policy limit that not even bitcoin core\n> itself maintains (the default limit was moved from 42 to 83 [counting the\n> op_return and pushes])?\n>\n> The policy check is not a consensus rule. Other implementations may have\n> another default or not have a limit at all.\n\nThank you for pointing this out.\n\nThat's right. Bitcoin core now support 80 bytes data by default. And\nyes, I was wrong in assuming 40 bytes policy in all implementations,\neven if 40 bytes was the limit in bitcoin core at the time of writing\nthe BIP.\n\nIf there's a need to increase the size of the nonce, for example to\n128 bits instead of the 48 bits as designed in BIP 120, then we can of\ncourse do that, either now or in a subsequent version of PoP.\n\nAs noted before though, a longer nonce also means bigger QR codes\ngenerated from the BIP 121 URIs. So I think that 48 bits is a good\ntradeoff right now. And as stated in BIP120, a server generating PoP\nrequests should try to detect brute force attacks, or at least delay\nthe response (containing the nonce) by some 100 ms or so.\n\nDo you think we need a bigger nonce? In that case, why?\n\nIf PoP later becomes an extension of BIP70, then there is no such size\nconstraint on the nonce, since it will be part of some kind of (e.g.)\nPopRequest message and not contained in a QR encoded URI.\n\n/Kalle"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-27T09:08:48",
                "message_text_only": "On Jul 26, 2015 11:13 PM, \"Kalle Rosenbaum\" <kalle at rosenbaum.se> wrote:\n> Do you think we need a bigger nonce? In that case, why?\n\nI don't know, it wasn't me that proposed a bigger nonce. I just wanted to\npoint out that the policy limit shouldn't be a concern.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/c8f6c49f/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-07-27T11:21:38",
                "message_text_only": "Ok, Thanks\nDen 27 jul 2015 11:08 skrev \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc>:\n\n>\n> On Jul 26, 2015 11:13 PM, \"Kalle Rosenbaum\" <kalle at rosenbaum.se> wrote:\n> > Do you think we need a bigger nonce? In that case, why?\n>\n> I don't know, it wasn't me that proposed a bigger nonce. I just wanted to\n> point out that the policy limit shouldn't be a concern.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150727/3c7c4f1c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP for Proof of Payment",
            "categories": [
                "bitcoin-dev",
                "Bitcoin-development"
            ],
            "authors": [
                "Kalle Rosenbaum",
                "Sriram Karra",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 13755
        }
    },
    {
        "title": "[bitcoin-dev] bitcoin-dev Digest, Vol 2, Issue 95",
        "thread_messages": [
            {
                "author": "Dave Scotese",
                "date": "2015-07-24T16:32:34",
                "message_text_only": "> Alternatively I think instead of displaying a meaningless number we ought\n> to go by a percentage (the double spend improbability) and go by\n> 'confidence'.\n\n\nThat is a great idea, and not too hard to implement.  A bit of code can\ndetermine over the last N blocks, how many blocks that were at the current\ndepth of the present transaction were orphaned and divide that by the total\nnumber of blocks solved (orphaned or not) while those N blocks were\nsolved.  That's the historical number (H), and then the \"51% attack\" number\n(A) can make an explicit assumptions like \"Assuming a bad actor has 51% of\nthe hashing power for 24 hours starting right now, the block holding this\ntransaction has an X% chance of being orphaned.\"  Report \"# confirmations\"\nas \"99.44% confidence\" using [100% - max(H,A)].\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150724/537c5972/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoin-dev Digest, Vol 2, Issue 95",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave Scotese"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 982
        }
    },
    {
        "title": "[bitcoin-dev] Disclosure: consensus bug indirectly solved by BIP66",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2015-07-28T14:27:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHello all,\n\nI'd like to disclose a vulnerability I discovered in September 2014,\nwhich became unexploitable when BIP66's 95% threshold was reached\nearlier this month.\n\n## Short description:\n\nA specially-crafted transaction could have forked the blockchain\nbetween nodes:\n* using OpenSSL on a 32-bit systems and on 64-bit Windows systems\n* using OpenSSL on non-Windows 64-bit systems (Linux, OSX, ...)\n* using some non-OpenSSL codebases for parsing signatures\n\n## Upgrade instructions:\n\nNone. Transactions that could trigger this problem have become invalid\non the network since BIP66's deployment of version 3 blocks reached 95%\non July 4th, 2015.\n\n## Long description:\n\nThe problem is related to the signature encoding rules.\n\nBitcoin's signatures are ASN.1 BER encoded. BER is a complex standard\nthat allows many different encodings for the same data. Since Bitcoin\nCore 0.8, a standardness rule has been in effect that only allowed\nsubset of encodings (DER) for relay and mining, even though any BER\nremained valid in the blockchain - at least in theory.\n\nIn practice, BER has many weird edge cases, and I have not found a\nsingle cryptographic codebase that can parse all of them correctly.\nThis includes OpenSSL, Crypto++, BouncyCastle, btcec, and our own\nlibsecp256k1 library.\n\nThis on itself would not be a problem, as full nodes on the network\ncurrently use OpenSSL. However, while researching what was needed to\nmake libsecp256k1 compatible with it, I discovered that OpenSSL is even\ninconsistent with itself across different platforms.\n\nOne of the features of BER is the ability for internal structures to\nhave a length descriptor whose size itself is up to 126 bytes (see\nX.690-0207 8.1.3.5). A 1 terabyte data structure would for example use\na 5-byte length descriptor. However, there is no requirement to use the\nshortest possible descriptor, so even a 70-byte ECDSA signature could\nuse a 5-byte length descriptor and be valid. Unfortunately, OpenSSL\nsupports length descriptors only as long as their size is at most that\nof a C 'long int', a type whose size depends on the platform (Windows\nand 32-bit Linux/OSX have a 4-byte long int, 64-bit Linux/OSX have an\n8-byte long int). See\nhttps://github.com/openssl/openssl/blob/bfa34f551c2d38e826deb44a269cb0f720f9f63b/crypto/asn1/asn1_lib.c#L178.\nSome non-OpenSSL based signature validation\nsystems don't support such length descriptors at all, resulting in an\nextra forking risk on top for them if used for blockchain validation.\n\nThis effectively means that a block chain containing a transaction with\na valid signature using such a 5-byte length descriptor would be\naccepted by some systems and not by others, resulting in a fork if it\nwere mined into a block.\n\n## Timeline:\n\n* 2013-Feb-19: Bitcoin Core 0.8.0 was released, which made non-DER\nsignatures non-standard. No release since then would relay or mine\ntransactions that could trigger the vulnerability. However, such a\ntransaction was still valid inside blocks.\n\n* 2014-Feb-10: I proposed BIP62 to deal with transaction malleability.\nThe BIP62 draft includes a rule that would make version 2 transactions\nwith non-DER signatures invalid.\n\n* 2014-Jul-18: In order to make Bitcoin's signature encoding rules not\ndepend on OpenSSL's specific parser, I modified the BIP62 proposal to\nhave its strict DER signatures requirement also apply to version 1\ntransactions. No non-DER signatures were being mined into blocks\nanymore at the time, so this was assumed to not have any impact. See\nhttps://github.com/bitcoin/bips/pull/90 and\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-July/006299.html.\nUnknown at the time, but if deployed this would have solved the\nvulnerability.\n\n* 2014-Sep-01: While analysing OpenSSL's source code for BER parsing, I\ndiscovered the architecture dependency listed above and the associated\nvulnerability. The best means to fix it at the time was by getting\nBIP62 adopted.\n\n* 2014-Sep-07, 2014-Oct-17, 2014-Oct-26, 2014-Dec-06, 2015-Jan-09:\nSeveral proposed changes to BIP62. See\nhttps://github.com/bitcoin/bips/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aclosed+bip62.\n\n* 2015-Jan-10: OpenSSL releases versions 1.0.0p and 1.0.1k, with a fix\nfor CVE-2014-8275. The fix introduced a restriction on ECDSA signatures\nto be strict DER, which would have solved all problems related to\nsignature encodings, except Bitcoin's consensus-critical nature\nrequires bug-for-bug compatibility between nodes. Worse, it seemed that\nthere was again a small (1%) number of blocks being created with\nnon-DER signatures in it, resulting in actual forks. The only immediate\nsolution that did not introduce more risk for forks was parsing and\nre-encoding signatures using OpenSSL itself before verification to\nbypass the restriction, making the problem persist. See\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-January/007097.html.\n\n* 2015-Jan-21: The new attention to signature encoding might have\nrevealed the vulnerability, and the presence of miners not enforcing\nstrict DER might have made the vulnerability actually exploitable.\nBIP62 was still a moving target, so we wanted a faster means to solve\nthis. Therefore, a new BIP was proposed with just the strict DER\nrequirement, numbered BIP66. This would both allow non-OpenSSL\nverification, and solve the vulnerability, without needing to fix the\nless urgent malleability problem that BIP62 wanted to address. See\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-January/007156.html.\n\n* 2015-Feb-17: Bitcoin Core 0.10.0 was released, with support for\nBIP66. See\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007480.html.\n\n* 2015-Jul-04: BIP66's 95% threshold was reached, enabling a consensus\nrule for strict DER signatures in the blockchain. This solved the\nvulnerability, and opens the door to using non-OpenSSL signature\nverification in the near future.\n\n- -- \nPieter Wuille\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAEBAgAGBQJVt5FGAAoJEFeJbS/48LZX3ccMAJdPrpa8ggcYEyy8naqc7ewL\n1Mwv24p/6Q8+T7Q6EWmgoApY1jljF+AzgSpfaf310QZf9yuC/JC++AmHfUaa9UQG\nMq1+duX64uDWIeNKTfuCwZvU0ataARZKmFUpp60UF+VtiJyLo9tpHTVajM0lv9Oq\nOX40qHVC/iBogRLNREC1ggWH1JPMTbEch50YX1bgNi3gE5gtMggSQ2OXrGCCtrvR\n7cVFlIyOhlLtvSAnxzmHyY8Iol+qVhIZi4mCmDgOoQKVaiYm1cODQ+nrMHx02DKC\nWqstwb/mET/vbCX4qxSNQ2B+mQk0WO/gSrWiQkBLi/AfLBh/8A/kL1RpKxVQzoaP\nO165LbXye42w8Js/sE/zT6d4CIbYaW0GpF6m4agwDYgPLomhdk/elPRojKYsEab+\noFWPVagqKI9e/pjFBxqfIv3iyx1hHB6YIaX5TfFRVjsWzag5Qi2ssQYOQymyjg4J\nUHNR/xW0PMPAOg5KS/uFja4OWxstHhTW9G+rslEK9g==\n=7F3K\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-29T13:41:07",
                "message_text_only": ">\n> This solved the vulnerability, and opens the door to using non-OpenSSL\n> signature verification in the near future.\n\n\nGreat work!\n\nIt also means the remaining usages of OpenSSL can be safely replaced with\nsomething like LibreSSL or (perhaps better) BoringSSL.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/79e82a36/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-29T13:46:46",
                "message_text_only": "I believe the idea is to replace openSSL with\nhttps://github.com/bitcoin/secp256k1 that Pieter and Greg spent quite\nsome time rigorously testing and have at this point better confidence\nin than *SSL libraries.\n\nI think the lessons learned from it as concluded by Pieter and Greg\nare that openSSL and derivatives are not focussed on consensus\nconsistency, such that even if actively maintained and security\nreviewed, their own bug fixes can break bitcoin.\n\nAdam\n\nOn 29 July 2015 at 06:41, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> This solved the vulnerability, and opens the door to using non-OpenSSL\n>> signature verification in the near future.\n>\n>\n> Great work!\n>\n> It also means the remaining usages of OpenSSL can be safely replaced with\n> something like LibreSSL or (perhaps better) BoringSSL.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-29T13:48:16",
                "message_text_only": ">\n> I believe the idea is to replace openSSL with\n> https://github.com/bitcoin/secp256k1\n\n\nYes, I know. I said \"other uses\". For example RPC SSL and BIP 70.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/8c540bf1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Disclosure: consensus bug indirectly solved by BIP66",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Mike Hearn",
                "Pieter Wuille",
                "Adam Back"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8414
        }
    },
    {
        "title": "[bitcoin-dev] Why Satoshi's temporary anti-spam measure isn't temporary",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-28T22:25:50",
                "message_text_only": "I only got into Bitcoin in 2011, after the block size limit was already in place. After going through some more of the early history of Bitcoin to better understand the origins of this, things are starting to come into better perspective.\n\nInitially there was no block size limit - it was thought that the fee market would naturally develop and would impose economic constraints on growth. But this hypothesis failed after a sudden influx of new uses. It was still too easy to attack the network. This idea had to wait until the network was more mature to handle things.\n\nEnter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit. Let\u2019s test this out, then increase it once we see how things work. So far so good\u2026\n\nExcept\u2026well:\n\n1) We never really got to test things out\u2026a fee market never really got created, we never got to see how fees would really work in practice.\n\n2) Turns out the vast majority of validation nodes have little if anything to do with mining - validators do not get compensated\u2026validation cost is externalized to the entire network.\n\n3) Miners don\u2019t even properly validate blocks. And the bigger the blocks get, the greater the propensity to skip this step. Oops!\n\n4) A satisfactory mechanism for thin clients to be able to securely obtain reasonably secure, short proofs for their transactions never materialized.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/1dfbd49a/attachment.sig>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-29T00:43:14",
                "message_text_only": "> Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit. Let\u2019s test this out, then increase it once we see how things work. So far so good\u2026\n> \n\nThe block size limit was put in place as an anti-DoS measure (monster blocks), not \"anti-spam\". It was never intended to have any economic effect, not on spam and not on any future fee market.\n\n\njp"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T00:44:20",
                "message_text_only": "> On Jul 28, 2015, at 5:43 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n> \n> \n>> Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit. Let\u2019s test this out, then increase it once we see how things work. So far so good\u2026\n>> \n> \n> The block size limit was put in place as an anti-DoS measure (monster blocks), not \"anti-spam\". It was never intended to have any economic effect, not on spam and not on any future fee market.\n> \n> \n> jp\n> \n\nI\u2019m using spam and DoS somewhat synonymously here, although you\u2019re correct - DoS is a more accurate term.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/da5402c9/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-29T00:46:20",
                "message_text_only": "Does it matter even in the slightest why the block size limit was put in\nplace? It does not. Bitcoin is a decentralized payment network, and the\nrelationship between utility (block size) and decentralization is\nempirical. Why the 1MB limit was put in place at the time might be a\nhistorically interesting question, but it bears little relevance to the\npresent engineering issues.\n\nOn Tue, Jul 28, 2015 at 5:43 PM, Jean-Paul Kogelman via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> > Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit.\n> Let\u2019s test this out, then increase it once we see how things work. So far\n> so good\u2026\n> >\n>\n> The block size limit was put in place as an anti-DoS measure (monster\n> blocks), not \"anti-spam\". It was never intended to have any economic\n> effect, not on spam and not on any future fee market.\n>\n>\n> jp\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/106ea598/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T00:55:20",
                "message_text_only": "I agree that the historical reasons are irrelevant from an engineering perspective. But they still set a context for the discussion\u2026and might help shed some insight into the motivations behind some of the participants. It\u2019s also good to know these things to counter arguments that start with \u201cBut Satoshi said that\u2026\u201d\n\nWhat\u2019s critically important to note is that several of the assumptions that were being made at the time this limit was decided have turned out wrong\u2026and that these other issues should probably be of greater concern and more highly prioritized in any discussion considering the merits of deploying potentially incompatible consensus rule changes. It seems if these other issues were fixed perhaps no block size limit would be required at all (as was originally hoped).\n\n- Eric\n\n> On Jul 28, 2015, at 5:46 PM, Mark Friedenbach <mark at friedenbach.org> wrote:\n> \n> Does it matter even in the slightest why the block size limit was put in place? It does not. Bitcoin is a decentralized payment network, and the relationship between utility (block size) and decentralization is empirical. Why the 1MB limit was put in place at the time might be a historically interesting question, but it bears little relevance to the present engineering issues.\n> \n> On Tue, Jul 28, 2015 at 5:43 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> > Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit. Let\u2019s test this out, then increase it once we see how things work. So far so good\u2026\n> >\n> \n> The block size limit was put in place as an anti-DoS measure (monster blocks), not \"anti-spam\". It was never intended to have any economic effect, not on spam and not on any future fee market.\n> \n> \n> jp\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/d29e0571/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/d29e0571/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T02:40:21",
                "message_text_only": "In the interest of promoting some constructive discussion on this, let me start by making a few proposals to correct the listed issues.\n\nNote: many of these ideas are neither my own nor really all that new, but it seems in the past we\u2019ve given up too easily on actually moving forward on them despite their critical importance.\n\n\n\u2014\u2014\n\n1) A fee market never really got created, we don\u2019t really know how transaction fees would  work in practice.\n\nThe only way to see how fees would work in practice is to have scarcity. If the network is still not sufficiently mature to be able to handle actual resource limits securely, the safest way to do this is to artificially impose limits. Some economists might bicker about the problems with production quotas and what not\u2026but how else are we to solve the real, non-trivial engineering problems without risking system collapse? The eventual goal would be to remove these artificial limits once we\u2019re confident that the economic incentives are properly aligned to maintain security. We\u2019re still quite far from this goal, though, and it would be irresponsible, IMHO, to insist on letting the system hit its real limits.\n\n\n2) Turns out the vast majority of validation nodes have little if anything to do with mining - validators do not get compensated\u2026validation cost is externalized to the entire network.\n3) Miners don\u2019t even properly validate blocks. And the bigger the blocks get, the greater the propensity to skip this step. Oops!\n\nIssues (2) and (3) are inextricably related so I\u2019ll cover both together.\n\nThe obvious problem here is that as long as the cost of checking validators is the same as the cost of validating itself, there\u2019s really little we can do to properly have any sort of division of labor. Requiring, at the very least, random checks might be a start. Perhaps some clever use of SNARKs might eventually be secure and practical.\n\nIt might also be possible to directly pay validators for satisfying random checks or providing SNARKs. If only we could trustlessly and securely outsource this work we\u2019d make tremendous progress.\n\nOf all the issues I\u2019ve listed, these are perhaps the ones for which practical solutions seem most tentative at present.\n\n\n4) A satisfactory mechanism for thin clients to be able to securely obtain reasonably secure, short proofs for their transactions never materialized.\n\nThe first part of the solution to this issue is the use of better data structures. Satoshi\u2019s SPV can prove that transactions are included in blocks\u2026and that outputs are spent. But it has no mechanism for proving that a given transaction is *not* included in any block\u2026or that some particular output remains unspent. The structures to which we\u2019re committing extremely inefficient for querying some of the most important things required for validation\u2026i.e. whether an output exists and whether it is spent.\n\nThe second part is shifting the responsibility for constructing proofs to the parties who already have the greatest incentives to store the necessary data to construct these proofs to allow efficient prunability. Outsourceability of proofs would also be highly desirable.\n\n\u2014\u2014\n\nIf we want to be able to raise the block size limit\u2026or perhaps get rid of it altogether, I would suggest we start by addressing these specific issues and work to find practical solutions. Since raising the block size limit is already a hard forking consensus rule change, at least the need for hard forks isn\u2019t what\u2019s stopping us.\n\n- Eric\n\n\n> On Jul 28, 2015, at 5:55 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> I agree that the historical reasons are irrelevant from an engineering perspective. But they still set a context for the discussion\u2026and might help shed some insight into the motivations behind some of the participants. It\u2019s also good to know these things to counter arguments that start with \u201cBut Satoshi said that\u2026\u201d\n> \n> What\u2019s critically important to note is that several of the assumptions that were being made at the time this limit was decided have turned out wrong\u2026and that these other issues should probably be of greater concern and more highly prioritized in any discussion considering the merits of deploying potentially incompatible consensus rule changes. It seems if these other issues were fixed perhaps no block size limit would be required at all (as was originally hoped).\n> \n> - Eric\n> \n>> On Jul 28, 2015, at 5:46 PM, Mark Friedenbach <mark at friedenbach.org <mailto:mark at friedenbach.org>> wrote:\n>> \n>> Does it matter even in the slightest why the block size limit was put in place? It does not. Bitcoin is a decentralized payment network, and the relationship between utility (block size) and decentralization is empirical. Why the 1MB limit was put in place at the time might be a historically interesting question, but it bears little relevance to the present engineering issues.\n>> \n>> On Tue, Jul 28, 2015 at 5:43 PM, Jean-Paul Kogelman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> > Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit. Let\u2019s test this out, then increase it once we see how things work. So far so good\u2026\n>> >\n>> \n>> The block size limit was put in place as an anti-DoS measure (monster blocks), not \"anti-spam\". It was never intended to have any economic effect, not on spam and not on any future fee market.\n>> \n>> \n>> jp\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/f797244b/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/f797244b/attachment-0001.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T03:37:57",
                "message_text_only": "> On Jul 28, 2015, at 7:40 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> Note: many of these ideas are neither my own nor really all that new, but it seems in the past we\u2019ve given up too easily on actually moving forward on them despite their critical importance.\n\nIn retrospect I regret not having made this note more emphatic:\n\nGUYS, WE\u2019VE KNOWN ABOUT THESE PROBLEMS AND HAVE TALKED ABOUT THEM FOR YEARS ALREADY\u2026AND IT SEEMS PRACTICALLY NOTHING HAS HAPPENED\u2026WTF?!?!?!?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/e5e99247/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/e5e99247/attachment.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-29T03:46:55",
                "message_text_only": "> GUYS, WE\u2019VE KNOWN ABOUT THESE PROBLEMS AND HAVE TALKED ABOUT THEM FOR\n> YEARS ALREADY\u2026AND IT SEEMS PRACTICALLY NOTHING HAS HAPPENED\u2026\n\nWhat is the incentive for someone with high level technical skills to \nspend all their time developing and testing code?  Especially since the \ncode is generally the boring task of \"fixing the plumbing\" and won't \nbenefit the developer directly ... except they will be blamed if \nsomething goes wrong.\n\nRuss"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T05:17:33",
                "message_text_only": "> On Jul 28, 2015, at 8:46 PM, Milly Bitcoin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> GUYS, WE\u2019VE KNOWN ABOUT THESE PROBLEMS AND HAVE TALKED ABOUT THEM FOR\n>> YEARS ALREADY\u2026AND IT SEEMS PRACTICALLY NOTHING HAS HAPPENED\u2026\n> \n> What is the incentive for someone with high level technical skills to spend all their time developing and testing code?  Especially since the code is generally the boring task of \"fixing the plumbing\" and won't benefit the developer directly ... except they will be blamed if something goes wrong.\n> \n> Russ\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\nSome of the most highly skilled technical people working on Bitcoin Core have been doing exactly that! The main incentive, of course, is that later on you get to work on something that\u2019s actually pleasant to work on rather than a whole bunch of garbled crap that doesn\u2019t work properly.\n\nHowever, the great irony is that the devs who have long since recognized the importance of fixing these issues have also tended to be loathe to touching any of the consensus code unless it fixes some critical immediately exploitable security hole\u2026while the devs who most clamor for consensus code changes have tended to all but ignore these issues entirely.\n\nI sometimes wish it were the other way around.\n\n- Eric\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150728/442ee8be/attachment.sig>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-29T11:18:59",
                "message_text_only": "On Tuesday 28. July 2015 19.40.21 Eric Lombrozo via bitcoin-dev wrote:\n> 1) A fee market never really got created, we don\u2019t really know how\n> transaction fees would  work in practice.\n> \n> The only way to see how fees would work in practice is to have scarcity.\n\nThis skips over the question why you need a fees market. There really is no \nreason that for the next 10 to 20 years there is a need for a fees market to \nincentive miners to mine.  Planning that far ahead is doomed to failure.\n\n-- \nThomas Zander"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-29T09:59:43",
                "message_text_only": "I do love history lessons from people who weren't actually there.\n\nLet me correct your misconceptions.\n\n\nInitially there was no block size limit - it was thought that the fee\n> market would naturally develop and would impose economic constraints on\n> growth.\n\n\nThe term \"fee market\" was never used back then, and Satoshi did not ever\npostulate economic constraints on growth. Back then the talk was (quite\nsensibly) how to grow faster, not how to slow things down!\n\n\n\n> But this hypothesis failed after a sudden influx of new uses. It was still\n> too easy to attack the network. This idea had to wait until the network was\n> more mature to handle things.\n>\n\nNo such event happened, and the hypothesis of which you talk never existed.\n\n\n\n> Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit.\n\n\nThe one megabyte limit was nothing to do with anti spam. It was a quick\nkludge to try and avoid the user experience degrading significantly in the\nevent of a \"DoS block\", back when everyone used Bitcoin-Qt. The fear was\nthat some malicious miner would generate massive blocks and make the wallet\ntoo painful to use, before there were any alternatives.\n\nThe plan was to remove it once SPV wallets were widespread. But Satoshi\nleft before that happened.\n\n\nNow on to your claims:\n\n1) We never really got to test things out\u2026a fee market never really got\n> created, we never got to see how fees would really work in practice.\n>\n\nThe limit had nothing to do with fees. Satoshi explicitly wanted free\ntransactions to last as long as possible.\n\n\n> 2) Turns out the vast majority of validation nodes have little if anything\n> to do with mining - validators do not get compensated\u2026validation cost is\n> externalized to the entire network.\n>\n\nSatoshi explicitly envisioned a future where only miners ran nodes, so it\nhad nothing to do with this either.\n\nValidators validate for themselves. Calculating a local UTXO set and then\nnot using it for anything doesn't help anyone. SPV wallets need filtering\nand serving capability, but a computer can filter and serve the chain\nwithout validating it.\n\nThe only purposes non-mining, non-rpc-serving, non-Qt-wallet-sustaining\nfull nodes are needed for with today's network are:\n\n   1. Filtering the chain for bandwidth constrained SPV wallets (nb: you\n   can run an SPV wallet that downloads all transactions if you want). But\n   this could be handled by specialised nodes, just like we always imagined in\n   future not every node will serve the entire chain but only special\n   \"archival nodes\"\n\n   2. Relaying validated transactions so SPV wallets can stick a thumb into\n   the wind and heuristically guess whether a transaction is valid or not.\n   This is useful for a better user interface.\n\n   3. Storing the mempool and filtering/serving it so SPV wallets can find\n   transactions that were broadcast before they started, but not yet included\n   in a block. This is useful for a better user interface.\n\nOutside of serving lightweight P2P wallets there's no purpose in running a\nP2P node if you aren't mining, or using it as a trusted node for your own\noperations.\n\nAnd if one day there aren't enough network nodes being run by volunteers to\nservice all the lightweight wallets, then we can easily create an incentive\nscheme to fix that.\n\n\n3) Miners don\u2019t even properly validate blocks. And the bigger the blocks\n> get, the greater the propensity to skip this step. Oops!\n>\n\nMiners who don't validate have a habit of bleeding money:   that's the\nsystem working as designed.\n\n\n\n> 4) A satisfactory mechanism for thin clients to be able to securely obtain\n> reasonably secure, short proofs for their transactions never materialized.\n>\n\nIt did. I designed it. The proofs are short and \"reasonably secure\" in that\nit would be a difficult and expensive attack to mount.\n\nBut as is so often the case with Bitcoin Core these days, someone who came\nalong much later has retroactively decided that the work done so far fails\nto meet some arbitrary and undefined level of perfection. \"Satisfactory\"\nand \"reasonably secure\" don't mean anything, especially not coming from\nsomeone who hasn't done the work, so why should anyone care about that\nopinion of yours?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/79c8c15d/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T10:43:50",
                "message_text_only": "> On Jul 29, 2015, at 2:59 AM, Mike Hearn <hearn at vinumeris.com> wrote:\n> \n> I do love history lessons from people who weren't actually there.\n> \n> Let me correct your misconceptions.\n> \n> \n> Initially there was no block size limit - it was thought that the fee market would naturally develop and would impose economic constraints on growth.\n> \n> The term \"fee market\" was never used back then, and Satoshi did not ever postulate economic constraints on growth. Back then the talk was (quite sensibly) how to grow faster, not how to slow things down!\n\nIrrelevant what term was used - and as brilliant as Satoshi might have been at some things, he obviously got this one wrong.\n> \n\n\n> But this hypothesis failed after a sudden influx of new uses. It was still too easy to attack the network. This idea had to wait until the network was more mature to handle things.\n> \n> No such event happened, and the hypothesis of which you talk never existed.\n> \n\nNobody threatened to start mining huge blocks given how relatively inexpensive it was to mine back then?\n\n> \n> Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit.\n> \n> The one megabyte limit was nothing to do with anti spam. It was a quick kludge to try and avoid the user experience degrading significantly in the event of a \"DoS block\", back when everyone used Bitcoin-Qt. The fear was that some malicious miner would generate massive blocks and make the wallet too painful to use, before there were any alternatives.\n\nI thought I clarified this in an earlier post - I meant DoS. Please don\u2019t digress on such stupid technicalities.\n\n\n> The plan was to remove it once SPV wallets were widespread. But Satoshi left before that happened.\n> \n\nGuess what? SPV wallets are still not particularly widespread\u2026and those that are out there are notoriously terrible at detecting network forks and making sure they are on the right one.\n\n> \n> Now on to your claims:\n> \n> 1) We never really got to test things out\u2026a fee market never really got created, we never got to see how fees would really work in practice.\n> \n> The limit had nothing to do with fees. Satoshi explicitly wanted free transactions to last as long as possible.\n\nSomething has to limit block sizes in practice. Perhaps Satoshi was not constrained by finite computational resources, but the rest of us sure are. The fact that without imposing a hardcoded limit Satoshi couldn\u2019t figure out a way to keep the DoS-block guys away suggests he didn\u2019t have this fully worked out.\n\nI understand that initially it was desirable that transactions be free\u2026but surely even Satoshi understood this couldn\u2019t be perpetually self-sustaining\u2026and that the ability to bid for inclusion in blocks would eventually become a crucial component of the network. Or were fees just added for decoration?\n\nWe\u2019re already more than six years into this. When were these mechanisms going to be developed and tested? After 10 years? 20? Perhaps after 1024 years?(https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki <https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki>)\n\n> \n> 2) Turns out the vast majority of validation nodes have little if anything to do with mining - validators do not get compensated\u2026validation cost is externalized to the entire network.\n> \n> Satoshi explicitly envisioned a future where only miners ran nodes, so it had nothing to do with this either.\n\nAnd Satoshi was dead wrong. As others have pointed out in this thread, while this is certainly of historical interest, it is irrelevant from an engineering perspective.\n\n\n> Validators validate for themselves. Calculating a local UTXO set and then not using it for anything doesn't help anyone. SPV wallets need filtering and serving capability, but a computer can filter and serve the chain without validating it.\n\nRight. Turns out the ledger structure is terrible for constructing the kinds of proofs that are most important to validators - i.e. whether an output exists, what its script and amounts are, whether it\u2019s been spent, etc\u2026\n\nDespite Satoshi\u2019s brilliance, software architecture was obviously not his strongest suit. But it didn\u2019t really matter at the beginning since this was really an experiment\u2026and he succeeded in making his point.\n\n> The only purposes non-mining, non-rpc-serving, non-Qt-wallet-sustaining full nodes are needed for with today's network are:\n> Filtering the chain for bandwidth constrained SPV wallets (nb: you can run an SPV wallet that downloads all transactions if you want). But this could be handled by specialised nodes, just like we always imagined in future not every node will serve the entire chain but only special \"archival nodes\"\n> \n> Relaying validated transactions so SPV wallets can stick a thumb into the wind and heuristically guess whether a transaction is valid or not. This is useful for a better user interface.\n> \n> Storing the mempool and filtering/serving it so SPV wallets can find transactions that were broadcast before they started, but not yet included in a block. This is useful for a better user interface.\n> Outside of serving lightweight P2P wallets there's no purpose in running a P2P node if you aren't mining, or using it as a trusted node for your own operations.\n> \n> And if one day there aren't enough network nodes being run by volunteers to service all the lightweight wallets, then we can easily create an incentive scheme to fix that.\n\nYes, let\u2019s wait until things are about to break before even beginning to address the issue\u2026because we can \u201ceasily create\u201d anything we haven\u2019t invented yet at the last minute.\n\n> \n> \n> 3) Miners don\u2019t even properly validate blocks. And the bigger the blocks get, the greater the propensity to skip this step. Oops!\n> \n> Miners who don't validate have a habit of bleeding money:   that's the system working as designed.\n> \n\nErm\u2026most miners just trust mining pool operators to validate blocks for them\u2026and some of the biggest pools have been blatantly cutting corners. Yes, a few pools might have temporarily bled a little\u2026but properly validating is probably not the equilibrium strategy\u2026and as time goes on, they are likely to start cutting corners again. Whether they ultimately bleed money isn\u2019t really the point - many believe that cutting corners is actually a rational strategy. If you want to discuss the game theory behind this, fine\u2026but the fact some of the biggest mining pool operators are on record saying they are likely to continue doing this is enough to seriously put to question one of the most fundamental assumptions behind the network security model.\n\n> \n> 4) A satisfactory mechanism for thin clients to be able to securely obtain reasonably secure, short proofs for their transactions never materialized.\n> \n> It did. I designed it. The proofs are short and \"reasonably secure\" in that it would be a difficult and expensive attack to mount.\n\nYou have my respect for BIP37, Mike. I know you can do amazing work. You actually made SPV semi-useful despite inheriting such crappy data structures. This is indeed to be respected.\n\n> \n> But as is so often the case with Bitcoin Core these days, someone who came along much later has retroactively decided that the work done so far fails to meet some arbitrary and undefined level of perfection. \"Satisfactory\" and \"reasonably secure\" don't mean anything, especially not coming from someone who hasn't done the work, so why should anyone care about that opinion of yours?\n\nNot done the work?\n\nI\u2019m one of the very few developers in this space that has actually tried *hard* to make your BIP37 work. Amongst the desktop wallets listed on bitcoin.org <http://bitcoin.org/>, there are only two that have always supported SPV (or at least I think MultiBit has always supported it, perhaps I\u2019m wrong). One is MultiBit, the other one is mine. I give you credit for your work\u2026perhaps you could be generous enough to extend me some credit too?\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/215362e9/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/215362e9/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-29T11:15:49",
                "message_text_only": ">\n> Irrelevant what term was used - and as brilliant as Satoshi might have\n> been at some things, he obviously got this one wrong.\n>\n\nI don't think it's obvious. You may disagree, but don't pretend any of this\nstuff is obvious.\n\nConsider this:  the highest Bitcoin tx fees can possibly go is perhaps a\nlittle higher than what our competition charges. Too much higher than that,\nand people will just say, you know what .... I'll make a bank transfer.\nIt's cheaper and not much slower, sometimes no slower at all.\n\nAnd now consider that in many parts of the world bank transfers are free.\n\nThey aren't actually free, of course, but they *appear* to be free because\nthe infrastructure for doing them is cross subsidised by the fees on other\nproducts and services, or hidden in the prices of goods sold.\n\nSo that's a market reality Bitcoin has to handle. It's already more\nexpensive than the competition sometimes, but luckily not much more, and\nanyway Bitcoin has some features those other systems lack (and vice versa).\nSo it can still be competitive.\n\nBut your extremely vague notion of a \"fee market\" neglects to consider that\nit already exists, and it's not a market of \"Bitcoin users buying space in\nBitcoin blocks\". It's \"users paying to move money\".\n\nYou can argue with this sort of economic logic if you like, but don't claim\nthis stuff is obvious.\n\nNobody threatened to start mining huge blocks given how relatively\n> inexpensive it was to mine back then?\n>\n\nNot that I recall. It wasn't a response to any actual event, I think, but\nrather a growing realisation that the code was full of DoS attacks.\n\n\n\n> Guess what? SPV wallets are still not particularly widespread\u2026and those\n> that are out there are notoriously terrible at detecting network forks and\n> making sure they are on the right one.\n>\n\nThe most popular mobile wallet (measured by installs) on Android is SPV. It\nhas between 500,000 and 1 million installs, whilst Coinbase has not yet\ncrossed the 500,000 mark. One of the most popular wallets on iOS is SPV. If\nwe had SPV wallets with better user interfaces on desktops, they'd be more\npopular there too (perhaps MultiBit HD can recapture some lost ground).\n\nSo I would argue that they are in fact very widespread.\n\nLikewise, they are not \"notoriously terrible\" at detecting chain forks.\nThat's a spurious idea that you and Patrick have been pushing lately, but\nthey detect them and follow reorgs across them according to the SPV\nalgorithm, which is based on most work done. This is exactly what they are\ndesigned to do.\n\nContrast this with other lightweight wallets which either don't examine the\nblock chain or implement the algorithm incorrectly, and I fail to see how\nthis can be described as \"notoriously terrible\".\n\n\n\n> I understand that initially it was desirable that transactions be free\u2026but\n> surely even Satoshi understood this couldn\u2019t be perpetually\n> self-sustaining\u2026and that the ability to bid for inclusion in blocks would\n> eventually become a crucial component of the network. Or were fees just\n> added for decoration?\n>\n\nFees were added as a way to get money to miners in a fair and decentralised\nway.\n\nAttaching fees directly to all transactions is certainly one way to use\nthat, but it's not the only way. As noted above, our competitors prefer a\ncombination of price-hiding and cross subsidisation. Both of these can be\nimplemented with tx fees, but not necessarily by trying to artificially\nlimit supply, which is economically nonsensical.\n\n\n\n> We\u2019re already more than six years into this. When were these mechanisms\n> going to be developed and tested? After 10 years? 20? Perhaps after 1024\n> years?(https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki)\n>\n\nMaybe when there is a need? I already discussed this topic of need here:\n\nhttps://medium.com/@octskyward/hashing-7d04a887acc8\n\nRight. Turns out the ledger structure is terrible for constructing the\n> kinds of proofs that are most important to validators - i.e. whether an\n> output exists, what its script and amounts are, whether it\u2019s been spent,\n> etc\u2026\n>\n\nValidators don't require proofs. That's why they are validators.\n\nI think you're trying to say the block chain doesn't provide the kinds of\nproofs that are most important to lightweight wallets. But I would\ndisagree. Even with UTXO commitments, there can still be double spends out\nthere in the networks memory pools you are unaware of. Merely being\npresented with a correctly signed transaction doesn't tell you a whole lot\n..... if you wait for a block, you get the same level of proof regardless\nof whether there are UTXO commitments or not. If you don't then you still\nhave to have some trust in your peers that you are seeing an accurate and\nfull view of network traffic.\n\nSo whilst there are ways to make the protocol incrementally better, when\nyou work through the use cases for these sorts of data structures and ask\n\"how will this impact the user experience\", the primary candidates so far\ndon't seem to make much difference.\n\nRemote attestation from secure hardware would make a big difference though.\nThen you could get rid of the waiting times entirely because you know the\nsending wallet won't double spend.\n\n\nYes, let\u2019s wait until things are about to break before even beginning to\n> address the issue\u2026because we can \u201ceasily create\u201d anything we haven\u2019t\n> invented yet at the last minute.\n>\n\nbitcoinj already has a micropayment channel implementation in it. There's a\nbit of work required to glue everything together, but it's not a massive\nproject to start using this to pay nodes for their services.\n\nBut it's not needed right now:  serving these clients is so darn cheap. And\nthere is plenty of room for optimising things still further!\n\n\n\n> I\u2019m one of the very few developers in this space that has actually tried\n> *hard* to make your BIP37 work. Amongst the desktop wallets listed on\n> bitcoin.org, there are only two that have always supported SPV (or at\n> least I think MultiBit has always supported it, perhaps I\u2019m wrong). One is\n> MultiBit, the other one is mine. I give you credit for your work\u2026perhaps\n> you could be generous enough to extend me some credit too?\n>\n\nMultiBit has always supported it. I apologise for implying you have not\nbuilt a wallet. I think yours is mSIGNA, right? Did it used to be called\nsomething else? I recognise the website design but must admit, I have not\nheard of mSIGNA before.\n\nRegardless, as a fellow implementor, I would appreciate it more if you\ndesigned and implemented upgrades, rather than just trashing the work done\nso far as \"notoriously terrible\", Satoshi as \"not a systems architect\" and\nso on.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/29ef9231/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-29T12:03:45",
                "message_text_only": "> On Jul 29, 2015, at 4:15 AM, Mike Hearn <hearn at vinumeris.com> wrote:\n> \n> Irrelevant what term was used - and as brilliant as Satoshi might have been at some things, he obviously got this one wrong.\n> \n> I don't think it's obvious. You may disagree, but don't pretend any of this stuff is obvious.\n> \n> Consider this:  the highest Bitcoin tx fees can possibly go is perhaps a little higher than what our competition charges. Too much higher than that, and people will just say, you know what .... I'll make a bank transfer. It's cheaper and not much slower, sometimes no slower at all.\n> \n> And now consider that in many parts of the world bank transfers are free.\n> \n> They aren't actually free, of course, but they appear to be free because the infrastructure for doing them is cross subsidised by the fees on other products and services, or hidden in the prices of goods sold.\n> \n> So that's a market reality Bitcoin has to handle. It's already more expensive than the competition sometimes, but luckily not much more, and anyway Bitcoin has some features those other systems lack (and vice versa). So it can still be competitive.\n> \n> But your extremely vague notion of a \"fee market\" neglects to consider that it already exists, and it's not a market of \"Bitcoin users buying space in Bitcoin blocks\". It's \"users paying to move money\".\n> \n> You can argue with this sort of economic logic if you like, but don't claim this stuff is obvious.\n\n100% granted - it was not obvious\u2026and we speak today with the benefit of hindsight.\n\nI\u2019ll clarify my argument, for the sake of anyone who thinks I\u2019m looking to play word games rather than trying to figure out a good way forward.\n\nPoint is\u2026processing blocks requires computational resources that someone needs to put up. Unless the people who are putting up these resources are properly incentivized to continue doing it, the network will fail.\n\nUnfortunately, it was unforeseen that most nodes on the network would turn out to not be miners\u2026and that most miners wouldn\u2019t even run full nodes. Yes, I speak with the benefit of hindsight, had I been discussing this in 2008 I very well could have made the same mistake or worse. But it isn\u2019t 2008, it\u2019s 2015\u2026and we\u2019ve learned a thing or two since.\n\nGiven that things are what they are, it is clear that larger blocks externalize costs onto the rest of the network.\n\nWaiting until we can no longer count on the altruistic goodwill of volunteers because they suddenly decide that they have better uses for their computers is probably not such a wonderful idea. But even worse is further burdening the network with externalized costs before we\u2019ve solved these important issues\u2026especially given the evidence that larger blocks tend to lead to network forks. No, I\u2019m not talking about regular run-of-the-mill reorgs\u2026I\u2019m talking consensus forks - a network partition that cannot be reconciled without manual intervention, so please don\u2019t distract the issue. Yes, each incident occurred for a very different reason\u2026but you\u2019d have to be blind to miss the correlation between bigger blocks and the propensity for forks.\n\nWhat Satoshi might have thought in 2008-2009 is fascinating from a historical perspective, but his early pioneering insights don\u2019t appear to be of much help in addressing these particular issues.\n\n> Nobody threatened to start mining huge blocks given how relatively inexpensive it was to mine back then?\n> \n> Not that I recall. It wasn't a response to any actual event, I think, but rather a growing realisation that the code was full of DoS attacks.\n> \n> \n> Guess what? SPV wallets are still not particularly widespread\u2026and those that are out there are notoriously terrible at detecting network forks and making sure they are on the right one.\n> \n> The most popular mobile wallet (measured by installs) on Android is SPV. It has between 500,000 and 1 million installs, whilst Coinbase has not yet crossed the 500,000 mark. One of the most popular wallets on iOS is SPV. If we had SPV wallets with better user interfaces on desktops, they'd be more popular there too (perhaps MultiBit HD can recapture some lost ground).\n> \n> So I would argue that they are in fact very widespread.\n> \n> Likewise, they are not \"notoriously terrible\" at detecting chain forks. That's a spurious idea that you and Patrick have been pushing lately, but they detect them and follow reorgs across them according to the SPV algorithm, which is based on most work done. This is exactly what they are designed to do.\n> \n> Contrast this with other lightweight wallets which either don't examine the block chain or implement the algorithm incorrectly, and I fail to see how this can be described as \"notoriously terrible\".\n> \n> \n> I understand that initially it was desirable that transactions be free\u2026but surely even Satoshi understood this couldn\u2019t be perpetually self-sustaining\u2026and that the ability to bid for inclusion in blocks would eventually become a crucial component of the network. Or were fees just added for decoration?\n> \n> Fees were added as a way to get money to miners in a fair and decentralised way.\n> \n> Attaching fees directly to all transactions is certainly one way to use that, but it's not the only way. As noted above, our competitors prefer a combination of price-hiding and cross subsidisation. Both of these can be implemented with tx fees, but not necessarily by trying to artificially limit supply, which is economically nonsensical.\n> \n> \n> We\u2019re already more than six years into this. When were these mechanisms going to be developed and tested? After 10 years? 20? Perhaps after 1024 years?(https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki <https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki>)\n> \n> Maybe when there is a need? I already discussed this topic of need here:\n> \n> https://medium.com/@octskyward/hashing-7d04a887acc8 <https://medium.com/@octskyward/hashing-7d04a887acc8>\n> \n> Right. Turns out the ledger structure is terrible for constructing the kinds of proofs that are most important to validators - i.e. whether an output exists, what its script and amounts are, whether it\u2019s been spent, etc\u2026\n> \n> Validators don't require proofs. That's why they are validators.\n> \n> I think you're trying to say the block chain doesn't provide the kinds of proofs that are most important to lightweight wallets. But I would disagree. Even with UTXO commitments, there can still be double spends out there in the networks memory pools you are unaware of. Merely being presented with a correctly signed transaction doesn't tell you a whole lot ..... if you wait for a block, you get the same level of proof regardless of whether there are UTXO commitments or not. If you don't then you still have to have some trust in your peers that you are seeing an accurate and full view of network traffic.\n> \n> So whilst there are ways to make the protocol incrementally better, when you work through the use cases for these sorts of data structures and ask \"how will this impact the user experience\", the primary candidates so far don't seem to make much difference.\n> \n> Remote attestation from secure hardware would make a big difference though. Then you could get rid of the waiting times entirely because you know the sending wallet won't double spend.\n> \n> \n> Yes, let\u2019s wait until things are about to break before even beginning to address the issue\u2026because we can \u201ceasily create\u201d anything we haven\u2019t invented yet at the last minute.\n> \n> bitcoinj already has a micropayment channel implementation in it. There's a bit of work required to glue everything together, but it's not a massive project to start using this to pay nodes for their services.\n> \n> But it's not needed right now:  serving these clients is so darn cheap. And there is plenty of room for optimising things still further!\n> \n> \n> I\u2019m one of the very few developers in this space that has actually tried *hard* to make your BIP37 work. Amongst the desktop wallets listed on bitcoin.org <http://bitcoin.org/>, there are only two that have always supported SPV (or at least I think MultiBit has always supported it, perhaps I\u2019m wrong). One is MultiBit, the other one is mine. I give you credit for your work\u2026perhaps you could be generous enough to extend me some credit too?\n> \n> MultiBit has always supported it. I apologise for implying you have not built a wallet. I think yours is mSIGNA, right? Did it used to be called something else? I recognise the website design but must admit, I have not heard of mSIGNA before.\n> \n> Regardless, as a fellow implementor, I would appreciate it more if you designed and implemented upgrades, rather than just trashing the work done so far as \"notoriously terrible\", Satoshi as \"not a systems architect\" and so on.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/8e1ccf9c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/8e1ccf9c/attachment.sig>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-29T12:13:04",
                "message_text_only": "On Wednesday 29. July 2015 05.03.45 Eric Lombrozo via bitcoin-dev wrote:\n> Point is\u2026processing blocks requires computational resources that someone\n> needs to put up. Unless the people who are putting up these resources are\n> properly incentivized to continue doing it, the network will fail.\n\nThis assumption is proven wrong by history.\nTake a look at the RC5 challance, and its related cousins like the folding-at-\nhome or seti-at-home.\n\nNext to that, there is incentive for running a node. It is that you don't have \nto trust someone else. This incentive has in business always been a very \nstrong motivator. See how many companies run Outlook on their own intranet \ninstead of using Outlook.com or similarly in the cloud. \n\nIn my own opinion, its waaay to early to call failure on running nodes. Maybe \nyou want to actually help merchants/chains/individuals run them by making \nbitcoin-core more useful for them.\n\nWhat is the reason people don't run it? Well, reddit says its because of the \nupstream bandwidth not being able to be throttled. What about you try working \non that instead of giving up on it?\n-- \nThomas Zander"
            },
            {
                "author": "Owen",
                "date": "2015-07-29T19:56:57",
                "message_text_only": "On July 29, 2015 7:15:49 AM EDT, Mike Hearn via bitcoin-dev:\n>Consider this:  the highest Bitcoin tx fees can possibly go is perhaps\n>a\n>little higher than what our competition charges. Too much higher than\n>that,\n>and people will just say, you know what .... I'll make a bank transfer.\n>It's cheaper and not much slower, sometimes no slower at all.\n\nI respectfully disagree with this analysis. The implication is that bitcoin is merely one of a number of payment technologies. It's much more than that. It's sound money, censorship resistance, personal control over money, programmable money, and more. Without these attributes it's merely a really inefficient way to do payments. \n\nGiven these advantages, there is no reason to believe the marginal cost of a transaction can't far surpass that of a PayPal or bank transfer. I personally would pay several multiples of the competitors' fees to continue using bitcoin.\n\nSure, some marginal use cases will drop off with greater fees, but that's normal and expected. These will be use cases where the user doesn't care about bitcoin's advantages. We must be willing to let these use cases go anyway, because we unfortunately don't have room on chain for everything anyone might want to do.\n\nTherefore, bitcoin tx fees can go much higher than the competition.\n\nRemember how Satoshi referenced the banking crisis in his early work? The 2008 banking crisis was about a lot of things, but high credit card and paypal fees wasnt one of them. There's more going on here than just payments. Any speculative economic analysis would do better to include this fact."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-29T20:09:05",
                "message_text_only": "On Wed, Jul 29, 2015 at 7:56 PM, Owen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On July 29, 2015 7:15:49 AM EDT, Mike Hearn via bitcoin-dev:\n>>Consider this:  the highest Bitcoin tx fees can possibly go is perhaps\n>>a\n>>little higher than what our competition charges. Too much higher than\n>>that,\n>>and people will just say, you know what .... I'll make a bank transfer.\n>>It's cheaper and not much slower, sometimes no slower at all.\n>\n> I respectfully disagree with this analysis. The implication is that bitcoin is merely one of a number of payment technologies. It's much more than that. It's sound money, censorship resistance, personal control over money, programmable money, and more. Without these attributes it's merely a really inefficient way to do payments.\n>\n> Given these advantages, there is no reason to believe the marginal cost of a transaction can't far surpass that of a PayPal or bank transfer. I personally would pay several multiples of the competitors' fees to continue using bitcoin.\n>\n> Sure, some marginal use cases will drop off with greater fees, but that's normal and expected. These will be use cases where the user doesn't care about bitcoin's advantages. We must be willing to let these use cases go anyway, because we unfortunately don't have room on chain for everything anyone might want to do.\n>\n> Therefore, bitcoin tx fees can go much higher than the competition.\n>\n> Remember how Satoshi referenced the banking crisis in his early work? The 2008 banking crisis was about a lot of things, but high credit card and paypal fees wasnt one of them. There's more going on here than just payments. Any speculative economic analysis would do better to include this fact.\n\nPrecisely.  And as \"just a payment system\" Bitcoin is not an\nespecially great one: The design requirements for decenteralization\nimpose considerable costs.  To the extent that the technology in\nBitcoin is useful at all for building \"just another payment system\"\nthis technology in in the process of being agressively copied by\nparties with deep fiat relationships (including in partnership with\ncenteral banks).  If the focus for Bitcoin's competative advantage\nbecomes exclusively \"better\" payments then it will almost certinatly\nfail in the market-place against competing systems which avoid the\nBitcoin currency adoption related obsticles (but also gain none of\nBitcoin's important social/political promise).\n\nAlso, critically, if Bitcoin's security properties are manintained and\nenhanced then Bitcoin can be used to build secure systems which _also_\naccomidate those applications and we can have both. But if Bitcoin's\nsecurity properties are not strong then then advanced tools cannot be\nbuilt for it.  E.g. atomic swaps make trustless trades with external\nsystems possible; but they are especially sensitive to long\nreorginizations by miners... so they can only be securely used where\nthose reorgs are infeasable.  So while I agree that we must be willing\nto tolerate not catching every conceivable use case; most of the time\nall that means is addressing them via a less direct but more focused\nsolution rather than ignoring them completely."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-30T08:21:02",
                "message_text_only": "I usually avoid troll-infested Dunning-Kruger-gone-wild fests like reddit, so I\u2019ll leave that to others.\n\nBut I do want to clarify a couple things here, though, Andrew.\n\nFirst of all, the issue is not about whether it is affordable for a highly motivated, technically skilled person to continue running a node even if we increase block size by a factor of X. This misses the point for at least a couple reasons:\n\n- Regardless of what that X is, it isn\u2019t really going to be what makes this technology accessible to the masses. We would likely need the X to be in the thousands before we start to really take on players like Visa. Despite what people might have thought in 2009, it turns out Bitcoin is probably pretty ill-suited as a database in which to store the entire transaction history of the entire world. It\u2019s looking to be more of a censorship-resistant dispute resolution mechanism that provides very well-defined settlement guarantees with the potential for encoding complex rules. It\u2019s possible to build higher level tiers on top of it that DO support high volume transaction processing WITHOUT costing thousands of times more, and these approaches are looking quite promising. However, it doesn\u2019t seem very many people in this space quite grasp this paradigm shift yet.\n\n- What matters is not how a relatively small number of well-intentioned people in the network behave. What matters is how the network behaves as a whole\u2026and a number of the people most intimately familiar with the inner workings of the system (some of whom are in this thread) think that given what we now today about the Bitcoin network, increasing block size externalizes costs in dangerous ways. Remember that total cost includes not just equipment costs but also things like block propagation latency and specifically identified security risks. Some of these security risks were only appreciated relatively recently and were completely unknown in 2009.\n\n\n> On Jul 29, 2015, at 9:51 PM, Andrew LeCody via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> tl;dr\n> $100 worth of hardware and $1/mo of expenses, should be able to run a full\n> Bitcoin node until 2020 with BIP101-size blocks.\n> \n> ----\n> \n> I got into Bitcoin in the summer of 2010. I'm not a cryptographer, up until\n> recently my profession has been as a server administrator or systems\n> engineer.\n> \n> I'd like to take a second to address the concern that larger blocks would\n> make it harder to run a full node on limited hardware and would therefore\n> hurt decentralization. I run two nodes today, one on server-grade hardware\n> at a datacenter and another on a mini-ITX Atom (dual core) system at my\n> home.\n> \n> I detailed the operational costs of my home node today on reddit:\n> https://www.reddit.com/r/Bitcoin/comments/3f0h8e/mike_h_shuts_down_eric_ls_attempt_to_rewrite/ctkigpr\n> \n> If I was a new user, wanting to run a full node. The most cost effective\n> way would likely be with a Raspberry Pi 2 and a 2TB external HDD. Total\n> cost about $100, including charger, microSD card, etc. That is less than\n> the cost of a TREZOR hardware wallet. As far as home projects go, not\n> terribly expensive.\n> \n> Next, it will need power. According to the Wikipedia article, the rpi 2\n> model B uses 3.5 watts of power max. The 2TB external drive will draw about\n> 5 watts at max. That's a total of 8.5 watts or 6.205 Kwh per month. In my\n> area (North Texas) power is about $0.10/Kwh, which means my little node\n> costs $0.62 per month in power.\n> \n> Last, lets look at bandwidth. It's difficult to quantify bandwidth cost in\n> the same way because this is a home connection, mainly because I don't know\n> how to price in the loss of enjoyment if the system impacts my Internet\n> usage to a noticeable degree. Luckily, I have some real world data from my\n> existing home node. Here is the last month:\n> http://imgur.com/YmJwQpN\n> \n> This system averages 120 Kbps in and 544 Kbps out. Note, this data is\n> somewhat skewed, because the system is also used for seeding torrents of\n> various open source projects. The Bitcoin node itself is typically\n> connected to about 20 peers at any given time (maxconnections=20).\n> \n> Subjectively, my wife and I have never noticed any degradation of\n> performance due to my home server using too much bandwidth. I think it's\n> safe to say that I can treat the bandwidth is uses as effectively free,\n> since it's piggybacking on a connection I would be paying for even if I was\n> not running a Bitcoin node. The bandwidth usage of this Bitcoin node could\n> increase significantly, without any noticeable impact. If it did, I could\n> always lower maxconnections back to 8.\n> \n> The only real constraint seems to be hard drive space, as the full\n> blockchain and indexes take up about 50GB of space currently. If BIP101 is\n> implemented, 2TB of storage should be enough for me to continue running my\n> hypothetical $100 node until about 2020.\n> \n> It seems to me that at least for the next 5 years, the \"small devices\" of\n> today can easily run Bitcoin nodes with BIP101-size blocks, with very\n> little operational cost.\n> \n> If anyone would like more detailed data on my existing nodes, please let me\n> know and I'll attempt to provide it (so long as it doesn't impact my\n> privacy of course).\n> \n> On Wed, Jul 29, 2015 at 10:49 PM Adam Back via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> I dont think people consider other blockchains as a competitive\n>> threat.  A PoW-blockchain is a largely singleton data structure for\n>> security reasons (single highest hashrate), it is hard for an\n>> alternative chain to bootstrap or provide meaningful security.\n>> Secondly the world largely lacks expertise to maintain a blockchain to\n>> bitcoin's security level, perhaps you can see a hint of this in the\n>> recently disclosed security vulnerability by Pieter Wuille and Gregory\n>> Maxwell.  Calls to this as an argument are not resonating and probably\n>> not helping your argument.  Bitcoin has security properties, and a\n>> competing system cant achieve better properties by bypassing security,\n>> any blockchain faces the same fundamental security / decentralisation\n>> limitations.\n>> \n>> Secondly Bitcoin can obviously compete with itself with different\n>> parameters and defacto *does* today.  I think it is a safe estimate\n>> that > 99% of Bitcoin transactions right now are happening in Bitcoin\n>> related systems with various degrees of audit, reconciliation,\n>> provable reserves etc.  I think we can expect this to continue and\n>> become more secure via more reconciliation, and longer term via\n>> lightning or Bitcoin sidechains with different parameters.  It is a\n>> different story to have a single central system (Bitcoin with\n>> parameters changed to the point of centralisation failure) vs having\n>> multiple choices, because some transactions can more easily use\n>> relatively centralised systems (eg micropayments), and more\n>> interestingly the combination of a secure and decentralised layer 1\n>> plus choices of less decentralised layer 2 options, can be interesting\n>> because the layer 2 is provided cover from attack.  There is less to\n>> be gained by attacking relatively centralised layer 2 because any\n>> payments at risk of policy abuse (which is typically a small subset)\n>> can easily switch to layer 1.  That in itself makes layer 2\n>> transactions also less susceptible to policy abuse.  Further lightning\n>> it appears from work so far should add significant scale while\n>> retaining trustlessness and a good degree of decentralisation.\n>> \n>> Finally you seem to be focusing on \"artificial\" limits where that is\n>> not the issue under consideration.  The limits are technical and\n>> relating to decentralisation and security.  I wont go over them again\n>> as this topic has been covered many times in recent months.  Any chain\n>> that tried to go to extreme parameters (very low block intervals, or\n>> very large blocksizes) would have the same decentralisation problems\n>> as Bitcoin would if it did the same thing.  There are a number of alt\n>> coins that have failed as a result of poor parameter choices, there\n>> are inherent security limits.\n>> \n>> Adam\n>> \n>> ps Etiquette note for yourself and others: please dont be repetitive\n>> or attempt to be forceful.  Many people have spent many years\n>> understanding this very complex system, from my own experience it is\n>> rare indeed to think of an entirely new concept or analysis, that\n>> hasnt' been long considered and put to bed 3 or 4 years ago.\n>> Thoughtful polite and constructive comments are welcome but I\n>> recommend to not start from an assumption that you have a clear and\n>> better insight than the entire technical community, because I have to\n>> say from my own experience that is very rarely the case.  It can be\n>> useful to test theories on #bitcoin IRC channel to find out what has\n>> been already concluded, find the references and avoid having to have\n>> that hashed out on this list which is trying to be focussed on\n>> technical solutions.\n>> \n>> \n>> On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n>>>> all of the smart contract, programmable money, consensus coding and\n>>>> tremendous developer effort is bent to the consumer demand for cheaper\n>>>> fees. Surely thou jests!\n>>> \n>>> \n>>> These other features can be replicated into any alternative blockchain,\n>>> including those with lower fees.  In the open-source world of\n>>> cryptocurrency, no feature will remain a value-add for very long after it\n>>> has been identified to be such.  Anything adding value will quickly be\n>>> absorbed into competing alternative blockchains.  That will leave\n>> economic\n>>> policy as the distinguishing factor.\n>>> \n>>>> ... it is not the case ... that reluctance to concede\n>>>> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n>>>> explained in this thread that the protocol's current state of\n>>>> development relies on  blocksize for security and, ultimately, as a\n>>>> means of protecting its degree of decentralization.\n>>> \n>>> \n>>> A slow or lack of increase to maximum transaction rate will cause\n>> pressure\n>>> on fees.  Whether this is the desired goal is not relevant.  Everyone has\n>>> agreed this will be the outcome.  As to a smaller block size being needed\n>>> for additional decentralization, one must simply ask how much we are all\n>>> willing to pay for that additional decentralization.  It is likely that\n>> the\n>>> benefit thereto will have to be demonstrated by some power attacking and\n>>> destroying a less decentralized currency before the benefit of this\n>> feature\n>>> is given monetary value by the market.  Until then, value will bleed to\n>> the\n>>> network with the least friction, because it will have the greatest\n>> ability\n>>> to grow its network effect.  That means the blockchain with adequate\n>>> features and cheapest fees will eventually have the largest market share.\n>>> \n>>> \n>>> -----Original Message----- From: Venzen Khaosan\n>>> Sent: Wednesday, July 29, 2015 3:11 PM\n>>> To: Raystonn .\n>>> Cc: bitcoin-dev at lists.linuxfoundation.org\n>>> Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure\n>>> isn'ttemporary\n>>> \n>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>> Hash: SHA1\n>>> \n>>> Raystonn, I'm aware that you're addressing your question to Greg\n>>> Maxwell, however a point you keep stating as fact calls for reference:\n>>> \n>>> On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n>>> [snip]\n>>>> \n>>>> How do you plan to address the bleeding of value from Bitcoin to\n>>>> alternative lower-fee blockchains created by the artificially-high\n>>>> bitcoin transaction fees when users begin looking for the cheapest\n>>>> way to send value?\n>>> \n>>> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n>>> all of the smart contract, programmable money, consensus coding and\n>>> tremendous developer effort is bent to the consumer demand for cheaper\n>>> fees. Surely thou jests!\n>>> \n>>>> Modern economic study has shown that liquidity moves to the\n>>>> location of least friction.\n>>> \n>>> Modern economic study? Can you please provide a link or reference to\n>>> the study you are referring to.\n>>> \n>>> \"liquidity moves to the location of least friction\"\n>>> \n>>> This sounds like \"econo-speak\" and makes no sense. The definition of\n>>> Liquidity is the degree to which an asset/security can be bought or\n>>> sold in the market without affecting the price.\n>>> \n>>> That is why bitcoin is said to have low liquidity: buying or selling\n>>> only 100 BTC visibly affects the exchange price. You probably mean\n>>> \"people like cheap fees\", which is true, but as others have said,\n>>> because of Bitcoin's powerful features, they are willing to pay higher\n>>> fees and wait longer for transactions to execute.\n>>> \n>>> As for your public cross-examination of Greg Maxwell, your case seems\n>>> to  be made on the assumption that limiting the size of the blockchain\n>>> is an attempt to artificially raise tx fees, but it is not the case\n>>> (as you and others repeatedly argue) that reluctance to concede\n>>> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n>>> explained in this thread that the protocol's current state of\n>>> development relies on  blocksize for security and, ultimately, as a\n>>> means of protecting its degree of decentralization.\n>>> \n>>> Surely, this is an obvious concern even for those who are campaigning\n>>> for the hare-brained ideal of making Bitcoin a \"faster, cheaper\n>>> alternative\" to visa or paypal? If we lose decentralization, we lose\n>>> the whole thing, right? Incorrect or correct?\n>>> -----BEGIN PGP SIGNATURE-----\n>>> Version: GnuPG v1\n>>> \n>>> iQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\n>>> RXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\n>>> h7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\n>>> Mp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\n>>> YhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\n>>> BXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n>>> =lQvy\n>>> -----END PGP SIGNATURE-----\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/e5b0540c/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-30T09:15:25",
                "message_text_only": "> On Jul 30, 2015, at 1:21 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> \n> I usually avoid troll-infested Dunning-Kruger-gone-wild fests like reddit, so I\u2019ll leave that to others.\n> \n> But I do want to clarify a couple things here, though, Andrew.\n> \n> First of all, the issue is not about whether it is affordable for a highly motivated, technically skilled person to continue running a node even if we increase block size by a factor of X. This misses the point for at least a couple reasons:\n> \n> - Regardless of what that X is, it isn\u2019t really going to be what makes this technology accessible to the masses. We would likely need the X to be in the thousands before we start to really take on players like Visa. Despite what people might have thought in 2009, it turns out Bitcoin is probably pretty ill-suited as a database in which to store the entire transaction history of the entire world. It\u2019s looking to be more of a censorship-resistant dispute resolution mechanism that provides very well-defined settlement guarantees with the potential for encoding complex rules. It\u2019s possible to build higher level tiers on top of it that DO support high volume transaction processing WITHOUT costing thousands of times more, and these approaches are looking quite promising. However, it doesn\u2019t seem very many people in this space quite grasp this paradigm shift yet.\n> \n> - What matters is not how a relatively small number of well-intentioned people in the network behave. What matters is how the network behaves as a whole\u2026and a number of the people most intimately familiar with the inner workings of the system (some of whom are in this thread) think that given what we now today about the Bitcoin network, increasing block size externalizes costs in dangerous ways. Remember that total cost includes not just equipment costs but also things like block propagation latency and specifically identified security risks. Some of these security risks were only appreciated relatively recently and were completely unknown in 2009.\n> \n\nSecondly, there are a few well-identified problems with the protocol design that might be possible to fix that would perhaps allow us to remove the block size limit entirely without sacrificing security. I listed the ones that come to my mind at the beginning of this thread. I EMPHATICALLY state that in no way am I fundamentally opposed to raising or even getting rid of the block size limit. But I believe these problems should be addressed first. And it\u2019s easier to address them and tackle them if we don\u2019t have to worry about potential security risks and higher costs that come from insisting on bigger blocks right now.\n\n- Eric\n\n\n>> On Jul 29, 2015, at 9:51 PM, Andrew LeCody via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> tl;dr\n>> $100 worth of hardware and $1/mo of expenses, should be able to run a full\n>> Bitcoin node until 2020 with BIP101-size blocks.\n>> \n>> ----\n>> \n>> I got into Bitcoin in the summer of 2010. I'm not a cryptographer, up until\n>> recently my profession has been as a server administrator or systems\n>> engineer.\n>> \n>> I'd like to take a second to address the concern that larger blocks would\n>> make it harder to run a full node on limited hardware and would therefore\n>> hurt decentralization. I run two nodes today, one on server-grade hardware\n>> at a datacenter and another on a mini-ITX Atom (dual core) system at my\n>> home.\n>> \n>> I detailed the operational costs of my home node today on reddit:\n>> https://www.reddit.com/r/Bitcoin/comments/3f0h8e/mike_h_shuts_down_eric_ls_attempt_to_rewrite/ctkigpr\n>> \n>> If I was a new user, wanting to run a full node. The most cost effective\n>> way would likely be with a Raspberry Pi 2 and a 2TB external HDD. Total\n>> cost about $100, including charger, microSD card, etc. That is less than\n>> the cost of a TREZOR hardware wallet. As far as home projects go, not\n>> terribly expensive.\n>> \n>> Next, it will need power. According to the Wikipedia article, the rpi 2\n>> model B uses 3.5 watts of power max. The 2TB external drive will draw about\n>> 5 watts at max. That's a total of 8.5 watts or 6.205 Kwh per month. In my\n>> area (North Texas) power is about $0.10/Kwh, which means my little node\n>> costs $0.62 per month in power.\n>> \n>> Last, lets look at bandwidth. It's difficult to quantify bandwidth cost in\n>> the same way because this is a home connection, mainly because I don't know\n>> how to price in the loss of enjoyment if the system impacts my Internet\n>> usage to a noticeable degree. Luckily, I have some real world data from my\n>> existing home node. Here is the last month:\n>> http://imgur.com/YmJwQpN\n>> \n>> This system averages 120 Kbps in and 544 Kbps out. Note, this data is\n>> somewhat skewed, because the system is also used for seeding torrents of\n>> various open source projects. The Bitcoin node itself is typically\n>> connected to about 20 peers at any given time (maxconnections=20).\n>> \n>> Subjectively, my wife and I have never noticed any degradation of\n>> performance due to my home server using too much bandwidth. I think it's\n>> safe to say that I can treat the bandwidth is uses as effectively free,\n>> since it's piggybacking on a connection I would be paying for even if I was\n>> not running a Bitcoin node. The bandwidth usage of this Bitcoin node could\n>> increase significantly, without any noticeable impact. If it did, I could\n>> always lower maxconnections back to 8.\n>> \n>> The only real constraint seems to be hard drive space, as the full\n>> blockchain and indexes take up about 50GB of space currently. If BIP101 is\n>> implemented, 2TB of storage should be enough for me to continue running my\n>> hypothetical $100 node until about 2020.\n>> \n>> It seems to me that at least for the next 5 years, the \"small devices\" of\n>> today can easily run Bitcoin nodes with BIP101-size blocks, with very\n>> little operational cost.\n>> \n>> If anyone would like more detailed data on my existing nodes, please let me\n>> know and I'll attempt to provide it (so long as it doesn't impact my\n>> privacy of course).\n>> \n>> On Wed, Jul 29, 2015 at 10:49 PM Adam Back via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>>> I dont think people consider other blockchains as a competitive\n>>> threat.  A PoW-blockchain is a largely singleton data structure for\n>>> security reasons (single highest hashrate), it is hard for an\n>>> alternative chain to bootstrap or provide meaningful security.\n>>> Secondly the world largely lacks expertise to maintain a blockchain to\n>>> bitcoin's security level, perhaps you can see a hint of this in the\n>>> recently disclosed security vulnerability by Pieter Wuille and Gregory\n>>> Maxwell.  Calls to this as an argument are not resonating and probably\n>>> not helping your argument.  Bitcoin has security properties, and a\n>>> competing system cant achieve better properties by bypassing security,\n>>> any blockchain faces the same fundamental security / decentralisation\n>>> limitations.\n>>> \n>>> Secondly Bitcoin can obviously compete with itself with different\n>>> parameters and defacto *does* today.  I think it is a safe estimate\n>>> that > 99% of Bitcoin transactions right now are happening in Bitcoin\n>>> related systems with various degrees of audit, reconciliation,\n>>> provable reserves etc.  I think we can expect this to continue and\n>>> become more secure via more reconciliation, and longer term via\n>>> lightning or Bitcoin sidechains with different parameters.  It is a\n>>> different story to have a single central system (Bitcoin with\n>>> parameters changed to the point of centralisation failure) vs having\n>>> multiple choices, because some transactions can more easily use\n>>> relatively centralised systems (eg micropayments), and more\n>>> interestingly the combination of a secure and decentralised layer 1\n>>> plus choices of less decentralised layer 2 options, can be interesting\n>>> because the layer 2 is provided cover from attack.  There is less to\n>>> be gained by attacking relatively centralised layer 2 because any\n>>> payments at risk of policy abuse (which is typically a small subset)\n>>> can easily switch to layer 1.  That in itself makes layer 2\n>>> transactions also less susceptible to policy abuse.  Further lightning\n>>> it appears from work so far should add significant scale while\n>>> retaining trustlessness and a good degree of decentralisation.\n>>> \n>>> Finally you seem to be focusing on \"artificial\" limits where that is\n>>> not the issue under consideration.  The limits are technical and\n>>> relating to decentralisation and security.  I wont go over them again\n>>> as this topic has been covered many times in recent months.  Any chain\n>>> that tried to go to extreme parameters (very low block intervals, or\n>>> very large blocksizes) would have the same decentralisation problems\n>>> as Bitcoin would if it did the same thing.  There are a number of alt\n>>> coins that have failed as a result of poor parameter choices, there\n>>> are inherent security limits.\n>>> \n>>> Adam\n>>> \n>>> ps Etiquette note for yourself and others: please dont be repetitive\n>>> or attempt to be forceful.  Many people have spent many years\n>>> understanding this very complex system, from my own experience it is\n>>> rare indeed to think of an entirely new concept or analysis, that\n>>> hasnt' been long considered and put to bed 3 or 4 years ago.\n>>> Thoughtful polite and constructive comments are welcome but I\n>>> recommend to not start from an assumption that you have a clear and\n>>> better insight than the entire technical community, because I have to\n>>> say from my own experience that is very rarely the case.  It can be\n>>> useful to test theories on #bitcoin IRC channel to find out what has\n>>> been already concluded, find the references and avoid having to have\n>>> that hashed out on this list which is trying to be focussed on\n>>> technical solutions.\n>>> \n>>> \n>>> On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n>>>>> all of the smart contract, programmable money, consensus coding and\n>>>>> tremendous developer effort is bent to the consumer demand for cheaper\n>>>>> fees. Surely thou jests!\n>>>> \n>>>> \n>>>> These other features can be replicated into any alternative blockchain,\n>>>> including those with lower fees.  In the open-source world of\n>>>> cryptocurrency, no feature will remain a value-add for very long after it\n>>>> has been identified to be such.  Anything adding value will quickly be\n>>>> absorbed into competing alternative blockchains.  That will leave\n>>> economic\n>>>> policy as the distinguishing factor.\n>>>> \n>>>>> ... it is not the case ... that reluctance to concede\n>>>>> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n>>>>> explained in this thread that the protocol's current state of\n>>>>> development relies on  blocksize for security and, ultimately, as a\n>>>>> means of protecting its degree of decentralization.\n>>>> \n>>>> \n>>>> A slow or lack of increase to maximum transaction rate will cause\n>>> pressure\n>>>> on fees.  Whether this is the desired goal is not relevant.  Everyone has\n>>>> agreed this will be the outcome.  As to a smaller block size being needed\n>>>> for additional decentralization, one must simply ask how much we are all\n>>>> willing to pay for that additional decentralization.  It is likely that\n>>> the\n>>>> benefit thereto will have to be demonstrated by some power attacking and\n>>>> destroying a less decentralized currency before the benefit of this\n>>> feature\n>>>> is given monetary value by the market.  Until then, value will bleed to\n>>> the\n>>>> network with the least friction, because it will have the greatest\n>>> ability\n>>>> to grow its network effect.  That means the blockchain with adequate\n>>>> features and cheapest fees will eventually have the largest market share.\n>>>> \n>>>> \n>>>> -----Original Message----- From: Venzen Khaosan\n>>>> Sent: Wednesday, July 29, 2015 3:11 PM\n>>>> To: Raystonn .\n>>>> Cc: bitcoin-dev at lists.linuxfoundation.org\n>>>> Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure\n>>>> isn'ttemporary\n>>>> \n>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>> Hash: SHA1\n>>>> \n>>>> Raystonn, I'm aware that you're addressing your question to Greg\n>>>> Maxwell, however a point you keep stating as fact calls for reference:\n>>>> \n>>>> On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n>>>> [snip]\n>>>>> \n>>>>> How do you plan to address the bleeding of value from Bitcoin to\n>>>>> alternative lower-fee blockchains created by the artificially-high\n>>>>> bitcoin transaction fees when users begin looking for the cheapest\n>>>>> way to send value?\n>>>> \n>>>> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n>>>> all of the smart contract, programmable money, consensus coding and\n>>>> tremendous developer effort is bent to the consumer demand for cheaper\n>>>> fees. Surely thou jests!\n>>>> \n>>>>> Modern economic study has shown that liquidity moves to the\n>>>>> location of least friction.\n>>>> \n>>>> Modern economic study? Can you please provide a link or reference to\n>>>> the study you are referring to.\n>>>> \n>>>> \"liquidity moves to the location of least friction\"\n>>>> \n>>>> This sounds like \"econo-speak\" and makes no sense. The definition of\n>>>> Liquidity is the degree to which an asset/security can be bought or\n>>>> sold in the market without affecting the price.\n>>>> \n>>>> That is why bitcoin is said to have low liquidity: buying or selling\n>>>> only 100 BTC visibly affects the exchange price. You probably mean\n>>>> \"people like cheap fees\", which is true, but as others have said,\n>>>> because of Bitcoin's powerful features, they are willing to pay higher\n>>>> fees and wait longer for transactions to execute.\n>>>> \n>>>> As for your public cross-examination of Greg Maxwell, your case seems\n>>>> to  be made on the assumption that limiting the size of the blockchain\n>>>> is an attempt to artificially raise tx fees, but it is not the case\n>>>> (as you and others repeatedly argue) that reluctance to concede\n>>>> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n>>>> explained in this thread that the protocol's current state of\n>>>> development relies on  blocksize for security and, ultimately, as a\n>>>> means of protecting its degree of decentralization.\n>>>> \n>>>> Surely, this is an obvious concern even for those who are campaigning\n>>>> for the hare-brained ideal of making Bitcoin a \"faster, cheaper\n>>>> alternative\" to visa or paypal? If we lose decentralization, we lose\n>>>> the whole thing, right? Incorrect or correct?\n>>>> -----BEGIN PGP SIGNATURE-----\n>>>> Version: GnuPG v1\n>>>> \n>>>> iQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\n>>>> RXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\n>>>> h7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\n>>>> Mp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\n>>>> YhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\n>>>> BXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n>>>> =lQvy\n>>>> -----END PGP SIGNATURE-----\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/52d2c365/attachment.sig>"
            },
            {
                "author": "Gavin",
                "date": "2015-07-30T12:29:49",
                "message_text_only": "> On Jul 30, 2015, at 4:21 AM, Eric Lombrozo wrote:\n> \n> and a number of the people most intimately familiar with the inner workings of the system (some of whom are in this thread) think that given what we now today about the Bitcoin network, increasing block size externalizes costs in dangerous ways. Remember that total cost includes not just equipment costs but also things like block propagation latency and specifically identified security risks. Some of these security risks were only appreciated relatively recently and were completely unknown in 2009.\n\nI would like (and have been asking) those people to take the time to quantify those costs and write up those risks in a careful way.\n\nI believe the costs and risks of 8MB blocks are minimal, and that the benefits of supporting more transaction FAR outweigh those costs and risks, but it is hard to have a rational conversation about that when even simple questions like 'what is s reasonable cost to run a full node' are met with silence."
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-07-30T12:50:46",
                "message_text_only": "On Thu, Jul 30, 2015 at 2:29 PM, Gavin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> > On Jul 30, 2015, at 4:21 AM, Eric Lombrozo wrote:\n> >\n> > and a number of the people most intimately familiar with the inner\n> workings of the system (some of whom are in this thread) think that given\n> what we now today about the Bitcoin network, increasing block size\n> externalizes costs in dangerous ways. Remember that total cost includes not\n> just equipment costs but also things like block propagation latency and\n> specifically identified security risks. Some of these security risks were\n> only appreciated relatively recently and were completely unknown in 2009.\n>\n> I would like (and have been asking) those people to take the time to\n> quantify those costs and write up those risks in a careful way.\n>\n> I believe the costs and risks of 8MB blocks are minimal, and that the\n> benefits of supporting more transaction FAR outweigh those costs and risks,\n> but it is hard to have a rational conversation about that when even simple\n> questions like 'what is s reasonable cost to run a full node' are met with\n> silence.\n>\n\nI think the benefit of an 8 MB over a 1 MB in terms of utility is marginal\n(even assuming miners actually produce 8 MB blocks). There are very few use\ncases that Bitcoin on-chain can support with a small extra factor. I think\nthe market will grow to adapt to whatever is offered anyway.\n\nBitcoin's advantage over other systems does not lie in scalability.\nWell-designed centralized systems can trivially compete with Bitcoin's\non-chain transactions in terms of cost, speed, reliability, convenience,\nand scale. Its power lies in transparency, lack of need for trust in\nnetwork peers, miners, and those who influence or control the system.\nWanting to increase the scale of the system is in conflict with all of\nthose. Attempting to buy time with a fast increase is not wanting to face\nthat reality, and treating the system as something whose scale trumps all\nother concerns. A long term scalability plan should aim on decreasing the\nneed for trust required in off-chain systems, rather than increasing the\nneed for trust in Bitcoin.\n\nMaking controversial changes to the network, and not wanting to face the\nreality that block chain space is a finite resource - whether enforced by a\nconsensus rule or by miner's capacity to process transactions - is a huge\ntreat to Bitcoin's usefulness in the long term.\n\nI think the risks of trying to make a controversial change to the network\nFAR outweighs the benefits of a small constant factor that \"kicks the can\ndown the road\".\n\nLet's scale the block size gradually over time, according to technological\ngrowth.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/fcd26023/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T14:03:02",
                "message_text_only": "On Thursday 30. July 2015 14.50.46 Pieter Wuille via bitcoin-dev wrote:\n> > I believe the costs and risks of 8MB blocks are minimal, and that the\n> > benefits of supporting more transaction FAR outweigh those costs and\n> > risks,\n> > but it is hard to have a rational conversation about that when even simple\n> > questions like 'what is s reasonable cost to run a full node' are met with\n> > silence.\n> \n> I think the benefit of an 8 MB over a 1 MB in terms of utility is marginal\n\nLike 640kb should be enough for everyone...  Unfortunately the world doesn't \nlike things that can be bigger not getting bigger. ;)\n\n\n> Bitcoin's advantage over other systems does not lie in scalability.\n> Well-designed centralized systems can trivially compete with Bitcoin's\n> on-chain transactions in terms of cost, speed, reliability, convenience,\n> and scale. Its power lies in transparency, lack of need for trust in\n> network peers, miners, and those who influence or control the system.\n\nThe real advantage of Bitcoin is simpler; its the first system that is not \nowned and possible to subvert that actually works.\nAll existing attempts before Bitcoin are companies that try to benefit from \nbeing in the middle, to the exclusion of everyone else and to the exclusion of \ninnovation.\n\n> Wanting to increase the scale of the system is in conflict with all of\n> those. \n\nThats circular arguing.  This didn't actually add anything to the \nconversation.\n\nThe insight you skip over is that that Bitcoin's advantage, and the concept of \ndistributed computing in general, has is one of ownership and control.\n\nIf you want to keep Bitcoin small at 1Mb, do you still reach your goal of \nbeing free from ownership and control? With our excellent growth trends; \ntransactions have to go somewhere, they will not use Bitcoin if we don't have \nspace. And that means we loose decentralization, we lose avoidance of \nownership of the network and we introduce control.\n\nAll your rhetoric is missing this basic point; is holding Bitcoin at 1Mb \nadvancing it, or hurting that basic goal of avoiding ownership?\n-- \nThomas Zander"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-30T14:05:34",
                "message_text_only": "On Thu, Jul 30, 2015 at 8:50 AM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n> Let's scale the block size gradually over time, according to technological\n> growth.\n\n\nYes, lets do that-- that is EXACTLY what BIP101 intends to do.\n\nWith the added belt&suspenders reality check of miners, who won't produce\nblocks too big for whatever technology they're using.\n\n-------\n\nSo what do you think the scalability road map should look like? Should we\nwait to hard fork until Blockstream Elements is ready for deploying on the\nmain network, and then have One Grand Hardfork that introduces all the\nscalability work you guys have been working on (like Segregated Witness and\nLightning)?\n\nOr is the plan to avoid controversy by people voluntarily moving their\nbitcoin to a sidechain where all this scaling-up innovation happens?\n\nNo plan for how to scale up is the worst of all possible worlds, and the\nlack of a direction or plan(s) is my main objection to the current status\nquo.\n\nAnd any plan that requires inventing brand-new technology is going to be\nriskier than scaling up what we already have and understand, which is why I\nthink it is worthwhile to scale up what we have IN ADDITION TO working on\ngreat projects like Segregated Witness and Lightning.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/d7fc3a50/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-07-30T14:28:29",
                "message_text_only": "On Thu, Jul 30, 2015 at 4:05 PM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> On Thu, Jul 30, 2015 at 8:50 AM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n>\n>> Let's scale the block size gradually over time, according to\n>> technological growth.\n>\n>\n> Yes, lets do that-- that is EXACTLY what BIP101 intends to do.\n>\n\nOh come on. Immediately increasing to 8 MB while miners currently don't\neven seem to bother validating blocks?\n\nWith the added belt&suspenders reality check of miners, who won't produce\n> blocks too big for whatever technology they're using.\n>\n\nOr a future where miners are even more centralized than now, which avoids\nall problems relay and propagation speed has?\n\n\n> So what do you think the scalability road map should look like? Should we\n> wait to hard fork until Blockstream Elements is ready for deploying on the\n> main network, and then have One Grand Hardfork that introduces all the\n> scalability work you guys have been working on (like Segregated Witness and\n> Lightning)?\n>\n\nLightning does not require a hard fork, except that larger blocks would be\nvery useful for its bulk settlements.\n\nOr is the plan to avoid controversy by people voluntarily moving their\n> bitcoin to a sidechain where all this scaling-up innovation happens?\n>\n\nAs I have said a dozen times now: sidechains are a mechanism for\nexperimentation. Maybe through them we will discover technology that allows\nbetter on-chain and/or off-chain scalability, but people moving their coins\nto a sidechain has far worse security tradeoffs than just increasing the\nBitcoin blockchain.\n\nNo plan for how to scale up is the worst of all possible worlds, and the\n> lack of a direction or plan(s) is my main objection to the current status\n> quo.\n>\n\nOk, here is a proposal I was working on. I'd like to have had more time,\nbut I agree a direction/plan are needed to align expectations for the\nfuture:  https://gist.github.com/sipa/c65665fc360ca7a176a6.\n\n\n> And any plan that requires inventing brand-new technology is going to be\n> riskier than scaling up what we already have and understand, which is why I\n> think it is worthwhile to scale up what we have IN ADDITION TO working on\n> great projects like Segregated Witness and Lightning.\n>\n\nAnd I think that the reason that so many people care about this suddenly is\nbecause of a fear that somehow the current block size \"won't be enough\".\nBitcoin has utility at any block size, and perhaps more at some values for\nit than others. Talking about \"not enough\" is acknowledging that we really\nbelieve the block size should scale to demand, while it is the other way\naround.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/db66bf01/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T15:36:13",
                "message_text_only": "On Thu, Jul 30, 2015 at 4:05 PM, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Jul 30, 2015 at 8:50 AM, Pieter Wuille <pieter.wuille at gmail.com>\n> So what do you think the scalability road map should look like? Should we\n> wait to hard fork until Blockstream Elements is ready for deploying on the\n> main network, and then have One Grand Hardfork that introduces all the\n> scalability work you guys have been working on (like Segregated Witness and\n> Lightning)?\n\nApparently lightning doesn't require Segregated Witnesses: cltv and\nrcltv may be enough (although I'm not up to date to the latest\ndesigns). I definitely don't think we should wait to have SW ready to\nbe deployable in Bitcoin to have other hardforks. I think we should\nhave an uncontroversial hardfork as soon as possible, if anything, to\nset a precedent and show the world that hardforks are possible in\nBitcoin, see https://github.com/jtimon/bips/blob/bip-forks/bip-forks.org#code\n\n> Or is the plan to avoid controversy by people voluntarily moving their\n> bitcoin to a sidechain where all this scaling-up innovation happens?\n\nAny scaling up innovation that happens in sidechains can be adopted by\nBitcoin too.\nIn fact, some of those changes (like op_maturity/rcltv/scv) are needed\nin Bitcoin for a fully p2p Bitcoin sidechain to be even possible.\nI really think lightning should be possible in Bitcoin main (and not\njust sidechains) as soon as possible.\n\n> And any plan that requires inventing brand-new technology is going to be\n> riskier than scaling up what we already have and understand, which is why I\n> think it is worthwhile to scale up what we have IN ADDITION TO working on\n> great projects like Segregated Witness and Lightning.\n\nNot necessarily. How are older payment channels designs (different\nfrom lightning) that don't even require cltv riskier than a hardfork?\nIn any case, yes, both things are kind of orthogonal and we can work\non both (and more) at the same time."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-30T23:33:16",
                "message_text_only": "> On Jul 30, 2015, at 5:29 AM, Gavin <gavinandresen at gmail.com> wrote:\n> \n> it is hard to have a rational conversation about that when even simple questions like 'what is s reasonable cost to run a full node' are met with silence.\n\nSome of the risks are pretty hard to quantify. But I think this misses the bigger point - it very well *might* be possible to safely raise this limit or even get rid of it by first fixing some serious issues with the protocol. But over six years into the project and these issues continue to be all-but-ignored by most of the community (including at least a few core developers). I don\u2019t think it\u2019s really a matter of whether we agree on whether it\u2019s good to raise the block size limit, Gavin. I think it\u2019s a matter of a difference in priorities.\n\n- Eric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/0873af30/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/0873af30/attachment-0001.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-31T00:15:19",
                "message_text_only": "These are the types of things I have been discussing in relation to a \nprocess:\n\n-A list of metrics\n-A Risk analysis of the baseline system.  Bitcoin as it is now.\n-Mitigation strategies for each risk.\n-A set of goals.\n-A Road map for each goal that lists the changes or possible avenues to \nachieve that goal.\n\nProposed changes would be measured against the same metrics and a risk \nanalysis done so it can be compared with the baseline.\n\nFor example, the block size debate would be discussed in the context of \na road map related to a goal of increase scaling.  One of the metrics \nwould be a decentralization metric.  (A framework for a decentralization \nmetric is at \nhttp://www.hks.harvard.edu/fs/pnorris/Acrobat/stm103%20articles/Schneider_Decentralization.pdf). \n  Cost would be one aspect of the decentralization metric.\n\nRuss\n\n\n\n\nOn 7/30/2015 7:33 PM, Eric Lombrozo via bitcoin-dev wrote:\n>\n>> On Jul 30, 2015, at 5:29 AM, Gavin <gavinandresen at gmail.com\n>> <mailto:gavinandresen at gmail.com>> wrote:\n>>\n>> it is hard to have a rational conversation about that when even simple\n>> questions like 'what is s reasonable cost to run a full node' are met\n>> with silence.\n>\n> Some of the risks are pretty hard to quantify. But I think this misses\n> the bigger point - it very well *might* be possible to safely raise this\n> limit or even get rid of it by first fixing some serious issues with the\n> protocol. But over six years into the project and these issues continue\n> to be all-but-ignored by most of the community (including at least a few\n> core developers). I don\u2019t think it\u2019s really a matter of whether we agree\n> on whether it\u2019s good to raise the block size limit, Gavin. I think it\u2019s\n> a matter of a difference in priorities.\n>\n> - Eric\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T21:30:50",
                "message_text_only": "On Fri, Jul 31, 2015 at 2:15 AM, Milly Bitcoin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> These are the types of things I have been discussing in relation to a\n> process:\n>\n> -A list of metrics\n> -A Risk analysis of the baseline system.  Bitcoin as it is now.\n> -Mitigation strategies for each risk.\n> -A set of goals.\n> -A Road map for each goal that lists the changes or possible avenues to\n> achieve that goal.\n>\n> Proposed changes would be measured against the same metrics and a risk\n> analysis done so it can be compared with the baseline.\n>\n> For example, the block size debate would be discussed in the context of a\n> road map related to a goal of increase scaling.  One of the metrics would be\n> a decentralization metric.  (A framework for a decentralization metric is at\n> http://www.hks.harvard.edu/fs/pnorris/Acrobat/stm103%20articles/Schneider_Decentralization.pdf).\n> Cost would be one aspect of the decentralization metric.\n\nAll this sounds very reasonable and useful.\nAnd if a formal organization owns this \"process\", that's fine as well.\nI still think hardforks need to be uncontroversial (using the vague \"I\nwill know it when I see it\" defintion) and no individual or\norganization can be an \"ultimate decider\" or otherwise Bitcoin losses\nall it's p2p nature (and this seems the point where you, Milly, and I\ndisagree).\nBut metrics and data tend to help when it comes to \"I will know it\nwhen I see it\" and \"evidences\".\nSo, yes, by all means, let's have an imperfect decentralization metric\nrather than not having anything to compare proposals. Competing\ndecentralization metrics can appear later: we need a first one first.\nI would add that we should have sets of simulations being used to\ncalculate some of those metrics, but maybe I'm just going too deep\ninto details."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-31T21:43:43",
                "message_text_only": "I generally agree with this as well. I think it is crucial we avoid\ncontroversial hardforks. The risks greatly outweigh the benefits.\n\nThis is a good start to making it less controversial.\n\n- Eric\nOn Jul 31, 2015 2:31 PM, \"Jorge Tim\u00f3n\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Jul 31, 2015 at 2:15 AM, Milly Bitcoin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > These are the types of things I have been discussing in relation to a\n> > process:\n> >\n> > -A list of metrics\n> > -A Risk analysis of the baseline system.  Bitcoin as it is now.\n> > -Mitigation strategies for each risk.\n> > -A set of goals.\n> > -A Road map for each goal that lists the changes or possible avenues to\n> > achieve that goal.\n> >\n> > Proposed changes would be measured against the same metrics and a risk\n> > analysis done so it can be compared with the baseline.\n> >\n> > For example, the block size debate would be discussed in the context of a\n> > road map related to a goal of increase scaling.  One of the metrics\n> would be\n> > a decentralization metric.  (A framework for a decentralization metric\n> is at\n> >\n> http://www.hks.harvard.edu/fs/pnorris/Acrobat/stm103%20articles/Schneider_Decentralization.pdf\n> ).\n> > Cost would be one aspect of the decentralization metric.\n>\n> All this sounds very reasonable and useful.\n> And if a formal organization owns this \"process\", that's fine as well.\n> I still think hardforks need to be uncontroversial (using the vague \"I\n> will know it when I see it\" defintion) and no individual or\n> organization can be an \"ultimate decider\" or otherwise Bitcoin losses\n> all it's p2p nature (and this seems the point where you, Milly, and I\n> disagree).\n> But metrics and data tend to help when it comes to \"I will know it\n> when I see it\" and \"evidences\".\n> So, yes, by all means, let's have an imperfect decentralization metric\n> rather than not having anything to compare proposals. Competing\n> decentralization metrics can appear later: we need a first one first.\n> I would add that we should have sets of simulations being used to\n> calculate some of those metrics, but maybe I'm just going too deep\n> into details.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/632e7277/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-31T06:42:46",
                "message_text_only": "On Thursday 30. July 2015 16.33.16 Eric Lombrozo via bitcoin-dev wrote:\n>  I don\u2019t think it\u2019s really a matter of whether we agree on whether it\u2019s good\n> to raise the block size limit, Gavin. I think it\u2019s a matter of a difference\n> in priorities.\n\nHaving different priorities is fine, using your time to block peoples attempts \nto increase block size is not showing different priorities, it shows conflicting \npriorities.\nDifferent priorities means you can trust someone else to do things they care \nabout while you do things you care about.\n-- \nThomas Zander"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-31T20:45:38",
                "message_text_only": "I would love to be able to increase block size. But I have serious doubts\nabout being able to do this safely at this time given what we presently\nknow about the Bitcoin network. And I'm pretty sure I'm not alone in this\nsentiment.\n\nHad we been working on fixing the known issues that most complicate bigger\nblocks in the last six years, or even in the last three years after many\nissues had already been well-identified, perhaps we'd be ready to increase\nthe limit. But other things have seemed more important, like specifying the\nuse of X.509 overlay protocols or adding complex filtering mechanisms to\nthe p2p protocol to make it practical to use tx merkle trees...and as a\nresult we're not ready for safely allowing larger blocks.\n\n- Eric\nOn Jul 30, 2015 11:43 PM, \"Thomas Zander via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday 30. July 2015 16.33.16 Eric Lombrozo via bitcoin-dev wrote:\n> >  I don\u2019t think it\u2019s really a matter of whether we agree on whether it\u2019s\n> good\n> > to raise the block size limit, Gavin. I think it\u2019s a matter of a\n> difference\n> > in priorities.\n>\n> Having different priorities is fine, using your time to block peoples\n> attempts\n> to increase block size is not showing different priorities, it shows\n> conflicting\n> priorities.\n> Different priorities means you can trust someone else to do things they\n> care\n> about while you do things you care about.\n> --\n> Thomas Zander\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/042f9b6a/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-31T20:57:14",
                "message_text_only": "Having said that, I must admit that the complex filtering mechanisms are\npretty clever...they almost make it practical to use SPV...now if only we\nwere committint to structures that can prove the validity of returned\ndatasets and miners actually validated stuff, it might also offer some\nlevel of security.\nOn Jul 31, 2015 1:45 PM, \"Eric Lombrozo\" <elombrozo at gmail.com> wrote:\n\n> I would love to be able to increase block size. But I have serious doubts\n> about being able to do this safely at this time given what we presently\n> know about the Bitcoin network. And I'm pretty sure I'm not alone in this\n> sentiment.\n>\n> Had we been working on fixing the known issues that most complicate bigger\n> blocks in the last six years, or even in the last three years after many\n> issues had already been well-identified, perhaps we'd be ready to increase\n> the limit. But other things have seemed more important, like specifying the\n> use of X.509 overlay protocols or adding complex filtering mechanisms to\n> the p2p protocol to make it practical to use tx merkle trees...and as a\n> result we're not ready for safely allowing larger blocks.\n>\n> - Eric\n> On Jul 30, 2015 11:43 PM, \"Thomas Zander via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Thursday 30. July 2015 16.33.16 Eric Lombrozo via bitcoin-dev wrote:\n>> >  I don\u2019t think it\u2019s really a matter of whether we agree on whether it\u2019s\n>> good\n>> > to raise the block size limit, Gavin. I think it\u2019s a matter of a\n>> difference\n>> > in priorities.\n>>\n>> Having different priorities is fine, using your time to block peoples\n>> attempts\n>> to increase block size is not showing different priorities, it shows\n>> conflicting\n>> priorities.\n>> Different priorities means you can trust someone else to do things they\n>> care\n>> about while you do things you care about.\n>> --\n>> Thomas Zander\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/ed77d5ee/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-07-31T00:22:11",
                "message_text_only": "> On Jul 30, 2015, at 11:02 AM, Mark Friedenbach via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> It is possible for a decentralized system like bitcoin to scale via distribution in a way that introduces minimal trust, for example by probabilistic validation and distribution of fraud proofs. However changes to bitcoin consensus rules (mostly soft-forks) are required in order to make this possible.\n\nPlease, Mark, let\u2019s make this happen.\n\nYou can count on my full support.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/2d0cb791/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/2d0cb791/attachment.sig>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-29T11:29:30",
                "message_text_only": "On Wednesday 29. July 2015 03.43.50 Eric Lombrozo via bitcoin-dev wrote:\n> > > Enter a \u201ctemporary\u201d anti-spam measure - a one megabyte block size limit.\n\n> > The one megabyte limit was nothing to do with anti spam. It was a quick\n> > kludge to try and avoid the user experience degrading significantly in\n> > the event of a \"DoS block\", back when everyone used Bitcoin-Qt. The fear\n> > was that some malicious miner would generate massive blocks and make the\n> > wallet too painful to use, before there were any alternatives.\n\n> I thought I clarified this in an earlier post - I meant DoS. Please don\u2019t\n> digress on such stupid technicalities.\n\nThis particular technicality is rather important since it removes the basis of \nyour argument.\nMore specifically, your 4 points of what you claim Satoshi expected to happen, \nbut didn't were in actual fact not planned, wanted or predicted by Satoshi.\n\nSo, you can do name calling if you want, but maybe thats not very productive.\n\n> > The plan was to remove it once SPV wallets were widespread. But Satoshi\n> > left before that happened.\n> > \n> \n> Guess what? SPV wallets are still not particularly widespread\u2026\n\nThis is an odd statement, we keep on hearing about low bitcoin-core node count \nand since that is the only alternative, your statement can only be interpreted \nas saying there really are not a whole lot of users out there..\nIs that really what you mean?\n\n> and those that\n> are out there are notoriously terrible at detecting network forks and\n> making sure they are on the right one.\n\nWhat is the point you are trying to make with that?  It seems completely \nirrelevant to the point of this thread...\n-- \nThomas Zander"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-29T18:00:10",
                "message_text_only": "On Wed, Jul 29, 2015 at 12:43 PM, Eric Lombrozo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Erm\u2026most miners just trust mining pool operators to validate blocks for\n> them\u2026and some of the biggest pools have been blatantly cutting corners. Yes,\n> a few pools might have temporarily bled a little\u2026but properly validating is\n> probably not the equilibrium strategy\u2026and as time goes on, they are likely\n> to start cutting corners again. Whether they ultimately bleed money isn\u2019t\n> really the point - many believe that cutting corners is actually a rational\n> strategy. If you want to discuss the game theory behind this, fine\u2026but the\n> fact some of the biggest mining pool operators are on record saying they are\n> likely to continue doing this is enough to seriously put to question one of\n> the most fundamental assumptions behind the network security model.\n\nActually validating blocks IS the equilibrium strategy. When the\nsubsidy is completely gone (or at least when the block reward is not\nalmost exclusively composed of subsidy [a future where fees are not a\ncompletely negligible part of the total reward]), miners will\nre-calculate their estimations and they will find out that mining\nempty blocks won't be so profitable in a future with less subsidy. In\nfact, with the incentives they currently have (negligible fees)\nactually bothering about including transactions at all it's not really\nworth it for them. They may just do it because they're nice people,\nmeta-incentives...whatever the reason is, they users are enjoying a\nservice they're not paying for.\n\nOnly subsidy and no fees creates other incentive problems, not just\nSPV mining. But apparently some people think that scaring some users\nwith unreasonable expectations away because they have to pay fees\n(still, non-proportional [to the amount you're moving] fees due to the\nirreversibility of the payments: something the reversible payments\nbased on the banking industry can't simply compete with) it's much\nworse than perpetuating big incentive problems that could break the\nsystem. And, of course, short term convenience for users is much more\nimportant than figuring out the long term viability of the system once\nthe seigniorage (spent on the miner's subsidy) goes away.\n\nThe pattern seems clear to be: decentralization and long term\nviability don't matter too much to some people.\nFor some people, short term market cap seems to be the most important\npriority and everything else is secondary."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T07:08:17",
                "message_text_only": "On Wednesday 29. July 2015 20.00.10 Jorge Tim\u00f3n via bitcoin-dev wrote:\n> And, of course, short term convenience for users is much more\n> important than figuring out the long term viability of the system once\n> the seigniorage (spent on the miner's subsidy) goes away.\n\nThere are various decades spanned in that sentence.  Your idea of \"short term\" \nis vastly different from mine.\n-- \nThomas Zander"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-29T16:53:54",
                "message_text_only": "On Wed, Jul 29, 2015 at 9:59 AM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I do love history lessons from people who weren't actually there.\n\nI doubt the rest of us really enjoy hearing these \"lessons\" from from\nyou where you wildly distort history to reflect your views.\n\n> Satoshi explicitly envisioned a future where only miners ran nodes, so it\n> had nothing to do with this either.\n\nAs others have pointed out-- even if this were true, --- so what?\nMany errors were made early on in Bitcoin.\n\nBut in this case it's not actually true and I'm really getting fed up\nwith this continued self-appointment of all that the creator of the\nsystem thought. Your position and knoweldge is not special or\npriveleged compared to many of the people that you are arguing with.\n\nIt was _well_ understood while the creator of the system was around\nthat putting every consensus decision into the world into one system\nwould not scale; and also understood that the users of Bitcoin would\nwish to protect its decenteralization by limiting the size of the\nchain to keep it verifyable on small devices.\n\nDon't think you can claim otherwise, because doing so is flat out wrong.\n\nIn the above statement you're outright backwards-- there was a clear\nexpectation that all who ran nodes would mine. The delegation of\nconsensus to third parties was unforseen. Presumably Bitcoin core\nmaking mining inaccessable to users in software was also unforseen.\n\n> Validators validate for themselves. Calculating a local UTXO set and then\n> not using it for anything doesn't help anyone. SPV wallets need filtering\n> and serving capability, but a computer can filter and serve the chain\n> without validating it.\n>\n> The only purposes non-mining, non-rpc-serving, non-Qt-wallet-sustaining full\n> nodes are needed for with today's network are:\n[...]\n> Outside of serving lightweight P2P wallets there's no purpose in running a\n> P2P node if you aren't mining, or using it as a **trusted node for your own\n> operations**.\n\nYou wrote a long list of activities that are actually irrelevant to\nmany node users with the result of burrying the main reason any party\nshould be running a node (emphasis mine).\n\nThe incentives of the system demand as it exist today that many other\neconomically significant parties run nodes in order to keep the half\ndozen miners from having a blank check to do whatever they want\n(including supporting their operations through inflation)-- do not\nthink they wouldn't, as we've seen their happy to skip verification\nentirely.\n\n(Which, incidentially, is insanely toxic to any security argument for\nSPV; ---- and now we see the market failure that results from your and\nGavin years long campaign to ignore problems in the mining ecosystem:\nThe SPV model which you've fixated on as the true nature of bitcoin\nhas been demonstrated in practice to have a potentially empty security\nclaim.)\n\n> Miners who don't validate have a habit of bleeding money:   that's the\n> system working as designed.\n\nThe information I have currently is that the parties engaging in that\nactivity found it to be tremendously profitable, even including losses\nfrom issues."
            },
            {
                "author": "Sriram Karra",
                "date": "2015-07-29T17:30:08",
                "message_text_only": "On Wed, Jul 29, 2015 at 10:23 PM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn Wed, Jul 29, 2015 at 9:59 AM, Mike Hearn via bitcoin-dev\n>\n>\n> > Miners who don't validate have a habit of bleeding money:   that's the\n> > system working as designed.\n>\n> The information I have currently is that the parties engaging in that\n> activity found it to be tremendously profitable, even including losses\n> from issues.\n\n\nIs there any shred of evidence either of you can share to support your\nclaims on this pivotal point of interest to everyone here?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/0f0bfde4/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-29T18:03:22",
                "message_text_only": ">\n> It was _well_ .... understood that the users of Bitcoin would wish to\n> protect its decenteralization by limiting the size of the chain to keep it\n> verifyable on small devices.\n>\n\nNo it wasn't. That is something you invented yourself much later. \"Small\ndevices\" isn't even defined anywhere, so there can't have been any such\nunderstanding.\n\nThe actual understanding was the opposite. Satoshi's words:\n\n\"At first, most users would run network nodes, but as the network grows\nbeyond a certain point, it would be left more and more to specialists with\nserver farms of specialized hardware.\"\n\nThat is from 2008:\n\n\nhttp://satoshi.nakamotoinstitute.org/emails/cryptography/2/#selection-75.16-83.14\n\n\nThen he went on to talk about Moore's law and streaming HD videos and the\nlike. At no point did he ever talk about limiting the system for \"small\ndevices\".\n\nI have been both working on and using Bitcoin for longer than you have been\naround, Gregory. Please don't attempt to bullshit me about what the plan\nwas. And stop obscuring what this is about. It's not some personality cult\n- the reason I keep beating you over the head with Satoshi's words is\nbecause it's that founding vision of the project that brought everyone\ntogether, and gave us all a shared goal.\n\nIf Satoshi had said from the start,\n\n   \"Bitcoin cannot ever scale. So I intend it to be heavily limited and\nused only by a handful of people for rare transactions. I picked 1mb as an\narbitrary limit to ensure it never gets popular.\"\n\n... then I'd have not bothered getting involved. I'd have said, huh, I\ndon't really feel like putting effort into a system that is intended to NOT\nbe popular. And so would many other people.\n\n\nDon't think you can claim otherwise, because doing so is flat out wrong.\n>\n\nI just did claim otherwise and no, I am not wrong at all.\n\n(Which, incidentially, is insanely toxic to any security argument for\n> SPV; ---- and now we see the market failure that results from your and\n> Gavin years long campaign to ignore problems in the mining ecosystem:\n>\n\nSince when have we \"campaigned\" to \"ignore problems\" in the mining\necosystem? What does that even mean? Was it not I who wrote this blog post?\n\n\nhttp://blog.bitcoinfoundation.org/mining-decentralisation-the-low-hanging-fruit/\n\nGregory, you are getting really crazy now. Stop it. The trend towards\nmining centralisation is not the fault of Gavin or myself, or anyone else.\nAnd SPV is exactly what was always intended to be used. It's not something\nI \"fixated\" on, it's right there in the white paper. Satoshi even\nencouraged me to keep working on bitcoinj before he left!\n\n\nLook, it's clear you have decided that the way Bitcoin was meant to evolve\nisn't to your personal liking. That's fine. Go make an alt coin where your\nfounding documents state that it's intended to always run on a 2015\nRaspberry Pi, or whatever it is you mean by \"small device\". Remove SPV\ncapability from the protocol so everyone has to fully validate. Make sure\nthat's the understanding that everyone has from day one about what your alt\ncoin is for. Then when someone says, gee, it'd be nice if we had some more\ncapacity, you or someone else can go point at the announcement emails and\nsay \"no, GregCoin is meant to always be verifiable on small devices, that's\nour social contract and it's written into the consensus rules for that\nreason\".\n\nBut your attempt to convert Bitcoin into that altcoin by exploiting a\ntemporary hack is desperate, and deeply upsetting to many people. Not many\nquit their jobs and created companies to build products only for today's\ntiny user base.\n\n\nMy list of \"things a full node is useful for\" wasn't ordered by importance,\nby the way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/dc517511/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-07-29T19:53:02",
                "message_text_only": "On Wed, Jul 29, 2015 at 6:03 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n>> It was _well_ .... understood that the users of Bitcoin would wish to\n>> protect its decenteralization by limiting the size of the chain to keep it\n>> verifyable on small devices.\n>\n> No it wasn't. That is something you invented yourself much later. \"Small\n> devices\" isn't even defined anywhere, so there can't have been any such\n> understanding.\n>\n> The actual understanding was the opposite. Satoshi's words:\n[...]\n> Then he went on to talk about Moore's law and streaming HD videos and the\n> like. At no point did he ever talk about limiting the system for \"small\n> devices\".\n>\n> I have been both working on and using Bitcoin for longer than you have been\n> around, Gregory. Please don't attempt to bullshit me about what the plan\n> was. And stop obscuring what this is about. It's not some personality cult -\n> the reason I keep beating you over the head with Satoshi's words is because\n> it's that founding vision of the project that brought everyone together, and\n> gave us all a shared goal.\n\nMike, my first use of Bitcoin was in 2009.  I wasn't vigorously active\nin the Bitcoin community until the beginning of 2011, indeed. But this\nis just a couple months after you (E.g. first code available for\nBitcoinJ was March 2011-- if you go by forums.bitcoin.org account\ntimes my account was created May 5th 2011 vs yours Dec 14th 2010; less\nthan five months after yours). I was also working with related systems\nlong before (E.g. RPOW in 2004). So give me a break, there is no rank\nto pull here.\n\nYet again you've managed to call me a bullshitter and guilty of\n\"invention\" when in fact I'm actually quoting the system's creator\n(although without the explicit fallacious argument from authority\nstyle you seem prefer). For someone who seems to base all his\narguments on interpretations of someone's words you sure seem to call\ntheir words lies awfully often:\n\n\"Piling every proof-of-work quorum system in the world into one\ndataset doesn't scale.\"\n[...]\n\"Bitcoin users might get increasingly tyrannical about limiting the\nsize of the chain so it's easy for lots of users and small devices.\"\n----  https://bitcointalk.org/index.php?topic=1790.msg28917#msg28917\n\nIf you'll note,, the post was Dec 10th 2010 and, presumably, made with\nan improved understanding of the implications of the system then\ncomments made in 2008 before the system was even operational.\n\n(The same message also mentions that smart contracts can be used to\ncreate trustless trade with off-chain systems;  As well, later in that\nthread: \"it will be much easier if you can freely use all the space\nyou need without worrying about paying fees for expensive space in\nBitcoin's chain.\")\n\nI haven't bothered arguing from old posts in the past because I find\nthe practice of argument from authority on this subject abhorrent. It\nundermines the unique value of Bitcoin to argue based on a single\npersonal opinion, to do so is to miss the point of Bitcoin in a deep\nand fundamental way. And in my opinion what you're doing is actually\nmuch worse: arguing from distortions of random quotations.  But it's\nhard to tolerate the continue revision of history from you in silence.\n\nMoreover, I find those arguments with respect Moore's law especially\nunconvincing because while I cannot read the mind of people who are\nnot a part of this discussion and haven't chosen to comment, I've used\nthe same argument myself and I know what I was thinking when I used it\n(and can establish as much, since I'm more verbose I elaborated on\nit):  When someone pointed at Bitcoins _global_ broadcast medium and\nloudly said that it cannot work because its absurd; and it's very easy\nto point out broad scaling behavior about what Bitcoin could achieve\nwith complete centralization. Once this has been accepted the argument\nis _over_ in Bitcoin's favor: Bitcoin's competition has highly\ncentralized administration and so once someone has accepted Bitcoin\ncan (in some way) accommodate the worlds transactions, even if that\ncomes at the cost of 99% of the decentralization, it's clear that\nBitcoin offers something interesting. (And for example, I elaborated\non this in a Wiki edit in Aug 2011,\nhttps://en.bitcoin.it/w/index.php?title=Scalability&action=historysubmit&diff=14273&oldid=14112\n -- though I shouldn't need to point this out to you, since it was you\nwho subsequently erased these words from the page.)\n\n> Since when have we \"campaigned\" to \"ignore problems\" in the mining\n> ecosystem?\n[...]\n> Gregory, you are getting really crazy now. Stop it. The trend towards mining\n> centralisation is not the fault of Gavin or myself, or anyone else.\n\nFor example, you fought vigorously to get Bitcoin Core off\nBitcoin.org, which would ensure that users were not previously\nequipped with a node suitable for operating mining (which then\ncontributed substantially to the poor usability of solutions like\nP2Pool; with 98% of it's install time spent waiting for Bitcoin Core\nto sync).\n\nYou've (in my view) aggressively advocated increasing the resource\nutilization of Bitcoin-- increasing the cost to participate in mining\nwithout delegation, with no consideration (or at least disclosure) of\nthe ramifications on the system overall:\nhttps://bitcointalk.org/index.php?topic=149668.0\n\nGavin, for example, has advocated removing mining support from Bitcoin\ncore on several occasions; and constantly professes ignorance on\nanything mining.  His own interests are up to him, but to not be\nconcerned about a central part of the system for anyone working on\nchanging it at such a deep level is-- I think-- a bit problematic.\n\nBut I didn't intend to lay blame here, if anything I blame myself for\nnot being more proactive in arguing against things things in the past.\n\nThe trend towards mining centralization is a result of various forces,\nmany of which are modulated by the very things we're discussing here\n(or could be modulated by things we haven't discussed).  You're the\nprinciple advocate of increasing the cost of a decentralized ecosystem\naround verification and driving the system towards a state where it is\nonly viable in a more centralized mode.  Bitcoin is an artificial\nconstruction, not a force of nature, and when someone seeks to change\nit they ought to take responsibility for what happens--- it's not\nacceptable to say \"oh well, it's not eh fault of anyone\" when the\nincentives drive it in a bad direction.\n\nIs that your strategy on the systems resource consumption in general?\nFull throttle, no action when it goes off the rails,  when the easily\nforeseeable negative outcomes happen it won't be the \"fault\" of\nanyone? If so, I don't think that is acceptable. We need to face the\nareas in which the system is failing, now and in the future... and not\njust pump for growth at all cost and shrug and say \"oh well, we tried\"\nwhen the predictable failure happens. It's far from clear to me that\nthe world will get a second shot at this in the next several decades\nif Bitcoin lapses into the same-old, same-old.\n\n> And SPV\n> is exactly what was always intended to be used. It's not something I\n> \"fixated\" on, it's right there in the white paper. Satoshi even encouraged\n> me to keep working on bitcoinj before he left!\n\nThe fixation comment was a specific reply to your long list of the\n\"only reasons\" to run a full node, which seemed to be basically said\nthat the only reason to run one was to act as a server for SPV\nclients; as it listed several points on that-- all three of the\nnumbered points were \"serving SPV wallets\"-- and buried the rest.  I'm\nsorry if I read too much into it, though it's also consistent with\nyour prior responses that the non-scalability of Bitcoin as a whole is\nirrelevant due to SPV.\n\nI don't think there is anything fundamentally bad with SPV, it is what\nit is; it's a tool and an important one. But at the moment it is far\nmore limited than you give it credit for both because it is only\nsecure under certain assumptions which have been provably violated not\njust at risk of violation, and because the more complete vision of it\n(e.g. with fraud proofs) has never been implemented.\n\n> Look, it's clear you have decided that the way Bitcoin was meant to evolve\n> isn't to your personal liking. That's fine. Go make an alt coin where your\n> founding documents state that it's intended to always run on a 2015\n> Raspberry Pi, or whatever it is you mean by \"small device\". Remove SPV\n> capability from the protocol so everyone has to fully validate. Make sure\n> that's the understanding that everyone has from day one about what your alt\n> coin is for. Then when someone says, gee, it'd be nice if we had some more\n> capacity, you or someone else can go point at the announcement emails and\n> say \"no, GregCoin is meant to always be verifiable on small devices, that's\n> our social contract and it's written into the consensus rules for that\n> reason\".\n\nNow that I've established the \"small device\" text you're railing on\nhere actually came from the system's creator prior to your\ninvolvement, can I expect an admission that your own \"personal liking\"\ndoesn't have special authority over the system?  But I hope you don't\ncreate an altcoin: I think it's possible to find ways to accommodate\npeople with very different preferences under one tent, and if we are\nto build and support a worldwide system we _must_ find those ways\nrather than fragmenting the marketplace."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T14:15:01",
                "message_text_only": "I have just been around for 2 years or so, and its interesting to see you two \nargue and give links to the past conversations.\n\nBut do realize that if you argue in public about content that is easy to read \nby anyone that you have to double check your memory fits the facts.\nAnd I feel you skipped that this time...\n\nOn Wednesday 29. July 2015 19.53.02 Gregory Maxwell via bitcoin-dev wrote:\n> (The same message also mentions that smart contracts can be used to\n> create trustless trade with off-chain systems; \n\n> As well, later in that\n> thread: \"it will be much easier if you can freely use all the space\n> you need without worrying about paying fees for expensive space in\n> Bitcoin's chain.\")\n\nHmm... A DNS record is much much bigger than a single bitcoin transaction has \nspace for.\nI don't think you can take his quote out of context. The thread shows that \nhaving a full domain-registry DB on chain is what he was explaining doesn't fit \nwith Bitcoin.\nSo Satoshi just explains that a rich database shouldn't live on the \nblockchain. Similarly with the quote you made before;\n  \"Piling every proof-of-work quorum system in the world into one\n  dataset doesn't scale.\"\nIt just fights the stupid idea of sharing the blockchain space with tons of \nglobal databases.\n\nPlease re-read the whole thread as it really doesn't support your view that \nSatoshi argued that somehow decentralization would be protected by limiting \nthe size of the chain.\n\n-- \nThomas Zander"
            },
            {
                "author": "odinn",
                "date": "2015-07-30T09:05:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nMike, tone it down, please, when I read your stuff it's like you are\ndrinking too much Red bull or something.\n\nOn 07/29/2015 11:03 AM, Mike Hearn via bitcoin-dev wrote:\n> It was _well_ .... understood that the users of Bitcoin would wish \n> to protect its decenteralization by limiting the size of the chain \n> to keep it verifyable on small devices.\n> \n> \n> No it wasn't. That is something you invented yourself much later.\n> \"Small devices\" isn't even defined anywhere, so there can't have\n> been any such understanding.\n> \n> The actual understanding was the opposite. Satoshi's words:\n> \n> \"At first, most users would run network nodes, but as the network\n> grows beyond a certain point, it would be left more and more to\n> specialists with server farms of specialized hardware.\"\n> \n> That is from 2008:\n> \n> \n> http://satoshi.nakamotoinstitute.org/emails/cryptography/2/#selection-\n75.16-83.14\n> \n> \n> Then he went on to talk about Moore's law and streaming HD videos\n> and the like. At no point did he ever talk about limiting the\n> system for \"small devices\".\n> \n> I have been both working on and using Bitcoin for longer than you\n> have been around, Gregory. Please don't attempt to bullshit me\n> about what the plan was. And stop obscuring what this is about.\n> It's not some personality cult - the reason I keep beating you over\n> the head with Satoshi's words is because it's that founding vision\n> of the project that brought everyone together, and gave us all a\n> shared goal.\n> \n> If Satoshi had said from the start,\n> \n> \"Bitcoin cannot ever scale. So I intend it to be heavily limited\n> and used only by a handful of people for rare transactions. I\n> picked 1mb as an arbitrary limit to ensure it never gets popular.\"\n> \n> ... then I'd have not bothered getting involved. I'd have said,\n> huh, I don't really feel like putting effort into a system that is\n> intended to NOT be popular. And so would many other people.\n> \n> \n> Don't think you can claim otherwise, because doing so is flat out\n> wrong.\n> \n> \n> I just did claim otherwise and no, I am not wrong at all.\n> \n> (Which, incidentially, is insanely toxic to any security argument\n> for SPV; ---- and now we see the market failure that results from\n> your and Gavin years long campaign to ignore problems in the mining\n> ecosystem:\n> \n> \n> Since when have we \"campaigned\" to \"ignore problems\" in the mining \n> ecosystem? What does that even mean? Was it not I who wrote this\n> blog post?\n> \n> \n> http://blog.bitcoinfoundation.org/mining-decentralisation-the-low-hang\ning-fruit/\n>\n>  Gregory, you are getting really crazy now. Stop it. The trend\n> towards mining centralisation is not the fault of Gavin or myself,\n> or anyone else. And SPV is exactly what was always intended to be\n> used. It's not something I \"fixated\" on, it's right there in the\n> white paper. Satoshi even encouraged me to keep working on bitcoinj\n> before he left!\n> \n> \n> Look, it's clear you have decided that the way Bitcoin was meant\n> to evolve isn't to your personal liking. That's fine. Go make an\n> alt coin where your founding documents state that it's intended to\n> always run on a 2015 Raspberry Pi, or whatever it is you mean by\n> \"small device\". Remove SPV capability from the protocol so everyone\n> has to fully validate. Make sure that's the understanding that\n> everyone has from day one about what your alt coin is for. Then\n> when someone says, gee, it'd be nice if we had some more capacity,\n> you or someone else can go point at the announcement emails and say\n> \"no, GregCoin is meant to always be verifiable on small devices,\n> that's our social contract and it's written into the consensus\n> rules for that reason\".\n> \n> But your attempt to convert Bitcoin into that altcoin by exploiting\n> a temporary hack is desperate, and deeply upsetting to many people.\n> Not many quit their jobs and created companies to build products\n> only for today's tiny user base.\n> \n> \n> My list of \"things a full node is useful for\" wasn't ordered by \n> importance, by the way.\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuejTAAoJEGxwq/inSG8CKigH+gJpevuZ/mbCy9cjhLvX6VT/\nNBQjU82EPDkMkASqoQOekIBOrgODBcN8HsR1xnPHYZYh9HmMaQ/kZDZI3EUP76CU\ns1vvL0AQC11b0aai+z1K5XU6xK+HxRewujBj9lKtH/JuRUHoKUrRIn/5KxT6Nb5+\nOXCpoXKnynfu7T57RrVBOKCPW0Oo7jay9owjDzy+J/ATfqqPDB++7nDbPPVzyrNs\n6TlHaC/CxRcq832lwBe1KwaX4A7KFiqHwWoK5/R7Ccyj5X21nHXnDOuXLqwOfGtH\n1aARAQ6dqHor5Kw9/Y7yAdoNnrK3XYR80Qdr6I77f3X2B40GdnBiBOSUpoQNAB0=\n=nRef\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Raystonn",
                "date": "2015-07-31T01:25:28",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/ac587502/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-07-31T03:18:15",
                "message_text_only": "I have been looking up ways to measure decentralization at the moment. \nThere are some good discussions as they relate to Bitcoin but they are \nscattered in different places.  I just took over BitcoinStandards.com so \ni thought about using that site to post stuff.\n\nRuss\n\n\nOn 7/30/2015 9:25 PM, Raystonn wrote:\n> Russ, do you have time to get started on your list?  It would add value.\n>\n> On 30 Jul 2015 5:15 pm, Milly Bitcoin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>     These are the types of things I have been discussing in relation to a\n>     process:\n>\n>     -A list of metrics\n>     -A Risk analysis of the baseline system.  Bitcoin as it is now.\n>     -Mitigation strategies for each risk.\n>     -A set of goals.\n>     -A Road map for each goal that lists the changes or possible avenues to\n>     achieve that goal.\n>\n>     Proposed changes would be measured against the same metrics and a risk\n>     analysis done so it can be compared with the baseline.\n>\n>     For example, the block size debate would be discussed in the context of\n>     a road map related to a goal of increase scaling.  One of the metrics\n>     would be a decentralization metric.  (A framework for a\n>     decentralization\n>     metric is at\n>     http://www.hks.harvard.edu/fs/pnorris/Acrobat/stm103%20articles/Schneider_Decentralization.pdf).\n>\n>        Cost would be one aspect of the decentralization metric.\n>\n>     Russ"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-31T23:05:47",
                "message_text_only": "Forgot to include the list. \n\n\n> From: Jean-Paul Kogelman <jeanpaulkogelman at me.com>\n> Date: July 31, 2015 at 4:02:20 PM PDT\n> To: Jorge Tim\u00f3n <jtimon at jtimon.cc>\n> Cc: milly at bitcoins.info\n> Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure isn't\ttemporary\n> \n> \n> I wrote about this a earlier this month: http://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg00383.html\n> \n> You basically want 3 things:\n> \n> - A Minimum Specification of hardware: This is the lowest hardware configuration Bitcoin Core will run on at maximum capacity.\n> - A theoretical model that takes into account all of the components in Bitcoin Core and how they affect Min Spec.\n> - A benchmark tool to measure how changes affect Min Spec (and for users to see how their hardware measures up to Min Spec).\n> \n> jp\n> \n>> On Jul 31, 2015, at 02:31 PM, Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n> \n>> On Fri, Jul 31, 2015 at 2:15 AM, Milly Bitcoin via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> These are the types of things I have been discussing in relation to a\n>>> process:\n>>> \n>>> -A list of metrics\n>>> -A Risk analysis of the baseline system. Bitcoin as it is now.\n>>> -Mitigation strategies for each risk.\n>>> -A set of goals.\n>>> -A Road map for each goal that lists the changes or possible avenues to\n>>> achieve that goal.\n>>> \n>>> Proposed changes would be measured against the same metrics and a risk\n>>> analysis done so it can be compared with the baseline.\n>>> \n>>> For example, the block size debate would be discussed in the context of a\n>>> road map related to a goal of increase scaling. One of the metrics would be\n>>> a decentralization metric. (A framework for a decentralization metric is at\n>>> http://www.hks.harvard.edu/fs/pnorris/Acrobat/stm103%20articles/Schneider_Decentralization.pdf).\n>>> Cost would be one aspect of the decentralization metric.\n>> \n>> All this sounds very reasonable and useful.\n>> And if a formal organization owns this \"process\", that's fine as well.\n>> I still think hardforks need to be uncontroversial (using the vague \"I\n>> will know it when I see it\" defintion) and no individual or\n>> organization can be an \"ultimate decider\" or otherwise Bitcoin losses\n>> all it's p2p nature (and this seems the point where you, Milly, and I\n>> disagree).\n>> But metrics and data tend to help when it comes to \"I will know it\n>> when I see it\" and \"evidences\".\n>> So, yes, by all means, let's have an imperfect decentralization metric\n>> rather than not having anything to compare proposals. Competing\n>> decentralization metrics can appear later: we need a first one first.\n>> I would add that we should have sets of simulations being used to\n>> calculate some of those metrics, but maybe I'm just going too deep\n>> into details.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/b2113cb4/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Why Satoshi's temporary anti-spam measure isn't temporary",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Gavin",
                "odinn",
                "Raystonn",
                "Milly Bitcoin",
                "Mike Hearn",
                "Thomas Zander",
                "Jean-Paul Kogelman",
                "Owen",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Sriram Karra",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Pieter Wuille"
            ],
            "messages_count": 45,
            "total_messages_chars_count": 141210
        }
    },
    {
        "title": "[bitcoin-dev] Why Satoshi's temporary anti-spam measure isn'ttemporary",
        "thread_messages": [
            {
                "author": "Raystonn .",
                "date": "2015-07-29T17:17:31",
                "message_text_only": "Eric, any plans to correct your article at https://bitcoinmagazine.com/21377/settling-block-size-debate/?\n\n\nFrom: Mike Hearn via bitcoin-dev \nSent: Wednesday, July 29, 2015 4:15 AM\nTo: Eric Lombrozo \nCc: Bitcoin Dev \nSubject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure isn'ttemporary\n\n  Irrelevant what term was used - and as brilliant as Satoshi might have been at some things, he obviously got this one wrong.\n\nI don't think it's obvious. You may disagree, but don't pretend any of this stuff is obvious.\n\nConsider this:  the highest Bitcoin tx fees can possibly go is perhaps a little higher than what our competition charges. Too much higher than that, and people will just say, you know what .... I'll make a bank transfer. It's cheaper and not much slower, sometimes no slower at all.\n\nAnd now consider that in many parts of the world bank transfers are free.\n\nThey aren't actually free, of course, but they appear to be free because the infrastructure for doing them is cross subsidised by the fees on other products and services, or hidden in the prices of goods sold.\n\nSo that's a market reality Bitcoin has to handle. It's already more expensive than the competition sometimes, but luckily not much more, and anyway Bitcoin has some features those other systems lack (and vice versa). So it can still be competitive. \n\nBut your extremely vague notion of a \"fee market\" neglects to consider that it already exists, and it's not a market of \"Bitcoin users buying space in Bitcoin blocks\". It's \"users paying to move money\".\n\nYou can argue with this sort of economic logic if you like, but don't claim this stuff is obvious.\n\n  Nobody threatened to start mining huge blocks given how relatively inexpensive it was to mine back then?\n\n\nNot that I recall. It wasn't a response to any actual event, I think, but rather a growing realisation that the code was full of DoS attacks.\n\n\n  Guess what? SPV wallets are still not particularly widespread\u2026and those that are out there are notoriously terrible at detecting network forks and making sure they are on the right one.\n\nThe most popular mobile wallet (measured by installs) on Android is SPV. It has between 500,000 and 1 million installs, whilst Coinbase has not yet crossed the 500,000 mark. One of the most popular wallets on iOS is SPV. If we had SPV wallets with better user interfaces on desktops, they'd be more popular there too (perhaps MultiBit HD can recapture some lost ground).\n\nSo I would argue that they are in fact very widespread.\n\nLikewise, they are not \"notoriously terrible\" at detecting chain forks. That's a spurious idea that you and Patrick have been pushing lately, but they detect them and follow reorgs across them according to the SPV algorithm, which is based on most work done. This is exactly what they are designed to do. \n\nContrast this with other lightweight wallets which either don't examine the block chain or implement the algorithm incorrectly, and I fail to see how this can be described as \"notoriously terrible\".\n\n\n \n  I understand that initially it was desirable that transactions be free\u2026but surely even Satoshi understood this couldn\u2019t be perpetually self-sustaining\u2026and that the ability to bid for inclusion in blocks would eventually become a crucial component of the network. Or were fees just added for decoration?\n\n\nFees were added as a way to get money to miners in a fair and decentralised way.\n\nAttaching fees directly to all transactions is certainly one way to use that, but it's not the only way. As noted above, our competitors prefer a combination of price-hiding and cross subsidisation. Both of these can be implemented with tx fees, but not necessarily by trying to artificially limit supply, which is economically nonsensical.\n\n\n  We\u2019re already more than six years into this. When were these mechanisms going to be developed and tested? After 10 years? 20? Perhaps after 1024 years?(https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki)\n\n\nMaybe when there is a need? I already discussed this topic of need here:\n\nhttps://medium.com/@octskyward/hashing-7d04a887acc8\n\n\n  Right. Turns out the ledger structure is terrible for constructing the kinds of proofs that are most important to validators - i.e. whether an output exists, what its script and amounts are, whether it\u2019s been spent, etc\u2026\n\n\nValidators don't require proofs. That's why they are validators.\n\nI think you're trying to say the block chain doesn't provide the kinds of proofs that are most important to lightweight wallets. But I would disagree. Even with UTXO commitments, there can still be double spends out there in the networks memory pools you are unaware of. Merely being presented with a correctly signed transaction doesn't tell you a whole lot ..... if you wait for a block, you get the same level of proof regardless of whether there are UTXO commitments or not. If you don't then you still have to have some trust in your peers that you are seeing an accurate and full view of network traffic.\n\nSo whilst there are ways to make the protocol incrementally better, when you work through the use cases for these sorts of data structures and ask \"how will this impact the user experience\", the primary candidates so far don't seem to make much difference.\n\nRemote attestation from secure hardware would make a big difference though. Then you could get rid of the waiting times entirely because you know the sending wallet won't double spend.\n\n\n  Yes, let\u2019s wait until things are about to break before even beginning to address the issue\u2026because we can \u201ceasily create\u201d anything we haven\u2019t invented yet at the last minute.\n\n\nbitcoinj already has a micropayment channel implementation in it. There's a bit of work required to glue everything together, but it's not a massive project to start using this to pay nodes for their services.\n\nBut it's not needed right now:  serving these clients is so darn cheap. And there is plenty of room for optimising things still further!\n\n\n  I\u2019m one of the very few developers in this space that has actually tried *hard* to make your BIP37 work. Amongst the desktop wallets listed on bitcoin.org, there are only two that have always supported SPV (or at least I think MultiBit has always supported it, perhaps I\u2019m wrong). One is MultiBit, the other one is mine. I give you credit for your work\u2026perhaps you could be generous enough to extend me some credit too?\n\nMultiBit has always supported it. I apologise for implying you have not built a wallet. I think yours is mSIGNA, right? Did it used to be called something else? I recognise the website design but must admit, I have not heard of mSIGNA before.\n\nRegardless, as a fellow implementor, I would appreciate it more if you designed and implemented upgrades, rather than just trashing the work done so far as \"notoriously terrible\", Satoshi as \"not a systems architect\" and so on.\n\n\n\n--------------------------------------------------------------------------------\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/dd6da285/attachment.html>"
            },
            {
                "author": "Raystonn .",
                "date": "2015-07-29T21:28:43",
                "message_text_only": "Gregory, can you please speak to the following points.  I would like a \nbetter understanding of your positions.\n\n1) Do you believe that Bitcoin's future is as a high-value settlement \nnetwork?\n\n2) Do you believe we need an artificial limit to transaction rate, perhaps \nimplemented as a maximum block size limit?  If so, why?\n\n3) Transaction fees will fluctuate with global economic conditions and \ntechnology.  Those free-market fluctuations should equally affect any \nblockchain.  However, if transaction fees on the Bitcoin network are pushed \nartificially high, such as with an artificial limit to transaction rate only \napplicable to Bitcoin, this will create a condition where some other \nblockchains will have lower fees.  How do you plan to address the bleeding \nof value from Bitcoin to alternative lower-fee blockchains created by the \nartificially-high bitcoin transaction fees when users begin looking for the \ncheapest way to send value?  Modern economic study has shown that liquidity \nmoves to the location of least friction.\n\n4) If you believe it's not a problem to allow alternative blockchains to \nleech some of Bitcoin's value, then:\n    a) How much value is it acceptable to lose?\n    b) How do you think this will affect Bitcoin miners, whose large \ninvestments in hardware do not transfer to other blockchains?\n    c) How do you think this will affect the investors and holders of \nbitcoin in general?\n\n\n-----Original Message----- \nFrom: Gregory Maxwell via bitcoin-dev\nSent: Wednesday, July 29, 2015 1:09 PM\nTo: Owen\nCc: Bitcoin Dev\nSubject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure \nisn'ttemporary\n\nOn Wed, Jul 29, 2015 at 7:56 PM, Owen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On July 29, 2015 7:15:49 AM EDT, Mike Hearn via bitcoin-dev:\n>>Consider this:  the highest Bitcoin tx fees can possibly go is perhaps\n>>a\n>>little higher than what our competition charges. Too much higher than\n>>that,\n>>and people will just say, you know what .... I'll make a bank transfer.\n>>It's cheaper and not much slower, sometimes no slower at all.\n>\n> I respectfully disagree with this analysis. The implication is that \n> bitcoin is merely one of a number of payment technologies. It's much more \n> than that. It's sound money, censorship resistance, personal control over \n> money, programmable money, and more. Without these attributes it's merely \n> a really inefficient way to do payments.\n>\n> Given these advantages, there is no reason to believe the marginal cost of \n> a transaction can't far surpass that of a PayPal or bank transfer. I \n> personally would pay several multiples of the competitors' fees to \n> continue using bitcoin.\n>\n> Sure, some marginal use cases will drop off with greater fees, but that's \n> normal and expected. These will be use cases where the user doesn't care \n> about bitcoin's advantages. We must be willing to let these use cases go \n> anyway, because we unfortunately don't have room on chain for everything \n> anyone might want to do.\n>\n> Therefore, bitcoin tx fees can go much higher than the competition.\n>\n> Remember how Satoshi referenced the banking crisis in his early work? The \n> 2008 banking crisis was about a lot of things, but high credit card and \n> paypal fees wasnt one of them. There's more going on here than just \n> payments. Any speculative economic analysis would do better to include \n> this fact.\n\nPrecisely.  And as \"just a payment system\" Bitcoin is not an\nespecially great one: The design requirements for decenteralization\nimpose considerable costs.  To the extent that the technology in\nBitcoin is useful at all for building \"just another payment system\"\nthis technology in in the process of being agressively copied by\nparties with deep fiat relationships (including in partnership with\ncenteral banks).  If the focus for Bitcoin's competative advantage\nbecomes exclusively \"better\" payments then it will almost certinatly\nfail in the market-place against competing systems which avoid the\nBitcoin currency adoption related obsticles (but also gain none of\nBitcoin's important social/political promise).\n\nAlso, critically, if Bitcoin's security properties are manintained and\nenhanced then Bitcoin can be used to build secure systems which _also_\naccomidate those applications and we can have both. But if Bitcoin's\nsecurity properties are not strong then then advanced tools cannot be\nbuilt for it.  E.g. atomic swaps make trustless trades with external\nsystems possible; but they are especially sensitive to long\nreorginizations by miners... so they can only be securely used where\nthose reorgs are infeasable.  So while I agree that we must be willing\nto tolerate not catching every conceivable use case; most of the time\nall that means is addressing them via a less direct but more focused\nsolution rather than ignoring them completely.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-29T22:11:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nRaystonn, I'm aware that you're addressing your question to Greg\nMaxwell, however a point you keep stating as fact calls for reference:\n\nOn 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n[snip]\n> How do you plan to address the bleeding of value from Bitcoin to \n> alternative lower-fee blockchains created by the artificially-high \n> bitcoin transaction fees when users begin looking for the cheapest \n> way to send value?\nCheapest way to send value? Is this what Bitcoin is trying to do? So\nall of the smart contract, programmable money, consensus coding and\ntremendous developer effort is bent to the consumer demand for cheaper\nfees. Surely thou jests!\n\n> Modern economic study has shown that liquidity moves to the \n> location of least friction.\nModern economic study? Can you please provide a link or reference to\nthe study you are referring to.\n\n\"liquidity moves to the location of least friction\"\n\nThis sounds like \"econo-speak\" and makes no sense. The definition of\nLiquidity is the degree to which an asset/security can be bought or\nsold in the market without affecting the price.\n\nThat is why bitcoin is said to have low liquidity: buying or selling\nonly 100 BTC visibly affects the exchange price. You probably mean\n\"people like cheap fees\", which is true, but as others have said,\nbecause of Bitcoin's powerful features, they are willing to pay higher\nfees and wait longer for transactions to execute.\n\nAs for your public cross-examination of Greg Maxwell, your case seems\nto  be made on the assumption that limiting the size of the blockchain\nis an attempt to artificially raise tx fees, but it is not the case\n(as you and others repeatedly argue) that reluctance to concede\nblocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\nexplained in this thread that the protocol's current state of\ndevelopment relies on  blocksize for security and, ultimately, as a\nmeans of protecting its degree of decentralization.\n\nSurely, this is an obvious concern even for those who are campaigning\nfor the hare-brained ideal of making Bitcoin a \"faster, cheaper\nalternative\" to visa or paypal? If we lose decentralization, we lose\nthe whole thing, right? Incorrect or correct?\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\nRXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\nh7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\nMp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\nYhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\nBXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n=lQvy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Raystonn .",
                "date": "2015-07-29T23:10:56",
                "message_text_only": "> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n> all of the smart contract, programmable money, consensus coding and\n> tremendous developer effort is bent to the consumer demand for cheaper\n> fees. Surely thou jests!\n\nThese other features can be replicated into any alternative blockchain, \nincluding those with lower fees.  In the open-source world of \ncryptocurrency, no feature will remain a value-add for very long after it \nhas been identified to be such.  Anything adding value will quickly be \nabsorbed into competing alternative blockchains.  That will leave economic \npolicy as the distinguishing factor.\n\n> ... it is not the case ... that reluctance to concede\n> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n> explained in this thread that the protocol's current state of\n> development relies on  blocksize for security and, ultimately, as a\n> means of protecting its degree of decentralization.\n\nA slow or lack of increase to maximum transaction rate will cause pressure \non fees.  Whether this is the desired goal is not relevant.  Everyone has \nagreed this will be the outcome.  As to a smaller block size being needed \nfor additional decentralization, one must simply ask how much we are all \nwilling to pay for that additional decentralization.  It is likely that the \nbenefit thereto will have to be demonstrated by some power attacking and \ndestroying a less decentralized currency before the benefit of this feature \nis given monetary value by the market.  Until then, value will bleed to the \nnetwork with the least friction, because it will have the greatest ability \nto grow its network effect.  That means the blockchain with adequate \nfeatures and cheapest fees will eventually have the largest market share.\n\n\n-----Original Message----- \nFrom: Venzen Khaosan\nSent: Wednesday, July 29, 2015 3:11 PM\nTo: Raystonn .\nCc: bitcoin-dev at lists.linuxfoundation.org\nSubject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure \nisn'ttemporary\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nRaystonn, I'm aware that you're addressing your question to Greg\nMaxwell, however a point you keep stating as fact calls for reference:\n\nOn 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n[snip]\n> How do you plan to address the bleeding of value from Bitcoin to\n> alternative lower-fee blockchains created by the artificially-high\n> bitcoin transaction fees when users begin looking for the cheapest\n> way to send value?\nCheapest way to send value? Is this what Bitcoin is trying to do? So\nall of the smart contract, programmable money, consensus coding and\ntremendous developer effort is bent to the consumer demand for cheaper\nfees. Surely thou jests!\n\n> Modern economic study has shown that liquidity moves to the\n> location of least friction.\nModern economic study? Can you please provide a link or reference to\nthe study you are referring to.\n\n\"liquidity moves to the location of least friction\"\n\nThis sounds like \"econo-speak\" and makes no sense. The definition of\nLiquidity is the degree to which an asset/security can be bought or\nsold in the market without affecting the price.\n\nThat is why bitcoin is said to have low liquidity: buying or selling\nonly 100 BTC visibly affects the exchange price. You probably mean\n\"people like cheap fees\", which is true, but as others have said,\nbecause of Bitcoin's powerful features, they are willing to pay higher\nfees and wait longer for transactions to execute.\n\nAs for your public cross-examination of Greg Maxwell, your case seems\nto  be made on the assumption that limiting the size of the blockchain\nis an attempt to artificially raise tx fees, but it is not the case\n(as you and others repeatedly argue) that reluctance to concede\nblocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\nexplained in this thread that the protocol's current state of\ndevelopment relies on  blocksize for security and, ultimately, as a\nmeans of protecting its degree of decentralization.\n\nSurely, this is an obvious concern even for those who are campaigning\nfor the hare-brained ideal of making Bitcoin a \"faster, cheaper\nalternative\" to visa or paypal? If we lose decentralization, we lose\nthe whole thing, right? Incorrect or correct?\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\nRXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\nh7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\nMp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\nYhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\nBXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n=lQvy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-30T03:49:08",
                "message_text_only": "I dont think people consider other blockchains as a competitive\nthreat.  A PoW-blockchain is a largely singleton data structure for\nsecurity reasons (single highest hashrate), it is hard for an\nalternative chain to bootstrap or provide meaningful security.\nSecondly the world largely lacks expertise to maintain a blockchain to\nbitcoin's security level, perhaps you can see a hint of this in the\nrecently disclosed security vulnerability by Pieter Wuille and Gregory\nMaxwell.  Calls to this as an argument are not resonating and probably\nnot helping your argument.  Bitcoin has security properties, and a\ncompeting system cant achieve better properties by bypassing security,\nany blockchain faces the same fundamental security / decentralisation\nlimitations.\n\nSecondly Bitcoin can obviously compete with itself with different\nparameters and defacto *does* today.  I think it is a safe estimate\nthat > 99% of Bitcoin transactions right now are happening in Bitcoin\nrelated systems with various degrees of audit, reconciliation,\nprovable reserves etc.  I think we can expect this to continue and\nbecome more secure via more reconciliation, and longer term via\nlightning or Bitcoin sidechains with different parameters.  It is a\ndifferent story to have a single central system (Bitcoin with\nparameters changed to the point of centralisation failure) vs having\nmultiple choices, because some transactions can more easily use\nrelatively centralised systems (eg micropayments), and more\ninterestingly the combination of a secure and decentralised layer 1\nplus choices of less decentralised layer 2 options, can be interesting\nbecause the layer 2 is provided cover from attack.  There is less to\nbe gained by attacking relatively centralised layer 2 because any\npayments at risk of policy abuse (which is typically a small subset)\ncan easily switch to layer 1.  That in itself makes layer 2\ntransactions also less susceptible to policy abuse.  Further lightning\nit appears from work so far should add significant scale while\nretaining trustlessness and a good degree of decentralisation.\n\nFinally you seem to be focusing on \"artificial\" limits where that is\nnot the issue under consideration.  The limits are technical and\nrelating to decentralisation and security.  I wont go over them again\nas this topic has been covered many times in recent months.  Any chain\nthat tried to go to extreme parameters (very low block intervals, or\nvery large blocksizes) would have the same decentralisation problems\nas Bitcoin would if it did the same thing.  There are a number of alt\ncoins that have failed as a result of poor parameter choices, there\nare inherent security limits.\n\nAdam\n\nps Etiquette note for yourself and others: please dont be repetitive\nor attempt to be forceful.  Many people have spent many years\nunderstanding this very complex system, from my own experience it is\nrare indeed to think of an entirely new concept or analysis, that\nhasnt' been long considered and put to bed 3 or 4 years ago.\nThoughtful polite and constructive comments are welcome but I\nrecommend to not start from an assumption that you have a clear and\nbetter insight than the entire technical community, because I have to\nsay from my own experience that is very rarely the case.  It can be\nuseful to test theories on #bitcoin IRC channel to find out what has\nbeen already concluded, find the references and avoid having to have\nthat hashed out on this list which is trying to be focussed on\ntechnical solutions.\n\n\nOn 29 July 2015 at 16:10, Raystonn . via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n>> all of the smart contract, programmable money, consensus coding and\n>> tremendous developer effort is bent to the consumer demand for cheaper\n>> fees. Surely thou jests!\n>\n>\n> These other features can be replicated into any alternative blockchain,\n> including those with lower fees.  In the open-source world of\n> cryptocurrency, no feature will remain a value-add for very long after it\n> has been identified to be such.  Anything adding value will quickly be\n> absorbed into competing alternative blockchains.  That will leave economic\n> policy as the distinguishing factor.\n>\n>> ... it is not the case ... that reluctance to concede\n>> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n>> explained in this thread that the protocol's current state of\n>> development relies on  blocksize for security and, ultimately, as a\n>> means of protecting its degree of decentralization.\n>\n>\n> A slow or lack of increase to maximum transaction rate will cause pressure\n> on fees.  Whether this is the desired goal is not relevant.  Everyone has\n> agreed this will be the outcome.  As to a smaller block size being needed\n> for additional decentralization, one must simply ask how much we are all\n> willing to pay for that additional decentralization.  It is likely that the\n> benefit thereto will have to be demonstrated by some power attacking and\n> destroying a less decentralized currency before the benefit of this feature\n> is given monetary value by the market.  Until then, value will bleed to the\n> network with the least friction, because it will have the greatest ability\n> to grow its network effect.  That means the blockchain with adequate\n> features and cheapest fees will eventually have the largest market share.\n>\n>\n> -----Original Message----- From: Venzen Khaosan\n> Sent: Wednesday, July 29, 2015 3:11 PM\n> To: Raystonn .\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure\n> isn'ttemporary\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Raystonn, I'm aware that you're addressing your question to Greg\n> Maxwell, however a point you keep stating as fact calls for reference:\n>\n> On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n> [snip]\n>>\n>> How do you plan to address the bleeding of value from Bitcoin to\n>> alternative lower-fee blockchains created by the artificially-high\n>> bitcoin transaction fees when users begin looking for the cheapest\n>> way to send value?\n>\n> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n> all of the smart contract, programmable money, consensus coding and\n> tremendous developer effort is bent to the consumer demand for cheaper\n> fees. Surely thou jests!\n>\n>> Modern economic study has shown that liquidity moves to the\n>> location of least friction.\n>\n> Modern economic study? Can you please provide a link or reference to\n> the study you are referring to.\n>\n> \"liquidity moves to the location of least friction\"\n>\n> This sounds like \"econo-speak\" and makes no sense. The definition of\n> Liquidity is the degree to which an asset/security can be bought or\n> sold in the market without affecting the price.\n>\n> That is why bitcoin is said to have low liquidity: buying or selling\n> only 100 BTC visibly affects the exchange price. You probably mean\n> \"people like cheap fees\", which is true, but as others have said,\n> because of Bitcoin's powerful features, they are willing to pay higher\n> fees and wait longer for transactions to execute.\n>\n> As for your public cross-examination of Greg Maxwell, your case seems\n> to  be made on the assumption that limiting the size of the blockchain\n> is an attempt to artificially raise tx fees, but it is not the case\n> (as you and others repeatedly argue) that reluctance to concede\n> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n> explained in this thread that the protocol's current state of\n> development relies on  blocksize for security and, ultimately, as a\n> means of protecting its degree of decentralization.\n>\n> Surely, this is an obvious concern even for those who are campaigning\n> for the hare-brained ideal of making Bitcoin a \"faster, cheaper\n> alternative\" to visa or paypal? If we lose decentralization, we lose\n> the whole thing, right? Incorrect or correct?\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1\n>\n> iQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\n> RXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\n> h7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\n> Mp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\n> YhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\n> BXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n> =lQvy\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Andrew LeCody",
                "date": "2015-07-30T04:51:50",
                "message_text_only": "tl;dr\n$100 worth of hardware and $1/mo of expenses, should be able to run a full\nBitcoin node until 2020 with BIP101-size blocks.\n\n----\n\nI got into Bitcoin in the summer of 2010. I'm not a cryptographer, up until\nrecently my profession has been as a server administrator or systems\nengineer.\n\nI'd like to take a second to address the concern that larger blocks would\nmake it harder to run a full node on limited hardware and would therefore\nhurt decentralization. I run two nodes today, one on server-grade hardware\nat a datacenter and another on a mini-ITX Atom (dual core) system at my\nhome.\n\nI detailed the operational costs of my home node today on reddit:\nhttps://www.reddit.com/r/Bitcoin/comments/3f0h8e/mike_h_shuts_down_eric_ls_attempt_to_rewrite/ctkigpr\n\nIf I was a new user, wanting to run a full node. The most cost effective\nway would likely be with a Raspberry Pi 2 and a 2TB external HDD. Total\ncost about $100, including charger, microSD card, etc. That is less than\nthe cost of a TREZOR hardware wallet. As far as home projects go, not\nterribly expensive.\n\nNext, it will need power. According to the Wikipedia article, the rpi 2\nmodel B uses 3.5 watts of power max. The 2TB external drive will draw about\n5 watts at max. That's a total of 8.5 watts or 6.205 Kwh per month. In my\narea (North Texas) power is about $0.10/Kwh, which means my little node\ncosts $0.62 per month in power.\n\nLast, lets look at bandwidth. It's difficult to quantify bandwidth cost in\nthe same way because this is a home connection, mainly because I don't know\nhow to price in the loss of enjoyment if the system impacts my Internet\nusage to a noticeable degree. Luckily, I have some real world data from my\nexisting home node. Here is the last month:\nhttp://imgur.com/YmJwQpN\n\nThis system averages 120 Kbps in and 544 Kbps out. Note, this data is\nsomewhat skewed, because the system is also used for seeding torrents of\nvarious open source projects. The Bitcoin node itself is typically\nconnected to about 20 peers at any given time (maxconnections=20).\n\nSubjectively, my wife and I have never noticed any degradation of\nperformance due to my home server using too much bandwidth. I think it's\nsafe to say that I can treat the bandwidth is uses as effectively free,\nsince it's piggybacking on a connection I would be paying for even if I was\nnot running a Bitcoin node. The bandwidth usage of this Bitcoin node could\nincrease significantly, without any noticeable impact. If it did, I could\nalways lower maxconnections back to 8.\n\nThe only real constraint seems to be hard drive space, as the full\nblockchain and indexes take up about 50GB of space currently. If BIP101 is\nimplemented, 2TB of storage should be enough for me to continue running my\nhypothetical $100 node until about 2020.\n\nIt seems to me that at least for the next 5 years, the \"small devices\" of\ntoday can easily run Bitcoin nodes with BIP101-size blocks, with very\nlittle operational cost.\n\nIf anyone would like more detailed data on my existing nodes, please let me\nknow and I'll attempt to provide it (so long as it doesn't impact my\nprivacy of course).\n\nOn Wed, Jul 29, 2015 at 10:49 PM Adam Back via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I dont think people consider other blockchains as a competitive\n> threat.  A PoW-blockchain is a largely singleton data structure for\n> security reasons (single highest hashrate), it is hard for an\n> alternative chain to bootstrap or provide meaningful security.\n> Secondly the world largely lacks expertise to maintain a blockchain to\n> bitcoin's security level, perhaps you can see a hint of this in the\n> recently disclosed security vulnerability by Pieter Wuille and Gregory\n> Maxwell.  Calls to this as an argument are not resonating and probably\n> not helping your argument.  Bitcoin has security properties, and a\n> competing system cant achieve better properties by bypassing security,\n> any blockchain faces the same fundamental security / decentralisation\n> limitations.\n>\n> Secondly Bitcoin can obviously compete with itself with different\n> parameters and defacto *does* today.  I think it is a safe estimate\n> that > 99% of Bitcoin transactions right now are happening in Bitcoin\n> related systems with various degrees of audit, reconciliation,\n> provable reserves etc.  I think we can expect this to continue and\n> become more secure via more reconciliation, and longer term via\n> lightning or Bitcoin sidechains with different parameters.  It is a\n> different story to have a single central system (Bitcoin with\n> parameters changed to the point of centralisation failure) vs having\n> multiple choices, because some transactions can more easily use\n> relatively centralised systems (eg micropayments), and more\n> interestingly the combination of a secure and decentralised layer 1\n> plus choices of less decentralised layer 2 options, can be interesting\n> because the layer 2 is provided cover from attack.  There is less to\n> be gained by attacking relatively centralised layer 2 because any\n> payments at risk of policy abuse (which is typically a small subset)\n> can easily switch to layer 1.  That in itself makes layer 2\n> transactions also less susceptible to policy abuse.  Further lightning\n> it appears from work so far should add significant scale while\n> retaining trustlessness and a good degree of decentralisation.\n>\n> Finally you seem to be focusing on \"artificial\" limits where that is\n> not the issue under consideration.  The limits are technical and\n> relating to decentralisation and security.  I wont go over them again\n> as this topic has been covered many times in recent months.  Any chain\n> that tried to go to extreme parameters (very low block intervals, or\n> very large blocksizes) would have the same decentralisation problems\n> as Bitcoin would if it did the same thing.  There are a number of alt\n> coins that have failed as a result of poor parameter choices, there\n> are inherent security limits.\n>\n> Adam\n>\n> ps Etiquette note for yourself and others: please dont be repetitive\n> or attempt to be forceful.  Many people have spent many years\n> understanding this very complex system, from my own experience it is\n> rare indeed to think of an entirely new concept or analysis, that\n> hasnt' been long considered and put to bed 3 or 4 years ago.\n> Thoughtful polite and constructive comments are welcome but I\n> recommend to not start from an assumption that you have a clear and\n> better insight than the entire technical community, because I have to\n> say from my own experience that is very rarely the case.  It can be\n> useful to test theories on #bitcoin IRC channel to find out what has\n> been already concluded, find the references and avoid having to have\n> that hashed out on this list which is trying to be focussed on\n> technical solutions.\n>\n>\n> On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> Cheapest way to send value? Is this what Bitcoin is trying to do? So\n> >> all of the smart contract, programmable money, consensus coding and\n> >> tremendous developer effort is bent to the consumer demand for cheaper\n> >> fees. Surely thou jests!\n> >\n> >\n> > These other features can be replicated into any alternative blockchain,\n> > including those with lower fees.  In the open-source world of\n> > cryptocurrency, no feature will remain a value-add for very long after it\n> > has been identified to be such.  Anything adding value will quickly be\n> > absorbed into competing alternative blockchains.  That will leave\n> economic\n> > policy as the distinguishing factor.\n> >\n> >> ... it is not the case ... that reluctance to concede\n> >> blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n> >> explained in this thread that the protocol's current state of\n> >> development relies on  blocksize for security and, ultimately, as a\n> >> means of protecting its degree of decentralization.\n> >\n> >\n> > A slow or lack of increase to maximum transaction rate will cause\n> pressure\n> > on fees.  Whether this is the desired goal is not relevant.  Everyone has\n> > agreed this will be the outcome.  As to a smaller block size being needed\n> > for additional decentralization, one must simply ask how much we are all\n> > willing to pay for that additional decentralization.  It is likely that\n> the\n> > benefit thereto will have to be demonstrated by some power attacking and\n> > destroying a less decentralized currency before the benefit of this\n> feature\n> > is given monetary value by the market.  Until then, value will bleed to\n> the\n> > network with the least friction, because it will have the greatest\n> ability\n> > to grow its network effect.  That means the blockchain with adequate\n> > features and cheapest fees will eventually have the largest market share.\n> >\n> >\n> > -----Original Message----- From: Venzen Khaosan\n> > Sent: Wednesday, July 29, 2015 3:11 PM\n> > To: Raystonn .\n> > Cc: bitcoin-dev at lists.linuxfoundation.org\n> > Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measure\n> > isn'ttemporary\n> >\n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA1\n> >\n> > Raystonn, I'm aware that you're addressing your question to Greg\n> > Maxwell, however a point you keep stating as fact calls for reference:\n> >\n> > On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote:\n> > [snip]\n> >>\n> >> How do you plan to address the bleeding of value from Bitcoin to\n> >> alternative lower-fee blockchains created by the artificially-high\n> >> bitcoin transaction fees when users begin looking for the cheapest\n> >> way to send value?\n> >\n> > Cheapest way to send value? Is this what Bitcoin is trying to do? So\n> > all of the smart contract, programmable money, consensus coding and\n> > tremendous developer effort is bent to the consumer demand for cheaper\n> > fees. Surely thou jests!\n> >\n> >> Modern economic study has shown that liquidity moves to the\n> >> location of least friction.\n> >\n> > Modern economic study? Can you please provide a link or reference to\n> > the study you are referring to.\n> >\n> > \"liquidity moves to the location of least friction\"\n> >\n> > This sounds like \"econo-speak\" and makes no sense. The definition of\n> > Liquidity is the degree to which an asset/security can be bought or\n> > sold in the market without affecting the price.\n> >\n> > That is why bitcoin is said to have low liquidity: buying or selling\n> > only 100 BTC visibly affects the exchange price. You probably mean\n> > \"people like cheap fees\", which is true, but as others have said,\n> > because of Bitcoin's powerful features, they are willing to pay higher\n> > fees and wait longer for transactions to execute.\n> >\n> > As for your public cross-examination of Greg Maxwell, your case seems\n> > to  be made on the assumption that limiting the size of the blockchain\n> > is an attempt to artificially raise tx fees, but it is not the case\n> > (as you and others repeatedly argue) that reluctance to concede\n> > blocksize is an attempt to constrain capacity. Greg Maxwell thoroughly\n> > explained in this thread that the protocol's current state of\n> > development relies on  blocksize for security and, ultimately, as a\n> > means of protecting its degree of decentralization.\n> >\n> > Surely, this is an obvious concern even for those who are campaigning\n> > for the hare-brained ideal of making Bitcoin a \"faster, cheaper\n> > alternative\" to visa or paypal? If we lose decentralization, we lose\n> > the whole thing, right? Incorrect or correct?\n> > -----BEGIN PGP SIGNATURE-----\n> > Version: GnuPG v1\n> >\n> > iQEcBAEBAgAGBQJVuU+rAAoJEGwAhlQc8H1m9nkH/00xXJ53H4qvHjPrdNRniwvB\n> > RXi96QjbnVj/fxU2J2TBPYF1LxJ13avyL58bbaJF7GKqcpoYNZArCKLQyGaZGCTp\n> > h7Oe/0S+b1QCrvxcVK8Ikeb7a1h9wnhAPf1FvAWoJ1cFGx/qGHetKqx1dQTWkVWz\n> > Mp17vjaofmp2OhBzh0Smj+wV9hXn9w9giZKc6UGvC0Qc7Rf3GL/YVJzM2CZNvlLS\n> > YhQSqnnqduugYztqLV/NvNExF41zC2IMyNmA41q46v/nh8stNSIcJleD39csNMfx\n> > BXjrlnPfZ+JI4RhiH3I0qjOYWPtBH9od788DY509EOn3MT4vU+EVcQaxyuFqZyw=\n> > =lQvy\n> > -----END PGP SIGNATURE-----\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/54c3c041/attachment-0001.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-30T09:16:24",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nAdam,\n\n- From your explanation it is evident that fast, cheap bitcoin\ntransactions are possible. It is encouraging that Bitcoin _can_ indeed\ncompete with Visa, Paypal, et al. via Layer 2 protocols such as Lightning.\n\nThe youtube interview with you and Greg re: Lightning requires some\nconcentration and I'll have to watch it another couple of times to\nbetter grasp everything that is explained about the protocol and its\ninteraction with Bitcoin.\n\nThank you for your considered and informative response, else Raystonn\nand I might have gotten in an unnecessary scrap about fees, economics\nand what not.\n\nregards,\nVenzen Khaosan\n\n\n\nOn 07/30/2015 10:49 AM, Adam Back wrote:\n> I dont think people consider other blockchains as a competitive \n> threat.  A PoW-blockchain is a largely singleton data structure\n> for security reasons (single highest hashrate), it is hard for an \n> alternative chain to bootstrap or provide meaningful security. \n> Secondly the world largely lacks expertise to maintain a blockchain\n> to bitcoin's security level, perhaps you can see a hint of this in\n> the recently disclosed security vulnerability by Pieter Wuille and\n> Gregory Maxwell.  Calls to this as an argument are not resonating\n> and probably not helping your argument.  Bitcoin has security\n> properties, and a competing system cant achieve better properties\n> by bypassing security, any blockchain faces the same fundamental\n> security / decentralisation limitations.\n> \n> Secondly Bitcoin can obviously compete with itself with different \n> parameters and defacto *does* today.  I think it is a safe\n> estimate that > 99% of Bitcoin transactions right now are happening\n> in Bitcoin related systems with various degrees of audit,\n> reconciliation, provable reserves etc.  I think we can expect this\n> to continue and become more secure via more reconciliation, and\n> longer term via lightning or Bitcoin sidechains with different\n> parameters.  It is a different story to have a single central\n> system (Bitcoin with parameters changed to the point of\n> centralisation failure) vs having multiple choices, because some\n> transactions can more easily use relatively centralised systems (eg\n> micropayments), and more interestingly the combination of a secure\n> and decentralised layer 1 plus choices of less decentralised layer\n> 2 options, can be interesting because the layer 2 is provided cover\n> from attack.  There is less to be gained by attacking relatively\n> centralised layer 2 because any payments at risk of policy abuse\n> (which is typically a small subset) can easily switch to layer 1.\n> That in itself makes layer 2 transactions also less susceptible to\n> policy abuse.  Further lightning it appears from work so far should\n> add significant scale while retaining trustlessness and a good\n> degree of decentralisation.\n> \n> Finally you seem to be focusing on \"artificial\" limits where that\n> is not the issue under consideration.  The limits are technical\n> and relating to decentralisation and security.  I wont go over them\n> again as this topic has been covered many times in recent months.\n> Any chain that tried to go to extreme parameters (very low block\n> intervals, or very large blocksizes) would have the same\n> decentralisation problems as Bitcoin would if it did the same\n> thing.  There are a number of alt coins that have failed as a\n> result of poor parameter choices, there are inherent security\n> limits.\n> \n> Adam\n> \n> ps Etiquette note for yourself and others: please dont be\n> repetitive or attempt to be forceful.  Many people have spent many\n> years understanding this very complex system, from my own\n> experience it is rare indeed to think of an entirely new concept or\n> analysis, that hasnt' been long considered and put to bed 3 or 4\n> years ago. Thoughtful polite and constructive comments are welcome\n> but I recommend to not start from an assumption that you have a\n> clear and better insight than the entire technical community,\n> because I have to say from my own experience that is very rarely\n> the case.  It can be useful to test theories on #bitcoin IRC\n> channel to find out what has been already concluded, find the\n> references and avoid having to have that hashed out on this list\n> which is trying to be focussed on technical solutions.\n> \n> \n> On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> Cheapest way to send value? Is this what Bitcoin is trying to\n>>> do? So all of the smart contract, programmable money, consensus\n>>> coding and tremendous developer effort is bent to the consumer\n>>> demand for cheaper fees. Surely thou jests!\n>> \n>> \n>> These other features can be replicated into any alternative\n>> blockchain, including those with lower fees.  In the open-source\n>> world of cryptocurrency, no feature will remain a value-add for\n>> very long after it has been identified to be such.  Anything\n>> adding value will quickly be absorbed into competing alternative\n>> blockchains.  That will leave economic policy as the\n>> distinguishing factor.\n>> \n>>> ... it is not the case ... that reluctance to concede blocksize\n>>> is an attempt to constrain capacity. Greg Maxwell thoroughly \n>>> explained in this thread that the protocol's current state of \n>>> development relies on  blocksize for security and, ultimately,\n>>> as a means of protecting its degree of decentralization.\n>> \n>> \n>> A slow or lack of increase to maximum transaction rate will cause\n>> pressure on fees.  Whether this is the desired goal is not\n>> relevant.  Everyone has agreed this will be the outcome.  As to a\n>> smaller block size being needed for additional decentralization,\n>> one must simply ask how much we are all willing to pay for that\n>> additional decentralization.  It is likely that the benefit\n>> thereto will have to be demonstrated by some power attacking and \n>> destroying a less decentralized currency before the benefit of\n>> this feature is given monetary value by the market.  Until then,\n>> value will bleed to the network with the least friction, because\n>> it will have the greatest ability to grow its network effect.\n>> That means the blockchain with adequate features and cheapest\n>> fees will eventually have the largest market share.\n>> \n>> \n>> -----Original Message----- From: Venzen Khaosan Sent: Wednesday,\n>> July 29, 2015 3:11 PM To: Raystonn . Cc:\n>> bitcoin-dev at lists.linuxfoundation.org Subject: Re: [bitcoin-dev]\n>> Why Satoshi's temporary anti-spam measure isn'ttemporary\n>> \n> Raystonn, I'm aware that you're addressing your question to Greg \n> Maxwell, however a point you keep stating as fact calls for\n> reference:\n> \n> On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote: [snip]\n>>>> \n>>>> How do you plan to address the bleeding of value from Bitcoin\n>>>> to alternative lower-fee blockchains created by the\n>>>> artificially-high bitcoin transaction fees when users begin\n>>>> looking for the cheapest way to send value?\n> \n> Cheapest way to send value? Is this what Bitcoin is trying to do?\n> So all of the smart contract, programmable money, consensus coding\n> and tremendous developer effort is bent to the consumer demand for\n> cheaper fees. Surely thou jests!\n> \n>>>> Modern economic study has shown that liquidity moves to the \n>>>> location of least friction.\n> \n> Modern economic study? Can you please provide a link or reference\n> to the study you are referring to.\n> \n> \"liquidity moves to the location of least friction\"\n> \n> This sounds like \"econo-speak\" and makes no sense. The definition\n> of Liquidity is the degree to which an asset/security can be bought\n> or sold in the market without affecting the price.\n> \n> That is why bitcoin is said to have low liquidity: buying or\n> selling only 100 BTC visibly affects the exchange price. You\n> probably mean \"people like cheap fees\", which is true, but as\n> others have said, because of Bitcoin's powerful features, they are\n> willing to pay higher fees and wait longer for transactions to\n> execute.\n> \n> As for your public cross-examination of Greg Maxwell, your case\n> seems to  be made on the assumption that limiting the size of the\n> blockchain is an attempt to artificially raise tx fees, but it is\n> not the case (as you and others repeatedly argue) that reluctance\n> to concede blocksize is an attempt to constrain capacity. Greg\n> Maxwell thoroughly explained in this thread that the protocol's\n> current state of development relies on  blocksize for security and,\n> ultimately, as a means of protecting its degree of\n> decentralization.\n> \n> Surely, this is an obvious concern even for those who are\n> campaigning for the hare-brained ideal of making Bitcoin a \"faster,\n> cheaper alternative\" to visa or paypal? If we lose\n> decentralization, we lose the whole thing, right? Incorrect or\n> correct?\n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuetlAAoJEGwAhlQc8H1m2TkH/jKx7V9vCZbOjbxAlfjnR0ai\n+QDxMm0K0sL/MlsLVm0FAHwGiKhYJnEeXiZJlXu0eiUz35JALDMtSQiVbQzcHAc2\nGvyW3tWUh6+uSfYhsnImQXxlDgCUKIgZvtTM900OWcGXZeLU3W5UdUK5+ietHK0/\n1HbZgcljqke+nSsH2aCagd/iNdwCIUcfapsUgB6iPWtZQfLg6SHi8CjbG/Th5Na7\nfpA5yJlO4N+Q2JpOVId/LfC7loDCEZtPtYA5NZAsDcEcSIXUycCoGL8LNMIFGJNe\nKo2RNqGeIkb/x8T2USxlkrNUZx/CCF201MMClPLC/LXX1bEMDvO8F0m1TBR1ptg=\n=106o\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T09:38:00",
                "message_text_only": "It is important ro note that even if lightning was never developed, the\nblock size remains at 1 MB forever and fees rise to 10 usd per transaction,\nsuch \"high fees\" are still extremely competitive with non-decentralized\npayment systems that have proportional fees. For example, 10 usd is still\nlower than 1% when you are moving more than 1000 usd. I know, this doesn't\nwork for micro-transactions, but I don't think Bitcoin can be useful for\nmicro-transactions in the long term unless something like lightning payment\nchannels is deployed. Until we accept the second fact, it will be very hard\nto discuss any projection of future usage. I think that believing that all\nthe transactions of the entire world population can be made in-chain while\nkeeping bitcoin decentralized is incredibly naive. Not even nasdaq has that\ncapacity (and if full node's require nasdaq's capacity, I don't think we\ncan talk about a decentralized system anymore).\nOn Jul 30, 2015 11:16 AM, \"Venzen Khaosan via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Adam,\n>\n> - From your explanation it is evident that fast, cheap bitcoin\n> transactions are possible. It is encouraging that Bitcoin _can_ indeed\n> compete with Visa, Paypal, et al. via Layer 2 protocols such as Lightning.\n>\n> The youtube interview with you and Greg re: Lightning requires some\n> concentration and I'll have to watch it another couple of times to\n> better grasp everything that is explained about the protocol and its\n> interaction with Bitcoin.\n>\n> Thank you for your considered and informative response, else Raystonn\n> and I might have gotten in an unnecessary scrap about fees, economics\n> and what not.\n>\n> regards,\n> Venzen Khaosan\n>\n>\n>\n> On 07/30/2015 10:49 AM, Adam Back wrote:\n> > I dont think people consider other blockchains as a competitive\n> > threat.  A PoW-blockchain is a largely singleton data structure\n> > for security reasons (single highest hashrate), it is hard for an\n> > alternative chain to bootstrap or provide meaningful security.\n> > Secondly the world largely lacks expertise to maintain a blockchain\n> > to bitcoin's security level, perhaps you can see a hint of this in\n> > the recently disclosed security vulnerability by Pieter Wuille and\n> > Gregory Maxwell.  Calls to this as an argument are not resonating\n> > and probably not helping your argument.  Bitcoin has security\n> > properties, and a competing system cant achieve better properties\n> > by bypassing security, any blockchain faces the same fundamental\n> > security / decentralisation limitations.\n> >\n> > Secondly Bitcoin can obviously compete with itself with different\n> > parameters and defacto *does* today.  I think it is a safe\n> > estimate that > 99% of Bitcoin transactions right now are happening\n> > in Bitcoin related systems with various degrees of audit,\n> > reconciliation, provable reserves etc.  I think we can expect this\n> > to continue and become more secure via more reconciliation, and\n> > longer term via lightning or Bitcoin sidechains with different\n> > parameters.  It is a different story to have a single central\n> > system (Bitcoin with parameters changed to the point of\n> > centralisation failure) vs having multiple choices, because some\n> > transactions can more easily use relatively centralised systems (eg\n> > micropayments), and more interestingly the combination of a secure\n> > and decentralised layer 1 plus choices of less decentralised layer\n> > 2 options, can be interesting because the layer 2 is provided cover\n> > from attack.  There is less to be gained by attacking relatively\n> > centralised layer 2 because any payments at risk of policy abuse\n> > (which is typically a small subset) can easily switch to layer 1.\n> > That in itself makes layer 2 transactions also less susceptible to\n> > policy abuse.  Further lightning it appears from work so far should\n> > add significant scale while retaining trustlessness and a good\n> > degree of decentralisation.\n> >\n> > Finally you seem to be focusing on \"artificial\" limits where that\n> > is not the issue under consideration.  The limits are technical\n> > and relating to decentralisation and security.  I wont go over them\n> > again as this topic has been covered many times in recent months.\n> > Any chain that tried to go to extreme parameters (very low block\n> > intervals, or very large blocksizes) would have the same\n> > decentralisation problems as Bitcoin would if it did the same\n> > thing.  There are a number of alt coins that have failed as a\n> > result of poor parameter choices, there are inherent security\n> > limits.\n> >\n> > Adam\n> >\n> > ps Etiquette note for yourself and others: please dont be\n> > repetitive or attempt to be forceful.  Many people have spent many\n> > years understanding this very complex system, from my own\n> > experience it is rare indeed to think of an entirely new concept or\n> > analysis, that hasnt' been long considered and put to bed 3 or 4\n> > years ago. Thoughtful polite and constructive comments are welcome\n> > but I recommend to not start from an assumption that you have a\n> > clear and better insight than the entire technical community,\n> > because I have to say from my own experience that is very rarely\n> > the case.  It can be useful to test theories on #bitcoin IRC\n> > channel to find out what has been already concluded, find the\n> > references and avoid having to have that hashed out on this list\n> > which is trying to be focussed on technical solutions.\n> >\n> >\n> > On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>> Cheapest way to send value? Is this what Bitcoin is trying to\n> >>> do? So all of the smart contract, programmable money, consensus\n> >>> coding and tremendous developer effort is bent to the consumer\n> >>> demand for cheaper fees. Surely thou jests!\n> >>\n> >>\n> >> These other features can be replicated into any alternative\n> >> blockchain, including those with lower fees.  In the open-source\n> >> world of cryptocurrency, no feature will remain a value-add for\n> >> very long after it has been identified to be such.  Anything\n> >> adding value will quickly be absorbed into competing alternative\n> >> blockchains.  That will leave economic policy as the\n> >> distinguishing factor.\n> >>\n> >>> ... it is not the case ... that reluctance to concede blocksize\n> >>> is an attempt to constrain capacity. Greg Maxwell thoroughly\n> >>> explained in this thread that the protocol's current state of\n> >>> development relies on  blocksize for security and, ultimately,\n> >>> as a means of protecting its degree of decentralization.\n> >>\n> >>\n> >> A slow or lack of increase to maximum transaction rate will cause\n> >> pressure on fees.  Whether this is the desired goal is not\n> >> relevant.  Everyone has agreed this will be the outcome.  As to a\n> >> smaller block size being needed for additional decentralization,\n> >> one must simply ask how much we are all willing to pay for that\n> >> additional decentralization.  It is likely that the benefit\n> >> thereto will have to be demonstrated by some power attacking and\n> >> destroying a less decentralized currency before the benefit of\n> >> this feature is given monetary value by the market.  Until then,\n> >> value will bleed to the network with the least friction, because\n> >> it will have the greatest ability to grow its network effect.\n> >> That means the blockchain with adequate features and cheapest\n> >> fees will eventually have the largest market share.\n> >>\n> >>\n> >> -----Original Message----- From: Venzen Khaosan Sent: Wednesday,\n> >> July 29, 2015 3:11 PM To: Raystonn . Cc:\n> >> bitcoin-dev at lists.linuxfoundation.org Subject: Re: [bitcoin-dev]\n> >> Why Satoshi's temporary anti-spam measure isn'ttemporary\n> >>\n> > Raystonn, I'm aware that you're addressing your question to Greg\n> > Maxwell, however a point you keep stating as fact calls for\n> > reference:\n> >\n> > On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote: [snip]\n> >>>>\n> >>>> How do you plan to address the bleeding of value from Bitcoin\n> >>>> to alternative lower-fee blockchains created by the\n> >>>> artificially-high bitcoin transaction fees when users begin\n> >>>> looking for the cheapest way to send value?\n> >\n> > Cheapest way to send value? Is this what Bitcoin is trying to do?\n> > So all of the smart contract, programmable money, consensus coding\n> > and tremendous developer effort is bent to the consumer demand for\n> > cheaper fees. Surely thou jests!\n> >\n> >>>> Modern economic study has shown that liquidity moves to the\n> >>>> location of least friction.\n> >\n> > Modern economic study? Can you please provide a link or reference\n> > to the study you are referring to.\n> >\n> > \"liquidity moves to the location of least friction\"\n> >\n> > This sounds like \"econo-speak\" and makes no sense. The definition\n> > of Liquidity is the degree to which an asset/security can be bought\n> > or sold in the market without affecting the price.\n> >\n> > That is why bitcoin is said to have low liquidity: buying or\n> > selling only 100 BTC visibly affects the exchange price. You\n> > probably mean \"people like cheap fees\", which is true, but as\n> > others have said, because of Bitcoin's powerful features, they are\n> > willing to pay higher fees and wait longer for transactions to\n> > execute.\n> >\n> > As for your public cross-examination of Greg Maxwell, your case\n> > seems to  be made on the assumption that limiting the size of the\n> > blockchain is an attempt to artificially raise tx fees, but it is\n> > not the case (as you and others repeatedly argue) that reluctance\n> > to concede blocksize is an attempt to constrain capacity. Greg\n> > Maxwell thoroughly explained in this thread that the protocol's\n> > current state of development relies on  blocksize for security and,\n> > ultimately, as a means of protecting its degree of\n> > decentralization.\n> >\n> > Surely, this is an obvious concern even for those who are\n> > campaigning for the hare-brained ideal of making Bitcoin a \"faster,\n> > cheaper alternative\" to visa or paypal? If we lose\n> > decentralization, we lose the whole thing, right? Incorrect or\n> > correct?\n> >> _______________________________________________ bitcoin-dev\n> >> mailing list bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1\n>\n> iQEcBAEBAgAGBQJVuetlAAoJEGwAhlQc8H1m2TkH/jKx7V9vCZbOjbxAlfjnR0ai\n> +QDxMm0K0sL/MlsLVm0FAHwGiKhYJnEeXiZJlXu0eiUz35JALDMtSQiVbQzcHAc2\n> GvyW3tWUh6+uSfYhsnImQXxlDgCUKIgZvtTM900OWcGXZeLU3W5UdUK5+ietHK0/\n> 1HbZgcljqke+nSsH2aCagd/iNdwCIUcfapsUgB6iPWtZQfLg6SHi8CjbG/Th5Na7\n> fpA5yJlO4N+Q2JpOVId/LfC7loDCEZtPtYA5NZAsDcEcSIXUycCoGL8LNMIFGJNe\n> Ko2RNqGeIkb/x8T2USxlkrNUZx/CCF201MMClPLC/LXX1bEMDvO8F0m1TBR1ptg=\n> =106o\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/de8c1fca/attachment.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-30T13:33:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nJorge,\n\nYou know, it is always insightful to get the perspective of active\nparticipants and Core developers like yourself. As Adam pointed out\nearlier, the developers have done mileage in this space and have\nalready considered most of the conceptual issues and technical\nchallenges that must resurface in waves as new interested parties join\nthe list. Allow me, in this response to your message, to make a\nproposal to those who may be interested:\n\n\nBitcoin's protocol functions and the implications of this innovation\nfor the future are difficult to grasp, even for the smartest among us.\nThen there are also the words of Niels Bohr:\n\n\"Prediction is difficult, especially about the future.\"\n\nThey say a lot of time and energy is wasted because we don't know what\nwe don't know. Years of discussion among those in the list has\nestablished certain axioms that determine the options for Bitcoin\ngoing forward. According to my comprehension, the following are some\nof the most relevant for the present discussion (please correct me\nwhere I'm off the mark):\n\n1. A high degree of decentralization is prima optima.\n\n2.  Bitcoin is much more than a payment network. A lot of the\nnon-payment features are, arguably, what gives Bitcoin most of its\nvalue. Yet, the payment functionality is a major design feature and\nall agree that it should scale - subject to axiom 1.\n\n3. The Bitcoin payment network (\"Layer 1\"), due to technical\nconstraints imposed by its p2p design, cannot compete with Visa and\nother centralized transmission channels for speed or transaction\nvolume. Nor can it handle the transaction requirements of the world's\npopulation - the scaling required would necessarily render Bitcoin\ncentralized, insecure and, therefore, worthless.\n\n4. The addition of \"layer 2\" protocols (such as Lightning and other\nsidechains) will allow fast, low-fee (and with virtually instant\nconfirmation) bitcoin transactions within two years, according to the\ndevelopers active in that:\nhttp://www.youtube.com/watch?v=jE_elgnIw3M\nhttp://www.youtube.com/watch?v=fBS_ieDwQ9k\n\n5. This \"layering of protocols\" simplifies the scaling (blocksize)\ndebate because it separates\n A) the primary concern for security and fidelity via\ndecentralization, and\n B) the ideal of universal accessibility via fast, low-fee transactions.\nDiscussion about scalability can therefore proceed with the knowledge\nthat Lightning and other \"layer 2\" sidechains will make Bitcoin\naccessible to the global majority - and be fast like Bruce Lee - while\nthe Bitcoin developers can focus on making Bitcoin Core protocol\n(layer 1) the world heavyweight champion - Muhammad Ali.\n\nSince I've maintained your interest up to the final sentence, I say:\nas an insurance against a capacity crisis before layer 2 is deployed,\nwhy not implement bip100's 2MB blocksize proposals in a testnet?\n\n\n\nOn 07/30/2015 04:38 PM, Jorge Tim\u00f3n wrote:\n> It is important ro note that even if lightning was never developed,\n> the block size remains at 1 MB forever and fees rise to 10 usd per \n> transaction, such \"high fees\" are still extremely competitive with \n> non-decentralized payment systems that have proportional fees. For \n> example, 10 usd is still lower than 1% when you are moving more\n> than 1000 usd. I know, this doesn't work for micro-transactions,\n> but I don't think Bitcoin can be useful for micro-transactions in\n> the long term unless something like lightning payment channels is\n> deployed. Until we accept the second fact, it will be very hard to\n> discuss any projection of future usage. I think that believing that\n> all the transactions of the entire world population can be made\n> in-chain while keeping bitcoin decentralized is incredibly naive.\n> Not even nasdaq has that capacity (and if full node's require\n> nasdaq's capacity, I don't think we can talk about a decentralized\n> system anymore).\n> \n> On Jul 30, 2015 11:16 AM, \"Venzen Khaosan via bitcoin-dev\" \n> <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> Adam,\n> \n> - From your explanation it is evident that fast, cheap bitcoin \n> transactions are possible. It is encouraging that Bitcoin _can_\n> indeed compete with Visa, Paypal, et al. via Layer 2 protocols such\n> as Lightning.\n> \n> The youtube interview with you and Greg re: Lightning requires\n> some concentration and I'll have to watch it another couple of\n> times to better grasp everything that is explained about the\n> protocol and its interaction with Bitcoin.\n> \n> Thank you for your considered and informative response, else\n> Raystonn and I might have gotten in an unnecessary scrap about\n> fees, economics and what not.\n> \n> regards, Venzen Khaosan\n> \n> \n> \n> On 07/30/2015 10:49 AM, Adam Back wrote:\n>> I dont think people consider other blockchains as a competitive \n>> threat.  A PoW-blockchain is a largely singleton data structure \n>> for security reasons (single highest hashrate), it is hard for\n>> an alternative chain to bootstrap or provide meaningful\n>> security. Secondly the world largely lacks expertise to maintain\n>> a blockchain to bitcoin's security level, perhaps you can see a\n>> hint of this in the recently disclosed security vulnerability by\n>> Pieter Wuille and Gregory Maxwell.  Calls to this as an argument\n>> are not resonating and probably not helping your argument.\n>> Bitcoin has security properties, and a competing system cant\n>> achieve better properties by bypassing security, any blockchain\n>> faces the same fundamental security / decentralisation\n>> limitations.\n> \n>> Secondly Bitcoin can obviously compete with itself with\n>> different parameters and defacto *does* today.  I think it is a\n>> safe estimate that > 99% of Bitcoin transactions right now are\n>> happening in Bitcoin related systems with various degrees of\n>> audit, reconciliation, provable reserves etc.  I think we can\n>> expect this to continue and become more secure via more\n>> reconciliation, and longer term via lightning or Bitcoin\n>> sidechains with different parameters.  It is a different story to\n>> have a single central system (Bitcoin with parameters changed to\n>> the point of centralisation failure) vs having multiple choices,\n>> because some transactions can more easily use relatively\n>> centralised systems (eg micropayments), and more interestingly\n>> the combination of a secure and decentralised layer 1 plus\n>> choices of less decentralised layer 2 options, can be interesting\n>> because the layer 2 is provided cover from attack.  There is less\n>> to be gained by attacking relatively centralised layer 2 because\n>> any payments at risk of policy abuse (which is typically a small\n>> subset) can easily switch to layer 1. That in itself makes layer\n>> 2 transactions also less susceptible to policy abuse.  Further\n>> lightning it appears from work so far should add significant\n>> scale while retaining trustlessness and a good degree of\n>> decentralisation.\n> \n>> Finally you seem to be focusing on \"artificial\" limits where\n>> that is not the issue under consideration.  The limits are\n>> technical and relating to decentralisation and security.  I wont\n>> go over them again as this topic has been covered many times in\n>> recent months. Any chain that tried to go to extreme parameters\n>> (very low block intervals, or very large blocksizes) would have\n>> the same decentralisation problems as Bitcoin would if it did the\n>> same thing.  There are a number of alt coins that have failed as\n>> a result of poor parameter choices, there are inherent security \n>> limits.\n> \n>> Adam\n> \n>> ps Etiquette note for yourself and others: please dont be \n>> repetitive or attempt to be forceful.  Many people have spent\n>> many years understanding this very complex system, from my own \n>> experience it is rare indeed to think of an entirely new concept\n>> or analysis, that hasnt' been long considered and put to bed 3 or\n>> 4 years ago. Thoughtful polite and constructive comments are\n>> welcome but I recommend to not start from an assumption that you\n>> have a clear and better insight than the entire technical\n>> community, because I have to say from my own experience that is\n>> very rarely the case.  It can be useful to test theories on\n>> #bitcoin IRC channel to find out what has been already concluded,\n>> find the references and avoid having to have that hashed out on\n>> this list which is trying to be focussed on technical solutions.\n> \n> \n>> On 29 July 2015 at 16:10, Raystonn . via bitcoin-dev \n>> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>>> Cheapest way to send value? Is this what Bitcoin is trying\n>>>> to do? So all of the smart contract, programmable money,\n>>>> consensus coding and tremendous developer effort is bent to\n>>>> the consumer demand for cheaper fees. Surely thou jests!\n>>> \n>>> \n>>> These other features can be replicated into any alternative \n>>> blockchain, including those with lower fees.  In the\n>>> open-source world of cryptocurrency, no feature will remain a\n>>> value-add for very long after it has been identified to be\n>>> such.  Anything adding value will quickly be absorbed into\n>>> competing alternative blockchains.  That will leave economic\n>>> policy as the distinguishing factor.\n>>> \n>>>> ... it is not the case ... that reluctance to concede\n>>>> blocksize is an attempt to constrain capacity. Greg Maxwell\n>>>> thoroughly explained in this thread that the protocol's\n>>>> current state of development relies on  blocksize for\n>>>> security and, ultimately, as a means of protecting its degree\n>>>> of decentralization.\n>>> \n>>> \n>>> A slow or lack of increase to maximum transaction rate will\n>>> cause pressure on fees.  Whether this is the desired goal is\n>>> not relevant.  Everyone has agreed this will be the outcome.\n>>> As to a smaller block size being needed for additional\n>>> decentralization, one must simply ask how much we are all\n>>> willing to pay for that additional decentralization.  It is\n>>> likely that the benefit thereto will have to be demonstrated by\n>>> some power attacking and destroying a less decentralized\n>>> currency before the benefit of this feature is given monetary\n>>> value by the market.  Until then, value will bleed to the\n>>> network with the least friction, because it will have the\n>>> greatest ability to grow its network effect. That means the\n>>> blockchain with adequate features and cheapest fees will\n>>> eventually have the largest market share.\n>>> \n>>> \n>>> -----Original Message----- From: Venzen Khaosan Sent:\n>>> Wednesday, July 29, 2015 3:11 PM To: Raystonn . Cc: \n>>> bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org> Subject: Re: \n> [bitcoin-dev]\n>>> Why Satoshi's temporary anti-spam measure isn'ttemporary\n>>> \n>> Raystonn, I'm aware that you're addressing your question to Greg \n>> Maxwell, however a point you keep stating as fact calls for \n>> reference:\n> \n>> On 07/30/2015 04:28 AM, Raystonn . via bitcoin-dev wrote: [snip]\n>>>>> \n>>>>> How do you plan to address the bleeding of value from\n>>>>> Bitcoin to alternative lower-fee blockchains created by\n>>>>> the artificially-high bitcoin transaction fees when users\n>>>>> begin looking for the cheapest way to send value?\n> \n>> Cheapest way to send value? Is this what Bitcoin is trying to\n>> do? So all of the smart contract, programmable money, consensus\n>> coding and tremendous developer effort is bent to the consumer\n>> demand for cheaper fees. Surely thou jests!\n> \n>>>>> Modern economic study has shown that liquidity moves to\n>>>>> the location of least friction.\n> \n>> Modern economic study? Can you please provide a link or\n>> reference to the study you are referring to.\n> \n>> \"liquidity moves to the location of least friction\"\n> \n>> This sounds like \"econo-speak\" and makes no sense. The\n>> definition of Liquidity is the degree to which an asset/security\n>> can be bought or sold in the market without affecting the price.\n> \n>> That is why bitcoin is said to have low liquidity: buying or \n>> selling only 100 BTC visibly affects the exchange price. You \n>> probably mean \"people like cheap fees\", which is true, but as \n>> others have said, because of Bitcoin's powerful features, they\n>> are willing to pay higher fees and wait longer for transactions\n>> to execute.\n> \n>> As for your public cross-examination of Greg Maxwell, your case \n>> seems to  be made on the assumption that limiting the size of\n>> the blockchain is an attempt to artificially raise tx fees, but\n>> it is not the case (as you and others repeatedly argue) that\n>> reluctance to concede blocksize is an attempt to constrain\n>> capacity. Greg Maxwell thoroughly explained in this thread that\n>> the protocol's current state of development relies on  blocksize\n>> for security and, ultimately, as a means of protecting its degree\n>> of decentralization.\n> \n>> Surely, this is an obvious concern even for those who are \n>> campaigning for the hare-brained ideal of making Bitcoin a\n>> \"faster, cheaper alternative\" to visa or paypal? If we lose \n>> decentralization, we lose the whole thing, right? Incorrect or \n>> correct?\n>>> _______________________________________________ bitcoin-dev \n>>> mailing list bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org> \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuieTAAoJEGwAhlQc8H1meAIH/RHUV72bbMItZOT7rvhEU56r\nlqEcvwXBSCYgsh1ieVeTdC/ydJnRSzWsdZxM3D7PEOzutlG+VaJQVSJREItGb2GW\nPYiZ3uwSwF64nRq5bZ7aS2pT/Zo1a1yAf4H5rbeyxxoWC+zkmSsmcf73MgmslIuU\n7XXHNztCX3glfOctr+J61WEKBw0ItQCTsp9J08yVlj/gvKTi3U2jDcYV5mf/3D0j\npvXl244DG4b+nYetRyyonYbZelSUYfCghNBJhUYZApVmcgfKDRPeX1uWfkl0HuUd\nKc+uZtrhJaUXdRlqc50nOsRSCAK+d4PGClF8JFlzI65+SG7VzkVqc8SkSDfNXfY=\n=r4SA\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T14:10:46",
                "message_text_only": "On Thu, Jul 30, 2015 at 2:29 PM, Gavin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I would like (and have been asking) those people to take the time to quantify those costs and write up those risks in a careful way.\n\nI agree that having a \"minimal hardware requirements\" specification\nwould greatly help with this discussions.\n\n> I believe the costs and risks of 8MB blocks are minimal, and that the benefits of supporting more transaction FAR outweigh those costs and risks, but it is hard to have a rational conversation about that when even simple questions like 'what is s reasonable cost to run a full node' are met with silence.\n\nThese tests by Rusty (strong advocate of IBLT and working on it) seem\nto indicate otherwise: http://rusty.ozlabs.org/?p=509\n\nOn Thu, Jul 30, 2015 at 2:50 PM, Pieter Wuille via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I think the risks of trying to make a controversial change to the network\n> FAR outweighs the benefits of a small constant factor that \"kicks the can\n> down the road\".\n\nI think the risks of a controversial deployment in consensus rules\nchanges, outweigh by far potential benefits of ANY consensus forks, no\nmatter how amazing the potential benefits may seem. Bitcoin may not\nsurvive a controversial hardfork or go 3 years back in adoption,\nnobody knows.\n\n> Let's scale the block size gradually over time, according to technological\n> growth.\n\nI agree. Unfortunately, technological and economic growth is very hard\nto predict.\n\n\nOn Thu, Jul 30, 2015 at 3:33 PM, Venzen Khaosan <venzen at mail.bihthai.net> wrote:\n> 2.  Bitcoin is much more than a payment network. A lot of the\n> non-payment features are, arguably, what gives Bitcoin most of its\n> value. Yet, the payment functionality is a major design feature and\n> all agree that it should scale - subject to axiom 1.\n\nI just explained why I disagree with this point. Bitcoin fees depend\non transaction sizes rather than amounts moved. Even ignoring\nscript-based signatures and all the other advantages in Bitcoin, that\nfact alone makes it extremely competitive with \"traditional systems\"\nfor many use cases (say, sending 1000 usd from the US to M\u00e9xico).\nI agree overall with your other points.\nExtremely cheap and instant transactions can be provided by lightning,\nbut cannot be provided by Bitcoin in-chain alone in the long term (it\ncan't even provide instant irreversible transactions).\n\n> Since I've maintained your interest up to the final sentence, I say:\n> as an insurance against a capacity crisis before layer 2 is deployed,\n> why not implement bip100's 2MB blocksize proposals in a testnet?\n\nOf all blocksize proposals, bip102 (the one with the single doubling\nto 2MB) is the one I dislike less because it doesn't make any\nassumptions about future technological or economic growth (I loved\nyour Bohr cite).\nBut it still has something that I dislike from all proposals: the\nnumbers just seem pulled out of a hat.\n\nBut I already created that testnet you propose (and\nstd::numeric_limits<uint64_t>::max() -1 more testnets for other sizes)\nin https://github.com/bitcoin/bitcoin/pull/6382\n\nYou can run it with the following runtime options: -chain=sizetest\n-blocksize=2000000\n\nUnfortunately, nobody seems interested in running some tests for\nseveral sizes before proposing a concrete size.\nAs far as I know, nobody has used that branch to test different sizes."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T14:52:40",
                "message_text_only": "On Thursday 30. July 2015 11.38.00 Jorge Tim\u00f3n via bitcoin-dev wrote:\n> It is important ro note that even if lightning was never developed, the\n> block size remains at 1 MB forever and fees rise to 10 usd per transaction,\n> such \"high fees\" are still extremely competitive with non-decentralized\n> payment systems that have proportional fees.\n\n\nWhat makes you think that when there is such a low availability of transaction \nspace that paying to be included costs you $10, that Bitcoin is not going to \nbe outcompeted and replaced or otherwise regarded as worthless?\n-- \nThomas Zander"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-07-30T15:24:07",
                "message_text_only": "On Thu, Jul 30, 2015 at 9:52 AM, Thomas Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> What makes you think that when there is such a low availability of\n> transaction\n> space that paying to be included costs you $10, that Bitcoin is not going\n> to\n> be outcompeted and replaced or otherwise regarded as worthless?\n>\n\nAh, well that's simple. Because any decentralized system is going to have\nhigh transaction costs and scarcity anyway. So far the only mechanism we\nknow for how to do this is something like bitcoin. As a centralized system,\nbitcoin is already strongly outcompeted by many, many other designs, so\nthat shouldn't be very surprising I think.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/96d4dabe/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-30T15:55:50",
                "message_text_only": "On Thu, Jul 30, 2015 at 11:24 AM, Bryan Bishop via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Because any decentralized system is going to have high transaction costs\n> and scarcity anyway.\n\n\nThis is a meme that keeps coming up that I think just isn't true.\n\nWhat other decentralized systems can we look at as role models?\n\nHow decentralized are they?\n\nAnd why did they succeed when \"more efficient\" centralized systems did not?\n\n\nThe Internet is the most successful decentralized system to date; what\nlessons should we learn?\n\nHow decentralized is the technology of the Internet (put aside governance\nand the issues of who-assigns-blocks-of-IPs-and-registers-domain-names)?\nHow many root DNS servers?  How many BGP routers along the backbone would\nneed to be compromised to disrupt traffic? Why don't we see more\ndisruptions, or why are people willing to tolerate the disruptions that DO\nhappen?\n\nAnd how did the Internet out-compete more efficient centralized systems\nfrom the big telecom companies?  (I remember some of the arguments that\nunreliable, inefficient packet-switching would never replace dedicated\ncircuits that couldn't get congested and didn't have inefficient timeouts\nand retransmissions)\n\n\nWhat other successful or unsuccessful decentralized systems should we be\nlooking at?\n\n\nI'm old-- I graduated from college in 1988, so I've worked in tech through\nthe entire rise of the Internet. The lessons I believe we should take away\nis that a system doesn't have to be perfect to be successful, and we\nshouldn't underestimate people's ability to innovate around what might seem\nto be insurmountable problems, IF people are given the ability to innovate.\n\nYes, people will innovate within a 1MB (or 1MB-scaling-to-2MB by 2021) max\nblock size, and yes, smaller blocks have utility. But I think we'll get a\nlot more innovation and utility without such small, artificial limits.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/f6a07a15/attachment-0001.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T17:24:35",
                "message_text_only": "On Thursday 30. July 2015 11.55.50 Gavin Andresen wrote:\n> What other successful or unsuccessful decentralized systems should we be\n> looking at?\n\nParallel compiling systems (distcc, icecream, teambuilder).\n\nGit vs subversion (or perforce).\n\nNot a joke; googles search. Not from a user perspective, naturally. But their \nfilesystem and internal databases.\nWait, let me get a link; https://en.wikipedia.org/wiki/Google_File_System\n\nand since I'm on wikipedia.\n\nhttps://en.wikipedia.org/wiki/Parallel_rendering\n\nThinking about it; one inherent trait of successful distributed systems is \nthat they are fractal-like. Not one huge mesh, but islands that connect.\nBitcoin core does something similar, but it doesn't really. The 'ping' score \nfor connections is unreliable and its not really used to propagate smartly...\n\n-- \nThomas Zander"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-07-31T15:27:45",
                "message_text_only": "On Thu, Jul 30, 2015 at 10:55 AM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> On Thu, Jul 30, 2015 at 11:24 AM, Bryan Bishop via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Because any decentralized system is going to have high transaction costs\n>> and scarcity anyway.\n>\n>\n> This is a meme that keeps coming up that I think just isn't true.\n>\n\nSpecifically I was replying to the argument that went like \"the bitcoin\nsystem, in any of its futures with a bunch of non-zero transaction fees, is\ngoing to be replaced by a decentralized system that can commit to\ntransactions that have lower or zero transaction fees, and which also\notherwise provides the same benefits as bitcoin\". My reply was that\ndecentralized systems are going to have physical limitations that force\ntheir solutions to look certain ways, which would do something like, for\nexample, explain why there were \"$10 fees\" in that original scenario in the\nfirst place. Your reply does not seem to share this context?\n\nAlso, I don't mean to start a discussion about internet architecture, but\nISP peering agreements do not look particularly like a cryptographic,\ndecentralized system to me at all. I agree that the internet needs better\narchitecture. I would call the IETF about this but I think Greg would be\nthe one to answer or something :-). Would be sorta redundant, heh.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/de9a787c/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T16:07:40",
                "message_text_only": "On Thursday 30. July 2015 10.24.07 Bryan Bishop wrote:\n> On Thu, Jul 30, 2015 at 9:52 AM, Thomas Zander via bitcoin-dev <\n> \n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > What makes you think that when there is such a low availability of\n> > transaction\n> > space that paying to be included costs you $10, that Bitcoin is not going\n> > to\n> > be outcompeted and replaced or otherwise regarded as worthless?\n> \n> Ah, well that's simple. Because any decentralized system is going to have\n> high transaction costs and scarcity anyway.\n\nI've been doing system design for about 10 years and I can understand your \ninitial response.\n\nI have to disagree with you, though.  Surely decentralized adds an overhead, \nbut in its place it adds replication, redundancy and very cheap expansion of \ncapacity.\n\nRemember when we went from single-core CPUs to multi-core (and \nhyperthreading)? Developers were saying it was useless because all apps were \nstill single-threaded.  And now, 15 years later, there are fantastic \nframeworks to make this easy.\n\nSame will happen with distributed. Any assumption you wrote above is not \ninherent in the technology.\n\n-- \nThomas Zander"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T17:42:53",
                "message_text_only": "On Thursday 30. July 2015 18.07.40 Thomas Zander via bitcoin-dev wrote:\n> Remember when we went from single-core CPUs to multi-core (and \n> hyperthreading)? Developers were saying it was useless because all apps\n> were  still single-threaded.  And now, 15 years later, there are fantastic\n> frameworks to make this easy.\n> \n> Same will happen with distributed. Any assumption you wrote above is not \n> inherent in the technology.\n\nMy brain went a bit to fast (dinner was being served, she made me close the \nlaptop...) and wrote distributed above while the topic is decentralized.\nIts not entirely wrong, even; Libraries or approaches that do distributed will \nbe useful for decentralized systems.  ;)\n\n-- \nThomas Zander"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-30T18:02:43",
                "message_text_only": "They aren't really so closely related as you are implying, since bitcoin is\na trustlessly decentralized system. At present every participant needs to\nbe able to validate the entire chain in order to be certain that their copy\nof the ledger state is correct, and miners need to be able to incrementally\nvalidate blocks in particularly short timeframes or else.\n\nIt is possible for a decentralized system like bitcoin to scale via\ndistribution in a way that introduces minimal trust, for example by\nprobabilistic validation and distribution of fraud proofs. However changes\nto bitcoin consensus rules (mostly soft-forks) are required in order to\nmake this possible.\n\nI don't want to discourage thinking about scaling bitcoin in such ways, as\nit is a viable medium term proposal. However right now with the bitcoin\nthat exists today parallel distribution and decentralization are at odds\nwith each other.\n\nOn Thu, Jul 30, 2015 at 10:42 AM, Thomas Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday 30. July 2015 18.07.40 Thomas Zander via bitcoin-dev wrote:\n> > Remember when we went from single-core CPUs to multi-core (and\n> > hyperthreading)? Developers were saying it was useless because all apps\n> > were  still single-threaded.  And now, 15 years later, there are\n> fantastic\n> > frameworks to make this easy.\n> >\n> > Same will happen with distributed. Any assumption you wrote above is not\n> > inherent in the technology.\n>\n> My brain went a bit to fast (dinner was being served, she made me close the\n> laptop...) and wrote distributed above while the topic is decentralized.\n> Its not entirely wrong, even; Libraries or approaches that do distributed\n> will\n> be useful for decentralized systems.  ;)\n>\n> --\n> Thomas Zander\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/c46d59a4/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-31T08:06:37",
                "message_text_only": "On Thursday 30. July 2015 11.02.43 Mark Friedenbach wrote:\n> It is possible for a decentralized system like bitcoin to scale via\n> distribution in a way that introduces minimal trust, for example by\n> probabilistic validation and distribution of fraud proofs. However changes\n> to bitcoin consensus rules (mostly soft-forks) are required in order to\n> make this possible.\n\nSounds overly complicated...\n\nWhat about a much simpler solution where the miner has a CPU in a well \nconnected data center. Say, Amsterdam.\nHe runs bitcoind on there and he, in China or such, connects to it over RPC \n(and ssl) to get a \"block 000f00\" accepted signal. Which would be 100 bytes or \nso.\n\nThe miner continues to use his current setup, but with actual validation of \nthe blocks to completely eliminate the risk of mining on orphaned blocks and \nat the same time remove most of the cost of larger-than-average bandwidth in \nhis country.\n\nA slightly more complicated solution is needed to allow the miner to only send \nthe headers to the bitcoind instance. So he only sends a couple of kb and his \ndatacenter machine does the actual propagation.\n\nIf the risk of duplication becomes an issue, setup multiple propagating nodes \non different sides of the world.\n\nBottom line for me is that most of the innovation for making stuff better for \nminers should be done in miners-specific software. Not in end-user software \nlike bitcoin-core.\n\n-- \nThomas Zander"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T15:41:30",
                "message_text_only": "On Thu, Jul 30, 2015 at 4:52 PM, Thomas Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thursday 30. July 2015 11.38.00 Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> It is important ro note that even if lightning was never developed, the\n>> block size remains at 1 MB forever and fees rise to 10 usd per transaction,\n>> such \"high fees\" are still extremely competitive with non-decentralized\n>> payment systems that have proportional fees.\n>\n>\n> What makes you think that when there is such a low availability of transaction\n> space that paying to be included costs you $10, that Bitcoin is not going to\n> be outcompeted and replaced or otherwise regarded as worthless?\n\nI'm just saying that rational economic actors will prefer to pay 10\nusd over 11 usd in fees.\nMy example was: 10 usd flat fee vs 1% fee (both numbers pulled out of a hat).\nWell, 10 usd fees is cheaper than 1% fees for any transacted amount\ngreater than 1000 usd.\nTake into account that this is just an extreme example to make my\npoint: hopefully fees will never rise to a value as high as 10 usd."
            },
            {
                "author": "odinn",
                "date": "2015-07-30T09:44:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI will jump in just because I feel like it because the questions are\nfun and so on.  (Of course I am not Gregory)\n\nOn 07/29/2015 02:28 PM, Raystonn . via bitcoin-dev wrote:\n> Gregory, can you please speak to the following points.  I would\n> like a better understanding of your positions.\n> \n\nNote that I am not Gregory, so with that caveat...\n\n> 1) Do you believe that Bitcoin's future is as a high-value\n> settlement network?\n\nNo, it will have multiple and diverse purposes into which it can be\nused for and can evolve, it would not be sufficient to state that it\nhas \"a future\" merely as a high-value settlement network.\n\n> \n> 2) Do you believe we need an artificial limit to transaction rate, \n> perhaps implemented as a maximum block size limit?  If so, why?\n\nIf you have a proposal on this, please submit it in the formal way as\na BIP draft.   Enough time has been burnt on the subject, imho.\n\n> \n> 3) Transaction fees will fluctuate with global economic conditions\n> and technology.  Those free-market fluctuations should equally\n> affect any blockchain.  However, if transaction fees on the Bitcoin\n> network are pushed artificially high, such as with an artificial\n> limit to transaction rate only applicable to Bitcoin, this will\n> create a condition where some other blockchains will have lower\n> fees.  How do you plan to address the bleeding of value from\n> Bitcoin to alternative lower-fee blockchains created by the\n> artificially-high bitcoin transaction fees when users begin looking\n> for the cheapest way to send value?  Modern economic study has\n> shown that liquidity moves to the location of least friction.\n\nIt is the market.  What will happen will happen.  If bitcoin\ndevelopment pushes fees upward as an overall trend and the overall\ncost to transact continues to increase, billions of people around the\nworld will as a result be forced out from most use cases of bitcoin\nand the \"bleeding out\" will occur naturally to alts (to the extent\nthat persons already possessed bitcoin first and need to transact).\nAs stated above, liquidity moves to location of least friction.\nBitcoin bagholders can whine all they want, but value will distribute\ninto the alts gradually.\n\n> \n> 4) If you believe it's not a problem to allow alternative\n> blockchains to leech some of Bitcoin's value,\n\n\"allow\" is not a relevant term here, as it is not up to anyone what\npeople are going to do with their crypto of any kind.  Unless, of\ncourse, you are fool enough to be using Coinbase and Bitpay or\nsomething like that.  They own \"your\" coin, and they will decide, or\nallow, what you do with it or whether you can even access it.\nAs has been stated before here, I hope you are not using such services.\nOn the other hand, the following are very interesting:\nhttps://gear.mycelium.com/ - a Payment processor\nhttp://openbazaar.org a decentralized Market\nhttps://bitsquare.io/ a decentralized Exchange\nhttps://electrum.org/ a light wallet that you manage\n\n then:\n> a) How much value is it acceptable to lose?\n\nIrrelevant.  Better question is, How much should one give? The more\nyou can give, the better off you will be.\n\n> b) How do you think this will affect Bitcoin miners, whose large \n> investments in hardware do not transfer to other blockchains?\n\nToo much attention is paid to the miners.  Miners should not be\nbutthurt when people say that we should not put them up on a pedestal.\n Think ahead, to when there will no longer be bitcoin mining such as\nthere is today.\n\n> c) How do you think this will affect the investors and holders of \n> bitcoin in general?\n\nPeople will continue to buy and sell.  Some major changes are in\nstore, however.  If you would like, see my reflections on what the\nmonths ahead will hold, here:\nhttp://www.twitlonger.com/show/n_1sn3lqs\n\n> \n> \n> -----Original Message----- From: Gregory Maxwell via bitcoin-dev \n> Sent: Wednesday, July 29, 2015 1:09 PM To: Owen Cc: Bitcoin Dev \n> Subject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam\n> measure isn'ttemporary\n> \n> On Wed, Jul 29, 2015 at 7:56 PM, Owen via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> On July 29, 2015 7:15:49 AM EDT, Mike Hearn via bitcoin-dev:\n>>> Consider this:  the highest Bitcoin tx fees can possibly go is\n>>> perhaps a little higher than what our competition charges. Too\n>>> much higher than that, and people will just say, you know what\n>>> .... I'll make a bank transfer. It's cheaper and not much\n>>> slower, sometimes no slower at all.\n>> \n>> I respectfully disagree with this analysis. The implication is\n>> that bitcoin is merely one of a number of payment technologies.\n>> It's much more than that. It's sound money, censorship\n>> resistance, personal control over money, programmable money, and\n>> more. Without these attributes it's merely a really inefficient\n>> way to do payments.\n>> \n>> Given these advantages, there is no reason to believe the\n>> marginal cost of a transaction can't far surpass that of a PayPal\n>> or bank transfer. I personally would pay several multiples of the\n>> competitors' fees to continue using bitcoin.\n>> \n>> Sure, some marginal use cases will drop off with greater fees,\n>> but that's normal and expected. These will be use cases where the\n>> user doesn't care about bitcoin's advantages. We must be willing\n>> to let these use cases go anyway, because we unfortunately don't\n>> have room on chain for everything anyone might want to do.\n>> \n>> Therefore, bitcoin tx fees can go much higher than the\n>> competition.\n>> \n>> Remember how Satoshi referenced the banking crisis in his early\n>> work? The 2008 banking crisis was about a lot of things, but high\n>> credit card and paypal fees wasnt one of them. There's more going\n>> on here than just payments. Any speculative economic analysis\n>> would do better to include this fact.\n> \n> Precisely.  And as \"just a payment system\" Bitcoin is not an \n> especially great one: The design requirements for\n> decenteralization impose considerable costs.  To the extent that\n> the technology in Bitcoin is useful at all for building \"just\n> another payment system\" this technology in in the process of being\n> agressively copied by parties with deep fiat relationships\n> (including in partnership with centeral banks).  If the focus for\n> Bitcoin's competative advantage becomes exclusively \"better\"\n> payments then it will almost certinatly fail in the market-place\n> against competing systems which avoid the Bitcoin currency adoption\n> related obsticles (but also gain none of Bitcoin's important\n> social/political promise).\n> \n> Also, critically, if Bitcoin's security properties are manintained\n> and enhanced then Bitcoin can be used to build secure systems which\n> _also_ accomidate those applications and we can have both. But if\n> Bitcoin's security properties are not strong then then advanced\n> tools cannot be built for it.  E.g. atomic swaps make trustless\n> trades with external systems possible; but they are especially\n> sensitive to long reorginizations by miners... so they can only be\n> securely used where those reorgs are infeasable.  So while I agree\n> that we must be willing to tolerate not catching every conceivable\n> use case; most of the time all that means is addressing them via a\n> less direct but more focused solution rather than ignoring them\n> completely. _______________________________________________ \n> bitcoin-dev mailing list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVufH2AAoJEGxwq/inSG8C1mgH/3poEpk8pDDgZ7YQlGmAZjiO\nMDBempLkfm1BFFoNAzjMn9mwtmL9wDfpn/sd/YbuIriJjQR2WSl6zy/sLx/uIYxd\nqRuSRwOzN6wN7NfAuG7Lt3NtawOjAgl87n5YhRVB/d/MAK5HAvx3L9ME1Px//qsF\nCzg5r0XG4ZiQnT8J30caMtooSVU9toradAmMleVbMVOi9KViyuW2IvXz5mM1jYHh\nh+CB+CVHlhuKubXWpnnxYtOLLRQM5QSyfQiMPimVG0QPSOC5UkXJNo5gK6YMtBkT\n0FevJyoMF+0LVTTPVGms+jolxu2PX3RW59nhNKEAuxOWfeHdMFFGtPP04XbpqSo=\n=R3aj\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Why Satoshi's temporary anti-spam measure isn'ttemporary",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "odinn",
                "Adam Back",
                "Mark Friedenbach",
                "Andrew LeCody",
                "Thomas Zander",
                "Jorge Tim\u00f3n",
                "Venzen Khaosan",
                "Gavin Andresen",
                "Raystonn ."
            ],
            "messages_count": 21,
            "total_messages_chars_count": 100460
        }
    },
    {
        "title": "[bitcoin-dev] Why Satoshi's temporary anti-spam measureisn't temporary",
        "thread_messages": [
            {
                "author": "Raystonn .",
                "date": "2015-07-29T20:23:51",
                "message_text_only": "All of the properties you describe are also properties of many of the \nalternative blockchains that currently exist.  In this space, Bitcoin gives \nup these advantages.  Much like anywhere else where liquidity moves within a \nsystem, value will move to the network of least friction.  The reality right \nnow is it's very easy to move value from Bitcoin to another blockchain with \nless friction.  Because of this, there will never be a high value settlement \nnetwork created by an artificially imposed limit on transaction rate.  The \nvalue will simply bleed out of Bitcoin to alternative blockchains offering \nlower fees if this is attempted.  This is basic economics.\n\n-----Original Message----- \nFrom: Owen via bitcoin-dev\nSent: Wednesday, July 29, 2015 12:56 PM\nTo: Bitcoin Dev\nSubject: Re: [bitcoin-dev] Why Satoshi's temporary anti-spam measureisn't \ntemporary\n\n\n\nOn July 29, 2015 7:15:49 AM EDT, Mike Hearn via bitcoin-dev:\n>Consider this:  the highest Bitcoin tx fees can possibly go is perhaps\n>a\n>little higher than what our competition charges. Too much higher than\n>that,\n>and people will just say, you know what .... I'll make a bank transfer.\n>It's cheaper and not much slower, sometimes no slower at all.\n\nI respectfully disagree with this analysis. The implication is that bitcoin \nis merely one of a number of payment technologies. It's much more than that. \nIt's sound money, censorship resistance, personal control over money, \nprogrammable money, and more. Without these attributes it's merely a really \ninefficient way to do payments.\n\nGiven these advantages, there is no reason to believe the marginal cost of a \ntransaction can't far surpass that of a PayPal or bank transfer. I \npersonally would pay several multiples of the competitors' fees to continue \nusing bitcoin.\n\nSure, some marginal use cases will drop off with greater fees, but that's \nnormal and expected. These will be use cases where the user doesn't care \nabout bitcoin's advantages. We must be willing to let these use cases go \nanyway, because we unfortunately don't have room on chain for everything \nanyone might want to do.\n\nTherefore, bitcoin tx fees can go much higher than the competition.\n\nRemember how Satoshi referenced the banking crisis in his early work? The \n2008 banking crisis was about a lot of things, but high credit card and \npaypal fees wasnt one of them. There's more going on here than just \npayments. Any speculative economic analysis would do better to include this \nfact.\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Why Satoshi's temporary anti-spam measureisn't temporary",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Raystonn ."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2666
        }
    },
    {
        "title": "[bitcoin-dev] Personal opinion on the fee market from a worried local trader",
        "thread_messages": [
            {
                "author": "Vali Zero",
                "date": "2015-07-29T13:27:06",
                "message_text_only": "Hello,\n\nI have been reading an argument saying that paying higher fees would scare Bitcoin users and they would stop using it, preferring bank transfers or other payment methods. This does not make sense for me. If some users leave, then demand for bitcoin transactions goes down and so do the fees. The others remain.\n\nFee market means that an equilibrium is found between the demand for bitcoin transactions and the available supply (given by the block size). The fee is the price that finds this equilibrium.\n\nIf a fee market starts to exist, the first ones to leave are the spammers, probably followed by the gamblers and perhaps people transacting very low amounts. The people that actually need Bitcoin would remain.\n\nPlease allow this fee market to form...\n\nIn the absence of a functioning fee market, I will refuse to run Bitcoin code that increases the block size and will do my best to tell everyone I know not to upgrade towards running such code. If Bitcoin succombs to the free stuff army, I will sell all the coins and leave. Nothing is for free.\n\nI apologize for any exagerations, but I just felt strongly towards expressing my opinion here. I'm only a local Bitcoin trader, computer engineer, with a reasonable understanding of free markets. And I'm running only one full node.\n\nKind regards,\nValentin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/6e1cf551/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Personal opinion on the fee market from a worried local trader",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Vali Zero"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1501
        }
    },
    {
        "title": "[bitcoin-dev] R\u0103spuns:  Personal opinion on the fee market from a worried local trader",
        "thread_messages": [
            {
                "author": "Vali Zero",
                "date": "2015-07-29T14:09:22",
                "message_text_only": "I am disappointed that you did not understand my point of view. Let me rephrase it for you,\nPeople tipping, buying 0.99$ products and gamblers that need Bitcoin transactions *more* than the rest of the people will afford the fees that establish the equilibrium between demand and supply of Bitcoin transactions. The people are free to use they money for whatever they like, but you should understand that Bitcoin transactions are not free.\nI was merely attempting to point out that spammers and gamblers would be the first ones that would go away. They would be free to spam or gamble, but they would have to pay for it.\nWhen a category of users would get priced out because of the fee market, they would be free to use any altcoin they want.\n\nPlease understand that not everyone will leave. The more important players will remain, those that need it the most. The other players are free to use whatever altcoin they wish.\n\n     \u00cen Miercuri, 29 Iulie 2015 16:47:57, Angel Leon <gubatron at gmail.com> a scris:\n   \n\n \"the gamblers and perhaps people transacting very low amounts.\u00a0The people that actually need Bitcoin would remain.\"\n\nso people tipping, buying $0.99 products, and gamblers actually don't need Bitcoin.\nWho are you to say what people need to use money for?This statement goes against the freedom of decentralization and financial freedom Bitcoin should be able to provide.\nIt's an open network and it will be used as most users see fit, and that requires a blocksize increase wether you like it or not, it's simple physics, other time wait times will become unbearable for those not willing to pay the high fees, if people leave, then it only mean bitcoins isn't useful, and if bitcoin isn't useful, it's worthless.\n\n\n\nhttp://twitter.com/gubatron\n\nOn Wed, Jul 29, 2015 at 9:27 AM, Vali Zero via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\nHello,\n\nI have been reading an argument saying that paying higher fees would scare Bitcoin users and they would stop using it, preferring bank transfers or other payment methods. This does not make sense for me. If some users leave, then demand for bitcoin transactions goes down and so do the fees. The others remain.\n\nFee market means that an equilibrium is found between the demand for bitcoin transactions and the available supply (given by the block size). The fee is the price that finds this equilibrium.\n\nIf a fee market starts to exist, the first ones to leave are the spammers, probably followed by the gamblers and perhaps people transacting very low amounts. The people that actually need Bitcoin would remain.\n\nPlease allow this fee market to form...\n\nIn the absence of a functioning fee market, I will refuse to run Bitcoin code that increases the block size and will do my best to tell everyone I know not to upgrade towards running such code. If Bitcoin succombs to the free stuff army, I will sell all the coins and leave. Nothing is for free.\n\nI apologize for any exagerations, but I just felt strongly towards expressing my opinion here. I'm only a local Bitcoin trader, computer engineer, with a reasonable understanding of free markets. And I'm running only one full node.\n\nKind regards,\nValentin\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n\n\n  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/680200ad/attachment-0001.html>"
            },
            {
                "author": "Raystonn .",
                "date": "2015-07-29T17:47:50",
                "message_text_only": "> When a category of users would get priced out because of the fee market, they would be free to use any altcoin they want.\n\nI believe that pretty well sums up where we\u2019re headed if transaction rate is artificially limited, whether that be by maximum block size limit or something else.  A fee market will necessarily include more than just Bitcoin.  The reality is it\u2019s very easy to trade value across different blockchains, and thus a fee market will bleed value from Bitcoin and give it to alternative blockchains.  If Bitcoin\u2019s blocks are at maximum capacity, people will exchange for something that allows them to transact with a lesser fee, then make the desired payment.  This adds value to the alternative blockchain and removes it from Bitcoin.\n\nAnyone thinking the fee market can be restrained to Bitcoin alone is mistaken.\n\n\n\nFrom: Vali Zero via bitcoin-dev \nSent: Wednesday, July 29, 2015 7:09 AM\nTo: bitcoin-dev at lists.linuxfoundation.org \nSubject: [bitcoin-dev] R\u0103spuns: Personal opinion on the fee market from a worried local trader\n\nI am disappointed that you did not understand my point of view. Let me rephrase it for you,\n\nPeople tipping, buying 0.99$ products and gamblers that need Bitcoin transactions *more* than the rest of the people will afford the fees that establish the equilibrium between demand and supply of Bitcoin transactions. The people are free to use they money for whatever they like, but you should understand that Bitcoin transactions are not free.\n\nI was merely attempting to point out that spammers and gamblers would be the first ones that would go away. They would be free to spam or gamble, but they would have to pay for it.\n\nWhen a category of users would get priced out because of the fee market, they would be free to use any altcoin they want.\n\n\nPlease understand that not everyone will leave. The more important players will remain, those that need it the most. The other players are free to use whatever altcoin they wish.\n\n\n\u00cen Miercuri, 29 Iulie 2015 16:47:57, Angel Leon <gubatron at gmail.com> a scris:\n\n\n\n\n\"the gamblers and perhaps people transacting very low amounts. The people that actually need Bitcoin would remain.\"\n\nso people tipping, buying $0.99 products, and gamblers actually don't need Bitcoin.\nWho are you to say what people need to use money for? \nThis statement goes against the freedom of decentralization and financial freedom Bitcoin should be able to provide.\n\nIt's an open network and it will be used as most users see fit, and that requires a blocksize increase wether you like it or not, it's simple physics, other time wait times will become unbearable for those not willing to pay the high fees, if people leave, then it only mean bitcoins isn't useful, and if bitcoin isn't useful, it's worthless.\n\n\n\n\nhttp://twitter.com/gubatron\n\n\nOn Wed, Jul 29, 2015 at 9:27 AM, Vali Zero via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n  Hello,\n\n  I have been reading an argument saying that paying higher fees would scare Bitcoin users and they would stop using it, preferring bank transfers or other payment methods. This does not make sense for me. If some users leave, then demand for bitcoin transactions goes down and so do the fees. The others remain.\n\n  Fee market means that an equilibrium is found between the demand for bitcoin transactions and the available supply (given by the block size). The fee is the price that finds this equilibrium.\n\n  If a fee market starts to exist, the first ones to leave are the spammers, probably followed by the gamblers and perhaps people transacting very low amounts. The people that actually need Bitcoin would remain.\n\n  Please allow this fee market to form...\n\n  In the absence of a functioning fee market, I will refuse to run Bitcoin code that increases the block size and will do my best to tell everyone I know not to upgrade towards running such code. If Bitcoin succombs to the free stuff army, I will sell all the coins and leave. Nothing is for free.\n\n  I apologize for any exagerations, but I just felt strongly towards expressing my opinion here. I'm only a local Bitcoin trader, computer engineer, with a reasonable understanding of free markets. And I'm running only one full node.\n\n  Kind regards,\n  Valentin\n\n\n\n  _______________________________________________\n  bitcoin-dev mailing list\n  bitcoin-dev at lists.linuxfoundation.org\n  https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n\n\n\n\n\n--------------------------------------------------------------------------------\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/b16f0d17/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "R\u0103spuns:  Personal opinion on the fee market from a worried local trader",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Raystonn .",
                "Vali Zero"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8462
        }
    },
    {
        "title": "[bitcoin-dev] R\u0103spuns: Personal opinion on the fee market from a worried local trader",
        "thread_messages": [
            {
                "author": "s7r",
                "date": "2015-07-29T22:54:26",
                "message_text_only": "We could care less about you selling your bitcoins or moving to\nsomething else.\n\nWhat we care more is keeping bitcoin a successful project which offers\nclear benefits to the world. I agree a fee market is good and needed,\nand transactions shouldn't be free ever, but users should also be able\nto transact fast and relatively cheap, as opposite to the competition,\nor at least with the same costs, so people won't move to something else.\n\nThe more people use bitcoin, the more demand we have on the market for\nBTC, the higher BTC/FIAT rate will be, more people will become\ninterested in mining and so on. Bitcoin is not a rich-only-private-club,\nit's an open, global, decentralized payment network. The less people use\nit... I guess you figured it out.\n\nSo we could care less that you will go away in case the fee market won't\nbecome absurd or too expensive to use for most users. Having some\noffchain solution for small transactions would be a good idea, but this\ndoesn't mean we should make small transactions impossible due to absurd\nfees.\n\nOn 7/29/2015 8:47 PM, Raystonn . via bitcoin-dev wrote:\n>> When a category of users would get priced out because of the fee\n> market, they would be free to use any altcoin they want.\n>  \n> I believe that pretty well sums up where we\u2019re headed if transaction\n> rate is artificially limited, whether that be by maximum block size\n> limit or something else.  A fee market will necessarily include more\n> than just Bitcoin.  The reality is it\u2019s very easy to trade value across\n> different blockchains, and thus a fee market will bleed value from\n> Bitcoin and give it to alternative blockchains.  If Bitcoin\u2019s blocks are\n> at maximum capacity, people will exchange for something that allows them\n> to transact with a lesser fee, then make the desired payment.  This adds\n> value to the alternative blockchain and removes it from Bitcoin.\n>  \n> Anyone thinking the fee market can be restrained to Bitcoin alone is\n> mistaken.\n> \n>  \n> *From:* Vali Zero via bitcoin-dev\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> *Sent:* Wednesday, July 29, 2015 7:09 AM\n> *To:* bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> *Subject:* [bitcoin-dev] R\u0103spuns: Personal opinion on the fee market\n> from a worried local trader\n>  \n> I am disappointed that you did not understand my point of view. Let me\n> rephrase it for you,\n>  \n> People tipping, buying 0.99$ products and gamblers that need Bitcoin\n> transactions *more* than the rest of the people will afford the fees\n> that establish the equilibrium between demand and supply of Bitcoin\n> transactions. The people are free to use they money for whatever they\n> like, but you should understand that Bitcoin transactions are not free.\n>  \n> I was merely attempting to point out that spammers and gamblers would be\n> the first ones that would go away. They would be free to spam or gamble,\n> but they would have to pay for it.\n>  \n> When a category of users would get priced out because of the fee market,\n> they would be free to use any altcoin they want.\n>  \n> Please understand that not everyone will leave. The more important\n> players will remain, those that need it the most. The other players are\n> free to use whatever altcoin they wish.\n>  \n>  \n> \u00cen Miercuri, 29 Iulie 2015 16:47:57, Angel Leon <gubatron at gmail.com> a\n> scris:\n> \n> \n> \"the gamblers and perhaps people transacting very low amounts. The\n> people that actually need Bitcoin would remain.\"\n> \n> so people tipping, buying $0.99 products, and gamblers actually don't\n> need Bitcoin.\n> Who are you to say what people need to use money for?\n> This statement goes against the freedom of decentralization and\n> financial freedom Bitcoin should be able to provide.\n> \n> It's an open network and it will be used as most users see fit, and that\n> requires a blocksize increase wether you like it or not, it's simple\n> physics, other time wait times will become unbearable for those not\n> willing to pay the high fees, if people leave, then it only mean\n> bitcoins isn't useful, and if bitcoin isn't useful, it's worthless.\n> \n> \n>  \n> http://twitter.com/gubatron\n>  \n> On Wed, Jul 29, 2015 at 9:27 AM, Vali Zero via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     Hello,\n> \n>     I have been reading an argument saying that paying higher fees would\n>     scare Bitcoin users and they would stop using it, preferring bank\n>     transfers or other payment methods. This does not make sense for me.\n>     If some users leave, then demand for bitcoin transactions goes down\n>     and so do the fees. The others remain.\n> \n>     Fee market means that an equilibrium is found between the demand for\n>     bitcoin transactions and the available supply (given by the block\n>     size). The fee is the price that finds this equilibrium.\n> \n>     If a fee market starts to exist, the first ones to leave are the\n>     spammers, probably followed by the gamblers and perhaps people\n>     transacting very low amounts. The people that actually need Bitcoin\n>     would remain.\n> \n>     Please allow this fee market to form...\n> \n>     In the absence of a functioning fee market, I will refuse to run\n>     Bitcoin code that increases the block size and will do my best to\n>     tell everyone I know not to upgrade towards running such code. If\n>     Bitcoin succombs to the free stuff army, I will sell all the coins\n>     and leave. Nothing is for free.\n> \n>     I apologize for any exagerations, but I just felt strongly towards\n>     expressing my opinion here. I'm only a local Bitcoin trader,\n>     computer engineer, with a reasonable understanding of free markets.\n>     And I'm running only one full node.\n> \n>     Kind regards,\n>     Valentin\n> \n> \n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n>"
            },
            {
                "author": "Ryan Butler",
                "date": "2015-07-30T03:41:44",
                "message_text_only": "Does an unlimited blocksize imply the lack of a fee market?  Isn't every\nminer able to set their minimum accepted fee or transaction acceptance\nalgorithm?\nOn Jul 29, 2015 5:54 PM, \"s7r via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We could care less about you selling your bitcoins or moving to\n> something else.\n>\n> What we care more is keeping bitcoin a successful project which offers\n> clear benefits to the world. I agree a fee market is good and needed,\n> and transactions shouldn't be free ever, but users should also be able\n> to transact fast and relatively cheap, as opposite to the competition,\n> or at least with the same costs, so people won't move to something else.\n>\n> The more people use bitcoin, the more demand we have on the market for\n> BTC, the higher BTC/FIAT rate will be, more people will become\n> interested in mining and so on. Bitcoin is not a rich-only-private-club,\n> it's an open, global, decentralized payment network. The less people use\n> it... I guess you figured it out.\n>\n> So we could care less that you will go away in case the fee market won't\n> become absurd or too expensive to use for most users. Having some\n> offchain solution for small transactions would be a good idea, but this\n> doesn't mean we should make small transactions impossible due to absurd\n> fees.\n>\n> On 7/29/2015 8:47 PM, Raystonn . via bitcoin-dev wrote:\n> >> When a category of users would get priced out because of the fee\n> > market, they would be free to use any altcoin they want.\n> >\n> > I believe that pretty well sums up where we\u2019re headed if transaction\n> > rate is artificially limited, whether that be by maximum block size\n> > limit or something else.  A fee market will necessarily include more\n> > than just Bitcoin.  The reality is it\u2019s very easy to trade value across\n> > different blockchains, and thus a fee market will bleed value from\n> > Bitcoin and give it to alternative blockchains.  If Bitcoin\u2019s blocks are\n> > at maximum capacity, people will exchange for something that allows them\n> > to transact with a lesser fee, then make the desired payment.  This adds\n> > value to the alternative blockchain and removes it from Bitcoin.\n> >\n> > Anyone thinking the fee market can be restrained to Bitcoin alone is\n> > mistaken.\n> >\n> >\n> > *From:* Vali Zero via bitcoin-dev\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > *Sent:* Wednesday, July 29, 2015 7:09 AM\n> > *To:* bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > *Subject:* [bitcoin-dev] R\u0103spuns: Personal opinion on the fee market\n> > from a worried local trader\n> >\n> > I am disappointed that you did not understand my point of view. Let me\n> > rephrase it for you,\n> >\n> > People tipping, buying 0.99$ products and gamblers that need Bitcoin\n> > transactions *more* than the rest of the people will afford the fees\n> > that establish the equilibrium between demand and supply of Bitcoin\n> > transactions. The people are free to use they money for whatever they\n> > like, but you should understand that Bitcoin transactions are not free.\n> >\n> > I was merely attempting to point out that spammers and gamblers would be\n> > the first ones that would go away. They would be free to spam or gamble,\n> > but they would have to pay for it.\n> >\n> > When a category of users would get priced out because of the fee market,\n> > they would be free to use any altcoin they want.\n> >\n> > Please understand that not everyone will leave. The more important\n> > players will remain, those that need it the most. The other players are\n> > free to use whatever altcoin they wish.\n> >\n> >\n> > \u00cen Miercuri, 29 Iulie 2015 16:47:57, Angel Leon <gubatron at gmail.com> a\n> > scris:\n> >\n> >\n> > \"the gamblers and perhaps people transacting very low amounts. The\n> > people that actually need Bitcoin would remain.\"\n> >\n> > so people tipping, buying $0.99 products, and gamblers actually don't\n> > need Bitcoin.\n> > Who are you to say what people need to use money for?\n> > This statement goes against the freedom of decentralization and\n> > financial freedom Bitcoin should be able to provide.\n> >\n> > It's an open network and it will be used as most users see fit, and that\n> > requires a blocksize increase wether you like it or not, it's simple\n> > physics, other time wait times will become unbearable for those not\n> > willing to pay the high fees, if people leave, then it only mean\n> > bitcoins isn't useful, and if bitcoin isn't useful, it's worthless.\n> >\n> >\n> >\n> > http://twitter.com/gubatron\n> >\n> > On Wed, Jul 29, 2015 at 9:27 AM, Vali Zero via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     Hello,\n> >\n> >     I have been reading an argument saying that paying higher fees would\n> >     scare Bitcoin users and they would stop using it, preferring bank\n> >     transfers or other payment methods. This does not make sense for me.\n> >     If some users leave, then demand for bitcoin transactions goes down\n> >     and so do the fees. The others remain.\n> >\n> >     Fee market means that an equilibrium is found between the demand for\n> >     bitcoin transactions and the available supply (given by the block\n> >     size). The fee is the price that finds this equilibrium.\n> >\n> >     If a fee market starts to exist, the first ones to leave are the\n> >     spammers, probably followed by the gamblers and perhaps people\n> >     transacting very low amounts. The people that actually need Bitcoin\n> >     would remain.\n> >\n> >     Please allow this fee market to form...\n> >\n> >     In the absence of a functioning fee market, I will refuse to run\n> >     Bitcoin code that increases the block size and will do my best to\n> >     tell everyone I know not to upgrade towards running such code. If\n> >     Bitcoin succombs to the free stuff army, I will sell all the coins\n> >     and leave. Nothing is for free.\n> >\n> >     I apologize for any exagerations, but I just felt strongly towards\n> >     expressing my opinion here. I'm only a local Bitcoin trader,\n> >     computer engineer, with a reasonable understanding of free markets.\n> >     And I'm running only one full node.\n> >\n> >     Kind regards,\n> >     Valentin\n> >\n> >\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/5460df74/attachment-0001.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-30T04:00:42",
                "message_text_only": "On 29 July 2015 at 20:41, Ryan Butler via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Does an unlimited blocksize imply the lack of a fee market?  Isn't every\n> miner able to set their minimum accepted fee or transaction acceptance\n> algorithm?\n\nThe assumption is that wont work because any miner can break ranks and\ndo so profitably, so to expect otherwise is to expect oligopoly\nbehaviour which is the sort of antithesis of a decentralised mining\nsystem.  It's in fact a similar argument as to why decentralisation of\nmining provides policy neutrality: some miner somewhere with some\nhashrate will process your transaction even if some other miners are\nby policy deciding not to mine it.  It is also similar reason why free\ntransactions are processed today - policies vary and this is good for\nensuring many types of transaction get processed.\n\nAdam"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-30T04:05:35",
                "message_text_only": "btw the fact that mining is (or can be) anonymous also makes oligopoly\nor cartel behaviour likely unstable.  Miners can break ranks and\nprocess transactions others wish to block, or with lower fees than a\ncartel would like to charge, without detection.\n\nAnonymous mining is a feature and helps ensure policy neutrality.\n\nThis is all overlaid by the 51% attack - if a coherent cartel arose\nthat could maintain 51% and had enough mutual self-interest to make\nthat stable, they could attack miners bypassing their cartel policies,\nby orphaning their blocks.  This is partly why mining decentralisation\nis important.  Also that is an overt act which is very detectable and\ncould lead to technical counter-measures by the users, who are in\nultimately in control of the protocol.  So there is some game theory\nsuggesting it would be inadvisable for miners to be overt in cartel\nattacks.  Non overt attacks cant prevent anonymous under cutting of\ncartel desired fee minimums.\n\nAdam\n\nOn 29 July 2015 at 21:00, Adam Back <adam at cypherspace.org> wrote:\n> On 29 July 2015 at 20:41, Ryan Butler via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Does an unlimited blocksize imply the lack of a fee market?  Isn't every\n>> miner able to set their minimum accepted fee or transaction acceptance\n>> algorithm?\n>\n> The assumption is that wont work because any miner can break ranks and\n> do so profitably, so to expect otherwise is to expect oligopoly\n> behaviour which is the sort of antithesis of a decentralised mining\n> system.  It's in fact a similar argument as to why decentralisation of\n> mining provides policy neutrality: some miner somewhere with some\n> hashrate will process your transaction even if some other miners are\n> by policy deciding not to mine it.  It is also similar reason why free\n> transactions are processed today - policies vary and this is good for\n> ensuring many types of transaction get processed.\n>\n> Adam"
            },
            {
                "author": "Ryan Butler",
                "date": "2015-07-30T04:48:33",
                "message_text_only": "I shouldn't have said unlimited, i should have said a greater blocksize\nlimit such as 8mb.\n\nAnyways, why is that the assumption?  If a miner can do so, and do so\nprofitably, isn't that just competition?  Isn't that what we want?  If a\nminer can mine low transaction fees at a profit then don't they deserve to\nhave their spot?  Surely if they do so unprofitably they quickly find\nthemselves out of business?  Besides, if a miner mines low fee transactions\nby breaking rank, how does this affect another miner EXCEPT for the\nadditional blocksize load.  I would maintain this is just competition\namongst miners gentlemen.  And it's a good thing.\n\nRight now things are distorted because most income comes from the coinbase,\nbut as transaction fees start to constitute the majority of income this\nidea seems to have more importance.\nOn Jul 29, 2015 11:00 PM, \"Adam Back\" <adam at cypherspace.org> wrote:\n\n> On 29 July 2015 at 20:41, Ryan Butler via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Does an unlimited blocksize imply the lack of a fee market?  Isn't every\n> > miner able to set their minimum accepted fee or transaction acceptance\n> > algorithm?\n>\n> The assumption is that wont work because any miner can break ranks and\n> do so profitably, so to expect otherwise is to expect oligopoly\n> behaviour which is the sort of antithesis of a decentralised mining\n> system.  It's in fact a similar argument as to why decentralisation of\n> mining provides policy neutrality: some miner somewhere with some\n> hashrate will process your transaction even if some other miners are\n> by policy deciding not to mine it.  It is also similar reason why free\n> transactions are processed today - policies vary and this is good for\n> ensuring many types of transaction get processed.\n>\n> Adam\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/f665c813/attachment-0001.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-30T13:14:17",
                "message_text_only": "On 7/29/2015 9:48 PM, Ryan Butler via bitcoin-dev wrote:\n>\n> I shouldn't have said unlimited, i should have said a greater\n> blocksize limit such as 8mb. \n>\n> Anyways, why is that the assumption?  If a miner can do so, and do so\n> profitably, isn't that just competition?  Isn't that what we want?  If\n> a miner can mine low transaction fees at a profit then don't they\n> deserve to have their spot?  Surely if they do so unprofitably they\n> quickly find themselves out of business?  Besides, if a miner mines\n> low fee transactions by breaking rank, how does this affect another\n> miner EXCEPT for the additional blocksize load.  I would maintain this\n> is just competition amongst miners gentlemen.  And it's a good thing.\n>\n> Right now things are distorted because most income comes from the\n> coinbase, but as transaction fees start to constitute the majority of\n> income this idea seems to have more importance.\n>\n\nYou're completely correct Ryan.\n\nThere has been a well functioning fee market since 2011.  Average fees\nhave never been zero, despite low-fee transactions being mined, and\ndespite no block size pressure until September 2014.\n\nAnother empirical fact also needs explaining.  Why have average fees *as\nmeasured in BTC* risen during the times of highest public interest in\nbitcoin?  This happened without block size pressure, and it is not an\nexchange rate effect -- these are raw BTC fees:\n\nhttps://blockchain.info/charts/transaction-fees?timespan=all&daysAverageString=7\n\n... more evidence that conclusively refutes the conjecture that a\nproduction quota is necessary for a \"functioning fee market.\"  A\nproduction quota merely pushes up fees.  We have a functioning market,\nand so far, it shows that wider bitcoin usage is even more effective\nthan a quota at pushing up fees.\n\n\n> On Jul 29, 2015 11:00 PM, \"Adam Back\" <adam at cypherspace.org\n> <mailto:adam at cypherspace.org>> wrote:\n>\n>\n>     The assumption is that wont work because any miner can break ranks and\n>     do so profitably, so to expect otherwise is to expect oligopoly\n>     behaviour which is the sort of antithesis of a decentralised mining\n>     system.  It's in fact a similar argument as to why decentralisation of\n>     mining provides policy neutrality: some miner somewhere with some\n>     hashrate will process your transaction even if some other miners are\n>     by policy deciding not to mine it.  It is also similar reason why free\n>     transactions are processed today - policies vary and this is good for\n>     ensuring many types of transaction get processed.\n>"
            },
            {
                "author": "Dave Hudson",
                "date": "2015-07-30T14:25:43",
                "message_text_only": "> On 30 Jul 2015, at 06:14, Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Another empirical fact also needs explaining.  Why have average fees *as\n> measured in BTC* risen during the times of highest public interest in\n> bitcoin?  This happened without block size pressure, and it is not an\n> exchange rate effect -- these are raw BTC fees:\n> \n> https://blockchain.info/charts/transaction-fees?timespan=all&daysAverageString=7 <https://blockchain.info/charts/transaction-fees?timespan=all&daysAverageString=7>\n\nI've not published any new figures for about 8 months (will try to do that this weekend), but the thing that that chart doesn't show is what's actually happening to fees per transaction. Here's a chart that does: http://hashingit.com/analysis/35-the-future-of-bitcoin-transaction-fees <http://hashingit.com/analysis/35-the-future-of-bitcoin-transaction-fees>\n\nThe data is also taken from blockchain.info so it's apples-for-apples. It shows that far from a fees going up they spent 3 years dropping. I just ran a new chart and the decline in fees continued until about 8 weeks when the \"stress tests\" first occurred. Even so, they're still below the level from the end of 2013. By comparison the total transaction volume is up about 2.4x to 2.5x (don't have the exact number).\n\n> ... more evidence that conclusively refutes the conjecture that a\n> production quota is necessary for a \"functioning fee market.\"  A\n> production quota merely pushes up fees.  We have a functioning market,\n> and so far, it shows that wider bitcoin usage is even more effective\n> than a quota at pushing up fees.\n\nI think it's equally easy to argue (from the same data) that wider adoption has actually caused wallet users to become much more effective at fee selection. Miners (as expected, assuming that they hadn't formed a cartel) have continued to accept whatever fees are available, no matter how small. Only where there has been an element of scarcity have we actually seen miners do anything but take whatever is offered.\n\nClearly history is not an accurate indicator of what might happen in the future, but it seems difficult to argue that there has been any sort of fee market emerge to date (other than as a result of scarcity during the stress tests).\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/aaba0a9a/attachment-0001.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-30T14:57:27",
                "message_text_only": "Yes.  So far, the transaction count factor has completely dominated the\nper-tx fee factor.  This fact should be of great interest to miners.\n\n\nOn 7/30/2015 7:25 AM, Dave Hudson wrote:\n>\n>> On 30 Jul 2015, at 06:14, Tom Harding via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org\n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>\n>> Another empirical fact also needs explaining.  Why have average fees *as\n>> measured in BTC* risen during the times of highest public interest in\n>> bitcoin?  This happened without block size pressure, and it is not an\n>> exchange rate effect -- these are raw BTC fees:\n>>\n>> https://blockchain.info/charts/transaction-fees?timespan=all&daysAverageString=7\n>\n> I've not published any new figures for about 8 months (will try to do\n> that this weekend), but the thing that that chart doesn't show is\n> what's actually happening to fees per transaction. Here's a chart that\n> does: http://hashingit.com/analysis/35-the-future-of-bitcoin-transaction-fees\n>\n> The data is also taken from blockchain.info so it's apples-for-apples.\n> It shows that far from a fees going up they spent 3 years dropping. I\n> just ran a new chart and the decline in fees continued until about 8\n> weeks when the \"stress tests\" first occurred. Even so, they're still\n> below the level from the end of 2013. By comparison the total\n> transaction volume is up about 2.4x to 2.5x (don't have the exact number).\n>\n>> ... more evidence that conclusively refutes the conjecture that a\n>> production quota is necessary for a \"functioning fee market.\"  A\n>> production quota merely pushes up fees.  We have a functioning market,\n>> and so far, it shows that wider bitcoin usage is even more effective\n>> than a quota at pushing up fees.\n>\n> I think it's equally easy to argue (from the same data) that wider\n> adoption has actually caused wallet users to become much more\n> effective at fee selection. Miners (as expected, assuming that they\n> hadn't formed a cartel) have continued to accept whatever fees are\n> available, no matter how small. Only where there has been an element\n> of scarcity have we actually seen miners do anything but take whatever\n> is offered.\n>\n> Clearly history is not an accurate indicator of what might happen in\n> the future, but it seems difficult to argue that there has been any\n> sort of fee market emerge to date (other than as a result of scarcity\n> during the stress tests).\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T18:14:47",
                "message_text_only": "On Thu, Jul 30, 2015 at 3:14 PM, Tom Harding via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 7/29/2015 9:48 PM, Ryan Butler via bitcoin-dev wrote:\n> ... more evidence that conclusively refutes the conjecture that a\n> production quota is necessary for a \"functioning fee market.\"  A\n> production quota merely pushes up fees.  We have a functioning market,\n> and so far, it shows that wider bitcoin usage is even more effective\n> than a quota at pushing up fees.\n\nThe blocksize limit (your \"production quota\") is necessary for\ndecentralization, not for having a functioning fee market.\nBut I have the hope that hitting the limit would help with getting rid\nof all that special-case or at least would encourage miners to\nimplement their own policies.\nIf we can agree that hitting the limit will JUST cause higher fees and\nnot bitcoin to fail, puppies to die or the sky to turn purple I think\nthat's a great step forward in this debate.\n>From that perspective, hitting the limit is not something terribly bad\n(as said, I think it can even have positive consequences; for example,\nhigher fees may be just what is needed for more scalable solutions\n[like payment channels] to be adopted by bitcoin companies). Hitting\nthe limit may produce a more healthy market, but it is true that a\nmarket for fast confirmations already exists.\n\nUnless we want to completely get rid of the blocksize limit (which I\nwould consider another debate entirely), we will eventually hit the\nlimit anyway. Why not now so that we can make sure the software is\ncompletely compatible with having a limit?\nWhy we can hit the limit eventually but not now?\n\n(As said, unless you think the limit should be completely removed forever)."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T18:16:03",
                "message_text_only": "s/all that special-case/s/all that special-case policy code for free\ntransactions/"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-30T20:53:36",
                "message_text_only": "On 7/30/2015 11:14 AM, Jorge Tim\u00f3n wrote:\n> The blocksize limit (your \"production quota\") is necessary for\n> decentralization, not for having a functioning fee market.\n\n> If we can agree that hitting the limit will JUST cause higher fees and\n> not bitcoin to fail, puppies to die or the sky to turn purple I think\n> that's a great step forward in this debate.\n\nIt's interesting how people see things differently.  I think your first\nstatement above represents a great step forward in the debate.  Unlike\nAdam Back, you state that a block size limit is not necessary to create\na functioning fee market.\n\nAs to your second statement, unfortunately for immediate harmonious\nrelations, I was merely separating out the elevated fee market concern,\nnot at all saying it is the only or even the biggest concern with\nlimited capacity.  Alan Reiner, Ryan X. Charles and others have\neloquently explained how restrictive a 1MB limit is, even with \"layer 2\".\n\nWhat's missing from the decentralization dialog is a quantitative\nmeasure of decentralization.\n\nWhy not slam users with higher fees now, if we accept that they may be\nnecessary someday? For the same reasons you don't ask a child, age 5, to\nwork in a factory."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T01:21:07",
                "message_text_only": "On Thu, Jul 30, 2015 at 10:53 PM, Tom Harding <tomh at thinlink.com> wrote:\n> On 7/30/2015 11:14 AM, Jorge Tim\u00f3n wrote:\n>> The blocksize limit (your \"production quota\") is necessary for\n>> decentralization, not for having a functioning fee market.\n>\n>> If we can agree that hitting the limit will JUST cause higher fees and\n>> not bitcoin to fail, puppies to die or the sky to turn purple I think\n>> that's a great step forward in this debate.\n>\n> It's interesting how people see things differently.  I think your first\n> statement above represents a great step forward in the debate.  Unlike\n> Adam Back, you state that a block size limit is not necessary to create\n> a functioning fee market.\n\nYes, Adam Back and I some times see things differently, and that's fine.\nMany times, we realize later that we're saying the same thing with\ndifferent words and we're just discussing about terminology. That's\nnot an exclusive problem we have, it's a universal communication\nproblem. That's why math (which is nothing but a language) was\ninvented: to never discuss about terminology, to force any used\nconcept to be defined beforehand.\nSorry for the distraction, but I think this is one of those times.\nWhether \"hitting the limit\" is \"necessary\" (I bet he never said\n\"strictly necessary\") or just \"helpful\" is not very relevant. I think\nAdam and I agree that hitting the limit wouldn't be bad, but actually\ngood for an young and immature market like bitcoin fees.\nApart from the dubious time-preference premium (dubious because in\nmost cases is just wallet's defaults and not users in a hurry),\ntransactions are basically free if you are willing to wait (and\napparently not that much).\n\nIf I was a miner and you want me to include your transaction for free,\nyou're asking me to give you money, which I would prefer to do\ndirectly if you are a friend or a non-profit organization that I like\nor whatever rather than giving you money through bitcoin fee\ndiscounts.\nBy including your transaction, I'm increasing the probability of my\nmined block being orphaned and you're not willing to give me even a\nsingle satoshi in exchange.\nToday, in practice, one satoshi fee and no fee at all are treated\nexactly the same by most (maybe all?) miners, which if you ask me, I\nfind very ~~unfair~~ economically absurd.\n\nAre all miners just stupid?\nNot necessarily, they just don't care about fees or transactions at all.\nWho is to blame? Certainly not the value chosen for the block size\nlimit, it's clearly the subsidy's fault: subsidy is all miners care\nabout (by the way, that's also the illness behind the SPV-mining\nsymptom). I am very worried about excessive mining subsidies (if you\nknew how worried the freicoin community was [and still is] about this\nproblem, even if freicoin probably has one of the lowest mining\nsubsidies out there [currently and perpetually annual 5% of the\nmonetary base]...).\nAnd I think that \"hitting the limit\" is not a catastrophe at all, but\nrather an opportunity to motivate miners to start caring more about\ntransactions and fees (in proportion to what they care about).\nAnd if the limit is increased later and fees fall again, that's fine,\nbecause miners' will already be more prepared for the next time we\n\"hit the limit\".\nAnyway, maybe that hope is irrelevant, but what I'm convinced about is\nthat rising non-fast-confirmation mining fees above zero is not a bad\nthing.\n\n> As to your second statement, unfortunately for immediate harmonious\n> relations, I was merely separating out the elevated fee market concern,\n> not at all saying it is the only or even the biggest concern with\n> limited capacity.  Alan Reiner, Ryan X. Charles and others have\n> eloquently explained how restrictive a 1MB limit is, even with \"layer 2\".\n\nTo be honest, I've only followed those were assuming the worse case\nfor optimization: bitcoin global monetary monopoly.\nIf I remember correctly, they were aiming for something around 170 MB,\nbut in any case, any value for the constant is completely arbitrary to\nme at this point, including 1 MB. I'm deeply offended when I feel\nincluded in the \"1MBers group\" because I don't feel like that at all.\nTo be honest, I have no idea what the correct value should be, all I\nknow it's a trade-off in a monotonic function:\n\nf(blocksize) = decentralization\n\n> What's missing from the decentralization dialog is a quantitative\n> measure of decentralization.\n\nYou are completely right: there's no defined measurable unit for\n\"decentralization\" (\"p2pness\", whatever bitcoin has that wasn't\npossible before pow-based distributed consensus).\nAnd I'm afraid we will never have such a measurable unit. Maybe the\nbest definition of the property we're trying to capture is just \"the\nopposite of centralization\", assuming centralization is easier to\ndefine.\nThe best we have now are pool percentages, number of nodes,\nsubsidy/fee ratio (as said, this influences things like SPV mining)\nHow all that gets to...?\n\ng(many unrelated matrics) = centralization\n\nI don't really think anybody knows, but no matter what your\ninterpretation of some Japanese-named dude on the internet's words\n(aka bitcoin sacred history) are, if you think 3 validating nodes is\nenough for a \"p2p\" monetary network.\nIt is very possible that decentralization(blocksize) =\ndecentralization(blocksize+1) for many values of blocksize, but I\nthink the burden of the proof that decentralization(current_blocksize)\n~= decentralization(current_blocksize+1) is on those who propose\n++current_blocksize.\nBut I think ANY metric for centralization would be welcomed right now.\nIn fact, it doesn't need to be a function of blocksize, it can be a\nfunction of maxBlockSigops or maybe even maxBlockInputs or\nmaxBlockOuputs.\nBut if we don't want to have any consensus limit to centralization\nbitcoin has already fail (and doesn't need expensive proof of work).\n\n> Why not slam users with higher fees now, if we accept that they may be\n> necessary someday? For the same reasons you don't ask a child, age 5, to\n> work in a factory.\n\nIt is a certainty that fees will be necessary someday: bitcoin's\nseigniorage is limited to 21 M to subsidize mining, and we know that\nwon't last forever. Expensive proof of work (that centralized systems\nlack) must be paid for somehow.\nWho's child am I asking to work in a factory? I feel I'm missing\nsomething there."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T01:29:21",
                "message_text_only": "I'm re-reading and I have many spelling errors, sorry.\n\nOn Fri, Jul 31, 2015 at 3:21 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> On Thu, Jul 30, 2015 at 10:53 PM, Tom Harding <tomh at thinlink.com> wrote:\n>> On 7/30/2015 11:14 AM, Jorge Tim\u00f3n wrote:\n>>> The blocksize limit (your \"production quota\") is necessary for\n>>> decentralization, not for having a functioning fee market.\n>>\n>>> If we can agree that hitting the limit will JUST cause higher fees and\n>>> not bitcoin to fail, puppies to die or the sky to turn purple I think\n>>> that's a great step forward in this debate.\n>>\n>> It's interesting how people see things differently.  I think your first\n>> statement above represents a great step forward in the debate.  Unlike\n>> Adam Back, you state that a block size limit is not necessary to create\n>> a functioning fee market.\n>\n> Yes, Adam Back and I some times see things differently, and that's fine.\n> Many times, we realize later that we're saying the same thing with\n> different words and we're just discussing about terminology. That's\n> not an exclusive problem we have, it's a universal communication\n> problem. That's why math (which is nothing but a language) was\n> invented: to never discuss about terminology, to force any used\n> concept to be defined beforehand.\n> Sorry for the distraction, but I think this is one of those times.\n> Whether \"hitting the limit\" is \"necessary\" (I bet he never said\n> \"strictly necessary\") or just \"helpful\" is not very relevant. I think\n> Adam and I agree that hitting the limit wouldn't be bad, but actually\n> good for an young and immature market like bitcoin fees.\n> Apart from the dubious time-preference premium (dubious because in\n> most cases is just wallet's defaults and not users in a hurry),\n> transactions are basically free if you are willing to wait (and\n> apparently not that much).\n>\n> If I was a miner and you want me to include your transaction for free,\n> you're asking me to give you money, which I would prefer to do\n> directly if you are a friend or a non-profit organization that I like\n> or whatever rather than giving you money through bitcoin fee\n> discounts.\n> By including your transaction, I'm increasing the probability of my\n> mined block being orphaned and you're not willing to give me even a\n> single satoshi in exchange.\n> Today, in practice, one satoshi fee and no fee at all are treated\n> exactly the same by most (maybe all?) miners, which if you ask me, I\n> find very ~~unfair~~ economically absurd.\n>\n> Are all miners just stupid?\n> Not necessarily, they just don't care about fees or transactions at all.\n> Who is to blame? Certainly not the value chosen for the block size\n> limit, it's clearly the subsidy's fault: subsidy is all miners care\n> about (by the way, that's also the illness behind the SPV-mining\n> symptom). I am very worried about excessive mining subsidies (if you\n> knew how worried the freicoin community was [and still is] about this\n> problem, even if freicoin probably has one of the lowest mining\n> subsidies out there [currently and perpetually annual 5% of the\n> monetary base]...).\n> And I think that \"hitting the limit\" is not a catastrophe at all, but\n> rather an opportunity to motivate miners to start caring more about\n> transactions and fees (in proportion to what they care about).\n> And if the limit is increased later and fees fall again, that's fine,\n> because miners' will already be more prepared for the next time we\n> \"hit the limit\".\n> Anyway, maybe that hope is irrelevant, but what I'm convinced about is\n> that rising non-fast-confirmation mining fees above zero is not a bad\n> thing.\n>\n>> As to your second statement, unfortunately for immediate harmonious\n>> relations, I was merely separating out the elevated fee market concern,\n>> not at all saying it is the only or even the biggest concern with\n>> limited capacity.  Alan Reiner, Ryan X. Charles and others have\n>> eloquently explained how restrictive a 1MB limit is, even with \"layer 2\".\n>\n> To be honest, I've only followed those were assuming the worse case\n> for optimization: bitcoin global monetary monopoly.\n> If I remember correctly, they were aiming for something around 170 MB,\n> but in any case, any value for the constant is completely arbitrary to\n> me at this point, including 1 MB. I'm deeply offended when I feel\n> included in the \"1MBers group\" because I don't feel like that at all.\n> To be honest, I have no idea what the correct value should be, all I\n> know it's a trade-off in a monotonic function:\n>\n> f(blocksize) = decentralization\n>\n>> What's missing from the decentralization dialog is a quantitative\n>> measure of decentralization.\n>\n> You are completely right: there's no defined measurable unit for\n> \"decentralization\" (\"p2pness\", whatever bitcoin has that wasn't\n> possible before pow-based distributed consensus).\n> And I'm afraid we will never have such a measurable unit. Maybe the\n> best definition of the property we're trying to capture is just \"the\n> opposite of centralization\", assuming centralization is easier to\n> define.\n> The best we have now are pool percentages, number of nodes,\n> subsidy/fee ratio (as said, this influences things like SPV mining)\n> How all that gets to...?\n>\n> g(many unrelated matrics) = centralization\n>\n> I don't really think anybody knows, but no matter what your\n> interpretation of some Japanese-named dude on the internet's words\n> (aka bitcoin sacred history) are, if you think 3 validating nodes is\n> enough for a \"p2p\" monetary network.\n> It is very possible that decentralization(blocksize) =\n> decentralization(blocksize+1) for many values of blocksize, but I\n> think the burden of the proof that decentralization(current_blocksize)\n> ~= decentralization(current_blocksize+1) is on those who propose\n> ++current_blocksize.\n> But I think ANY metric for centralization would be welcomed right now.\n> In fact, it doesn't need to be a function of blocksize, it can be a\n> function of maxBlockSigops or maybe even maxBlockInputs or\n> maxBlockOuputs.\n> But if we don't want to have any consensus limit to centralization\n> bitcoin has already fail (and doesn't need expensive proof of work).\n>\n>> Why not slam users with higher fees now, if we accept that they may be\n>> necessary someday? For the same reasons you don't ask a child, age 5, to\n>> work in a factory.\n>\n> It is a certainty that fees will be necessary someday: bitcoin's\n> seigniorage is limited to 21 M to subsidize mining, and we know that\n> won't last forever. Expensive proof of work (that centralized systems\n> lack) must be paid for somehow.\n> Who's child am I asking to work in a factory? I feel I'm missing\n> something there."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-31T09:56:48",
                "message_text_only": "On Friday 31. July 2015 03.21.07 Jorge Tim\u00f3n via bitcoin-dev wrote:\n> If I was a miner and you want me to include your transaction for free,\n> you're asking me to give you money\n\nWhat?\n\nAsk yourself; why do miners include transactions at all? What it the incentive \nif there really is only less than 0.8% of income to be derived from fees?\n\nMiners don't get payed by fees.  They won't need to get payed by fees for \ndecades to come. Maybe you want to re-do your math, it seems off.\n-- \nThomas Zander"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-07-31T12:32:53",
                "message_text_only": "> On 31 Jul 2015, at 11:56, Thomas Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Friday 31. July 2015 03.21.07 Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> If I was a miner and you want me to include your transaction for free,\n>> you're asking me to give you money\n> \n> What?\n> \n> Ask yourself; why do miners include transactions at all? What it the incentive \n> if there really is only less than 0.8% of income to be derived from fees?\n> \n> Miners don't get payed by fees.  They won't need to get payed by fees for \n> decades to come. Maybe you want to re-do your math, it seems off.\n\nFees should be compared not with the total revenue, but with the profit margin. If a miner invested/spends 24 BTC per block and earns 0.25 in fees, then his total profit is 1.25 BTC per block and fees comprise a whopping 20% of the profit. \n\nToday I think profit margins are quite high, so fees do not matter much. But it's not hard to imagine that in just a couple of years BTC may appreciate a lot more, attract more investors and even bigger foundries to, say, print chips and mine right at the foundry, thus driving profit margins lower. Fees will begin to matter regardless of the total subsidy. \n\nJust some hypothetical calculation.\n\nLets say in 2015 one block costs 5 BTC and fees bring 0.25 BTC. Profit is thus 20.25 BTC and fees comprise 1.2% of that amount.\n\nLets say in late 2016 halving happens, BTC appreciates and resulting competition drives up the cost to 6 BTC (yes, BTC itself is more expensive, but so is the profit too, so increased competition must drive down the profit margin). Now the block brings 6.75 BTC in profit. Fees, if unchanged now make 4% of the total profit.\n\nIf all goes well, in mid 2020 another halving happens (6.25 BTC/block) and even if the BTC-denominated cost stays the same miner now will earn 0.25 BTC profit from subsidy and fees now can account for 100% of that amount. \n\nOf course it's a very rough estimate and most likely to be far from reality, but it shows how fees can begin to matter rather quickly under pressure of separate factors: halving and growing valuation and mining competition."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T15:24:31",
                "message_text_only": "On Fri, Jul 31, 2015 at 11:56 AM, Thomas Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Friday 31. July 2015 03.21.07 Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> If I was a miner and you want me to include your transaction for free,\n>> you're asking me to give you money\n>\n> What?\n>\n> Ask yourself; why do miners include transactions at all? What it the incentive\n> if there really is only less than 0.8% of income to be derived from fees?\n\nAs a rhetorical exercise, I just asked myself those questions (with\nother words) in the very post you are replying to.\nPlease, read again.\nIf miners have a cost in including transactions (which they have) but\nthere's no gain, why are miners including free transactions?\nIs it because they are stupid or because they don't care enough about\nfees (and thus blindly use whatever default policy that comes with\nBitcoin Core)?\n\nOn Fri, Jul 31, 2015 at 2:32 PM, Oleg Andreev via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Fees should be compared not with the total revenue, but with the profit margin.\n\nYou are completely right, this is what matters in the end. To correct\nmyself, what I'm worried about is how low the fees/profits ratio is,\nfees/total_reward is just an easier-to-calculate approximation when\nyou don't know costs = total_reward - profits.\n\n> Of course it's a very rough estimate and most likely to be far from reality, but it shows how fees can begin to matter rather quickly under pressure of separate factors: halving and growing valuation and mining competition.\n\nDon't forget a rise in fees paid as another potential factor. That was\nmy whole point: higher fees may help reducing problems related to a\nlow fees/profits ratio.\nAnd that's why I don't think a rise in fees is necessarily a bad thing.\nLet's not forget that we're just talking about market fees for\nnon-urgent transfers rising above zero!\nThere may be a fee market for fast confirmations already, but there's\ncertainly none for non-urgent transfers.\nIn my opinion, rising from zero to anything, it's a great step\nforwards. I can perfectly understand that maintaining that anything\nlow is good for adoption, but insisting in maintaining it at zero\ndoesn't seem very reasonable to me, given that we know for a fact that\nis not sustainable in the long term.\nWe don't want business plans to fail because they're relaying on free\ntransactions. We don't want new users to be lied about the real\nproperties of the system.\nAnd I'm sure that any ridiculously low value will be so marginally\nworse for adaption when compared to a plain zero, that I'm not worried\nabout it at all.\nUsers starting to pay SOMETHING for a service they're enjoying and\nthat actually has quite big operational costs (energy-demanding proof\nof work, currently subsidized by the finite initial seigniorage) it's,\nby no means, the end of Bitcoin.\nTo me is really more of a start, a tiny first step towards a viable\nsystem that doesn't depend on subsidies (with expiration date)."
            },
            {
                "author": "Ivan Brightly",
                "date": "2015-07-30T12:45:16",
                "message_text_only": "One thing that the below assumption doesn't appear to take into account is\nuser demand for quick confirmations. I haven't fully thought out the game\ntheory on this but here goes:\n\nExample: if 75% of hashing power accepts 'medium' fee transactions while\n25% is willing to accept low (or any) fee transactions, then a user paying\na lower fee wishing to get their transaction included in the next block\nruns a ~75% chance that their transaction won't be included.\n\nUsers desiring the most reliably fast confirmations are better off by\npaying the minimum fee that a majority of miners will accept. Miners\nbreaking ranks and accepting lower fees only affects users who aren't\nsufficiently interested in quicker confirmations. As long as a majority of\nminers 'collude', they will likely be able to keep the average fees higher\nthan miners with the lower costs of operations might be willing to accept.\n\nOn Thu, Jul 30, 2015 at 12:00 AM, Adam Back via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 29 July 2015 at 20:41, Ryan Butler via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Does an unlimited blocksize imply the lack of a fee market?  Isn't every\n> > miner able to set their minimum accepted fee or transaction acceptance\n> > algorithm?\n>\n> The assumption is that wont work because any miner can break ranks and\n> do so profitably, so to expect otherwise is to expect oligopoly\n> behaviour which is the sort of antithesis of a decentralised mining\n> system.  It's in fact a similar argument as to why decentralisation of\n> mining provides policy neutrality: some miner somewhere with some\n> hashrate will process your transaction even if some other miners are\n> by policy deciding not to mine it.  It is also similar reason why free\n> transactions are processed today - policies vary and this is good for\n> ensuring many types of transaction get processed.\n>\n> Adam\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/78d19cbb/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2015-07-30T04:07:33",
                "message_text_only": "> On Jul 29, 2015, at 8:41 PM, Ryan Butler via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Does an unlimited blocksize imply the lack of a fee market?  Isn't every miner able to set their minimum accepted fee or transaction acceptance algorithm?\n> \n\nYes, miners can set this, and giving them more fine grained control over this (with sane defaults) will have a far bigger impact on establishing a proper fee market than depending on capacity (that nobody has any control over). \n\nAllowing miners to set up some sort of tiered offering that delays transactions and maybe even have their tiers tie into the exchange rate to keep the costs constant over time.\n\nI'm sure something like this has probably already been discussed before and I'm curious what the objections are to such a thing?\n\njp\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150729/cb662375/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-07-30T09:52:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nSome additional points....\n\nOn 07/29/2015 03:54 PM, s7r via bitcoin-dev wrote:\n> (...)\n> \n> The more people use bitcoin, the more demand we have on the market\n> for BTC, the higher BTC/FIAT rate will be, more people will become \n> interested in mining and so on. Bitcoin is not a\n> rich-only-private-club, it's an open, global, decentralized payment\n> network. The less people use it... I guess you figured it out.\n\nYes.\n\n(...) Having some\n> offchain solution for small transactions would be a good idea, but\n> this doesn't mean we should make small transactions impossible due\n> to absurd fees.\n\nThis is correct also.\n\n> \n> On 7/29/2015 8:47 PM, Raystonn . via bitcoin-dev wrote:\n>>> When a category of users would get priced out because of the\n>>> fee\n>> market, they would be free to use any altcoin they want.\n>> \n>> I believe that pretty well sums up where we\u2019re headed if\n>> transaction rate is artificially limited, whether that be by\n>> maximum block size limit or something else.  A fee market will\n>> necessarily include more than just Bitcoin.  The reality is it\u2019s\n>> very easy to trade value across different blockchains, and thus a\n>> fee market will bleed value from Bitcoin and give it to\n>> alternative blockchains.  If Bitcoin\u2019s blocks are at maximum\n>> capacity, people will exchange for something that allows them to\n>> transact with a lesser fee, then make the desired payment.  This\n>> adds value to the alternative blockchain and removes it from\n>> Bitcoin.\n>> \n>> Anyone thinking the fee market can be restrained to Bitcoin alone\n>> is mistaken.\n>> \n>> \n>> *From:* Vali Zero via bitcoin-dev \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org> *Sent:* Wednesday,\n>> July 29, 2015 7:09 AM *To:*\n>> bitcoin-dev at lists.linuxfoundation.org \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org> *Subject:*\n>> [bitcoin-dev] R\u0103spuns: Personal opinion on the fee market from a\n>> worried local trader\n>> \n>> I am disappointed that you did not understand my point of view.\n>> Let me rephrase it for you,\n>> \n>> People tipping, buying 0.99$ products and gamblers that need\n>> Bitcoin transactions *more* than the rest of the people will\n>> afford the fees that establish the equilibrium between demand and\n>> supply of Bitcoin transactions. The people are free to use they\n>> money for whatever they like, but you should understand that\n>> Bitcoin transactions are not free.\n>> \n>> I was merely attempting to point out that spammers and gamblers\n>> would be the first ones that would go away. They would be free to\n>> spam or gamble, but they would have to pay for it.\n>> \n>> When a category of users would get priced out because of the fee\n>> market, they would be free to use any altcoin they want.\n>> \n>> Please understand that not everyone will leave. The more\n>> important players will remain, those that need it the most. The\n>> other players are free to use whatever altcoin they wish.\n>> \n>> \n>> \u00cen Miercuri, 29 Iulie 2015 16:47:57, Angel Leon\n>> <gubatron at gmail.com> a scris:\n>> \n>> \n>> \"the gamblers and perhaps people transacting very low amounts.\n>> The people that actually need Bitcoin would remain.\"\n>> \n>> so people tipping, buying $0.99 products, and gamblers actually\n>> don't need Bitcoin. Who are you to say what people need to use\n>> money for? This statement goes against the freedom of\n>> decentralization and financial freedom Bitcoin should be able to\n>> provide.\n>> \n>> It's an open network and it will be used as most users see fit,\n>> and that requires a blocksize increase wether you like it or not,\n>> it's simple physics, other time wait times will become unbearable\n>> for those not willing to pay the high fees, if people leave, then\n>> it only mean bitcoins isn't useful, and if bitcoin isn't useful,\n>> it's worthless.\n>> \n>> \n>> \n>> http://twitter.com/gubatron\n>> \n>> On Wed, Jul 29, 2015 at 9:27 AM, Vali Zero via bitcoin-dev \n>> <bitcoin-dev at lists.linuxfoundation.org \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> Hello,\n>> \n>> I have been reading an argument saying that paying higher fees\n>> would scare Bitcoin users and they would stop using it,\n>> preferring bank transfers or other payment methods. This does not\n>> make sense for me. If some users leave, then demand for bitcoin\n>> transactions goes down and so do the fees. The others remain.\n>> \n>> Fee market means that an equilibrium is found between the demand\n>> for bitcoin transactions and the available supply (given by the\n>> block size). The fee is the price that finds this equilibrium.\n>> \n>> If a fee market starts to exist, the first ones to leave are the \n>> spammers, probably followed by the gamblers and perhaps people \n>> transacting very low amounts. The people that actually need\n>> Bitcoin would remain.\n>> \n>> Please allow this fee market to form...\n>> \n>> In the absence of a functioning fee market, I will refuse to run \n>> Bitcoin code that increases the block size and will do my best\n>> to tell everyone I know not to upgrade towards running such code.\n>> If Bitcoin succombs to the free stuff army, I will sell all the\n>> coins and leave. Nothing is for free.\n>> \n>> I apologize for any exagerations, but I just felt strongly\n>> towards expressing my opinion here. I'm only a local Bitcoin\n>> trader, computer engineer, with a reasonable understanding of\n>> free markets. And I'm running only one full node.\n>> \n>> Kind regards, Valentin\n>> \n>> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org> \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVufPFAAoJEGxwq/inSG8CBHUIAKZQaTvJToxGmEXSTckHZ2fX\nNEVJNbw0oebdpQU6mvYR1hjK4LE/pY+cyfTh98RxQtsIHGJqVghU/kgzP6PSyS9J\nNYB3HO3iz2l9rBRQCe197wfg1GlY1QhepNFofYj1k1MDIB2QCMUXhUwz7e7wncuc\nTESDEHH/mUqPOnWBKeEbru7gr0aLn8ltmEHXwDQdlPP9iyXGpt9oGWoP1fBYTRwg\nr29vW8wCYhKzbS44ovPRilGWnWhxyB/2N5Qb94JkdzWCdr98bBIZQ8eL+w64lEhv\n9A8Umiu9B8c6Ch9C1d4c/ircA4MJKSroTfLh8SgkjYtdAnECAJmQ3ZcUGgyGerw=\n=gCvd\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "R\u0103spuns: Personal opinion on the fee market from a worried local trader",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Adam Back",
                "s7r",
                "Oleg Andreev",
                "Thomas Zander",
                "Dave Hudson",
                "Jean-Paul Kogelman",
                "Ryan Butler",
                "Jorge Tim\u00f3n",
                "Ivan Brightly",
                "Tom Harding"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 56776
        }
    },
    {
        "title": "[bitcoin-dev] Consensus fork activation thresholds: Block.nTime vs median time vs block.nHeight",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-29T20:27:29",
                "message_text_only": "When it comes to define thresholds for consensus fork activation there\nare 3 options that I know of and each of them has at least a\ndisadvantage that the other 2 lack:\n\n-Block.nTime: It's not monotonic\n-median time: You cannot validate it without context (in contrast,\nnTime is contained in the block header and nHeight in the coinbase)\n-block.nHeight: You cannot know the exact time when a given height\nwill be reached.\n\nI personally think that nHeight's disadvantage is the less worse, but\nothers will likely disagree. The point is we need to find a solid\ncriteria to decide.\n\nWhen combining the threshold with a later miner's \"voting\" (upgrade\nconfirmation) on top of it, not being monotonic may be a real problem.\nDoing that on top of height seems straight forward: check if\n(prevBlockIndex.nHeight > threshold &&\nIsSuperMajority(...,prevBlockIndex,...))\nWith median time, seems safe too: if\n(prevBlockIndex.CalculateMedianTime > threshold &&\nIsSuperMajority(...,prevBlockIndex,...))\nJust a little bit less efficient.\nIt would look more like if (IsSuperMajority(...,prevBlockIndex,...) &&\nGetFirstBlockUsedInVoting(prevBlockIndex).nTime > threshold)\n\n\nBut in some cases (say, an emergency consensus fork) you won't combine\nthe mining confirmation, so you may not have the prevBlockIndex\navailable and you may need to pass the height or medianTime down.\nIf the current block is not accessible from wherever the check is\nbeing made, you would need an additional blockTime parameter as well.\n\nAre there any example cases where a rule activation check doesn't have\nthe block available?\n\nOf course, let's consider the following hardfork example:\n\nbefore the hardfork: consensus_size(tx) = real_size(tx)\nafter the hardfork: after consensus_size(tx) = real_size(tx) +\ndelta_utxo_size(tx)\n\nthat would allow miners to create bigger blocks if the transactions\nhelp reducing the size of the utxo (and penalize transactions that\nmake the utxo grow by considering bigger when it comes to block\ninclusion).\n\nWell, at the block validation level (the most important one), you\nobviously have block.nTime available.\nBut what if you're checking an unconfirmed transaction?\nIt's size (and thus it's validity and the policy relay decisions)\ndepends on whether the hardfork is activated or not.\nSo to check an unconfirmed transaction, you would need the block.nTime\nof the next block, which is unpredictable (unless you're a miner)\nbecause miners set those.\n\nAcceptToMemoryPool already uses the nHeight (in fact, there's nHeight\nand nSpendHeight there, not sure why we need to of them yet), so this\ncase would be trivial to implement.\nCalculating the median time there wouldn't be difficult either: even\nif globals weren't so heavily-used in AcceptToMemoryPool, the\nprevIndex can always be passed down as parameter.\n\nSome people may think that I'm discussing tiny details, but I would\nreally like that we can chose whatever is more generic for any type of\nconsensus fork and always use that from now on (instead of risking of\nhaving to use 2 of them if we find out later that the chosen option is\nnot general enough).\n\nIt would be also nice to have only one uniform type of threshold in\nConsensus::Params, and height seems to be the choice for softforks\nthat have been accepted long ago via miners'\nvoting/upgrade_confirmation, like in :\nhttps://github.com/bitcoin/bitcoin/pull/5966/files\n\nThat doesn't mean it needs to necessarily be height: in a rebased\nversion of #5966 we could replace consensus.nBIP34Height = 227931 with\nconsensus.nBIP34Time = <something>.\nBut I would really like to have a uniform threshold mechanism instead\nof using the 3 options depending on the fork.\n\nI had assumed that height was the preferred option for everyone and\nthat's why I used it in\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\nBut judging from the existing blocksize hardfork proposals (using\nblock.nTime, the option I like less ) I was too fast there and clearly\nI need to reopen the discussion."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-30T18:16:22",
                "message_text_only": "I still think using the version and timestamp fields in the block header\nare simplest and best.\n\nAdvantages:\n  Available to SPV nodes with no change to the network protocol\n  Available after headers downloaded, before full block data is available\n  Once well past a fork, allows all block validation except validation\nagainst the UTXO to happen in parallel, out-of-order, independent of any\nother block.\n\nDisadvantages:\n  Not monotonically increasing\n\n\nI think discussion about transactions in the memory pool are just a\ndistraction: no matter what criteria is used (timestamp, height, median\ntime), a blockchain re-organization could mean the validity of transactions\nyou've accepted into the memory pool (if you're accepting transactions that\nswitch from valid to invalid at the consensus change -- Core tries hard not\nto do that via IsStandard policy) must be re-evaluated.\n\nI don't strongly care if median time or block timestamp is used, I think\neither will work. I don't like height, there are too many cases where the\ntime is known but the block height isn't (see, for example, the\nmax-outputs-in-a-transaction sanity check computation at line 190 of\nbitcoin-tx.cpp -- bitcoin-tx.cpp has no idea what the current block height\nis).\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/bc20c023/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Consensus fork activation thresholds: Block.nTime vs median time vs block.nHeight",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Gavin Andresen"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5449
        }
    },
    {
        "title": "[bitcoin-dev] Data / Evidence regd \"penalties\" for not validating blocks (Was: Why Satoshi's temporary anti-spam measure isn't temporary)",
        "thread_messages": [
            {
                "author": "Sriram Karra",
                "date": "2015-07-30T06:28:22",
                "message_text_only": "On Wed, Jul 29, 2015 at 10:23 PM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn Wed, Jul 29, 2015 at 9:59 AM, Mike Hearn via bitcoin-dev\n>\n>\n> > Miners who don't validate have a habit of bleeding money:   that's the\n> > system working as designed.\n>\n> The information I have currently is that the parties engaging in that\n> activity found it to be tremendously profitable, even including losses\n> from issues.\n\n\nThis got buried in another thread. Putting it out in case anyone has any\ninsight.\n\nDoes anyone have any data on which of the above two viewpoints is actually\ncorrect? Measuring / publishing these effects will go a long way in either\n(a) establishing credibility of the 'system design' or (b) trigger a\nconversation on what needs fixing.\n\nIf there is no such known data, and someone new to Bitcoin would like to do\nthat, where would be a good place to start, if it is at all possible.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/974f1ee3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Data / Evidence regd \"penalties\" for not validating blocks (Was: Why Satoshi's temporary anti-spam measure isn't temporary)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sriram Karra"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1119
        }
    },
    {
        "title": "[bitcoin-dev] Block size following technological growth",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2015-07-30T14:25:02",
                "message_text_only": "Hello all,\n\nhere is a proposal for long-term scalability I've been working on:\nhttps://gist.github.com/sipa/c65665fc360ca7a176a6\n\nSome things are not included yet, such as a testnet whose size runs ahead\nof the main chain, and the inclusion of Gavin's more accurate sigop\nchecking after the hard fork.\n\nComments?\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/99e5886b/attachment.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2015-07-30T15:04:47",
                "message_text_only": "What, if any, methods would be used for miners to communicate their\nupgrade?\n\nGreg\n\nOn Thu, Jul 30, 2015 at 10:25 AM, Pieter Wuille via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello all,\n>\n> here is a proposal for long-term scalability I've been working on:\n> https://gist.github.com/sipa/c65665fc360ca7a176a6\n>\n> Some things are not included yet, such as a testnet whose size runs ahead\n> of the main chain, and the inclusion of Gavin's more accurate sigop\n> checking after the hard fork.\n>\n> Comments?\n>\n> --\n> Pieter\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/846a30c7/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T15:12:19",
                "message_text_only": "1) Unlike previous blocksize hardfork proposals, this uses median time\ninstead of block.nTime for activation. I like that more but my\npreference is still using height for everything. But that discussion\nis not specific to this proposal, so it's better if we discuss that\nfor all of them here:\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n\n2) I think uncontroversial hardforks should also take miner\nconfirmation into account, just like uncontroversial softforks do. We\ncannot make sure other users have upgraded before activating the\nchain, but we can know whether miners have upgraded or not. Having\nthat tool available, why not use it. Of course other hardforks may not\ncare about miners' upgrade state. For example \"anti-miner hardforks,\nsee https://github.com/jtimon/bips/blob/bip-forks/bip-forks.org#asic-reset-hardfork\nBut again, this is common to all uncontroversial hardforks, so it\nwould probably better to discussed it in\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n(gmaxwell assigned to bip99 to my bip draft).\n\n3) As commented to you privately, I don't like to make any assumptions\nabout technological advancements (much less on economical growth). I\ndon't expect many people to agree with me here (I guess I've seen too\nmany \"peak oil\" [or more generally, peak energy production] plus I've\nread Nietzsche's \"On the utility and liability of history for life\"\n[1]; so considering morals, technology or economics as \"monotonic\nfunctions\" in history is simply a ridiculous notion to me), but it's\nundeniable that internet connections have improved overall around the\nworld in the last 6 years. I think we should wait for the\ntechnological improvements to happen and then adapt the blocksize\naccordingly. I know, that's not a \"definitive solution\", we will need\nto change it from time to time and this is somewhat ugly.\nBut even if I'm the only one that considers a \"technological\nde-growth\" possible, I don't think is wise to rely on pseudo-laws like\nMoore's or Nielsen\u2019s so-called \"laws\".\nStealing a quote from another thread:\n\n\"Prediction is difficult, especially about the future.\" - Niels Bohr\n\nSo I would prefer a more limited solution like bip102 (even though I\nwould prefer to have some simulations leading to  a concrete value\n(even if it's bigger) rather than using 2MB's arbitrary number.\n\nThose are my 3 cents.\n\n[1] https://philohist.files.wordpress.com/2008/01/nietzsche-uses-history.pdf\n\nOn Thu, Jul 30, 2015 at 4:25 PM, Pieter Wuille via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hello all,\n>\n> here is a proposal for long-term scalability I've been working on:\n> https://gist.github.com/sipa/c65665fc360ca7a176a6\n>\n> Some things are not included yet, such as a testnet whose size runs ahead of\n> the main chain, and the inclusion of Gavin's more accurate sigop checking\n> after the hard fork.\n>\n> Comments?\n>\n> --\n> Pieter\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-30T16:23:17",
                "message_text_only": "I find it to be an admirable goal to try to keep node operation costs low\nand accessible to the average user. On the other hand, if we are able to\nkeep the resource requirements of nodes at the level of, say, whatever the\nlatest Raspberry Pi model on a residential Internet connection can handle,\nI'm not sure how helpful it will be if the demand for inclusion in blocks\nresults in transaction fees prices out more users. Stated differently, if\nthe cost or contention of using the network rises to the point of excluding\nthe average user from making transactions, then they probably aren't going\nto care that they can run a node at trivial cost.\n\nIf we're approaching the block size from a resource usage standpoint, it\nseems to me that someone is going to be excluded one way or another. Not\nraising the block size will exclude some users from sending transactions\nwhile raising the block size will exclude some users from running nodes.\nThe latter seems preferable to me because more users will grow the\necosystem, which should increase the value of the ecosystem, which should\nincrease the cost that entities are willing to pay to run nodes.\n\nI see two primary points of view / objectives clashing in this debate:\n\n1) Decentralization and stability even if it retards growth of the ecosystem\n2) Push the system's load as far as we are comfortable in order to\naccommodate the growth it is experiencing\n\nIt's clear to me that Core developers have a responsibility to maintain a\nstable platform for the ecosystem. I think it's less clear that they have a\nresponsibility to grow it or ask node operators to expend more resources in\norder to support more users. As an operator of several nodes, I can\nanecdotally state that I find their resource usage to be trivial and I\nwelcome more load.\n\n- Jameson\n\nOn Thu, Jul 30, 2015 at 11:12 AM, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 1) Unlike previous blocksize hardfork proposals, this uses median time\n> instead of block.nTime for activation. I like that more but my\n> preference is still using height for everything. But that discussion\n> is not specific to this proposal, so it's better if we discuss that\n> for all of them here:\n>\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n>\n> 2) I think uncontroversial hardforks should also take miner\n> confirmation into account, just like uncontroversial softforks do. We\n> cannot make sure other users have upgraded before activating the\n> chain, but we can know whether miners have upgraded or not. Having\n> that tool available, why not use it. Of course other hardforks may not\n> care about miners' upgrade state. For example \"anti-miner hardforks,\n> see\n> https://github.com/jtimon/bips/blob/bip-forks/bip-forks.org#asic-reset-hardfork\n> But again, this is common to all uncontroversial hardforks, so it\n> would probably better to discussed it in\n>\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n> (gmaxwell assigned to bip99 to my bip draft).\n>\n> 3) As commented to you privately, I don't like to make any assumptions\n> about technological advancements (much less on economical growth). I\n> don't expect many people to agree with me here (I guess I've seen too\n> many \"peak oil\" [or more generally, peak energy production] plus I've\n> read Nietzsche's \"On the utility and liability of history for life\"\n> [1]; so considering morals, technology or economics as \"monotonic\n> functions\" in history is simply a ridiculous notion to me), but it's\n> undeniable that internet connections have improved overall around the\n> world in the last 6 years. I think we should wait for the\n> technological improvements to happen and then adapt the blocksize\n> accordingly. I know, that's not a \"definitive solution\", we will need\n> to change it from time to time and this is somewhat ugly.\n> But even if I'm the only one that considers a \"technological\n> de-growth\" possible, I don't think is wise to rely on pseudo-laws like\n> Moore's or Nielsen\u2019s so-called \"laws\".\n> Stealing a quote from another thread:\n>\n> \"Prediction is difficult, especially about the future.\" - Niels Bohr\n>\n> So I would prefer a more limited solution like bip102 (even though I\n> would prefer to have some simulations leading to  a concrete value\n> (even if it's bigger) rather than using 2MB's arbitrary number.\n>\n> Those are my 3 cents.\n>\n> [1]\n> https://philohist.files.wordpress.com/2008/01/nietzsche-uses-history.pdf\n>\n> On Thu, Jul 30, 2015 at 4:25 PM, Pieter Wuille via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Hello all,\n> >\n> > here is a proposal for long-term scalability I've been working on:\n> > https://gist.github.com/sipa/c65665fc360ca7a176a6\n> >\n> > Some things are not included yet, such as a testnet whose size runs\n> ahead of\n> > the main chain, and the inclusion of Gavin's more accurate sigop checking\n> > after the hard fork.\n> >\n> > Comments?\n> >\n> > --\n> > Pieter\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/f352666f/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-07-30T16:36:29",
                "message_text_only": "On Thu, Jul 30, 2015 at 11:23 AM, Jameson Lopp via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Stated differently, if the cost or contention of using the network rises\n> to the point of excluding the average user from making transactions, then\n> they probably aren't going to care that they can run a node at trivial cost.\n\n\nThat's an interesting claim; so suppose you're living in a future where\ntransactions are summarizing millions or billions of other daily\ntransactions, possibly with merkle hashes. You think that because a user\ncan't individually broadcast his own personal transaction, that the user\nwould not be interested in verifying the presence of a summarizing\ntransaction in the blockchain? I'm just curious if you could elaborate on\nthis effect. Why would I need to see my individual transactions on the\nnetwork, but not see aggregate transactions that include my own?\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/d842494e/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-07-30T16:43:56",
                "message_text_only": "I fully expect that new layers will someday allow us to facilitate higher\ntransaction volumes, though I'm concerned about the current state of the\nnetwork and the fact that there are no concrete timelines for the rollout\nof aforementioned high volume networks.\n\nAs for reasoning behind why users will still need to settle on-chain even\nwith the existence of high volume networks, see these posts:\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/34119233/\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/34113067/\n\nPoint being, the scalability proposals that are currently being developed\nare not magic bullets and still require the occasional on-chain settlement.\nLarger blocks will be necessary with or without the actual scalability\nenhancements.\n\n- Jameson\n\nOn Thu, Jul 30, 2015 at 12:36 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n\n> On Thu, Jul 30, 2015 at 11:23 AM, Jameson Lopp via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Stated differently, if the cost or contention of using the network rises\n>> to the point of excluding the average user from making transactions, then\n>> they probably aren't going to care that they can run a node at trivial cost.\n>\n>\n> That's an interesting claim; so suppose you're living in a future where\n> transactions are summarizing millions or billions of other daily\n> transactions, possibly with merkle hashes. You think that because a user\n> can't individually broadcast his own personal transaction, that the user\n> would not be interested in verifying the presence of a summarizing\n> transaction in the blockchain? I'm just curious if you could elaborate on\n> this effect. Why would I need to see my individual transactions on the\n> network, but not see aggregate transactions that include my own?\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/b38ccb0a/attachment.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-30T16:36:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n\nOn 07/30/2015 10:12 PM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n[snip]\n> But even if I'm the only one that considers a \"technological \n> de-growth\" possible, I don't think is wise to rely on pseudo-laws\n> like Moore's or Nielsen\u2019s so-called \"laws\". Stealing a quote from\n> another thread:\n\nYou raise a good point: \"de-growth\"\n\nAssuming linear (or exponential) growth without sympathetic\ncontraction at some time in the future would make our future selves\nlook back and smile at the youthful exuberance.\n\nThe pseudo-laws you mention (Moore's etc) do not cater for contraction\nand, you're right, scaling UP plans should also wisely make provision\nfor scaling DOWN, for when the need arises.\n> \n> So I would prefer a more limited solution like bip102 (even though\n> I would prefer to have some simulations leading to  a concrete\n> value (even if it's bigger) rather than using 2MB's arbitrary\n> number.\n\nI just had a look your existing Size N testnet code\nhttps://github.com/bitcoin/bitcoin/pull/6382\nand i'll set up a node over the weekend and post its address in that\nPR's conversation. Do you or anyone else already have a node running?\nwhat blocksize?\n> \n> Those are my 3 cents.\n> \n> [1]\n> https://philohist.files.wordpress.com/2008/01/nietzsche-uses-history.pdf\n\nThanks,\n> \nwill broaden my horizon soon!\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVulKBAAoJEGwAhlQc8H1mUSAH/Rmlek3uitGyIritwyDO4Kf7\nBfynlztWmPbnWl7aFYQCS+aIPgS+BvQWIiA0dTI633yj071DWEvcGDzhtcVrk0KT\n//Ty8bp8yqsJRdd+SWgnqUzSmB6TI31F3ssxjDfSZhKiy8YF4+pKqjerQmBqlgLY\nsKts3md8N8qWV5Onjd7ea+7SoFjhJ6GOm2UFgxO27LCeDH5Ax5fG4MsolNg3MBTT\n5y7Hfo1YeFXRwRRSy5uCSSR0afBb8Wauqi/EnSYDuMe5HBcLztc7icXa6oLTlvBC\nsfYswasmLRbvHLs4Vy51g75+k60QBjgFKtVlPXJXGN2trbcedF0UbDmenxGqJaI=\n=rJPX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T17:51:12",
                "message_text_only": "On Thu, Jul 30, 2015 at 6:36 PM, Venzen Khaosan <venzen at mail.bihthai.net> wrote:\n> I just had a look your existing Size N testnet code\n> https://github.com/bitcoin/bitcoin/pull/6382\n> and i'll set up a node over the weekend and post its address in that\n> PR's conversation. Do you or anyone else already have a node running?\n> what blocksize?\n\nGreat! No, I'm not running any node right now at any size.\nTake into account that it's not a regular testnet (ie like testnet3),\nit's a regtest-like testnet to make mining and simulations cheap.\nThat also means that anybody can trivially create reorgs, so it is\nexpected to be used in a controlled environment (you can control which\nnode creates a new block and when)."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T18:00:21",
                "message_text_only": "Gavin, Pieter, Mark, Gary, can we move the median time discussion to\nits own thread?\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n\nI really don't want to fill this thread with that discussion.\n\nOn Thu, Jul 30, 2015 at 7:51 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> On Thu, Jul 30, 2015 at 6:36 PM, Venzen Khaosan <venzen at mail.bihthai.net> wrote:\n>> I just had a look your existing Size N testnet code\n>> https://github.com/bitcoin/bitcoin/pull/6382\n>> and i'll set up a node over the weekend and post its address in that\n>> PR's conversation. Do you or anyone else already have a node running?\n>> what blocksize?\n>\n> Great! No, I'm not running any node right now at any size.\n> Take into account that it's not a regular testnet (ie like testnet3),\n> it's a regtest-like testnet to make mining and simulations cheap.\n> That also means that anybody can trivially create reorgs, so it is\n> expected to be used in a controlled environment (you can control which\n> node creates a new block and when)."
            },
            {
                "author": "Gary Mulder",
                "date": "2015-07-30T16:56:23",
                "message_text_only": "On 30 July 2015 at 16:12, Jorge Tim\u00f3n <bitcoin-dev at lists.linuxfoundation.org\n> wrote:\n\n> 1) Unlike previous blocksize hardfork proposals, this uses median time\n> instead of block.nTime for activation. I like that more but my\n> preference is still using height for everything. But that discussion\n> is not specific to this proposal, so it's better if we discuss that\n> for all of them here:\n>\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n\n\nNote that a \"median\" is a special case of a 50% percentile. If you desire\nto apply a more stringent criteria you can use the 75th or even 90th\npercentile.\n\nhttps://en.wikipedia.org/wiki/Percentile\n\nPerhaps if a statistician (i.e. not me) could be found to offer her\nservices, she could become a resource for helping selecting the most\nappropriate statistical algorithms on request (and implemented Integer math\nas per Gavin, from memory), considering the consequences of learning\npost-fork that a \"bad statistical model\" was chosen.\n\ne.g. an exponentially weighted moving average is usually much less volatile\nand harder to manipulate than a simple moving average, but still can\n\"respond\" to short term drivers.\n\nRegards,\nGary\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/b6d539f7/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-07-30T17:13:13",
                "message_text_only": "The median is used here because that is the consensus rule -- a block\ncannot have a timestamp older than the median time of the last 11 blocks.\nBy linking the changeover to this rule we avoid perverse incentives about\nminers lying in their timestamps, or the threshold being crossed, then\nreverted, then crossed again, etc.\n\nMaybe a different percentile would have been a better choice, but that ship\nsailed in 2009. The rule is what it is right now, and we benefit the most\nfrom using the same rule as consensus for the threshold.\nOn Jul 30, 2015 9:57 AM, \"Gary Mulder via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 30 July 2015 at 16:12, Jorge Tim\u00f3n <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> 1) Unlike previous blocksize hardfork proposals, this uses median time\n>> instead of block.nTime for activation. I like that more but my\n>> preference is still using height for everything. But that discussion\n>> is not specific to this proposal, so it's better if we discuss that\n>> for all of them here:\n>>\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009731.html\n>\n>\n> Note that a \"median\" is a special case of a 50% percentile. If you desire\n> to apply a more stringent criteria you can use the 75th or even 90th\n> percentile.\n>\n> https://en.wikipedia.org/wiki/Percentile\n>\n> Perhaps if a statistician (i.e. not me) could be found to offer her\n> services, she could become a resource for helping selecting the most\n> appropriate statistical algorithms on request (and implemented Integer math\n> as per Gavin, from memory), considering the consequences of learning\n> post-fork that a \"bad statistical model\" was chosen.\n>\n> e.g. an exponentially weighted moving average is usually much less\n> volatile and harder to manipulate than a simple moving average, but still\n> can \"respond\" to short term drivers.\n>\n> Regards,\n> Gary\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/39d7af41/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-07-30T16:20:30",
                "message_text_only": "On Thu, Jul 30, 2015 at 10:25 AM, Pieter Wuille via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Some things are not included yet, such as a testnet whose size runs ahead\n> of the main chain, and the inclusion of Gavin's more accurate sigop\n> checking after the hard fork.\n>\n> Comments?\n>\n\nFirst, THANK YOU for making a concrete proposal!\n\nSpecific comments:\n\nSo we'd get to 2MB blocks in the year 2021. I think that is much too\nconservative, and the most likely effect of being that conservative is that\nthe main blockchain becomes a settlement network, affordable only for\nlarge-value transactions.\n\nI don't think your proposal strikes the right balance between\ncentralization of payments (a future where only people running payment\nhubs, big merchants, exchanges, and wallet providers settle on the\nblockchain) and centralization of mining.\n\n\n\nI'll comment on using median time generally in Jorge's thread, but why does\nmonotonically increasing matter for max block size? I can't think of a\nreason why a max block size of X bytes in block N followed by a max size of\nX-something bytes in block N+1 would cause any problems.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/f7208138/attachment.html>"
            },
            {
                "author": "Suhas Daftuar",
                "date": "2015-07-30T16:41:55",
                "message_text_only": "On Thu, Jul 30, 2015 at 12:20 PM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> So we'd get to 2MB blocks in the year 2021. I think that is much too\n> conservative, and the most likely effect of being that conservative is that\n> the main blockchain becomes a settlement network, affordable only for\n> large-value transactions.\n>\n\nWhile that may be true I think that's okay -- if it turns out that this is\ntoo conservative, and we succeed in scaling the system so that it's\nnon-controversial to increase these limits later via another hard fork, we\nwould still be free to do so.\n\nIt seems to me that everyone who has been arguing recently to increase the\nblock size limit ought to find this proposal to be a strict improvement\nover where we are now, and this proposal seems like it's reasonably likely\nto be non-controversial enough to be worth proposing as a hard fork in\nBitcoin Core -- thank you Pieter for putting this together.\n\nFor my part, I'd give this a concept ACK, pending hearing further thoughts\nfrom others.\n\nSuhas Daftuar\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/ddb717c7/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-30T16:48:18",
                "message_text_only": "That's what is nice about proposals, they are constructive and help\nmove the conversation forward!\n\nOn 30 July 2015 at 18:20, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Specific comments:\n>\n> So we'd get to 2MB blocks in the year 2021. I think that is much too\n> conservative, and the most likely effect of being that conservative is that\n> the main blockchain becomes a settlement network, affordable only for\n> large-value transactions.\n\nBut, if we agree that 17%/year is consistent with network\nimprovements, by arguing this is too conservative, does that not mean\nyou are actually going beyond suggesting throughput increases to\nbenefit from bandwidth improvements, and explicitly arguing to\nborrowing from Bitcoin's already very weak decentralisation to create\nmore throughput?  (Or arguing to subsidise transaction fees if\nborrowing so deeply that excess capacity pushes beyond demand).\n\nI think the logical implication of this would be that we should be\nfirst focussing on improving decentralisation, to make security room\nto reclaim extra throughput.\n\n(To be clear there are concrete things that can be done and actually\nare being done to improve decentralisation via ecosystem education and\nmining protocol improvements, but it's safer to wait a few months and\nsee if those things take effect well).\n\nSecondly in this assumption are you considering that lightning will\nlikely be online for many years by 2021 and the situation will be\nhugely different?\n\nI think an incremental and conservative approach is safer.  People can\nprobably get a lightning prototype running about as fast as a\nhard-fork could be safely rolled out.\n\nI do think it is normal to be conservative with security and with $4b\nof other peoples money.  It's no longer an experimental system to\nconsider fail fast experiments on.\n\n> I don't think your proposal strikes the right balance between centralization\n> of payments (a future where only people running payment hubs, big merchants,\n> exchanges, and wallet providers settle on the blockchain) and centralization\n> of mining.\n\nWhat criteria should we be using in your opinion to balance?  I think\nthroughput increases trading off decentralisation would be more\nreasonable if decentralisation wasnt in very bad shape.\n\nAdam"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-07-30T16:49:52",
                "message_text_only": "On Jul 30, 2015 6:20 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>\n> On Thu, Jul 30, 2015 at 10:25 AM, Pieter Wuille via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Some things are not included yet, such as a testnet whose size runs\nahead of the main chain, and the inclusion of Gavin's more accurate sigop\nchecking after the hard fork.\n>>\n>> Comments?\n>\n>\n> First, THANK YOU for making a concrete proposal!\n\nYou're welcome.\n\n> Specific comments:\n>\n> So we'd get to 2MB blocks in the year 2021. I think that is much too\nconservative, and the most likely effect of being that conservative is that\nthe main blockchain becomes a settlement network, affordable only for\nlarge-value transactions.\n\nIf there is demand for high-value settlements in Bitcoin, and this results\nin a functioning economy where fees support the security of a transparent\nnetwork, I think that would be a much better outcome than what we have now.\n\n> I don't think your proposal strikes the right balance between\ncentralization of payments (a future where only people running payment\nhubs, big merchants, exchanges, and wallet providers settle on the\nblockchain) and centralization of mining.\n\nWell, centralization of mining is already terrible. I see no reason why we\nshould encourage making it worse. On the other hand, sure, not every\ntransaction fits on the blockchain. That is already the case, and will\nremain the case with 2 MB or 8 MB or 100 MB blocks. Some use cases fit, and\nothers won't. We need to accept that, and all previous proposals I've seen\ndon't seem to do that.\n\nMaybe the only ones that will fit are large settlements between layer-2\nservices, and maybe it will be something entirely different. But at least\nwe don't need to compromise the security of the main layer, or promise the\necosystem unrealistic growth of space for on-chain transactions.\n\nIf Bitcoin needs to support a large scale, it already failed.\n\n> I'll comment on using median time generally in Jorge's thread, but why\ndoes monotonically increasing matter for max block size? I can't think of a\nreason why a max block size of X bytes in block N followed by a max size of\nX-something bytes in block N+1 would cause any problems.\n\nI don't think it matters much, but it offers slightly easier transition for\nthe mempool (something Jorge convinced me of), and validation can benefit\nfrom a single variable that can be set in a chain to indicate a switchover\nhappened, without needing to recalculate it every time.\n\nI assume you're asking this because using raw nTime means you can check\nwhat limits a p2p message should obey to by looking at just the first\nbytes. I don't think this matters: your p2p protocol should deal with\nwhatever limits the system requires anyway. An attacker can take a valid\nmessage of far in the chain, change a few bytes, and spam you with it at\nzero extra effort anyway.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/fb2a6d86/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-31T10:16:46",
                "message_text_only": "I agree with Gavin - whilst it's great that a Blockstream employee has\nfinally made a realistic proposal (i.e. not \"let's all use Lightning\") -\nthis BIP is virtually the same as keeping the 1mb cap.\n\n> Well, centralization of mining is already terrible. I see no reason why we\n> should encourage making it worse.\n>\nCentralization of mining has been a continual gripe since Slush first\ninvented pooled mining. There has never been a time after that when people\nweren't talking about the centralisation of mining, and back then blocks\nwere ~10kb.\n\nI see constant assertions that node count, mining centralisation,\ndevelopers not using Bitcoin Core in their own businesses etc is all to do\nwith block sizes. But nobody has shown that. Nobody has even laid the\ngroundwork for that. Verifying blocks takes milliseconds and downloading\nthem takes seconds everywhere except, apparently, China: this resource\nusage is trivial.\n\nYet developers, miners and users even outside of China routinely delegate\nvalidation to others. Often for quite understandable technical reasons that\nhave nothing to do with block sizes.\n\nSo I see no reason why arbitrarily capping the block size will move the\nneedle on these metrics. Trying to arrest the growth of Bitcoin for\neveryone won't suddenly make Bitcoin-Qt a competitive wallet, or make\nservice devs migrate away from chain.com, or make merchants stop using\nBitPay.\n\nWe need to accept that, and all previous proposals I've seen don't seem to\n> do that.\n>\nI think that's a bit unfair: BIP 101 keeps a cap. Even with 8mb+growth\nyou're right, some use cases will be priced out. I initiated the\nmicropayment channels project (along with Matt, tip of the hat)\nspecifically to optimise a certain class of transactions. Even with 8mb+\nblocks, there will still be a need for micropayment channels, centralised\nexchange platforms and other forms of off chain transaction.\n\nIf Bitcoin needs to support a large scale, it already failed.\n>\nIt hasn't even been tried.\n\nThe desperately sad thing about all of this is that there's going to be a\nfork, and yet I think most of us agree on most things.  But we don't agree\non this.\n\nBitcoin can support a large scale and it must, for all sorts of reasons.\nAmongst others:\n\n   1. Currencies have network effects. A currency that has few users is\n   simply not competitive with currencies that have many. There's no such\n   thing as a settlement currency for high value transactions only, as\n   evidenced by the ever-dropping importance of gold.\n\n\n   2. A decentralised currency that the vast majority can't use doesn't\n   change the amount of centralisation in the world. Most people will still\n   end up using banks, with all the normal problems. You cannot solve a\n   problem by creating a theoretically pure solution that's out of reach of\n   ordinary people: just ask academic cryptographers!\n\n\n   3. Growth is a part of the social contract. It always has been.\n\n   The best quote Gregory can find to suggest Satoshi wanted small blocks\n   is a one sentence hypothetical example about what *might* happen if\n   Bitcoin users became \"tyrannical\" as a result of non-financial transactions\n   being stuffed in the block chain. That position makes sense because his\n   scaling arguments assuming payment-network-sized traffic and throwing DNS\n   systems or whatever into the mix could invalidate those arguments, in the\n   absence of merged mining. But Satoshi did invent merged mining, and so\n   there's no need for Bitcoin users to get \"tyrannical\": his original\n   arguments still hold.\n\n\n   4. All the plans for some kind of ultra-throttled Bitcoin network used\n   for infrequent transactions neglect to ask where the infrastructure for\n   that will come from. The network of exchanges, payment processors and\n   startups that are paying people to build infrastructure are all based on\n   the assumption that the market will grow significantly. It's a gamble at\n   best because Bitcoin's success is not guaranteed, but if the block chain\n   cannot grow it's a gamble that is guaranteed to be lost.\n\n   So why should anyone go through the massive hassle of setting up\n   exchanges, without the lure of large future profits?\n\n\n   5. Bitcoin needs users, lots of them, for its political survival. There\n   are many people out there who would like to see digital cash disappear, or\n   be regulated out of existence. They will argue for that in front of\n   governments and courts .... some already are. And if they're going to lose\n   those arguments, the political and economic damage of getting rid of\n   Bitcoin must be large enough to make people think twice. That means it\n   needs supporters, it needs innovative services, it needs companies, and it\n   needs legal users making legal payments: as many of them as possible.\n\n   If Bitcoin is a tiny, obscure currency used by drug dealers and a\n   handful of crypto-at-any-cost geeks, the cost of simply banning it outright\n   will seem trivial and the hammer will drop. There won't be a large scale\n   payment network OR a high-value settlement network. And then the world is\n   really screwed, because nobody will get a second chance for a very long\n   time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/426fe26f/attachment-0001.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-31T11:43:58",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nMike Hearn, I might be a nobody to you, but you know i talk with\nskill,  so let me tell this Friday...\n\n\nOn 07/31/2015 05:16 PM, Mike Hearn via bitcoin-dev wrote:\n> I agree with Gavin\nYou would, of course.\n\n> Bitcoin can support a large scale and it must, for all sorts of \n> reasons. Amongst others:\n> \n> 1. Currencies have network effects. A currency that has few users \n> is simply not competitive with currencies that have many. There's \n> no such thing as a settlement currency for high value transactions \n> only, as evidenced by the ever-dropping importance of gold.\n\nReferences are imperative if you want to appeal to intelligence in\nthis list. Studies. Impirical evidence. The above sounds like a a\nmainstream precis of how money works - an over-simplistic precis. It's\nmore complex than that. Besides, all we know for a fact is that\ncurrencies come and go. That's not me being down on Bitcoin - that is\nthe historical record.\n\n> \n> 2. A decentralised currency that the vast majority can't use \n> doesn't change the amount of centralisation in the world. Most \n> people will still end up using banks, with all the normal\n> problems. You cannot solve a problem by creating a theoretically\n> pure solution that's out of reach of ordinary people: just ask\n> academic cryptographers!\n\nConjecture. And assumption. Banks might not accept most people\nforever. Or banks' credibility might not survive the next credit\ncontraction, for example.\n\n> \n> 3. Growth is a part of the social contract. It always has been.\n> \nHalf the story. Casual observation shows that growth and contraction\nalternate at every level of existence. Just because the present\nfiat-era credit expansion has lasted 40 years does not mean that the\neconomy will keep expanding forever.\n\n> The best quote Gregory can find to suggest Satoshi wanted small \n> blocks is a one sentence hypothetical example about what /might/\n[snip]\n\nyes, anyway, Greg Maxwell was justified in bringing you down a few\nnotches from your \"I am Satoshi's rep on earth\" history revision, you\nwere spinning there.\n\n\n> 4. All the plans for some kind of ultra-throttled Bitcoin network \n> used\n\n[snip]\n\n> The network of exchanges, payment processors and startups that are \n> paying people to build infrastructure are all based on _the \n> assumption_ that the market will grow significantly.\nThe assumption (my emphasis). You've seen that movie Pulp Fiction:\n\"Assume makes an \"ass\" of \"U\" and \"me\". Business + assumption =\ngambling and potential loss of funds.\n\nThe ass-U-me cannot be laid at the doorstep of those developers who\nprioritize security, decentralization and conservative, tested\nprogress of scaling.\n\n> So why should anyone go through the massive hassle of setting up \n> exchanges, without the lure of large future profits?\n> \nTheir SWOT analysis includes risks from the banking sector, too. Plus\ncompetition from other exchanges. A sapling 0.x Bitcoin community is\nnot responsible for nannying anyone's lucrative business model at the\nexpense of security. How would that make the developers look in\nrelation to their duty of custody of the protocol? To this and future\ngenerations: Not Good.\n> \n> 5. Bitcoin needs users, lots of them, for its political survival. \n> There are many people out there who would like to see digital cash \n> disappear, or be regulated out of existence.\nNonsense, and again that assumption about \"how things work\" you like\nto high horse so. Bitcoin's political survival is guaranteed by its\ncensorship resistance and its array of innovative and unique utility\nfunctions. What's more, the caliber of developer working on Bitcoin is\nnot just pulled out of a hat and harnessed for an arbitrary altcoin.\nSometimes the fire of moral incentive overrides monetary reward.\n\nThe Fed, Nasdaq, IBM, and every other company whose trusted authority\nis being threatened by this flagship are developing blockchains in a\nhurry. How is that \"many people out there who would like to see\ndigital cash disappear\"? Why would you even type such a blatant falsehood?\n\n> If Bitcoin is a tiny, obscure currency used by drug dealers and a \n> handful of crypto-at-any-cost geeks, the cost of simply banning it \n> outright will seem trivial and the hammer will drop. There won't be\n> a large scale payment network OR a high-value settlement network.\n> And then the world is really screwed, because nobody will get a\n> second chance for a very long time.\n> \nThat is a low estimation of Bitcoin. Your framing does not honor\nBitcoin or the hard work - your _own_ hard work - on this project.\n\nIf you noticed, there has been an increase in technical discussion in\nthis list in recent days - with the goal of comparing and testing the\nvarious blocksize proposals.\n\nMike Hearn, I am sorry to say that your pronouncements sound like jazz\n- - but jazz without rhythm.\n\n\n\"So what?\" - Miles Davis\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVu199AAoJEGwAhlQc8H1mkCMH/iWnFDXAGc5GEjLi81dRLUnz\n3UfciwOiby8r+7pvyDsuMYR/9RQZv2RlFoMFjUBkJxwvdUh3eXY5tsQ6F209O+gk\nQleFaTKCZLVuZg5UBbwBttGfK3MmejueGWNhExYnlbm6yXpBa2jt0i5n0tr++zVw\nRN+zAejOy2OEBjs7jkodgVdy7kfCXsfsn/DKGdSO7nE9m5q0ocuUFBLEf/PJErBw\nNncLSDhd2SfVz3Q7L9UrGqKIgQTJT1nR9kJmSPCasIRoLWJzfNemH6RL3XcmiACn\nxIQBN19FPnKLv1OY3GlFLlmIlq0mu6MeidJsPl80yyI2h4SciCp39T1Ah/tCnf4=\n=2uWe\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T11:51:04",
                "message_text_only": "On Fri, Jul 31, 2015 at 12:16 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Well, centralization of mining is already terrible. I see no reason why we\n>> should encourage making it worse.\n>\n> I see constant assertions that node count, mining centralisation, developers\n> not using Bitcoin Core in their own businesses etc is all to do with block\n> sizes. But nobody has shown that. Nobody has even laid the groundwork for\n> that. Verifying blocks takes milliseconds and downloading them takes seconds\n> everywhere except, apparently, China: this resource usage is trivial.\n\nHe is not saying that. Whatever the reasons for centralization are, it\nis obvious that increasing the size won't help.\nIn the best case, it will only make it slightly worse. How big of a\n\"slightly worse\" are we willing to risk to increase the size is the\nopen question.\n\n> So I see no reason why arbitrarily capping the block size will move the\n> needle on these metrics. Trying to arrest the growth of Bitcoin for everyone\n> won't suddenly make Bitcoin-Qt a competitive wallet, or make service devs\n> migrate away from chain.com, or make merchants stop using BitPay.\n\nAs far as I know, people just want to change an arbitrary number for\nanother arbitrary number.\nBut this arbitrary cap is a cap to centralization, not a tool to make\nBitcoin-Qt more important or to attack concrete Bitcoin companies like\nyou seem to think.\nIf you don't think the blocksize cap helps limiting centralization and\nyou think it would be fine to completely remove it, then it would be\nbetter for the conversation that you said that directly instead of\nsupporting other arbitrary caps like 8GB (bip101).\n\nI think it would be nice to have some sort of simulation to calculate\na \"centralization heuristic\" for different possible blocksize values\nso we can compare these arbitrary numbers somehow. Even if the first\ndefinition of this \"centralization heuristic\" is stupid, it would be\nbetter than keep rolling dices and heatedly defend one result over\nanother.\nTo reiterate, If you don't think the blocksize cap helps limiting\ncentralization, please, say so.\nIf we can't agree on what the limit is for, we will never be able to\nagree on whether 1MB (current situation) or 8GB (bip101) is the most\nappropriate value to have at a given point in time.\n\n>> We need to accept that, and all previous proposals I've seen don't seem to\n>> do that.\n>\n> I think that's a bit unfair: BIP 101 keeps a cap. Even with 8mb+growth\n> you're right, some use cases will be priced out. I initiated the\n> micropayment channels project (along with Matt, tip of the hat) specifically\n> to optimise a certain class of transactions. Even with 8mb+ blocks, there\n> will still be a need for micropayment channels, centralised exchange\n> platforms and other forms of off chain transaction.\n\nLightning is nothing more than a better design for trustless payment\nchannels, but it's really good that you agree that if we want to scale\nnot everything can be broadcast in-chain.\n\n>> If Bitcoin needs to support a large scale, it already failed.\n>\n> It hasn't even been tried.\n\nWhat he means is that if Bitcoin needs to support a scale that is only\nfeasible with high degrees of centralization (say, supporting 1 M tx/s\nright now), then it has already failed in its decentralization goals.\nIn fact, with only a few miners, I'm not sure regulators will still\nagree Bitcoin transactions are irreversible...\nBut you are right, we haven't tried to destroy bitcoin by removing the\nonly available consensus tool to limit centralization yet.\nI don't want to try, do you?\n\n> A decentralised currency that the vast majority can't use doesn't change the\n> amount of centralisation in the world. Most people will still end up using\n> banks, with all the normal problems. You cannot solve a problem by creating\n> a theoretically pure solution that's out of reach of ordinary people: just\n> ask academic cryptographers!\n\nLet's go to \"most people use bitcoin\" first and then think about \"many\npeople ONLY use Bitcoin\" later, please.\nI believe everybody here thinks that the more people are able to use\nBitcoin, the better.\nBut that doesn't\n\n> All the plans for some kind of ultra-throttled Bitcoin network used for\n> infrequent transactions neglect to ask where the infrastructure for that\n> will come from. The network of exchanges, payment processors and startups\n> that are paying people to build infrastructure are all based on the\n> assumption that the market will grow significantly. It's a gamble at best\n> because Bitcoin's success is not guaranteed, but if the block chain cannot\n> grow it's a gamble that is guaranteed to be lost.\n\nRisking destroying Bitcoin through centralization to be able to keep\nfree transactions for longer it's a very risky gamble.\nDoing so explicitly against the will of some of the users by promoting\nschism hardfork, and thus risking to economically destroy both Bitcoin\nand Bitcoin_new_size (different currencies) in the process is also a\nvery risky gamble.\nSo may want to give some example of responsibility yourself to make\nthese calls to responsibility more credible.\nYou certainly cannot know what \"all the payment processors and\nstartups plans\" are based on, and spreading conspiracy theories about\nthe evil secret plans of Blockstream (or any other Bitcoin company)\ndoesn't help in keeping this discussion civilized, contaminates\nbitcoin development in general and unhealthily polarizes the whole\nBitcoin ecosystem. Also, I believe is doing a disservice to your\nreputation among technical people, but since you don't seem worried\nabout that, why should I be?\n\n> So why should anyone go through the massive hassle of setting up exchanges,\n> without the lure of large future profits?\n\nAre you suggesting that bitcoin consensus rules should be designed to\nmaximize the profits of Bitcoin exchanges?\nI assume not, but I'm really having troubles trying to read the\nquestion with another meaning.\nCan you rephrase this, please?"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-31T12:15:04",
                "message_text_only": "Hey Jorge,\n\nHe is not saying that. Whatever the reasons for centralization are, it\n> is obvious that increasing the size won't help.\n>\n\nIt's not obvious. Quite possibly bigger blocks == more users == more nodes\nand more miners.\n\nTo repeat: it's not obvious to me at all that everything wrong with Bitcoin\ncan be solved by shrinking blocks. I don't think that's going to suddenly\nmake everything magically more decentralised.\n\nThe 8mb cap isn't quite arbitrary. It was picked through negotiation with\ndifferent stakeholders, in particular, Chinese miners. But it should be\nhigh enough to ensure organic growth is not constrained, which is good\nenough.\n\nI think it would be nice to have some sort of simulation to calculate\n> a \"centralization heuristic\" for different possible blocksize values\n> so we can compare these arbitrary numbers somehow.\n\n\nCentralization is not a single floating point value that is controlled by\nblock size. It's a multi-faceted and complex problem. You cannot \"destroy\nBitcoin through centralization\" by adjusting a single constant in the\nsource code.\n\nTo say once more: block size won't make much difference to how many\nmerchants rely on payment processors because they aren't using them due to\nblock processing overheads anyway. So trying to calculate such a formula\nwon't work. Ditto for end users on phones, ditto for developers who want\nJSON/REST access to an indexed block chain, or hosted wallet services, or\nminers who want to reduce variance.\n\nNone of these factors have anything to do with traffic levels.\n\nWhat people like you are Pieter are doing is making a single number a kind\nof proxy for all fears and concerns about the trend towards outsourcing in\nthe Bitcoin community. Everything gets compressed down to one number you\nfeel you can control, whether it is relevant or not.\n\n> So why should anyone go through the massive hassle of setting up\n> exchanges,\n> > without the lure of large future profits?\n>\n> Are you suggesting that bitcoin consensus rules should be designed\n> to maximize the profits of Bitcoin exchanges?\n>\n\nThat isn't what I said at all Jorge. Let me try again.\n\nSetting up an exchange is a lot of risky and expensive work. The motivation\nis profit, and profits are higher when there are more users to sell to.\nThis is business 101.\n\nIf you remove the potential for future profit, you remove the motivation to\ncreate the services that we now enjoy and take for granted. Because if you\nthink Bitcoin can be useful without exchanges then let me tell you, I was\naround when there were none. Bitcoin was useless.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/ec8dafa6/attachment.html>"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-07-31T13:07:42",
                "message_text_only": "> Quite possibly bigger blocks == more users == more nodes and more miners.\n\nI agree and would say that this is the only prediction of bitcoin's future\nwe can be absolutely sure of: more users equals more decentralization as\nlong as the cost of running a node is not prohibitively high.\n\nIt's incredibly cheap today and won't be too high with any of the current\nproposals for the time being. If the \"laws\" of Nielsen & co suddenly don't\napply anymore, we can always react to that with another hardfork reducing\nthe rate of growth. Hardforks are way easier if the network is in danger\nand the necessary change is obvious and non-controversial (e.g. \"reduce\nblocksize limit growth\").\n\nAs long as hobbyists can participate in running the network and it's\naffordable for everyone to transact on it, bitcoin will grow and its\ndecentralization with it, however you measure it.\n\n2015-07-31 14:15 GMT+02:00 Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Hey Jorge,\n>\n> He is not saying that. Whatever the reasons for centralization are, it\n>> is obvious that increasing the size won't help.\n>>\n>\n> It's not obvious. Quite possibly bigger blocks == more users == more nodes\n> and more miners.\n>\n> To repeat: it's not obvious to me at all that everything wrong with\n> Bitcoin can be solved by shrinking blocks. I don't think that's going to\n> suddenly make everything magically more decentralised.\n>\n> The 8mb cap isn't quite arbitrary. It was picked through negotiation with\n> different stakeholders, in particular, Chinese miners. But it should be\n> high enough to ensure organic growth is not constrained, which is good\n> enough.\n>\n> I think it would be nice to have some sort of simulation to calculate\n>> a \"centralization heuristic\" for different possible blocksize values\n>> so we can compare these arbitrary numbers somehow.\n>\n>\n> Centralization is not a single floating point value that is controlled by\n> block size. It's a multi-faceted and complex problem. You cannot \"destroy\n> Bitcoin through centralization\" by adjusting a single constant in the\n> source code.\n>\n> To say once more: block size won't make much difference to how many\n> merchants rely on payment processors because they aren't using them due to\n> block processing overheads anyway. So trying to calculate such a formula\n> won't work. Ditto for end users on phones, ditto for developers who want\n> JSON/REST access to an indexed block chain, or hosted wallet services, or\n> miners who want to reduce variance.\n>\n> None of these factors have anything to do with traffic levels.\n>\n> What people like you are Pieter are doing is making a single number a kind\n> of proxy for all fears and concerns about the trend towards outsourcing in\n> the Bitcoin community. Everything gets compressed down to one number you\n> feel you can control, whether it is relevant or not.\n>\n> > So why should anyone go through the massive hassle of setting up\n>> exchanges,\n>> > without the lure of large future profits?\n>>\n>> Are you suggesting that bitcoin consensus rules should be designed\n>> to maximize the profits of Bitcoin exchanges?\n>>\n>\n> That isn't what I said at all Jorge. Let me try again.\n>\n> Setting up an exchange is a lot of risky and expensive work. The\n> motivation is profit, and profits are higher when there are more users to\n> sell to. This is business 101.\n>\n> If you remove the potential for future profit, you remove the motivation\n> to create the services that we now enjoy and take for granted. Because if\n> you think Bitcoin can be useful without exchanges then let me tell you, I\n> was around when there were none. Bitcoin was useless.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/1e4a3fc2/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-31T14:33:14",
                "message_text_only": "On Fri, Jul 31, 2015 at 2:15 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> Hey Jorge,\n>\n>> He is not saying that. Whatever the reasons for centralization are, it\n>> is obvious that increasing the size won't help.\n>\n>\n> It's not obvious. Quite possibly bigger blocks == more users == more nodes\n> and more miners.\n\nHow more users or more nodes can bring more miners, or more\nimportantly, improve mining decentralization?\n\n> To repeat: it's not obvious to me at all that everything wrong with Bitcoin\n> can be solved by shrinking blocks. I don't think that's going to suddenly\n> make everything magically more decentralised.\n\nI don't think anybody is defending that position so you can stop refuting it.\n\n> The 8mb cap isn't quite arbitrary. It was picked through negotiation with\n> different stakeholders, in particular, Chinese miners. But it should be high\n> enough to ensure organic growth is not constrained, which is good enough.\n\nWell, negatiations don't make the number less arbitrary. As far as I\nknow, the sequence of events was this:\n\n1) Gavin proposes 20MB to 20GB\n2) Some chinese miners say they can securely handle at most 8 MB.\n3) Gavin proposes 8 MB to 8 GB\n\nIn any case, history is irrelevant for this point: if party 1 proposes\narbitrary value A and party 2 proposes arbitrary value B, any\n\"compromise\" value between those 2 is still an arbitrary value. For\nexample, A + ((B-A)/2) is still an arbitrary value.\n\nI'm sorry, but until there's a simulation that I can run with\ndifferent sizes' testchains (for example using #6382) to somehow\ncompare them, I will consider any value arbitrary. A \"I run this with\nblocksize=X and nothing seems to have broken\" doesn't help here.\nWe need to compare, and a criterion to compare.\n\n>> I think it would be nice to have some sort of simulation to calculate\n>> a \"centralization heuristic\" for different possible blocksize values\n>> so we can compare these arbitrary numbers somehow.\n>\n>\n> Centralization is not a single floating point value that is controlled by\n> block size. It's a multi-faceted and complex problem. You cannot \"destroy\n> Bitcoin through centralization\" by adjusting a single constant in the source\n> code.\n\nAgreed on the first sentence, I'm just saying that the influence of\nthe blocksize in that function is monotonic: with bigger sizes, equal\nor worse mining centralization.\nAbout the second sentence, yes, I could destroy Bitcoin by changing\none single constant if I could somehow force users to adopt my version\nof the software. I'm sure I can actually find several examples if\nnecessary. \"Through centralization\" is harder, but say we chose\nstd::numeric_limits<int64_t>::max() as the maximum block size (in\npractice, entirely removing the block size limit), then the consensus\nrules don't have any rule to limit mining centralization.\nSacrificing that tool, and doing so this early on could certainly turn\nBitcoin into an effectively centralized system, destroying Bitcoin (or\nat least the \"p2p currency\" part of it, which is the most interesting\none for many Bitcoin users including me).\nSo, once it's clear that nobody is saying that centralization depends\nONLY on the block size, can you tell us please if you think it's\nuseful for limiting mining centralization or not?\nIf you think the blocksize consensus limit does nothing to limit\ncentralization then there's no tradeoff to consider and you should be\nconsequently advocating for full removal of the limit rather than\nchanges towards bigger arbitrary values.\nOtherwise you may want to explain why you think 8 GB is enough of a\nlimit to impede further centralization.\n\n> To say once more: block size won't make much difference to how many\n> merchants rely on payment processors because they aren't using them due to\n> block processing overheads anyway. So trying to calculate such a formula\n> won't work. Ditto for end users on phones, ditto for developers who want\n> JSON/REST access to an indexed block chain, or hosted wallet services, or\n> miners who want to reduce variance.\n\nSorry, I don't know about Pieter, but I was mostly talking about\nmining centralization, certainly not about payment services.\n\n> What people like you are Pieter are doing is making a single number a kind\n> of proxy for all fears and concerns about the trend towards outsourcing in\n> the Bitcoin community. Everything gets compressed down to one number you\n> feel you can control, whether it is relevant or not.\n\nNo, that's not what we are doing.\nIt's good that you talk about your fears but, please, let other people\ntalk about theirs on their own.\n\n>> > So why should anyone go through the massive hassle of setting up\n>> > exchanges,\n>> > without the lure of large future profits?\n>>\n>> Are you suggesting that bitcoin consensus rules should be designed to\n>> maximize the profits of Bitcoin exchanges?\n>\n>\n> That isn't what I said at all Jorge. Let me try again.\n>\n> Setting up an exchange is a lot of risky and expensive work. The motivation\n> is profit, and profits are higher when there are more users to sell to. This\n> is business 101.\n\nI can imagine a non-for-profit exchange but there's no point in\nfinding edge cases: no general disagreement here.\n\n> If you remove the potential for future profit, you remove the motivation to\n> create the services that we now enjoy and take for granted. Because if you\n> think Bitcoin can be useful without exchanges then let me tell you, I was\n> around when there were none. Bitcoin was useless.\n\nMy first post on the bitcoin forums (and vague hardfork proposal, I\nstarted reading in December 2010) was January 21, 2011 (vs yours Dec\n14th 2010, as Greg pointed out in the other thread). I bought my first\nbitcoins (and also sold most of them shortly after, stupid me) using\nsome web that used paypal and was closed down not too long after that.\nAt first I couldn't participate in exchanges because I had no Liberty\nReserve account...\nLook, I'm sure there's many stories about how we met Bitcoin that we\ncan share having a beer in a bar or something. But probably most of\nthe subscribers to this list don't really care, and if they care they\ncan ask us privately, or you can create a new thread (probably better\nin bitcointalk or somewhere else than here): they are completely\nirrelevant in this technical discussion.\n\nSo, back on-topic: do I agree that exchanges are extremely important\nfor the Bitcoin ecosystem?\nYes, of course I do.\nBut that doesn't mean that their \"potential for future profit\" should\nbe a primary concern when deciding consensus rules changes that affect\nALL users.\nBut even before that, I disagree with the premise that \"not rising the\nconsensus blocksize as soon as possible\" will ruin the exchanges or\n\"remove their potential for future profit\"."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-07-31T14:58:59",
                "message_text_only": ">\n> How more users or more nodes can bring more miners, or more importantly,\n> improve mining decentralization?\n>\n\nBecause the bigger the ecosystem is the more interest there is in taking\npart?\n\nI mean, I guess I don't know how to answer your question. When Bitcoin was\nnew it had almost no users and almost no miners. Now there are millions of\nusers and factories producing ASICs just for Bitcoin. Surely the\ncorrelation is obvious?\n\nI'm sorry, but until there's a simulation that I can run with different\n> sizes' testchains (for example using #6382) to somehow compare them, I will\n> consider any value arbitrary.\n>\n\nGavin did run simulations. 20mb isn't arbitrary, the process behind it was\nwell documented here:\n\nhttp://gavinandresen.ninja/does-more-transactions-necessarily-mean-more-centralized\n\n*I chose 20MB as a reasonable block size to target because 170 gigabytes\nper month comfortably fits into the typical 250-300 gigabytes per month\ndata cap\u2013 so you can run a full node from home on a \u201cpretty good\u201d broadband\nplan.*\nDid you think 20mb was picked randomly?\n\n\n> Agreed on the first sentence, I'm just saying that the influence of\n> the blocksize in that function is monotonic: with bigger sizes, equal\n> or worse mining centralization.\n>\n\nI have a hard time agreeing with this because I've seen Bitcoin go from\nblocks that were often empty to blocks that are often full, and in this\ntime the number of miners and hash power on the network has gone up a huge\namount too.\n\nYou can argue that a miner doesn't count if they pool mine. But if a miner\nmines on a pool that uses exactly the same software and settings as the\nminer would have done anyway, then it makes no difference. Miners can\nswitch between pools to find one that works the way they like, so whilst\nless pooling or more decentralised pools would be nice (e.g.\ngetblocktemplate), and I've written about how to push it forward before, I\nstill say there are many more miners than in the past.\n\nIf I had to pick between two changes to improve mining decentralisation:\n\n1) Lower block size\n2) Finishing, documenting, and making the UX really slick for a\ngetblocktemplate based decentralised mining pool\n\nthen I'd pick (2) in a heartbeat. I think it'd be a lot more effective.\n\n\n> you should be consequently advocating for full removal of the limit rather\n> than changes towards bigger arbitrary values.\n>\n\nI did toy with that idea a while ago. Of course there can not really be no\nlimit at all because the code assumes blocks fit into RAM/swap, and nodes\nwould just end up ignoring blocks they couldn't download in time anyway.\nThere is obviously a physical limit somewhere.\n\nBut it is easier to find common ground with others by compromising. Is 8mb\nbetter than no limit? I don't know and I don't care much:  I think Bitcoin\nadoption is a slow, hard process and we'll be lucky to increase average\nusage 8x over the next couple of years. So if 8mb+ is better for others,\nthat's OK by me.\n\n\n\n> Sorry, I don't know about Pieter, but I was mostly talking about\n> mining centralization, certainly not about payment services.\n>\n\nOK. I write these emails for other readers too :) In the past for instance,\ndevelopers who run services without running their own nodes has come up.\n\nRe: exchange profit. You can pick some other useful service provider if you\nlike. Payment processors or cold storage providers or the TREZOR\nmanufacturers or whoever.\n\nMy point is you can't have a tiny high-value-transactions only currency AND\nall the useful infrastructure that the Bitcoin community is making. It's a\ncontradiction. And without the infrastructure bitcoin ceases to be\ninteresting even to people who are willing to pay huge sums to use it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/7730a126/attachment-0001.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-07-31T15:28:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n\nOn 07/31/2015 09:58 PM, Mike Hearn via bitcoin-dev wrote:\n> How more users or more nodes can bring more miners, or more\n> importantly, improve mining decentralization?\n> \n> \n> Because the bigger the ecosystem is the more interest there is in\n> taking part?\n\nThe logic just flows from one to the other does it? So because Islam\nis the biggest religious ecosystem in the world now you and me are\njust burning to take part?\n\nBy your logic, most people in Asia would horde (or want to pay using)\nChinese Yuan, only they don't. The Yuan and the Yen are the dominant\ncurrencies of large transaction settlement in the region, but try to\nuse it on the street and you're met with puzzled bemusement, Mike Hearn.\n\nBitcoin is not suitable as a currency for pervasive dominance, and\nideals of pushing it into every heart and mind around the globe is no\ndifferent from religious zealotry.\n\nBitcoin has its place and we're only at the beginning of a gradual\nevolution. How can I say that? Because I'm looking across the rice\npaddy to where my neighbors have not adopted the innovation of the\nlightbulb, and burn candles for light and cook with gas. And they're\nnot an anomaly around here or in Asia, Africa and South America.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVu5QvAAoJEGwAhlQc8H1m1DQH/i54c+ZBnk9tZK+0PfC2G0rT\ntaLpqvmXGOHPaSqkfHOLjLOm9LxGAw3TZpFIkFSuSuiSlwDfii2VIlKsbYSCEbBe\ntwCaZuNqam4r+61755ADrvPziPx3Tr2GXN7Zc635prN9uGoGCu58xxc7Iy8sTsrf\nvB430ZN5RhagpFG5LCqN4QmDGQlK+ceYh53jLQ5HpNP/8UsOJjGXdnZfb4V24EFW\n0NPAWdmWVFVpEPxqbsmAGjzOPVdocSQuRTekOQHJ7e5XNmHaD3YGHI+hwBDKzcD+\ntUuFh7v4C684172PwandfJGAtUJMeavdh+IA21fze3+trrcTOVOZMHr+HEfmWGs=\n=AToN\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Elliot Olds",
                "date": "2015-07-31T20:09:58",
                "message_text_only": "On Fri, Jul 31, 2015 at 7:58 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> But it is easier to find common ground with others by compromising. Is 8mb\n> better than no limit? I don't know and I don't care much:\n>\n\nPeople seeing statements like this might imagine that if you knew a change\nfrom 1MB blocks to 1GB blocks would ensure fees were 10 cents for the next\ntwo years instead of 30 cents over the next two years, you'd want to roll\nout 1GB blocks. Would you? Where is your cutoff? How large would you be\nwilling to make the block size in exchange for moving fees from 30 cents to\n10 cents for the next two years? How about $3 to 10 cents? $30 to 10 cents?\n\nHow do you think Greg/Pieter/Wlad/Adam/Jorge would answer those questions?\nI find it very hard to guess, but I think knowing how people would make\nthat specific tradeoff could be helpful in either starting a more\nproductive discussion, or at least realizing how far apart people are in\ntheir weighing of the risks of large blocks vs. the benefits of low fees.\n\nObviously the assumption that we have this two year stability period is\nunrealistic, but the hypothetical tells us how much of the disagreement\ncomes from \"if we increase the block size to lower fees, the low fees won't\nlast\" vs. \"the low fees aren't worth it even if they last.\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/20f72f7e/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-07-31T14:52:56",
                "message_text_only": "On Fri, Jul 31, 2015 at 7:15 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> He is not saying that. Whatever the reasons for centralization are, it\n>> is obvious that increasing the size won't help.\n>>\n>\n> It's not obvious. Quite possibly bigger blocks == more users == more nodes\n> and more miners.\n>\n\nWell, even in a centralized scheme you can have more users, more nodes and\nmore miners. Just having more does not mean that the system isn't\ncentralized, for example we can point to many centralized services such as\nPayPal that have trillions of users.\n\n\n> To repeat: it's not obvious to me at all that everything wrong with\n> Bitcoin can be solved by shrinking blocks. I don't think that's going to\n> suddenly make everything magically more decentralised.\n>\n\nNobody claimed that moving to smaller blocks would \"solve everything wrong\nwith Bitcoin\".\n\nYou cannot \"destroy Bitcoin through centralization\" by adjusting a single\n> constant in the source code.\n>\n\nWhy not? That's exactly the sort of change that would be useful to do so,\nin tandem with some forms of campaigning.\n\n\n> The motivation is profit, and profits are higher when there are more users\n> to sell to. This is business 101.\n>\n\nI am confused here; is that idea operating under an assumption (or rule)\nlike \"we shouldn't count aggregate transactions as representing multiple\nother transactions from other users\" or something? I have seen this idea in\na few places, and it would be useful to get a fix on where it's coming\nfrom. Does this belief extend to P2SH and multisig...?\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/65a5128a/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-07-30T17:46:30",
                "message_text_only": "On Thu, Jul 30, 2015 at 6:20 PM, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Jul 30, 2015 at 10:25 AM, Pieter Wuille via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> So we'd get to 2MB blocks in the year 2021. I think that is much too\n> conservative\n\nWhen considering \"too conservative\" options, let's not forget that,\nsay, scheduling 2MB for 2020 doesn't preclude us from deciding that\nwas too conservative and schedule, say 4MB for 2018 later. The first\nhardfork would be \"useless\", but it would set a \"minimum increase\"\nthat would have been useful if the second one never happened.\n\n> I'll comment on using median time generally in Jorge's thread, but why does\n> monotonically increasing matter for max block size? I can't think of a\n> reason why a max block size of X bytes in block N followed by a max size of\n> X-something bytes in block N+1 would cause any problems.\n\nTo be clear, for this concrete case block.nTime would just work just\nfine. I just want us to decide on one of the options and uniformly\nrecommend that options for all cases in BIP99 [just renamed the file,\nhttps://github.com/jtimon/bips/blob/bip-forks/bip-0099.org ].\nBut, yes, please, let's discuss this in the other thread."
            },
            {
                "author": "Thomas Zander",
                "date": "2015-07-30T20:20:43",
                "message_text_only": "On Thursday 30. July 2015 16.25.02 Pieter Wuille via bitcoin-dev wrote:\n> Hello all,\n> \n> here is a proposal for long-term scalability I've been working on:\n> https://gist.github.com/sipa/c65665fc360ca7a176a6\n> \n> Some things are not included yet, such as a testnet whose size runs ahead\n> of the main chain, and the inclusion of Gavin's more accurate sigop\n> checking after the hard fork.\n> \n> Comments?\n\n\nMaybe this part could use a bit more rationale, it looks like its a sudden and \nunexplained.\n\n>  No hard forking change that relaxes the block size limit can be guaranteed\n>  to provide enough space for every possible demand - or even any particular\n>  demand - unless strong centralization of the mining ecosystem is expected.\n-- \nThomas Zander"
            }
        ],
        "thread_summary": {
            "title": "Block size following technological growth",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Adam Back",
                "Suhas Daftuar",
                "Mike Hearn",
                "Thomas Zander",
                "Elliot Olds",
                "Marcel Jamin",
                "Jorge Tim\u00f3n",
                "Venzen Khaosan",
                "Mark Friedenbach",
                "Jameson Lopp",
                "Gary Mulder",
                "Pieter Wuille",
                "Gavin Andresen",
                "Greg Sanders"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 69653
        }
    },
    {
        "title": "[bitcoin-dev] Another block size limit solution - dynamic block size limit.",
        "thread_messages": [
            {
                "author": "\u041c\u0430\u043a\u0441\u0438\u043c \u0411\u043e\u0436\u043a\u043e",
                "date": "2015-07-30T15:03:25",
                "message_text_only": "I propose to implement dynamic block size limit. Its short summary is here\nin doc:\n\nhttps://docs.google.com/document/d/1ixt0loN7LOF6M_2HXvV0D-3ZCayvcfj0rzVm-h-6ONg/edit\n\nComments are allowed\n--\nMaksim Bozhko\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/2de678bc/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-07-31T02:02:14",
                "message_text_only": "On 7/30/2015 8:03 AM, \u041c\u0430\u043a\u0441\u0438\u043c \u0411\u043e\u0436\u043a\u043e via bitcoin-dev wrote:\n> I propose to implement dynamic block size limit. Its short summary is\n> here in doc:\n>\n> https://docs.google.com/document/d/1ixt0loN7LOF6M_2HXvV0D-3ZCayvcfj0rzVm-h-6ONg/edit\n>\n>\n\nA dynamic limit based on recent block sizes has been discussed, but with\nall the traffic on the list, finding the discussions is bound to be\ndifficult.\n\nI think the main reason this kind of thing hasn't gotten traction is\nthat it would allow miners alone to chart the course of block sizes. \nMiners are likely to have more powerful equipment than everybody else,\nand with the current network design, that could reduce the population of\nnodes able to keep up, with no limit in the loss of decentralization."
            }
        ],
        "thread_summary": {
            "title": "Another block size limit solution - dynamic block size limit.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "\u041c\u0430\u043a\u0441\u0438\u043c \u0411\u043e\u0436\u043a\u043e",
                "Tom Harding"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1134
        }
    },
    {
        "title": "[bitcoin-dev] A summary of block size hardfork proposals",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-30T18:14:50",
                "message_text_only": "Currently, there are 4 block size BIP by Bitcoin developers:\n\nBIP100 by Jeff:  \nhttp://gtf.org/garzik/bitcoin/BIP100-blocksizechangeproposal.pdf\nBIP101 by Gavin:  \nhttps://github.com/bitcoin/bips/blob/master/bip-0101.mediawiki\nBIP102 by Jeff: https://github.com/bitcoin/bips/pull/173/files\nBIP??? by Pieter (called \"BIP103\" below):  \nhttps://gist.github.com/sipa/c65665fc360ca7a176a6\n\nTo facilitate further discussion, I'd like to summarize these  \nproposals by a series of questions. Please correct me if I'm wrong.  \nSomething like sigop limit are less controversial and are not shown.\n\nShould we use a BIP34-like voting mechanism to initiate the hardfork?\nBIP100, 102, 103: No\nBIP101: Yes\n\nWhen should we initiate the hardfork?\nBIP100: 2016-01-11\nBIP101: 2 weeks after 75% miner support, but not before 2016-01-11\nBIP102: 2015-11-11\nBIP103: 2017-01-01\n\nWhat should be the block size at initiation?\nBIP100: 1MB\nBIP101: 8MB\nBIP102: 2MB\nBIP103: 1MB\n\nShould we allow further increase / decrease?\nBIP100: By miner voting, 0.5x - 2x every 12000 blocks (~3 months)\nBIP101: Double every 2 years, with interpolations in between (41.4% p.a.)\nBIP102: No\nBIP103: +4.4% every 97 days (double every 4.3 years, or 17.7% p.a.)\n\nThe earliest date for a >=2MB block?\nBIP100: 2016-04-03 (assuming 10 minutes block)\nBIP101: 2016-01-11\nBIP102: 2015-11-11\nBIP103: 2020-12-27\n\nWhat should be the final block size?\nBIP100: 32MB is the max, but it is possible to reduce by miner voting\nBIP101: 8192MB\nBIP102: 2MB\nBIP103: 2048MB\n\nWhen should we have the final block size?\nBIP100: Decided by miners\nBIP101: 30 years after initiation\nBIP102: 2015-11-11\nBIP103: 2063-07-09"
            }
        ],
        "thread_summary": {
            "title": "A summary of block size hardfork proposals",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1646
        }
    },
    {
        "title": "[bitcoin-dev] A summary of block size hardfork proposals (and a softforking one)",
        "thread_messages": [
            {
                "author": "odinn",
                "date": "2015-07-30T20:32:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nGreat summary, thanks.  Helpful to get general grasp of the main\nthings out there.\n\nOn 07/30/2015 11:14 AM, jl2012 via bitcoin-dev wrote:\n> Currently, there are 4 block size BIP by Bitcoin developers:\n> \n> BIP100 by Jeff: \n> http://gtf.org/garzik/bitcoin/BIP100-blocksizechangeproposal.pdf \n> BIP101 by Gavin: \n> https://github.com/bitcoin/bips/blob/master/bip-0101.mediawiki \n> BIP102 by Jeff: https://github.com/bitcoin/bips/pull/173/files \n> BIP??? by Pieter (called \"BIP103\" below): \n> https://gist.github.com/sipa/c65665fc360ca7a176a6\n> \n> To facilitate further discussion, I'd like to summarize these\n> proposals by a series of questions. Please correct me if I'm wrong.\n> Something like sigop limit are less controversial and are not\n> shown.\n> \n> Should we use a BIP34-like voting mechanism to initiate the\n> hardfork? BIP100, 102, 103: No BIP101: Yes\n> \n> When should we initiate the hardfork? BIP100: 2016-01-11 BIP101: 2\n> weeks after 75% miner support, but not before 2016-01-11 BIP102:\n> 2015-11-11 BIP103: 2017-01-01\n> \n> What should be the block size at initiation? BIP100: 1MB BIP101:\n> 8MB BIP102: 2MB BIP103: 1MB\n> \n> Should we allow further increase / decrease? BIP100: By miner\n> voting, 0.5x - 2x every 12000 blocks (~3 months) BIP101: Double\n> every 2 years, with interpolations in between (41.4% p.a.) BIP102:\n> No BIP103: +4.4% every 97 days (double every 4.3 years, or 17.7%\n> p.a.)\n> \n> The earliest date for a >=2MB block? BIP100: 2016-04-03 (assuming\n> 10 minutes block) BIP101: 2016-01-11 BIP102: 2015-11-11 BIP103:\n> 2020-12-27\n> \n> What should be the final block size? BIP100: 32MB is the max, but\n> it is possible to reduce by miner voting BIP101: 8192MB BIP102:\n> 2MB BIP103: 2048MB\n> \n> When should we have the final block size? BIP100: Decided by\n> miners BIP101: 30 years after initiation BIP102: 2015-11-11 BIP103:\n> 2063-07-09\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\nI'd like to add to this some remarks that are from an earlier discussion\n\nCameron Garnham added into a thread, at\nhttp://bitcoin-development.narkive.com/iHmMh6bZ/bitcoin-development-prop\nosed-alternatives-to-the-20mb-step-function#post65\n\"First off, I am glad that the idea of dynamic block size adjustment is\ngaining some attention, in particular the model that I proposed.\n\nI wanted to take some time and explain some of the philosophy of how,\nand why, I proposed this this particular model.\n\nWhen Bitcoin was first made, there was a 32MB block size limit; this\nwas quickly found to be open to spam (and potentially DOS, as the code\nwas not-at-all optimized to support large blocks), and was reduced to\n1MB, this was a quick fix that was never intended to last; at some\npoint the network should come to an understanding, a consensus if you\nwill, of what (and how much) belongs in a block.\nThe core point of this is that miners have always, and will always;\nhold the power, to decide what goes into blocks; this implicitly,\nobviously, includes how large blocks are. Miners are able to come any\nsort of agreement they wish, providing the bitcoin clients accept\ntheir blocks as valid.\"\n(...)\n\"the proposal introducing a consensus protocol for block sizes;\ninstead of just having a hard limit (enforced by everyone), instead,\nwe have a constant factor above the average block size over a fixed\nintervals that is soft-forked by only the miners. (The next simplest\nmathematical construct).\nThis proposal is entirely a soft-fork and may be implemented without\nchanging any client code what so ever. In-fact, it could be\nimplemented by only a simple 51% majority of miners, with-or-without\ngaining the wider community consensus.\"\n\n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJVuonLAAoJEGxwq/inSG8CensH/29IwToehXVgEA44RZmUsIdn\n5d2OCGZHOsinJKS9Uqtd5SfIDycXVVTV832KrxIUH1oC685iwVzBuA4hJQc2Z49A\nhNKs97N97iS2s3W6X/llbYz/3i3H6TQaCJGfK+XurFi6pxdC+4LgoUovtGaIsc8x\nz7iTD5F7FEhPmKU6uxw9GRRvKHJwyy0xWWNgBAJjdS7F5y7DR1VC9RhPehpU75Wt\nMGHrrogM41r+cNVDpNpnT42q0rAKC0IXjvY43ZoA/EFUoWkpaXI6jwKXtjqDjCP7\nP8StjQ7eoeIkZWu1PwbfKStbF4Ob3Q7Xi+hQxCwciKdtfsLRFkdamzvpl/qh9wg=\n=Itr1\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "A summary of block size hardfork proposals (and a softforking one)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4460
        }
    },
    {
        "title": "[bitcoin-dev] CORRECTIONS: A summary of block size hardfork proposals",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-31T03:10:34",
                "message_text_only": "I am making some corrections to my previous summary\n\nCurrently, there are 4 block size BIP by Bitcoin developers:\n\nBIP100 by Jeff:  \nhttp://gtf.org/garzik/bitcoin/BIP100-blocksizechangeproposal.pdf\nBIP101 by Gavin:  \nhttps://github.com/bitcoin/bips/blob/master/bip-0101.mediawiki\nBIP102 by Jeff: https://github.com/bitcoin/bips/pull/173/files\nBIP??? by Pieter (called \"BIP103\" below):  \nhttps://gist.github.com/sipa/c65665fc360ca7a176a6\n\nTo facilitate further discussion, I'd like to summarize these  \nproposals by a series of questions. Please correct me if I'm wrong.  \nSomething like sigop limit are less controversial and are not shown.\n\nShould we use a miner voting mechanism to initiate the hardfork?\nBIP100: Yes, support with 10800 out of last 12000 blocks (90%)\nBIP101: Yes, support with 750 out of last 1000 blocks (75%)\nBIP102: No\nBIP103: No\n\nWhen should we initiate the hardfork?\nBIP100: 2016-01-11#\nBIP101: 2 weeks after 75% miner support, but not before 2016-01-11\nBIP102: 2015-11-11\nBIP103: 2017-01-01\n\n# The network does not actually fork until having 90% miner support\n\nWhat should be the block size at initiation?\nBIP100: 1MB\nBIP101: 8MB*\nBIP102: 2MB\nBIP103: 1MB\n\n* It depends on the exact time of initiation, e.g. 8MB if initiated on  \n2016-01-11, 16MB if initiated on 2018-01-10.\n\nShould we allow further increase / decrease?\nBIP100: By miner voting, 0.5x - 2x every 12000 blocks (~3 months)\nBIP101: Double every 2 years, with linear interpolations in between  \n(41.4% p.a.)\nBIP102: No\nBIP103: +4.4% every 97 days (double every 4.3 years, or 17.7% p.a.)\n\nThe earliest date for a >=2MB block?\nBIP100: 2016-04-03^\nBIP101: 2016-01-11\nBIP102: 2015-11-11\nBIP103: 2020-12-27\n\n^ Assuming 10 minutes blocks and votes cast before 2016-01-11 are not counted\n\nWhat should be the final block size?\nBIP100: 32MB is the max, but it is possible to reduce by miner voting\nBIP101: 8192MB\nBIP102: 2MB\nBIP103: 2048MB\n\nWhen should we have the final block size?\nBIP100: Decided by miners\nBIP101: 2036-01-06\nBIP102: 2015-11-11\nBIP103: 2063-07-09"
            }
        ],
        "thread_summary": {
            "title": "CORRECTIONS: A summary of block size hardfork proposals",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2042
        }
    },
    {
        "title": "[bitcoin-dev] LockUnspent not working, bug?",
        "thread_messages": [
            {
                "author": "Ian Treibick",
                "date": "2015-07-30T20:43:05",
                "message_text_only": "My first post to the list, not sure this is the right place, let me know if it is better to open an issue on GitHub.\n\nThis is occurring on OS X with Satoshi 0.11.0, the TXID and vout belong to the wallet:\n\ncommand: lockunspent true \"[ { \\\"txid\\\": \\\"fd697746c67f68a206bb7377fd40f35d146cc5821883e4c4b6cbf82b48e62a13\\\", \\\"vout\\\": 1 } ]\"\noutput: true\ncommand: listlockunspent\nOutput:\ufffc\n[\n]\n\nAdditionally after locking the TX with lockunspent I am able to spend it from the wallet.\n\nCheers,\n\nIan\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150730/e9e196b1/attachment.sig>"
            },
            {
                "author": "Micha Bailey",
                "date": "2015-07-30T23:00:59",
                "message_text_only": "RTFM: `help lockunspent`. The boolean parameter is whether or not the UTXO\nshould be available.\n\nOn Thu, Jul 30, 2015 at 11:43 PM, Ian Treibick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> My first post to the list, not sure this is the right place, let me know\n> if it is better to open an issue on GitHub.\n>\n> This is occurring on OS X with Satoshi 0.11.0, the TXID and vout belong to\n> the wallet:\n>\n> command: lockunspent true \"[ { \\\"txid\\\":\n> \\\"fd697746c67f68a206bb7377fd40f35d146cc5821883e4c4b6cbf82b48e62a13\\\",\n> \\\"vout\\\": 1 } ]\"\n> output: true\n> command: listlockunspent\n> Output:\ufffc\n> [\n> ]\n>\n> Additionally after locking the TX with lockunspent I am able to spend it\n> from the wallet.\n>\n> Cheers,\n>\n> Ian\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/cf902c48/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "LockUnspent not working, bug?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Micha Bailey",
                "Ian Treibick"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1902
        }
    },
    {
        "title": "[bitcoin-dev] A compromise between BIP101 and Pieter's proposal",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-31T08:39:43",
                "message_text_only": "There is a summary of the proposals in my previous mail at  \nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009808.html\n\nI think there could be a compromise between Gavin's BIP101 and  \nPieter's proposal (called \"BIP103\" here). Below I'm trying to play  \nwith the parameters, which reasons:\n\n1. Initiation: BIP34 style voting, with support of 750 out of the last  \n1000 blocks. The \"hardfork bit\" mechanism might be used:  \nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009576.html\n\nRationale: This follows BIP101, to make sure the new chain is secure.  \nAlso, no miner would like to be the first one to mine a large block if  \nthey don't know how many others would accept it.\n\n2. Starting date: 30 days after 75% miner support, but not before  \n2016-01-12 00:00 UTC\n\nRationale: A 30-day grace period is given to make sure everyone has  \nenough time to follow. This is a compromise between 14 day in BIP101  \nand 1 year in BIP103. I tend to agree with BIP101. Even 1 year is  \ngiven, people will just do it on the 364th day if they opt to  \nprocrastinate.\n\n2016-01-12 00:00 UTC is Monday evening in US and Tuesday morning in  \nChina. Most pool operators and devs should be back from new year  \nholiday and not sleeping. (If the initiation is delayed, we may  \nrequire that it must be UTC Tuesday midnight)\n\n3. The block size at 2016-01-12 will be 1,414,213 bytes, and  \nmultiplied by 1.414213 by every 2^23 seconds (97 days) until exactly  \n8MB is reached on 2017-05-11.\n\nRationale: Instead of jumping to 8MB, I suggest to increase it  \ngradually to 8MB in 16 months. 8MB should not be particularly painful  \nto run even with current equipment (you may see my earlier post on  \nbitctointalk: https://bitcointalk.org/index.php?topic=1054482.0). 8MB  \nis also agreed by Chinese miners, who control >60% of the network.\n\n4. After 8MB is reached, the block size will be increased by 6.714%  \nevery 97 days, which is equivalent to exactly octuple (8x) every 8.5  \nyears, or double every 2.9 years, or +27.67% per year. Stop growth at  \n4096MB on 2042-11-17.\n\nRationale: This is a compromise between 17.7% p.a. of BIP103 and 41.4%  \np.a. of BIP101. This will take us almost 8 years from now just to go  \nback to the original 32MB size (4 years for BIP101 and 22 years for  \nBIP103)\n\nSSD price is expected to drop by >50%/year in the coming years. In  \n2020, we will only need to pay 2% of current price for SSD. 98% price  \nreduction is enough for 40 years of 27.67% growth.\nSource: http://wikibon.org/wiki/v/Evolution_of_All-Flash_Array_Architectures\n\nGlobal bandwidth is expected to grow by 37%/year until 2021 so 27.67%  \nshould be safe at least for the coming 10 years.\nSource:  \nhttps://www.telegeography.com/research-services/global-bandwidth-forecast-service/\n\nThe final cap is a compromise between 8192MB at 2036 of BIP101 and  \n2048MB at 2063 of BIP103\n\n\n-----------------------------------\n\nGenerally speaking, I think we need to have a faster growth in the  \nbeginning, just to normalize the block size to a more reasonable one.  \nAfter all, the 1MB cap was introduced when Bitcoin was practically  \nworthless and with inefficient design. We need to decide a new  \n\"optimal\" size based on current adoption and technology.\n\nAbout \"fee market\": I do agree we need a fee market, but the fee  \npressure must not be too high at this moment when block reward is  \nstill miner's main income source. We already have a fee market: miners  \nwill avoid building big blocks with low fee because that will increase  \nthe orphan risk for nothing.\n\nAbout \"secondary layer\": I respect everyone building secondary layer  \nover the blockchain. However, while the SWIFT settlement network is  \nprocessing 300tps, Bitcoin's current 7tps is just nothing more than an  \nexperiment. If the underlying settlement system does not have enough  \ncapacity, any secondary layer built on it will also fall apart. For  \nexample, people may DoS attack a Lightening network by provoking a  \nhuge amount of settlement request which some may not be confirmed on  \ntime. Ultimately, this will increase the risk of running a LN service  \nand increase the tx fee inside LN. After all, the value of secondary  \nlayer primarily comes from instant confirmation, not scarcity of the  \nblock space."
            },
            {
                "author": "Adam Back",
                "date": "2015-07-31T10:16:15",
                "message_text_only": "I think trust the data-center logic obviously fails, and I was talking\nabout this scenario in the post you are replying to.  You are trusting the\ndata-center operator period.  If one could trust data-centers to run\nverified code, to not get hacked, filter traffic, respond to court orders\nwithout notifying you etc that would be great but that's unfortunately not\nwhat happens.\n\nData-center operators are bound to follow laws, including NSLs and gag\norders.  They also get hacked, employ humans who can be corrupt,\nblackmailed, and themselves centralisation points for policy attack.\nSnowden related disclosures and keeping aware of security show this is very\nreal.\n\nThis isn't much about bitcoin even, its just security reality for hosting\nanything intended to be secure via decentralisation, or just hosting in\ngeneral while at risk of political or policy attack.\n\nAdam\nOn Jul 31, 2015 10:39, \"jl2012 via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There is a summary of the proposals in my previous mail at\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009808.html\n>\n> I think there could be a compromise between Gavin's BIP101 and Pieter's\n> proposal (called \"BIP103\" here). Below I'm trying to play with the\n> parameters, which reasons:\n>\n> 1. Initiation: BIP34 style voting, with support of 750 out of the last\n> 1000 blocks. The \"hardfork bit\" mechanism might be used:\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009576.html\n>\n> Rationale: This follows BIP101, to make sure the new chain is secure.\n> Also, no miner would like to be the first one to mine a large block if they\n> don't know how many others would accept it.\n>\n> 2. Starting date: 30 days after 75% miner support, but not before\n> 2016-01-12 00:00 UTC\n>\n> Rationale: A 30-day grace period is given to make sure everyone has enough\n> time to follow. This is a compromise between 14 day in BIP101 and 1 year in\n> BIP103. I tend to agree with BIP101. Even 1 year is given, people will just\n> do it on the 364th day if they opt to procrastinate.\n>\n> 2016-01-12 00:00 UTC is Monday evening in US and Tuesday morning in China.\n> Most pool operators and devs should be back from new year holiday and not\n> sleeping. (If the initiation is delayed, we may require that it must be UTC\n> Tuesday midnight)\n>\n> 3. The block size at 2016-01-12 will be 1,414,213 bytes, and multiplied by\n> 1.414213 by every 2^23 seconds (97 days) until exactly 8MB is reached on\n> 2017-05-11.\n>\n> Rationale: Instead of jumping to 8MB, I suggest to increase it gradually\n> to 8MB in 16 months. 8MB should not be particularly painful to run even\n> with current equipment (you may see my earlier post on bitctointalk:\n> https://bitcointalk.org/index.php?topic=1054482.0). 8MB is also agreed by\n> Chinese miners, who control >60% of the network.\n>\n> 4. After 8MB is reached, the block size will be increased by 6.714% every\n> 97 days, which is equivalent to exactly octuple (8x) every 8.5 years, or\n> double every 2.9 years, or +27.67% per year. Stop growth at 4096MB on\n> 2042-11-17.\n>\n> Rationale: This is a compromise between 17.7% p.a. of BIP103 and 41.4%\n> p.a. of BIP101. This will take us almost 8 years from now just to go back\n> to the original 32MB size (4 years for BIP101 and 22 years for BIP103)\n>\n> SSD price is expected to drop by >50%/year in the coming years. In 2020,\n> we will only need to pay 2% of current price for SSD. 98% price reduction\n> is enough for 40 years of 27.67% growth.\n> Source:\n> http://wikibon.org/wiki/v/Evolution_of_All-Flash_Array_Architectures\n>\n> Global bandwidth is expected to grow by 37%/year until 2021 so 27.67%\n> should be safe at least for the coming 10 years.\n> Source:\n> https://www.telegeography.com/research-services/global-bandwidth-forecast-service/\n>\n> The final cap is a compromise between 8192MB at 2036 of BIP101 and\n> 2048MB at 2063 of BIP103\n>\n>\n> -----------------------------------\n>\n> Generally speaking, I think we need to have a faster growth in the\n> beginning, just to normalize the block size to a more reasonable one. After\n> all, the 1MB cap was introduced when Bitcoin was practically worthless and\n> with inefficient design. We need to decide a new \"optimal\" size based on\n> current adoption and technology.\n>\n> About \"fee market\": I do agree we need a fee market, but the fee pressure\n> must not be too high at this moment when block reward is still miner's main\n> income source. We already have a fee market: miners will avoid building big\n> blocks with low fee because that will increase the orphan risk for nothing.\n>\n> About \"secondary layer\": I respect everyone building secondary layer over\n> the blockchain. However, while the SWIFT settlement network is processing\n> 300tps, Bitcoin's current 7tps is just nothing more than an experiment. If\n> the underlying settlement system does not have enough capacity, any\n> secondary layer built on it will also fall apart. For example, people may\n> DoS attack a Lightening network by provoking a huge amount of settlement\n> request which some may not be confirmed on time. Ultimately, this will\n> increase the risk of running a LN service and increase the tx fee inside\n> LN. After all, the value of secondary layer primarily comes from instant\n> confirmation, not scarcity of the block space.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/24ee99ef/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-07-31T13:07:14",
                "message_text_only": "Yes, data-center operators are bound to follow laws, including NSLs  \nand gag orders. How about your ISP? Is it bound to follow laws,  \nincluding NSLs and gag orders?\nhttps://edri.org/irish_isp_introduces_blocking/\n\nDo you think everyone should run a full node behind TOR? No way, your  \nrepressive government could just block TOR:\nhttp://www.technologyreview.com/view/427413/how-china-blocks-the-tor-anonymity-network/\n\nOr they could raid your home and seize your Raspberry Pi if they  \ncouldn't read your encrypted internet traffic. You will have a hard  \ntime proving you are not using TOR for child porn or cocaine.\nhttps://en.wikipedia.org/wiki/Encryption_ban_proposal_in_the_United_Kingdom\n\nIf you are living in a country like this, running Bitcoin in an  \noffshore VPS could be much easier. Anyway, Bitcoin shouldn't be your  \nfirst thing to worry about. Revolution is probably your only choice.\n\nData-centers would get hacked. How about your Raspberry Pi?\n\nCorrupt data-center employee is probably the only valid concern.  \nHowever, there is nothing (except cost) to stop you from establishing  \nmultiple full nodes all over the world. If your Raspberry Pi at home  \ncould no longer fully validate the chain, it could become a  \nheader-only node to make sure your VPS full nodes are following the  \ncorrect chaintip. You may even buy hourly charged cloud hosting in  \ndifferent countries to run header-only nodes at negligible cost.\n\nThere is no single point of failure in a decentralized network. Having  \nmultiple nodes will also save you from Sybil attack and geopolitical  \nrisks. Again, if all data-centres and governments in the world are  \nturning against Bitcoin, it is delusional to think we could fight  \nagainst them without using any real weapon.\n\nBy the way, I'm quite confident that my current full node at home are  \ncapable of running at 8MB blocks.\n\n\nQuoting Adam Back <adam at cypherspace.org>:\n\n> I think trust the data-center logic obviously fails, and I was talking\n> about this scenario in the post you are replying to.  You are trusting the\n> data-center operator period.  If one could trust data-centers to run\n> verified code, to not get hacked, filter traffic, respond to court orders\n> without notifying you etc that would be great but that's unfortunately not\n> what happens.\n>\n> Data-center operators are bound to follow laws, including NSLs and gag\n> orders.  They also get hacked, employ humans who can be corrupt,\n> blackmailed, and themselves centralisation points for policy attack.\n> Snowden related disclosures and keeping aware of security show this is very\n> real.\n>\n> This isn't much about bitcoin even, its just security reality for hosting\n> anything intended to be secure via decentralisation, or just hosting in\n> general while at risk of political or policy attack.\n>\n> Adam"
            },
            {
                "author": "Adam Back",
                "date": "2015-07-31T13:17:58",
                "message_text_only": "That's all well and fine.  But the pattern of your argument I would\nsay is \"arguing security down\" ie saying something is not secure\nanyway, nothing is secure, everything could be hacked, so lets forget\nthat and give up, so that what is left is basically no\ndecentralisation security.\n\nIt is not paranoid to take decentralisation security seriously, it is\nnecessary because it is critical to Bitcoin.  Security in depth\nmeaning take what security you can get from available defences.\n\nAdam\n\nOn 31 July 2015 at 15:07,  <jl2012 at xbt.hk> wrote:\n> Yes, data-center operators are bound to follow laws, including NSLs and gag\n> orders. How about your ISP? Is it bound to follow laws, including NSLs and\n> gag orders?\n> https://edri.org/irish_isp_introduces_blocking/\n>\n> Do you think everyone should run a full node behind TOR? No way, your\n> repressive government could just block TOR:\n> http://www.technologyreview.com/view/427413/how-china-blocks-the-tor-anonymity-network/\n>\n> Or they could raid your home and seize your Raspberry Pi if they couldn't\n> read your encrypted internet traffic. You will have a hard time proving you\n> are not using TOR for child porn or cocaine.\n> https://en.wikipedia.org/wiki/Encryption_ban_proposal_in_the_United_Kingdom\n>\n> If you are living in a country like this, running Bitcoin in an offshore VPS\n> could be much easier. Anyway, Bitcoin shouldn't be your first thing to worry\n> about. Revolution is probably your only choice.\n>\n> Data-centers would get hacked. How about your Raspberry Pi?\n>\n> Corrupt data-center employee is probably the only valid concern. However,\n> there is nothing (except cost) to stop you from establishing multiple full\n> nodes all over the world. If your Raspberry Pi at home could no longer fully\n> validate the chain, it could become a header-only node to make sure your VPS\n> full nodes are following the correct chaintip. You may even buy hourly\n> charged cloud hosting in different countries to run header-only nodes at\n> negligible cost.\n>\n> There is no single point of failure in a decentralized network. Having\n> multiple nodes will also save you from Sybil attack and geopolitical risks.\n> Again, if all data-centres and governments in the world are turning against\n> Bitcoin, it is delusional to think we could fight against them without using\n> any real weapon.\n>\n> By the way, I'm quite confident that my current full node at home are\n> capable of running at 8MB blocks.\n>\n>\n>\n> Quoting Adam Back <adam at cypherspace.org>:\n>\n>> I think trust the data-center logic obviously fails, and I was talking\n>> about this scenario in the post you are replying to.  You are trusting the\n>> data-center operator period.  If one could trust data-centers to run\n>> verified code, to not get hacked, filter traffic, respond to court orders\n>> without notifying you etc that would be great but that's unfortunately not\n>> what happens.\n>>\n>> Data-center operators are bound to follow laws, including NSLs and gag\n>> orders.  They also get hacked, employ humans who can be corrupt,\n>> blackmailed, and themselves centralisation points for policy attack.\n>> Snowden related disclosures and keeping aware of security show this is\n>> very\n>> real.\n>>\n>> This isn't much about bitcoin even, its just security reality for hosting\n>> anything intended to be secure via decentralisation, or just hosting in\n>> general while at risk of political or policy attack.\n>>\n>> Adam\n>\n>\n>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-07-31T16:22:58",
                "message_text_only": "Here are some books that will help more people understand why Adam's\nconcern is important:\nKicking the Dragon (by Larken Rose)\nThe State (by Franz Oppenheimer)\n\nLike he said, it isn't much about bitcoin.  Our crypto is just one of the\ndefenses we've created, and understanding what it defends will help us\nmaintain its value.\n\nDave\n\nOn Fri, Jul 31, 2015 at 6:16 AM, Adam Back via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I think trust the data-center logic obviously fails, and I was talking\n> about this scenario in the post you are replying to.  You are trusting the\n> data-center operator period.  If one could trust data-centers to run\n> verified code, to not get hacked, filter traffic, respond to court orders\n> without notifying you etc that would be great but that's unfortunately not\n> what happens.\n>\n> Data-center operators are bound to follow laws, including NSLs and gag\n> orders.  They also get hacked, employ humans who can be corrupt,\n> blackmailed, and themselves centralisation points for policy attack.\n> Snowden related disclosures and keeping aware of security show this is very\n> real.\n>\n> This isn't much about bitcoin even, its just security reality for hosting\n> anything intended to be secure via decentralisation, or just hosting in\n> general while at risk of political or policy attack.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/2339c6d8/attachment.html>"
            },
            {
                "author": "G. Andrew Stone",
                "date": "2015-07-31T18:04:53",
                "message_text_only": "There's a large array of solutions that are bigger than the cheapest home\nbroadband, but smaller then renting hardware in a data center.  Every\ncompany with internet service to their location purchases one of these\noptions.  If Bitcoin full node bandwidth requirements ever exceed a\nhobbyist's reach, s/he can always pool resources with other individuals to\npurchase one of these solutions, and a 1-room office.\n\nHow many of you have connected to multiple ISPs and are routing internet\ntraffic between them?  But TCP is still permissionless.\n\nBitcoin node requirements will grow beyond a hobbyist reach (but not that\nof the garage entrepreneur).   The truth is that as technologies grow and\nmature, the hobbyists move on but anyone who has a real reason to continue\nusing it stays.  This fact does not destroy its decentralization.\n\nI do not think that reasonable scaling will significantly affect full node\nquantity (historical downtrends are conflated with the simultaneous\ntransition from hobbyist to professional).\n\nAt the same time the ability to create an independent full node is a\ntremendous force keeping existing full nodes honest -- this potential is\nmore powerful then the fact.\n\nWhich would you choose, a 10 thousand node strong bankCoin, or a 1000 node\nopen source permissionless Bitcoin?\n\n\nOn Fri, Jul 31, 2015 at 12:22 PM, Dave Scotese via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Here are some books that will help more people understand why Adam's\n> concern is important:\n> Kicking the Dragon (by Larken Rose)\n> The State (by Franz Oppenheimer)\n>\n> Like he said, it isn't much about bitcoin.  Our crypto is just one of the\n> defenses we've created, and understanding what it defends will help us\n> maintain its value.\n>\n> Dave\n>\n> On Fri, Jul 31, 2015 at 6:16 AM, Adam Back via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I think trust the data-center logic obviously fails, and I was talking\n>> about this scenario in the post you are replying to.  You are trusting the\n>> data-center operator period.  If one could trust data-centers to run\n>> verified code, to not get hacked, filter traffic, respond to court orders\n>> without notifying you etc that would be great but that's unfortunately not\n>> what happens.\n>>\n>> Data-center operators are bound to follow laws, including NSLs and gag\n>> orders.  They also get hacked, employ humans who can be corrupt,\n>> blackmailed, and themselves centralisation points for policy attack.\n>> Snowden related disclosures and keeping aware of security show this is very\n>> real.\n>>\n>> This isn't much about bitcoin even, its just security reality for hosting\n>> anything intended to be secure via decentralisation, or just hosting in\n>> general while at risk of political or policy attack.\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/8b30a557/attachment.html>"
            },
            {
                "author": "Ivan Brightly",
                "date": "2015-07-31T13:12:38",
                "message_text_only": "1. Data centers are not some uniform group of businesses with identical\n   policies nor firms with identical laws applied. The ability to get a search\n   warrant at a Swedish hosting provider will be dramatically different than a\n   Singaporean business. Similar to the decentralized nature of bitcoin, these\n   businesses are independent and varied - it would be difficult for\n   authorities to conduct a widescale attack on nodes worldwide, especially\n   given current laws. It would also be ineffective since any hacked/seized\n   host can be replaced quickly with a competitor service in a different\n   jurisdiction.\n   2. Personal residences and non-data center businesses are not immune to\n   theft, blackmail, seizure, hacking, etc. Depending upon the adversary and\n   method of attack, many users would be no worse off with their nodes not\n   located on premise. As alluded to above, it's a lot easier and less costly\n   to spin up a new 3rd party host than it is to replace a stolen laptop.\n\nThere is nothing inherently wrong with data centers/hosting providers\nplaying a significant (but not central) role in decentralized services.\nUsers who choose to use a VPS are not contributing to bitcoin in some sort\nof inferior capacity. I'll posit that 3rd party providers are not an ideal\nplace to hold private keys, but that is off topic.\n\n\n\nOn Fri, Jul 31, 2015 at 6:16 AM, Adam Back via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think trust the data-center logic obviously fails, and I was talking\n> about this scenario in the post you are replying to.  You are trusting the\n> data-center operator period.  If one could trust data-centers to run\n> verified code, to not get hacked, filter traffic, respond to court orders\n> without notifying you etc that would be great but that's unfortunately not\n> what happens.\n>\n> Data-center operators are bound to follow laws, including NSLs and gag\n> orders.  They also get hacked, employ humans who can be corrupt,\n> blackmailed, and themselves centralisation points for policy attack.\n> Snowden related disclosures and keeping aware of security show this is very\n> real.\n>\n> This isn't much about bitcoin even, its just security reality for hosting\n> anything intended to be secure via decentralisation, or just hosting in\n> general while at risk of political or policy attack.\n>\n> Adam\n> On Jul 31, 2015 10:39, \"jl2012 via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> There is a summary of the proposals in my previous mail at\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009808.html\n>>\n>> I think there could be a compromise between Gavin's BIP101 and Pieter's\n>> proposal (called \"BIP103\" here). Below I'm trying to play with the\n>> parameters, which reasons:\n>>\n>> 1. Initiation: BIP34 style voting, with support of 750 out of the last\n>> 1000 blocks. The \"hardfork bit\" mechanism might be used:\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009576.html\n>>\n>> Rationale: This follows BIP101, to make sure the new chain is secure.\n>> Also, no miner would like to be the first one to mine a large block if they\n>> don't know how many others would accept it.\n>>\n>> 2. Starting date: 30 days after 75% miner support, but not before\n>> 2016-01-12 00:00 UTC\n>>\n>> Rationale: A 30-day grace period is given to make sure everyone has\n>> enough time to follow. This is a compromise between 14 day in BIP101 and 1\n>> year in BIP103. I tend to agree with BIP101. Even 1 year is given, people\n>> will just do it on the 364th day if they opt to procrastinate.\n>>\n>> 2016-01-12 00:00 UTC is Monday evening in US and Tuesday morning in\n>> China. Most pool operators and devs should be back from new year holiday\n>> and not sleeping. (If the initiation is delayed, we may require that it\n>> must be UTC Tuesday midnight)\n>>\n>> 3. The block size at 2016-01-12 will be 1,414,213 bytes, and multiplied\n>> by 1.414213 by every 2^23 seconds (97 days) until exactly 8MB is reached on\n>> 2017-05-11.\n>>\n>> Rationale: Instead of jumping to 8MB, I suggest to increase it gradually\n>> to 8MB in 16 months. 8MB should not be particularly painful to run even\n>> with current equipment (you may see my earlier post on bitctointalk:\n>> https://bitcointalk.org/index.php?topic=1054482.0). 8MB is also agreed\n>> by Chinese miners, who control >60% of the network.\n>>\n>> 4. After 8MB is reached, the block size will be increased by 6.714% every\n>> 97 days, which is equivalent to exactly octuple (8x) every 8.5 years, or\n>> double every 2.9 years, or +27.67% per year. Stop growth at 4096MB on\n>> 2042-11-17.\n>>\n>> Rationale: This is a compromise between 17.7% p.a. of BIP103 and 41.4%\n>> p.a. of BIP101. This will take us almost 8 years from now just to go back\n>> to the original 32MB size (4 years for BIP101 and 22 years for BIP103)\n>>\n>> SSD price is expected to drop by >50%/year in the coming years. In 2020,\n>> we will only need to pay 2% of current price for SSD. 98% price reduction\n>> is enough for 40 years of 27.67% growth.\n>> Source:\n>> http://wikibon.org/wiki/v/Evolution_of_All-Flash_Array_Architectures\n>>\n>> Global bandwidth is expected to grow by 37%/year until 2021 so 27.67%\n>> should be safe at least for the coming 10 years.\n>> Source:\n>> https://www.telegeography.com/research-services/global-bandwidth-forecast-service/\n>>\n>> The final cap is a compromise between 8192MB at 2036 of BIP101 and\n>> 2048MB at 2063 of BIP103\n>>\n>>\n>> -----------------------------------\n>>\n>> Generally speaking, I think we need to have a faster growth in the\n>> beginning, just to normalize the block size to a more reasonable one. After\n>> all, the 1MB cap was introduced when Bitcoin was practically worthless and\n>> with inefficient design. We need to decide a new \"optimal\" size based on\n>> current adoption and technology.\n>>\n>> About \"fee market\": I do agree we need a fee market, but the fee pressure\n>> must not be too high at this moment when block reward is still miner's main\n>> income source. We already have a fee market: miners will avoid building big\n>> blocks with low fee because that will increase the orphan risk for nothing.\n>>\n>> About \"secondary layer\": I respect everyone building secondary layer over\n>> the blockchain. However, while the SWIFT settlement network is processing\n>> 300tps, Bitcoin's current 7tps is just nothing more than an experiment. If\n>> the underlying settlement system does not have enough capacity, any\n>> secondary layer built on it will also fall apart. For example, people may\n>> DoS attack a Lightening network by provoking a huge amount of settlement\n>> request which some may not be confirmed on time. Ultimately, this will\n>> increase the risk of running a LN service and increase the tx fee inside\n>> LN. After all, the value of secondary layer primarily comes from instant\n>> confirmation, not scarcity of the block space.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/faab5248/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "A compromise between BIP101 and Pieter's proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Adam Back",
                "Dave Scotese",
                "jl2012 at xbt.hk",
                "G. Andrew Stone",
                "Ivan Brightly"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 28429
        }
    },
    {
        "title": "[bitcoin-dev] R\u0103spuns: Personal opinion on the fee market from a worried local trader\u200f",
        "thread_messages": [
            {
                "author": "Un Ix",
                "date": "2015-07-31T13:59:55",
                "message_text_only": "+1 on the comments below by Thomas. \n\n\"Fee market\" is not a \nbinary option, either on or off.  Like all markets it exists in varying \ndegrees over time and with more or less influence on the process of which it is \npart of.  As it stands now, and likely for another decade at least, the \nfee per tx constitutes a very, very weak market signal for the miners since it \nmakes up less than 0.5% of the rewards paid for mining a full block. This is the normal and expected scenario, aimed at driving use of Bitcoin \nas widely and cheaply as possible so that network effects will cement \nBitcoin for the future, for all users.\n\nAs a comparison, how many people would have\n taken up using email if there had been a per-message fee and hourly \nsending limits with only the highest-fee messages being delivered? And \nhow would it look if the email protocol developers imposing fees \n& hourly sending limits were pushing hard for use of another email-delivery protocol on\n top of the existing one?\n\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Date: Fri, 31 Jul 2015 11:56:48 +0200\n> Subject: Re: [bitcoin-dev]\tR\u0103spuns: Personal opinion on the fee market from a worried local trader\n> From: bitcoin-dev at lists.linuxfoundation.org\n> \n> On Friday 31. July 2015 03.21.07 Jorge Tim\u00f3n via bitcoin-dev wrote:\n> > If I was a miner and you want me to include your transaction for free,\n> > you're asking me to give you money\n> \n> What?\n> \n> Ask yourself; why do miners include transactions at all? What it the incentive \n> if there really is only less than 0.8% of income to be derived from fees?\n> \n> Miners don't get payed by fees.  They won't need to get payed by fees for \n> decades to come. Maybe you want to re-do your math, it seems off.\n> -- \n> Thomas Zander\n\n\n\n\n\n \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/0aee231e/attachment-0001.html>"
            },
            {
                "author": "Dave",
                "date": "2015-07-31T14:29:14",
                "message_text_only": "> On 31 Jul 2015, at 06:59, Un Ix via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> +1 on the comments below by Thomas. \n> \n> \"Fee market\" is not a binary option, either on or off.  Like all markets it exists in varying degrees over time and with more or less influence on the process of which it is part of.  As it stands now, and likely for another decade at least, the fee per tx constitutes a very, very weak market signal for the miners since it makes up less than 0.5% of the rewards paid for mining a full block. This is the normal and expected scenario, aimed at driving use of Bitcoin as widely and cheaply as possible so that network effects will cement  Bitcoin for the future, for all users.\n> \n> As a comparison, how many people would have taken up using email if there had been a per-message fee and hourly sending limits with only the highest-fee messages being delivered? And how would it look if the email protocol developers imposing fees & hourly sending limits were pushing hard for use of another email-delivery protocol on top of the existing one?\n> \nHow would email have looked if it required 300 MW of power to support it for \"free\" for 10 years?\n\nIn practice email was never free- it was paid for by the payments users made to ISPs. ISPs paid for email and network infrastructure from that.\n\nThe equivalent analogy here would be to drop fees completely and pay a specific miner to mine all of your transactions as a monthly subscription (which of course doesn't work in a non-permission-based network).\n\nMiners have real (huge) costs - they will be in a lot of pain with reward halving if a few model does not replace that. That in turn poses a huge risk of smaller miners shutting down, which in turn centralises things even more. I would argue that the lack of pool diversity and thus lack of block makers is already the single biggest risk for a decentralised system; avoiding the issue of fees just accelerates this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150731/47b261b8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "R\u0103spuns: Personal opinion on the fee market from a worried local trader\u200f",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave",
                "Un Ix"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4110
        }
    }
]