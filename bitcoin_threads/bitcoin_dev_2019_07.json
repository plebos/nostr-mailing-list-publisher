[
    {
        "title": "[bitcoin-dev] Generalized covenants with taproot enable riskless or risky lending, prevent credit inflation through fractional reserve",
        "thread_messages": [
            {
                "author": "Eric Voskuil",
                "date": "2019-07-01T18:52:57",
                "message_text_only": "It\u2019s an exceedingly poor example. First, value is subjective. It matters not what other people may consider, only those who act. Given that people trade them (ICO tokens), they have value to those people. Second, the scenario would not function given that the value, as with money, is based on the ability to trade perpetually.\n\nI said that I would make no further comment given the belief that no new ideas were surfacing. However, after giving it some more thought on my own, I believe I have found the one case in which a person could value such encumbered coins.\n\nIn the case of tracking an asset that becomes worthless at a specific time, one could value a record of ownership, and the ability to trade ownership of the asset during the period. Consider colored coin type tracking of a theater ticket for a specific show, where the ticket is worthless by the end of the show.\n\nNow consider the value attributable to renting coin (e.g. to the tick issuer) in order to track the ticket. First, there is no net value in renting coin to pay confirmation (mining) fees on transfers. The cost of a fee is driven by competition and remains the same whether the coin used for payment is encumbered or not. In other words, even with value in tracking there is no *cost advantage* to renting of such coins for use as money.\n\nBut tracking an asset in this manner has required not only a fee for each trade, but also the burning of coin. By allowing the lender to recover the coin when the asset expires, this part of the cost of on-chain tracking can be time-shared (rented), and without depreciation of the coin.\n\nIn this case the lender is achieving both a time-locked hoard/speculation and a pre-paid rental return. The return to the lender would be the rental price minus the opportunity cost of not investing (ie, in production) this coin otherwise during that period. This is of course based on the economic principle that both hoarding and speculation are expected to produce no predictable return. As such the cost of the rental would be driven (by competition) toward the cost of capital (e.g. annualized 10% of the coin price) for the same period. \n\nDepending on the term, rental will be cheaper than the outright cost of burning the same minimum amount of coin (i.e. dust+1, assuming policy compliance) as required for tracking. As soon as the rental cost exceeds the minimum tracking burn, rental becomes more expensive than just purchasing the coin. So, for example, at 10% market return on capital (rental cost), purchasing the coin is cheaper than rental at any tracking term beyond 7.2 years.\n\nAs discussed previously, there can be no monetary value of such encumbered coins. And as shown above, the non-monetary (tracking) scenario is limited to fixed-term tracking. This use of Bitcoin would of course reduce the average cost of non-monetary blockchain storage. I\u2019m not sure that is a use people want to facilitate with a protocol change, but that\u2019s for the community to decide.\n\nBest,\nEric\n\n> On Jun 30, 2019, at 13:26, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> My argument does not need the comparison with ICOs.\n> \n> They were just an example that people pay for the utility of register even though others think the tokens they keep track of are worthless.\n> \n> Tamas Blummer\n> \n> \n>> On Jun 30, 2019, at 22:13, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> ICO tokens can be traded (indefinitely) for other things of value, so the comparison isn\u2019t valid. I think we\u2019ve both made our points clearly, so I\u2019ll leave it at that.\n>> \n>> Best,\n>> Eric\n>> \n>>> On Jun 30, 2019, at 12:55, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>> \n>>> \n>>>> On Jun 30, 2019, at 20:54, Eric Voskuil <eric at voskuil.org> wrote:\n>>>> \n>>>> Could you please explain the meaning and utility of \u201cunforgeable register\u201d as it pertains to such encumbered coins?\n>>> \n>>> I guess we agree that some way of keeping track of ownership is prerequisite for something to aquire value.\n>>> We likely also agree that the security of that ownership register has great influence to the value.\n>>> \n>>> The question remains if a register as utility in itself gives value to the thing needed to use that register.\n>>> I think it does, if people are interested in what it keeps track of, for whatever reason, even for reasons you find bogus.\n>>> \n>>> It was not intentional, but I think I just explained why Ethereum aquired higher market value by being register of ICO tokens.\n>>> \n>>> Now back to the coins encumbered with the debt covenant:\n>>> Transactions moving them constitute a register of covered debt and you need them to update that register.\n>>> Should some people find such a register useful then those coins needed to update this register will aquire value.\n>>> Does not matter if you think the concept of covered debt is just as bogus as ICOs.\n>>> \n>>> Here some good news: If they aquire value then they offer a way to generate income for hodler by temporarily giving up control.\n>>> \n>>> Tamas Blummer\n>>> \n>>>> \n>>>> The meaning in terms of Bitcoin is clear - the \u201cowner\u201d of outputs that represent value (i.e. in the ability to trade them for something else) is recorded publicly and, given Bitcoin security assumptions, cannot be faked. What is not clear is the utility of a record of outputs that cannot be traded for something else. You seem to imply that a record is valuable simply because it\u2019s a record.\n>>>> \n>>>> e\n>>>> \n>>>>> On Jun 30, 2019, at 11:35, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>> \n>>>>> \n>>>>>> On Jun 30, 2019, at 19:41, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>> \n>>>>>> \n>>>>>>> On Jun 30, 2019, at 03:56, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>>>> \n>>>>>>> Hi Eric,\n>>>>>>> \n>>>>>>>> On Jun 29, 2019, at 23:21, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>>> \n>>>>>>>> What loan? Alice has paid Bob for something of no possible utility to her, or anyone else.\n>>>>>>> \n>>>>>>> Coins encumbered with the described covenant represent temporary control of a scarce resource.\n>>>>>>> \n>>>>>>> Can this obtain value? That depends on the availability of final control and ability to deal with temporary control.\n>>>>>> \n>>>>>> For something to become property (and therefore have marketable value) requires that it be both scarce and useful. Bitcoin is useful only to the extent that it can be traded for something else that is useful. Above you are only dealing with scarcity, ignoring utility.\n>>>>> \n>>>>> There is a deeper utility of Bitcoin than it can be traded for something else. That utility is to use its unforgeable register.\n>>>>> We have only one kind of units in this register and by having covenants we would create other kinds that are while encumbered not fungible with the common ones.\n>>>>> \n>>>>> Units are certainly less desirable if encumbered with a debt covenant. You say no one would assign them any value.\n>>>>> \n>>>>> I am not that sure as they still offer the utility of using the unforgeable register, in this case a register of debt covered by reserves.\n>>>>> You also doubt forcing debt to be covered by reserves is a good idea, I got that, but suppose we do not discuss this here.\n>>>>> If there are people who think it is a good idea, then they would find having an unforgeable register of it useful and therefore units needed to maintain that register valuable to some extent.\n>>>>> \n>>>>>> \n>>>>>>> I think you do not show the neccesary respect of the market.\n>>>>>> \n>>>>>> I\u2019m not sure what is meant here by respect, or how much of it is necessary. I am merely explaining the market.\n>>>>> \n>>>>> You are not explaining an existing market but claim that market that is not yet there will follow your arguments.\n>>>>> \n>>>>>>> Your rant reminds me of renowed economists who still argue final control Bitcoin can not have value, you do the same proclaiming that temporary control of Bitcoin can not have value.\n>>>>>> \n>>>>>> It seems to me you have reversed the meaning of temporary and final. Bitcoin is useful because of the presumption that there is no finality of control. One presumes an ability to trade control of it for something else. This is temporary control. Final control would be the case in which, at some point, it can no longer be traded, making it worthless at that point. If this is known to be the case it implies that it it worthless at all prior points as well.\n>>>>>> \n>>>>>> These are distinct scenarios. The fact that temporary (in my usage) control implies the possibility of value does not imply that finality of control does as well. The fact that (renowned or otherwise) people have made errors does not imply that I am making an error. These are both non-sequiturs.\n>>>>>> \n>>>>>>> I say, that temporary control does not have value until means dealing with it are offered, and that is I work on. Thereafter might obtain value if final control is deemed too expensive or not attainable, we shall see.\n>>>>>> \n>>>>>> The analogy to rental of a consumable good does not apply to the case of a non-consumable good. If it cannot be traded and cannot be consumed it cannot obtain marketable value. To this point it matters not whether it exists.\n>>>>> \n>>>>> I meant with control the control of entries in the register which I think is the deeper utility of Bitcoin. Final control is meant to be the opposite of temporary which is the time limited control with some expiry.\n>>>>> \n>>>>> Thank you for your thoughts as they help to sharpen my arguments.\n>>>>> \n>>>>> Best,\n>>>>> \n>>>>> Tamas Blummer\n>>>>> \n>>>>>> Best,\n>>>>>> Eric\n>>>>>> \n>>>>>>> Tamas Blummer\n>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-02T03:45:31",
                "message_text_only": "Good morning Eric, and Tamas,\n\n> In the case of tracking an asset that becomes worthless at a specific time, one could value a record of ownership, and the ability to trade ownership of the asset during the period. Consider colored coin type tracking of a theater ticket for a specific show, where the ticket is worthless by the end of the show.\n\nAs it happens, I was playing around with another idea I am developing.\nAnd it involves something very much similar, but distinct.\n\nIn particular, currencies are worthless unless exchanged for things of value to existent beings.\nAnd the discovery of things of value is enabled by advertising.\nThe idea I am developing, is that of a \"Bitcoin Classified Ads Network\", wherein ordinary P2PKH UTXOs (or P2WPKH equivalents) embed a commitment to an advertisement.\nA secondary network of nodes (separate from the Bitcoin network) transmits the actual advertisements, as well as the UTXOs being used to commit to them.\nThis secondary network would then reject/purge advertisements once the UTXO is spent on the Bitcoin blockchain.\nThis makes advertising costly (for the opportunity cost of locking some money in a UTXO until one has acquired actual paying custom) while reducing impact on Bitcoin blockchain space (commitment to the advertisment is in the same space as the ownership of the coin).\nChanging the advertisement one makes is possible, at the cost of paying for a transaction in the Bitcoin blockchain to spend the old UTXO and publish a new UTXO now committing to the new advertisement.\n\nOf note is that I also derived that it would be beneficial, for some HODLers to offer their funds for the purpose of making these advertisements.\nSome service or product provider would agree with an advertiser to lock some coins of the advertiser for a limited amount of time, in exchange for payment upfront, with the coin address committing to the indicate advertisement of the service or product provider.\nThis can be done by paying to a 2p-ECDSA (or with Schnorr, MuSig) public key, with the service/product provider embedding a commitment to its advertisement to its own key, and a pre-signed `nLockTime` transaction that lets the advertiser recover the money.\n\nThis is in fact a similar use to the \"theater ticket\" case you mentioned, yet distinct.\nIn the case of the Bitcoin Classified Ads Network, it is the intermediate addresses used before reclamation by the advertiser that is valuable, as they also serve as commitments to advertisements, attesting to the (probable) validity of the advertisement and making spam have a cost.\nGiven that nodes of the Bitcoin Classified Ads Network will have memory limits, advertisements whose \"lockup-rate\" (i.e. the amount of value of the backing UTXO, divided by the size of the advertisement) are low could be evicted from memory before advertisements with high lockup-rate, and thus be less likely to propagate across the network.\nThus service/product providers would want to increase their \"marketing budget\" to be less likely to be evicted from nodes of the Bitcoin Classified Ads Network, which is beneficial as it increases the minimum practical lockup-rate needed to spam the network, thus making spam costly.\n\nMy current plan is that the provider can contact the advertiser in order to effect changes to their advertisement.\nThen the provider and the advertiser sign a new timelocked reclamation transaction, then sign a transaction moving from the old advertisement to the new advertisement (presumably there is some protocol for ensuring the advertiser gets paid for this, such as an HTLC that can be triggered by an onchain payment or by an LN payment; I have the details in my processing space but require some time to serialize to human-readabe format).\n\nArguably, this example seems to show that generalized covenants are not needed in fact, if transfers of coin require paying to the issuer/lender of the coin.\nGeneralized covenants allows the provider (or ticket-holder in your example) to effect transfers from one advertisement to another (or one ticket-holder to another in your example) without cooperation with the advertiser (or ticket-issuer in your example).\nThis would be otherwise needed if we lock using a 2-of-2 address that has a timelocked transaction to reclaim the funds.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T06:38:55",
                "message_text_only": "Good morning Eric and ZmnSCPxj,\n\n> On Jul 2, 2019, at 05:45, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric, and Tamas,\n> \n>> In the case of tracking an asset that becomes worthless at a specific time, one could value a record of ownership, and the ability to trade ownership of the asset during the period. Consider colored coin type tracking of a theater ticket for a specific show, where the ticket is worthless by the end of the show.\n> \n> As it happens, I was playing around with another idea I am developing.\n> And it involves something very much similar, but distinct.\n> \n> In particular, currencies are worthless unless exchanged for things of value to existent beings.\n> And the discovery of things of value is enabled by advertising.\n> The idea I am developing, is that of a \"Bitcoin Classified Ads Network\", wherein ordinary P2PKH UTXOs (or P2WPKH equivalents) embed a commitment to an advertisement.\n> A secondary network of nodes (separate from the Bitcoin network) transmits the actual advertisements, as well as the UTXOs being used to commit to them.\n> This secondary network would then reject/purge advertisements once the UTXO is spent on the Bitcoin blockchain.\n> This makes advertising costly (for the opportunity cost of locking some money in a UTXO until one has acquired actual paying custom) while reducing impact on Bitcoin blockchain space (commitment to the advertisment is in the same space as the ownership of the coin).\n> Changing the advertisement one makes is possible, at the cost of paying for a transaction in the Bitcoin blockchain to spend the old UTXO and publish a new UTXO now committing to the new advertisement.\n> \n> Of note is that I also derived that it would be beneficial, for some HODLers to offer their funds for the purpose of making these advertisements.\n\nAll above aligns with my intuition that: on one side giving up temporary control of UTXOs represent opportunity cost and on the receiver side having temporary control can unlock utility they would pay for.\nIf the techical setup is trustless and return of control to those who gave it up temporarilty is certain, then this in combination means that HODLer are able to earn riskless interest by giving up control of their UTXOs temporarily.\n\n\n> Some service or product provider would agree with an advertiser to lock some coins of the advertiser for a limited amount of time, in exchange for payment upfront, with the coin address committing to the indicate advertisement of the service or product provider.\n> This can be done by paying to a 2p-ECDSA (or with Schnorr, MuSig) public key, with the service/product provider embedding a commitment to its advertisement to its own key, and a pre-signed `nLockTime` transaction that lets the advertiser recover the money.\n> \n> This is in fact a similar use to the \"theater ticket\" case you mentioned, yet distinct.\n> In the case of the Bitcoin Classified Ads Network, it is the intermediate addresses used before reclamation by the advertiser that is valuable, as they also serve as commitments to advertisements, attesting to the (probable) validity of the advertisement and making spam have a cost.\n> Given that nodes of the Bitcoin Classified Ads Network will have memory limits, advertisements whose \"lockup-rate\" (i.e. the amount of value of the backing UTXO, divided by the size of the advertisement) are low could be evicted from memory before advertisements with high lockup-rate, and thus be less likely to propagate across the network.\n> Thus service/product providers would want to increase their \"marketing budget\" to be less likely to be evicted from nodes of the Bitcoin Classified Ads Network, which is beneficial as it increases the minimum practical lockup-rate needed to spam the network, thus making spam costly.\n> \n> My current plan is that the provider can contact the advertiser in order to effect changes to their advertisement.\n> Then the provider and the advertiser sign a new timelocked reclamation transaction, then sign a transaction moving from the old advertisement to the new advertisement (presumably there is some protocol for ensuring the advertiser gets paid for this, such as an HTLC that can be triggered by an onchain payment or by an LN payment; I have the details in my processing space but require some time to serialize to human-readabe format).\n> \n> Arguably, this example seems to show that generalized covenants are not needed in fact, if transfers of coin require paying to the issuer/lender of the coin.\n> Generalized covenants allows the provider (or ticket-holder in your example) to effect transfers from one advertisement to another (or one ticket-holder to another in your example) without cooperation with the advertiser (or ticket-issuer in your example).\n> This would be otherwise needed if we lock using a 2-of-2 address that has a timelocked transaction to reclaim the funds.\n\nYes, your example does not need the covenant as the one who gave up temporary control is still involved in any motion of the UTXO, therefore able to enforce own interest that reclaiming the UTXOs remains possible.\n\nA covenant is needed only if it is against the interest of all parties involved in transfers of the UTXO, in which case consensus must enforce that it is carried forward.\nThe added strength of the covenant is that the one who gives up temporary control does not have to be involved in using the UTXO until it is given back.\n\nNote that the advertizing service provider would need temporary access to UTXOs of signficant value, so opportunity cost and thereby cost of advertizing becomes significant.\nCovenants would allow the separation of the advertizing service from HODLer funding it with significant UTXOs.\nHODLer could give temporary control to the service and the service could broker those to others, but the original HODLer was sure to receive the UTXOs back and the HODLer would not be bothered with the operation of the service.\n\nThe covenant I proposed would add an alternate taproot validation path stacked onto previously existing ones.\nThis means that one could give others temporary access for a shorter time period than one\u2019s own temporary access.\nOne could however not override the delayed access secured for the HODLer.\n\nDoes this remind you of something? Yes, the service provider would act like a bank, matching depositor, the HODLer, with those who need temporary control of UTXO for advertizing purposes.\nThis shows why temporary control with covenant can be understood as loan in a full reserve banking, which started my exploration of this topic.\n\nCurrent technical means do not allow trustless and hands-off coordination of provider of UTXOs (that is capital) with provider of arbitary services that monetize the use of Bitcoin\u2019s unforgable registry.\nIn other words we need covenants to enable Bitcoin applications to trustlessly and flexibly deal with foreign capital.\n\nOne other thing the consensus would have to ensure is that inputs with covenants are merged only into outputs with same covenant.\nWhich makes UTXOs with a particular covenants obey rules earlier known for colored coins and transactions moving it form a distinct embedded chain.\nAdding same covenant establishes fungible coinbases of same embedded chain and dropping the covenant makes them again fungible with common UTXOs.\n\nI could not be more excited of what boost this could give to the Bitcoin economy, unlocking the use of its unforgeable registry to track any asset with the same security guarantees it offers for its own cash token.\n\nBest to you,\n\nTamas Blummer\n\n\n> \n> Regards,\n> ZmnSCPxj\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/4f51afba/attachment.sig>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-02T08:12:26",
                "message_text_only": "Good morning Tamas,\n\n> Note that the advertizing service provider would need temporary access to UTXOs of signficant value, so opportunity cost and thereby cost of advertizing becomes significant.\n> Covenants would allow the separation of the advertizing service from HODLer funding it with significant UTXOs.\n> HODLer could give temporary control to the service and the service could broker those to others, but the original HODLer was sure to receive the UTXOs back and the HODLer would not be bothered with the operation of the service.\n\nThank you for this thought.\nIt has challenged me to consider how to bring this capability out of the Bitcoin blockchain.\n\nAs a counterargument, I observe that committing to the advertisement on the UTXO is similar to committing to a SCRIPT on a UTXO.\nAnd I observe the Graftroot idea, wherein we commit to a public key on the UTXO, and admit a SCRIPT that is signed by the public key as a SCRIPT that unlocks the UTXO for spending.\n\nBy analogy, in my \"advertising\" scheme, instead of committing the advertisement on the UTXO, I can instead commit a public key (for example, the hash of the \"advertiser pubkey\" is used to tweak the onchain public key).\nThen we use this advertiser pubkey to admit advertisements on the advertising network.\n\nThis advertiser pubkey is used to sign an \"advertisement chain\", which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey.\nTo ensure that the advertiser does not sign multiple versions of this chain, we can have the signing nonce be derived from the height of the advertchain, such that signing the same height multiple times leads to private key revelation.\nEach header of the advertchain also includes a `CLTV`-like construct, which is the Bitcoin blockheight that must be reached first before another advertchain header can be added, containing a new advertisement that replaces the previous one.\n\nThis lets an advertising broker pay for some onchain UTXO to a HODLer, providing a `nLockTime`d onchain transaction returning the funds to the HODLer, with the UTXO paying to a 2-of-2 with a commitment to the advertiser pubkey.\nThen the advertising broker can rent out the UTXO to providers who wish to advertise, though I have to figure out how to make this atomic (i.e. paying the advertiser onchain or on Lightning, would be enough for the provider to derive the advertchain header and its signature, for its own advertisement --- perhaps some minimal SCRIPT-like language on the advertchain can be done).\n\nThis lets the advertising broker case to work even without generalized covenants on the Bitcoin blockchain, while providing the same benefit of not bothering the HODLer who ultimately owns the funds each time advertisements need to be changed.\nThis gives the advantage that changes to the advertisement that is attested by a UTXO do not have any activity on the Bitcoin blockchain itself, only on the advertchain; at the cost that the advertising network now takes on the added bandwidth of handling several tiny blockchains of limited lifetime, instead of keeping the data on \"which advertisement is valid\" on the Bitcoin blockchain.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T09:30:31",
                "message_text_only": "Hello ZmnSCPxj,\n\n> On Jul 2, 2019, at 10:12, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> As a counterargument, I observe that committing to the advertisement on the UTXO is similar to committing to a SCRIPT on a UTXO.\n> And I observe the Graftroot idea, wherein we commit to a public key on the UTXO, and admit a SCRIPT that is signed by the public key as a SCRIPT that unlocks the UTXO for spending.\n> \n> By analogy, in my \"advertising\" scheme, instead of committing the advertisement on the UTXO, I can instead commit a public key (for example, the hash of the \"advertiser pubkey\" is used to tweak the onchain public key).\n> Then we use this advertiser pubkey to admit advertisements on the advertising network.\n> \n> This advertiser pubkey is used to sign an \"advertisement chain\", which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey.\n> To ensure that the advertiser does not sign multiple versions of this chain, we can have the signing nonce be derived from the height of the advertchain, such that signing the same height multiple times leads to private key revelation.\n\nThe advertiser would thereby put the funds of the HODLer on risk of his misbehavior, which means the HODLer would have to trust the advertizing service.\nThis is not the trustless separation the covenant achives.\n\nRegards,\n\nTamas Blummer\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/8a8984f5/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T09:47:09",
                "message_text_only": "Hello ZmnSCPxj,\n\nI share your goal to move everything possible off-chain.\n\nThe discussion of covenant is not an on/off-chain discussion, but if covenant is needed to solve problems we currently can not and which unlock significant innovation.\n\nConsensus support of the covenant is only needed if an unchained setup using it is closed uncooperatively, otherwise there is not even a reason to disclose on-chain that a covenant was used.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 2, 2019, at 11:30, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> Hello ZmnSCPxj,\n> \n>> On Jul 2, 2019, at 10:12, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> As a counterargument, I observe that committing to the advertisement on the UTXO is similar to committing to a SCRIPT on a UTXO.\n>> And I observe the Graftroot idea, wherein we commit to a public key on the UTXO, and admit a SCRIPT that is signed by the public key as a SCRIPT that unlocks the UTXO for spending.\n>> \n>> By analogy, in my \"advertising\" scheme, instead of committing the advertisement on the UTXO, I can instead commit a public key (for example, the hash of the \"advertiser pubkey\" is used to tweak the onchain public key).\n>> Then we use this advertiser pubkey to admit advertisements on the advertising network.\n>> \n>> This advertiser pubkey is used to sign an \"advertisement chain\", which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey.\n>> To ensure that the advertiser does not sign multiple versions of this chain, we can have the signing nonce be derived from the height of the advertchain, such that signing the same height multiple times leads to private key revelation.\n> \n> The advertiser would thereby put the funds of the HODLer on risk of his misbehavior, which means the HODLer would have to trust the advertizing service.\n> This is not the trustless separation the covenant achives.\n> \n> Regards,\n> \n> Tamas Blummer\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/c60a6c10/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T10:14:32",
                "message_text_only": "Hello ZmnSCPxj,\n\nTo be more precise, the value of the UTXO is severaly damaged that it is governed by rules of a de-facto side chain with different rules.\nTherefore its value to those renting it from the advertizer is just that of the advertizement, which is not neccesarily following the opportunity cost.\n\nThe covenant supported temporary access is transitive, therefore anyone who is in temporary control of an UTXO can recover its cost by sub-renting.\nThe opportunity (riskless) interest provides a baseline of value on top of which you may have utility that is the advertizement.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 2, 2019, at 11:30, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> Hello ZmnSCPxj,\n> \n>> On Jul 2, 2019, at 10:12, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> As a counterargument, I observe that committing to the advertisement on the UTXO is similar to committing to a SCRIPT on a UTXO.\n>> And I observe the Graftroot idea, wherein we commit to a public key on the UTXO, and admit a SCRIPT that is signed by the public key as a SCRIPT that unlocks the UTXO for spending.\n>> \n>> By analogy, in my \"advertising\" scheme, instead of committing the advertisement on the UTXO, I can instead commit a public key (for example, the hash of the \"advertiser pubkey\" is used to tweak the onchain public key).\n>> Then we use this advertiser pubkey to admit advertisements on the advertising network.\n>> \n>> This advertiser pubkey is used to sign an \"advertisement chain\", which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey.\n>> To ensure that the advertiser does not sign multiple versions of this chain, we can have the signing nonce be derived from the height of the advertchain, such that signing the same height multiple times leads to private key revelation.\n> \n> The advertiser would thereby put the funds of the HODLer on risk of his misbehavior, which means the HODLer would have to trust the advertizing service.\n> This is not the trustless separation the covenant achives.\n> \n> Regards,\n> \n> Tamas Blummer\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/46768c00/attachment.sig>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-02T10:33:42",
                "message_text_only": "Sent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Tuesday, July 2, 2019 5:30 PM, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n\n> Hello ZmnSCPxj,\n>\n> > On Jul 2, 2019, at 10:12, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > As a counterargument, I observe that committing to the advertisement on the UTXO is similar to committing to a SCRIPT on a UTXO.\n> > And I observe the Graftroot idea, wherein we commit to a public key on the UTXO, and admit a SCRIPT that is signed by the public key as a SCRIPT that unlocks the UTXO for spending.\n> > By analogy, in my \"advertising\" scheme, instead of committing the advertisement on the UTXO, I can instead commit a public key (for example, the hash of the \"advertiser pubkey\" is used to tweak the onchain public key).\n> > Then we use this advertiser pubkey to admit advertisements on the advertising network.\n> > This advertiser pubkey is used to sign an \"advertisement chain\", which is a merklized singly-linked list whose contents are the actual advertisements, each node being signed using the advertiser pubkey.\n> > To ensure that the advertiser does not sign multiple versions of this chain, we can have the signing nonce be derived from the height of the advertchain, such that signing the same height multiple times leads to private key revelation.\n>\n> The advertiser would thereby put the funds of the HODLer on risk of his misbehavior, which means the HODLer would have to trust the advertizing service.\n\nNo it would not :)\n\nOnchain, the locked UTXO would be a 2-of-2 MuSig / 2p-ECDSA of the HODLer and the advertising broker.\nThe HODLer and advertising broker perform a (mostly-offchain) ritual that ensures that the HODLer gets a `nLockTime` transaction spending from this UTXO and paying it back to the HODLer, and that the advertising broker pays for rent of this UTXO, prior to the UTXO actually appearing onchain.\n\nThe UTXO requires both cooperation of HODLer and advertising broker in order to spend, and the HODLer only cares that it gets an `nLockTime` transaction and will no longer cooperate / will permanently delete its share of the key after getting this.\n\nThe MuSig / 2p-ECDSA pubkey used will then be tweaked (by addition in MuSig, by multiplication in 2p-ECDSA; the HOLDer need not even learn it, the advertising broker can tweak its pubkey in the Bitcoin-level transaction beforehand) to commit to a hash of the \"Advertising pubkey\".\nThus I say the UTXO \"commits to the advertising pubkey\", not \"pays to the advertising pubkey\".\nIndeed, the pubkey of the advertising broker used on the Bitcoin blockchain can be very different from the advertising pubkey used on the advertchain.\n\nThis \"Advertising pubkey\" is the pubkey used in the advertchain.\n\nThe actual money on Bitcoin cannot be spent by the broker unilaterally.\n\nHowever, what advertisement it will commit to on the advertchain, can be controlled unilaterally by the advertising broker.\nThat is the entire point: the HODLer rents out the UTXO to the advertising broker, relinquishes control over the advertchain, but retaining (eventual) control over the actual Bitcoins.\nThe advertising broker then has sole control of the advertchain, and can rent it out for smaller timeframes to actual service/product providers.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T12:51:31",
                "message_text_only": "Hello ZmnSCPxj,\n\n> On Jul 2, 2019, at 12:33, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Tuesday, July 2, 2019 5:30 PM, Tamas Blummer <tamas.blummer at gmail.com <mailto:tamas.blummer at gmail.com>> wrote:\n> \n>> The advertiser would thereby put the funds of the HODLer on risk of his misbehavior, which means the HODLer would have to trust the advertizing service.\n> \n> No it would not :)\n\n\nYou are right. I noticed after sending my reply and then I sent two other. I apologize for being noisy.\n\nLet me consolidate my thinking, here.\n\nIf there is a use for UTXOs with temporary control, then those who want that use will pay for it.\n\nA user of a service that requires temporary control UTXOs would need to cover:\n\n1. fees required by the service\n2. the opportunity cost of temporary ownership paid to the original holder who gave up control.\n\nIf the service is operated by an entity billing user then it can use UTXOs of minimal value for its operation and practically ignore opportunity interest.\nThis is the case with theater tickets just and other simple colored coin like use of Bitcoin. Also in case of the unchained advertizement, if the service bills its user\nfor its internal re-allocation of an UTXO, then why would it need to use significant value temorary control UTXOs? Actually why not use plain UTXOs, to start with?\n\nIf however the service is a common good, a network without owner and therefore not billing on behalf of someone, but wants to protect itself from spam, then it is could require temporary access to significant value UTXOs and thereby induce opportunity cost to user. Alternatively it could require burning ordinary UTXOs. Burning indirectly benefits all HODLer, temporary control benefits those who consciously gave up control. I dislike burning as it is unsustainable.\n\nIf the implementation of temporary use is enforced by consenus such that it is transitive, then temporary use could be re-rented or sold to recover opportunity cost for no longer needed temporary access, making it useable for an other service.\n\nTemporary access UTXOs with covenants allows us to build spam limited public services that are not owned by an operator and financially benefit HODLer offering them riskless interest.\n\nTamas Blummer\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/3b7b41ad/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/3b7b41ad/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-02T05:08:53",
                "message_text_only": "> On Jul 1, 2019, at 20:52, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> I said that I would make no further comment given the belief that no new ideas were surfacing. However, after giving it some more thought on my own, I believe I have found the one case in which a person could value such encumbered coins.\n> \n> In the case of tracking an asset that becomes worthless at a specific time, one could value a record of ownership, and the ability to trade ownership of the asset during the period. Consider colored coin type tracking of a theater ticket for a specific show, where the ticket is worthless by the end of the show.\n> \n\n\nIn other words you now see the utility of a register offered by UTXOs that are only temporary availability to current owner. If there is a utility there is also a value in it for them.\nI am glad we are on the same side on this utility and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n\nSince ZmnSCPxj also raised the question if covenants are needed at all, let me continue my thoughts on this in reply to his mail.\n\nTamas Blummer\n\n> \n> \n>> On Jun 30, 2019, at 13:26, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>> \n>> My argument does not need the comparison with ICOs.\n>> \n>> They were just an example that people pay for the utility of register even though others think the tokens they keep track of are worthless.\n>> \n>> Tamas Blummer\n>> \n>> \n>>> On Jun 30, 2019, at 22:13, Eric Voskuil <eric at voskuil.org> wrote:\n>>> \n>>> ICO tokens can be traded (indefinitely) for other things of value, so the comparison isn\u2019t valid. I think we\u2019ve both made our points clearly, so I\u2019ll leave it at that.\n>>> \n>>> Best,\n>>> Eric\n>>> \n>>>> On Jun 30, 2019, at 12:55, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>> \n>>>> \n>>>>> On Jun 30, 2019, at 20:54, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>> \n>>>>> Could you please explain the meaning and utility of \u201cunforgeable register\u201d as it pertains to such encumbered coins?\n>>>> \n>>>> I guess we agree that some way of keeping track of ownership is prerequisite for something to aquire value.\n>>>> We likely also agree that the security of that ownership register has great influence to the value.\n>>>> \n>>>> The question remains if a register as utility in itself gives value to the thing needed to use that register.\n>>>> I think it does, if people are interested in what it keeps track of, for whatever reason, even for reasons you find bogus.\n>>>> \n>>>> It was not intentional, but I think I just explained why Ethereum aquired higher market value by being register of ICO tokens.\n>>>> \n>>>> Now back to the coins encumbered with the debt covenant:\n>>>> Transactions moving them constitute a register of covered debt and you need them to update that register.\n>>>> Should some people find such a register useful then those coins needed to update this register will aquire value.\n>>>> Does not matter if you think the concept of covered debt is just as bogus as ICOs.\n>>>> \n>>>> Here some good news: If they aquire value then they offer a way to generate income for hodler by temporarily giving up control.\n>>>> \n>>>> Tamas Blummer\n>>>> \n>>>>> \n>>>>> The meaning in terms of Bitcoin is clear - the \u201cowner\u201d of outputs that represent value (i.e. in the ability to trade them for something else) is recorded publicly and, given Bitcoin security assumptions, cannot be faked. What is not clear is the utility of a record of outputs that cannot be traded for something else. You seem to imply that a record is valuable simply because it\u2019s a record.\n>>>>> \n>>>>> e\n>>>>> \n>>>>>> On Jun 30, 2019, at 11:35, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>>> \n>>>>>> \n>>>>>>> On Jun 30, 2019, at 19:41, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>> \n>>>>>>> \n>>>>>>>> On Jun 30, 2019, at 03:56, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>>>>> \n>>>>>>>> Hi Eric,\n>>>>>>>> \n>>>>>>>>> On Jun 29, 2019, at 23:21, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>>>> \n>>>>>>>>> What loan? Alice has paid Bob for something of no possible utility to her, or anyone else.\n>>>>>>>> \n>>>>>>>> Coins encumbered with the described covenant represent temporary control of a scarce resource.\n>>>>>>>> \n>>>>>>>> Can this obtain value? That depends on the availability of final control and ability to deal with temporary control.\n>>>>>>> \n>>>>>>> For something to become property (and therefore have marketable value) requires that it be both scarce and useful. Bitcoin is useful only to the extent that it can be traded for something else that is useful. Above you are only dealing with scarcity, ignoring utility.\n>>>>>> \n>>>>>> There is a deeper utility of Bitcoin than it can be traded for something else. That utility is to use its unforgeable register.\n>>>>>> We have only one kind of units in this register and by having covenants we would create other kinds that are while encumbered not fungible with the common ones.\n>>>>>> \n>>>>>> Units are certainly less desirable if encumbered with a debt covenant. You say no one would assign them any value.\n>>>>>> \n>>>>>> I am not that sure as they still offer the utility of using the unforgeable register, in this case a register of debt covered by reserves.\n>>>>>> You also doubt forcing debt to be covered by reserves is a good idea, I got that, but suppose we do not discuss this here.\n>>>>>> If there are people who think it is a good idea, then they would find having an unforgeable register of it useful and therefore units needed to maintain that register valuable to some extent.\n>>>>>> \n>>>>>>> \n>>>>>>>> I think you do not show the neccesary respect of the market.\n>>>>>>> \n>>>>>>> I\u2019m not sure what is meant here by respect, or how much of it is necessary. I am merely explaining the market.\n>>>>>> \n>>>>>> You are not explaining an existing market but claim that market that is not yet there will follow your arguments.\n>>>>>> \n>>>>>>>> Your rant reminds me of renowed economists who still argue final control Bitcoin can not have value, you do the same proclaiming that temporary control of Bitcoin can not have value.\n>>>>>>> \n>>>>>>> It seems to me you have reversed the meaning of temporary and final. Bitcoin is useful because of the presumption that there is no finality of control. One presumes an ability to trade control of it for something else. This is temporary control. Final control would be the case in which, at some point, it can no longer be traded, making it worthless at that point. If this is known to be the case it implies that it it worthless at all prior points as well.\n>>>>>>> \n>>>>>>> These are distinct scenarios. The fact that temporary (in my usage) control implies the possibility of value does not imply that finality of control does as well. The fact that (renowned or otherwise) people have made errors does not imply that I am making an error. These are both non-sequiturs.\n>>>>>>> \n>>>>>>>> I say, that temporary control does not have value until means dealing with it are offered, and that is I work on. Thereafter might obtain value if final control is deemed too expensive or not attainable, we shall see.\n>>>>>>> \n>>>>>>> The analogy to rental of a consumable good does not apply to the case of a non-consumable good. If it cannot be traded and cannot be consumed it cannot obtain marketable value. To this point it matters not whether it exists.\n>>>>>> \n>>>>>> I meant with control the control of entries in the register which I think is the deeper utility of Bitcoin. Final control is meant to be the opposite of temporary which is the time limited control with some expiry.\n>>>>>> \n>>>>>> Thank you for your thoughts as they help to sharpen my arguments.\n>>>>>> \n>>>>>> Best,\n>>>>>> \n>>>>>> Tamas Blummer\n>>>>>> \n>>>>>>> Best,\n>>>>>>> Eric\n>>>>>>> \n>>>>>>>> Tamas Blummer\n>> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190702/bea61729/attachment-0001.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-03T22:30:55",
                "message_text_only": "> On Jul 2, 2019, at 00:08, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> \n>> On Jul 1, 2019, at 20:52, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> I said that I would make no further comment given the belief that no new ideas were surfacing. However, after giving it some more thought on my own, I believe I have found the one case in which a person could value such encumbered coins.\n>> \n>> In the case of tracking an asset that becomes worthless at a specific time, one could value a record of ownership, and the ability to trade ownership of the asset during the period. Consider colored coin type tracking of a theater ticket for a specific show, where the ticket is worthless by the end of the show.\n> \n> \n> In other words you now see the utility of a register offered by UTXOs that are only temporary availability to current owner. If there is a utility there is also a value in it for them.\n\nIn other words I discovered a potentially-valid use case for you. The concern I expressed was that you had not presented one.\n\n> I am glad we are on the same side on this utility\n\nMy goal is never to discourage, but understanding of provable behavior and utility. Our space is replete with unsupportable conjecture and hyperbole. There are no sides, just discovery of truth.\n\n> and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n\nActually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n\nI\u2019ve noticed that in subsequent posts you continue to imply that there is economic value in such tracking of any asset, and of course here imply the validity of your other use case, monetary lending. This, as I have shown, is not the case. Tracking of an asset of value beyond the net compound interest cost of dust is more cheaply accomplished by burning than by renting, and as I have shown, it is not accurate to claim that the encumbered coin can be used as money (or to track any asset of perpetual value). When the coin expires the money/asset holder becomes a bag holder, invalidating any initial value apart from scamming.\n\nIn the valid use case that I have demonstrated (tracking of expiring assets), the marketable value of the rented coin is not the market price of that coin, but the price paid for it. So for example, 1 coin rented at 10% APR for one year is worth .1 coin. And when a renter resells this tracking coin it is worth the fraction of this amount for the time remaining. The coin itself (i.e. its face value) cannot be used by the renter to purchase anything.\n\nAs such this is truly not a loan in the financial or economic sense. Given an actual loan the borrower can use the full value of the amount borrowed to purchase goods that can be used in production. Subsequent generation of products and thereby revenue is the source of yield on a loan (economically equivalent to dividend on an equity contract). This allows the borrower to repay the loan with interest. Without *any* usable capital over the term of the rental, there is no investment possible and the time value of the rented coin cannot be realized by the renter.\n\nSo the one potentially-valid scenario, a fixed-term tracking rental, is entirely an *expense*, not a loan. A financial loan incurs an interest expense, but also implies the value of the amount loaned is fully usable (i.e., consumed or traded) during the term (the reason to pay interest). That is money over time, yielding the time value of money. In this case the value of the loan at any time to the renter is simply the amortized interest remaining. This implies that no income can be generated from the rental \u201cprinciple\u201d by the renter. A price is paid for the rental and that value of the rental is fully exhausted by the end of the term, with no other benefit than the tracking that was purchased.\n\nThe person renting the fixed-term tracking coin (i.e. \u201cowner\u201d) can earn income by selling dust+1 outputs at the cost of capital, limited to a maximum term dictated by the cost of capital and the dust limit (as shown previously). Economically speaking, all business returns gravitate toward the cost of capital, including lending, and this is no different. But it cannot be said that the owner is a financial lender. The owner is simply selling non-depreciating (from his perspective) fixed-term tracking space.\n\nThe owner can of course trade rights to the controlling output. The rental contract has been prepaid (by your design, in order to shift counterparty risk). As such the traded contract has no yield and therefore contracting for its sale is a currency future, not an interest rate future as would be implied by a debt market. Yet FX speculation already exists for Bitcoin, requiring no covenant or rental market. This would seem to undermine any secondary market for these more complex and limited currency futures.\n\nFinally, valuation is based on the assumption of a non-zero dust+1, which BTC enforces as a 0 satoshi dust limit (i.e. 0 sats is considered dust and is not valid). Anything above this is policy-enforced only. As such a miner can undercut the cost of tracking an individual asset down to 1 sat. Given that there is no financial incentive to a higher dust limit for a miner, but a positive financial incentive to undercut the rental price for the same return, this is economically rational and therefore must be assumed.\n\nOne might argue that a lower dust policy would hurt BTC and therefore its miners collectively, creating an offsetting negative financial pressure. However given that the apparent cost is socialized in relation to individual benefit, this is not an economically rational conclusion. Furthermore, as the tracking outputs become unspendable due to the nature of the covenant, there is no actual dust accumulation (implementation dependent).\n\nAs such the return on any fixed-term tracking output, given a 10% APR, would become as low as .1 sat per year, assuming such a market could continue to function at that level. But it is also the case that a 1 sat output can be burned directly by the tracker and used indefinitely. This would presumably undermine any robust market for fixed-term tracking rental.\n\nBest,\nEric\n\n> Since ZmnSCPxj also raised the question if covenants are needed at all, let me continue my thoughts on this in reply to his mail.\n\n> Tamas Blummer\n> \n>> \n>> \n>>> On Jun 30, 2019, at 13:26, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>> \n>>> My argument does not need the comparison with ICOs.\n>>> \n>>> They were just an example that people pay for the utility of register even though others think the tokens they keep track of are worthless.\n>>> \n>>> Tamas Blummer\n>>> \n>>> \n>>>> On Jun 30, 2019, at 22:13, Eric Voskuil <eric at voskuil.org> wrote:\n>>>> \n>>>> ICO tokens can be traded (indefinitely) for other things of value, so the comparison isn\u2019t valid. I think we\u2019ve both made our points clearly, so I\u2019ll leave it at that.\n>>>> \n>>>> Best,\n>>>> Eric\n>>>> \n>>>>> On Jun 30, 2019, at 12:55, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>> \n>>>>> \n>>>>>> On Jun 30, 2019, at 20:54, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>> \n>>>>>> Could you please explain the meaning and utility of \u201cunforgeable register\u201d as it pertains to such encumbered coins?\n>>>>> \n>>>>> I guess we agree that some way of keeping track of ownership is prerequisite for something to aquire value.\n>>>>> We likely also agree that the security of that ownership register has great influence to the value.\n>>>>> \n>>>>> The question remains if a register as utility in itself gives value to the thing needed to use that register.\n>>>>> I think it does, if people are interested in what it keeps track of, for whatever reason, even for reasons you find bogus.\n>>>>> \n>>>>> It was not intentional, but I think I just explained why Ethereum aquired higher market value by being register of ICO tokens.\n>>>>> \n>>>>> Now back to the coins encumbered with the debt covenant:\n>>>>> Transactions moving them constitute a register of covered debt and you need them to update that register.\n>>>>> Should some people find such a register useful then those coins needed to update this register will aquire value.\n>>>>> Does not matter if you think the concept of covered debt is just as bogus as ICOs.\n>>>>> \n>>>>> Here some good news: If they aquire value then they offer a way to generate income for hodler by temporarily giving up control.\n>>>>> \n>>>>> Tamas Blummer\n>>>>> \n>>>>>> \n>>>>>> The meaning in terms of Bitcoin is clear - the \u201cowner\u201d of outputs that represent value (i.e. in the ability to trade them for something else) is recorded publicly and, given Bitcoin security assumptions, cannot be faked. What is not clear is the utility of a record of outputs that cannot be traded for something else. You seem to imply that a record is valuable simply because it\u2019s a record.\n>>>>>> \n>>>>>> e\n>>>>>> \n>>>>>>> On Jun 30, 2019, at 11:35, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>>>> \n>>>>>>> \n>>>>>>>> On Jun 30, 2019, at 19:41, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>>> \n>>>>>>>> \n>>>>>>>>> On Jun 30, 2019, at 03:56, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n>>>>>>>>> \n>>>>>>>>> Hi Eric,\n>>>>>>>>> \n>>>>>>>>>> On Jun 29, 2019, at 23:21, Eric Voskuil <eric at voskuil.org> wrote:\n>>>>>>>>>> \n>>>>>>>>>> What loan? Alice has paid Bob for something of no possible utility to her, or anyone else.\n>>>>>>>>> \n>>>>>>>>> Coins encumbered with the described covenant represent temporary control of a scarce resource.\n>>>>>>>>> \n>>>>>>>>> Can this obtain value? That depends on the availability of final control and ability to deal with temporary control.\n>>>>>>>> \n>>>>>>>> For something to become property (and therefore have marketable value) requires that it be both scarce and useful. Bitcoin is useful only to the extent that it can be traded for something else that is useful. Above you are only dealing with scarcity, ignoring utility.\n>>>>>>> \n>>>>>>> There is a deeper utility of Bitcoin than it can be traded for something else. That utility is to use its unforgeable register.\n>>>>>>> We have only one kind of units in this register and by having covenants we would create other kinds that are while encumbered not fungible with the common ones.\n>>>>>>> \n>>>>>>> Units are certainly less desirable if encumbered with a debt covenant. You say no one would assign them any value.\n>>>>>>> \n>>>>>>> I am not that sure as they still offer the utility of using the unforgeable register, in this case a register of debt covered by reserves.\n>>>>>>> You also doubt forcing debt to be covered by reserves is a good idea, I got that, but suppose we do not discuss this here.\n>>>>>>> If there are people who think it is a good idea, then they would find having an unforgeable register of it useful and therefore units needed to maintain that register valuable to some extent.\n>>>>>>> \n>>>>>>>> \n>>>>>>>>> I think you do not show the neccesary respect of the market.\n>>>>>>>> \n>>>>>>>> I\u2019m not sure what is meant here by respect, or how much of it is necessary. I am merely explaining the market.\n>>>>>>> \n>>>>>>> You are not explaining an existing market but claim that market that is not yet there will follow your arguments.\n>>>>>>> \n>>>>>>>>> Your rant reminds me of renowed economists who still argue final control Bitcoin can not have value, you do the same proclaiming that temporary control of Bitcoin can not have value.\n>>>>>>>> \n>>>>>>>> It seems to me you have reversed the meaning of temporary and final. Bitcoin is useful because of the presumption that there is no finality of control. One presumes an ability to trade control of it for something else. This is temporary control. Final control would be the case in which, at some point, it can no longer be traded, making it worthless at that point. If this is known to be the case it implies that it it worthless at all prior points as well.\n>>>>>>>> \n>>>>>>>> These are distinct scenarios. The fact that temporary (in my usage) control implies the possibility of value does not imply that finality of control does as well. The fact that (renowned or otherwise) people have made errors does not imply that I am making an error. These are both non-sequiturs.\n>>>>>>>> \n>>>>>>>>> I say, that temporary control does not have value until means dealing with it are offered, and that is I work on. Thereafter might obtain value if final control is deemed too expensive or not attainable, we shall see.\n>>>>>>>> \n>>>>>>>> The analogy to rental of a consumable good does not apply to the case of a non-consumable good. If it cannot be traded and cannot be consumed it cannot obtain marketable value. To this point it matters not whether it exists.\n>>>>>>> \n>>>>>>> I meant with control the control of entries in the register which I think is the deeper utility of Bitcoin. Final control is meant to be the opposite of temporary which is the time limited control with some expiry.\n>>>>>>> \n>>>>>>> Thank you for your thoughts as they help to sharpen my arguments.\n>>>>>>> \n>>>>>>> Best,\n>>>>>>> \n>>>>>>> Tamas Blummer\n>>>>>>> \n>>>>>>>> Best,\n>>>>>>>> Eric\n>>>>>>>> \n>>>>>>>>> Tamas Blummer\n>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-04T04:57:03",
                "message_text_only": "Good morning Eric,\n\n\n> > and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n>\n> Actually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n\nI presented another use case, that of the \"Bitcoin Classified Ads Network\".\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017083.html\n\nAdvertisements are \"backed\" by an unspent TXO.\nIn order to limit their local resource consumption, nodes of this network will preferentially keep advertisements that are backed by higher UTXO values divided by advertisement size, and drop those with too low UTXO value divided by advertisement size.\n\nThus, spammers will either need to rent larger UTXO values for their spam, paying for the higher rent involved, or fall back to pre-Bitcoin spamming methods.\nThus I think I have presented a use-case that is viable for this and does not simply devolve to \"just burn a 1-satoshi output\".\n\nI still do not quite support generalized covenants as the use-case is already possible on current Bitcoin (and given that with just a little more transaction introspection this enables Turing-completeness), but the basic concept of \"renting a UTXO of substantial value\" appears sound to me.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-04T16:43:45",
                "message_text_only": "Hi ZmnSCPxj,\n\nGeneralizing a bit this appears to be the same with one exception. The amount of encumbered coin is relevant to an external observer. Of course the effective dust limit is the maximum necessary encumbrance otherwise.\n\nIn the case of simple tracking, the market value of the coin is not relevant, all that is required is a valid output. Hence the devolution to 1 sat tracking. In your scenario the objective is to establish a meaningful cost for the output.\n\nA community of people using this as a sort of hashcash spam protection can raise the amount of encumbered coin (i.e. advertising threshold price) required in that context. The cost of this encumberance includes not only at least one tx fee but market cost of the coin rental.\n\nAt a 1 year advertisement term, 10% APR capital cost, and threshold of 1 encumbered coin, the same is achieved by burning .1 coin. In other words the renter (advertiser) has actually paid to the coin owner .1 coin to rent 1 coin for one year.\n\nAs with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n\ne\n\n> On Jul 3, 2019, at 23:57, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric,\n> \n> \n>>> and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n>> \n>> Actually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n> \n> I presented another use case, that of the \"Bitcoin Classified Ads Network\".\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017083.html\n> \n> Advertisements are \"backed\" by an unspent TXO.\n> In order to limit their local resource consumption, nodes of this network will preferentially keep advertisements that are backed by higher UTXO values divided by advertisement size, and drop those with too low UTXO value divided by advertisement size.\n> \n> Thus, spammers will either need to rent larger UTXO values for their spam, paying for the higher rent involved, or fall back to pre-Bitcoin spamming methods.\n> Thus I think I have presented a use-case that is viable for this and does not simply devolve to \"just burn a 1-satoshi output\".\n> \n> I still do not quite support generalized covenants as the use-case is already possible on current Bitcoin (and given that with just a little more transaction introspection this enables Turing-completeness), but the basic concept of \"renting a UTXO of substantial value\" appears sound to me.\n> \n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-04T17:10:31",
                "message_text_only": "Hi Eric,\n\nthere are some other ways to impose cost on use without direct billing, e.g.:\n\n- Burn Bitcoins to use the service, as you mentioned. This could work and would benefit remaining Bitcoin owner, but is unsustainable.\n\n- Pay high fees in self dealing transactions. This could work and would benefit miner.\n\n- Time lock own Bitcoins. This is forgoing control of an UTXO for a time period, which implies opportunity cost. This could be done with CLTV (OP_HODL). It damages the current owner but benefits no one. The problem is one might not have substantial UTXO to  imply high enough opportunity cost.\n\n- Pay someone else to time lock. This is paying someone to lock an UTXO for a time span. Payment and time lock could be combined in the same transaction.\n\n- Transferable borrowed Bitcoin.  This needs the covenant. This benefits those who consciously give up control for a time span. Its advantage is that since transferable it can be sold if no longer needed, thereby shortening the term of the original arrangement. It coul be re-rented for a shorter time period.\n\nTamas Blummer\n\n\n> On Jul 4, 2019, at 18:43, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> Hi ZmnSCPxj,\n> \n> Generalizing a bit this appears to be the same with one exception. The amount of encumbered coin is relevant to an external observer. Of course the effective dust limit is the maximum necessary encumbrance otherwise.\n> \n> In the case of simple tracking, the market value of the coin is not relevant, all that is required is a valid output. Hence the devolution to 1 sat tracking. In your scenario the objective is to establish a meaningful cost for the output.\n> \n> A community of people using this as a sort of hashcash spam protection can raise the amount of encumbered coin (i.e. advertising threshold price) required in that context. The cost of this encumberance includes not only at least one tx fee but market cost of the coin rental.\n> \n> At a 1 year advertisement term, 10% APR capital cost, and threshold of 1 encumbered coin, the same is achieved by burning .1 coin. In other words the renter (advertiser) has actually paid to the coin owner .1 coin to rent 1 coin for one year.\n> \n> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n> \n> e\n> \n>> On Jul 3, 2019, at 23:57, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> Good morning Eric,\n>> \n>> \n>>>> and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n>>> \n>>> Actually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n>> \n>> I presented another use case, that of the \"Bitcoin Classified Ads Network\".\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017083.html\n>> \n>> Advertisements are \"backed\" by an unspent TXO.\n>> In order to limit their local resource consumption, nodes of this network will preferentially keep advertisements that are backed by higher UTXO values divided by advertisement size, and drop those with too low UTXO value divided by advertisement size.\n>> \n>> Thus, spammers will either need to rent larger UTXO values for their spam, paying for the higher rent involved, or fall back to pre-Bitcoin spamming methods.\n>> Thus I think I have presented a use-case that is viable for this and does not simply devolve to \"just burn a 1-satoshi output\".\n>> \n>> I still do not quite support generalized covenants as the use-case is already possible on current Bitcoin (and given that with just a little more transaction introspection this enables Turing-completeness), but the basic concept of \"renting a UTXO of substantial value\" appears sound to me.\n>> \n>> \n>> Regards,\n>> ZmnSCPxj\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190704/b4487436/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-04T18:31:03",
                "message_text_only": "> On Jul 4, 2019, at 12:10, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> Hi Eric,\n> \n> there are some other ways to impose cost on use without direct billing, e.g.:\n> \n> - Burn Bitcoins to use the service, as you mentioned. This could work and would benefit remaining Bitcoin owner, but is unsustainable.\n\nBurning is not an economic concern and cannot be prevented. As there are fewer coins, all things being equal, the cost of each increases, and thus fewer must be burned to achieve the same cost. So assuming sufficient divisibility (an existing Bitcoin assumption) it is sustainable. But as I demonstrated, it\u2019s not necessary.\n\n> - Pay high fees in self dealing transactions. This could work and would benefit miner.\n\nThis is essentially what I suggested, though presumably you mean Bitcoin fees not secondary network.\n\n> - Time lock own Bitcoins. This is forgoing control of an UTXO for a time period, which implies opportunity cost. This could be done with CLTV (OP_HODL). It damages the current owner but benefits no one. The problem is one might not have substantial UTXO to  imply high enough opportunity cost.\n\nAnother reason why simply spending or burning them is preferential.\n\n> - Pay someone else to time lock. This is paying someone to lock an UTXO for a time span. Payment and time lock could be combined in the same transaction.\n\nThis implies additional complexity with no benefit to anyone required by the scenario, which was my implication.\n\n> - Transferable borrowed Bitcoin.  This needs the covenant. This benefits those who consciously give up control for a time span. Its advantage is that since transferable it can be sold if no longer needed, thereby shortening the term of the original arrangement. It coul be re-rented for a shorter time period.\n\nThe terms lend/borrow are misleading here, as I have previously shown. The coin is neither spendable nor consumable. This is why I have used the terms owner/renter. Yes, the renter can sell the remaining rental expense to another.\n\nYes, the potential incremental value over the other scenarios is transferability of the output, but this accrues to both to the advertiser/renter and the owner (trade always benefits both parties trading). This transfer incurs a fee if on chain, and in the tracking scenario may easily overwhelm the effective benefit (fraction of the rental, no higher than dust, not yet expired), making it economically non-transferrable.\n\nIn the advertising scenario this transfer can be achieved independent of Bitcoin, by simply changing the advertisement (e.g. publish a provably-superseding ad for the same output), avoiding the material on-chain fee. Recall that the value of the coin cannot be captured by the advertiser through transfer, just the tracking cost.\n\ne\n\n> Tamas Blummer\n> \n> \n>> On Jul 4, 2019, at 18:43, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> Hi ZmnSCPxj,\n>> \n>> Generalizing a bit this appears to be the same with one exception. The amount of encumbered coin is relevant to an external observer. Of course the effective dust limit is the maximum necessary encumbrance otherwise.\n>> \n>> In the case of simple tracking, the market value of the coin is not relevant, all that is required is a valid output. Hence the devolution to 1 sat tracking. In your scenario the objective is to establish a meaningful cost for the output.\n>> \n>> A community of people using this as a sort of hashcash spam protection can raise the amount of encumbered coin (i.e. advertising threshold price) required in that context. The cost of this encumberance includes not only at least one tx fee but market cost of the coin rental.\n>> \n>> At a 1 year advertisement term, 10% APR capital cost, and threshold of 1 encumbered coin, the same is achieved by burning .1 coin. In other words the renter (advertiser) has actually paid to the coin owner .1 coin to rent 1 coin for one year.\n>> \n>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>> \n>> e\n>> \n>>> On Jul 3, 2019, at 23:57, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>>> \n>>> Good morning Eric,\n>>> \n>>> \n>>>>> and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n>>>> \n>>>> Actually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n>>> \n>>> I presented another use case, that of the \"Bitcoin Classified Ads Network\".\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017083.html\n>>> \n>>> Advertisements are \"backed\" by an unspent TXO.\n>>> In order to limit their local resource consumption, nodes of this network will preferentially keep advertisements that are backed by higher UTXO values divided by advertisement size, and drop those with too low UTXO value divided by advertisement size.\n>>> \n>>> Thus, spammers will either need to rent larger UTXO values for their spam, paying for the higher rent involved, or fall back to pre-Bitcoin spamming methods.\n>>> Thus I think I have presented a use-case that is viable for this and does not simply devolve to \"just burn a 1-satoshi output\".\n>>> \n>>> I still do not quite support generalized covenants as the use-case is already possible on current Bitcoin (and given that with just a little more transaction introspection this enables Turing-completeness), but the basic concept of \"renting a UTXO of substantial value\" appears sound to me.\n>>> \n>>> \n>>> Regards,\n>>> ZmnSCPxj\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-04T19:31:12",
                "message_text_only": "> On Jul 4, 2019, at 12:10, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> Hi Eric,\n> \n> there are some other ways to impose cost on use without direct billing, e.g.:\n> \n> - Burn Bitcoins to use the service, as you mentioned. This could work and would benefit remaining Bitcoin owner, but is unsustainable.\n> \n> - Pay high fees in self dealing transactions. This could work and would benefit miner.\n> \n> - Time lock own Bitcoins. This is forgoing control of an UTXO for a time period, which implies opportunity cost. This could be done with CLTV (OP_HODL). It damages the current owner but benefits no one.\n\nI meant to point out that a voluntarily trade cannot represent \u201cdamage\u201d to the person making it. The person chooses the action because it is preferred over alternatives (i.e. it is beneficial). Such choices are the only objective expression of preference, a fundamental principle of praxeology.\n\n> The problem is one might not have substantial UTXO to  imply high enough opportunity cost.\n> \n> - Pay someone else to time lock. This is paying someone to lock an UTXO for a time span. Payment and time lock could be combined in the same transaction.\n> \n> - Transferable borrowed Bitcoin.  This needs the covenant. This benefits those who consciously give up control for a time span. Its advantage is that since transferable it can be sold if no longer needed, thereby shortening the term of the original arrangement. It coul be re-rented for a shorter time period.\n> \n> Tamas Blummer\n> \n> \n>> On Jul 4, 2019, at 18:43, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> Hi ZmnSCPxj,\n>> \n>> Generalizing a bit this appears to be the same with one exception. The amount of encumbered coin is relevant to an external observer. Of course the effective dust limit is the maximum necessary encumbrance otherwise.\n>> \n>> In the case of simple tracking, the market value of the coin is not relevant, all that is required is a valid output. Hence the devolution to 1 sat tracking. In your scenario the objective is to establish a meaningful cost for the output.\n>> \n>> A community of people using this as a sort of hashcash spam protection can raise the amount of encumbered coin (i.e. advertising threshold price) required in that context. The cost of this encumberance includes not only at least one tx fee but market cost of the coin rental.\n>> \n>> At a 1 year advertisement term, 10% APR capital cost, and threshold of 1 encumbered coin, the same is achieved by burning .1 coin. In other words the renter (advertiser) has actually paid to the coin owner .1 coin to rent 1 coin for one year.\n>> \n>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>> \n>> e\n>> \n>>> On Jul 3, 2019, at 23:57, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>>> \n>>> Good morning Eric,\n>>> \n>>> \n>>>>> and thanks to you and ZmnSCPxj we now have two additional uses cases for UTXOs that are only temporarily accessible to their current owner.\n>>>> \n>>>> Actually you have a single potentially-valid use case, the one I have presented. The others I have shown to be invalid (apart from scamming) and no additional information to demonstrate errors in my conclusions have been offered.\n>>> \n>>> I presented another use case, that of the \"Bitcoin Classified Ads Network\".\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-July/017083.html\n>>> \n>>> Advertisements are \"backed\" by an unspent TXO.\n>>> In order to limit their local resource consumption, nodes of this network will preferentially keep advertisements that are backed by higher UTXO values divided by advertisement size, and drop those with too low UTXO value divided by advertisement size.\n>>> \n>>> Thus, spammers will either need to rent larger UTXO values for their spam, paying for the higher rent involved, or fall back to pre-Bitcoin spamming methods.\n>>> Thus I think I have presented a use-case that is viable for this and does not simply devolve to \"just burn a 1-satoshi output\".\n>>> \n>>> I still do not quite support generalized covenants as the use-case is already possible on current Bitcoin (and given that with just a little more transaction introspection this enables Turing-completeness), but the basic concept of \"renting a UTXO of substantial value\" appears sound to me.\n>>> \n>>> \n>>> Regards,\n>>> ZmnSCPxj\n>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-05T04:05:12",
                "message_text_only": "Good morning Eric,\n\n> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n\nUsing the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\nFor instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\nThis allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n\nSimilarly, an entity renting out a UTXO for an advertisement might allow for early reclamation of the UTXO in exchange for partial refund of fee; as the value in the UTXO is now freed to be spent elsewhere, the lessor can lease it to another advertiser.\n\nBurnt funds cannot be \"un-burnt\" to easily signal the end of a term for an advertisement.\nSimilarly for miner fees.\nThe best that can be done would be to have the nodes of the classified ads network automatically decay the spent value of older advertisements to let them be dropped from their advertisements pool.\n\nLess importantly, burning currently has bad resource usage for practical applications.\nPractical burning requires spending to a provably-unspendable P2PKH or P2SH or similar output.\nThis adds UTXO entries to the UTXO database that will never be removed.\nThis will of course be remedied by compact UTXO representations later, but not today.\nSimilarly, it would be very nice to have non-0-amount `OP_RETURN` outputs, as `OP_RETURN` outputs are never stored in the UTXO database.\nHowever, this will require a change in node relay policy, which again will take time to make possible, and would not be practical today.\n\nThus I think use of UTXO is better than burning or mining-fee-spending.\n\n\nAlso, mostly trivia:\nThe use of UTXOs to advertise services is not original to me --- I found the LN channel gossip to be the inspiration for this.\nPublicly-announced channels indicate the backing UTXO that funds the channel.\nThe purpose of publicly announcing the channels is to be able to provide the service, of forwarding across the Lightning Network; thus the public announcement serves as an advertisement for the service.\nChannel closure immediately spends the UTXO, and also doubles to \"revoke\" the existing \"advertisement\".\nI found this ability to \"revoke\" the advertisement appealing, and thereby designed the Bitcoin Classified Ads Network around the UTXO spentness mechanism.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-05T19:27:59",
                "message_text_only": "> On Jul 4, 2019, at 21:05, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric,\n> \n>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n\nGood morning ZmnSCPxj,\n\n> Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n> For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n> This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n\nThis is a materially different concept than proposed by Tamas.\n\n\u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n\n> Similarly, an entity renting out a UTXO for an advertisement might allow for early reclamation of the UTXO in exchange for partial refund of fee; as the value in the UTXO is now freed to be spent elsewhere, the lessor can lease it to another advertiser.\n\nYou appear to be proposing a design whereby either the owner or the renter (not entirely clear to me which) can spend the \u201clocked up\u201d coin at any time (no maturity constraint), by dropping the covenant.\n\nIf the renter can do this he can simply steal the coin from the owner.\n\nIf the owner can do this there is no value to the renter (or as a proof of cost), as the owner retains full control of the coin.\n\nIf you mean that the age of the encumbrance is the proof of cost, this requires no covenant. I don\u2019t believe this is what you intended, just covering all bases.\n\n> Burnt funds cannot be \"un-burnt\" to easily signal the end of a term for an advertisement.\n\nAnd as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n\n> Similarly for miner fees.\n\nWell that\u2019s the point, money spent is no longer under one\u2019s control. The provable cost of this surrender was your stated objective. Renting at a fractional cost of coin face value is a non-recoverable spend by the renter to the owner. Burning or spending the same amount in a way that is provably not to one\u2019s self achieves the exact same result.\n\n> The best that can be done would be to have the nodes of the classified ads network automatically decay the spent value of older advertisements to let them be dropped from their advertisements pool.\n\nThe advertiser can presumably trade control of as space on the ad network. It\u2019s not clear to me why this is not simply an independent chain of limited ad space ownership. It might as well be namecoin.\n\n> Less importantly, burning currently has bad resource usage for practical applications.\n> Practical burning requires spending to a provably-unspendable P2PKH or P2SH or similar output.\n> This adds UTXO entries to the UTXO database that will never be removed.\n\nIf an output is provably unspendable (burned) it is not a UTXO.\n\nIt is worth noting that not all full node implementations require a store of UTXOs, this is an implementation detail. For example, libbitcoin uses a flag on each output to indicate its spentness on the strong branch. As such the store size is linear by height.\n\n> This will of course be remedied by compact UTXO representations later, but not today.\n> Similarly, it would be very nice to have non-0-amount `OP_RETURN` outputs, as `OP_RETURN` outputs are never stored in the UTXO database.\n> However, this will require a change in node relay policy, which again will take time to make possible, and would not be practical today.\n> \n> Thus I think use of UTXO is better than burning or mining-fee-spending.\n\nI don\u2019t believe you have shown this.\n\nBest,\nEric\n\n> Also, mostly trivia:\n> The use of UTXOs to advertise services is not original to me --- I found the LN channel gossip to be the inspiration for this.\n> Publicly-announced channels indicate the backing UTXO that funds the channel.\n> The purpose of publicly announcing the channels is to be able to provide the service, of forwarding across the Lightning Network; thus the public announcement serves as an advertisement for the service.\n> Channel closure immediately spends the UTXO, and also doubles to \"revoke\" the existing \"advertisement\".\n> I found this ability to \"revoke\" the advertisement appealing, and thereby designed the Bitcoin Classified Ads Network around the UTXO spentness mechanism.\n> \n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-05T23:16:17",
                "message_text_only": "Good morning Eric,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Saturday, July 6, 2019 3:27 AM, Eric Voskuil <eric at voskuil.org> wrote:\n\n> > On Jul 4, 2019, at 21:05, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n> > Good morning Eric,\n> >\n> > > As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>\n> Good morning ZmnSCPxj,\n>\n> > Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n> > For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n> > This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n>\n> This is a materially different concept than proposed by Tamas.\n>\n> \u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n\nPossibly.\nIn a way, this is giving up control of the coin, until he no longer needs the advertisement, i.e. dynamically select the maturity age needed.\n\n> > Similarly, an entity renting out a UTXO for an advertisement might allow for early reclamation of the UTXO in exchange for partial refund of fee; as the value in the UTXO is now freed to be spent elsewhere, the lessor can lease it to another advertiser.\n>\n> You appear to be proposing a design whereby either the owner or the renter (not entirely clear to me which) can spend the \u201clocked up\u201d coin at any time (no maturity constraint), by dropping the covenant.\n>\n> If the renter can do this he can simply steal the coin from the owner.\n>\n> If the owner can do this there is no value to the renter (or as a proof of cost), as the owner retains full control of the coin.\n>\n\nObviously this will require a 2-of-2 multisig, with an timelocked transaction that lets the owner recover at a futuredate, so that it is the agreement of *both* that is needed to perform any actions before the timelock.\nI already described this in the link I provided.\n\n\n> If you mean that the age of the encumbrance is the proof of cost, this requires no covenant. I don\u2019t believe this is what you intended, just covering all bases.\n\nNot age of encumbrance, quite.\nInstead, it is the simple fact that the UTXO is a UTXO (and not yet spent), that validates the advertisement.\n\nNo, it does not *require* a covenant.\nHowever, covenants do make it easier to use, in the sense that the renter can repurpose the UTXO (e.g. change details of advertisement) without having to contact the owner.\n\n\n\n>\n> > Burnt funds cannot be \"un-burnt\" to easily signal the end of a term for an advertisement.\n>\n> And as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n\nYou have shown no such thing, merely shown that you have not understood the proposal.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-05T23:44:45",
                "message_text_only": "> On Jul 5, 2019, at 16:16, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric,\n> \n> \n> Sent with ProtonMail Secure Email.\n> \n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Saturday, July 6, 2019 3:27 AM, Eric Voskuil <eric at voskuil.org> wrote:\n> \n>>> On Jul 4, 2019, at 21:05, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n>>> Good morning Eric,\n>>> \n>>>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>> \n>> Good morning ZmnSCPxj,\n>> \n>>> Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n>>> For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n>>> This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n>> \n>> This is a materially different concept than proposed by Tamas.\n>> \n>> \u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n> \n> Possibly.\n> In a way, this is giving up control of the coin, until he no longer needs the advertisement, i.e. dynamically select the maturity age needed.\n> \n>>> Similarly, an entity renting out a UTXO for an advertisement might allow for early reclamation of the UTXO in exchange for partial refund of fee; as the value in the UTXO is now freed to be spent elsewhere, the lessor can lease it to another advertiser.\n>> \n>> You appear to be proposing a design whereby either the owner or the renter (not entirely clear to me which) can spend the \u201clocked up\u201d coin at any time (no maturity constraint), by dropping the covenant.\n>> \n>> If the renter can do this he can simply steal the coin from the owner.\n>> \n>> If the owner can do this there is no value to the renter (or as a proof of cost), as the owner retains full control of the coin.\n>> \n> \n> Obviously this will require a 2-of-2 multisig, with an timelocked transaction that lets the owner recover at a futuredate, so that it is the agreement of *both* that is needed to perform any actions before the timelock.\n> I already described this in the link I provided.\n> \n> \n>> If you mean that the age of the encumbrance is the proof of cost, this requires no covenant. I don\u2019t believe this is what you intended, just covering all bases.\n> \n> Not age of encumbrance, quite.\n> Instead, it is the simple fact that the UTXO is a UTXO (and not yet spent), that validates the advertisement.\n\nNot any UTXO then, one that with sufficient time-locked coin.\n\n> No, it does not *require* a covenant.\n> However, covenants do make it easier to use, in the sense that the renter can repurpose the UTXO (e.g. change details of advertisement) without having to contact the owner.\n\nSo how does one get the owner to sign off on the multisig release? Presumably the renter cares because he wants to recover the remaining value of rental. So he not only needs to contact the owner, he also needs to negotiate with the owner for a pro-rated refund. In other words, he must sell the remaining portion of the rental return - essentially how I described it previously. He might as well just sell the marketable ad space that he controls through the remainder of the term (the same value).\n\nCertainly the owner could given him a partially-signed transaction, returning the coin, allowing the renter to exit at any time, but the renter has no reason to sign it without a refund, which must be pro-rated in some way, implying later contact/negotiation with the owner.\n\nBut it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n\n>>> Burnt funds cannot be \"un-burnt\" to easily signal the end of a term for an advertisement.\n>> \n>> And as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n> \n> You have shown no such thing, merely shown that you have not understood the proposal.\n\nI think I understand the implications of it clearly. Feel free to point out what I\u2019m missing. But I don\u2019t spend any time in implementation details until I can justify those implications.\n\nA multisig doesn\u2019t fix the central economic issue, which it is not clear that you understand. If so it hasn\u2019t been demonstrated. A cost created by making coin unusable for a term is not an actual cost if that lock can be released at any time before maturity of that term. Furthermore, cost is most easily demonstrated by simply spending. \n\nBy analogy, proof of work is simply proof of a spend (incurred cost). Imagine if one demonstrated that cost by \u201clocking up\u201d coin for a year, and then after the block was accepted, he unlocked that coin after just one day.\n\nBest,\nEric\n\n> Regards,\n> ZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-06T00:17:49",
                "message_text_only": "Good morning Eric,\n\n> But it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n\nYou still do not understand.\nI strongly suggest actually reading the post instead of skimming it.\n\nThe advertisement is broadcast to new nodes on the ad network if and only if its backing UTXO remains unspent.\nOnce the UTXO is spent, then the advertisement is considered no longer valid and will be outright deleted by existing nodes, and new nodes will not learn of them (and would consider it spam if it is forced to them when the UTXO is already spent, possibly banning the node that pushes the advertisement at them).\n\nThus the locked-ness of the UTXO is the lifetime of the advertisement.\nOnce you disencumber the coins (whether your own, or rented) then your advertisement is gone; forever.\nYour advertisement exists only as long as the UTXO is unspent.\n\n\nRegards.\nZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-06T01:28:03",
                "message_text_only": "> On Jul 5, 2019, at 17:17, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric,\n> \n>> But it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n> \n> You still do not understand.\n> I strongly suggest actually reading the post instead of skimming it.\n\nI am responding to the cryptoeconomic principles, not the implementation details. Based on your comments here I am not misrepresenting those principles.\n\nFor example, I have shown that the multisig unlock implementation reduces the presumably-encumbered UTXO to simply a UTXO. You have not disputed that. In fact below you have accepted it (more below).\n\n> The advertisement is broadcast to new nodes on the ad network if and only if its backing UTXO remains unspent.\n> Once the UTXO is spent, then the advertisement is considered no longer valid and will be outright deleted by existing nodes, and new nodes will not learn of them (and would consider it spam if it is forced to them when the UTXO is already spent, possibly banning the node that pushes the advertisement at them).\n> \n> Thus the locked-ness of the UTXO is the lifetime of the advertisement.\n\nThe term \u201clocked\u201d here is misused. A unspent output that can be spent at any time is just an unspent output. The fact that you can \u201cunencumber\u201d your own coins should make this exceedingly obvious:\n\n> Once you disencumber the coins (whether your own, or rented) then your advertisement is gone; forever.\n\nAs I have shown, there is no *actual* encumbrance.\n\n> Your advertisement exists only as long as the UTXO is unspent.\n\nExactly, which implies *any* UTXO is sufficient. All that the ad network requires is proof of ownership of any UTXO.\n\nUnspentness is not actually a necessary cost (expense). All coin is always represented as UTXOs. If one has a hoard of coin there is no necessary incremental cost of identifying those coins to \u201cback\u201d ads.This isn\u2019t altered by the proposed design.\n\nThe only cost would be to have a hoard that one does not otherwise desire, representing an opportunity cost. Yet, as I have also pointed out, the amount of that opportunity cost can simply be spent (or burned) by the advertiser, representing the same cost. So covering the case where one cannot raise the capital to \u201cback\u201d one\u2019s ad does not require rental, as the cost of the otherwise rental can just be spent outright.\n\nPresumably it would be ideal to transfer the value of those spends to people who provably present the ads for effective viewing (i.e., the AdWords business model). It is of course this market-driven cost of presenting an ad that provides the spam protection/definition for AdWords.\n\nBest,\nEric\n\n> Regards.\n> ZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-06T01:46:45",
                "message_text_only": "> On Jul 5, 2019, at 18:28, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> \n> \n>> On Jul 5, 2019, at 17:17, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> Good morning Eric,\n>> \n>>> But it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n>> \n>> You still do not understand.\n>> I strongly suggest actually reading the post instead of skimming it.\n> \n> I am responding to the cryptoeconomic principles, not the implementation details. Based on your comments here I am not misrepresenting those principles.\n> \n> For example, I have shown that the multisig unlock implementation reduces the presumably-encumbered UTXO to simply a UTXO. You have not disputed that. In fact below you have accepted it (more below).\n> \n>> The advertisement is broadcast to new nodes on the ad network if and only if its backing UTXO remains unspent.\n>> Once the UTXO is spent, then the advertisement is considered no longer valid and will be outright deleted by existing nodes, and new nodes will not learn of them (and would consider it spam if it is forced to them when the UTXO is already spent, possibly banning the node that pushes the advertisement at them).\n>> \n>> Thus the locked-ness of the UTXO is the lifetime of the advertisement.\n> \n> The term \u201clocked\u201d here is misused. A unspent output that can be spent at any time is just an unspent output. The fact that you can \u201cunencumber\u201d your own coins should make this exceedingly obvious:\n> \n>> Once you disencumber the coins (whether your own, or rented) then your advertisement is gone; forever.\n> \n> As I have shown, there is no *actual* encumbrance.\n> \n>> Your advertisement exists only as long as the UTXO is unspent.\n> \n> Exactly, which implies *any* UTXO is sufficient. All that the ad network requires is proof of ownership of any UTXO.\n> \n> Unspentness is not actually a necessary cost (expense). All coin is always represented as UTXOs. If one has a hoard of coin there is no necessary incremental cost of identifying those coins to \u201cback\u201d ads.This isn\u2019t altered by the proposed design.\n> \n> The only cost would be to have a hoard that one does not otherwise desire, representing an opportunity cost. Yet, as I have also pointed out, the amount of that opportunity cost can simply be spent (or burned) by the advertiser, representing the same cost. So covering the case where one cannot raise the capital to \u201cback\u201d one\u2019s ad does not require rental, as the cost of the otherwise rental can just be spent outright.\n> \n> Presumably it would be ideal to transfer the value of those spends to people who provably present the ads for effective viewing (i.e., the AdWords business model). It is of course this market-driven cost of presenting an ad that provides the spam protection/definition for AdWords.\n\nIt\u2019s worth pointing out at this point that this implies Google, etc. would achieve the same result by simply accepting Bitcoin for ad placement. In your model the advertiser is paying only for access to people who wish to avoid spam, not for targeted and actual placement. In other words your ad system would be directly competing with others that provide material additional value for the advertiser beyond anti-spam. If nothing else this implies the return on coin \u201clock-up\u201d would be exceeded by its opportunity cost.\n\n> Best,\n> Eric\n> \n>> Regards.\n>> ZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-06T13:34:31",
                "message_text_only": "Hi Eric,\n\n> On Jul 6, 2019, at 03:28, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> \n> \n>> On Jul 5, 2019, at 17:17, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> Good morning Eric,\n>> \n>>> But it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n>> \n>> You still do not understand.\n>> I strongly suggest actually reading the post instead of skimming it.\n> \n> I am responding to the cryptoeconomic principles, not the implementation details. Based on your comments here I am not misrepresenting those principles.\n> \n> For example, I have shown that the multisig unlock implementation reduces the presumably-encumbered UTXO to simply a UTXO. You have not disputed that. In fact below you have accepted it (more below).\n> \n>> The advertisement is broadcast to new nodes on the ad network if and only if its backing UTXO remains unspent.\n>> Once the UTXO is spent, then the advertisement is considered no longer valid and will be outright deleted by existing nodes, and new nodes will not learn of them (and would consider it spam if it is forced to them when the UTXO is already spent, possibly banning the node that pushes the advertisement at them).\n>> \n>> Thus the locked-ness of the UTXO is the lifetime of the advertisement.\n> \n> The term \u201clocked\u201d here is misused. A unspent output that can be spent at any time is just an unspent output. The fact that you can \u201cunencumber\u201d your own coins should make this exceedingly obvious:\n> \n>> Once you disencumber the coins (whether your own, or rented) then your advertisement is gone; forever.\n> \n> As I have shown, there is no *actual* encumbrance.\n> \n\nIf you have to forgo using your money while using a service that encumbers you. You incur opportunity cost proportional to time you use the service and the amount you waived to use elsewhere.\nNo crypto is needed to understand this.\n\n\n>> Your advertisement exists only as long as the UTXO is unspent.\n> \n> Exactly, which implies *any* UTXO is sufficient. All that the ad network requires is proof of ownership of any UTXO.\n> \n\nNot any, but one with significant value, so a service with limited bandwith can prioritize by that.\n\n> Best,\n> Eric\n> \n>> Regards.\n>> ZmnSCPxj\n\nBest,\n\nTamas Blummer\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190706/59b2f7b8/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-06T22:21:59",
                "message_text_only": "> On Jul 6, 2019, at 06:34, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> Hi Eric,\n> \n>> On Jul 6, 2019, at 03:28, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>> \n>> \n>>> On Jul 5, 2019, at 17:17, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>>> \n>>> Good morning Eric,\n>>> \n>>>> But it\u2019s worth noting that early recovery of the UTXO entirely eliminates the value of the time lock cost to the ad market. The most obvious example is one encumbering the coin to himself, then releasing it with his own two signatures whenever he wants. In other words, there is no encumbrance at all, just a bunch of pointless obscurantion.\n>>> \n>>> You still do not understand.\n>>> I strongly suggest actually reading the post instead of skimming it.\n>> \n>> I am responding to the cryptoeconomic principles, not the implementation details. Based on your comments here I am not misrepresenting those principles.\n>> \n>> For example, I have shown that the multisig unlock implementation reduces the presumably-encumbered UTXO to simply a UTXO. You have not disputed that. In fact below you have accepted it (more below).\n>> \n>>> The advertisement is broadcast to new nodes on the ad network if and only if its backing UTXO remains unspent.\n>>> Once the UTXO is spent, then the advertisement is considered no longer valid and will be outright deleted by existing nodes, and new nodes will not learn of them (and would consider it spam if it is forced to them when the UTXO is already spent, possibly banning the node that pushes the advertisement at them).\n>>> \n>>> Thus the locked-ness of the UTXO is the lifetime of the advertisement.\n>> \n>> The term \u201clocked\u201d here is misused. A unspent output that can be spent at any time is just an unspent output. The fact that you can \u201cunencumber\u201d your own coins should make this exceedingly obvious:\n>> \n>>> Once you disencumber the coins (whether your own, or rented) then your advertisement is gone; forever.\n>> \n>> As I have shown, there is no *actual* encumbrance.\n>> \n> If you have to forgo using your money while using a service that encumbers you. You incur opportunity cost proportional to time you use the service and the amount you waived to use elsewhere.\n> No crypto is needed to understand this.\n\nMy use of \u201cencumbrance\u201d in this thread has been consistently a reference to a covenant. When the covenant can be released at any time it serves no purpose whatsoever, being an encumbrance in name only.\n\nI gave a detailed explanation of opportunity cost, and gave you a scenario where that opportunity cost could actually be used - to purchase a tracking output (i.e., a fixed term asset tracked for that term). And I have discussed at length the use of opportunity cost in the hash-cash-like anti-spam ad scenario.\n\nSo it\u2019s not clear to me why you continue to imply that the nature of either covenants or opportunity cost is the point at issue, and by implying I don\u2019t understand them.\n\n**The central issue in your proposal is that constrained coins can neither be used as borrowed money nor the tracking of perpetual assets.** This conclusion is not based on a failure to understand the nature of covenants or the concept of opportunity cost. It is the necessary consequence of attempting to trade something today that will provably disappear tomorrow. The sole possible value of such an instrument is to scam the eventual bag-holders.\n\nA secondary issue, in the valid fixed-term asset tracking scenario, is that the cost of tracking is dust (and at least one transfer fee). The cost of such tracking is a function only of the market price of a satoshi. The financial value of renting one dust output is also limited in time by economic  interest (i.e., at 10% it is cheaper to buy than rent if the fixed term exceeds 7.2 years). So while valid, is not likely to be demanded until one satoshi becomes worth the overhead of renting it.\n\nThe opportunity of interest represents opportunity cost when forgone. This can be used to show proof-of-cost (ad scenario), and that level can float as a price on the anti-spam market. This is a perfectly valid scenario, as I have said.\n\nThe issue with that specific proposal is that it uses covenants in an irrational manner. The ability to release the covenant at any time eliminates the cost it would otherwise represent. One could either simply burn or spend coin outright, or use an actual encumbrance (as you propose) to \u201cburn\u201d (provably destroy) the opportunity, but a non-encumbrance adds nothing except complexity.\n\n>>> Your advertisement exists only as long as the UTXO is unspent.\n>> \n>> Exactly, which implies *any* UTXO is sufficient. All that the ad network requires is proof of ownership of any UTXO.\n>> \n> Not any, but one with significant value, so a service with limited bandwith can prioritize by that.\n\nNot significant, which is arbitrary, but sufficient - a result of supply and demand. Clearly my intent here is that no covenant on the UTXO is required in the scenario. As the preceding discussions conclude, without disagreement, all that is required is that the (sufficient) output remains unspent, not that it be encumbered.\n\n>> Best,\n>> Eric\n>> \n>>> Regards.\n>>> ZmnSCPxj\n> \n> Best,\n> \n> Tamas Blummer"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-07T01:30:16",
                "message_text_only": "I have published a summary here:\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Risk-Free-Return-Fallacy\n\nBarring any new consequential inputs I\u2019ll refrain from further comment.\n\ne\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190706/c66265a2/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-07T09:18:04",
                "message_text_only": "Hi Eric,\n\nYour cryproeconomic theories may describe correctly Bitcoin as money, but fall short of describing a Bitcoin that would also offer reliable memory for other uses.\n\nIn consequence you miss, that:\n\n1. If the reliable memory that enables money would have more uses then even temporary use of the memory would have utility, therefore value. Bitcoin as is, does not have consensus rules to enable reliable alternate uses.\n\n2. Finite supply of coins implies a finite memory capacity of Bitcoin. Alternate use of the memory requires that units at least temporarily become un-fungible, enforced by consensus. Alternate uses would then have to compete for units of memory, which would give rise to a price paid to those enabling alternate use, even if temoprarily.\n\n3. If giving up control temorarily has a positive price (through 2) and return of control is certain (enforced by consenus) then the price paid is riskless interest for those giving up temporary control.\n\n4. If a use requires more units of memory then it imposes higher cost to use and it since memory units are finite it imposes more severe scarcity.\n\nFurther certainly subjective remarks:\n\nAlthough burning and loss is unavoidable and therefore Bitcoin (as is) is unsustainable we should design systems that they sustain it as long as possible (as is). Therefore a requirement to burn for any of unlimited number of uses should be avoided.\n\nWe currently perceive borrowed money just as good as (fungible with) any other money. This is a consequence that money actually comes into existence through someone borrowing it. Money on your account is a loan you gave the bank and even paper cash is a loan you gave the central bank.\n\nBitcoin is different as it just is, it is not borrowed into existence. Therefore it is not fungible with borrowed version of itself. This however does not imply that its borrowed version is worthless as it might be worth something if there is a use for it.\n\nTamas Blummer\n\n> On Jul 7, 2019, at 03:30, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> I have published a summary here:\n> \n> https://github.com/libbitcoin/libbitcoin-system/wiki/Risk-Free-Return-Fallacy <https://github.com/libbitcoin/libbitcoin-system/wiki/Risk-Free-Return-Fallacy>\n> \n> Barring any new consequential inputs I\u2019ll refrain from further comment.\n> \n> e\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190707/861a3d6f/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190707/861a3d6f/attachment.sig>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-09T10:31:12",
                "message_text_only": "Good morning all,\n\nI will attempt to restart my thinking from initial principles regarding my proposed \"Bitcoin Classified Ads Network\".\n\nNodes behave this way:\n\n* Nodes in this network gossip advertisements.\n* These advertisements refer to a UTXO that must be unspent at the chain tip considered by each node, else they would be rejected.\n* The referred UTXO must contain a commitment to the text of the advertisement, else the advertisement is rejected.\n* Nodes have a maximum limit on the total size of all advertisements they retain and propagate to new nodes, or gossip to their peers.\n  This is a deliberate design decision.\n* If nodes exceed the above limit, they will sort advertisements according to a value-rate, the value of the UTXO divided by the storage size of the advertisement, and prune advertisements with low value-rate until they are within the limit again.\n* Once the backing UTXO is spent, the advertisement is removed by nodes that follow that chaintip.\n* As the name ***Classified Ads*** suggests, each advertisement also indicates a \"class\" in which they belong to.\n\nThen, from the above, we derive how a seller might behave.\n\n* Sellers will attempt to put the minimum possible value into a UTXO committing to an advertisement, to reduce the opportunity cost of using the value elsewhere.\n* Thus the rent of the advertisement in this case is paid to joinmarket makers and LN forwarding nodes, as the value used in a UTXO backing an advertisement is not useable in joinmarket/LN.\n* Sellers remain in full control of their advertising UTXO, and can spend it at any time.\n* Sellers may spend part of the UTXO and put the remaining funds into a change address that is a new advertising UTXO, and re-transmit the advertisement, this time pointing to the new change UTXO.\n* However, if the remaining change becomes too low, then its value-rate may drop below the lowest value-rate that BCAN nodes will retain in their (deliberately limited) storage, thus also deleting their advertisement from the BCAN.\n* Presumably, the reason for advertising at all, is that the seller considers the cost of advertising to be less than the expected gain of actually selling their product.\n* Thus, even if the seller has the ability to spend the UTXO at any time, they run the risk of spending too much and thus removing their advertisement from the BCAN, and losing the expected gain of having the advertisement exist on the BCAN.\n* A utility-maximizing seller would therefore not spend a minimal-value UTXO backing the advertisement until it has gained the advantage of actually selling the product, even if it has the option to do so: it is a forced move.\n* The cost of keeping the minimal-value UTXO unspent is the opportunity cost in that the value may have been used in joinmarket or LN instead.\n* The minimum value will largely be dependent on how much the BCAN is used; more sellers advertising over BCAN will increase the minimum value.\n* If the minimum value that is viable to keep its advertisement alive goes higher, then the opportunity cost of the seller using the same value elsewhere might exceed the expected gain from selling the product.\n  However, this is expected of *any* advertising scheme: if the gains from selling is too small to justify the advertisement price, advertising does not happen; this is expected utility-maximizing behavior.\n* If competitors of the seller exist and the BCAN node storage is already filled, competitors can increase the minimum value of a UTXO that can keep an advertisement alive on BCAN by simply adding more of their advertisements to BCAN.\n* Thus we expect that, once the BCAN node storage is at or near the maximum value, the minimum value of a UTXO that can back an advertisement will approach the expected gain from selling the product.\n\nThus the system of simply committing UTXOs to particular advertisement texts seems sufficient to extract value from a seller wishing to advertise.\nThe purpose of this extraction of value is to ensure that spam does not overload the BCAN.\n\nLet us now consider some kind of specialization, where a HODLer specializes in owning UTXOs, while an advertiser specializes in trading products that need advertising of some kind.\n\n* We assume that the specialization means that the HODLer cannot feasibly make and sell products on its own, while the advertiser cannot own and control UTXOs of the minimum value needed to keep their advertisement alive on the BCAN.\n* We assume that the specialization means that the advertiser can make and sell products for cheaper than the HODLer can, while the HODLer can own and control (and secure) UTXOs of the minimum value needed for advertisements to be kept alive, for cheaper than the advertiser can.\n\nThen:\n\n* A HODLer may offer to provide a UTXO locked by a 2-of-2 with a commitment to an advertisement of the advertiser's choosing, in exchange for rent of the value, plus an unbreakable promise to return the rented UTXO value back to the HODLer (represented by a `nLockTime` pre-signed transaction that returns the 2-of-2 back to the HODLer control).\n* The HODLer is effectively lending the UTXO out to the advertiser, for the time frame agreed upon by the advertiser.\n* The rent at which the HODLer lends out the UTXO must be between the opportunity cost of instead securely utilizing the UTXO in LN or joinmarket, and the expected gain the advertiser expects from having its product advertised.\n  * The HODLer is assumed to have the ability to secure the UTXO and retain all data it needs to recover the UTXO; this is part of the assumption that the HODLer specializes in such.\n  * The advertiser is assumed to have positive gains from creating, advertising, and selling its product; this is part of the assumption that the advertiser specializes in such.\n* The HODLer and advertiser can agree to refund part of the rent, if the advertiser signs a transaction that immediately returns control of the value to the HODLer, before the agreed `nLockTime`.\n* The above constructions can be done in current Bitcoin.\n* However, the same constructions could be done with a covenant as proposed by Tamas, possibly with reduced communication/coordination costs between the advertiser and HODLer.\n\nNow, there remains the question as to whether users will actually patronize the BCAN instead of existing advertising systems.\n\n* We assume that privacy is valuable to users.\n* We assume that users of BCAN will run BCAN nodes.\n  This leaks them as users of BCAN, a small loss of privacy.\n\nThen:\n\n* Users can look for advertisements of specific classes by simply querying their own BCAN node.\n  This does not leak privacy ata all as long as the communication channel of the user with their own BCAN node is private.\n  * Compare this to alternatives, which involve some entity observing the behavior of users and thus invading their privacy.\n* Advertisers that misclassify their advertisements will be unable to reach their target audience.\n* Utility-maximizing advertisers will correctly indicate the class of their advertisements, as otherwise they would be paying the advertising cost without gaining the benefit of the advertisement.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-09T20:32:53",
                "message_text_only": "Good morning ZmnSCPxj,\n\nthank you very much for sharing your BCAN idea and thought process in detail.\n\nI add some thoughs that very likely occured to you, but not formulated explicitelly:\n\n1. The unique feature of such advertisement network is that it has no owner, just like the Bitcoin network.\nIf it had an owner, that owner could simply bill for use, but would also be forced to restrict access or apply some sort of censorship.\nThis is why usage costs is imposed through opportunity cost and not billed.\n\n2. Since opportunity cost of one Bitcoin for a short time period is magnitudes less than its face value, one would need significant\nBitcoin amounts to impose meaningful costs so they have the chance to be included into BCANs purposedly limited bandwidth.\nThose who would want to place an ad will often not have sufficient amount of Bitcoin holdings which lets them borrow UTXOs.\n\n3. If borrowed Bitcoin is certain to be returned (as in your construction) then this offers riskless interest for HODLer.\n\n4. Bitcoin\u2019s most popular use is storing wealth whereby this use currently completely relies on the assumption that \u201cthe number goes up\u201d.\nA service that delivers interest on HODLed coins without exposing the HODLer to credit risk of the borrower is a huge game changer.\n\n5.This scheme allows HODLer a concious decision whom or what project they fund.\n\nFor above reasons I think that this is a crucial design pattern to build censorship resistant networks which also give rise to riskless interest on Bitcoin.\n\nMy finance examples where abstract and less interesting for this audience but the BCAN should ring the bell for many.\n\nAs you said BCAN is possible with current Bitcoin, therefore we should no longer discuss it under the covenant topic.\nThe idea of debt covenant will likely resurface as soon as this design pattern proves to be useful in practice and one is looking for\na more flexible solution. I am confident we will get there, but not as fast as I initially thought.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 9, 2019, at 12:31, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Good morning all,\n> \n> I will attempt to restart my thinking from initial principles regarding my proposed \"Bitcoin Classified Ads Network\".\n> \n> Nodes behave this way:\n> \n> * Nodes in this network gossip advertisements.\n> * These advertisements refer to a UTXO that must be unspent at the chain tip considered by each node, else they would be rejected.\n> * The referred UTXO must contain a commitment to the text of the advertisement, else the advertisement is rejected.\n> * Nodes have a maximum limit on the total size of all advertisements they retain and propagate to new nodes, or gossip to their peers.\n>  This is a deliberate design decision.\n> * If nodes exceed the above limit, they will sort advertisements according to a value-rate, the value of the UTXO divided by the storage size of the advertisement, and prune advertisements with low value-rate until they are within the limit again.\n> * Once the backing UTXO is spent, the advertisement is removed by nodes that follow that chaintip.\n> * As the name ***Classified Ads*** suggests, each advertisement also indicates a \"class\" in which they belong to.\n> \n> Then, from the above, we derive how a seller might behave.\n> \n> * Sellers will attempt to put the minimum possible value into a UTXO committing to an advertisement, to reduce the opportunity cost of using the value elsewhere.\n> * Thus the rent of the advertisement in this case is paid to joinmarket makers and LN forwarding nodes, as the value used in a UTXO backing an advertisement is not useable in joinmarket/LN.\n> * Sellers remain in full control of their advertising UTXO, and can spend it at any time.\n> * Sellers may spend part of the UTXO and put the remaining funds into a change address that is a new advertising UTXO, and re-transmit the advertisement, this time pointing to the new change UTXO.\n> * However, if the remaining change becomes too low, then its value-rate may drop below the lowest value-rate that BCAN nodes will retain in their (deliberately limited) storage, thus also deleting their advertisement from the BCAN.\n> * Presumably, the reason for advertising at all, is that the seller considers the cost of advertising to be less than the expected gain of actually selling their product.\n> * Thus, even if the seller has the ability to spend the UTXO at any time, they run the risk of spending too much and thus removing their advertisement from the BCAN, and losing the expected gain of having the advertisement exist on the BCAN.\n> * A utility-maximizing seller would therefore not spend a minimal-value UTXO backing the advertisement until it has gained the advantage of actually selling the product, even if it has the option to do so: it is a forced move.\n> * The cost of keeping the minimal-value UTXO unspent is the opportunity cost in that the value may have been used in joinmarket or LN instead.\n> * The minimum value will largely be dependent on how much the BCAN is used; more sellers advertising over BCAN will increase the minimum value.\n> * If the minimum value that is viable to keep its advertisement alive goes higher, then the opportunity cost of the seller using the same value elsewhere might exceed the expected gain from selling the product.\n>  However, this is expected of *any* advertising scheme: if the gains from selling is too small to justify the advertisement price, advertising does not happen; this is expected utility-maximizing behavior.\n> * If competitors of the seller exist and the BCAN node storage is already filled, competitors can increase the minimum value of a UTXO that can keep an advertisement alive on BCAN by simply adding more of their advertisements to BCAN.\n> * Thus we expect that, once the BCAN node storage is at or near the maximum value, the minimum value of a UTXO that can back an advertisement will approach the expected gain from selling the product.\n> \n> Thus the system of simply committing UTXOs to particular advertisement texts seems sufficient to extract value from a seller wishing to advertise.\n> The purpose of this extraction of value is to ensure that spam does not overload the BCAN.\n> \n> Let us now consider some kind of specialization, where a HODLer specializes in owning UTXOs, while an advertiser specializes in trading products that need advertising of some kind.\n> \n> * We assume that the specialization means that the HODLer cannot feasibly make and sell products on its own, while the advertiser cannot own and control UTXOs of the minimum value needed to keep their advertisement alive on the BCAN.\n> * We assume that the specialization means that the advertiser can make and sell products for cheaper than the HODLer can, while the HODLer can own and control (and secure) UTXOs of the minimum value needed for advertisements to be kept alive, for cheaper than the advertiser can.\n> \n> Then:\n> \n> * A HODLer may offer to provide a UTXO locked by a 2-of-2 with a commitment to an advertisement of the advertiser's choosing, in exchange for rent of the value, plus an unbreakable promise to return the rented UTXO value back to the HODLer (represented by a `nLockTime` pre-signed transaction that returns the 2-of-2 back to the HODLer control).\n> * The HODLer is effectively lending the UTXO out to the advertiser, for the time frame agreed upon by the advertiser.\n> * The rent at which the HODLer lends out the UTXO must be between the opportunity cost of instead securely utilizing the UTXO in LN or joinmarket, and the expected gain the advertiser expects from having its product advertised.\n>  * The HODLer is assumed to have the ability to secure the UTXO and retain all data it needs to recover the UTXO; this is part of the assumption that the HODLer specializes in such.\n>  * The advertiser is assumed to have positive gains from creating, advertising, and selling its product; this is part of the assumption that the advertiser specializes in such.\n> * The HODLer and advertiser can agree to refund part of the rent, if the advertiser signs a transaction that immediately returns control of the value to the HODLer, before the agreed `nLockTime`.\n> * The above constructions can be done in current Bitcoin.\n> * However, the same constructions could be done with a covenant as proposed by Tamas, possibly with reduced communication/coordination costs between the advertiser and HODLer.\n> \n> Now, there remains the question as to whether users will actually patronize the BCAN instead of existing advertising systems.\n> \n> * We assume that privacy is valuable to users.\n> * We assume that users of BCAN will run BCAN nodes.\n>  This leaks them as users of BCAN, a small loss of privacy.\n> \n> Then:\n> \n> * Users can look for advertisements of specific classes by simply querying their own BCAN node.\n>  This does not leak privacy ata all as long as the communication channel of the user with their own BCAN node is private.\n>  * Compare this to alternatives, which involve some entity observing the behavior of users and thus invading their privacy.\n> * Advertisers that misclassify their advertisements will be unable to reach their target audience.\n> * Utility-maximizing advertisers will correctly indicate the class of their advertisements, as otherwise they would be paying the advertising cost without gaining the benefit of the advertisement.\n> \n> \n> Regards,\n> ZmnSCPxj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190709/f0e7588d/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-06T10:12:44",
                "message_text_only": "> On Jul 6, 2019, at 01:16, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Eric,\n> \n> \n> Sent with ProtonMail Secure Email.\n> \n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Saturday, July 6, 2019 3:27 AM, Eric Voskuil <eric at voskuil.org <mailto:eric at voskuil.org>> wrote:\n> \n>>> On Jul 4, 2019, at 21:05, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n>>> Good morning Eric,\n>>> \n>>>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>> \n>> Good morning ZmnSCPxj,\n>> \n>>> Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n>>> For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n>>> This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n>> \n>> This is a materially different concept than proposed by Tamas.\n>> \n>> \u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n> \n> Possibly.\n> In a way, this is giving up control of the coin, until he no longer needs the advertisement, i.e. dynamically select the maturity age needed.\n> \n\nMy proposal would separate the owner of the funds from the one using the advertizement service. Yes, the owner lock up until maturity. But those using the UTXO for the advertizement service could transfer (sell) the UTXO to someone else as soon as they do not need it, so it is dynamic maturity for them The new owner could use them for an other advertizement or for an entirely different purpose.\n\nRegarding burning: I think burning is unsustainable as usage of services is unlimited while coin suply is limited.\n\n>> \n>> And as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n> \n> You have shown no such thing, merely shown that you have not understood the proposal.\n> \n> Regards,\n> ZmnSCPxj\n\nI also struggle to communicate to Eric and likely many other reader the generic utility of temporary control of an UTXO. Let me try again:\n\nBitcoin offers a memory with remarkable properties:\n- it can be read by anyone anywhere\n- anyone anywhere who knows a key controlling an UTXO, and only them, can initiate an update to the memory\n- global replicas guaranteed to apply updates of the memory within a short time period.\n\nThis is a utility that is sufficient to implement money.\n\nSuch a reliable shared memory could have however more uses than tracking money, It could keep track of, and thereby make scarce, arbitary other things.\n\nWe can unlock these uses by separating the money use of memory from other uses.\n\nThe covenant achives this separation temporarily. A UTXO with a covenant that guarantees that current owner re-gains control at a later time means,\nthat the current owner temporarily forgoes the UTXOs use as money and thereby allows its temporary use to keep track of something else.\nUTXOs with different covenants or without covenant are not fungible.\n\nWhy use UTXOs of significant value to track something that is not money? Because the reason the registry is used is to create scarcity and scarcity can be tailored to more or\nless severe by requiring more or less satoshis to track something.\n\nThe current owner of a regular UTXO will want to be paid for temporarily giving up control, and that payment represents interest. Riskless, since it is certain to re-gain control.\n\nRegards,\n\nTamas Blummer\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190706/14200f92/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190706/14200f92/attachment-0001.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-06T22:37:45",
                "message_text_only": "> On Jul 6, 2019, at 03:12, Tamas Blummer <tamas.blummer at gmail.com> wrote:\n> \n> \n>> On Jul 6, 2019, at 01:16, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> Good morning Eric,\n>> \n>> \n>> Sent with ProtonMail Secure Email.\n>> \n>> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n>> On Saturday, July 6, 2019 3:27 AM, Eric Voskuil <eric at voskuil.org> wrote:\n>> \n>>>> On Jul 4, 2019, at 21:05, ZmnSCPxj ZmnSCPxj at protonmail.com wrote:\n>>>> Good morning Eric,\n>>>> \n>>>>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n>>> \n>>> Good morning ZmnSCPxj,\n>>> \n>>>> Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n>>>> For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n>>>> This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n>>> \n>>> This is a materially different concept than proposed by Tamas.\n>>> \n>>> \u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n>> \n>> Possibly.\n>> In a way, this is giving up control of the coin, until he no longer needs the advertisement, i.e. dynamically select the maturity age needed.\n>> \n> My proposal would separate the owner of the funds from the one using the advertizement service.\n\nNo, it would not. I have seen no proposal requiring identity in the two roles, which is necessary to show that two distinct individuals operate in the roles. Furthermore, even identity would be insufficient, as two individuals can clearly collude in these roles.\n\n> Yes, the owner lock up until maturity. But those using the UTXO for the advertizement service could transfer (sell) the UTXO to someone else as soon as they do not need it, so it is dynamic maturity for them The new owner could use them for an other advertizement or for an entirely different purpose.\n\nAgree, and it is the unremovable time constraint that ensures the opportunity cost. This is why in your proposal it is of no consequence that both roles can be the same person.\n\n> Regarding burning: I think burning is unsustainable as usage of services is unlimited while coin suply is limited. \n\nLoss is perpetual, so this implies Bitcoin is unsustainable.\n\n>>> \n>>> And as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n>> \n>> You have shown no such thing, merely shown that you have not understood the proposal.\n>> \n>> Regards,\n>> ZmnSCPxj\n> \n> I also struggle to communicate to Eric and likely many other reader the generic utility of temporary control of an UTXO. Let me try again:\n\nNo, you do not. This is not the point at issue. See my previous response.\n\n> Bitcoin offers a memory with remarkable properties:\n> - it can be read by anyone anywhere\n> - anyone anywhere who knows a key controlling an UTXO, and only them, can initiate an update to the memory\n> - global replicas guaranteed to apply updates of the memory within a short time period.\n> \n> This is a utility that is sufficient to implement money. \n\nNo, it isn\u2019t. Ownership must be perpetually (actually) transferable, not just known. The use of a covenant breaks this transferability, see previous posts.\n\n> Such a reliable shared memory could have however more uses than tracking money, It could keep track of, and thereby make scarce, arbitary other things.\n\nFor the same reason this cannot work for money, it cannot work for any perpetual asset. See previous posts.\n\n> We can unlock these uses by separating the money use of memory from other uses. \n> \n> The covenant achives this separation temporarily. A UTXO with a covenant that guarantees that current owner re-gains control at a later time means, \n> that the current owner temporarily forgoes the UTXOs use as money and thereby allows its temporary use to keep track of something else.\n\nOnly if the asset expires at or before the covenant maturity.\n\n> UTXOs with different covenants or without covenant are not fungible.\n\nOf course.\n\n> Why use UTXOs of significant value to track something that is not money? Because the reason the registry is used is to create scarcity and scarcity can be tailored to more or\n> less severe by requiring more or less satoshis to track something.\n\nOnly 1 satoshi is required for tracking. It is only the scarcity of a satoshi that creates this scarcity, not the covenant on it. The covenant represents only the destruction of opportunity of the value represented by the 1 satoshi, not a new system of scarcity.\n\n> The current owner of a regular UTXO will want to be paid for temporarily giving up control, and that payment represents interest.\n\nYes, opportunity cost.\n\n> Riskless, since it is certain to re-gain control.\n\nBut of no value to anyone as money.\n\nBest,\nEric\n\n> Regards,\n> \n> Tamas Blummer\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190706/99cf3765/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-05T23:20:17",
                "message_text_only": "> On Jul 5, 2019, at 12:27, Eric Voskuil <eric at voskuil.org> wrote:\n> \n> \n>> On Jul 4, 2019, at 21:05, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>> \n>> Good morning Eric,\n>> \n>>> As with Bitcoin mining, it is the consumed cost that matters in this scenario, (i.e., not the hash rate, or in this case the encumbered coin face value). Why would the advertiser not simply be required to burn .1 coin for the same privilege, just as miners burn energy? Why would it not make more sense to spend that coin in support of the secondary network (e.g. paying for confirmation security), just as with the burning of energy in Bitcoin mining?\n> \n> Good morning ZmnSCPxj,\n> \n>> Using the unspentness-time of a UTXO allows for someone advertising a service or producer to \"close up shop\" by simply spending the advertising UTXO.\n>> For instance, if the advertisement is for sale of a limited stock of goods, once the stock has been sold, the merchant (assuming the merchant used own funds) can simply recover the locked funds, with the potential to reinvest them elsewhere.\n>> This allows some time-based hedging for the merchant (they may be willing to wait indefinitely for the stock to be sold, but once the stock is sold, they can immediately reap the rewards of not having their funds locked anymore).\n> \n> This is a materially different concept than proposed by Tamas.\n> \n> \u201c...he gives up his control of the coins until maturity, he can not use them elsewhere until then.\u201d\n> \n>> Similarly, an entity renting out a UTXO for an advertisement might allow for early reclamation of the UTXO in exchange for partial refund of fee; as the value in the UTXO is now freed to be spent elsewhere, the lessor can lease it to another advertiser.\n> \n> You appear to be proposing a design whereby either the owner or the renter (not entirely clear to me which) can spend the \u201clocked up\u201d coin at any time (no maturity constraint), by dropping the covenant.\n> \n> If the renter can do this he can simply steal the coin from the owner.\n> \n> If the owner can do this there is no value to the renter (or as a proof of cost), as the owner retains full control of the coin.\n> \n> If you mean that the age of the encumbrance is the proof of cost, this requires no covenant. I don\u2019t believe this is what you intended, just covering all bases.\n> \n>> Burnt funds cannot be \"un-burnt\" to easily signal the end of a term for an advertisement.\n> \n> And as I have shown above, nor can a \u201clocked-up\u201d coin be unlocked to do the same.\n> \n>> Similarly for miner fees.\n> \n> Well that\u2019s the point, money spent is no longer under one\u2019s control. The provable cost of this surrender was your stated objective. Renting at a fractional cost of coin face value is a non-recoverable spend by the renter to the owner. Burning or spending the same amount in a way that is provably not to one\u2019s self achieves the exact same result.\n> \n>> The best that can be done would be to have the nodes of the classified ads network automatically decay the spent value of older advertisements to let them be dropped from their advertisements pool.\n> \n> The advertiser can presumably trade control of as space on the ad network. It\u2019s not clear to me why this is not simply an independent chain of limited ad space ownership. It might as well be namecoin.\n> \n>> Less importantly, burning currently has bad resource usage for practical applications.\n>> Practical burning requires spending to a provably-unspendable P2PKH or P2SH or similar output.\n>> This adds UTXO entries to the UTXO database that will never be removed.\n\nI forgot to add that it is certainly possible to burn using a nonstandard script, such as the non-zero OP_RETURN you suggested, without a consensus change. This can be, as you say, made more practical with a policy change. But such changes are up to individual node operators as they require no deviation from consensus. Yet ultimately this is a miner preference, and anyone can mine. Finally, as I pointed out, burning is not necessary. Simply spending the coin as a fee is sufficient.\n\n> If an output is provably unspendable (burned) it is not a UTXO.\n> \n> It is worth noting that not all full node implementations require a store of UTXOs, this is an implementation detail. For example, libbitcoin uses a flag on each output to indicate its spentness on the strong branch. As such the store size is linear by height.\n> \n>> This will of course be remedied by compact UTXO representations later, but not today.\n>> Similarly, it would be very nice to have non-0-amount `OP_RETURN` outputs, as `OP_RETURN` outputs are never stored in the UTXO database.\n>> However, this will require a change in node relay policy, which again will take time to make possible, and would not be practical today.\n>> \n>> Thus I think use of UTXO is better than burning or mining-fee-spending.\n> \n> I don\u2019t believe you have shown this.\n> \n> Best,\n> Eric\n> \n>> Also, mostly trivia:\n>> The use of UTXOs to advertise services is not original to me --- I found the LN channel gossip to be the inspiration for this.\n>> Publicly-announced channels indicate the backing UTXO that funds the channel.\n>> The purpose of publicly announcing the channels is to be able to provide the service, of forwarding across the Lightning Network; thus the public announcement serves as an advertisement for the service.\n>> Channel closure immediately spends the UTXO, and also doubles to \"revoke\" the existing \"advertisement\".\n>> I found this ability to \"revoke\" the advertisement appealing, and thereby designed the Bitcoin Classified Ads Network around the UTXO spentness mechanism.\n>> \n>> Regards,\n>> ZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Generalized covenants with taproot enable riskless or risky lending, prevent credit inflation through fractional reserve",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Eric Voskuil",
                "Tamas Blummer"
            ],
            "messages_count": 32,
            "total_messages_chars_count": 147502
        }
    },
    {
        "title": "[bitcoin-dev] OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)",
        "thread_messages": [
            {
                "author": "Dmitry Petukhov",
                "date": "2019-07-08T10:26:24",
                "message_text_only": "If you make ANYPREVOUTANYSCRIPT signature not the only signature that\ncontrols this UTXO, but use it solely for restricting the spending\nconditions such as the set of outputs, and require another signature\nthat would commit to the whole transaction, you can eliminate\nmalleability, for the price of additional signature, of course.\n\n<control-sig> <control-P> CHECKSIG <P> CHECKSIG\n\n(CHECKMULTISIG/CHECKSIGADD might be used instead)\n\nwhere control-P can even be a pubkey of a key that is publicly known,\nand the whole purpose of control-sig would be to restrict the outputs\n(control-sig would be created with flags meaning ANYPREVOUTANYSCRIPT).\nBecause control-sig does not depend on the script and on the current\ninput, there should be no circular dependency, and it can be part of\nthe redeem script.\n\nP would be the pubkey of the actual key that is needed to spend this\nUTXO, and the signature of P can commit to all the inputs and outputs,\npreventing malleability.\n\nI would like to add that it may make sense to just have 2 additional\nflags for sighash: NOPREVOUT and NOSCRIPT.\n\nNOPREVOUT would mean that previous output is not committed to, and when\ncombined with ANYONECANPAY, this will mean ANYPREVOUT/NOINPUT:\nANYONECANPAY means exclude all inputs except the current, and NOPREVOUT\nmeans exclude the current input. Thus NOPREVOUT|ANYONECANPAY = NOINPUT\n\nWith NOPREVOUT|ANYONECANPAY|NOSCRIPT you would have ANYPREVOUTANYSCRIPT\n\nwith NOPREVOUT|NOSCRIPT you can commit to \"all the inputs beside the\ncurrent one\", which would allow to create a spending restriction like\n\"this UTXO, and also one (or more) other UTXO\", which might be useful\nto retroactively revoke or transfer the rights to spend certain UTXO\nwithout actually moving it:\n\nthink 'vault' UTXO that is controlled by Alice, but requires additional\n'control' UTXO to spend. Alice have keys for both 'vault' UTXO, and\n'control' UTXO, but Bob have only key for 'control' UTXO.\n\nIf Bob learnsthat Alice's vault UTXO key is at risk of compromize,\nhe spends the control UTXO, and then Alice's ability to spend vault\nUTXO vanishes.\n\nYou can use this mechanism to transfer this right to spend if you\nprepare a number of taproot branches with different pairs of (vault,\ncontrol) keys and a chain of transactions that each spend the previous\ncontrol UTXO such that the newly created UTXO becomes controlled by the\ncontrol key of the next pair, together with vault key in that pair.\n\n\u0412 Sat, 22 Jun 2019 23:43:22 -0700\nJeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This is insufficient: sequences must be committed to because they\n> affect TXID. As with scriptsigs (witness data fine to ignore). NUM_IN\n> too.\n> \n> Any malleability makes this much less useful.\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n> \n> \n> On Fri, Jun 21, 2019 at 10:31 AM Anthony Towns via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > On Tue, Jun 18, 2019 at 04:57:34PM -0400, Russell O'Connor wrote:  \n> > > So with regards to OP_SECURETHEBAG, I am also \"not really seeing\n> > > any  \n> > reason to  \n> > > complicate the spec to ensure the digest is precommitted as part\n> > > of the opcode.\"  \n> >\n> > Also, I think you can simulate OP_SECURETHEBAG with an ANYPREVOUT\n> > (NOINPUT) sighash (Johnson Lau's mentioned this before, but not\n> > sure if it's been spelled out anywhere); ie instead of constructing\n> >\n> >   X = Hash_BagHash( version, locktime, [outputs], [sequences],\n> > num_in )\n> >\n> > and having the script be \"<X> OP_SECURETHEBAG\" you calculate an\n> > ANYPREVOUT sighash for SIGHASH_ANYPREVOUTANYSCRIPT | SIGHASH_ALL:\n> >\n> >   Y = Hash_TapSighash( 0, 0xc1, version, locktime, [outputs], 0,\n> >                        amount, sequence)\n> >\n> > and calculate a signature sig = Schnorr(P,m) for some pubkey P, and\n> > make your script be \"<sig> <P> CHECKSIG\".\n> >\n> > That loses the ability to commit to the number of inputs or restrict\n> > the nsequence of other inputs, and requires a bigger script (sig\n> > and P are ~96 bytes instead of X's 32 bytes), but is otherwise\n> > pretty much the same as far as I can tell. Both scripts are\n> > automatically satisfied when revealed (with the correct set of\n> > outputs), and don't need any additional witness data.\n> >\n> > If you wanted to construct \"X\" via script instead of hardcoding a\n> > value because it got you generalised covenants or whatever; I think\n> > you could get the same effect with CAT,LEFT, and RIGHT: you'd\n> > construct Y in much the same way you construct X, but you'd then\n> > need to turn that into a signature. You could do so by using pubkey\n> > P=G and nonce R=G, which means you need to calculate\n> > s=1+hash(G,G,Y)*1 -- calculating the hash part is easy, multiplying\n> > it by 1 is easy, and to add 1 you can probably do something along\n> > the lines of:\n> >\n> >     OP_DUP 4 OP_RIGHT 1 OP_ADD OP_SWAP 28 OP_LEFT OP_SWAP OP_CAT\n> >\n> > (ie, take the last 4 bytes, increment it using 4-byte arithmetic,\n> > then cat the first 28 bytes and the result. There's overflow issues,\n> > but I think they can be worked around either by allowing you to\n> > choose different locktimes, or by more complicated script)\n> >\n> > Cheers,\n> > aj\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >"
            }
        ],
        "thread_summary": {
            "title": "OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dmitry Petukhov"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5452
        }
    },
    {
        "title": "[bitcoin-dev] BIP174 amendment proposal (Important Signer Check should be mentioned)",
        "thread_messages": [
            {
                "author": "Jonathan Underwood",
                "date": "2019-07-09T15:58:56",
                "message_text_only": "Hi all,\n\nJust to be brief, I'll kick off with an attack scenario.\n\n1. I am a signer, I get a PSBT that is ready to sign. I parse. I sign\naccording to the PSBT as-is.\n2. I notice my UTXO was stolen by a hacker because they changed my PSBT\ninput's sighashtype to SIGHASH_ANYONECANPAY | SIGHASH_NONE and after the\nfact they changed the outputs to send to themselves, and added an input\nthey signed with SIGHASH_ALL.\n3. I lose the BTC in my UTXO.\n\nSo we should definitely add to the signer checks \"ensure the sighash type\ngiven is the type of sighash you want to sign.\" etc.\n\nMy proposal for a wording change would be addition to the bullet list:\n\n- If a sighash type is provided, the signer MUST check that the sighash\ntype is acceptable to them, and fail signing if unacceptable.\n- If a sighash type is not provided, the signer SHOULD sign using\nSIGHASH_ALL, but may sign with any sighash type they wish.\n\nAny thoughts?\n\nThanks,\nJon\n\n-- \n-----------------\nJonathan Underwood\n\u30d3\u30c3\u30c8\u30d0\u30f3\u30af\u793e \u30c1\u30fc\u30d5\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30aa\u30d5\u30a3\u30b5\u30fc\n-----------------\n\n\u6697\u53f7\u5316\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u304a\u9001\u308a\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u516c\u958b\u9375\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\n\n\u6307\u7d0b: 0xCE5EA9476DE7D3E45EBC3FDAD998682F3590FEA3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190710/60601766/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2019-07-09T20:26:45",
                "message_text_only": "This was the original intent of the sighash field. Either the sighash is acceptable to the signer and the signer signs with it, or they do not sign at all.\n\nOn 7/9/19 11:58 AM, Jonathan Underwood via bitcoin-dev wrote:\n\n> Hi all,\n>\n> Just to be brief, I'll kick off with an attack scenario.\n>\n> 1. I am a signer, I get a PSBT that is ready to sign. I parse. I sign according to the PSBT as-is.\n> 2. I notice my UTXO was stolen by a hacker because they changed my PSBT input's sighashtype to SIGHASH_ANYONECANPAY | SIGHASH_NONE and after the fact they changed the outputs to send to themselves, and added an input they signed with SIGHASH_ALL.\n> 3. I lose the BTC in my UTXO.\n>\n> So we should definitely add to the signer checks \"ensure the sighash type given is the type of sighash you want to sign.\" etc.\n>\n> My proposal for a wording change would be addition to the bullet list:\n>\n> - If a sighash type is provided, the signer MUST check that the sighash type is acceptable to them, and fail signing if unacceptable.\n> - If a sighash type is not provided, the signer SHOULD sign using SIGHASH_ALL, but may sign with any sighash type they wish.\n>\n> Any thoughts?\n>\n> Thanks,\n> Jon\n>\n> --\n>\n> -----------------\n> Jonathan Underwood\n> \u30d3\u30c3\u30c8\u30d0\u30f3\u30af\u793e\u3000\u30c1\u30fc\u30d5\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30aa\u30d5\u30a3\u30b5\u30fc\n> -----------------\n>\n> \u6697\u53f7\u5316\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u304a\u9001\u308a\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u516c\u958b\u9375\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\n>\n> \u6307\u7d0b: 0xCE5EA9476DE7D3E45EBC3FDAD998682F3590FEA3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190709/c75ad156/attachment-0001.html>"
            },
            {
                "author": "Jonathan Underwood",
                "date": "2019-07-09T22:21:25",
                "message_text_only": "Hi Andrew,\n\nOk, I will go ahead and write the amendment and make a PR.\n\nThanks!\nJon\n\n2019\u5e747\u670810\u65e5(\u6c34) 5:26 Andrew Chow <achow101-lists at achow101.com>:\n\n> This was the original intent of the sighash field. Either the sighash is\n> acceptable to the signer and the signer signs with it, or they do not sign\n> at all.\n>\n> On 7/9/19 11:58 AM, Jonathan Underwood via bitcoin-dev wrote:\n>\n> Hi all,\n>\n> Just to be brief, I'll kick off with an attack scenario.\n>\n> 1. I am a signer, I get a PSBT that is ready to sign. I parse. I sign\n> according to the PSBT as-is.\n> 2. I notice my UTXO was stolen by a hacker because they changed my PSBT\n> input's sighashtype to SIGHASH_ANYONECANPAY | SIGHASH_NONE and after the\n> fact they changed the outputs to send to themselves, and added an input\n> they signed with SIGHASH_ALL.\n> 3. I lose the BTC in my UTXO.\n>\n> So we should definitely add to the signer checks \"ensure the sighash type\n> given is the type of sighash you want to sign.\" etc.\n>\n> My proposal for a wording change would be addition to the bullet list:\n>\n> - If a sighash type is provided, the signer MUST check that the sighash\n> type is acceptable to them, and fail signing if unacceptable.\n> - If a sighash type is not provided, the signer SHOULD sign using\n> SIGHASH_ALL, but may sign with any sighash type they wish.\n>\n> Any thoughts?\n>\n> Thanks,\n> Jon\n>\n> --\n> -----------------\n> Jonathan Underwood\n> \u30d3\u30c3\u30c8\u30d0\u30f3\u30af\u793e \u30c1\u30fc\u30d5\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30aa\u30d5\u30a3\u30b5\u30fc\n> -----------------\n>\n> \u6697\u53f7\u5316\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u304a\u9001\u308a\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u516c\u958b\u9375\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\n>\n> \u6307\u7d0b: 0xCE5EA9476DE7D3E45EBC3FDAD998682F3590FEA3\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190710/39f055d6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP174 amendment proposal (Important Signer Check should be mentioned)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jonathan Underwood",
                "Andrew Chow"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4553
        }
    },
    {
        "title": "[bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin",
        "thread_messages": [
            {
                "author": "Kenshiro []",
                "date": "2019-07-11T15:16:40",
                "message_text_only": "Hi,\n\n\nAfter studying several Proof of Stake implementations I think it's not only an eco-friendly (and more ethical) alternative to Proof of Work, but correctly implemented could be 100% secure against all 51% history rewrite attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra improvements are required:\n\n\n- Hardcoded checkpoints: each Bitcoin Core release (each few months) should include a hardcoded checkpoint with the hash of the current block height in that moment. This simple measure protects the blockchain up to the last checkpoint, and prevents any Long-Range attack.\n\n\n- Moving checkpoints: the nodes only allow chain reorgs not deeper than N blocks. If N is 10 blocks, then the nodes ignore any hard fork starting at any block under nodeBlockHeight - N. This fully protects nodes that are online and updated. Nodes that are not fully updated need some extra rule to be protected between the last hardcoded checkpoint and the current blockchain height. This extra rule could be connecting to a block explorer to download the hash of the current block height, or ask some trusted source like a friend and enter the hash manually. After being fully updated, the user can always check that he is in the correct chain checking with a block explorer.\n\n\nSomeone could have 99% of the coins and still would be unable to use the coins to do any history rewrite attack. The attacker could only slow down the network not creating his blocks, or censor transactions in his blocks.\n\n\nWhat do you think? :)\n\n\nRegards\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190711/84c5080e/attachment.html>"
            },
            {
                "author": "Oscar Lafarga",
                "date": "2019-07-16T20:35:21",
                "message_text_only": "Hi Kenshiro,\n\nI don't think your proposal would require any changes to the Bitcoin Core\nimplementation. This system you describe seems like it would operate as an\nindependent addition, rather than an alternative to the Proof of Work\nconsensus code that runs within Bitcoin now. It introduces security risk in\nthe selection of block explorer and to the Bitcoin Core release dispatch\nsystem, reducing the trustlessness of the current network. Also, without\nthe constraints that PoW places on block creation, you increase the vector\nspace for attacks since it is trivial to spam blocks to node on the network\n(see Sybil attack <https://en.wikipedia.org/wiki/Sybil_attack#>).\n\nI believe many other software projects have tried similar checkpointing\nschemes that have resulted in hard forks or overall weakened consensus. I\nhaven't dug too deeply, but I'm not aware of any cases where these schemes\naccomplish anything useful to improve the bitcoin network.\n\nBest,\n\nOn Tue, Jul 16, 2019 at 5:33 AM Kenshiro [] via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n>\n> After studying several Proof of Stake implementations I think it's not\n> only an eco-friendly (and more ethical) alternative to Proof of Work, but\n> correctly implemented could be 100% secure against all 51% history rewrite\n> attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra\n> improvements are required:\n>\n>\n> - Hardcoded checkpoints: each Bitcoin Core release (each few months)\n> should include a hardcoded checkpoint with the hash of the current block\n> height in that moment. This simple measure protects the blockchain up to\n> the last checkpoint, and prevents any Long-Range attack.\n>\n>\n> - Moving checkpoints: the nodes only allow chain reorgs not deeper than N\n> blocks. If N is 10 blocks, then the nodes ignore any hard fork starting at\n> any block under nodeBlockHeight - N. This fully protects nodes that are\n> online and updated. Nodes that are not fully updated need some extra rule\n> to be protected between the last hardcoded checkpoint and the current\n> blockchain height. This extra rule could be connecting to a block explorer\n> to download the hash of the current block height, or ask some trusted\n> source like a friend and enter the hash manually. After being fully\n> updated, the user can always check that he is in the correct chain checking\n> with a block explorer.\n>\n>\n> Someone could have 99% of the coins and still would be unable to use the\n> coins to do any history rewrite attack. The attacker could only slow down\n> the network not creating his blocks, or censor transactions in his blocks.\n>\n>\n> What do you think? :)\n>\n>\n> Regards\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \nOscar Lafarga\nhttps://www.setlife.network\n<https://www.setdev.io/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190716/121a4dae/attachment-0001.html>"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-16T21:28:01",
                "message_text_only": "Hi Oscar,\n\nThank you for your answer. Just to clarify my proposal:\n\n1 - It's a full change to Proof of Stake protocol to avoid the energy waste and to prevent a 51% history rewrite attack, even if the attacker has 99% of coins.\n\n2 - The hardcoded checkpoints could be set by each bitcoin node client, not only Bitcoin Core. No matter if the checkpoints are different, only that they are frequent. They are there to prevent Long Range attacks. Checkpoints are public just like the rest of the software, they don't require any trust. A bad checkpoint would be detected by the community.\n\n3 - There are several PoS coins working just now and as far as I know they don't have any problem. NXT coin implements the moving checkpoint system and others the hardcoded checkpoints.\n\n4 - In any given block, only one staker gets the authorization to create that block, so other stakers can't spam the network with many different blocks as they are illegal.\n\n5 - The block explorer is only required during a 51% attack, and only for nodes that are updating blocks during the attack. Updated nodes are protected thanks to the moving checkpoints.\n\nRegards,\n\n________________________________\nFrom: Oscar Lafarga <otech47 at gmail.com>\nSent: Tuesday, July 16, 2019 22:35\nTo: Kenshiro []; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nHi Kenshiro,\n\nI don't think your proposal would require any changes to the Bitcoin Core implementation. This system you describe seems like it would operate as an independent addition, rather than an alternative to the Proof of Work consensus code that runs within Bitcoin now. It introduces security risk in the selection of block explorer and to the Bitcoin Core release dispatch system, reducing the trustlessness of the current network. Also, without the constraints that PoW places on block creation, you increase the vector space for attacks since it is trivial to spam blocks to node on the network (see Sybil attack<https://en.wikipedia.org/wiki/Sybil_attack#>).\n\nI believe many other software projects have tried similar checkpointing schemes that have resulted in hard forks or overall weakened consensus. I haven't dug too deeply, but I'm not aware of any cases where these schemes accomplish anything useful to improve the bitcoin network.\n\nBest,\n\nOn Tue, Jul 16, 2019 at 5:33 AM Kenshiro [] via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nHi,\n\n\nAfter studying several Proof of Stake implementations I think it's not only an eco-friendly (and more ethical) alternative to Proof of Work, but correctly implemented could be 100% secure against all 51% history rewrite attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra improvements are required:\n\n\n- Hardcoded checkpoints: each Bitcoin Core release (each few months) should include a hardcoded checkpoint with the hash of the current block height in that moment. This simple measure protects the blockchain up to the last checkpoint, and prevents any Long-Range attack.\n\n\n- Moving checkpoints: the nodes only allow chain reorgs not deeper than N blocks. If N is 10 blocks, then the nodes ignore any hard fork starting at any block under nodeBlockHeight - N. This fully protects nodes that are online and updated. Nodes that are not fully updated need some extra rule to be protected between the last hardcoded checkpoint and the current blockchain height. This extra rule could be connecting to a block explorer to download the hash of the current block height, or ask some trusted source like a friend and enter the hash manually. After being fully updated, the user can always check that he is in the correct chain checking with a block explorer.\n\n\nSomeone could have 99% of the coins and still would be unable to use the coins to do any history rewrite attack. The attacker could only slow down the network not creating his blocks, or censor transactions in his blocks.\n\n\nWhat do you think? :)\n\n\nRegards\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n--\nOscar Lafarga\nhttps://www.setlife.network\n<https://www.setdev.io/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190716/6da2a50e/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-17T08:11:26",
                "message_text_only": "Good morning Kenshiro,\n\n> 4 - In any given block, only one staker gets the authorization to create that block, so other stakers can't spam the network with many different blocks as they are illegal.\u00a0\n\nThis leaves the consensus algorithm liable to stake-grinding attacks.\nOften, the selection of the \"single staker\" for each block is based on some hashing of some number of the previous headers.\n\nThis allows the single staker to do some trivial grinding of the `R` of some signature of some transaction of some money from itself to itself.\nThis grinding is likely to change the hash of the current block.\nChanging the hash of the current block is enough to change the hash that is used in the selection of the **next** single staker.\nNote that the staker will of course only publish the version of that block that makes itself the **next** staker.\n\nThis is the well-known stake-grinding attack; did you not encounter it in your proof-of-stake research?\nThis is a basic objection to proof-of-stake, together with the nothing-at-stake.\n\nSuppose the staker owns 49% of the staked funds.\nIt is now trivial for it to continuously grind so that it is again the next staker for the next block, as 49% of the time, it would be selected as the next staker.\nFurther, this is easily hideable, as the staker can simply run 100000 masternodes and split its funds to all of them, so that it becomes very non-obvious that there is in fact only one staker running the entire network.\n\n(Did you consider how much energy such a staker would be willing to spend on grinding so that it remains the next staker forevermore?\nIn particular, the staker would be willing to spend energy up to the block reward in such grinding --- a property that proof-of-work has, and ***openly*** admits it has.)\n\nIn particular, this allows that one staker to impose any censorship it likes.\nThus, Bitcoin cannot support any kind of proof-of-stake that is vulnerable to this stake-grinding attack.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-16T23:00:02",
                "message_text_only": "Good morning Kenshiro,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Tuesday, July 16, 2019 8:33 PM, Kenshiro \\[\\] via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> After studying several Proof of Stake implementations I think it's not only an eco-friendly (and more ethical) alternative to Proof of Work, but correctly implemented could be 100% secure against all 51% history rewrite attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra improvements are required:\n\nUnder the trust-minimization and uncensorability requirements that Bitcoin has, nothing is more efficient than proof-of-work.\nThe very idea of proof-of-stake labors under the assumption that unencumbered free-market payment for the consumption of energy is somehow not market-efficient despite the well-known phenomenon of the invisible hand, and believes that it is possible to get something for nothing.\n\nPlease re-examine your assumptions.\n\n> - Hardcoded checkpoints:each Bitcoin Core release (each few months) should include a hardcoded checkpoint with the hash of the current block height in that moment. This simple measure protects the blockchain up to the last checkpoint, and prevents any Long-Range attack.\n\nWhile this is a developer list and made up of developers who would be quite incentivized to agree to such a setup, note that this effectively trusts the developers.\nAt least the proposed `assumeutxo` requires the operator to explicitly enable it, but I believe your \"hardcoded checkpoints\" cannot be disabled, much less disabled-by-default.\n\n> This extra rule could be connecting to a block explorer to download the hash of the current block height, or ask some trusted source like a friend and enter the hash manually. After being fully updated, the user can always check that he is in the correct chain checking with a block explorer.\n\nUnder the trust-minimization requirement of Bitcoin this is simply not acceptable.\nAs there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n\n>\n> Someone could have 99% of the coins and still would be unable to use the coins to do any history rewrite attack. The attacker could only slow down the network not creating his blocks, or censor transactions in his blocks.\n\nHistory rewrites are not the only attack possible.\nThe worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n\nCensorship attacks cannot be prevented except by ensuring that no single entity can claim 51% control of new block creation.\nBy ensuring this, we can ensure that at least some other entities are unlikely to keep a transaction out of the blockchain, and in particular that no entity can make a short-ranged history rewrite if a censored transaction *does* get into the blockchain from the efforts of another block producer.\n\nThis is trivial under proof-of-work, and is the cost we accept in order to achieve uncensorability, since it is non-trivial to acquire energy.\nUnder proof-of-stake it is difficult to impossible to determine if some single entity controls >51% of stakeable coins, and thus has no way to protect against censorship attack.\nWorse, under proof-of-stake it is often the case that stakers are awarded even more coin with which they can stake.\n\nDepending on the PoS implementation, stake-grinding may allow a 49% staker to achieve 51% and thereby the ability to censor transactions.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-17T10:10:23",
                "message_text_only": "Hi ZmnSCPxj,\n\nI'm based on the more evolved implementation of PoS that I know, which is PoS v3.0 and it's currently implemented in several coins:\n\nhttp://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version\n\nAs far as I know the grinding attack is and old issue that is fixed in PoS v3.0.\n\n>>>At least the proposed `assumeutxo` requires the operator to explicitly enable it, but I believe your \"hardcoded checkpoints\" cannot be disabled, much less disabled-by-default.\n\nWe don't trust the developers, the source code is public and anyone can check it. With the hardcoded checkpoints is exactly the same, they are in the source code repository and everyone can check them. The checkpoints are the easiest part to check. A user doesn't have any reason to remove the checkpoints, but as with anything in the source code, they could modify it to avoid the checkpoints (and become vulnerable to Long Range attacks doing it)\n\n>>>Under the trust-minimization requirement of Bitcoin this is simply not acceptable.\nAs there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n\nThe block explorer or other additional source of trust like a friend would only be required in the extreme situation that the network is under a 51% attack, and only by the nodes that are updating blocks in that moment. Updated nodes are fully protected, and under normal circumstances new nodes can just follow the longest chain as always. The other extreme situation that could cause a hard fork is that the network is splitted more than N blocks, which should require some social consensus to fix it. So N should be long enough, like a few hours of blocks or even 1 day.\n\n>>> History rewrites are not the only attack possible.\nThe worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n\nI don't agree, history rewrite attacks are much worse than censorship because they can be used to steal funds from people. In PoS staking addresses are public, so maybe it should be possible to detect if some transaction in the mempool is repeatedly being ignored and what staking deposit is repeatedly ignoring transactions. After some time, a hard fork could burn the funds of the evil validator.\n\n>>> Worse, under proof-of-stake it is often the case that stakers are awarded even more coin with which they can stake.\n\nSure, but in PoW the miners with more hash power earn more coins that can be used to purchase more miners. There is always the privilege of the rich guy, no matter if its PoW or PoS. The point is to design a protocol that don't allow the rich to destroy the network.\n\n\nLet me put it in this way: NXT is a PoS coin that uses moving checkpoints with a market cap of 21 million dollars. If the current PoS protocols are so flawed, how can you explain that a coin with this market cap is not being attacked?\n\nhttps://www.coingecko.com/en/coins/nxt\n\nAnother thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n\nRegards,\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Wednesday, July 17, 2019 1:00\nTo: Kenshiro \\[\\]; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning Kenshiro,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Tuesday, July 16, 2019 8:33 PM, Kenshiro \\[\\] via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> After studying several Proof of Stake implementations I think it's not only an eco-friendly (and more ethical) alternative to Proof of Work, but correctly implemented could be 100% secure against all 51% history rewrite attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra improvements are required:\n\nUnder the trust-minimization and uncensorability requirements that Bitcoin has, nothing is more efficient than proof-of-work.\nThe very idea of proof-of-stake labors under the assumption that unencumbered free-market payment for the consumption of energy is somehow not market-efficient despite the well-known phenomenon of the invisible hand, and believes that it is possible to get something for nothing.\n\nPlease re-examine your assumptions.\n\n> - Hardcoded checkpoints:each Bitcoin Core release (each few months) should include a hardcoded checkpoint with the hash of the current block height in that moment. This simple measure protects the blockchain up to the last checkpoint, and prevents any Long-Range attack.\n\nWhile this is a developer list and made up of developers who would be quite incentivized to agree to such a setup, note that this effectively trusts the developers.\nAt least the proposed `assumeutxo` requires the operator to explicitly enable it, but I believe your \"hardcoded checkpoints\" cannot be disabled, much less disabled-by-default.\n\n> This extra rule could be connecting to a block explorer to download the hash of the current block height, or ask some trusted source like a friend and enter the hash manually. After being fully updated, the user can always check that he is in the correct chain checking with a block explorer.\n\nUnder the trust-minimization requirement of Bitcoin this is simply not acceptable.\nAs there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n\n>\n> Someone could have 99% of the coins and still would be unable to use the coins to do any history rewrite attack. The attacker could only slow down the network not creating his blocks, or censor transactions in his blocks.\n\nHistory rewrites are not the only attack possible.\nThe worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n\nCensorship attacks cannot be prevented except by ensuring that no single entity can claim 51% control of new block creation.\nBy ensuring this, we can ensure that at least some other entities are unlikely to keep a transaction out of the blockchain, and in particular that no entity can make a short-ranged history rewrite if a censored transaction *does* get into the blockchain from the efforts of another block producer.\n\nThis is trivial under proof-of-work, and is the cost we accept in order to achieve uncensorability, since it is non-trivial to acquire energy.\nUnder proof-of-stake it is difficult to impossible to determine if some single entity controls >51% of stakeable coins, and thus has no way to protect against censorship attack.\nWorse, under proof-of-stake it is often the case that stakers are awarded even more coin with which they can stake.\n\nDepending on the PoS implementation, stake-grinding may allow a 49% staker to achieve 51% and thereby the ability to censor transactions.\n\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190717/95445798/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-17T12:02:29",
                "message_text_only": "> On Jul 17, 2019, at 03:10, Kenshiro [] via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Hi ZmnSCPxj,\n> \n> I'm based on the more evolved implementation of PoS that I know, which is PoS v3.0 and it's currently implemented in several coins:\n> \n> http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version\n> \n> As far as I know the grinding attack is and old issue that is fixed in PoS v3.0.\n> \n> >>>At least the proposed `assumeutxo` requires the operator to explicitly enable it, but I believe your \"hardcoded checkpoints\" cannot be disabled, much less disabled-by-default.\n> \n> We don't trust the developers, the source code is public and anyone can check it. With the hardcoded checkpoints is exactly the same, they are in the source code repository and everyone can check them. The checkpoints are the easiest part to check. A user doesn't have any reason to remove the checkpoints, but as with anything in the source code, they could modify it to avoid the checkpoints (and become vulnerable to Long Range attacks doing it)\n\nBad precedent set by Bitcoin, just like retroactively hardcoding soft fork activation checkpoints.\n\n> >>>Under the trust-minimization requirement of Bitcoin this is simply not acceptable.\n> As there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n\nThat\u2019s nonsense, one is a feature (systemic trust), the other is a bug (code accident). But there is a way to minimize actual forks - try not to change the consensus rules in the code you ship.\n\n> The block explorer or other additional source of trust like a friend would only be required in the extreme situation that the network is under a 51% attack, and only by the nodes that are updating blocks in that moment. Updated nodes are fully protected, and under normal circumstances new nodes can just follow the longest chain as always. The other extreme situation that could cause a hard fork is that the network is splitted more than N blocks, which should require some social consensus to fix it. So N should be long enough, like a few hours of blocks or even 1 day.\n\nConsensus rules are the social consensus. If you have an objective way to do this, write the rule.\n\n> >>> History rewrites are not the only attack possible.\n> The worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n> \n> I don't agree, history rewrite attacks are much worse than censorship because they can be used to steal funds from people.\n\nCensorship can steal everybody\u2019s money.\n\n> In PoS staking addresses are public, so maybe it should be possible to detect if some transaction in the mempool is repeatedly being ignored and what staking deposit is repeatedly ignoring transactions. After some time, a hard fork could burn the funds of the evil validator.\n\nPolitical money.\n\n> >>> Worse, under proof-of-stake it is often the case that stakers are awarded even more coin with which they can stake.\n> \n> Sure, but in PoW the miners with more hash power earn more coins that can be used to purchase more miners.\n\nTrue, but this is at least limited proportionally.\n\n> There is always the privilege of the rich guy, no matter if its PoW or PoS. The point is to design a protocol that don't allow the rich to destroy the network.\n\nThe ability to introduce new power to the chain is the only way to evict a censor. In PoS a well capitalized individual or state can buy total control over the system forever at no ongoing cost. PoW allows any number of individuals to pay higher fees on censored txs and evict the censor, who must then maintain the cost of subsidizing censorship.\n\n> Let me put it in this way: NXT is a PoS coin that uses moving checkpoints with a market cap of 21 million dollars. If the current PoS protocols are so flawed, how can you explain that a coin with this market cap is not being attacked?\n\nThe state doesn\u2019t care because there is no material impact from it? It hasn\u2019t started attacking Bitcoin yet either.\n\n> https://www.coingecko.com/en/coins/nxt\n> \n> Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n\nJust another nail in the coffin.\n\nBest,\nEric\n\n> Regards,\n> \n>  \n> From: ZmnSCPxj <ZmnSCPxj at protonmail.com>\n> Sent: Wednesday, July 17, 2019 1:00\n> To: Kenshiro \\[\\]; Bitcoin Protocol Discussion\n> Subject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n>  \n> Good morning Kenshiro,\n> \n> \n> Sent with ProtonMail Secure Email.\n> \n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Tuesday, July 16, 2019 8:33 PM, Kenshiro \\[\\] via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > Hi,\n> >\n> > After studying several Proof of Stake implementations I think it's not only an eco-friendly (and more ethical) alternative to Proof of Work, but correctly implemented could be 100% secure against all 51% history rewrite attacks. Over a \"standard\" PoS protocol like PoS v3.0, only 2 extra improvements are required:\n> \n> Under the trust-minimization and uncensorability requirements that Bitcoin has, nothing is more efficient than proof-of-work.\n> The very idea of proof-of-stake labors under the assumption that unencumbered free-market payment for the consumption of energy is somehow not market-efficient despite the well-known phenomenon of the invisible hand, and believes that it is possible to get something for nothing.\n> \n> Please re-examine your assumptions.\n> \n> > - Hardcoded checkpoints:each Bitcoin Core release (each few months) should include a hardcoded checkpoint with the hash of the current block height in that moment. This simple measure protects the blockchain up to the last checkpoint, and prevents any Long-Range attack.\n> \n> While this is a developer list and made up of developers who would be quite incentivized to agree to such a setup, note that this effectively trusts the developers.\n> At least the proposed `assumeutxo` requires the operator to explicitly enable it, but I believe your \"hardcoded checkpoints\" cannot be disabled, much less disabled-by-default.\n> \n> > This extra rule could be connecting to a block explorer to download the hash of the current block height, or ask some trusted source like a friend and enter the hash manually. After being fully updated, the user can always check that he is in the correct chain checking with a block explorer.\n> \n> Under the trust-minimization requirement of Bitcoin this is simply not acceptable.\n> As there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n> \n> >\n> > Someone could have 99% of the coins and still would be unable to use the coins to do any history rewrite attack. The attacker could only slow down the network not creating his blocks, or censor transactions in his blocks.\n> \n> History rewrites are not the only attack possible.\n> The worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n> \n> Censorship attacks cannot be prevented except by ensuring that no single entity can claim 51% control of new block creation.\n> By ensuring this, we can ensure that at least some other entities are unlikely to keep a transaction out of the blockchain, and in particular that no entity can make a short-ranged history rewrite if a censored transaction *does* get into the blockchain from the efforts of another block producer.\n> \n> This is trivial under proof-of-work, and is the cost we accept in order to achieve uncensorability, since it is non-trivial to acquire energy.\n> Under proof-of-stake it is difficult to impossible to determine if some single entity controls >51% of stakeable coins, and thus has no way to protect against censorship attack.\n> Worse, under proof-of-stake it is often the case that stakers are awarded even more coin with which they can stake.\n> \n> Depending on the PoS implementation, stake-grinding may allow a 49% staker to achieve 51% and thereby the ability to censor transactions.\n> \n> \n> Regards,\n> ZmnSCPxj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190717/8c177d01/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-18T01:13:27",
                "message_text_only": "Good morning all,\n\n> > >>>Under the trust-minimization requirement of Bitcoin this is simply not acceptable.\n> > As there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n>\n> That\u2019s nonsense, one is a feature (systemic trust), the other is a bug (code accident). But there is a way to minimize actual forks - try not to change the consensus rules in the code you ship.\n\nI am uncertain what you mean here.\n\nWhat I am attempting to compare are:\n\n1.  A network split (maybe better term is \"network partition\"?) wherein some number of nodes are temporarily unable to contact the rest of the network.\n    This has the degenerate but very common case where a single node is temporarily unable to communicate with the rest of the network.\n\nAND\n\n2.  A node being shut down, then brought back online again.\n\nNeither seems to match \"feature\" or \"bug\", as both are simply accidents of deployment.\n\nThe point (as I understand it) of a consensus algorithm is to be able to get all nodes into agreement about the global state, even after a network partition.\nIdeally, such an algorithm would place as little trust as possible on some other node, and would work even in adversarial conditions.\n\nTo my understanding, the proposal from Kenshiro is not able to get all nodes into agreement about global state after a network partition, without trust in some node, when in adversarial conditions.\n\n\n> > >>> History rewrites are not the only attack possible.\n> > The worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n> >\n> > I don't agree, history rewrite attacks are much worse than censorship because they can be used to steal funds from people.\n>\n> Censorship can steal everybody\u2019s money.\n\nTo expand on this: by censoring ***all*** transactions one is able to prevent spending of all funds.\nThis will crash the value of the staked funds also, but note that the staker could use techniques like short options to leverage this and potentially earn more than the value of their staked funds, effectively stealing the entire marketcap of the attacked coin.\n\n\n>\n> > In PoS staking addresses are public, so maybe it should be possible to detect if some transaction in the mempool is repeatedly\u00a0being ignored and what staking deposit is repeatedly ignoring transactions. After some time, a hard fork could burn the funds of the evil validator.\n>\n> Political money.\n\nAside from that, this is possible to evade by running 10000 masternodes and splitting your staking funds among them.\nRent from a botnet, and it appears the masternodes are geographically diverse.\nThen it becomes hard to accuse the network of actually being controlled strongly by a single participant.\n(the ability to rent botnets means that even existing PoS coins might already be strongly controlled, but appear \"healthy\" because masternodes *appear* geographically diverse, but in actuality are controlled by a single entity)\n\nFurther, \"detect if some transaction in the mempool\" cannot provide a proof, as no construct ever precommits to the state of the mempool at a particular time (if it did, the mempool would cease to be a mempool and would be part of the block).\nI can generate a completely new transaction, then accuse the masternodes of censoring it.\nOther nodes may not believe me, as they have not seen my transaction on their mempool, but note that the mempools of nodes are ***not*** strongly synchronized.\nBy careful timing and control of the connectivity of the network, it becomes possible to effectively split the consensus algorithm by showing my transaction to some non-masternode nodes but keeping my transaction away from masternodes, then have the non-masternode nodes accuse the masternodes of censoring my transaction and hereby penalizing them.\nBut the masternodes would not agree, not having seen my transaction in their mempool, and thus is the network consensus destroyed.\n\nBasically: \"never base consensus rules on mempool state\" is a good rule of thumb for ensuring that consensus can be maintained.\nConsensus rules should consider only data that is committed to some block, and the mempool is not intended to be committed to in every block.\n\n\n> > https://www.coingecko.com/en/coins/nxt\n> >\n> > Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n>\n> Just another nail in the coffin.\n\nI agree.\n\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-18T09:58:59",
                "message_text_only": "Hi all,\n\n>>>1.  A network split (maybe better term is \"network partition\"?) wherein some number of nodes are temporarily unable to contact the rest of the network.\n    This has the degenerate but very common case where a single node is temporarily unable to communicate with the rest of the network.\n\nI think there is some misunderstanding here. A single node can be isolated from the rest of the network any time and when it reconnects it only has to follow the longest chain as always. Checking with a block-explorer or a friend's node is only required under the extreme situation of being under a 51% attack, but that is also a problem for Proof Of Work. Both protocols require manual intervention:\n\n-PoS: Burn the funds of the attacker with a hard fork\n-PoW: Change the PoW algorithm with a hard fork\n\nThe other extreme situation would be if the network or internet itself is splitted more than N blocks. If that happens, it should require manual intervention to merge both chains. But in PoW it's much worse because the longest chain wins and it erases all history of the losing chain. Are you sure that's better? All transactions of one day (or more) could be erased forever.\n\n>>> 2.  A node being shut down, then brought back online again.\n\nIt's the same as above.\n\n>>>To expand on this: by censoring ***all*** transactions one is able to prevent spending of all funds.\nThis will crash the value of the staked funds also, but note that the staker could use techniques like short options to leverage this and potentially earn more than the value of their staked funds, effectively stealing the entire marketcap of the attacked coin.\n\nYes but I think this can be solved in PoS, because there should be only 2 possible cases:\n\n1 - The attacker doesn't stop making blocks in the main chain an he only censors transactions in his blocks: in this case, there is always some honest block so he can only slow the network\n2 - The attacker does a 51% attack stopping doing blocks in the main chain, so the longest chain is his \"private\" chain which only has his blocks: then he can censor every transaction, but that attack is very evident and a hard fork could burn his funds.\n\n>>> Aside from that, this is possible to evade by running 10000 masternodes and splitting your staking funds among them.\n\nIt's possible to give more staking weight to coins together in a single address than splitted coins like with this formula (or some improved version)\n\nstakingWeight = numberOfCoins ^ 1000\n\nSo imagine Bitcoin has only 100 coins in 2 wallets, the honest wallet has 2 coins in a single address, and the attacker wallet splits his 98 coins in 98 addresses:\n\nhonestValidatorStakingWeight = 2 ^ 1000 = Very big number\n\nattackerStakingWeightPerAddress = 1 ^ 1000 = 1\ntotalAttackerWeight = 1 * 98 = 98\n\nSo X coins together always have more weight than any bigger amount of coins splitted in amounts smaller than X. The attacker needs to have at least one address with X coins.\n\n>>> Basically: \"never base consensus rules on mempool state\" is a good rule of thumb for ensuring that consensus can be maintained.\n\nYep it's only an idea, if a big number of transactions is being censored it should be possible to detect it. After some time an increasing number of nodes will see that they have very old transactions in their mempools even if blocks are not full.\n\n>>> Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n\n>>>Just another nail in the coffin.\n\nDo you think Ethereum PoS will fail?\n\nRegards,\n\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Thursday, July 18, 2019 3:13\nTo: Eric Voskuil\nCc: Kenshiro []; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning all,\n\n> > >>>Under the trust-minimization requirement of Bitcoin this is simply not acceptable.\n> > As there is no way to trust-minimally heal from a network split (and every time a node is shut down, that is indistinguishable from a network split that isolates that particular node), this is not a trust-minimizing consensus algorithm.\n>\n> That\u2019s nonsense, one is a feature (systemic trust), the other is a bug (code accident). But there is a way to minimize actual forks - try not to change the consensus rules in the code you ship.\n\nI am uncertain what you mean here.\n\nWhat I am attempting to compare are:\n\n1.  A network split (maybe better term is \"network partition\"?) wherein some number of nodes are temporarily unable to contact the rest of the network.\n    This has the degenerate but very common case where a single node is temporarily unable to communicate with the rest of the network.\n\nAND\n\n2.  A node being shut down, then brought back online again.\n\nNeither seems to match \"feature\" or \"bug\", as both are simply accidents of deployment.\n\nThe point (as I understand it) of a consensus algorithm is to be able to get all nodes into agreement about the global state, even after a network partition.\nIdeally, such an algorithm would place as little trust as possible on some other node, and would work even in adversarial conditions.\n\nTo my understanding, the proposal from Kenshiro is not able to get all nodes into agreement about global state after a network partition, without trust in some node, when in adversarial conditions.\n\n\n> > >>> History rewrites are not the only attack possible.\n> > The worst attack is a censorship attack, and a 99% staker can easily censor on the creation of new blocks.\n> >\n> > I don't agree, history rewrite attacks are much worse than censorship because they can be used to steal funds from people.\n>\n> Censorship can steal everybody\u2019s money.\n\nTo expand on this: by censoring ***all*** transactions one is able to prevent spending of all funds.\nThis will crash the value of the staked funds also, but note that the staker could use techniques like short options to leverage this and potentially earn more than the value of their staked funds, effectively stealing the entire marketcap of the attacked coin.\n\n\n>\n> > In PoS staking addresses are public, so maybe it should be possible to detect if some transaction in the mempool is repeatedly being ignored and what staking deposit is repeatedly ignoring transactions. After some time, a hard fork could burn the funds of the evil validator.\n>\n> Political money.\n\nAside from that, this is possible to evade by running 10000 masternodes and splitting your staking funds among them.\nRent from a botnet, and it appears the masternodes are geographically diverse.\nThen it becomes hard to accuse the network of actually being controlled strongly by a single participant.\n(the ability to rent botnets means that even existing PoS coins might already be strongly controlled, but appear \"healthy\" because masternodes *appear* geographically diverse, but in actuality are controlled by a single entity)\n\nFurther, \"detect if some transaction in the mempool\" cannot provide a proof, as no construct ever precommits to the state of the mempool at a particular time (if it did, the mempool would cease to be a mempool and would be part of the block).\nI can generate a completely new transaction, then accuse the masternodes of censoring it.\nOther nodes may not believe me, as they have not seen my transaction on their mempool, but note that the mempools of nodes are ***not*** strongly synchronized.\nBy careful timing and control of the connectivity of the network, it becomes possible to effectively split the consensus algorithm by showing my transaction to some non-masternode nodes but keeping my transaction away from masternodes, then have the non-masternode nodes accuse the masternodes of censoring my transaction and hereby penalizing them.\nBut the masternodes would not agree, not having seen my transaction in their mempool, and thus is the network consensus destroyed.\n\nBasically: \"never base consensus rules on mempool state\" is a good rule of thumb for ensuring that consensus can be maintained.\nConsensus rules should consider only data that is committed to some block, and the mempool is not intended to be committed to in every block.\n\n\n> > https://www.coingecko.com/en/coins/nxt\n> >\n> > Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n>\n> Just another nail in the coffin.\n\nI agree.\n\n\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190718/209f7b8b/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-18T14:15:05",
                "message_text_only": "Good morning,\n> I think there is some misunderstanding here. A single node can be isolated from the rest of the network any time and when it reconnects it only has to follow the longest chain as always. Checking with a block-explorer or a friend's node is only required under the extreme situation of being under a 51% attack, but that is also a problem for Proof Of Work. Both protocols require manual intervention:\n>\n> -PoS: Burn the funds of the attacker with a hard fork\n> -PoW: Change the PoW algorithm with a hard fork\n\nAgain: under proof-of-work, 51% attacks are a lot less feasible than under proof-of-stake.\n\nYou really should have researched this by this point, but in any case.\n\nThe primary source of energy on Earth is the formation of the solar system.\nSome areas were seeded with radioactive materials.\nLater on, some areas were seeded with carbohydrates from dying biological processes.\nRegardless, continuously the sun shines upon the just and unjust alike.\n\nThus, while there is significant variance in energy availability, it is still reasonably spread out.\n\nA 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\nLooking into latest human political maps, I cannot find any singular entity that can claim this.\n\nSecondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\nIn case of hashing algorithm change, the exact same sources of energy can be utilized with whatever hardware is most efficient, and distribution of hashpower will still be the same.\n\nThe fact that proof-of-work is strongly bound to physical limitations is a feature, not a bug.\nEconomic incentives imply simply that market forces will move hashpower towards efficient usage.\nNothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n\n\n>\n> The other extreme situation would be if the network or internet itself is splitted more than N blocks. If that happens, it should require manual intervention to merge both chains. But in PoW it's much worse because the longest chain wins and it erases all history of the losing chain. Are you sure that's better? All transactions of one day (or more) could be erased forever.\n\nYes, that is better.\nYou must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\nThus, transactions on the shorter chain will simply find themselves in the mempool waiting to be confirmed again.\nOf course, they are still subject to replacement since they become unconfirmed, and there is still some risk involved.\n\n> >>>To expand on this: by censoring ***all*** transactions one is able to prevent spending of all funds.\n> This will crash the value of the staked funds also, but note that the staker could use techniques like short options to leverage this and potentially earn more than the value of their staked funds, effectively stealing the entire marketcap of the attacked coin.\n>\n> Yes but I think this can be solved in PoS, because there should be only 2 possible cases:\n>\n> 1 - The attacker doesn't stop making blocks in the main chain an he only censors transactions in his blocks: in this case, there is always some honest block so he can only slow the network\n> 2 - The attacker does a 51% attack stopping doing blocks in the main chain, so the longest chain is his \"private\" chain which only has his blocks: then he can censor every transaction, but that attack is very evident and a hard fork could burn his funds.\n\nDo note the comment of \"political money\".\nHard forks are very difficult to coordinate as the user set increases in size.\n\n>\n> >>>\u00a0Aside from that, this is possible to evade by running 10000 masternodes and splitting your staking funds among them.\n>\n> It's possible to give more staking weight to coins together in a single address than splitted coins like with this formula (or some improved version)\n>\n> stakingWeight = numberOfCoins ^ 1000\n\nThis solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n\n> >>>\u00a0Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n>\n> >>>Just another nail in the coffin.\n>\n> Do you think Ethereum PoS will fail?\n>\n\nNo, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-18T15:50:35",
                "message_text_only": "Hi all,\n\n>>> A 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\n\nMining is not only about the energy sources, individual miners spread around the globe can join big mining pools, and these mining pools could be hacked to participate in a 51% attack. Some governments (or other groups) could plan this type of attack if it's in their interest.\n\nIf you look at this graph you will see that controlling 4 mining pools could be enough:\n\nhttps://www.blockchain.com/en/pools\n\n>>> Secondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\n\nAs far as I know, if the PoW algorithm changes to an ASIC resistant algorithm that can only run in GPUs or CPUs, the hashing power would be much more distributed at least until someone creates a new ASIC for that algorithm. There are many GPUs around the globe, but not so many ASIC miners right?\n\n>>> Nothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n\nAs time passes and more PoS coins appears, including big projects like Ethereum, we will see if it's delusional or not \ud83d\ude42\n\nI forgot one, if you do a 51% attack to a PoS coin you know that all your staking funds will be burned. In a PoW coin you don't lose your miners and can use them to mine or attack another coin with the same algorithm.\n\n>>> You must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\n\nYep but it could make double spend attacks very easy. People would know what is happening and could send the money to themselves with a higher fee to recover it. Many people would lose money with that.\n\nTo fix that problem with a PoS algorithm, some community-guided initiative could get all transactions of both chains and create a merged chain with a hard fork so double spends attacks would not be possible. This could be somewhat slow, maybe the network is stopped a few days, but in the end no one will see money disappear from their wallet, much better than pray that your payer doesn't send the money back ato himself.\n\n>>> Hard forks are very difficult to coordinate as the user set increases in size.\n\nI don't think many people will vote against a hard fork if the network is clearly under a 51% attack or the blockchain has 2 branches longer than N due to an internet split.\n\n>>> This solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n\nI think it's very evident that the rich guy earn coins faster in both algorithms.\n\nIn PoS if you have 51% of the coins and use them to stake, you make 51% of the blocks, I don't see any problem with that. If you decide to do a 51% attack, stopping doing blocks in the main chain to force the others to follow your \"private\" chain, well, you know for sure your funds will be burned in the next hard fork.\n\n>>> No, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n\nOk, we the PoS advocates will let the smart people to work in more difficult issues like finding reasons to justify the energy waste and heat generation of PoW when Bitcoin price reaches 1 million dollars \ud83d\ude09\n\nRegards,\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Thursday, July 18, 2019 16:15\nTo: Kenshiro []\nCc: Eric Voskuil; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning,\n> I think there is some misunderstanding here. A single node can be isolated from the rest of the network any time and when it reconnects it only has to follow the longest chain as always. Checking with a block-explorer or a friend's node is only required under the extreme situation of being under a 51% attack, but that is also a problem for Proof Of Work. Both protocols require manual intervention:\n>\n> -PoS: Burn the funds of the attacker with a hard fork\n> -PoW: Change the PoW algorithm with a hard fork\n\nAgain: under proof-of-work, 51% attacks are a lot less feasible than under proof-of-stake.\n\nYou really should have researched this by this point, but in any case.\n\nThe primary source of energy on Earth is the formation of the solar system.\nSome areas were seeded with radioactive materials.\nLater on, some areas were seeded with carbohydrates from dying biological processes.\nRegardless, continuously the sun shines upon the just and unjust alike.\n\nThus, while there is significant variance in energy availability, it is still reasonably spread out.\n\nA 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\nLooking into latest human political maps, I cannot find any singular entity that can claim this.\n\nSecondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\nIn case of hashing algorithm change, the exact same sources of energy can be utilized with whatever hardware is most efficient, and distribution of hashpower will still be the same.\n\nThe fact that proof-of-work is strongly bound to physical limitations is a feature, not a bug.\nEconomic incentives imply simply that market forces will move hashpower towards efficient usage.\nNothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n\n\n>\n> The other extreme situation would be if the network or internet itself is splitted more than N blocks. If that happens, it should require manual intervention to merge both chains. But in PoW it's much worse because the longest chain wins and it erases all history of the losing chain. Are you sure that's better? All transactions of one day (or more) could be erased forever.\n\nYes, that is better.\nYou must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\nThus, transactions on the shorter chain will simply find themselves in the mempool waiting to be confirmed again.\nOf course, they are still subject to replacement since they become unconfirmed, and there is still some risk involved.\n\n> >>>To expand on this: by censoring ***all*** transactions one is able to prevent spending of all funds.\n> This will crash the value of the staked funds also, but note that the staker could use techniques like short options to leverage this and potentially earn more than the value of their staked funds, effectively stealing the entire marketcap of the attacked coin.\n>\n> Yes but I think this can be solved in PoS, because there should be only 2 possible cases:\n>\n> 1 - The attacker doesn't stop making blocks in the main chain an he only censors transactions in his blocks: in this case, there is always some honest block so he can only slow the network\n> 2 - The attacker does a 51% attack stopping doing blocks in the main chain, so the longest chain is his \"private\" chain which only has his blocks: then he can censor every transaction, but that attack is very evident and a hard fork could burn his funds.\n\nDo note the comment of \"political money\".\nHard forks are very difficult to coordinate as the user set increases in size.\n\n>\n> >>> Aside from that, this is possible to evade by running 10000 masternodes and splitting your staking funds among them.\n>\n> It's possible to give more staking weight to coins together in a single address than splitted coins like with this formula (or some improved version)\n>\n> stakingWeight = numberOfCoins ^ 1000\n\nThis solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n\n> >>> Another thing is that Ethereum itself is going to PoS next year, but with a different implementation that I'm proposing here.\n>\n> >>>Just another nail in the coffin.\n>\n> Do you think Ethereum PoS will fail?\n>\n\nNo, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190718/f7a580da/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-19T03:45:03",
                "message_text_only": "Good morning Kenshiro,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Thursday, July 18, 2019 11:50 PM, Kenshiro [] <tensiam at hotmail.com> wrote:\n\n> Hi all,\n>\n> >>>\u00a0A 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\n>\n> Mining is not only about the energy sources, individual miners spread around the globe can join big mining pools, and these mining pools could be hacked to participate in a 51% attack. Some governments (or other groups) could plan this type of attack if it's in their interest.\u00a0\n>\n> If you look at this graph you will see that controlling 4 mining pools could be enough:\n>\n> https://www.blockchain.com/en/pools\n\nPools only have short-term power in that they can only temporarily attack the coin until miners notice and then voluntarily leave.\nPools are themselves still subject to economic forces, and censored transactions can raise their fee until competing pools arise which do not censor (and which would have an economic advantage in taking the higher fee offered).\nThe invisible hand abides.\n\nFurther, the correct solution is to support the development and deployment of better pool<->miner protocols, such as BetterHash.\nSo we should instead focus on helping Matt Corallo et al. in this work, than proposing a hard fork to proof-of-stake which will be strongly opposed economically.\n\n>\n> >>>\u00a0Secondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\n>\n> As far as I know, if the PoW algorithm changes to an ASIC resistant algorithm that can only run in GPUs or CPUs, the hashing power would be much more distributed at least until someone creates a new ASIC for that algorithm. There are many GPUs around the globe, but not so many ASIC miners right?\n\nGPUs still require electricity to run, and are far easier to source.\nHash change simply means that those with control of energy sources can easily purchase the needed hardware from many sources (as opposed to ASICs which are only sourced from a few places).\nSo a hash change will only affect things temporarily, and it will still settle to the existing distribution of mining hashpower.\n\n>\n> >>> Nothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n>\n> As time passes and more PoS coins appears, including big projects like Ethereum, we will see if it's delusional or not \ud83d\ude42\n>\n> I forgot one, if you do a 51% attack to a PoS coin you know that all your staking funds will be burned. In a PoW coin you don't lose your miners and can use them to mine or attack another coin with the same algorithm.\u00a0\n\nI already told you that it is always possible to get around this: leverage by use of short options.\nShort the coin to attack, then perform your attack by censorship.\nCoin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\nBy this, you can steal the entire marketcap of the coin.\n\nThen you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n\nAt least mining hardware are physical hardware and subject to deprecation over time.\n\n>\n> >>>\u00a0You must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\n>\n> Yep but it could make double spend attacks very easy. People would know what is happening and could send the money to themselves with a higher fee to recover it. Many people would lose money with that.\n>\n> To fix that problem with a PoS algorithm, some community-guided initiative could get all transactions of both chains and create a merged chain with a hard fork so double spends attacks would not be possible. This could be somewhat slow, maybe the network is stopped a few days, but in the end no one will see money disappear from their wallet, much better than pray that your payer doesn't send the money back ato himself.\n\nThis happens every day in Bitcoin, and nobody particularly cares.\nYou just wait for confirmations that in practice are impossible for some orphaned chain to persist.\n\n\n>\n> >>>\u00a0This solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n>\n> I think it's very evident that the rich guy earn coins faster in both algorithms.\u00a0\n>\n> In PoS if you have 51% of the coins and use them to stake, you make 51% of the blocks, I don't see any problem with that. If you decide to do a 51% attack, stopping doing blocks in the main chain to force the others to follow your \"private\" chain, well, you know for sure your funds will be burned in the next hard fork.\n\nBut your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n\nJust admit that you have no real solution to knowing how much every entity controls of your coin.\n\n>\n> >>>\u00a0No, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n>\n> Ok, we the\u00a0PoS advocates will let the smart people to work in more difficult issues like finding reasons to justify the energy waste and heat generation of PoW when Bitcoin price reaches 1 million dollars \ud83d\ude09\n\nWe hope to see you back soon after having learned your lesson.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Eric Voskuil",
                "date": "2019-07-19T05:10:30",
                "message_text_only": "> On Jul 18, 2019, at 20:45, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n> \n> Good morning Kenshiro,\n> \n> \n> Sent with ProtonMail Secure Email.\n> \n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n>> On Thursday, July 18, 2019 11:50 PM, Kenshiro [] <tensiam at hotmail.com> wrote:\n>> \n>> Hi all,\n>> \n>>>>>  A 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\n>> \n>> Mining is not only about the energy sources, individual miners spread around the globe can join big mining pools, and these mining pools could be hacked to participate in a 51% attack. Some governments (or other groups) could plan this type of attack if it's in their interest. \n>> \n>> If you look at this graph you will see that controlling 4 mining pools could be enough:\n>> \n>> https://www.blockchain.com/en/pools\n> \n> Pools only have short-term power in that they can only temporarily attack the coin until miners notice and then voluntarily leave.\n\nBut also long term economic power, since leaving implies a lower proportional hash power, until another comparably-sized pool exists, but this is not the case when there is a majority hash power pool, which is economically inevitable until the majority miner starts censoring.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Pooling-Pressure-Risk\n\n> Pools are themselves still subject to economic forces, and censored transactions can raise their fee until competing pools arise which do not censor (and which would have an economic advantage in taking the higher fee offered).\n> The invisible hand abides.\n\nThis is why PoW is necessary, and why fee-based confirmation is necessary. It\u2019s the only economically-rational way that the censor can be overpowered. But keep in mind the only net cost to the censor is the *premium* on censored transactions.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Censorship-Resistance-Property\n\n> Further, the correct solution is to support the development and deployment of better pool<->miner protocols, such as BetterHash.\n> So we should instead focus on helping Matt Corallo et al. in this work, than proposing a hard fork to proof-of-stake which will be strongly opposed economically.\n\nWhile this proposal may introduce engineering improvements, it does not change any of the economic forces at work and therefore does not mitigate this issue. The pool controls the payout, and therefore retains power over tx selection regardless of who selects and grinds on them.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Decoupled-Mining-Fallacy\n\n>>>>>  Secondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\n>> \n>> As far as I know, if the PoW algorithm changes to an ASIC resistant algorithm that can only run in GPUs or CPUs, the hashing power would be much more distributed at least until someone creates a new ASIC for that algorithm. There are many GPUs around the globe, but not so many ASIC miners right?\n> \n> GPUs still require electricity to run, and are far easier to source.\n> Hash change simply means that those with control of energy sources can easily purchase the needed hardware from many sources (as opposed to ASICs which are only sourced from a few places).\n> So a hash change will only affect things temporarily, and it will still settle to the existing distribution of mining hashpower.\n\nYes\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Work-Fallacy\n\n>>>>> Nothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n>> \n>> As time passes and more PoS coins appears, including big projects like Ethereum, we will see if it's delusional or not \ud83d\ude42\n>> \n>> I forgot one, if you do a 51% attack to a PoS coin you know that all your staking funds will be burned. In a PoW coin you don't lose your miners and can use them to mine or attack another coin with the same algorithm. \n> \n> I already told you that it is always possible to get around this: leverage by use of short options.\n> Short the coin to attack, then perform your attack by censorship.\n> Coin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\n> By this, you can steal the entire marketcap of the coin.\n\nYes, and of course stealing the value in the chain is not the only way to profit from the destruction of its usefulness. PoS offers no defense against the primary threat to permissionless money.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Fedcoin-Objectives\n\n> Then you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n> \n> At least mining hardware are physical hardware and subject to deprecation over time.\n\nCapital cost isn\u2019t the source of this defense, it\u2019s the ability to introduce as much power as necessary to evict the censor, paid for by the rising premium on censored txs. Without this the majority miner can mine indefinitely and be the most profitable. This is of no consequence to confirmation until censorship begins.\n\nIn PoS, once a miner achieves necessary stake (also profitably) it can censor indefinitely. It\u2019s a big difference.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Cryptodynamic-Principles\n\n>>>>>  You must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\n>> \n>> Yep but it could make double spend attacks very easy. People would know what is happening and could send the money to themselves with a higher fee to recover it. Many people would lose money with that.\n>> \n>> To fix that problem with a PoS algorithm, some community-guided initiative could get all transactions of both chains and create a merged chain with a hard fork so double spends attacks would not be possible. This could be somewhat slow, maybe the network is stopped a few days, but in the end no one will see money disappear from their wallet, much better than pray that your payer doesn't send the money back ato himself.\n> \n> This happens every day in Bitcoin, and nobody particularly cares.\n> You just wait for confirmations that in practice are impossible for some orphaned chain to persist.\n\nYes, and of course the same scenario as described above can also occur with PoW. Gather up the victims, invest in mining a stronger chain, get the profit from the mining investment, and get your money back.\n\n>>>>>  This solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n>> \n>> I think it's very evident that the rich guy earn coins faster in both algorithms. \n>> \n>> In PoS if you have 51% of the coins and use them to stake, you make 51% of the blocks, I don't see any problem with that. If you decide to do a 51% attack, stopping doing blocks in the main chain to force the others to follow your \"private\" chain, well, you know for sure your funds will be burned in the next hard fork.\n> \n> But your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n\nIt\u2019s sort of like Bitcoin\u2019s nonlinear hash power to hash rate ratio, on steroids. The nonlinearity hasn\u2019t been shown to be avoidable, but certainly something to minimize.\n\n> Just admit that you have no real solution to knowing how much every entity controls of your coin.\n\n>>>>>  No, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n>> \n>> Ok, we the PoS advocates will let the smart people to work in more difficult issues like finding reasons to justify the energy waste and heat generation of PoW when Bitcoin price reaches 1 million dollars \ud83d\ude09\n> \n> We hope to see you back soon after having learned your lesson.\n\nLet\u2019s all be nice. But WRT energy waste... see last paragraph for a consideration of waste in relation to any other monetary options.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Energy-Waste-Fallacy\n\ne\n\n> Regards,\n> ZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190718/5897e975/attachment-0001.html>"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-19T10:24:59",
                "message_text_only": "Hi all,\n\n>>> I already told you that it is always possible to get around this: leverage by use of short options.\nShort the coin to attack, then perform your attack by censorship.\nCoin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\nBy this, you can steal the entire marketcap of the coin.\n\n>>> Yes, and of course stealing the value in the chain is not the only way to profit from the destruction of its usefulness. PoS offers no defense against the primary threat to permissionless money.\n\nAs I told in my other mail, my trading level is very basic and I don't understand this type of attack.\n\n>>> In PoS, once a miner achieves necessary stake (also profitably) it can censor indefinitely. It\u2019s a big difference.\n\nImagine you have 90% of coins, there 2 possible situations:\n\n1 - You keep creating blocks in the main chain: then you can censor only in your 90% of blocks. Censored transactions are included in the other 10% of blocks.\n\n2 - You stop creating blocks in the main chain to force others to follow your evil chain (which is longer) and then you can censor everything: that's a clear 51% attack that can be easily detected and your funds are burned in a hard fork.\n\nEven for the first case, with time the accumulation of old transactions in the mempool will be very evident for all nodes and I bet its possible to analyze the blocks and the mempool during some time until it's evident who is censoring transactions.\n\n>>> It\u2019s sort of like Bitcoin\u2019s nonlinear hash power to hash rate ratio, on steroids. The nonlinearity hasn\u2019t been shown to be avoidable, but certainly something to minimize.\n\nI copy the explanation of my other e-mail:\n\n\"Not at all, I forgot to tell you that in modern PoS protocols like PoS v3.0 staking deposits have to wait many blocks after creating a block to be able to create another block.\n\nWith my additional rule every staker is incentivized to put their staking deposit in a single address to avoid a strong penalty in their staking weight, and having their coins together they can't avoid the wait time with the \"stake in many addresses\" trick \ud83d\ude42\"\n\nRegards,\n\n________________________________\nFrom: Eric Voskuil <eric at voskuil.org>\nSent: Friday, July 19, 2019 7:10\nTo: ZmnSCPxj\nCc: Kenshiro []; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\n\nOn Jul 18, 2019, at 20:45, ZmnSCPxj <ZmnSCPxj at protonmail.com<mailto:ZmnSCPxj at protonmail.com>> wrote:\n\nGood morning Kenshiro,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Thursday, July 18, 2019 11:50 PM, Kenshiro [] <tensiam at hotmail.com<mailto:tensiam at hotmail.com>> wrote:\n\nHi all,\n\n A 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\n\nMining is not only about the energy sources, individual miners spread around the globe can join big mining pools, and these mining pools could be hacked to participate in a 51% attack. Some governments (or other groups) could plan this type of attack if it's in their interest.\n\nIf you look at this graph you will see that controlling 4 mining pools could be enough:\n\nhttps://www.blockchain.com/en/pools\n\nPools only have short-term power in that they can only temporarily attack the coin until miners notice and then voluntarily leave.\n\nBut also long term economic power, since leaving implies a lower proportional hash power, until another comparably-sized pool exists, but this is not the case when there is a majority hash power pool, which is economically inevitable until the majority miner starts censoring.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Pooling-Pressure-Risk\n\nPools are themselves still subject to economic forces, and censored transactions can raise their fee until competing pools arise which do not censor (and which would have an economic advantage in taking the higher fee offered).\nThe invisible hand abides.\n\nThis is why PoW is necessary, and why fee-based confirmation is necessary. It\u2019s the only economically-rational way that the censor can be overpowered. But keep in mind the only net cost to the censor is the *premium* on censored transactions.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Censorship-Resistance-Property\n\nFurther, the correct solution is to support the development and deployment of better pool<->miner protocols, such as BetterHash.\nSo we should instead focus on helping Matt Corallo et al. in this work, than proposing a hard fork to proof-of-stake which will be strongly opposed economically.\n\nWhile this proposal may introduce engineering improvements, it does not change any of the economic forces at work and therefore does not mitigate this issue. The pool controls the payout, and therefore retains power over tx selection regardless of who selects and grinds on them.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Decoupled-Mining-Fallacy\n\n Secondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\n\nAs far as I know, if the PoW algorithm changes to an ASIC resistant algorithm that can only run in GPUs or CPUs, the hashing power would be much more distributed at least until someone creates a new ASIC for that algorithm. There are many GPUs around the globe, but not so many ASIC miners right?\n\nGPUs still require electricity to run, and are far easier to source.\nHash change simply means that those with control of energy sources can easily purchase the needed hardware from many sources (as opposed to ASICs which are only sourced from a few places).\nSo a hash change will only affect things temporarily, and it will still settle to the existing distribution of mining hashpower.\n\nYes\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Proof-of-Work-Fallacy\n\nNothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n\nAs time passes and more PoS coins appears, including big projects like Ethereum, we will see if it's delusional or not \ud83d\ude42\n\nI forgot one, if you do a 51% attack to a PoS coin you know that all your staking funds will be burned. In a PoW coin you don't lose your miners and can use them to mine or attack another coin with the same algorithm.\n\nI already told you that it is always possible to get around this: leverage by use of short options.\nShort the coin to attack, then perform your attack by censorship.\nCoin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\nBy this, you can steal the entire marketcap of the coin.\n\nYes, and of course stealing the value in the chain is not the only way to profit from the destruction of its usefulness. PoS offers no defense against the primary threat to permissionless money.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Fedcoin-Objectives\n\nThen you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n\nAt least mining hardware are physical hardware and subject to deprecation over time.\n\nCapital cost isn\u2019t the source of this defense, it\u2019s the ability to introduce as much power as necessary to evict the censor, paid for by the rising premium on censored txs. Without this the majority miner can mine indefinitely and be the most profitable. This is of no consequence to confirmation until censorship begins.\n\nIn PoS, once a miner achieves necessary stake (also profitably) it can censor indefinitely. It\u2019s a big difference.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Cryptodynamic-Principles\n\n You must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\n\nYep but it could make double spend attacks very easy. People would know what is happening and could send the money to themselves with a higher fee to recover it. Many people would lose money with that.\n\nTo fix that problem with a PoS algorithm, some community-guided initiative could get all transactions of both chains and create a merged chain with a hard fork so double spends attacks would not be possible. This could be somewhat slow, maybe the network is stopped a few days, but in the end no one will see money disappear from their wallet, much better than pray that your payer doesn't send the money back ato himself.\n\nThis happens every day in Bitcoin, and nobody particularly cares.\nYou just wait for confirmations that in practice are impossible for some orphaned chain to persist.\n\nYes, and of course the same scenario as described above can also occur with PoW. Gather up the victims, invest in mining a stronger chain, get the profit from the mining investment, and get your money back.\n\n This solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n\nI think it's very evident that the rich guy earn coins faster in both algorithms.\n\nIn PoS if you have 51% of the coins and use them to stake, you make 51% of the blocks, I don't see any problem with that. If you decide to do a 51% attack, stopping doing blocks in the main chain to force the others to follow your \"private\" chain, well, you know for sure your funds will be burned in the next hard fork.\n\nBut your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n\nIt\u2019s sort of like Bitcoin\u2019s nonlinear hash power to hash rate ratio, on steroids. The nonlinearity hasn\u2019t been shown to be avoidable, but certainly something to minimize.\n\nJust admit that you have no real solution to knowing how much every entity controls of your coin.\n\n No, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n\nOk, we the PoS advocates will let the smart people to work in more difficult issues like finding reasons to justify the energy waste and heat generation of PoW when Bitcoin price reaches 1 million dollars \ud83d\ude09\n\nWe hope to see you back soon after having learned your lesson.\n\nLet\u2019s all be nice. But WRT energy waste... see last paragraph for a consideration of waste in relation to any other monetary options.\n\nhttps://github.com/libbitcoin/libbitcoin-system/wiki/Energy-Waste-Fallacy\n\ne\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190719/549cfa18/attachment-0001.html>"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-19T09:48:26",
                "message_text_only": "Hi all,\n\n>>>Pools only have short-term power in that they can only temporarily attack the coin until miners notice and then voluntarily leave.\n\nI agree\n\n>>>GPUs still require electricity to run, and are far easier to source.\nHash change simply means that those with control of energy sources can easily purchase the needed hardware from many sources (as opposed to ASICs which are only sourced from a few places).\nSo a hash change will only affect things temporarily, and it will still settle to the existing distribution of mining hashpower.\n\nI agree\n\n>>> I already told you that it is always possible to get around this: leverage by use of short options.\nShort the coin to attack, then perform your attack by censorship.\nCoin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\nBy this, you can steal the entire marketcap of the coin.\n\n>>>Then you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n\nMy trading level is very basic and I don't understand this attack\n\n>>> this happens every day in Bitcoin, and nobody particularly cares.\nYou just wait for confirmations that in practice are impossible for some orphaned chain to persist.\n\nBut is very different. In a normal situation you only have to wait a few blocks and you know your transaction is final, but a network split of 24 hours is another thing: could happen that you sent a big amount to btc to an exchange, the exchange waited 5-6 blocks to be sure and then you use your balance in that exchange to buy a big amount of other coin. Then this network split happens and the losing chain is yours, so you send back to yourself your bitcoins with a high fee, this could cause strong loses to exchanges or normal people that received a big payment for something.\n\nI prefer the community driven merge of both chains in my PoS protocol\n\n>>> But your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n\nNot at all, I forgot to tell you that in modern PoS protocols like PoS v3.0 staking deposits have to wait many blocks after creating a block to be able to create another block.\n\nWith my additional rule every staker is incentivized to put their staking deposit in a single address to avoid a strong penalty in their staking weight, and having their coins together they can't avoid the wait time with the \"stake in many addresses\" trick \ud83d\ude42\n\n>>> We hope to see you back soon after having learned your lesson.\n\nThx \ud83d\ude42\n\nJust an additional question: do you have an estimation of the energy waste of PoW if Bitcoin price rises a lot, like one million dollars or more? Because if it's proportional to the price, it could be like 100 times the current energy waste.\n\nRegards,\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Friday, July 19, 2019 5:45\nTo: Kenshiro []\nCc: Eric Voskuil; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning Kenshiro,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Thursday, July 18, 2019 11:50 PM, Kenshiro [] <tensiam at hotmail.com> wrote:\n\n> Hi all,\n>\n> >>> A 51% attack under proof-of-work is only possible, in general, if some singular entity were able to have physical control of almost 50%, or some such close number, of the globe, simply due to the fact that energy availability is somewhat distributed over the globe.\n>\n> Mining is not only about the energy sources, individual miners spread around the globe can join big mining pools, and these mining pools could be hacked to participate in a 51% attack. Some governments (or other groups) could plan this type of attack if it's in their interest.\n>\n> If you look at this graph you will see that controlling 4 mining pools could be enough:\n>\n> https://www.blockchain.com/en/pools\n\nPools only have short-term power in that they can only temporarily attack the coin until miners notice and then voluntarily leave.\nPools are themselves still subject to economic forces, and censored transactions can raise their fee until competing pools arise which do not censor (and which would have an economic advantage in taking the higher fee offered).\nThe invisible hand abides.\n\nFurther, the correct solution is to support the development and deployment of better pool<->miner protocols, such as BetterHash.\nSo we should instead focus on helping Matt Corallo et al. in this work, than proposing a hard fork to proof-of-stake which will be strongly opposed economically.\n\n>\n> >>> Secondly: change of hashing algorithm is pointless in the highly unlikely case of a 51% attack, because what matters is control of energy sources.\n>\n> As far as I know, if the PoW algorithm changes to an ASIC resistant algorithm that can only run in GPUs or CPUs, the hashing power would be much more distributed at least until someone creates a new ASIC for that algorithm. There are many GPUs around the globe, but not so many ASIC miners right?\n\nGPUs still require electricity to run, and are far easier to source.\nHash change simply means that those with control of energy sources can easily purchase the needed hardware from many sources (as opposed to ASICs which are only sourced from a few places).\nSo a hash change will only affect things temporarily, and it will still settle to the existing distribution of mining hashpower.\n\n>\n> >>> Nothing can be more efficient than proof-of-work, and the proof-of-stake delusion is simply a perpetual motion machine that attempts to get something from nothing.\n>\n> As time passes and more PoS coins appears, including big projects like Ethereum, we will see if it's delusional or not \ud83d\ude42\n>\n> I forgot one, if you do a 51% attack to a PoS coin you know that all your staking funds will be burned. In a PoW coin you don't lose your miners and can use them to mine or attack another coin with the same algorithm.\n\nI already told you that it is always possible to get around this: leverage by use of short options.\nShort the coin to attack, then perform your attack by censorship.\nCoin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\nBy this, you can steal the entire marketcap of the coin.\n\nThen you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n\nAt least mining hardware are physical hardware and subject to deprecation over time.\n\n>\n> >>> You must understand that removing the chain tip puts the transactions in that block back in the mempool, before we ever start following the longer chain.\n>\n> Yep but it could make double spend attacks very easy. People would know what is happening and could send the money to themselves with a higher fee to recover it. Many people would lose money with that.\n>\n> To fix that problem with a PoS algorithm, some community-guided initiative could get all transactions of both chains and create a merged chain with a hard fork so double spends attacks would not be possible. This could be somewhat slow, maybe the network is stopped a few days, but in the end no one will see money disappear from their wallet, much better than pray that your payer doesn't send the money back ato himself.\n\nThis happens every day in Bitcoin, and nobody particularly cares.\nYou just wait for confirmations that in practice are impossible for some orphaned chain to persist.\n\n\n>\n> >>> This solution is worse than the problem, and speeds up the dominance of large stakers over the coin, trivially letting someone with the largest stake in the coin grow their stake even faster.\n>\n> I think it's very evident that the rich guy earn coins faster in both algorithms.\n>\n> In PoS if you have 51% of the coins and use them to stake, you make 51% of the blocks, I don't see any problem with that. If you decide to do a 51% attack, stopping doing blocks in the main chain to force the others to follow your \"private\" chain, well, you know for sure your funds will be burned in the next hard fork.\n\nBut your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n\nJust admit that you have no real solution to knowing how much every entity controls of your coin.\n\n>\n> >>> No, I think it will be very successful in ensuring that smart individuals will spend their time actually doing things that benefit the economy and technology instead of wasting their time being distracted with Ethereum and proof-of-stake.\n>\n> Ok, we the PoS advocates will let the smart people to work in more difficult issues like finding reasons to justify the energy waste and heat generation of PoW when Bitcoin price reaches 1 million dollars \ud83d\ude09\n\nWe hope to see you back soon after having learned your lesson.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190719/80cab126/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-20T00:45:32",
                "message_text_only": "Good morning Kenshiro,\n\n> >>>\u00a0I already told you that it is always possible to get around this: leverage by use of short options.\n> Short the coin to attack, then perform your attack by censorship.\n> Coin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\n> By this, you can steal the entire marketcap of the coin.\n>\n> >>>Then you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n>\n> My trading level is very basic and I don't understand this attack\n\nA short option is an option to force another party to buy an asset at a set price (the contract price) on a future date.\nIn order to get that option, you first pay that party today, a fee called \"premium\" (usually a small fraction of the contract price).\n\nThe effect is that, at that future date, if the asset is ***lower*** in price than the contract price, you earn by buying it at the market price, then force the party to buy it at the contract price, earning the difference.\nThe other party, in order to mitigate its loss, then sells the asset back to the market at market price.\n(in practice, nobody goes through the rigmarole of buying, forcing the trade, then selling, instead the other party just outright gives you the difference in contract price vs market price).\n\nHowever, if at that future date, the asset is ***higher*** in price than the contract price, there is no rational reason for you to buy it at market price, then force the other party to buy at the contract price, as you would lose money.\nAs this is an option for you, not an obligation, you can simply ignore the option and not take it.\nHowever, do note that you did pay the premium when you bought the option, so you lose out on that.\n\nShort options are often used by producers of a good in order to hedge their losses, i.e. insurance against changes in market price.\nFor example, a farmer might purchase such an option, with a maturity date at the harvest season, for the price of wheat.\nThe farmer would buy an option whose contract price is the price at the threshold of profitability, i.e. if the price falls below the contract price the farmer would lose money relative to their investment.\nIf the price of wheat drops below the contract price, the farmer earns from the short option, reducing the impact of the low price.\nIf the price of wheat is above the contract price, the farmer still earns from sale of the wheat, and only loses on the (comparatively small) premium of the option.\n\nA short option can be leveraged by those with inside knowledge as an economic attack.\nFor example, if you are capable of disrupting a coin such that its value is very likely to drop, you can buy short options as leverage.\nSuppose you hold a large stake of coins and know you control a significant fraction, enough that a censorship attack by you will be so disruptive that the coin price will drop.\nYou take out a short contract with the contract price at the \"hopium\" level others have (say 10% higher), buying enough options that you can cover the current price of your owned stake, plus some more options.\nSuppose you buy, a number of options equal to twice your stake.\n\nThen you attack the coin, dropping its price by 90% instead of the expected 10% price increase, earning the difference from the short option, about equal to the price of the coin.\nSince you bought twice the number of options as your stake, you get about twice the value of your stake in earnings from the short option.\nYou have recouped the cost of your stake and would not care if it was burned, and now are holding twice the value of your original stake in a different asset, probably fiat.\nYou then move on and attack the next coin.\n\nThe only protection against this is to make sure that block generators cannot feasibly attack the coin, such as by proof-of-work.\nShort options are much too useful otherwise to the block generators, as it allows them to hedge against drops in market price, and keeps them operating rather than reducing the security of the coin, thus short options will inevitably arise.\n\n> >>>\u00a0But your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n>\n> Not at all, I forgot to tell you that in modern\u00a0PoS protocols like PoS v3.0 staking deposits have to wait many blocks after creating a block to be able to create another block.\n>\n> With my additional rule every staker is incentivized to put their staking deposit in a single address to avoid a strong penalty in their staking weight, and having their coins together they can't avoid the wait time with the\u00a0\"stake in many addresses\" trick \ud83d\ude42\n\n*facepalm*\n\nLet's suppose there are two big whales in your coin.\nEach of them owns 50% of the total staked value.\nLet's say \"wait many blocks\" parameter is 100 blocks.\n\nOne whale puts all his coin in a single UTXO.\nThe other has distributed his stake in 100,000 different UTXOs.\n\nThe honest single-UTXO whale gets a block, because his stake dominates over all others.\nThen he gets banned from signing blocks for 100 blocks.\nDuring this ban, the other whale gets every block, as his only competitor is banned.\nIn addition, banning one of its 100,000 UTXOs is not much reducing his effective stake-weight.\nSo the honest single-UTXO whale gets 1 block (and its rewards) while the one who distributed his coins to 100,000 different UTXOs gets 100 blocks.\n\nYou have just let someone who could *just barely* 51% attack without those rules, 99% attack *with* those rules.\n\nIf you had added neither of the two new rules \"non-linear stake weights\" and \"ban for many blocks\", you would have gotten both of them at 50% control only, which while concerning, is not as bad as a 99% attack.\n\nNow suppose the one with the 99% control performs a censorship attack.\nAfter a week (1008 blocks) the community rallies and hardforks, burning the UTXOs that performed censorship.\nHowever, only about 998 UTXOs of the censoring staker is known (from the 99% of blocks it generated in that period), which is less than 1% of the 100,000 UTXOs he actually owns, and thus still controls a significant stake even past the hardfork, letting it perform further censorship attacks.\n\nYou should stop adding even more rules at this point.\n\nAn experienced engineer will stop at this point, delete all his or her files related to the current design (or move them to some archive space, some engineers are compulsive archivists), then regenerate the design from principles up.\n\nA rule-of-thumb in any security design is that, when you add something to protect against some attack, you probably just added an attack vector that is the inverse of the attack you were protecting against.\nThus, adding more rules is rarely the optimal thing to do.\n\nYou added two rules, one fixing the original attack (splitting your stake) but inviting the opposite attack (merging your stake), then added another rule to fix the second attack (merging your stake), bringing back the original attack (splitting your stake), except worse.\nThis is the other rule-of-thumb in any design: adding more things usually just makes things worse.\n\n>\n> >>>\u00a0We hope to see you back soon after having learned your lesson.\n>\n> Thx\u00a0\ud83d\ude42\n\nYou are welcome.\n\n>\n> Just an additional question: do you have an estimation of the energy waste of PoW if Bitcoin price rises a lot, like one million dollars or more? Because if it's proportional to the price, it could be like 100 times the current energy waste.\n\nYes.\n\n0.\n\nThis is because we expect market forces to move miners towards efficiency, thus they will not waste energy, only spend exactly enough to maintain the security of the coin.\n\nWe already know that miners are setting up mines at locations where energy is being wasted (e.g. oil well gas flares, putting up solar panels instead of just letting sunshine pointlessly heat up their roofs, etc.), and channeling the wasted energy into productive activity.\nThis is the opposite of becoming more energy-wasteful.\nThus does the invisible hand of the free market abide.\n\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-20T10:37:17",
                "message_text_only": "Hi all,\n\n>>> For example, if you are capable of disrupting a coin such that its value is very likely to drop, you can buy short options as leverage.\nSuppose you hold a large stake of coins and know you control a significant fraction, enough that a censorship attack by you will be so disruptive that the coin price will drop.\nYou take out a short contract with the contract price at the \"hopium\" level others have (say 10% higher), buying enough options that you can cover the current price of your owned stake, plus some more options.\nSuppose you buy, a number of options equal to twice your stake.\n\nThank you for the explanation, I understand it now. But what percent of BTC trades are short options? If everyone is doing short options, the attack is very dangerous as you say, but if only a small percent of trades is done in short options, then it's not a big problem.\n\nAnd this type of attack could also be done in PoW by evil miners. It's only one step more, they have to purchase a lot of BTC before the attack, buy many short options and execute the attack. Purchasing 50% of BTC is a problem because of the price, but that's the same for PoW or PoS.\n\n>>> Let's suppose there are two big whales in your coin.\nEach of them owns 50% of the total staked value.\nLet's say \"wait many blocks\" parameter is 100 blocks.\n\n>>>One whale puts all his coin in a single UTXO.\nThe other has distributed his stake in 100,000 different UTXOs.\n\nI think there is a misunderstanding here, you forgot to divide the 50% staking weight of the evil whale by 100.000.\n\nYes, 50% of coins splitted in 100.000 addresses gives you the same staking weight per address as an small honest staker with 0,0005% of the coins, all together in a single address. Yes, you still have 100.000 addresses, so you win against the honest staker with 0,0005% of the coins, but you lose against the honest staker with 0,0006% of the coins.\n\nSplitting the coins in many addresses transform the whales in little fishes, that's the greatness of this method.\n\n>>> Now suppose the one with the 99% control performs a censorship attack.\nAfter a week (1008 blocks) the community rallies and hardforks, burning the UTXOs that performed censorship.\nHowever, only about 998 UTXOs of the censoring staker is known (from the 99% of blocks it generated in that period), which is less than 1% of the 100,000 UTXOs he actually owns, and thus still controls a significant stake even past the hardfork, letting it perform further censorship attacks.\n\nIt's the same as above, you can't split your coins in many addresses without becoming a little fish, so this is not a problem. Even so it's true that having 99% of the coins he could do several consecutive attacks, using 51% of the total number of coins in each attack, but they are burned again and again and the rest of the people become very happy as their coins multiply his value in each hard fork. The price could temporarily go down during the attacks, but in the end it will recover.\n\n>>> We already know that miners are setting up mines at locations where energy is being wasted (e.g. oil well gas flares, putting up solar panels instead of just letting sunshine pointlessly heat up their roofs, etc.), and channeling the wasted energy into productive activity.\n\nI'm sure a big percent of mining will be done in this way, but if there is still dirty energy like nuclear energy or others is because we can't get all the energy we need from clean sources (and that's excluding bitcoin mining). So even being very optimistic about bitcoin mining, it will steal clean energy sources from other human needs which will make us keep using dirty energy. So PoW makes use dirty energy sources in a direct or indirect way.\n\n>>> Thus, adding more rules is rarely the optimal thing to do.\n\nProof of Stake is more complex than PoW, so you need to add a few more rules. Of course the rules must be well designed and tested, but as I explained above there is no problem with the extra rule of giving a great increase in staking weight to coins together in a single UTXO, because there is wait time for each staking deposit.\n\nRegards,\n\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Saturday, July 20, 2019 2:45\nTo: Kenshiro []\nCc: Eric Voskuil; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning Kenshiro,\n\n> >>> I already told you that it is always possible to get around this: leverage by use of short options.\n> Short the coin to attack, then perform your attack by censorship.\n> Coin value will drop due to reduced utility of the coin, then you reap the rewards of the short option you prepared beforehand.\n> By this, you can steal the entire marketcap of the coin.\n>\n> >>>Then you still have the economic power (plus what you managed to steal), which you can then use to take over another proof-of-stake coin, regardless of whether it uses the same proof-of-stake algorithm or not.\n>\n> My trading level is very basic and I don't understand this attack\n\nA short option is an option to force another party to buy an asset at a set price (the contract price) on a future date.\nIn order to get that option, you first pay that party today, a fee called \"premium\" (usually a small fraction of the contract price).\n\nThe effect is that, at that future date, if the asset is ***lower*** in price than the contract price, you earn by buying it at the market price, then force the party to buy it at the contract price, earning the difference.\nThe other party, in order to mitigate its loss, then sells the asset back to the market at market price.\n(in practice, nobody goes through the rigmarole of buying, forcing the trade, then selling, instead the other party just outright gives you the difference in contract price vs market price).\n\nHowever, if at that future date, the asset is ***higher*** in price than the contract price, there is no rational reason for you to buy it at market price, then force the other party to buy at the contract price, as you would lose money.\nAs this is an option for you, not an obligation, you can simply ignore the option and not take it.\nHowever, do note that you did pay the premium when you bought the option, so you lose out on that.\n\nShort options are often used by producers of a good in order to hedge their losses, i.e. insurance against changes in market price.\nFor example, a farmer might purchase such an option, with a maturity date at the harvest season, for the price of wheat.\nThe farmer would buy an option whose contract price is the price at the threshold of profitability, i.e. if the price falls below the contract price the farmer would lose money relative to their investment.\nIf the price of wheat drops below the contract price, the farmer earns from the short option, reducing the impact of the low price.\nIf the price of wheat is above the contract price, the farmer still earns from sale of the wheat, and only loses on the (comparatively small) premium of the option.\n\nA short option can be leveraged by those with inside knowledge as an economic attack.\nFor example, if you are capable of disrupting a coin such that its value is very likely to drop, you can buy short options as leverage.\nSuppose you hold a large stake of coins and know you control a significant fraction, enough that a censorship attack by you will be so disruptive that the coin price will drop.\nYou take out a short contract with the contract price at the \"hopium\" level others have (say 10% higher), buying enough options that you can cover the current price of your owned stake, plus some more options.\nSuppose you buy, a number of options equal to twice your stake.\n\nThen you attack the coin, dropping its price by 90% instead of the expected 10% price increase, earning the difference from the short option, about equal to the price of the coin.\nSince you bought twice the number of options as your stake, you get about twice the value of your stake in earnings from the short option.\nYou have recouped the cost of your stake and would not care if it was burned, and now are holding twice the value of your original stake in a different asset, probably fiat.\nYou then move on and attack the next coin.\n\nThe only protection against this is to make sure that block generators cannot feasibly attack the coin, such as by proof-of-work.\nShort options are much too useful otherwise to the block generators, as it allows them to hedge against drops in market price, and keeps them operating rather than reducing the security of the coin, thus short options will inevitably arise.\n\n> >>> But your proposal of being non-linear on the size of the stake means that if you have 51% of the coins, if you put them in a single stake UTXO you potentially get 99.999% of the blocks, which is ***much worse***.\n>\n> Not at all, I forgot to tell you that in modern PoS protocols like PoS v3.0 staking deposits have to wait many blocks after creating a block to be able to create another block.\n>\n> With my additional rule every staker is incentivized to put their staking deposit in a single address to avoid a strong penalty in their staking weight, and having their coins together they can't avoid the wait time with the \"stake in many addresses\" trick \ud83d\ude42\n\n*facepalm*\n\nLet's suppose there are two big whales in your coin.\nEach of them owns 50% of the total staked value.\nLet's say \"wait many blocks\" parameter is 100 blocks.\n\nOne whale puts all his coin in a single UTXO.\nThe other has distributed his stake in 100,000 different UTXOs.\n\nThe honest single-UTXO whale gets a block, because his stake dominates over all others.\nThen he gets banned from signing blocks for 100 blocks.\nDuring this ban, the other whale gets every block, as his only competitor is banned.\nIn addition, banning one of its 100,000 UTXOs is not much reducing his effective stake-weight.\nSo the honest single-UTXO whale gets 1 block (and its rewards) while the one who distributed his coins to 100,000 different UTXOs gets 100 blocks.\n\nYou have just let someone who could *just barely* 51% attack without those rules, 99% attack *with* those rules.\n\nIf you had added neither of the two new rules \"non-linear stake weights\" and \"ban for many blocks\", you would have gotten both of them at 50% control only, which while concerning, is not as bad as a 99% attack.\n\nNow suppose the one with the 99% control performs a censorship attack.\nAfter a week (1008 blocks) the community rallies and hardforks, burning the UTXOs that performed censorship.\nHowever, only about 998 UTXOs of the censoring staker is known (from the 99% of blocks it generated in that period), which is less than 1% of the 100,000 UTXOs he actually owns, and thus still controls a significant stake even past the hardfork, letting it perform further censorship attacks.\n\nYou should stop adding even more rules at this point.\n\nAn experienced engineer will stop at this point, delete all his or her files related to the current design (or move them to some archive space, some engineers are compulsive archivists), then regenerate the design from principles up.\n\nA rule-of-thumb in any security design is that, when you add something to protect against some attack, you probably just added an attack vector that is the inverse of the attack you were protecting against.\nThus, adding more rules is rarely the optimal thing to do.\n\nYou added two rules, one fixing the original attack (splitting your stake) but inviting the opposite attack (merging your stake), then added another rule to fix the second attack (merging your stake), bringing back the original attack (splitting your stake), except worse.\nThis is the other rule-of-thumb in any design: adding more things usually just makes things worse.\n\n>\n> >>> We hope to see you back soon after having learned your lesson.\n>\n> Thx \ud83d\ude42\n\nYou are welcome.\n\n>\n> Just an additional question: do you have an estimation of the energy waste of PoW if Bitcoin price rises a lot, like one million dollars or more? Because if it's proportional to the price, it could be like 100 times the current energy waste.\n\nYes.\n\n0.\n\nThis is because we expect market forces to move miners towards efficiency, thus they will not waste energy, only spend exactly enough to maintain the security of the coin.\n\nWe already know that miners are setting up mines at locations where energy is being wasted (e.g. oil well gas flares, putting up solar panels instead of just letting sunshine pointlessly heat up their roofs, etc.), and channeling the wasted energy into productive activity.\nThis is the opposite of becoming more energy-wasteful.\nThus does the invisible hand of the free market abide.\n\n\n\nRegards,\nZmnSCPxj\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190720/cdc354ef/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-20T11:07:14",
                "message_text_only": "Good morning Kenshiro,\n\n\n>\n> >>>\u00a0For example, if you are capable of disrupting a coin such that its value is very likely to drop, you can buy short options as leverage.\n> Suppose you hold a large stake of coins and know you control a significant fraction, enough that a censorship attack by you will be so disruptive that the coin price will drop.\n> You take out a short contract with the contract price at the \"hopium\" level others have (say 10% higher), buying enough options that you can cover the current price of your owned stake, plus some more options.\n> Suppose you buy, a number of options equal to twice your stake.\n>\n> Thank you for the explanation, I understand it now. But what percent of BTC trades are short options? If everyone is doing short options, the attack is very dangerous as you say, but if only a small percent of trades is done in short options, then it's not a big problem.\u00a0\n\nIt is immaterial, because this is just *one* possible economic attack.\nFurther leverage can always be had as Bitcoin does not exist in isolation.\n\n>\n> And this type of attack could also be done in PoW by evil miners. It's only one step more, they have to purchase a lot of BTC before the attack, buy many short options and execute the attack. Purchasing 50% of BTC is a problem because of the price, but that's the same for PoW or PoS.\n\nMiners cannot feasibly take over 50% of energy sources in the world.\n\n>\n> >>>\u00a0Let's suppose there are two big whales in your coin.\n> Each of them owns 50% of the total staked value.\n> Let's say \"wait many blocks\" parameter is 100 blocks.\n>\n> >>>One whale puts all his coin in a single UTXO.\n> The other has distributed his stake in 100,000 different UTXOs.\n>\n> I think there is a misunderstanding here, you forgot to divide the 50% staking weight of the evil whale by 100.000.\n\nNo, you have a misunderstanding of your ***own*** system.\nYou forgot that you indicated that a staking UTXO is banned from adding a new block for \"wait many blocks\", as you indicated.\nThus it is immaterial that each tiny stake of the evil whale is tiny: only the tiny stakes of the evil whale are in play during the time that the singular big UTXO by the honest whale is banned.\nThus it has 100% of the stake during those 100 blocks.\nThe honest whale gets 1 block (with very high probability) and then the evil whale gets the rest of the blocks for 100 blocks.\n\n?Now again, consider that the situation indicates that there are in fact only two actual stakers, each of whom have 50% of the staked funds, thus there are no other stakers (even though the evil whale appears to be multiple separate stakers) because 50% + 50% = 100%.\nI did indicate \"each of them owns 50% of the total staked value\", did I not?\n\nThe rest of your counterargument ***completely forgets*** this, so I will ignore it.\nA whale composed of many tiny fishes is still a whale.\nIt is immaterial that there may exist many small stakers who individually can overpower a tiny stake of the evil whale: the evil whale will still dominate during those times that the honest whale is banned because of your additional rule that \"a staker who creates a block is banned from creating another block for many blocks\": the evil whale simply dominates from having many tiny stakes, each of which can be banned with little effect on the actual power of the evil whale over the coin.\n\n> >>>\u00a0We already know that miners are setting up mines at locations where energy is being wasted (e.g. oil well gas flares, putting up solar panels instead of just letting sunshine pointlessly heat up their roofs, etc.), and channeling the wasted energy into productive activity.\n>\n> I'm sure a big percent of mining will be done in this way, but if there is still dirty energy like nuclear energy or others is because we can't get all the energy we need from clean sources (and that's excluding bitcoin mining). So even being very optimistic about bitcoin mining, it will steal clean energy sources from other human needs which will make us keep using dirty energy. So PoW makes use dirty energy sources in a direct or indirect way.\n\nIt is immaterial: what matters is the economics.\nDirty energy is dirty because it causes damage to the economy by creating sickness and preventing people from surviving long lives and producing for the economy, destroys ecology and reduces biodiversity (and many products are derived from the variety of lifeforms available) and so on.\nThus, all energy uses will inevitably move towards cleaner energy sources as competition arises.\n\n>\n> >>>\u00a0Thus, adding more rules is rarely the optimal thing to do.\n>\n> Proof of Stake is more complex than PoW, so you need to add a few more rules. Of course the rules must be well designed and tested, but as I explained above there is no problem with the extra rule of giving a great increase in staking weight to coins together in a single UTXO, because there is wait time for each staking deposit.\n\nYou have demonstrated no such thing, merely demonstrated your own willful incompetence in designing protocols.\n\nI will no longer respond.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-20T13:00:51",
                "message_text_only": "Hi all,\n\n>>> Miners cannot feasibly take over 50% of energy sources in the world.\n\nAs I said in other e-mail, you don't need 50% of energy sources of the world, you only need to hack the biggest mining pools to execute a 51% attack.\n\n>>> Thus it is immaterial that each tiny stake of the evil whale is tiny: only the tiny stakes of the evil whale are in play during the time that the singular big UTXO by the honest whale is banned.\n\nSorry but you are wrong because there are always plenty of small stakers, and dividing your coins in 100.000 you suffer a strong penalty in your staking weight. Remember, the formula is this, or some improved version of it:\n\nutxoStakingWeight = numberOfCoins ^ 1000\n\n\nTo simplify the calculations, imagine there is a total supply like 200.000 coins (just a little more to include some small stakers), and you have 100001 coins splitted in 100001 addresses:\n\nstakingWeightPerAddress = 1 ^ 1000 = 1\nstakingWeightPerAddress * numberOfAddresses = 1 * 100001 = 100001   (this is the total staking weight of the evil whale)\n\nNow we have a little, honest staker, with only TWO coins in one staking address:\n\nstakingWeightPerAddress = 2 ^ 1000 = 1,0715\u00d710\u00b3\u2070\u00b9\n\nSo the evil whale, with 51% of the coins splitted one coin per address lose against the small stakers, even if they stake 2 coins each one.\n\nWith this rule, you don't have other choice that put your coins together, and wait the wait time after creating a block. The rest of the blocks are created by many other stakers, the wait time enforce that big stakers have to wait a number of blocks, which are created by the little stakers.\n\n>>> Now again, consider that the situation indicates that there are in fact only two actual stakers, each of whom have 50% of the staked funds, thus there are no other stakers\n\nThere is always plenty of little stakers. You only can have 2 stakers if the rest of the world is not interested in the coin.\n\n>>> I did indicate \"each of them owns 50% of the total staked value\", did I not?\n\nSure, but I didn't understood that as exact numbers, because if its so then only few people are interested in the coin, and then it's not a problem for the rest of the world.\n\nAgain, there is always plenty of little stakers.\n\n>>> You have demonstrated no such thing, merely demonstrated your own willful incompetence in designing protocols.\n\nI'm sorry but it's you who don't understand the protocol I'm proposing. Of course I could be wrong but I didn't saw any numbers that demonstrate that. Just do the math and forget extreme situations where there are only 2 stakers, because there is always plenty of little stakers, even if all the small stakers together have only 1% of coins or less.\n\nRegards,\n\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Saturday, July 20, 2019 13:07\nTo: Kenshiro []\nCc: Eric Voskuil; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning Kenshiro,\n\n\n>\n> >>> For example, if you are capable of disrupting a coin such that its value is very likely to drop, you can buy short options as leverage.\n> Suppose you hold a large stake of coins and know you control a significant fraction, enough that a censorship attack by you will be so disruptive that the coin price will drop.\n> You take out a short contract with the contract price at the \"hopium\" level others have (say 10% higher), buying enough options that you can cover the current price of your owned stake, plus some more options.\n> Suppose you buy, a number of options equal to twice your stake.\n>\n> Thank you for the explanation, I understand it now. But what percent of BTC trades are short options? If everyone is doing short options, the attack is very dangerous as you say, but if only a small percent of trades is done in short options, then it's not a big problem.\n\nIt is immaterial, because this is just *one* possible economic attack.\nFurther leverage can always be had as Bitcoin does not exist in isolation.\n\n>\n> And this type of attack could also be done in PoW by evil miners. It's only one step more, they have to purchase a lot of BTC before the attack, buy many short options and execute the attack. Purchasing 50% of BTC is a problem because of the price, but that's the same for PoW or PoS.\n\nMiners cannot feasibly take over 50% of energy sources in the world.\n\n>\n> >>> Let's suppose there are two big whales in your coin.\n> Each of them owns 50% of the total staked value.\n> Let's say \"wait many blocks\" parameter is 100 blocks.\n>\n> >>>One whale puts all his coin in a single UTXO.\n> The other has distributed his stake in 100,000 different UTXOs.\n>\n> I think there is a misunderstanding here, you forgot to divide the 50% staking weight of the evil whale by 100.000.\n\nNo, you have a misunderstanding of your ***own*** system.\nYou forgot that you indicated that a staking UTXO is banned from adding a new block for \"wait many blocks\", as you indicated.\nThus it is immaterial that each tiny stake of the evil whale is tiny: only the tiny stakes of the evil whale are in play during the time that the singular big UTXO by the honest whale is banned.\nThus it has 100% of the stake during those 100 blocks.\nThe honest whale gets 1 block (with very high probability) and then the evil whale gets the rest of the blocks for 100 blocks.\n\n?Now again, consider that the situation indicates that there are in fact only two actual stakers, each of whom have 50% of the staked funds, thus there are no other stakers (even though the evil whale appears to be multiple separate stakers) because 50% + 50% = 100%.\nI did indicate \"each of them owns 50% of the total staked value\", did I not?\n\nThe rest of your counterargument ***completely forgets*** this, so I will ignore it.\nA whale composed of many tiny fishes is still a whale.\nIt is immaterial that there may exist many small stakers who individually can overpower a tiny stake of the evil whale: the evil whale will still dominate during those times that the honest whale is banned because of your additional rule that \"a staker who creates a block is banned from creating another block for many blocks\": the evil whale simply dominates from having many tiny stakes, each of which can be banned with little effect on the actual power of the evil whale over the coin.\n\n> >>> We already know that miners are setting up mines at locations where energy is being wasted (e.g. oil well gas flares, putting up solar panels instead of just letting sunshine pointlessly heat up their roofs, etc.), and channeling the wasted energy into productive activity.\n>\n> I'm sure a big percent of mining will be done in this way, but if there is still dirty energy like nuclear energy or others is because we can't get all the energy we need from clean sources (and that's excluding bitcoin mining). So even being very optimistic about bitcoin mining, it will steal clean energy sources from other human needs which will make us keep using dirty energy. So PoW makes use dirty energy sources in a direct or indirect way.\n\nIt is immaterial: what matters is the economics.\nDirty energy is dirty because it causes damage to the economy by creating sickness and preventing people from surviving long lives and producing for the economy, destroys ecology and reduces biodiversity (and many products are derived from the variety of lifeforms available) and so on.\nThus, all energy uses will inevitably move towards cleaner energy sources as competition arises.\n\n>\n> >>> Thus, adding more rules is rarely the optimal thing to do.\n>\n> Proof of Stake is more complex than PoW, so you need to add a few more rules. Of course the rules must be well designed and tested, but as I explained above there is no problem with the extra rule of giving a great increase in staking weight to coins together in a single UTXO, because there is wait time for each staking deposit.\n\nYou have demonstrated no such thing, merely demonstrated your own willful incompetence in designing protocols.\n\nI will no longer respond.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190720/e3748e47/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-24T04:14:38",
                "message_text_only": "Good morning Kenshiro and list,\n\nI apologize for the unnecessarily toxic words I used in replies to you, Kenshiro.\nI also apologize to subscribers of the list for this behavior.\nSuch behavior should not be tolerated and should be called out.\n\nJust to be clear, I do not think your additions to the base proof-of-stake can fix the issues introduced by proof-of-stake.\nA general heuristic in designing anything is that additional mechanisms cannot improve efficiency.\n\nHowever, it seems I cannot argue the point without becoming rude or introducing irrelevant arguments.\nThus, I will no longer respond to this thread.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-24T09:30:46",
                "message_text_only": "Hi ZmnSCPxj,\n\nThank you for your apologies.\n\n>>> Just to be clear, I do not think your additions to the base proof-of-stake can fix the issues introduced by proof-of-stake.\n\nNo problem. After thinking about my experimental idea to use a formula to give more weight to coins together in a single address I think it wouldn't work as I expected.\n\nBut what I'm defending here is the standard PoS v3.0 which as far I know is something like a \"gold standard\" in PoS.\n\nThere are also more \"modern\" techniques not included in PoS v3.0 that could be added like evaluating blockchain density to detect possible attacks which could also be used to improve security:\n\ni.e.: as far I know, a 51% history rewrite attack can't be done in PoS if the attacker doesn't stop creating his 51% of blocks in the main chain to make it shorter than his private fork, and that can be detected:\n\nIf nodes detect a hard fork starting in block N (and N has a minimum depth like 10 blocks or whatever), and the main chain has a dangerous low block density between the tip of the blockchain and block N, instead of following the longest chain, the nodes could start some emergency protocol like ignoring the new fork.\n\nRegards,\n\n________________________________\nFrom: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nSent: Wednesday, July 24, 2019 6:14\nTo: Kenshiro [] <tensiam at hotmail.com>\nCc: Eric Voskuil <eric at voskuil.org>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Secure Proof Of Stake implementation on Bitcoin\n\nGood morning Kenshiro and list,\n\nI apologize for the unnecessarily toxic words I used in replies to you, Kenshiro.\nI also apologize to subscribers of the list for this behavior.\nSuch behavior should not be tolerated and should be called out.\n\nJust to be clear, I do not think your additions to the base proof-of-stake can fix the issues introduced by proof-of-stake.\nA general heuristic in designing anything is that additional mechanisms cannot improve efficiency.\n\nHowever, it seems I cannot argue the point without becoming rude or introducing irrelevant arguments.\nThus, I will no longer respond to this thread.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190724/15bd1a1b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Secure Proof Of Stake implementation on Bitcoin",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Eric Voskuil",
                "Kenshiro []",
                "Oscar Lafarga"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 131119
        }
    },
    {
        "title": "[bitcoin-dev] Discover and move your coins by yourself",
        "thread_messages": [
            {
                "author": "Aymeric Vitte",
                "date": "2019-07-12T18:35:00",
                "message_text_only": "Please see https://github.com/Ayms/bitcoin-transactions this is a merge\nof former bitcoin-transactions and bitcoin-wallets nodejs modules with\nadditional features to be implemented as described in the README\n\nIt is financed by NLnet via EU Horizon 2020 Next Generation Internet\nSearch and Discovery call\n\nSo the initial dev fees have been removed and the code is now open\nsource and provided in clear under a MIT license\n\nThe intent is to provide all the necessary tools for anybody to discover\nand manage their coins, as well as making transactions by themselves,\nwithout having to sync a full node or as an alternative to wallets when\npeople don't understand where their coins are (we saw quite a lot of\nconfusion for people not understanding at all how to find their coins\nand to what keys their addresses did relate in case of multisig, segwit\nand now bech32)\n\nIt's somewhere bitcoin-cli outside of bitcoin core more easy to use and\nnot restricted to its own wallet, available for any bitcoin based coins\n\nAt the end it will be a secure standalone offline js webapp inside\nbrowsers (like https://peersm.com/wallet but the app does not reflect\nthe current state of the nodejs repo)\n\nIt's not a remake of iancoleman's tool but of course some features\noverlap, as well as for other existing tools, we will also extend all of\nthis inside one tool with no limitations (for example some tools do not\naccept \"invalid\" bip39 seeds, or bip32 seeds, etc)\n\nComments/suggestions welcome\n\nPS: initially sent to bitcoin-discuss but the list seems to be dead\n\n-- \nMove your coins by yourself (browser version): https://peersm.com/wallet\nBitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions\nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            }
        ],
        "thread_summary": {
            "title": "Discover and move your coins by yourself",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Aymeric Vitte"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2206
        }
    },
    {
        "title": "[bitcoin-dev] BIP: Signet",
        "thread_messages": [
            {
                "author": "Karl-Johan Alm",
                "date": "2019-07-17T07:44:13",
                "message_text_only": "Hello,\n\nI have written a BIP describing the Signet network. Feedback requested!\n\nhttps://github.com/bitcoin/bips/pull/803\n\nPasted in its entirety below, with formatting issues left as is. See\nabove link for styled version.\n\n<pre>\nBIP: XXXX\nLayer: Applications\nTitle: Signet\nAuthor: Karl-Johan Alm <karljohan-alm at garage.co.jp>\nComments-Summary: No comments yet.\nComments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\nStatus: Draft\nType: Standards Track\nCreated: 2019-03-20\nLicense: CC0-1.0\n</pre>\n\n== Abstract ==\n\nA new type of test network where signatures are used in addition to\nproof of work for block progress, enabling much better coordination\nand robustness (be reliably unreliable), for persistent, longer-term\ntesting scenarios involving multiple independent parties.\n\n== Motivation ==\n\nTestnet is a great place to try out new things without risking real\nmoney, but it is notoriously unreliable. Huge block reorgs, long gaps\nin between blocks being mined or sudden bursts of blocks in rapid\nsuccession mean that realistic testing of software, especially\ninvolving multiple independent parties running software over an\nextended period of time, becomes infeasible in practice.\n\nA new type of test network would be more suitable for integration\ntesting by organizations such as exchanges, or testing of next\ngeneration Layer-2 protocols like Eltoo or sidechain pegs. The goal is\nnot to be perfectly reliable but rather to have a predictable amount\nof unreliability. You want a test network to behave like mainnet (i.e.\nno thousands of block reorgs) while also making it easier to trigger\nexpected but rare events like a 6-block reorg. Regtest is not suitable\nfor longer-term scenarios involving multiple independent parties\nbecause creating blocks costs nothing, so any party can completely\ncontrol the test network.\n\n\n== Specification ==\n\nA new type of network (\"signet\"), which takes an additional consensus\nparameter called the challenge (scriptPubKey). The challenge can be a\nsimple pubkey (P2PKH style), or a k-of-n multisig, or any other script\nyou would want.\n\nThe witness commitment of the coinbase transaction is extended to\ninclude a secondary commitment (the signature/solution):\n\n1-4 bytes - Push the following (x + 4) bytes\n4 bytes - Signet header (0xecc7daa2)\nx bytes - Solution (sigScript)\n\nAny push operations that do not start with the 4 byte signet header\nare ignored. Multiple push operations with the 4 byte signet header\nare ignored except for the first entry.\n\nAny signature operations contained within the challenge use\nSHA256d(modifiedBlockHash), i.e. the double-SHA256 digest of the\nfollowing data as the sighash:\n\n{|class=\"wikitable\" style=\"text-align: center;\"\n|-\n!Type\n!Size\n!Name\n|-\n|Int32||4||nVersion\n|-\n|Uint256||32||hashPrevBlock\n|-\n|Uint256||32||modifiedMerkleRoot\n|-\n|Uint32||4||nTime\n|-\n|Uint32||4||nBits\n|}\n\nThe <code>modifiedMerkleRoot</code> hash is obtained by generating the\nmerkle root of the block transactions, with the coinbase witness\ncommitment as is, without the signet extension. This means the merkle\nroot of the block is different from the merkle root in the signet\ncommitment, but in return, the block nonce value is the only component\nthat the signet signature does not commit to. When grinding proof of\nwork, the extended nonce cannot be used as it would invalidate the\nsignature. Instead, simply resigning the same (or an updated) block\nwill give a new search space.\n\nA block is considered fully validated if the above commitment is\nfound, and its solution is valid. This verification should be done\ndirectly before or after the witness commitment verification.\n\n== Compatibility ==\n\nThis specification is backwards compatible in the sense that existing\nsoftware can use Signet out of the box.\n\nSimply by adding the network parameters for signet (magic number,\netc), a client can connect to and use any signet network without\nfurther modifications. The block headers have valid proof of work, so\nclients can trivially check that blocks are \"probably\" valid.\n\nHowever, anyone can mine blocks that are accepted by the client for\nany given signet network. These blocks do not contain the required\nsignatures, however, so any fully validating node will promptly reject\nthem. As such, clients need to either validate the block signature\ninside the coinbase transaction, or connect to trusted peers.\n\nOther software need not add block signature validation code that they\nwill not use in production. This is adequate for non-production test\npurposes where the goal is to have a network behave as much like\nmainnet as possible.\n\n== Reference implementation ==\n\nWIP implementation at https://github.com/kallewoof/bitcoin/pull/4\n\n== Acknowledgements ==\n\nTODO\n\n== References ==\n\n# Original mailing list thread:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html\n# Bitcoin Wiki entry: https://en.bitcoin.it/wiki/Signet\n\n== Copyright ==\n\nThis document is licensed under the Creative Commons CC0 1.0 Universal license."
            }
        ],
        "thread_summary": {
            "title": "BIP: Signet",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Karl-Johan Alm"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5009
        }
    },
    {
        "title": "[bitcoin-dev] PubRef - Script OP Code For Public Data References",
        "thread_messages": [
            {
                "author": "Mike Brooks",
                "date": "2019-07-19T06:05:42",
                "message_text_only": "I noticed that this Merkle tree we are building is made more expensive by\nincluding repetitive data.  So, this proposal draws inspiration from LZ78,\nan algorithm which constructs a dictionary of repetitive strings which are\nthen referred to by their index. What if the blockchain already built a\ndictionary for us, and now we just need to index it?\n\n---\n\nAbstract\n\nThis BIP describes how a new OP code can be used to construct smaller, more\ncompact transactions.  With a public reference (PubRef), a newly created\ntransaction can reuse elements of a previously confirmed transaction by\nrepresenting this information with a smaller numeric offset or \u201cpointer\u201d.\n\nMotivation\n\nGiving scripts the ability to refer to data on the blockchain will reduce\ntransaction sizes because key material does not have to be repeated in\nevery Script. Users of the network are rewarded with smaller transaction\nsizes, and miners are able to fit more transactions into new blocks.\nPointers are a common feature and it felt like this was missing from\nBitcoin Script.\n\nSpecification\n\nThis BIP defines a new Script opcode that can be introduced with BIP-0141\n(Segregated Witness (Consensus layer)). This new opcode is as follows:\n\nWord\n\nOpcode\n\nHex\n\nInput\n\nOutput\n\nDescription\n\nOP_PUBREF4\n\nTBD\n\nTBD\n\nuint4\n\ndata\n\nThe next four bytes is an integer reference to a previously defined\nPUSHDATA\n\nLet there be an ordered list of all invocations of PUSHDATA (OP codes;\n0x4c,0x4d,0x4e) across all scripts starting from the genesis block:\n[t0,t2,...,tn].   With this list a newly created script can refer to a\nspecific PUSHDATA that was used in any previously confirmed block. The\nvalues referenced by this list are immutable and uniform to all observers.\n\nLets assume there is some transaction containing a ScriptSig and\noutputScript pair, here is what an input and an output script would look\nlike:\n\nScriptSig\n\nPUSHDATA(72)[30450221008f906b9fe728cb17c81deccd6704f664ed1ac920223bb2eca918f066269c703302203b1c496fd4c3fa5071262b98447fbca5e3ed7a52efe3da26aa58f738bd342d3101]\nPUSHDATA\n(65)[04bca69c59dc7a6d8ef4d3043bdcb626e9e29837b9beb143168938ae8165848bfc788d6ff4cdf1ef843e6a9ccda988b323d12a367dd758261dd27a63f18f56ce77]\n\noutputScript\n\nDUP HASH160 PUSHDATA(20)[dd6cce9f255a8cc17bda8ba0373df8e861cb866e]\nEQUALVERIFY CHECKSIG\n\nThe ScriptSig of an input typically contains the full public key which is\n~65 bytes. Outputs will typically contain a hash of the public key which is\n20 bytes.  Using PubRef, the public-key material shown above no longer need\nto be repeated, instead the needed values can be resolved from previously\nconfirmed transaction.   The signature of the input must still be unique,\nhowever, the public key can be replaced with a call to PUBREF, as shown\nbelow:\n\nScriptSig\n\nPUSHDATA(72)[30450221008f906b9fe728cb17c81deccd6704f664ed1ac920223bb2eca918f066269c703302203b1c496fd4c3fa5071262b98447fbca5e3ed7a52efe3da26aa58f738bd342d3101]\nPUBREF[43123]\n\noutputScript\n\nDUP HASH160 PUBREF[12123] EQUALVERIFY CHECKSIG\n\nThe above call to PUBREF removed the need to include the full public-key,\nor hash of the public key in a given transaction.  This is only possible\nbecause these values where used previously in a confirmed block. If for\nexample a user was sending Bitcoins to a newly formed address, then no\nPUBREF can be created in this case - and a outputScript using PUSHDATA\nwould need to be used at least once.  If a newly created wallet has never\nbeen used on the Bitcoin network, then the full public-key will need to be\nincluded in the ScriptSig. Once these transactions have been confirmed,\nthen these values will be indexed and any future script can refer to these\npublic-key values with a PUBREF operation.\n\nPubRef is not susceptible to malleability attacks because the blockchain is\nimmutable. The PUSHDATA operation can store at most 520 bytes on the stack,\ntherefore a single PUBREF operation can never obtain more than 520 bytes.\n\nIn order for a client to make use of the PUBREF operations they\u2019ll need\naccess to a database that look up public-keys and resolve their PUBREF\nindex.  A value can be resolved to an index with a hash-table lookup in\nO(1) constant time. Additionally, all instances of PUSHDATA can be indexed\nas an ordered list, resolution of a PUBREF index to the intended value\nwould be an O(1) array lookup.  Although the data needed to build and\nresolve public references is already included with every full node,\nadditional computational effort is needed to build and maintain these\nindices - a tradeoff which provides smaller transaction sizes and relieving\nthe need to store repetitive data on the blockchain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190718/c1048a2e/attachment.html>"
            },
            {
                "author": "William Casarin",
                "date": "2019-07-19T15:17:22",
                "message_text_only": "Hello Mike,\n\nMike Brooks via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n\n> Motivation\n>\n> Giving scripts the ability to refer to data on the blockchain will reduce\n> transaction sizes because key material does not have to be repeated in\n> every Script. Users of the network are rewarded with smaller transaction\n> sizes, and miners are able to fit more transactions into new blocks.\n> Pointers are a common feature and it felt like this was missing from\n> Bitcoin Script.\n\nThis would incentivize address re-use which would be bad for\nfungibility. It appears you're trying to optimize a use case which is\nalready discouraged :(\n\nCheers,\nWill\n\n-- \nhttps://jb55.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2019-07-19T19:17:38",
                "message_text_only": "On Fri, Jul 19, 2019, 12:13 William Casarin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Hello Mike,\n>\n> Mike Brooks via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> writes:\n>\n> > Motivation\n> >\n> > Giving scripts the ability to refer to data on the blockchain will reduce\n> > transaction sizes because key material does not have to be repeated in\n> > every Script. Users of the network are rewarded with smaller transaction\n> > sizes, and miners are able to fit more transactions into new blocks.\n> > Pointers are a common feature and it felt like this was missing from\n> > Bitcoin Script.\n>\n> This would incentivize address re-use which would be bad for\n> fungibility. It appears you're trying to optimize a use case which is\n> already discouraged :(\n>\n\nFurthermore, right now block validation does not require access to the\nwhole historical chain (only to the set of unspent outputs), so a change\nlike this would massively increase storage requirements for validation.\n\nCheers,\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190719/a14353cf/attachment-0001.html>"
            },
            {
                "author": "Yuval Kogman",
                "date": "2019-07-19T17:45:17",
                "message_text_only": "Hi,\n\nOn Fri, 19 Jul 2019 at 14:00, Mike Brooks via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nGiving scripts the ability to refer to data on the blockchain will reduce\n> transaction sizes because key material does not have to be repeated in\n> every Script.\n>\n\nGiven that address reuse is discouraged, and as far as I know is\npredominantly utilized for customer deposit addresses by exchanges, many of\nwhich have not invested resources in batching withdrawals or consolidating\nsmall UTXOs, I am skeptical that such a feature would actually be utilized\nby users for whom a potential use exists, especially as mining fees are\nusually pushed onto customers anyway.\n\nUnless extensively utilized such that costs outweigh benefits, this change\nwould impose an externality on validating nodes:\n\nWith this list a newly created script can refer to a specific PUSHDATA that\n> was used in any previously confirmed block.\n>\n\nThis would make pruning impossible, and also relaxes the bounds on\nvalidation costs since it would allow random reads on all historical data\nas opposed to just the UTXO set.\n\nAlthough it would do nothing for block capacity, perhaps this redundancy\nmight be better addressed as opt-in functionality in the p2p layer? It\nmight help with IBD, though at least in my experience peer latency (as\nopposed to throughput) is the limiting factor, and as far as I can tell\nthis would increase it. Somewhat relatedly, transaction IDs are another\ntype of pointer which might benefit from being encoded as a (block height,\noffset). However, here too it seems to me like the complexity is\nsubstantial, potentially introducing new DoS vectors, while saving several\nbytes per input at most.\n\nRegards,\nYuval\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190719/9cd05561/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-19T18:07:56",
                "message_text_only": "Good morning Mike,\n\n> PubRef is not susceptible to malleability attacks because the blockchain is immutable.\n\nThis is not quite accurate.\nWhile very old blocks are indeed immutable-in-practice, chain tips are not, and are often replaced.\nAt least specify that such data can only be referred to if buried under 100 blocks.\n\n--\n\nThere are a number of other issues:\n\n* It strongly encourages pubkey reuse, reducing privacy.\n* There is a design-decision wherein a SCRIPT can only access data in the transaction that triggers its execution.\n  In particular, it cannot access data in the block the transaction is in, or in past blocks.\n  For example, `OP_CHECKLOCKTIMEVERIFY` does not check the blockheight of the block that the transaction is confirmed in, but instead checks only `nLockTime`, a field in the transaction.\n  * This lets us run SCRIPT in isolation on a transaction, exactly one time, when the transaction is about to be put into our mempool.\n    When a new block arrives, transactions in our mempool that are in the block do not need to have their SCRIPTs re-executed or re-validated.\n\n> In order for a client to make use of the PUBREF operations they\u2019ll need access to a database that look up public-keys and resolve their PUBREF index.\u00a0 A value can be resolved to an index with a hash-table lookup in O(1) constant time. Additionally, all instances of PUSHDATA can be indexed as an ordered list, resolution of a PUBREF index to the intended value would be an O(1) array lookup.\u00a0 Although the data needed to build and resolve public references is already included with every full node, additional computational effort is needed to build and maintain these indices - a tradeoff which provides smaller transaction sizes and relieving the need to store repetitive data on the blockchain.\n\nThis is not only necessary at the creator of the transaction --- it is also necessary at every validator.\n\nIn particular, consider existing pruning nodes, which cannot refer to previous block data.\n\nWe would need to have another new database containing every `PUSHDATA` in existence.\nAnd existing pruning nodes would need to restart from genesis, as this database would not exist yet.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Mike Brooks",
                "date": "2019-07-27T20:03:39",
                "message_text_only": "Hey ZmnSCPxj,\n\nAs to your first point.  I wasn't aware there was so much volatility at the\ntip, also 100 blocks is quite the difference!  I agree no one could\nreferences a transaction in a newly formed blocks, but I'm curious how this\nnumber was chosen. Do you have any documentation or code that you can share\nrelated to how re-orgs are handled? Do we have a kind of 'consensus\ncheckpoint' when a re-org is no longer possible? This is a very interesting\ntopic.\n\n > * It strongly encourages pubkey reuse, reducing privacy.\nPrivacy-aware users are free to have single-use p2sh transactions, and they\nare free to use the same SCRIPT opcodes we have now.  Adding an extra\nopcode helps with the utility of SCRIPT by compressing the smallest SegWit\ntransactions by a further 40% from 233 bytes to 148 bytes.  Cost savings is\na great utility - and it need not undermine anyones privacy. The resulting\np2sh SCRIPT could end up using public key material that could be compressed\nwith a PubRef - everyone wins.\n\n > * There is a design-decision wherein a SCRIPT can only access data in\nthe transaction that triggers its execution.\nIn order for a compression algorithm like LZ78 to be written in a\nstack-based language like SCRIPT, there needs to be pointer arithmetic to\nrefer back to the dictionary or a larger application state.  If Bitcoin's\nentire stack was made available to the SCRIPT language as an application\nstate, then LZ78-like compression could be accomplished using PubRef. If a\nScript can reuse a PUSHDATA, then transactions will be less repetitious...\nand this isn't free.  There is a cost in supporting this opcode.\n\nGiving the SCRIPT language access to more data opens the door for\ninteresting algorithms, not just LZ78.  This is interesting to discuss how\nthis application state could be brought to the language.  It strikes me\nthat your concerns(ZmnSCPxj), as well as the topic of pruning brought up by\nothers (including Pieter Wuille) could be fixed by the creation of a\nside-chain of indexes.  A validator would not need a hash table which is\nonly needed for O(1) PUBREF creation, these nodes need not be burdened with\nthis added index.  A validator only needs an array of PUSHDATA elements and\ncan then validate any given SCRIPT at O(1).\n\nJust a thought.\n\nBest Regards,\nMike\n\n\nOn Fri, Jul 19, 2019 at 11:08 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Mike,\n>\n> > PubRef is not susceptible to malleability attacks because the blockchain\n> is immutable.\n>\n> This is not quite accurate.\n> While very old blocks are indeed immutable-in-practice, chain tips are\n> not, and are often replaced.\n> At least specify that such data can only be referred to if buried under\n> 100 blocks.\n>\n> --\n>\n> There are a number of other issues:\n>\n> * It strongly encourages pubkey reuse, reducing privacy.\n> * There is a design-decision wherein a SCRIPT can only access data in the\n> transaction that triggers its execution.\n>   In particular, it cannot access data in the block the transaction is in,\n> or in past blocks.\n>   For example, `OP_CHECKLOCKTIMEVERIFY` does not check the blockheight of\n> the block that the transaction is confirmed in, but instead checks only\n> `nLockTime`, a field in the transaction.\n>   * This lets us run SCRIPT in isolation on a transaction, exactly one\n> time, when the transaction is about to be put into our mempool.\n>     When a new block arrives, transactions in our mempool that are in the\n> block do not need to have their SCRIPTs re-executed or re-validated.\n>\n> > In order for a client to make use of the PUBREF operations they\u2019ll need\n> access to a database that look up public-keys and resolve their PUBREF\n> index.  A value can be resolved to an index with a hash-table lookup in\n> O(1) constant time. Additionally, all instances of PUSHDATA can be indexed\n> as an ordered list, resolution of a PUBREF index to the intended value\n> would be an O(1) array lookup.  Although the data needed to build and\n> resolve public references is already included with every full node,\n> additional computational effort is needed to build and maintain these\n> indices - a tradeoff which provides smaller transaction sizes and relieving\n> the need to store repetitive data on the blockchain.\n>\n> This is not only necessary at the creator of the transaction --- it is\n> also necessary at every validator.\n>\n> In particular, consider existing pruning nodes, which cannot refer to\n> previous block data.\n>\n> We would need to have another new database containing every `PUSHDATA` in\n> existence.\n> And existing pruning nodes would need to restart from genesis, as this\n> database would not exist yet.\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190727/33fd48e0/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-29T01:46:40",
                "message_text_only": "Good morning Mike,\n\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Sunday, July 28, 2019 4:03 AM, Mike Brooks <m at ib.tc> wrote:\n\n> Hey ZmnSCPxj,\n>\n> As to your first point.\u00a0 I wasn't aware there was so much volatility at the tip, also 100 blocks is quite the difference!\u00a0 I agree no one could references a transaction in a newly formed blocks, but I'm curious how this number was chosen. Do you have any documentation or code that you can share related to how re-orgs are handled? Do we have a kind of 'consensus checkpoint' when a re-org is no longer possible? This is a very interesting topic.\n>\n\nMiner coinbases need 100 blocks for maturity, which is the basis of my suggestion to use 100 blocks.\nIt might be too high, but I doubt there will be good reason to be less than 100.\n\nThere is a potential for a targeted attack where a large payout going to a `scriptPubKey` that uses `OP_PUBREF` on a recently-confirmed transaction finds that recently-confirmed transaction is replaced with one that pays to a different public key, via a history-rewrite attack.\nSuch an attack is doable by miners, and if we consider that we accept 100 blocks for miner coinbase maturity as \"acceptably low risk\" against miner shenanigans, then we might consider that 100 blocks might be acceptable for this also.\nWhether 100 is too high or not largely depends on your risk appetite.\n\n>\u00a0 A validator only needs an array of PUSHDATA elements and can then validate any given SCRIPT at O(1).\u00a0\u00a0\n\nData derived from > 220Gb of perpetually-growing blockchain is hardly, to my mind, \"only needs an array\".\nSuch an array would not fit in memory for many devices that today are practical for running fullnodes.\nIt is keeping that array and indexing it which is the problem, i.e. the devil in the details.\n\nReiterating also, current pruned nodes did not retain that data and would be forced to re-download the entire blockchain.\nUnless you propose that we can refer only to `OP_PUSHDATA` after activation of `OP_PUSHREF`.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Mike Brooks",
                "date": "2019-07-29T02:19:55",
                "message_text_only": "ZmnSCPxj,\n\n I think that this implication affects other applications built on the\nblockchain, not just the PubRef proposal:\n\n > There is a potential for a targeted attack where a large payout going to\na `scriptPubKey` that uses `OP_PUBREF` on a recently-confirmed transaction\nfinds that recently-confirmed transaction is replaced with one that pays to\na different public key, via a history-rewrite attack.\n > Such an attack is doable by miners, and if we consider that we accept\n100 blocks for miner coinbase maturity as \"acceptably low risk\" against\nminer shenanigans, then we might consider that 100 blocks might be\nacceptable for this also.\n > Whether 100 is too high or not largely depends on your risk appetite.\n\nI agree 100% this attack is unexpected and very interesting.  However, I\nfind the arbitrary '100' to be unsatisfying - I'll have to do some more\ndigging. It would be interesting to trigger this on the testnet to see what\nhappens.  Do you know if anyone has pushed these limits?  I am so taken by\nthis attack I might attempt it.\n\n > Data derived from > 220Gb of perpetually-growing blockchain is hardly,\nto my mind, \"only needs an array\".\n\nThere are other open source projects that have to deal with larger data\nsets and have accounted for the real-world limits on computability. Apache\nHTTPD's Bucket-Brigade comes to mind, which has been well tested and can\naccount for limited RAM when accessing linear data structures. For a more\ngeneral purpose utility leveldb (bsd-license) provides random access to\narbitrary data collections.  Pruning can also be a real asset for PubRef.\nIf all transactions for a wallet have been pruned, then there is no need to\nindex this PubRef - a validator can safely skip over it.\n\nBest Regards,\nMike\n\nOn Sun, Jul 28, 2019 at 6:46 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Mike,\n>\n>\n> Sent with ProtonMail Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Sunday, July 28, 2019 4:03 AM, Mike Brooks <m at ib.tc> wrote:\n>\n> > Hey ZmnSCPxj,\n> >\n> > As to your first point.  I wasn't aware there was so much volatility at\n> the tip, also 100 blocks is quite the difference!  I agree no one could\n> references a transaction in a newly formed blocks, but I'm curious how this\n> number was chosen. Do you have any documentation or code that you can share\n> related to how re-orgs are handled? Do we have a kind of 'consensus\n> checkpoint' when a re-org is no longer possible? This is a very interesting\n> topic.\n> >\n>\n> Miner coinbases need 100 blocks for maturity, which is the basis of my\n> suggestion to use 100 blocks.\n> It might be too high, but I doubt there will be good reason to be less\n> than 100.\n>\n> There is a potential for a targeted attack where a large payout going to a\n> `scriptPubKey` that uses `OP_PUBREF` on a recently-confirmed transaction\n> finds that recently-confirmed transaction is replaced with one that pays to\n> a different public key, via a history-rewrite attack.\n> Such an attack is doable by miners, and if we consider that we accept 100\n> blocks for miner coinbase maturity as \"acceptably low risk\" against miner\n> shenanigans, then we might consider that 100 blocks might be acceptable for\n> this also.\n> Whether 100 is too high or not largely depends on your risk appetite.\n>\n> >  A validator only needs an array of PUSHDATA elements and can then\n> validate any given SCRIPT at O(1).\n>\n> Data derived from > 220Gb of perpetually-growing blockchain is hardly, to\n> my mind, \"only needs an array\".\n> Such an array would not fit in memory for many devices that today are\n> practical for running fullnodes.\n> It is keeping that array and indexing it which is the problem, i.e. the\n> devil in the details.\n>\n> Reiterating also, current pruned nodes did not retain that data and would\n> be forced to re-download the entire blockchain.\n> Unless you propose that we can refer only to `OP_PUSHDATA` after\n> activation of `OP_PUSHREF`.\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190728/31bc2659/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-29T02:49:04",
                "message_text_only": "Good morning Mike,\n\n> \u00a0I think that this implication affects other applications built on the blockchain, not just the PubRef proposal:\n>\n\nI believe not?\nCurrent applications use txids to refer to previous transactions, so even a short-ranged history rewrite will mostly not affect them --- they can just rebroadcast the transactions they are spending and get those reconfirmed again.\nThere is admittedly a risk of double-spending, but each individual application can just spend deeply-confirmed transactions, and tune what it considers \"deeply-confirmed\" depending on how large the value being spent is.\nThe point is that history rewrites are costly, but if the value being put in a `scriptPubKey` that uses `OP_PUBREF` is large enough, it may justify the cost of history rewrites --- but if the value is small, the individual application (which refers to transactions by their txid anyway) can generally assume miners will not bother to history-rewrite.\n\nSince `OP_PUBREF` would be a consensus rule, we need to select a \"deeply-confirmed\" point that is deep enough for *all* cases, unlike applications **on top of the blockchain** which can tune their rule of \"deeply-confirmed\" based on value.\nThus my suggestion to use 100, which we consider \"deep enough\" to risk allowing miners to sell their coins.\n\nLightning uses a \"short channel ID\" which is basically an index of block number + index of transaction + index of output to refer to channels.\nThis is not a problem, however, even in case of short-ranged history rewrites.\nThe short channel ID is only used for public routing.\nBetween the channel counterparties, no security is based on short channel ID being stable; it just loses you potential routing fees from the channel (and can be fixed by increasing your \"deeply-confirmed\" enough level before you announce the channel for public routing).\n\n> \u00a0> There is a potential for a targeted attack where a large payout going to a `scriptPubKey` that uses `OP_PUBREF` on a recently-confirmed transaction finds that recently-confirmed transaction is replaced with one that pays to a different public key, via a history-rewrite attack.\n> \u00a0> Such an attack is doable by miners, and if we consider that we accept 100 blocks for miner coinbase maturity as \"acceptably low risk\" against miner shenanigans, then we might consider that 100 blocks might be acceptable for this also.\n> \u00a0> Whether 100 is too high or not largely depends on your risk appetite.\n>\n> I agree 100% this attack is unexpected and very interesting.\n\nIt is precisely because of this possibility that we tend to avoid making SCRIPT validity dependent on anything that is not in the transaction.\nWe would have to re-evaluate the SCRIPT every time there is a chain tip reorganization (increasing validation CPU load), unless we do something like \"only allow `OP_PUBREF` to data that is more than 100 blocks confirmed\".\n\n>\u00a0 However, I find the arbitrary '100' to be unsatisfying - I'll have to do some more digging. It would be interesting to trigger this on the testnet to see what happens.\u00a0 Do you know if anyone has pushed these limits?\u00a0 I am so taken by this attack I might attempt it.\n>\n> \u00a0> Data derived from > 220Gb of perpetually-growing blockchain is hardly, to my mind, \"only needs an array\".\n>\n> There are other open source projects that have to deal with larger data sets and have accounted for the real-world limits on computability. Apache HTTPD's Bucket-Brigade comes to mind, which has been well tested and can account for limited RAM when accessing linear data structures. For a more general purpose utility leveldb (bsd-license) provides random access to arbitrary data collections.\n\nWhich is the point: we need to use something, the details need to be considered during implementation, implementation details may leak in the effective spec (e.g. DER-encoding), etc.\n\n>\u00a0 Pruning can also be a real asset for PubRef.  If all transactions for a wallet have been pruned, then there is no need to index this PubRef - a validator can safely skip over it.\n\nWhat?\nThe problem with transaction being pruned is that the data in them might now be used in a *future* `OP_PUBREF`.\n\nFurther, pruned nodes are still full validators --- transactions may be pruned, but the pruned node will ***still*** validate any `OP_PUBREF` it uses, because it is still a full validator, it just does not archive old blocks in local storage.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Mike Brooks",
                "date": "2019-07-29T03:07:01",
                "message_text_only": "ZmnSCPxj,\n\n> Lightning uses a \"short channel ID\" which is basically an index of block\nnumber + index of transaction + index of output to refer to channels.\n\nOh wow, this is very similar to the PUBREF proposal. In fact the OP_PUBREF4\noperation could be modified to take the tuple: (block number, index of\ntransaction, index of PUSHDATA) and it would be functionally equivalent.\nIt looks like the construction of the short channel ID was chosen for the\nperformance needed to resolve the lookup.\n\n  > The problem with transaction being pruned is that the data in them\nmight now be used in a *future* `OP_PUBREF`.\n\nI can see how pruning is needed for scalability, and pruning can be made\ncompatible with a reference to a transaction. If a transaction is pruned,\nthen the key material used in a prune'ed block's PUSHDATA operations are of\nno value.  A user of the network shouldn't need to make this kind of\nPUBREF, and if a user did want to bring a wallet back from the dead - then\nthe utility of PUBREF wouldn't be available to them.\n\nBest Regards,\nMike\n\n\nOn Sun, Jul 28, 2019 at 7:49 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Mike,\n>\n> >  I think that this implication affects other applications built on the\n> blockchain, not just the PubRef proposal:\n> >\n>\n> I believe not?\n> Current applications use txids to refer to previous transactions, so even\n> a short-ranged history rewrite will mostly not affect them --- they can\n> just rebroadcast the transactions they are spending and get those\n> reconfirmed again.\n> There is admittedly a risk of double-spending, but each individual\n> application can just spend deeply-confirmed transactions, and tune what it\n> considers \"deeply-confirmed\" depending on how large the value being spent\n> is.\n> The point is that history rewrites are costly, but if the value being put\n> in a `scriptPubKey` that uses `OP_PUBREF` is large enough, it may justify\n> the cost of history rewrites --- but if the value is small, the individual\n> application (which refers to transactions by their txid anyway) can\n> generally assume miners will not bother to history-rewrite.\n>\n> Since `OP_PUBREF` would be a consensus rule, we need to select a\n> \"deeply-confirmed\" point that is deep enough for *all* cases, unlike\n> applications **on top of the blockchain** which can tune their rule of\n> \"deeply-confirmed\" based on value.\n> Thus my suggestion to use 100, which we consider \"deep enough\" to risk\n> allowing miners to sell their coins.\n>\n> Lightning uses a \"short channel ID\" which is basically an index of block\n> number + index of transaction + index of output to refer to channels.\n> This is not a problem, however, even in case of short-ranged history\n> rewrites.\n> The short channel ID is only used for public routing.\n> Between the channel counterparties, no security is based on short channel\n> ID being stable; it just loses you potential routing fees from the channel\n> (and can be fixed by increasing your \"deeply-confirmed\" enough level before\n> you announce the channel for public routing).\n>\n> >  > There is a potential for a targeted attack where a large payout going\n> to a `scriptPubKey` that uses `OP_PUBREF` on a recently-confirmed\n> transaction finds that recently-confirmed transaction is replaced with one\n> that pays to a different public key, via a history-rewrite attack.\n> >  > Such an attack is doable by miners, and if we consider that we accept\n> 100 blocks for miner coinbase maturity as \"acceptably low risk\" against\n> miner shenanigans, then we might consider that 100 blocks might be\n> acceptable for this also.\n> >  > Whether 100 is too high or not largely depends on your risk appetite.\n> >\n> > I agree 100% this attack is unexpected and very interesting.\n>\n> It is precisely because of this possibility that we tend to avoid making\n> SCRIPT validity dependent on anything that is not in the transaction.\n> We would have to re-evaluate the SCRIPT every time there is a chain tip\n> reorganization (increasing validation CPU load), unless we do something\n> like \"only allow `OP_PUBREF` to data that is more than 100 blocks\n> confirmed\".\n>\n> >  However, I find the arbitrary '100' to be unsatisfying - I'll have to\n> do some more digging. It would be interesting to trigger this on the\n> testnet to see what happens.  Do you know if anyone has pushed these\n> limits?  I am so taken by this attack I might attempt it.\n> >\n> >  > Data derived from > 220Gb of perpetually-growing blockchain is\n> hardly, to my mind, \"only needs an array\".\n> >\n> > There are other open source projects that have to deal with larger data\n> sets and have accounted for the real-world limits on computability. Apache\n> HTTPD's Bucket-Brigade comes to mind, which has been well tested and can\n> account for limited RAM when accessing linear data structures. For a more\n> general purpose utility leveldb (bsd-license) provides random access to\n> arbitrary data collections.\n>\n> Which is the point: we need to use something, the details need to be\n> considered during implementation, implementation details may leak in the\n> effective spec (e.g. DER-encoding), etc.\n>\n> >  Pruning can also be a real asset for PubRef.  If all transactions for a\n> wallet have been pruned, then there is no need to index this PubRef - a\n> validator can safely skip over it.\n>\n> What?\n> The problem with transaction being pruned is that the data in them might\n> now be used in a *future* `OP_PUBREF`.\n>\n> Further, pruned nodes are still full validators --- transactions may be\n> pruned, but the pruned node will ***still*** validate any `OP_PUBREF` it\n> uses, because it is still a full validator, it just does not archive old\n> blocks in local storage.\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190728/5cd17693/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2019-07-29T03:39:15",
                "message_text_only": "Good morning Mike,\n\n> \u00a0 > The problem with transaction being pruned is that the data in them might now be used in a *future* `OP_PUBREF`.\n>\n> I can see how pruning is needed for scalability, and pruning\u00a0can be made compatible with a reference to a transaction. If a transaction is pruned, then the key material used in a prune'ed block's PUSHDATA operations are of no value.\u00a0 A user of the network shouldn't need to make this kind of PUBREF, and if a user did want to bring a wallet back from the dead - then the utility of PUBREF wouldn't be available to them.\n\nI believe you misunderstand the point completely.\n\nCurrently Bitcoin Core has a mode, called pruning, where:\n\n1.  It validates ***all*** transactions.\n2.  It throws away the transaction data of a block ***after*** validation.\n3.  It keeps only the UTXO set of ***all*** addresses, not just a specific wallet.\n\nGiven the above, if a transaction block 1000 `OP_PUBREF`s to a `OP_PUSHDATA` in block 100, how does the pruned validator get access to this data (Which was pruned after the pruned validator handled block 100)?\n\nNote that pruned nodes ***are*** fullnodes and validate all transactions, not just those that involve their wallet.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Yuval Kogman",
                "date": "2019-07-19T22:48:43",
                "message_text_only": "Hi,\n\nOn Fri, 19 Jul 2019 at 17:49, Mike Brooks <m at ib.tc> wrote:\n\n> Users will adopt whatever the client accepts - this feature would be\n> transparent.\n>\n\nMy skepticism was based in an assumption on my part that most such data is\nproduced by actors with a track record of neglecting transaction\nefficiency. I'd be happy to be proven wrong, but considering say usage\nrates of native witness outputs, or the fraction of transactions with more\nthan 2 outputs so far I see little evidence in support of widespread\nadoption of cost saving measures. Assuming this is intended as a new script\nversion, all fully validating nodes need to commit to keeping all data\nindefinitely before they can enforce the rules that make transactions\nbenefiting from this opcode safe to broadcast.\n\nThat said, if successful, the main concern is still that of address reuse -\ncurrently there is no incentive in the protocol to do that, and with BIP32\nwallets fewer reasons to do it as well, but this proposal introduces such\nan incentive for users which would otherwise generate new addresses\n(disregarding the ones that already reuse addresses anyway), and this is\nproblematic for privacy and fungibility.\n\nSince address reuse has privacy concerns, I think it's important to draw a\ndistinction between clients accepting and producing such transactions, if\nthe latter were done transparently that would be very concerning IMO, and\neven the former would not be transparent for users who run currently\npruning nodes.\n\nI'm not sure how an O(1) time complexity leads to DoS, that seems like a\n> very creative jump.\n>\n\nFor what it's worth, that was in reference to hypothetical deduplication\nonly at the p2p layer, similar to compact blocks, but on further reflection\nI'd like to retract that, as since both scenarios which I had in mind seem\neasily mitigated.\n\n  Based on this response, it makes me want to calculate the savings, what\n> if it was a staggering reduction in the tree size?\n>\n\nAssuming past address reuse rates are predictive this only places an upper\nbound on the potential size savings, so personally I would not find that\nvery compelling. Even if the realized size savings would be substantial,\nI'm not convinced the benefits outweigh the downsides (increased validation\ncosts, monotonically growing unprunable data, and direct incentive for\naddress reuse), especially when compared to other methods/proposals that\ncan reduce on chain footprint generally improve privacy while reducing\nvalidation costs for others (e.g. batching, lightning, MAST for\nsufficiently large scripts, Schnorr signatures (musig, adaptor signatures),\n{tap,graft}root, ).\n\nRegards,\nYuval\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190719/f22e2c63/attachment.html>"
            },
            {
                "author": "Mike Brooks",
                "date": "2019-07-24T19:49:05",
                "message_text_only": "Fungibility is a good question for inductive reasoning.  After all, what is\na claim without some rigger?\n\nThere exists some set of wallets 'w' which contain a balance of satoshi too\nsmall to recover because it doesn't meet the minimum transaction fee\nrequired to confirm the transaction.  These wallets are un-spendable by\ntheir very nature - and quantifying un-spendable wallets is one way to\nmeasure the fungibility of Bitcoin.  The number of un-spendable wallets can\nbe quantified as follows:\n\n   Let 'p' equal the current price/per-bit for a transaction\n   Let 'n' equal the number of bits in the transaction\n   Let '[a]' be the set of all wallets with a balance\n   Let '[w]' be the set of un-spendable wallets\n   [w0] = [a] > b*n\n\nNow, let's introduce a savings measure 'k' which is a constant flat savings\nper transaction.\n\n   [w1] = [a] > b*(n - k0)\n\nAs the savings 'k' increase, the set of 'w' also increases in size.\n   len([w0]) < len([w1]) ... < len([wk])\n\nIn this case 'k0' could be the savings from a P2PKH transaction to a 233\nbyte SegWit transaction, and 'k1' could be 148 byte SegWit+PubRef\ntransaction, and the same model can be used for some future transaction\ntype that is even smaller.   As the savings 'k' approaches infinity the set\nof un-spendable wallets approaches zero.\n\nIf a user is privacy-aware, and chooses to use single-use p2sh for all\ntransactions, then these users can still gain from PubRef because\nblock-weight should be decreased for everyone. There are cases where a user\nor merchant might want to reuse their p2sh hash - and PubRef can provide\nsavings.  Additionally, the resulting p2sh script could be a multi-sig\ntransaction which could still benefit from PubRef compression.  PubRef\nimproves fungibility of Bitcoin in two different ways - both reduced cost\nof transaction and increasing the max number of transactions that are able\nto be confirmed by a block. Which is pretty hot - QED.\n\nOn Fri, Jul 19, 2019 at 3:48 PM Yuval Kogman <nothingmuch at woobling.org>\nwrote:\n\n> Hi,\n>\n> On Fri, 19 Jul 2019 at 17:49, Mike Brooks <m at ib.tc> wrote:\n>\n>> Users will adopt whatever the client accepts - this feature would be\n>> transparent.\n>>\n>\n> My skepticism was based in an assumption on my part that most such data is\n> produced by actors with a track record of neglecting transaction\n> efficiency. I'd be happy to be proven wrong, but considering say usage\n> rates of native witness outputs, or the fraction of transactions with more\n> than 2 outputs so far I see little evidence in support of widespread\n> adoption of cost saving measures. Assuming this is intended as a new script\n> version, all fully validating nodes need to commit to keeping all data\n> indefinitely before they can enforce the rules that make transactions\n> benefiting from this opcode safe to broadcast.\n>\n> That said, if successful, the main concern is still that of address reuse\n> - currently there is no incentive in the protocol to do that, and with\n> BIP32 wallets fewer reasons to do it as well, but this proposal introduces\n> such an incentive for users which would otherwise generate new addresses\n> (disregarding the ones that already reuse addresses anyway), and this is\n> problematic for privacy and fungibility.\n>\n> Since address reuse has privacy concerns, I think it's important to draw a\n> distinction between clients accepting and producing such transactions, if\n> the latter were done transparently that would be very concerning IMO, and\n> even the former would not be transparent for users who run currently\n> pruning nodes.\n>\n> I'm not sure how an O(1) time complexity leads to DoS, that seems like a\n>> very creative jump.\n>>\n>\n> For what it's worth, that was in reference to hypothetical deduplication\n> only at the p2p layer, similar to compact blocks, but on further reflection\n> I'd like to retract that, as since both scenarios which I had in mind seem\n> easily mitigated.\n>\n>   Based on this response, it makes me want to calculate the savings, what\n>> if it was a staggering reduction in the tree size?\n>>\n>\n> Assuming past address reuse rates are predictive this only places an upper\n> bound on the potential size savings, so personally I would not find that\n> very compelling. Even if the realized size savings would be substantial,\n> I'm not convinced the benefits outweigh the downsides (increased validation\n> costs, monotonically growing unprunable data, and direct incentive for\n> address reuse), especially when compared to other methods/proposals that\n> can reduce on chain footprint generally improve privacy while reducing\n> validation costs for others (e.g. batching, lightning, MAST for\n> sufficiently large scripts, Schnorr signatures (musig, adaptor signatures),\n> {tap,graft}root, ).\n>\n> Regards,\n> Yuval\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190724/27211815/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "PubRef - Script OP Code For Public Data References",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Mike Brooks",
                "William Casarin",
                "Yuval Kogman",
                "ZmnSCPxj",
                "Pieter Wuille"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 41143
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core to disable Bloom-based Filtering by default",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2019-07-20T17:46:52",
                "message_text_only": "Just a quick heads-up for those watching the list who may be using it -\nin the next Bitcoin Core release bloom filter serving will be turned off\nby default. This has been a long time coming, it's been an option for\nmany releases and has been a well-known DoS vector for some time.\nAs other DoS vectors have slowly been closed, this has become\nincreasingly an obvious low-hanging fruit. Those who are using it should\nalready have long been filtering for NODE_BLOOM-signaling nodes, and I\ndon't anticipate those being gone any time particularly soon.\n\nSee-also PR at https://github.com/bitcoin/bitcoin/pull/16152\n\nThe release notes will liekly read:\n\nP2P Changes\n-----------\n- The default value for the -peerbloomfilters configuration option (and,\nthus, NODE_BLOOM support) has been changed to false.\n  This resolves well-known DoS vectors in Bitcoin Core, especially for\nnodes with spinning disks. It is not anticipated that\n  this will result in a significant lack of availability of\nNODE_BLOOM-enabled nodes in the coming years, however, clients\n  which rely on the availability of NODE_BLOOM-supporting nodes on the\nP2P network should consider the process of migrating\n  to a more modern (and less trustful and privacy-violating) alternative\nover the coming years.\n\nMatt"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2019-07-21T22:56:33",
                "message_text_only": "An estimated 10+ million wallets depend on that NODE_BLOOM to be\nupdated. So far, I haven't heard of an alternative, except reading all\ntransactions and full blocks.\n\nIt goes without saying pulling the rug under that many wallets is a\ndisastrous idea for the adoption of Bitcoin.\n\n> well-known DoS vectors\n\nI asked many people, even some \"core developers\" at meetings, but nobody\never was able to explain the DoS vector. I think this is just a myth.\n\nYes, you can set an overly blurry filter and thus cause useless traffic,\nbut it never exceeds just drinking from the full firehose (which this\nchange doesn't prohibit). So where is the point? An attacker will just\nswitch filtering off, or in fact has never used it.\n\n> It is not anticipated that\n> this will result in a significant lack of availability of\n> NODE_BLOOM-enabled nodes in the coming years\n\nWhy don't you anticipate that? People almost never change defaults,\nespecially if it's not for their own immediate benefit. At the same\ntime, release notes in general recommend updating to the latest version.\nI *do* anticipate this will reduce the number of nodes usable by a large\nenough amount so that the feature will become unstable.\n\n> clients\n> which rely on the availability of NODE_BLOOM-supporting nodes on the\n> P2P network should consider the process of migrating\n> to a more modern (and less trustful and privacy-violating) alternative\n> over the coming years.\n\nThere is no such alternative.\n\nI strongly recommend postponing this change until an alternative exists\nand then give developers enough time to implement, test and roll out.\n\nI also think as long as we don't have an alternative, we should improve\nthe current filtering for segwit. E.g. testing the scripts themselves\nand each scriptPubKey spent by any input against the filter would do,\nand it also fixes the main privacy issue with server-side filtering\n(wallets have to add two items per address to the filter)."
            },
            {
                "author": "Matt Corallo",
                "date": "2019-07-22T05:01:58",
                "message_text_only": "Hey Andreas,\n\nI think maybe some of the comments here were misunderstood - I don't\nanticipate that most people will change their defaults, indeed, but\ngiven the general upgrade cycles we've seen on the network over the\nentire course of Bitcoin's history, there's little reason to believe\nthat many nodes with NODE_BLOOM publicly accessible will be around for\nat least three or four years to come, though obviously any conscious\neffort by folks who need those services to run nodes could extend that\nsignificantly.\n\nAs for the DoS issues, a super old Proof-of-Concept of the I/O variant\nis here: https://github.com/petertodd/bloom-io-attack though CPU DoS\nattacks are also possible that use high hash counts to fill a node's CPU\nusage (you can pretty trivially see when a bloom-based peer connects to\nyou just by looking at top...).\n\nFinally, regarding alternatives, the filter-generation code for BIP\n157/158 has been in Bitcoin Core for some time, though the P2P serving\nside of things appears to have lost any champions working on it. I\npresume one of the Lightning folks will eventually, given they appear to\nbe requiring their users connect to a handful of their own servers right\nnow, but if you really need it, its likely not a ton of work to pipe\nthem through.\n\nMatt\n\nOn 7/21/19 10:56 PM, Andreas Schildbach via bitcoin-dev wrote:\n> An estimated 10+ million wallets depend on that NODE_BLOOM to be\n> updated. So far, I haven't heard of an alternative, except reading all\n> transactions and full blocks.\n> \n> It goes without saying pulling the rug under that many wallets is a\n> disastrous idea for the adoption of Bitcoin.\n> \n>> well-known DoS vectors\n> \n> I asked many people, even some \"core developers\" at meetings, but nobody\n> ever was able to explain the DoS vector. I think this is just a myth.\n> \n> Yes, you can set an overly blurry filter and thus cause useless traffic,\n> but it never exceeds just drinking from the full firehose (which this\n> change doesn't prohibit). So where is the point? An attacker will just\n> switch filtering off, or in fact has never used it.\n> \n>> It is not anticipated that\n>> this will result in a significant lack of availability of\n>> NODE_BLOOM-enabled nodes in the coming years\n> \n> Why don't you anticipate that? People almost never change defaults,\n> especially if it's not for their own immediate benefit. At the same\n> time, release notes in general recommend updating to the latest version.\n> I *do* anticipate this will reduce the number of nodes usable by a large\n> enough amount so that the feature will become unstable.\n> \n>> clients\n>> which rely on the availability of NODE_BLOOM-supporting nodes on the\n>> P2P network should consider the process of migrating\n>> to a more modern (and less trustful and privacy-violating) alternative\n>> over the coming years.\n> \n> There is no such alternative.\n> \n> I strongly recommend postponing this change until an alternative exists\n> and then give developers enough time to implement, test and roll out.\n> \n> I also think as long as we don't have an alternative, we should improve\n> the current filtering for segwit. E.g. testing the scripts themselves\n> and each scriptPubKey spent by any input against the filter would do,\n> and it also fixes the main privacy issue with server-side filtering\n> (wallets have to add two items per address to the filter).\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2019-07-22T15:58:49",
                "message_text_only": "On 7/22/19 12:01 AM, Matt Corallo via bitcoin-dev wrote:\n> Finally, regarding alternatives, the filter-generation code for BIP\n> 157/158 has been in Bitcoin Core for some time, though the P2P serving\n> side of things appears to have lost any champions working on it. I\n> presume one of the Lightning folks will eventually, given they appear to\n> be requiring their users connect to a handful of their own servers right\n> now, but if you really need it, its likely not a ton of work to pipe\n> them through.\n\nIf you want projects to adopt BIP-157/158, you'd do well to fix the\nnumerous errors in the specification.\n\nAs it stands right now it is impossible to implement the protocol using\nthe specification because he code examples are broken to the point of\nappearing intentionally sabotaged.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x9B2D74E2A30A85B9.asc\nType: application/pgp-keys\nSize: 29350 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/51419c33/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/51419c33/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-26T07:45:19",
                "message_text_only": "Hi Justus,\n\nIt might be helpful to consult the Rust implementation  of BIP158 here:\nhttps://github.com/rust-bitcoin/rust-bitcoin/blob/master/src/util/bip158.rs\n\nIt has a cleaner structure than Core or Neutrino, includes server and client side\nand passes Core's test vectors.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 22, 2019, at 17:58, Justus Ranvier via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Signed PGP part\n> On 7/22/19 12:01 AM, Matt Corallo via bitcoin-dev wrote:\n>> Finally, regarding alternatives, the filter-generation code for BIP\n>> 157/158 has been in Bitcoin Core for some time, though the P2P serving\n>> side of things appears to have lost any champions working on it. I\n>> presume one of the Lightning folks will eventually, given they appear to\n>> be requiring their users connect to a handful of their own servers right\n>> now, but if you really need it, its likely not a ton of work to pipe\n>> them through.\n> \n> If you want projects to adopt BIP-157/158, you'd do well to fix the\n> numerous errors in the specification.\n> \n> As it stands right now it is impossible to implement the protocol using\n> the specification because he code examples are broken to the point of\n> appearing intentionally sabotaged.\n> \n> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190726/59fe71a1/attachment-0001.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2019-07-22T08:32:15",
                "message_text_only": "On Mon, Jul 22, 2019 at 12:56:33AM +0200, Andreas Schildbach via bitcoin-dev wrote:\n> An estimated 10+ million wallets depend on that NODE_BLOOM to be\n> updated. So far, I haven't heard of an alternative, except reading all\n> transactions and full blocks.\n\nCan you specify exactly which wallets those are?\n\nSecondly, this doesn't stop people from running NODE_BLOOM nodes, and the DNS\nseed infrastructure among others can easily direct wallets to those nodes. This\nis of course not very secure, but bloom filters have never been very secure.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/424bac18/attachment-0001.sig>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2019-07-22T13:25:25",
                "message_text_only": "Hi Andreas\n\n>> well-known DoS vectors\n> \n> I asked many people, even some \"core developers\" at meetings, but nobody\n> ever was able to explain the DoS vector. I think this is just a myth.\n\nNo. They are not a myth [1] [2] [3].\n\n> Yes, you can set an overly blurry filter and thus cause useless traffic,\n> but it never exceeds just drinking from the full firehose (which this\n> change doesn't prohibit). So where is the point? An attacker will just\n> switch filtering off, or in fact has never used it.\n\nI guess it\u2019s not about traffic DoS. It\u2019s about asking a peer for extensive CPU and disk work. The NODE_BLOOM peers do provide this service for free while it\u2019s not directly beneficial for the Bitcoin Network (pure consumed CPU/disk time).\n\n> \n>> It is not anticipated that\n>> this will result in a significant lack of availability of\n>> NODE_BLOOM-enabled nodes in the coming years\n> \n> Why don't you anticipate that? People almost never change defaults,\n> especially if it's not for their own immediate benefit. At the same\n> time, release notes in general recommend updating to the latest version.\n> I *do* anticipate this will reduce the number of nodes usable by a large\n> enough amount so that the feature will become unstable.\n\nI guess this is speculation.\nA quick lookup in my crawler databases shows me that there are more than 8\u2019000 \u201egood\u201c peers supporting NODE_BLOOM right now.\nI don\u2019t expect that this number drops rapidly, but maybe in the long run (\"in years\u201c, but again: speculation).\n\nWe eventually can\u2019t expect - in the long run - that nodes provide disk/CPU intense services for free to clients not contributing back to the network.\nHowever, sadly, due to the privacy leaks in BIP37, I expect that there will always be a wide range of peers offering NODE_BLOOM in return of collecting valuable data.\n\n> \n>> clients\n>> which rely on the availability of NODE_BLOOM-supporting nodes on the\n>> P2P network should consider the process of migrating\n>> to a more modern (and less trustful and privacy-violating) alternative\n>> over the coming years.\n> \n> There is no such alternative.\n> \n> I strongly recommend postponing this change until an alternative exists\n> and then give developers enough time to implement, test and roll out.\n\nNODE_BLOOM was added in Core 0.12 [4].\nBIP111 is from 2015 [2].\nOne who follows the protocol development should have known that defaulting NODE_BLOOM to off was something anticipated by most developers.\n\nI would say that there are possible alternatives, like BIP158 (though BIP157 is not widely available on the network yet).\nClient side filtering works also by collecting the filter form a centralised service by the wallet provider(s) or a CDN.\nYou may miss transactions by a dishonest filter-packet, so may you by talking to a dishonest NODE_BLOOM peer.\nOf course BIP158 is still young and \u2013 who knows \u2013 eventually once committed to consensus layer (coinbase).\n\n\n> I also think as long as we don't have an alternative, we should improve\n> the current filtering for segwit. E.g. testing the scripts themselves\n> and each scriptPubKey spent by any input against the filter would do,\n> and it also fixes the main privacy issue with server-side filtering\n> (wallets have to add two items per address to the filter).\n\nI think the consensus among protocol developers is (please speak up), that BIP37 (public server based tx filtering) \u2013 in general \u2013 was a conceptual mistake.\nMaybe extending it further is the wrong step, especially when promising alternatives like BIP158 (neutrino) are around.\nThe fact that nobody cared about extending it for SW may also underline that BIP37 is seen as a conceptual mistake and/or \"low interest in further extensions\u201c.\n\n\n/jonas\n\n[1] https://github.com/petertodd/bloom-io-attack <https://github.com/petertodd/bloom-io-attack>\n[2] https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki <https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki>\n[3] https://github.com/bitcoin/bitcoin/pull/9238 <https://github.com/bitcoin/bitcoin/pull/9238>\n[4] https://github.com/bitcoin/bitcoin/blob/47d981e8273804a040d71665a4cb16038d6717e1/doc/release-notes/release-notes-0.12.0.md#node_bloom-service-bit\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/e941efeb/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/e941efeb/attachment-0001.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-22T17:17:28",
                "message_text_only": "On Monday 22 July 2019 13:25:25 Jonas Schnelli via bitcoin-dev wrote:\n> > I also think as long as we don't have an alternative, we should improve\n> > the current filtering for segwit. E.g. testing the scripts themselves\n> > and each scriptPubKey spent by any input against the filter would do,\n> > and it also fixes the main privacy issue with server-side filtering\n> > (wallets have to add two items per address to the filter).\n>\n> I think the consensus among protocol developers is (please speak up), that\n> BIP37 (public server based tx filtering) \u2013 in general \u2013 was a conceptual\n> mistake. Maybe extending it further is the wrong step, especially when\n> promising alternatives like BIP158 (neutrino) are around.\n\nNeutrino is very controversial, and NOT less trustful than bloom filters.\nIt also uses significantly more bandwidth.\n\nIt seems a better approach is to add Stratum (Electrum) support, and to limit \nusage of all pseudo-SPV protocols to trusted peers.\n\n> The fact that nobody cared about extending it for SW may also underline that\n> BIP37 is seen as a conceptual mistake and/or \"low interest in further\n> extensions\u201c. \n\nEric Lombrozo added segwit support. While it was never reviewed for Core, it \nhas been included and supported in Knots since v0.15.1. As I understand it, \nhis mSIGNA wallet also makes usage of the feature.\n\nLuke"
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-22T17:26:56",
                "message_text_only": "On Sunday 21 July 2019 22:56:33 Andreas Schildbach via bitcoin-dev wrote:\n> An estimated 10+ million wallets depend on that NODE_BLOOM to be\n> updated.\n\nWhere do you see this number? I think it would be useful to chart.\n\n> So far, I haven't heard of an alternative, except reading all \n> transactions and full blocks.\n\nElectrum has a JSON-based protocol that can provide information much more \nefficiently.\n\nCurrently, this does require nodes that run additional software and/or \nindexes, but there are plenty of them available, and there are steps that can \nbe taken to improve that situation.\n\n> > It is not anticipated that\n> > this will result in a significant lack of availability of\n> > NODE_BLOOM-enabled nodes in the coming years\n>\n> Why don't you anticipate that? People almost never change defaults,\n> especially if it's not for their own immediate benefit. At the same\n> time, release notes in general recommend updating to the latest version.\n> I *do* anticipate this will reduce the number of nodes usable by a large\n> enough amount so that the feature will become unstable.\n\nMany users run older versions, and do not update immediately. Today, only 42% \nof listening nodes are using 0.18.\n\n(If it helps ease the concern, we can keep bloom enabled by default in Knots \nlonger.)\n\n> I strongly recommend postponing this change until an alternative exists\n> and then give developers enough time to implement, test and roll out.\n\nThere will be time to do so, since the functionality won't disappear \novernight.\n\nLuke"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2019-07-23T14:47:18",
                "message_text_only": "(Rather than replying individually, I try to address questions and add\nmy remarks in one post.)\n\n> Finally, regarding alternatives, the filter-generation code for\n> BIP 157/158 has been in Bitcoin Core for some time, though the\n> P2P serving side of things appears to have lost any champions\n> working on it.\n\nBIP 157/158 is not an alternative to BIP 37:\n\n1) It causes way too much traffic for mobile users, and likely even too\nmuch traffic for fixed lines in not so developed parts of the world.\n\n2) It filters blocks only. It doesn't address unconfirmed transactions.\n\n3) Afaik, it enforces/encourages address re-use. This stems from the\nfact that the server decides on the filter and in particular on the\nfalse positive rate. On wallets with many addresses, a hardcoded filter\nwill be too blurry and thus each block will be matched. So wallets that\nfollow the \"one address per incoming payment\" pattern (e.g. HD wallets)\nat some point will be forced to wrap their key chains back to the\nbeginning. If I'm wrong on this one please let me know.\n\n4) The filters are not yet committed to the blockchain. Until that\nhappens we'd have to trust a server to provide correct filters.\n\n> Can you specify exactly which wallets those are?\n\nBitcoin Wallet, Breadwallet, BISQ and many smaller ones.\n\n> the DNS seed infrastructure among others can easily direct\n> wallets to those nodes\n\nLast I checked none of the seeds did. But I agree this would be nice to\nhave.\n\n> We eventually can\u2019t expect - in the long run - that nodes provide\n> disk/CPU intense services for free to clients not contributing back\n> to the network.\n\nI'm disappointed to learn that supporting 10M wallets gets discredited\ndown to \"no contribution\". Each node of course supports just a number of\nthem, but still...\n\n> The fact that nobody cared about extending it for SW may also\n> underline that BIP37 is seen as a conceptual mistake and/or \"low\n> interest in further extensions\u201c.\n\nI suspect this is a fallacy. BIP37 doesn't need to be extended for\nSegWit. See Bitcoin Wallet and Breadwallet, both support SegWit and use\nthe original BIP 37.\n\nIt's true however that BIP 37 could be made simpler to work with, more\nfuture-proof and more private by simply matching output scripts.\n\n> [1] https://github.com/petertodd/bloom-io-attack\n\nThis claims to be a proof of concept, but it's missing the concept. I\ncould not find a description of the attack and why is it likely to be\nexploited (and why it hasn't been exploited yet).\n\n> CPU DoS attacks are also possible\n\nIf such an attack exists, it should be easy to defend against. Filter is\nusing too much CPU time \u2192 disconnect and blacklist the IP for some time.\nI vaguely remember the infrastructure for misbehaving peers is already\npresent in bitcoind.\n\n\nAs a side note, Coinbase just announced their 30M'th wallet. I'm\nconvinced this massive run into custodial wallets is caused by the\npublic realizing around Dec 2017 that Bitcoin fails to scale. IMHO, BIP\n37 is the only scaling technology that has proven successful and could \u2013\nif supported and improved rather than choked \u2013 continue to help holding\nagainst the bitbanks trend."
            },
            {
                "author": "Justus Ranvier",
                "date": "2019-07-24T13:11:28",
                "message_text_only": "On 7/23/19 9:47 AM, Andreas Schildbach via bitcoin-dev wrote:\n> BIP 157/158 is not an alternative to BIP 37:\n\nThey complement each other pretty well though.\n\nWallets can save the deterministic GCS filters in the same way as\nheaders, which means blocks can be re-scanned if necessary (importing\nnew keys, etc) offline.\n\nBloom filters are good for limiting mempool bandwidth as well as\ncontrolling the fraction of each block that is downloaded.\n\nOn the BTC chain that last point doesn't matter as so much, but on\nchains with larger blocks I expect that clients will ultimately end up\nusing both filter schemes for exactly that reason.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x9B2D74E2A30A85B9.asc\nType: application/pgp-keys\nSize: 29350 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190724/e8fe8f3b/attachment-0001.bin>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-25T03:04:25",
                "message_text_only": "On Tuesday 23 July 2019 14:47:18 Andreas Schildbach via bitcoin-dev wrote:\n> > the DNS seed infrastructure among others can easily direct\n> > wallets to those nodes\n>\n> Last I checked none of the seeds did. But I agree this would be nice to\n> have.\n\nIt's supported by default in sipa's bitcoin-seeder, which many DNS seeds use.\n\nMy seed also currently requires NODE_BLOOM for *any* answers returned.\n(But I don't guarantee that will remain forever.)\n\n> As a side note, Coinbase just announced their 30M'th wallet. I'm\n> convinced this massive run into custodial wallets...\n\nLight wallets are just as bad for the network as custodial wallets.\n\n> IMHO, BIP 37 is the only scaling technology that has proven successful and\n> could \u2013 if supported and improved rather than choked \u2013 continue to help\n> holding against the bitbanks trend.\n\nLight wallets are not Bitcoin scaling. They are just trusting anonymous 3rd \nparties, which is harmful to Bitcoin.\n\nLuke"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2019-07-26T10:04:32",
                "message_text_only": "> 1) It causes way too much traffic for mobile users, and likely even too\n> much traffic for fixed lines in not so developed parts of the world.\n\nYes. It causes more traffic than BIP37.\nBasic block filters for current last ~7 days (1008 blocks) are about 19MB (just the filters).\nOn top, you will probably fetch a handful of irrelevant blocks due to the FPs and due to true relevant txns.\nA over-the-thumb estimation: ~25MB per week of catch-up.\nIf you where offline for a month: ~108MB\n\nThats certainly more then BIP37 BF (measured 1.6MB total traffic with android schildbach wallet restore blockchain for 8 week [7 weeks headers, 1week merkleblocks]).\n\nBut lets look at it like this: for an additional, say 25MB per week (maybe a bit more), you get the ability to filter blocks without depending on serving peers who may compromise your financial privacy.\nAlso, if you keep the filters, further rescans do consume the same or less bandwidth than BF BIP37.\nIn other words: you have the chance to potentially increase privacy by consuming bandwidth in the range of a single audio podcast per week.\n\nI would say the job of protocol developers is protect users privacy where it\u2019s possible (as a default).\nIt\u2019s probably a debatable point wether 25MB per week of traffic is worth a potential increase in privacy, though I absolutely think 25MB/week is an acceptable tradeoff.\nSaving traffic is possible by using BIP37 or stratum/electrum\u2026 but developers should make sure users are __warned about the consequences__!\n\nAdditionally, it looks like, peer operators are not endless being willing to serve \u2013 for free \u2013 a CPU/disk intense service with no benefits for the network. I would question wether a decentralised form of BIP37 is sustainable in the long run (if SPV wallet provider bootstrap a net range of NODE_BLOOM peers to make it more reliable on the network would be snake-oil).\n\n\n> \n> 2) It filters blocks only. It doesn't address unconfirmed transactions.\n\nWell, unconfirmed transaction are uncertain for various reasons.\n\nBIP158 won't allow you to filter the mempool.\nBut as soon as you are connected to the network, you may fetch tx with inv/getdata and pick out the relevant ones (causes also traffic).\nUnclear and probably impossible with the current BIP158 specs to fetch transactions that are not in active relay and are not in a block (mempool txns, at least this is true with the current observed relay tactics).\n\n\n> 3) Afaik, it enforces/encourages address re-use. This stems from the\n> fact that the server decides on the filter and in particular on the\n> false positive rate. On wallets with many addresses, a hardcoded filter\n> will be too blurry and thus each block will be matched. So wallets that\n> follow the \"one address per incoming payment\" pattern (e.g. HD wallets)\n> at some point will be forced to wrap their key chains back to the\n> beginning. If I'm wrong on this one please let me know.\n\nI\u2019m probably the wrong guy to ask (haven\u2019t made the numbers) but last time I rescanned a Core wallet (in my dev branch) with block filters (and a Core wallet has >2000 addresses by default) it fetched a low and acceptable amount of false positive blocks.\n(Maybe someone who made the numbers step in here.)\n\nThough, large wallets \u2013 AFAIK \u2013 also operate badly with BIP37.\n\n> \n> 4) The filters are not yet committed to the blockchain. Until that\n> happens we'd have to trust a server to provide correct filters.\n\nI wouldn\u2019t say so. It\u2019s on a similar level than BIP37.\nBIP37 is not \u2013 and can not \u2013 be committed to the blockchain.\nYou fully trust the peer that it won\u2019t\u2026\na) create fake unconfirmed transactions (would be the same if a BIP158 wallet would show you unconfirmed transaction)\nb) lies by omission (you will miss relevant transactions, eventually swipe your wallet and loose coins)\n\nIMO, the point b) is true for BIP37 and BIP158 (as long as not commited).\nIn both cases, you can reduce the trust by comparing between peers / filter-providers.\n\nb) is conceptually solvable with a soft-fork (commitment) in BIP158 (not with BIP37).\n\nAdditionally, block-filters will, very likely, be useful for other features (load/rescan an [old] wallet on a prune peer that has the filters constructed).\n\n\n\nThere is probably no clear answer like \u201eX is better than Y\u201c.\n\nPersonally I would like to see developers being more honest/transparent to users about the implications of the used filtering,... and giving them choices.\nImagine a user can choose between \u201eElectrum / BIP37 / BIP158\u201c depending on his needs for privacy and availability of bandwidth. Eventually also taking the future usage of this wallet (will he load old private keys, will he receive money daily, etc.) into account.\n\nPlus, full node hardware appliances that run at home (or in a trusted environment) are solving many of these issues plus adding a bunch of great features \u2013 if done right.\n\n/jonas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190726/5d396389/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190726/5d396389/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2019-07-27T16:10:03",
                "message_text_only": "This conversation went off the rails somewhat. I don't think there's any immediate risk of NODE_BLOOM peers being unavailable. This is a defaults change, not a removal of the code to serve BIP 37 peers (nor would I suggest removing said code while people still want to use them - the maintenance burden isn't much). Looking at historical upgrade cycles, ignoring any other factors, there will be a large number of nodes serving NODE_BLOOM for many years.\n\nEven more importantly, if you need them, run a node or two. As long as no one is exploiting the issues with them such a node isn't *too* expensive. Or don't, I guarantee you chainanalysis or some competitor of theirs will very very happily serve bloom-filtered clients as long as such clients want to deanonymize themselves. We already see a plurality of nodes on the network are clearly not run-of-the-mill Core nodes, many of which are likely deanonimization efforts.\n\nIn some cases BIP 137 is a replacement, in some cases, indeed, it is not. I agree at a protocol level we shouldn't be passing judgement about how users wish to interact with the Bitcoin system (aside from not putting our own, personal, effort into building such things) but that isn't what's happening here. This is an important DoS fix for the average node, and I don't really understand the argument that this is going to break existing BIP 37 wallets, but if it makes you feel any better I can run some beefy BIP 37 nodes.\n\nMatt\n\n> On Jul 26, 2019, at 06:04, Jonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \n>> 1) It causes way too much traffic for mobile users, and likely even too\n>> much traffic for fixed lines in not so developed parts of the world.\n> \n> Yes. It causes more traffic than BIP37.\n> Basic block filters for current last ~7 days (1008 blocks) are about 19MB (just the filters).\n> On top, you will probably fetch a handful of irrelevant blocks due to the FPs and due to true relevant txns.\n> A over-the-thumb estimation: ~25MB per week of catch-up.\n> If you where offline for a month: ~108MB\n> \n> Thats certainly more then BIP37 BF (measured 1.6MB total traffic with android schildbach wallet restore blockchain for 8 week [7 weeks headers, 1week merkleblocks]).\n> \n> But lets look at it like this: for an additional, say 25MB per week (maybe a bit more), you get the ability to filter blocks without depending on serving peers who may compromise your financial privacy.\n> Also, if you keep the filters, further rescans do consume the same or less bandwidth than BF BIP37.\n> In other words: you have the chance to potentially increase privacy by consuming bandwidth in the range of a single audio podcast per week.\n> \n> I would say the job of protocol developers is protect users privacy where it\u2019s possible (as a default).\n> It\u2019s probably a debatable point wether 25MB per week of traffic is worth a potential increase in privacy, though I absolutely think 25MB/week is an acceptable tradeoff.\n> Saving traffic is possible by using BIP37 or stratum/electrum\u2026 but developers should make sure users are __warned about the consequences__!\n> \n> Additionally, it looks like, peer operators are not endless being willing to serve \u2013 for free \u2013 a CPU/disk intense service with no benefits for the network. I would question wether a decentralised form of BIP37 is sustainable in the long run (if SPV wallet provider bootstrap a net range of NODE_BLOOM peers to make it more reliable on the network would be snake-oil).\n> \n> \n>> \n>> 2) It filters blocks only. It doesn't address unconfirmed transactions.\n> \n> Well, unconfirmed transaction are uncertain for various reasons.\n> \n> BIP158 won't allow you to filter the mempool.\n> But as soon as you are connected to the network, you may fetch tx with inv/getdata and pick out the relevant ones (causes also traffic).\n> Unclear and probably impossible with the current BIP158 specs to fetch transactions that are not in active relay and are not in a block (mempool txns, at least this is true with the current observed relay tactics).\n> \n> \n>> 3) Afaik, it enforces/encourages address re-use. This stems from the\n>> fact that the server decides on the filter and in particular on the\n>> false positive rate. On wallets with many addresses, a hardcoded filter\n>> will be too blurry and thus each block will be matched. So wallets that\n>> follow the \"one address per incoming payment\" pattern (e.g. HD wallets)\n>> at some point will be forced to wrap their key chains back to the\n>> beginning. If I'm wrong on this one please let me know.\n> \n> I\u2019m probably the wrong guy to ask (haven\u2019t made the numbers) but last time I rescanned a Core wallet (in my dev branch) with block filters (and a Core wallet has >2000 addresses by default) it fetched a low and acceptable amount of false positive blocks.\n> (Maybe someone who made the numbers step in here.)\n> \n> Though, large wallets \u2013 AFAIK \u2013 also operate badly with BIP37.\n> \n>> \n>> 4) The filters are not yet committed to the blockchain. Until that\n>> happens we'd have to trust a server to provide correct filters.\n> \n> I wouldn\u2019t say so. It\u2019s on a similar level than BIP37.\n> BIP37 is not \u2013 and can not \u2013 be committed to the blockchain.\n> You fully trust the peer that it won\u2019t\u2026\n> a) create fake unconfirmed transactions (would be the same if a BIP158 wallet would show you unconfirmed transaction)\n> b) lies by omission (you will miss relevant transactions, eventually swipe your wallet and loose coins)\n> \n> IMO, the point b) is true for BIP37 and BIP158 (as long as not commited).\n> In both cases, you can reduce the trust by comparing between peers / filter-providers.\n> \n> b) is conceptually solvable with a soft-fork (commitment) in BIP158 (not with BIP37).\n> \n> Additionally, block-filters will, very likely, be useful for other features (load/rescan an [old] wallet on a prune peer that has the filters constructed).\n> \n> \n> \n> There is probably no clear answer like \u201eX is better than Y\u201c.\n> \n> Personally I would like to see developers being more honest/transparent to users about the implications of the used filtering,... and giving them choices.\n> Imagine a user can choose between \u201eElectrum / BIP37 / BIP158\u201c depending on his needs for privacy and availability of bandwidth. Eventually also taking the future usage of this wallet (will he load old private keys, will he receive money daily, etc.) into account.\n> \n> Plus, full node hardware appliances that run at home (or in a trusted environment) are solving many of these issues plus adding a bunch of great features \u2013 if done right.\n> \n> /jonas\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190727/9c417a9f/attachment-0001.html>"
            },
            {
                "author": "Chris",
                "date": "2019-07-26T16:48:36",
                "message_text_only": "On 7/23/19 10:47 AM, Andreas Schildbach via bitcoin-dev wrote:\n\n> 3) Afaik, it enforces/encourages address re-use. This stems from the\n> fact that the server decides on the filter and in particular on the\n> false positive rate. On wallets with many addresses, a hardcoded filter\n> will be too blurry and thus each block will be matched. So wallets that\n> follow the \"one address per incoming payment\" pattern (e.g. HD wallets)\n> at some point will be forced to wrap their key chains back to the\n> beginning. If I'm wrong on this one please let me know.\n\nMaybe someone who knows better can confirm but I thought I read the the \nfp rate on the filter was chosen assuming a wallet would average a \ncertain number of addresses (ie, they assumed use of an HD wallet). Your \ncriticism might be valid for wallets that well exceed the average."
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-27T19:19:49",
                "message_text_only": "On Tuesday 23 July 2019 14:47:18 Andreas Schildbach via bitcoin-dev wrote:\n> 3) Afaik, it enforces/encourages address re-use. This stems from the\n> fact that the server decides on the filter and in particular on the\n> false positive rate. On wallets with many addresses, a hardcoded filter\n> will be too blurry and thus each block will be matched. So wallets that\n> follow the \"one address per incoming payment\" pattern (e.g. HD wallets)\n> at some point will be forced to wrap their key chains back to the\n> beginning. If I'm wrong on this one please let me know.\n\nBTW, you are indeed wrong on this. You don't need to match every single \naddress the wallet has ever used, only outstanding addresses that haven't \nbeen paid. ;)\n\nLuke"
            },
            {
                "author": "Tom Harding",
                "date": "2019-07-22T15:04:16",
                "message_text_only": "On 7/20/19 10:46 AM, Matt Corallo via bitcoin-dev wrote:\n> (less trustful and privacy-violating) alternative\n> over the coming years.\n\nThe same paper that established the 'privacy-violating' conventional \nwisdom presented mitigations which have seen little exploration. \nhttps://eprint.iacr.org/2014/763.pdf\n\nMeanwhile we have custodial LN, the L-BTC altcoin and, today, a massive \npush into infrastructure for fully custodial accounts."
            },
            {
                "author": "Dustin Dettmer",
                "date": "2019-07-22T15:15:49",
                "message_text_only": "Has someone built an analysis of how much extra bandwidth CFB uses over\nbloom filters?\n\nObviously an active merchant in an impoverished country paying data rates\nper MB will never be able to afford CFB \u2014 so those people are being cut out\nof Bitcoin entirely. I suppose the plan is they will rely on custodial\nservices now?\n\nBut if someone receives say, 5 tx a day, how much more bandwidth precisely\nwill CFB require over bloom?\n\nOn Mon, Jul 22, 2019 at 8:10 AM Tom Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 7/20/19 10:46 AM, Matt Corallo via bitcoin-dev wrote:\n> > (less trustful and privacy-violating) alternative\n> > over the coming years.\n>\n> The same paper that established the 'privacy-violating' conventional\n> wisdom presented mitigations which have seen little exploration.\n> https://eprint.iacr.org/2014/763.pdf\n>\n> Meanwhile we have custodial LN, the L-BTC altcoin and, today, a massive\n> push into infrastructure for fully custodial accounts.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/95f794b2/attachment.html>"
            },
            {
                "author": "Peter",
                "date": "2019-07-22T18:52:10",
                "message_text_only": "Hi,\n\nI believe two wallets. Andreas' Android Bitcoin wallet and BRD are\nsignificant users of node_bloom.\n\nPrivacy is a matter of individual choice in the current protocol. Why not\nlet people provide this network service? I don't see why it should be\nend-of-life if it provides value.\n\nI believe there's a network security obtained by having a large quantity of\npeople following the Bitcoin headers based on longest weighted chain. As a\nmeans of nullifying potential miner initiated hard forks (like S2X).\n\nRespectfully,\nPeter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/5e3fa602/attachment.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2019-07-22T20:42:50",
                "message_text_only": "People are allowed the choice, it's a change of default only.\n\nOn Mon, Jul 22, 2019 at 4:41 PM Peter via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> I believe two wallets. Andreas' Android Bitcoin wallet and BRD are\n> significant users of node_bloom.\n>\n> Privacy is a matter of individual choice in the current protocol. Why not\n> let people provide this network service? I don't see why it should be\n> end-of-life if it provides value.\n>\n> I believe there's a network security obtained by having a large quantity\n> of people following the Bitcoin headers based on longest weighted chain. As\n> a means of nullifying potential miner initiated hard forks (like S2X).\n>\n> Respectfully,\n> Peter\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190722/e1480d8d/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-22T21:17:29",
                "message_text_only": "On Monday 22 July 2019 18:52:10 Peter via bitcoin-dev wrote:\n> Privacy is a matter of individual choice in the current protocol. Why not\n> let people provide this network service? I don't see why it should be\n> end-of-life if it provides value.\n\nIt's not EOL, just disabled by default. Anyone can provide it by choice.\nSame as with Stratum/Electrum right now (except easier to enable).\n\n> I believe there's a network security obtained by having a large quantity of\n> people following the Bitcoin headers based on longest weighted chain. As a\n> means of nullifying potential miner initiated hard forks (like S2X).\n\nThis is incorrect. Such wallets strictly degrade security, as they are blindly \ntrusting miners. They make the network more VULNERABLE to 2X-like attacks.\n\nLuke"
            },
            {
                "author": "Peter Todd",
                "date": "2019-07-23T20:36:50",
                "message_text_only": "On Mon, Jul 22, 2019 at 02:52:10PM -0400, Peter via bitcoin-dev wrote:\n> Hi,\n> \n> I believe two wallets. Andreas' Android Bitcoin wallet and BRD are\n> significant users of node_bloom.\n> \n> Privacy is a matter of individual choice in the current protocol. Why not\n> let people provide this network service? I don't see why it should be\n> end-of-life if it provides value.\n\nWith that patch people are still free to choose to provide bloom filtering\nservices by setting -peerbloomfilters=1\n\n> I believe there's a network security obtained by having a large quantity of\n> people following the Bitcoin headers based on longest weighted chain. As a\n> means of nullifying potential miner initiated hard forks (like S2X).\n\nThere really isn't due to sybil attacks; we already have good reason to believe\nthat the Bitcoin network is subject to them by deanonymization/chainanalysis\nservices.\n\nIndeed there's a good argument that creating services that are vulnerable to\nsybil attacks encourages them by making them succesful at something. That\ncreates its own risks, for instance the risk that the sybil attacker will\nthemselves screw up and cause a bunch of nodes to go offline at once.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190723/7a95910d/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core to disable Bloom-based Filtering by default",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tamas Blummer",
                "Andreas Schildbach",
                "Tom Harding",
                "Peter Todd",
                "Peter",
                "Luke Dashjr",
                "Matt Corallo",
                "Chris",
                "Dustin Dettmer",
                "Justus Ranvier",
                "Jonas Schnelli",
                "Greg Sanders"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 42837
        }
    },
    {
        "title": "[bitcoin-dev] BIP174 extension proposal (Global Type: PSBT_GLOBAL_XPUB_SIGNATURE)",
        "thread_messages": [
            {
                "author": "Jonathan Underwood",
                "date": "2019-07-23T05:03:32",
                "message_text_only": "Hello All,\n\nI have made a pull request based on the discussion currently. Please move\ndiscussion there.\n\nhttps://github.com/bitcoin/bips/pull/801\n\nThanks,\nJonathan\n\n2019\u5e746\u670829\u65e5(\u571f) 17:11 Jonathan Underwood <junderwood at bitcoinbank.co.jp>:\n\n> Even if the difference is apparent outside the signed data (in the\n> output). Signing the data explicitly is more secure.\n>\n> ie. if some sort of vulnerability / way to break this system for 1-of-1\n> multisig is found, someone who signed a single sig xpub whitelist will not\n> be exposed.\n>\n> 2019\u5e746\u670829\u65e5(\u571f) 13:43 Dmitry Petukhov <dp at simplexum.com>:\n>\n>> \u0412 Sat, 29 Jun 2019 09:19:41 +0900\n>> Jonathan Underwood <junderwood at bitcoinbank.co.jp> \u043f\u0438\u0448\u0435\u0442:\n>>\n>> > > Other note: you have 'unused' value of 1 for `m` in your scheme, why\n>> > > not require m=1 for single-sig case, and use 0 as indicator that\n>> > > there are a serlal number following it?\n>> > >\n>> >\n>> > 0x00 is single sig, aka, OP_CHECKSIG\n>> >\n>> > 0x01 is multisig, aka, 1-of-3, 1-of-2 OP_CHECKMULTISIG\n>>\n>> This informatin is available in per-output redeem/witness script,\n>> signer will be able to distinguish between multisig/single-sig by\n>> looking at this script. I think it only need to know the total number\n>> of keys participating in the signing, and check that this number\n>> matches the particulars of redeem/witness script.\n>>\n>\n>\n\n-- \n-----------------\nJonathan Underwood\n\u30d3\u30c3\u30c8\u30d0\u30f3\u30af\u793e \u30c1\u30fc\u30d5\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30aa\u30d5\u30a3\u30b5\u30fc\n-----------------\n\n\u6697\u53f7\u5316\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u304a\u9001\u308a\u306e\u65b9\u306f\u4e0b\u8a18\u306e\u516c\u958b\u9375\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\n\n\u6307\u7d0b: 0xCE5EA9476DE7D3E45EBC3FDAD998682F3590FEA3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190723/3a6f2496/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP174 extension proposal (Global Type: PSBT_GLOBAL_XPUB_SIGNATURE)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jonathan Underwood"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1706
        }
    },
    {
        "title": "[bitcoin-dev] Absent authors and BIP updates",
        "thread_messages": [
            {
                "author": "Karl-Johan Alm",
                "date": "2019-07-23T15:09:02",
                "message_text_only": "Hello,\n\nPeople come in as Bitcoin developers all the time, but sometimes\npeople also leave permanently. In the case of BIP authors, when a user\nleaves and does not respond to (reasonable) requests to change their\nBIPs, we are sort of stuck right now.\n\nBIP-2 states that anyone is allowed to request a change of a\ndraft/proposed BIP to \"rejected\" status after 3 years of inactivity,\nbut sometimes BIPs are accepted, after which the author leaves.\n\nSee e.g. https://github.com/bitcoin/bips/pull/339\n\nThere are a couple of ways to address this:\n\n1. We allow anyone to request a change of a draft/proposed BIP to\n\"accepted\", at any time. It is upon the requester to prove within\nreason that the BIP does fulfill the criteria as given in BIP-2. Such\na request does not need the approval of the BIP author.\n\n2. We allow BIPs to expire after 3 years, and allow the BIP repository\nmaintainer to assign a new champion, once/if such a champion appeared.\n\n3. We do neither, and when such is warranted, we make new BIPs with\nnew assignations which supercede the old BIP, sort of like how BIP 2\nsupercedes BIP 1. Without the author to sign off on the change though,\nit may not be obvious enough since we can't modify the original BIP.\n\n4. Other approach / fine as it is."
            },
            {
                "author": "Luke Dashjr",
                "date": "2019-07-25T03:06:24",
                "message_text_only": "On Tuesday 23 July 2019 15:09:02 Karl-Johan Alm via bitcoin-dev wrote:\n> People come in as Bitcoin developers all the time, but sometimes\n> people also leave permanently. In the case of BIP authors, when a user\n> leaves and does not respond to (reasonable) requests to change their\n> BIPs, we are sort of stuck right now.\n\nBIP 2 allows assigning a new champion.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#Transferring_BIP_Ownership"
            }
        ],
        "thread_summary": {
            "title": "Absent authors and BIP updates",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr",
                "Karl-Johan Alm"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1709
        }
    },
    {
        "title": "[bitcoin-dev] Eco-friendly mining algorithms",
        "thread_messages": [
            {
                "author": "Kenshiro []",
                "date": "2019-07-23T20:57:13",
                "message_text_only": "Hi all,\n\nHere are some links to the best eco-friendly mining algorithms I have found:\n\n- Proof of Stake v3.0:   http://earlz.net/view/2017/07/27/1904/the-missing-explanation-of-proof-of-stake-version\n\n Used in several PoS coins like Bitcoin Confidential:   https://bitcoinconfidential.cc/\n\n\n- Proof of Capacity: https://coincentral.com/what-is-proof-of-capacity/?source=post_page---------------------------\n\nA simple explanation from the web: Imagine you filled your hard drive with lottery tickets and then when a random number is generated, you check to see who has the most matching numbers.\u201d If you have the most matching numbers, you win a reward. The best part is \u201cyou get to keep using these lottery tickets block after block.\u201d\n\nIt's implemented in BurstCoin: https://www.burst-coin.org/\n\nRegards,\n\n\n\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190723/4b8e8d3b/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Eco-friendly mining algorithms",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Kenshiro []"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1000
        }
    },
    {
        "title": "[bitcoin-dev] Improving JoinMarket's resistance to sybil attacks using fidelity bonds",
        "thread_messages": [
            {
                "author": "Chris Belcher",
                "date": "2019-07-25T11:47:54",
                "message_text_only": "JoinMarket[1] can be sybil attacked today at relatively low cost which\ncan destroy its privacy. Bitcoins can be sacrificed with burner outputs\nand time-locked addresses (also called fidelity bonds), and this can be\nused to greatly improve JoinMarket's resistance to sybil attacks.\n\nWith real-world data and realistic assumptions we calculate that under\nsuch a fidelity bond system an adversary would need to lock up\n30,000-80,000 bitcoins for months, or send 45-120 bitcoins to burner\naddresses to have a good chance of sybil attacking the system if it were\nadded to JoinMarket.\n\nThis increased resistance to sybil attacks would most likely cause\ncoinjoin fees to rise. I think the added cost is worth it for the\ngreatly improved privacy, because today miner fees are the biggest cost\nto JoinMarket takers not coinjoin fees which are very low. Users should\ndefinitely share their opinion on fees after reading the document.\n\n## Introduction\n\nJoinMarket creates a market for coinjoins, allowing anyone to create\nequal-amount coinjoins for any amount they want at any time they want.\nIn return they pay a fee for the liquidity made available to them. The\nproject has existed since 2015 and has probably created hundreds of\nthousands of coinjoins since then. Today there is available liquidity\nfor creating coinjoins with amounts up to about 400 btc per coinjoin output.\n\n### Sybil attacks\n\nJoinMarket, like many other schemes where participants are free to\nanonymously enter, can be targetted by sybil attacks. In JoinMarket this\nwould work by an attacker running lots of maker bots which attempt to be\nall the makers in every coinjoin. If successful the attacker would have\nenough information unmix every coinjoin.\n\nOne way to solve the problem of sybil attacks is centralization. For\nexample coinjoins could be constructed on a centralized server. Then\nrandom anonymous participants cant sybil attack because they can't\ncontrol the coinjoin construction, but this comes at the cost that the\nserver can sybil attack very easily. So this solution is probably a bad\ntradeoff.\n\nIn general, sybil attacks are solved by making them expensive. For\nexample, bitcoin mining resists sybil attacks because it requires a\nprovable sacrifice of electricity to mine. A bitcoin user can calculate\nthe actual monetary value that an attacker must spend in order to\nreverse their transaction.\n\nLikewise in JoinMarket such a sybil attack is not free either as the\nattacker needs to own enough bitcoins to run enough maker bots for all\nthe coinjoins.\n\n### Today's low cost for sybil attacks\n\nA paper on JoinMarket [M\u00f6ser, Malte and Rainer B\u00f6hme. \u201cJoin Me on a\nMarket for Anonymity.\u201d (2016).] calculates the requirement of such a\nsybil attack in 2016 to be just 32,000 USD. According to the paper such\nan attack would succeed 90% of the time and the investment is\nrecoverable afterwards so that figure for the requirement isn't even a\ntrue cost.\n\nJoinMarket has been improved since 2016 and more makers have joined, so\nthe true requirement is perhaps 2x or 3x higher today, but it is still\nrelatively low.\n\nEven with future improvements like fixing issue #693 [2] the requirement\nof a sybil attack would probably only rise another 2x.\n\nApart from the cost to sybil attack being low, there is also the odd\nsituation that smaller coinjoin amounts receive less sybil protection\nthan large ones. It costs 100x less to sybil attack a transaction of 0.1\nbtc than one of 10 btc. Why should smaller amounts receive less\nsybil-resistance and therefore less privacy?\n\n### Liquidity\n\nWhen creating this project, it was expected that many more people would\nenter the market as makers and so the cost of a sybil attack would be\nvery high. That has not happened. One reason is that everyone who wants\nto create a coinjoin is able to even for large amounts. The fundamental\nproblem is that takers are paying-for and getting liquidity, but not\nnecessarily sybil-resistance.\n\nAnother smaller reason for the low cost of sybil attacks is that many\npeople don't want to store too many bitcoins on an computer connected to\nthe internet.\n\nWhat is needed is a way to increase the cost of running in a maker in a\nway that retains the anonymity and is attractive to long-term holders of\nbitcoin. This can be done using time-locked addresses.\n\n## Fidelity bonds\n\nIn bitcoin, a fidelity bond [3] is a mechanism where bitcoin value is\ndeliberately sacrificed to make a cryptographic identity expensive to\nobtain. The sacrifice is done in a way that can be proven to a third party.\n\nA way to create a fidelity bond is to burn an amount of bitcoins by\nsending to a OP_RETURN output. Another kind is time-locked addresses\ncreated using OP_CHECKLOCKTIMEVERIFY where the valuable thing being\nsacrificed is time rather than money, but the two are related because of\nthe time-value-of-money.\n\nUnder this system, makers would sacrifice an amount of bitcoins and\npublish a proof along with their coinjoin offers. Takers would choose\nmaker offers based on the sacrificed amount (as well as other factors),\nknowing that a sybil attacker would also have to sacrifice a certain\namount of coins in order to unmix the taker's coinjoins. The sacrifice\nwould be an objective measurement that can't be faked and which can be\nverified by anybody (just like, for example PoW mining)\n\nNote that a long-term holder (or hodler) of bitcoins can buy time-locked\nfidelity bonds essentially for free, assuming they never intended to\ntransact with their coins much anyway. A long-term holder probably won't\nwant to attack a system like JoinMarket which makes his own investment\ncoins more private and more fungible.\n\n### Fidelity bonds in cold storage\n\nThe private keys of fidelity bonds can be kept offline. Signatures\npotentially only need to be made when the timelock expires (every 6\nmonths for example), or only once in the case of OP_RETURN burned coins.\nThis allows JoinMarket's sybil resistance to increase without the hot\nwallet risk.\n\nBurned coin signatures should still have a lifetime, in case the private\nkey associated with the IRC nick (which is online) is stolen, so that\nthe thief of that privkey can't impersonate the maker indefinitely. The\nsignature linking the burned coins and IRC nick could expire after\nperhaps 6 months.\n\n### Anonymity\n\nUnder this scheme makers would need to publish the transactions of their\nfidelity bonds to the entire world. Those transactions could be subject\nto blockchain analysis. So before makers do this they should make sure\ntheir coins are anonymous (possibly by mixing with JoinMarket). Also if\nthey ever want to use their coins for something else apart from fidelity\nbonds they should mix them.\n\n### Value of a fidelity bond\n\nSee the other document (Financial mathematics of joinmarket fidelity\nbonds)[4] for a formula expressing the value of a fidelity bond.\n\nThe value of a fidelity bond made by sending V bitcoins to a burner\naddress is:\n\n    V^2\n\nThe amount of bitcoins is squared to get the fidelity bond value. This\nhas the effect that economic-rational makers have a strong incentive to\nlump up all their coin sacrifices together into one maker bot, not to\nsplit it up over several bots.\n\nThe value of a fidelity bond made by locking up V bitcoins in a\ntime-locked address for time period T is:\n\n    V^2 (exp(rT) - 1)^2\n\nTo get an idea of the numbers, if we burn 2 btc then the value of the\nfidelity bond is 4 BTC^2. If we lock up 100 BTC for one year, and have a\nbitcoin interest rate r = 0.001 (0.1%) per year, then the value of that\nfidelity bond is 0.01 BTC^2 which is the same as burning 0.1 BTC. That\nis a relatively small valued bond. It can be increased by locking up\nmore bitcoins for longer (up to and including permanant locking via a\nburner transaction).\n\n## Taker algorithm for choosing makers\n\nI suggest the following taker peer choosing algorithm: obtain the list\nof offers and discard offers which the taker's user deems are too\nexpensive. One of the remaining offers is randomly chosen with weighting\ndetermined by the fidelity bond value. Once an offer is chosen it is\nremoved from the list, and another offer is again randomly chosen, this\nis repeated until the taker has chosen the desired number of\nfidelity-bonded maker's offers.\n\nSome people run makers not for profit but for their own privacy.\nTherefore not all makers should be required to have bonds, because such\nprivacy-makers are useful to include in coinjoins too. We could have\ntaker allow say, an eighth (12.5%), of their coinjoin peers to be makers\nwithout bonds. They can be chosen randomly from the orderbook without\nany weighting based on fidelity bond values. Of course these are easy to\nfake by an adversary so they dont contribute much to sybil resistance.\n\n### Cost of sybil attacks\n\nSee the other document (Cost of sybil attacks) for discussion and\ncalculations on the sybil resistance given by the above maker-choosing\nalgorithm.\n\nIt can be calculated that the fidelity bond system dramatically\nincreases the cost of a sybil attack. With real-world data and realistic\nassumptions we can calculate that a sybil attacker would need to lock up\n30,000-80,000 bitcoins for 6 months, or send 45-120 bitcoins to burner\naddresses to have a good chance of attacking the system by being all the\ncounterparties in everyone's coinjoin.\n\n## Effect of fidelity bonds on CoinJoin fees\n\nSomeone might ask \"why would anyone lock up coins for months or more,\nlet alone burn coins forever, just to run a maker bot\". The only way\nthis would even happen is if makers can generate a higher income that\njustifies the fidelity bond sacrifice. That higher income can only come\nfrom taker's coinjoin fees (or possibly coinswap fees one day). We can\nexpect that makers with higher valued fidelity bonds will demand higher\ncoinjoin fees. So a big question is whether takers will accept paying\nhigher coinjoin fees. I think they will, because right now coinjoin fees\nare only 10-1000 satoshi, and a far biggest cost of coinjoins is the\nminer fee not the coinjoin fee. I'm pretty sure takers will recognize\nthat they get what they pay for, and that additional privacy is well\nworth the cost. Any other takers reading this should definitely let me\nknow what they think.\n\n## Technical ideas\n\nJoinMarket's wallet could also create time-locked addresses. Locktimes\nshould be fixed to be midnight on the first day of each month, then each\npublic key corresponds to 12 addresses per year (1200 addresses per\ncentury) which is very practical to all be monitored as watch-only\naddresses. These wallets can be created offline and could safely hold\ntime-locked bitcoins.\n\nThe timelocked addresses public key can be used to sign an IRC nickname\nproving that the nickname is the real owner of the TXO. OP_RETURN\noutputs used for burning coins can include a pubkey hash used for the\nsame thing.\n\nWe don't want the cold storage keypairs to be held online. We can design\nthe system that the time-locked address keypair is held offline but it\nsigns another key pair which is held online. Every time the IRC bot\nconnects it can use this intermediate keypair to sign the IRC nickname\nproving ownership. The signature from the time-locked address to the\nintermediate keypair can be made to have an expiry date (for example 6\nmonths). This all means that the time-locked bitcoins can be held\noffline but still be used to prove ownership of an IRC nickname.\n\nThe existance of the UTXO of a time-locked coin can be proved by\nrevealing the TXID and vout, which full nodes can use to query the UTXO\nset to check that the coin exists. SPV clients would need a merkle proof\nas well. Burned coins and spent time-locked coins could have their\nexistence proved by sharing the transaction which created them along\nwith a block height and transaction position for an unpruned node, or a\nmerkle proof for a pruned node or SPV client. Note that from the point\nof view of a pruned node, a merkle proof is a fully-verified proof of\nexistance of a transaction. It is not a proof with just SPV-security.\n\n## Links / References\n[1] https://github.com/JoinMarket-Org/joinmarket-clientserver\n[2] https://github.com/JoinMarket-Org/joinmarket/issues/693\n[3] https://en.bitcoin.it/wiki/Fidelity_bonds\n[4] https://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b\n[5]\nhttps://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b#cost-of-sybil-attacks\n[6] First ever mention of fidelity bonds I found. The idea is basically\ninvented by Peter Todd: https://bitcointalk.org/index.php?topic=134827.0\n[7] Old idea for combining fidelity bonds with mixers:\nhttps://bitcointalk.org/index.php?topic=172047.0\n[8] Suggestion that is very close to the fidelity bonds idea. He talks\nabout requiring a deposit from makers, but nobody is able to come up\nwith a way to make such a deposit decentralized and trustless:\nhttps://www.reddit.com/r/Bitcoin/comments/2zc5tc/joinmarket_increase_the_privacy_of_bitcoin_and/ctk37hn/?context=1"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-26T08:10:15",
                "message_text_only": "Hi Chris,\n\nyes, fidelity bonds can impose cost to make sybill attacks more expensive therefore less likely.\nI prefer the flavor with CHECKSEQUENCEVERIFY which imposes opportunity cost, just as effective\nas burning, but is sustainable.\n\nImposing opportunity costs however requires larger time locked amounts than burning and the\nuser might not have sufficient funds to do so. This is however not a restriction but an opportunity\nthat can give rise to an additional market of locking UTXOs in exchange of a payment.\n\nThis would give rise to a transparent interest rate market for Bitcoin an additional huge benefit.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 25, 2019, at 13:47, Chris Belcher via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> JoinMarket[1] can be sybil attacked today at relatively low cost which\n> can destroy its privacy. Bitcoins can be sacrificed with burner outputs\n> and time-locked addresses (also called fidelity bonds), and this can be\n> used to greatly improve JoinMarket's resistance to sybil attacks.\n> \n> With real-world data and realistic assumptions we calculate that under\n> such a fidelity bond system an adversary would need to lock up\n> 30,000-80,000 bitcoins for months, or send 45-120 bitcoins to burner\n> addresses to have a good chance of sybil attacking the system if it were\n> added to JoinMarket.\n> \n> This increased resistance to sybil attacks would most likely cause\n> coinjoin fees to rise. I think the added cost is worth it for the\n> greatly improved privacy, because today miner fees are the biggest cost\n> to JoinMarket takers not coinjoin fees which are very low. Users should\n> definitely share their opinion on fees after reading the document.\n> \n> ## Introduction\n> \n> JoinMarket creates a market for coinjoins, allowing anyone to create\n> equal-amount coinjoins for any amount they want at any time they want.\n> In return they pay a fee for the liquidity made available to them. The\n> project has existed since 2015 and has probably created hundreds of\n> thousands of coinjoins since then. Today there is available liquidity\n> for creating coinjoins with amounts up to about 400 btc per coinjoin output.\n> \n> ### Sybil attacks\n> \n> JoinMarket, like many other schemes where participants are free to\n> anonymously enter, can be targetted by sybil attacks. In JoinMarket this\n> would work by an attacker running lots of maker bots which attempt to be\n> all the makers in every coinjoin. If successful the attacker would have\n> enough information unmix every coinjoin.\n> \n> One way to solve the problem of sybil attacks is centralization. For\n> example coinjoins could be constructed on a centralized server. Then\n> random anonymous participants cant sybil attack because they can't\n> control the coinjoin construction, but this comes at the cost that the\n> server can sybil attack very easily. So this solution is probably a bad\n> tradeoff.\n> \n> In general, sybil attacks are solved by making them expensive. For\n> example, bitcoin mining resists sybil attacks because it requires a\n> provable sacrifice of electricity to mine. A bitcoin user can calculate\n> the actual monetary value that an attacker must spend in order to\n> reverse their transaction.\n> \n> Likewise in JoinMarket such a sybil attack is not free either as the\n> attacker needs to own enough bitcoins to run enough maker bots for all\n> the coinjoins.\n> \n> ### Today's low cost for sybil attacks\n> \n> A paper on JoinMarket [M\u00f6ser, Malte and Rainer B\u00f6hme. \u201cJoin Me on a\n> Market for Anonymity.\u201d (2016).] calculates the requirement of such a\n> sybil attack in 2016 to be just 32,000 USD. According to the paper such\n> an attack would succeed 90% of the time and the investment is\n> recoverable afterwards so that figure for the requirement isn't even a\n> true cost.\n> \n> JoinMarket has been improved since 2016 and more makers have joined, so\n> the true requirement is perhaps 2x or 3x higher today, but it is still\n> relatively low.\n> \n> Even with future improvements like fixing issue #693 [2] the requirement\n> of a sybil attack would probably only rise another 2x.\n> \n> Apart from the cost to sybil attack being low, there is also the odd\n> situation that smaller coinjoin amounts receive less sybil protection\n> than large ones. It costs 100x less to sybil attack a transaction of 0.1\n> btc than one of 10 btc. Why should smaller amounts receive less\n> sybil-resistance and therefore less privacy?\n> \n> ### Liquidity\n> \n> When creating this project, it was expected that many more people would\n> enter the market as makers and so the cost of a sybil attack would be\n> very high. That has not happened. One reason is that everyone who wants\n> to create a coinjoin is able to even for large amounts. The fundamental\n> problem is that takers are paying-for and getting liquidity, but not\n> necessarily sybil-resistance.\n> \n> Another smaller reason for the low cost of sybil attacks is that many\n> people don't want to store too many bitcoins on an computer connected to\n> the internet.\n> \n> What is needed is a way to increase the cost of running in a maker in a\n> way that retains the anonymity and is attractive to long-term holders of\n> bitcoin. This can be done using time-locked addresses.\n> \n> ## Fidelity bonds\n> \n> In bitcoin, a fidelity bond [3] is a mechanism where bitcoin value is\n> deliberately sacrificed to make a cryptographic identity expensive to\n> obtain. The sacrifice is done in a way that can be proven to a third party.\n> \n> A way to create a fidelity bond is to burn an amount of bitcoins by\n> sending to a OP_RETURN output. Another kind is time-locked addresses\n> created using OP_CHECKLOCKTIMEVERIFY where the valuable thing being\n> sacrificed is time rather than money, but the two are related because of\n> the time-value-of-money.\n> \n> Under this system, makers would sacrifice an amount of bitcoins and\n> publish a proof along with their coinjoin offers. Takers would choose\n> maker offers based on the sacrificed amount (as well as other factors),\n> knowing that a sybil attacker would also have to sacrifice a certain\n> amount of coins in order to unmix the taker's coinjoins. The sacrifice\n> would be an objective measurement that can't be faked and which can be\n> verified by anybody (just like, for example PoW mining)\n> \n> Note that a long-term holder (or hodler) of bitcoins can buy time-locked\n> fidelity bonds essentially for free, assuming they never intended to\n> transact with their coins much anyway. A long-term holder probably won't\n> want to attack a system like JoinMarket which makes his own investment\n> coins more private and more fungible.\n> \n> ### Fidelity bonds in cold storage\n> \n> The private keys of fidelity bonds can be kept offline. Signatures\n> potentially only need to be made when the timelock expires (every 6\n> months for example), or only once in the case of OP_RETURN burned coins.\n> This allows JoinMarket's sybil resistance to increase without the hot\n> wallet risk.\n> \n> Burned coin signatures should still have a lifetime, in case the private\n> key associated with the IRC nick (which is online) is stolen, so that\n> the thief of that privkey can't impersonate the maker indefinitely. The\n> signature linking the burned coins and IRC nick could expire after\n> perhaps 6 months.\n> \n> ### Anonymity\n> \n> Under this scheme makers would need to publish the transactions of their\n> fidelity bonds to the entire world. Those transactions could be subject\n> to blockchain analysis. So before makers do this they should make sure\n> their coins are anonymous (possibly by mixing with JoinMarket). Also if\n> they ever want to use their coins for something else apart from fidelity\n> bonds they should mix them.\n> \n> ### Value of a fidelity bond\n> \n> See the other document (Financial mathematics of joinmarket fidelity\n> bonds)[4] for a formula expressing the value of a fidelity bond.\n> \n> The value of a fidelity bond made by sending V bitcoins to a burner\n> address is:\n> \n>    V^2\n> \n> The amount of bitcoins is squared to get the fidelity bond value. This\n> has the effect that economic-rational makers have a strong incentive to\n> lump up all their coin sacrifices together into one maker bot, not to\n> split it up over several bots.\n> \n> The value of a fidelity bond made by locking up V bitcoins in a\n> time-locked address for time period T is:\n> \n>    V^2 (exp(rT) - 1)^2\n> \n> To get an idea of the numbers, if we burn 2 btc then the value of the\n> fidelity bond is 4 BTC^2. If we lock up 100 BTC for one year, and have a\n> bitcoin interest rate r = 0.001 (0.1%) per year, then the value of that\n> fidelity bond is 0.01 BTC^2 which is the same as burning 0.1 BTC. That\n> is a relatively small valued bond. It can be increased by locking up\n> more bitcoins for longer (up to and including permanant locking via a\n> burner transaction).\n> \n> ## Taker algorithm for choosing makers\n> \n> I suggest the following taker peer choosing algorithm: obtain the list\n> of offers and discard offers which the taker's user deems are too\n> expensive. One of the remaining offers is randomly chosen with weighting\n> determined by the fidelity bond value. Once an offer is chosen it is\n> removed from the list, and another offer is again randomly chosen, this\n> is repeated until the taker has chosen the desired number of\n> fidelity-bonded maker's offers.\n> \n> Some people run makers not for profit but for their own privacy.\n> Therefore not all makers should be required to have bonds, because such\n> privacy-makers are useful to include in coinjoins too. We could have\n> taker allow say, an eighth (12.5%), of their coinjoin peers to be makers\n> without bonds. They can be chosen randomly from the orderbook without\n> any weighting based on fidelity bond values. Of course these are easy to\n> fake by an adversary so they dont contribute much to sybil resistance.\n> \n> ### Cost of sybil attacks\n> \n> See the other document (Cost of sybil attacks) for discussion and\n> calculations on the sybil resistance given by the above maker-choosing\n> algorithm.\n> \n> It can be calculated that the fidelity bond system dramatically\n> increases the cost of a sybil attack. With real-world data and realistic\n> assumptions we can calculate that a sybil attacker would need to lock up\n> 30,000-80,000 bitcoins for 6 months, or send 45-120 bitcoins to burner\n> addresses to have a good chance of attacking the system by being all the\n> counterparties in everyone's coinjoin.\n> \n> ## Effect of fidelity bonds on CoinJoin fees\n> \n> Someone might ask \"why would anyone lock up coins for months or more,\n> let alone burn coins forever, just to run a maker bot\". The only way\n> this would even happen is if makers can generate a higher income that\n> justifies the fidelity bond sacrifice. That higher income can only come\n> from taker's coinjoin fees (or possibly coinswap fees one day). We can\n> expect that makers with higher valued fidelity bonds will demand higher\n> coinjoin fees. So a big question is whether takers will accept paying\n> higher coinjoin fees. I think they will, because right now coinjoin fees\n> are only 10-1000 satoshi, and a far biggest cost of coinjoins is the\n> miner fee not the coinjoin fee. I'm pretty sure takers will recognize\n> that they get what they pay for, and that additional privacy is well\n> worth the cost. Any other takers reading this should definitely let me\n> know what they think.\n> \n> ## Technical ideas\n> \n> JoinMarket's wallet could also create time-locked addresses. Locktimes\n> should be fixed to be midnight on the first day of each month, then each\n> public key corresponds to 12 addresses per year (1200 addresses per\n> century) which is very practical to all be monitored as watch-only\n> addresses. These wallets can be created offline and could safely hold\n> time-locked bitcoins.\n> \n> The timelocked addresses public key can be used to sign an IRC nickname\n> proving that the nickname is the real owner of the TXO. OP_RETURN\n> outputs used for burning coins can include a pubkey hash used for the\n> same thing.\n> \n> We don't want the cold storage keypairs to be held online. We can design\n> the system that the time-locked address keypair is held offline but it\n> signs another key pair which is held online. Every time the IRC bot\n> connects it can use this intermediate keypair to sign the IRC nickname\n> proving ownership. The signature from the time-locked address to the\n> intermediate keypair can be made to have an expiry date (for example 6\n> months). This all means that the time-locked bitcoins can be held\n> offline but still be used to prove ownership of an IRC nickname.\n> \n> The existance of the UTXO of a time-locked coin can be proved by\n> revealing the TXID and vout, which full nodes can use to query the UTXO\n> set to check that the coin exists. SPV clients would need a merkle proof\n> as well. Burned coins and spent time-locked coins could have their\n> existence proved by sharing the transaction which created them along\n> with a block height and transaction position for an unpruned node, or a\n> merkle proof for a pruned node or SPV client. Note that from the point\n> of view of a pruned node, a merkle proof is a fully-verified proof of\n> existance of a transaction. It is not a proof with just SPV-security.\n> \n> ## Links / References\n> [1] https://github.com/JoinMarket-Org/joinmarket-clientserver\n> [2] https://github.com/JoinMarket-Org/joinmarket/issues/693\n> [3] https://en.bitcoin.it/wiki/Fidelity_bonds\n> [4] https://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b\n> [5]\n> https://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b#cost-of-sybil-attacks\n> [6] First ever mention of fidelity bonds I found. The idea is basically\n> invented by Peter Todd: https://bitcointalk.org/index.php?topic=134827.0\n> [7] Old idea for combining fidelity bonds with mixers:\n> https://bitcointalk.org/index.php?topic=172047.0\n> [8] Suggestion that is very close to the fidelity bonds idea. He talks\n> about requiring a deposit from makers, but nobody is able to come up\n> with a way to make such a deposit decentralized and trustless:\n> https://www.reddit.com/r/Bitcoin/comments/2zc5tc/joinmarket_increase_the_privacy_of_bitcoin_and/ctk37hn/?context=1\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190726/1ca45f01/attachment-0001.sig>"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2019-07-26T09:38:38",
                "message_text_only": "\u0412 Fri, 26 Jul 2019 10:10:15 +0200\nTamas Blummer via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrote:\n\n> Imposing opportunity costs however requires larger time locked\n> amounts than burning and the user might not have sufficient funds to\n> do so. This is however not a restriction but an opportunity that can\n> give rise to an additional market of locking UTXOs in exchange of a\n> payment.\n> \n> This would give rise to a transparent interest rate market for\n> Bitcoin an additional huge benefit.\n\nWouldn't that 'locked utxo rent' market just drive the cost of attack\ndown to manageable levels for the attacker ?\n\nThe owner of the locked utxo can derive potential profit from it by\nbeing a maker, and then the profit will be reduced by operational\nexpenses of running a maker operation.\n\nThe owner of utxo can just 'outsource' that task to someone, and pay\nsome fee for the convenience.\n\nIn effect, the owner would be renting out that utxo for the price of\n\n<maker_profit> - <operational_expenses> - <convenience_fee>\n\nIf the attacker is the entity who provides this 'maker outsourcing',\nand it captures significant portion of that maker-outsourcing/utxo-rent\nmarket, it can even receive some profit from the convenience fee, while\ndeanonymizing the joins.\n\nAnd with pseudonymous entities, you cannot be sure how much of that\nmarket the attacker controls.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 833 bytes\nDesc: \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190726/74c188b9/attachment.sig>"
            },
            {
                "author": "Chris Belcher",
                "date": "2019-07-30T21:39:14",
                "message_text_only": "On 26/07/2019 10:38, Dmitry Petukhov via bitcoin-dev wrote:\n> \n> If the attacker is the entity who provides this 'maker outsourcing',\n> and it captures significant portion of that maker-outsourcing/utxo-rent\n> market, it can even receive some profit from the convenience fee, while\n> deanonymizing the joins.\n> \n> And with pseudonymous entities, you cannot be sure how much of that\n> market the attacker controls.\n> \n\nNo the attacker does not. I believe renting out UTXO proofs does not\nchange the privacy properties, because of the quadratic term in the\nfidelity bond formula. This is where a sacrifice of V bitcoins creates a\nbond of value V^2. The formula provides a strong incentive for\nprofit-motivated makers to use all their fidelity bond coins with just\none maker, not spread them out over many makers. JoinMarket takers\nalways use multiple makers, so a single maker can never deanonymize a\ncoinjoin just they get chosen by takers a lot. (But they would make\nloads of money in coinjoin fees, which should encourage other makers to\nalso sacrifice coins in order to compete with them and capture some of\nthat fee income)\n\nIf a sybil attacker wants to run multiple makers for the purpose of\ndeanomyization then they will take a substantial quadratic hit in their\neffectiveness. This is explored the other document \"Financial\nmathematics of JoinMarket fidelity bonds\"\nhttps://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b\n\n\nRegards\nCB"
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2019-07-31T15:50:18",
                "message_text_only": "\u0412 Tue, 30 Jul 2019 22:39:14 +0100\nChris Belcher via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrote:\n\n> This is where a sacrifice of V bitcoins creates a\n> bond of value V^2. The formula provides a strong incentive for\n> profit-motivated makers to use all their fidelity bond coins with just\n> one maker, not spread them out over many makers.\n\nThe attacker derives additional value from the use of\nlocked utxo - the deanonimyzation capabilities.\n\nAn entity M can use all of its locked coins to run a maker, and then\nearn value X. It will also incur some operational expenses in the course\nof running the maker, so the profit will be less than X.\n\nIf these locked coins are given to the attacker A as a package, an\nattacker can derive a value of X+D where D is a value of increased\ndeanonymization capabilities for an attacker. Operational expenses\nfor an attacker are the same as before (without timelocked bonds),\nbecause they need to operate a lot of makers either way.\n\nIf M is profit-driven and non-ideological, it can rent out all of its\ncoins to A as a package, for the price X, and get the same value without\nrunning a maker and dedicating any resources and time to it, not\nincurring any operatinal expenses (thus having a bigger profit in the\nend).\n\nAttacker A will run a maker with M's coins, get profit X, pay X to M,\nget increased deanonymization capabilities. \n\nIf renting out of utxo is done in a way that the owner always gets X\nafter the lock expires, the operation will be riskless for the owner.\nThe attacker will need to lock amount X along with owner's coins, but\nhopefully makes X back by running a maker operation. \n\nThe price for renting out the coins will be determined on the size of\nthe 'coin package', so it will not be feasible for the owners of the\ncoins to rent them out separately.\n\nAn attacker can even rent coins from several entities and combine them\nto create a more 'powerful' maker. If I understand correctly, such\n'powerful' maker can have bigger profit than two less 'powerful'\nmakers. It seems like a centralization risk to me."
            },
            {
                "author": "David A. Harding",
                "date": "2019-07-27T19:34:17",
                "message_text_only": "On Thu, Jul 25, 2019 at 12:47:54PM +0100, Chris Belcher via bitcoin-dev wrote:\n> A way to create a fidelity bond is to burn an amount of bitcoins by\n> sending to a OP_RETURN output. Another kind is time-locked addresses\n> created using OP_CHECKLOCKTIMEVERIFY where the valuable thing being\n> sacrificed is time rather than money, but the two are related because of\n> the time-value-of-money.\n\nTimelocking bitcoins, especially for long periods, carries some special\nrisks in Bitcoin:\n\n1. Inability to sell fork coins, also creating an inability to influence\nthe price signals that help determine the outcome of chainsplits.\n\n2. Possible inability to transition to new security mechanisms if\na major weakness is discovered in ECC or a hash function.\n\nAn alternative to timelocks might be coin age---the value of a UTXO\nmultiplied by the time since that UTXO was confirmed.  Coin age may be\neven harder for an attacker to acquire given that it is a measure of\npast patience rather than future sacrifice.  It also doesn't require\nusing any particular script and so is flexible no matter what policy the\ncoin owner wants to use (especially if proof-of-funds signatures are\ngenerated using something like BIP322).\n\nAny full node (archival or pruned) can verify coin age using the UTXO\nset.[1]  Unlike script-based timelock (CLTV or CSV), there is no current\nSPV-level secure way to prove to lite clients that an output is still\nunspent, however such verification may be possible within each lite\nclient's own security model related to transaction withholding attacks:\n\n- Electrum-style clients can poll their server to see if a particular\n  UTXO is unspent.\n\n- BIP158 users who have saved their past filters to disk can use them to\n  determine which blocks subsequent to the one including the UTXO may\n  contain a spend from it.  However, since a UTXO can be spent in the\n  same block, they'd always need to download the block containing the\n  UTXO (alternatively, the script could contain a 1-block CSV delay\n  ensuring any spend occurred in a later block).  If BIP158 filters\n  become committed at some point, this mechanism is upgraded to SPV-level\n  security.\n\n> Note that a long-term holder (or hodler) of bitcoins can buy time-locked\n> fidelity bonds essentially for free, assuming they never intended to\n> transact with their coins much anyway.\n\nThis is the thing I most like about the proposal.  I suspect most\nhonest makers are likely to have only a small portion of their funds\nunder JoinMarket control, with the rest sitting idle in a cold wallet.\nGiving makers a way to communicate that they fit that user template\nwould indeed seem to provide significant sybil resistance.\n\n-Dave\n\n[1] See, bitcoin-cli help gettxout"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-28T14:17:35",
                "message_text_only": "Hi David,\n\nAquiring coin age is hard not only for an attacker but for any user that\nhappened to move his funds lately.\n\nEven if coin age is available, proofs of using it to fund a particular operation\nare not sybill resistant. Only a centralized service would know for sure that\nproof is only used once and such centralization would defeat the purpose.\n\nIn contrast time locking such that it is uniquely linked with the operation\nis always possible as funds could also be rented to lock in a decentralized manner.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 27, 2019, at 21:34, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Thu, Jul 25, 2019 at 12:47:54PM +0100, Chris Belcher via bitcoin-dev wrote:\n>> A way to create a fidelity bond is to burn an amount of bitcoins by\n>> sending to a OP_RETURN output. Another kind is time-locked addresses\n>> created using OP_CHECKLOCKTIMEVERIFY where the valuable thing being\n>> sacrificed is time rather than money, but the two are related because of\n>> the time-value-of-money.\n> \n> Timelocking bitcoins, especially for long periods, carries some special\n> risks in Bitcoin:\n> \n> 1. Inability to sell fork coins, also creating an inability to influence\n> the price signals that help determine the outcome of chainsplits.\n> \n> 2. Possible inability to transition to new security mechanisms if\n> a major weakness is discovered in ECC or a hash function.\n> \n> An alternative to timelocks might be coin age---the value of a UTXO\n> multiplied by the time since that UTXO was confirmed.  Coin age may be\n> even harder for an attacker to acquire given that it is a measure of\n> past patience rather than future sacrifice.  It also doesn't require\n> using any particular script and so is flexible no matter what policy the\n> coin owner wants to use (especially if proof-of-funds signatures are\n> generated using something like BIP322).\n> \n> Any full node (archival or pruned) can verify coin age using the UTXO\n> set.[1]  Unlike script-based timelock (CLTV or CSV), there is no current\n> SPV-level secure way to prove to lite clients that an output is still\n> unspent, however such verification may be possible within each lite\n> client's own security model related to transaction withholding attacks:\n> \n> - Electrum-style clients can poll their server to see if a particular\n>  UTXO is unspent.\n> \n> - BIP158 users who have saved their past filters to disk can use them to\n>  determine which blocks subsequent to the one including the UTXO may\n>  contain a spend from it.  However, since a UTXO can be spent in the\n>  same block, they'd always need to download the block containing the\n>  UTXO (alternatively, the script could contain a 1-block CSV delay\n>  ensuring any spend occurred in a later block).  If BIP158 filters\n>  become committed at some point, this mechanism is upgraded to SPV-level\n>  security.\n> \n>> Note that a long-term holder (or hodler) of bitcoins can buy time-locked\n>> fidelity bonds essentially for free, assuming they never intended to\n>> transact with their coins much anyway.\n> \n> This is the thing I most like about the proposal.  I suspect most\n> honest makers are likely to have only a small portion of their funds\n> under JoinMarket control, with the rest sitting idle in a cold wallet.\n> Giving makers a way to communicate that they fit that user template\n> would indeed seem to provide significant sybil resistance.\n> \n> -Dave\n> \n> [1] See, bitcoin-cli help gettxout\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190728/496e9d8c/attachment-0001.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2019-07-28T18:29:34",
                "message_text_only": "In summary I see three mechansims of making use costly:\n\n1. burn\n2. time locked funds, locker will incure opportunity cost\n3. proven coin age, holder did incure opportunity cost\n\nI dislike burn as usage of a service is infinite while coin supply is finite.\n\nI prefer time locked funds over coin age as locked funds do not need proof of\nunspentness, they can not be spent. Therefore time locked funds can be sufficiently\nproven with SPV. The user of the service could post SPV proof with the request.\n\nRegards,\n\nTamas Blummer\n\n> On Jul 27, 2019, at 21:34, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Thu, Jul 25, 2019 at 12:47:54PM +0100, Chris Belcher via bitcoin-dev wrote:\n>> A way to create a fidelity bond is to burn an amount of bitcoins by\n>> sending to a OP_RETURN output. Another kind is time-locked addresses\n>> created using OP_CHECKLOCKTIMEVERIFY where the valuable thing being\n>> sacrificed is time rather than money, but the two are related because of\n>> the time-value-of-money.\n> \n> Timelocking bitcoins, especially for long periods, carries some special\n> risks in Bitcoin:\n> \n> 1. Inability to sell fork coins, also creating an inability to influence\n> the price signals that help determine the outcome of chainsplits.\n> \n> 2. Possible inability to transition to new security mechanisms if\n> a major weakness is discovered in ECC or a hash function.\n> \n> An alternative to timelocks might be coin age---the value of a UTXO\n> multiplied by the time since that UTXO was confirmed.  Coin age may be\n> even harder for an attacker to acquire given that it is a measure of\n> past patience rather than future sacrifice.  It also doesn't require\n> using any particular script and so is flexible no matter what policy the\n> coin owner wants to use (especially if proof-of-funds signatures are\n> generated using something like BIP322).\n> \n> Any full node (archival or pruned) can verify coin age using the UTXO\n> set.[1]  Unlike script-based timelock (CLTV or CSV), there is no current\n> SPV-level secure way to prove to lite clients that an output is still\n> unspent, however such verification may be possible within each lite\n> client's own security model related to transaction withholding attacks:\n> \n> - Electrum-style clients can poll their server to see if a particular\n>  UTXO is unspent.\n> \n> - BIP158 users who have saved their past filters to disk can use them to\n>  determine which blocks subsequent to the one including the UTXO may\n>  contain a spend from it.  However, since a UTXO can be spent in the\n>  same block, they'd always need to download the block containing the\n>  UTXO (alternatively, the script could contain a 1-block CSV delay\n>  ensuring any spend occurred in a later block).  If BIP158 filters\n>  become committed at some point, this mechanism is upgraded to SPV-level\n>  security.\n> \n>> Note that a long-term holder (or hodler) of bitcoins can buy time-locked\n>> fidelity bonds essentially for free, assuming they never intended to\n>> transact with their coins much anyway.\n> \n> This is the thing I most like about the proposal.  I suspect most\n> honest makers are likely to have only a small portion of their funds\n> under JoinMarket control, with the rest sitting idle in a cold wallet.\n> Giving makers a way to communicate that they fit that user template\n> would indeed seem to provide significant sybil resistance.\n> \n> -Dave\n> \n> [1] See, bitcoin-cli help gettxout\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190728/4428e34b/attachment-0001.sig>"
            },
            {
                "author": "Chris Belcher",
                "date": "2019-07-30T21:27:17",
                "message_text_only": "On 27/07/2019 20:34, David A. Harding wrote:\n> \n> Timelocking bitcoins, especially for long periods, carries some special\n> risks in Bitcoin:\n> \n> 1. Inability to sell fork coins, also creating an inability to influence\n> the price signals that help determine the outcome of chainsplits.\n> \n> 2. Possible inability to transition to new security mechanisms if\n> a major weakness is discovered in ECC or a hash function.\n> \n\nFar future locks are problematic. In my proposal I've only considered\nlocked coins for only 6 months because of exactly these reasons. The\nmarket competition between airdrops should still exist after 6 months so\nlockers will still get a chance to sell their airdrops. And any\nECC-alternative or hash-function-alternative fork will probably take a\ncouple of months to be designed, implemented and deployed as well,\ngiving a chance for lockers to move coins.\n\n\n> An alternative to timelocks might be coin age---the value of a UTXO\n> multiplied by the time since that UTXO was confirmed.  Coin age may be\n> even harder for an attacker to acquire given that it is a measure of\n> past patience rather than future sacrifice.  It also doesn't require\n> using any particular script and so is flexible no matter what policy the\n> coin owner wants to use (especially if proof-of-funds signatures are\n> generated using something like BIP322).\n\nI'm becoming more and more convinced that coin age is also a valid\nmethod of proving a sacrifice. Using coin age also has a benefit that\nless block space is used, because using timelocks requires a new\non-chain transaction to be made every 6 months or whatever the locking\nperiod is.\n\nPerhaps JoinMarket should accept all three methods of proving a\nsacrifice: burning, timelocking and aging. I could imagine that makers\nwould first lock coins for 6 months to create a fidelity bond they could\nimmediately use, and after the timelock expires leave that coin unspent\nand use its age as the fidelity bond.\n\nFor what its worth, I mostly considered burning coins because the maths\nfor it is easy (the value of such a bond is just V^2), and because it\nprovides a boundary condition (locking up coins for infinity time is the\nsame as burning them). I doubt anybody will actually do it in practice.\n\n\n> - BIP158 users who have saved their past filters to disk can use them to\n>   determine which blocks subsequent to the one including the UTXO may\n>   contain a spend from it.  However, since a UTXO can be spent in the\n>   same block, they'd always need to download the block containing the\n>   UTXO (alternatively, the script could contain a 1-block CSV delay\n>   ensuring any spend occurred in a later block).  If BIP158 filters\n>   become committed at some point, this mechanism is upgraded to SPV-level\n>   security.\n\nThis scheme could be attacked using address reuse. An attacker could\ncreate an aged coin on a heavily-reused address, which would force an\nSPV client using this scheme to download all the blocks which contain\nthis reused address which could result in many gigabytes of extra\ndownload requirement.\n\nSo to fix this: a condition for aged coins is that their address has not\nbeen reused, if the coin is on a reused address then the value of the\nfidelity bond becomes zero."
            },
            {
                "author": "David A. Harding",
                "date": "2019-07-31T17:59:40",
                "message_text_only": "On Tue, Jul 30, 2019 at 10:27:17PM +0100, Chris Belcher wrote:\n> And any ECC-alternative or hash-function-alternative fork will\n> probably take a couple of months to be designed, implemented and\n> deployed as well, giving a chance for lockers to move coins.\n\nProbably.  A stronger form of my argument would apply to single-wallet\n(or wallet library) problems of the type we see with depressing\nregularity, such as reused nonces, weak nonces, brainwallets, and weak\nHD seeds.  In some cases, this leads directly to theft and loss---but in\nothers, the problem is detected by a friendly party and funds can be\nmoved to a secure address before the problem is publicly disclosed and\nattackers try to exploit it themselves.\n\nIf funds are timelocked, there's a greater chance that the issue will\nbecome publicly known and easily exploitable while the funds are\ninaccessible.  Then, at the time the lock expires, it'll become a race\nbetween attackers and the coin owner to see who can get a spending\ntransaction confirmed first.\n\n> This scheme could be attacked using address reuse. An attacker could\n> create an aged coin on a heavily-reused address, which would force an\n> SPV client using this scheme to download all the blocks which contain\n> this reused address which could result in many gigabytes of extra\n> download requirement.\n\nGood point.  There's also the case that some Electrum-style indexers\ndon't index more than a certain number of outputs sent to the same\naddress.  E.g., I believe Electrs[1] stops indexing by default after 100\noutputs to the same address.\n\n[1] https://github.com/romanz/electrs\n\n> So to fix this: a condition for aged coins is that their address has not\n> been reused, if the coin is on a reused address then the value of the\n> fidelity bond becomes zero.\n\nI don't think that works.  If Bob sends 100 BTC to bc1foo and then uses\nthat UTXO as his fidelity bond, Mallory can subsequently send some dust\nto bc1foo to invalidate Bob's bond.\n\nTo use compact block filters in a way that prevents spamming, I think\nwe'd need a different filter type that allowed you to filter by\noutpoint.\n\n-Dave"
            }
        ],
        "thread_summary": {
            "title": "Improving JoinMarket's resistance to sybil attacks using fidelity bonds",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Tamas Blummer",
                "Dmitry Petukhov",
                "David A. Harding"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 48798
        }
    },
    {
        "title": "[bitcoin-dev] Proposed Extensions to BIP 174 for Future Extensibility",
        "thread_messages": [
            {
                "author": "Andrew Chow",
                "date": "2019-07-31T01:13:46",
                "message_text_only": "Hi All,\n\nI would like to propose some types that allow for BIP 174 PSBT to be\nextended more in the future.\n\n\nFirstly, I would like to propose that some types be reserved for\nproprietary use. These proprietary use types are, in general, for\nprivate use by individuals and organizations who want to use PSBT in\ntheir processes. These are usefule when there are additional data that\nthey need attached to a PSBT but such data are not useful (or available)\nfor the general public.\n\nThese types will be guaranteed to not be used by the public\nspecification and there is no expectation that any publicly available\nsoftware be able to understand any specific meanings of these types.\nThese types should be used for internal processes only.\n\nThe types I would like to reserve for proprietary use are the 15 types\nfrom 0xF0 to 0xFE inclusive. These 15 type values will be the same for\nglobal, per-input, and per-output types. If 15 types are not enough,\nadditional types can be obtained using the multi-byte type method\ndescribed later.\n\n\nNext, I would like to propose a global version type and field. The\nversion type is 0xEF with only the type as the key, and the value is a\n32-bit unsigned little endian integer representing the version number. A\nPSBT without a version number is to be considered version 0. If a parser\nsees a version number that it does not understand, it should exit\nimmediately as the PSBT will contain types that are not safe to ignore.\n\nThis version number is a safeguard in the event that a backwards\nincompatible change is introduce to PSBT. While PSBT is designed and\nintended to be forwards compatible by allowing parsers to ignore types\nthat they do not understand, it is possible that at ype is added in the\nfuture which breaks this assumption and it would be unsafe for a type to\nbe ignored.\n\nUpdaters and combiners that need to add a version number to a PSBT\nshould use the highest version number required. For example, if a\ncombiner sees two PSBTs for the same transaction, one with version 0,\nand the other with version 1, then it should combine them and produce a\nPSBT with version 1. If an updater is updating a PSBT and needs to add a\nfield that is only available in version 1, then it should set the PSBT\nversion number to 1 unless a version higher than that is already specified.\n\nIt is not expected that the version number will ever be used. We try to\nmake PSBT fields safe to ignore. The version number is only being\nincluded here as a safeguard in the event that breaking compatibilty is\nrequired.\n\n\nLastly, I would like to propose the canonical method for mult-byte\ntypes. We designate a specific type to indicate that the type is\nmultiple bytes. When such types are observed, parsers should move onto\nthe next byte and interpret that as the type, keeping in mind the number\nof bytes that were read in for the type.\n\nI propose that we use 0xFF as this designated type. When a parser sees\nan 0xFF value as the type, it reads the next byte as being part of the\ntype. So two byte types will be of the form 0xFFXX. This method allows\nus to do a prefix match in order to quickly identify the type being\nused. For types with more bytes, simply use another 0xFF byte. So three\nbyte types would be of the form 0xFFFFXX, four byte, 0xFFFFFFXX, and so\non. When multi-byte types are specified in the BIP, they should be\nspecified in this full length form, i.e. two byte types as 0xFFXX.\n\nThe same mechanism can be used for the proprietary use types, just with\na different value as the designated multi-byte indicator. For example,\none could use 0xFE as the designated type as that is in the proprietary\ntypes range. Of course any type within the proprietary type range could\nbe used as the indicator, it is up to the users to determine this\nthemselves.\n\nWhile other methods of indicating multiple bytes and lengths may be more\nspace efficient and allow us to have more types represented in a smaller\nspace, I am choosing this method because of its simplicity. This is easy\nto understand and implement. Furthermore, I do not expect that we will\nuse so many types. I don't think that we will need to have more than one\nbyte types for a very long time.\n\n\nPlease let me know your thoughts on these extensions. I will open a PR\nto the bips repo to add these to BIP 174 if there are no objections.\n\n\nAndrew Chow"
            },
            {
                "author": "jan matejek",
                "date": "2019-07-31T14:32:00",
                "message_text_only": "hello,\n\nOn 31. 07. 19 3:13, Andrew Chow via bitcoin-dev wrote:\n> Lastly, I would like to propose the canonical method for mult-byte\n> types. We designate a specific type to indicate that the type is\n> multiple bytes. When such types are observed, parsers should move onto\n> the next byte and interpret that as the type, keeping in mind the number\n> of bytes that were read in for the type.\n\nwhy not use Bitcoin compact uint, which most PSBT consumers already\nimplement?\n\nregards\nm."
            },
            {
                "author": "Dmitry Petukhov",
                "date": "2019-07-31T16:19:48",
                "message_text_only": "\u0412 Wed, 31 Jul 2019 01:13:46 +0000\nAndrew Chow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrote:\n\n> Firstly, I would like to propose that some types be reserved for\n> proprietary use. These proprietary use types are, in general, for\n> private use by individuals and organizations who want to use PSBT in\n> their processes. These are usefule when there are additional data that\n> they need attached to a PSBT but such data are not useful (or\n> available) for the general public.\n\nI think private formats should have at least a basic format: they\nshould start with a prefix. This way different prviate formats can be\ndistinguished by this prefix, and there will be no risk of\nunintentional confusion.\n\nPrivate types can start with the size of the prefix, and then\norganization can choose any prefix they like, or no prefix, if\nthe size is of the prefix is 0 (means they are fine with possible\nconflicts with other empty-prefix private types)\n\n> Lastly, I would like to propose the canonical method for mult-byte\n> types. We designate a specific type to indicate that the type is\n> multiple bytes. When such types are observed, parsers should move onto\n> the next byte and interpret that as the type, keeping in mind the\n> number of bytes that were read in for the type.\n> \n> I propose that we use 0xFF as this designated type. When a parser sees\n> an 0xFF value as the type, it reads the next byte as being part of the\n> type. So two byte types will be of the form 0xFFXX. This method allows\n> us to do a prefix match in order to quickly identify the type being\n> used. For types with more bytes, simply use another 0xFF byte. So\n> three byte types would be of the form 0xFFFFXX, four byte,\n> 0xFFFFFFXX, and so on. When multi-byte types are specified in the\n> BIP, they should be specified in this full length form, i.e. two byte\n> types as 0xFFXX.\n\nWhy not just say that the types should be encoded as 'compact size\nunsigned integer' ? This format for variable length integer encoding is\nalready used in the BIP for other fields, and thus will not add any\nadditional complexity to the parsing."
            },
            {
                "author": "Andrew Chow",
                "date": "2019-07-31T19:16:36",
                "message_text_only": "Hi,\n\nOn 7/31/19 12:19 PM, Dmitry Petukhov wrote:\n> \n> I think private formats should have at least a basic format: they\n> should start with a prefix. This way different prviate formats can be\n> distinguished by this prefix, and there will be no risk of\n> unintentional confusion.\n> \n> Private types can start with the size of the prefix, and then\n> organization can choose any prefix they like, or no prefix, if\n> the size is of the prefix is 0 (means they are fine with possible\n> conflicts with other empty-prefix private types)\n> \n\nI don't think that should something that is required for people to do,\nbut perhaps it can be something that is strongly recommended and\nsuggested in the BIP itself.\n\n> \n> Why not just say that the types should be encoded as 'compact size\n> unsigned integer' ? This format for variable length integer encoding is\n> already used in the BIP for other fields, and thus will not add any\n> additional complexity to the parsing.\n> \n\nOn 7/31/19 10:32 AM, jan matejek via bitcoin-dev wrote:>\n>\n> why not use Bitcoin compact uint, which most PSBT consumers already\n> implement?\n>\n\nThere are a few issues with using a compact size uint. The main issue is\nthat it doesn't translate well to the proprietary use types. If we used\nCSUint for the type, then all of type values for proprietary use need to\nbe reserved instead of allowing them to be infinitely expanded from the\ninitial set of proprietary use types.\n\nThere is also the fact that CSUints are malleable as the same value can\nbe represented in many different ways, just with different amounts of\nleading zeroes. But I suppose that isn't really that big of an issue.\n\nI am not opposed to using a CSUint, I just felt that it made things a\nbit harder and was unnecessary.\n\n\nAndrew"
            }
        ],
        "thread_summary": {
            "title": "Proposed Extensions to BIP 174 for Future Extensibility",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Chow",
                "Dmitry Petukhov",
                "jan matejek"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8676
        }
    },
    {
        "title": "[bitcoin-dev] Add a moving checkpoint to the Bitcoin protocol",
        "thread_messages": [
            {
                "author": "Kenshiro []",
                "date": "2019-07-31T12:28:58",
                "message_text_only": "Hi all,\n\nI would like to propose that a \"moving checkpoint\" is added to the Bitcoin protocol. It's a very simple rule already implemented in NXT coin:\n\n- A node will ignore any new block under nodeBlockHeight - N, so the blockchain becomes truly immutable after N blocks, even during a 51% attack which thanks to the moving checkpoint can't rewrite history older than the last N blocks.\n\nNXT coin has a N value of 720 blocks, like 12 hours of blocks.\n\nTo be more conservative, Bitcoin could have a N value of 144 blocks (like 24 hours). So users and exchanges could plan their operations with big amounts of BTC knowing that only after 24 hours a transaction is truly immutable.\n\nMaybe a 51% attack never happens but if it does it would be nice to be 100% sure that history rewrite is limited to only 24 hours.\n\nRegards,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190731/15e4161f/attachment.html>"
            },
            {
                "author": "Alistair Mann",
                "date": "2019-07-31T13:59:33",
                "message_text_only": "On Wednesday 31 Jul 2019 12:28:58 Kenshiro [] via bitcoin-dev wrote:\n\n> I would like to propose that a \"moving checkpoint\" is added to the Bitcoin\n> protocol. It's a very simple rule already implemented in NXT coin:\n> \n> - A node will ignore any new block under nodeBlockHeight - N, so the\n> blockchain becomes truly immutable after N blocks, even during a 51% attack\n> which thanks to the moving checkpoint can't rewrite history older than the\n> last N blocks.\n\nHow would a (potentially, state-sponsored) netsplit lasting longer than N be \nhandled?  \n-- \nAlistair Mann"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-31T14:40:50",
                "message_text_only": ">>> How would a (potentially, state-sponsored) netsplit lasting longer than N be\nhandled?\n\nIt would be detected by the community much before reaching the reorg limit of N blocks (it's 24 hours) so nodes could stop until the netsplit is fixed.\n\nIn the extreme case no one notice the network split during more than N blocks (24 hours) and there are 2 permanent forks longer than N, nodes from one branch could delete their local history so they would join the other branch.\n\nRegards,\n\n\n________________________________\nFrom: Alistair Mann <al at pectw.net>\nSent: Wednesday, July 31, 2019 15:59\nTo: Kenshiro [] <tensiam at hotmail.com>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Add a moving checkpoint to the Bitcoin protocol\n\nOn Wednesday 31 Jul 2019 12:28:58 Kenshiro [] via bitcoin-dev wrote:\n\n> I would like to propose that a \"moving checkpoint\" is added to the Bitcoin\n> protocol. It's a very simple rule already implemented in NXT coin:\n>\n> - A node will ignore any new block under nodeBlockHeight - N, so the\n> blockchain becomes truly immutable after N blocks, even during a 51% attack\n> which thanks to the moving checkpoint can't rewrite history older than the\n> last N blocks.\n\nHow would a (potentially, state-sponsored) netsplit lasting longer than N be\nhandled?\n--\nAlistair Mann\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190731/e2c2346a/attachment-0001.html>"
            },
            {
                "author": "Kenshiro []",
                "date": "2019-07-31T14:53:25",
                "message_text_only": "P.S.: To be clearer, in this example I set an N value of 144 blocks, which is approximately 24 hours.\n\n________________________________\nFrom: Kenshiro [] <tensiam at hotmail.com>\nSent: Wednesday, July 31, 2019 16:40\nTo: Alistair Mann <al at pectw.net>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Add a moving checkpoint to the Bitcoin protocol\n\n>>> How would a (potentially, state-sponsored) netsplit lasting longer than N be\nhandled?\n\nIt would be detected by the community much before reaching the reorg limit of N blocks (it's 24 hours) so nodes could stop until the netsplit is fixed.\n\nIn the extreme case no one notice the network split during more than N blocks (24 hours) and there are 2 permanent forks longer than N, nodes from one branch could delete their local history so they would join the other branch.\n\nRegards,\n\n\n________________________________\nFrom: Alistair Mann <al at pectw.net>\nSent: Wednesday, July 31, 2019 15:59\nTo: Kenshiro [] <tensiam at hotmail.com>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Add a moving checkpoint to the Bitcoin protocol\n\nOn Wednesday 31 Jul 2019 12:28:58 Kenshiro [] via bitcoin-dev wrote:\n\n> I would like to propose that a \"moving checkpoint\" is added to the Bitcoin\n> protocol. It's a very simple rule already implemented in NXT coin:\n>\n> - A node will ignore any new block under nodeBlockHeight - N, so the\n> blockchain becomes truly immutable after N blocks, even during a 51% attack\n> which thanks to the moving checkpoint can't rewrite history older than the\n> last N blocks.\n\nHow would a (potentially, state-sponsored) netsplit lasting longer than N be\nhandled?\n--\nAlistair Mann\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20190731/17039920/attachment-0001.html>"
            },
            {
                "author": "Alistair Mann",
                "date": "2019-07-31T23:28:56",
                "message_text_only": "On Wednesday 31 Jul 2019 14:53:25 Kenshiro [] wrote:\n>> How would a (potentially, state-sponsored) netsplit lasting longer than\n>> N be handled?\n>\n> It would be detected by the community much before reaching the reorg limit\n> of N blocks (it's 24 hours) so nodes could stop until the netsplit is\n> fixed.\n\nA netsplit cannot be detected but merely be suspected where the p2p protocol \ndoes allow arbitrary connecting/disconnecting of any peer: there's no \ndifference between a remote net being split off, that net having nothing to \nsay, and that net choosing to disconnect. Detection then mandates manual, out-\nof-band communications, which is error prone and centralising.\n\nI also observe 'stopping nodes' during netsplits introduces several attack \nvectors. Among them: create a netsplit, which stops the nodes, turn off the \nnetsplit, repeat. A sequence of 365 actors causing their own small netsplits \ncould effectively stop Bitcoin at the cost (to them) of no Internet for one \nday a year as the rolling netsplit could never be fixed.\n\n> In the extreme case no one notice the network split during more than N\n> blocks (24 hours) and there are 2 permanent forks longer than N, nodes from\n> one branch could delete their local history so they would join the other\n> branch.\n>\n> P.S.: To be clearer, in this example I set an N value of 144 blocks, which\n> is approximately 24 hours.\n\nI've seen estimates of China hosting more than 51% of hashpower. Say they \nconduct a netsplit. Does your suggestion mean that it's the rest of the world \nthat has to delete their local history because they lack the hashpower to \nassert themselves as the proper branch? If so, I think having to delete actual \nhistory everywhere across the globe but China is not a price worth paying to \nlimit reorgs to 24 hours.\n\nI am unconvinced that the moving checkpoint you describe would improve \nBitcoin.\n-- \nAlistair Mann"
            }
        ],
        "thread_summary": {
            "title": "Add a moving checkpoint to the Bitcoin protocol",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Alistair Mann",
                "Kenshiro []"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6938
        }
    }
]