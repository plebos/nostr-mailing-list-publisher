[
    {
        "title": "[bitcoin-dev] Open Bitcoin Privacy Protect Privacy Questionnaire, Mid-Year 2015 report",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2016-03-01T00:57:58",
                "message_text_only": "Better late than never, I should correct things here. In the future it\nwould probably be more productive to open an issue. Otherwise there is\nno mechanism for someone to take ownership of a response.\n\nOn Sun, Aug 30, 2015 at 7:45 PM, Kristov Atlas via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> 1.      Does your application take any steps to create ambiguity between\n>> transactions which unavoidably spend from multiple addresses at the same\n>> time and intentional mixing transactions?\n> No, Bitcoin-Qt does not try to make non-mixing transactions look like mixing\n> transactions.\n>> 2.      What algorithms does your application use for ordering inputs and\n>> outputs in a transaction? In particular, how do you handle the change output\n>> and do you take into account common practices of other wallet applications\n>> when determining ordering?\n>\n> Not yet BIP 69. These notes suggest that outputs are randomized:\n> https://bitcoin.org/en/release/v0.8.1\n\nThe ordering used by Bitcoin-QT is cryptographically randomized. This\nprovides the greatest privacy possible.\n\nThe BIP 69 recommendation would currently be equally as private if\nuniversally used, but today would reduce privacy by making the\nsoftware more distinguishable.  It is unclear if BIP69 will be equal\nin privacy in the future, because external infrastructure may impose\nordering requirements that are incompatible with it.\n\n>> 3.      Does your application minimize the harmful effects of address\n>> reuse by spending every spendable input (\u201csweeping\u201d) from an address when a\n>> transaction is created?\n>\n> Unknown\n\n>> 4.      Does your application fully implement BIP 62?\n\nBIP 62 is withdrawn. The useful mechanisms in it for standardness\nrules are, of course, implemeted in Bitcoin Core-- were invented\nthere, and have been there for years.\n\n>> Mixing\n>>\n>> 5.      If your application supports mixing:\n\nIt's unclear to me precisely what is meant here. I'll answer broadly.\n\nBitcoin Core is compatible with and can be used with the joinmarket\nmodule to include coinjoins. The raw transaction functionality in\nBitcoin Core was also created specifically to facilitate coinjoins.\nBeyond joinmarket there have been several other coinjoin modules\ncreated for Bitcoin Core though today JM is by far the most common,\n\nThis functionality is not directly implemented for a number of reasons\nincluding the non-existence of decenteralized tools for this that\ndon't harm the user's privacy in other ways.\n\n>> a.      What is the average number of participants a user can expect to\n>> interact with on a typical join transaction?\n>> b.      Does your application attempt to construct join transactions in a\n>> way that avoids distinguishing them from non-join transactions?\n>> c.      Does your application perform any kind of reversibility analysis\n>> on join transactions prior to presenting them to the user for confirmation?\n>> d.      Is the mixing technique employed secure against correlation\n>> attacks by the facilitator, such as a CoinJoin server or off-chain mixing\n>> service?\n>> e.      Is the mixing technique employed secure against theft of funds by\n>> the facilitator or its participants?\n\nSkipped as these are specific to the implementation in use.\n\n>> Donations\n>> 6.      If your application has a fee or donation to the developers\n>> feature:\n> No donation feature last time I checked.\n>> a.      What steps do you take to make the donations indistinguishable\n>> from regular spend in terms of output sizes and destination addresses?\n\nAs Kristov noted, Bitcoin Core does not implement anti-features like donations.\n\n>> Balance Queries and Tx Broadcasting\n>>\n>> 7.      Please describe how your application obtains balance information\n>> in terms of how queries from the user\u2019s device can reveal a connection\n>> between the addresses in their wallet.\n>> a.      Does the application keep a complete copy of the blockchain\n>> locally (full node)?\n> Yes\n\nOptionally, but in all cases the user's privacy is indistinguishable\nfrom keeping all the data locally.\n\n>> b.      Does the user\u2019s device provide a filter which matches some\n>> fraction of the blockchain while providing a false positive rate (bloom or\n>> prefix filters)?\n> No, it just downloads the whole blockchain and performs local queries.\n\nIt would be more correct to say that Bitcoin Core always has the\nhighest possible FP rate.  It uses the only currently available tool\nto avoid leaking private address information to indexing services.  As\nseveral academic studies have shown, bloom filters are completely\ninadequate for protecting user privacy.\n\n>> i.      If so, approximately what fraction of the blockchain does the\n>> filter match in a default configuration (0% - 100%)?\n> 100%, unless a user bootstraps downloading the blockchain. Bootstrapping\n> will potentially limit the user's anonymity set to other people who have\n> downloaded that bootstrap.dat file.\n\nI user that has downloaded a bootstrap.dat is indistinguishable from\nany other user on the network; their transaction anonymity set is not\nreduced in any way by doing this.  By running bitcoin at all they are\ndistinguished from other people who do not, but thousands of hosts run\nBitcoin without even having a wallet.\n\n>> c.      Does the user\u2019s device query all of their addresses at the same\n>> time?\n> N/A\n\nTo be clear: This is N/A because there are no queries that would leak\nprivate information about the user's wallet.\n\n  >> d.      Does the user\u2019s device query addresses individually in a manner\n>> that does not allow the query responder to correlate queries for different\n>> addresses?\n> No. Just download blocks and processes that information locally.\n\nYes. Because the Bitcoin Core downlaods all information, the third\nparties cannot correlate responses.\n\n>> e.      Can users opt to obtain their balance information via Tor (or\n>> equivalent means)?\n> If Tor is set up as a SOCKS proxy, you can configure Bitcoin-QT download the\n> blockchain and broadcast txs through a single Tor circuit. This can be\n> configured once before opening Bitcoin-Qt.\n\nBitcoin Core does make remote queries to obtain \"balance information\",\nbut it can be directed to perform all commmunications via tor, before\nstarting it as noted.\n\n>> 8.      Does the applications route outgoing transactions independently\n>> from the manner in which it obtains balance information? Can users opt to\n>> have their transactions submitted to the Bitcoin network via Tor (or an\n>> equivalent means) independently of how they obtain their balance\n>> information?\n> No, you can only configure a single proxy.\n\nBitcoin Core can simultaneously connect to both Tor hidden services\nand the public IPv4 network for improved partitioning resistance (and\nhas been able to for years). Instead of setting the socks proxy, the\nuser configures onion=<tor proxy>.\n\nAs of 0.12 inbound tor HS is also auto-configured by default when tor\nis installed.\n\n>> 9.      If your application supports multiple identities/wallets, does\n>> each one connect to the network as if it were completely independent from\n>> the other?\n>\n>\n> No built-in support for multiple identities. You can hotswap wallet files to\n> crudely simulate this. You'd have to manually change the Tor connection\n> outside of Bitcoin-Qt to create the effect of making the network connections\n> independent.\n\nAll network connections are independent via Tor by default, no manual\nchange is required there. Separate \"identities\" do require separate\nwallets, as noted.\n\n>> a.      Does the application ever request balance information for\n>> addresses belonging to multiple identities in the same network query?\n\nNo it does not and cannot. Freedom from this kind of leak is one of\nthe benefits of the current design that doesn't allow intermixing\n\"identities\" in wallets.\n\n> Blocks are downloaded and tx broadcasts received/relayed rather than\n> querying the utxo set for a particular address. When swapping between wallet\n> files, some information may be leaked e.g. the client may be at the same\n> block height in terms of what it has downloaded from the p2p network, which\n> may leak to global passive adversaries/AS's or sybil attackers the fact that\n> a single client was used for multiple wallets.\n\nHowever, unlikely most other wallets, Bitcoin nodes forward\ntransactions for third parties and do not make external queries for\nprivate information. Because of this the ability to correlate a\nparticular node connection multiple times does not necessarily leak\nanything about wallet usage.\n\n>> b.      Are outgoing transactions from multiple identities routed\n>> independently of each other to the Bitcoin network?\n>\n> Transactions from multiple identities would not be routed at the same time.\n> I'm not clear what happens if you have a single wallet (identity) open and\n> then open a new wallet (identity) without closing Bitcoin-Qt -- some of the\n> same routing paths may still be used such that an attacker might observe\n> transactions broadast signed by private keys from multiple wallets\n> (identities) and observe that they appear to come from the same wallet\n> client. OBPP should assume the worst unless prevented contrary evidence.\n\nThis assumption is incorrect. All the private wallet state is stored\nin the wallet. If the wallet is changed the node does know any of them\nanymore.  There is no ability to open a new wallet without restarting\nthe software.\n\nThat said, Bitcoin Core normally relays transactions for third\nparties-- unlikely virtually all other wallets. This means that where\nobservation of a transaction from another wallet would give a nearly\nguaranteed identification that the system on the other end of the link\nis the source, with Bitcoin Core sending a transaction is merely\npotentially suggestive of origination.\n\n>> c.      When an identity/wallet is deleted, does the deletion process\n>> eliminate all evidence from the user's device that the wallet was previously\n>> installed?\n> Identity is primarily tied to a wallet.dat file. Deleting it will remove\n> most of the evidence that the wallet was installed on that device, but there\n> may be some extra information in ancillary files that should also be\n> deleted.  This is an OS-level function, as there is no operation built into\n> the client to delete a wallet file (identity).\n\nAfter review and testing we've determined that reliable deletion of\nprivate data is not very feasible on current hardware/OSes. Techniques\nwhich used to work, like overwriting are defeated by write balancing.\nWe recommend users use OS level encryption to protect their privacy\nlocally.\n\n>>         Network Privacy\n>> 10.     When a user performs a backup operation for their wallet, does\n>> this generate any automatic network activity, such as a web query or email?\n> No. Backups are local, and no email or SMS is linked. No web queries related\n> to backup.\n\nRight.\n\n>> 11.     Does your application perform any lookup external to the user\u2019s\n>> device related to identifying transaction senders or recipients?\n> No\n\nNot for normal transactions. Bitcoin Core currently supports payment\nURIs and BIP70, and if a user follows a payment URI it may instruct\nthe user to make a connection to a location requested by the payee.\n\n>> 12.     Does you application connect to known endpoints which would be\n>> visible to an ISP, such as your domain?\n> Yes, some connections to known p2p full nodes to bootstrap the connection to\n> the Bitcoin p2p network. This is configurable, but there are defaults. An\n> ISP is likely to be able to identify a customer as running the Bitcoin-Qt\n> client in particular on this basis.\n\nKind of.  If a Bitcoin Core node already knows of peers through prior\noperation and is able to get at least two network connections within\n11 seconds, it will make no further queries.\n\nIf a node is completely new and hasn't been otherwise configured; it\nwill perform four DNS queries to determine lists of candidate nodes.\nThese queries are frequently answered by caching name servers and do\nnot go all the way back to their origins. Only if both of these step\nfail does it consult a hardcoded list of several hundred nodes to\nattempt initialization.\n\nThat said, Bitcoin traffic is easily identifiable regardless of how\npeers are found. We recommend users run Tor, and if tor is used no\nidentifiable traffic should happen, except for timing/volume analysis.\nAnd many parties run Bitcoin Core nodes without running wallets; so\nthe use of Bitcoin does not identify a user as even having a wallet at\nall.\n\n>> 13.     If your application connects directly to nodes in the Bitcoin P2P\n>> network, does it either use an unremarkable user agent string (Bitcoin Core.\n>> BitcoinJ, etc), or randomize its user agent on each connection?\n>\n>\n> BIP12 specifies format for user agents:\n> https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki\n>\n> It appears that the Bitcoin-QT leaks specific information about its client\n> version through User Agent. This file defines the current client version:\n> https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/clientversion.h\n>\n> Various other files seem to use this to build up the UA string, which is\n> transmitted to other peers.\n\nBitcoin Core is this questions _definition_ of an unremarkable useragent.\n\nBut yes, the useragent notes the major/minor version. Concealing this\nwould have little to no privacy advantage, as functional/behavioral\nanalysis would easily reveal the version with at least that level of\nprecision.\n\n>> 14.     Does the application uninstall process for your application\n>> eliminate all evidence from the user's device that the application was\n>> previously installed? Does it also eliminate wallet data?\n> Probably depends on the platform. Last time I checked, I think Bitcoin-Qt\n> leaves behind a .bitcoin directory on most platforms even after you run an\n> uninstall script.\n\nIf uninstall deleted the wallet it would reliably result in massive\nfunds loss for users.\n\nTo conceal their user of Bitcoin users should at a minimum do a\nsecurity erase of their system.\n\nOther wallets who claim to \"delete\" private information which was\npreviously stored on disk are likely giving their users a false sense\nof security. Doubly so in that many other wallets are written in\ndynamic lanaguages which make it impossible to prevent highly secret\ndata from being written to system swap.\n\n>> 15.     Does your application use techniques such as steganography to\n>> store persistent wallet metadata in a form not identifiable as belong to a\n>> Bitcoin wallet application?\n> No\n\nI believe any software which claimed to do this would have to meet a\nrather high burden of proof.\n\n>> 16.     Please describe the degree to which users can use passwords/PINs\n>> to protect their data:\n>> a.      Can the user set a password/PIN to protect their private keys?\n> You can encrypt the wallet file with a password. The wallet is \"locked\"\n> until the password is entered, preventing decryption of the private keys.\n\nCorrect. And unlike some other Wallets the KDF used to harden the\nusers key takes 100ms with efficient native code; this substantially\nlimits attacker brute for performance.\n\n>> b.      Can the user set a password/PIN to protect their public keys and\n>> balance information?\n> No -- any wallet.dat file can be opened and the public keys inspected\n> without the password.\n>> c.      Can the user set a password/PIN to encrypt other wallet metadata,\n>> such as address books and transaction notes?\n> No -- any wallet.dat file can be opened and the metadata inspected without\n> the password.\n\nWe recommend users use full disk encryption. Encrypting the public\ndata in the wallet would require the wallet to enter their key at\nevery use and increase the probability that their key was leaked (or\nif two keys were used, that they'd forget their spending key).\n\nEven if the public key information were encrypted, other data on their\ncomputer (browser cache, swap, logs) would likely compromise the\nuser's privacy, thus the full disk encryption recommendation. Full\ndisk encryption is a common, easily used tool; and I don't believe any\nwallet software that stores data locally can provide strong privacy in\npractice without it.\n\n>> d.      Does the application use a single password/PIN to cover all\n>> protected data, or does it allow the use of multiple passwords/PINs?\n> A single password for the wallet file.\n\nRight. Each wallet file can have it's own single password which\nprotect spending.\n\n>> 17.     Do you as a wallet provider ever have access to unencrypted copies\n>> of the user\u2019s private keys, public keys, or any other wallet metadata which\n>> may be used to associate a user with their transactions or balances?\n> No custodianship.\n\nRight.\n\n>>        Telemetry Data\n>> 18.     If your application reports telemetry data, such as usage\n>> information or automatic crash reporting, does the user have the opportunity\n>> to review and approve all information transmitted before it is sent?\n> No obvious telemetry data being sent.\n\nNo telemetry data.\n\n>>         Source Code and Building\n>> 19.     Can a user of your application compile the application themselves\n>> in a manner that produces a binary version identical to the version you\n>> distribute (deterministic build system)?\n\nYes, and a large portion of our user base does their own builds. Our\ndeterminstic build process is also actively audited by a good dozen\nparties who post cryptographic signatures of their duplicated builds."
            }
        ],
        "thread_summary": {
            "title": "Open Bitcoin Privacy Protect Privacy Questionnaire, Mid-Year 2015 report",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 17509
        }
    },
    {
        "title": "[bitcoin-dev] IRC meetings moved to #bitcoin-core-dev",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2016-03-01T09:46:25",
                "message_text_only": "It seems that MeetingBot was deactivated in #bitcoin-dev, so the\nlast two weeks the weekly developer meeting (Thursday 19:00-20:00 UTC)\nwas held in #bitcoin-core-dev.\n\nLet's keep it at that.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "IRC meetings moved to #bitcoin-core-dev",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 200
        }
    },
    {
        "title": "[bitcoin-dev] Soft fork for BIPs 68, 112, and 113",
        "thread_messages": [
            {
                "author": "Alex Morcos",
                "date": "2016-03-01T14:34:13",
                "message_text_only": "Bitcoin Core is ready to move towards deployment of a soft fork which will\nimplement BIP's 68, 112, and 113.\n\nBIP 68 - Relative lock-time using consensus-enforced sequence numbers -\nhttps://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki\nBIP 112 - CHECKSEQUENCEVERIFY -\nhttps://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki\nBIP 113 - Median time-past as endpoint for lock-time calculations -\nhttps://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki\n\nBIP 113 logic was introduced in the 0.11.2 release as a standardness rule\nand BIP 68 and BIP 112 logic has been merged into master*.\nWhat remains to be done is finish testing, merge the logic to activate the\nsoft forks and backport the code to supported releases.\n\nThe exact rollout mechanism is still being finalized but will be\ncoordinated with the community.\n\nThis email is meant to serve as a readiness announcement and confirm that\nthere are no outstanding concerns.\n\nThanks,\nAlex\n\n\n* -  BIP 68 and BIP 112 logic is only enforced when the tx version is >= 2\nwhich will only become standard with the release of the soft fork code.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/f118cd50/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Soft fork for BIPs 68, 112, and 113",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Alex Morcos"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1289
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Knots 0.12.0.knots20160226 release candidate 1 available",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2016-03-01T17:12:34",
                "message_text_only": "Binaries for Bitcoin Knots version 0.12.0.knots20160226.rc1 are available from:\n\n    https://bitcoinknots.org/files/0.12.x/0.12.0.knots20160226/test/rc1/\n\nSource code can be found on GitHub under the signed tag:\n\n    https://github.com/bitcoinknots/bitcoin/tree/v0.12.0.knots20160226.rc1\n\nThis is a release candidate for a new major version release, bringing new\nfeatures, bug fixes, as well as other improvements.\n\nPreliminary release notes for the release can be found here:\n\n    https://github.com/bitcoinknots/bitcoin/blob/0.12.x-knots/doc/release-notes.md\n\nRelease candidates are test versions for releases. When no critical problems\nare found, this release candidate will be tagged as final.\n\nPlease report bugs using the issue tracker at GitHub:\n\n    https://github.com/bitcoinknots/bitcoin/issues\n\nAdditional Gitian signatures are welcome. Please submit via GitHub pull\nrequest to:\n\n    https://github.com/bitcoinknots/gitian.sigs"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Knots 0.12.0.knots20160226 release candidate 1 available",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 938
        }
    },
    {
        "title": "[bitcoin-dev] Proposed BIP extension to BIP 0070",
        "thread_messages": [
            {
                "author": "Justin Newton",
                "date": "2016-03-01T18:58:16",
                "message_text_only": "The following draft BIP proposes an update to the Payment Protocol.\n\nMotivation:\n\nThe motivation for defining this extension to the BIP70 Payment Protocol is\nto allow 2 parties to exchange payment information in a permissioned and\nencrypted way such that wallet address communication can become a more\nautomated process. Additionally, this extension allows for the requestor of\na PaymentRequest to supply a certificate and signature in order to\nfacilitate identification for address release. This also allows\nfor automated creation of off blockchain transaction logs that are human\nreadable, containing who you transacted with, in addition to the\ninformation that it contains today.\n\nThe motivation for this extension to BIP70 is threefold:\n\n1. Ensure that the payment details can only be seen by the participants in\nthe transaction, and not by any third party.\n2. Enhance the Payment Protocol to allow for store and forward servers in\norder to allow, for example, mobile wallets to sign and serve\nPayment Requests.\n3. Allow a sender of funds the option of sharing their identity with the\nreceiver. This information could then be used to:\n\n        * Make bitcoin logs more human readable\n        * Give the user the ability to decide who to release payment\ndetails to\n        * Allow an entity such as a political campaign to ensure donors\nmatch regulatory and legal requirements\n        * Allow for an open standards based way for regulated financial\nentities to meet regulatory requirements\n        * Automate the active exchange of payment addresses, so static\naddresses and BIP32 X-Pubs can be avoided to maintain privacy\nand convenience\n\nIn short we wanted to make bitcoin more human, while at the same time\nimproving transaction privacy.\n\nFull proposal here:\n\nhttps://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension.mediawiki\n\nWe look forward to your thoughts and feedback on this proposal!\n\nJustin\n\n\n-- \n\nJustin W. Newton\nFounder/CEO\nNetki, Inc.\n\njustin at netki.com\n+1.818.261.4248\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/d4767625/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PastedGraphic-1.tiff\nType: image/tiff\nSize: 10972 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/d4767625/attachment-0001.tiff>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-08T22:34:13",
                "message_text_only": "Is there a way for Joe Mobile Wallet User to upload a set of N PaymentRequests \nauthenticated by his key to an untrusted server, which encrypts and passes \nthem on in response to InvoiceRequests? Or does this necessarily require the \nrecipient to be online?\n\nOn Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:\n> The following draft BIP proposes an update to the Payment Protocol.\n> \n> Motivation:\n> \n> The motivation for defining this extension to the BIP70 Payment Protocol is\n> to allow 2 parties to exchange payment information in a permissioned and\n> encrypted way such that wallet address communication can become a more\n> automated process. Additionally, this extension allows for the requestor of\n> a PaymentRequest to supply a certificate and signature in order to\n> facilitate identification for address release. This also allows\n> for automated creation of off blockchain transaction logs that are human\n> readable, containing who you transacted with, in addition to the\n> information that it contains today.\n> \n> The motivation for this extension to BIP70 is threefold:\n> \n> 1. Ensure that the payment details can only be seen by the participants in\n> the transaction, and not by any third party.\n> 2. Enhance the Payment Protocol to allow for store and forward servers in\n> order to allow, for example, mobile wallets to sign and serve\n> Payment Requests.\n> 3. Allow a sender of funds the option of sharing their identity with the\n> receiver. This information could then be used to:\n> \n>         * Make bitcoin logs more human readable\n>         * Give the user the ability to decide who to release payment\n> details to\n>         * Allow an entity such as a political campaign to ensure donors\n> match regulatory and legal requirements\n>         * Allow for an open standards based way for regulated financial\n> entities to meet regulatory requirements\n>         * Automate the active exchange of payment addresses, so static\n> addresses and BIP32 X-Pubs can be avoided to maintain privacy\n> and convenience\n> \n> In short we wanted to make bitcoin more human, while at the same time\n> improving transaction privacy.\n> \n> Full proposal here:\n> \n> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension\n> .mediawiki\n> \n> We look forward to your thoughts and feedback on this proposal!\n> \n> Justin"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-08T23:07:03",
                "message_text_only": "Our BIP just defines protocol definitions, and doesn't really dictate how\npeople use them (we're coming up with a new title for the BIP, by the way,\nto more accurately convey that). Using our definitions as building blocks,\nsomeone could definitely accomplish what you described. For example, Joe\nMobile Wallet User's wallet could upload a slew of generic PaymentRequest\nmessages with signatures to prove his identity, and the server could then\ncreate encryptedPaymentRequest messages using the server's key for\nencryption and communication with the other party. In this case the server\nwould essentially be a proxy for the user without having actual access to\nthe user's private keys.\n\nMy personal goal with the protocol was to keep it extremely flexible so\ndevelopers could use it to build all different types of schemes while\nkeeping standard messages that could be forwarded between services if\nneeded. Does the above make sense?\n\nJames\n\nOn Tue, Mar 8, 2016 at 2:55 PM Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Is there a way for Joe Mobile Wallet User to upload a set of N\n> PaymentRequests\n> authenticated by his key to an untrusted server, which encrypts and passes\n> them on in response to InvoiceRequests? Or does this necessarily require\n> the\n> recipient to be online?\n>\n> On Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:\n> > The following draft BIP proposes an update to the Payment Protocol.\n> >\n> > Motivation:\n> >\n> > The motivation for defining this extension to the BIP70 Payment Protocol\n> is\n> > to allow 2 parties to exchange payment information in a permissioned and\n> > encrypted way such that wallet address communication can become a more\n> > automated process. Additionally, this extension allows for the requestor\n> of\n> > a PaymentRequest to supply a certificate and signature in order to\n> > facilitate identification for address release. This also allows\n> > for automated creation of off blockchain transaction logs that are human\n> > readable, containing who you transacted with, in addition to the\n> > information that it contains today.\n> >\n> > The motivation for this extension to BIP70 is threefold:\n> >\n> > 1. Ensure that the payment details can only be seen by the participants\n> in\n> > the transaction, and not by any third party.\n> > 2. Enhance the Payment Protocol to allow for store and forward servers in\n> > order to allow, for example, mobile wallets to sign and serve\n> > Payment Requests.\n> > 3. Allow a sender of funds the option of sharing their identity with the\n> > receiver. This information could then be used to:\n> >\n> >         * Make bitcoin logs more human readable\n> >         * Give the user the ability to decide who to release payment\n> > details to\n> >         * Allow an entity such as a political campaign to ensure donors\n> > match regulatory and legal requirements\n> >         * Allow for an open standards based way for regulated financial\n> > entities to meet regulatory requirements\n> >         * Automate the active exchange of payment addresses, so static\n> > addresses and BIP32 X-Pubs can be avoided to maintain privacy\n> > and convenience\n> >\n> > In short we wanted to make bitcoin more human, while at the same time\n> > improving transaction privacy.\n> >\n> > Full proposal here:\n> >\n> >\n> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension\n> > .mediawiki\n> >\n> > We look forward to your thoughts and feedback on this proposal!\n> >\n> > Justin\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160308/069639e0/attachment-0001.html>"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-09T01:17:11",
                "message_text_only": "I accidentally replied to Luke off-list, and this was his reply to my last\nmessage:\n\n\"But wouldn't the server be a trusted third-party in this case?\nI'm thinking it's very close to being possible for an untrusted server to do\nthis...\"\n\nIf you are okay with anyone being able to view your PaymentRequest\nmessages, then you wouldn't need to encrypt them. Just upload them to the\nserver and let it give them away--no trust needed as long as you include a\nsignature. If you want only certain people to be able to see your messages,\nthen you need to denote those people in some way. In this situation, you\nwould do that by trading public keys and uploading encryptedPaymentRequest\nmessages to the server that only those people could read.\n\nUsing the encrypted method doesn't require the devices to be online, but it\ndoes require at least one of the parties to know the other party's public\nkey. Do you have a specific use case in mind?\n\nJames\n\nOn Tue, Mar 8, 2016 at 3:07 PM James MacWhyte <macwhyte at gmail.com> wrote:\n\n> Our BIP just defines protocol definitions, and doesn't really dictate how\n> people use them (we're coming up with a new title for the BIP, by the way,\n> to more accurately convey that). Using our definitions as building blocks,\n> someone could definitely accomplish what you described. For example, Joe\n> Mobile Wallet User's wallet could upload a slew of generic PaymentRequest\n> messages with signatures to prove his identity, and the server could then\n> create encryptedPaymentRequest messages using the server's key for\n> encryption and communication with the other party. In this case the server\n> would essentially be a proxy for the user without having actual access to\n> the user's private keys.\n>\n> My personal goal with the protocol was to keep it extremely flexible so\n> developers could use it to build all different types of schemes while\n> keeping standard messages that could be forwarded between services if\n> needed. Does the above make sense?\n>\n> James\n>\n> On Tue, Mar 8, 2016 at 2:55 PM Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Is there a way for Joe Mobile Wallet User to upload a set of N\n>> PaymentRequests\n>> authenticated by his key to an untrusted server, which encrypts and passes\n>> them on in response to InvoiceRequests? Or does this necessarily require\n>> the\n>> recipient to be online?\n>>\n>> On Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:\n>> > The following draft BIP proposes an update to the Payment Protocol.\n>> >\n>> > Motivation:\n>> >\n>> > The motivation for defining this extension to the BIP70 Payment\n>> Protocol is\n>> > to allow 2 parties to exchange payment information in a permissioned and\n>> > encrypted way such that wallet address communication can become a more\n>> > automated process. Additionally, this extension allows for the\n>> requestor of\n>> > a PaymentRequest to supply a certificate and signature in order to\n>> > facilitate identification for address release. This also allows\n>> > for automated creation of off blockchain transaction logs that are human\n>> > readable, containing who you transacted with, in addition to the\n>> > information that it contains today.\n>> >\n>> > The motivation for this extension to BIP70 is threefold:\n>> >\n>> > 1. Ensure that the payment details can only be seen by the participants\n>> in\n>> > the transaction, and not by any third party.\n>> > 2. Enhance the Payment Protocol to allow for store and forward servers\n>> in\n>> > order to allow, for example, mobile wallets to sign and serve\n>> > Payment Requests.\n>> > 3. Allow a sender of funds the option of sharing their identity with the\n>> > receiver. This information could then be used to:\n>> >\n>> >         * Make bitcoin logs more human readable\n>> >         * Give the user the ability to decide who to release payment\n>> > details to\n>> >         * Allow an entity such as a political campaign to ensure donors\n>> > match regulatory and legal requirements\n>> >         * Allow for an open standards based way for regulated financial\n>> > entities to meet regulatory requirements\n>> >         * Automate the active exchange of payment addresses, so static\n>> > addresses and BIP32 X-Pubs can be avoided to maintain privacy\n>> > and convenience\n>> >\n>> > In short we wanted to make bitcoin more human, while at the same time\n>> > improving transaction privacy.\n>> >\n>> > Full proposal here:\n>> >\n>> >\n>> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension\n>> > .mediawiki\n>> >\n>> > We look forward to your thoughts and feedback on this proposal!\n>> >\n>> > Justin\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/bc71ef82/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposed BIP extension to BIP 0070",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Justin Newton",
                "Luke Dashjr",
                "James MacWhyte"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 13701
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Guarantees Strong, not Eventual, Consistency.",
        "thread_messages": [
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2016-03-02T00:57:43",
                "message_text_only": "There seems to be a perception out there that Bitcoin is eventually\nconsistent. I wrote this post to describe why this perception is completely\nfalse.\n\nBitcoin Guarantees Strong, not Eventual, Consistency\nhttp://hackingdistributed.com/2016/03/01/bitcoin-guarantees-strong-not-eventual-consistency/\n\nI hope we can lay this bad meme to rest. Bitcoin provides a strong\nguarantee.\n- egs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/939e3925/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2016-03-02T08:39:07",
                "message_text_only": "To say that Bitcoin is strongly consistent is to say that the memory pool\nand the last X blocks aren't part of Bitcoin. If you want to avoid making\nthat claim, you can at best argue that Bitcoin has both a strongly\nconsistent component AND an eventually consistent component.\n\nThe entire point of the definition of eventually consistency is that your\ncomputer system is running continously and DO NOT have a final state, and\ntherefore you must be able to describe the behavior when your system either\nmay give responses to queries across time that are either perfectly\nconsistent *or not* perfectly consistent.\n\nAnd Bitcoin by default *does not* ignore the contents of the last X blocks.\nA Bitcoin node being queried about the current blockchain state WILL give\ninconsistent answers when there's block rearrangements = no strong\nconsistency. Not to mention that your definition ignores the nonzero\nprobability of a block rearrangement extending beyond your constant omega.\n\nBitcoin provides a probabilistic, accumulative probability. Not a perfect\none.\nDen 2 mar 2016 04:04 skrev \"Emin G\u00fcn Sirer\" <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n>\n> There seems to be a perception out there that Bitcoin is eventually\n> consistent. I wrote this post to describe why this perception is completely\n> false.\n>\n> Bitcoin Guarantees Strong, not Eventual, Consistency\n>\n> http://hackingdistributed.com/2016/03/01/bitcoin-guarantees-strong-not-eventual-consistency/\n>\n> I hope we can lay this bad meme to rest. Bitcoin provides a strong\n> guarantee.\n> - egs\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/2d24eda8/attachment.html>"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2016-03-02T16:56:28",
                "message_text_only": "> The entire point of the definition of eventually consistency is that your\n> computer system is running continously and DO NOT have a final state, and\n> therefore you must be able to describe the behavior when your system either\n> may give responses to queries across time that are either perfectly\n> consistent *or not* perfectly consistent.\n>\nThis is not the definition of eventual consistency. From\nhttps://en.wikipedia.org/wiki/Eventual_consistency:\nEventual consistency is a consistency model used in distributed computing\nto achieve high availability that informally guarantees that, if no new\nupdates are made to a given data item, eventually all accesses to that item\nwill return the last updated value.\n\nThe actual definition makes it quite clear that a system need not have a\nfinal state to be evaluated for its consistency properties. Almost all\npractical database systems execute continuously without a final state.\n\n> And Bitcoin by default *does not* ignore the contents of the last X\n> blocks. A Bitcoin node being queried about the current blockchain state\n> WILL give inconsistent answers when there's block rearrangements = no\n> strong consistency.\n\n\nOne could split hairs here by pedantically defining \"Bitcoin by default\" --\nyou could refer to just the reference client code and ignore the shim code\nin the app that interfaces with the client -- but that'd drag us into a\nfruitless email-list-style discussion from which no one would emerge any\nwiser. I'll avoid that, and will instead dryly note that the reference\nclient's listreceivedbyaddress will return the number of confirmations by\ndefault, and every application will then check the confirmations value to\nconfirm that it exceeds that application's own omega, while\ngetbalance,getreceivedbyaddress will take a number of confirmations as an\nargument, shielding the app from reorgs of the suffix. That is precisely\nthe point made in the post.\n\n> Not to mention that your definition ignores the nonzero probability of a\n> block rearrangement extending beyond your constant omega.\n>\nThe post covers this case. Technically, there is a difference between 0\nprobability and epsilon probability -- this is the reason why Nakamoto\nConsensus was an exciting breakthrough result; the same reason why\nLamport's results regarding a 3f+1 bound on the Byzantine Generals Problem\ndo not apply to Nakamoto Consensus; and the same reason it took our paper\n(Majority is Not Enough) to show that Nakamoto consensus has a similar 33%\nbound as Lamport-style consensus when it comes to tolerating Byzantine\nactors.\n\nPractically, however, there is little difference between 0 and a value that\nexponentially approximates 0, given that we operate on hardware subject to\nrandom errors. The post makes the case that one can pick an omega such that\nthe probability of your processor mis-executing your code is larger than\nthe probability of observing a reorganization.\n\nBitcoin provides a probabilistic, accumulative probability. Not a perfect\n> one.\n>\nSometimes, non-technical people get confused about the difference between\nvery very very small probabilities that approximate 0 and 0. For instance,\nsome people get very worried about hash collisions, on which Bitcoin relies\nfor its correctness, whose probability also drops exponentially but is not\nexactly 0. Your overall point seems to be an analogous concern that\nBitcoin's exponentially dropping probability of reorganization isn't quite\na \"perfect\" 0. If so, I agree and the original post made this quite clear.\nThough I hope we can avoid that kind of discussion on this particular list.\n\n- egs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/30a4a945/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Guarantees Strong, not Eventual, Consistency.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Emin G\u00fcn Sirer",
                "Natanael"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6279
        }
    },
    {
        "title": "[bitcoin-dev] Hardfork to fix difficulty drop algorithm",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2016-03-02T14:56:14",
                "message_text_only": "We are coming up on the subsidy halving this July, and there have been some \nconcerns raised that a non-trivial number of miners could potentially drop off \nthe network. This would result in a significantly longer block interval, which \nalso means a higher per-block transaction volume, which could cause the block \nsize limit to legitimately be hit much sooner than expected. Furthermore, due \nto difficulty adjustment being measured exclusively in blocks, the time until \nit adjusts to compensate would be prolonged.\n\nFor example, if 50% of miners dropped off the network, blocks would be every \n20 minutes on average and contain double the transactions they presently do. \nEven double would be approximately 850-900k, which potentially bumps up \nagainst the hard limit when empty blocks are taken into consideration. This \nsituation would continue for a full month if no changes are made. If more \nminers drop off the network, most of this becomes linearly worse, but due to \nhitting the block size limit, the backlog would grow indefinitely until the \nadjustment occurs.\n\nTo alleviate this risk, it seems reasonable to propose a hardfork to the \ndifficulty adjustment algorithm so it can adapt quicker to such a significant \ndrop in mining rate. BtcDrak tells me he has well-tested code for this in his \naltcoin, which has seen some roller-coaster hashrates, so it may even be \npossible to have such a proposal ready in time to be deployed alongside SegWit \nto take effect in time for the upcoming subsidy halving. If this slips, I \nthink it may be reasonable to push for at least code-readiness before July, \nand possibly roll it into any other hardfork proposed before or around that \ntime.\n\nI am unaware of any reason this would be controversial, so if anyone has a \nproblem with such a change, please speak up sooner rather than later. Other \nideas or concerns are of course welcome as well.\n\nThanks,\n\nLuke"
            },
            {
                "author": "Pavel Jan\u00edk",
                "date": "2016-03-02T15:05:08",
                "message_text_only": "> the network. This would result in a significantly longer block interval, which \n> also means a higher per-block transaction volume, which could cause the block \n> size limit to legitimately be hit much sooner than expected.\n\nIf this happens at all (the exchange rate of the coin can accomodate such expectation), the local fee market will develop, fees will raise and complement mined coins, thus bringing more miners back to the game (together with expected higher exchange rate).\n--  \nPavel Jan\u00edk"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-02T15:14:35",
                "message_text_only": "On Wednesday, March 02, 2016 3:05:08 PM Pavel Jan\u00edk wrote:\n> > the network. This would result in a significantly longer block interval,\n> > which also means a higher per-block transaction volume, which could\n> > cause the block size limit to legitimately be hit much sooner than\n> > expected.\n> \n> If this happens at all (the exchange rate of the coin can accomodate such\n> expectation),\n\nThe exchange rate is not significantly influenced by these things. \nHistorically, it seems fairly obvious that the difficulty has followed value, \nnot value following difficulty.\n\n> the local fee market will develop, fees will raise and complement mined\n> coins, thus bringing more miners back to the game (together with expected\n> higher exchange rate).\n\nDepends on the hashrate drop, and tolerance for higher fees, both of which are \nlargely unknown at this time. At least having code prepared for the negative \nscenarios in case of an emergency seems reasonable, even if we don't end up \nneeding to deploy it.\n\nLuke"
            },
            {
                "author": "J\u00e9r\u00e9mie Dubois-Lacoste",
                "date": "2016-03-02T15:24:31",
                "message_text_only": "> BtcDrak tells me he has well-tested code for this in his altcoin\nCould you be more explicit, which altcoin is that?\n\n> I am unaware of any reason this would be controversial\nProbably not until you get to the details of any proposal. What is\nyour exact proposal here? Algorithm? Parameters?\nAs you likely know a too short time window would be dangerous for\nother reasons. Getting to an agreement as to what is reasonable or not\nis not necessarily trivial.\n\nJeremie\n\n\n2016-03-02 16:14 GMT+01:00 Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org>:\n> On Wednesday, March 02, 2016 3:05:08 PM Pavel Jan\u00edk wrote:\n>> > the network. This would result in a significantly longer block interval,\n>> > which also means a higher per-block transaction volume, which could\n>> > cause the block size limit to legitimately be hit much sooner than\n>> > expected.\n>>\n>> If this happens at all (the exchange rate of the coin can accomodate such\n>> expectation),\n>\n> The exchange rate is not significantly influenced by these things.\n> Historically, it seems fairly obvious that the difficulty has followed value,\n> not value following difficulty.\n>\n>> the local fee market will develop, fees will raise and complement mined\n>> coins, thus bringing more miners back to the game (together with expected\n>> higher exchange rate).\n>\n> Depends on the hashrate drop, and tolerance for higher fees, both of which are\n> largely unknown at this time. At least having code prepared for the negative\n> scenarios in case of an emergency seems reasonable, even if we don't end up\n> needing to deploy it.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-02T15:42:28",
                "message_text_only": "On Wednesday, March 02, 2016 2:56:14 PM Luke Dashjr via bitcoin-dev wrote:\n> so it may even be possible to have such a proposal ready in time to be\n> deployed alongside SegWit  to take effect in time for the upcoming subsidy\n> halving.\n\nLapse of thinking/clarity here. This probably isn't a practical timeframe for \ndeployment, unless/until there's an emergency situation. So if the code were \nbundled with SegWit, it would need some way to avoid its early activation \noutside of such an emergency (which could possibly be detected in code, in \nthis case).\n\nLuke"
            },
            {
                "author": "Paul Sztorc",
                "date": "2016-03-02T16:27:52",
                "message_text_only": "It is **essential** that emergency code be prepared. This code must be\nable to lower the difficulty by a large factor.\n\n---\n\nThis halving-difficulty-drop problem can, with some bad luck, get quite\ndisastrous, very quickly.\n\n( I did a micro-study of this problem here, for those who are unaware:\nhttp://www.truthcoin.info/blog/mining-heart-attack )\n\nFor example, it is theoretically possible that 100% of miners (not 50%\nor 10%) will shut off their hardware. This is because it is revenue\nwhich ~halves, not profit. If miners are all equal, difficulty causes\ntheir profit margin to narrow over time (for example, if BTC revenues\nare $100, and amortized fixed costs are $10, then difficulty adjustments\nwill cause total energy costs to rise to ~ $89, such that total\npre-halving profit is $1 for everyone...post-halving, profit is -$49 for\neveryone).\n\nSo, if miners are homogenous the result is disastrous. Fortunately,\nminers are probably still somewhat heterogenous. However, we don't know\nhow their power contracts (or their hardware turnover) are\nscheduled...many miners might (?) have already planned, in private, to\nclose down (or substantially reduce) operations after the halving.\n\nAs the coinbase rewards are currently orders of magnitude larger than\ntx-fees, fees are unlikely to be able to compensate for this. Users may\ndecide to simply hold-off on transacting until fees decrease.\n\nWorse, if the price crashes (possibly as a result of uncertainty\nsurrounding this episode), it will begin to affect miner-revenue.\n\nAs a result, miners may decide to temporarily halt mining until the\ndifficulty falls naturally.\n\nBut such a temporary halt is also (potentially) disastrous. Recall the\nsimple fact that difficulty adjustments are measured in blocks, not time\n(it appears that we have exactly 1015 blocks between the halving block\nand the next difficulty adjustment block). If excessive difficulty\nchokes the system, next difficulty adjustment may *never* arrive naturally.\n\nIn this worst-case (but somewhat plausible) scenario, we will be\n*forced* to lower the difficulty via hard fork, and we will be forced to\ndo so very very QUICKLY, as word will be spreading that the Bitcoin\nsystem has broken!\n\nIf a specific hard fork is not coded and tested for this, in advance,\nthe delay might be accompanied by endless [contentious] conversations\nabout what else should be included in this hard fork.\n\nWorse, since all users will need to upgrade, there will be uncertainty\nover contentious versions, malicious agents may try to tamper with\nversions (to steal Bitcoins), etc. We should consider pushing a version\nout for users to upgrade, in advance of the halving, as soon as possible.\n\n\n\nWhat a disaster! I certainly hope it does not happen, but if it does we\nshould have already agreed on what to do.\n\n\nOne choice is \"which number do we set the difficulty to?\". Half may be\ntoo much, or too little. However, allow me to suggest that, if this\ndisastrous scenario occurs, we shouldn't take any chances, and reduce\ndifficulty by a huge proportion...80% or so. The difficulty will then\nquickly begin to increase again...we can warn users of the increased\norphan risk, and that they should wait for many confirmations (which\nshould be happening faster).\n\nSo, \"Allow the alert key to reduce the difficulty by 80%, exactly once\non one of the 1015 blocks between halving and difficulty adjustment.\"\n\nAnd we should consider smoothing the rewards (as described in my post,\ncan be done via soft fork) to prevent this from happening again. In\nmicroeconomics literature, 'kinks' in incentive-systems are\nalmost-universally agreed to be very undesirable.\n\nPaul\n\n\nOn 3/2/2016 10:42 AM, Luke Dashjr via bitcoin-dev wrote:\n> On Wednesday, March 02, 2016 2:56:14 PM Luke Dashjr via bitcoin-dev wrote:\n>> so it may even be possible to have such a proposal ready in time to be\n>> deployed alongside SegWit  to take effect in time for the upcoming subsidy\n>> halving.\n> \n> Lapse of thinking/clarity here. This probably isn't a practical timeframe for \n> deployment, unless/until there's an emergency situation. So if the code were \n> bundled with SegWit, it would need some way to avoid its early activation \n> outside of such an emergency (which could possibly be detected in code, in \n> this case).\n> \n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-02T18:07:41",
                "message_text_only": "On Wed, Mar 2, 2016 at 4:27 PM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> For example, it is theoretically possible that 100% of miners (not 50%\n> or 10%) will shut off their hardware. This is because it is revenue\n> which ~halves, not profit.\n\n\nIt depends on how much is sunk costs and how much is marginal costs too.\n\nIf hashing costs are 50% capital and 50% marginal, then the entire network\nwill be able to absorb a 50% drop in subsidy.\n\n50% capital costs means that the cost of the loan to buy the hardware\nrepresents half the cost.\n\nAssume that for every $100 of income, you have to pay $49 for the loan and\n$49 for electricity giving 2% profit.  If the subsidy halves, then you only\nget $50 of income, so lose $48.\n\nBut if the bank repossesses the operation, they might as well keep things\nrunning for the $1 in marginal profit (or sell on the hardware to someone\nwho will keep using it).\n\nSince this drop in revenue is well known in advance, businesses will spend\nless on capital.  That means that there should be less mining hardware than\notherwise.\n\nA 6 month investment with 3 months on the high subsidy and 3 months on low\nsubsidy would not be made if it only generated a small profit for the first\n3 and then massive losses for the 2nd period of 3 months.  For it to be\nmade, there needs to be large profit during the first period to compensate\nfor the losses in the 2nd period.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/1b50893e/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2016-03-02T19:01:36",
                "message_text_only": "> A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made\u2026\n\n \n\nYes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it\u2019s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.\n\n \n\nChanging these futures punishes those who have planned properly and favors those who have not. Sort of like a Bitcoin bail-in; are some miners are too big to fail? It also creates the expectation that it may happen again. This infects the money with the sort of uncertainty that Bitcoin is designed to prevent.\n\n \n\ne\n\n \n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Tier Nolan via bitcoin-dev\nSent: Wednesday, March 2, 2016 10:08 AM\nCc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hardfork to fix difficulty drop algorithm\n\n \n\nOn Wed, Mar 2, 2016 at 4:27 PM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org> > wrote:\n\nFor example, it is theoretically possible that 100% of miners (not 50%\nor 10%) will shut off their hardware. This is because it is revenue\nwhich ~halves, not profit.\n\n \n\nIt depends on how much is sunk costs and how much is marginal costs too.\n\nIf hashing costs are 50% capital and 50% marginal, then the entire network will be able to absorb a 50% drop in subsidy.\n\n50% capital costs means that the cost of the loan to buy the hardware represents half the cost.\n\nAssume that for every $100 of income, you have to pay $49 for the loan and $49 for electricity giving 2% profit.  If the subsidy halves, then you only get $50 of income, so lose $48.  \n\nBut if the bank repossesses the operation, they might as well keep things running for the $1 in marginal profit (or sell on the hardware to someone who will keep using it).\n\nSince this drop in revenue is well known in advance, businesses will spend less on capital.  That means that there should be less mining hardware than otherwise.\n\nA 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made if it only generated a small profit for the first 3 and then massive losses for the 2nd period of 3 months.  For it to be made, there needs to be large profit during the first period to compensate for the losses in the 2nd period.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/0439b647/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2016-03-02T23:02:13",
                "message_text_only": "On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev wrote:\n> > A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made\u2026\n> \n>  \n> \n> Yes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it\u2019s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.\n\nYou know, I do agree with you.\n\nBut see, this is one of the reasons why we keep reminding people that\nstrictly speaking a hardfork *is* an altcoin, and the altcoin can change\nany rule currently in Bitcoin.\n\nIt'd be perfectly reasonable to create an altcoin with a 22-million-coin\nlimit and an inflation schedule that had smooth, rather than abrupt,\ndrops. It'd also be reasonable to make that altcoin start with the same\nUTXO set as Bitcoin as a means of initial coin distribution.\n\nIf miners choose to start mining that altcoin en-mass on the halving,\nall the more power to them. It's our choice whether or not we buy those\ncoins. We may choose not to, but if 95% of the hashing power decides to\ngo mine something different we have to accept that under our current\nchosen rules confirmations might take a long time.\n\n\nOf course, personally I agree with Gregory Maxwell: this is all fairly\nunlikely to happen, so the discussion is academic. But we'll see.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n000000000000000004d430e1daab776bc1c194589b0326924220faa00efc50cf\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/dc039e04/attachment-0001.sig>"
            },
            {
                "author": "Dave Scotese",
                "date": "2016-03-03T05:11:16",
                "message_text_only": "It makes sense to me that there might be objective conditions under which\nwe would want to use a number smaller than 2016.  A good example would be a\nmean time between blocks of more than 20 minutes over the last 144 blocks\n(one  - two days).  If such an occurrence ever happened, and the software\nthen cut the retarget interval to 1008 (triggering an immediate retarget if\nthe counter is over 1008), the only problem I see is how to measure the\nmean time between blocks.\n\nIn fact, has anyone examined the potential problems of reducing the\nretarget period, even to one?  Not Really.\n<http://bitcoin.stackexchange.com/questions/9305/why-not-retarget-on-every-block>\nThat question includes a suggestion of retargeting on every block, but\nusing the same 2016 block window for the calculation, so difficulty changes\nwould be very smooth, and still as unpredictable and how long till we find\nthe next block.\n\nOn Wed, Mar 2, 2016 at 3:02 PM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev\n> wrote:\n> > > A 6 month investment with 3 months on the high subsidy and 3 months on\n> low subsidy would not be made\u2026\n> >\n> >\n> >\n> > Yes, this is the essential point. All capital investments are made based\n> on expectations of future returns. To the extent that futures are perfectly\n> knowable, they can be perfectly factored in. This is why inflation in\n> Bitcoin is not a tax, it\u2019s a cost. These step functions are made continuous\n> by their predictability, removing that predictability will make them --\n> unpredictable.\n>\n> You know, I do agree with you.\n>\n> But see, this is one of the reasons why we keep reminding people that\n> strictly speaking a hardfork *is* an altcoin, and the altcoin can change\n> any rule currently in Bitcoin.\n>\n> It'd be perfectly reasonable to create an altcoin with a 22-million-coin\n> limit and an inflation schedule that had smooth, rather than abrupt,\n> drops. It'd also be reasonable to make that altcoin start with the same\n> UTXO set as Bitcoin as a means of initial coin distribution.\n>\n> If miners choose to start mining that altcoin en-mass on the halving,\n> all the more power to them. It's our choice whether or not we buy those\n> coins. We may choose not to, but if 95% of the hashing power decides to\n> go mine something different we have to accept that under our current\n> chosen rules confirmations might take a long time.\n>\n>\n> Of course, personally I agree with Gregory Maxwell: this is all fairly\n> unlikely to happen, so the discussion is academic. But we'll see.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n> 000000000000000004d430e1daab776bc1c194589b0326924220faa00efc50cf\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/c1a8954e/attachment.html>"
            },
            {
                "author": "Patrick Shirkey",
                "date": "2016-03-03T10:14:56",
                "message_text_only": "On Thu, March 3, 2016 10:02 am, Peter Todd via bitcoin-dev wrote:\n> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev\n> wrote:\n>> > A 6 month investment with 3 months on the high subsidy and 3 months on\n>> low subsidy would not be made\u00e2\u20ac\u00a6\n>>\n>>\n>>\n>> Yes, this is the essential point. All capital investments are made based\n>> on expectations of future returns. To the extent that futures are\n>> perfectly knowable, they can be perfectly factored in. This is why\n>> inflation in Bitcoin is not a tax, it\u00e2\u20ac\u2122s a cost. These step functions\n>> are made continuous by their predictability, removing that\n>> predictability will make them -- unpredictable.\n>\n> You know, I do agree with you.\n>\n> But see, this is one of the reasons why we keep reminding people that\n> strictly speaking a hardfork *is* an altcoin, and the altcoin can change\n> any rule currently in Bitcoin.\n>\n> It'd be perfectly reasonable to create an altcoin with a 22-million-coin\n> limit and an inflation schedule that had smooth, rather than abrupt,\n> drops. It'd also be reasonable to make that altcoin start with the same\n> UTXO set as Bitcoin as a means of initial coin distribution.\n>\n> If miners choose to start mining that altcoin en-mass on the halving,\n> all the more power to them. It's our choice whether or not we buy those\n> coins. We may choose not to, but if 95% of the hashing power decides to\n> go mine something different we have to accept that under our current\n> chosen rules confirmations might take a long time.\n>\n>\n> Of course, personally I agree with Gregory Maxwell: this is all fairly\n> unlikely to happen, so the discussion is academic. But we'll see.\n>\n\nBitcoin is a success.\n\nThe success has forced various hardfork discussions.\n\nHard forking is contentious. If a softfork cannot be achieved the\nalternate to a hardfork is creating a new bitcoin. ex bitcoin 2.0\n\nSimilar to silver, gold, palladium, etc...\n\nBitcoins success partly stems from it's brand awareness. Any new\nofficially supported bitcoin will also benefit from this brand awareness.\n\nIf the market values the new improved bitcoin they will put their money\ninto it. This doesn't require any consensus.\n\nLet the market decide which option has the most value. If everyone\nswitches to the new bitcoin then the old bitcoin miners will follow.\n\n\n\n\n\n--\nPatrick Shirkey\nBoost Hardware Ltd"
            },
            {
                "author": "Eric Voskuil",
                "date": "2016-03-03T20:54:24",
                "message_text_only": "On 03/02/2016 03:02 PM, Peter Todd wrote:\n> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev wrote:\n>>> A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made\u2026\n>>\n>> Yes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it\u2019s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.\n> \n> You know, I do agree with you.\n> \n> But see, this is one of the reasons why we keep reminding people that\n> strictly speaking a hardfork *is* an altcoin, and the altcoin can change\n> any rule currently in Bitcoin.\n> \n> It'd be perfectly reasonable to create an altcoin with a 22-million-coin\n> limit and an inflation schedule that had smooth, rather than abrupt,\n> drops. It'd also be reasonable to make that altcoin start with the same\n> UTXO set as Bitcoin as a means of initial coin distribution.\n> \n> If miners choose to start mining that altcoin en-mass on the halving,\n> all the more power to them. It's our choice whether or not we buy those\n> coins. We may choose not to, but if 95% of the hashing power decides to\n> go mine something different we have to accept that under our current\n> chosen rules confirmations might take a long time.\n> \n> Of course, personally I agree with Gregory Maxwell: this is all fairly\n> unlikely to happen, so the discussion is academic. But we'll see.\n> \nI agree, this is a perfectly rational interpretation. I also agree that\nthis particular instance is academic. But I see more to this than\naccepting what is possible.\n\nIn the case of Federal Reserve Notes the gold obligation was abrogated.\nThis was (at least) a contract default, implemented by force of arms.\nThis contentious hard fork was clearly an attack.\n\nBut in a system with no authority and in which nobody has formed a\ncontractual obligation with anyone else, what would constitute an attack\non the money? There is no difference between state attacks on (or\ncollusion with) miners and miners acting on self interest.\n\nOne answer is that nothing is an attack, it's up to the market to\ndecide. But to the extent that there can be an attack on the money, the\nattempt to move the value of the coin to an altcoin (hard fork) is it.\nThough the choice of the term \"attack\" isn't essential.\n\nThe importance of recognizing an attack is that it affords one the\nopportunity to defend against it. People holding \"dollars\" in 1933 were\nill equipped to defend against a system level attack (monetary policy),\nin part because many did not recognize it as such, and in part because\nthere was insufficient preparation by those who did.\n\nI see us building the tools and awareness necessary for defense. As you\nsay, nobody has to buy into an altcoin forked from their coin. This much\nis simple to achieve. The more difficult problem is preserving the\nutility of the original coin. Clearly the purpose of a hard fork (as\nopposed to a new coin) is to transfer this value.\n\nWe've all seen arguments for contentious hard fork deployment that\nexplicitly depend on the fear of monetary loss to drag people to\nacceptance. While this may be the nature of the technology, it's\nimportant that we develop effective defense against it.\n\nUltimately the only defense is individual validation. The collusion of\nbanks (web wallets) with miners in attacking consensus is obvious. But\neven without active collusion, the surrender of validation leaves people\njust as defenseless as *being* unarmed while retaining a right to\n*become* armed.\n\nEven if every person mines at the same level, the system amounts to\nlittle more than majority rule if validation is not decentralized. There\nare people perfectly willing to exploit this weakness.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/10b4501e/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-04T10:27:48",
                "message_text_only": "An alternative soft fork would be to require that miners pay some of the\ncoinbase to a CLTV locked output (that is otherwise unlocked).  This allows\nthe release of the funds to be delayed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160304/c1de9387/attachment.html>"
            },
            {
                "author": "Dave Hudson",
                "date": "2016-03-02T15:48:21",
                "message_text_only": "I think the biggest question here would be how would the difficulty retargeting be changed?  Without seeing the algorithm proposal it's difficult to assess the impact that it would have, but my intuition is that this is likely to be problematic.\n\nProbabilistically the network sees surprisingly frequent swings of +/-20% in terms of the block finding rate on any given day, while the statistical noise over a 2016 block period can be more than +/-5%.  Any change would still have to require a fairly significant period of time before there would be a reasonable level of confidence that the hash rate really had fallen as opposed to just seeing statistical noise (http://hashingit.com/analysis/29-lies-damned-lies-and-bitcoin-difficulties and http://hashingit.com/analysis/28-reach-for-the-ear-defenders).\n\nHow long would be required to deem that the hash rate had dramatically fallen?  Would such a change be a one-time event or would it be ever-present?\n\nIf we were to say that if the hash rate dropped 50% in one day (which could, of course be a 30% real drop and 20% variance) and the difficulty was retargeted to 50% lower then that would have to be matched with a similar rapid retarget if it were to increase by a similar amount.  Failing to do this both ways this would introduce an economic incentive for large miners to suppress the difficulty and gain dramatically larger numbers of block rewards.  The current fixed block count per difficulty change prevents this because the daily losses while suppressing hashing outweigh the potential gains when it's re-added.\n\n\nCheers,\nDave\n\n\n> On 2 Mar 2016, at 14:56, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> We are coming up on the subsidy halving this July, and there have been some \n> concerns raised that a non-trivial number of miners could potentially drop off \n> the network. This would result in a significantly longer block interval, which \n> also means a higher per-block transaction volume, which could cause the block \n> size limit to legitimately be hit much sooner than expected. Furthermore, due \n> to difficulty adjustment being measured exclusively in blocks, the time until \n> it adjusts to compensate would be prolonged.\n> \n> For example, if 50% of miners dropped off the network, blocks would be every \n> 20 minutes on average and contain double the transactions they presently do. \n> Even double would be approximately 850-900k, which potentially bumps up \n> against the hard limit when empty blocks are taken into consideration. This \n> situation would continue for a full month if no changes are made. If more \n> miners drop off the network, most of this becomes linearly worse, but due to \n> hitting the block size limit, the backlog would grow indefinitely until the \n> adjustment occurs.\n> \n> To alleviate this risk, it seems reasonable to propose a hardfork to the \n> difficulty adjustment algorithm so it can adapt quicker to such a significant \n> drop in mining rate. BtcDrak tells me he has well-tested code for this in his \n> altcoin, which has seen some roller-coaster hashrates, so it may even be \n> possible to have such a proposal ready in time to be deployed alongside SegWit \n> to take effect in time for the upcoming subsidy halving. If this slips, I \n> think it may be reasonable to push for at least code-readiness before July, \n> and possibly roll it into any other hardfork proposed before or around that \n> time.\n> \n> I am unaware of any reason this would be controversial, so if anyone has a \n> problem with such a change, please speak up sooner rather than later. Other \n> ideas or concerns are of course welcome as well.\n> \n> Thanks,\n> \n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Bob McElrath",
                "date": "2016-03-08T22:05:07",
                "message_text_only": "Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:\n> I think the biggest question here would be how would the difficulty\n> retargeting be changed?  Without seeing the algorithm proposal it's difficult\n> to assess the impact that it would have, but my intuition is that this is\n> likely to be problematic.\n\nI have no comment on whether this will be *needed* but there's a simple\nalgorithm that I haven't seen any coin adopt, that I think needs to be: the\ncritically damped harmonic oscillator:\n\n    http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html\n\nIn dynamical systems one does a derivative expansion.  Here we want to find the\nfirst and second derivatives (in time) of the hashrate.  These can be determined\nby a method of finite differences, or fancier algorithms which use a quadratic\nor quartic polynomial approximation.  Two derivatives are generally all that is\nneeded, and the resulting dynamical system is a damped harmonic oscillator.  \n\nA damped harmonic oscillator is basically how your car's shock absorbers work.\nThe relevant differential equation has two parameters: the oscillation frequency\nand damping factor.  The maximum oscillation frequency is the block rate.  Any\noscillation faster than the block rate cannot be measured by block times.  The\ndamping rate is an exponential decay and for critical damping is twice the\noscillation frequency.\n\nSo, this is a zero parameter, optimal damping solution for a varying hashrate.\nThis is inherently a numeric approximation solution to a differential equation,\nso questions of approximations for the hashrate enter, but that's all.  Weak\nblock proposals will be able to get better approximations to the hashrate.\n\nIf solving this problem is deemed desirable, I can put some time into this, or\ndirect others as to how to go about it.\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken"
            },
            {
                "author": "Dave Hudson",
                "date": "2016-03-09T18:30:19",
                "message_text_only": "A damping-based design would seem like the obvious choice (I can think of a few variations on a theme here, but most are found in the realms of control theory somewhere).  The problem, though, is working working out a timeframe over which to run the derivative calculations.\n\nThe problem is the measurement of the hashrate, which is pretty inaccurate at best because even 2016 events isn't really enough (with a completely constant hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even with the current algorithm).  In order to meaningfully react to a major loss of hashing we'd still need to be considering a window of probably 2 weeks.\n\nMy other concern is that if we allow quick retargets to lower difficulties then that seems likely to expose the chain to being gamed.  I'd need to think about this some more, but a few scenarios I was thinking about earlier this week appeared to risk making some types of selfish mining strategies quite a lot more profitable.\n\nWith all this said though I'll be very surprised if there's a huge drop in the hash rate come July.  The hash rate has jumped up by almost 70% in the last 6 to 7 months and that implies some pretty serious investments by miners who are quite aware of the halving.  My guess is that quite a lot of the baseline 30% has also been replaced in the same cycle.  These same miners were mining with a coin price around $250 last year so in terms of profitability I'm pretty sure that one around $400 won't be a huge concern.\n\nI'm sure that there will be some very public \"I'm done with mining\" announcements from a few smaller miners come July, but I suspect the bulk of the network will have a relatively small blip and continue on its way.\n\n\nCheers,\nDave\n\n\n> On 8 Mar 2016, at 22:05, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:\n> \n> Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:\n>> I think the biggest question here would be how would the difficulty\n>> retargeting be changed?  Without seeing the algorithm proposal it's difficult\n>> to assess the impact that it would have, but my intuition is that this is\n>> likely to be problematic.\n> \n> I have no comment on whether this will be *needed* but there's a simple\n> algorithm that I haven't seen any coin adopt, that I think needs to be: the\n> critically damped harmonic oscillator:\n> \n>    http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html\n> \n> In dynamical systems one does a derivative expansion.  Here we want to find the\n> first and second derivatives (in time) of the hashrate.  These can be determined\n> by a method of finite differences, or fancier algorithms which use a quadratic\n> or quartic polynomial approximation.  Two derivatives are generally all that is\n> needed, and the resulting dynamical system is a damped harmonic oscillator.  \n> \n> A damped harmonic oscillator is basically how your car's shock absorbers work.\n> The relevant differential equation has two parameters: the oscillation frequency\n> and damping factor.  The maximum oscillation frequency is the block rate.  Any\n> oscillation faster than the block rate cannot be measured by block times.  The\n> damping rate is an exponential decay and for critical damping is twice the\n> oscillation frequency.\n> \n> So, this is a zero parameter, optimal damping solution for a varying hashrate.\n> This is inherently a numeric approximation solution to a differential equation,\n> so questions of approximations for the hashrate enter, but that's all.  Weak\n> block proposals will be able to get better approximations to the hashrate.\n> \n> If solving this problem is deemed desirable, I can put some time into this, or\n> direct others as to how to go about it.\n> \n> --\n> Cheers, Bob McElrath\n> \n> \"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n>    -- H. L. Mencken \n>"
            },
            {
                "author": "Bob McElrath",
                "date": "2016-03-09T20:21:36",
                "message_text_only": "Dave Hudson [dave at hashingit.com] wrote:\n> A damping-based design would seem like the obvious choice (I can think of a\n> few variations on a theme here, but most are found in the realms of control\n> theory somewhere).  The problem, though, is working working out a timeframe\n> over which to run the derivative calculations.\n\n>From a measurement theory perspective this is straightforward.  Each block is a\nmeasurement, and error propagation can be performed to derive an error on the\nderivatives.\n\nThe statistical theory of Bitcoin's block timing is known as a Poisson Point\nProcess: https://en.wikipedia.org/wiki/Poisson_point_process or temporal point\nprocess.  If you google those plus \"estimation\" you'll find a metric shit-ton of\nliterature on how to handle this.\n\n> The problem is the measurement of the hashrate, which is pretty inaccurate at\n> best because even 2016 events isn't really enough (with a completely constant\n> hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even\n> with the current algorithm).  In order to meaningfully react to a major loss\n> of hashing we'd still need to be considering a window of probably 2 weeks.\n\nYou don't want to assume it's constant in order to get a better measurement.\nThe assumption is clearly false.  But, errors can be calculated, and retargeting\ncan take errors into account, because no matter what we'll always be dealing\nwith a finite sample.\n\nPersonally I don't think difficulty target variations are such a big deal, if\nthe algorithm targets that over any long time interval, the average block time\nis 10 min.  Bitcoin's current algorithm fails here, with increasing hashrate (as\nwe have), it issues coins faster than its assumed schedule.\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken"
            },
            {
                "author": "Dave Hudson",
                "date": "2016-03-09T23:24:15",
                "message_text_only": "> On 9 Mar 2016, at 20:21, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:\n> \n> Dave Hudson [dave at hashingit.com] wrote:\n>> A damping-based design would seem like the obvious choice (I can think of a\n>> few variations on a theme here, but most are found in the realms of control\n>> theory somewhere).  The problem, though, is working working out a timeframe\n>> over which to run the derivative calculations.\n> \n> From a measurement theory perspective this is straightforward.  Each block is a\n> measurement, and error propagation can be performed to derive an error on the\n> derivatives.\n\nSure, but I think there are 2 problems:\n\n1) My guess is that errors over anything but a long period are probably too large to be very useful.\n\n2) We don't have a strong notion of time that is part of the consensus.  Sure, blocks have timestamps but they're very loosely controlled (can't be more than 2 hours ahead of what any validating node thinks the time might be).  Difficulty can't be calculated based on anything that's not part of the consensus data.\n\n> The statistical theory of Bitcoin's block timing is known as a Poisson Point\n> Process: https://en.wikipedia.org/wiki/Poisson_point_process or temporal point\n> process.  If you google those plus \"estimation\" you'll find a metric shit-ton of\n> literature on how to handle this.\n\nStrictly it's a non-homogeneous Poisson Process, but I'm pretty familiar with the concept (Google threw one of my own blog posts back at me: http://hashingit.com/analysis/27-hash-rate-headaches, but I actually prefer this one: http://hashingit.com/analysis/30-finding-2016-blocks because most people seem to find it easier to visualize).\n\n>> The problem is the measurement of the hashrate, which is pretty inaccurate at\n>> best because even 2016 events isn't really enough (with a completely constant\n>> hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even\n>> with the current algorithm).  In order to meaningfully react to a major loss\n>> of hashing we'd still need to be considering a window of probably 2 weeks.\n> \n> You don't want to assume it's constant in order to get a better measurement.\n> The assumption is clearly false.  But, errors can be calculated, and retargeting\n> can take errors into account, because no matter what we'll always be dealing\n> with a finite sample.\n\nAgreed, it's a thought experiment I ran in May 2014 (http://hashingit.com/analysis/28-reach-for-the-ear-defenders).  I found that many people's intuition is that there would be little or no difficulty changes in such a scenario, but the intuition isn't reliable.  Given a static hash rate the NHPP behaviour introduces a surprisingly large amount of noise (often much larger than any signal over a period of even weeks).  Any measurements in the order of even a few days has so much noise that it's practically unusable.  I just realized that unlike some of my other sims this one didn't make it to github; I'll fix that later this week.\n\n\nCheers,\nDave"
            },
            {
                "author": "Paul Sztorc",
                "date": "2016-03-09T20:26:47",
                "message_text_only": "On 3/9/2016 1:30 PM, Dave Hudson via bitcoin-dev wrote:\n> The hash rate has jumped up by almost 70% in the last 6 to 7 months and that implies some pretty serious investments by miners who are quite aware of the halving.\nThere are a few ways in which that information would be irrelevant:\n[1.] It is possible that miners expect to breakeven before the halving.\n[2.] It is also possible that miners earnestly believe that there will\nbe no problem -- however:\n...  [2a.] This belief may be mistaken.\n...  [2b.] Miners may be counting on Core Devs to fix any problems that\ncome up with anything, this one included.\n\nAlso, [3.] many miners believe that the price will increase around the\ntime of the halving, either for market-microstructure reasons or\nmarketing reasons. I, personally, think that the price is as likely to\ngo down as up.\n\nOn 3/9/2016 1:30 PM, Dave Hudson via bitcoin-dev wrote:\n> These same miners were mining with a coin price around $250 last year so in terms of profitability I'm pretty sure that one around $400 won't be a huge concern.\nFor some miners, currently it costs $X in electricity per coin mined,\nand $400 / 2 is less than X. I do not know how representative this\ninformation is.\n\nPaul"
            },
            {
                "author": "Bryan Bishop",
                "date": "2016-03-02T16:17:31",
                "message_text_only": "On Wed, Mar 2, 2016 at 8:56 AM, Luke Dashjr wrote:\n\n> We are coming up on the subsidy halving this July, and there have been some\n>\n\nLuke,\n\nOne reason \"hard-fork to fix difficulty drop algorithm\" could be\ncontroversial is that the proposal involves a hard-fork (perhaps\nnecessarily so, at my first and second glance). There are a number of\nconcerns with hard-forks including security, deployment, participation,\nreadiness measurement, backwards incompatibility, etc. In fact, some\nBitcoin Core developers believe that hard-forks are not a good idea and\nshould not be used.\n\n# Hard-forks\n\nAn interesting (unspoken?) idea I\u2019ve heard from a few people has been \u201cwe\nshould try to avoid all hard-forks because they are backwards\nincompatible\u201d, another thought has been \"there should only be one more\nhard-fork if any\" and/or \"there should only be one hard-fork every 30\nyears\". I also recognize feedback from others who have mentioned \"probably\nunrealistic to expect that the consensus layer can be solidified this early\nin Bitcoin's history\". At the same time there are concerns about \u201cslippery\nslopes\u201d....\n\nAlso, if you are going to participate in a hard-fork then I think you\nshould make up some proposals for ensure minimal monetary loss on the old\n(non-hard-forked) chain, especially since your proposed timeline is so\nshort seems reasonable to expect even more safety-related due diligence to\nminimize money loss (such as using a new address prefix on the hard-forked\nupgrade). Anyway, it should be clear that hard-forks are an unsettled issue\nand are controversial in ways that I believe you are already aware about.\n\n# Have miners gradually reduce their hashrate instead of using a step\nfunction cliff\n\nadam3us recently proposed that miners who are thinking of turning off\nequipment should consider gradually ramping down their hashrate, as a show\nof goodwill (and substantial loss to themselves, similar to how they would\nincur losses from no longer mining after the halving). This is not\nsomething the consensus algorithm can enforce at the moment, and this\nsuggestion does not help under adversarial conditions. Since this\nsuggestion does not require a hard-fork, perhaps some effort should be made\nto query miners and figure out if they need assistance with implementing\nthis (if they happen to be interested).\n\n# Contingency planning\n\nHaving said all of the negative things above about hard-forks, I will add\nthat I do actually like the idea of having backup plans available and\ntested and gitian-built many weeks ahead of expected network event dates.\nUnfortunately this might encourage partial consensus layer hard-forks in\ntimes of extreme uncertainty such as \"emergencies\".... creating an even\nfurther emergency.\n\n# \"Indefinite backlog growth\"\n\nYou write \"the backlog would grow indefinitely until the adjustment\noccurs\". This seems to be expected behavior regardless of difficulty\nadjustment (in fact, a backlog could continue to grow even once difficulty\nadjusts downward), and the consensus protocol does not commit to\ninformation regarding that backlog anyway...\n\n# Difficulty adjustment taking time is expected\n\nThis is an expected part of the protocol, it's been mentioned since\nforever, it's well known and accounted for. Instead, we should be providing\nadvice to users about which alternative payment systems they should be\nusing if they expect instantaneous transaction confirmations. This has been\na long-standing issue, and rolling out a hard-fork is not going to fix\nmistaken assumptions from users. They will still think that confirmations\nwere meant to be instantaneous regardless of how many hard-forks you choose\nto deploy.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/aefad2cc/attachment.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2016-03-02T17:14:28",
                "message_text_only": "On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:\n> To alleviate this risk, it seems reasonable to propose a hardfork to the \n> difficulty adjustment algorithm so it can adapt quicker to such a significant \n> drop in mining rate.\n\nHaving a well-reviewed hard fork patch for rapid difficulty adjustment\nwould seem to be a useful reserve for all sorts of possible problems.\nThat said, couldn't this specific potential situation be dealt with by a\nrelatively simple soft fork?\n\nLet's say that, starting soon, miners require that valid block header\nhashes be X% below the target value indicated by nBits. The X% changes\nwith each block, starting at 0% and increasing to 50% just before block\n420,000 (the halving). This means the before the halving, every two\nhashes are being treated as one hash, on average.\n\nFor blocks 420,000 and higher the code is disabled, immediately doubling\nthe effective hash rate at the same time the subsidy is halved,\npotentially roughly canceling each other out to make a pre-halving hash\nequal in economic value to a post-halving hash.\n\nOf course, some (perhaps many) miners will not be profitable at the\npost-halving subsidy level, so the steady increase in X% will force them\noff the network at some point before the halving, hopefully in small\nnumbers rather than all at once like the halving would be expected to do.\n\nFor example, if the soft fork begins enforcement at block 410,000, then\nX% can be increased 0.01% per block. Alice is a miner whose costs are\n24BTC per block and she never claims tx fees for some reason, so her\nprofits now are always 25BTC per block. During the first difficulty\nperiod after the soft fork is deployed, the cost to produce a hash will\nincrease like this,\n\n    0: 0%           500: 5%         1000: 10%       1500: 15%       2000: 20%\n    100: 1%         600: 6%         1100: 11%       1600: 16%\n    200: 2%         700: 7%         1200: 12%       1700: 17%\n    300: 3%         800: 8%         1300: 13%       1800: 18%\n    400: 4%         900: 9%         1400: 14%       1900: 19%\n\nSomewhere around block 417, Alice will need to drop out because her\ncosts are now above 25BTC per block.  With the loss of her hash rate,\nthe average interblock time will increase and the capacity will decrease\n(all other things being equal). However, Bob whose costs are 20BTC per\nblock can keep mining through the period.\n\nAt the retarget, the difficulty will go down (the target goes up) to\naccount for the loss of Alice's hashes. It may even go down enough\nthat Alice can mine profitably for a few more blocks early in the new\nperiod, but the increasing X% factor will make her uneconomical again,\nand this time it might even make Bob uneconomical too near the end of\nthe period. However, Charlie whose costs are 12BTC per block will\nnever be uneconomical as he can continue mining profitably even after\nthe halving. Alice and Bob mining less will increase the percentage of\nblocks Charlie produces before the retarget, steadily shifting the\ndynamics of the mining network to the state expected after the halving\nand hopefully minimizing the magnitude of any shocks.\n\nThis does create the question about whether this soft fork would be\nethical, as Alice and Bob may have invested money and time on the\nassumption that their marginal hardware would be usable up until the\nhalving and with this soft fork they would become uneconomical earlier\nthan block 420,000. A counterargument here is such an investment was\nalways speculative given the vagaries of exchange rate fluctuation, so\nit could be permissible to change the economics slightly in order to\nhelp ensure all other Bitcoin users experience minimal disruption during\nthe halving.\n\nUnless I'm missing something (likely) I think this proposal has the\nadvantage of fast rollout (if the mechanism of an adjusted target is as\nsimple as I think it could be) in a non-emergency manner without a hard\nfork that would require all full nodes upgrade (plus maybe some SPV\nsoftware that check nBits, which they probably all should be doing\ngiven it's in the block headers that they download anyway).\n\n-Dave\n\nP.S. I see Tier Nolan proposed something similar while I was writing\n     this. I think this proposal differs in its analysis to warrant a\n     possible duplicate posting."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2016-03-02T17:53:46",
                "message_text_only": "On Wed, Mar 2, 2016 at 5:14 PM, David A. Harding via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:\n>> To alleviate this risk, it seems reasonable to propose a hardfork to the\n>> difficulty adjustment algorithm so it can adapt quicker to such a significant\n>> drop in mining rate.\n>\n> Having a well-reviewed hard fork patch for rapid difficulty adjustment\n> would seem to be a useful reserve for all sorts of possible problems.\n> That said, couldn't this specific potential situation be dealt with by a\n> relatively simple soft fork?\n[...]\n\n\nWhat you are proposing makes sense only if it was believed that a very\nlarge difficulty drop would be very likely.\n\nThis appears to be almost certainly untrue-- consider-- look how long\nago since hashrate was 50% of what it is now, or 25% of what it is\nnow-- this is strong evidence that supermajority of the hashrate is\nequipment with state of the art power efficiency. (I've also heard\nmore directly-- but I think the this evidence is more compelling\nbecause it can't be tainted by boasting). If a pre-programmed ramp and\ndrop is set then it has the risk of massively under-setting\ndifficulty; which is also strongly undesirable (e.g. advanced\ninflation and exacerbating existing unintentional selfish mining)...\nand that is before suggesting that miners voluntarily take a loss of\ninflation now.\n\nSo while I think this concern is generally implausible; I think it's\nprudent to have a difficulty step patch (e.g. a one time single point\nwhere a particular block is required to lower bits a set amount) ready\nto go in the unlikely case the network is stalled. Of course, if the\nalternative is \"stuck\" from a large hashrate drop the deployment would\nbe both safe and relatively uncontroversial. I think the\nunfavorability of that approach is well matched to the implausibility\nof the situation, and likely the right coarse of action compared to\nrisky interventions that would likely cause harm. The cost of\ndeveloping and testing such a patch is low, and justified purely on\nthe basis of increasing confidence that an issue would be handled (a\nfact _I_ am perfectly confident in; but apparently some are not).\n\nWith respect what Luke was suggesting; without specifics its hard to\ncomment, but most altcoin \"tolerate difficulty drop\" changes have made\nthem much more vulnerable to partitioning attacks and other issues\n(e.g. strategic behavior by miners to increase inflation), and have\nactually been exploited in practice several times (solidcoin's being\nthe oldest I'm aware of). Many survived a fairly long time before\nbeing shown to be pretty broken, simply because they were deployed in\ncases where no one cared to attack. I'm currently doubtful that\nparticular path would be fruitful."
            },
            {
                "author": "David A. Harding",
                "date": "2016-03-02T19:34:33",
                "message_text_only": "On Wed, Mar 02, 2016 at 05:53:46PM +0000, Gregory Maxwell wrote:\n> What you are proposing makes sense only if it was believed that a very\n> large difficulty drop would be very likely.\n>\n> This appears to be almost certainly untrue-- consider-- look how long\n> ago since hashrate was 50% of what it is now, or 25% of what it is\n> now-- this is strong evidence that supermajority of the hashrate is\n> equipment with state of the art power efficiency.\n\nTo avoid duplication of looking up this statistic among readers, here\nare the various recent difficulties:\n\n    $ for i in $( seq 0 2016 60000 ) ; do echo -n $i blocks ago:' ' ; bitcoin-cli getblock $( bitcoin-cli getblockhash $(( 400857 - i )) ) | jshon -e difficulty ; done | column -t\n    0      blocks  ago:  163491654908.95929\n    2016   blocks  ago:  144116447847.34869\n    4032   blocks  ago:  120033340651.237\n    6048   blocks  ago:  113354299801.4711\n    8064   blocks  ago:  103880340815.4559\n    10080  blocks  ago:  93448670796.323807\n    12096  blocks  ago:  79102380900.225983\n    14112  blocks  ago:  72722780642.54718\n    16128  blocks  ago:  65848255179.702606\n    18144  blocks  ago:  62253982449.760818\n    20160  blocks  ago:  60883825480.098282\n    22176  blocks  ago:  60813224039.440353\n    24192  blocks  ago:  59335351233.86657\n    26208  blocks  ago:  56957648455.01001\n    28224  blocks  ago:  54256630327.889961\n    30240  blocks  ago:  52699842409.347008\n    32256  blocks  ago:  52278304845.591682\n    34272  blocks  ago:  51076366303.481934\n    36288  blocks  ago:  49402014931.227463\n    38304  blocks  ago:  49692386354.893837\n    40320  blocks  ago:  47589591153.625008\n    42336  blocks  ago:  48807487244.681381\n    44352  blocks  ago:  47643398017.803436\n    46368  blocks  ago:  47610564513.47126\n    48384  blocks  ago:  49446390688.24144\n    50400  blocks  ago:  46717549644.706421\n    52416  blocks  ago:  47427554950.6483\n    54432  blocks  ago:  46684376316.860291\n    56448  blocks  ago:  44455415962.343803\n    58464  blocks  ago:  41272873894.697021\n\n<50% of current hash rate was last seen roughly six retarget periods (12\nweeks) ago and <25% of current hash rate was last seen roughly 29 periods\n(58 weeks) ago.\n\nI think that's reasonably strong evidence for your thesis given that\nthe increases in hash rate from the introduction of new efficient\nequipment are likely partly offset by the removal from the hash rate of\nlower efficiency equipment, so the one-year tail of ~25% probably means\nthat less than 25% of operating equipment is one year old or older.\n\nHowever, it is my understanding that most mining equipment can be run at\ndifferent hash rates. Is there any evidence that high-efficiency miners\ntoday are using high clock speeds to produce more hashes per ASIC than\nthey will after halving?  Is there any way to guess at how many fewer\nhashes they might produce?\n\n> If a pre-programmed ramp and drop is set then it has the risk of\n> massively under-setting difficulty; which is also strongly undesirable\n> (e.g. advanced inflation and exacerbating existing unintentional\n> selfish mining)\n\nMaybe I'm not thinking this through thoroughly, but I don't think it's\npossible to significantly advance inflation unless the effective hash\nrate increases by more than 300% at the halving.  With the proposal\nbeing replied to, if all mining equipment operation before the\nhalving continued operating after it, the effective increase would be\n200%. That doubling in effective hash rate would've been offset in\nadvance through a reduction in the effective hash rate in the weeks\nbefore the halving.\n\nExacerbated unintentional selfish mining is a much more significant\nconcern IMO, even if it's only for a short retarget period or two. This\nis especially the case given the current high levels of centralization\nand validationless mining on the network today, which we would not want\nto reward by making those miners the only ones effectively capable of\ncreating blocks until difficulty adjusted. I had not thought of this\naspect; thank you for bringing it up.\n\n> and that is before suggesting that miners voluntarily take a loss of\n> inflation now.\n\nYes, I very much don't like that aspect, which is why I made sure to\nmention it.\n\n> So while I think this concern is generally implausible; I think it's\n> prudent to have a difficulty step patch (e.g. a one time single point\n> where a particular block is required to lower bits a set amount) ready\n> to go in the unlikely case the network is stalled.\n\nI think having that code ready in general is a good idea, and a one-time\nchange in nBits is sounds like a good and simple way to go about it.\n\nThank you for your insightful reply,\n\n-Dave"
            },
            {
                "author": "Paul Sztorc",
                "date": "2016-03-03T01:06:27",
                "message_text_only": "On 3/2/2016 12:53 PM, Gregory Maxwell via bitcoin-dev wrote:\n> What you are proposing makes sense only if it was believed that a very\n> large difficulty drop would be very likely.\n> \n> This appears to be almost certainly untrue-- consider-- look how long\n> ago since hashrate was 50% of what it is now, or 25% of what it is\n> now-- this is strong evidence that supermajority of the hashrate is\n> equipment with state of the art power efficiency.\n\nI don't understand the relevance of this.\n\nIn my view, we would prefer miners to invest in hardware just a mere\n2016 blocks away from the halving. Instead, they've made them too soon.\nAssuming that miners are already located in low-power-cost areas, the\ndifficulty will be quickly rising to compensate for \"state of the art\npower efficiency\".\n\nSo it will have canceled out by July.\n\nIf anything, the more efficient miners become today, the bigger our\npotential problem in July, because chip-manufacturers may have used up\nall of the easy efficiency-increasing moves, such that investments do\nnot take place in June.\n\nPaul"
            },
            {
                "author": "Paul Sztorc",
                "date": "2016-03-09T17:58:18",
                "message_text_only": "My recent conversations with miners revealed:\n\n* Many have made \"extra-large\" hardware investments recently.\n* Some wonder if we have just reached (or are quickly reaching) a\nplateau of hardware-efficiency. This would mean that\nhardware-investments might not be made in the critical period\nimmediately preceding the halving.\n\nHowever, some good news:\n\n* For Chinese miners, power is often purchased in fixed quantities, for\nlong-durations (of around 12 months, and these contracts -fortunately-\ndo overlap the July halving). Because power is difficult to store, this\nimplies that miners will *need* to mine, at all times, even at a loss.\nSo miners may continue to mine after the halving, no matter what.\n\nOn the other hand, miners can default on these contracts by simply\ndeclaring bankruptcy, at which point their equipment would be entirely\nunusable, by anyone, for a very long time.\n\nSo the problem is less likely, but more potentially-catastrophic.\n\nPaul\n\nOn 3/2/2016 8:06 PM, Paul Sztorc wrote:\n>\n> On 3/2/2016 12:53 PM, Gregory Maxwell via bitcoin-dev wrote:\n>> What you are proposing makes sense only if it was believed that a very\n>> large difficulty drop would be very likely.\n>>\n>> This appears to be almost certainly untrue-- consider-- look how long\n>> ago since hashrate was 50% of what it is now, or 25% of what it is\n>> now-- this is strong evidence that supermajority of the hashrate is\n>> equipment with state of the art power efficiency.\n> I don't understand the relevance of this.\n>\n> In my view, we would prefer miners to invest in hardware just a mere\n> 2016 blocks away from the halving. Instead, they've made them too soon.\n> Assuming that miners are already located in low-power-cost areas, the\n> difficulty will be quickly rising to compensate for \"state of the art\n> power efficiency\".\n>\n> So it will have canceled out by July.\n>\n> If anything, the more efficient miners become today, the bigger our\n> potential problem in July, because chip-manufacturers may have used up\n> all of the easy efficiency-increasing moves, such that investments do\n> not take place in June.\n>\n> Paul"
            },
            {
                "author": "Peter Todd",
                "date": "2016-03-02T18:20:28",
                "message_text_only": "On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:\n> To alleviate this risk, it seems reasonable to propose a hardfork to the \n> difficulty adjustment algorithm so it can adapt quicker to such a significant \n> drop in mining rate. BtcDrak tells me he has well-tested code for this in his \n> altcoin, which has seen some roller-coaster hashrates, so it may even be \n> possible to have such a proposal ready in time to be deployed alongside SegWit \n> to take effect in time for the upcoming subsidy halving. If this slips, I \n> think it may be reasonable to push for at least code-readiness before July, \n> and possibly roll it into any other hardfork proposed before or around that \n> time.\n> \n> I am unaware of any reason this would be controversial, so if anyone has a \n> problem with such a change, please speak up sooner rather than later. Other \n> ideas or concerns are of course welcome as well.\n\nChanging the difficulty adjustment algorithm significantly changes the\nsecurity of the whole system, as it lets attackers create fake chains\nwith a lot less hashing power.\n\nGiven as tx fees rise this problem will hopefully be a one-time issue, a\nsimple fixed difficulty adjustment probably makes sense. No need to\nbring in new algorithms here with controversial new security tradeoffs.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n0000000000000000045a03e0e551c4e674f301e0a8eeb217a31ad13580446626\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/fc9c261c/attachment.sig>"
            },
            {
                "author": "Corey Haddad",
                "date": "2016-03-03T18:27:35",
                "message_text_only": "Since the root cause of what you are trying to address is the reward\nhaving, I'd suggest considering an adjustment to the having schedule.\nInstead of their being a large supply shock every four years, perhaps the\nreward could drop every 52,500 blocks (yearly), or even at each difficulty\nadjustment, in such a way that the inflation curve is smoothed out.  The\nexponential decay rate would be preserved, so overall economic philosophy\nwould be preserved.\n\nI'm guessing hesitance to this approach would lie in a reluctance to tinker\nwith Bitcoin's 'economic contract', and slippery slope concerns about might\nbe the next change (21M?).  However, I think it could actually increase\nconfidence in the system if the community is able to demonstrate a good\nprocess for making such decisions, and show that we can separate the\nmeaningful underlying principles, such as the coin limit and overall\ninflation rate, from what is more akin to an implementation detail, as I\nconsider the large-step reward reduction to be.\n\nI'm not too worried about the impact of the having as is, but adjusting the\neconomic parameter would be a safer and simpler way to address the concerns\nthan to tinker with the difficulty targeting mechanism, which is at the\nheart of Bitcoin's security\n\nOn Wed, Mar 2, 2016 at 6:56 AM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We are coming up on the subsidy halving this July, and there have been some\n> concerns raised that a non-trivial number of miners could potentially drop\n> off\n> the network. This would result in a significantly longer block interval,\n> which\n> also means a higher per-block transaction volume, which could cause the\n> block\n> size limit to legitimately be hit much sooner than expected. Furthermore,\n> due\n> to difficulty adjustment being measured exclusively in blocks, the time\n> until\n> it adjusts to compensate would be prolonged.\n>\n> For example, if 50% of miners dropped off the network, blocks would be\n> every\n> 20 minutes on average and contain double the transactions they presently\n> do.\n> Even double would be approximately 850-900k, which potentially bumps up\n> against the hard limit when empty blocks are taken into consideration. This\n> situation would continue for a full month if no changes are made. If more\n> miners drop off the network, most of this becomes linearly worse, but due\n> to\n> hitting the block size limit, the backlog would grow indefinitely until the\n> adjustment occurs.\n>\n> To alleviate this risk, it seems reasonable to propose a hardfork to the\n> difficulty adjustment algorithm so it can adapt quicker to such a\n> significant\n> drop in mining rate. BtcDrak tells me he has well-tested code for this in\n> his\n> altcoin, which has seen some roller-coaster hashrates, so it may even be\n> possible to have such a proposal ready in time to be deployed alongside\n> SegWit\n> to take effect in time for the upcoming subsidy halving. If this slips, I\n> think it may be reasonable to push for at least code-readiness before July,\n> and possibly roll it into any other hardfork proposed before or around that\n> time.\n>\n> I am unaware of any reason this would be controversial, so if anyone has a\n> problem with such a change, please speak up sooner rather than later. Other\n> ideas or concerns are of course welcome as well.\n>\n> Thanks,\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/89c572a7/attachment-0001.html>"
            },
            {
                "author": "Henning Kopp",
                "date": "2016-03-04T08:41:02",
                "message_text_only": "Hi,\n\n> However, I think it could actually increase\n> confidence in the system if the community is able to demonstrate a good\n> process for making such decisions, and show that we can separate the\n> meaningful underlying principles, such as the coin limit and overall\n> inflation rate, from what is more akin to an implementation detail, as I\n> consider the large-step reward reduction to be.\n\nI do not think that a line can be drawn here. As far as I understood,\nyou think that the coin limit is a meaningful underlying principle\nwhich should not be touched, whereas the halving of mining rewards is\nan implementation detail. The two are very closely tied together and\nchanges to both of them would result in a hardfork, if I am not\nmistaken.\n\nRegarding the effects of the mining reward halving, there is a nice\npaper from courtois:\nhttp://arxiv.org/abs/1405.0534\n\nAll the best\nHenning\n\n\n\nOn Thu, Mar 03, 2016 at 10:27:35AM -0800, Corey Haddad via bitcoin-dev wrote:\n> Since the root cause of what you are trying to address is the reward\n> having, I'd suggest considering an adjustment to the having schedule.\n> Instead of their being a large supply shock every four years, perhaps the\n> reward could drop every 52,500 blocks (yearly), or even at each difficulty\n> adjustment, in such a way that the inflation curve is smoothed out.  The\n> exponential decay rate would be preserved, so overall economic philosophy\n> would be preserved.\n> \n> I'm guessing hesitance to this approach would lie in a reluctance to tinker\n> with Bitcoin's 'economic contract', and slippery slope concerns about might\n> be the next change (21M?).  However, I think it could actually increase\n> confidence in the system if the community is able to demonstrate a good\n> process for making such decisions, and show that we can separate the\n> meaningful underlying principles, such as the coin limit and overall\n> inflation rate, from what is more akin to an implementation detail, as I\n> consider the large-step reward reduction to be.\n> \n> I'm not too worried about the impact of the having as is, but adjusting the\n> economic parameter would be a safer and simpler way to address the concerns\n> than to tinker with the difficulty targeting mechanism, which is at the\n> heart of Bitcoin's security\n> \n> On Wed, Mar 2, 2016 at 6:56 AM, Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > We are coming up on the subsidy halving this July, and there have been some\n> > concerns raised that a non-trivial number of miners could potentially drop\n> > off\n> > the network. This would result in a significantly longer block interval,\n> > which\n> > also means a higher per-block transaction volume, which could cause the\n> > block\n> > size limit to legitimately be hit much sooner than expected. Furthermore,\n> > due\n> > to difficulty adjustment being measured exclusively in blocks, the time\n> > until\n> > it adjusts to compensate would be prolonged.\n> >\n> > For example, if 50% of miners dropped off the network, blocks would be\n> > every\n> > 20 minutes on average and contain double the transactions they presently\n> > do.\n> > Even double would be approximately 850-900k, which potentially bumps up\n> > against the hard limit when empty blocks are taken into consideration. This\n> > situation would continue for a full month if no changes are made. If more\n> > miners drop off the network, most of this becomes linearly worse, but due\n> > to\n> > hitting the block size limit, the backlog would grow indefinitely until the\n> > adjustment occurs.\n> >\n> > To alleviate this risk, it seems reasonable to propose a hardfork to the\n> > difficulty adjustment algorithm so it can adapt quicker to such a\n> > significant\n> > drop in mining rate. BtcDrak tells me he has well-tested code for this in\n> > his\n> > altcoin, which has seen some roller-coaster hashrates, so it may even be\n> > possible to have such a proposal ready in time to be deployed alongside\n> > SegWit\n> > to take effect in time for the upcoming subsidy halving. If this slips, I\n> > think it may be reasonable to push for at least code-readiness before July,\n> > and possibly roll it into any other hardfork proposed before or around that\n> > time.\n> >\n> > I am unaware of any reason this would be controversial, so if anyone has a\n> > problem with such a change, please speak up sooner rather than later. Other\n> > ideas or concerns are of course welcome as well.\n> >\n> > Thanks,\n> >\n> > Luke\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-- \nHenning Kopp\nInstitute of Distributed Systems\nUlm University, Germany\n\nOffice: O27 - 3402\nPhone: +49 731 50-24138\nWeb: http://www.uni-ulm.de/in/vs/~kopp"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-02T15:54:15",
                "message_text_only": "If a hard-fork is being considered, the easiest is to just step the\ndifficulty down by a factor of 2 when the adjustment happens.\n\nThis means that miners still get paid the same minting fee per hash as\nbefore.  There isn't that much risk.  If the hashing power stays constant,\nthen there will be 5 minute blocks for a while until everything readjusts.\n\nNearly the same can be accomplished by a soft fork.\n\nProposal:\n\nIf 900 of the last 1000 blocks are block version X or above, then the\nsmooth change rule applies.\n\nThe adjustment is as follows\n\nbig_number get_new_target(int height, big_number old_target) {\n    if (height < 405000)\n        return old_target;\n    else if (height < 420000)\n        return (old_target * 15000) / (height - 390000);\n    else\n        return old_target;\n}\n\nWhat this does is ramp up the difficulty slowly from 405,000 to 420,000.\nIt ends up with a target that is 50% of the value stored in target bits.\nThese blocks are valid since they have twice as much POW as normally\nrequired.\n\nFor block 420000, the difficulty drops by 2 and the reward drops by 2 at\nthe same time.  This means that miners still get paid the same BTC per\nhash.  It would mean 5 minute blocks until the next adjustment though.\n\nIf 90% of the network are mining the artificially hard blocks, then a  10%\nfork still loses.  The 90% has an effective hash rate of 45% vs the 10%.\n\nIt is unlikely that miners would accept the fork, since they lose minting\nfees.  It effectively brings the subsidy reduction forward in time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/4394958d/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2016-03-02T20:44:07",
                "message_text_only": "On 03/02/2016 12:08 PM, Paul Sztorc wrote:\n> On 3/2/2016 2:01 PM, Eric Voskuil via bitcoin-dev wrote:\n>>> A 6 month investment with 3 months on the high subsidy and 3 months on\n>> low subsidy would not be made\u2026\n>>\n>> Yes, this is the essential point. All capital investments are made based\n>> on expectations of future returns. To the extent that futures are\n>> perfectly knowable, they can be perfectly factored in. This is why\n>> inflation in Bitcoin is not a tax, it\u2019s a cost. These step functions are\n>> made continuous by their predictability, removing that predictability\n>> will make them -- unpredictable.\n> \n> The Ministry of Truth is taking job applications in the doublespeak\n> department...\n\nNot sure how you interpret a tautology as doublespeak.\n\n>> Changing these futures punishes those who have planned properly and\n>> favors those who have not. Sort of like a Bitcoin bail-in; are some\n>> miners are too big to fail? It also creates the expectation that it may\n>> happen again. This infects the money with the sort of uncertainty that\n>> Bitcoin is designed to prevent.\n> \n> Coinbase-smoothing can be done via soft fork (soft forks typically only\n> move \"one way\" toward stability).\n\nI'm addressing the hard fork proposal (see subject line).\n\n> Moreover, the effect *costs* miners,\n> it does not benefit them. Finally, it can be done so that the economic\n> impact on miners is minimized.\n\nChanges to consensus rules change the value of coins, which are property\nof their owners. Nobody owes a miner a promise of consistent revenue for\nfuture work. Cost or benefit to miners is relevant only to the extent\nthat those who hold money believe it will affect their value and\ntherefore consider it in their decision to consent.\n\n> You'll just have to weigh the risks -- some vague, tiny effect on\n> expectations today, vs the need for a small group of experts to\n> emergency hard fork once every four years.\n\nHow is the small group of experts today different from the small group\nof experts tomorrow?\n\n> I'm sure those experts are completely reliable, and won't get threatened\n> or assassinated!\n\nThis is precisely the issue. The precedent of hard-forking to \"fix\" the\nmoney is a precedent for establishing authority over the money.\n\n>> A 6 month investment with 3 months on the high subsidy and 3 months on\n>> low subsidy would not be made if it only generated a small profit for\n>> the first 3 and then massive losses for the 2nd period of 3 months.  For\n>> it to be made, there needs to be large profit during the first period to\n>> compensate for the losses in the 2nd period.\n> \n> The word \"loss\" is of utmost importance here...if they are operational\n> losses, it should be obvious to everyone that the best \"compensation for\n> losses in the 2nd period\" is to just shut them off (thus reducing losses\n> to zero).\n\nBut of course the losses would not be entirely operational, since\nhardware (at a minimum) does not depreciate to zero because of a\nhalving. The ability to plan does not change this fact. There are\ncertainly similar considerations for labor, bandwidth, space and even\nelectrical/cooling costs (contracts). To the extent that these costs are\nsunk (as Tier said) *any* earnings are better than none.\n\n> So you must be arguing that miners have made an investment 3 months\n> prior, knowing that it would pay for itself despite the reward halving.\n\nOf course, how could they not?\n\n> That's nice, but it ignores the fact that, if that investment is made\n> everyone, by all miners, the *difficulty* will have increased 2 weeks\n> afterward...such that operating profits are tending *immediately* toward\n> zero, and will be zero by the time the first set of 3 months is over.\n\n... which also ignores fees.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/fdc5f118/attachment.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2016-03-09T20:43:08",
                "message_text_only": "On 3/9/2016 3:18 PM, Henning Kopp via bitcoin-dev wrote:\n> Hi,\n>\n> > However, I think it could actually increase\n> > confidence in the system if the community is able to demonstrate a good\n> > process for making such decisions, and show that we can separate the\n> > meaningful underlying principles, such as the coin limit and overall\n> > inflation rate, from what is more akin to an implementation detail, as I\n> > consider the large-step reward reduction to be.\n>\n> I do not think that a line can be drawn here. As far as I understood,\n> you think that the coin limit is a meaningful underlying principle\n> which should not be touched, whereas the halving of mining rewards is\n> an implementation detail. The two are very closely tied together and\n> changes to both of them would result in a hardfork, if I am not\n> mistaken.\n\nI believe that you are mistaken.\n\nThe two are almost-completely unrelated, and (as Dr. Back has been\npointing out for a very long time now) the halving of mining rewards can\nbe modified with a soft fork.\n\nhttp://www.truthcoin.info/blog/mining-heart-attack/#smooth-the-disinflation-out"
            }
        ],
        "thread_summary": {
            "title": "Hardfork to fix difficulty drop algorithm",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Eric Voskuil",
                "Patrick Shirkey",
                "Pavel Jan\u00edk",
                "David A. Harding",
                "Corey Haddad",
                "Peter Todd",
                "Dave Hudson",
                "Dave Scotese",
                "Tier Nolan",
                "Luke Dashjr",
                "Paul Sztorc",
                "Gregory Maxwell",
                "Bob McElrath",
                "Henning Kopp",
                "J\u00e9r\u00e9mie Dubois-Lacoste"
            ],
            "messages_count": 31,
            "total_messages_chars_count": 78991
        }
    },
    {
        "title": "[bitcoin-dev] consensus rule change for TX fee safety",
        "thread_messages": [
            {
                "author": "Alice Wonder",
                "date": "2016-03-03T13:02:11",
                "message_text_only": "I think the next hard fork should require a safety rule for TX fees.\n\nhttps://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08\n\n15 BTC TX fee for < 7 BTC of outputs.\n\nProbably either a typo or client bug.\n\nMy guess is the user was using a client that does not adjust TX fee, and \nneeded to manually set it in order to get the TX in the block sooner, \nand meant 15 mBTC or something.\n\nI suggest that either :\n\nA) TX fee may not be larger than sum of outputs\nB) TX fee per byte may not be larger than 4X largest fee per byte in \nprevious block\n\nEither of those would have prevented this TX from going into a block.\n\nMany people I know are scared of bitcoin, that they will make a TX and \nmake a mistake they can't undo.\n\nAdding protections may help give confidence and there is precedence to \ndoing things to prevent typo blunders - a public address has a four byte \nchecksum to reduce the odds of a typo.\n\nThis kind of mistake is rare, so a fix could be included in the coming \nHF for the possible July 2017 block increase.\n\nThank you for your time.\n\nAlice Wonder"
            },
            {
                "author": "Henning Kopp",
                "date": "2016-03-03T15:04:18",
                "message_text_only": "Hi,\nI think there is no need to do a hardfork for this. Rather it should\nbe implemented as a safety-mechanism in the client. Perhaps a warning\ncan pop up, if one of your conditions A) or B) is met.\n\nAll the best\nHenning Kopp\n\n\nOn Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev wrote:\n> I think the next hard fork should require a safety rule for TX fees.\n> \n> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08\n> \n> 15 BTC TX fee for < 7 BTC of outputs.\n> \n> Probably either a typo or client bug.\n> \n> My guess is the user was using a client that does not adjust TX fee, and\n> needed to manually set it in order to get the TX in the block sooner, and\n> meant 15 mBTC or something.\n> \n> I suggest that either :\n> \n> A) TX fee may not be larger than sum of outputs\n> B) TX fee per byte may not be larger than 4X largest fee per byte in\n> previous block\n> \n> Either of those would have prevented this TX from going into a block.\n> \n> Many people I know are scared of bitcoin, that they will make a TX and make\n> a mistake they can't undo.\n> \n> Adding protections may help give confidence and there is precedence to doing\n> things to prevent typo blunders - a public address has a four byte checksum\n> to reduce the odds of a typo.\n> \n> This kind of mistake is rare, so a fix could be included in the coming HF\n> for the possible July 2017 block increase.\n> \n> Thank you for your time.\n> \n> Alice Wonder\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n-- \nHenning Kopp\nInstitute of Distributed Systems\nUlm University, Germany\n\nOffice: O27 - 3402\nPhone: +49 731 50-24138\nWeb: http://www.uni-ulm.de/in/vs/~kopp"
            },
            {
                "author": "Peter Todd",
                "date": "2016-03-03T15:28:36",
                "message_text_only": "On Thu, Mar 03, 2016 at 04:04:18PM +0100, Henning Kopp via bitcoin-dev wrote:\n> Hi,\n> I think there is no need to do a hardfork for this. Rather it should\n> be implemented as a safety-mechanism in the client. Perhaps a warning\n> can pop up, if one of your conditions A) or B) is met.\n\nBitcoin Core already implements this safety limit with the \"absurd fee\"\nlimit of 10000 * the minimum relay fee. This limit is active in both the\nwallet and the sendrawtransaction RPC call. Additionally for the wallet\nthere is a user configurable -maxtxfee option to limit fees set by the\nwallet which currently defaults to 0.1 BTC.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n0000000000000000024eabe5049843ea6d73558e960d6bcead9e91a24cab1161\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/8cd961fe/attachment.sig>"
            },
            {
                "author": "Marco Falke",
                "date": "2016-03-03T15:55:25",
                "message_text_only": "2016-03-03 16:28 GMT+01:00 Peter Todd via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org>:\n> Bitcoin Core already implements this safety limit with the \"absurd fee\"\n> limit of 10000 * the minimum relay fee. This limit is active in both the\n> wallet and the sendrawtransaction RPC call. Additionally for the wallet\n> there is a user configurable -maxtxfee option to limit fees set by the\n> wallet which currently defaults to 0.1 BTC.\n\n\nIt is planned for Bitcoin Core 0.13 to use -maxtxfee for both, the\nwallet and the RPC interface (sendrawtransaction). (c.f.\nhttps://github.com/bitcoin/bitcoin/pull/7084)\n\nIn regard to the issue, I agree with Jonas. Such large transaction\nfees were historically caused by no or insufficient warnings from the\nwallet software. And it's the responsibility of the operators to make\nthe wallet user friendly.\n\nApart from that, there are legit use cases where one would want to\n\"pay\" a large transaction fee: It may be convenient for the miner to\njust collect the fees instead of sending back the change on their own\ntransactions. Of course making sure to mine the high-fee tx themself.\nMoreover, it could increase privacy if another party decides to \"wash\"\ntheir bitcoins by letting the miner claim the \"fee\" and then have the\nminer send back a fraction of the fee to a fresh address. Though, this\nprobably works best if a lot of participants are doing this.\n\nMarco"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-03-03T15:36:48",
                "message_text_only": "There's  an absurd fee (non-consensus) check already. Maybe that check can\nbe improved, but probably the wallet layer is more appropriate for this.\nOn Mar 3, 2016 16:23, \"Henning Kopp via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n> I think there is no need to do a hardfork for this. Rather it should\n> be implemented as a safety-mechanism in the client. Perhaps a warning\n> can pop up, if one of your conditions A) or B) is met.\n>\n> All the best\n> Henning Kopp\n>\n>\n> On Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev\n> wrote:\n> > I think the next hard fork should require a safety rule for TX fees.\n> >\n> >\n> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08\n> >\n> > 15 BTC TX fee for < 7 BTC of outputs.\n> >\n> > Probably either a typo or client bug.\n> >\n> > My guess is the user was using a client that does not adjust TX fee, and\n> > needed to manually set it in order to get the TX in the block sooner, and\n> > meant 15 mBTC or something.\n> >\n> > I suggest that either :\n> >\n> > A) TX fee may not be larger than sum of outputs\n> > B) TX fee per byte may not be larger than 4X largest fee per byte in\n> > previous block\n> >\n> > Either of those would have prevented this TX from going into a block.\n> >\n> > Many people I know are scared of bitcoin, that they will make a TX and\n> make\n> > a mistake they can't undo.\n> >\n> > Adding protections may help give confidence and there is precedence to\n> doing\n> > things to prevent typo blunders - a public address has a four byte\n> checksum\n> > to reduce the odds of a typo.\n> >\n> > This kind of mistake is rare, so a fix could be included in the coming HF\n> > for the possible July 2017 block increase.\n> >\n> > Thank you for your time.\n> >\n> > Alice Wonder\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n> --\n> Henning Kopp\n> Institute of Distributed Systems\n> Ulm University, Germany\n>\n> Office: O27 - 3402\n> Phone: +49 731 50-24138\n> Web: http://www.uni-ulm.de/in/vs/~kopp\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/ae824855/attachment.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2016-03-03T16:38:17",
                "message_text_only": "It would be a shame to prohibit someone from rewarding whoever mines their\ntransaction.  A good example would be a transaction designed to record some\ninformation which is damning to powerful authorities, sort of like the\nservice cryptograffiti offers.  When we try to protect others by\nprohibiting behavior we think is foolish, we may save some fools, but at\nthe same time, we hurt the best of us.\n\nOn Thu, Mar 3, 2016 at 7:36 AM, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There's  an absurd fee (non-consensus) check already. Maybe that check can\n> be improved, but probably the wallet layer is more appropriate for this.\n> On Mar 3, 2016 16:23, \"Henning Kopp via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi,\n>> I think there is no need to do a hardfork for this. Rather it should\n>> be implemented as a safety-mechanism in the client. Perhaps a warning\n>> can pop up, if one of your conditions A) or B) is met.\n>>\n>> All the best\n>> Henning Kopp\n>>\n>>\n>> On Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev\n>> wrote:\n>> > I think the next hard fork should require a safety rule for TX fees.\n>> >\n>> >\n>> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08\n>> >\n>> > 15 BTC TX fee for < 7 BTC of outputs.\n>> >\n>> > Probably either a typo or client bug.\n>> >\n>> > My guess is the user was using a client that does not adjust TX fee, and\n>> > needed to manually set it in order to get the TX in the block sooner,\n>> and\n>> > meant 15 mBTC or something.\n>> >\n>> > I suggest that either :\n>> >\n>> > A) TX fee may not be larger than sum of outputs\n>> > B) TX fee per byte may not be larger than 4X largest fee per byte in\n>> > previous block\n>> >\n>> > Either of those would have prevented this TX from going into a block.\n>> >\n>> > Many people I know are scared of bitcoin, that they will make a TX and\n>> make\n>> > a mistake they can't undo.\n>> >\n>> > Adding protections may help give confidence and there is precedence to\n>> doing\n>> > things to prevent typo blunders - a public address has a four byte\n>> checksum\n>> > to reduce the odds of a typo.\n>> >\n>> > This kind of mistake is rare, so a fix could be included in the coming\n>> HF\n>> > for the possible July 2017 block increase.\n>> >\n>> > Thank you for your time.\n>> >\n>> > Alice Wonder\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>>\n>> --\n>> Henning Kopp\n>> Institute of Distributed Systems\n>> Ulm University, Germany\n>>\n>> Office: O27 - 3402\n>> Phone: +49 731 50-24138\n>> Web: http://www.uni-ulm.de/in/vs/~kopp\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/970dc2e2/attachment.html>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-03T15:29:30",
                "message_text_only": "Hi\n\n> My guess is the user was using a client that does not adjust TX fee, and\n> needed to manually set it in order to get the TX in the block sooner,\n> and meant 15 mBTC or something.\n> \n> I suggest that either :\n> \n> A) TX fee may not be larger than sum of outputs\n> B) TX fee per byte may not be larger than 4X largest fee per byte in\n> previous block\n\nI don't think a such \"feature\" or lets say protection should be part of\nthe consensus layer.\n\nSuch checks should be done by the tx creation clients (wallets) \u2013 or \u2013\nnodes could have an option to not accept transaction with insane fees\ninto their mempool (policy).\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/a0e73400/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "consensus rule change for TX fee safety",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "Dave Scotese",
                "Jorge Tim\u00f3n",
                "Henning Kopp",
                "Alice Wonder",
                "Jonas Schnelli",
                "Marco Falke"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 12508
        }
    },
    {
        "title": "[bitcoin-dev] Proposing a (potentially less contentious) difficulty drop solution",
        "thread_messages": [
            {
                "author": "David Manheim",
                "date": "2016-03-04T19:38:59",
                "message_text_only": "Hi all,\n\nI've been following this discussion closely. Unlike most of the\ndevelopers, I'm more of an economist and game theorist than\ncryptographer, and I wanted to suggest a possible compromise solution.\n\nBrief review of discussion so far, as background;\nThere is a clear split in the discussion on the list about the costs\nand benefits of a potential solution. Most of this is because of\nimplicit disagreement about the probability of a stalled blockchain at\nthe halving, and how a change would open the door to worries about\nfuture changes. That said, as Paul Sztorc noted, \"This\nhalving-difficulty-drop problem can, with some bad luck, get quite\ndisastrous, very quickly.\" If it doesn't happen, however, the\nsolutions proposed unfairly give a bonus to miners, and speeding up\nthe chain for a while - which also potentially increases the odds of\nblock-splits during that time.\n\nLukejr suggested that \"it would need some way to avoid its early\nactivation outside of such an emergency (which could possibly be\ndetected in code, in this case).\" That means it would fork after the\nhalving, if and only if there was a stall. The problem with this is to\ndetect it, and how to retarget, given asynchronous nodes. I don't\nthink this can be avoided nicely without either  creating some\nperverse incentives, or handing a large bonus to miners. Paul suggests\na very low retarget difficulty, which essentially gives a larger bonus\nto miners until the next retarget; that's non-ideal. He also suggests\ninvestigating dynamic retargeting, (This was proposed a while ago\nhere: http://www.truthcoin.info/blog/mining-heart-attack/ ) which\nothers note is unfairly changing the implicit contract.\n\nThe methods implemented by many altcoins with smooth / dynamic\nretargeting are not really suitable directly - as noted, people didn't\nsign up for dynamic retargeting, and there are stability issues. If\nbitcoin's hash rate drops after the halving, it could be sudden and\ndrastic. Any solution I can foresee that prevents this leads to some\ndifficult to analyze incentives for the miners.\n\nMy proposal:\nI think a simple solution splits the difference; a short temporary\ndynamic difficulty retargeting after the halving. This allows for a\nfix, while making it clear that the original ruless of bitcoin\nshouldn't be discarded, and when they need to be altered, it will be a\nminimal change. It also limits the period where perverse incentives\ncan exist, which minimizes their effects.\n\nWe don't know what difficultly is appropriate after the halving, but\ncan still allow a temporary dynamic difficult retargeting starting\nthen. Halving occurs at block 420,000; it will then be 1/3 of the way\nto the next difficulty retarget. The remaining 1344 of those 2016\nblocks can be used for a dynamic retarget, without changing the\nschedule otherwise. The initial retarget difficulty would be 1/2 of\nthe previous one, as suggested by others, but it would very quickly\nstabilize at the appropriate level, using essentially any dynamic\nmethod - and so it would not stay low for long, unless necessary. One\npotential downside is that the probability of a orphaned blocks\nincreases for a couple blocks. (That seems inevitable with any method\nthat might reduce difficulty and lead to faster block generation, but\nby retargeting quickly, we limit that time frame.) At block 421344, it\nreverts to using the current method - and that can use the entire last\n2016 blocks, to smooth out the lower difficulty adjustment that\noccurred.\n\n(Conveniently, in the longer term, the same method could be used for\nthe 3 halvings after this one, with correspondingly shorter retarget\nwindows, since 210000 isn't divisible by 2016 - until we're down to\nthe 1.25btc coinbase reward, with 336 blocks until the next retarget.\nThe next halving could eliminate this; the coinbase reward would be\nmuch less than mining fees by then, and halving difficulty would be\nunneeded. This also means that the retarget about would be reduced in\nthe subsequent 2016 blocks each time, since the smaller retarget\nwindow will still be averaged in with the earlier blocks.)\n\nThe only remaining question is what temporary retargeting method\nshould we use? I'm completely agnostic on this one, since I think it\ndoesn't make a huge difference, as long as there is a method chosen.\n\nShort altcoin methods review, to make some options clear;\nSmooth difficulty readjustment methods have been implemented by many\naltcoins. The first of these seems to be Kimoto Gravity Well, which\ndoes smoothing as follows; KGW = 1 + (0.7084 *\npow((double(PastBlocksMass)/double(144)), -1.228)); DigiByteCoin\ntested this in the presence of discontinuities, and found it responded\ntoo slowly. Instead, they created the so-called Digishield, which was\ncreated explicitly to do smoothing in the presence of sudden shifts in\nmining, without causing stalling - but uses much closer together\nblocks to do so. See:\nhttps://www.reddit.com/r/Digibyte/comments/1yn6t1/digibyte_v_20_code_name_digishield/\nfor more. Another such method is Heavycoin's temporal retargeting. Any\nof these should be fine, since we don't need such fast response times.\n\nI hope this is a useful potential compromise,\nDavid Manheim"
            }
        ],
        "thread_summary": {
            "title": "Proposing a (potentially less contentious) difficulty drop solution",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "David Manheim"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5195
        }
    },
    {
        "title": "[bitcoin-dev] BIP44 & BIP32 chain address look-ahead limits",
        "thread_messages": [
            {
                "author": "Jameson Lopp",
                "date": "2016-03-06T20:04:32",
                "message_text_only": "I recently ran into an issue while importing a Mycelium HD wallet where it\nwas not finding all of my funds - upon further investigation with Mycelium\ndevs we realized that the wallet was following the BIP44 spec correctly,\nbut BIP44 may have a flaw.\n\nThe problem was a result of my creating 16 transactions in Mycelium in a\nfairly short timeframe, but the first 15 transactions ended up never\nconfirming while the 16th was confirmed. As a result, when I later\nreimported the account from the master seed, the chain derivation stopped\nupon hitting this large gap of unused addresses on the internal / change\nchain.\n\nBIP44 recommends that there need not be a lookahead on internal chains\n\"because internal chains receive only coins that come from the associated\nexternal chains.\"\nhttps://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Address_gap_limit\n\nBIP32 also notes that \"the look-ahead for internal chains can be very\nsmall, as no gaps are to be expected here.\"\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Full_wallet_sharing_m\n\nIt seems to me that there /is/ an edge case that can result in significant\ngaps in internal chain address usage and as such, the recommendation should\nbe to look ahead on both external and internal chains when performing\naccount discovery. On a related note, the recommended look-ahead of 20 may\nnot be safe enough - perhaps it should be raised to 100 if not higher.\n\nIn addition to recommending a larger look-ahead, it may also be advisable\nfor BIP44 to recommend that wallets \"fill in\" gaps of unused chain\naddresses by \"looking back\" from the current tip of the internal chain's\nindex when the wallet decides to create a new change address. This could\nhelp mitigate the size of gaps caused by failed transactions.\n\n- Jameson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160306/41fc1874/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP44 & BIP32 chain address look-ahead limits",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jameson Lopp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1970
        }
    },
    {
        "title": "[bitcoin-dev]  Services bit for xthin blocks",
        "thread_messages": [
            {
                "author": "G. Andrew Stone",
                "date": "2016-03-07T20:06:12",
                "message_text_only": "The Bitcoin Unlimited client needs a services bit to indicate that the node\nis capable of communicating thin blocks.  We propose to use bit 4 as AFAIK\nbit 3 is already earmarked for Segregated Witness.\n\nAndrew\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/e2f1149f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Services bit for xthin blocks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "G. Andrew Stone"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 392
        }
    },
    {
        "title": "[bitcoin-dev] Services bit for xthin blocks",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2016-03-07T20:51:00",
                "message_text_only": "On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The Bitcoin Unlimited client needs a services bit to indicate that the node\n> is capable of communicating thin blocks.  We propose to use bit 4 as AFAIK\n> bit 3 is already earmarked for Segregated Witness.\n\nDoes this functionality change peer selection?  If not, the preferred\nsignaling mechanism is probably the one in BIP 130.\n\nOtherwise, I think the standard method for getting numbers has been to\nwrite a BIP documenting the usage. I don't know if that is intentional\nor just how things have previously happened; and I don't have much of\nan opinion on it."
            },
            {
                "author": "dagurval",
                "date": "2016-03-07T21:10:33",
                "message_text_only": "Hi,\n\n> Does this functionality change peer selection?\n\nThis bit will be used for selecting outgoing peers in Bitcoin XT.\n\nOn Mon, Mar 7, 2016 at 9:51 PM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The Bitcoin Unlimited client needs a services bit to indicate that the\n> node\n> > is capable of communicating thin blocks.  We propose to use bit 4 as\n> AFAIK\n> > bit 3 is already earmarked for Segregated Witness.\n>\n> Does this functionality change peer selection?  If not, the preferred\n> signaling mechanism is probably the one in BIP 130.\n>\n> Otherwise, I think the standard method for getting numbers has been to\n> write a BIP documenting the usage. I don't know if that is intentional\n> or just how things have previously happened; and I don't have much of\n> an opinion on it.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/243473ae/attachment-0001.html>"
            },
            {
                "author": "G. Andrew Stone",
                "date": "2016-03-08T02:35:21",
                "message_text_only": "Included at the bottom of this mail is a BIP concerning our impending use\nof a particular services bit.\n\nI am making a good-faith effort to notify the community of this use and\nfollow the BIP submission rules with a correctly formatted BIP sent to Luke\njr.  He has informed me that such a BIP should be discussed on the mailing\nlist (which is this thread) and that the BIP should document the extreme\nthin block protocol.\n\nNot an unreasonable request, however while I personally respect the many\ngreat accomplishments of individual engineers loosely affiliated with\n\"Core\", Bitcoin Unlimited has our own process for documentation and\ndiscussion on an uncensored forum located here:\nhttps://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/.  We\nwould love to have any interested engineer join us there with ideas and\ncriticisms.\n\nBut since Bitcoin Unlimited already has a process, it would be redundant\nand time consuming for us to adhere to your process.  If a \"Core\" engineer\nwould like to spend the time to move this BIP through your process I would\nbe eternally grateful and be willing to use a different bit or make other\nchanges that make mutual sense.  If not, then it is up to \"Core\" as a group\nto decide whether they would like to preserve interoperability as the\nprotocol intended by avoiding use of bit 1<<4  (except to indicate the\npresence of a compatible Xthin implementation), or whether they will force\nclients to take the sub-version field into account when determining client\ncapabilities.\n\nRegards,\nAndrew Stone\nDeveloper, Bitcoin Unlimited\n\n\n<pre>\n  BIP: XXX\n  Title: Extreme thin block service bit\n  Author: Andrew Stone <g.andrew.stone at gmail.com>\n  Status:\n  Type: Standards Track\n  Created: 2016-03-07\n</pre>\n\n==Abstract==\n\nNodes need to communicate to each other whether or not thin block\ncommunication messages are supported.\n\n==Motivation==\n\n# Ensure Satoshi client interoperability\n\n==Rationale==\n\nClients will use this functionality to choose peers, so a service bit is\nthe most appropriate location.\n\n==Specification==\n\n# Bit (1 << 4) of the nServices flags enum located in protocol.h shall\nindicate the ability to handle thin block communication messages.\n\n==Backward compatibility==\n\nAll older clients are compatible with this change. Users and merchants\nshould not be impacted.\n\n==Implementation==\n\n/** nServices flags */\nenum {\n  ...\n    // NODE_XTHIN means the node is capable of and willing to handle Xthin\nmessages.\n    NODE_XTHIN = (1 << 4),\n  ...\n};\n\n==Copyright==\nThis document is Public Domain.\n\nOn Mon, Mar 7, 2016 at 4:10 PM, dagurval <dagurvj+btclist at gmail.com> wrote:\n\n> Hi,\n>\n> > Does this functionality change peer selection?\n>\n> This bit will be used for selecting outgoing peers in Bitcoin XT.\n>\n> On Mon, Mar 7, 2016 at 9:51 PM, Gregory Maxwell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > The Bitcoin Unlimited client needs a services bit to indicate that the\n>> node\n>> > is capable of communicating thin blocks.  We propose to use bit 4 as\n>> AFAIK\n>> > bit 3 is already earmarked for Segregated Witness.\n>>\n>> Does this functionality change peer selection?  If not, the preferred\n>> signaling mechanism is probably the one in BIP 130.\n>>\n>> Otherwise, I think the standard method for getting numbers has been to\n>> write a BIP documenting the usage. I don't know if that is intentional\n>> or just how things have previously happened; and I don't have much of\n>> an opinion on it.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/8f3f62c2/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-08T17:19:19",
                "message_text_only": "On Tuesday, March 08, 2016 2:35:21 AM G. Andrew Stone via bitcoin-dev wrote:\n> Not an unreasonable request, however while I personally respect the many\n> great accomplishments of individual engineers loosely affiliated with\n> \"Core\", Bitcoin Unlimited has our own process for documentation and\n> discussion on an uncensored forum located here:\n> https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/. We\n> would love to have any interested engineer join us there with ideas and\n> criticisms.\n\nBitcoin-dev and the BIP process are not affiliated with Core at all. In fact, \nthe BIP process was created by Amir Taaki, who was a libbitcoin developer \n(libbitcoin is not Core).\n\nI encourage Bitcoin Unlimited to use the BIP process for cross-implementation \nstandards like this, as do other implementations, so that you can benefit from \npeer review from the wider Bitcoin development community, as well as have a \ncommon repository for these standards.\n\nMany BIPs are discussed on reddit in addition to this mailing list, and you \nwould certainly remain free to discuss your own proposals on any forum you \nlike - it isn't restricted to only this mailing list.\n\nIf this is of interest, I will be happy to try to go over and assign BIP \nnumbers to the current (15?) BUIPs assuming they meet the basic requirements \nfor such assignment (see BIP 1: \nhttps://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki). Is there an \neasy way to get links to each of the BUIPs? I couldn't find BUIP 1 at all, for \nexample.\n\nThanks,\n\nLuke"
            },
            {
                "author": "G. Andrew Stone",
                "date": "2016-03-09T18:11:34",
                "message_text_only": "Thanks for your offer Luke, but we are happy with our own process and,\nregardless of historical provenance, see this mailing list and the BIP\nprocess as very Core specific for reasons that are too numerous to describe\nhere but should be obvious to anyone who has been aware of the last year of\nBitcoin history.\n\nAndrew\n\nOn Tue, Mar 8, 2016 at 12:19 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Tuesday, March 08, 2016 2:35:21 AM G. Andrew Stone via bitcoin-dev\n> wrote:\n> > Not an unreasonable request, however while I personally respect the many\n> > great accomplishments of individual engineers loosely affiliated with\n> > \"Core\", Bitcoin Unlimited has our own process for documentation and\n> > discussion on an uncensored forum located here:\n> > https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/. We\n> > would love to have any interested engineer join us there with ideas and\n> > criticisms.\n>\n> Bitcoin-dev and the BIP process are not affiliated with Core at all. In\n> fact,\n> the BIP process was created by Amir Taaki, who was a libbitcoin developer\n> (libbitcoin is not Core).\n>\n> I encourage Bitcoin Unlimited to use the BIP process for\n> cross-implementation\n> standards like this, as do other implementations, so that you can benefit\n> from\n> peer review from the wider Bitcoin development community, as well as have a\n> common repository for these standards.\n>\n> Many BIPs are discussed on reddit in addition to this mailing list, and you\n> would certainly remain free to discuss your own proposals on any forum you\n> like - it isn't restricted to only this mailing list.\n>\n> If this is of interest, I will be happy to try to go over and assign BIP\n> numbers to the current (15?) BUIPs assuming they meet the basic\n> requirements\n> for such assignment (see BIP 1:\n> https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki). Is there\n> an\n> easy way to get links to each of the BUIPs? I couldn't find BUIP 1 at all,\n> for\n> example.\n>\n> Thanks,\n>\n> Luke\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/e09b5b92/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-09T21:11:36",
                "message_text_only": "On Wed, Mar 9, 2016 at 6:11 PM, G. Andrew Stone via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Thanks for your offer Luke, but we are happy with our own process and,\n> regardless of historical provenance, see this mailing list and the BIP\n> process as very Core specific for reasons that are too numerous to describe\n> here but should be obvious to anyone who has been aware of the last year of\n> Bitcoin history.\n>\n\nOne of the advantages with the BIP process is that it means that there are\nhashlocked descriptions of the specs available for people to implement\nagainst.\n\nThe BIP process is not the same as getting a PR accepted into core.  It is\nnot a veto based process.  If you write the BIP and it doesn't have any\nserious technical problems, then it will be accepted into the BIP repo.\n\nGetting it marked as \"final\" is harder but I don't think that matters\nmuch.  I don't think that core would actually use a service bit that was\nclaimed in a BIP, even if the BIP wasn't final.  Maybe in 20 years if thin\nblocks aren't being used, they might recycle it.  It would be pretty\nobviously an aggressive act otherwise.\n\nThe NODE_GETUTXO bit is a perfect example of that.  They don't think it is\na good idea, but they still accepted the claim on the bit, because there\nare nodes actually using it.\n\nOn the other hand, the BIP git repository is hosted on the /bitcoin github\nsite, so in that context it can be seen as linked with core.  I wouldn't be\nsurprised if that specific objection was raised when it was moved from the\nwiki to github.  Luke may be willing to change that if you think that would\nbe worth changing?\n\nWith regards to the proposal, the description on the forum link isn't\nsufficient for an alternative client to implement it.  I had a look at the\nthread and I think that this is the implementation?\n\nhttps://github.com/ptschip/bitcoinxt/commit/7ea5854a3599851beffb1323544173f03d45373b\n\nIs the intention here to simply reserve the bit for thin blocks usage or to\ndefine the specification for inter-operation with other clients?\n\nPerhaps there could be a process for claiming service bits as it can be\nuseful to claim a bit in advance of actually finalizing the feature.\n\n- Claim bit with a reasonable justification (good faith intent to implement\nand the bit is useful for the feature)\n- Within 3 months have a finalized description of the feature that lets\nother clients implement it\n- Within 6 months have working software that deploys the feature\n- After 6 months of it actually being in active use, the bit is \"locked\"\nand stays assigned to that feature\n\nThere could be an expiry process if it ends up not being used after all.\nRequiring a public description of the feature seems like a reasonable\nrequirement in exchange for the community assigning the service bit, but we\ndon't want to go to far.  There is no point in having lots of free bits\nthat end up never being used.  Worst case, the addr message could be\nupdated to add more bits.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/dba257b7/attachment-0001.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2016-03-08T05:14:15",
                "message_text_only": "I think a BIP is a good idea, but rather than making such a specific\nproposal as \"Let's use bit 4 to indicate communication of thin blocks,\" how\nabout a more general one like \"Let's use bit(s?) 4(-5?) as user-agent\nspecific service bits so that if you customize your user-agent string, you\ncan use them for whatever you want\"? That way, other clients can choose to\nfollow suit by saying so, or simply recognize the meaning (or lack thereof)\nof those bits based on the user-agent setting.  This relieves future\ndevelopment from the burden of agreeing on where to put what, and allows\ntime and utility to show when such a user-agent-specific service bit should\nbe moved into the protocol section of service bits.\n\nPS I am not well versed in the creation of standards, but the reservation\nof digital real estate for self-identified customization (bits, bytes, or\nwhatever that will never be used by the standard) such as what I'm\nproposing seems like something that probably has a standard name.  \"Public\nprovisioning\" or something like that?\n\nOn Mon, Mar 7, 2016 at 12:51 PM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The Bitcoin Unlimited client needs a services bit to indicate that the\n> node\n> > is capable of communicating thin blocks.  We propose to use bit 4 as\n> AFAIK\n> > bit 3 is already earmarked for Segregated Witness.\n>\n> Does this functionality change peer selection?  If not, the preferred\n> signaling mechanism is probably the one in BIP 130.\n>\n> Otherwise, I think the standard method for getting numbers has been to\n> write a BIP documenting the usage. I don't know if that is intentional\n> or just how things have previously happened; and I don't have much of\n> an opinion on it.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/d29951b7/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-07T21:09:12",
                "message_text_only": "These are the relevant info BIPs.\n\nNODE_GETUTXO\nhttps://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki\n\nNODE_BLOOM:\nhttps://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki\n\nThe relevant code is here:\nhttps://github.com/bitcoin/bitcoin/blob/master/src/protocol.h#L228\n\nThe NODE_GETUTXO bit was included even though it is not supported by core.\n(It is one of XT's features).\n\nI think you need to be able to reasonably claim that the bit is useful and\nwill have actual users, before you can claim a bit.\n\nYou can also claim one of the free for all bits 24 - 31, but that is\nsupposed to be only temporary.\n\nGiving a link to \"thin blocks\" would help promote discussion about its\nmerits.\n\nOn Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The Bitcoin Unlimited client needs a services bit to indicate that the\n> node is capable of communicating thin blocks.  We propose to use bit 4 as\n> AFAIK bit 3 is already earmarked for Segregated Witness.\n>\n> Andrew\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/48ace09c/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Services bit for xthin blocks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "dagurval",
                "Dave Scotese",
                "Tier Nolan",
                "Luke Dashjr",
                "Gregory Maxwell",
                "G. Andrew Stone"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 16945
        }
    },
    {
        "title": "[bitcoin-dev] Fwd:  Services bit for xthin blocks",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2016-03-08T06:09:53",
                "message_text_only": "On Tue, Mar 8, 2016 at 5:14 AM, Dave Scotese <dscotese at litmocracy.com> wrote:\n> I think a BIP is a good idea, but rather than making such a specific\n> proposal as \"Let's use bit 4 to indicate communication of thin blocks,\" how\n> about a more general one like \"Let's use bit(s?) 4(-5?) as user-agent\n\nNot communicated in address messages, so useless for discovery.\n\nI think any feature which could do this could use the BIP130 approach instead."
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Services bit for xthin blocks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 446
        }
    },
    {
        "title": "[bitcoin-dev] BIP 2 promotion to Final",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2016-03-08T19:04:27",
                "message_text_only": "It has been about 1 month since BIP 2 finished receiving comments, so I \nbelieve it is an appropriate time to begin the process of moving it to Final \nStatus. Toward this end, I have opened a pull request:\n\n    https://github.com/bitcoin/bips/pull/350\n\nThe current requirement for this is that \"the reference implementation is \ncomplete and accepted by the community\". Given the vagueness of this criteria, \nI intend to move forward applying BIP 2's more specific criteria to itself:\n\n> A process BIP may change status from Draft to Active when it achieves rough\n> consensus on the mailing list. Such a proposal is said to have rough\n> consensus if it has been open to discussion on the development mailing list\n> for at least one month, and no person maintains any unaddressed\n> substantiated objections to it. Addressed or obstructive objections may be\n> ignored/overruled by general agreement that they have been sufficiently\n> addressed, but clear reasoning must be given in such circumstances.\n\nFurthermore, there is a reference implementation in the mentioned PR.\n\nPlease review the latest draft BIP and provide any objections ASAP.\nIf there are no outstanding objections on 2016 April 9th, I will consider the \ncurrent draft to have reached rough consensus and update its Status to Final \nby merging the PR.\n\nThanks,\n\nLuke"
            },
            {
                "author": "Mustafa Al-Bassam",
                "date": "2016-03-10T00:36:39",
                "message_text_only": "> the soft-fork does not become Final for as long as such a hard-fork\nhas potentially-majority support, or at most three months.\nThis wording is awkward. What is \"potentially-majority\"?\n\n>A hard-fork BIP requires adoption from the entire Bitcoin economy,\nparticularly including those selling desirable goods and services in\nexchange for bitcoin payments, as well as Bitcoin holders who wish to\nspend or would spend their bitcoins (including selling for other\ncurrencies) differently in the event of such a hard-fork.\nWhat if one shop owner, for example, out of thousands, doesn't adapt the\nhard-fork? It is expected, and should perhaps be encouraged, for a small\nminority to not accept a hard fork, but by the wording of the BIP\n(\"entire Bitcoin economy\"), one shop owner can veto a hard-fork.\n\nMustafa\n\nOn 08/03/16 19:04, Luke Dashjr via bitcoin-dev wrote:\n> It has been about 1 month since BIP 2 finished receiving comments, so I \n> believe it is an appropriate time to begin the process of moving it to Final \n> Status. Toward this end, I have opened a pull request:\n>\n>     https://github.com/bitcoin/bips/pull/350\n>\n> The current requirement for this is that \"the reference implementation is \n> complete and accepted by the community\". Given the vagueness of this criteria, \n> I intend to move forward applying BIP 2's more specific criteria to itself:\n>\n>> A process BIP may change status from Draft to Active when it achieves rough\n>> consensus on the mailing list. Such a proposal is said to have rough\n>> consensus if it has been open to discussion on the development mailing list\n>> for at least one month, and no person maintains any unaddressed\n>> substantiated objections to it. Addressed or obstructive objections may be\n>> ignored/overruled by general agreement that they have been sufficiently\n>> addressed, but clear reasoning must be given in such circumstances.\n> Furthermore, there is a reference implementation in the mentioned PR.\n>\n> Please review the latest draft BIP and provide any objections ASAP.\n> If there are no outstanding objections on 2016 April 9th, I will consider the \n> current draft to have reached rough consensus and update its Status to Final \n> by merging the PR.\n>\n> Thanks,\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-03-10T15:46:57",
                "message_text_only": "On Mar 10, 2016 02:04, \"Mustafa Al-Bassam via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> >A hard-fork BIP requires adoption from the entire Bitcoin economy,\n> particularly including those selling desirable goods and services in\n> exchange for bitcoin payments, as well as Bitcoin holders who wish to\n> spend or would spend their bitcoins (including selling for other\n> currencies) differently in the event of such a hard-fork.\n> What if one shop owner, for example, out of thousands, doesn't adapt the\n> hard-fork? It is expected, and should perhaps be encouraged, for a small\n> minority to not accept a hard fork, but by the wording of the BIP\n> (\"entire Bitcoin economy\"), one shop owner can veto a hard-fork.\n\nNo, the hardfork can still happen, but if a small group remains using the\nold chain (a single person will likely abandon it very soon), then it\ncannot be said that deployment was universal and thus the hardfork BIP\ndoesn't move to the final state. As long as there's users using the old\nchain, a hardfork BIP shouldn't become final if I understood BIP2\ncorrectly.\n\nIn other words,  uncontroversial hardfork bips can make it to the final\nstate once deployed, controversial hardforks may never become universally\ndeployed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/519eb1e0/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2016-03-16T20:43:09",
                "message_text_only": "I have an objection about \"BIP comments\" in BIP2. I think BIPs should be\nself contained, but the specification recommends posting comments to the\nBitcoin Wiki (bitcoin.it). I think this is a bad idea and external sources\nare bound to go stale over time as can be evidenced by a number of existing\nBIPs which link to external content that has long since expired. Comments\nshould be made instead using the Wiki feature at bitcoin/bips itself (which\ncan be enabled in the administration settings).\n\nOn Tue, Mar 8, 2016 at 7:04 PM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> It has been about 1 month since BIP 2 finished receiving comments, so I\n> believe it is an appropriate time to begin the process of moving it to\n> Final\n> Status. Toward this end, I have opened a pull request:\n>\n>     https://github.com/bitcoin/bips/pull/350\n>\n> The current requirement for this is that \"the reference implementation is\n> complete and accepted by the community\". Given the vagueness of this\n> criteria,\n> I intend to move forward applying BIP 2's more specific criteria to itself:\n>\n> > A process BIP may change status from Draft to Active when it achieves\n> rough\n> > consensus on the mailing list. Such a proposal is said to have rough\n> > consensus if it has been open to discussion on the development mailing\n> list\n> > for at least one month, and no person maintains any unaddressed\n> > substantiated objections to it. Addressed or obstructive objections may\n> be\n> > ignored/overruled by general agreement that they have been sufficiently\n> > addressed, but clear reasoning must be given in such circumstances.\n>\n> Furthermore, there is a reference implementation in the mentioned PR.\n>\n> Please review the latest draft BIP and provide any objections ASAP.\n> If there are no outstanding objections on 2016 April 9th, I will consider\n> the\n> current draft to have reached rough consensus and update its Status to\n> Final\n> by merging the PR.\n>\n> Thanks,\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160316/b562838a/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-16T22:24:30",
                "message_text_only": "On Wednesday, March 16, 2016 8:43:09 PM Btc Drak wrote:\n> I have an objection about \"BIP comments\" in BIP2. I think BIPs should be\n> self contained, but the specification recommends posting comments to the\n> Bitcoin Wiki (bitcoin.it). I think this is a bad idea and external sources\n> are bound to go stale over time as can be evidenced by a number of existing\n> BIPs which link to external content that has long since expired. Comments\n> should be made instead using the Wiki feature at bitcoin/bips itself (which\n> can be enabled in the administration settings).\n\nBIP Comments are not a part of the BIP itself, merely post-completion notes \nfrom various external parties. So having them external does not make the BIP \nany less self-contained. Right now, this information takes the form of \nreddit/forum comments, IRC chats, etc.\n\nIt is important that the forum for comments have a low barrier of use. The \nBitcoin Wiki requires only a request for editing privileges, whereas GitHub \nwiki would require reading and agreeing to a lengthy Terms of Service \ncontract.\n\nIn terms of staleness, the Wiki has been shown to stand the test of time, and \nis frankly less likely to move than the GitHub repository.\n\nThe BIP process originated on the Wiki, and was only moved to GitHub because \nstronger moderation was needed (eg, to prevent random other people from \nediting someone else's BIP; number self-assignments; etc). Such moderation is \nnot only unnecessary for BIP Comments, but would be an outright nuisance.\n\nI hope this addresses all your concerns and we can move forward with BIP 2 \nunmodified?\n\n(On another note, I wonder if we should recommend non-reference implementation \nlists/links be moved to BIP Comments rather than constantly revising the BIPs \nwith them...)\n\nLuke"
            },
            {
                "author": "Btc Drak",
                "date": "2016-03-18T09:42:16",
                "message_text_only": "On Wed, Mar 16, 2016 at 10:24 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> BIP Comments are not a part of the BIP itself, merely post-completion notes\n> from various external parties. So having them external does not make the\n> BIP\n> any less self-contained. Right now, this information takes the form of\n> reddit/forum comments, IRC chats, etc.\n>\n\nBIP2 does not state the comments section is where discussion happens for\nthe BIP, but for a sort of final summary.\n\n\n> It is important that the forum for comments have a low barrier of use. The\n> Bitcoin Wiki requires only a request for editing privileges, whereas GitHub\n> wiki would require reading and agreeing to a lengthy Terms of Service\n> contract.\n>\n\nSeems weak, it's much easier to sign up for a Github account and most have\none already. It's certainly easier than either paying to get edit\nprivileges on the Bitcoin Wiki find someone to convince you're genuine an\nobscure IRC channel.\n\n\n> In terms of staleness, the Wiki has been shown to stand the test of time,\n> and\n> is frankly less likely to move than the GitHub repository.\n>\n> The BIP process originated on the Wiki, and was only moved to GitHub\n> because\n> stronger moderation was needed (eg, to prevent random other people from\n> editing someone else's BIP; number self-assignments; etc). Such moderation\n> is\n> not only unnecessary for BIP Comments, but would be an outright nuisance.\n>\n\nI'm not sure that is the reason why, but in any case, Github is a more\nsensible place because of the collaborative features which is why they\nbecame the centre of OSS software development for hundreds of thousands of\nprojects.\n\n\n> I hope this addresses all your concerns and we can move forward with BIP 2\n> unmodified?\n>\n\nI am sorry but it has not. I still strongly object to using the Bitcoin\nWiki or any external source source for the commentary part of BIP2. I\nbelieve it should be done on using the Wiki feature at bitcoin/bips. If\nthat is not acceptable, then I would suggest a separate page in the bip\nassets folder, called bip<nnnn>/comments.md. On a side note, more complex\nreference implementation code should be stored in that folder too.\n\n\n> (On another note, I wonder if we should recommend non-reference\n> implementation\n> lists/links be moved to BIP Comments rather than constantly revising the\n> BIPs\n> with them...)\n>\n\nCertainly those could be on the comments page.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160318/092da883/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-18T19:34:52",
                "message_text_only": "On Friday, March 18, 2016 9:42:16 AM Btc Drak wrote:\n> On Wed, Mar 16, 2016 at 10:24 PM, Luke Dashjr <luke at dashjr.org> wrote:\n> > BIP Comments are not a part of the BIP itself, merely post-completion\n> > notes from various external parties. So having them external does not\n> > make the BIP\n> > any less self-contained. Right now, this information takes the form of\n> > reddit/forum comments, IRC chats, etc.\n> \n> BIP2 does not state the comments section is where discussion happens for\n> the BIP, but for a sort of final summary.\n\nYes, discussion for the BIP still happens on the mailing list.\n\n> > It is important that the forum for comments have a low barrier of use.\n> > The Bitcoin Wiki requires only a request for editing privileges, whereas\n> > GitHub wiki would require reading and agreeing to a lengthy Terms of\n> > Service contract.\n> \n> Seems weak, it's much easier to sign up for a Github account and most have\n> one already. It's certainly easier than either paying to get edit\n> privileges on the Bitcoin Wiki find someone to convince you're genuine an\n> obscure IRC channel.\n\nWeak? What does that even mean? GitHub's terms are no trivial list. It's not a \nmatter of \"easy\", but whether you're willing to agree to the terms or not - \nand people should be free to participate without doing so. The Bitcoin Wiki \nhas never had a problem with whitelisting people, and isn't exclusively \navailable via IRC.\n\n> > In terms of staleness, the Wiki has been shown to stand the test of time,\n> > and\n> > is frankly less likely to move than the GitHub repository.\n> > \n> > The BIP process originated on the Wiki, and was only moved to GitHub\n> > because\n> > stronger moderation was needed (eg, to prevent random other people from\n> > editing someone else's BIP; number self-assignments; etc). Such\n> > moderation is\n> > not only unnecessary for BIP Comments, but would be an outright nuisance.\n> \n> I'm not sure that is the reason why, but in any case, Github is a more\n> sensible place because of the collaborative features which is why they\n> became the centre of OSS software development for hundreds of thousands of\n> projects.\n\nGitHub's collaborative features for the wiki function is clearly inferior.\n\n> > I hope this addresses all your concerns and we can move forward with BIP\n> > 2 unmodified?\n> \n> I am sorry but it has not. I still strongly object to using the Bitcoin\n> Wiki or any external source source for the commentary part of BIP2. I\n> believe it should be done on using the Wiki feature at bitcoin/bips. If\n> that is not acceptable, then I would suggest a separate page in the bip\n> assets folder, called bip<nnnn>/comments.md. On a side note, more complex\n> reference implementation code should be stored in that folder too.\n\nThen you're essentially standing in the way of BIP 2 and stalling it.\n\nI have no interest in having to manually approve every single little comment \non BIPs, and I think it's likely nobody will use it if doing so requires such \neffort.\n\n> > (On another note, I wonder if we should recommend non-reference\n> > implementation\n> > lists/links be moved to BIP Comments rather than constantly revising the\n> > BIPs\n> > with them...)\n> \n> Certainly those could be on the comments page."
            },
            {
                "author": "David A. Harding",
                "date": "2016-03-18T22:52:55",
                "message_text_only": "Hi,\n\nArguing about which wiki is better doesn't feel productive to me. Can we\njust let BIP authors decide for themselves? Draft-BIP2 already has a\nprovision for allowing authors to specify a backup wiki of their own\nchoosing; can we just make that the policy in all cases (and drop the\nneed for a backup wiki)?\n\n-Dave"
            },
            {
                "author": "Tom",
                "date": "2016-03-18T11:59:36",
                "message_text_only": "On Wednesday 16 Mar 2016 22:24:30 Luke Dashjr via bitcoin-dev wrote:\n> It is important that the forum for comments have a low barrier of use. The \n> Bitcoin Wiki requires only a request for editing privileges, whereas GitHub \n> wiki would require reading and agreeing to a lengthy Terms of Service\n> contract.\n\nI'd argue that neither of those two qualifies in that case.\n\nI second BTCDraks' objection."
            },
            {
                "author": "Mustafa Al-Bassam",
                "date": "2016-03-10T14:02:15",
                "message_text_only": "On 10/03/16 00:53, Luke Dashjr wrote:\n> On Thursday, March 10, 2016 12:29:16 AM Mustafa Al-Bassam wrote:\n>>> the soft-fork does not become Final for as long as such a hard-fork\n>>> has potentially-majority support, or at most three months.\n>> This wording is awkward. What is \"potentially-majority\"?\n> A group that is large enough that it may constitute a majority.\n> How can I reword this better/clearer?\n\"potentially has majority support\"?\n>\n>>> A hard-fork BIP requires adoption from the entire Bitcoin economy,\n>>> particularly including those selling desirable goods and services in\n>>> exchange for bitcoin payments, as well as Bitcoin holders who wish to\n>>> spend or would spend their bitcoins (including selling for other\n>>> currencies) differently in the event of such a hard-fork.\n>> What if one shop owner, for example, out of thousands, doesn't adapt the\n>> hard-fork? It is expected, and should perhaps be encouraged, for a small\n>> minority to not accept a hard fork, but by the wording of the BIP\n>> (\"entire Bitcoin economy\"), one shop owner can veto a hard-fork.\n> It's not the hard-fork they can veto (in this context, anyway), but the \n> progression of the BIP Status field. However, one shop cannot operate in a \n> vacuum: if they are indeed alone, they will soon find themselves no longer \n> selling in exchange for bitcoin payments, as nobody else would exist willing \n> to use the previous blockchain to pay them. If they are no longer selling, \n> they cease to meet the criteria here enabling their veto.\nI think in general this sounds like a good definition for a hard-fork\nbecoming active. But I can envision a situation where someone will try\nto be annoying about it and point to one instance of one buyer and one\nseller using the blockchain to buy and sell from each other, or set one up.\n\n> Luke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-03-10T15:59:32",
                "message_text_only": "On Mar 10, 2016 16:51, \"Mustafa Al-Bassam via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think in general this sounds like a good definition for a hard-fork\n> becoming active. But I can envision a situation where someone will try\n> to be annoying about it and point to one instance of one buyer and one\n> seller using the blockchain to buy and sell from each other, or set one\nup.\n\nAnd all the attacker will achieve is preventing a field on a text file on\ngithub from moving from \"active\" to \"final\".\nSeems pretty stupid. Why would an attacker care so much about this? Is\nthere any way the attacker can make gains or harm bitcoin with this attack?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/ff14b0b1/attachment.html>"
            },
            {
                "author": "Mustafa Al-Bassam",
                "date": "2016-03-10T16:28:43",
                "message_text_only": "On 10/03/16 15:59, Jorge Tim\u00f3n wrote:\n>\n>\n> On Mar 10, 2016 16:51, \"Mustafa Al-Bassam via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n> > I think in general this sounds like a good definition for a hard-fork\n> > becoming active. But I can envision a situation where someone will try\n> > to be annoying about it and point to one instance of one buyer and one\n> > seller using the blockchain to buy and sell from each other, or set\n> one up.\n>\n> And all the attacker will achieve is preventing a field on a text file\n> on github from moving from \"active\" to \"final\".\n> Seems pretty stupid. Why would an attacker care so much about this? Is\n> there any way the attacker can make gains or harm bitcoin with this\n> attack?\n>\nIt's extremely naive to think that just because you can't think of an\nincentive for a reason for an attack to do this, an attacker will never\nto do this. There are many people that would be willing to spend some\ntime to cause some trouble for the enjoyment of it, if the attack is\nfree to execute.\n\nThe fact that it takes very little time and effort to prevent a BIP from\nreaching final status, means that in an base of millions of users it's\nguaranteed that some disgruntled or bored person out there will attack\nit, even if it's for the lulz.\n\nTo reasonably expect that any hark fork - including an uncontroversial\none - will be adapted by every single person in a ecosystem of millions\nof people, is wishful thinking and the BIP may as well say \"hard fork\nBIPs shall never reach final status.\"\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/3356a3f8/attachment.html>"
            },
            {
                "author": "Mustafa Al-Bassam",
                "date": "2016-03-10T16:33:40",
                "message_text_only": "By the way, on that basis it might be a good idea to introduce an extra\nstatus called \"deployed\" to indicate when a hard fork has reached a\nsuper-majority and is being used by the economy in practice, but not the\nwhole economy.\n\nOn 10/03/16 16:28, Mustafa Al-Bassam wrote:\n>\n>\n> On 10/03/16 15:59, Jorge Tim\u00f3n wrote:\n>>\n>>\n>> On Mar 10, 2016 16:51, \"Mustafa Al-Bassam via bitcoin-dev\"\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> > I think in general this sounds like a good definition for a hard-fork\n>> > becoming active. But I can envision a situation where someone will try\n>> > to be annoying about it and point to one instance of one buyer and one\n>> > seller using the blockchain to buy and sell from each other, or set\n>> one up.\n>>\n>> And all the attacker will achieve is preventing a field on a text\n>> file on github from moving from \"active\" to \"final\".\n>> Seems pretty stupid. Why would an attacker care so much about this?\n>> Is there any way the attacker can make gains or harm bitcoin with\n>> this attack?\n>>\n> It's extremely naive to think that just because you can't think of an\n> incentive for a reason for an attack to do this, an attacker will\n> never to do this. There are many people that would be willing to spend\n> some time to cause some trouble for the enjoyment of it, if the attack\n> is free to execute.\n>\n> The fact that it takes very little time and effort to prevent a BIP\n> from reaching final status, means that in an base of millions of users\n> it's guaranteed that some disgruntled or bored person out there will\n> attack it, even if it's for the lulz.\n>\n> To reasonably expect that any hark fork - including an uncontroversial\n> one - will be adapted by every single person in a ecosystem of\n> millions of people, is wishful thinking and the BIP may as well say\n> \"hard fork BIPs shall never reach final status.\"\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/96b12109/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2016-03-10T18:30:22",
                "message_text_only": "On Mar 10, 2016 17:28, \"Mustafa Al-Bassam\" <mus at musalbas.com> wrote:\n>\n> The fact that it takes very little time and effort to prevent a BIP from\nreaching final status, means that in an base of millions of users it's\nguaranteed that some disgruntled or bored person out there will attack it,\neven if it's for the lulz.\n\nI still fail to see the harm caused by this attack. At some point the\nattacker will get bored of laughing even if the attack has a small costs\n(which I'm not that sure it is).\n\n> To reasonably expect that any hark fork - including an uncontroversial\none - will be adapted by every single person in a ecosystem of millions of\npeople, is wishful thinking and the BIP may as well say \"hard fork BIPs\nshall never reach final status.\"\n\nThis is what seem to have happened with uncontroversial softforks in the\npast. Why is wishful thinking to expect the same for uncontroversial\nhardforks?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/39b8d101/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-10T16:43:59",
                "message_text_only": "On Thursday, March 10, 2016 2:02:15 PM Mustafa Al-Bassam wrote:\n> On 10/03/16 00:53, Luke Dashjr wrote:\n> > On Thursday, March 10, 2016 12:29:16 AM Mustafa Al-Bassam wrote:\n> >>> A hard-fork BIP requires adoption from the entire Bitcoin economy,\n> >>> particularly including those selling desirable goods and services in\n> >>> exchange for bitcoin payments, as well as Bitcoin holders who wish to\n> >>> spend or would spend their bitcoins (including selling for other\n> >>> currencies) differently in the event of such a hard-fork.\n> >> \n> >> What if one shop owner, for example, out of thousands, doesn't adapt the\n> >> hard-fork? It is expected, and should perhaps be encouraged, for a small\n> >> minority to not accept a hard fork, but by the wording of the BIP\n> >> (\"entire Bitcoin economy\"), one shop owner can veto a hard-fork.\n> > \n> > It's not the hard-fork they can veto (in this context, anyway), but the\n> > progression of the BIP Status field. However, one shop cannot operate in\n> > a vacuum: if they are indeed alone, they will soon find themselves no\n> > longer selling in exchange for bitcoin payments, as nobody else would\n> > exist willing to use the previous blockchain to pay them. If they are no\n> > longer selling, they cease to meet the criteria here enabling their\n> > veto.\n> \n> I think in general this sounds like a good definition for a hard-fork\n> becoming active. But I can envision a situation where someone will try\n> to be annoying about it and point to one instance of one buyer and one\n> seller using the blockchain to buy and sell from each other, or set one up.\n\nIn this scenario, it would seem the previous Bitcoin is alive any working, and \nthat the hard-fork has failed. How to resolve such a split is outside the \nscope of the BIP process IMO.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "BIP 2 promotion to Final",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tom",
                "David A. Harding",
                "Mustafa Al-Bassam",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Btc Drak"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 25236
        }
    },
    {
        "title": "[bitcoin-dev] bitcoin-dev Digest, Vol 10, Issue 13",
        "thread_messages": [
            {
                "author": "Daniele Pinna",
                "date": "2016-03-09T01:27:22",
                "message_text_only": "This seems unnecessarily complicated (\"don't use cannon to kill mosquito\"\nkind of thing). If the community were interested in a realtime hashrate\nrebalancing proposal one could simply adjust difficulty at each new block\nusing the current method.\n\nIf faster relaxation in case of adversity is required, it suspect that it\nwould suffice to perform a weighted average of the previous 2016 blocks\ninstead of the standard averaging that is currently done. It should be\npossible to find an optimal weighting based on historical interblock timing\ndata. I look into it over the next couple of days.\n\ndpinna\n\n\n\n\n> ------------------------------\n>\n> Message: 3\n> Date: Tue, 8 Mar 2016 22:05:07 +0000\n> From: Bob McElrath <bob_bitcoin at mcelrath.org>\n> To: Dave Hudson <dave at hashingit.com>\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Subject: Re: [bitcoin-dev] Hardfork to fix difficulty drop algorithm\n> Message-ID: <20160308220507.GA4388 at mcelrath.org>\n> Content-Type: text/plain; charset=us-ascii\n>\n> Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:\n> > I think the biggest question here would be how would the difficulty\n> > retargeting be changed?  Without seeing the algorithm proposal it's\n> difficult\n> > to assess the impact that it would have, but my intuition is that this is\n> > likely to be problematic.\n>\n> I have no comment on whether this will be *needed* but there's a simple\n> algorithm that I haven't seen any coin adopt, that I think needs to be: the\n> critically damped harmonic oscillator:\n>\n>     http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html\n>\n> In dynamical systems one does a derivative expansion.  Here we want to\n> find the\n> first and second derivatives (in time) of the hashrate.  These can be\n> determined\n> by a method of finite differences, or fancier algorithms which use a\n> quadratic\n> or quartic polynomial approximation.  Two derivatives are generally all\n> that is\n> needed, and the resulting dynamical system is a damped harmonic oscillator.\n>\n> A damped harmonic oscillator is basically how your car's shock absorbers\n> work.\n> The relevant differential equation has two parameters: the oscillation\n> frequency\n> and damping factor.  The maximum oscillation frequency is the block rate.\n> Any\n> oscillation faster than the block rate cannot be measured by block times.\n> The\n> damping rate is an exponential decay and for critical damping is twice the\n> oscillation frequency.\n>\n> So, this is a zero parameter, optimal damping solution for a varying\n> hashrate.\n> This is inherently a numeric approximation solution to a differential\n> equation,\n> so questions of approximations for the hashrate enter, but that's all.\n> Weak\n> block proposals will be able to get better approximations to the hashrate.\n>\n> If solving this problem is deemed desirable, I can put some time into\n> this, or\n> direct others as to how to go about it.\n>\n> --\n> Cheers, Bob McElrath\n>\n> \"For every complex problem, there is a solution that is simple, neat, and\n> wrong.\"\n>     -- H. L. Mencken\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/9e70ecd6/attachment.html>"
            },
            {
                "author": "Bob McElrath",
                "date": "2016-03-09T06:17:50",
                "message_text_only": "Daniele Pinna via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:\n> This seems unnecessarily complicated (\"don't use cannon to kill mosquito\" kind\n> of thing). If the community were interested in a realtime hashrate rebalancing\n> proposal one could simply adjust difficulty at each new block using the current\n> method.\n\nThat proposal is equivalent to an under-damped oscillator, and would still see\nsignificant oscillation between blocks if miners were switching on and off\nhardware.\n\n> If faster relaxation in case of adversity is required, it suspect that it would\n> suffice to perform a weighted average of the previous 2016 blocks instead of\n> the standard averaging that is currently done. It should be possible to find an\n> optimal weighting based on historical interblock timing data. I look into it\n> over the next couple of days.\n\nThe optimal solution is the one I quote, and is well known, just not in the\nbitcoin community.\n\n\"faster relaxation time\" refers to the time constant of the exponential damping.\nif you make it too fast, you create an over-damped oscillator.  The system\ncannot measure oscillation faster than the block time, so damping on shorter\ntimescales is useless.  The optimal damping is given by the critically damped\noscillator.\n\nTonight at BitDevsNYC, Mike Wozniak pointed out that SPV wallets must also\ncalculate retargeting, but this is a terribly simple calculation, and while more\ncomplex from a coding perspective, would not be noticeable in run-time of SPV\nwallets.\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken"
            }
        ],
        "thread_summary": {
            "title": "bitcoin-dev Digest, Vol 10, Issue 13",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bob McElrath",
                "Daniele Pinna"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4898
        }
    },
    {
        "title": "[bitcoin-dev] BIP Process: Status, comments, and copyright licenses",
        "thread_messages": [
            {
                "author": "Mustafa Al-Bassam",
                "date": "2016-03-10T00:37:46",
                "message_text_only": "It would be nice to decouple the venue, but even BIP 1 gives that\ncontrol to whoever controls the mailing list: \"Following a discussion,\nthe proposal should be sent to the bitcoin-dev list and the BIP editor\nwith the draft BIP.\" (BIP 1)\n\nA neater way to do it might be to replace references to the mailing list\nwith \"public discussion medium\" where \"medium\" can be defined as\nsomething like any discussion forum frequented by the wider development\ncommunity, like the pull requests section of the BIP repo, conferences, etc.\n\nOn 02/02/16 15:58, Gavin Andresen via bitcoin-dev wrote:\n> On Mon, Feb 1, 2016 at 5:53 PM, Luke Dashjr via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     I've completed an initial draft of a BIP that provides\n>     clarifications on the\n>     Status field for BIPs, as well as adding the ability for public\n>     comments on\n>     them, and expanding the list of allowable BIP licenses.\n>\n>     https://github.com/luke-jr/bips/blob/bip-biprevised/bip-biprevised.mediawiki\n>\n>     I plan to open discussion of making this BIP an Active status\n>     (along with BIP\n>     123) a month after initial revisions have completed. Please\n>     provide any\n>     objections now, so I can try to address them now and enable\n>     consensus to be\n>     reached.\n>\n>  \n>\n> I like the more concrete definitions of the various statuses.\n>\n> I don't like the definition of \"consensus\".  I think the definition\n> described gives too much centralized control to whoever controls the\n> mailing list and the wiki.\n>\n> -- \n> --\n> Gavin Andresen\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/d9bf3ae9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Process: Status, comments, and copyright licenses",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Mustafa Al-Bassam"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2002
        }
    },
    {
        "title": "[bitcoin-dev] BIP75 - Out of Band Address Exchange",
        "thread_messages": [
            {
                "author": "James MacWhyte",
                "date": "2016-03-10T21:43:29",
                "message_text_only": "Hi everyone,\n\nOur BIP (officially proposed on March 1) has tentatively been assigned\nnumber 75. Also, the title has been changed to \"Out of Band Address\nExchange using Payment Protocol Encryption\" to be more accurate.\n\nWe thought it would be good to take this opportunity to add some optional\nfields to the BIP70 paymentDetails message. The new fields are:\nsubtractable fee (give permission to the sender to use some of the\nrequested amount towards the transaction fee), fee per kb (the minimum fee\nrequired to be accepted as zeroconf), and replace by fee (whether or not a\ntransaction with the RBF flag will be accepted with zeroconf). I know it\ndoesn't make much sense for merchants to accept RBF with zeroconf, so that\nlast one might be used more to explicitly refuse RBF transactions (and\nallow the automation of choosing a setting based on who you are transacting\nwith).\n\nI see BIP75 as a general modernization of BIP70, so I think it should be\nfine to include these extensions in the new BIP, even though these fields\nare not specific to the features we are proposing. Please take a look at\nthe relevant section and let me know if anyone has any concerns:\nhttps://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n\nThe BIP70 extensions page in our fork has also been updated.\n\nThanks!\n\nJames\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/f5ce8ae6/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2016-03-11T11:54:52",
                "message_text_only": "I think it's a bad idea to pollute the original idea of this BIP with\nother extensions. Other extensions should go to separate BIPs,\nespecially since methods to clarify the fee have nothing to do with\nsecure and authenticated bi-directional BIP70 communication.\n\n\nOn 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n> Hi everyone,\n> \n> Our BIP (officially proposed on March 1) has tentatively been assigned\n> number 75. Also, the title has been changed to \"Out of Band Address\n> Exchange using Payment Protocol Encryption\" to be more accurate.\n> \n> We thought it would be good to take this opportunity to add some\n> optional fields to the BIP70 paymentDetails message. The new fields are:\n> subtractable fee (give permission to the sender to use some of the\n> requested amount towards the transaction fee), fee per kb (the minimum\n> fee required to be accepted as zeroconf), and replace by fee (whether or\n> not a transaction with the RBF flag will be accepted with zeroconf). I\n> know it doesn't make much sense for merchants to accept RBF with\n> zeroconf, so that last one might be used more to explicitly refuse RBF\n> transactions (and allow the automation of choosing a setting based on\n> who you are transacting with).\n> \n> I see BIP75 as a general modernization of BIP70, so I think it should be\n> fine to include these extensions in the new BIP, even though these\n> fields are not specific to the features we are proposing. Please take a\n> look at the relevant section and let me know if anyone has any concerns:\n> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n> \n> The BIP70 extensions page in our fork has also been updated.\n> \n> Thanks!\n> \n> James \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-11T19:32:12",
                "message_text_only": "That's a valid point, and one we had thought of, which is why I wanted to\nget everyone's opinion. I agree the proposed field extensions have nothing\nto do with encryption, but does it make sense to propose a completely\nseparate BIP for such a small thing? If that is the accepted way to go, we\ncan split it into two and make a separate proposal.\n\nOn Fri, Mar 11, 2016 at 5:48 AM Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think it's a bad idea to pollute the original idea of this BIP with\n> other extensions. Other extensions should go to separate BIPs,\n> especially since methods to clarify the fee have nothing to do with\n> secure and authenticated bi-directional BIP70 communication.\n>\n>\n> On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n> > Hi everyone,\n> >\n> > Our BIP (officially proposed on March 1) has tentatively been assigned\n> > number 75. Also, the title has been changed to \"Out of Band Address\n> > Exchange using Payment Protocol Encryption\" to be more accurate.\n> >\n> > We thought it would be good to take this opportunity to add some\n> > optional fields to the BIP70 paymentDetails message. The new fields are:\n> > subtractable fee (give permission to the sender to use some of the\n> > requested amount towards the transaction fee), fee per kb (the minimum\n> > fee required to be accepted as zeroconf), and replace by fee (whether or\n> > not a transaction with the RBF flag will be accepted with zeroconf). I\n> > know it doesn't make much sense for merchants to accept RBF with\n> > zeroconf, so that last one might be used more to explicitly refuse RBF\n> > transactions (and allow the automation of choosing a setting based on\n> > who you are transacting with).\n> >\n> > I see BIP75 as a general modernization of BIP70, so I think it should be\n> > fine to include these extensions in the new BIP, even though these\n> > fields are not specific to the features we are proposing. Please take a\n> > look at the relevant section and let me know if anyone has any concerns:\n> >\n> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n> >\n> > The BIP70 extensions page in our fork has also been updated.\n> >\n> > Thanks!\n> >\n> > James\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/12e2977c/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2016-03-12T14:40:11",
                "message_text_only": "Yes, it makes sense. A BIP is something people refer to, either just by\nits number or by URL, and with multiple orthogonal \"sub-BIPs\" it's\ndifficult to refer to. We have this problem with BIP32 already -- all HD\nwallets implement the derivation part of BIP32 but almost none do\nimplement the hierarchy part (and use BIP43/44 instead). I tried to\nsplit up BIP32 into two BIPs later (without any content changes), but it\nwas declined because of its final state.\n\nThere is no harm in using a BIP only for a small thing, BIP numbers are\ninfinite.\n\n\nOn 03/11/2016 08:32 PM, James MacWhyte via bitcoin-dev wrote:\n> That's a valid point, and one we had thought of, which is why I wanted\n> to get everyone's opinion. I agree the proposed field extensions have\n> nothing to do with encryption, but does it make sense to propose a\n> completely separate BIP for such a small thing? If that is the accepted\n> way to go, we can split it into two and make a separate proposal.\n> \n> On Fri, Mar 11, 2016 at 5:48 AM Andreas Schildbach via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     I think it's a bad idea to pollute the original idea of this BIP with\n>     other extensions. Other extensions should go to separate BIPs,\n>     especially since methods to clarify the fee have nothing to do with\n>     secure and authenticated bi-directional BIP70 communication.\n> \n> \n>     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n>     > Hi everyone,\n>     >\n>     > Our BIP (officially proposed on March 1) has tentatively been assigned\n>     > number 75. Also, the title has been changed to \"Out of Band Address\n>     > Exchange using Payment Protocol Encryption\" to be more accurate.\n>     >\n>     > We thought it would be good to take this opportunity to add some\n>     > optional fields to the BIP70 paymentDetails message. The new\n>     fields are:\n>     > subtractable fee (give permission to the sender to use some of the\n>     > requested amount towards the transaction fee), fee per kb (the minimum\n>     > fee required to be accepted as zeroconf), and replace by fee\n>     (whether or\n>     > not a transaction with the RBF flag will be accepted with zeroconf). I\n>     > know it doesn't make much sense for merchants to accept RBF with\n>     > zeroconf, so that last one might be used more to explicitly refuse RBF\n>     > transactions (and allow the automation of choosing a setting based on\n>     > who you are transacting with).\n>     >\n>     > I see BIP75 as a general modernization of BIP70, so I think it\n>     should be\n>     > fine to include these extensions in the new BIP, even though these\n>     > fields are not specific to the features we are proposing. Please\n>     take a\n>     > look at the relevant section and let me know if anyone has any\n>     concerns:\n>     >\n>     https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n>     >\n>     > The BIP70 extensions page in our fork has also been updated.\n>     >\n>     > Thanks!\n>     >\n>     > James\n>     >\n>     >\n>     > _______________________________________________\n>     > bitcoin-dev mailing list\n>     > bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     >\n> \n> \n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Justin Newton",
                "date": "2016-03-11T22:43:48",
                "message_text_only": "I think we would be open to either leaving them in, or doing a separate\nBIP.  What do others think?  I\u2019d prefer to keep them together if the\nchanges are non-controversial just to cut down on #of BIP\u2019s, but thats not\na strong preference.\n\nOn Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think it's a bad idea to pollute the original idea of this BIP with\n> other extensions. Other extensions should go to separate BIPs,\n> especially since methods to clarify the fee have nothing to do with\n> secure and authenticated bi-directional BIP70 communication.\n>\n>\n> On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n> > Hi everyone,\n> >\n> > Our BIP (officially proposed on March 1) has tentatively been assigned\n> > number 75. Also, the title has been changed to \"Out of Band Address\n> > Exchange using Payment Protocol Encryption\" to be more accurate.\n> >\n> > We thought it would be good to take this opportunity to add some\n> > optional fields to the BIP70 paymentDetails message. The new fields are:\n> > subtractable fee (give permission to the sender to use some of the\n> > requested amount towards the transaction fee), fee per kb (the minimum\n> > fee required to be accepted as zeroconf), and replace by fee (whether or\n> > not a transaction with the RBF flag will be accepted with zeroconf). I\n> > know it doesn't make much sense for merchants to accept RBF with\n> > zeroconf, so that last one might be used more to explicitly refuse RBF\n> > transactions (and allow the automation of choosing a setting based on\n> > who you are transacting with).\n> >\n> > I see BIP75 as a general modernization of BIP70, so I think it should be\n> > fine to include these extensions in the new BIP, even though these\n> > fields are not specific to the features we are proposing. Please take a\n> > look at the relevant section and let me know if anyone has any concerns:\n> >\n> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n> >\n> > The BIP70 extensions page in our fork has also been updated.\n> >\n> > Thanks!\n> >\n> > James\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \n\nJustin W. Newton\nFounder/CEO\nNetki, Inc.\n\njustin at netki.com\n+1.818.261.4248\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/4de2c325/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: PastedGraphic-1.tiff\nType: image/tiff\nSize: 10972 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/4de2c325/attachment-0001.tiff>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2016-03-12T15:00:17",
                "message_text_only": "Replying to the \"fee\" part of BIP75 (which as already noted should go to\na different BIP number imho):\n\nIt makes to sense to let the payee define a fee *rate*. The payee\ndoesn't know anything about how the payer's wallet is structured. In\nextreme cases, as a payer I would keep all my tiny UTXOs (which would be\nunspendable in a economic way) for the one payee who is willing to pay a\nhigh enough rate...\n\nRather, I propose an absolute amount that the payee is willing to cover\nshould be declared.\n\nAlso, in order to avoid disputes I suggest the amount should be deducted\nfrom the BIP70 payment message amount already. A wallet which\nunderstands BIP75fee would add these two up for *display* puposes only.\nThe wallet should continue to use the existing fee policies. If it can\nsend the amount as specified by BIP70 and the fee is below the BIP75fee\namount, it would not mention any fees to the user. If it exceeds, it\nwould display just the exceeding amount.\n\n\n\n\nOn 03/11/2016 11:43 PM, Justin Newton via bitcoin-dev wrote:\n> I think we would be open to either leaving them in, or doing a separate\n> BIP.  What do others think?  I\u2019d prefer to keep them together if the\n> changes are non-controversial just to cut down on #of BIP\u2019s, but thats\n> not a strong preference.\n> \n> On Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     I think it's a bad idea to pollute the original idea of this BIP with\n>     other extensions. Other extensions should go to separate BIPs,\n>     especially since methods to clarify the fee have nothing to do with\n>     secure and authenticated bi-directional BIP70 communication.\n> \n> \n>     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n>     > Hi everyone,\n>     >\n>     > Our BIP (officially proposed on March 1) has tentatively been assigned\n>     > number 75. Also, the title has been changed to \"Out of Band Address\n>     > Exchange using Payment Protocol Encryption\" to be more accurate.\n>     >\n>     > We thought it would be good to take this opportunity to add some\n>     > optional fields to the BIP70 paymentDetails message. The new\n>     fields are:\n>     > subtractable fee (give permission to the sender to use some of the\n>     > requested amount towards the transaction fee), fee per kb (the minimum\n>     > fee required to be accepted as zeroconf), and replace by fee\n>     (whether or\n>     > not a transaction with the RBF flag will be accepted with zeroconf). I\n>     > know it doesn't make much sense for merchants to accept RBF with\n>     > zeroconf, so that last one might be used more to explicitly refuse RBF\n>     > transactions (and allow the automation of choosing a setting based on\n>     > who you are transacting with).\n>     >\n>     > I see BIP75 as a general modernization of BIP70, so I think it\n>     should be\n>     > fine to include these extensions in the new BIP, even though these\n>     > fields are not specific to the features we are proposing. Please\n>     take a\n>     > look at the relevant section and let me know if anyone has any\n>     concerns:\n>     >\n>     https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n>     >\n>     > The BIP70 extensions page in our fork has also been updated.\n>     >\n>     > Thanks!\n>     >\n>     > James\n>     >\n>     >\n>     > _______________________________________________\n>     > bitcoin-dev mailing list\n>     > bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     >\n> \n> \n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> \n> -- \n> \n> Justin W. Newton\n> Founder/CEO\n> Netki, Inc.\n> \n> justin at netki.com <mailto:justin at netki.com>\n> +1.818.261.4248 <tel:+1.818.261.4248>\n> \n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-17T01:23:09",
                "message_text_only": "We have removed the BIP70 field extensions from this BIP and will save that\nfor another time. A PR to add our documentation to the main repo has been\nsubmitted.\n\nJames\n\nOn Sat, Mar 12, 2016 at 8:36 AM Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Replying to the \"fee\" part of BIP75 (which as already noted should go to\n> a different BIP number imho):\n>\n> It makes to sense to let the payee define a fee *rate*. The payee\n> doesn't know anything about how the payer's wallet is structured. In\n> extreme cases, as a payer I would keep all my tiny UTXOs (which would be\n> unspendable in a economic way) for the one payee who is willing to pay a\n> high enough rate...\n>\n> Rather, I propose an absolute amount that the payee is willing to cover\n> should be declared.\n>\n> Also, in order to avoid disputes I suggest the amount should be deducted\n> from the BIP70 payment message amount already. A wallet which\n> understands BIP75fee would add these two up for *display* puposes only.\n> The wallet should continue to use the existing fee policies. If it can\n> send the amount as specified by BIP70 and the fee is below the BIP75fee\n> amount, it would not mention any fees to the user. If it exceeds, it\n> would display just the exceeding amount.\n>\n>\n>\n>\n> On 03/11/2016 11:43 PM, Justin Newton via bitcoin-dev wrote:\n> > I think we would be open to either leaving them in, or doing a separate\n> > BIP.  What do others think?  I\u2019d prefer to keep them together if the\n> > changes are non-controversial just to cut down on #of BIP\u2019s, but thats\n> > not a strong preference.\n> >\n> > On Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     I think it's a bad idea to pollute the original idea of this BIP with\n> >     other extensions. Other extensions should go to separate BIPs,\n> >     especially since methods to clarify the fee have nothing to do with\n> >     secure and authenticated bi-directional BIP70 communication.\n> >\n> >\n> >     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:\n> >     > Hi everyone,\n> >     >\n> >     > Our BIP (officially proposed on March 1) has tentatively been\n> assigned\n> >     > number 75. Also, the title has been changed to \"Out of Band Address\n> >     > Exchange using Payment Protocol Encryption\" to be more accurate.\n> >     >\n> >     > We thought it would be good to take this opportunity to add some\n> >     > optional fields to the BIP70 paymentDetails message. The new\n> >     fields are:\n> >     > subtractable fee (give permission to the sender to use some of the\n> >     > requested amount towards the transaction fee), fee per kb (the\n> minimum\n> >     > fee required to be accepted as zeroconf), and replace by fee\n> >     (whether or\n> >     > not a transaction with the RBF flag will be accepted with\n> zeroconf). I\n> >     > know it doesn't make much sense for merchants to accept RBF with\n> >     > zeroconf, so that last one might be used more to explicitly refuse\n> RBF\n> >     > transactions (and allow the automation of choosing a setting based\n> on\n> >     > who you are transacting with).\n> >     >\n> >     > I see BIP75 as a general modernization of BIP70, so I think it\n> >     should be\n> >     > fine to include these extensions in the new BIP, even though these\n> >     > fields are not specific to the features we are proposing. Please\n> >     take a\n> >     > look at the relevant section and let me know if anyone has any\n> >     concerns:\n> >     >\n> >\n> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails\n> >     >\n> >     > The BIP70 extensions page in our fork has also been updated.\n> >     >\n> >     > Thanks!\n> >     >\n> >     > James\n> >     >\n> >     >\n> >     > _______________________________________________\n> >     > bitcoin-dev mailing list\n> >     > bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     >\n> >\n> >\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> >\n> >\n> > --\n> >\n> > Justin W. Newton\n> > Founder/CEO\n> > Netki, Inc.\n> >\n> > justin at netki.com <mailto:justin at netki.com>\n> > +1.818.261.4248 <tel:+1.818.261.4248>\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160317/240febd4/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP75 - Out of Band Address Exchange",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Justin Newton",
                "James MacWhyte",
                "Andreas Schildbach"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 22676
        }
    },
    {
        "title": "[bitcoin-dev] Proposed release schedule 0.13.0",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2016-03-14T11:18:33",
                "message_text_only": "Proposed release schedule for 0.13.0:\n\n2015-05-01\n-----------\n- Open Transifex translations for 0.13\n- Soft translation string freeze (no large or unnecessary string changes until release)\n- Finalize and close translations for 0.11\n\n2015-05-15\n-----------\n- Feature freeze (bug fixes only until release)\n- Translation string freeze (no more source language changes until release)\n\n2016-06-06\n-----------\n- Split off `0.13` branch from `master`\n- Start RC cycle, tag and release `0.13.0rc1`\n- Start merging for 0.14 on master branch\n\n2016-07-01\n-----------\n- Release 0.13.0 final (aim)"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2016-03-16T11:42:02",
                "message_text_only": "On Mon, Mar 14, 2016 at 12:18:33PM +0100, Wladimir J. van der Laan wrote:\n> Proposed release schedule for 0.13.0:\n> \n> 2015-05-01\n> 2015-05-15\n\nObviously these are 2016, not 2015.\n\nMore active tracking here:\nhttps://github.com/bitcoin/bitcoin/issues/7679\nhttps://github.com/bitcoin/bitcoin/milestones/0.13.0"
            }
        ],
        "thread_summary": {
            "title": "Proposed release schedule 0.13.0",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 891
        }
    },
    {
        "title": "[bitcoin-dev] New Soft Fork Deployment: CSV (BIP's 68, 112, 113)",
        "thread_messages": [
            {
                "author": "Alex Morcos",
                "date": "2016-03-18T19:43:41",
                "message_text_only": "Following on my earlier message\n<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-March/012485.html>,\nI am happy to announce a new soft fork to be deployed using BIP 9\n<https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki> - Version\nbits.\n\nPlease review BIP 9\n<https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki> as it has\nbeen updated for information on how Version bits soft forks activate.\n\nThis deployment is being referred to as CSV (CheckSequenceVerify) and will\nactivate the following 3 BIPS as consensus rules:\nBIP 68 <https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki> -\nRelative lock-time using consensus-enforced sequence numbers\nBIP 112 <https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki> -\nCHECKSEQUENCEVERIFY\nBIP 113 <https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki> -\nMedian time-past as endpoint for lock-time calculations\n\nThese BIP's have been updated with the deployment information:\nbit: 0\nstartTime: 1462060800 \"May 1st, 2016\"   (mainnet)\n           1456790400 \"March 1st, 2016\" (testnet)\nendTime:   1493596800 \"May 1st, 2017\"   (mainnet and testnet)\n\n\nBitcoin Core will release 0.11.3 and 0.12.1 software which implements these\nsoft forks in the near future.\n\n\nThanks,\nAlex\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160318/1286d40a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New Soft Fork Deployment: CSV (BIP's 68, 112, 113)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Alex Morcos"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1453
        }
    },
    {
        "title": "[bitcoin-dev] BIP147 minor error",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-03-21T02:50:55",
                "message_text_only": "The BIP147 reads:\n\n*Sigop cost* is defined. The cost of a sigop in traditional script is 4,\nwhile the cost of a sigop in witness program is 1.\n\nThe new rule is total *sigop cost* \u2264 80,000.\n\nBut the code implements:\nif (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)\n ... error....\n\nWhich is not the same.\n\nFor example:\nnSigOps = 1\nnWitSigOps =79999\n\nIs not an error by BIP definition but it's an error by the implemented code.\n\nRegards, Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160320/74fe80fb/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2016-03-22T06:48:49",
                "message_text_only": "Do you mean BIP141?\n\n \n\nYour example is an error by BIP141:\n\n \n\n1*4 + 79999*1 = 80003 > 80000\n\n \n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Sergio Demian Lerner via bitcoin-dev\nSent: Monday, 21 March, 2016 10:51\nTo: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSubject: [bitcoin-dev] BIP147 minor error\n\n \n\nThe BIP147 reads:\n\nSigop cost is defined. The cost of a sigop in traditional script is 4, while the cost of a sigop in witness program is 1. \n\nThe new rule is total sigop cost \u2264 80,000. \n\nBut the code implements:\n\nif (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)\n\n ... error....\n\nWhich is not the same.\n\n\nFor example:\n\nnSigOps = 1\nnWitSigOps =79999\n\nIs not an error by BIP definition but it's an error by the implemented code.\n\nRegards, Sergio.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160322/5be2f7b5/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-03-22T10:39:51",
                "message_text_only": "My mistake.\nEl mar 22, 2016 3:49 AM, <jl2012 at xbt.hk> escribi\u00f3:\n\n> Do you mean BIP141?\n>\n>\n>\n> Your example is an error by BIP141:\n>\n>\n>\n> 1*4 + 79999*1 = 80003 > 80000\n>\n>\n>\n> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:\n> bitcoin-dev-bounces at lists.linuxfoundation.org] *On Behalf Of *Sergio\n> Demian Lerner via bitcoin-dev\n> *Sent:* Monday, 21 March, 2016 10:51\n> *To:* bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> *Subject:* [bitcoin-dev] BIP147 minor error\n>\n>\n>\n> The BIP147 reads:\n>\n> *Sigop cost* is defined. The cost of a sigop in traditional script is 4,\n> while the cost of a sigop in witness program is 1.\n>\n> The new rule is total *sigop cost* \u2264 80,000.\n>\n> But the code implements:\n>\n> if (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)\n>\n>  ... error....\n>\n> Which is not the same.\n>\n>\n> For example:\n>\n> nSigOps = 1\n> nWitSigOps =79999\n>\n> Is not an error by BIP definition but it's an error by the implemented\n> code.\n>\n> Regards, Sergio.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160322/9d37efef/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP147 minor error",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk",
                "Sergio Demian Lerner"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2847
        }
    },
    {
        "title": "[bitcoin-dev] p2p authentication and encryption BIPs",
        "thread_messages": [
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-23T15:24:12",
                "message_text_only": "Hi\n\nI have just PRed a draft version of two BIPs I recently wrote.\nhttps://github.com/bitcoin/bips/pull/362\n\nTwo BIPs that addresses the problem of decoupling wallets/clients from\nnodes while assuming a user (or a group) know the remote peer.\n\nAuthentication would be necessary to selective allow bloom filtering of\ntransactions, encryption or any other node service that might lead to\nfingerprinting or resource attacks. Authentication would also be a\npre-requirement for certificate free encryption-handshakes that is\n(enough?) resistant to MITM attacks.\n\nEncryption is highly recommended if you connect a SPV node to a trusted\nnode.\n\nAuthentication would allow accessing private p2p extensions from a\nremote SPV peer (example: fee estimation).\n\nI'm aware of other methods to increase privacy and integrity (tor, VPN,\nstunnel, etc.), however I think authentication and a basic communication\nencryption should be part of the protocol and its setup should be\ncomplete hassle-free.\n\nThanks for your feeback.\n\n/jonas\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/0c31649c/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-23T16:44:30",
                "message_text_only": "There is probably not much loss due to per message encryption.  Even if a\nMITM determined that a message was an inv message (or bloom filter\nmessage), it wouldn't be able to extract much information.  Since the\nhashes in those messages are fixed size, there is very little leakage.\n\nYou could make it so that the the encryption messages effectively create a\nsecond data stream and break/weaken the link between message size and\nwrapped message size.  This requires state though, so there is a complexity\ntradeoff.\n\nThere is no real need to include an IV, since you are including a 32 byte\ncontext hash.  The first 16 bytes of the context hash could be used as IV.\n\nIn terms of generating the context hash, it would be easier to make it\nlinear.\n\ncontext_hash_n = SHA256(context_hash_(n-1) | message_(n-1))\n\nAs the session gets longer, both nodes would have to do more and more\nhashing to compute the hash of the entire conversation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/64f754da/attachment.html>"
            },
            {
                "author": "Tom",
                "date": "2016-03-23T20:36:00",
                "message_text_only": "On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:\n> Hi\n> \n> I have just PRed a draft version of two BIPs I recently wrote.\n> https://github.com/bitcoin/bips/pull/362\n\nI suggest running a spellchecker ;)\n\nSome questions;\n\n* why would you not allow encryption on non-pre-approved connections?\n* we just removed (ssl) encryption from the JSON interface, how do you suggest \nthis encryption to be implemented without openSSL?\n* What is the reason for using the p2p code to connect a wallet to a node?\nI suggest using one of the other connection methods to connect to the node. \nThis avoids a change in the bitcoin protocol for a very specific usecase.\n* Why do you want to do a per-message encryption (wrapping the original)? \nSmaller messages that contain predictable content and are able to be matched \nto the unencrypted versions on the wire send to other nodes will open this \nscheme up to various old statistical attacks.\n\n> Responding peers must ignore (banning would lead to fingerprinting) the \nrequesting peer after 5 unsuccessfully authentication tries to avoid resource \nattacks.\n\nAny implementation of that kind would itself again be open to resource \nattacks.\nWhy 5? Do you want to allow a node to make a typo?\n\n\n> To ensure that no message was dropped or blocked, the complete communication \nmust be hashed (sha256). Both peers keep the SHA256 context of the encryption \nsession. The complete <code>enc</code> message (leaving out the hash itself) \nmust be added to the hash-context by both parties. Before sending a \n<code>enc</code> command, the sha256 context will be copied and finalized.\n\nYou write \"the complete communication must be hashed\" and every message has a \nhash of the state until it is at that point.\nI think you need to explain how that works specifically."
            },
            {
                "author": "Eric Voskuil",
                "date": "2016-03-23T21:40:50",
                "message_text_only": "On 03/23/2016 01:36 PM, Tom via bitcoin-dev wrote:\n> On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:\n> * why would you not allow encryption on non-pre-approved connections?\n\nAgree\n\n> * we just removed (ssl) encryption from the JSON interface, how do you suggest \n> this encryption to be implemented without openSSL?\n\nCurveCP\n\n> * What is the reason for using the p2p code to connect a wallet to a node?\n> I suggest using one of the other connection methods to connect to the node. \n> This avoids a change in the bitcoin protocol for a very specific usecase.\n\nAgree, P2P and client-server protocols are distinct use-cases. Missing\nthis distinction is the root cause of problems with the bloom filters\nfeature.\n\n> * Why do you want to do a per-message encryption (wrapping the original)? \n> Smaller messages that contain predictable content and are able to be matched \n> to the unencrypted versions on the wire send to other nodes will open this \n> scheme up to various old statistical attacks.\n\nPrivacy cannot currently be achieved unless the server is trusted. In\nmost wallet scenarios that's not a reasonable assumption unless one\ncontrols the full node. So this is only useful in the case where the\nwallet is trusting a remote server, and as you point out - message\nencryption is weak in this case. In a trustless server scenario\nencryption would be unnecessary overhead.\n\n>> Responding peers must ignore (banning would lead to fingerprinting) the \n> requesting peer after 5 unsuccessfully authentication tries to avoid resource \n> attacks.\n> \n> Any implementation of that kind would itself again be open to resource \n> attacks.\n> Why 5? Do you want to allow a node to make a typo?\n\nAgree, denial of service protection can and should be much more flexible\nthan this. It's not necessary to incorporate DoS protection into a\nprotocol. I think maybe this stems from the ill-advised attempt at\nmessaging reliability.\n\n>> To ensure that no message was dropped or blocked, the complete communication \n> must be hashed (sha256). Both peers keep the SHA256 context of the encryption \n> session. The complete <code>enc</code> message (leaving out the hash itself) \n> must be added to the hash-context by both parties. Before sending a \n> <code>enc</code> command, the sha256 context will be copied and finalized.\n> \n> You write \"the complete communication must be hashed\" and every message has a \n> hash of the state until it is at that point.\n> I think you need to explain how that works specifically.\n\nAlso, this gets into the area of messaging reliability. This is\ncertainly not something I would recommend for a P2P protocol optimized\nfor maintaining a cache of public data.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/344d0bae/attachment.sig>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-23T21:55:34",
                "message_text_only": ">> I have just PRed a draft version of two BIPs I recently wrote.\n>> https://github.com/bitcoin/bips/pull/362\n> \n> I suggest running a spellchecker ;)\n\nThanks. Will do.\n\n\n> * why would you not allow encryption on non-pre-approved connections?\n\nThe encryption should be optional.\nThe proposed authentication scheme does take care of the\nidentity-management and therefor prevent MITM attacks.\nWithout the identity management, you might not detect sending/receiving\nencrypted data from/to a MITM.\n\n> * we just removed (ssl) encryption from the JSON interface, how do you suggest \n> this encryption to be implemented without openSSL?\n\nThe proposed encryption schema is based on ECDSA/ECDH (implemented in\nlibsecp256k1) and AES256CBC (implementation is on the way see\nhttps://github.com/bitcoin/bitcoin/pull/7689).\nOpenSSL is not required.\n\n> * What is the reason for using the p2p code to connect a wallet to a node?\n> I suggest using one of the other connection methods to connect to the node. \n> This avoids a change in the bitcoin protocol for a very specific usecase.\n\nMost known use-case: SPV.\n\n> * Why do you want to do a per-message encryption (wrapping the original)? \n> Smaller messages that contain predictable content and are able to be matched \n> to the unencrypted versions on the wire send to other nodes will open this \n> scheme up to various old statistical attacks.\n\nIt's probably extremely inefficient to create a constant time stream.\nEven most SSL/SSH application leak information because of the\ncommunication message characteristics.\n\nThe current wrapping message proposal is not very efficient.\nI will change it so that the p2p message header will contain the\nencryption metadata. This should lead to a tiny overhead.\n\n\n> \n>> Responding peers must ignore (banning would lead to fingerprinting) the \n> requesting peer after 5 unsuccessfully authentication tries to avoid resource \n> attacks.\n> \n> Any implementation of that kind would itself again be open to resource \n> attacks.\n> Why 5? Do you want to allow a node to make a typo?\n\nGood point. Maybe one false try should lead to ignoring the peer.\n\n> \n> \n>> To ensure that no message was dropped or blocked, the complete communication \n> must be hashed (sha256). Both peers keep the SHA256 context of the encryption \n> session. The complete <code>enc</code> message (leaving out the hash itself) \n> must be added to the hash-context by both parties. Before sending a \n> <code>enc</code> command, the sha256 context will be copied and finalized.\n> \n> You write \"the complete communication must be hashed\" and every message has a \n> hash of the state until it is at that point.\n> I think you need to explain how that works specifically.\n\nThis is a relative simple concept and does not require rehashing the\nwhole communication. You just append the \"new data\".\n\nSome pseudocode:\n\nSHA256CTX ctx;\n\n// first com\nSHA256CTX_Update(ctx, 1stmessage);\n\n// copy context\nSHA256CTX ctxnew = ctx;\n\n// finalize the copied context\nsha256hash = SHA256CTX_Finalize(ctxnew); //use as checksum hash\n\n\n//////// next message\nSHA256CTX_Update(ctx, 2ndmessage);\n\n// copy context\nSHA256CTX ctxnew = ctx;\n\n// finalize the copied context\nsha256hash = SHA256CTX_Finalize(ctxnew); //use as checksum hash\n\n... etc.\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/3dd53763/attachment-0001.sig>"
            },
            {
                "author": "Tom",
                "date": "2016-03-25T10:36:28",
                "message_text_only": "On Wednesday 23 Mar 2016 22:55:34 Jonas Schnelli via bitcoin-dev wrote:\n> >> I have just PRed a draft version of two BIPs I recently wrote.\n> > * why would you not allow encryption on non-pre-approved connections?\n> \n> The encryption should be optional.\n> The proposed authentication scheme does take care of the\n> identity-management and therefor prevent MITM attacks.\n> Without the identity management, you might not detect sending/receiving\n> encrypted data from/to a MITM.\n\nIf you want to extend the Bitcoin protocol itself, you will have to resolve \nthat. Which many other solutions do (ssh for instance).\n\nIt would not be Ok to have an peer-to-peer encryption system that doesn't \nallow non-pre-approved connections.\n\n> > * What is the reason for using the p2p code to connect a wallet to a node?\n> > I suggest using one of the other connection methods to connect to the\n> > node.\n> > This avoids a change in the bitcoin protocol for a very specific usecase.\n> \n> Most known use-case: SPV.\n\nYou didn't answer the question.\n\n> > * Why do you want to do a per-message encryption (wrapping the original)?\n> > Smaller messages that contain predictable content and are able to be\n> > matched to the unencrypted versions on the wire send to other nodes will\n> > open this scheme up to various old statistical attacks.\n> \n> It's probably extremely inefficient to create a constant time stream.\n\nYour use of \"probably\" makes me wonder if you already have an implementation. \nDoing any encryption and handshaking design *without* actually having it coded \nand gone though testing yet makes no sense.\nI do not belief Bitcoin will benefit from \"design by committee\" where a \nspecification is drawn before an implementation is written.\n\nAlso, you didn't actually address the attack-vector.\n\n \n> >> Responding peers must ignore (banning would lead to fingerprinting) the\n> > \n> > requesting peer after 5 unsuccessfully authentication tries to avoid\n> > resource attacks.\n> > \n> > Any implementation of that kind would itself again be open to resource\n> > attacks.\n> > Why 5? Do you want to allow a node to make a typo?\n> \n> Good point. Maybe one false try should lead to ignoring the peer.\n\nThat doesn't take away the resource attack at all.\n\n \n> >> To ensure that no message was dropped or blocked, the complete\n> >> communication> \n> > must be hashed (sha256). Both peers keep the SHA256 context of the\n> > encryption session. The complete <code>enc</code> message (leaving out\n> > the hash itself) must be added to the hash-context by both parties.\n> > Before sending a <code>enc</code> command, the sha256 context will be\n> > copied and finalized.\n> > \n> > You write \"the complete communication must be hashed\" and every message\n> > has a hash of the state until it is at that point.\n> > I think you need to explain how that works specifically.\n> \n> This is a relative simple concept and does not require rehashing the\n> whole communication. \n\nApologies, I should have been more clear; the BIP should specify the actual \nalgorithm, otherwise you can't create an implementation from just reading the \nBIP.\n\nAlso, this may be a good time to ask why you want to have a per-message \nencryption?\nPractically every single popular end-to-end encryption uses one approach or \nanother were it just encrypts as another layer. (the  L in ssl). You are \nmixing layers, and unless you do that for a very good reason, or have a very \ngood reason why everyone else is doing it wrong, I suggest using a layered \nencryption approach."
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-25T18:43:00",
                "message_text_only": "Hi Tom\n\n>> The encryption should be optional.\n>> The proposed authentication scheme does take care of the\n>> identity-management and therefor prevent MITM attacks.\n>> Without the identity management, you might not detect sending/receiving\n>> encrypted data from/to a MITM.\n> \n> If you want to extend the Bitcoin protocol itself, you will have to resolve \n> that. Which many other solutions do (ssh for instance).\n\nPlease check the newest auth BIP (it solves MITM).\n\nThe encryption BIP itself does not cover peer authentication.\nEncryption without authentication of peers can also be valuable.\n\n\n>>> * What is the reason for using the p2p code to connect a wallet to a node?\n>>> I suggest using one of the other connection methods to connect to the\n>>> node.\n>>> This avoids a change in the bitcoin protocol for a very specific usecase.\n>>\n>> Most known use-case: SPV.\n> \n> You didn't answer the question.\n\nI hope you see the today's problem with SPV.\nYou fully reveal to your ISP / WiFi provider most of your wallet\ncontrolled addresses (when using BF). The ISP/WiFi provider can link\nyour bitcoin usage to other inet traffic and/or they could sell\ninformation to statistics company like google.\n\nAlso, an attacker controlling a WiFi router or any other network peer\nbetween your SPV node and the remote full node could censorship\ntransactions.\n\nEtc. etc.\n\nAn encrypted channel together with a trusted full node would finally\nallow to have a secure and save SPV communication.\n\n\n>>> * Why do you want to do a per-message encryption (wrapping the original)?\n>>> Smaller messages that contain predictable content and are able to be\n>>> matched to the unencrypted versions on the wire send to other nodes will\n>>> open this scheme up to various old statistical attacks.\n>>\n>> It's probably extremely inefficient to create a constant time stream.\n> \n> Your use of \"probably\" makes me wonder if you already have an implementation. \n> Doing any encryption and handshaking design *without* actually having it coded \n> and gone though testing yet makes no sense.\n> I do not belief Bitcoin will benefit from \"design by committee\" where a \n> specification is drawn before an implementation is written.\n> \n> Also, you didn't actually address the attack-vector.\n\nWhich attack-vector? MITM? Is conceptual solved with the auth BIP (that\nrequires encryption).\n\nThere is no implementation done yet.\nIt would be a waste of time to start writing a such implementation\n_before_ having this discusses and improved by the community.\n\nBut the encryption BIP now recommends Chacha20-Polay1305 as AEAD which\nis widely used.\n\nI'm ready to write an implementation as soon as I have some signs that\nthe BIP does make sense.\n\nAlso, auth and enc is not something we will have in the next couple of\nweeks. This might require a couple of months until its stable and ready\nfor production.\n\n> \n>  \n>>>> Responding peers must ignore (banning would lead to fingerprinting) the\n>>>\n>>> requesting peer after 5 unsuccessfully authentication tries to avoid\n>>> resource attacks.\n>>>\n>>> Any implementation of that kind would itself again be open to resource\n>>> attacks.\n>>> Why 5? Do you want to allow a node to make a typo?\n>>\n>> Good point. Maybe one false try should lead to ignoring the peer.\n> \n> That doesn't take away the resource attack at all.\n> \n>  \n>>>> To ensure that no message was dropped or blocked, the complete\n>>>> communication> \n>>> must be hashed (sha256). Both peers keep the SHA256 context of the\n>>> encryption session. The complete <code>enc</code> message (leaving out\n>>> the hash itself) must be added to the hash-context by both parties.\n>>> Before sending a <code>enc</code> command, the sha256 context will be\n>>> copied and finalized.\n>>>\n>>> You write \"the complete communication must be hashed\" and every message\n>>> has a hash of the state until it is at that point.\n>>> I think you need to explain how that works specifically.\n>>\n>> This is a relative simple concept and does not require rehashing the\n>> whole communication. \n> \n> Apologies, I should have been more clear; the BIP should specify the actual \n> algorithm, otherwise you can't create an implementation from just reading the \n> BIP.\n\nThe sha256 context is gone now and replaced by a proper MAC.\n\n> \n> Also, this may be a good time to ask why you want to have a per-message \n> encryption?\n> Practically every single popular end-to-end encryption uses one approach or \n> another were it just encrypts as another layer. (the  L in ssl). You are \n> mixing layers, and unless you do that for a very good reason, or have a very \n> good reason why everyone else is doing it wrong, I suggest using a layered \n> encryption approach.\n\nLike most other encryption layers, we would still use messages. But we\ncall them \"encrypted messages\", the have a tiny header of plaintext data\n(message length, AEAD-tag) and they will contain <n> plaintext p2p\nmessages _after_ decrypting. The plaintext messages have a much simpler\nheader (removed the 4 bytes sha256 checksum, removed the 4byte network)\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/438b2e1f/attachment-0001.sig>"
            },
            {
                "author": "Tom",
                "date": "2016-03-25T20:42:08",
                "message_text_only": "On Friday 25 Mar 2016 19:43:00 Jonas Schnelli via bitcoin-dev wrote:\n> An encrypted channel together with a trusted full node would finally\n> allow to have a secure and save SPV communication.\n\nI guess my question didn't get across. \n\nWhy would you want to make your usecase do connections over the peer2peer \n(net.cpp) connection at all?\n\nMixing messages that are being sent to everyone and encrypted messages is \nasking for trouble.\nMaking your private connection out-of-band would work much better.\n\n> > Also, you didn't actually address the attack-vector.\n> \n> Which attack-vector?\n\nThe statistical attack I mentioned earlier.  Which comes from knowing which \nplain text messages are being sent over the encrypted channel, So as long as \nyou keep saying you want to encrypt data that identical copies of are being \nsent to other nodes at practically the same time, you will keep being \nvulnerable to that."
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-26T09:01:36",
                "message_text_only": "> I guess my question didn't get across. \n> \n> Why would you want to make your usecase do connections over the peer2peer \n> (net.cpp) connection at all?\n\nFirst, because there _are_ a hight amount of SPV wallets in the field.\nSPV wallets are \"dumb-clients\" with only a tiny value for the bitcoin\nnetwork (they don't validate, they don't relay). They already are\ndecoupled wallets. We need solution that offers higher privacy and\nhigher traffic analysis resistance.\n\nUsing the p2p channel for communication between full validation peers\nand wallet-only-peers makes sense IMO because wallet-only-peers can\nslowly validate the chain and create a UTXO set in the background (could\ntake a couple of weeks) or solve other purposes that increases the\nsecurity and/or serving something back to the bitcoin network.\n\nSure, you can always use client/server wallets (Coinbase / Copay, etc.)\nthat offers SSL.\nBut I strongly recommend to improve the communication and interface\npossibilities between wallet-nodes (SPV) and full-validation-nodes.\n\nOtherwise we will very likely see centralization regarding end-user\nwallets (with all the large risks of disrupting the community in case of\nattacks/thefts, etc.).\n\n_If we think Bitcoin should scale, we also need to scale and improve at\nthe point where users enter the network and start using Bitcoin._\n\n> Mixing messages that are being sent to everyone and encrypted messages is \n> asking for trouble.\n> Making your private connection out-of-band would work much better.\n\nThe current encryption BIP requires to encrypt the complete traffic.\nHaving an option to do analysis resistant communication with a remote\npeer within the protocol itself is something that is very valuable IMO.\n\n\n>>> Also, you didn't actually address the attack-vector.\n>>\n>> Which attack-vector?\n> \n> The statistical attack I mentioned earlier.  Which comes from knowing which \n> plain text messages are being sent over the encrypted channel, So as long as \n> you keep saying you want to encrypt data that identical copies of are being \n> sent to other nodes at practically the same time, you will keep being \n> vulnerable to that.\n\nThe encryption BIP recommends Chacha20-Poly1305 as encryption AEAD. This\nis a very broad used encryption scheme (Google uses it to connect\nAndroid phones with their cloud services).\n\nCompletely avoiding side channel on data analysis would probably require\nextremely inefficient constant time encrypted datastreams.\n\nAlso, the BIP allows combining of multiple plaintext message in one\nencrypted message.\n\nAdditionally we could extend the enc. BIP by allowing random padding of\nencrypted messages or other techniques to reduce side channel analysis.\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160326/6b17032b/attachment.sig>"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-26T23:23:54",
                "message_text_only": "On Sat, Mar 26, 2016 at 1:34 AM Tom via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Friday 25 Mar 2016 19:43:00 Jonas Schnelli via bitcoin-dev wrote:\n> > An encrypted channel together with a trusted full node would finally\n> > allow to have a secure and save SPV communication.\n>\n> I guess my question didn't get across.\n>\n> Why would you want to make your usecase do connections over the peer2peer\n> (net.cpp) connection at all?\n>\n> Mixing messages that are being sent to everyone and encrypted messages is\n> asking for trouble.\n> Making your private connection out-of-band would work much better.\n>\n>\nI agree doing it out-of-band is the easiest solution for people who need\nthis privacy right now, but I do like the idea of adding this feature as\nthe number of SPV wallets is going to increase. I think the best way to\norganize things would be to give encrypted messages their own port number,\nsimilar to how http vs. https works.\n\nWe don't want two networks to develop, separated by which nodes support\nencryption and which don't, so ideally nodes would rebroadcast messages\nthey receive on both (encrypted and non-encrypted) channels. This would\nessentially double the required bandwidth of the network, which is\nsomething to think about.\n\n\n> > > Also, you didn't actually address the attack-vector.\n> >\n> > Which attack-vector?\n>\n> The statistical attack I mentioned earlier.  Which comes from knowing which\n> plain text messages are being sent over the encrypted channel, So as long\n> as\n> you keep saying you want to encrypt data that identical copies of are being\n> sent to other nodes at practically the same time, you will keep being\n> vulnerable to that.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160326/e2a0f1f0/attachment.html>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-27T11:58:11",
                "message_text_only": ">     I guess my question didn't get across.\n> \n>     Why would you want to make your usecase do connections over the\n>     peer2peer\n>     (net.cpp) connection at all?\n> \n>     Mixing messages that are being sent to everyone and encrypted\n>     messages is\n>     asking for trouble.\n>     Making your private connection out-of-band would work much better.\n> \n> \n> I agree doing it out-of-band is the easiest solution for people who need\n> this privacy right now, but I do like the idea of adding this feature as\n> the number of SPV wallets is going to increase. I think the best way to\n> organize things would be to give encrypted messages their own port\n> number, similar to how http vs. https works.\n\nI'm not sure if different ports would make sense. I can't see a benefit\n(happy if someone can convince me).\nHow would this affect p2p address management (address relay)? Wouldn't\nthis require to extend the current address message to support two port\nnumbers?\n\n\n> We don't want two networks to develop, separated by which nodes support\n> encryption and which don't, so ideally nodes would rebroadcast messages\n> they receive on both (encrypted and non-encrypted) channels. This would\n> essentially double the required bandwidth of the network, which is\n> something to think about.\n\nIt can be the same \"p2p network\". The only difference would be, that\nonce two peers has negotiated encryption, the whole traffic between\n_these two peers_, and _only_ these two pears, would be encrypted (would\n_not_ affect traffic to/from other peers).\n\nA simplified example:\n1. Peer Alice connects to peer Bob\n2. Alice asks Bob: \"lets do encrypted communication, here is my session\npubkey\"\n3. Bob also supports encryption and answers \"Yes, let's do this, here is\nmy session pubkey\"\n4. Alice tells Bob (encrypted now): \"Perfect. Here I prove that I'm\nAlice by signing the session ID with my identity pubkey\"\n5. Bob checks his \"authorized-peers\" database and look-up Alices pubkey\nand verifies the signatures.\n6. Bob tells Alice: \"Good! I trust you now Alice, here is my identity\npubkey with a signature of our session-ID\"\n7. Alice looks up Bobs pubkey in her \"known-peers\" database and verifies\nthe signature.\n8. Alice response to bob: \"Perfect. Indeed, you are Bob!\"\n---\nAt this point, the communication is encrypted and the identities has\nbeen verified (MITM protection).\n\n\n(simplified negotiation [only one-way, missing dh explanation, missing\nKDF, session-ID, cipher suite nego., missing re-keying, etc.])\n\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160327/0d52fd3e/attachment.sig>"
            },
            {
                "author": "James MacWhyte",
                "date": "2016-03-27T17:04:30",
                "message_text_only": "On Sun, Mar 27, 2016 at 5:49 AM Jonas Schnelli via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> >     I guess my question didn't get across.\n> >\n> >     Why would you want to make your usecase do connections over the\n> >     peer2peer\n> >     (net.cpp) connection at all?\n> >\n> >     Mixing messages that are being sent to everyone and encrypted\n> >     messages is\n> >     asking for trouble.\n> >     Making your private connection out-of-band would work much better.\n> >\n> >\n> > I agree doing it out-of-band is the easiest solution for people who need\n> > this privacy right now, but I do like the idea of adding this feature as\n> > the number of SPV wallets is going to increase. I think the best way to\n> > organize things would be to give encrypted messages their own port\n> > number, similar to how http vs. https works.\n>\n> I'm not sure if different ports would make sense. I can't see a benefit\n> (happy if someone can convince me).\n> How would this affect p2p address management (address relay)? Wouldn't\n> this require to extend the current address message to support two port\n> numbers?\n>\n> I'm assuming clients that connect with encryption don't want to use\nunencrypted connections, and are only interested in other peers that\nsupport encryption. From their perspective, it is quite inefficient to get\na generic list of peers and then have to connect to each one searching for\nthose that accept encryption. If we use port numbers, we can assume any\nconnection that comes on the encrypted port is only interested in encrypted\ncommunication, so a getaddr to an encrypted port would only return a list\nof other encryption-capable peers.\n\nThis isn't an issue if the plan is to require all peers to support\nencryption, and we assume the majority of the network will upgrade before\ntoo long.\n\n\n>\n> > We don't want two networks to develop, separated by which nodes support\n> > encryption and which don't, so ideally nodes would rebroadcast messages\n> > they receive on both (encrypted and non-encrypted) channels. This would\n> > essentially double the required bandwidth of the network, which is\n> > something to think about.\n>\n> It can be the same \"p2p network\". The only difference would be, that\n> once two peers has negotiated encryption, the whole traffic between\n> _these two peers_, and _only_ these two pears, would be encrypted (would\n> _not_ affect traffic to/from other peers).\n>\n>\nYou're right, there would not be an increase in bandwidth. Please forget I\nsaid that :) But following the logic I wrote above, it would be possible\nfor peers to become segregated (those who require encryption would only\nconnect to each other). It wouldn't be a problem as long as there are\nenough peers that provide both encrypted and non-encrypted connections; or,\nas I said above, if we can assume every peer will support it. Maybe the\nissues I'm thinking of are just growing pains that will be solved once the\nmajority of people upgrade?\n\n\n> A simplified example:\n> 1. Peer Alice connects to peer Bob\n> 2. Alice asks Bob: \"lets do encrypted communication, here is my session\n> pubkey\"\n> 3. Bob also supports encryption and answers \"Yes, let's do this, here is\n> my session pubkey\"\n> 4. Alice tells Bob (encrypted now): \"Perfect. Here I prove that I'm\n> Alice by signing the session ID with my identity pubkey\"\n> 5. Bob checks his \"authorized-peers\" database and look-up Alices pubkey\n> and verifies the signatures.\n> 6. Bob tells Alice: \"Good! I trust you now Alice, here is my identity\n> pubkey with a signature of our session-ID\"\n> 7. Alice looks up Bobs pubkey in her \"known-peers\" database and verifies\n> the signature.\n> 8. Alice response to bob: \"Perfect. Indeed, you are Bob!\"\n> ---\n> At this point, the communication is encrypted and the identities has\n> been verified (MITM protection).\n>\n>\n> (simplified negotiation [only one-way, missing dh explanation, missing\n> KDF, session-ID, cipher suite nego., missing re-keying, etc.])\n>\n>\n> </jonas>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160327/30bc800e/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2016-03-24T00:37:25",
                "message_text_only": "It seems that every message must be signed (the protocols lacks MACs). This\ncan be very resource consuming in terms of CPU and bandwidth since most p2p\nmessages are small.\n\n\nOn Wed, Mar 23, 2016 at 5:36 PM, Tom via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:\n> > Hi\n> >\n> > I have just PRed a draft version of two BIPs I recently wrote.\n> > https://github.com/bitcoin/bips/pull/362\n>\n> I suggest running a spellchecker ;)\n>\n> Some questions;\n>\n> * why would you not allow encryption on non-pre-approved connections?\n> * we just removed (ssl) encryption from the JSON interface, how do you\n> suggest\n> this encryption to be implemented without openSSL?\n> * What is the reason for using the p2p code to connect a wallet to a node?\n> I suggest using one of the other connection methods to connect to the node.\n> This avoids a change in the bitcoin protocol for a very specific usecase.\n> * Why do you want to do a per-message encryption (wrapping the original)?\n> Smaller messages that contain predictable content and are able to be\n> matched\n> to the unencrypted versions on the wire send to other nodes will open this\n> scheme up to various old statistical attacks.\n>\n> > Responding peers must ignore (banning would lead to fingerprinting) the\n> requesting peer after 5 unsuccessfully authentication tries to avoid\n> resource\n> attacks.\n>\n> Any implementation of that kind would itself again be open to resource\n> attacks.\n> Why 5? Do you want to allow a node to make a typo?\n>\n>\n> > To ensure that no message was dropped or blocked, the complete\n> communication\n> must be hashed (sha256). Both peers keep the SHA256 context of the\n> encryption\n> session. The complete <code>enc</code> message (leaving out the hash\n> itself)\n> must be added to the hash-context by both parties. Before sending a\n> <code>enc</code> command, the sha256 context will be copied and finalized.\n>\n> You write \"the complete communication must be hashed\" and every message\n> has a\n> hash of the state until it is at that point.\n> I think you need to explain how that works specifically.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/adfd13d4/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2016-03-24T02:16:55",
                "message_text_only": "On Wednesday, March 23, 2016 3:24:12 PM Jonas Schnelli via bitcoin-dev wrote:\n> I have just PRed a draft version of two BIPs I recently wrote.\n> https://github.com/bitcoin/bips/pull/362\n\nIn the future, please submit BIP drafts to the mailing list for comment and \ninitial peer review before opening a pull request (or requesting a BIP number \nassignment), per BIP 1.\n\n> Each peer that supports p2p authentication, must provide two user editable\n> databases (can be a simple record-per-line file).\n\nAs long as the format of these databases is not standardised, it seems \ninappropriate to define *any* of this implementation detail in a BIP.\n\n> A peer can send an authenticate message by wrapping the desired message into\n> an <code>auth</code>-message-wrapper to the remote peer.\n\nHow does a peer know what messages the other peer requires to be \nauthenticated?\n\n> 33bytes || identity-pubkey || comp.-pubkey || The identity pubkey of the\n> requesting peer\n\nSeems a waste to include this with every single [authenticated] message...\n\n> 8bytes || auth-msg-id || int64 || up-counting auth-msg-id (0 to INT64MAX)\n\nIs this required to persist across connections/restarts/possibly complete \nreinstalls?\n\nCan the same auth-msg-id be used for multiple peers, so a message can be \nsigned once and sent to all N peers?\n\n> Responding peers must ignore (banning would lead to fingerprinting) the\n> requesting peer after 5 unsuccessfully authentication tries to avoid\n> resource attacks.\n\nHow does banning in this specific case enable fingerprinting as opposed to any \nother banning?\n\n> The peers should display the identity-pubkey as a identity-address to the\n> users, which is a base58-check encoded ripemd160(sha256) hash.\n\nIf this is going to become a general-purpose identity system, I think more is \nneeded than a simple EC keypair. At the very least, it should probably use a \nHD chain and use a new key for every signature (notice you already have auth-\nmsg-id to use with this!).\n\n> This proposal is backward compatible. Non supporting peers will ignore the\n> <code>auth</code> message.\n\n... and not process it at all? How is that backward compatible?\n\n> Encrypting traffic between peers is already possible with VPN, tor, stunnel,\n> curveCP or any other encryption mechanism on a deeper OSI level, however, \n> most mechanism are not practical for SPV or other DHCP/NAT environment and\n> will require significant knowhow in how to setup a secure channel.\n\nI don't see how Tor fails this criteria...\n\n> The responding peer will set a session timeout time-interval. The default\n> must be 1'800 seconds.\n\nWhat default? Is the timeout field optional? Why not simply require it?\n\n> This proposal is backward compatible. Non supporting peers will ignore the\n> <code>enc*</code> messages.\n\nHow should the supporting peer handle the message being ignored?\n\nLuke"
            },
            {
                "author": "Chris",
                "date": "2016-03-24T17:20:48",
                "message_text_only": "Thanks for doing some work on this Jonas. It's something I've been\ninterested in for a while. I haven't had an opportunity to read the bips\nbut I will do so soon and comment.\n\nAs far as the use cases others mentioned, connecting and SPV wallet to\nyour full node is certainly one. It would make it easy to, say, connect\nthe android bitcoin-wallet to your own node. I've hacked on that wallet\nto make it connect to my .onion node, but it's very slow border-line\nunusable. Basic encryption and authentication would make that viable.\n\nAlso, while bloom filtering in bitcoinj is broken, it could be fixed by\njust creating a single filter and filling it with 1000 addresses and\npersisting it to disk. The main issue is you can't restore from seed\nthat way and would have to revert to what bitcoinj does now and blow\nyour privacy. If you had the ability to make an encrypted connection to\na trusted node just for restoring from seed, you could save your privacy\nduring a restore.\n\nOn 03/23/2016 11:24 AM, Jonas Schnelli via bitcoin-dev wrote:\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160324/d7789436/attachment.html>"
            },
            {
                "author": "Tom",
                "date": "2016-03-25T10:41:04",
                "message_text_only": "On Thursday 24 Mar 2016 13:20:48 Chris via bitcoin-dev wrote:\n> As far as the use cases others mentioned, connecting and SPV wallet to\n> your full node is certainly one. It would make it easy to, say, connect\n> the android bitcoin-wallet to your own node. I've hacked on that wallet\n> to make it connect to my .onion node, but it's very slow border-line\n> unusable. Basic encryption and authentication would make that viable.\n\nWhat about using some interface, much like the JSON one (but more likely the \nzeroMQ one) instead? Would that not solve the problem?\n\nI'm thinking that would not be a replacement for a full-node-connection but in \naddition.\n\nWhich means that some questions can be asked over that channel that you need \nauthentication for. It would be a much better separation of concerns."
            },
            {
                "author": "Lee Clagett",
                "date": "2016-03-25T07:17:29",
                "message_text_only": "On Wed, 23 Mar 2016 16:24:12 +0100\nJonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrote:\n> Hi\n> \n> I have just PRed a draft version of two BIPs I recently wrote.\n> https://github.com/bitcoin/bips/pull/362\n> \n> Two BIPs that addresses the problem of decoupling wallets/clients from\n> nodes while assuming a user (or a group) know the remote peer.\n> \n> Authentication would be necessary to selective allow bloom filtering\n> of transactions, encryption or any other node service that might lead\n> to fingerprinting or resource attacks. Authentication would also be a\n> pre-requirement for certificate free encryption-handshakes that is\n> (enough?) resistant to MITM attacks.\n> \n> Encryption is highly recommended if you connect a SPV node to a\n> trusted node.\n> \n> Authentication would allow accessing private p2p extensions from a\n> remote SPV peer (example: fee estimation).\n> \n> I'm aware of other methods to increase privacy and integrity (tor,\n> VPN, stunnel, etc.), however I think authentication and a basic\n> communication encryption should be part of the protocol and its setup\n> should be complete hassle-free.\n> \n> Thanks for your feeback.\n> \n> /jonas\n> \n\n- The motivation sections seem weak. Why not use SSH? It would have\n  similar setup requirements, and is already a deployed solution. If\n  there are additional setup simplicities (compared to SSH),\n  consider listing them. And if one of the motivating factors is\n  complexity reduction from the various \"do everything you could\n  possible want\" protocols/implementations, then add this to the\n  motivation.\n- ECDSA and \"ec pubkey\" are mentioned, but not the specific curve.\n- The hash algorithm for ECDSA is not explicitly mentioned.\n- There is no way to change the cryptographic primitives being used or\n  to update to a new protocol version. Would it be done with a new\n  message type `auth2` ... ?\n- The following seems to be contradictory:\n\n> If the responding peer could not lookup the requesting peer's\n> identity-pubkey in the local authorized-peers database or if the\n> responding peer could not verify the signature, the requested auth\n> message must be ignored to avoid fingerprinting of peers with\n> authentication support.\n>\n> Responding peers must ignore (banning would lead to fingerprinting)\n> the requesting peer after 5 unsuccessfully authentication tries to\n> avoid resource attacks.\n\n  If I connect to a peer, send 5 auth messages followed by another type\n  of message that gets no response, this could indicate auth support.\n  Or is this supposed to say ignore further auth messages, but not\n  other types of messages? The wording seems to suggest an ignore-all.\n- The pubkey from the requester is sent in cleartext, which can be used\n  as an identifier across connections (similar to a MAC, except it can\n  be seen across every network hop and correlated across connection\n  types). Hiding this will likely require encryption, and the protocol\n  will start to look similar to CurveCP. If the additional complexity\n  is not worth fixing this issue, a section in the encryption BIP\n  should be added to explain the identifier leakage.\n- The known-peers has an IP and port section. Should the requester limit\n  signatures based on this information? This algorithm or process needs\n  to be better defined than the vague paragraph about verifying the\n  integrity of the remote peer; if an implementation uses the\n  any-one-of server approach the known-peers file becomes more like a\n  SSL CA list, which does not seem like the intent. However, the example\n  at the bottom says \"Requesting peer does a lookup of (F) in\n  known-peers database (B)\".\n- The encryption portion does not mention the pubkey pairs in use for\n  ECDH (this needs to be described), so I am assuming the pairs from\n  authentication are re-used. This increases the chances of data\n  exposure since a single botched k selection (re-use) for ECDSA would\n  allow for forged authentications, and the decryption of all\n  historical data. Adding a temporary key exchange would add slight\n  complexity and one RTT from the requesters perspective, but it\n  provides forward-secrecy and protection against ECDSA implementation\n  failures.\n- Can the responding peer set a different cipher in the `ecinit`\n  response, or should/must it be the same?\n- What happens if the responding peer does not support the cipher?\n  Presumably, a rejection?\n- The contents of the IV field are unspecified, and should be\n  specified to contain new output from a CSPRNG for each message.\n- Should `enc` messages be wrapped in `auth` messages (presumably so\n  since there is no MAC)? `encinit` have this restriction, but nothing\n  is specified for `enc`.\n- Is the context hash unique in each direction? There seems to be one,\n  which would be racy - what if the client wanted to pipeline messages?\n  Or is the intent a single open request/response style? I think this\n  _adds_ a restriction to the Bitcoin protocol.\n- Instead of a hash, what about a counter in each direction for the\n  `enc` stream? The auth portion verifies integrity, authenticity, and\n  completeness of each message (including this counter). Missing\n  messages (through TCP injection?) would still detected. Using TCP\n  injection to forcefully teardown a connection is possible in both\n  designs.\n\nLee"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2016-03-25T10:17:10",
                "message_text_only": "> I have just PRed a draft version of two BIPs I recently wrote.\n> https://github.com/bitcoin/bips/pull/362\n\nThanks for the feedback and IRC discussions.\n\nI have overhauled both BIPs.\nhttps://github.com/bitcoin/bips/pull/362/files#diff\n\nMain changes for the encryption BIP:\n* No message wrapping. Once encryption is established, everything is\nencrypted. No timeout.\n* Added MAC: proposed AEAD is now ChaCha20-Poly1305 with an alternative\nfor AES256-GCH\n* Independent ECDH negotiation and independent secrets for the symmetric\ncipher for both communication directions\n* Optimized message format and message-batch-option for encrypted data\n\nIt could be that the p2p performance for Chacha20-poly1305 encrypted\nmessage is slightly better then the current plaintext message format\n(dropping the network magic and the sha256 per message).\n\nP2p authentication BIP:\n* No message wrapping. Peers keep the state once authenticated.\n* Simplified and auth now requires encrypted channels.\n\n\nSome answers...\n\n> How does a peer know what messages the other peer requires to be\nauthenticated?\n\nThis is not covered by the auth BIP. Peers could agree on a protocol\nextension outside of any BIP.\nOnce auth is possible, new BIPs could be written. Things like only\nallowing filtering (or other services) to authenticated peers (and\ndisabling NODE_BLOOM).\n\n> How does banning in this specific case enable fingerprinting as\nopposed to any other banning?\n\nCurrent nodes ignore a unknown message with a command like \"auth\".\nBanning would allow a requesting peer to identify nodes that support\nauth and attack them over different channels (\"ah, ... this guy supports\nauth, they must have some secret data, lets attack over SSH).\n\n>> This proposal is backward compatible. Non supporting peers will\nignore the <code>auth</code> message.\n> ... and not process it at all? How is that backward compatible?\n\nDepends how we define backward compatibility. :-)\nPeers supporting this \"extension\" can still interact with older peers.\n\n> This proposal is backward compatible. Non supporting peers will ignore\nthe > <code>enc*</code> messages.\n\nCurrent p2p implementation ignores any unknown command.\n\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/79ef629f/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "p2p authentication and encryption BIPs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Tom",
                "Lee Clagett",
                "Tier Nolan",
                "Sergio Demian Lerner",
                "James MacWhyte",
                "Luke Dashjr",
                "Chris",
                "Jonas Schnelli"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 48071
        }
    },
    {
        "title": "[bitcoin-dev] Proposed BIP: Maximum block size consensus rule based on median block size (adaptive block size)",
        "thread_messages": [
            {
                "author": "Chris Kleeschulte",
                "date": "2016-03-25T17:27:30",
                "message_text_only": "The following draft BIP proposes changing the MAX_BLOCK_SIZE consensus rule\nto be a function of the median block size over the last 12,960 blocks\n(about three months) multiplied by 2 and calculated when a block is\nconnected to the blockchain.\n\nMotivation:\n\nThe purpose of this consensus rule change is to allow the maximum block\nsize to increase or decrease based on actual network usage. A block size\nlimit, as discussed here, prevents certain types of denial of service\nattacks on the Bitcoin network, however a fixed limit does not allow the\ncapacity of the network to increase as advancements in scaling are\nrealized.  By adjusting the limit based on the sizes of blocks in the\nrecent past, the throughput of the network can adjust to changes in user\ndemand and scaling related technology advancements while still being\nprotected from denial of service attacks.\n\n\nFull proposal here:\n\nhttps://github.com/bitpay/bips/blob/master/bip-adaptiveblocksize.mediawiki\n\nI look forward to your consideration.\n\nthank you,\n-- \nChris Kleeschulte\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/b65925f8/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2016-03-25T18:48:15",
                "message_text_only": "I think you will have a hard time getting something related to block size\naccepted in the current climate.\n\nUsing floating point calculations in consensus code is a bad idea.  The\nstandard practice is to use very large integers to fake it.  That has the\nadvantage that it is exact.  You don't even need to do this here.\n\nYour get median function could just as easily use an array of integers.\nYou are dividing by 2.0 and then getting casting it to int after using a\nfloor function.  The standard integer divide by 2 does that automatically.\n\nThe median function is sufficiently defined that I don't think you need the\nexact function (especially if you use integers).\n\nSince the block size has to be an integer, even if the size was\n1,234,567.5, the limit would still be 1,234,567.\n\nIt would likely help to gain acceptance if you added a 2nd limiter to the\ngrowth rate.  For example, you could make it so that the size isn't allowed\nto more than double every year.  This is similar to the 1MB limit on the\nlower end.  A 45 day doubling time (granted subject to miner veto) is\nlikely unacceptable.  Miners could spam max size blocks by filling them\nwith transactions created for that purpose.\n\nThe graphs likely understate the growth rate, since the 1MB limit\ninherently restricts things to 1MB.\n\nOn Fri, Mar 25, 2016 at 5:27 PM, Chris Kleeschulte via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The following draft BIP proposes changing the MAX_BLOCK_SIZE consensus\n> rule to be a function of the median block size over the last 12,960 blocks\n> (about three months) multiplied by 2 and calculated when a block is\n> connected to the blockchain.\n>\n> Motivation:\n>\n> The purpose of this consensus rule change is to allow the maximum block\n> size to increase or decrease based on actual network usage. A block size\n> limit, as discussed here, prevents certain types of denial of service\n> attacks on the Bitcoin network, however a fixed limit does not allow the\n> capacity of the network to increase as advancements in scaling are\n> realized.  By adjusting the limit based on the sizes of blocks in the\n> recent past, the throughput of the network can adjust to changes in user\n> demand and scaling related technology advancements while still being\n> protected from denial of service attacks.\n>\n>\n> Full proposal here:\n>\n> https://github.com/bitpay/bips/blob/master/bip-adaptiveblocksize.mediawiki\n>\n> I look forward to your consideration.\n>\n> thank you,\n> --\n> Chris Kleeschulte\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/7846decc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposed BIP: Maximum block size consensus rule based on median block size (adaptive block size)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tier Nolan",
                "Chris Kleeschulte"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4091
        }
    },
    {
        "title": "[bitcoin-dev] Segnet4",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2016-03-30T08:54:33",
                "message_text_only": "Hello everyone.\n\nPieter Wuille has pushed code for a new segwit testnet that features activation via BIP9 as well as support for BIP68, BIP112, and BIP113. In particular, it now supports Lightning Network app development and collaboration.\nI encourage everyone to spin up a node and try it out.\n\nFor source code, please go to Pieter's github repo:\nhttps://github.com/sipa/bitcoin/tree/segwit4 <https://github.com/sipa/bitcoin/tree/segwit4>\n\nFeedback is welcome here or on the #segwit-dev channel on Freenode.\n\n\n- Eric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160330/1bceb311/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Segnet4",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 700
        }
    }
]