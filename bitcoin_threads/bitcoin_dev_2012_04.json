[
    {
        "title": "[Bitcoin-development] Can I make a BIP 16 payment?",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-04-01T11:06:34",
                "message_text_only": "Hey,\n\nJust wondering why no-one has made one yet. Is there a reason why? I want to test it out."
            }
        ],
        "thread_summary": {
            "title": "Can I make a BIP 16 payment?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 95
        }
    },
    {
        "title": "[Bitcoin-development] Network version increase",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-04-02T15:23:00",
                "message_text_only": "Hello all,\n\nMike Hearn has submitted a pull request to add a pong message in reply to a ping.\n\nThis warrants an upgrade of the network protocol version number, which is since BIP14\nindependent from the version numbers of the reference client.\n\nAny opinions about a numbering scheme? Currently the value 60000 is used. We could\nsimply start increasing the number one by one now for every change, or we could\ndo a \"cleanup\" to 100000 first, and start incrementing from there.\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-02T16:32:52",
                "message_text_only": "On Mon, Apr 2, 2012 at 11:23 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Any opinions about a numbering scheme? Currently the value 60000 is used. We could\n> simply start increasing the number one by one now for every change, or we could\n> do a \"cleanup\" to 100000 first, and start incrementing from there.\n\n\nIt would be nice to have 100000 as the baseline, \"frozen\" protocol.\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Wladimir",
                "date": "2012-04-02T16:42:54",
                "message_text_only": "On Mon, Apr 2, 2012 at 6:32 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On Mon, Apr 2, 2012 at 11:23 AM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n> > Any opinions about a numbering scheme? Currently the value 60000 is\n> used. We could\n> > simply start increasing the number one by one now for every change, or\n> we could\n> > do a \"cleanup\" to 100000 first, and start incrementing from there.\n>\n>\n> It would be nice to have 100000 as the baseline, \"frozen\" protocol.\n>\n\nYes, I think increasing with one is enough for now. Let's not get ahead of\nourselves :)\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120402/caa01943/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Network version increase",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Pieter Wuille",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1693
        }
    },
    {
        "title": "[Bitcoin-development] Release plan: 0.6.1",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-04-02T15:36:54",
                "message_text_only": "Summarizing a discussion from #bitcoin-dev this morning:\n\nThe merge window for pull requests for a 0.6.1 release is now open.\n\nThis will be a bug-fix and code-cleanup only release, with the goal to\nhave Release Candidate 1 binaries available for testing in three\nweeks: April 23'rd.  We want this to be a quick release cycle so we\ncan start pulling new features for a 0.7 release in a month or so.\n\nThe major issues I would like to get resolved:\n # 1024 Correct passphrase crashed the client\n # 1012 bitcoin-qt slow to shut down after recent commits\n\nThere are currently 189 open issues in our bug tracker; lets try to\nget that down to under 100.\n\nI know this will frustrate some of you who think development is\nhappening at a snail's pace; feel free to pull and test new features\n(IPv6 support and coin control) that are important to you. Adequate\ntesting is still our biggest issue, if you want your favorite feature\nto get into bitcoin core faster please spend some time helping test\nother people's favorite features.\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "Release plan: 0.6.1",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1043
        }
    },
    {
        "title": "[Bitcoin-development] Signature Blocks and URI Sign Requests",
        "thread_messages": [
            {
                "author": "Alan Reiner",
                "date": "2012-04-02T20:55:03",
                "message_text_only": "I would like to propose two things that are closely related.  I will \nstart making BIPS if there's positive feedback.  Sorry it's so long, but \nI felt both should be in the same email...\n\n\n_*(1) Signature Blocks*  -- A more-robust, versatile, message-signing \nexchange_\n\nSatoshi client 0.6.0 introduced message signing, but I've been fairly \nunimpressed with the implementation.  Strictly speaking, it works, but \nit's really not intended for \"regular users.\"  There is no indication of \nwhat message was signed or what address signed it.  Key recovery works \nfor the computers processing it, but the user has no idea what this \nchunk of random data is.  They don't even know if the message they \nthought they signed is what's in the signature (along the lines of the \ncopy&paste virus, the message could be switched out without the user \nnoticing).\n\nI have implemented Signature Blocks \n<https://bitcointalk.org/index.php?topic=56424.msg776163#msg776163> in \nArmory (as of v0.55), which is a fully-functional expansion on the \nidea.  Along the lines of BIP 10, a signature block is a human-readable \nchunk of data that immediately identifies the address and the message \nthat are being signed.  It is easily copy&pasted via email or text \nfiles, and is fairly compact for visual identification.   Click the link \nabove to see an example signature block and an Armory screenshot of the \nUI (which needs improvement, but still usable).  The verification \nprocess will include:\n\n-- Check that the public key (included or recovered) matches the address \nfield.\n-- Verify that the signature matches the included message for this \npublic key\n-- The message is properly formatted with a standardized character set \nand escape/replacement scheme for things like newlines or double-quotes.\n\ngmaxwell already pointed out that key recovery makes the \"Public Key\" \nfield pointless.  Okay fine -- I just don't have key recovery \nimplemented yet in Armory, and when I do I can ditch that field (or \nsimply make it optional).  The point is to create a versatile, \nhuman-readable standardized form, much like the BIP 0010 \nsignature-collection scheme <https://en.bitcoin.it/wiki/BIP_0010>.\n\n\n_*(2) Sign-Message URI scheme***-- Request signed messages from users \nusing URIs_\n\nI had the idea that for certain services, the first funding address \ncould be used to identify the owner of an account, and all account \nmaintenance (such as cashouts) be done through signed messages with this \naddress.  For instance, the user would need both a login password *and* \na signed message in order to make a withdrawal or purchase:\n\n     (\"Please withdraw 12.3 BTC from acct 1828349132 to address \n1Hfr3jk2093f\")_signed_by_A\n\nThis gives the service the ability to use two separate factors to \nauthenticate the request (username&password *and* access to unencrypted \nwallet).  This /could/ work with manual signature blocks alone... but \nit's too many steps for regular users.  However, I think it's workable \nif we expand bitcoin URIs to include \"Signature Requests\".\n\nThe URI scheme would add a few parameters to the scheme, and would have \nto have further replacement rules to make sure that messages are handled \nproperly.   The general CONOPs would be (*Con*cept of *Op*eration*s*):\n\n     -- User navigates to \"Withdraw funds\" on webpage\n     -- Webpage has you fill in the details:  from-account, to-address, \nwithdrawal amount\n     -- Webpage produces a clickable URI link that loads all the \ninformation into your client, including addr-reqd-for-sig\n     -- Client asks for confirmation and passphrase (if necessary) then \nproduces a signature (and sig block if necessary)\n     -- URI may include reply-to field that tells it where to send the \nsiganture when it's ready\n\nSo the extra tags that would be needed would probably be:\n\n         \"*requestSig*=True\":\n                 Flag to identify that this is a signing request URI\n         \"*sigNeeded*=1Qjf3392k31h\"\n                 The address that needs to sign the message\n         \n\"*message*=Please%20withdraw%2012.3%20BTC%20to%20addr%201Hfr3jk2093f\"\n                 Some encoding of the message that can be parsed the \nsame way on all systems\n         \"*replyurl*=http://requestor.com/sig_replies.asp?\"\n                 (Optional) After signing, application will submit the \nsignature to the replyurl\n\nThe reply url could be simply an http URL which will use bitcoin URI \nsyntax, with the fields above copied.  Therefore, to complete the above \nrequest, the application handling the request will simply send an HTTP \nrequest to:\n\n     \nhttp://requestor.com/sig_replies.asp?*sigNeeded*=1Qjf3392k31h&*message*=...&*signature*=1fb1893ac193...&*replySig*=True\n\nAny thoughts?  (I have no doubts that there are :) )\n\n-Alan\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120402/8c315b70/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-04-03T00:44:37",
                "message_text_only": "On Monday, April 02, 2012 4:55:03 PM Alan Reiner wrote:\n> Any thoughts?  (I have no doubts that there are :) )\n\nIMO, the sign-request URI should be an extension on the existing bitcoin: URI \nscheme; this way, sigNeeded can be omitted to imply \"sign with a sending \naddress\"."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-04-03T18:46:17",
                "message_text_only": "RE: signature blocks and BIP 10:\n\nWe should avoid reinventing the wheel, if we can. I think we should\nextend existing standards whenever possible.\n\nSo: could we encode signature blocks or BIP-10 transactions using\nS/MIME ?  Or is there a more appropriate \"sign a message\" standard we\ncould/should use?\n\nYou're glossing over little details like what character encoding is\nused for the message, but I'd rather leverage all the work already\ndone by the IETF to nail down all those little details rather then\nre-discover them and come up with our own solutions.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-04-03T18:55:40",
                "message_text_only": "On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n> We should avoid reinventing the wheel, if we can. I think we should\n> extend existing standards whenever possible.\n\nI wonder if it's possible to make sigs compatible with PGP/EC ?"
            },
            {
                "author": "Wladimir",
                "date": "2012-04-03T19:42:52",
                "message_text_only": "On Tue, Apr 3, 2012 at 8:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n> > We should avoid reinventing the wheel, if we can. I think we should\n> > extend existing standards whenever possible.\n>\n> I wonder if it's possible to make sigs compatible with PGP/EC ?\n>\n\nOr we could take a step back, further into \"don't reinvent the wheel\"\nterritory. Why not simply make use of PGP(/EC) to sign and verify messages?\nIt has many advantages, like an already existing web-of-trust and keyserver\ninfrastructure.\n\nI still feel like this is sign message stuff is dragging the kitchen sink\ninto Bitcoin. It's fine for logging into a website, what you use it for,\nbut anything that approaches signing email (such as S/MIME implementations\nand handling different character encodings) is going too far IMO.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120403/84f9c76b/attachment.html>"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-04-03T20:04:19",
                "message_text_only": "I don't think it's minimally invasive to layer PGP's web of trust on top of\nBitcoin, in fact, the opposite.\n\n>From a certain angle, bitcoin exists as a sort of answer / alternate\nsolution to the web of trust. Digital cash with an existing web of trust in\nplace was a working concept in the mid-1990s, courtesy of David Chaum, I\nbelieve.\n\nI totally agree on the kitchen sink concern; I would personally like to see\nsomething like a one-year required discussion period on all non-security\nchanges proposed to the blockchain protocol. We know almost nothing about\nhow bitcoin will be used over the next 20 years; I believe it's a mistake\nto bulk up the protocol too rapidly right now.\n\nThere's a famous phrase from the founder of Lotus about Lotus' engineering\nprocess: \"add lightness.\" The equivalent for protocol design might be \"add\nsimplicity.\" I'd like to see us adding simplicity for now, getting a core\nset of tests together for alternate implementations like libbitcoin, and\nthinking hard about the dangers of cruft over a 10+ year period when it\ncomes to a technology which will necessarily include a complete history of\nevery crufty decision embodied in transaction histories.\n\nPeter\n\n\nOn Tue, Apr 3, 2012 at 1:42 PM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Tue, Apr 3, 2012 at 8:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n>\n>> On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n>> > We should avoid reinventing the wheel, if we can. I think we should\n>> > extend existing standards whenever possible.\n>>\n>> I wonder if it's possible to make sigs compatible with PGP/EC ?\n>>\n>\n> Or we could take a step back, further into \"don't reinvent the wheel\"\n> territory. Why not simply make use of PGP(/EC) to sign and verify messages?\n> It has many advantages, like an already existing web-of-trust and keyserver\n> infrastructure.\n>\n> I still feel like this is sign message stuff is dragging the kitchen sink\n> into Bitcoin. It's fine for logging into a website, what you use it for,\n> but anything that approaches signing email (such as S/MIME implementations\n> and handling different character encodings) is going too far IMO.\n>\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Better than sec? Nothing is better than sec when it comes to\n> monitoring Big Data applications. Try Boundary one-second\n> resolution app monitoring today. Free.\n> http://p.sf.net/sfu/Boundary-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \n\nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120403/9e40ceb3/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-03T21:12:54",
                "message_text_only": "Just to clarify, I'm not proposing anything to the protocol itself.  \nSimply that some applications might benefit from users being to sign \nmessages with existing Bitcoin identities, and what can we do to \naccommodate that (out of band)?  It's not a high priority, but I think \nit's potentially useful, and most codebases already have everything they \nneed in place to implement it.\n\n\nOn 04/03/2012 04:04 PM, Peter Vessenes wrote:\n> I don't think it's minimally invasive to layer PGP's web of trust on \n> top of Bitcoin, in fact, the opposite.\n>\n> From a certain angle, bitcoin exists as a sort of answer / alternate \n> solution to the web of trust. Digital cash with an existing web of \n> trust in place was a working concept in the mid-1990s, courtesy of \n> David Chaum, I believe.\n>\n> I totally agree on the kitchen sink concern; I would personally like \n> to see something like a one-year required discussion period on all \n> non-security changes proposed to the blockchain protocol. We know \n> almost nothing about how bitcoin will be used over the next 20 years; \n> I believe it's a mistake to bulk up the protocol too rapidly right now.\n>\n> There's a famous phrase from the founder of Lotus about Lotus' \n> engineering process: \"add lightness.\" The equivalent for protocol \n> design might be \"add simplicity.\" I'd like to see us adding simplicity \n> for now, getting a core set of tests together for alternate \n> implementations like libbitcoin, and thinking hard about the dangers \n> of cruft over a 10+ year period when it comes to a technology which \n> will necessarily include a complete history of every crufty decision \n> embodied in transaction histories.\n>\n> Peter\n>\n>\n> On Tue, Apr 3, 2012 at 1:42 PM, Wladimir <laanwj at gmail.com \n> <mailto:laanwj at gmail.com>> wrote:\n>\n>\n>     On Tue, Apr 3, 2012 at 8:55 PM, Luke-Jr <luke at dashjr.org\n>     <mailto:luke at dashjr.org>> wrote:\n>\n>         On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n>         > We should avoid reinventing the wheel, if we can. I think we\n>         should\n>         > extend existing standards whenever possible.\n>\n>         I wonder if it's possible to make sigs compatible with PGP/EC ?\n>\n>\n>     Or we could take a step back, further into \"don't reinvent the\n>     wheel\" territory. Why not simply make use of PGP(/EC) to sign and\n>     verify messages? It has many advantages, like an already existing\n>     web-of-trust and keyserver infrastructure.\n>\n>     I still feel like this is sign message stuff is dragging the\n>     kitchen sink into Bitcoin. It's fine for logging into a website,\n>     what you use it for, but anything that approaches signing email\n>     (such as S/MIME implementations and handling different character\n>     encodings) is going too far IMO.\n>\n>     Wladimir\n>\n>\n>     ------------------------------------------------------------------------------\n>     Better than sec? Nothing is better than sec when it comes to\n>     monitoring Big Data applications. Try Boundary one-second\n>     resolution app monitoring today. Free.\n>     http://p.sf.net/sfu/Boundary-dev2dev\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> -- \n>\n> Peter J. Vessenes\n> CEO, CoinLab\n> M: 206.595.9839\n>\n>\n> ------------------------------------------------------------------------------\n> Better than sec? Nothing is better than sec when it comes to\n> monitoring Big Data applications. Try Boundary one-second\n> resolution app monitoring today. Free.\n> http://p.sf.net/sfu/Boundary-dev2dev\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120403/c948c48e/attachment.html>"
            },
            {
                "author": "Mike Koss",
                "date": "2012-04-03T23:37:01",
                "message_text_only": "Alan, I'm coming in late to the conversation - do I understand that BIP 010\ndoes not propose any changes to the protocol - but just an intermediate\ndata format that other clients might use to collect the need key material\nto sign a multi-signature block?\n\nIf so - one might ask what the role of BIP's are if they actually do not\nimpact the protocol?\n\nIf there is any encapsulated data format that is expected to be interpreted\nby clients - I'd call that a \"protocol change\"; but I take it in this\ninstance that you will transmit these signature block out of band from the\nclient ... yet they would have to be parsed and converted into a\nTransaction Script once collected by SOME client?  Would we expect the\nstandard client do so?\n\nSorry if this has been discussed before - I'm trying to understand the\nproposal.\n\n\nOn Tue, Apr 3, 2012 at 2:12 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> **\n> Just to clarify, I'm not proposing anything to the protocol itself.\n> Simply that some applications might benefit from users being to sign\n> messages with existing Bitcoin identities, and what can we do to\n> accommodate that (out of band)?  It's not a high priority, but I think it's\n> potentially useful, and most codebases already have everything they need in\n> place to implement it.\n>\n>\n>\n> On 04/03/2012 04:04 PM, Peter Vessenes wrote:\n>\n> I don't think it's minimally invasive to layer PGP's web of trust on top\n> of Bitcoin, in fact, the opposite.\n>\n>  From a certain angle, bitcoin exists as a sort of answer / alternate\n> solution to the web of trust. Digital cash with an existing web of trust in\n> place was a working concept in the mid-1990s, courtesy of David Chaum, I\n> believe.\n>\n>  I totally agree on the kitchen sink concern; I would personally like to\n> see something like a one-year required discussion period on all\n> non-security changes proposed to the blockchain protocol. We know almost\n> nothing about how bitcoin will be used over the next 20 years; I believe\n> it's a mistake to bulk up the protocol too rapidly right now.\n>\n>  There's a famous phrase from the founder of Lotus about Lotus'\n> engineering process: \"add lightness.\" The equivalent for protocol design\n> might be \"add simplicity.\" I'd like to see us adding simplicity for now,\n> getting a core set of tests together for alternate implementations like\n> libbitcoin, and thinking hard about the dangers of cruft over a 10+ year\n> period when it comes to a technology which will necessarily include a\n> complete history of every crufty decision embodied in transaction histories.\n>\n>  Peter\n>\n>\n> On Tue, Apr 3, 2012 at 1:42 PM, Wladimir <laanwj at gmail.com> wrote:\n>\n>>\n>>  On Tue, Apr 3, 2012 at 8:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n>>\n>>> On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n>>> > We should avoid reinventing the wheel, if we can. I think we should\n>>> > extend existing standards whenever possible.\n>>>\n>>>  I wonder if it's possible to make sigs compatible with PGP/EC ?\n>>>\n>>\n>> Or we could take a step back, further into \"don't reinvent the wheel\"\n>> territory. Why not simply make use of PGP(/EC) to sign and verify messages?\n>> It has many advantages, like an already existing web-of-trust and keyserver\n>> infrastructure.\n>>\n>> I still feel like this is sign message stuff is dragging the kitchen sink\n>> into Bitcoin. It's fine for logging into a website, what you use it for,\n>> but anything that approaches signing email (such as S/MIME implementations\n>> and handling different character encodings) is going too far IMO.\n>>\n>> Wladimir\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Better than sec? Nothing is better than sec when it comes to\n>> monitoring Big Data applications. Try Boundary one-second\n>> resolution app monitoring today. Free.\n>> http://p.sf.net/sfu/Boundary-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n>  --\n>\n> Peter J. Vessenes\n> CEO, CoinLab\n> M: 206.595.9839\n>\n>\n> ------------------------------------------------------------------------------\n> Better than sec? Nothing is better than sec when it comes to\n> monitoring Big Data applications. Try Boundary one-second\n> resolution app monitoring today. Free.http://p.sf.net/sfu/Boundary-dev2dev\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Better than sec? Nothing is better than sec when it comes to\n> monitoring Big Data applications. Try Boundary one-second\n> resolution app monitoring today. Free.\n> http://p.sf.net/sfu/Boundary-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nMike Koss\nCTO, CoinLab\n(425) 246-7701 (m)\n\nA Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you need\nto know about Bitcoins.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120403/84a5db0d/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-03T20:51:18",
                "message_text_only": "On 04/03/2012 02:46 PM, Gavin Andresen wrote:\n> RE: signature blocks and BIP 10:\n>\n> We should avoid reinventing the wheel, if we can. I think we should\n> extend existing standards whenever possible.\n>\n> So: could we encode signature blocks or BIP-10 transactions using\n> S/MIME ?  Or is there a more appropriate \"sign a message\" standard we\n> could/should use?\n>\n> You're glossing over little details like what character encoding is\n> used for the message, but I'd rather leverage all the work already\n> done by the IETF to nail down all those little details rather then\n> re-discover them and come up with our own solutions.\n>\nI'm glossing over details because I actually have no experience dealing \nwith character encodings,  or the implementation specifics of existing \nsolutions (PGP or S/MIME).   That's why I'm emailing this list: I want \nto figure this stuff out, and at the same time try to converge on \nsomething that is efficient and can be interoperable between Armory and \nthe Satoshi client (wallets, signature collection, sig blocks).\n\nI don't go into these things solely to reinvent stuff.  My primary \nmotivation for both ideas I have pitched so far (BIP 0010 and the sig \nblocks) is the versatility.  I like the encoding-independent, visual \ncompactness of PGP ASCII-armored text blocks, but I don't like their \nopaqueness.  PGP vs my signature blocks basically look the same to a \ncasual user, but even a moderately-knowledgeable user can appreciate the \nhuman-readable components of it.  You can visually identify if \nsignatures are missing from sig-collection packet, or see that you \nsigned with the wrong address without having to load an external program.\n\nBut that isn't a critical requirement, it's just my personal \npreference.  I'm fine with existing systems if it sidesteps a lot of \nproblems and there's easy interface to it.    But, I don't want to have \nanother BSDDB-wallet situation where we end up with 10x more capability \nthan we need, and pay for it with 10x the complexity (at least in this \ncase, using PGP is an existing crypto/security-sensitive technology).  I \nhave made \"simplicity\" one of my goals in Armory.\n\nAlternatively, we could change the discussion to a requirements \ndiscussion, to first figure out what we need in order to address \nmulti-signature collection, etc.  Then evaluate competing ideas based on \ntheir qualities relative to the requirements."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-04T00:01:10",
                "message_text_only": "Mike,\n\nYou make an excellent point.  Neither of these proposals impact the \nprotocol itself.  I hadn't considered that.  But I think it's a \ncritically important problem to solve (signature blocks, not so much, \nbut it could piggy back on the same solution).    So the mailing list is \na good place to discuss this, but it maybe it shouldn't be labeled as a \nBIP.  I'll leave that up to the others (arguably, the URI scheme is not \na protocol change, either, but was still a BIP).\n\nThere is all this fanfare around P2SH and how multi-sig is the solution \nto all these security problems, but how the hell do you use it?  I \nbelieve that BIP 10 (or successor) is *critical//*to the success of \nmulti-sig, because the greatest barrier to using multi-sig will be the \nability to actually execute them in less than 14 steps.  And if every \nclient implements it differently, there's even less chance it will be \nused (assuming the userbase reaches any level of client diversity).\n\nI think we need to supply a solution to this existing problem before \neveryone starts solving it on their own and fragmenting the market.  No \none has to use the solution we come up with -- but I believe it's a \nproblem for which most developers will take any solution that is easy to \nexchange, size-efficient and promised to be interoperable (if for no \nother reason than the Satoshi client uses it).\n\n-Alan\n\n\n\nOn 04/03/2012 07:37 PM, Mike Koss wrote:\n> Alan, I'm coming in late to the conversation - do I understand that \n> BIP 010 does not propose any changes to the protocol - but just an \n> intermediate data format that other clients might use to collect the \n> need key material to sign a multi-signature block?\n>\n> If so - one might ask what the role of BIP's are if they actually do \n> not impact the protocol?\n>\n> If there is any encapsulated data format that is expected to be \n> interpreted by clients - I'd call that a \"protocol change\"; but I take \n> it in this instance that you will transmit these signature block out \n> of band from the client ... yet they would have to be parsed and \n> converted into a Transaction Script once collected by SOME client? \n>  Would we expect the standard client do so?\n>\n> Sorry if this has been discussed before - I'm trying to understand the \n> proposal.\n>\n>\n> On Tue, Apr 3, 2012 at 2:12 PM, Alan Reiner <etotheipi at gmail.com \n> <mailto:etotheipi at gmail.com>> wrote:\n>\n>     Just to clarify, I'm not proposing anything to the protocol\n>     itself.  Simply that some applications might benefit from users\n>     being to sign messages with existing Bitcoin identities, and what\n>     can we do to accommodate that (out of band)?  It's not a high\n>     priority, but I think it's potentially useful, and most codebases\n>     already have everything they need in place to implement it.\n>\n>\n>\n>     On 04/03/2012 04:04 PM, Peter Vessenes wrote:\n>>     I don't think it's minimally invasive to layer PGP's web of trust\n>>     on top of Bitcoin, in fact, the opposite.\n>>\n>>     From a certain angle, bitcoin exists as a sort of answer /\n>>     alternate solution to the web of trust. Digital cash with an\n>>     existing web of trust in place was a working concept in the\n>>     mid-1990s, courtesy of David Chaum, I believe.\n>>\n>>     I totally agree on the kitchen sink concern; I would personally\n>>     like to see something like a one-year required discussion period\n>>     on all non-security changes proposed to the blockchain protocol.\n>>     We know almost nothing about how bitcoin will be used over the\n>>     next 20 years; I believe it's a mistake to bulk up the protocol\n>>     too rapidly right now.\n>>\n>>     There's a famous phrase from the founder of Lotus about Lotus'\n>>     engineering process: \"add lightness.\" The equivalent for protocol\n>>     design might be \"add simplicity.\" I'd like to see us adding\n>>     simplicity for now, getting a core set of tests together for\n>>     alternate implementations like libbitcoin, and thinking hard\n>>     about the dangers of cruft over a 10+ year period when it comes\n>>     to a technology which will necessarily include a complete history\n>>     of every crufty decision embodied in transaction histories.\n>>\n>>     Peter\n>>\n>>\n>>     On Tue, Apr 3, 2012 at 1:42 PM, Wladimir <laanwj at gmail.com\n>>     <mailto:laanwj at gmail.com>> wrote:\n>>\n>>\n>>         On Tue, Apr 3, 2012 at 8:55 PM, Luke-Jr <luke at dashjr.org\n>>         <mailto:luke at dashjr.org>> wrote:\n>>\n>>             On Tuesday, April 03, 2012 2:46:17 PM Gavin Andresen wrote:\n>>             > We should avoid reinventing the wheel, if we can. I\n>>             think we should\n>>             > extend existing standards whenever possible.\n>>\n>>             I wonder if it's possible to make sigs compatible with\n>>             PGP/EC ?\n>>\n>>\n>>         Or we could take a step back, further into \"don't reinvent\n>>         the wheel\" territory. Why not simply make use of PGP(/EC) to\n>>         sign and verify messages? It has many advantages, like an\n>>         already existing web-of-trust and keyserver infrastructure.\n>>\n>>         I still feel like this is sign message stuff is dragging the\n>>         kitchen sink into Bitcoin. It's fine for logging into a\n>>         website, what you use it for, but anything that approaches\n>>         signing email (such as S/MIME implementations and handling\n>>         different character encodings) is going too far IMO.\n>>\n>>         Wladimir\n>>\n>>\n>>         ------------------------------------------------------------------------------\n>>         Better than sec? Nothing is better than sec when it comes to\n>>         monitoring Big Data applications. Try Boundary one-second\n>>         resolution app monitoring today. Free.\n>>         http://p.sf.net/sfu/Boundary-dev2dev\n>>         _______________________________________________\n>>         Bitcoin-development mailing list\n>>         Bitcoin-development at lists.sourceforge.net\n>>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>>     -- \n>>\n>>     Peter J. Vessenes\n>>     CEO, CoinLab\n>>     M: 206.595.9839 <tel:206.595.9839>\n>>\n>>\n>>     ------------------------------------------------------------------------------\n>>     Better than sec? Nothing is better than sec when it comes to\n>>     monitoring Big Data applications. Try Boundary one-second\n>>     resolution app monitoring today. Free.\n>>     http://p.sf.net/sfu/Boundary-dev2dev\n>>\n>>\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net  <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>     ------------------------------------------------------------------------------\n>     Better than sec? Nothing is better than sec when it comes to\n>     monitoring Big Data applications. Try Boundary one-second\n>     resolution app monitoring today. Free.\n>     http://p.sf.net/sfu/Boundary-dev2dev\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> -- \n> Mike Koss\n> CTO, CoinLab\n> (425) 246-7701 (m)\n>\n> A Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you \n> need to know about Bitcoins.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120403/c9b724a0/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-04-04T06:23:48",
                "message_text_only": "Alan,\n\nOn Wed, Apr 4, 2012 at 2:01 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> **\n> There is all this fanfare around P2SH and how multi-sig is the solution to\n> all these security problems, but how the hell do you use it?  I believe\n> that BIP 10 (or successor) is *critical *to the success of multi-sig,\n> because the greatest barrier to using multi-sig will be the ability to\n> actually execute them in less than 14 steps.  And if every client\n> implements it differently, there's even less chance it will be used\n> (assuming the userbase reaches any level of client diversity).\n>\n\nThat is a laudable goal.\n\nSo your proposal is about signing \"Preformatted messages from sites\" to\nmake financial transactions more secure, not arbitrary user-to-user\nmessages such as email. That really restricts the scope, which is good.\n\nIn this case there is no use for S/MIME, which deals with encoding/signing\nmultipart mail messages. And no need to deal with MIME headers, html, or\nembedded images, and such. And we can simply require one character\nencoding, no need to support hundreds.\n\nThe \"request signing\" bitcoin URL makes sense in my eyes. Less copy/pasting\nis good. Do mind that there is usually a URL size limit (depending on the\nbrowser) so this cannot be used for long messages/contracts. A possible\nsolution would be to make an option to pass the address where the message\ncan be retrieved (and maybe also where the signature must be sent, to save\na copy-paste back?).\n\nLooking at existing solutions, the only other \"sign request\" that I know of\nis the CSR (https://en.wikipedia.org/wiki/Certificate_signing_request) but\nthe functionality and goal is very different.\n\nIt'd be useful (and IMO most important) to write down some use-cases in\nwhich this makes P2SH easier and less involved. How many steps can be\neliminated of the 14?\n\nWladimir\nBTW: we also still need a BIP to define URL signing / authentication\nitself.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120404/5909aec1/attachment.html>"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2012-04-04T08:35:12",
                "message_text_only": "Hi Alan,\n\nI am using an approach similar to your proposal in a service I am developing. I have, however, chosen to sign using the following scheme:\n1. take sha512 of document (=hash512)\n2. take ripemd160 of hash512\n3. create 512 bit data structure, where the first 352bits are '0', and the rest is the ripemd160 of our hash512\n4. sign it with the key\n\nThis procedure prevents an evil site from fooling you to sign a transaction spending your own coins. So bottom like never sign a full sha512 with a key for any other purpose than a transaction. (The above could easily well have been implemented as just truncating the hash512 to 256 bits, feel free to propose the optimal scheme).\n\n/M\n\n\n\nOn 04/04/2012, at 08:23, Wladimir wrote:\n\n> Alan,\n> \n> On Wed, Apr 4, 2012 at 2:01 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n> There is all this fanfare around P2SH and how multi-sig is the solution to all these security problems, but how the hell do you use it?  I believe that BIP 10 (or successor) is critical to the success of multi-sig, because the greatest barrier to using multi-sig will be the ability to actually execute them in less than 14 steps.  And if every client implements it differently, there's even less chance it will be used (assuming the userbase reaches any level of client diversity).   \n> \n> That is a laudable goal. \n> \n> So your proposal is about signing \"Preformatted messages from sites\" to make financial transactions more secure, not arbitrary user-to-user messages such as email. That really restricts the scope, which is good.\n> \n> In this case there is no use for S/MIME, which deals with encoding/signing multipart mail messages. And no need to deal with MIME headers, html, or embedded images, and such. And we can simply require one character encoding, no need to support hundreds.\n> \n> The \"request signing\" bitcoin URL makes sense in my eyes. Less copy/pasting is good. Do mind that there is usually a URL size limit (depending on the browser) so this cannot be used for long messages/contracts. A possible solution would be to make an option to pass the address where the message can be retrieved (and maybe also where the signature must be sent, to save a copy-paste back?).\n> \n> Looking at existing solutions, the only other \"sign request\" that I know of is the CSR (https://en.wikipedia.org/wiki/Certificate_signing_request) but the functionality and goal is very different.\n> \n> It'd be useful (and IMO most important) to write down some use-cases in which this makes P2SH easier and less involved. How many steps can be eliminated of the 14?\n> \n> Wladimir\n> BTW: we also still need a BIP to define URL signing / authentication itself. \n> \n> ------------------------------------------------------------------------------\n> Better than sec? Nothing is better than sec when it comes to\n> monitoring Big Data applications. Try Boundary one-second \n> resolution app monitoring today. Free.\n> http://p.sf.net/sfu/Boundary-dev2dev_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Signature Blocks and URI Sign Requests",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Wladimir",
                "Peter Vessenes",
                "Alan Reiner",
                "Michael Gr\u00f8nager",
                "Gavin Andresen",
                "Mike Koss"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 34948
        }
    },
    {
        "title": "[Bitcoin-development] BIP 31",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-04-11T15:32:18",
                "message_text_only": "Jeff asked for a BIP for the pong message, so here it is:\n\nhttps://en.bitcoin.it/wiki/BIP_0031"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-04-11T15:42:45",
                "message_text_only": "On Wednesday, April 11, 2012 11:32:18 AM Mike Hearn wrote:\n> Jeff asked for a BIP for the pong message, so here it is:\n> \n> https://en.bitcoin.it/wiki/BIP_0031\n\nI thought we were going with 60001 for the protocol version bump?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-11T17:00:25",
                "message_text_only": "On Wed, Apr 11, 2012 at 11:42 AM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, April 11, 2012 11:32:18 AM Mike Hearn wrote:\n>> Jeff asked for a BIP for the pong message, so here it is:\n>>\n>> https://en.bitcoin.it/wiki/BIP_0031\n>\n> I thought we were going with 60001 for the protocol version bump?\n\nSee pull #1081, which makes a few minor revisions along these lines.\n\nMike's original pull still has my ACK, FWIW, too.  Can pull either.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "BIP 31",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Mike Hearn"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 816
        }
    },
    {
        "title": "[Bitcoin-development] Adding request/reply id in messages",
        "thread_messages": [
            {
                "author": "Christian Bodt",
                "date": "2012-04-11T18:39:40",
                "message_text_only": "Hi,\n\nI would like to discuss the following bitcoin protocol improvement proposal:\n\n         Adding request/reply id in all messages (in the message header,\nbased on what was done for the \"checksum\" field)\n\nThe original reason is that I found it very hard to implement robust\nblockchain downloading as we are missing context information:\nThe download protocol relies on the other peer sending one (or more) \"inv\"\nreponse(s) to \"getblocks\" and sending the \"hashContinue\".\nBut if the other peer doesn't send a response to getblock, send a partial\nresponse to getblocks, mixes it with some unrelated blocks inventories\nor doesn't send the \"hashContinue\" it is very hard to detect and handle\n(e.g. ban the peer and switch to another).  This could cause some DoS\nattacks by misbehaving peers.\nThe problems are that 1/ we don't know how many \"inv\" messages to wait for\nafter \"getblocks\" and 2/ we don't know how to distinguish between result of\n\"getblocks\" and spontaneous \"inv\" notifications.\nThe same is true for  \"addr\" messages (it is both a notification and reply)\nbut this is less of a problem as a lack of response to getaddr\ndoesn't constitute a DoS.\n\nThe idea would be to add a new \"requestid\" field in messages and define the\nfollowing:\n      - verack sends back the requestid given in version.\n      - inv sends back the requestid given in getblocks or a special value\nin case of a notification.\n      - addr sends back the requestid given in getaddr or a special value\nin case of a notification.\n      - tx sends back the requestid  given in getdata.\n      - block sends back the requestid given in getdata\n      - headers sends back the requestid given in getheaders.\n      - reply sends back the requestid given in checkorder/submitorder.\n      - pong sends back the requestid given in ping.\n\nWith the following rules:\n       - getblocks always results in a single\"inv\" reply (0-500 elements\nallowed).\n       - getdata still result in multiple 'tx' or 'block' 's (as currently).\n\nThis is inspired by the common request/reply pattern (the id is sometimes\ncalled \"correlation id\").\nThis would permit better asynchronous messaging (multiple request of the\nsame type in parallel. This could be useful for\ngetblocks/getdata/getheaders and future messages).\n\nHistoric note: It seems similar to the existing mechanism of\n\"CRequestTracker, hashReply & PushRequest\" in the current bitcoin source\ncode except requestId  would only be a 32bits instead of the 256bits\nof hashReply .\n\nI have implemented a prototype here: https://github.com/sirk390/bitcoin/\nThis could allow to remove \"hashContinue\" in a second step like this:\nhttps://github.com/sirk390/bitcoin/tree/better_block_download\n\nI'm discussing it now as I read the PONG BIP and saw some similar nonce\nfield added.\nI was not sure if this nonce field would still be required if we had\nrequest/reply ids .\n\nWhat do you think?\n\nBest Regards,\nChristian Bodt, France\nNote: I am working on a python implementation of bitcoin.\nSee https://github.com/sirk390/coinpy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120411/3b4afcbf/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-04-12T15:41:05",
                "message_text_only": "On Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> I would like to discuss the following bitcoin protocol improvement proposal:\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Adding request/reply id in all messages (in the message header,\n> based on what was done for the \"checksum\" field)\n\nThat seems like a perfectly reasonable protocol improvement to me.\nAnybody else have an opinion?\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-04-12T16:01:54",
                "message_text_only": "On Thu, Apr 12, 2012 at 11:41:05AM -0400, Gavin Andresen wrote:\n> On Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> > I would like to discuss the following bitcoin protocol improvement proposal:\n> >\n> > \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Adding request/reply id in all messages (in the message header,\n> > based on what was done for the \"checksum\" field)\n> \n> That seems like a perfectly reasonable protocol improvement to me.\n> Anybody else have an opinion?\n\nIf there is a reasonable use for it, I have no objections.\n\nHowever: the bitcoin P2P protocol is not fully request-reply based, and trying to use\nit that may be be less intuitive than how it looks. For example, doing a second\nidentical \"getblocks\" request will not result in more \"inv\" replies, as the client\nprevents retransmits. This is not a large problem, but maybe such an extension\nshould also include an extra \"denied\" message, which is sent if the client is\nunwilling to answer (and may also be used to report transactions that are not\naccepted into the memory pool, for example).\n\n-- \nPieter"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-04-12T16:33:07",
                "message_text_only": "This is a bad idea. The bitcoin protocol is (mostly) stateless. Stateless protocols are more secure.\n\n\n\n________________________________\n From: Pieter Wuille <pieter.wuille at gmail.com>\nTo: Gavin Andresen <gavinandresen at gmail.com> \nCc: bitcoin-development at lists.sourceforge.net \nSent: Thursday, April 12, 2012 5:01 PM\nSubject: Re: [Bitcoin-development] Adding request/reply id in messages\n \nOn Thu, Apr 12, 2012 at 11:41:05AM -0400, Gavin Andresen wrote:\n> On Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> > I would like to discuss the following bitcoin protocol improvement proposal:\n> >\n> > \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Adding request/reply id in all messages (in the message header,\n> > based on what was done for the \"checksum\" field)\n> \n> That seems like a perfectly reasonable protocol improvement to me.\n> Anybody else have an opinion?\n\nIf there is a reasonable use for it, I have no objections.\n\nHowever: the bitcoin P2P protocol is not fully request-reply based, and trying to use\nit that may be be less intuitive than how it looks. For example, doing a second\nidentical \"getblocks\" request will not result in more \"inv\" replies, as the client\nprevents retransmits. This is not a large problem, but maybe such an extension\nshould also include an extra \"denied\" message, which is sent if the client is\nunwilling to answer (and may also be used to report transactions that are not\naccepted into the memory pool, for example).\n\n-- \nPieter\n\n------------------------------------------------------------------------------\nFor Developers, A Lot Can Happen In A Second.\nBoundary is the first to Know...and Tell You.\nMonitor Your Applications in Ultra-Fine Resolution. Try it FREE!\nhttp://p.sf.net/sfu/Boundary-d2dvs2\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120412/b046c13c/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-12T17:12:09",
                "message_text_only": "On Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> Hi,\n>\n> I would like to discuss the following bitcoin protocol improvement proposal:\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Adding request/reply id in all messages (in the message header,\n> based on what was done for the \"checksum\" field)\n>\n> The original reason is that I found it very hard to implement robust\n> blockchain downloading as we are missing context information:\n> The download protocol relies on the other peer sending one (or more) \"inv\"\n> reponse(s) to \"getblocks\" and sending the \"hashContinue\".\n> But if the other peer doesn't send a response to getblock, send a partial\n> response to getblocks, mixes it with some unrelated blocks inventories\n> or\u00a0doesn't send the \"hashContinue\"\u00a0it is very hard to detect and handle\n> (e.g. ban the peer and switch to another). \u00a0This could cause some DoS\n> attacks by misbehaving peers.\n\nIf the peer is misbehaving, then disconnect.  Your protocol change\ndoes not offer any clear benefits in this area, as these sorts of\nattacks/misbehaviors/bugs are still just as possible, and just as\ndamaging (or not).\n\nJust disconnect the strange peer!\n\n> The problems are that 1/ we don't know how many \"inv\" messages to wait for\n> after \"getblocks\"\u00a0and 2/ we don't know how to\u00a0distinguish between result of\n> \"getblocks\" and spontaneous \"inv\" notifications.\n> The same is true for \u00a0\"addr\" messages (it is both a notification and reply)\n> but this is less of a problem as a lack of response to getaddr\n> doesn't\u00a0constitute\u00a0a DoS.\n>\n> The idea would be to add a new \"requestid\" field in messages and define the\n> following:\n\n\nStateless protocols have a lot of value.  They are easiest to\nimplement, and easier to prove correct.  Existing clients like\nArtForz' half-a-node, variants of which are deployed all over the\nplace in bitcoin-land, rely on the stateless-ness to one degree or\nanother.\n\nStateful protocols, too, have their problems as well.  One must add\ncode to help remain \"synchronized\" between local and remote states,\nwhich your suggested change only hints at.  NFSv4 and RPC have a long\nhistory of dealing with stateful-ness issues.  Obviously bitcoin P2P\nis nowhere near as complex, but the history of NFS development offers\nseveral lessons applicable to your proposed change.\n\nOverall, IMO your listed reasons for needing this major change\n(stateless->stateful) do not really justify the change.  Handling\ninitial block download can be accomplished in a number of ways, and\npeer(s) may crash or return odd results.  You must handle these cases\nproperly, regardless of the presence of req/reply id's.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-04-12T17:24:18",
                "message_text_only": "Jeff elaborated the problems very well, but I just want to add this:\n\nYour change is essentially relying (trusting) the server to track a piece of information (your state). Anytime you start depending on another node in some way, it is opening yourself up to be exploited. Nodes should be doing their owning state maintainance, not relying on external parties.\n\n\nI am very much against the change. As someone who has implemented the complete bitcoin protocol, I had no problems implementing the blockchain download. In fact, I dislike that nodes have to store the last inventory they sent as part of a getblocks in order to trigger the next round. It's be better if there was no state whatsoever.\n\n________________________________\nFrom: Jeff Garzik <jgarzik at exmulti.com>\nTo: sirk390 at gmail.com \nCc: bitcoin-development at lists.sourceforge.net \nSent: Thursday, April 12, 2012 6:12 PM\nSubject: Re: [Bitcoin-development] Adding request/reply id in messages\n\nOn Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> Hi,\n>\n> I would like to discuss the following bitcoin protocol improvement proposal:\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Adding request/reply id in all messages (in the message header,\n> based on what was done for the \"checksum\" field)\n>\n> The original reason is that I found it very hard to implement robust\n> blockchain downloading as we are missing context information:\n> The download protocol relies on the other peer sending one (or more) \"inv\"\n> reponse(s) to \"getblocks\" and sending the \"hashContinue\".\n> But if the other peer doesn't send a response to getblock, send a partial\n> response to getblocks, mixes it with some unrelated blocks inventories\n> or\u00a0doesn't send the \"hashContinue\"\u00a0it is very hard to detect and handle\n> (e.g. ban the peer and switch to another). \u00a0This could cause some DoS\n> attacks by misbehaving peers.\n\nIf the peer is misbehaving, then disconnect.\u00a0 Your protocol change\ndoes not offer any clear benefits in this area, as these sorts of\nattacks/misbehaviors/bugs are still just as possible, and just as\ndamaging (or not).\n\nJust disconnect the strange peer!\n\n> The problems are that 1/ we don't know how many \"inv\" messages to wait for\n> after \"getblocks\"\u00a0and 2/ we don't know how to\u00a0distinguish between result of\n> \"getblocks\" and spontaneous \"inv\" notifications.\n> The same is true for \u00a0\"addr\" messages (it is both a notification and reply)\n> but this is less of a problem as a lack of response to getaddr\n> doesn't\u00a0constitute\u00a0a DoS.\n>\n> The idea would be to add a new \"requestid\" field in messages and define the\n> following:\n\n\nStateless protocols have a lot of value.\u00a0 They are easiest to\nimplement, and easier to prove correct.\u00a0 Existing clients like\nArtForz' half-a-node, variants of which are deployed all over the\nplace in bitcoin-land, rely on the stateless-ness to one degree or\nanother.\n\nStateful protocols, too, have their problems as well.\u00a0 One must add\ncode to help remain \"synchronized\" between local and remote states,\nwhich your suggested change only hints at.\u00a0 NFSv4 and RPC have a long\nhistory of dealing with stateful-ness issues.\u00a0 Obviously bitcoin P2P\nis nowhere near as complex, but the history of NFS development offers\nseveral lessons applicable to your proposed change.\n\nOverall, IMO your listed reasons for needing this major change\n(stateless->stateful) do not really justify the change.\u00a0 Handling\ninitial block download can be accomplished in a number of ways, and\npeer(s) may crash or return odd results.\u00a0 You must handle these cases\nproperly, regardless of the presence of req/reply id's.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com\n\n------------------------------------------------------------------------------\nFor Developers, A Lot Can Happen In A Second.\nBoundary is the first to Know...and Tell You.\nMonitor Your Applications in Ultra-Fine Resolution. Try it FREE!\nhttp://p.sf.net/sfu/Boundary-d2dvs2\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-04-12T18:04:54",
                "message_text_only": "I agree that it would be nice if the protocol stayed stateless.\n\nI also think we should try and keep in our heads the aggregate\nbitcoin-universe cost of implementing any protocol change; even a very\nsmall change, something that truly only takes one hour of time from each\nbitcoin node client developer to implement, test and bugfix (hah!) Has a\ncost in the (tens?) of thousands of USD added up across those who need to\nunderstand, implement, discuss, etc.\n\nPeter\n\nOn Thu, Apr 12, 2012 at 10:24 AM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Jeff elaborated the problems very well, but I just want to add this:\n>\n> Your change is essentially relying (trusting) the server to track a piece\n> of information (your state). Anytime you start depending on another node in\n> some way, it is opening yourself up to be exploited. Nodes should be doing\n> their owning state maintainance, not relying on external parties.\n>\n>\n> I am very much against the change. As someone who has implemented the\n> complete bitcoin protocol, I had no problems implementing the blockchain\n> download. In fact, I dislike that nodes have to store the last inventory\n> they sent as part of a getblocks in order to trigger the next round. It's\n> be better if there was no state whatsoever.\n>\n> ________________________________\n> From: Jeff Garzik <jgarzik at exmulti.com>\n> To: sirk390 at gmail.com\n> Cc: bitcoin-development at lists.sourceforge.net\n> Sent: Thursday, April 12, 2012 6:12 PM\n> Subject: Re: [Bitcoin-development] Adding request/reply id in messages\n>\n> On Wed, Apr 11, 2012 at 2:39 PM, Christian Bodt <sirk390 at gmail.com> wrote:\n> > Hi,\n> >\n> > I would like to discuss the following bitcoin protocol improvement\n> proposal:\n> >\n> >          Adding request/reply id in all messages (in the message header,\n> > based on what was done for the \"checksum\" field)\n> >\n> > The original reason is that I found it very hard to implement robust\n> > blockchain downloading as we are missing context information:\n> > The download protocol relies on the other peer sending one (or more)\n> \"inv\"\n> > reponse(s) to \"getblocks\" and sending the \"hashContinue\".\n> > But if the other peer doesn't send a response to getblock, send a partial\n> > response to getblocks, mixes it with some unrelated blocks inventories\n> > or doesn't send the \"hashContinue\" it is very hard to detect and handle\n> > (e.g. ban the peer and switch to another).  This could cause some DoS\n> > attacks by misbehaving peers.\n>\n> If the peer is misbehaving, then disconnect.  Your protocol change\n> does not offer any clear benefits in this area, as these sorts of\n> attacks/misbehaviors/bugs are still just as possible, and just as\n> damaging (or not).\n>\n> Just disconnect the strange peer!\n>\n> > The problems are that 1/ we don't know how many \"inv\" messages to wait\n> for\n> > after \"getblocks\" and 2/ we don't know how to distinguish between result\n> of\n> > \"getblocks\" and spontaneous \"inv\" notifications.\n> > The same is true for  \"addr\" messages (it is both a notification and\n> reply)\n> > but this is less of a problem as a lack of response to getaddr\n> > doesn't constitute a DoS.\n> >\n> > The idea would be to add a new \"requestid\" field in messages and define\n> the\n> > following:\n>\n>\n> Stateless protocols have a lot of value.  They are easiest to\n> implement, and easier to prove correct.  Existing clients like\n> ArtForz' half-a-node, variants of which are deployed all over the\n> place in bitcoin-land, rely on the stateless-ness to one degree or\n> another.\n>\n> Stateful protocols, too, have their problems as well.  One must add\n> code to help remain \"synchronized\" between local and remote states,\n> which your suggested change only hints at.  NFSv4 and RPC have a long\n> history of dealing with stateful-ness issues.  Obviously bitcoin P2P\n> is nowhere near as complex, but the history of NFS development offers\n> several lessons applicable to your proposed change.\n>\n> Overall, IMO your listed reasons for needing this major change\n> (stateless->stateful) do not really justify the change.  Handling\n> initial block download can be accomplished in a number of ways, and\n> peer(s) may crash or return odd results.  You must handle these cases\n> properly, regardless of the presence of req/reply id's.\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n>\n> ------------------------------------------------------------------------------\n> For Developers, A Lot Can Happen In A Second.\n> Boundary is the first to Know...and Tell You.\n> Monitor Your Applications in Ultra-Fine Resolution. Try it FREE!\n> http://p.sf.net/sfu/Boundary-d2dvs2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> For Developers, A Lot Can Happen In A Second.\n> Boundary is the first to Know...and Tell You.\n> Monitor Your Applications in Ultra-Fine Resolution. Try it FREE!\n> http://p.sf.net/sfu/Boundary-d2dvs2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n\nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120412/d5e6f96d/attachment.html>"
            },
            {
                "author": "Christian Bodt",
                "date": "2012-04-12T20:53:28",
                "message_text_only": "On Thu, Apr 12, 2012 at 7:24 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Jeff elaborated the problems very well, but I just want to add this:\n>\n> Your change is essentially relying (trusting) the server to track a piece\n> of information (your state).\n\n\nNo, it is more about distinguishing between replies (multiple asynchroneous\nrequest) and spontaneous notifications of the other peer.\nEvery state would still be tracked locally on the client side.\n\nI don't understand why you say my proposal would make the protocol more\nstateful. I think it doesn't.\nEach reply is only  the result of the current request only, and there is no\nnew session information.\nAs you see in my implementation, there is not even a new variable.\nRequest/reply id is a very robust pattern that is compatible with stateless\nprotocols.\n\nIndead, this change doesn't directly improve on peer that don't answer\nrequests: it only enables to do so easily in a secondary step. This step\ncan only be done when all peers on the network are running the modified\ncode.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120412/38e08138/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-04-13T06:30:49",
                "message_text_only": ">\n>\n> I don't understand why you say my proposal would make the protocol more\n> stateful. I think it doesn't.\n> Each reply is only  the result of the current request only, and there is\n> no new session information.\n>\n\nI also wondered this. My first thought was that it's basically the same as\nthe PING message, a nonce that is repeated immediately on reply. This makes\nit easier to multiplex operations over a single channel. I'm not against\nthis basic idea, and it is easy to ignore for clients that don't want to\nuse it.\n\nI think the state comes in here:\n\n      - inv sends back the requestid given in getblocks or a special value\nin case of a notification.\n      - addr sends back the requestid given in getaddr or a special value\nin case of a notification.\n\n\"*command1* sends back the requestid given in *command2*\".\n\nThis requires keeping state on the connection between command1 and\ncommand2. Arguably, this state already exists in the current protocol, but\nI'd rather see it reduced than extended.\n\nAlso... Many of the described commands don't need this as they already have\na natural \"nonce\". For example, the id of the requested block header. If\nthis is passed in the reply, and the caller can correlate the request and\nreply without a special nonce administration.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120413/1e75c810/attachment.html>"
            },
            {
                "author": "Christian Bodt",
                "date": "2012-04-12T16:54:29",
                "message_text_only": "> For example, doing a second\n> identical \"getblocks\" request will not result in more \"inv\" replies, as\n> the client\n> prevents retransmits.\n\n\nYes, the current prototype implementation modifies that. \"getblocks\" always\nresults in one \"inv\" with [0-500] elements.\nIt also removes the filtering on previously transmitted block invs.\nsee patch:\nhttps://github.com/sirk390/bitcoin/commit/17a27e3d56efa107697b53c193364a33951f1dd1\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120412/6d6d42f9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Adding request/reply id in messages",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Amir Taaki",
                "Peter Vessenes",
                "Gavin Andresen",
                "Pieter Wuille",
                "Christian Bodt"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 22345
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin TX fill-or-kill deterministic behavior",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-04-12T18:38:43",
                "message_text_only": "Not sure whether this rises to the level of a BIP or not, as it is\nlargely an implementation change.\n\nOne of my From-Day-One complaints about bitcoin is that transactions\nbehavior could be far more deterministic (predictable), from a user\nstandpoint.  Transactions in the current system can easily remain in\nlimbo forever.\n\nOne big step in making transactions behave more predictably would be\nto remove transactions from the memory pool, if they have not made it\ninto a block for a couple days.  i.e.\n\n1.  N = 1 or 2 or whatever the community prefers.  Ideally enough time\nfor a third-tier miner, mining strange TXs, finds a block.\n2.  H1 = height of block chain, when a TX is received\n3.  H2 = H1 + (144 * N)\n4.  If block chain height reaches H2, and TX has not made it into a\nblock, drop TX from memory pool\n\nAlthough this only impacts a small amount of TX's ultimately, what it\ndoes do is give us the ability -- once miners have upgraded to this\nrule -- to tell bitcoin users that their transactions \"expire\" after N\ndays.\n\nBackwards compatibility should not be an issue; clients are free to\nretransmit their TX at any time, as usual, thereby \"resetting the\nclock\" for all peers who have forgotten the TX in question.\n\nOnce in place, clients may then implement code that notices a TX has\nexpired (read: likely to have been forgotten by the network, assuming\nthey themselves have stopped retransmitting it).  Then you can start\nworking on wallet/coin recovery, perhaps resending with a higher fee\netc.\n\nThe above change is not really \"fill-or-kill\" but it should be a big\nstep, opening the door to deterministic TX behavior.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-12T19:19:39",
                "message_text_only": "My one big concern about this that users find a way to exploit this\nbehavior for themselves.  If it's too easy for users to create tx they know\nwill get stuck and expire, it's no different than letting them cancel their\nzero-conf transactions.  i.e. I pay 0.5 BTC in a store for a candy bar, so\nI send it using a combination of inputs and fees that I know will lead to\nit being stuck and expire.\n\nOn the other hand, if such conditions are deterministic enough, it could be\ndetected by the recipient and flagged.\n\nIt's not a huge deal, but it's something to consider.\n\n-Alan\n\n\n\nOn Thu, Apr 12, 2012 at 2:38 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> Not sure whether this rises to the level of a BIP or not, as it is\n> largely an implementation change.\n>\n> One of my From-Day-One complaints about bitcoin is that transactions\n> behavior could be far more deterministic (predictable), from a user\n> standpoint.  Transactions in the current system can easily remain in\n> limbo forever.\n>\n> One big step in making transactions behave more predictably would be\n> to remove transactions from the memory pool, if they have not made it\n> into a block for a couple days.  i.e.\n>\n> 1.  N = 1 or 2 or whatever the community prefers.  Ideally enough time\n> for a third-tier miner, mining strange TXs, finds a block.\n> 2.  H1 = height of block chain, when a TX is received\n> 3.  H2 = H1 + (144 * N)\n> 4.  If block chain height reaches H2, and TX has not made it into a\n> block, drop TX from memory pool\n>\n> Although this only impacts a small amount of TX's ultimately, what it\n> does do is give us the ability -- once miners have upgraded to this\n> rule -- to tell bitcoin users that their transactions \"expire\" after N\n> days.\n>\n> Backwards compatibility should not be an issue; clients are free to\n> retransmit their TX at any time, as usual, thereby \"resetting the\n> clock\" for all peers who have forgotten the TX in question.\n>\n> Once in place, clients may then implement code that notices a TX has\n> expired (read: likely to have been forgotten by the network, assuming\n> they themselves have stopped retransmitting it).  Then you can start\n> working on wallet/coin recovery, perhaps resending with a higher fee\n> etc.\n>\n> The above change is not really \"fill-or-kill\" but it should be a big\n> step, opening the door to deterministic TX behavior.\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n>\n> ------------------------------------------------------------------------------\n> For Developers, A Lot Can Happen In A Second.\n> Boundary is the first to Know...and Tell You.\n> Monitor Your Applications in Ultra-Fine Resolution. Try it FREE!\n> http://p.sf.net/sfu/Boundary-d2dvs2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120412/8ae4ec6d/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-12T19:26:25",
                "message_text_only": "On Thu, Apr 12, 2012 at 3:19 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> My one big concern about this that users find a way to exploit this behavior\n> for themselves. \u00a0If it's too easy for users to create tx they know will get\n> stuck and expire, it's no different than letting them cancel their zero-conf\n> transactions. \u00a0i.e. I pay 0.5 BTC in a store for a candy bar, so I send it\n> using a combination of inputs and fees that I know will lead to it being\n> stuck and expire.\n>\n> On the other hand, if such conditions are deterministic enough, it could be\n> detected by the recipient and flagged.\n>\n> It's not a huge deal, but it's something to consider.\n\nDo you have a -specific- concern that you feel may be exploited?\n\nExpiration already occurs at random, as nodes shut down and restart,\nlog on and log off the network.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-04-13T08:35:28",
                "message_text_only": "On 2012 April 12 Thursday, Jeff Garzik wrote:\n \n> One of my From-Day-One complaints about bitcoin is that transactions\n> behavior could be far more deterministic (predictable), from a user\n> standpoint.  Transactions in the current system can easily remain in\n> limbo forever.\n> \n> One big step in making transactions behave more predictably would be\n> to remove transactions from the memory pool, if they have not made it\n> into a block for a couple days.  i.e.\n\nA change I've wished for for a while (but I suspect it is too big a change to \never make it) is that a transaction announcement include the block the user \nwants to base on.  It would only be in the protocol message, not the \ntransaction stored in the blockchain.\n\nThe advantage is that (1) it protects against double spends without needing a \nconfirmation period; as a merchant I can instantly spend a 1-confirmation \ntransaction by creating my transaction with that 1-confirm as its \"base\".  (2) \nyour expiry from memory pool becomes easy -- if the \"base\" is more than N \nblocks below the current head, then that transaction won't be included.\n\nRetransmission is possible with the base updated.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120413/d9e35fe5/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-04-13T10:04:07",
                "message_text_only": "It sounds OK as long as you exclude nLockTimed transactions.\n\nThat said, if you broadcast a transaction that does not meet the fee\nrules, you should be able to notice that it wasn't accepted by your\npeers immediately. Today it's painful because the protocol isn't very\nchatty - in bitcoinj I plan to do this by announcing to half the\nconnected peers and waiting to see if the transaction comes back on\nthe other half. Getting a response from a peer that the TX was dropped\nfor reasons {x,y,z} is a better design but needs another protocol\nchange.\n\nSo having transactions expire would address the case where somebody\nbroadcasts a transaction that successfully propagates across the\nnetwork, but then isn't actually accepted by miners for some reason.\nFor instance due to a change in the default fee schedules. That risk\ncan be mitigated somewhat by being careful about such changes (timed\nphase ins set multiple months out so people have time to upgrade,\nalerts announcing it, etc).\n\nI'm not sure we should be encouraging users to attach fees to\ntransactions though. Even if you can replace a transaction after a\ncouple of days, the user experience of trying to get the fee \"right\"\nis atrocious. I don't think any sensible merchant will actually be\nwilling to put their customers through this nonsense. If somebody\nbroadcasts a transaction that successfully propagates across a big\nchunk of the network but then gets stuck due to lacking sufficient\nfees, the best fix is for the merchant to broadcast another\ntransaction that spends the first and increases the fees on it that\nway. After this happens a few times, if I was a merchant I'd be\ntempted to just ask buyers to submit the TX to me directly and I'll\nhandle keeping up with what miners currently charge and attaching\nfees. I don't want my customers to have to think about this and have\ntrades spuriously fail when they forget.\n\nThat design requires a minor change to how fees are calculated inside\nthe memory pool, to include fees on un-included dependencies. But that\nseems fairly uncontroversial to me. It's best for users, merchants and\nminers to not leave chains of transactions in limbo when together\ntheir fees add up to the minimum required amount."
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-13T16:41:19",
                "message_text_only": "On Fri, Apr 13, 2012 at 6:04 AM, Mike Hearn <mike at plan99.net> wrote:\n> It sounds OK as long as you exclude nLockTimed transactions.\n\nACK, agreed\n\n> That said, if you broadcast a transaction that does not meet the fee\n> rules, you should be able to notice that it wasn't accepted by your\n> peers immediately. Today it's painful because the protocol isn't very\n> chatty - in bitcoinj I plan to do this by announcing to half the\n> connected peers and waiting to see if the transaction comes back on\n> the other half. Getting a response from a peer that the TX was dropped\n> for reasons {x,y,z} is a better design but needs another protocol\n> change.\n>\n> So having transactions expire would address the case where somebody\n> broadcasts a transaction that successfully propagates across the\n> network, but then isn't actually accepted by miners for some reason.\n\nCorrect.  As mentioned, this change should impact few TXs on the\nexisting network.\n\nIt's mostly about getting everyone to collectively agree that\ntransactions should expire, if they don't make it into a block.\n(excl. nLockTime stuff)  A minor technical step, but also a useful\npolicy step.\n\n> For instance due to a change in the default fee schedules. That risk\n> can be mitigated somewhat by being careful about such changes (timed\n> phase ins set multiple months out so people have time to upgrade,\n> alerts announcing it, etc).\n>\n> I'm not sure we should be encouraging users to attach fees to\n> transactions though. Even if you can replace a transaction after a\n> couple of days, the user experience of trying to get the fee \"right\"\n> is atrocious.\n\nYes -- I think there is near-universal agreement on this user experience point.\n\n> I don't think any sensible merchant will actually be\n> willing to put their customers through this nonsense. If somebody\n> broadcasts a transaction that successfully propagates across a big\n> chunk of the network but then gets stuck due to lacking sufficient\n> fees, the best fix is for the merchant to broadcast another\n> transaction that spends the first and increases the fees on it that\n> way. After this happens a few times, if I was a merchant I'd be\n> tempted to just ask buyers to submit the TX to me directly and I'll\n> handle keeping up with what miners currently charge and attaching\n> fees. I don't want my customers to have to think about this and have\n> trades spuriously fail when they forget.\n>\n> That design requires a minor change to how fees are calculated inside\n> the memory pool, to include fees on un-included dependencies. But that\n> seems fairly uncontroversial to me. It's best for users, merchants and\n> miners to not leave chains of transactions in limbo when together\n> their fees add up to the minimum required amount.\n\nSo, to be specific... a A->B chain of transactions, that collectively\nmeet the network's fee requirements?  It seems quite reasonable to\naccept that, sure.  ACK on concept.  A chain of length 2 seems like it\nwould be most common, and limiting total chain length (to 10? 100?)\nfor any one chain in the memory pool seems prudent.\n\nAs to the larger issue of fees...  I will readily admit I have no good ideas.\n\nThe user's experience is pretty poor:  while it might make economic\nsense, from the network's standpoint, to charge for the service of\nverifying and storing a transaction, the user has limited means to\ndetermine an ideal fee.  There are also other valid economic models\n(receiver pays fee) out there that may successfully sustain the\nnetwork.\n\nIdeally the fee, if any, is market based and negotiated.  The current\nmethod is loose-consensus, mainly aimed at (a) combating dust spam or\n(b) ensuring it becomes increasingly more expensive to fill a block,\nup to the current 1MB maximum.  I think almost everyone agrees the\ncurrent fee system is an ugly, warty hack.  Problem is... like\ndemocracy, no matter how ugly it is, people have trouble finding a\nbetter system :)\n\nFurthermore, many of these ideas -- like sending TX's directly to the\nmerchant -- involve far more direct payee<->payer communication on the\npart of the wallet client than is currently envisioned by the bitcoin\nP2P network design, which is broadcast-oriented.  So, it remains an\nopen question whether we want the base bitcoin layer to even worry\nabout real-time fee negotiation and direct TX transmission.\n\nIt is possible that an instant-payments layer evolves on top of the\nbase bitcoin block chain layer, with bitcoin transactions evolving\nlargely into settlements between instant-payment intermediaries large\nand small.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-04-14T15:13:47",
                "message_text_only": "> So, to be specific... a A->B chain of transactions, that collectively\n> meet the network's fee requirements?\n\nYes.\n\n> Ideally the fee, if any, is market based and negotiated. Problem is... like\n> democracy, no matter how ugly it is, people have trouble finding a\n> better system :)\n\nI think this is something we can explore over the coming years. I\nfavor having people commonly pass transactions around outside the\nbroadcast network with the transactions and their dependencies being\nbroadcast only when there's a lack of trust between recipient and\nsender. The block chain is an optional service after all.\n\n> Furthermore, many of these ideas -- like sending TX's directly to the\n> merchant -- involve far more direct payee<->payer communication on the\n> part of the wallet client than is currently envisioned\n\nYes, though it's worth remembering that the original Bitcoin design\ndid have participants communicate directly. When I talked with Satoshi\nin 2009 he saw the pay-to-IP-address mode imagined as the normal way\nto make payments, with pay-to-address being used as a kind of backup\nfor when the recipient was offline.\n\nIn the end that's not how things evolved, but it the pendulum could\neasily swing back the other way."
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-14T20:20:50",
                "message_text_only": "On Sat, Apr 14, 2012 at 11:13 AM, Mike Hearn <mike at plan99.net> wrote:\n>> So, to be specific... a A->B chain of transactions, that collectively\n>> meet the network's fee requirements?\n>\n> Yes.\n\nACK on the concept\n\n>> Ideally the fee, if any, is market based and negotiated. Problem is... like\n>> democracy, no matter how ugly it is, people have trouble finding a\n>> better system :)\n>\n> I think this is something we can explore over the coming years. I\n> favor having people commonly pass transactions around outside the\n> broadcast network with the transactions and their dependencies being\n> broadcast only when there's a lack of trust between recipient and\n> sender. The block chain is an optional service after all.\n\nAgreed.  A TX is just a signed message.  No reason why it -must- use\nmainnet's distributed notary service.\n\n>> Furthermore, many of these ideas -- like sending TX's directly to the\n>> merchant -- involve far more direct payee<->payer communication on the\n>> part of the wallet client than is currently envisioned\n>\n> Yes, though it's worth remembering that the original Bitcoin design\n> did have participants communicate directly. When I talked with Satoshi\n> in 2009 he saw the pay-to-IP-address mode imagined as the normal way\n> to make payments, with pay-to-address being used as a kind of backup\n> for when the recipient was offline.\n>\n> In the end that's not how things evolved, but it the pendulum could\n> easily swing back the other way.\n\nIIRC pay-to-IP was removed because it was unreliable -and- detrimental\nto privacy?  ISTR Satoshi specifically disliking the privacy elements\nof p2ip.\n\nBut I also have a \"gut feeling\" that these sorts of payments and\ndirect communication should be done via a wholly separate protocol\nthan the bitcoin P2P protocol.  Doing p2ip as it was done originally,\ninside the bitcoin P2P protocol, was a mistake.  Extensible as it is,\nI think a better job -- and faster evolution -- can be done with a\nseparate protocol on a separate port.\n\nSome HTTP derivative would probably make life easier for mobile\npayments and firewalled scenarios, and for client->merchant\ncommunications, for instance.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-04-14T21:27:16",
                "message_text_only": "On Sat, Apr 14, 2012 at 04:20:50PM -0400, Jeff Garzik wrote:\n> >> Furthermore, many of these ideas -- like sending TX's directly to the\n> >> merchant -- involve far more direct payee<->payer communication on the\n> >> part of the wallet client than is currently envisioned\n> >\n> > Yes, though it's worth remembering that the original Bitcoin design\n> > did have participants communicate directly. When I talked with Satoshi\n> > in 2009 he saw the pay-to-IP-address mode imagined as the normal way\n> > to make payments, with pay-to-address being used as a kind of backup\n> > for when the recipient was offline.\n> >\n> > In the end that's not how things evolved, but it the pendulum could\n> > easily swing back the other way.\n> \n> But I also have a \"gut feeling\" that these sorts of payments and\n> direct communication should be done via a wholly separate protocol\n> than the bitcoin P2P protocol.  Doing p2ip as it was done originally,\n> inside the bitcoin P2P protocol, was a mistake.  Extensible as it is,\n> I think a better job -- and faster evolution -- can be done with a\n> separate protocol on a separate port.\n> \n> Some HTTP derivative would probably make life easier for mobile\n> payments and firewalled scenarios, and for client->merchant\n> communications, for instance.\n\nHave you ever read https://gist.github.com/1237788 ?\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-14T22:49:18",
                "message_text_only": "On Sat, Apr 14, 2012 at 5:27 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Sat, Apr 14, 2012 at 04:20:50PM -0400, Jeff Garzik wrote:\n>> Some HTTP derivative would probably make life easier for mobile\n>> payments and firewalled scenarios, and for client->merchant\n>> communications, for instance.\n>\n> Have you ever read https://gist.github.com/1237788 ?\n\nLooks like you're already headed in the right direction :)\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2012-04-15T08:12:37",
                "message_text_only": "On 04/14/2012 10:20 PM, Jeff Garzik wrote:\n\n>>> Furthermore, many of these ideas -- like sending TX's directly to the\n>>> merchant -- involve far more direct payee<->payer communication on the\n>>> part of the wallet client than is currently envisioned\n>>\n>> Yes, though it's worth remembering that the original Bitcoin design\n>> did have participants communicate directly. When I talked with Satoshi\n>> in 2009 he saw the pay-to-IP-address mode imagined as the normal way\n>> to make payments, with pay-to-address being used as a kind of backup\n>> for when the recipient was offline.\n>>\n>> In the end that's not how things evolved, but it the pendulum could\n>> easily swing back the other way.\n> \n> IIRC pay-to-IP was removed because it was unreliable -and- detrimental\n> to privacy?  ISTR Satoshi specifically disliking the privacy elements\n> of p2ip.\n> \n> But I also have a \"gut feeling\" that these sorts of payments and\n> direct communication should be done via a wholly separate protocol\n> than the bitcoin P2P protocol.  Doing p2ip as it was done originally,\n> inside the bitcoin P2P protocol, was a mistake.  Extensible as it is,\n> I think a better job -- and faster evolution -- can be done with a\n> separate protocol on a separate port.\n\nJust to let you know, Bitcoin Wallet for Android already supports\ndirectly sending transactions via NFC and QR-Code. Currently, receiving\nsuch a transaction is handled the same way as if it was received via P2P.\n\nThis means the sender does not need to have internet access the moment\nhe pays. The transaction is being broadcast into the P2P network by the\nreceiver.\n\nCheers,\n\nAndreas"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-04-15T10:54:23",
                "message_text_only": "On 4/12/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> 1.  N = 1 or 2 or whatever the community prefers.  Ideally enough time\n> for a third-tier miner, mining strange TXs, finds a block.\n> 2.  H1 = height of block chain, when a TX is received\n> 3.  H2 = H1 + (144 * N)\n> 4.  If block chain height reaches H2, and TX has not made it into a\n> block, drop TX from memory pool\n\nWhy not just adding a field expiration_block = H2?\nIt seems more explicit and flexible than using a 144 * N constant.\nYou're changing the protocol anyway, right?\n\nAnother question, aren't different peers going to get different H1 for\nthe same tx?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-04-15T15:17:04",
                "message_text_only": "2012/4/15 Jorge Tim\u00f3n <timon.elviejo at gmail.com>:\n> On 4/12/12, Jeff Garzik <jgarzik at exmulti.com> wrote:\n>> 1. \u00a0N = 1 or 2 or whatever the community prefers. \u00a0Ideally enough time\n>> for a third-tier miner, mining strange TXs, finds a block.\n>> 2. \u00a0H1 = height of block chain, when a TX is received\n>> 3. \u00a0H2 = H1 + (144 * N)\n>> 4. \u00a0If block chain height reaches H2, and TX has not made it into a\n>> block, drop TX from memory pool\n>\n> Why not just adding a field expiration_block = H2?\n> It seems more explicit and flexible than using a 144 * N constant.\n> You're changing the protocol anyway, right?\n\nNo, not changing the protocol.\n\nFurther, adding a field to TX would imply the client needed to rewrite\nthe TX for each retransmit, changing the hash.  Not good at all.\n\n> Another question, aren't different peers going to get different H1 for\n> the same tx?\n\nTypically no, because 99.9% of TX's make it throughout the network in\nseconds.  But yes it is possible, just like it is possible today to\nreceive a TX at various times.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin TX fill-or-kill deterministic behavior",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Andreas Schildbach",
                "Mike Hearn",
                "Alan Reiner",
                "Andy Parkins",
                "Jorge Tim\u00f3n",
                "Pieter Wuille"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 22561
        }
    },
    {
        "title": "[Bitcoin-development] Announcing the IFEX Project",
        "thread_messages": [
            {
                "author": "Walter Stanish",
                "date": "2012-04-13T09:34:20",
                "message_text_only": "The Internet Financial EXchange (IFEX) Project is an open body for the\ndiscussion and development of financial standards for the internet\ncommunity.  The project seeks to focus on enhancing interoperability\nbetween financial settlement systems of all types, including\nconventional financial systems, emerging digital currencies,\nalternative financial communities, and financial service providers.\n\nInterested parties are invited to review the proposals on the website\nat http://www.ifex-project.org/ and join the mailing list at\nhttp://group.ifex-project.org/\n\nTwo items on the site that may be of particular interest:\n\n(1) The latest version of the IIBAN Proposal (v1) for financial\nendpoint identification at\nhttp://www.ifex-project.org/our-proposals/iiban.  This latest version\nincludes initial IANA registry contents and a reference mechanism for\nfinancial endpoint transcription error correction. (Relevance: In\ncontrast to settlement system-specific financial endpoint identifiers,\nIIBAN provides a democratically allocated, 13 character identifier\nthat is already familiar in format to users in Europe and other\ncountries and is theoretically compatible with conventional banking\ninfrastructure in those regions.  In addition, IIBAN is not tied to\nany specific financial commodity or settlement system, and provides\nstrong protection against identifier transcription errors.)\n\n(2) The IFEX Protocol is a *work in progress* that hopes to bridge the\ngap between conventional financial systems, emerging digital\ncurrencies, alternative financial communities, and financial service\nproviders by providing a standard protocol for transaction and\nsettlement path negotiation with arbitrary financial instruments,\ncurrencies or assets.  (Relevance: better connectivity, lower\nsettlement fees, real time redundant financial routing, arbitrary\ninstrument/currency/asset handling)\n\nHow IFEX's proposed infrastructure differs from existing projects:\n - Not a currency, not a settlement-network, but a mechanism for bridging them.\n - Broader and more inclusive scope than existing vendor-specific APIs\nand conventional finance industry networking protocols. Global focus.\nNo legacy 'features'. No artificial barriers to innovators.\n\nThe hope is to move towards an open source implementation of the (work\nin progress) IFEX protocol that interoperates with major and emerging\nsettlement networks for the benefit of all parts of the community. We\nhave already had expressions of interest from representatives in a\nrange of communities (Bitcoin, CES, Ripple, W3C Web Payments, digital\ncurrency exchange developers, etc.), and look forward your input on\nthe mailing list.\n\nHappy Friday the 13th!\n\nRegards,\nWalter Stanish\nThe IFEX Project\nhttp://www.ifex-project.org/"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-04-13T10:16:07",
                "message_text_only": "Hi Walter,\n\nThis could be of interest to the XChange project. See GitHub:\nhttps://github.com/timmolter/XChange\n\nThe aim of this project is to provide a unifed API for applications to\naccess financial exchanges. At present it supports Bitcoin exchanges (MtGox\nand Intersango are the primary focus with others to follow). It is in the\nvery early stages of development, but is likely to be integrated into the\nMultiBit Bitcoin client (see http://multibit.org) in the near future (early\nprototypes are available directly from sources).\n\nOne problem that the XChange development team faces is that each exchange\nrolls its own data model and uses its own protocol (web socket, socket IO,\ndirect socket and so on). To provide a reference implementation of how an\nexchange should publish its data would be beneficial.\n\nKind regards,\n\nGary\n\nOn 13 April 2012 10:34, Walter Stanish <walter at stani.sh> wrote:\n\n> The Internet Financial EXchange (IFEX) Project is an open body for the\n> discussion and development of financial standards for the internet\n> community.  The project seeks to focus on enhancing interoperability\n> between financial settlement systems of all types, including\n> conventional financial systems, emerging digital currencies,\n> alternative financial communities, and financial service providers.\n>\n> Interested parties are invited to review the proposals on the website\n> at http://www.ifex-project.org/ and join the mailing list at\n> http://group.ifex-project.org/\n>\n> Two items on the site that may be of particular interest:\n>\n> (1) The latest version of the IIBAN Proposal (v1) for financial\n> endpoint identification at\n> http://www.ifex-project.org/our-proposals/iiban.  This latest version\n> includes initial IANA registry contents and a reference mechanism for\n> financial endpoint transcription error correction. (Relevance: In\n> contrast to settlement system-specific financial endpoint identifiers,\n> IIBAN provides a democratically allocated, 13 character identifier\n> that is already familiar in format to users in Europe and other\n> countries and is theoretically compatible with conventional banking\n> infrastructure in those regions.  In addition, IIBAN is not tied to\n> any specific financial commodity or settlement system, and provides\n> strong protection against identifier transcription errors.)\n>\n> (2) The IFEX Protocol is a *work in progress* that hopes to bridge the\n> gap between conventional financial systems, emerging digital\n> currencies, alternative financial communities, and financial service\n> providers by providing a standard protocol for transaction and\n> settlement path negotiation with arbitrary financial instruments,\n> currencies or assets.  (Relevance: better connectivity, lower\n> settlement fees, real time redundant financial routing, arbitrary\n> instrument/currency/asset handling)\n>\n> How IFEX's proposed infrastructure differs from existing projects:\n>  - Not a currency, not a settlement-network, but a mechanism for bridging\n> them.\n>  - Broader and more inclusive scope than existing vendor-specific APIs\n> and conventional finance industry networking protocols. Global focus.\n> No legacy 'features'. No artificial barriers to innovators.\n>\n> The hope is to move towards an open source implementation of the (work\n> in progress) IFEX protocol that interoperates with major and emerging\n> settlement networks for the benefit of all parts of the community. We\n> have already had expressions of interest from representatives in a\n> range of communities (Bitcoin, CES, Ripple, W3C Web Payments, digital\n> currency exchange developers, etc.), and look forward your input on\n> the mailing list.\n>\n> Happy Friday the 13th!\n>\n> Regards,\n> Walter Stanish\n> The IFEX Project\n> http://www.ifex-project.org/\n>\n>\n> ------------------------------------------------------------------------------\n> For Developers, A Lot Can Happen In A Second.\n> Boundary is the first to Know...and Tell You.\n> Monitor Your Applications in Ultra-Fine Resolution. Try it FREE!\n> http://p.sf.net/sfu/Boundary-d2dvs2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120413/af7ebaac/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Announcing the IFEX Project",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gary Rowe",
                "Walter Stanish"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7186
        }
    },
    {
        "title": "[Bitcoin-development] Announcement: libcoin",
        "thread_messages": [
            {
                "author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba",
                "date": "2012-04-15T04:32:30",
                "message_text_only": "Guys!\n\n Only for the record, I'll integrate BitcoinJS (app) into Diaspora and, the\nserver side will be based on libcoin!\n Of course, this code will be part of Diaspora and every single Diaspora*\nPod will be able to host its own users's wallets...  ;-)\n I appreciate any help during this development!\n\nCheers!\nThiago\n\n2012/3/28 Michael Gr\u00f8nager <gronager at ceptacle.com>\n\n> Fixed in latest git - it was in src/coin/version.in: export.h -> Export.h\n>\n> Also added a couple of other fixes and everything now build on ubuntu\n> (with boost 1.42/46)\n>\n> /M\n>\n> On 27/03/2012, at 11:58, Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba wrote:\n>\n> > Hi!\n> >\n> >  I'm trying to compile libcoin again and I'm seeing the following error:\n> >\n> > libcoin at xapado:~/libcoin$ make\n> > Scanning dependencies of target coin\n> > [  1%] Building CXX object src/coin/CMakeFiles/coin.dir/util.o\n> > In file included from\n> /home/libcoin/libcoin/include/coin/serialize.h:22:0,\n> >                  from /home/libcoin/libcoin/include/coin/uint256.h:8,\n> >                  from /home/libcoin/libcoin/include/coin/util.h:10,\n> >                  from /home/libcoin/libcoin/src/coin/util.cpp:6:\n> > /home/libcoin/libcoin/include/coin/Version.h:5:25: fatal error:\n> coin/export.h: No such file or directory\n> > compilation terminated.\n> > make[2]: *** [src/coin/CMakeFiles/coin.dir/util.o] Error 1\n> > make[1]: *** [src/coin/CMakeFiles/coin.dir/all] Error 2\n> > make: *** [all] Error 2\n> >\n> >  Any help?!\n> >\n> > Thanks!\n> > Thiago\n> >\n> ------------------------------------------------------------------------------\n> > This SF email is sponsosred by:\n> > Try Windows Azure free for 90 days Click Here\n> >\n> http://p.sf.net/sfu/sfd2d-msazure_______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> Michael Gronager, PhD\n> Director, Ceptacle\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 45 14 01\n> E-mail: gronager at ceptacle.com\n> Web: http://www.ceptacle.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120415/11fa696c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Announcement: libcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2258
        }
    },
    {
        "title": "[Bitcoin-development] AreInputsStandard() mistake",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-04-24T17:21:14",
                "message_text_only": "Hey,\n\nOnly a small thing - I think the first check in that function should be an assert. There is a problem if that function is called a coinbase tx."
            }
        ],
        "thread_summary": {
            "title": "AreInputsStandard() mistake",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 149
        }
    },
    {
        "title": "[Bitcoin-development] Trusted identities",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2012-04-26T15:49:28",
                "message_text_only": "It recently occured to me that we can use the public nature of the block\nchain to create trusted identities, for a specific form of trust.\n\nLets suppose Alice has some bitcoins held at bitcoin address A. She\nwants to establish trust in the \"identity\" associated with the ECC\nkeypair associated with A, for instance for the purpose of having other\nusers trust her not to attempt to double spend. Since the trust she\nseeks is financial in nature, she can do this by valuing the identity\nassociated with A, by delibrately throwing away resources. A simple way\nto do this would of course be to transfer coins to a null address,\nprovably incurring a cost to her.\n\nA more socially responsible way would be for her to create a series of\ntransactions that happen to have large, and equal, transaction fees.\nBitcoin makes the assumption that no one entity controls more than 50%\nof the network, so if she makes n of these transactions consecutively,\neach spending m BTC to transaction fees, there is a high probability\nthat she has given up at least n/2 * m BTC of value. This of course is\nall public knowledge, recorded in the block chain. It also increases the\ntransaction fees for miners, which will be very important for the\nnetwork in the future.\n\nNow Bob can easily examine the block chain, and upon verifying Alice's\ntrust purchase, can decide to accept a zero-confirmation transaction at\nface value. If Alice breaks that promise, he simply publishes her signed\ntransaction proving that Alice is a fraudster, and future Bob's will\ndistrust Alice's trusted identity, thus destroying the value needed to\ncreate it.\n\nIn effect, we now have a distributed green address system.\n\nNow Alice could try to mount a double-spend attack on a whole bunch of\npeople at once, hoping to have them all accept the transaction. However\nas it is the \"just trust them\" model works pretty well already.\n\n\nA good usecase for this idea, beyond the obvious fast payments\napplication, is a distributed anonymizer. Alice can now publish her\nrequest to anonymize coins, and other trusted identities can make their\nbids. If Alice accepts a bid from Bob, she will want Bob to send her the\nanonymized coins *prior* to her transaction going through, thus breaking\nthe temporal connection between the transactions. Now Alice can give Bob\nthe signed payment transaction, and Bob can submit his payment\ntransaction to the network first, knowing that Alice isn't going to try\nto rip him off. Bob can also have a trusted identity which signed the\ncontract for the anonymizer transaction, and similarly if he rips Alice\noff, she can publish it for the world to see.\n\nA more subtle effect, is this makes sybil attacks more difficult. To\npretend to be a thousand identities is going to now require 1,000 * n\ncoins, and attempting to pull this attack off inherently strengthens the\nbitcoin network. Obviously we can apply this principle to other things\nlike tor nodes as well.\n\n-- \nhttp://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120426/1547a5a1/attachment.sig>"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-04-26T17:11:51",
                "message_text_only": "These are interesting thoughts, karma for bitcoins essentially.\n\nI would like CoinLab to publish a 'cost of subverting 1-n transactions with\n90% probability' metric soon, and I think it would help everyone to\nunderstand what that number is.\n\nWhen we started out, you probably needed to wait 5 blocks for $10 or $20 of\nbitcoin value transfer.\n\nNow, I'd happily accept a $1k transaction with 1 confirmation.\n\nMore difficulty shortens the safe time we can transact large volumes in,\nwhich is good for the network.\n\nI'm not sure of the current implementation of replacement transactions, can\nanyone on the core team speak to this? Can I replace transactions, or is\nthat part of the spec unimplemented or deprecated right now?\n\nPeter\n\n\nOn Thu, Apr 26, 2012 at 8:49 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> It recently occured to me that we can use the public nature of the block\n> chain to create trusted identities, for a specific form of trust.\n>\n> Lets suppose Alice has some bitcoins held at bitcoin address A. She\n> wants to establish trust in the \"identity\" associated with the ECC\n> keypair associated with A, for instance for the purpose of having other\n> users trust her not to attempt to double spend. Since the trust she\n> seeks is financial in nature, she can do this by valuing the identity\n> associated with A, by delibrately throwing away resources. A simple way\n> to do this would of course be to transfer coins to a null address,\n> provably incurring a cost to her.\n>\n> A more socially responsible way would be for her to create a series of\n> transactions that happen to have large, and equal, transaction fees.\n> Bitcoin makes the assumption that no one entity controls more than 50%\n> of the network, so if she makes n of these transactions consecutively,\n> each spending m BTC to transaction fees, there is a high probability\n> that she has given up at least n/2 * m BTC of value. This of course is\n> all public knowledge, recorded in the block chain. It also increases the\n> transaction fees for miners, which will be very important for the\n> network in the future.\n>\n> Now Bob can easily examine the block chain, and upon verifying Alice's\n> trust purchase, can decide to accept a zero-confirmation transaction at\n> face value. If Alice breaks that promise, he simply publishes her signed\n> transaction proving that Alice is a fraudster, and future Bob's will\n> distrust Alice's trusted identity, thus destroying the value needed to\n> create it.\n>\n> In effect, we now have a distributed green address system.\n>\n> Now Alice could try to mount a double-spend attack on a whole bunch of\n> people at once, hoping to have them all accept the transaction. However\n> as it is the \"just trust them\" model works pretty well already.\n>\n>\n> A good usecase for this idea, beyond the obvious fast payments\n> application, is a distributed anonymizer. Alice can now publish her\n> request to anonymize coins, and other trusted identities can make their\n> bids. If Alice accepts a bid from Bob, she will want Bob to send her the\n> anonymized coins *prior* to her transaction going through, thus breaking\n> the temporal connection between the transactions. Now Alice can give Bob\n> the signed payment transaction, and Bob can submit his payment\n> transaction to the network first, knowing that Alice isn't going to try\n> to rip him off. Bob can also have a trusted identity which signed the\n> contract for the anonymizer transaction, and similarly if he rips Alice\n> off, she can publish it for the world to see.\n>\n> A more subtle effect, is this makes sybil attacks more difficult. To\n> pretend to be a thousand identities is going to now require 1,000 * n\n> coins, and attempting to pull this attack off inherently strengthens the\n> bitcoin network. Obviously we can apply this principle to other things\n> like tor nodes as well.\n>\n> --\n> http://petertodd.org 'peter'[:-1]@petertodd.org\n>\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.10 (GNU/Linux)\n>\n> iQEcBAEBAgAGBQJPmW6EAAoJEH+rEUJn5PoEZfEH/ixptlMX9MzP71bCHMkj7YN1\n> y6GEkc1vNhyHu01NX77vzSqR4trbVnWJeJ5hH8EB5tgYRwmI17XoQW6Iz8yEXXgO\n> JqUKCTBBexGE+F5RfBkizJ9ap5wXwVrAOIMy/KurSdST+PWMXIPQFaGark01uKcG\n> M4VXg3U9fc/0Zz1QyKpRTI5O7ZSBqPzEh/Xf4TujR39nUtaI5mkT/bmA3+Te7oRT\n> 34QO7ryF7U001Xz2VJCfm9AE8mPPZjMavLTs/XvPSqTdliVCZpjGGHzcJ2BPrni5\n> LEPBsBBxNsuwFGjnRobQwrkPtmYGFntseMLzCJ3iGXWYwedssBg2LLOx9QaXG04=\n> =PftQ\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\nSkype: vessenes\nGoogle+ <https://plus.google.com/112885659993091300749>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120426/cd25bb9f/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2012-04-26T17:30:00",
                "message_text_only": "On Thu, Apr 26, 2012 at 10:11:51AM -0700, Peter Vessenes wrote:\n> These are interesting thoughts, karma for bitcoins essentially.\n> \n> I would like CoinLab to publish a 'cost of subverting 1-n transactions with\n> 90% probability' metric soon, and I think it would help everyone to\n> understand what that number is.\n\nThere's gotta be a lot of subtlies there. For instance, if I just want\nto double-spend, the easiest approach would be to first buy a whole\nbunch of VPS's, each with different /16's for their IP address to defeat\nthat anti-sybil measure. Then figure out what is the set of nodes\nclosest to my target - easier for an active target that makes a lot of\ntransactions.\n\nThen it's just a matter of giving them my transaction, and immediately\nflooding the network faster with my nodes than their single node. It's\nnot block-replacement, but it would be effective against people who\naccept 0-confirmations. (although as Gavin has pointed out elsewhere, in\nthe future miners may be very happy to replace transactions for more\nfees in that kind of circumstance)\n\nOf course, this whole trusted identities business could be equally used\nfor the bitcoin flood network as a whole to prevent sybil's, and perhaps\neven get guarantees of behavior like \"My node respects nLockTime and\nwon't ignore it for a higher-fee transaction replacement\"\n\n> When we started out, you probably needed to wait 5 blocks for $10 or $20 of\n> bitcoin value transfer.\n> \n> Now, I'd happily accept a $1k transaction with 1 confirmation.\n\nYup, especially when a human is in the loop.\n\n> More difficulty shortens the safe time we can transact large volumes in,\n> which is good for the network.\n> \n> I'm not sure of the current implementation of replacement transactions, can\n> anyone on the core team speak to this? Can I replace transactions, or is\n> that part of the spec unimplemented or deprecated right now?\n\nMy understanding is it's completely disabled.\n\n-- \nhttp://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120426/6028de45/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-26T18:00:59",
                "message_text_only": "On 04/26/2012 01:30 PM, Peter Todd wrote:\n>\n>> More difficulty shortens the safe time we can transact large volumes in,\n>> which is good for the network.\n>>\n>> I'm not sure of the current implementation of replacement transactions, can\n>> anyone on the core team speak to this? Can I replace transactions, or is\n>> that part of the spec unimplemented or deprecated right now?\n> My understanding is it's completely disabled.\n\nWent on a scavenger hunt with Gavin a couple weeks concerning tx \nreplacement.  The conclusion was that if,\n(1) Transaction has lock-time in the future  AND\n(2) Transaction has non-maximum sequence number\n\nThen the transaction will both propagate and be accepted into nodes' \nmemory pools, but will not go into any block until locktime expires.  If \nthe lock-time is in the past OR sequence number on all TxIns is \n0xffffffff, then it will be immediately valid and included in the \nblockchain.\n\nBut the actual \"replacement\" mechanism is disabled.  Therefore, the \nnodes accept the tx as if it's replaceable, but don't allow it to be \nreplaced.  This means that it is effectively replaceable *once*, but \nonly if you inject a final transaction into the blockchain.   You can't \nbroadcast a final version of the same tx, because it will conflict with \nthe non-final one sitting in all the other nodes' memory pools.  You \nneed a miner to agree to remove the non-final tx from their memory pool \nand specifically include your replacement.\n\n-Alan\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120426/ad9ce2e4/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-04-26T17:59:45",
                "message_text_only": "look at the first line of the if statement\n\n\n\u00a0\u00a0\u00a0\u00a0// Check for conflicts with in-memory transactions\n\u00a0\u00a0\u00a0\u00a0CTransaction* ptxOld = NULL;\n\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < tx.vin.size(); i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COutPoint outpoint = tx.vin[i].prevout;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (mapNextTx.count(outpoint))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Disable replacement feature for now\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Allow replacing with a newer version of the same transaction\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i != 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptxOld = mapNextTx[outpoint].ptx;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ptxOld->IsFinal())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!tx.IsNewerThan(*ptxOld))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < tx.vin.size(); i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COutPoint outpoint = tx.vin[i].prevout;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\n\n________________________________\nFrom: Peter Vessenes <peter at coinlab.com>\nTo: Peter Todd <pete at petertodd.org> \nCc: bitcoin-development at lists.sourceforge.net \nSent: Thursday, April 26, 2012 6:11 PM\nSubject: Re: [Bitcoin-development] Trusted identities\n\n\nThese are interesting thoughts, karma for bitcoins essentially.\n\nI would like CoinLab to publish a 'cost of subverting 1-n transactions with 90% probability' metric soon, and I think it would help everyone to understand what that number is.\n\nWhen we started out, you probably needed to wait 5 blocks for $10 or $20 of bitcoin value transfer.\n\nNow, I'd happily accept a $1k transaction with 1 confirmation.\u00a0\n\nMore difficulty shortens the safe time we can transact large volumes in, which is good for the network.\n\nI'm not sure of the current implementation of replacement transactions, can anyone on the core team speak to this? Can I replace transactions, or is that part of the spec unimplemented or deprecated right now?\n\nPeter\n\n\n\nOn Thu, Apr 26, 2012 at 8:49 AM, Peter Todd <pete at petertodd.org> wrote:\n\nIt recently occured to me that we can use the public nature of the block\n>chain to create trusted identities, for a specific form of trust.\n>\n>Lets suppose Alice has some bitcoins held at bitcoin address A. She\n>wants to establish trust in the \"identity\" associated with the ECC\n>keypair associated with A, for instance for the purpose of having other\n>users trust her not to attempt to double spend. Since the trust she\n>seeks is financial in nature, she can do this by valuing the identity\n>associated with A, by delibrately throwing away resources. A simple way\n>to do this would of course be to transfer coins to a null address,\n>provably incurring a cost to her.\n>\n>A more socially responsible way would be for her to create a series of\n>transactions that happen to have large, and equal, transaction fees.\n>Bitcoin makes the assumption that no one entity controls more than 50%\n>of the network, so if she makes n of these transactions consecutively,\n>each spending m BTC to transaction fees, there is a high probability\n>that she has given up at least n/2 * m BTC of value. This of course is\n>all public knowledge, recorded in the block chain. It also increases the\n>transaction fees for miners, which will be very important for the\n>network in the future.\n>\n>Now Bob can easily examine the block chain, and upon verifying Alice's\n>trust purchase, can decide to accept a zero-confirmation transaction at\n>face value. If Alice breaks that promise, he simply publishes her signed\n>transaction proving that Alice is a fraudster, and future Bob's will\n>distrust Alice's trusted identity, thus destroying the value needed to\n>create it.\n>\n>In effect, we now have a distributed green address system.\n>\n>Now Alice could try to mount a double-spend attack on a whole bunch of\n>people at once, hoping to have them all accept the transaction. However\n>as it is the \"just trust them\" model works pretty well already.\n>\n>\n>A good usecase for this idea, beyond the obvious fast payments\n>application, is a distributed anonymizer. Alice can now publish her\n>request to anonymize coins, and other trusted identities can make their\n>bids. If Alice accepts a bid from Bob, she will want Bob to send her the\n>anonymized coins *prior* to her transaction going through, thus breaking\n>the temporal connection between the transactions. Now Alice can give Bob\n>the signed payment transaction, and Bob can submit his payment\n>transaction to the network first, knowing that Alice isn't going to try\n>to rip him off. Bob can also have a trusted identity which signed the\n>contract for the anonymizer transaction, and similarly if he rips Alice\n>off, she can publish it for the world to see.\n>\n>A more subtle effect, is this makes sybil attacks more difficult. To\n>pretend to be a thousand identities is going to now require 1,000 * n\n>coins, and attempting to pull this attack off inherently strengthens the\n>bitcoin network. Obviously we can apply this principle to other things\n>like tor nodes as well.\n>\n>--\n>http://petertodd.org 'peter'[:-1]@petertodd.org\n>\n>-----BEGIN PGP SIGNATURE-----\n>Version: GnuPG v1.4.10 (GNU/Linux)\n>\n>iQEcBAEBAgAGBQJPmW6EAAoJEH+rEUJn5PoEZfEH/ixptlMX9MzP71bCHMkj7YN1\n>y6GEkc1vNhyHu01NX77vzSqR4trbVnWJeJ5hH8EB5tgYRwmI17XoQW6Iz8yEXXgO\n>JqUKCTBBexGE+F5RfBkizJ9ap5wXwVrAOIMy/KurSdST+PWMXIPQFaGark01uKcG\n>M4VXg3U9fc/0Zz1QyKpRTI5O7ZSBqPzEh/Xf4TujR39nUtaI5mkT/bmA3+Te7oRT\n>34QO7ryF7U001Xz2VJCfm9AE8mPPZjMavLTs/XvPSqTdliVCZpjGGHzcJ2BPrni5\n>LEPBsBBxNsuwFGjnRobQwrkPtmYGFntseMLzCJ3iGXWYwedssBg2LLOx9QaXG04=\n>=PftQ\n>-----END PGP SIGNATURE-----\n>\n>------------------------------------------------------------------------------\n>Live Security Virtual Conference\n>Exclusive live event will cover all the ways today's security and\n>threat landscape has changed and how IT managers can respond. Discussions\n>will include endpoint security, mobile security and the latest in malware\n>threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \n\nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\nSkype: vessenes\nGoogle+ \n\n------------------------------------------------------------------------------\nLive Security Virtual Conference\nExclusive live event will cover all the ways today's security and \nthreat landscape has changed and how IT managers can respond. Discussions \nwill include endpoint security, mobile security and the latest in malware \nthreats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Trusted identities",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Vessenes",
                "Alan Reiner",
                "Peter Todd",
                "Amir Taaki"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 19368
        }
    },
    {
        "title": "[Bitcoin-development] bitcoin.org luke-jr/multiclient branch",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-04-29T11:08:45",
                "message_text_only": "Hi,\n\nCan we pull this? It's been there for almost 20 days now.\n\n\nhttps://github.com/bitcoin/bitcoin.org/pull/32\n\nMy comment:\n\"As a first step, this should probably be pulled right away and then \nany improvements can be made after. Lets get the ball rolling rather \nthan debating the colour of the bike-shed!\nhttp://hackerspaces.org/wiki/The_Bikeshed_Anti-Pattern\n\nAlthough I agree with Mike Hearn - far better would be a grid of 4 \ncolumns and X rows. Each box has a linkable title, a picture and then \n850 word blurb from the project. I mean where would libbitcoin fit in \nhere? I'd want to say the design philosophy behind it and that there's \nPython bindings - a circular peg that doesn't fit in the square boxes of this table. Although whatever, that's not important. I'm just happy to \nsee MultiBit, Electrum and Armory get exposure.\"\n\nAnyone that wants to see what it looks like can add this to their hosts file:\n\n176.31.24.241\u00a0 bitcoin.org\n\nThen navigate to http://bitcoin.org"
            }
        ],
        "thread_summary": {
            "title": "bitcoin.org luke-jr/multiclient branch",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 983
        }
    },
    {
        "title": "[Bitcoin-development] BIP to improve the availability of blocks",
        "thread_messages": [
            {
                "author": "Rebroad (sourceforge)",
                "date": "2012-04-30T16:40:18",
                "message_text_only": "Dear Bitcoin developers,\n\nIn brief, the proposal I have is to extend the protocol to allow\npartial block download and upload. This is for people with\nintermittent connectivity or restricted connectivity. e.g. my own\ninternet connection is quite slow, and my ISP routinely sends RSTs to\nboth sides of connections to severe them. This often happens during\nblock download and upload. I also often encounter the reception of\nblocks I have already received, further wasting bandwidth. This\nhappens as quite often it can be far more than 2 minutes before block\nreception occurs following the getdata request, by which time my node\nhas already sent a new getdata to another node requesting the same\nblock.\n\nMy proposal is that in addition to the size (which is advertised in\nthe header), the hash is also advertised in the header (of a block).\nThis would help nodes to determine whether they wanted to reject the\ndownload. (e.g. if it already had a block matching that hash). This of\ncourse wouldn't prevent a rogue node from sending an incorrect hash,\nbut this would aid in saving bandwidth amongst behaving nodes.\n\nThe other part of the proposal is to allow nodes to request upload and\ndownload blocks that have already been partially downloaded.\n\nThis could be done by modifying the existing methods of upload,\ndownload, or by adding a new method, perhaps even using HTTP/HTTPS or\nsomething similar. This would also help nodes to obtain the blockchain\nwho have restrictive ISPs, especially if they are being served on port\n80 or 443. This could perhaps also allow web caches to keep caches of\nthe blockchain, thereby making it also more available also.\n\nCurrently, without this\u00a0functionality, nodes with restrictive (or\nslow) internet have some options, such as going via a tor proxy, but\ndue to the latency, the problem with multiple receptions of the same\nblock still occur.\n\nHopefully, not too clueless a post for my first post to this mailing list.\n\nRegards,\nEd"
            },
            {
                "author": "Wladimir",
                "date": "2012-04-30T18:26:26",
                "message_text_only": "On Mon, Apr 30, 2012 at 6:40 PM, Rebroad (sourceforge) <\nrebroad+sourceforge.net at gmail.com> wrote:\n\n>\n> My proposal is that in addition to the size (which is advertised in\n> the header), the hash is also advertised in the header (of a block).\n> This would help nodes to determine whether they wanted to reject the\n> download. (e.g. if it already had a block matching that hash). This of\n> course wouldn't prevent a rogue node from sending an incorrect hash,\n> but this would aid in saving bandwidth amongst behaving nodes.\n>\n\nI suppose it would make sense for clients to be able to reject blocks that\nthey already have, if that's not currently possible.\n\nThe other part of the proposal is to allow nodes to request upload and\n> download blocks that have already been partially downloaded.\n>\n> This could be done by modifying the existing methods of upload,\n> download, or by adding a new method, perhaps even using HTTP/HTTPS or\n> something similar. This would also help nodes to obtain the blockchain\n> who have restrictive ISPs, especially if they are being served on port\n> 80 or 443. This could perhaps also allow web caches to keep caches of\n> the blockchain, thereby making it also more available also.\n>\n\nYou don't need a BIP if you want to somehow fetch the (initial) block chain\noutside the bitcoin protocol. You could download it from some http server\nor even pass it along on an USB stick. Then with a simple client change you\ncan import it: https://github.com/bitcoin/bitcoin/pull/883 .\n\nCurrently, without this functionality, nodes with restrictive (or\n> slow) internet have some options, such as going via a tor proxy, but\n> due to the latency, the problem with multiple receptions of the same\n> block still occur.\n>\n\nIf you're behind such a slow internet connection, and concerned about every\nbit of bandwidth, it is better to run a lightweight node. For example,\nElectrum.\n\nEven if you could reduce the wasted bandwidth a bit by puzzling around with\npartial blocks, the download will still be substantial (and that's going to\nget worse before it gets better).\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120430/874d7838/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-04-30T19:11:18",
                "message_text_only": "This is optimisation where it isn't needed. Bandwidth is not the bottleneck of the Bitcoin system. It is the immense time needed to validate the blockchain.\n\nAnd clients should never send blocks first. They always send an inv packet, then you request the block. It is a disruptive change and brings little.\n\nWe don't need to optimise every aspect of Bitcoin :) Just focus on the big bits that matter, while keeping everything working with minimal changes.\n\nFor instance say we did this and to maintain backwards compatible, we introduced a new message called \"hash+block\". Now there are 2 code branches that must be maintained - urgh.\n\n\n________________________________\nFrom: Wladimir <laanwj at gmail.com>\nTo: Rebroad (sourceforge) <rebroad+sourceforge.net at gmail.com> \nCc: bitcoin-development at lists.sourceforge.net \nSent: Monday, April 30, 2012 7:26 PM\nSubject: Re: [Bitcoin-development] BIP to improve the availability of blocks\n\n\nOn Mon, Apr 30, 2012 at 6:40 PM, Rebroad (sourceforge) <rebroad+sourceforge.net at gmail.com> wrote: \n\n\n>My proposal is that in addition to the size (which is advertised in\n>the header), the hash is also advertised in the header (of a block).\n>This would help nodes to determine whether they wanted to reject the\n>download. (e.g. if it already had a block matching that hash). This of\n>course wouldn't prevent a rogue node from sending an incorrect hash,\n>but this would aid in saving bandwidth amongst behaving nodes.\n>\n\nI suppose it would make sense for clients to be able to reject blocks that they already have, if that's not currently possible.\n\n\nThe other part of the proposal is to allow nodes to request upload and\n>download blocks that have already been partially downloaded.\n>\n>This could be done by modifying the existing methods of upload,\n>download, or by adding a new method, perhaps even using HTTP/HTTPS or\n>something similar. This would also help nodes to obtain the blockchain\n>who have restrictive ISPs, especially if they are being served on port\n>80 or 443. This could perhaps also allow web caches to keep caches of\n>the blockchain, thereby making it also more available also.\n>\n\nYou don't need a BIP if you want to somehow fetch the (initial) block chain \noutside the bitcoin protocol. You could download it from some http \nserver or even pass it along on an USB stick. Then with a simple client change you can import it: https://github.com/bitcoin/bitcoin/pull/883 .\n\n\nCurrently, without this\u00a0functionality, nodes with restrictive (or\n>slow) internet have some options, such as going via a tor proxy, but\n>due to the latency, the problem with multiple receptions of the same\n>block still occur.\n>\n\nIf you're behind such a slow internet connection, and concerned about \nevery bit of bandwidth, it is better to run a lightweight node. For example, Electrum.\n\nEven if you could reduce the wasted bandwidth a bit by puzzling \naround with partial blocks, the download will still be substantial (and that's going to get worse before it gets better). \n\nWladimir\n\n\n------------------------------------------------------------------------------\nLive Security Virtual Conference\nExclusive live event will cover all the ways today's security and \nthreat landscape has changed and how IT managers can respond. Discussions \nwill include endpoint security, mobile security and the latest in malware \nthreats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Zell Faze",
                "date": "2012-04-30T20:02:47",
                "message_text_only": "Although quite true, I actually agree though that there should be some sort of checksum for the blocks.  Bandwidth may not be a bottleneck now (or ever), but it may be at some point.  This change will help Bitcoin scale.\n\n------------------------\n\"It stopped being just a website a long time ago. For many of us, most of us, Wikipedia has become an indispensable part of our daily lives.\"\n\u2014 Jimmy Wales, Founder of Wikipedia \nHelp protect it now. Please make a donation today: http://www.wikimediafoundation.org/wiki/Donate\n\n\n\n--- On Mon, 4/30/12, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> From: Amir Taaki <zgenjix at yahoo.com>\n> Subject: Re: [Bitcoin-development] BIP to improve the availability of blocks\n> To: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\n> Date: Monday, April 30, 2012, 3:11 PM\n> This is optimisation where it isn't\n> needed. Bandwidth is not the bottleneck of the Bitcoin\n> system. It is the immense time needed to validate the\n> blockchain.\n> \n> And clients should never send blocks first. They always send\n> an inv packet, then you request the block. It is a\n> disruptive change and brings little.\n> \n> We don't need to optimise every aspect of Bitcoin :) Just\n> focus on the big bits that matter, while keeping everything\n> working with minimal changes.\n> \n> For instance say we did this and to maintain backwards\n> compatible, we introduced a new message called \"hash+block\".\n> Now there are 2 code branches that must be maintained -\n> urgh.\n> \n> \n> ________________________________\n> From: Wladimir <laanwj at gmail.com>\n> To: Rebroad (sourceforge) <rebroad+sourceforge.net at gmail.com>\n> \n> Cc: bitcoin-development at lists.sourceforge.net\n> \n> Sent: Monday, April 30, 2012 7:26 PM\n> Subject: Re: [Bitcoin-development] BIP to improve the\n> availability of blocks\n> \n> \n> On Mon, Apr 30, 2012 at 6:40 PM, Rebroad (sourceforge)\n> <rebroad+sourceforge.net at gmail.com>\n> wrote: \n> \n> \n> >My proposal is that in addition to the size (which is\n> advertised in\n> >the header), the hash is also advertised in the header\n> (of a block).\n> >This would help nodes to determine whether they wanted\n> to reject the\n> >download. (e.g. if it already had a block matching that\n> hash). This of\n> >course wouldn't prevent a rogue node from sending an\n> incorrect hash,\n> >but this would aid in saving bandwidth amongst behaving\n> nodes.\n> >\n> \n> I suppose it would make sense for clients to be able to\n> reject blocks that they already have, if that's not\n> currently possible.\n> \n> \n> The other part of the proposal is to allow nodes to request\n> upload and\n> >download blocks that have already been partially\n> downloaded.\n> >\n> >This could be done by modifying the existing methods of\n> upload,\n> >download, or by adding a new method, perhaps even using\n> HTTP/HTTPS or\n> >something similar. This would also help nodes to obtain\n> the blockchain\n> >who have restrictive ISPs, especially if they are being\n> served on port\n> >80 or 443. This could perhaps also allow web caches to\n> keep caches of\n> >the blockchain, thereby making it also more available\n> also.\n> >\n> \n> You don't need a BIP if you want to somehow fetch the\n> (initial) block chain \n> outside the bitcoin protocol. You could download it from\n> some http \n> server or even pass it along on an USB stick. Then with a\n> simple client change you can import it: https://github.com/bitcoin/bitcoin/pull/883 .\n> \n> \n> Currently, without this\u00a0functionality, nodes with\n> restrictive (or\n> >slow) internet have some options, such as going via a\n> tor proxy, but\n> >due to the latency, the problem with multiple receptions\n> of the same\n> >block still occur.\n> >\n> \n> If you're behind such a slow internet connection, and\n> concerned about \n> every bit of bandwidth, it is better to run a lightweight\n> node. For example, Electrum.\n> \n> Even if you could reduce the wasted bandwidth a bit by\n> puzzling \n> around with partial blocks, the download will still be\n> substantial (and that's going to get worse before it gets\n> better). \n> \n> Wladimir\n> \n> \n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's\n> security and \n> threat landscape has changed and how IT managers can\n> respond. Discussions \n> will include endpoint security, mobile security and the\n> latest in malware \n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's\n> security and \n> threat landscape has changed and how IT managers can\n> respond. Discussions \n> will include endpoint security, mobile security and the\n> latest in malware \n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-04-30T20:54:37",
                "message_text_only": "Blocks already checksum; they hash to a low number.\n\nAlso inre: block headers, you are furnished with a previous hash in the\nfirst 80 bytes of the block. You can always cut the connection at that\nmoment if you've already seen the block headers.\n\nPeter\n\n\nOn Mon, Apr 30, 2012 at 1:02 PM, Zell Faze <zellfaze at yahoo.com> wrote:\n\n> Although quite true, I actually agree though that there should be some\n> sort of checksum for the blocks.  Bandwidth may not be a bottleneck now (or\n> ever), but it may be at some point.  This change will help Bitcoin scale.\n>\n> ------------------------\n> \"It stopped being just a website a long time ago. For many of us, most of\n> us, Wikipedia has become an indispensable part of our daily lives.\"\n> \u2014 Jimmy Wales, Founder of Wikipedia\n> Help protect it now. Please make a donation today:\n> http://www.wikimediafoundation.org/wiki/Donate\n>\n>\n>\n> --- On Mon, 4/30/12, Amir Taaki <zgenjix at yahoo.com> wrote:\n>\n> > From: Amir Taaki <zgenjix at yahoo.com>\n> > Subject: Re: [Bitcoin-development] BIP to improve the availability of\n> blocks\n> > To: \"bitcoin-development at lists.sourceforge.net\" <\n> bitcoin-development at lists.sourceforge.net>\n> > Date: Monday, April 30, 2012, 3:11 PM\n> > This is optimisation where it isn't\n> > needed. Bandwidth is not the bottleneck of the Bitcoin\n> > system. It is the immense time needed to validate the\n> > blockchain.\n> >\n> > And clients should never send blocks first. They always send\n> > an inv packet, then you request the block. It is a\n> > disruptive change and brings little.\n> >\n> > We don't need to optimise every aspect of Bitcoin :) Just\n> > focus on the big bits that matter, while keeping everything\n> > working with minimal changes.\n> >\n> > For instance say we did this and to maintain backwards\n> > compatible, we introduced a new message called \"hash+block\".\n> > Now there are 2 code branches that must be maintained -\n> > urgh.\n> >\n> >\n> > ________________________________\n> > From: Wladimir <laanwj at gmail.com>\n> > To: Rebroad (sourceforge) <rebroad+sourceforge.net at gmail.com>\n> >\n> > Cc: bitcoin-development at lists.sourceforge.net\n> >\n> > Sent: Monday, April 30, 2012 7:26 PM\n> > Subject: Re: [Bitcoin-development] BIP to improve the\n> > availability of blocks\n> >\n> >\n> > On Mon, Apr 30, 2012 at 6:40 PM, Rebroad (sourceforge)\n> > <rebroad+sourceforge.net at gmail.com>\n> > wrote:\n> >\n> >\n> > >My proposal is that in addition to the size (which is\n> > advertised in\n> > >the header), the hash is also advertised in the header\n> > (of a block).\n> > >This would help nodes to determine whether they wanted\n> > to reject the\n> > >download. (e.g. if it already had a block matching that\n> > hash). This of\n> > >course wouldn't prevent a rogue node from sending an\n> > incorrect hash,\n> > >but this would aid in saving bandwidth amongst behaving\n> > nodes.\n> > >\n> >\n> > I suppose it would make sense for clients to be able to\n> > reject blocks that they already have, if that's not\n> > currently possible.\n> >\n> >\n> > The other part of the proposal is to allow nodes to request\n> > upload and\n> > >download blocks that have already been partially\n> > downloaded.\n> > >\n> > >This could be done by modifying the existing methods of\n> > upload,\n> > >download, or by adding a new method, perhaps even using\n> > HTTP/HTTPS or\n> > >something similar. This would also help nodes to obtain\n> > the blockchain\n> > >who have restrictive ISPs, especially if they are being\n> > served on port\n> > >80 or 443. This could perhaps also allow web caches to\n> > keep caches of\n> > >the blockchain, thereby making it also more available\n> > also.\n> > >\n> >\n> > You don't need a BIP if you want to somehow fetch the\n> > (initial) block chain\n> > outside the bitcoin protocol. You could download it from\n> > some http\n> > server or even pass it along on an USB stick. Then with a\n> > simple client change you can import it:\n> https://github.com/bitcoin/bitcoin/pull/883 .\n> >\n> >\n> > Currently, without this functionality, nodes with\n> > restrictive (or\n> > >slow) internet have some options, such as going via a\n> > tor proxy, but\n> > >due to the latency, the problem with multiple receptions\n> > of the same\n> > >block still occur.\n> > >\n> >\n> > If you're behind such a slow internet connection, and\n> > concerned about\n> > every bit of bandwidth, it is better to run a lightweight\n> > node. For example, Electrum.\n> >\n> > Even if you could reduce the wasted bandwidth a bit by\n> > puzzling\n> > around with partial blocks, the download will still be\n> > substantial (and that's going to get worse before it gets\n> > better).\n> >\n> > Wladimir\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Live Security Virtual Conference\n> > Exclusive live event will cover all the ways today's\n> > security and\n> > threat landscape has changed and how IT managers can\n> > respond. Discussions\n> > will include endpoint security, mobile security and the\n> > latest in malware\n> > threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Live Security Virtual Conference\n> > Exclusive live event will cover all the ways today's\n> > security and\n> > threat landscape has changed and how IT managers can\n> > respond. Discussions\n> > will include endpoint security, mobile security and the\n> > latest in malware\n> > threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nPeter J. Vessenes\nCEO, CoinLab\nM: 206.595.9839\nSkype: vessenes\nGoogle+ <https://plus.google.com/112885659993091300749>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120430/6ef5f65b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP to improve the availability of blocks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Amir Taaki",
                "Zell Faze",
                "Peter Vessenes",
                "Rebroad (sourceforge)"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 19976
        }
    },
    {
        "title": "[Bitcoin-development] new bitcoin.org clients page",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-04-30T17:50:39",
                "message_text_only": "Check it :) https://github.com/bitcoin/bitcoin.org/pull/34"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-30T18:23:08",
                "message_text_only": "Hey, looks good!  I'm glad to see them sorted alphabetically :)\n\nA couple comments:  I don't think the entries for \"wallet security\" and\n\"backups\" accurately describe Armory.  Wallet Security should say\n\"Encrypt/Offline\" or something to to that effect -- after all, offline\nwallets are the holy grail feature of the Armory.  And backups should say\nsomething like \"One-time Printable\" if it fits within the box.\n\nOtherwise, I really like the layout and design.  Although despite the fact\nI enjoy being first on the list, I think Bitcoin-Qt should still go first.\n It is the \"reference\" client, and I think it's relevant that it is the\n\"de-facto\" client for the majority of users, and the one with the most\nquality control and stability.\n\n-Alan\n\n\nOn Mon, Apr 30, 2012 at 1:50 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Check it :) https://github.com/bitcoin/bitcoin.org/pull/34\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120430/50608d5f/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-04-30T18:31:03",
                "message_text_only": "Are we looking at the same list? Because here is the order I added: Bitcoin-Qt, Armory, Electrum and MultiBit. Maybe try CTRL-F5 to force a refresh of your browser.\n\nAlso about the descriptions: yeah I know. I think it's better to put this up first and then have everyone submit their own descriptions and screenshots. Otherwise it'll be a nightmare to coordinate until everything is perfect. I did message you on IRC today but maybe you were offline.\n\nI didn't copy paste the Armory description from the website because it really sounds too spammy like a sales pitch. Here I was trying to give an even handed balanced overview of all the clients. For each client I was trying to empaphise a 'theme'. Bitcoin-Qt is stability. Armory is advanced. Electrum is convenient. MultiBit is ease of use.\n\n________________________________\nFrom: Alan Reiner <etotheipi at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com> \nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net> \nSent: Monday, April 30, 2012 7:23 PM\nSubject: Re: [Bitcoin-development] new bitcoin.org clients page\n\n\nHey, looks good! \u00a0I'm glad to see them sorted alphabetically :)\n\nA couple comments: \u00a0I don't think the entries for \"wallet security\" and \"backups\" accurately describe Armory. \u00a0Wallet Security should say \"Encrypt/Offline\" or something to to that effect -- after all, offline wallets are the holy grail feature of the Armory. \u00a0And backups should say something like \"One-time Printable\" if it fits within the box. \u00a0\n\nOtherwise, I really like the layout and design. \u00a0Although despite the fact I enjoy being first on the list, I think Bitcoin-Qt should still go first. \u00a0It is the \"reference\" client, and I think it's relevant that it is the \"de-facto\" client for the majority of users, and the one with the most quality control and stability.\n\n-Alan\n\n\n\nOn Mon, Apr 30, 2012 at 1:50 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nCheck it :) https://github.com/bitcoin/bitcoin.org/pull/34\n>\n>------------------------------------------------------------------------------\n>Live Security Virtual Conference\n>Exclusive live event will cover all the ways today's security and\n>threat landscape has changed and how IT managers can respond. Discussions\n>will include endpoint security, mobile security and the latest in malware\n>threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-04-30T19:51:49",
                "message_text_only": "Actually I was looking at a screenshot someone sent me because I couldn't\nseem to access it even after changing the hosts file (I assumed it was\nrecent, but I guess not).  It just looked like the regular Bitcoin page\n(despite doing a ping on the command line and seeing the expected IP).  Was\nthere a specific link to click on?    Am I blind?\n\nIs there a process we should use to submit how we think our program should\nbe represented on the clients page?\n\n-Alan\n\n\nOn Mon, Apr 30, 2012 at 2:31 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Are we looking at the same list? Because here is the order I added:\n> Bitcoin-Qt, Armory, Electrum and MultiBit. Maybe try CTRL-F5 to force a\n> refresh of your browser.\n>\n> Also about the descriptions: yeah I know. I think it's better to put this\n> up first and then have everyone submit their own descriptions and\n> screenshots. Otherwise it'll be a nightmare to coordinate until everything\n> is perfect. I did message you on IRC today but maybe you were offline.\n>\n> I didn't copy paste the Armory description from the website because it\n> really sounds too spammy like a sales pitch. Here I was trying to give an\n> even handed balanced overview of all the clients. For each client I was\n> trying to empaphise a 'theme'. Bitcoin-Qt is stability. Armory is advanced.\n> Electrum is convenient. MultiBit is ease of use.\n>\n> ________________________________\n> From: Alan Reiner <etotheipi at gmail.com>\n> To: Amir Taaki <zgenjix at yahoo.com>\n> Cc: \"bitcoin-development at lists.sourceforge.net\" <\n> bitcoin-development at lists.sourceforge.net>\n> Sent: Monday, April 30, 2012 7:23 PM\n> Subject: Re: [Bitcoin-development] new bitcoin.org clients page\n>\n>\n> Hey, looks good!  I'm glad to see them sorted alphabetically :)\n>\n> A couple comments:  I don't think the entries for \"wallet security\" and\n> \"backups\" accurately describe Armory.  Wallet Security should say\n> \"Encrypt/Offline\" or something to to that effect -- after all, offline\n> wallets are the holy grail feature of the Armory.  And backups should say\n> something like \"One-time Printable\" if it fits within the box.\n>\n> Otherwise, I really like the layout and design.  Although despite the fact\n> I enjoy being first on the list, I think Bitcoin-Qt should still go first.\n>  It is the \"reference\" client, and I think it's relevant that it is the\n> \"de-facto\" client for the majority of users, and the one with the most\n> quality control and stability.\n>\n> -Alan\n>\n>\n>\n> On Mon, Apr 30, 2012 at 1:50 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n>\n> Check it :) https://github.com/bitcoin/bitcoin.org/pull/34\n> >\n>\n> >------------------------------------------------------------------------------\n> >Live Security Virtual Conference\n> >Exclusive live event will cover all the ways today's security and\n> >threat landscape has changed and how IT managers can respond. Discussions\n> >will include endpoint security, mobile security and the latest in malware\n> >threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> >_______________________________________________\n> >Bitcoin-development mailing list\n> >Bitcoin-development at lists.sourceforge.net\n> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120430/4f639830/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "new bitcoin.org clients page",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Alan Reiner",
                "Amir Taaki"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8348
        }
    }
]