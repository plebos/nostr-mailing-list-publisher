[
    {
        "title": "[Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features",
        "thread_messages": [
            {
                "author": "David Schwartz",
                "date": "2011-08-03T01:41:05",
                "message_text_only": "On 7/26/2011 6:31 PM, Gavin Andresen wrote:\n\n> Anybody have advice on how to encourage more bug-fixing and testing of\n> existing functionality instead of yet-more-features?\n\nTwo things would help a lot:\n\n1) Letting people know that bug fixing is needed and would be \nappreciated. (In fact, until I saw your email, I had no idea this was an \nissue.)\n\n2) Maintaining a list of the most important bugs that most need to be \nfixed in a place that's easy to find.\n\nI bet there are a lot of talented programmers who just can't quite \nfigure out how best to help or don't realize that this kind of help is \nneeded.\n\nAlso, even better than a bounty system would probably be a changelog \nfile included in the main source distribution that credited bugfixes to \nthose who contributed them for the next few releases.\n\nDS"
            }
        ],
        "thread_summary": {
            "title": "Seeking advice: Encouraging bug-fixing over new features",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "David Schwartz"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 809
        }
    },
    {
        "title": "[Bitcoin-development] Discussion related to pull 349 and pull 319 (escrow transactions)",
        "thread_messages": [
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-03T06:10:47",
                "message_text_only": "Gregory Maxwell wrote:\n\n> Pull 349 (https://github.com/bitcoin/bitcoin/pull/349)\n> implements a pretty nice implementation of multiple signature escrowed\n> transactions. Especially with clearcoin gone I think that this is\n> something we ought to have sooner rather than later.\n>\n> I've tested it on a private network and it appears to work pretty well.\n\nThank you!  (I think you mean 319 here)\n\n> It probably needs more testing and discussion before it is actually\n> added to the client, but one challenge is that because it requires a\n> new transaction type it won't be deployable until _after_ an updated\n> isStandard is widely used in the network.\n\nWith Eligius mining !IsStandard transactions and probably other pools open\nto the idea, I am hopeful that we can quickly get 30%+ of mining power to\nupgrade, which means that we could still mine these in a reasonable time\nframe (under 1 hour).\n\n...\n\n> Unfortunately, the patch exposes an issue with multisig validation: If\n> I understand it correctly, the problem is that due to redundancy in\n>  the script length coding opcodes it's possible to code a script\n> multiple ways. The signature validation code creates new template\n> scripts in order to evaluate signatures for one output, and the code\n> in bitcoin is not careful to code the new script the same way the\n> original one was coded, causing the signature validation to fail when\n> something used OP_PUSHDATA when a direct length could have been used.\n>\n\nI'm not sure I see the problem here.  CScript.operator<< currently inserts\nvalues into scripts using the shortest possible sequence.  As long as code\ncontinues to conform to this convention, scripts generated by it will\nverify correctly.\n\nIf new code is written that generates one of the longer sequences, it will\ngenerate transactions that will not pass block validation since the\nsignature won't verify.  So such code will be useless and we can refrain\nfrom writing it?\n\n--\nBobby Groff"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-04T20:35:53",
                "message_text_only": "On Wed, Aug 3, 2011 at 2:10 AM,  <bgroff at lavabit.com> wrote:\n> Thank you! \u00a0(I think you mean 319 here)\n\nCorrect.\n\n> With Eligius mining !IsStandard transactions and probably other pools open\n> to the idea, I am hopeful that we can quickly get 30%+ of mining power to\n> upgrade, which means that we could still mine these in a reasonable time\n> frame (under 1 hour).\n\nIt's not just a matter of mining power, it's also a question of\npropagation.  Matt and I tried to perform a non-standard transaction\nweeks ago and weren't able to get in mined after many hours. (we\neventually double spent the input with a normal transaction in order\nto make it go away, interestingly one point about non-propagating txn\nis that they're extra vulnerable to double spending by a standard txn,\nas the non-standard one won't preclude the propagation of the standard\none)\n\n>From discussion on IRC it seemed clear enough that the current focus\non maturity/bugfixes is probably going to delay your full patch, but\nthe IsStandard part is uncontroversial and could go in quickly.\n\nBased on that I think it would be very useful to split 319 into two\npull requests: one which does the IsStandard change, and one which\nadds the full escrow feature set.  This way when the escrow patch does\nenter the mainline client it will be meet up with a network which is\nhappy to handle its transactions.\n\n(and people who are eager to use escrow can use modified clients on\nthe main network before that point in time)\n\n> I'm not sure I see the problem here.  CScript.operator<< currently inserts\n> values into scripts using the shortest possible sequence.\n\nAh for some reason I thought your current code did not always produce\nthe shortest sequence.\n\nIf so, I see no reason to block on the other pull."
            },
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-08T00:21:48",
                "message_text_only": "> On Wed, Aug 3, 2011 at 2:10 AM,  <bgroff at lavabit.com> wrote:\n>> Thank you! \u00c2\u00a0(I think you mean 319 here)\n>\n> Correct.\n>\n>> With Eligius mining !IsStandard transactions and probably other pools\n>> open\n>> to the idea, I am hopeful that we can quickly get 30%+ of mining power\n>> to\n>> upgrade, which means that we could still mine these in a reasonable time\n>> frame (under 1 hour).\n>\n> It's not just a matter of mining power, it's also a question of\n> propagation.  Matt and I tried to perform a non-standard transaction\n> weeks ago and weren't able to get in mined after many hours. (we\n> eventually double spent the input with a normal transaction in order\n> to make it go away, interestingly one point about non-propagating txn\n> is that they're extra vulnerable to double spending by a standard txn,\n> as the non-standard one won't preclude the propagation of the standard\n> one)\n\nRight, the user would have to connect directly to miners accepting\nnon-standard transactions.\n\n> From discussion on IRC it seemed clear enough that the current focus\n> on maturity/bugfixes is probably going to delay your full patch, but\n> the IsStandard part is uncontroversial and could go in quickly.\n\nWith the latest high profile security breaches, I am hoping that the whole\nthings can be pulled relatively soon.  Building secure deposit systems\nwill improve trust in the ecosystem.\n\nI've included a significant amount of unit tests to \"pay\" for the\nadditional feature, and I can add more if needed.\n\n--\nBobby Groff"
            }
        ],
        "thread_summary": {
            "title": "Discussion related to pull 349 and pull 319 (escrow transactions)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "bgroff at lavabit.com"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5226
        }
    },
    {
        "title": "[Bitcoin-development] DNS seeds returning gone peers",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T10:04:11",
                "message_text_only": "This is expected to happen from time to time of course as it's inherently\nracy, but there are a *lot* of bad nodes appearing in the DNS seeds.\n\n$ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\ndnsseed.bluematt.me bitseed.xf2.org`\n...\nNmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n\n$ grep -c 'closed' /tmp/x\n6\n\nSo of 48 IPs returned only 19 are actually usable. This is slowing down peer\nbringup for the Android apps, which don't currently save the addresses of\nlast-used peers (yes, I know we should fix this).\n\nI was talking to a friend a few days ago about Bitcoin, he seemed\ninterested. I'm hoping he might take on DNS seeding as a project. A custom\nDNS server that watches the network to find long-lived peers that run the\nlatest version would be helpful for resolving this kind of thing.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/2d5c0a64/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-03T11:38:19",
                "message_text_only": "On Wed, 2011-08-03 at 12:04 +0200, Mike Hearn wrote:\n> This is expected to happen from time to time of course as it's\n> inherently racy, but there are a lot of bad nodes appearing in the DNS\n> seeds.\n\n> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n> dnsseed.bluematt.me bitseed.xf2.org`\n> ...\n> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n\n> $ grep -c 'closed' /tmp/x\n> 6\n\n> So of 48 IPs returned only 19 are actually usable. This is slowing\n> down peer bringup for the Android apps, which don't currently save the\n> addresses of last-used peers (yes, I know we should fix this).\nIts actually much, much less.  You forgot to grep for filtered, which\nare also worthless and you didn't make an actual connection to the node,\nmeaning there is no way to tell if the node has its connection slots\nfull (a node which has the maximum connection count will ack a syn, but\nwill drop the connection after the first message, so nmap thinks the\nport is open).\nI just tested and I show 0 accepting from bitseed.xf2.org and 0 from\nbitcoin.bitcoin.co.uk.  dnsseed.bluematt.me rotates every 2 minutes to\nthe most recently checked so it tends to be pretty good if you get it\nright after a rotate, if you wait to long, those slots fill up quick.\n> \n> I was talking to a friend a few days ago about Bitcoin, he seemed\n> interested. I'm hoping he might take on DNS seeding as a project. A\n> custom DNS server that watches the network to find long-lived peers\n> that run the latest version would be helpful for resolving this kind\n> of thing.\nPoint him to https://github.com/TheBlueMatt/dnsseed it could use a bit\nof cleanup, but it works.\nIf a different DNS Server were used to could pull directly from the\ndatabase in a more dynamic way it would probably work better too (it was\noriginally set up on MySQL and PowerDNS, but that is quite a resource\nhog compared to SQLite and BIND, but the original backend is still there\nand could work if you have a beefy enough server).\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/3cbcb018/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T12:00:51",
                "message_text_only": "Yeah, the limited number of slots doesn't help either. I wonder if the\ncurrent settings are too conservative.\n\nYour seed returns quite a few IPs that don't respond to ICMP pings - not\nsure what is happening there.\n\n03:01:53 scott:~$ for ip in `dig +short dnsseed.bluematt.me`; do echo -n -e\n\"Testing $ip:   \"; ping -c 1 $ip|grep 'packet loss'; done\nTesting 24.7.158.162:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\n*Testing 50.19.225.254:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 67.242.10.199:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 72.223.56.138:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 76.92.171.255:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 76.123.10.117:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 80.3.173.28:   1 packets transmitted, 0 received, 100% packet loss,\ntime 0ms\n*Testing 80.101.109.52:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\nTesting 93.186.32.117:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\n*Testing 94.19.17.167:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\n*Testing 97.86.39.50:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\nTesting 113.255.177.241:   1 packets transmitted, 1 received, 0% packet\nloss, time 0ms\nTesting 118.208.226.66:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\nTesting 173.180.141.86:   1 packets transmitted, 1 received, 0% packet loss,\ntime 0ms\n*Testing 174.119.14.66:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\n*Testing 178.18.129.133:   1 packets transmitted, 1 received, 0% packet\nloss, time 0ms\n*Testing 193.86.163.77:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 206.255.99.164:   1 packets transmitted, 0 received, 100% packet\nloss, time 0ms\nTesting 216.8.180.85:   1 packets transmitted, 0 received, 100% packet loss,\ntime 0ms\nTesting 24.1.117.3:   1 packets transmitted, 0 received, 100% packet loss,\ntime 0ms*\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/082c8b00/attachment.html>"
            },
            {
                "author": "Johannes Henninger",
                "date": "2011-08-03T12:15:07",
                "message_text_only": "On 08/03/2011 02:00 PM, Mike Hearn wrote:\n> Yeah, the limited number of slots doesn't help either. I wonder if the\n> current settings are too conservative.\n>\n> Your seed returns quite a few IPs that don't respond to ICMP pings -\n> not sure what is happening there.\nMany home routers ignore ICMP requests (mine does) and as far as I know\nWindows Vista/7 only responds to pings that originate from a LAN\naddress/private address range in order to stay more \"hidden\"."
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T12:17:48",
                "message_text_only": "OK, but, <50% show as port open .... maybe a bug in the seed?\n\n\n05:16:52 scott:~$ nmap -p 8333 `dig +short dnsseed.bluematt.me`\n\nStarting Nmap 5.00 ( http://nmap.org ) at 2011-08-03 14:17 CEST\nInteresting ports on 83.220.45.22:\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on\nc-6de0e055.27-2-64736c11.cust.bredbandsbolaget.se(85.224.224.109):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on mackila.com (88.168.105.251):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on 93-81-112-85.broadband.corbina.ru (93.81.112.85):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on kons-5f710a2a.pool.mediaWays.net (95.113.10.42):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on 173-218-216-132.atw.suddenlink.net (173.218.216.132):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on\ndynamicip-188-232-23-24.pppoe.omsk.ertelecom.ru(188.232.23.24):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nInteresting ports on c-71-229-116-166.hsd1.fl.comcast.net (71.229.116.166):\nPORT     STATE    SERVICE\n8333/tcp filtered unknown\n\nInteresting ports on c-76-25-209-23.hsd1.co.comcast.net (76.25.209.23):\nPORT     STATE SERVICE\n8333/tcp open  unknown\n\nNmap done: 20 IP addresses (9 hosts up) scanned in 3.50 seconds\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/6ce81ee3/attachment.html>"
            },
            {
                "author": "Caleb James DeLisle",
                "date": "2011-08-03T12:27:37",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n\nOn 08/03/2011 07:38 AM, Matt Corallo wrote:\n> On Wed, 2011-08-03 at 12:04 +0200, Mike Hearn wrote:\n>> This is expected to happen from time to time of course as it's\n>> inherently racy, but there are a lot of bad nodes appearing in the DNS\n>> seeds.\n> \n>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n>> dnsseed.bluematt.me bitseed.xf2.org`\n>> ...\n>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n> \n>> $ grep -c 'closed' /tmp/x\n>> 6\n> \n>> So of 48 IPs returned only 19 are actually usable. This is slowing\n>> down peer bringup for the Android apps, which don't currently save the\n>> addresses of last-used peers (yes, I know we should fix this).\n> Its actually much, much less.  You forgot to grep for filtered, which\n> are also worthless and you didn't make an actual connection to the node,\n> meaning there is no way to tell if the node has its connection slots\n> full (a node which has the maximum connection count will ack a syn, but\n> will drop the connection after the first message, so nmap thinks the\n> port is open).\n> I just tested and I show 0 accepting from bitseed.xf2.org and 0 from\n> bitcoin.bitcoin.co.uk.  dnsseed.bluematt.me rotates every 2 minutes to\n> the most recently checked so it tends to be pretty good if you get it\n> right after a rotate, if you wait to long, those slots fill up quick.\n\nSomeone I know who runs a moderately large website told me that some ISPs cache DNS for as long as a week without regard to TTL.\nIf your DNS seeds are not pointing to your own dedicated boxen then you might want to do a lookup on a random cookie as a subdomain.\n\nCaleb\n\n>>\n>> I was talking to a friend a few days ago about Bitcoin, he seemed\n>> interested. I'm hoping he might take on DNS seeding as a project. A\n>> custom DNS server that watches the network to find long-lived peers\n>> that run the latest version would be helpful for resolving this kind\n>> of thing.\n> Point him to https://github.com/TheBlueMatt/dnsseed it could use a bit\n> of cleanup, but it works.\n> If a different DNS Server were used to could pull directly from the\n> database in a more dynamic way it would probably work better too (it was\n> originally set up on MySQL and PowerDNS, but that is quite a resource\n> hog compared to SQLite and BIND, but the original backend is still there\n> and could work if you have a beefy enough server).\n> \n> Matt\n> \n> \n> \n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> The must-attend event for mobile developers. Connect with experts. \n> Get tools for creating Super Apps. See the latest technologies.\n> Sessions, hands-on labs, demos & much more. Register early & save!\n> http://p.sf.net/sfu/rim-blackberry-1\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (GNU/Linux)\n\niQIcBAEBAgAGBQJOOT64AAoJECYAmptlsgnWNNYP/3pk/61AOaTo8577XF2E3RWU\nhqPclOYMveBZveo7Hz0k/Vf3TMf5p7CFGtFllApVmmR5ck4hXwow+tXwaYvBuf9b\n4QwDlNtBelZ+7DqOdDTxRjaRzBo7PlsuiEp+6B3+oggfjKWnkWlIighfM/6LOtMO\nkv+MsC9xulqCrX96FrQBERVknkvza8NWfVblAFCM0uxECC5Hd52W1Okx1cDqUsIj\nMAp6T6IDwy1u0WtYIZBbD3KR802tqTpx/gzElo2AAz4ZR8P9yATBbAjmd9vZDscB\nSRF5yg+BIAzTQzz84c0cno8Q6hFyieRLTu9x0AWUqAZPTL3OgYV7hyl9WXMzcQGY\nLgnG9hP5N9qn2S+rYJuNJwvTJhzaLgUwOdRgyisI8v86R5vEjOpAAPVStAgCtvw2\n6BJJvit3iZ74fK37kPb4iEljd11ibb8rOoiZzKSuS6LMJXkCplQQ06Uhy9MFd/Wn\nUZbSwbXqizJmQUPnHfCvvJc9fmoPFbj4SpYagxXFbUXtQsuB84h1e/jKAf5cvRed\nn0fLfKBZJuAfK1B/lV8+R6+oJj6F2OSGdCpdGzMlrxKX3JPcDJGK56/JmFzaqXyA\nScaYja4yps83l80zt7H9Fadl642tNWXsdETniyDt2ADnqr1u/nWr9m+aT7oskbZA\nSfO+U22w9JC0CW8u5fAa\n=7WNK\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T12:40:48",
                "message_text_only": ">\n> Someone I know who runs a moderately large website told me that some ISPs\n> cache DNS for as long as a week without regard to TTL.\n>\n\nWe track DNS disobeyers at Google, as we use it for load balancing (along\nwith many other large sites).\n\nI'd be kind of surprised if any large/professional ISP disobeyed the TTL\nthat badly, because it would cause frequent problems reaching popular sites\nlike anything hosted on Google or Akamai. But randomizing the DNS request\nisn't a bad idea.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/bf787659/attachment.html>"
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-03T14:00:24",
                "message_text_only": "Mike,\n\nI think I can contribute to your DNS seeding project. Could you help define\nlong-lived peers?\n\n-rick\n\n\nOn Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> This is expected to happen from time to time of course as it's inherently\n> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.\n>\n> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n> dnsseed.bluematt.me bitseed.xf2.org`\n> ...\n> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n>\n> $ grep -c 'closed' /tmp/x\n> 6\n>\n> So of 48 IPs returned only 19 are actually usable. This is slowing down\n> peer bringup for the Android apps, which don't currently save the addresses\n> of last-used peers (yes, I know we should fix this).\n>\n> I was talking to a friend a few days ago about Bitcoin, he seemed\n> interested. I'm hoping he might take on DNS seeding as a project. A custom\n> DNS server that watches the network to find long-lived peers that run the\n> latest version would be helpful for resolving this kind of thing.\n>\n>\n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> The must-attend event for mobile developers. Connect with experts.\n> Get tools for creating Super Apps. See the latest technologies.\n> Sessions, hands-on labs, demos & much more. Register early & save!\n> http://p.sf.net/sfu/rim-blackberry-1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/05aea1f2/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T14:10:56",
                "message_text_only": "There's no project currently :-)\n\nStarting from Matts code is probably the way to go. It's written in PHP.\nAlternatively, you could write a Java app for it, as there are drop-in DNS\nserving libraries you could link with BitCoinJ+sqlite. It probably wouldn't\nbe that hard. You'd want to sort nodes by version, how long they've been\nobserved to exist, the last polling time, etc.\n\nOn Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson\n<rick at support-intelligence.com>wrote:\n\n> Mike,\n>\n> I think I can contribute to your DNS seeding project. Could you help define\n> long-lived peers?\n>\n> -rick\n>\n>\n> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> This is expected to happen from time to time of course as it's inherently\n>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.\n>>\n>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n>> dnsseed.bluematt.me bitseed.xf2.org`\n>> ...\n>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n>>\n>> $ grep -c 'closed' /tmp/x\n>> 6\n>>\n>> So of 48 IPs returned only 19 are actually usable. This is slowing down\n>> peer bringup for the Android apps, which don't currently save the addresses\n>> of last-used peers (yes, I know we should fix this).\n>>\n>> I was talking to a friend a few days ago about Bitcoin, he seemed\n>> interested. I'm hoping he might take on DNS seeding as a project. A custom\n>> DNS server that watches the network to find long-lived peers that run the\n>> latest version would be helpful for resolving this kind of thing.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n>> The must-attend event for mobile developers. Connect with experts.\n>> Get tools for creating Super Apps. See the latest technologies.\n>> Sessions, hands-on labs, demos & much more. Register early & save!\n>> http://p.sf.net/sfu/rim-blackberry-1\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/0aa285b4/attachment.html>"
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-03T14:18:26",
                "message_text_only": "Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort them\nby version? Ordering from highest to lowest?\n\nhow about publishing addresses under version.example.com if you version has\na perfrence?\n\n-rick\n\n\nOn Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> There's no project currently :-)\n>\n> Starting from Matts code is probably the way to go. It's written in PHP.\n> Alternatively, you could write a Java app for it, as there are drop-in DNS\n> serving libraries you could link with BitCoinJ+sqlite. It probably wouldn't\n> be that hard. You'd want to sort nodes by version, how long they've been\n> observed to exist, the last polling time, etc.\n>\n> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <rick at support-intelligence.com\n> > wrote:\n>\n>> Mike,\n>>\n>> I think I can contribute to your DNS seeding project. Could you help\n>> define long-lived peers?\n>>\n>> -rick\n>>\n>>\n>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>> This is expected to happen from time to time of course as it's inherently\n>>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.\n>>>\n>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n>>> dnsseed.bluematt.me bitseed.xf2.org`\n>>> ...\n>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n>>>\n>>> $ grep -c 'closed' /tmp/x\n>>> 6\n>>>\n>>> So of 48 IPs returned only 19 are actually usable. This is slowing down\n>>> peer bringup for the Android apps, which don't currently save the addresses\n>>> of last-used peers (yes, I know we should fix this).\n>>>\n>>> I was talking to a friend a few days ago about Bitcoin, he seemed\n>>> interested. I'm hoping he might take on DNS seeding as a project. A custom\n>>> DNS server that watches the network to find long-lived peers that run the\n>>> latest version would be helpful for resolving this kind of thing.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n>>> The must-attend event for mobile developers. Connect with experts.\n>>> Get tools for creating Super Apps. See the latest technologies.\n>>> Sessions, hands-on labs, demos & much more. Register early & save!\n>>> http://p.sf.net/sfu/rim-blackberry-1\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/1aaa914c/attachment.html>"
            },
            {
                "author": "Douglas Huff",
                "date": "2011-08-03T14:28:59",
                "message_text_only": "There's a bigger problem here honestly. The p2p network is just starved for\nconnectable slots.\n\nYou can start up a bitcoind, on a host with sufficient connectivity, with\n-maxconnections=512 and they will fill in <15 minutes.\n\nAs to why sort by version: <=3.23 has problems serving the blocks from the\nlast 2 months. It can take days to weeks to get the whole chain if you're\nconnecting to those nodes.\n\n-- \nDouglas Huff\nOn Aug 3, 2011 9:18 AM, \"Rick Wesson\" <rick at support-intelligence.com> wrote:\n> Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort\nthem\n> by version? Ordering from highest to lowest?\n>\n> how about publishing addresses under version.example.com if you version\nhas\n> a perfrence?\n>\n> -rick\n>\n>\n> On Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> There's no project currently :-)\n>>\n>> Starting from Matts code is probably the way to go. It's written in PHP.\n>> Alternatively, you could write a Java app for it, as there are drop-in\nDNS\n>> serving libraries you could link with BitCoinJ+sqlite. It probably\nwouldn't\n>> be that hard. You'd want to sort nodes by version, how long they've been\n>> observed to exist, the last polling time, etc.\n>>\n>> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <\nrick at support-intelligence.com\n>> > wrote:\n>>\n>>> Mike,\n>>>\n>>> I think I can contribute to your DNS seeding project. Could you help\n>>> define long-lived peers?\n>>>\n>>> -rick\n>>>\n>>>\n>>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>>> This is expected to happen from time to time of course as it's\ninherently\n>>>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.\n>>>>\n>>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n>>>> dnsseed.bluematt.me bitseed.xf2.org`\n>>>> ...\n>>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n>>>>\n>>>> $ grep -c 'closed' /tmp/x\n>>>> 6\n>>>>\n>>>> So of 48 IPs returned only 19 are actually usable. This is slowing down\n>>>> peer bringup for the Android apps, which don't currently save the\naddresses\n>>>> of last-used peers (yes, I know we should fix this).\n>>>>\n>>>> I was talking to a friend a few days ago about Bitcoin, he seemed\n>>>> interested. I'm hoping he might take on DNS seeding as a project. A\ncustom\n>>>> DNS server that watches the network to find long-lived peers that run\nthe\n>>>> latest version would be helpful for resolving this kind of thing.\n>>>>\n>>>>\n>>>>\n------------------------------------------------------------------------------\n>>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n>>>> The must-attend event for mobile developers. Connect with experts.\n>>>> Get tools for creating Super Apps. See the latest technologies.\n>>>> Sessions, hands-on labs, demos & much more. Register early & save!\n>>>> http://p.sf.net/sfu/rim-blackberry-1\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/520f6d84/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2011-08-03T14:37:12",
                "message_text_only": "I'm curious whether my Non-Blocking network stack (BitDroid) isn't better\nsuited for detecting and tracking available peers. I have implemented\nseveral benchmarks, including a simple peer counter listener, which would\nhave to be adapted to fit the DNS needs (open and check if a real peer is\nlistening). Being non-blocking it can open several hundreds of connections\nto check reachability of the peers and at the same time keep a pool of peers\nconnected to listen for address broadcasts, with minimal overhead (single\nthread, close to no context switches).\n\nJust an idea :-)\n\nRegards,\nChris\n\nOn Wed, Aug 3, 2011 at 4:18 PM, Rick Wesson\n<rick at support-intelligence.com>wrote:\n\n> Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort them\n> by version? Ordering from highest to lowest?\n>\n> how about publishing addresses under version.example.com if you version\n> has a perfrence?\n>\n> -rick\n>\n>\n> On Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> There's no project currently :-)\n>>\n>> Starting from Matts code is probably the way to go. It's written in PHP.\n>> Alternatively, you could write a Java app for it, as there are drop-in DNS\n>> serving libraries you could link with BitCoinJ+sqlite. It probably wouldn't\n>> be that hard. You'd want to sort nodes by version, how long they've been\n>> observed to exist, the last polling time, etc.\n>>\n>> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <\n>> rick at support-intelligence.com> wrote:\n>>\n>>> Mike,\n>>>\n>>> I think I can contribute to your DNS seeding project. Could you help\n>>> define long-lived peers?\n>>>\n>>> -rick\n>>>\n>>>\n>>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>>> This is expected to happen from time to time of course as it's\n>>>> inherently racy, but there are a *lot* of bad nodes appearing in the\n>>>> DNS seeds.\n>>>>\n>>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk\n>>>> dnsseed.bluematt.me bitseed.xf2.org`\n>>>> ...\n>>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds\n>>>>\n>>>> $ grep -c 'closed' /tmp/x\n>>>> 6\n>>>>\n>>>> So of 48 IPs returned only 19 are actually usable. This is slowing down\n>>>> peer bringup for the Android apps, which don't currently save the addresses\n>>>> of last-used peers (yes, I know we should fix this).\n>>>>\n>>>> I was talking to a friend a few days ago about Bitcoin, he seemed\n>>>> interested. I'm hoping he might take on DNS seeding as a project. A custom\n>>>> DNS server that watches the network to find long-lived peers that run the\n>>>> latest version would be helpful for resolving this kind of thing.\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n>>>> The must-attend event for mobile developers. Connect with experts.\n>>>> Get tools for creating Super Apps. See the latest technologies.\n>>>> Sessions, hands-on labs, demos & much more. Register early & save!\n>>>> http://p.sf.net/sfu/rim-blackberry-1\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> The must-attend event for mobile developers. Connect with experts.\n> Get tools for creating Super Apps. See the latest technologies.\n> Sessions, hands-on labs, demos & much more. Register early & save!\n> http://p.sf.net/sfu/rim-blackberry-1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/1f90e4ca/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-03T14:39:57",
                "message_text_only": ">\n> There's a bigger problem here honestly. The p2p network is just starved for\n> connectable slots.\n>\nSuggestions:\n\n- massively increasing all the anti-DoS limits in 0.4, so far they've caused\na lot more damage than they solved.\n\n- broadcasting an \"upgrade now\" type announcement. The alert system is\nintended for informing users when there's a threat to system stability and\nthat's exactly what has been happening recently.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/78ba4297/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-03T14:48:33",
                "message_text_only": "On Wed, Aug 3, 2011 at 10:39 AM, Mike Hearn <mike at plan99.net> wrote:\n>> There's a bigger problem here honestly. The p2p network is just starved\n>> for connectable slots.\n>\n> Suggestions:\n> - massively increasing all the anti-DoS limits in 0.4, so far they've caused\n> a lot more damage than they solved.\n\nYou can't \"massively increase\" the number of available connection\nslots without risking running nodes on lower memory systems (e.g. VMs)\nout of memory.\n\nMoreover, 125 slots should be more than enough.  We need to figure out\nwhy it isn't."
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-03T15:32:00",
                "message_text_only": "On Wed, 2011-08-03 at 10:48 -0400, Gregory Maxwell wrote:\n> On Wed, Aug 3, 2011 at 10:39 AM, Mike Hearn <mike at plan99.net> wrote:\n> >> There's a bigger problem here honestly. The p2p network is just starved\n> >> for connectable slots.\n> >\n> > Suggestions:\n> > - massively increasing all the anti-DoS limits in 0.4, so far they've caused\n> > a lot more damage than they solved.\nThey were redone in .24 to the point that they should not cause any such\nissues in the future.\n> \n> You can't \"massively increase\" the number of available connection\n> slots without risking running nodes on lower memory systems (e.g. VMs)\n> out of memory.\n> \n> Moreover, 125 slots should be more than enough.  We need to figure out\n> why it isn't.\nAgreed."
            }
        ],
        "thread_summary": {
            "title": "DNS seeds returning gone peers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rick Wesson",
                "Douglas Huff",
                "Caleb James DeLisle",
                "Mike Hearn",
                "Gregory Maxwell",
                "Matt Corallo",
                "Johannes Henninger",
                "Christian Decker"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 28085
        }
    },
    {
        "title": "[Bitcoin-development] Blitcoin? (Black Hat 2011)",
        "thread_messages": [
            {
                "author": "John Smith",
                "date": "2011-08-04T10:56:42",
                "message_text_only": "L.S.\n\nSome bitcoin \"security vulnerabilities\" have been discussed by Dan Kaminsky\nat BH 2011, there is one article about this dated yesterday:\n\nhttp://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kaminsky-reveals-network-security-research-topics\n\nThe article is very unspecific though. They talk about a tool called\n\"blitcoin\" that \"unmasks\" both sides of a bitcoin transaction. A google\nsearch also turned up nothing, except some misspellings.\n\nDoes anyone have more information?\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/3023ad09/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T14:14:54",
                "message_text_only": "Sounds like Dan wrote a tool which attempts to connect inputs/outputs\nand make a map of a person on the network, or at least thats my blind\nguess.  Something people have been saying was easily possible for some\ntime, but for some reason people insist on refusing their precious\nBitcoin isnt anonymous.\n\nMatt\n\nOn Thu, 2011-08-04 at 10:56 +0000, John Smith wrote:\n> L.S.\n> \n> Some bitcoin \"security vulnerabilities\" have been discussed by Dan\n> Kaminsky at BH 2011, there is one article about this dated yesterday:\n> \n> http://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kaminsky-reveals-network-security-research-topics\n> \n> The article is very unspecific though. They talk about a tool called\n> \"blitcoin\" that \"unmasks\" both sides of a bitcoin transaction. A\n> google search also turned up nothing, except some misspellings. \n> \n> Does anyone have more information?\n> \n> JS\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/9c4de841/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-04T14:38:44",
                "message_text_only": "On Thursday, August 04, 2011 6:56:42 AM John Smith wrote:\n> L.S.\n> \n> Some bitcoin \"security vulnerabilities\" have been discussed by Dan Kaminsky\n> at BH 2011, there is one article about this dated yesterday:\n> \n> http://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kam\n> insky-reveals-network-security-research-topics\n> \n> The article is very unspecific though. They talk about a tool called\n> \"blitcoin\" that \"unmasks\" both sides of a bitcoin transaction. A google\n> search also turned up nothing, except some misspellings.\n\nWell, that certainly doesn't sound like a security vulnerability at all.\nIt's by design that everyone knows about every transaction."
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-05T01:16:36",
                "message_text_only": "Dan gave a brief explanation of \"blitcoin\" on the forums:\n  https://bitcointalk.org/index.php?topic=34458.0\n\n\"As reported, I've got a BitCoin deanonymization mechanism.  It's not\ncomplicated.\n\nConnect to every node in the cloud, discoverable via sweeping/IRC/get_peers\nmessages.  The first IP to consistently relay transactions for a given\nidentity, is the given identity.\n\nOf course the entire BitCoin cloud doesn't allow inbound connections\n(although you can do rather evil stuff with UPNP to force that open too).\nBut this isn't a problem -- there's only about 3000 to 8000 IPs that are\nBitCoin nodes that accept inbound connections.  Since everyone else depends\non them, you just need to create your own mass cluster of IPs that are a\ndecent chunk of the P2P network.  Nodes on average have seven outbound\nconnections, so it should take only a few hundred unique to be one of the\nfirst-hop peers even for the outbound-only set.\"\n\n... so it is a de-anonymize-via IP address not de-anonymize-via Bitcoin\naddress.  And might go partway to explaining why we're having trouble with\nnetwork connectivity...\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/7c7e43ab/attachment.html>"
            },
            {
                "author": "John Smith",
                "date": "2011-08-05T05:37:42",
                "message_text_only": "On Fri, Aug 5, 2011 at 1:16 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>\n> ... so it is a de-anonymize-via IP address not de-anonymize-via Bitcoin\n> address.  And might go partway to explaining why we're having trouble with\n> network connectivity...\n>\n\nWell it's good that the bitcoin network is seeing some security testing.\n\nSo I understand that we have a combination of problems at the moment:\n\n1) A DDoS possibility  (if this is really the cause of the network\nconnectivity problems)\n\n2) An attacker can figure out which node first broadcasted a transaction, by\nconnecting to the entire network or having everyone connect to his node(s)\n\n3) The recipient re-broadcasts transactions (is Theymos right here?),\nallowing both the sender and recipient to be found\n\nDrawok's suggestion about using UDP packets with spoofed sender addresses is\ninteresting, as UDP has another advantage; you can open up an \"inbound\" UDP\nport on almost any NAT router without any UPNP magic: just send out an UDP\npacket, the router will wait a certain time for answers (on a mapped port\nnumber) and relay these back.\n\nIt also has some potential issues; the client needs special privileges to\nspoof sender addresses, and some ISPs might filter out packets with\nnon-matching sender addriess (unsure how common this is).\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/1c336328/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-05T05:52:05",
                "message_text_only": "On Fri, Aug 5, 2011 at 1:37 AM, John Smith <witchspace81 at gmail.com> wrote:\n> Well it's good that the bitcoin network is seeing some security testing.\n\nYep.\n\n> 1) A DDoS possibility\u00a0 (if this is really the cause of the network\n> connectivity problems)\n\nUnfortunately the nodes accepting incoming connections are small\nenough in number (7000?) that you can shut down a lot by attacking\nthose nodes.\n\nThis was part of the motivation of turning on upnp by default in the\nGUI version, but maybe we need to go further than that...\n\n> 3) The recipient re-broadcasts transactions (is Theymos right here?),\n> allowing both the sender and recipient to be found\n\nYes, that is correct.  Bitcoin resends wallet transactions with zero\nconfirmations, and both sent and received transactions fall within the\n\"wallet tx\" superset.\n\nTBH I had forgotten about the resend on the receiver side, though.\nIt, of course, makes plenty of sense in the context of importing\ntransactions from foreign sources, e.g. receiving transactions via a\nUSB flash drive.\n\n> Drawok's suggestion about using UDP packets with spoofed sender addresses is\n> interesting, as UDP has another advantage; you can open up an \"inbound\" UDP\n> port on almost any NAT router without any UPNP magic: just send out an UDP\n> packet, the router will wait a certain time for answers (on a mapped port\n> number) and relay these back.\n>\n> It also has some potential issues; the client needs special privileges to\n> spoof sender addresses, and some ISPs might filter out packets with\n> non-matching sender addriess (unsure how common this is).\n\nWell, it -is- possible to implement TCP over UDP <grin>  The TCP\nconnection sequence over UDP helps to work against spoofing, while UDP\nhelps to open an inbound UDP port as you describe.\n\nNot that I'm endorsing a bitcoin-internal TCP stack... just sayin'  :)\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Joel Joonatan Kaartinen",
                "date": "2011-08-05T12:01:37",
                "message_text_only": "On Fri, 2011-08-05 at 01:52 -0400, Jeff Garzik wrote:\n> Yes, that is correct.  Bitcoin resends wallet transactions with zero\n> confirmations, and both sent and received transactions fall within the\n> \"wallet tx\" superset.\n> \n> TBH I had forgotten about the resend on the receiver side, though.\n> It, of course, makes plenty of sense in the context of importing\n> transactions from foreign sources, e.g. receiving transactions via a\n> USB flash drive.\n\nCould every node do the resends? Alternatively, could we implement a TOR\nlike tunneling system just for the first leg of the transactions\n(overkill?). Then again, maybe just a TOR gateway if that's desired.\n\n> > Drawok's suggestion about using UDP packets with spoofed sender addresses is\n> > interesting, as UDP has another advantage; you can open up an \"inbound\" UDP\n> > port on almost any NAT router without any UPNP magic: just send out an UDP\n> > packet, the router will wait a certain time for answers (on a mapped port\n> > number) and relay these back.\n\nThis is a nice idea but sounds rather unreliable.\n\n> Well, it -is- possible to implement TCP over UDP <grin>  The TCP\n> connection sequence over UDP helps to work against spoofing, while UDP\n> helps to open an inbound UDP port as you describe.\n\nThere's already an implementation of this, called UTP. If we do decide\nthat using UDP is worthwhile, this library is probably better than\nimplementing something ourselves.\n\n- Joel"
            },
            {
                "author": "Christian Decker",
                "date": "2011-08-05T12:58:53",
                "message_text_only": "While I do think that anonymity (or pseudonymity) is a nice feature, I don't\nthink it deserves the full focus of the developers. The core of the protocol\nis about making transactions in a secure and fast way, not allowing\neverybody to be anonymous, whether they want to or not. TOR already is a\ngood options for those that want to stay anonymous, and there is no need to\npull support into the main client, if only a few will use it. I think very\nfew of the developers actually claimed that Bitcoin is anonymous, and has\nnever been a big advertising point from the \"official\" side of Bitcoin,\nnetwork analysis has been always known to break anonymity.\n\nI see no need for action from the developer side.\n\n-cdecker\n\nOn Fri, Aug 5, 2011 at 2:01 PM, Joel Joonatan Kaartinen <\njoel.kaartinen at gmail.com> wrote:\n\n> On Fri, 2011-08-05 at 01:52 -0400, Jeff Garzik wrote:\n> > Yes, that is correct.  Bitcoin resends wallet transactions with zero\n> > confirmations, and both sent and received transactions fall within the\n> > \"wallet tx\" superset.\n> >\n> > TBH I had forgotten about the resend on the receiver side, though.\n> > It, of course, makes plenty of sense in the context of importing\n> > transactions from foreign sources, e.g. receiving transactions via a\n> > USB flash drive.\n>\n> Could every node do the resends? Alternatively, could we implement a TOR\n> like tunneling system just for the first leg of the transactions\n> (overkill?). Then again, maybe just a TOR gateway if that's desired.\n>\n> > > Drawok's suggestion about using UDP packets with spoofed sender\n> addresses is\n> > > interesting, as UDP has another advantage; you can open up an \"inbound\"\n> UDP\n> > > port on almost any NAT router without any UPNP magic: just send out an\n> UDP\n> > > packet, the router will wait a certain time for answers (on a mapped\n> port\n> > > number) and relay these back.\n>\n> This is a nice idea but sounds rather unreliable.\n>\n> > Well, it -is- possible to implement TCP over UDP <grin>  The TCP\n> > connection sequence over UDP helps to work against spoofing, while UDP\n> > helps to open an inbound UDP port as you describe.\n>\n> There's already an implementation of this, called UTP. If we do decide\n> that using UDP is worthwhile, this library is probably better than\n> implementing something ourselves.\n>\n> - Joel\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> The must-attend event for mobile developers. Connect with experts.\n> Get tools for creating Super Apps. See the latest technologies.\n> Sessions, hands-on labs, demos & much more. Register early & save!\n> http://p.sf.net/sfu/rim-blackberry-1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/97edd967/attachment.html>"
            },
            {
                "author": "John Smith",
                "date": "2011-08-05T13:11:48",
                "message_text_only": "On Fri, Aug 5, 2011 at 12:58 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> While I do think that anonymity (or pseudonymity) is a nice feature, I\n> don't think it deserves the full focus of the developers. The core of the\n> protocol is about making transactions in a secure and fast way, not allowing\n> everybody to be anonymous, whether they want to or not. TOR already is a\n> good options for those that want to stay anonymous, and there is no need to\n> pull support into the main client, if only a few will use it. I think very\n> few of the developers actually claimed that Bitcoin is anonymous, and has\n> never been a big advertising point from the \"official\" side of Bitcoin,\n> network analysis has been always known to break anonymity.\n>\n\nYes. Optionally layering Bitcoin over Tor/I2P is a much better option than\ntrying to replicate an onion network in Bitcoin itself. For one,  traffic\nanalysis is much more difficult if your onion routing network contains\nmultiple kinds of traffic. Also it would complicate the core algorithm and\nwaste developer time. Doing anonymity *right* is very hard. So let's leave\nit to the Tor/I2P people that know what they're doing.\n\n\n>\n> I see no need for action from the developer side.\n>\n\nExcept the part about making the client/network more resistant against DDoS.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/3d4fc4a5/attachment.html>"
            },
            {
                "author": "John Smith",
                "date": "2011-08-05T05:55:56",
                "message_text_only": "> 3) The recipient re-broadcasts transactions (is Theymos right here?),\n> allowing both the sender and recipient to be found\n>\n\nHm this would potentially allow getting the IP for any recipient Bitcoin\naddress, given that a client with the private key connects to the network\nonce in a while.\n\nSend them a transaction that is guaranteed to not be written into a block by\na miner, then monitor who rebroadcasts it over a few days/weeks.\n\nI guess this could also be used to find out who has the stolen coins.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/26b73de3/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-05T13:07:05",
                "message_text_only": "On 2011 August 05 Friday, Gavin Andresen wrote:\n\n> \"As reported, I've got a BitCoin deanonymization mechanism.  It's not\n> complicated.\n> \n> Connect to every node in the cloud, discoverable via sweeping/IRC/get_peers\n> messages.  The first IP to consistently relay transactions for a given\n> identity, is the given identity.\n\nTransaction forwarding could be randomised slightly, by randomising the \noutgoing relay order; and adding a random delay between each forward.  Even \nthe massively connected monitor can't represent _all_ the connections on every \nreal node, so it would have no way of knowing whether it got any transaction \nfrom the originator or because it got a fast path through the first N nodes to \nreceive it.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/dd11a165/attachment.sig>"
            },
            {
                "author": "John Smith",
                "date": "2011-08-05T13:19:23",
                "message_text_only": "On Fri, Aug 5, 2011 at 1:07 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n\n> On 2011 August 05 Friday, Gavin Andresen wrote:\n>\n> Transaction forwarding could be randomised slightly, by randomising the\n> outgoing relay order; and adding a random delay between each forward.  Even\n> the massively connected monitor can't represent _all_ the connections on\n> every\n> real node, so it would have no way of knowing whether it got any\n> transaction\n> from the originator or because it got a fast path through the first N nodes\n> to\n> receive it.\n>\n\nRight, while it doesn't warrant completely changing the transport protocol\nto UDP or implementing onion routing,  I'm all for simple timing and order\nrandomization changes if they can make attacks like this less effective.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/8dd72a58/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Blitcoin? (Black Hat 2011)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Smith",
                "Luke-Jr",
                "Jeff Garzik",
                "Andy Parkins",
                "Gavin Andresen",
                "Matt Corallo",
                "Joel Joonatan Kaartinen",
                "Christian Decker"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 16029
        }
    },
    {
        "title": "[Bitcoin-development] Double spend detection to speed up transaction trust",
        "thread_messages": [
            {
                "author": "Andy Parkins",
                "date": "2011-08-04T13:23:10",
                "message_text_only": "Hello,\n\nHere's a scenario (it's contrived to make the players easy to identify, more \nlikely this would be low value automated vendors):\n\nTwo scammers get together to buy two Ferraris using only one set of BTC.  They \ntravel to opposite ends of the world to two car dealerships that accept \nbitcoins without waiting for confirmations.  They are in contact by mobile.  \nThey each buy the car and come to pay.  At exactly the same moment, they both \nspend the same coins.  They both walk away with a car.\n\nThe current solution is the recommendation that vendors wait for six \nconfirmations before releasing goods.  That's a long time though; more than \nmost would be willing to wait.\n\nSome points:\n - The bitcoin network is essentially honest\n - If a block chain fork happens, the transactions that are orphaned get added\n   to the pending transaction list again, meaning ...\n - A valid transaction will _eventually_ make it into the (longest) block\n   chain.\n - Actual distribution time for a transaction through the network is in the\n   order of seconds not minutes\n - A double spend attempt has to enter the network near simulateously at\n   different places, otherwise the second spend will be rejected instantly by\n   the whole network.\n\nNew transactions propagate through the network if they are found to be valid.  \nIf they aren't valid, they are silently dropped.  In the event of a double \nspend attempt one of those transactions goes to (say) half the network, the \nother goes to the other half.  Whichever one reaches a node first is seen as \nthe real one, the second being seen as invalid.  One or other of these will \ntherefore end up in the \"longest\" chain; but there is no way to know which.\n\nHere's my proposal then: when a node drops a transaction, it should not be \nsilent.  It should be broadcast just as it always was going to be had it been \nvalid.  Only it is broadcast with a new \"inv\" type, let's say \n\"MSG_DOUBLESPEND\" instead of \"MSG_TX\".\n\nNow run the Ferrari test again.  The vendor sees the transaction that pays for \nthe car appear near instantly (within the propagation time of the network).  A \nshort while later they also see a MSG_DOUBLESPEND of the same coins that they \nhave just accepted.  They can then operate whatever policy they want: wait for \nsix, ten, twenty confirmations.  Call the police.  Whatever.  Miners can also \nsignificantly lower the priority of any transactions that get flagged in this \nway.\n\nWhen there isn't a double spend attempt message within the network propagation \ntime, they can be sure that their transaction is the one that miners are \nworking on, and they'll eventually get their money.  In other words, they can \naccept the payment on zero confirmations.\n\nAt first I was concerned that this would make it possible to DOS a \ntransaction, but of course it doesn't -- the transaction has to be internally-\nvalid to result in a MSG_DOUBLESPEND, meaning it can only be DOSed by someone \nwith the appropriate private keys.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/00d1be22/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T17:45:17",
                "message_text_only": "There really is no reason to add the extra network complexity for this.\n\nFirst of all (as you point out) no one buying a Ferrari will refuse to\nwait an hour for the payment to confirm.  If someone is attempting to\npull a similar trick on, say, a vending machine however it might make\nsense.  But that changes the equation.  In order for these two scammers\nto pull it off, some effort is required in terms of communicating the\ntime to send the coins and the nodes of the targets (vending machines or\nwhatever) must be figured out.  So now its less of \"make it impossible\"\nand more of \"make it really hard to the point that it is no where near\nworth the effort\".\n\nLets simplify the scenario a bit so that one scammer can pull it off.\nSend one copy of your transaction to the target node and another to\nlarge mining operations so that the payment transaction is considered\ninvalid to miners and a transaction which pays you is confirmed.\n\nIf you are the vending machine, your goal is not to figure out any\ntransactions which are yours, but to figure out which transactions which\nare yours are going to be confirmed.  So, you peer with the largest\nminers (a \"Bitcoin backbone\" or large miners and merchants has been\nsuggested over and over again and really hasn't happened) and modify\nyour client to, instead of dropping transactions which are\ndouble-spends, keep both in memory pool and consider them both invalid\nuntil one of them confirms.\n\nThis will work with 1, 2, or n scammers, doesn't require any additional\nnetwork messages, and offers just as good, if not better security over a\ndouble spend message.\n\nAdditionally, in the future, when(/if) Bitcoin payment processors exist,\nmost merchants will rely on those, which can handle such double-spend\nchecks and tell a merchant a transaction is confirmed in ten seconds for\nsmall transactions, an hour for large ones, or anywhere in between.\nSuch payment processors could also mine or have contracts with large\nminers which allows them to influence the transactions which are to be\nconfirmed, allowing for even quicker confirmations and the offering of\ninsurance against unconfirmed transactions being invalidated.\n\nMatt\n\nOn Thu, 2011-08-04 at 14:23 +0100, Andy Parkins wrote:\n> Hello,\n> \n> Here's a scenario (it's contrived to make the players easy to identify, more \n> likely this would be low value automated vendors):\n> \n> Two scammers get together to buy two Ferraris using only one set of BTC.  They \n> travel to opposite ends of the world to two car dealerships that accept \n> bitcoins without waiting for confirmations.  They are in contact by mobile.  \n> They each buy the car and come to pay.  At exactly the same moment, they both \n> spend the same coins.  They both walk away with a car.\n> \n> The current solution is the recommendation that vendors wait for six \n> confirmations before releasing goods.  That's a long time though; more than \n> most would be willing to wait.\n> \n> Some points:\n>  - The bitcoin network is essentially honest\n>  - If a block chain fork happens, the transactions that are orphaned get added\n>    to the pending transaction list again, meaning ...\n>  - A valid transaction will _eventually_ make it into the (longest) block\n>    chain.\n>  - Actual distribution time for a transaction through the network is in the\n>    order of seconds not minutes\n>  - A double spend attempt has to enter the network near simulateously at\n>    different places, otherwise the second spend will be rejected instantly by\n>    the whole network.\n> \n> New transactions propagate through the network if they are found to be valid.  \n> If they aren't valid, they are silently dropped.  In the event of a double \n> spend attempt one of those transactions goes to (say) half the network, the \n> other goes to the other half.  Whichever one reaches a node first is seen as \n> the real one, the second being seen as invalid.  One or other of these will \n> therefore end up in the \"longest\" chain; but there is no way to know which.\n> \n> Here's my proposal then: when a node drops a transaction, it should not be \n> silent.  It should be broadcast just as it always was going to be had it been \n> valid.  Only it is broadcast with a new \"inv\" type, let's say \n> \"MSG_DOUBLESPEND\" instead of \"MSG_TX\".\n> \n> Now run the Ferrari test again.  The vendor sees the transaction that pays for \n> the car appear near instantly (within the propagation time of the network).  A \n> short while later they also see a MSG_DOUBLESPEND of the same coins that they \n> have just accepted.  They can then operate whatever policy they want: wait for \n> six, ten, twenty confirmations.  Call the police.  Whatever.  Miners can also \n> significantly lower the priority of any transactions that get flagged in this \n> way.\n> \n> When there isn't a double spend attempt message within the network propagation \n> time, they can be sure that their transaction is the one that miners are \n> working on, and they'll eventually get their money.  In other words, they can \n> accept the payment on zero confirmations.\n> \n> At first I was concerned that this would make it possible to DOS a \n> transaction, but of course it doesn't -- the transaction has to be internally-\n> valid to result in a MSG_DOUBLESPEND, meaning it can only be DOSed by someone \n> with the appropriate private keys.\n> \n> \n> \n> Andy\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/25520642/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-04T18:22:16",
                "message_text_only": "On Thursday 04 August 2011 18:45:17 Matt Corallo wrote:\n> There really is no reason to add the extra network complexity for this.\n\nIt's hardly complex.  It's exactly as it is now, with exactly the messages \nthere are now, but with an extra type added to the inventory list.  A \ntransaction _already_ propagates using inv messages with MSG_TX, is it \nreally so \"complex\" to add MSG_DOUBLESPEND to the enum?  What's more it's \nbackward compatible because clients that don't understand MSG_DOUBLESPEND \nwill ignore the inv ending up exactly where we are now.\n\n> First of all (as you point out) no one buying a Ferrari will refuse to\n> wait an hour for the payment to confirm.  If someone is attempting to\n> pull a similar trick on, say, a vending machine however it might make\n> sense.  But that changes the equation.  In order for these two scammers\n\nVending machine, newspaper salesman, ice creams, a beer.  The list of small \nvendors is endless.  I picked Ferrari's out of the air.\n\n> to pull it off, some effort is required in terms of communicating the\n> time to send the coins and the nodes of the targets (vending machines or\n> whatever) must be figured out.  So now its less of \"make it impossible\"\n> and more of \"make it really hard to the point that it is no where near\n> worth the effort\".\n\nI think you've missed the point.  Double spend transactions that enters the \nnetwork at two reasonably evenly connected points are each only seen by half \nthe network, since the first one locks out the second from propagation.\n\n> Lets simplify the scenario a bit so that one scammer can pull it off.\n> Send one copy of your transaction to the target node and another to\n> large mining operations so that the payment transaction is considered\n> invalid to miners and a transaction which pays you is confirmed.\n\nThere is no \"target\" node.  There is only a vending machine listening for \ntransactions.  It's unlikely that vending machines will even have incoming \nconnections enabled.  They certainly won't be keeping a full copy of the \nblock chain or be mining.\n\n> If you are the vending machine, your goal is not to figure out any\n> transactions which are yours, but to figure out which transactions which\n\nIt is a little bit.  Your job is _first_ to figure out which are yours; \nthen, as you say, to see which are going to be confirmed.  Well: once you've \nseen a transaction on the net you know it's going to be confirmed... unless \na matching double spend transaction was accepted by the next miner to \ngenerate a block.\n\n> are yours are going to be confirmed.  So, you peer with the largest\n> miners (a \"Bitcoin backbone\" or large miners and merchants has been\n> suggested over and over again and really hasn't happened) and modify\n\nIt hasn't happened, and yet it seems to be that this non-existant thing is \nyour solution to the problem.\n\n> your client to, instead of dropping transactions which are\n> double-spends, keep both in memory pool and consider them both invalid\n> until one of them confirms.\n\nWell that's what happens now.  But that doesn't help the poor sap who's just \nhanded over some goods.  I want it so that small businesses can use the \nclient to give them practical answers instead of this \"0/unconfirmed\" stuff \nwhich requires understanding of the system.\n\n> This will work with 1, 2, or n scammers, doesn't require any additional\n> network messages, and offers just as good, if not better security over a\n> double spend message.\n\nI'm not really trying to prevent double spends -- bitcoin _already_ prevents \ndouble spends.  Also: the only difference between your suggestion (don't \ndrop) and my suggestion (don't drop but mark with MSG_DOUBLESPEND) is a \nsingle number in the inv.  I really don't get the objection.\n\n> Additionally, in the future, when(/if) Bitcoin payment processors exist,\n\n\"In the future\" is all well and good.  What if there is no future because \nbitcoin is still too difficult for average joe to use?\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T18:39:56",
                "message_text_only": "On Thu, 2011-08-04 at 19:22 +0100, Andy Parkins wrote:\n> On Thursday 04 August 2011 18:45:17 Matt Corallo wrote:\n> > There really is no reason to add the extra network complexity for this.\n> \n> It's hardly complex.  It's exactly as it is now, with exactly the messages \n> there are now, but with an extra type added to the inventory list.  A \n> transaction _already_ propagates using inv messages with MSG_TX, is it \n> really so \"complex\" to add MSG_DOUBLESPEND to the enum?  What's more it's \n> backward compatible because clients that don't understand MSG_DOUBLESPEND \n> will ignore the inv ending up exactly where we are now.\nBut why? It results in slightly more network traffic which is exactly\nwhat we don't want, and it adds yet another message people have to know\nabout.\n> \n> > First of all (as you point out) no one buying a Ferrari will refuse to\n> > wait an hour for the payment to confirm.  If someone is attempting to\n> > pull a similar trick on, say, a vending machine however it might make\n> > sense.  But that changes the equation.  In order for these two scammers\n> \n> Vending machine, newspaper salesman, ice creams, a beer.  The list of small \n> vendors is endless.  I picked Ferrari's out of the air.\nFerraris aren't exactly small ;)\n> \n> > to pull it off, some effort is required in terms of communicating the\n> > time to send the coins and the nodes of the targets (vending machines or\n> > whatever) must be figured out.  So now its less of \"make it impossible\"\n> > and more of \"make it really hard to the point that it is no where near\n> > worth the effort\".\n> \n> I think you've missed the point.  Double spend transactions that enters the \n> network at two reasonably evenly connected points are each only seen by half \n> the network, since the first one locks out the second from propagation.\nNo one cares about what the network thinks is the right transaction, its\nonly what miners believe that matters.\n> \n> > Lets simplify the scenario a bit so that one scammer can pull it off.\n> > Send one copy of your transaction to the target node and another to\n> > large mining operations so that the payment transaction is considered\n> > invalid to miners and a transaction which pays you is confirmed.\n> \n> There is no \"target\" node.  There is only a vending machine listening for \n> transactions.  It's unlikely that vending machines will even have incoming \n> connections enabled.  They certainly won't be keeping a full copy of the \n> block chain or be mining.\nEven if the vending machine doesn't keep the full chain and doesn't\naccept incoming connections, its still the target node.  What other\nnodes on the network think doesn't matter as long as you get the target\nto think a transaction that won't be confirmed will be.  If it doesn't\naccept incoming connections you want to find nodes that do that are\nconnected to your target.\n> \n> > If you are the vending machine, your goal is not to figure out any\n> > transactions which are yours, but to figure out which transactions which\n> \n> It is a little bit.  Your job is _first_ to figure out which are yours; \n> then, as you say, to see which are going to be confirmed.  Well: once you've \n> seen a transaction on the net you know it's going to be confirmed... unless \n> a matching double spend transaction was accepted by the next miner to \n> generate a block.\nThat is exactly my point.\n> \n> > are yours are going to be confirmed.  So, you peer with the largest\n> > miners (a \"Bitcoin backbone\" or large miners and merchants has been\n> > suggested over and over again and really hasn't happened) and modify\n> \n> It hasn't happened, and yet it seems to be that this non-existant thing is \n> your solution to the problem.\nIts much easier to create than to change the network code to relay info\non double-spend transactions.\n> \n> > your client to, instead of dropping transactions which are\n> > double-spends, keep both in memory pool and consider them both invalid\n> > until one of them confirms.\n> \n> Well that's what happens now.  But that doesn't help the poor sap who's just \n> handed over some goods.  I want it so that small businesses can use the \n> client to give them practical answers instead of this \"0/unconfirmed\" stuff \n> which requires understanding of the system.\nNo, thats not what happens now.  Currently if your node gets a\ntransaction which conflicts with one it already knows about, it silently\ndrops it without a second thought.  My point is if you actually dealt\nwith such cases and made good connections, you would be able to prevent\ndouble spends nearly perfectly.\n> \n> > This will work with 1, 2, or n scammers, doesn't require any additional\n> > network messages, and offers just as good, if not better security over a\n> > double spend message.\n> \n> I'm not really trying to prevent double spends -- bitcoin _already_ prevents \n> double spends.  Also: the only difference between your suggestion (don't \n> drop) and my suggestion (don't drop but mark with MSG_DOUBLESPEND) is a \n> single number in the inv.  I really don't get the objection.\nNo, my suggestion is not to relay the second transaction.  The second\ntransaction should continue to not be relayed as it currently is,\nhowever receiving such a transaction should trigger the node to notify\nthe user that the transaction should not be accepted until it makes it\ninto a block (in fact, you could already do this if you implemented a\ndebug.log parser and made well-placed connections).\n> \n> > Additionally, in the future, when(/if) Bitcoin payment processors exist,\n> \n> \"In the future\" is all well and good.  What if there is no future because \n> bitcoin is still too difficult for average joe to use?\nBitcoin is absolutely still an experiment and no one thinks that any\nkind of future is guaranteed.  This was not meant as an argument, but\nsimply as \"if bitcoin does end up going somewhere, it will likely be\ndone like this\".\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/fcd95f9d/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-04T19:42:55",
                "message_text_only": "On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:\n\n> But why? It results in slightly more network traffic which is exactly\n> what we don't want, and it adds yet another message people have to know\n> about.\n\n\"Slightly\" is an understatement.  It add more network traffic for every \ndouble spend attempt.  Which don't happen very often.\n\nAlso, I'm not proposing a new message, heaven forbid that we add a new \nmessage type, I'm proposing that we do this:\n\n enum\n {\n     MSG_TX = 1,\n     MSG_BLOCK,\n+    MSG_DOUBLESPEND,\n };\n\nAlso, people don't \"have\" to know about it.  And it's not \"people\" it's an \naddition to the _one_ official client.  _and_ it's backward compatible \nbecause if they don't know about it, nothing changes... the TX gets dropped \njust as it is now.\n\n> > I think you've missed the point.  Double spend transactions that enters\n> > the network at two reasonably evenly connected points are each only\n> > seen by half the network, since the first one locks out the second\n> > from propagation.\n> \n> No one cares about what the network thinks is the right transaction, its\n> only what miners believe that matters.\n\nThey do care because the network as a whole is what makes the eventual \ndecision about which is the block-chain-to-rule-them-all.  Chain forks, and \neventual reorgs are also far less disruptive when each leg of a double spend \nisn't on each potential chain.  \"Half the network\" includes half of the \nminers.  It's perfectly possible for half the miners to be working on one \nleg, half on the other.  That means it's 50/50 which leg eventually gets \nconfirmed.\n\n> Even if the vending machine doesn't keep the full chain and doesn't\n> accept incoming connections, its still the target node.  What other\n> nodes on the network think doesn't matter as long as you get the target\n> to think a transaction that won't be confirmed will be.  If it doesn't\n> accept incoming connections you want to find nodes that do that are\n> connected to your target.\n\nWell that's true enough; but how on earth you're going to identify an IP \naddress of a particular vending machine that isn't accepting incoming \nconnections is beyond me.  If it is a target it's pretty close to invisible.\n\n> Its much easier to create than to change the network code to relay info\n> on double-spend transactions.\n\nWhat?  It's easier to trigger massive adoption and organisation of an \ninherently disorgainsed network of miners than it is to write a few lines of \ncode?  If that's true, then the bitcoin source is even more impenetrable \nthan I imagine.\n\n> > Well that's what happens now.  But that doesn't help the poor sap who's\n> > just handed over some goods.  I want it so that small businesses can\n> > use the client to give them practical answers instead of this\n> > \"0/unconfirmed\" stuff which requires understanding of the system.\n> \n> No, thats not what happens now.  Currently if your node gets a\n> transaction which conflicts with one it already knows about, it silently\n> drops it without a second thought.  My point is if you actually dealt\n> with such cases and made good connections, you would be able to prevent\n> double spends nearly perfectly.\n\nIt's not about prevention, they are already prevented.  It's about \ndetection.  Quickly.\n\n> > I'm not really trying to prevent double spends -- bitcoin _already_\n> > prevents double spends.  Also: the only difference between your\n> > suggestion (don't drop) and my suggestion (don't drop but mark with\n> > MSG_DOUBLESPEND) is a single number in the inv.  I really don't get\n> > the objection.\n> \n> No, my suggestion is not to relay the second transaction.  The second\n> transaction should continue to not be relayed as it currently is,\n> however receiving such a transaction should trigger the node to notify\n> the user that the transaction should not be accepted until it makes it\n> into a block (in fact, you could already do this if you implemented a\n> debug.log parser and made well-placed connections).\n\nHow is this second transaction going to end up anywhere but on a few \nisolated nodes if it isn't propagated?  The only way _both_ can be in a pool \nis if they are both received.  If they aren't both forwarded then it won't \nbe in most pools.  If it isn't in most pools then which how is the relevant \nuser going to get notified?\n\n> Bitcoin is absolutely still an experiment and no one thinks that any\n> kind of future is guaranteed.  This was not meant as an argument, but\n\nIf it's still an experiment why is there such huge objection to pretty much \nevery change anyone proposes?  Bitcoin is one of the most conservative \nprojects I've ever seen, even for the most passive of changes.  I can \nunderstand wanting to prevent potential financial loss, but it's not like \nI'm suggesting we start broadcasting private keys on the network.\n\n> simply as \"if bitcoin does end up going somewhere, it will likely be\n> done like this\".\n\nWhen you're using it as an argument for why a suggestion is unnecessary \nthat's not how it sounds.\n\nAnyway; it's fine.  You don't think it's a good idea; and I suspect none of \nthe other official client developers will either, they don't like protocol \nchanges.  So be it; it was only a suggestion and I'm a nobody around here.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Andrew Schaaf",
                "date": "2011-08-04T20:07:42",
                "message_text_only": "One double-spend fighting option is for each mining pool to offer a realtime feed of accepted TXs.\n\nI am hoping to complete the following later this month:\n\t\n\t(1) A minimal bitcoind patch that writes raw accepted TXs and BLOCKs to stdout with a prefix of (\"2naXaRQj--TX\\n%d\\n\" % (data_length))\n\t\t(Proof-of-concept done \u2014 I'll submit a pull request with \"--print-accepted-txs-and-blocks\" when I get a chance to clean it up)\n\t\n\t(2) A minimal NodeJS app which invokes bitcoind as a subprocess, parses the TXs and BLOCKs, and offers a realtime feed\n\n\n\nOn Aug 4, 2011, at 3:42 PM, Andy Parkins wrote:\n\n> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:\n> \n>> But why? It results in slightly more network traffic which is exactly\n>> what we don't want, and it adds yet another message people have to know\n>> about.\n> \n> \"Slightly\" is an understatement.  It add more network traffic for every \n> double spend attempt.  Which don't happen very often.\n> \n> Also, I'm not proposing a new message, heaven forbid that we add a new \n> message type, I'm proposing that we do this:\n> \n> enum\n> {\n>     MSG_TX = 1,\n>     MSG_BLOCK,\n> +    MSG_DOUBLESPEND,\n> };\n> \n> Also, people don't \"have\" to know about it.  And it's not \"people\" it's an \n> addition to the _one_ official client.  _and_ it's backward compatible \n> because if they don't know about it, nothing changes... the TX gets dropped \n> just as it is now.\n> \n>>> I think you've missed the point.  Double spend transactions that enters\n>>> the network at two reasonably evenly connected points are each only\n>>> seen by half the network, since the first one locks out the second\n>>> from propagation.\n>> \n>> No one cares about what the network thinks is the right transaction, its\n>> only what miners believe that matters.\n> \n> They do care because the network as a whole is what makes the eventual \n> decision about which is the block-chain-to-rule-them-all.  Chain forks, and \n> eventual reorgs are also far less disruptive when each leg of a double spend \n> isn't on each potential chain.  \"Half the network\" includes half of the \n> miners.  It's perfectly possible for half the miners to be working on one \n> leg, half on the other.  That means it's 50/50 which leg eventually gets \n> confirmed.\n> \n>> Even if the vending machine doesn't keep the full chain and doesn't\n>> accept incoming connections, its still the target node.  What other\n>> nodes on the network think doesn't matter as long as you get the target\n>> to think a transaction that won't be confirmed will be.  If it doesn't\n>> accept incoming connections you want to find nodes that do that are\n>> connected to your target.\n> \n> Well that's true enough; but how on earth you're going to identify an IP \n> address of a particular vending machine that isn't accepting incoming \n> connections is beyond me.  If it is a target it's pretty close to invisible.\n> \n>> Its much easier to create than to change the network code to relay info\n>> on double-spend transactions.\n> \n> What?  It's easier to trigger massive adoption and organisation of an \n> inherently disorgainsed network of miners than it is to write a few lines of \n> code?  If that's true, then the bitcoin source is even more impenetrable \n> than I imagine.\n> \n>>> Well that's what happens now.  But that doesn't help the poor sap who's\n>>> just handed over some goods.  I want it so that small businesses can\n>>> use the client to give them practical answers instead of this\n>>> \"0/unconfirmed\" stuff which requires understanding of the system.\n>> \n>> No, thats not what happens now.  Currently if your node gets a\n>> transaction which conflicts with one it already knows about, it silently\n>> drops it without a second thought.  My point is if you actually dealt\n>> with such cases and made good connections, you would be able to prevent\n>> double spends nearly perfectly.\n> \n> It's not about prevention, they are already prevented.  It's about \n> detection.  Quickly.\n> \n>>> I'm not really trying to prevent double spends -- bitcoin _already_\n>>> prevents double spends.  Also: the only difference between your\n>>> suggestion (don't drop) and my suggestion (don't drop but mark with\n>>> MSG_DOUBLESPEND) is a single number in the inv.  I really don't get\n>>> the objection.\n>> \n>> No, my suggestion is not to relay the second transaction.  The second\n>> transaction should continue to not be relayed as it currently is,\n>> however receiving such a transaction should trigger the node to notify\n>> the user that the transaction should not be accepted until it makes it\n>> into a block (in fact, you could already do this if you implemented a\n>> debug.log parser and made well-placed connections).\n> \n> How is this second transaction going to end up anywhere but on a few \n> isolated nodes if it isn't propagated?  The only way _both_ can be in a pool \n> is if they are both received.  If they aren't both forwarded then it won't \n> be in most pools.  If it isn't in most pools then which how is the relevant \n> user going to get notified?\n> \n>> Bitcoin is absolutely still an experiment and no one thinks that any\n>> kind of future is guaranteed.  This was not meant as an argument, but\n> \n> If it's still an experiment why is there such huge objection to pretty much \n> every change anyone proposes?  Bitcoin is one of the most conservative \n> projects I've ever seen, even for the most passive of changes.  I can \n> understand wanting to prevent potential financial loss, but it's not like \n> I'm suggesting we start broadcasting private keys on the network.\n> \n>> simply as \"if bitcoin does end up going somewhere, it will likely be\n>> done like this\".\n> \n> When you're using it as an argument for why a suggestion is unnecessary \n> that's not how it sounds.\n> \n> Anyway; it's fine.  You don't think it's a good idea; and I suspect none of \n> the other official client developers will either, they don't like protocol \n> changes.  So be it; it was only a suggestion and I'm a nobody around here.\n> \n> \n> \n> Andy\n> \n> -- \n> Dr Andy Parkins\n> andyparkins at gmail.com\n> \n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> The must-attend event for mobile developers. Connect with experts. \n> Get tools for creating Super Apps. See the latest technologies.\n> Sessions, hands-on labs, demos & much more. Register early & save!\n> http://p.sf.net/sfu/rim-blackberry-1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T20:38:25",
                "message_text_only": "On Thu, 2011-08-04 at 16:07 -0400, Andrew Schaaf wrote:\n> One double-spend fighting option is for each mining pool to offer a realtime feed of accepted TXs.\n> \n> I am hoping to complete the following later this month:\n> \t\n> \t(1) A minimal bitcoind patch that writes raw accepted TXs and BLOCKs to stdout with a prefix of (\"2naXaRQj--TX\\n%d\\n\" % (data_length))\n> \t\t(Proof-of-concept done \u2014 I'll submit a pull request with \"--print-accepted-txs-and-blocks\" when I get a chance to clean it up)\n> \t\n> \t(2) A minimal NodeJS app which invokes bitcoind as a subprocess, parses the TXs and BLOCKs, and offers a realtime feed\n\nThey already do if they provide the IP of their node (or a proxy node on\ntop of theirs which would be recommended for security).  This has been\nmy whole point the entire time.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/6bbe2769/attachment.sig>"
            },
            {
                "author": "Stefan Thomas",
                "date": "2011-08-04T22:10:59",
                "message_text_only": "Since nobody else has mentioned it: There is another (more pragmatic?) \nway to detect double spends:\n\n1. Connect to lots of clients\n2a. If they all send you the same transaction -> double spend unlikely\n2b. If some don't send you the transaction (or send a conflicting one) \n-> double spend in progress\n\nObviously not everyone will run a double spend detector - it's much more \neasily realized as a service (just like mining.) Jan put up a proof of \nconcept: http://www.transactionradar.com/\n\nWould network support like a MSG_DOUBLESPEND be better? I used to think \nyes, but looking at the reality of Transaction Radar, I'm not so sure. \nNothing stops such a service from scaling up and connecting to thousands \nof random nodes (especially when the network itself grows bigger), \npushing the probabilities of missing a double spend \"in the wild\" to \nnear zero. It could also connect directly to important miners/pools as \nothers have suggested.\n\nOf course this doesn't help against double spends where the attacker \ndoes his own mining*, but neither would MSG_DOUBLESPEND. Given the added \nnetwork load I'd argue that network support for double spends is \nunnecessary and potentially damaging. DoS is more scary to me than \nnon-instant transactions.\n\n* In this case of course the hacker will be exposed to some randomness, \nand I doubt many attackers will buy 100 televisions, newspaper \nsubscriptions or MP3s to get one for free. So this is only a problem for \nliquid goods with tiny spreads (any investment or stored value instrument.)"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-04T22:18:40",
                "message_text_only": "On Thu, Aug 4, 2011 at 6:10 PM, Stefan Thomas <moon at justmoon.de> wrote:\n> Would network support like a MSG_DOUBLESPEND be better? I used to think\n> yes, but looking at the reality of Transaction Radar, I'm not so sure.\n> Nothing stops such a service from scaling up and connecting to thousands\n> of random nodes (especially when the network itself grows bigger),\n\nExcept for the fact that such a party is a DOS attack on the network\nwhich is already short on functioning listeners.  I don't have much\ndoubt that people doing the \"connect to everyone\" are already causing\nharm. There are some nodes in .ru/.ua which aggressively connect to me\n(instant reconnects if I hang up on them) which have never passed me a\ntransaction in all my available logs.\n\nAlerts scale better\u2014 both can have a place in the ecosystem, they're\nactually complementary: Alerts are vulnerable to filtering by sibyl\nattackers but they have deeper network penetration and where filtering\ndoesn't prevent them you don't need a connection to hear them."
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T22:21:53",
                "message_text_only": "On Thu, 2011-08-04 at 18:18 -0400, Gregory Maxwell wrote:\n> I don't have much\n> doubt that people doing the \"connect to everyone\" are already causing\n> harm. There are some nodes in .ru/.ua which aggressively connect to me\n> (instant reconnects if I hang up on them) which have never passed me a\n> transaction in all my available logs.\n\nI've been thinking about going through my logs to see how many nodes I\nam connected to that are clearly bad (like those), but I suppose you\nbeat me to it.  Should such connections not be dropped over time as they\nare clearly not functioning nodes?\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/785ca673/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-05T00:07:46",
                "message_text_only": "Couple of semi-random thoughts:\n\nRE: detecting double spends:  I agree that extending the protocol to make\ndouble-spend detection better is probably a bad idea.\n\nThat said, I could see extending the information reported by the\nlisttransactions/gettransaction API calls to report detected double spends (\n== transaction uses the same inputs as another transaction in the block\nchain or memory pool). IIRC, now the code just drops double spends, so if\nthis was done the implementation would have to be careful about being\nvulnerable to a \"fill memory with bogus transactions\" attack.\n\nRE: badly-behaved nodes:  I'd really like somebody to start experimenting\nwith algorithms for detecting well-behaved and ill-behaved nodes-- maybe\nstarting with a dns-seed implementation.  I suspect people are starting to\nexperiment with various types of Sybil attacks, which might explain why\nnetwork connectivity has been so bad.\n\n(sent from the Sydney airport, before a very LOOONG flight back to\nMassachusetts)\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/f9930054/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-04T20:08:07",
                "message_text_only": "On Thu, Aug 4, 2011 at 3:42 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:\n>\n>> But why? It results in slightly more network traffic which is exactly\n>> what we don't want, and it adds yet another message people have to know\n>> about.\n>\n> \"Slightly\" is an understatement. \u00a0It add more network traffic for every\n> double spend attempt. \u00a0Which don't happen very often.\n\nBut they can be trivially generated on demand, and potentially result\nin unbounded flooding.\n\nEven if you carefully don't duplicate an announcement I can easily\ngenerate an unlimited number of double-spends for the network to\nflood. The normal anti-DDOS logic doesn't work because there can be no\nadditional proof-of-workish costs for the double spend (they'd share\nwhatever anti-ddos fees the first txn had).\n\nThis is somewhat soluble, I guess. Rather than NAK the transaction the\nway it would work is propagating conflicts on each of the conflicted\ninputs.  \"I've seen at least two transactions recently trying to spend\ninput X, here is proof: (two txn IDs)\". Even if there are more spends\nof that input you don't need to hear about them, knowing about two\nspends of an input is enough to consider that input (and perhaps all\ninputs with an identical script to that one) temporarily suspect.\nThough it would have to be done input by input.\n\nThis might be an interesting feature if not for the fact that the\nsoftware already waits a fair number of confirms before considering\nsomething confirmed. Of course, a sybil can just filter these messages\ndiminishing their usefulness.\n\nI suppose I could add this as a (7) to this list:\nhttps://bitcointalk.org/index.php?topic=28565.msg359948#msg359948"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T20:33:29",
                "message_text_only": "On Thu, 2011-08-04 at 20:42 +0100, Andy Parkins wrote:\n> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:\n> \n> > But why? It results in slightly more network traffic which is exactly\n> > what we don't want, and it adds yet another message people have to know\n> > about.\n> \n> \"Slightly\" is an understatement.  It add more network traffic for every \n> double spend attempt.  Which don't happen very often.\nExactly, why add more network traffic for something that you can get\nbetter without doing that?\n> \n> Also, I'm not proposing a new message, heaven forbid that we add a new \n> message type, I'm proposing that we do this:\n> \n>  enum\n>  {\n>      MSG_TX = 1,\n>      MSG_BLOCK,\n> +    MSG_DOUBLESPEND,\n>  };\n> \n> Also, people don't \"have\" to know about it.  And it's not \"people\" it's an \n> addition to the _one_ official client.  _and_ it's backward compatible \n> because if they don't know about it, nothing changes... the TX gets dropped \n> just as it is now.\nAgain though, adding more crap to the protocols is something we want to\navoid, especially if it offers no gain.\n> \n> > > I think you've missed the point.  Double spend transactions that enters\n> > > the network at two reasonably evenly connected points are each only\n> > > seen by half the network, since the first one locks out the second\n> > > from propagation.\n> > \n> > No one cares about what the network thinks is the right transaction, its\n> > only what miners believe that matters.\n> \n> They do care because the network as a whole is what makes the eventual \n> decision about which is the block-chain-to-rule-them-all.  Chain forks, and \n> eventual reorgs are also far less disruptive when each leg of a double spend \n> isn't on each potential chain.  \"Half the network\" includes half of the \n> miners.  It's perfectly possible for half the miners to be working on one \n> leg, half on the other.  That means it's 50/50 which leg eventually gets \n> confirmed.\nNope, the network decides nothing, only the miners decide.\n> \n> > Even if the vending machine doesn't keep the full chain and doesn't\n> > accept incoming connections, its still the target node.  What other\n> > nodes on the network think doesn't matter as long as you get the target\n> > to think a transaction that won't be confirmed will be.  If it doesn't\n> > accept incoming connections you want to find nodes that do that are\n> > connected to your target.\n> \n> Well that's true enough; but how on earth you're going to identify an IP \n> address of a particular vending machine that isn't accepting incoming \n> connections is beyond me.  If it is a target it's pretty close to invisible.\nThen your whole attack scenario is broken and it becomes a 50/50 (or\nmore likely less) guess.\n> \n> > Its much easier to create than to change the network code to relay info\n> > on double-spend transactions.\n> \n> What?  It's easier to trigger massive adoption and organisation of an \n> inherently disorgainsed network of miners than it is to write a few lines of \n> code?  If that's true, then the bitcoin source is even more impenetrable \n> than I imagine.\nNo, its easier for people who care to make sure they are peered with\nwell-connected nodes than for us to change the network protocol.\n> \n> > > Well that's what happens now.  But that doesn't help the poor sap who's\n> > > just handed over some goods.  I want it so that small businesses can\n> > > use the client to give them practical answers instead of this\n> > > \"0/unconfirmed\" stuff which requires understanding of the system.\n> > \n> > No, thats not what happens now.  Currently if your node gets a\n> > transaction which conflicts with one it already knows about, it silently\n> > drops it without a second thought.  My point is if you actually dealt\n> > with such cases and made good connections, you would be able to prevent\n> > double spends nearly perfectly.\n> \n> It's not about prevention, they are already prevented.  It's about \n> detection.  Quickly.\nYep, which is what my suggestion does.\n> \n> > > I'm not really trying to prevent double spends -- bitcoin _already_\n> > > prevents double spends.  Also: the only difference between your\n> > > suggestion (don't drop) and my suggestion (don't drop but mark with\n> > > MSG_DOUBLESPEND) is a single number in the inv.  I really don't get\n> > > the objection.\n> > \n> > No, my suggestion is not to relay the second transaction.  The second\n> > transaction should continue to not be relayed as it currently is,\n> > however receiving such a transaction should trigger the node to notify\n> > the user that the transaction should not be accepted until it makes it\n> > into a block (in fact, you could already do this if you implemented a\n> > debug.log parser and made well-placed connections).\n> \n> How is this second transaction going to end up anywhere but on a few \n> isolated nodes if it isn't propagated?  The only way _both_ can be in a pool \n> is if they are both received.  If they aren't both forwarded then it won't \n> be in most pools.  If it isn't in most pools then which how is the relevant \n> user going to get notified?\nIf it only ends up on a few isolated nodes, then you dont care as the\nones that you dont know about will never be confirmed.  If it ends up on\na node you peer with, you will be able to fetch both transactions and\nthen you know about the double spend.  Hence why you have to have\nwell-connected peers.\n> \n> > Bitcoin is absolutely still an experiment and no one thinks that any\n> > kind of future is guaranteed.  This was not meant as an argument, but\n> \n> If it's still an experiment why is there such huge objection to pretty much \n> every change anyone proposes?  Bitcoin is one of the most conservative \n> projects I've ever seen, even for the most passive of changes.  I can \n> understand wanting to prevent potential financial loss, but it's not like \n> I'm suggesting we start broadcasting private keys on the network.\nNo one is against making changes if they offer clear incentive.  This\none doesnt.  Additionally, whether its an experiment or not, people have\nmoney stored in it and a mistake could mean the loss of tens of\nthousands or hundreds of thousands of dollars.  Lastly, no one is (yet)\npaid to work on Bitcoin, sorry the developers dont spend enough time\nmerging for your liking.\n> \n> > simply as \"if bitcoin does end up going somewhere, it will likely be\n> > done like this\".\n> \n> When you're using it as an argument for why a suggestion is unnecessary \n> that's not how it sounds.\n> \n> Anyway; it's fine.  You don't think it's a good idea; and I suspect none of \n> the other official client developers will either, they don't like protocol \n> changes.  So be it; it was only a suggestion and I'm a nobody around here.\nI think having the ability to detect double-spends rapidly is something\nthat is needed, my point is that you already can with relatively little\neffort, no point adding more stuff to make it no easier.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/469ee132/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-04T21:36:23",
                "message_text_only": "> If it's still an experiment why is there such huge objection to pretty much\n> every change anyone proposes?\n\nI don't think there are huge objections to every change. You've only\nreally argued about this with Matt ;)\n\nThe vending machine/detecting double spends issue was discussed by\nSatoshi in July 2010:\n\n   https://bitcointalk.org/index.php?topic=423.msg3819#msg3819\n\nHe mentioned payment processors that could \"alert the transaction is bad\".\n\nGregorys idea looks sound to me. It'd be useful, though, to have a NAK\nmessage for transactions anyway (not propagated). It's possible to get\nyourself into a situation today where you connect to nodes that refuse\nto relay your transaction for some reason (perhaps your peers are\nusing old fee rules, or you are) but you think the transaction was\nrelayed. The user is left wondering why the spend didn't confirm.\n\nIf nodes sent a message saying \"I refuse to process this tx because\n<reason>\" it'd make debugging and testing easier as well."
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-04T22:16:13",
                "message_text_only": "On Thu, 2011-08-04 at 23:36 +0200, Mike Hearn wrote:\n> The vending machine/detecting double spends issue was discussed by\n> Satoshi in July 2010:\n> \n>    https://bitcointalk.org/index.php?topic=423.msg3819#msg3819\n> \n> He mentioned payment processors that could \"alert the transaction is bad\".\nI stand with satoshi here.  No need to add more stuff to the network\nprotocol, a well-connected node can easily monitor the miners(/network)\nfor double-spends and alert whoever may need to know that the\ntransaction should not be accepted.  True, not everyone has the\nresources to try to implement this, however the number of people who\nhave the resources to implement a Bitcoin storefront and not implement\nthis (vs those who will/do use a payment processor who handles such\nthings), I would think, are fairly small.\nAdditionally, keep in mind that many storefronts don't need to care if a\ntransaction confirms in 10 seconds or 1 hour.  Only digital goods and\nphysical purchases could benefit from such speed increases.\n\nOn Fri, 2011-08-05 at 00:10 +0200, Stefan Thomas wrote:\nSince nobody else has mentioned it: There is another (more pragmatic?) \n> way to detect double spends:\n> \n> 1. Connect to lots of clients\n> 2a. If they all send you the same transaction -> double spend unlikely\n> 2b. If some don't send you the transaction (or send a conflicting one) \n> -> double spend in progress\n\nThis is exactly what I've been suggesting this whole time.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/46bac9d9/attachment.sig>"
            },
            {
                "author": "Stefan Thomas",
                "date": "2011-08-05T00:14:31",
                "message_text_only": "On 8/5/2011 12:18 AM, Gregory Maxwell wrote:\n> Except for the fact that such a party is a DOS attack on the network\n> which is already short on functioning listeners.\n\nTo the transaction radar it doesn't much matter whether its connections \nare outgoing or incoming (assuming it can keep its nodes' IPs secret and \nit has reasonable uptime). So you could say that this is an argument \n*for* this kind of double spend protection if it means the creation of \nnodes/clusters accepting 10000+ incoming connections while making few \noutgoing connections. My point is, the amount of connections a node has \nhas nothing to do with its effect on the in/out balance.\n\nSome words on the shortage of listeners itself:\n\nCould this be because the network right now consists largely of end \nusers with residential type networks? With BitTorrent a lot of users go \nthrough the trouble of opening up ports in their router manually in \norder to get more peers and better download speeds - this is not (yet?) \na widespread practice with Bitcoin. (I know Bitcoin has UPnP support, \nbut I haven't found any numbers on how widely the IGD protocol is \nactually deployed. Wikipedia says that \"some NAT routers\" support it and \nthat it's not an IETF standard. All routers I've actually seen in real \nlife had it disabled by default.)\n\nIn the long term all the trends favor more clients allowing incoming \nconnections: End users will tend to move towards lighter clients and the \nones that stick with full nodes will tend to configure them better - \nmeaning opening ports etc. - as documentation improves.\n\nAs for downright malicious nodes: It should be possible to come up with \nsome sensible policies to temp ban nodes that don't relay any useful \nmessages or try to flood you. This is an ongoing optimization problem in \nany peer-to-peer network and I expect us to make progress with this over \ntime.\n\n\nOn 8/5/2011 12:16 AM, Matt Corallo wrote:\n> This is exactly what I've been suggesting this whole time.\n\nI had only seen you mention a \"miner backbone\" which is sort of a more \nlong-term vision, whereas Transaction Radar exists today. I didn't read \neverything though, so if you mentioned this idea specifically, please \njust consider my post as further support for your position."
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-05T11:05:34",
                "message_text_only": "> Could this be because the network right now consists largely of end\n> users with residential type networks?\n\nProbably.\n\nHow many connections \"should\" a node use? We faced this decision in\nBitCoinJ recently and I asked the patch writer to reduce the number.\nIt seems pretty arbitrary to me - if you aren't going to relay, a\nsingle connection should be good enough. Yes, it makes sybil easier,\nbut if you pick the one node randomly enough it might be ok?\n\n> actually deployed. Wikipedia says that \"some NAT routers\" support it and\n> that it's not an IETF standard. All routers I've actually seen in real\n> life had it disabled by default.)\n\nHmm, I don't recall ever enabling it in my router but it's on and the\nBitcoin support works. UPnP is used by all kinds of common programs\nlike Skype and Xbox Live."
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-05T11:58:25",
                "message_text_only": "On 2011 August 05 Friday, Mike Hearn wrote:\n\n> How many connections \"should\" a node use? We faced this decision in\n> BitCoinJ recently and I asked the patch writer to reduce the number.\n> It seems pretty arbitrary to me - if you aren't going to relay, a\n> single connection should be good enough. Yes, it makes sybil easier,\n> but if you pick the one node randomly enough it might be ok?\n\nI don't really see that \"number of connections\" is the relevant metric.  For a \nwell designed bit of software the number of connections shouldn't matter.  \nThere's a bit of overhead in the operating system per connection, but I'd be \nsurprised if that ever became a limiting factor in a stateless system like \nbitcoin.  In fact, bitcoin would work perfectly well as a UDP system (I'm not \nadvocating that of course), and then there would be no such thing as a \nconnection.\n\nBandwidth is the measure that's relevant.\n\nTherefore if bandwidth is the measure, just pick a bandwidth you like and \nadd/accept connections until you hit that bandwidth limit (probably averaged).  \nThis has the advantage that it can be measured automatically, or sensibly set \nby a user.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/4090edad/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-05T12:06:09",
                "message_text_only": "On Fri, 2011-08-05 at 12:58 +0100, Andy Parkins wrote:\n> On 2011 August 05 Friday, Mike Hearn wrote:\n> \n> I don't really see that \"number of connections\" is the relevant metric.\nNumber of connections is something that needs serious thought.  Too many\nand you fill everyone's connection slots and no one can make\nconnections.  Too few and you don't have a network but just a bunch of\nislands which would also cause serious problems.\nIf you aren't relaying, each connection takes almost no bandwidth, so\nthe question is how many do you need to be considered secure.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/ede79af3/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-05T13:03:05",
                "message_text_only": "On 2011 August 05 Friday, Matt Corallo wrote:\n> On Fri, 2011-08-05 at 12:58 +0100, Andy Parkins wrote:\n> > I don't really see that \"number of connections\" is the relevant metric.\n> \n> Number of connections is something that needs serious thought.  Too many\n> and you fill everyone's connection slots and no one can make\n> connections.  Too few and you don't have a network but just a bunch of\n> islands which would also cause serious problems.\n> If you aren't relaying, each connection takes almost no bandwidth, so\n> the question is how many do you need to be considered secure.\n\nI'm arguing that \"number of connection slots\" isn't the best metric; so that \nwouldn't matter.  Just keep accepting incoming connections (with some sanity \nlimit of course) until you've allocated your bandwidth, not your number of \nconnections.\n\nIf I connect to a thousand nodes and never send anything, I'm not using up \nvery much of their resources.  If _they_ want to use up resources by relaying, \nthen that is their choice, but again they can do that based on bandwidth \ncalculations rather than connection counts.  If I am sending, then that adds \nto their bandwidth and gets included in whatever limit they've chosen.\n\nFor example: the client could simply maintain an average bandwidth over all \nconnections.  If that average is less than threshold0, then make new outgoing \nconnections.  If that average exceeds threshold1, then stop accepting incoming \nconnections.  If it exceeds threshold2, start dropping established incoming \nconnections.  If it exceeds theshold3, start dropping established outgoing \nconnections.\n\nThe actual rules don't matter so much; I'm just saying bandwidth is a better \nmetric than connection count.  If you limit by connection count, then you'll \njust end up filled with non-relaying listeners, since they (in the future) \nwill be the most commonplace.  You'll have no incoming relays, and therefore \nnothing to forward, so your bandwidth will be zero, but your connection count \nat maximum -- you've locked yourself out.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/c74ccaae/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-05T21:23:09",
                "message_text_only": "On Fri, Aug 5, 2011 at 9:03 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> The actual rules don't matter so much; I'm just saying bandwidth is a better\n> metric than connection count.\n\nI'm sure many people would be interested in patches that solve the\n~O(N) peak memory usage with additional connections."
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-05T21:30:50",
                "message_text_only": "On Fri, 2011-08-05 at 14:03 +0100, Andy Parkins wrote:\n> I'm arguing that \"number of connection slots\" isn't the best metric; so that \n> wouldn't matter.  Just keep accepting incoming connections (with some sanity \n> limit of course) until you've allocated your bandwidth, not your number of \n> connections.\nMike and me were talking about outgoing connection count, not incoming,\nwhich is another thing entirely.\nHowever, to your point: having 1000 Bitcoin connection is still almost\nno traffic, the only timt you really hit much traffic is when you get a\npeer with a client who doesn't have the full chain as they will start\ndownloading the chain maxing your bandwidth.  My bandwidth of Bitcoin is\nsomething like avg 3GB/month for 125 connections which is nothing.\nHowever it has very brief spikes of my entire outgoing bandwidth.\nThus, neither bandwidth nor connection count are really good metrics for\nchoosing your number of incoming slots.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/d487f4cb/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-05T12:00:02",
                "message_text_only": "On Fri, 2011-08-05 at 02:14 +0200, Stefan Thomas wrote:\n> (I know Bitcoin has UPnP support, \n> but I haven't found any numbers on how widely the IGD protocol is \n> actually deployed. Wikipedia says that \"some NAT routers\" support it and \n> that it's not an IETF standard. All routers I've actually seen in real \n> life had it disabled by default.)\nIt used to be enabled by default on virtually all routers a couple years\nago, but too many \"security researchers\" complained that it was a \"huge\nsecurity vulnerability\" (I guess they hadn't heard of stun or outgoing\nconnections) so its not typically disabled on most routers.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/5ce8214a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Double spend detection to speed up transaction trust",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andrew Schaaf",
                "Mike Hearn",
                "Andy Parkins",
                "Gregory Maxwell",
                "Matt Corallo",
                "Gavin Andresen",
                "Stefan Thomas"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 58794
        }
    },
    {
        "title": "[Bitcoin-development] Useful bitcoin patches...",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2011-08-04T20:29:01",
                "message_text_only": "Reminder these are still ready for merging...\n\nJeff, you seem to have rewritten *part of* bugfix_CreateThread_leak and \nneglected to attribute the original author (as my branch did/does).\n\n> For the \"3diff\" version, I extracted and made proper git branches for each\n> logical part:\n>   hub_mode\n>   threaded_rpc\n>   \\-- rpc_keepalive (depends on threaded_rpc, or a single connection would\n>                      keep the JSON-RPC interface locked up)\n>   signal_blk_notify (generic version of -pollpidfile, with a bugfix)\n>   bugfix_CreateThread_leak\n>   getwork_dedupe (original branch for my bugfix)\n> \n> In addition, I also consider these branches valid candidates for merging:\n>   coinbaser (popens a given command and reads coinbase outputs from stdout)\n>   gitignore (ignore some common misc files)\n>   minfee_modes (internal function changes to allow specifying different\n> fees for relay, send, or accept-in-block)\n>   \\-- eligius_relay (relay lower fees only Eligius will accept)\n>       \\-- eligius_sendfee (send lower fees only Eligius will accept)\n>   txinfo (adds entries to getinfo for transactions accepted for relaying,\n>           transactions accepted for the current block-in-progress, and\n> current block-in-progress size)\n>   bitcoinuri (compliant support for all bitcoin: URIs)\n> \n> All available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-04T20:42:01",
                "message_text_only": "On Thursday, August 04, 2011 4:29:01 PM Luke-Jr wrote:\n> Jeff, you seem to have rewritten *part of* bugfix_CreateThread_leak and\n> neglected to attribute the original author (as my branch did/does).\n\nMy apologies. BlueMatt showed me how my comment here was wrong.\nHopefully I'll remember how GitHub shows merges like this in the future."
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-04T23:43:56",
                "message_text_only": ">> \u00a0 threaded_rpc\n>> \u00a0 \\-- rpc_keepalive (depends on threaded_rpc, or a single connection would\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0keep the JSON-RPC interface locked up)\n\nDefinitely want _some_ path to HTTP/1.1 persistent connections, either\nthis or async I/O, https://github.com/bitcoin/bitcoin/pull/214\n\nBased on field usage, it sounds like the above, threaded rpc, is more\nstable.  So my only question remaining, for which I've not yet\nreviewed the code, is:  what is the behaviour under assault from lots\nof new incoming TCP connections?  One very common problem with\nthreaded TCP servers is blindly creating new threads without any\nfiltering or checking of incoming connections, thereby quickly\nreaching thread limits, possibly causing other parts of the program to\nfail.\n\nAny amount of RPC request volume, miner or not, sent to the present\nimplementation winds up using a lot of socket resources due to the\nconstant disconnect/reconnect demanded of the current HTTP/1.0 code.\nThis patch addresses that key issue, providing positive impact for all\nproduction bitcoin sites using RPC.\n\nMiners are hitting these problems now, and Gavin's right that mainnet\nminers are a small portion of the total population, but our RPC server\nimplementation really is bloody awful at present.  Reliable,\nproduction TCP servers use either threads or async I/O, or a\ncombination of both (thread pool + async I/O == win).  Deploying\nHTTP/1.1 persistent connections will make a positive impact at any\nsite heavily using RPC.\n\n\n>> \u00a0 bugfix_CreateThread_leak\n\nDid I leave something out, when merging\n\n     commit 67ed7d9d4929d8fe1c5f976c184c72dff02d83b7\n     Author: JoelKatz <DavidJoelSchwartz at GMail.com>\n     Date:   Mon Jul 25 15:06:45 2011 -0700\n\n?\n\n\n>> \u00a0 getwork_dedupe (original branch for my bugfix)\n\nI think we need this, but have not yet reviewed/thought about it.\n\n>> \u00a0 gitignore (ignore some common misc files)\n\nSounds nice to have.\n\n     Jeff\n\n\nP.S.  I'm moving my home computer lab setup to a new house.  Internet\nwill be spotty until August 11, and you won't see much of me at all on\n#bitcoin-dev."
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-05T03:01:47",
                "message_text_only": "On Thursday, August 04, 2011 7:43:56 PM Jeff Garzik wrote:\n> >>   bugfix_CreateThread_leak\n> \n> Did I leave something out, when merging\n> \n>      commit 67ed7d9d4929d8fe1c5f976c184c72dff02d83b7\n>      Author: JoelKatz <DavidJoelSchwartz at GMail.com>\n>      Date:   Mon Jul 25 15:06:45 2011 -0700\n> \n> ?\n\nYes. I'm not sure it has any practical impact on the software, but there was \nwhat looks like a platform-specific compile fix (casting between potentially \nincompatible types) too."
            }
        ],
        "thread_summary": {
            "title": "Useful bitcoin patches...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 4286
        }
    },
    {
        "title": "[Bitcoin-development] DragonFly BSD bitcoind patches",
        "thread_messages": [
            {
                "author": "Venkatesh Srinivas",
                "date": "2011-08-08T03:07:52",
                "message_text_only": "Hi,\n\nRelated to https://bitcointalk.org/index.php?topic=28022.0 ;\n\nHere are three patches that allow bitcoind to build and run on DragonFly BSD.\n\n0001) bitcoind assumes a definition of BSD implies SO_NOSIGPIPE is available.\nThis is not true on NetBSD, OpenBSD, and DragonFly.\n\n0002) main.cpp has: \"char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\"\nPer discussion on the thread linked, leaving the signedness of pchMessageStart\nis unsafe for values > 0x80. This patch specifies 'unsigned char' in main.cpp\nand net.h.\n\n0003) db.cpp has a number of uses of make_tuple and has 'using namespace std'\nand 'using namespace boost'. Without qualifying make_tuple, std::make_tuple is\npreferred, which is incorrect. This patch qualifies make_tuple.\n\nPatches are from git format-patch and can be applied with git-am.\n\nThanks,\n-- vs\n-------------- next part --------------\nFrom 310cd8d1bdd130d04c98e5e724b2af904fe94e2e Mon Sep 17 00:00:00 2001\nFrom: Venkatesh Srinivas <me at endeavour.zapto.org>\nDate: Sun, 7 Aug 2011 12:18:05 -0400\nSubject: [PATCH 1/3] Test for SO_NOSIGPIPE rather than assuming all BSDs\n support it.\n\n---\n src/net.cpp |    4 ++--\n 1 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/src/net.cpp b/src/net.cpp\nindex d697788..9feeb43 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -98,7 +98,7 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout\n     SOCKET hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n         return false;\n-#ifdef BSD\n+#ifdef SO_NOSIGPIPE\n     int set = 1;\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n@@ -1579,7 +1579,7 @@ bool BindListenPort(string& strError)\n         return false;\n     }\n \n-#ifdef BSD\n+#ifdef SO_NOSIGPIPE\n     // Different way of disabling SIGPIPE on BSD\n     setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n #endif\n-- \n1.7.5.4\n\n-------------- next part --------------\nFrom 7ed0ddde65b3f5c467e471fc6f9fff648b976e56 Mon Sep 17 00:00:00 2001\nFrom: Venkatesh Srinivas <me at endeavour.zapto.org>\nDate: Sun, 7 Aug 2011 12:19:14 -0400\nSubject: [PATCH 2/3] Use 'unsigned char' rather than 'char' for\n pchMessageStart.\n\n---\n src/main.cpp |    2 +-\n src/net.h    |    2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/src/main.cpp b/src/main.cpp\nindex b57974f..4bcb87f 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -1766,7 +1766,7 @@ bool static AlreadyHave(CTxDB& txdb, const CInv& inv)\n // The message start string is designed to be unlikely to occur in normal data.\n // The characters are rarely used upper ascii, not valid as UTF-8, and produce\n // a large 4-byte int at any alignment.\n-char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n+unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n \n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\ndiff --git a/src/net.h b/src/net.h\nindex 78055bf..6678e56 100644\n--- a/src/net.h\n+++ b/src/net.h\n@@ -66,7 +66,7 @@ bool StopNode();\n //  (4) size\n //  (4) checksum\n \n-extern char pchMessageStart[4];\n+extern unsigned char pchMessageStart[4];\n \n class CMessageHeader\n {\n-- \n1.7.5.4\n\n-------------- next part --------------\nFrom 74647b73e06ae5b4ec995873a8ef56977f3b7e93 Mon Sep 17 00:00:00 2001\nFrom: Venkatesh Srinivas <me at endeavour.zapto.org>\nDate: Sun, 7 Aug 2011 12:20:00 -0400\nSubject: [PATCH 3/3] Qualify make_tuple with boost:: namespace.\n\n---\n src/db.cpp |    4 ++--\n 1 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/src/db.cpp b/src/db.cpp\nindex 9c8c9c4..b3fa3e1 100644\n--- a/src/db.cpp\n+++ b/src/db.cpp\n@@ -610,7 +610,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n \n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n {\n-    return Write(make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n }\n \n int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n@@ -638,7 +638,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey;\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n+            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n         CDataStream ssValue;\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n-- \n1.7.5.4\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 198 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110807/d7036521/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-11T02:45:36",
                "message_text_only": "On Sun, Aug 7, 2011 at 11:07 PM, Venkatesh Srinivas\n<me at endeavour.zapto.org> wrote:\n> Hi,\n>\n> Related to https://bitcointalk.org/index.php?topic=28022.0 ;\n>\n> Here are three patches that allow bitcoind to build and run on DragonFly\n> BSD.\n>\n> 0001) bitcoind assumes a definition of BSD implies SO_NOSIGPIPE is\n> available.\n> This is not true on NetBSD, OpenBSD, and DragonFly.\n\napplied\n\n> 0002) main.cpp has: \"char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\"\n> Per discussion on the thread linked, leaving the signedness of\n> pchMessageStart\n> is unsafe for values > 0x80. This patch specifies 'unsigned char' in\n> main.cpp\n> and net.h.\n>\n> 0003) db.cpp has a number of uses of make_tuple and has 'using namespace\n> std'\n> and 'using namespace boost'. Without qualifying make_tuple, std::make_tuple\n> is\n> preferred, which is incorrect. This patch qualifies make_tuple.\n\nLooks good at first glance.  Creating pull requests @ github for these two.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "DragonFly BSD bitcoind patches",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Venkatesh Srinivas"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5937
        }
    },
    {
        "title": "[Bitcoin-development] Change to multiple executables?",
        "thread_messages": [
            {
                "author": "John Smith",
                "date": "2011-08-10T09:36:05",
                "message_text_only": "All,\n\nIn the current mainline client everything is lugged into one executable\n(with an optional daemon-only one). I think this is a bad idea for various\nreasons, and would propose something like:\n\n   - bitcoind: bitcoin daemon\n   - bitcoin(-qt): bitcoin GUI executable\n   - bitcoincl: bitcoin RPC command line\n\nBy default, all three would be built. In non-GUI mode, only bitcoind and\nbitcoincl are built (the names are obviously open for discussion).\n\nAdvantages:\n\n   - It is more clear to the user. One command, one function.\n   - It simplifies the main functions.\n   - The UI would no longer double-function as daemon. It is a waste of\n   memory to link the UI libs if you only want to run a background process.\n   - The UI and daemon would no longer double-function as RPC call. Why load\n   the code for UI and network if you just want to send a single command over\n   JSONRPC?  This would also prevent accidentally launching the daemon/UI\n   locally if you just want to send a command and forget to give an argument.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/dc4f6bdd/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-10T10:14:49",
                "message_text_only": "On Wed, 2011-08-10 at 09:36 +0000, John Smith wrote:\n> All,\n> \n> In the current mainline client everything is lugged into one\n> executable (with an optional daemon-only one). I think this is a bad\n> idea for various reasons, and would propose something like:\n>       * bitcoind: bitcoin daemon\n>       * bitcoin(-qt): bitcoin GUI executable\n>       * bitcoincl: bitcoin RPC command line\n> By default, all three would be built. In non-GUI mode, only bitcoind\n> and bitcoincl are built (the names are obviously open for\n> discussion). \n> \n> Advantages:\n>       * It is more clear to the user. One command, one function.\nI would argue its less clear for the user.  Instead of opening either\nbitcoind or bitcoin to get RPC or GUI, now you have to open bitcoin and\nbitcoind or bitcoincl and bitcoind.  Now, obviously bitcoin and\nbitcoincl can open bitcoind for you, but I think adding more executables\ncomplicates things for little clear advantage.\n>       * It simplifies the main functions.\n>       * The UI would no longer double-function as daemon. It is a\n>         waste of memory to link the UI libs if you only want to run a\n>         background process.\nAs you pointed out, we have bitcoind for just this reason.\n>       * The UI and daemon would no longer double-function as RPC call.\n>         Why load the code for UI and network if you just want to send\n>         a single command over JSONRPC?  This would also prevent\n>         accidentally launching the daemon/UI locally if you just want\n>         to send a command and forget to give an argument.\nMaking RPC optional for GUI users would be an interesting addition.\n> JS\n\nAll this said, I totally agree with the more clear split of the source\ninto separate library-ish components (I'm working on part of that now).\nHowever, I don't like the idea of splitting into more executables.  \n\nIf you are suggesting this so that bitcoin-qt can be distributed being\nbuilt off of bitcoind, I would say go ahead and pull-request bitcoin-qt.\nI'm of the opinion that it should be merged whether we have autotools or\nnot (we already have 5 makefiles, whats a few more options in those?)\nand jgarzik seemed to indicate that he would agree (Gavin?, sipa?\ntcatm?).\n\nMatt"
            },
            {
                "author": "John Smith",
                "date": "2011-08-10T10:26:30",
                "message_text_only": "On Wed, Aug 10, 2011 at 10:14 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> I would argue its less clear for the user.  Instead of opening either\n> bitcoind or bitcoin to get RPC or GUI, now you have to open bitcoin and\n> bitcoind or bitcoincl and bitcoind.  Now, obviously bitcoin and\n> bitcoincl can open bitcoind for you, but I think adding more executables\n> complicates things for little clear advantage.\n>\n\nUI would obviously still have RPC functionality with -server. I don't mean\ndropping that. The UI links both the UI and the network code (for now, until\nthis is separated out and the preferred UI<->core communication method is\nthrough RPC).\n\nI just mean that the *headless* daemon is separate from the UI executable,\nwhich is the case for any other sane client/server-based program in\nexistence, from bittorrent nodes to game servers.\n\nIt would also make it possible to build the command line RPC client\n(bitcoin-cl) *without* building the server or UI. Useful if you want to\nremotely control a Bitcoin daemon but not want to build it locally.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/891241ae/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-10T10:43:36",
                "message_text_only": "On Wed, Aug 10, 2011 at 12:14:49PM +0200, Matt Corallo wrote:\n> On Wed, 2011-08-10 at 09:36 +0000, John Smith wrote:\n> > All,\n> > \n> > In the current mainline client everything is lugged into one\n> > executable (with an optional daemon-only one). I think this is a bad\n> > idea for various reasons, and would propose something like:\n> >       * bitcoind: bitcoin daemon\n> >       * bitcoin(-qt): bitcoin GUI executable\n> >       * bitcoincl: bitcoin RPC command line\n> > By default, all three would be built. In non-GUI mode, only bitcoind\n> > and bitcoincl are built (the names are obviously open for\n> > discussion). \n> \n> All this said, I totally agree with the more clear split of the source\n> into separate library-ish components (I'm working on part of that now).\n> However, I don't like the idea of splitting into more executables.  \n\nI do agree about splitting off bitcoincl - it's kinda confusing now how\nthe client behaves as a rpc daemon or UI when no RPC command-line\nparameters are present, and as a command-line client otherwise.\n\nI am less sure UI and RPC should be split (though being able to select\nboth independently from eachother at compile time would be nice). I\noften run the UI and switch to RPC calls to inspect some details.\nNot sure how common this usage pattern is, though.\n\n> If you are suggesting this so that bitcoin-qt can be distributed being\n> built off of bitcoind, I would say go ahead and pull-request bitcoin-qt.\n> I'm of the opinion that it should be merged whether we have autotools or\n> not (we already have 5 makefiles, whats a few more options in those?)\n> and jgarzik seemed to indicate that he would agree (Gavin?, sipa?\n> tcatm?).\n\nThe problem is that bitcoin-qt is built using qmake, and the rest using\nmakefiles... so it's more than just adding an additional makefile.\n\nThat said, it seems bitcoin-qt is mature enough to replace wxbitcoin\nto me, and would definitely like to see it in mainline. How streamlined\nis the process of building bitcoin-qt on windows and osx? Maybe we can\nswitch everything to qmake (for now, as long as no maintained autotools \nis present)?\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-10T21:37:41",
                "message_text_only": "On Wed, Aug 10, 2011 at 5:36 AM, John Smith <witchspace81 at gmail.com> wrote:\n> In the current mainline client everything is lugged into one executable\n> (with an optional daemon-only one). I think this is a bad idea for various\n> reasons, and would propose something like:\n>\n> bitcoind: bitcoin daemon\n> bitcoin(-qt): bitcoin GUI executable\n> bitcoincl: bitcoin RPC command line\n>\n> By default, all three would be built. In non-GUI mode, only bitcoind and\n> bitcoincl are built (the names are obviously open for discussion).\n\nSeems reasonable to me.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-11T13:50:54",
                "message_text_only": "On Wed, Aug 10, 2011 at 11:36, John Smith <witchspace81 at gmail.com> wrote:\n> All,\n>\n> In the current mainline client everything is lugged into one executable\n> (with an optional daemon-only one). I think this is a bad idea for various\n> reasons, and would propose something like:\n>\n> bitcoind: bitcoin daemon\n> bitcoin(-qt): bitcoin GUI executable\n> bitcoincl: bitcoin RPC command line\n\nBack on topic:\n\nI initially misunderstood your proposal. Let me reformulate, and\nsuggest some names:\n* bitcoin-gui (or bitcoin-qt): always starts GUI, optionally starts\nRPC server, no RPC client\n* bitcoin-server: always starts RPC server, no RPC client, no GUI\n* bitcoin-client: always runs RPC client, no RPC server, no GUI\n\nAdditionally, we could offer a script or symlinked executable with\nnames \"bitcoin\" and\n\"bitcoind\" that detect whether RPC commands are present on the command line, and\nbased on this invoke either bitcoin-server/bitcoin-gui or\nbitcoin-client (for backward\ncompatibility).\n\n-- \nPieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-10T16:49:21",
                "message_text_only": "RE: splitting off the \"send commands to a running bitcoin\" :\n\nI'm mildly against it. It would be less confusing for newbies, at the\ncost of forcing everybody who has already written backup scripts or\nother interact-with-running-bitcoin tools to tweak their code. The\ncoding will be easy, but do you really want to spend the time to\nanswer all the \"I installed Bitcoin X.Y and now my backup script\ndoesn't work\" questions and modify the wiki pages and ...\n\nI'd rather that time be spent working on any remaining build issues so\nwe can switch to bitcoin-qt.  I don't care if it is autotools or qmake\nor QT creator, I just care that it works on Windows and Linux under\ngitian and has clear instructions so I can build it on my Mac.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "John Smith",
                "date": "2011-08-10T17:45:42",
                "message_text_only": "On Wed, Aug 10, 2011 at 4:49 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> RE: splitting off the \"send commands to a running bitcoin\" :\n>\n> I'm mildly against it. It would be less confusing for newbies, at the\n> cost of forcing everybody who has already written backup scripts or\n> other interact-with-running-bitcoin tools to tweak their code. The\n> coding will be easy, but do you really want to spend the time to\n> answer all the \"I installed Bitcoin X.Y and now my backup script\n> doesn't work\" questions and modify the wiki pages and ...\n>\n\nAs the project is still in \"experimental\" phase I suppose people can expect\nchanges like this? And the change is pretty much trivial, and it makes sense\nfor a future direction (UI<->Wallet in separate processes for security\nconcerns).\n\nTo be honest I feel a bit like every change that I (and I've also heard this\nfrom others) propose is shot down, no matter how well formulated.  This is\nactively discouraging developers from joining this project.\n\nOf course it makes sense to be a careful, but the project is not on life\nsupport is it? Satoshi did a great job making the program, but his work was\nnot perfect, and it makes sense to look ahead a bit.\n\nI think it would be better to switch to two branches, like most other open\nsource projects I've worked with:\n\n0.3.x -> small, compatible changes, bugfixes, like now\n0.4.x -> trunk, more impactful changes, refactorings, eventual major release\n\nBoth will obviously be fully compatible on the P2P-level.\n\n\n> I'd rather that time be spent working on any remaining build issues so\n> we can switch to bitcoin-qt.  I don't care if it is autotools or qmake\n> or QT creator, I just care that it works on Windows and Linux under\n> gitian and has clear instructions so I can build it on my Mac.\n>\n\nI could do the Gitian stuff but not the Mac instructions, as I don't have a\nMac...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/199e8a3e/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-10T18:41:51",
                "message_text_only": "> To be honest I feel a bit like every change that I (and I've also heard this\n> from others) propose is shot down, no matter how well formulated.\u00a0 This is\n> actively discouraging developers from joining this project.\n\nWell, to be honest I don't think more developers adding new features\nare needed right now-- I think the project's critical needs are more\npeople testing and helping to fix bugs and scalability issues.\n\nIn this particular case, I said I was mildly against it-- if you want\nme to switch to supporting it, then reassure me you're willing to do\nALL the work to make it happen.  Send me a list of wiki pages you'll\nedit to document the change and tell me that you'll be around to help\npeople rewrite their backup scripts.\n\n> I think it would be better to switch to two branches, like most other open\n> source projects I've worked with.\n\nI don't see how dividing efforts between a 'bug fix' and 'development'\nbranch will help fix the project's critical needs. If we did, I think\nthere would be less pressure to help with the boring bug-fixing and\ntesting of the bug-fix branch, which I think would be bad.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-10T19:32:00",
                "message_text_only": "On Wednesday 10 August 2011 19:41:51 Gavin Andresen wrote:\n> > To be honest I feel a bit like every change that I (and I've also heard\n> > this from others) propose is shot down, no matter how well\n> > formulated.  This is actively discouraging developers from joining\n> > this project.\n> \n> Well, to be honest I don't think more developers adding new features\n> are needed right now-- I think the project's critical needs are more\n> people testing and helping to fix bugs and scalability issues.\n\n(Rant follows; stop reading now)\n\nThat paragraph reveals a gross misunderstanding of how open source works.  \n\nPeople get itches and they want to scratch them.  They aren't paid, so they \ndon't necessarilly want to turn up and be told which part they _should_ be \nworking on.  The choice is not \"bug fix that Gavin wants\" or \"new feature \nthat New Developer wants\", it is \"New Feature\" or nothing.\n\nOf course, nothing forces existing developers to accept these new features; \nbut the incredibly negative attitude on display when any new feature is \nsuggested is not the way to grow a community.  The correct way is a \nmentoring attitude -- offering opinions on how a new developer can get their \nidea in rather than telling them why it will never happen.\n\n> I don't see how dividing efforts between a 'bug fix' and 'development'\n> branch will help fix the project's critical needs. If we did, I think\n\nAgain: that's not your call.  People will work on what interests them.  I've \nsuggested a couple of features both here and on the forum and been shot down \nin varying degrees every time.  Fine, but don't expect that I'm thinking \n\"well I'll become an unpaid bug fixing grunt instead\".\n\nI don't expect to be appointed head developer because I suggest an idea.  I \ndon't even expect anyone else to implement my idea for me.  But why should I \nspend time on my own idea when the feedback is \"no\", \"no\", \"we've already \nthought of that\", \"not needed\", \"go away\", \"why not fix some bugs instead\"?\n\nI'm amazed that John Smith is as polite and persistent as he is looking at \nthe amount of effort he's put in putting a pretty face on the train crash \nthat existed before hand and seems to get no benefit of the doubt for his \nwork.\n\n> there would be less pressure to help with the boring bug-fixing and\n> testing of the bug-fix branch, which I think would be bad.\n\nThat pressure might be relieved if the community were able to grow a bit, \nand people felt they had a personal investment.  That means loosening the \nreigns a bit; and perhaps a development branch would be the way to do that \nwhile not compromising code quality.\n\nI suggest a look at the way git itself is developed; it has the following \nbranches:\n\n - master: the latest release + newly accepted features\n - maint: the latest release + bug fixes only\n - next: new features planned for inclusion, actively being worked on.\n   Often created by merging \"topic\" branches from individual developers\n   working on their current itch\n - pu: crazy stuff; not planned for inclusion, but acting as a staging\n   area for people to show what they're working on\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-10T19:57:29",
                "message_text_only": "On Wed, Aug 10, 2011 at 3:32 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> People get itches and they want to scratch them. \u00a0They aren't paid, so they\n> don't necessarilly want to turn up and be told which part they _should_ be\n> working on. \u00a0The choice is not \"bug fix that Gavin wants\" or \"new feature\n> that New Developer wants\", it is \"New Feature\" or nothing.\n\nThis is true -- though there is value to having a list of \"things we\nthink people should focus on\" for the motivated, and for new people\ninterested in tackling a project, but not sure what project to tackle.\n\n>> there would be less pressure to help with the boring bug-fixing and\n>> testing of the bug-fix branch, which I think would be bad.\n>\n> That pressure might be relieved if the community were able to grow a bit,\n> and people felt they had a personal investment. \u00a0That means loosening the\n> reigns a bit; and perhaps a development branch would be the way to do that\n> while not compromising code quality.\n\nA centrally managed development branch on bitcoin/bitcoin.git is not\nthe way to do it, however.  See the description of linux-next, in my\nprevious email, for a more distributed method which can easily be\nlayered on top of the existing bitcoin dev structure by any motivated\nvolunteer(s).\n\nThink distributed.  :)  The community does not need Linus's help\n(linux-next) or Gavin's help (bitcoin-next) to do this.  linux-next\nbecame so widely used and useful that Linus requires almost all\nchanges to be first staged in linux-next.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-10T21:13:09",
                "message_text_only": "On Wednesday 10 August 2011 20:57:29 Jeff Garzik wrote:\n\n> > People get itches and they want to scratch them.  They aren't paid, so\n> > they don't necessarilly want to turn up and be told which part they\n> > _should_ be working on.  The choice is not \"bug fix that Gavin wants\"\n> > or \"new feature that New Developer wants\", it is \"New Feature\" or\n> > nothing.\n> \n> This is true -- though there is value to having a list of \"things we\n> think people should focus on\" for the motivated, and for new people\n> interested in tackling a project, but not sure what project to tackle.\n\nMy objection is not that such a list exists, it is that potential new \ndevelopers are, essentially, shouted down unless they are working on that \nlist.  I cannot imagine that many new developers arrive under those \ncircumstances.\n\n> A centrally managed development branch on bitcoin/bitcoin.git is not\n> the way to do it, however.  See the description of linux-next, in my\n> previous email, for a more distributed method which can easily be\n> layered on top of the existing bitcoin dev structure by any motivated\n> volunteer(s).\n\nI don't think I said anything about it being centrally managed.  git lets us \nstore these branches anywhere of course.  The fact is that such a branch \nexists somewhere.\n\n> Think distributed.  :)  The community does not need Linus's help\n> (linux-next) or Gavin's help (bitcoin-next) to do this.  linux-next\n\nI didn't say that it required anybody's help; but it does require a bit of \nwillingess on the part of the master-branch-owning developers to import from \nthat branch.\n\n> became so widely used and useful that Linus requires almost all\n> changes to be first staged in linux-next.\n\nThey key thing with linux-next is that work done on it _does_ make it into \nthe kernel.  Tell me -- how many feature branches for bitcoin are just \nsitting as a pull request on github, and are now months old and abandoned \nout of disgust by their original authors?  Here's another question: why is \nit that so many projects have \"specially compiled\" versions of bitcoin?  \nRhetorical question... it's because the official client doesn't do what they \nneed, and won't accept their patches to add it (even optionally).\n\nI've only been watching this list for a few weeks (since the forum turned \ninto an echo chamber); but I'm completely depressed by the agressive \nrejections of every new idea anyone raises.\n\nDon't believe me?  Here's a list of ideas I've had \"no, no, no\"d so far; not \none of which would have any financial implication at all.  Only some of \nwhich would break backward compatibility.\n\n - Extra bits in the service field of the version message to allow nodes\n   to indicate if they are mining; if they are willing to be seed nodes;\n   if they relay transactions; if they want relayed transactions.\n - getblocks in reverse chronological order so clients can start up quicker\n   while downloading the blocks in the backround.  Ironically I was told \n   \"patches welcome\" by someone who didn't reject this one instantly.\n - Remove verack, as it's completely unnecessary.\n - Query miners for pending transactions\n - Application version separate from client version\n - A way of requesting block bodies without headers (saving a lot of traffic\n   for a thin client upgrading)\n - Double SHA-256 for a packet checksum?  Seriously?\n - Sequence number as part of TxIn instead of part of the whole transaction\n - Script parameters should be stored outside the script, and reference by\n   the script.  All that ridiculous filtering of the scripts in OP_CHECKSIG\n   would then go away.\n - MSG_DOUBLESPEND... nope\n - getblocks to accept MSG_TX and do something sensible\n\nEvery single one of those has been shot down by one or more of the main \ndevelopers.  I'm not a genius, and not arrogant enough to assume that \neverything I say is right, but _nothing_?  Really?  There is no problem that \none of the above addresses?\n\nGiven that, what do I do?  Hang around and get battered some more, or go \naway to my own little corner and work on my own implementation?\n\nYou can imagine then that when I read moans about there not being enough new \ndevelopers fixing bugs, that I am unsurprised and unsympathetic.  I like \nbitcoin enough to hover on this list; and offer a view of your world from a \npotential developer who was chased away.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-10T21:35:01",
                "message_text_only": "On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> Don't believe me? \u00a0Here's a list of ideas I've had \"no, no, no\"d so far; not\n> one of which would have any financial implication at all. \u00a0Only some of\n> which would break backward compatibility.\n\nBreaking backwards compatibility means breaking people's access to\ntheir own money.\n\nIf you remove an \"unnecessary\" step that existing nodes expect, then\nthe cost of disrupting monetary access seems higher than the value of\nthat breaking change.\n\n\n> \u00a0- Extra bits in the service field of the version message to allow nodes\n> \u00a0 to indicate if they are mining; if they are willing to be seed nodes;\n> \u00a0 if they relay transactions; if they want relayed transactions.\n\nMy own 'supernode' proposal also includes using the nServices bits.\nThere's nothing fundamentally incompatible or wrong about that.\n\n> \u00a0- Remove verack, as it's completely unnecessary.\n\nCompatibility issues?\n\n> \u00a0- Query miners for pending transactions\n\nI could see value in querying a bitcoind node over JSON-RPC for\npending transactions... and by extension, supporting that as an RPC on\nvarious miners' pool servers.  Having a local dump of pending TX's\nwould be useful.\n\nAs an optional bitcoin P2P protocol command, available to anyone,\nseems to negatively impact privacy.\n\n> \u00a0- Application version separate from client version\n\nConsensus has already approved this one, AFAIK.\n\n> \u00a0- A way of requesting block bodies without headers (saving a lot of traffic\n> \u00a0 for a thin client upgrading)\n\nDo you mean headers without bodies?  Gavin wants to work on\nheaders-only, from what I've read, but others are welcome to\ncontribute patches.\n\n> \u00a0- Double SHA-256 for a packet checksum? \u00a0Seriously?\n\nCompatibility issues?\n\n> \u00a0- Sequence number as part of TxIn instead of part of the whole transaction\n\nCompatibility issues?\n\n> \u00a0- Script parameters should be stored outside the script, and reference by\n> \u00a0 the script. \u00a0All that ridiculous filtering of the scripts in OP_CHECKSIG\n> \u00a0 would then go away.\n\nCompatibility issues?\n\n> \u00a0- MSG_DOUBLESPEND... nope\n\nDoes consensus want this?\n\n> \u00a0- getblocks to accept MSG_TX and do something sensible\n\nLink to elaboration of use case and need?\n\n\n> You can imagine then that when I read moans about there not being enough new\n> developers fixing bugs, that I am unsurprised and unsympathetic. \u00a0I like\n> bitcoin enough to hover on this list; and offer a view of your world from a\n> potential developer who was chased away.\n\nWell, one unfortunate current aspect of bitcoin is...  there seem to\nbe problems aplenty right now :)\n\nHowever demotivating it may be, keeping the current system running\nmust take priority over new features.\n\nI also heartily encourage others to do something I always want to do,\nbut for lack of time:  work on the design for bitcoin v2 (\"theme: any\nbreaking change is acceptable, it is a new block chain\")  There you\nmay improve the protocol, get rid of the patent-cloudy ECDSA, use\ngoogle's protocol buffers for encoding, make the proof-of-work\nalgorithm memory-intensive, and other excellent, thoughtful\nbreaking-change suggestions that have been made.\n\nSecuring the integrity of money means that a lot of implementation\ndecisions have been cemented into stone, however much we may\npersonally dislike them.  Backwards compatibility is paramount.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-10T22:38:21",
                "message_text_only": "On Wednesday 10 August 2011 22:35:01 Jeff Garzik wrote:\n\n> On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com> \nwrote:\n> > Don't believe me?  Here's a list of ideas I've had \"no, no, no\"d so\n> > far; not one of which would have any financial implication at all.\n> >  Only some of which would break backward compatibility.\n> \n> Breaking backwards compatibility means breaking people's access to\n> their own money.\n\nI wasn't actually giving a full explanation of how these things could be \ndone, I was providing a list of \"negatively received ideas\"; imagine my \nsurprise that they have been negatively received by you.\n\nHowever... The version number field combined with the massive complexity of:\n\n if( blockNumber > 500000 )\n   new_process();\n else\n   old_process();\n\nWould sort all of your \"compatibility\" objections out, and would give nodes \ntime to upgrade.\n\n> If you remove an \"unnecessary\" step that existing nodes expect, then\n> the cost of disrupting monetary access seems higher than the value of\n> that breaking change.\n\nIf only there were some way of sending different things to different nodes, \nbased on some sort of version number field.\n\n> >  - Remove verack, as it's completely unnecessary.\n> \n> Compatibility issues?\n\n  if( Version < VERSION_INTRODUCED )\n    sendVerack();\n\nMy point is that you are a clever guy; you are perfectly capable of coming \nup with these answers, but you don't want to.  Nor does any other bitcoin \ndeveloper.  The protocol is perfect and there is no way of changing it.\n\n> >  - Query miners for pending transactions\n> \n> I could see value in querying a bitcoind node over JSON-RPC for\n> pending transactions... and by extension, supporting that as an RPC on\n> various miners' pool servers.  Having a local dump of pending TX's\n> would be useful.\n> \n> As an optional bitcoin P2P protocol command, available to anyone,\n> seems to negatively impact privacy.\n\nEh?  The transaction list is available on bitcoincharts.  If my node had \nbeen connected it would have received that list anyway when each one was \nbroadcast.  What possible privacy loss could there be by making it possible \nto request it be repeated?\n\nAgain though: the detail isn't the point.  It's another half-hearted \nobjection.\n\n> >  - A way of requesting block bodies without headers (saving a lot of\n> > traffic for a thin client upgrading)\n> \n> Do you mean headers without bodies?  Gavin wants to work on\n> headers-only, from what I've read, but others are welcome to\n> contribute patches.\n\nNo; I mean being able to ask for just the block without the header.  The \nreason being that a thin client might request blocks on demand... it's \nalready got the header and doesn't need it again.\n\nThe response: \"it's only 80 bytes, blah, blah\".  80*150000*N is a non-\ntrivial amount of traffic.\n\n> >  - Double SHA-256 for a packet checksum?  Seriously?\n> \n> Compatibility issues?\n\nOnly for the version message.  But it would be trivial to do both types of \nchecksum on the version message, and if either is true to accept the version \nmessage.  After which the version is known and a much simpler checksum could \nbe used for subsequent messages.  Eventually the network would be upgraded \nenough that the old way can be dropped.\n\nBesides... hasn't TCP already got checksumming?  Let's just stop checking \nthe checksum.  Or better still, stop calculating it and sending it.  Double \nSHA-256 on every single message on every single node to create four checksum \nbytes is an enormous waste of CPU.\n\n> >  - Sequence number as part of TxIn instead of part of the whole\n> > transaction\n> \n> Compatibility issues?\n\nIf only there were a version field in the transaction and block structures.\n\nAgain; casual rejection.\n\n> >  - Script parameters should be stored outside the script, and reference\n> > by the script.  All that ridiculous filtering of the scripts in\n> > OP_CHECKSIG would then go away.\n> \n> Compatibility issues?\n\nSee above.\n\n> >  - MSG_DOUBLESPEND... nope\n> \n> Does consensus want this?\n\nNo, \"consensus\" doesn't.  I was simply listing all the ideas that got \nrejected out of hand.  The reason \"consensus\" doesn't think this one is \nnecessary is because \"we can already detect double spends by being widely \nconnected\"; ignoring the fact that a light or intermittently connected \nclient would not be widely connected.  But that's okay because \"eventually \npayment processors will appear\".  Yep, my idea for fixing bitcoin is stupid \nbecause eventually someone else will mitigate it.\n\n> >  - getblocks to accept MSG_TX and do something sensible\n> \n> Link to elaboration of use case and need?\n\nIt was a few weeks ago; and it was an email from me about getblocks \nenhancements.  It was patronisingly laughed off as being something that all \nyou newbie \"alternative client\" writers go through.\n\nThe use case is an on-demand thin client that wants to find the block that \ncontains a particular transaction ID without downloading and indexing every \nsingle block in the chain.  Additionally, _I_ plan to separate the block \nchain and wallet executables, so much so that the wallet executable doesn't \nnecessarily need a local blockchain node and relies on a partially trusted \nremote -- it still wants to be able to do spot checks on that remote, and \nconfirm whatever it's told.  I would like to be able to do that using only \ncommands that are in the official protocol; but I'm rapidly coming to accept \nthat nothing I ask for will ever go in because there is no \"use case\".\n\n> Well, one unfortunate current aspect of bitcoin is...  there seem to\n> be problems aplenty right now :)\n\nAs with every project.\n\nHowever, the protocol is being treated as if it is some kind of holy scroll, \nand must not be touched.  Bitcoin's ideas are revolutionary, its \nimplementation is not.  If we started again today, it would be done \ndifferently.  Shouldn't we be trying to move the current protocol toward \n_that_ \"done differently\" as much as possible while bitcoin is still \nrelatively small?  Rhetorical again... I know the answer, it's \"no\".\n\nWhat exactly do the developers mean when they keep talking about bitcoin as \n\"experimental\"?  It seems to me they mean \"incredibly conservative, with no \nchanges for the rest of time\".\n\n> However demotivating it may be, keeping the current system running\n> must take priority over new features.\n\nNothing I've suggested was to \"stop the current system\".  I'm not even \nasking for developers to prioritise my ideas.  I would just like mine, or \nanyone's ideas to not be instantly rejected out of hand.  I mean for \ngoodness sake, even \"splitting into multiple executables\" has been stomped \non in this very thread.  If something as trivial as that is \"impossible\" \nwhat chance is there that I would ever get \"Change the 64-bit timestamp \nfield to be microseconds since the epoch instead of seconds\" in?\n\n> I also heartily encourage others to do something I always want to do,\n> but for lack of time:  work on the design for bitcoin v2 (\"theme: any\n> breaking change is acceptable, it is a new block chain\")  There you\n> may improve the protocol, get rid of the patent-cloudy ECDSA, use\n> google's protocol buffers for encoding, make the proof-of-work\n> algorithm memory-intensive, and other excellent, thoughtful\n> breaking-change suggestions that have been made.\n\nThere is a popular idea that some other cryptocurrency will come along and \ndisplace bitcoin.  It's not going to happen.  Networking effects mean that \nthere is no reason for people to change.  I can just see the queue around \nthe block now for bitcoin.2; identical in function to bitcoin except it \n\"doesn't use ECDSA and the it uses protocol buffers on the wire, and uses \nmore memory\".  Wow; there's a set of unique selling points.  I'll get signs \nmade.\n\nLet's be practical: technical-only improvements _have_ to be to bitcoin.1. \nBitcoin's financial features are already complete or in progress; and it is \nfinancial features that would make people migrate to a competitor.  Nobody \nis going to move to bitcoin.v2 because the source code has better comments.\n\n> Securing the integrity of money means that a lot of implementation\n> decisions have been cemented into stone, however much we may\n> personally dislike them.  Backwards compatibility is paramount.\n\nI disagree about how set in stone these things are; but yeah; I've accepted \nthat I'm on a loser.  My list was to demonstrate how negative the community \nis; and you have confirmed that for me admirably.  Bear that in mind the \nnext time you're discussing the lack of manpower for bug fixes.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-11T03:20:25",
                "message_text_only": "On Wed, Aug 10, 2011 at 6:38 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On Wednesday 10 August 2011 22:35:01 Jeff Garzik wrote:\n>\n>> On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com>\n> wrote:\n>> > Don't believe me? \u00a0Here's a list of ideas I've had \"no, no, no\"d so\n>> > far; not one of which would have any financial implication at all.\n>> > \u00a0Only some of which would break backward compatibility.\n>>\n>> Breaking backwards compatibility means breaking people's access to\n>> their own money.\n>\n> I wasn't actually giving a full explanation of how these things could be\n> done, I was providing a list of \"negatively received ideas\"; imagine my\n> surprise that they have been negatively received by you.\n>\n> However... The version number field combined with the massive complexity of:\n>\n> \u00a0if( blockNumber > 500000 )\n> \u00a0 new_process();\n> \u00a0else\n> \u00a0 old_process();\n>\n> Would sort all of your \"compatibility\" objections out, and would give nodes\n> time to upgrade.\n\nThe above has been discussed on the forums.  The community seems to\nconsider that option one of last resort, because the consequences of\n-not- upgrading immediately become \"I cannot access my money.\"  The\ncommunity also seems rather hard-wired against breaking changes like\nthat, because it implies that we lowly dev peons are daring to mess\nwith the Blessed Satoshi Design that has received extensive study, and\n100% communal agreement.\n\nIf the community changes its mind, and there are strong calls to make\na breaking change, we can certainly do that.  Bitcoin is not only open\nsource but very much democratic -- people vote by choosing which\nclient software to use.\n\n\n> However, the protocol is being treated as if it is some kind of holy scroll,\n> and must not be touched.  Bitcoin's ideas are revolutionary, its\n> implementation is not.  If we started again today, it would be done\n> differently.  Shouldn't we be trying to move the current protocol toward\n> _that_ \"done differently\" as much as possible while bitcoin is still\n> relatively small?  Rhetorical again... I know the answer, it's \"no\".\n\nHistorically speaking, the protocol has had minor tweaks, if you check\nthe patch history.  Adding new protocol commands is pretty easy, for\nexample.  Removing commands tends to be high cost for low benefit\n(\"protocol removes a harmless redundancy\"), if you're messing with the\ninitial negotiation sequence.  IMO verack is not redundant, anyway.\n\nBut the answer is \"what do the users want\" not \"no\"  At the end of the\nday we're here to adequately reflect the needs of our userbase at all.\n And so far, the userbase seems highly conservative when it comes to\nincompatible changes.  Correct me if I'm wrong...\n\n\n> I disagree about how set in stone these things are; but yeah; I've accepted\n> that I'm on a loser. \u00a0My list was to demonstrate how negative the community\n> is; and you have confirmed that for me admirably. \u00a0Bear that in mind the\n> next time you're discussing the lack of manpower for bug fixes.\n\nIt's negative to weight costs vs. benefits?  That is what I expect any\ngood engineer to do.\n\nIn any case, our -users- are not clamoring for breaking changes of the\ntype you describe above, as far as I can see.  Just the opposite.  So\nif you want to deploy a breaking change, the burden is on you to\nconvince the bitcoin users and miners that it's a good idea.\n\nIf the bitcoin dev team is not accurately reflecting the desire of its\nusers, then that should be corrected, and we want to hear feedback.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-11T05:47:34",
                "message_text_only": "On Thursday 11 August 2011 04:20:25 Jeff Garzik wrote:\n\n> > However... The version number field combined with the massive\n> > complexity of:\n> > \n> >  if( blockNumber > 500000 )\n> >   new_process();\n> >  else\n> >   old_process();\n> > \n> > Would sort all of your \"compatibility\" objections out, and would give\n> > nodes time to upgrade.\n> \n> The above has been discussed on the forums.  The community seems to\n> consider that option one of last resort, because the consequences of\n> -not- upgrading immediately become \"I cannot access my money.\"  The\n\nDid you even read what I wrote?  \"if( blockNumber > 5000000 )\" is about as \nfar from immediate as you can get.  I'm not an idiot; I understand we can't \nlock people out of their money simply because of a software upgrade.  It's \nnot unreasonable to expect people will have upgraded by block 500000 though \n(or whatever number the community decided upon).\n\nAgain you're missing my point... you are still shooting ideas down.\n\n> community also seems rather hard-wired against breaking changes like\n> that, because it implies that we lowly dev peons are daring to mess\n> with the Blessed Satoshi Design that has received extensive study, and\n> 100% communal agreement.\n\nWell the community had better unhardwire itself or its going to end up with \nfive developers and no more.\n\n> If the community changes its mind, and there are strong calls to make\n> a breaking change, we can certainly do that.  Bitcoin is not only open\n> source but very much democratic -- people vote by choosing which\n> client software to use.\n\nVoting with ones feet should be a last resort.  Wouldn't it be better not to \nend up with incompatible clients out there?\n\n> Historically speaking, the protocol has had minor tweaks, if you check\n> the patch history.  Adding new protocol commands is pretty easy, for\n> example.  Removing commands tends to be high cost for low benefit\n> (\"protocol removes a harmless redundancy\"), if you're messing with the\n> initial negotiation sequence.  IMO verack is not redundant, anyway.\n\nClient: I speak version 10\nServer: hmmm, I don't speak version 10, I only speak version 5\nClient: I am willing to lower to version 5 so I shall continue\n\nor\n\nClient: I speak version 10\nServer: hmmm, I don't speak version 10, I only speak version 5\nClient: I am unwilling to lower to version 5 so I shall hang up\n\nor\n\nClient: I speak version 5\nServer: hmmm, I speak version 10, but I am willing to speak version 5\n\nor\n\nClient: I speak version 5\nServer: hmmm, I speak version 10, and I am unwilling to speak version 5\n        so I shall hang up\n\n'verack' is redundant.  It sends no information and merely says that the \nother end is willing to continue.  Willing to continue is easily determined \nwhen the remote continues.  Handling 'verack' is an annoyance, and adds \nnothing.\n\n> But the answer is \"what do the users want\" not \"no\"  At the end of the\n> day we're here to adequately reflect the needs of our userbase at all.\n>  And so far, the userbase seems highly conservative when it comes to\n> incompatible changes.  Correct me if I'm wrong...\n\nPlease point me at a single incompatible change that has been rejected by \nthe userbase.\n\nFurther: I'm not suggesting incompatible changes alone; that would be \ninsane.  I'm suggesting upgrade paths that delay incompatible changes until \nthe change has propagated.\n\n> It's negative to weight costs vs. benefits?  That is what I expect any\n> good engineer to do.\n\nI don't think that's what's happening.  Not once have I seen the \"benefits\" \nside of that equation.  What I have seen is plenty of \"I can't see a use \ncase for that\"; when the key word in that sentence is \"I\".\n\n> In any case, our -users- are not clamoring for breaking changes of the\n> type you describe above, as far as I can see.  Just the opposite.  So\n> if you want to deploy a breaking change, the burden is on you to\n> convince the bitcoin users and miners that it's a good idea.\n\nThe users aren't typically going to be familiar enough with the internals of \nbitcoin to care about many of the changes I suggested.  I have repeatedly \nsaid I don't want to break anything, I want to transition in an orderly \nfashion (and the majority of my suggestions were backward compatible).  But \nof course, I don't actually want to do anything with bitcoind itself, it's \nbeen made repeatedly clear to me that anything I might ask for is not going \nto happen -- and of course what I was pointing out, _not_ asking for, was \nthat you can't expect to get new developers on board if they aren't going to \nbe allowed to scratch their itches.\n\n> If the bitcoin dev team is not accurately reflecting the desire of its\n> users, then that should be corrected, and we want to hear feedback.\n\nYou've just had some.  The response was \"you're wrong\".\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Joel Joonatan Kaartinen",
                "date": "2011-08-11T11:45:30",
                "message_text_only": "On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:\n> Again you're missing my point... you are still shooting ideas down.\n\nAnd you're only shooting his actions down without indicating clearly\nwhat you think ought to be done instead. What do you want him to say\ninstead?\n\n> > community also seems rather hard-wired against breaking changes like\n> > that, because it implies that we lowly dev peons are daring to mess\n> > with the Blessed Satoshi Design that has received extensive study, and\n> > 100% communal agreement.\n> \n> Well the community had better unhardwire itself or its going to end up with \n> five developers and no more.\n\nNo way that will happen. A fork is going to happen sooner rather than\nlater if this continues. It'd be great if it could be done within this\nproject and named bitcoin-dev or bitcoin-next or similar.\n\nIf this is not done, I wouldn't be surprised with the network splitting\ninto 2 camps with different protocols but still working on the same\nblockchain.\n\n> > If the community changes its mind, and there are strong calls to make\n> > a breaking change, we can certainly do that.  Bitcoin is not only open\n> > source but very much democratic -- people vote by choosing which\n> > client software to use.\n> \n> Voting with ones feet should be a last resort.  Wouldn't it be better not to \n> end up with incompatible clients out there?\n\nThere's no way to get the majority to vote with their feet to move to an\nincompatible client. Not immediately anyway. It can happen gradually\nthough.\n\nAs in: 1) alternative client is published that is compatible but\nextended. 2) this client gets the majority share of users/miners 3) they\nsee this and decide to break compatibility. 4) original bitcoin client\nis now incompatible/history.\n\n> > It's negative to weight costs vs. benefits?  That is what I expect any\n> > good engineer to do.\n> \n> I don't think that's what's happening.  Not once have I seen the \"benefits\" \n> side of that equation.  What I have seen is plenty of \"I can't see a use \n> case for that\"; when the key word in that sentence is \"I\".\n\nWhat is happening here is that most suggestions you point at have been\ndiscussed about before and so the \"early adopter\" developers remember\nthat a decision about that was made already. However, the problem here\nlies with the fact that it's difficult to find the previous\nconversations.\n\nIf there was a section in the wiki for recording past suggestions, there\nwould be no need to say 'no'. You could instead say \"We have discussed\nthis before, please read...\" and give them a link to the page with the\nrelevant discussion. Of course, this would require actively forwarding\npeople to the wiki for discussions and having them there. I think this\nwould be a good idea.\n\nThat would leave this list for discussing and coordinating the\nimplementation of the changes that have been agreed on.\n\nFor things that have already been discussed, you could try to find the\nprevious discussion and add it there. But I expect for some things, new\ndiscussion needs to be had to get it on the wiki.\n\n- Joel"
            },
            {
                "author": "Christian Decker",
                "date": "2011-08-11T12:01:33",
                "message_text_only": "On Thu, Aug 11, 2011 at 1:45 PM, Joel Joonatan Kaartinen <\njoel.kaartinen at gmail.com> wrote:\n\n> On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:\n> > Again you're missing my point... you are still shooting ideas down.\n>\n> And you're only shooting his actions down without indicating clearly\n> what you think ought to be done instead. What do you want him to say\n> instead?\n>\n> > > community also seems rather hard-wired against breaking changes like\n> > > that, because it implies that we lowly dev peons are daring to mess\n> > > with the Blessed Satoshi Design that has received extensive study, and\n> > > 100% communal agreement.\n> >\n> > Well the community had better unhardwire itself or its going to end up\n> with\n> > five developers and no more.\n>\n> No way that will happen. A fork is going to happen sooner rather than\n> later if this continues. It'd be great if it could be done within this\n> project and named bitcoin-dev or bitcoin-next or similar.\n>\nI personally would welcome alternative clients as a vulnerability in the\nmain client right now has the potential to kill the entire network.\n\n>\n> If this is not done, I wouldn't be surprised with the network splitting\n> into 2 camps with different protocols but still working on the same\n> blockchain.\n>\nChanges to the protocol are hard, mainly because hashes of packets are used\nto identify transactions and blocks, and even the target hash is a hash of a\npacket.\nAs for your proposal to eliminate some parts of the protocol, I have to\nagree (the magic bytes seem an ugly hack by satoshi as I discussed with\nMike, and the double SHA256 hashes as checksums are incredibly wasteful, and\nseem to have been chosen simply because a double hashing was already\nimplemented).\n\n>\n> > > If the community changes its mind, and there are strong calls to make\n> > > a breaking change, we can certainly do that.  Bitcoin is not only open\n> > > source but very much democratic -- people vote by choosing which\n> > > client software to use.\n> >\n> > Voting with ones feet should be a last resort.  Wouldn't it be better not\n> to\n> > end up with incompatible clients out there?\n>\n> There's no way to get the majority to vote with their feet to move to an\n> incompatible client. Not immediately anyway. It can happen gradually\n> though.\n>\n> As in: 1) alternative client is published that is compatible but\n> extended. 2) this client gets the majority share of users/miners 3) they\n> see this and decide to break compatibility. 4) original bitcoin client\n> is now incompatible/history.\n>\nChanges should be implemented with backward compatibility in mind, even if\nit restricts the freedom of what can be changed.\n\n>\n> > > It's negative to weight costs vs. benefits?  That is what I expect any\n> > > good engineer to do.\n> >\n> > I don't think that's what's happening.  Not once have I seen the\n> \"benefits\"\n> > side of that equation.  What I have seen is plenty of \"I can't see a use\n> > case for that\"; when the key word in that sentence is \"I\".\n>\n> What is happening here is that most suggestions you point at have been\n> discussed about before and so the \"early adopter\" developers remember\n> that a decision about that was made already. However, the problem here\n> lies with the fact that it's difficult to find the previous\n> conversations.\n>\n> If there was a section in the wiki for recording past suggestions, there\n> would be no need to say 'no'. You could instead say \"We have discussed\n> this before, please read...\" and give them a link to the page with the\n> relevant discussion. Of course, this would require actively forwarding\n> people to the wiki for discussions and having them there. I think this\n> would be a good idea.\n>\nHaving a Wiki or a single Wikipage to list proposed changes, with all pro\nand cons, maybe pointing back to the original discussion would be nice. But\ndon't forget that situations change, and features that have been shot down\nway back might become reachable/desirable at a later time, so please don't\njust use it as a method to shoot down ideas, but as a way to bring people up\nto speed and, if necessary, continue the discussion where it left.\n\n>\n> That would leave this list for discussing and coordinating the\n> implementation of the changes that have been agreed on.\n>\n> For things that have already been discussed, you could try to find the\n> previous discussion and add it there. But I expect for some things, new\n> discussion needs to be had to get it on the wiki.\n>\n> - Joel\n>\n- cdecker\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/b83f0dee/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-11T14:04:22",
                "message_text_only": "On 2011 August 11 Thursday, Joel Joonatan Kaartinen wrote:\n> On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:\n> > Again you're missing my point... you are still shooting ideas down.\n> \n> And you're only shooting his actions down without indicating clearly\n\nYeah, shooting down a shooting down, which you've just shot down.  Where will \nit end?\n\n> what you think ought to be done instead. What do you want him to say\n> instead?\n\nHow about:\n\n\"This is a good idea, but we don't want to break backward compatibility a \nlittle piece at a time.  Instead we'd like to collect all such changes into \none single compatibility breaking release.  Here's the wiki page you should \nupdate; and here's the git branch you should push changes like this to.\"\n\n> most suggestions you point at have been discussed about before\n\nI know the application/protocol version split has been discussed before, but \nplease point me to the relevant discussion on: loading the block chain in \nreverse; transaction only requests; checksumming removal; verack removal; \nstoring script parameters outside the script; and requesting blocks by \ntransaction hash instead of block hash.\n\nIf I've missed all of these discussions and their inevitable logically \nindisputable rejection, I apologise.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/bc780656/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-11T12:11:29",
                "message_text_only": "I don't think Gavin misunderstands how open source works at all. It's\ncompletely normal for project maintainers to say \"no\" more often than\nthey say \"yes\". When I worked on open source for a living this was\npart of the natural flow of things.\n\nIt's important to understand that ideas which receive \"maybe\" or \"yes\nbut later\" or \"no unless you convince me\" or \"perhaps in a different\nway\" are not being shot down. These answers are requests for more work\nto be done. You *cannot* get emotional about open source contributions\nand any veteran will tell you this. Open source maintainers cannot and\ndo not say yes to every patch or idea that is proposed. I would be\nvery worried if Gavin did.\n\nNow let's review these ideas:\n\n> Don't believe me? \u00a0Here's a list of ideas\n>\n> \u00a0- Extra bits in the service field of the version message to allow nodes\n> \u00a0 to indicate if they are mining; if they are willing to be seed nodes;\n> \u00a0 if they relay transactions; if they want relayed transactions.\n\nI think the concept is reasonable but service flags might not be the\nbest way to do it, for instance, asking for a filtered transaction\nfeed is useful for lightweight clients so you'd want more precision\nthat can be fit into service bits.\n\n> \u00a0- getblocks in reverse chronological order so clients can start up quicker\n> \u00a0 while downloading the blocks in the backround. \u00a0Ironically I was told\n> \u00a0 \"patches welcome\" by someone who didn't reject this one instantly.\n\nI already told you this won't help startup time because you have to\nconnect blocks together in sequence. You can't build up the block\nchain backwards unless you don't care about validation at all.\n\n> \u00a0- Query miners for pending transactions\n\nOr just have them send an inv containing them after connect. I don't\nremember this one being \"shot down\".\n\n> \u00a0- Application version separate from client version\n\nYou mean separate from protocol version, right?\n\n> \u00a0- A way of requesting block bodies without headers (saving a lot of traffic\n> \u00a0 for a thin client upgrading)\n\nThe cost/benefit ratio of this one isn't obvious at all. The resource\nrequirements for running a full node are large enough that\nre-downloading 80 bytes per block is the least of your worries if\nyou're upgrading.\n\n> \u00a0- Double SHA-256 for a packet checksum? \u00a0Seriously?\n\nFeel free to submit a patch to disable checksum validation and see if\nGavin accepts it. It needs to still be calculated at send time for\nother implementations.\n\n> \u00a0- Sequence number as part of TxIn instead of part of the whole transaction\n\nSequence numbers are already part of the tx inputs. Or do you mean\nthey should be part of the whole transaction? If the latter then this\nis indeed an idea that will be shot down, it's deliberate that seqnums\nare part of the txinputs and it needs to be that way for contracts. It\ncan't be changed without forking the protocol anyway.\n\n> Every single one of those has been shot down by one or more of the main\n> developers. \u00a0I'm not a genius, and not arrogant enough to assume that\n> everything I say is right, but _nothing_? \u00a0Really? \u00a0There is no problem that\n> one of the above addresses?\n\nSome of your proposals address problems that need to be solved, but\nit's not clear that way is the right way to solve them. Others reflect\neither lack of understanding of the system or the fact that you don't\nvalue backwards compatibility whereas other people do."
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-11T13:51:04",
                "message_text_only": "On 2011 August 11 Thursday, Mike Hearn wrote:\n> I don't think Gavin misunderstands how open source works at all. It's\n> completely normal for project maintainers to say \"no\" more often than\n> they say \"yes\". When I worked on open source for a living this was\n> part of the natural flow of things.\n\nThat wasn't the part I said he didn't understand.  It was assuming that you \ncan just declare that people should work on bug fixes and not features was a \nmisunderstanding.  People work on open source (at least at first) to get a \nfeature they want.  They aren't just going to show up and cry \"command me \nlord\".\n\n> It's important to understand that ideas which receive \"maybe\" or \"yes\n> but later\" or \"no unless you convince me\" or \"perhaps in a different\n> way\" are not being shot down. These answers are requests for more work\n> to be done. You *cannot* get emotional about open source contributions\n> and any veteran will tell you this. Open source maintainers cannot and\n> do not say yes to every patch or idea that is proposed. I would be\n> very worried if Gavin did.\n\nI don't expect them to; as I said, I'm not after everything I say being \naccepted out of hand, certainly as I haven't even turned up with patches.  And \nyou are absolutely correct that that would be worrying if it were so.  What I \nobject to is no guidance is offered to get the suggester what they want, a \n\"you could have this if you did it like this\", or \"perhaps if you explained a \nbit more\".  It's just \"no, your idea is based on your weak understanding of \nbitcoin,\" perhaps I'm being overly arrogant, but I think I understand it a lot \nmore than you presume I do.\n\nI do try not to get emotional about these things; and email is not the best \nmedium for conveying level of distress -- I'm certainly not banging on my \nkeyboard, close to a heart attack.  My motivation is only that I would like to \nsee bitcoin do well, and I do see that the treatment of potential new people, \nwhile not offensive (nobody says f*ck off), is not encouraging.\n\n> Now let's review these ideas:\n\nHonestly you needn't have bothered.  They've been reviewed to death at this \npoint; and I'm not that interested in fighting to get them into a project that \ndoesn't want them.  I'll just play with my bricks over in the corner if that's \nokay?  I offered the list as a demonstration that ideas don't get constructive \nhelp as to how progress can be made on them (i.e. how to make them \nacceptable), they just get rejected.\n\nAnyway; as you've put the time in, I'll do the same and respond.\n\n> > Don't believe me?  Here's a list of ideas\n> > \n> >  - Extra bits in the service field of the version message to allow nodes\n> >   to indicate if they are mining; if they are willing to be seed nodes;\n> >   if they relay transactions; if they want relayed transactions.\n> \n> I think the concept is reasonable but service flags might not be the\n> best way to do it, for instance, asking for a filtered transaction\n> feed is useful for lightweight clients so you'd want more precision\n> that can be fit into service bits.\n\nThe service bits just seemed like the \"bitcoin way\" as the field already \nexisted.  Personally I would prefer an additional \"capabilities\" request with \na variable number of ASCII strings in it, each indicating a capability, and if \nthat's good with all of you -- excellent.\n\n> >  - getblocks in reverse chronological order so clients can start up\n> > quicker while downloading the blocks in the backround.  Ironically I was\n> > told \"patches welcome\" by someone who didn't reject this one instantly.\n> \n> I already told you this won't help startup time because you have to\n> connect blocks together in sequence. You can't build up the block\n> chain backwards unless you don't care about validation at all.\n\nI know you \"told me this\", but I think you are wrong.  This is an example of \nthe problem I'm trying to get across -- I see things differently; but rather \nthan try and either fix my misunderstanding or see what I'm trying to achieve, \nit's rejected.\n\nI've already got it well on its way to being implemented is how I know you are \nwrong.  It's perfectly possible to validate backwards because you are \nconstructing a coherent chain based on an unvalidated start point.  You then \nrequest the parent block and either (a) you finally reach the genesis block, \nyou have reached a hard-coded valid point and the entire chain is therefore \ninstantly validated or (b) you have a new start block, floating but validated \nto be part of the chain, if not absolutely validated.  Further, with some \ncheckpoints hard coded you don't even need to reach the genesis block to get a \nvalidated chain.  The body of a block obviously can't be faked because of the \nMerkle hash.\n\nAnd finally... who says I care about validation?  Perhaps I plan a situation \nwhere I implicitly trust the peer I'm talking to (which is exactly what I do \nplan).  \"There are more things in heaven and earth, Horatio, than are dreamt \nof in your philosophy\".\n\n> >  - Query miners for pending transactions\n> \n> Or just have them send an inv containing them after connect. I don't\n> remember this one being \"shot down\".\n\nI was told it had severe privacy implications; and you told me that it would \nbe better to wait for some sort of filtering system that was planned, which \nI'd not heard of.  I admit it wasn't exactly clear to me how what you \ndescribed helped with my suggestion.  Your suggestion here is a good \nalternative; but wouldn't it waste bandwidth?  After all a receving node has \nno idea whether I have been connected to another node for 24 hours before I \nconnect to it, and hence wouldn't need the list.\n\n> >  - Application version separate from client version\n> \n> You mean separate from protocol version, right?\n\nYep.  I can well imagine that when alternative clients start appearing, some \nwill have bugs.  It will be very handy to either work around those bugs or \nsimply deny version 1.4.17 of \"Andy's Sexy Bitcoin Client\" from connecting.  \nEven just for monitoring network state it's useful.  There is already talk, I \nsee, of establishing how much of the network runs each released bitcoin \nversion.\n\n> >  - A way of requesting block bodies without headers (saving a lot of\n> > traffic for a thin client upgrading)\n> \n> The cost/benefit ratio of this one isn't obvious at all. The resource\n> requirements for running a full node are large enough that\n> re-downloading 80 bytes per block is the least of your worries if\n> you're upgrading.\n\nThe benefit I'm aiming at is to imagine a thin client that has done a fast \nstartup and only downloaded the headers.  Then, it has a finite number of \naddresses it's interested in and wants to grab only the relevant bodies from \nthe full chain.  Or, fast startup is to grab all the headers, and then slowly \ngrab the transactions from the blocks.\n\nThe cost is\n\n if( !bodyOnly )\n   sendHeader();\n sendBody();\n\nI can't say I'm that invested in it; but it was another one for the list of \n\"well I don't see what use that is\" responses.\n\n> >  - Double SHA-256 for a packet checksum?  Seriously?\n> \n> Feel free to submit a patch to disable checksum validation and see if\n> Gavin accepts it. It needs to still be calculated at send time for\n> other implementations.\n\nI do feel free to write any patch I like.  It's such a trivial patch though, \nthat I feel certain you are being faceitous, knowing full well that it \nwouldn't be accepted.  I'm trying to look five years in the future.  I'm not \nsuggesting it be turned off now -- that's impossible and I'm not an idiot.  \nI'm trying to think of what the protocol should be and have a way of moving to \nthat.\n\nThe patch that is needed then is the one that makes the change gracefully.\n\n> >  - Sequence number as part of TxIn instead of part of the whole\n> > transaction\n> \n> Sequence numbers are already part of the tx inputs. Or do you mean\n> they should be part of the whole transaction? If the latter then this\n> is indeed an idea that will be shot down, it's deliberate that seqnums\n> are part of the txinputs and it needs to be that way for contracts. It\n> can't be changed without forking the protocol anyway.\n\nThe sequence number (and perhaps I've misunderstood) allows me to replace a \ntransaction I've already submitted.  I can't replace just one of the inputs, I \nhave to replace the whole transaction.  It's therefore the transaction that \nshould have the sequence number.  A signed transaction received with a higher \nsequence number should displace a lower one.\n\nI'm happy to accept that I have missed the use of the current sequence numbers \nin contracts.  (To be fair, the wiki says \"Transaction version as defined by \nthe sender. Intended for \"replacement\" of transactions when information is \nupdated before inclusion into a block.\")\n\nPerhaps putting it in TxIn was because no one thought of having \nOP_PUSH_SEQUENCENUMBER as a script operator.\n\n> > Every single one of those has been shot down by one or more of the main\n> > developers.  I'm not a genius, and not arrogant enough to assume that\n> > everything I say is right, but _nothing_?  Really?  There is no problem\n> > that one of the above addresses?\n> \n> Some of your proposals address problems that need to be solved, but\n> it's not clear that way is the right way to solve them. Others reflect\n> either lack of understanding of the system or the fact that you don't\n> value backwards compatibility whereas other people do.\n\nOf the above, only one could be lack of understanding (txIn).\n\nAs to not valuing backward compatibility -- I certainly do.  That shouldn't be \nused as an excuse to freeze the protocol forever.  There are version fields in \nthere, sensibly so; they should be used to fix problems.   As I said a few \ntimes, the incompatible changes don't have to activate straight away, they can \nbe delayed using the block number.  Make it a block number four years away if \nyou want, but the sooner those changes go in (whatever they may be), the more \nlikely it is you'll get the majority of the network to change over.  And once \nthe alternative clients start appearing, the opportunity is gone -- if it's \nhard to get one client to change, imagine how hard it will be to change five.\n\nAs I said above though, I don't want these fights.  I know full well that what \nI want is not what you all want as far as client ideas go.  I only started \nthis response because I thought Gavin's \"we don't want new developers for new \nfeatures, we want bug fixes\" was a bit of a foolish thing to say.\n\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/18c8c85d/attachment.sig>"
            },
            {
                "author": "John Smith",
                "date": "2011-08-11T12:19:45",
                "message_text_only": "On Wed, Aug 10, 2011 at 6:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>\n> Well, to be honest I don't think more developers adding new features\n> are needed right now-- I think the project's critical needs are more\n> people testing and helping to fix bugs and scalability issues.\n>\n\nI do think to be an successful open source project we need more developers\nand more features. Activity is very important, it is kind of the lifeblood.\nYes, a project will generally become more stable and slow in time as it\nnears \"perfection\" (or at least, a local optimum) but the current source is\n*far* from that.\n\nYes -- bugs and scalability issues need to be addressed, but this will be a\nlot easier if some underlying problems are solved. And if we ignore the end\nusers, they may run away and it becomes a pointless exercise.\n\nTaking the \"long view\" this includes build system, handling of\nthreads/concurrency, modularization, pluggable DB and storage back-ends,\nseparating the system into multiple \"locked-down\" processes, and so on.\nThis can all be done while remaining P2P-compatible for as long as possible\n(we have versioning, don't we?).\n\nMy proposal with multiple branches was about looking at the long view as\nwell as the immediate firefighting.  Yes, some changes might be riskier than\nothers, but we can't just cargo-cult Satoshi's work forever... so with\nmultiple branches, people can choose whether they have the balls to try\nsomething newer or just want to run the older version with the issues they\nknow and love.\n\nIt's better to be open. Look at Open Office, it only started to un-stagnate\nwhen it was forked out of Oracle's stranglehold. People want to work on\nthese things, so why not?\n\nUntil this is addressed, developers will prefer creating their own fork or\neven alternative client. After this UI stuff is handled I'll probably join\nup with one of them.\n\n> In this particular case, I said I was mildly against it-- if you want\n> me to switch to supporting it, then reassure me you're willing to do\n> ALL the work to make it happen.  Send me a list of wiki pages you'll\n> edit to document the change and tell me that you'll be around to help\n> people rewrite their backup scripts.\n\nIMO this should have been your first reply, instead of first discourgaging\nme from doing it. Just make a list of what needs to be done.\n\nBut I won't bother anymore... Let's just keep lumping everything in one\nexecutable. It's the Satoshi way.\n\nOn Wed, Aug 10, 2011 at 7:32 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> Of course, nothing forces existing developers to accept these new\nfeatures;\n> but the incredibly negative attitude on display when any new feature is\n> suggested is not the way to grow a community.  The correct way is a\n> mentoring attitude -- offering opinions on how a new developer can get\ntheir\n> idea in rather than telling them why it will never happen.\n\nExactly. My gripe is more about the negative attitude then anything else.\nThe focus is always on the negative sides of every proposal, a bit of a\nclimate of fear.\n\nI've had an employer that worked in the same way. Eternally hammering on\n\"stability\" the codebase, hiring 100's of extra developers, all firefighting\nand fixing immediate issues with \"priority\", the code became a minefield.\nEven with 8 hours of testcases, the overall structure of the code caused so\nmany issues that customers feared every new release more. A classic negative\nfeedback loop.\n\nI understand where it is coming from, many people just come and dump their\n\"ideas\" and never implement a line of code. But if people are actually\nproposing to implement something, or implemented it, they should IMO be\ngiven the benefit of the doubt. Not all outside ideas are bad.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/107ac309/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-11T13:08:45",
                "message_text_only": "On Thu, Aug 11, 2011 at 12:19:45PM +0000, John Smith wrote:\n> > In this particular case, I said I was mildly against it-- if you want\n> > me to switch to supporting it, then reassure me you're willing to do\n> > ALL the work to make it happen.  Send me a list of wiki pages you'll\n> > edit to document the change and tell me that you'll be around to help\n> > people rewrite their backup scripts.\n> \n> IMO this should have been your first reply, instead of first discourgaging\n> me from doing it. Just make a list of what needs to be done.\n> \n> But I won't bother anymore... Let's just keep lumping everything in one\n> executable. It's the Satoshi way.\n\nI think there are a lot of misunderstandings here. Given your clarification\nthat you simply wanted to remove the RPC client from the gui/daemon executable,\nI'm all for it. If I reread the answers, there is only \"mild against\" and a \"no\"\nthat was based on a partial misunderstanding.\n\nSomehow it seems that many discussions in which some negative remarks were made\njust die out, and the person originally suggesting it takes this as a \"shot\ndown\". Maybe (and that includes myself) we should be more outspoken about ideas\nwe do like.\n\nAs for the rest of this thread: i think some dev branch (either something\nlinux-next like, or a separate official branch, or something else) is indeed\nvery needed. The main tree should definitely be dealt with in a conservative\nway, but it's hard to make progress if you know that every patch that does\nsome internal changes will need many rebasings and maintainance before it's\nactually merged and finally tested by some larger user base.\n\nConsidering the issue of backward incompatible changes to the protocol: there is\nno denying that there are some serious deficiencies now (double sha256 checksums,\nthe handling of the data being signed) and redundant things (magic bytes, verack).\n\nYes, it is true that we could change these in the future with a (nBlocks >= X)\ntest, but that would still mean you carry around both the old and the new code\nuntil at least block height X. Additionally, if you get another (better) idea\nthat supercedes it somewhere between now and block X, you're still forced to\nfirst switch to the intermediate one, as some clients may not have upgraded...\n\nThis is not to say this isn't an option we should consider, but for now, it just\ndoesn't seem worth the hassle to me. There may come a day where we absolutely\nneed a change to the protocol, and when we do, maybe it is time to fix all these\n\"known and agreed upon defficiencies\". It's definitely useful to discuss these,\nand in the context of \"for when we do an incompatible change\", no \"breaks backward\ncompatibility!\" argument is valid. I'm in favor of wiki page where these are listed,\ntogether with pro and cons.\n\n-- \nPieter"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-10T18:43:14",
                "message_text_only": "On Wednesday, August 10, 2011 1:45:42 PM John Smith wrote:\n> 0.3.x -> small, compatible changes, bugfixes, like now\n> 0.4.x -> trunk, more impactful changes, refactorings, eventual major\n> release\n\nIt seems there's room for some kind of \"experimental\" branch as well, \nincluding features that might not make it into any stable release (due to lack \nof use/interest or whatever)."
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-10T19:48:10",
                "message_text_only": "On Wed, Aug 10, 2011 at 2:43 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, August 10, 2011 1:45:42 PM John Smith wrote:\n>> 0.3.x -> small, compatible changes, bugfixes, like now\n>> 0.4.x -> trunk, more impactful changes, refactorings, eventual major\n>> release\n>\n> It seems there's room for some kind of \"experimental\" branch as well,\n> including features that might not make it into any stable release (due to lack\n> of use/interest or whatever).\n\nIn kernel land there exists \"linux-next\"  Stephen Rothwell maintains a\ntree that is linux -tip, plus a list of trees & branches to pull from\nvarious individual developers.  For example, linux-next pulls my SATA\ntree from libata-dev.git branch NEXT.\n\nEach developer is expected to publish changes they feel are ready for\nupstream.  Developers are expected to \"play nicely\" and coordinate\namongst themselves when two trees include conflicting changes.\nTrivial merge conflicts are handled by Stephen Rothwell, who does\nmerging, build testing and such of the final set-of-N-trees result.\nMore difficult merge conflicts are coordinated by the developers\nthemselves, who work together to create a temporary \"merge tree\" that\nis then pulled by the linux-next maintainer.\n\nlinux-next is the always moving, regenerated daily target where\ndevelopers stage [in their opinion] upstream-ready changes.\n\nThus Linus's linux.git development process really looks like the\nfollowing, when linux-next is included in the picture:\n\n1. Version X-1 is released, on day 0.\n2. Merge window for version X opens, on day 0.\n3. Linus pulls all changes that have seen testing in linux-next, over\nthe -rc window (step #6, below)\n4. Merge window closes, on day 7.\n5. Version X-rc1 is released, on day 7.\n6. Only bug fixes are accepted now (hopefully seen at least 24 hours\nof testing in linux-next, unless urgency demands otherwise).  All new\ndevelopment is done in developer trees and branches, and is\nautomatically published nightly in linux-next.\n7. Version X is released, on day 90.\n\nThus \"upstream\" stays almost constantly stable, except for the short\n1-week merge window period, and linux-next comprises the rolling\n\"development version\" where new changes are staged.\n\nNote the subtle but important distinction between this and maintaining\na strict 'bugfix' and 'development' branch system like John Smith\ndescribed.  The underlying linux-next dependent trees may be rebased\nat any time, and so linux-next is constantly regenerated, rather than\nbeing a cumulative history of choatic development.  Major changes can\nand will be staged, de-staged, and re-staged during development, and\nmaintaining a strict \"official development branch\" methodology is less\nflexible.\n\nHere is an example linux-next report.  Stephen sends one, daily, with\neach linux-next tree generated:\nhttp://marc.info/?l=linux-next&m=131295044704945&w=2\n\nAs it applies to bitcoin, this \"bitcoin-next\" approach may simply be\nlayered on top of the current methodology.  All it requires is a\nvolunteer who maintains this tree-of-trees, and wha-la:  bitcoin has a\ndevelopment branch.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "Change to multiple executables?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Smith",
                "Jeff Garzik",
                "Luke-Jr",
                "Mike Hearn",
                "Andy Parkins",
                "Gavin Andresen",
                "Matt Corallo",
                "Pieter Wuille",
                "Joel Joonatan Kaartinen",
                "Christian Decker"
            ],
            "messages_count": 25,
            "total_messages_chars_count": 75704
        }
    },
    {
        "title": "[Bitcoin-development]  Change to multiple executables?",
        "thread_messages": [
            {
                "author": "John Smith",
                "date": "2011-08-10T13:18:38",
                "message_text_only": "> I do agree about splitting off bitcoincl - it's kinda confusing now how\n> the client behaves as a rpc daemon or UI when no RPC command-line\n> parameters are present, and as a command-line client otherwise.\n>\n> I am less sure UI and RPC should be split (though being able to select\n> both independently from eachother at compile time would be nice). I\n> often run the UI and switch to RPC calls to inspect some details.\n> Not sure how common this usage pattern is, though.\n>\n\nNo no no I never stated that the UI should no longer support RPC. If you\nwant the UI, with RPC, you can still run the UI executable with -server.\nThere are many usecases in which you want to access the UI bitcoin client\nusing RPC...\n\nI only meant that it would also build the *headless* daemon by default, as\nseparate \"bitcoind\" executable. So you cannot run the UI exectuable as\nheadless server anymore. The -daemon option would go away. It would make the\nsetup a lot easier: The UI can connect to  X and display a splash screen\nimmediately without first looking at the command line arguments, whereas the\nheadless daemon can ignore all that stuff and get straight to work.\n\n\n> > If you are suggesting this so that bitcoin-qt can be distributed being\n> > built off of bitcoind, I would say go ahead and pull-request bitcoin-qt.\n> > I'm of the opinion that it should be merged whether we have autotools or\n> > not (we already have 5 makefiles, whats a few more options in those?)\n> > and jgarzik seemed to indicate that he would agree (Gavin?, sipa?\n> > tcatm?).\n>\n\n> That said, it seems bitcoin-qt is mature enough to replace wxbitcoin\n> to me, and would definitely like to see it in mainline. How streamlined\n> is the process of building bitcoin-qt on windows and osx? Maybe we can\n> switch everything to qmake (for now, as long as no maintained autotools\n> is present)?\n>\n\nIt's easy on windows:  just install Qt Creator (comes with the Qt SDK),\ninstall the extra dependencies (build instructions are in README.rst), and\nhit build.\n\nOn MacOSX I'm not sure.  I think it's similar, as a few people built it for\nMacOSX and contributed settings for the .pro file...\n\nIt can build the GUI fine for every platform, however it can only build the\nGUI, not the headless daemon or the command line client. You'd still need\nold fashioned makefiles for those.\n\nCmake or autotools would be better, especially as those are intelligent\nenough to auto-detect the name of libraries such as boost, and detect\npresence of optional dependencies (miniupnp).\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/c50474fa/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Change to multiple executables?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Smith"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2702
        }
    },
    {
        "title": "[Bitcoin-development] Roadmap/schedules",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2011-08-10T16:29:50",
                "message_text_only": "I've been wading through the pull requests and bug lists to figure out\na roadmap for the next few months.\n\nHere are the things on my priority list:\n\n1. Where are we at with network health? What metrics should we be\nusing? Is there work to be done?\nAnd meta-issue:  can somebody volunteer to be the Bitcoin Network\nHealth Inspector to keep track of this?\n\n2. We've got a chronic problem with new code causing CRITICAL_SECTION\ndeadlocks (see issue #453 for the latest). Detecting potential\ndeadlocks early should be done; longer term I think re-architecting to\nbe single-threaded/asio is probably the right thing to do.\n\n3. Wallet security.  I'd like to get Matt's wallet encryption shipped\nsoon, along with all or part of groffer's Multisign patch (#319 --\nsince that will enable the creation of trojan-resistant secure wallet\nsolutions).\n\n4. Bug fixing.  44 bugs in the issue list, some of which I think are\nalready fixed. Anybody else want to volunteer to be BugKeeper?  (job\nwould be: prioritize/assign bugs, make sure they get closed when\nthey're fixed).\n\n5. Testing. I don't have time to personally test every PULL request,\nbut if a pull involves more than trivial code changes I'm not going to\npull it unless it has been thoroughly tested.  We had a very good rule\nat a company I used to work for-- programmers were NOT allowed to be\nthe only ones to test their own code. Help finding money and/or people\nfor a dedicated \"core bitcoin quality assurance team\" is welcome.\nMore unit tests and automated testing is also certainly welcome.\n\nIf this was open source blogging software I'd be much less uptight\nabout testing and code review and bugs. But it's not, it is software\nfor handling money.\n\n\nStuff I'd like to see in the release-after-next:\n\nfClient mode (download headers only, for faster initial startup; I've\nstarted the work, talk to me if you want to take over)\nSipa's wallet and key export/import\nMove from wxWidgets to qt for the GUI\nUn-hardcode fee handling (anybody already working on this?)\n\nAnd research-y features I'd like to see happen soon:\n\n\"Impolite peer\" detection/reaction to prevent various DOS/Sybil attacks\nBetter detection/reaction to double spend attempts or block-chain splits\nCode for mining pool participants that helps keep mining pool operators honest\n\n\nEverything else I consider lower priority. But if it is important to\nyou, is important to other people (and non-controversial), you\nthoroughly test it, and there's zero chance it introduces a security\nvulnerability... then I'll have no objections to pulling it.\n\nDid I miss anything important? I'll create a Roadmap page on the\nbitcoin wiki if there is general consensus about priorities.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-10T16:59:14",
                "message_text_only": "On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:\n> I've been wading through the pull requests and bug lists to figure out\n> a roadmap for the next few months.\n> \n> Here are the things on my priority list:\n> \n> 1. Where are we at with network health? What metrics should we be\n> using? Is there work to be done?\nWe really don't have too many metrics here.  AFAIK the only real metric\nkeeping place would be my dnsseed (as well as the one run by IO- ) and\nthey don't look good (I show about 3x as many 0.3.23 nodes listening as\n0.3.24, likely due to the rate that 0.3.23 nodes will drop connections,\nmade worse by recent block size increases).\n> And meta-issue:  can somebody volunteer to be the Bitcoin Network\n> Health Inspector to keep track of this?\nVery much needed, didn't TD say something about a friend who wanted to\ndo research in this area?\n> \n> 2. We've got a chronic problem with new code causing CRITICAL_SECTION\n> deadlocks (see issue #453 for the latest). Detecting potential\n> deadlocks early should be done; longer term I think re-architecting to\n> be single-threaded/asio is probably the right thing to do.\nSipa had begin looking at doing some redoing of the locking system (to\nsupport more broad stuff like read-only locks, etc) to solve that exact\nbug, but I never heard anything about if he actually started writing\ncode or how far he got.\n> \n> 3. Wallet security.  I'd like to get Matt's wallet encryption shipped\n> soon, along with all or part of groffer's Multisign patch (#319 --\n> since that will enable the creation of trojan-resistant secure wallet\n> solutions).\nI was under the impression all that was left on the to-do for 0.4 was\nwallet import/export testing and merge (and a few bug fixes like #453),\nI agree #319 should be pulled sometime soon, but maybe for 0.4 just the\nIsStandard parts in 0.4 as those need to get out first anyway?\n> \n> 4. Bug fixing.  44 bugs in the issue list, some of which I think are\n> already fixed. Anybody else want to volunteer to be BugKeeper?  (job\n> would be: prioritize/assign bugs, make sure they get closed when\n> they're fixed).\nPersonally, I'd like to see a better bug tracking system used anyway, ie\none with a full feature set, better tagging system, etc (I really hate\ngithub's system here, but moving would be hard...).  Anyway, many of\nthem are future \"would be nice to have things\" or a minor or annoying\nbug which effects almost no one (or is at least doesnt keep anyone from\nusing the client) but require a lot of effort to fix.\n> \n> 5. Testing. I don't have time to personally test every PULL request,\n> but if a pull involves more than trivial code changes I'm not going to\n> pull it unless it has been thoroughly tested.  We had a very good rule\n> at a company I used to work for-- programmers were NOT allowed to be\n> the only ones to test their own code. Help finding money and/or people\n> for a dedicated \"core bitcoin quality assurance team\" is welcome.\n> More unit tests and automated testing is also certainly welcome.\nWould be really nice.  I'm looking to move the jenkins server somewhere\n(moving to college means move as much as possible to VPSs instead of my\nparent's basement where I can't manage it) but it could allow for pretty\ngood sanity tests on patches (which they often currently fail) including\nunit tests and build tests.  If someone trusted wants to part with a VPS\nor can spare some bitcoins so I can grab one myself, it would be much\nappreciated (or if someone wants to take over that server, that would be\nnicer).\n> \n> If this was open source blogging software I'd be much less uptight\n> about testing and code review and bugs. But it's not, it is software\n> for handling money.\n> \n> \n> Stuff I'd like to see in the release-after-next:\n> \n> fClient mode (download headers only, for faster initial startup; I've\n> started the work, talk to me if you want to take over)\nNeed to talk here, I started work on splitting the block/transaction\ncheck/store and net with the ultimate goal of making a nice api that\nthey communicate over (as well as wallet and potentially other) and\nallowing for a different block/transaction check module for lightweight\nnodes.  It would also mean a bit cleaner codebase which could allow for,\nsay, a partial rewrite of net code without far-reaching changes.\nWhether or not its even a good idea, I don't know, but I've written some\ncode anyway.\n> Sipa's wallet and key export/import\nI was under the impression the plan was for this to go in 0.4 aka next\nrelease, but personally, I don't care too much either way.\n> Move from wxWidgets to qt for the GUI\n> Un-hardcode fee handling (anybody already working on this?)\nSipa did some good thinking through for algorithms that could be really\nuseful here, but I don't think any code was ever written, nor did he\nfinish (is he off doing the studying thing?)\n> \n> And research-y features I'd like to see happen soon:\n> \n> \"Impolite peer\" detection/reaction to prevent various DOS/Sybil attacks\n> Better detection/reaction to double spend attempts or block-chain splits\nNot sure what is meant here.  Personally, I'm animately against any kind\nof notification to spread through the network in case of a double spend,\nand I really think it double-spend detection could be very efficiently\ndone now.  I was under the impression block-chain splits were fairly\nefficiently handled already?\n> Code for mining pool participants that helps keep mining pool operators honest\n> \n> \n> Everything else I consider lower priority. But if it is important to\n> you, is important to other people (and non-controversial), you\n> thoroughly test it, and there's zero chance it introduces a security\n> vulnerability... then I'll have no objections to pulling it.\n> \n> Did I miss anything important? I'll create a Roadmap page on the\n> bitcoin wiki if there is general consensus about priorities.\n\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/e6dd9e29/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-10T18:57:53",
                "message_text_only": "On Wed, Aug 10, 2011 at 06:59:14PM +0200, Matt Corallo wrote:\n> On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:\n> > I've been wading through the pull requests and bug lists to figure out\n> > a roadmap for the next few months.\n> > \n> > Here are the things on my priority list:\n>\n> > 2. We've got a chronic problem with new code causing CRITICAL_SECTION\n> > deadlocks (see issue #453 for the latest). Detecting potential\n> > deadlocks early should be done; longer term I think re-architecting to\n> > be single-threaded/asio is probably the right thing to do.\n> Sipa had begin looking at doing some redoing of the locking system (to\n> support more broad stuff like read-only locks, etc) to solve that exact\n> bug, but I never heard anything about if he actually started writing\n> code or how far he got.\n\nNo I didn't start writing anything - I've been quite busy the past few weeks,\nand will be more so the coming weeks. Anyway, some ideas:\n\nEither we try to make everything single threaded, and aim towards a bitcoin\nlibrary which you pass events (which can be network, rpc, UI, ...) and\nit always processes in finite time, without any separate threads. That\nwould be a serious rewrite, and maybe a limitation on potential growth\n(there *will* be a time where a full node doesn't run on anything but\na 16-core machine...).\n\nThe alternative is doing a very careful checking/rework of the locking\nsystem. I think you want some per-object locking instead of per single\ndata structure. Making it so fine-grained forces careful checking of\nthe order in which things are locked. That is hard to keep track of,\nand probably doesn't gain you very much (just a guess, experiments could\nprove me wrong, obviously)\n\nI would propose a system with one lock for the node-handling code\n(mapTransactions, mapBlockIndex, mapOrphanBlocks, ...), one lock for\nthe wallet-handling code (mapWallet, CKeyStore), and one lock for\nnetwork-handling code. No access to any inner data structures of\nthese components is exposed, and everything goes through accessor\nfunctions. All exposed functions of each component take the respective\nlock upon entering the component. This includes functions that only\nneed read-only access (which currently often don't take a lock at\nall, iirc).\n\nHowever, I think we can move to reader-writer locks (boost's shared_mutex).\nA lot of code does not need an exclusive lock on the data, as multiple\nthreads reading the internal data structures simultaneously is not a\nproblem. This would mean that all inspector functions are wrapped in a\nlock_shared/unlock_shared blocks, all mutator functions are wrapped in\na lock_upgrade/unlock_upgrade block, and code that actually modifies\ndata structures is wrapped in a unlock_upgrade_and_lock/\nunlock_and_lock_upgrade block. \n\nThis is clearly part of a larger code-cleanup effort, as it would mean\nmoving all code in GUI and RPC that take locks on various things, to\nthe component they are taking locks on. That's immediately a nice step\ntowards \"librarification\" of the code...\n\n> > Sipa's wallet and key export/import\n> I was under the impression the plan was for this to go in 0.4 aka next\n> release, but personally, I don't care too much either way.\n\nI think it should be more or less finished by now in terms of\nfunctionality, at least for dumpprivkey, importprivkey, removeprivkey.\nI'm somewhat less sure about dumpwallet/importwallet, as some changes\nto the json dump format might be useful still. It does require testing\nthough...\n\n> > Move from wxWidgets to qt for the GUI\n\nI'd really like to see that - with or without autotools, if some degree\nof consistent config/build architecture can be maintained for the\ndifferent platforms.\n\n> > Un-hardcode fee handling (anybody already working on this?)\n> Sipa did some good thinking through for algorithms that could be really\n> useful here, but I don't think any code was ever written, nor did he\n> finish (is he off doing the studying thing?)\n\nI was working on a draft for a reworked fee system. I didn't get to\nwrite things out nicely, but the main idea was: assign a score to each\ntransaction group, in a way that scores always keep increasing over time.\nKeep the memory pool sorted according to those scores, and drop the lowest\nscoring ones when a configurable memory limit is reached (no limit on the\nscore itself). Finally, for mining, select the top N transaction groups\nfrom the pool in such a way that an average configurable fee per byte\nis maintained. \n\nAs each mining node chooses a (hopefully more or less fixed, or at least\nonly slowly changing) cutoff score above which transactions are included,\nthe network should converge to a more or less fixed probability distribution\nfor the score at which transactions are included.\n\nNodes can measure and estimate this distribution, and calculate expected time\nto inclusion for a given fee.\n\nThe devil is in the details, as it is kinda hard to define a scoring system\nfor transactions that is independent from the current exchange value of\nbitcoins, from which kind of transactions are common on the network, but still\ntries to mimic the cost for the network to handle that transaction.\n\n\n\nAnyway, as said, I currently don't have the time to implement these ideas\nright now. I do read the mailing list, though :)\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-11T11:56:34",
                "message_text_only": "> they don't look good (I show about 3x as many 0.3.23 nodes listening as\n> 0.3.24\n\n*cough* Upgrade alerts.\n\n> Very much needed, didn't TD say something about a friend who wanted to\n> do research in this area?\n\nI don't know if he'll actually do anything. Best assume this\n\"position\" is still open.\n\n>> 2. We've got a chronic problem with new code causing CRITICAL_SECTION\n>> deadlocks\n\nI've seen locks that track ordering relative to other locks and assert\nwhen they are locked out of order.\n\nThough it's not inversion related, running ThreadSanitizer might help\nfind other thread safety issues:\n\nhttp://code.google.com/p/data-race-test/wiki/ThreadSanitizer"
            },
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-11T17:49:21",
                "message_text_only": "Matt Corallo wrote:\n> On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:\n>> I've been wading through the pull requests and bug lists to figure out\n>> a roadmap for the next few months.\n>> ...\n>> 3. Wallet security.  I'd like to get Matt's wallet encryption shipped\n>> soon, along with all or part of groffer's Multisign patch (#319 --\n>> since that will enable the creation of trojan-resistant secure wallet\n>> solutions).\n> I was under the impression all that was left on the to-do for 0.4 was\n> wallet import/export testing and merge (and a few bug fixes like #453),\n> I agree #319 should be pulled sometime soon, but maybe for 0.4 just the\n> IsStandard parts in 0.4 as those need to get out first anyway?\n\nI'm not sure splitting the patch this way makes a big difference.  The\nIsStandard part depends on the construction of the multisign script, which\nis what most of the patch does anyway.  In other words, if upon further\nreview the script construction needs to change, IsStandard will change. \nSo a full review would be better.\n\nAlso, with unit test coverage for both this feature and existing\nscript.cpp code, I'm hoping that this patch is relatively low risk and\nactually pays down some existing test debt.\n\n--\nBobby Groff"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-10T20:41:26",
                "message_text_only": "On Wed, Aug 10, 2011 at 12:29 PM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> 1. Where are we at with network health? What metrics should we be\n> using? Is there work to be done?\n> And meta-issue: \u00a0can somebody volunteer to be the Bitcoin Network\n> Health Inspector to keep track of this?\n\nSeems like this would be a useful companion website + project.\nbitcoin/networkmon.git could be a central point for contributors to\nadd various monitors and tests.\n\nGetting on-going network health information is critical to bitcoin's\nsuccess.  We need to know if incoming nodes are getting DDoS'd...\n\n> 2. We've got a chronic problem with new code causing CRITICAL_SECTION\n> deadlocks (see issue #453 for the latest). Detecting potential\n> deadlocks early should be done; longer term I think re-architecting to\n> be single-threaded/asio is probably the right thing to do.\n\nAgree\n\n> 3. Wallet security. \u00a0I'd like to get Matt's wallet encryption shipped\n> soon, along with all or part of groffer's Multisign patch (#319 --\n> since that will enable the creation of trojan-resistant secure wallet\n> solutions).\n\nIMO the only thing lacking is docs.  There is no real admin guide\ndescribing how to prepare bitcoind installations for encryption;\ndoc/README does not mention RPC encryptwallet at all, nor does it\ndescribe the various states your wallet may be in, when before and\nafter encryptwallet has been run.  The information is very general,\nand not adequate for a competent admin to be able to evaluate.  It\ndoes not describe encryption method or other security parameters.  It\ndoes not describe the specific technical relationship between the\nmaster key and other keys.\n\n\n> 4. Bug fixing. \u00a044 bugs in the issue list, some of which I think are\n> already fixed. Anybody else want to volunteer to be BugKeeper? \u00a0(job\n> would be: prioritize/assign bugs, make sure they get closed when\n> they're fixed).\n\nI have never seen an open source project with a successful Bug Czar,\nunless that is an actively compensated position.\n\n> 5. Testing. I don't have time to personally test every PULL request,\n> but if a pull involves more than trivial code changes I'm not going to\n> pull it unless it has been thoroughly tested. \u00a0We had a very good rule\n> at a company I used to work for-- programmers were NOT allowed to be\n> the only ones to test their own code. Help finding money and/or people\n> for a dedicated \"core bitcoin quality assurance team\" is welcome.\n> More unit tests and automated testing is also certainly welcome.\n\nI think Q/A will naturally grow out of some sort of dedicated support\norganization, rather than have a dev fiat requirement.  Testing like\nthat is always desireable in the \"I'd love it, if it were this way\"\nvein, but not always realistic at all for open source projects.\nEspecially with open source, time has shown that the best testing\ncomes from the field, and we have the biggest test lab in the world:\nthe Internet.  So IMO focus less on roadblocks to publishing software,\nand more on widely distributed test software.\n\nFor new features, simple \"it works\" test at a minimum seems\nreasonable, most of the time.  But in open source the testing and such\ntends to happen in the periphery, by organizations and individuals\nwith the incentive to focus on those issues.\n\nIn my recent emails describing linux-next and a proposed\n\"bitcoin-next\", one attribute of linux-next is that it is run through\nautomated tests on a daily basis, right after the merge is complete.\nIt forms a useful layer on top of the primary linux project & tree.\n\n> If this was open source blogging software I'd be much less uptight\n> about testing and code review and bugs. But it's not, it is software\n> for handling money.\n\nAlthough I do agree, remember that it is the nature of open source\nthat you always have less control than you'd like :)\n\nIf the Iron Fist of Developer Justice squeezes too tightly, people\nwill simply route around the bottleneck with their own trees and\nsoftware releases.  genjix is already pushing for his libbitcoin\nbranch, for example.\n\n> Stuff I'd like to see in the release-after-next:\n>\n> fClient mode (download headers only, for faster initial startup; I've\n> started the work, talk to me if you want to take over)\n\nNice to have, but I think it's just a short term fix.  Long term, it\nwill be SPV clients vs. full nodes, and bringing up a full node will\nbe so costly that you'll just mirror the block database directly out\nof band, then boot the node at 99%+ block height.\n\n> Sipa's wallet and key export/import\n\nYes.  I was hoping to get that for 0.4.\n\n> Move from wxWidgets to qt for the GUI\n\nNot a big deal to me, I never use GUI :)\n\n> Un-hardcode fee handling (anybody already working on this?)\n\nHas anyone actually come up with a good idea to code?\n\nThis is a widely acknowledged problem, sure, but where are the good\nsolutions, even on paper?\n\n> Everything else I consider lower priority. But if it is important to\n> you, is important to other people (and non-controversial), you\n> thoroughly test it, and there's zero chance it introduces a security\n> vulnerability... then I'll have no objections to pulling it.\n>\n> Did I miss anything important? I'll create a Roadmap page on the\n> bitcoin wiki if there is general consensus about priorities.\n\nParting shot:  there is a reason Linus specifically says there is no\nroadmap for the kernel.  That's because it is always driven by the\ncommunity, and like a free market, the collective motivations and\ngoals of the group.\n\nProjecting into the future, _and then attempting to stick to that\nroadmap_, will end in much frustration.\n\nOpen source contributions are far more organic and unpredictable.\nRoadmaps work better in fiat organizations where developers do what\nthey're paid/told to do :)\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-11T08:48:09",
                "message_text_only": "> > 3. Wallet security.  I'd like to get Matt's wallet encryption shipped\n> > soon, along with all or part of groffer's Multisign patch (#319 --\n> > since that will enable the creation of trojan-resistant secure wallet\n> > solutions).\n> \n> IMO the only thing lacking is docs.  There is no real admin guide\n> describing how to prepare bitcoind installations for encryption;\n> doc/README does not mention RPC encryptwallet at all, nor does it\n> describe the various states your wallet may be in, when before and\n> after encryptwallet has been run.  The information is very general,\n> and not adequate for a competent admin to be able to evaluate.  It\n> does not describe encryption method or other security parameters.  It\n> does not describe the specific technical relationship between the\n> master key and other keys.\nMy fault, Ill write something up on the train back today.\n> \n> > 5. Testing. I don't have time to personally test every PULL request,\n> > but if a pull involves more than trivial code changes I'm not going to\n> > pull it unless it has been thoroughly tested.  We had a very good rule\n> > at a company I used to work for-- programmers were NOT allowed to be\n> > the only ones to test their own code. Help finding money and/or people\n> > for a dedicated \"core bitcoin quality assurance team\" is welcome.\n> > More unit tests and automated testing is also certainly welcome.\n> \n> I think Q/A will naturally grow out of some sort of dedicated support\n> organization, rather than have a dev fiat requirement.  Testing like\n> that is always desireable in the \"I'd love it, if it were this way\"\n> vein, but not always realistic at all for open source projects.\n> Especially with open source, time has shown that the best testing\n> comes from the field, and we have the biggest test lab in the world:\n> the Internet.  So IMO focus less on roadblocks to publishing software,\n> and more on widely distributed test software.\n> \n> For new features, simple \"it works\" test at a minimum seems\n> reasonable, most of the time.  But in open source the testing and such\n> tends to happen in the periphery, by organizations and individuals\n> with the incentive to focus on those issues.\n> \n> In my recent emails describing linux-next and a proposed\n> \"bitcoin-next\", one attribute of linux-next is that it is run through\n> automated tests on a daily basis, right after the merge is complete.\n> It forms a useful layer on top of the primary linux project & tree.\nJenkins + a large enough test suite could do very nice automatic sanity\ntesting IMHO...that is what it is designed for (even if not to\nautomatically test pre-merge, but it could be adapted).  Many pull\nrequests build on Linux, but not on MinGW, OSX, etc so just that would\nbe useful IMHO.\n> Not a big deal to me, I never use GUI :)\n> \n> > Un-hardcode fee handling (anybody already working on this?)\n> \n> Has anyone actually come up with a good idea to code?\n> \n> This is a widely acknowledged problem, sure, but where are the good\n> solutions, even on paper?\nSipa's stuff is quite good IMHO, it still has some problems left to\nsolve (like choosing minor details of the underlying priority algorithm)\nbut aside from those, I think it could work.  I'm not sure if sipa wants\nto just publish the stuff he did so far and let this list debate on the\nremaining details and eventual implementation, or if he wanted to come\nup with something complete before publishing, it up to him, but it is\ndoable.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/58746a63/attachment.sig>"
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-11T18:20:23",
                "message_text_only": "On Wed, Aug 10, 2011 at 9:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> I've been wading through the pull requests and bug lists to figure out\n> a roadmap for the next few months.\n>\n> Here are the things on my priority list:\n>\n> 1. Where are we at with network health? What metrics should we be\n> using? Is there work to be done?\n> And meta-issue:  can somebody volunteer to be the Bitcoin Network\n> Health Inspector to keep track of this?\n>\n>\nI'm already on it, leveraging bitcoinj to do the work. I've added async\ncapabilities to bitcoinj so that I can peer with everything that will let me\nwith the goal of publishing quality peer lists via the DNS. Once I can build\nsome metrics off the network its a matter of creating the visualizations.\n\nI just started on this project last week. Happy to work with others on what\na healty network looks like as well as best ways to communicate status.\n\nalso need advise on how to not be an impolite peer.\n\n-rick\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/2d1e0271/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Roadmap/schedules",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Rick Wesson",
                "bgroff at lavabit.com",
                "Mike Hearn",
                "Matt Corallo",
                "Gavin Andresen",
                "Pieter Wuille"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 26762
        }
    },
    {
        "title": "[Bitcoin-development] Protocol changes",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2011-08-11T16:17:23",
                "message_text_only": "This thread is getting off-topic so I changed the subject.\n\n> The benefit I'm aiming at is to imagine a thin client that has done a fast\n> startup and only downloaded the headers.\n\nOK. A better way is tx filtering, as discussed here:\n\n   http://bitcointalk.org/?topic=7972.0\n\nThe reason is you want to only get the transactions+merkle branches\nrelevant to you, otherwise cost is still O(system activity) not O(your\nactivity) as blocks get bigger, even if you don't download every\nblock.\n\n> The sequence number (and perhaps I've misunderstood) allows me to replace a\n> transaction I've already submitted\n\nYes, but it's more complex than that.\n\nSome contract protocols require one party in a set to be able to\nre-issue transactions without interacting with the other parties. The\nreason is that each input can come from a different person. If the\nsequence number was a property of the transaction, updating it would\neither require all participants to re-sign the transaction, or for the\nsignatures to not cover the sequence number at all.\n\nWith seqnums on the inputs, I can create a newer version of the\ntransaction by just resigning my input with a higher sequence number.\nThis is defined by IsNewerThan(). Note that my options here are\nlimited - I can't create an arbitrarily different version of the\ntransaction without invalidating all the other input signatures. If I\nown all the inputs, no problem. If some are owned by others, what I\ncan change is defined by the SIGHASH flags. To replace this tx in the\nmemory pool requires others to re-sign their input with a higher\nsequence number than mine - so we establish a kind of chain. Nobody\ncan rewind the transaction to an earlier point, but anyone can update\nit within the parameters established by the SIGHASH flags on the\nothers signatures.\n\nThese features all combine together to allow for particular types of\ncontracts that take place on the negotiating table of the networks\nmemory pool. For instance, if you are taking part and then decide you\ndon't wish to continue, you can set the output that's in the same\nposition as your input to reassign all the money you put in back to\nyou, sign the input with SIGHASH_SINGLE and broadcast with nSequence\nset to UINT_MAX. Now the transaction is still valid but is a no-op\nfrom your perspective. Note that once you've done this, you've bowed\nout of the negotiation completely because you can't replace the\ntransaction anymore.\n\nYou can't change anything about the inputs beyond scripts this way.\nThe transaction still has to connect to the same outputs as before,\nand thus import the same amount of value."
            },
            {
                "author": "Andy Parkins",
                "date": "2011-08-11T17:24:42",
                "message_text_only": "On Thursday 11 August 2011 17:17:23 Mike Hearn wrote:\n\n> This thread is getting off-topic so I changed the subject.\n\nFair enough.\n\n> > The benefit I'm aiming at is to imagine a thin client that has done a\n> > fast startup and only downloaded the headers.\n> \n> OK. A better way is tx filtering, as discussed here:\n> \n>    http://bitcointalk.org/?topic=7972.0\n> \n> The reason is you want to only get the transactions+merkle branches\n> relevant to you, otherwise cost is still O(system activity) not O(your\n> activity) as blocks get bigger, even if you don't download every\n> block.\n\nWell okay; it seems to me that that is considerably bigger task, and I'm not \nsure how likely that is to appear.  But that sounds workable, since my \nfeature request is simply this filtering system with the filter set to \n\"ALL\"; so I can hardly complain about that.\n\n> > The sequence number (and perhaps I've misunderstood) allows me to\n> > replace a transaction I've already submitted\n> \n> Yes, but it's more complex than that.\n\n ... good stuff removed for brevity ...\n\n> sequence number than mine - so we establish a kind of chain. Nobody\n> can rewind the transaction to an earlier point, but anyone can update\n> it within the parameters established by the SIGHASH flags on the\n> others signatures.\n\nI can't say I see what the point of all that added complexity is, contracts \nare usually more than just financial, and the ability to pick a slightly \ndifferent set of source inputs doesn't seem like a hugely useful feature; \nbut I'm willing to accept someone thinks it is a good idea and leave it at \nthat.  I withdraw my \"move sequence number\" feature request.\n\n> You can't change anything about the inputs beyond scripts this way.\n> The transaction still has to connect to the same outputs as before,\n> and thus import the same amount of value.\n\nWhat then allows the contract out of the memory pool into a chain?  The \nlocktime?  No, no, forget it... I don't want to open a new can of worms.\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-11T22:02:09",
                "message_text_only": "> I can't say I see what the point of all that added complexity is, contracts\n> are usually more than just financial\n\nThe term \"contract\" is sort of misleading, but there isn't a better\nword for it. Satoshi called them contracts so that's what I call them\ntoo.\n\nhttp://en.bitcoin.it/wiki/Contracts\n\nThe point is to allow for lower trust in certain types of\ntransactions. For instance, consider Kickstarter. They allow people to\nclub together to fund the creation of new things, typically indie\nmovies and games. The problem is you need this trusted middleman to\ncollect peoples pledges and aggregate them. That adds fees, etc. With\ncontracts it can be done entirely with software, all the artist/game\nprogrammer would need is to run some software on their website.\n\n> What then allows the contract out of the memory pool into a chain? \u00a0The\n> locktime? \u00a0No, no, forget it... I don't want to open a new can of worms.\n\n;)\n\nLock time or if every sequence number is UINT_MAX."
            }
        ],
        "thread_summary": {
            "title": "Protocol changes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andy Parkins"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5604
        }
    },
    {
        "title": "[Bitcoin-development] Password-protected private key export format and version bytes",
        "thread_messages": [
            {
                "author": "Sam Revitch",
                "date": "2011-08-12T15:53:10",
                "message_text_only": "Hi folks,\n\nI've been working on a new private key export format that includes\nsimple password-protection.  Details of the scheme are posted at:\n\nhttps://bitcointalk.org/index.php?topic=36195.0\n\nIt is intended as an interchange format, not specifically integrated\nwith wallet encryption, and simple enough to be produced by the\nvanitygen program.  Importing to the official bitcoin client using a\nmethod like the import/export patch would require the user to provide\nthe password of the private key, in addition to the wallet password if\nthe wallet is encrypted.\n\nComments on the format are welcomed!\n\nAs the proposed format is base-58, I would like to make a request to use\none of the data classes as proposed by Pieter Wuille about a month ago:\n\nhttp://sourceforge.net/mailarchive/forum.php?thread_name=20110708092506.GA6641%40ulyssis.org&forum_name=bitcoin-development\n\nIf this doesn't fit with the general bitcoin development agenda, that's\nOK too, but I would like to explore some possibility for a protected\nexport format for private keys.\n\nThanks,\n-Sam Revitch"
            },
            {
                "author": "Sam Revitch",
                "date": "2011-08-17T18:59:31",
                "message_text_only": "Hello all,\n\nThe description of the password-protected export format has been revised\nslightly, and now includes multiple algorithms and a parameter byte for\nselecting the encryption parameters.  As before, the thread is here:\n\nhttps://bitcointalk.org/index.php?topic=36195.0\n\nUnless there is an existing or other planned use for data class 32, or\nanother specific objection, I would like to use it for\npassword-protected private keys.  Going by Sipa's description, this\nwould mean that a password-protected private key for bitcoin is type 32,\nand for the testnet, type 79.\n\nThanks,\n-Sam Revitch"
            }
        ],
        "thread_summary": {
            "title": "Password-protected private key export format and version bytes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sam Revitch"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1660
        }
    },
    {
        "title": "[Bitcoin-development] [PULL] When parsing base58 data, accept [0O] as o, and [l|!] as 1",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2011-08-12T16:19:50",
                "message_text_only": "http://tinyurl.com/3gpvrhm\n\ngit fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \\\n base58_liberal_parsing && git merge FETCH_HEAD\n\nThis simple modification allows base58 inputs to use zero and uppercase 'O' in \nplace of lowercase 'O', as well as lowercase 'L', bar/pipe, and exclamation \npoint in place of one. This allows more tolerance when inputting addresses or \nother data by manual typing, and gives a bit more variety to vanity addresses."
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-12T16:43:22",
                "message_text_only": "On Friday, August 12, 2011 12:35:27 PM Gavin Andresen wrote:\n> pszDecode58 is not a pointer to a zero-terminated string; it should be\n> pnDecode58.\n\nUpdated variable name in branch...\n\n> I'm torn between \"meh, whatever\" and \"this will just cause people\n> headaches when they wonder why vanity addresses don't work in\n> blockexplorer because theymos decides not to bother changing his\n> code...\"\n\nPerhaps the vanity use would need to be introduced only after the community \nhas accepted these as alternative legitimate representations. Even without \nthat, I think gracefully handling the typos would be sensible."
            }
        ],
        "thread_summary": {
            "title": "When parsing base58 data, accept as o, and as 1",
            "categories": [
                "Bitcoin-development",
                "PULL",
                "0O",
                "l|!"
            ],
            "authors": [
                "Luke-Jr"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1071
        }
    },
    {
        "title": "[Bitcoin-development] The forums...",
        "thread_messages": [
            {
                "author": "Vladimir Marchenko",
                "date": "2011-08-12T17:32:06",
                "message_text_only": "I am in a final stage of preparation for launch of bitcoin community\nportal at https://bitcoin.org.uk . It contains fairly advanced forum\nfunctionality, blogging platform, community calendar, and even chat.\nProfessionally hosted on highend dedicated servers running FreeBSD in\na DC loated in Amsterdaam, NL\n\nThere is a  \"by invitation only\" section, which might be suitable for\nbitcoin developers. Please consider starting using it and helping to\njump start it.\n\nAdditionally, if any bitcoin businesses would like to have their\n\"support\" forums set up there so that they retail moderatorial control\nover it please let me know.\n\nSoft launch is scheduled on 15th of August, but it is fairly\nfunctional already and open for registration. Feel free to register\nand ping me for setting up appropriate permission for use of private\nforums.\n\nAny suggestions and feedback are also very welcome.\n\nKind Regards,\nVladimir."
            }
        ],
        "thread_summary": {
            "title": "The forums...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Vladimir Marchenko"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 911
        }
    },
    {
        "title": "[Bitcoin-development] Patch to UNIX makefile to remove -DFOURWAYSSE2",
        "thread_messages": [
            {
                "author": "Venkatesh Srinivas",
                "date": "2011-08-14T19:05:07",
                "message_text_only": "-DFOURWAYSSE2 is an obsolete flag; lets remove it.\n\n-- vs\n-------------- next part --------------\nFrom 136f8fbd449b7584b61451ac396ca921d5e731c2 Mon Sep 17 00:00:00 2001\nFrom: Venkatesh Srinivas <me at endeavour.zapto.org>\nDate: Sun, 14 Aug 2011 15:02:31 -0400\nSubject: [PATCH] Remove -DFOURWAYSSE2 flag from UNIX makefile.\n\n---\n src/makefile.unix |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)\n\ndiff --git a/src/makefile.unix b/src/makefile.unix\nindex ba9d0ca..4c92797 100644\n--- a/src/makefile.unix\n+++ b/src/makefile.unix\n@@ -10,7 +10,7 @@ WXLIBS=$(shell wx-config --libs)\n \n USE_UPNP:=0\n \n-DEFS=-DNOPCH -DFOURWAYSSE2 -DUSE_SSL\n+DEFS=-DNOPCH -DUSE_SSL\n \n # for boost 1.37, add -mt to the boost libraries\n LIBS= \\\n-- \n1.7.2.3\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 198 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110814/d85274be/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-16T14:12:27",
                "message_text_only": "On Sun, Aug 14, 2011 at 3:05 PM, Venkatesh Srinivas\n<me at endeavour.zapto.org> wrote:\n> -DFOURWAYSSE2 is an obsolete flag; lets remove it.\n\napplied\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "Patch to UNIX makefile to remove -DFOURWAYSSE2",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Venkatesh Srinivas"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1215
        }
    },
    {
        "title": "[Bitcoin-development] DEBUG_LOCKORDER : early detection of potential deadlocks",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2011-08-17T14:53:43",
                "message_text_only": "Commit 865ed8a adds a new compile-time #ifdef : DEBUG_LOCKORDER\n\nCompile with -DDEBUG_LOCKORDER and every time a lock is acquired by a\nCCriticalSection a check is made to record the order of locks and\ncomplain if they are being acquired in an inconsistent order.  Here's\nwhat you get in debug.log when potential deadlocks are detected:\n\nPOTENTIAL DEADLOCK DETECTED\nPrevious lock order was:\n pwallet->cs_mapWallet  db.cpp:686\n pwallet->cs_KeyStore  db.cpp:687\n cs_KeyStore  keystore.cpp:74\n cs_vMasterKey  keystore.cpp:75\n cs_KeyStore  keystore.cpp:31\nCurrent lock order is:\n pwallet->cs_mapWallet  db.cpp:686\n pwallet->cs_KeyStore  db.cpp:687\n cs_KeyStore  keystore.cpp:74\n cs_vMasterKey  keystore.cpp:75\n\nPOTENTIAL DEADLOCK DETECTED\nPrevious lock order was:\n pnode->cs_vRecv  net.cpp:1525\n cs_main  main.cpp:2372\n cs_vSend  net.h:681\nCurrent lock order is:\n pnode->cs_vSend  net.cpp:1531\n cs_main  main.cpp:2411\n\nI'll be working on figuring out how to eliminate these, and will be\nworking on some RPC stress-tests that try to exercise all the code\npaths to early-detect other potential problems.\n\n-- \n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "DEBUG_LOCKORDER : early detection of potential deadlocks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1119
        }
    },
    {
        "title": "[Bitcoin-development] From the forums: one-confirmation attack",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2011-08-18T14:00:01",
                "message_text_only": "vector76 on the Forums posted this interesting variation on a 'Finney attack' :\n  https://bitcointalk.org/index.php?topic=36788.msg463391#msg463391\n\n\"Let's say I observe the timing of when nodes are broadcasting\ntransactions and how they are propagating through the network.  By\nwatching for which nodes are earliest to broadcast transactions from\nmy target, I manage to establish a direct connection to my target.\n\nI use a similar method of watching block broadcasts to establish\nconnections to most of the mining pools.\n\nNow I create a transaction making a valid, large deposit into my\ntarget.  I do not broadcast this transaction but I add it to a block\nthat I am attempting to mine.  I mine solo, just like normal, except\nthat I have an extra non-broadcasted tx that I am including.\n\nEventually, I succeed in creating a valid block.  I do not broadcast\nit immediately, but instead I wait until someone else mines a block,\nand when that happens, I immediately broadcast my block to my target.\nIf my target sees my block before the other block, they will accept\nit, and my transaction will have one confirmation.  The block chain\nhas forked, and my target (and possibly other nodes, if my target\nrelays quickly enough) will believe that my block is the correct one,\nwhile other nodes will believe that the other fork is the correct one.\n\nI immediately request a withdrawal, and my target generates a\ntransaction sending the large amount of coins to an address I control.\n I also double-spend some of the inputs, sending the coins to myself.\nThe part of the network that did not receive my block first (which\nhopefully is most of the miners) will accept this as valid and work to\ninclude it in the next block.\n\nIf my block eventually \"wins\" because enough miners saw my block first\nand added onto it first, then I have just made a deposit and\nwithdrawal, and I lose nothing.\n\nIf my block eventually \"loses\", then the deposit is invalidated.  If\nthe deposit tx was not one of the inputs to the withdrawal\ntransaction, then the withdrawal is still valid.\"\n\n-------------------------------\n\nThe lessons are \"don't accept 1-confirmation transactions\" and  \"try\nto be well-connected.\"\n\nBut maybe the deeper lesson is \"don't trust information you get from\nonly one peer.\" Or maybe \"watch for peers that are trying to fool\nyou.\"\n\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Joel Joonatan Kaartinen",
                "date": "2011-08-18T15:36:23",
                "message_text_only": "On Thu, 2011-08-18 at 10:00 -0400, Gavin Andresen wrote:\n> The lessons are \"don't accept 1-confirmation transactions\" and  \"try\n> to be well-connected.\"\n> \n> But maybe the deeper lesson is \"don't trust information you get from\n> only one peer.\" Or maybe \"watch for peers that are trying to fool\n> you.\"\n\nThis particular attack seems quite dependant on the target not using the\ndeposit Tx as input. I believe this whole class of attacks become\nineffective if each account has it's own separate wallet.\n\nAlso, receiving a block with a transaction that hasn't been broadcast to\nthe network is in itself quite suspect. Are there cases where that\nhappens legitimately? Perhaps in such a case, don't treat the block it\ncame in as a confirmation at all. Instead, start counting from the next\none.\n\n- Joel"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-18T15:52:03",
                "message_text_only": "> Also, receiving a block with a transaction that hasn't been broadcast to\n> the network is in itself quite suspect. Are there cases where that\n> happens legitimately?\n\nThere's no way to obtain the memory pools of your peers today, so if\nyou're newly started up it can happen that you get blocks with unseen\ntransactions.\n\nFor vectors variant, I wonder if it'd be safe to report the number of\nconfirmations differently for the duration of a chain split. If you\nhave a block but a majority of peers relayed a block that split the\nchain, subtract 1 from each confirmation reported via RPC."
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-18T16:16:31",
                "message_text_only": "> For vectors variant, I wonder if it'd be safe to report the number of\n> confirmations differently for the duration of a chain split. If you\n> have a block but a majority of peers relayed a block that split the\n> chain, subtract 1 from each confirmation reported via RPC.\n\nOr maybe report them as 'suspicious.'  Changing the meaning of\n'confirmations' is likely to break code (e.g. code like block =\ncurrent_blockchain[blockcount-tx.confirmations] ... would give the\nwrong block).\n\nA floating-point 0.0-1.0 'confidence' measure might be a good idea to\ngo along with the integer confirmations. I can think of all sorts of\nways of gauging the reliability of transactions or blocks (did it come\nfrom a trusted peer-- assuming we eventually have trusted peers.  Does\nit have a lot of confirmations?  Are there no active block chain\nforks?  Have we been getting new blocks at the rate we expect?  etc\netc etc)\n\nWe could start with an as simple-as-possible \"confidence == 0 if\nconfirmations < 2, otherwise confidence = function(#confirmations)\"\nand improve it from there.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-18T16:46:17",
                "message_text_only": "On Thu, Aug 18, 2011 at 12:16 PM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> We could start with an as simple-as-possible \"confidence == 0 if\n> confirmations < 2, otherwise confidence = function(#confirmations)\"\n> and improve it from there.\n\n\nAt the same time, if this causes people to wait less than the 6 blocks\nthat the software currently waits for before leaving unconfirmed\nstatus then that would be sad.\n\nSimply waiting a number of blocks is an excellent metric and provides\nrobustness against almost all attack patterns in a way that various\none-off-heuristics can not as it equates to _real difficulty_ (and\nreal expense (hashing computation, loss of income on the orphaned\nblocks)) in a way that can't be faked.\n\nA few weeks back when there was some rumor going around that mybitcoin\nlost coin based on some kind of one confirmation attack I described on\nIRC a similar attack pattern which had a useful improvement:\n\n* The attacker runs many widely distributed sybil nodes (e.g. using\nbotnet drones as simple tcp proxies to appear at many addresses). He\ntakes advantage of the fact the bitcoin won't connect to /16s that\nhave already connected to it to further isolate nodes.\n\n* By creating normal looking probe transactions which his own nodes\nwon't forward he detects network partitions which he is able to\ncreate. He searches for a cut which causes there to be at least two\npartitions which contain significant mining power.\n\n* He creates two accounts at MoronBank. He doesn't even bother\nidentifying MoronBank's node. MoronBank will be in one partition or\nanother. He makes deposits in both partitions, and conflicting\ntransactions in the opposite partitions, while carefully filtering out\nthese transactions from crossing the boundary.\n\n(Notably, the network doesn't appear partitioned to everyone else now\nbecause he's still forwarding blocks and transactions unrelated to his\nattack\u2014 it only becomes visible once some of his evil transactions are\nmined)\n\n* After the funds show up in MoronBank he withdraws and drops the partitioning.\n\nOnly if he has difficulty getting MoronBank into the smaller partition\ndoes he need to bother locating it and attacking it directly.\n\nThe bad thing about this attack is that it doesn't require the\nattacker to have any hash power at all: he captures miners as\nunwilling (or willing but plausibly deniable) participants. The lost\nincome from orphaned blocks is externalized to the victimized miners\n(and since most pools don't pay orphaned blocks out of pocket a pool\noperator would be inclined to help out).\n\nThe good thing about it is that it's killed dead by nodes adding in a\nfew manually configured peerings, they don't even really need to be\ntrusted: You just need to trust that they don't all go to a single\nbad-guy conspiracy. At a minimum all major miners should be fully\nmeshed.\n\nUnfortunately, We don't currently have software for this as addnode\ndoesn't worry about keeping the links up... and the major pools also\ndon't seem to be interested in participating."
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-18T17:36:05",
                "message_text_only": "Gregory said: \"...if this causes people to wait less than the 6 blocks\nthat the software currently waits for before leaving unconfirmed\nstatus then that would be sad.\"\n\nPeople are already considering transactions 'confirmed enough' at less\nthan six blocks. I'm guilty, too-- 3 is/was the magic number for\nClearCoin.\n\nAnd people are already experimenting with ways of safely accepting\n0-confirmation transactions, like InstaWallet's \"green\" payments (sent\nfrom a trusted-not-to-double-spend address).\n\nSince there is definitely market demand for \"as fast as possible\"\nconfirmation, I'm thinking adding a placeholder to the RPC interface\nmight be a good idea.  Although after thinking about it some more,\nmaybe a signed integer \"trust\" rating for blocks/transactions would be\na better way of doing it...\n\n\nRE: miners connecting themselves together in a semi-trusted \"bitcoin\nbackbone\"  :  agreed.\n\nMatt submitted a patch to connect and stay-connected to a set of\nnodes, but I complained about the implementation.  Seems to me the\nnetworking code needs an overhaul, to implement a priority queue of\npotential peers (trusted peers would be sorted to near the top of the\nqueue, peers you think are badly-behaved would be sorted to the\nbottom, with lots of randomness so not everybody on the network is\ntrying to connect to the same set of peers). With peer rotation to\nmitigate manipulate-time and other Sybil attacks.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "theymos",
                "date": "2011-08-18T16:47:56",
                "message_text_only": "> The part of the network that did not receive my block first (which\n> hopefully is most of the miners) will accept this as valid and work to\n> include it in the next block.\n\nTo make this more difficult, nodes that receive new transactions via\nblocks should relay the new transactions as if they had received them\nnormally. Then the double-spend transaction will be rejected by most of\nthe network because the other version is already widely-known."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-18T17:27:29",
                "message_text_only": "On Thu, Aug 18, 2011 at 12:47 PM, theymos <theymos at mm.st> wrote:\n> To make this more difficult, nodes that receive new transactions via\n> blocks should relay the new transactions as if they had received them\n> normally. Then the double-spend transaction will be rejected by most of\n> the network because the other version is already widely-known.\n\nNot that helpful. In that attack pattern the attacker can release the\nblock and the conflicting transaction at the same time (to different\nnodes, of course). They can also inject the conflicting transaction\ninto many places in the network at once."
            }
        ],
        "thread_summary": {
            "title": "From the forums: one-confirmation attack",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "theymos",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Joel Joonatan Kaartinen"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 10333
        }
    },
    {
        "title": "[Bitcoin-development] Patch to provide MSG_NOSIGNAL defn where not available",
        "thread_messages": [
            {
                "author": "Venkatesh Srinivas",
                "date": "2011-08-19T13:52:27",
                "message_text_only": "Hi,\n\nThe attached patch defines MSG_NOSIGNAL to 0 on platforms where it is\nunavailable. Previously this definition was only available under\n__WXMSW__.\n\n-- vs\n-------------- next part --------------\nFrom 8299efe45e090b81c988bcdca58c8e25c0001841 Mon Sep 17 00:00:00 2001\nFrom: Venkatesh Srinivas <me at endeavour.zapto.org>\nDate: Fri, 19 Aug 2011 09:41:04 -0400\nSubject: [PATCH] Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.\n\n---\n src/util.h |    5 ++++-\n 1 files changed, 4 insertions(+), 1 deletions(-)\n\ndiff --git a/src/util.h b/src/util.h\nindex 1e4ceb2..9d3824f 100644\n--- a/src/util.h\n+++ b/src/util.h\n@@ -89,8 +89,11 @@ T* alignup(T* p)\n     return u.ptr;\n }\n \n-#ifdef __WXMSW__\n+#ifndef MSG_NOSIGNAL\n #define MSG_NOSIGNAL        0\n+#endif\n+\n+#ifdef __WXMSW__\n #define MSG_DONTWAIT        0\n #ifndef UINT64_MAX\n #define UINT64_MAX          _UI64_MAX\n-- \n1.7.2.3\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 198 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110819/7a3ca546/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Patch to provide MSG_NOSIGNAL defn where not available",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Venkatesh Srinivas"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1156
        }
    },
    {
        "title": "[Bitcoin-development] [PATCH] Boost filesystem v3 support",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2011-08-19T16:48:33",
                "message_text_only": "This patch conditionally adapts the one line needed to support boost \nfilesystem version 3 (default in Boost 1.46+ and required for 1.48+)\n\nI have tested it with Boost 1.41.0 to verify it still works on these older \nversions too.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0001-Support-for-boost-filesystem-version-3.patch\nType: text/x-patch\nSize: 743 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110819/2b9d25e4/attachment.bin>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-24T19:19:08",
                "message_text_only": "On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:\n> This patch conditionally adapts the one line needed to support boost\n> filesystem version 3 (default in Boost 1.46+ and required for 1.48+)\n>\n> I have tested it with Boost 1.41.0 to verify it still works on these older\n> versions too.\n\nYour change appears to be technically correct.  It is disappointing\nfor #ifdefs to crap up the code, though...\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-24T19:21:02",
                "message_text_only": "On Wednesday, August 24, 2011 3:19:08 PM Jeff Garzik wrote:\n> On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > This patch conditionally adapts the one line needed to support boost\n> > filesystem version 3 (default in Boost 1.46+ and required for 1.48+)\n> > \n> > I have tested it with Boost 1.41.0 to verify it still works on these\n> > older versions too.\n> \n> Your change appears to be technically correct.  It is disappointing\n> for #ifdefs to crap up the code, though...\n\nIt's only one line, and can be removed when the old APIs are sufficiently \nremoved."
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-24T19:29:20",
                "message_text_only": "On Wed, Aug 24, 2011 at 3:21 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Wednesday, August 24, 2011 3:19:08 PM Jeff Garzik wrote:\n>> On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> > This patch conditionally adapts the one line needed to support boost\n>> > filesystem version 3 (default in Boost 1.46+ and required for 1.48+)\n>> >\n>> > I have tested it with Boost 1.41.0 to verify it still works on these\n>> > older versions too.\n>>\n>> Your change appears to be technically correct. \u00a0It is disappointing\n>> for #ifdefs to crap up the code, though...\n>\n> It's only one line, and can be removed when the old APIs are sufficiently\n> removed.\n\nYeah, I think it is fair to apply.  Just saying... a nicer version\nwould be... nice.  Most projects work a bit to hide this stuff in\nheaders, so that the actual code is a bit clean.\n\nNow, this is a general guideline, not a hard rule.  We have plenty of\n#ifdef windows code already, for example.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "Boost filesystem v3 support",
            "categories": [
                "Bitcoin-development",
                "PATCH"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 2593
        }
    },
    {
        "title": "[Bitcoin-development] Introduction",
        "thread_messages": [
            {
                "author": "Fred Concklin",
                "date": "2011-08-22T19:02:18",
                "message_text_only": "Hey all!\n\nMy name is Fred Concklin and I plan on working on Bitcoin development\nthrough my position at Trucoin. I thought I'd take this chance to\nintroduce myself and go over where I can make contributions.\n\nI'm great with automated builds and testing for GNU/Linux and BSD\nplatforms and generally plan on structuring the bitcoin project into a\nstructure compliant with GNU autotools to facilitate testing and bug\nreporting.\n\nI'm also interested in work to daemonize bitcoin on boot and furthering\nwork to bring bitcoin into general coding and implementation paradigms\nseen on GNU/Linux platforms.\n\nWhile I mainly spend my time in high level functional programming\nlanguages these days, I look forward to working on bitcoin and hope\neverybody is patient with my occasional cpp implementation ineptitudes.\n\nI'm also interested in spurring discussion on new blockchain\ndistribution techniques and thoughts on improvements for bitcoin.\n\nI'm excited to begin work on bitcoin.\n\nfpc\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 262 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/b85ecd90/attachment.sig>"
            },
            {
                "author": "Douglas Huff",
                "date": "2011-08-22T19:30:04",
                "message_text_only": "On Aug 22, 2011 2:26 PM, \"Fred Concklin\" <fconcklin at trucoin.com> wrote:\n>\n> I'm also interested in work to daemonize bitcoin on boot and furthering\n> work to bring bitcoin into general coding and implementation paradigms\n> seen on GNU/Linux platforms.\n\nWhat? It already works fine in this regard using standard tools. Especially\neasy with daemontools/runit.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/0657ed70/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-22T19:49:36",
                "message_text_only": "On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:\n> On Aug 22, 2011 2:26 PM, \"Fred Concklin\" <fconcklin at trucoin.com> wrote:\n> > I'm also interested in work to daemonize bitcoin on boot and furthering\n> > work to bring bitcoin into general coding and implementation paradigms\n> > seen on GNU/Linux platforms.\n> \n> What? It already works fine in this regard using standard tools. Especially\n> easy with daemontools/runit.\n\nHe said standard *coding and implementation paradigms*. This has nothing to do \nwith integration with some non-standard \"init replacement\" that goes against \nthe whole design of Unix.\n\nWhat I understand this to mean, is properly abstracting the components such \nthat the node, wallet, and GUI can work together while being distinct parts.\nIn this sense, Fred, you may be interested in working on coming up with a \nstandard for a https://en.bitcoin.it/wiki/Wallet_protocol"
            },
            {
                "author": "Douglas Huff",
                "date": "2011-08-22T20:12:15",
                "message_text_only": "I don't think you're actually familiar with either of those tools. A run\nscript is not much different than an init script?\n\nThose who live in tonal caves shouldn't crap on themselves, or something.\n\nOn Aug 22, 2011 2:49 PM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n>\n> On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:\n> > On Aug 22, 2011 2:26 PM, \"Fred Concklin\" <fconcklin at trucoin.com> wrote:\n> > > I'm also interested in work to daemonize bitcoin on boot and\nfurthering\n> > > work to bring bitcoin into general coding and implementation paradigms\n> > > seen on GNU/Linux platforms.\n> >\n> > What? It already works fine in this regard using standard tools.\nEspecially\n> > easy with daemontools/runit.\n>\n> He said standard *coding and implementation paradigms*. This has nothing\nto do\n> with integration with some non-standard \"init replacement\" that goes\nagainst\n> the whole design of Unix.\n>\n> What I understand this to mean, is properly abstracting the components\nsuch\n> that the node, wallet, and GUI can work together while being distinct\nparts.\n> In this sense, Fred, you may be interested in working on coming up with a\n> standard for a https://en.bitcoin.it/wiki/Wallet_protocol\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/cdad2324/attachment.html>"
            },
            {
                "author": "Fred Concklin",
                "date": "2011-08-23T03:26:53",
                "message_text_only": "Thanks for the warm welcome...\n\nI was specifically referring to building with autotools as a starting\npoint. Primarily autoconf to ease the installation and testing process.\n\nOn 08/22/2011 04:12 PM, Douglas Huff wrote:\n> I don't think you're actually familiar with either of those tools. A run\n> script is not much different than an init script?\nIn this regard I was referring to running bitcoin in /etc/init.d on\nDebian based systems. By init script, I was referring to making scripts\nrun at boot time.\n> Those who live in tonal caves shouldn't crap on themselves, or something.\n>\n> On Aug 22, 2011 2:49 PM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n>> On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:\n>>> On Aug 22, 2011 2:26 PM, \"Fred Concklin\" <fconcklin at trucoin.com> wrote:\n>>>> I'm also interested in work to daemonize bitcoin on boot and\n> furthering\n>>>> work to bring bitcoin into general coding and implementation paradigms\n>>>> seen on GNU/Linux platforms.\n>>> What? It already works fine in this regard using standard tools.\n> Especially\n>>> easy with daemontools/runit.\n>> He said standard *coding and implementation paradigms*. This has nothing\n> to do\n>> with integration with some non-standard \"init replacement\" that goes\n> against\n>> the whole design of Unix.\n>>\n>> What I understand this to mean, is properly abstracting the components\n> such\n>> that the node, wallet, and GUI can work together while being distinct\n> parts.\n>> In this sense, Fred, you may be interested in working on coming up with a\n>> standard for a https://en.bitcoin.it/wiki/Wallet_protocol\n\nI'll check this out.\n\nfpc\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 262 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/50958f94/attachment.sig>"
            },
            {
                "author": "Jay Weisskopf",
                "date": "2011-08-23T03:42:06",
                "message_text_only": "On Mon, Aug 22, 2011 at 10:26 PM, Fred Concklin <fconcklin at trucoin.com>wrote:\n\n> I was specifically referring to building with autotools as a starting\n> point. Primarily autoconf to ease the installation and testing process.\n\n\nSome work has already been done for autotools (not yet merged into main\nrepo). You might want to start there.\n\nhttps://github.com/bitcoin/bitcoin/pull/180\n\n- Jay\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/40cc528c/attachment.html>"
            },
            {
                "author": "Fred Concklin",
                "date": "2011-08-23T04:20:22",
                "message_text_only": "Thanks for the heads up. I'll get started there.\n\nOn 08/22/2011 11:42 PM, Jay Weisskopf wrote:\n> On Mon, Aug 22, 2011 at 10:26 PM, Fred Concklin <fconcklin at trucoin.com>wrote:\n>\n>> I was specifically referring to building with autotools as a starting\n>> point. Primarily autoconf to ease the installation and testing process.\n>\n> Some work has already been done for autotools (not yet merged into main\n> repo). You might want to start there.\n>\n> https://github.com/bitcoin/bitcoin/pull/180\n>\n> - Jay\n>\nfpc\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 262 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110823/3cd9dade/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-22T20:45:18",
                "message_text_only": "Nice to meet you.  Its always nice to have more dedicated developers.\n\nOn Mon, 2011-08-22 at 15:02 -0400, Fred Concklin wrote:\n> Hey all!\n> \n> My name is Fred Concklin and I plan on working on Bitcoin development\n> through my position at Trucoin. I thought I'd take this chance to\n> introduce myself and go over where I can make contributions.\n> \n> I'm great with automated builds and testing for GNU/Linux and BSD\n> platforms and generally plan on structuring the bitcoin project into a\n> structure compliant with GNU autotools to facilitate testing and bug\n> reporting.\nautotools yay.  Also, have you seen jenkins.bluematt.me?\n> \n> While I mainly spend my time in high level functional programming\n> languages these days, I look forward to working on bitcoin and hope\n> everybody is patient with my occasional cpp implementation ineptitudes.\nNo one has complained too much about mine yet, so I think you are safe.\n> \n> I'm excited to begin work on bitcoin.\nAnd Id bet everyone here is exited to have you.\n\nMatt"
            }
        ],
        "thread_summary": {
            "title": "Introduction",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Douglas Huff",
                "Fred Concklin",
                "Matt Corallo",
                "Jay Weisskopf"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 8366
        }
    },
    {
        "title": "[Bitcoin-development] New standard transaction types: time to schedule a blockchain split?",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2011-08-24T15:12:10",
                "message_text_only": "It seems to me the fastest path to very secure, very-hard-to-lose\nbitcoin wallets is multi-signature transactions.\n\nTo organize this discussion: first, does everybody agree?\n\nByteCoin pointed to a research paper that gives a scheme for splitting\na private key between two people, neither of which every knows the\nfull key, but, together, both can DSA-sign transactions.  That's very\ncool, but it involves high-end cutting-edge crypto like zero-knowledge\nproofs that I know very little about (are implementations available?\nare they patented?  have they been thoroughly vetted/tested?  etc).\nSo I'm assuming that is NOT the fastest way to solving the problem.\n\nIf anybody has some open-source, patent-free, thoroughly-tested code\nthat already does DSA-key-splitting, speak up please.\n\n\nI've been trying to get consensus on low-level 'standard' transactions\nfor transactions that must be signed by 2 or 3 keys; current draft\nproposal is here:\n https://gist.github.com/39158239e36f6af69d6f\nand discussion on the forums here:\n https://bitcointalk.org/index.php?topic=38928.0\n... and there is a pull request that is relevant here:\n https://github.com/bitcoin/bitcoin/pull/319\n\n\nI still think it is a good idea to enable a set of new 'standard'\nmultisignature transactions, so they get relayed and included into\nblocks.  I don't want to let \"the perfect become the enemy of the\ngood\" -- does anybody disagree?\n\nThe arguments against are that if the proposed standard transactions\nare accepted, then the next step is to define a new kind of bitcoin\naddress that lets coins be deposited into a multisignature-protected\nwallet.\n\nAnd those new as-yet-undefined bitcoin addresses will have to be 2 or\n3 times as big as current bitcoin addresses, and will be incompatible\nwith old clients.\n\nSo, if we are going to have new releases that are incompatible with\nold clients why not do things right in the first place, implement or\nenable opcodes so the new bitcoin addresses can be small, and schedule\na block chain split for N months from now.\n\nMy biggest worry is we'll say \"Sure, it'll only take a couple days to\nagree on how to do it right\" and six months from now there is still no\nconsensus on exactly which digest function should be used, or whether\nor not there should be a new opcode for arbitrary boolean expressions\ninvolving keypairs.  And people's wallets continue to get lost or\nstolen.\n\n\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-24T15:17:07",
                "message_text_only": "wow, with all the feature requests and bug fixing that needs to be done you\nwant to go off on a tangent.\n\nVision my friend, once centered on robust architecture, may then be directed\non a hard left turn.\n\nLets get a feature road map done, bug fix and testing framework set up\n\n... or fork this puppy to folks that can execute the above.\n\n-rick\n\nOn Wed, Aug 24, 2011 at 8:12 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> It seems to me the fastest path to very secure, very-hard-to-lose\n> bitcoin wallets is multi-signature transactions.\n>\n> To organize this discussion: first, does everybody agree?\n>\n> ByteCoin pointed to a research paper that gives a scheme for splitting\n> a private key between two people, neither of which every knows the\n> full key, but, together, both can DSA-sign transactions.  That's very\n> cool, but it involves high-end cutting-edge crypto like zero-knowledge\n> proofs that I know very little about (are implementations available?\n> are they patented?  have they been thoroughly vetted/tested?  etc).\n> So I'm assuming that is NOT the fastest way to solving the problem.\n>\n> If anybody has some open-source, patent-free, thoroughly-tested code\n> that already does DSA-key-splitting, speak up please.\n>\n>\n> I've been trying to get consensus on low-level 'standard' transactions\n> for transactions that must be signed by 2 or 3 keys; current draft\n> proposal is here:\n>  https://gist.github.com/39158239e36f6af69d6f\n> and discussion on the forums here:\n>  https://bitcointalk.org/index.php?topic=38928.0\n> ... and there is a pull request that is relevant here:\n>  https://github.com/bitcoin/bitcoin/pull/319\n>\n>\n> I still think it is a good idea to enable a set of new 'standard'\n> multisignature transactions, so they get relayed and included into\n> blocks.  I don't want to let \"the perfect become the enemy of the\n> good\" -- does anybody disagree?\n>\n> The arguments against are that if the proposed standard transactions\n> are accepted, then the next step is to define a new kind of bitcoin\n> address that lets coins be deposited into a multisignature-protected\n> wallet.\n>\n> And those new as-yet-undefined bitcoin addresses will have to be 2 or\n> 3 times as big as current bitcoin addresses, and will be incompatible\n> with old clients.\n>\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n>\n> My biggest worry is we'll say \"Sure, it'll only take a couple days to\n> agree on how to do it right\" and six months from now there is still no\n> consensus on exactly which digest function should be used, or whether\n> or not there should be a new opcode for arbitrary boolean expressions\n> involving keypairs.  And people's wallets continue to get lost or\n> stolen.\n>\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management\n> Up to 160% more powerful than alternatives and 25% more efficient.\n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/887027f8/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-24T15:45:09",
                "message_text_only": "On Wed, Aug 24, 2011 at 11:12 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> It seems to me the fastest path to very secure, very-hard-to-lose\n> bitcoin wallets is multi-signature transactions.\n>\n> To organize this discussion: first, does everybody agree?\n\nIt's a good tool which we should have in our tool-belt.\n\nThough it's a bit of when you are a hammer all problems are nails.\nThis issue can also be addressed by things like external private key\nprotectors.  But someone would have to build one.\n\nSomeone might be more inclined to build such a thing if the software\nhad good support for tracking public keys without private keys, and\ngenerating unsigned transactions for export to the device for signing.\n\n> ByteCoin pointed to a research paper that gives a scheme for splitting\n> a private key between two people, neither of which every knows the\n[snip]\n> So I'm assuming that is NOT the fastest way to solving the problem.\n\nRegardless, it might be useful to contact the authors.\n\n> I still think it is a good idea to enable a set of new 'standard'\n> multisignature transactions, so they get relayed and included into\n> blocks. \u00a0I don't want to let \"the perfect become the enemy of the\n> good\" -- does anybody disagree?\n\nI agree.\n\n> The arguments against are that if the proposed standard transactions\n> are accepted, then the next step is to define a new kind of bitcoin\n> address that lets coins be deposited into a multisignature-protected\n> wallet.\n>\n> And those new as-yet-undefined bitcoin addresses will have to be 2 or\n> 3 times as big as current bitcoin addresses, and will be incompatible\n> with old clients.\n>\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n\nOne way of doing this would be to have an address which hashes an\nordered concatenation of many addresses (perhaps plus a length\nargument). To redeem you provide the public keys which are signing,\nplus the addresses which aren't signing, and the receiver validates.\n\nIf it can be done, then yes, I agree it would be worth forking the chain.\n\nThis _feels_ like something which could and should be done with the\nexisting (but disabled opcodes).\n\n\nIt's not exclusive, however, with a long N-address address type for\nmultisig destinations.  We could support that _now_ and defer the\n'compressed version' until after people have experience with this\nusage.  The only cost would be supporting this address type forever,\nwhich isn't that bad.\n\nIt's also important to note that incompatibility wouldn't be complete:\nThe only limit is that old clients couldn't send funds to escrow\naddresses\u2014 which is an issue no matter how you encode the information."
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-24T15:55:41",
                "message_text_only": "On Wed, Aug 24, 2011 at 8:45 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Aug 24, 2011 at 11:12 AM, Gavin Andresen\n> <gavinandresen at gmail.com> wrote:\n> > It seems to me the fastest path to very secure, very-hard-to-lose\n> > bitcoin wallets is multi-signature transactions.\n> >\n> > To organize this discussion: first, does everybody agree?\n>\n> It's a good tool which we should have in our tool-belt.\n>\n> Though it's a bit of when you are a hammer all problems are nails.\n> This issue can also be addressed by things like external private key\n> protectors.  But someone would have to build one.\n>\n> Someone might be more inclined to build such a thing if the software\n> had good support for tracking public keys without private keys, and\n> generating unsigned transactions for export to the device for signing.\n>\n> > ByteCoin pointed to a research paper that gives a scheme for splitting\n> > a private key between two people, neither of which every knows the\n> [snip]\n> > So I'm assuming that is NOT the fastest way to solving the problem.\n>\n> Regardless, it might be useful to contact the authors.\n>\n> > I still think it is a good idea to enable a set of new 'standard'\n> > multisignature transactions, so they get relayed and included into\n> > blocks.  I don't want to let \"the perfect become the enemy of the\n> > good\" -- does anybody disagree?\n>\n> I agree.\n>\n> > The arguments against are that if the proposed standard transactions\n> > are accepted, then the next step is to define a new kind of bitcoin\n> > address that lets coins be deposited into a multisignature-protected\n> > wallet.\n> >\n> > And those new as-yet-undefined bitcoin addresses will have to be 2 or\n> > 3 times as big as current bitcoin addresses, and will be incompatible\n> > with old clients.\n> >\n> > So, if we are going to have new releases that are incompatible with\n> > old clients why not do things right in the first place, implement or\n> > enable opcodes so the new bitcoin addresses can be small, and schedule\n> > a block chain split for N months from now.\n>\n> One way of doing this would be to have an address which hashes an\n> ordered concatenation of many addresses (perhaps plus a length\n> argument). To redeem you provide the public keys which are signing,\n> plus the addresses which aren't signing, and the receiver validates.\n>\n> If it can be done, then yes, I agree it would be worth forking the chain.\n>\n> This _feels_ like something which could and should be done with the\n> existing (but disabled opcodes).\n>\n>\n> It's not exclusive, however, with a long N-address address type for\n> multisig destinations.  We could support that _now_ and defer the\n> 'compressed version' until after people have experience with this\n> usage.  The only cost would be supporting this address type forever,\n> which isn't that bad.\n>\n> It's also important to note that incompatibility wouldn't be complete:\n> The only limit is that old clients couldn't send funds to escrow\n> addresses\u2014 which is an issue no matter how you encode the information.\n>\n>\n> ------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management\n> Up to 160% more powerful than alternatives and 25% more efficient.\n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/4805602a/attachment.html>"
            },
            {
                "author": "Douglas Huff",
                "date": "2011-08-24T16:05:02",
                "message_text_only": "On Aug 24, 2011 10:12 AM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>\n> If anybody has some open-source, patent-free, thoroughly-tested code\n> that already does DSA-key-splitting, speak up please.\n>\n\nIf the caveat of a trusted third party is acceptable and, as greg mentioned,\nif there was a way to export unsigned transactions and then import/broadcast\nafter signing this becomes fairly trivial.\n\nShamir's + 3rd party to combine and sign means no protocol level changes.\n\nProcess could work something like this:\n\nParties agree to endpoint destination address and provide it to third party.\nThird party generates key and provides shares to each party in the txn and\nthe resulting address to both as well.\nThird party destroys (preferably, never stores) private key.\nSender sends to address.\nBoth parties after confirmation of reciept of goods or what have you provide\nshares back to third party who uses the privkey to xfer inputs to the\npreviously agreed upon destination subtracting their fee.\n\nThis resembles more traditional escrow setups and relies on the trust of a\nthird party, which is not ideal, but would be fairly simple to implement\nuntil the other proposals could be better investigated and implemented.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/a6faa861/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-24T16:15:34",
                "message_text_only": "On Wednesday, August 24, 2011 11:12:10 AM Gavin Andresen wrote:\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n\nIf a block chain split is to occur, it makes sense to try to fix as many \nproblems as possible:\n- Replace hard limits (like 1 MB maximum block size) with something that can\n  dynamically adapt with the times. Maybe based on difficulty so it can't be\n  gamed?\n- Adjust difficulty every block, without limits, based on a N-block sliding\n  window. I think this would solve the issue when the hashrate drops\n  overnight, but maybe also add a block time limit, or perhaps include the\n  \"current block\" in the difficulty calculation?\n- 21 million really isn't enough if Bitcoin ever takes off, even with\n  100,000,000 units per BTC. Replacing the \"Satoshi\" 64-bit integers with\n  \"Satoshi\" variable-size fractions (ie, infinite numerator + denominator)\n  would create infinite possibilities of future divison, allowing people to\n  not only do nBTC and pBTC, but also exact 1/3 of any quantity. Transaction\n  size would go up based on the number of primes involved in an amount, which \n  would encourage discarding annoying primes in transaction fees.\n- Standardize everything on network (big) endian.\n\nI'm sure others can think of other chain-splitting fixes that wouldn't be too \nmuch work to fix."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-24T16:46:42",
                "message_text_only": "On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> - Replace hard limits (like 1 MB maximum block size) with something that can\n> dynamically adapt with the times. Maybe based on difficulty so it can't be\n> gamed?\n\nToo early for that.\n\n> - Adjust difficulty every block, without limits, based on a N-block sliding\n> \u00a0window. I think this would solve the issue when the hashrate drops\n> \u00a0overnight, but maybe also add a block time limit, or perhaps include the\n> \u00a0\"current block\" in the difficulty calculation?\n\nThe quantized scheme limits the amount of difficulty skew miners can\ncreate by lying about timestamps to about a half a percent. A rolling\nwindow with the same time constant would allow much more skew.\n\n> Replacing the \"Satoshi\" 64-bit integers with\n> \"Satoshi\" variable-size fractions (ie, infinite numerator + denominator)\n\nIncreasing precision I would agree with but, sadly, causing people to\nneed more than 64 bit would create a lot of bugs.\n\ninfinite numerator + denominator is absolutely completely and totally\nbatshit insane. For one, it has weird consequences that the same value\ncan have redundant encodings.\n\nMost importantly, it suffers factor inflation: If you spend inputs\n1/977 1/983 1/991 1/997 the smallest denominator you can use for the\noutput 948892238557.\n\nNot to mention that the idiots writing financial software can only\nbarely manage to not use radix-2 floating point on everything. Asking\nthem to use arbitrary rational numbers with mixed radix will never\nfly.\n\n> - Remove the 100 confirmation requirement for spending generated coins. If\n>  they are respent before 100 confirmations, clients can/should flag the new\n>  outputs as also \"generated\" or \"recently generated\" so recipients are aware\n> of the risk.\n\nPlease lets not make bitcoin _less_ trustworthy.\n\nThe 100 block maturity on generated coins is good. The generation from\nan orphaning is lost forever like the losing side of a double spend,\nbut far far worse... because orphaning happens all the time on its own\nwithout any malice.\n\nI agree it's obnoxious that you can't pad your generation payouts\nwithout creating more transactions, but I don't see a solution for\nthat. Repeat the addresses... make up for it by increasing your payout\nthreshold."
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-24T17:03:45",
                "message_text_only": "On Wednesday, August 24, 2011 12:46:42 PM Gregory Maxwell wrote:\n> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > - Replace hard limits (like 1 MB maximum block size) with something that\n> > can dynamically adapt with the times. Maybe based on difficulty so it\n> > can't be gamed?\n> \n> Too early for that.\n\nDynamically adapting would be by design never too early/late. Changing from a \nfixed 1 MB will fork the block chain, which should be a minimized event.\n\n> > - Adjust difficulty every block, without limits, based on a N-block\n> > sliding window. I think this would solve the issue when the hashrate\n> > drops overnight, but maybe also add a block time limit, or perhaps\n> > include the \"current block\" in the difficulty calculation?\n> \n> The quantized scheme limits the amount of difficulty skew miners can\n> create by lying about timestamps to about a half a percent. A rolling\n> window with the same time constant would allow much more skew.\n\nDepends on the implementation, I'd think.\n\n> > Replacing the \"Satoshi\" 64-bit integers with\n> > \"Satoshi\" variable-size fractions (ie, infinite numerator + denominator)\n> \n> Increasing precision I would agree with but, sadly, causing people to\n> need more than 64 bit would create a lot of bugs.\n> \n> infinite numerator + denominator is absolutely completely and totally\n> batshit insane. For one, it has weird consequences that the same value\n> can have redundant encodings.\n\nSo? You can already have redundant transactions simply by changing the order \nof inputs/outputs. A good client would minimize the transaction size by \nreducing them, of course.\n\n> Most importantly, it suffers factor inflation: If you spend inputs\n> 1/977 1/983 1/991 1/997 the smallest denominator you can use for the\n> output 948892238557.\n\nI already tried to address this in my original mail. If I had those 4 coins, I \nwould use a denominator of 987 and discard the difference as fees."
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-24T17:07:33",
                "message_text_only": "On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n>\n> > - Replace hard limits (like 1 MB maximum block size) with something that\n> can\n> > dynamically adapt with the times. Maybe based on difficulty so it can't\n> be\n> > gamed?\n>\n> Too early for that.\n>\n>\nCould you provide a reference to why in your estimation it is \"to early.\"\n Simpy stating this as fact isn't enough to sway demand.\n\n> - Adjust difficulty every block, without limits, based on a N-block\n> sliding\n> >  window. I think this would solve the issue when the hashrate drops\n> >  overnight, but maybe also add a block time limit, or perhaps include the\n> >  \"current block\" in the difficulty calculation?\n>\n> The quantized scheme limits the amount of difficulty skew miners can\n> create by lying about timestamps to about a half a percent. A rolling\n> window with the same time constant would allow much more skew.\n>\n> > Replacing the \"Satoshi\" 64-bit integers with\n> > \"Satoshi\" variable-size fractions (ie, infinite numerator + denominator)\n>\n> Increasing precision I would agree with but, sadly, causing people to\n> need more than 64 bit would create a lot of bugs.\n>\n>\nhow about we agree that increasing precision is a goal and worry about how\nto encode that once its on the road map.\n\n\n\n> infinite numerator + denominator is absolutely completely and totally\n> batshit insane. For one, it has weird consequences that the same value\n> can have redundant encodings.\n>\n> Most importantly, it suffers factor inflation: If you spend inputs\n> 1/977 1/983 1/991 1/997 the smallest denominator you can use for the\n> output 948892238557.\n>\n> Not to mention that the idiots writing financial software can only\n> barely manage to not use radix-2 floating point on everything. Asking\n> them to use arbitrary rational numbers with mixed radix will never\n> fly.\n>\n> > - Remove the 100 confirmation requirement for spending generated coins.\n> If\n> >  they are respent before 100 confirmations, clients can/should flag the\n> new\n> >  outputs as also \"generated\" or \"recently generated\" so recipients are\n> aware\n> > of the risk.\n>\n> Please lets not make bitcoin _less_ trustworthy.\n>\n> The 100 block maturity on generated coins is good. The generation from\n> an orphaning is lost forever like the losing side of a double spend,\n> but far far worse... because orphaning happens all the time on its own\n> without any malice.\n>\n> I agree it's obnoxious that you can't pad your generation payouts\n> without creating more transactions, but I don't see a solution for\n> that. Repeat the addresses... make up for it by increasing your payout\n> threshold.\n>\n>\n> ------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management\n> Up to 160% more powerful than alternatives and 25% more efficient.\n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/995254b5/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-24T17:19:52",
                "message_text_only": "On Wed, Aug 24, 2011 at 1:07 PM, Rick Wesson\n<rick at support-intelligence.com> wrote:\n> On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n>>\n>> > - Replace hard limits (like 1 MB maximum block size) with something that\n>> > can\n>> > dynamically adapt with the times. Maybe based on difficulty so it can't\n>> > be\n>> > gamed?\n>> Too early for that.\n> Could you provide a\u00a0reference\u00a0to why in your estimation it is \"to early.\"\n> \u00a0Simpy stating this as fact isn't enough to sway demand.\n\nCan you provide a reference to this 'demand' a post by Luke isn't\nenough to support the claim of demand.\n\nWe're not at maximum size right now (thankfully).\n\nWe don't know what the network dynamics would look like at that\ntraffic level. So how could we competently say what the right metrics\nwould be to get the right behavior there?  Thats what I meant by too\nearly."
            },
            {
                "author": "Rick Wesson",
                "date": "2011-08-24T17:40:49",
                "message_text_only": "On Wed, Aug 24, 2011 at 10:19 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Wed, Aug 24, 2011 at 1:07 PM, Rick Wesson\n> <rick at support-intelligence.com> wrote:\n> > On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> >> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n> >>\n> >> > - Replace hard limits (like 1 MB maximum block size) with something\n> that\n> >> > can\n> >> > dynamically adapt with the times. Maybe based on difficulty so it\n> can't\n> >> > be\n> >> > gamed?\n> >> Too early for that.\n> > Could you provide a reference to why in your estimation it is \"to early.\"\n> >  Simpy stating this as fact isn't enough to sway demand.\n>\n> Can you provide a reference to this 'demand' a post by Luke isn't\n> enough to support the claim of demand.\n>\n> how about trend, its a hard limit and as you acknowledged below we are not\nthere yet; however the trend is for more transactions and we will bump into\nthe limit. Being good architects we should consider how to scale or\nexplicitly state why its a good idea not to.\n\n-rick\n\n\n\n> We're not at maximum size right now (thankfully).\n>\n> We don't know what the network dynamics would look like at that\n> traffic level. So how could we competently say what the right metrics\n> would be to get the right behavior there?  Thats what I meant by too\n> early.\n>\n\nno one ever \"knows\" what the network dynamics are going to be in developing\ninfrastructure -- so lets not kid our selves, in being able to estimate this\nbefore the code is even written.\n\n-rick\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/7ffd3502/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-24T17:57:11",
                "message_text_only": "This discussion is convincing me that scheduling a blockchain split is\ndefinitely the wrong idea at this time.  We can revisit in N months,\nwhen we've got a roadmap and nice unit tests and a bunch of\nwell-tested patches for fixing all of the things that aught to be\nfixed when we DO decide a blockchain split is necessary.\n\nThere seems to be rough consensus that new, imperfect standard\ntransactions are a good-enough short term solution.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Jeff Garzik",
                "date": "2011-08-24T18:45:58",
                "message_text_only": "On Wed, Aug 24, 2011 at 1:57 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> This discussion is convincing me that scheduling a blockchain split is\n> definitely the wrong idea at this time. \u00a0We can revisit in N months,\n\nStrongly agreed...\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Michael Gr\u00f8nager",
                "date": "2011-08-25T07:39:12",
                "message_text_only": "Hi Gavin (the list escaped the cc...),\n\nI participated also in the hacakathon Sunday @ OnlyOneTV and I felt that this had a strong chance to diverge. So - yes - I agree - no \"constitution\" changes now. Further, I have thought later on on the analogy of a clerk and a safe.\n\nWHen you enter the bank you hand over your money to the clerk (one key) - then after the clerks wallet has been filled over the day _he_ transfers the money to the safe (3 keys). My point is do we really need the customer to bypass the clerk and have 3 key addresses, or could we just leave it to the/a client to implement the multisign transaction after the money has been received - as a transfer to a safe? This would greatly simplify the problem and cover the vast majority of use cases. Not covered in this is huge single transfers where the intruder of a single key system finds it profitable to reveal their intrusion by grabbing the entire wallet.\n\nPut in another way - do we *really* need to couple the securing of the wallet to creating a new address type ?\n\nCheers,\n\nM\n\nOn 24/08/2011, at 19:57, Gavin Andresen wrote:\n\n> This discussion is convincing me that scheduling a blockchain split is\n> definitely the wrong idea at this time.  We can revisit in N months,\n> when we've got a roadmap and nice unit tests and a bunch of\n> well-tested patches for fixing all of the things that aught to be\n> fixed when we DO decide a blockchain split is necessary.\n> \n> There seems to be rough consensus that new, imperfect standard\n> transactions are a good-enough short term solution.\n> \n> -- \n> --\n> Gavin Andresen\n> \n> ------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management \n> Up to 160% more powerful than alternatives and 25% more efficient. \n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com"
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-25T17:18:24",
                "message_text_only": "On Thu, Aug 25, 2011 at 3:39 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> Put in another way - do we *really* need to couple the securing of the wallet to creating a new address type ?\n\nNope.\n\nI should have been more clear in my initial email and in the\nproposal-- I am not proposing anything more than just agreeing on the\nvery lowest-level infrastructure, so there is a solid foundation upon\nwhich we can build a couple of key very-high-priority features.\n\nI wanted to talk about it now so there is rough consensus on what to\nput on the road map, and to get as many smart brains looking at the\nproposal and making it as good as possible.  Current proposal is at:\n  https://gist.github.com/39158239e36f6af69d6f\n\nI have two issues with it:\n\n1) groffer reports that there's a bug in CHECKMULTISIG (pops too many\narguments off the stack), so perhaps we should avoid using it at all.\nFixing the bug would change its behavior, and is not an option because\nthat would cause a blockchain split. We absolutely need unit tests and\nbetter documentation for how CHECKMULTISIG behaves (perhaps it is\nworking as intended, and Satoshi just messed up the description of\nwhat it does in the comment).\n\n2) How often will the 1-of-3 and 3-of-3 cases be used? I included them\njust for completeness, but perhaps they should be dropped for now so\nthere is less code to write and test.  I just don't imagine there are\nmany cases where you have exactly three parties and 1-of-3 or 3-of-3\nare required to spend.\n\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-26T10:50:00",
                "message_text_only": "> 1) groffer reports that there's a bug in CHECKMULTISIG (pops too many\n> arguments off the stack), so perhaps we should avoid using it at all.\n\nWhat is the bug, exactly? Perhaps it can be worked around."
            },
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-27T01:36:19",
                "message_text_only": "\"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n\n> I wanted to talk about it now so there is rough consensus on what to\n> put on the road map, and to get as many smart brains looking at the\n> proposal and making it as good as possible.  Current proposal is at:\n>   https://gist.github.com/39158239e36f6af69d6f\n>\n> I have two issues with it:\n>\n> 1) groffer reports that there's a bug in CHECKMULTISIG (pops too many\n> arguments off the stack), so perhaps we should avoid using it at all.\n> Fixing the bug would change its behavior, and is not an option because\n> that would cause a blockchain split. We absolutely need unit tests and\n> better documentation for how CHECKMULTISIG behaves (perhaps it is\n> working as intended, and Satoshi just messed up the description of\n> what it does in the comment).\n>\n> 2) How often will the 1-of-3 and 3-of-3 cases be used? I included them\n> just for completeness, but perhaps they should be dropped for now so\n> there is less code to write and test.  I just don't imagine there are\n> many cases where you have exactly three parties and 1-of-3 or 3-of-3\n> are required to spend.\n\n\nHere are some additional use cases:\n\n* Long term lock funds, requiring signatures from 2 officers of a company\nto disburse (2 of n for n between 3 and 20)\n\n* Short term lock funds, with 2-factor auth to disburse and an additional\n2 of n backup in case one of the factors is lost (2-of-2 OR 2-of-n)\n\n* \"Escrow\" with the the two parties having to agree or one of two backup\nobservers helping in case of disagreement (2-of-2 OR 2-of-3 OR 2-of-3)\n\n* An options contract where the outcome is triggered by a key being\nbroadcast: (Ks AND K1) OR (Kr AND K2) - s gets control of funds if K1 is\nbroadcast, r gets control if K2 is broadcast."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-25T18:31:49",
                "message_text_only": "On Thu, Aug 25, 2011 at 3:39 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\nthe customer to bypass the clerk and have 3 key addresses, or could we\njust leave it to the/a client to implement the multisign transaction\nafter the money has been received - as a transfer to a safe? This\nwould greatly simplify the problem and cover the vast majority of use\ncases. Not covered in this is huge single transfers where the intruder\nof a single key system finds it profitable to reveal their intrusion\nby grabbing the entire wallet.\n\nObviously these things don't need to be hard coupled, since they're\nuseful independently.   But I don't agree with the premise that being\nable to pay directly into an escrow using an address isn't essential\nat least as an eventual feature.\n\nThe bank analogy falls down because in our threat model people are\nreplacing the bank teller with a convincing facsimile (malware turning\nyour computer against you).  Funds can be stolen in a microsecond, so\nany exposure isn't good.\n\nAgain, I'm not arguing to delay anything\u2014 just pointing out that the\nability to have usable addresses (they can be long) that encode a\ncouple escrow destination.\n\nPerhaps just an address type that can encode any payment script?  User\nprovides the inputs, sets the outputs plus and additional outputs, and\nsigns. Client refuses to pay to an address if the resulting\ntransaction fails IsStandard.\n\nOn Thu, Aug 25, 2011 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> 2) How often will the 1-of-3 and 3-of-3 cases be used? I included them\n> just for completeness, but perhaps they should be dropped for now so\n> there is less code to write and test.  I just don't imagine there are\n> many cases where you have exactly three parties and 1-of-3 or 3-of-3\n> are required to spend.\n\n3-of-3 in particular seems somewhat important to me (group trust\naccounts).  I'd really rather not drop use cases unless we're not\nconfident that they can't be tested sufficiently simply because it'll\njust mean another cycle of testing later someday to test them and,\nhonestly, a more uphill argument as the usecases get narrower and\nnarrower.\n\nI'll spend some cycles testing whatever cases make it in."
            },
            {
                "author": "theymos",
                "date": "2011-08-24T17:03:12",
                "message_text_only": "On Wed, 24 Aug 2011 11:12 -0400, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> To organize this discussion: first, does everybody agree?\n\nYes. The feature will be very good.\n\n> I still think it is a good idea to enable a set of new 'standard'\n> multisignature transactions, so they get relayed and included into\n> blocks.  I don't want to let \"the perfect become the enemy of the\n> good\" -- does anybody disagree?\n\nPlease do enable any transactions that seem to be a possible solution.\nEven if this client doesn't ever implement any of them, alternative\nclients can try them.\n\n> My biggest worry is we'll say \"Sure, it'll only take a couple days to\n> agree on how to do it right\" and six months from now there is still\n> no consensus on exactly which digest function should be used, or\n> whether or not there should be a new opcode for arbitrary boolean\n> expressions involving keypairs.  And people's wallets continue to get\n> lost or stolen.\n\nI agree that something should be done with what we have now. It *will*\ntake months to properly figure out how to add chain-forking features for\nthis. If we want to consider all of the unrelated feature proposals, it\nmight take years of discussion...\n\nHowever, as I said in the forum thread, I think it would be better for\npeople using this protection to receive at a normal address and then\ncreate new transactions at their end. Then no one has to handle huge\naddresses, and the sender will never have to pay abnormal fees or deal\nwith incompatibilities. There will be a short period of time when the\nrecipient's money is unprotected, but I think this is worth it. A better\nscheme can be made later after chain-forking features are figured out."
            },
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-24T17:47:55",
                "message_text_only": "\"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n\n> It seems to me the fastest path to very secure, very-hard-to-lose\n> bitcoin wallets is multi-signature transactions.\n>\n> To organize this discussion: first, does everybody agree?\n\nI agree.  For example, a corporate wallet can require threshold signatures\nto disburse.  Or for personal use you can have a couple of additional\nkeys, one stored on a secure device for confirmation and one offline as\nemergency backup if you lose your secure device.\n\n...\n\n> I've been trying to get consensus on low-level 'standard' transactions\n> for transactions that must be signed by 2 or 3 keys; current draft\n> proposal is here:\n>  https://gist.github.com/39158239e36f6af69d6f\n> and discussion on the forums here:\n>  https://bitcointalk.org/index.php?topic=38928.0\n> ... and there is a pull request that is relevant here:\n>  https://github.com/bitcoin/bitcoin/pull/319\n\nFor context - I am the author of the latter.\n\n> I still think it is a good idea to enable a set of new 'standard'\n> multisignature transactions, so they get relayed and included into\n> blocks.  I don't want to let \"the perfect become the enemy of the\n> good\" -- does anybody disagree?\n>\n> The arguments against are that if the proposed standard transactions\n> are accepted, then the next step is to define a new kind of bitcoin\n> address that lets coins be deposited into a multisignature-protected\n> wallet.\n>\n> And those new as-yet-undefined bitcoin addresses will have to be 2 or\n> 3 times as big as current bitcoin addresses, and will be incompatible\n> with old clients.\n\nIncompatible at the UI level, but not at the block chain level.  Changing\nthe block chain rules will be quite an undertaking.  You will have to set\na block number for the rule change a few months in advance and will have\nto get agreement from the pools.  I think it is important to increase\ntrust in the bitcoin ecosystem sooner than that.  The current flat\nexchange rate and difficulty may be a signal that people are getting risk\naverse.\n\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n>\n> My biggest worry is we'll say \"Sure, it'll only take a couple days to\n> agree on how to do it right\" and six months from now there is still no\n> consensus on exactly which digest function should be used, or whether\n> or not there should be a new opcode for arbitrary boolean expressions\n> involving keypairs.  And people's wallets continue to get lost or\n> stolen.\n\nThat is my worry too.  We already have working code for this (pull 319),\nand the addresses are not so long as to be unusable.  I hope we can move\nforward on the existing code and in parallel move forward on block chain\nrule proposals at an agreed upon block number.\n\n--\nBobby Groff"
            },
            {
                "author": "Christian Decker",
                "date": "2011-08-24T19:05:42",
                "message_text_only": "Sorry for keeping this short but I'm in holiday and reading/writing on my\nphone is a pain.\n\nOn Aug 24, 2011 4:12 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>\n> It seems to me the fastest path to very secure, very-hard-to-lose\n> bitcoin wallets is multi-signature transactions.\n>\n> To organize this discussion: first, does everybody agree?\nIt's a great way for companies to secure their assets.\n\n>\n> ByteCoin pointed to a research paper that gives a scheme for splitting\n> a private key between two people, neither of which every knows the\n> full key, but, together, both can DSA-sign transactions.  That's very\n> cool, but it involves high-end cutting-edge crypto like zero-knowledge\n> proofs that I know very little about (are implementations available?\n> are they patented?  have they been thoroughly vetted/tested?  etc).\n> So I'm assuming that is NOT the fastest way to solving the problem.\n>\n> If anybody has some open-source, patent-free, thoroughly-tested code\n> that already does DSA-key-splitting, speak up please.\nSince. we have the possibility o add other signature schemes to the protocol\nwe could add an rsa-like scheme which allows m-out-of-n signatures. It works\nby distributing shares of the key which are points on a curve having the\nactual key as 0-value. It does not require special length for the key so if\necdsa allows something similar there need not be anything changed.\n>\n> I've been trying to get consensus on low-level 'standard' transactions\n> for transactions that must be signed by 2 or 3 keys; current draft\n> proposal is here:\n>  https://gist.github.com/39158239e36f6af69d6f\n> and discussion on the forums here:\n>  https://bitcointalk.org/index.php?topic=38928.0\n> ... and there is a pull request that is relevant here:\n>  https://github.com/bitcoin/bitcoin/pull/319\n>\n>\n> I still think it is a good idea to enable a set of new 'standard'\n> multisignature transactions, so they get relayed and included into\n> blocks.  I don't want to let \"the perfect become the enemy of the\n> good\" -- does anybody disagree?\n\nWould be a first step.\n>\n> The arguments against are that if the proposed standard transactions\n> are accepted, then the next step is to define a new kind of bitcoin\n> address that lets coins be deposited into a multisignature-protected\n> wallet.\n>\n> And those new as-yet-undefined bitcoin addresses will have to be 2 or\n> 3 times as big as current bitcoin addresses, and will be incompatible\n> with old clients.\n>\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n>\n> My biggest worry is we'll say \"Sure, it'll only take a couple days to\n> agree on how to do it right\" and six months from now there is still no\n> consensus on exactly which digest function should be used, or whether\n> or not there should be a new opcode for arbitrary boolean expressions\n> involving keypairs.  And people's wallets continue to get lost or\n> stolen.\n>\n>\n\nJust wanted to point you in that alternative direction as it would possibly\nkeep backward compatibility and allow multisignature.\n\nRegards,\nChris\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management\n> Up to 160% more powerful than alternatives and 25% more efficient.\n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/e6a07cf3/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-24T20:29:06",
                "message_text_only": "On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> we could add an rsa-like scheme which allows m-out-of-n signatures. It works\n> by distributing shares of the key which are points on a curve having the\n> actual key as 0-value. It does not require special length for the key so if\n> ecdsa allows something similar there need not be anything changed.\n\nThis works fine for ECC.  But it requires that the composite key\nsigner has simultaneous access to all the key-parts, so it doesn't\nsolve the \"my PC has malware\" problem."
            },
            {
                "author": "Douglas Huff",
                "date": "2011-08-24T22:27:42",
                "message_text_only": "On Aug 24, 2011 3:29 PM, \"Gregory Maxwell\" <gmaxwell at gmail.com> wrote:\n>\n> On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n> > we could add an rsa-like scheme which allows m-out-of-n signatures. It\nworks\n> > by distributing shares of the key which are points on a curve having the\n> > actual key as 0-value. It does not require special length for the key so\nif\n> > ecdsa allows something similar there need not be anything changed.\n>\n> This works fine for ECC.  But it requires that the composite key\n> signer has simultaneous access to all the key-parts, so it doesn't\n> solve the \"my PC has malware\" problem.\n\nI don't think anything simple enough to actually be used by people in\ngeneral does. Same concept as what I proposed earlier before nanotube gave\nme the context for Gavin's intent on irc.\n\nNow that I'm understanding the use case I really think the best way to go\nabout this initially is like you said earlier.\n\nProvide methods to export/import unsigned txns, provide methods to run the\nGUI in a way that can track your own addresses with only pubkeys available\nto the client, provide methods to sign and import/export/broadcast signed\ntxns.\n\nWith these tools offline wallets become feasible. Combined with wallet\ncrypto I think this is really the best that can be done to protect users\nfrom themselves in a way that isn't too complicated for them to actually\nuse.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/b20c936f/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2011-08-25T21:30:56",
                "message_text_only": "If I remember the details correctly you could combine (lagrange\ninterpolation) the results of m smaller encryptions/signatures without ever\nsharing the secret key share itself. No idea if that is possible with ecdsa\nat all, but it sure would solve quite a few problems, as it would allow\nseveral independent servers to share a secret key, sign transactions with\nit, but no m-1 compromised machines would endanger the whole balance.\nI will definitely look into it when I'm back from holidays.\n\nCheers,\nCdecker\nOn Aug 24, 2011 9:29 PM, \"Gregory Maxwell\" <gmaxwell at gmail.com> wrote:\n> On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n>> we could add an rsa-like scheme which allows m-out-of-n signatures. It\nworks\n>> by distributing shares of the key which are points on a curve having the\n>> actual key as 0-value. It does not require special length for the key so\nif\n>> ecdsa allows something similar there need not be anything changed.\n>\n> This works fine for ECC. But it requires that the composite key\n> signer has simultaneous access to all the key-parts, so it doesn't\n> solve the \"my PC has malware\" problem.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110825/1c075b51/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-26T11:42:29",
                "message_text_only": "> It seems to me the fastest path to very secure, very-hard-to-lose\n> bitcoin wallets is multi-signature transactions.\n\nAgreed.\n\nThat said I'm not sure it makes sense for payers to care about the\ndetails of how somebody is protecting their wallets (which is what new\naddress types means). It's possible for a users software to notice\ninbound payments to a regular Bitcoin address and then immediately\nrespend them to multi-signed outputs. This way key management can be\nsimpler as you don't need to integrate it with your shopping cart\nsoftware or anything like that - you can just do the usual thing of\npre-generating a few hundred thousand addresses, fill up your cart\nimplementation and go. When a payment is received, your wallet\nsoftware can keep an eye on how much unlocked balance it has and start\nlocking value once it goes over a pre-set amount, or use any other\npolicy the user might have.\n\nThis fits with my belief that we'll eventually move away from senders\nattaching tx fees, instead receivers will respend the fee-less\ntransaction adding whatever fee they believe is appropriate (eg, maybe\nit's very low in the case of a buyer with good reputation, or higher\nfor unknown buyers). It doesn't make a whole lot of sense for buyers\nto have to attach more fees just because the merchant is using complex\nwallet policies.\n\nWhitelisting the basic CHECKMULTISIG form (assuming it can be made to\nwork) seems uncontroversial, why not do it today? The forms designed\nto make fancier addresses be embeddable inside QRcodes, can come later\nif people feel it's necessary. I'm still not convinced it is.\n\nOnce malware can't just email wallets to the attacker, or steal the\nkeys when the user decrypts due to a second factor, the next easiest\nattack is to that malware can rewrite addresses on-screen as it sees\nfit, forwarding small payments so the user doesn't notice then\nstealing a big one. To solve that, Bitcoin addresses need to contain\nnot only a pubkey[hash] but some kind of endpoint the second factor\ncan use to verify ownership of the key. It can be discussed later, I\ndon't think there are many possible designs here so it shouldn't be\ntoo controversial."
            },
            {
                "author": "Gavin Andresen",
                "date": "2011-08-26T19:44:59",
                "message_text_only": "> Whitelisting the basic CHECKMULTISIG form (assuming it can be made to\n> work) seems uncontroversial, why not do it today?\n\nThat seems like the right way forward.\n\nI just wrote a unit test and stepped through the CHECKMULTISIG code to\nsee exactly what the bug is, and the offending line is:\n   797\t                    int isig = ++i;\n   798\t                    i += nSigsCount;\n\nIt should be just   int isig = i;\n\nThe result is CHECKMULTISIG expects one extra item on the stack, so\nthe workaround would be a standard transaction type of the form:\n\nscriptSig: OP_0 sig1...m\nscriptPubKey: m pubkey1...n  n OP_CHECKMULTISIG\n\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "bgroff at lavabit.com",
                "date": "2011-08-27T01:15:26",
                "message_text_only": ">> Whitelisting the basic CHECKMULTISIG form (assuming it can be made to\n>> work) seems uncontroversial, why not do it today?\n>\n> That seems like the right way forward.\n>\n> I just wrote a unit test and stepped through the CHECKMULTISIG code to\n> see exactly what the bug is, and the offending line is:\n>    797\t                    int isig = ++i;\n>    798\t                    i += nSigsCount;\n>\n> It should be just   int isig = i;\n>\n> The result is CHECKMULTISIG expects one extra item on the stack, so\n> the workaround would be a standard transaction type of the form:\n>\n> scriptSig: OP_0 sig1...m\n> scriptPubKey: m pubkey1...n  n OP_CHECKMULTISIG\n\nRight, that is the workaround in pull 319.\n\nThere is another disadvantage to CHECKMULTISIG - you currently can only\nhave 1000 of these in a block.  This is because a CHECKMULTISIG is counted\nas 20 sigop operations in GetSigOpCount, and you can have a maximum of\n20000 sigops in a block (MAX_BLOCK_SIGOPS).  This is in CheckBlock so\nwon't change anytime soon.\n\nIf you want to use HASH160 based addresses, CHECKMULTISIG looks even less\nattractive.  The shortest script with CHECKSIG is something like:\n\n0\nOVER 2SWAP CHECKSIG SWAP HASH160 {} EQUAL BOOLAND ADD // n times\nm GREATERTHANOREQUAL\n\n( thanks to coblee\nhttps://gist.github.com/39158239e36f6af69d6f#gistcomment-47017 )\n\nI think this is actually as short as the shortest you can do with\nCHECKMULTISIG.\n\nAnother issue that came up during pull 319 discussion is whether to\nsupport more general cases or more specific cases.  For example, should we\noptimize for the 1-of-2, 2-of-2 and 2-of-3 cases or should we just have\none script template for all m-of-n? I would propose focusing on a more\ngeneral case for the following reasons:\n\n* It is easier to validate one general algorithm than an expanding set of\nspecial-purpose functions.  For example, I think the most people on this\nlist can validate the coblee script above for all n and m, but faced with\na bunch of special purpose scripts they might miss a bug.\n\n* We don't have to expose the most general cases to the API, but it would\nbe nice if we didn't have to keep changing IsStandard as people find use\ncases for 2-of-4, etc.  With IsStandard remaining narrow, innovation with\nnew scripts is stifled because most client won't mine or relay\nnon-standard transactions.\n\n* It would be less work for third-party software to track this\n(blockexplorer, android wallet).\n\n--\nBobby Groff"
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-24T16:18:54",
                "message_text_only": "On Wed, Aug 24, 2011 at 11:12:10AM -0400, Gavin Andresen wrote:\n> So, if we are going to have new releases that are incompatible with\n> old clients why not do things right in the first place, implement or\n> enable opcodes so the new bitcoin addresses can be small, and schedule\n> a block chain split for N months from now.\n\nWhat was the reason for disabling these opcodes in the first place? I can\nunderstand wanting to prevent excessive signature-verification, or limitation\nof arithmetic to a limited amount of bits, but completely disabling all\narithmetic beyond addition and subtraction, and all bitwise operations seems\nvery limiting to me. Thus, if we agree to do a future incompatible update,\ni would vote to re-enable these, and maybe allow arithmetic up to 520 or\n1024 bits numbers.\n\nWhile we're at it, some additional opcodes could be useful. Either a custom\noperator to do boolean evaluation, or a few more lowlevel operations. Given\nthe presence of bitwise operators, you could have scripts that process a\nsequence of pubkey/signature pairs, build up a number in which each bit\ncorresponds to a valid signature, and then do some bitwise checks on this\nnumber. I'd argue that a \"count number of bits set in number\" opcode would\nbe very useful for this.\n\nIn short: I'm in favor of re-enabling opcodes, and possibly adding an\nOP_BITCOUNT operation.\n\n-- \nPieter"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-24T16:26:20",
                "message_text_only": "On Wednesday, August 24, 2011 12:18:54 PM Pieter Wuille wrote:\n> While we're at it, some additional opcodes could be useful.\n\nAlso:\n- Access to the block height it's part of. While this can be abused,\n  transactions accessing it can be given a big red flag in the GUI or\n  something. Legitimate uses include \"Clearcoin\" functionality in the script\n  itself.\n- Remove the 100 confirmation requirement for spending generated coins. If\n  they are respent before 100 confirmations, clients can/should flag the new\n  outputs as also \"generated\" or \"recently generated\" so recipients are aware\n  of the risk. It would be especially handy for pool operators if blocks could\n  contain a transaction spending one of the same block's generation in\n  addition to other non-generated coins, and specifying the full amount as a\n  fee to safely add coins to the generation. Right now, if I were to embed a\n  25 BTC fee-only transaction, there is a risk that Deepbit could grab that\n  transaction for their own, and fork. By making pool payouts all generated,\n  there is no risk to paying invalid blocks instantly (since if the block is\n  invalid, so is the payout made in it)."
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-25T20:14:54",
                "message_text_only": "On Thu, Aug 25, 2011 at 02:31:49PM -0400, Gregory Maxwell wrote:\n> Perhaps just an address type that can encode any payment script?  User\n> provides the inputs, sets the outputs plus and additional outputs, and\n> signs. Client refuses to pay to an address if the resulting\n> transaction fails IsStandard.\n\nOn the github pull request I posted a general scheme that can convert arbitrary\nexpressions over signature-checks (given in RPL notation) to bitcoin scripts.\nMaybe we can define an address type that encodes an expression in RPL form (which\nshould be more compact and more easily parseable)?\n\nThat basically just means the usual bitcoin scripts, with two extra pseudo-\ninstructions: one that represents an address check, one that represents an\npubkey check.\n\nFor example (same example as on the pull req), the expression\na1 OR (a2 AND a3) OR COUNT(a4,a5,a6)>1 (with a1-a6 given addresses)\ncan be given in RPL form as\n\n  ADDR<a1> ADDR<a2> ADDR<a3> BOOLAND BOOLOR ADDR<a4> ADDR<a5>\n  ADD ADDR<a6> ADD 1 GREATERTHAN BOOLOR\n\nWhich is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the\nreal bitcoin output script.\n\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2011-08-26T11:09:37",
                "message_text_only": "> On the github pull request I posted a general scheme that can convert arbitrary\n> expressions over signature-checks (given in RPL notation) to bitcoin scripts.\n> Maybe we can define an address type that encodes an expression in RPL form (which\n> should be more compact and more easily parseable)?\n\nWhat are the use cases for this?\n\n>From a mobile apps perspective, it doesn't make much sense to have\narbitrary scripts in a user-facing address. The software has to be\nable to present some kind of reasonable user interface given an\naddress, it has to explain what is going to happen to the users money\nand so on. From this perspective, doing pattern matching against some\nencoded script template is annoying and inefficient. It'd be better to\njust define another type of URI for each kind of transaction you wish\nto support. This is doubly true because often to do the more\ninteresting contracts, you need out of band protocols, so the\n\"address\" would probably specify some information that's not in the\nfinal output script, like a rendezvous point."
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-26T21:30:11",
                "message_text_only": "On Fri, Aug 26, 2011 at 01:09:37PM +0200, Mike Hearn wrote:\n> > On the github pull request I posted a general scheme that can convert arbitrary\n> > expressions over signature-checks (given in RPL notation) to bitcoin scripts.\n> > Maybe we can define an address type that encodes an expression in RPL form (which\n> > should be more compact and more easily parseable)?\n> \n> What are the use cases for this?\n> \n> From a mobile apps perspective, it doesn't make much sense to have\n> arbitrary scripts in a user-facing address. The software has to be\n> able to present some kind of reasonable user interface given an\n> address, it has to explain what is going to happen to the users money\n> and so on. From this perspective, doing pattern matching against some\n> encoded script template is annoying and inefficient. It'd be better to\n> just define another type of URI for each kind of transaction you wish\n> to support. This is doubly true because often to do the more\n> interesting contracts, you need out of band protocols, so the\n> \"address\" would probably specify some information that's not in the\n> final output script, like a rendezvous point.\n\nYou're quite right - currently addresses encode a particular output script,\nand the client pattern matches to know how to deal with the incoming funds.\nIt's far from sure this will remain the case in the future. Maybe we'll have\nan out of band protocol over which a request \"i want to pay you for item X\"\nis sent, with the required transaction output as answer.\n\nA generic way for encoding complex transaction scripts in a compact form may\nbe useful for \"manual\" playing with them - but I agree that we should\nprobably wait for a use case for this.\n\nIndependent from the question of complex-script-addresses are useful, I do\nthink it is useful (and possible, see pull req) to allow a class of scripts\nthat represent boolean expressions over signature checks to pass the\nIsStandard() test - that way we make sure that whenever in the future we\nwant to support creating such an expression, there will at least be a to\nencode it in a way that the network will accept it. The only question is\nwhat possible problems there are with accepting them.\n\n-- \nPieter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2011-08-25T20:29:03",
                "message_text_only": "On Thu, Aug 25, 2011 at 4:10 PM, Pieter Wuille\n<pieter.wuille at cs.kuleuven.be> wrote:\n> Which is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the\n> real bitcoin output script.\n\nSo 187 bytes in base-58? I think pretty darn good for a destination\nwith 6 keys and complicated rules. I like that a lot."
            },
            {
                "author": "Pieter Wuille",
                "date": "2011-08-25T21:06:44",
                "message_text_only": "On Thu, Aug 25, 2011 at 04:29:03PM -0400, Gregory Maxwell wrote:\n> On Thu, Aug 25, 2011 at 4:10 PM, Pieter Wuille\n> <pieter.wuille at cs.kuleuven.be> wrote:\n> > Which is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the\n> > real bitcoin output script.\n> \n> So 187 bytes in base-58? I think pretty darn good for a destination\n> with 6 keys and complicated rules. I like that a lot.\n\nSome extra estimates:\n* single address: 21 bytes (36 characters), 27 bytes script\n* 1-out-of-2: 43 bytes (66 characters), 56 bytes script\n* 2-out-of-3: 67 bytes (98 characters), 88 bytes script \n* (a and b) or c: 65 bytes (96 characters), 85 bytes script\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "New standard transaction types: time to schedule a blockchain split?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Rick Wesson",
                "Luke-Jr",
                "bgroff at lavabit.com",
                "Douglas Huff",
                "Mike Hearn",
                "theymos",
                "Gregory Maxwell",
                "Michael Gr\u00f8nager",
                "Gavin Andresen",
                "Pieter Wuille",
                "Christian Decker"
            ],
            "messages_count": 34,
            "total_messages_chars_count": 59919
        }
    },
    {
        "title": "[Bitcoin-development] BitCoin and MinorFs/AppArmor",
        "thread_messages": [
            {
                "author": "Rob Meijer",
                "date": "2011-08-26T07:48:28",
                "message_text_only": "A few years ago I wrote a least authority based set of filesystems named\nMinorFs that worked closely together with AppArmor (suse/ubuntu) to give '\npseudo persistent processes' their own private but decomposable and\ndelegatable piece of filesystem storage:\n\nhttp://www.linuxjournal.com/magazine/minorfs\nhttp://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/\n\nCurrently there is only one perfect fit for MinorFs and that's the stack\nAppArmor/MinorFs/E-language-persistent-application. There are some close\nfits like running ssh without a passphrase (\nhttp://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )\nbut these require lots of manual fiddling by the user to get working. The\nssh trick would probably work with bitcoin, but as you can see from the\nlink above, it would be rather cumbersome.\n\nI am trying to get specs together for rewriting MinorFs (in Python) in a\nway that would make it easy and natural for application developers that\nwant their application to be able to protect user data (like bitcoin\nwallets) from mallware running under the same uid as that user.\n\nCurrently minorfs granularity is hard fixed to that of the 'pseudo\npersistent process', and that granularity is determined as described in\nthe following link:\n\nhttp://minorfs.polacanthus.net/wiki/Pseudo_persistent_process\n\nWhen using pseudo persistent processes, you basically end up with\nfile-system storage that follows almost all of the modeling principles of\nthe object capability model. This is great when designing a least\nauthority program from scratch and writing it in the (object capability)\ne-language using its persistence facilities.\n\nGiven however that I don't expect bitcoin, openssh, chrome, firefox, or\nany other application that would benefit from what MinorFs provides to be\nrewritten in E, it seems like the next version of MinorFs should give up\non the purity of its least authority model, and take an approach that\nbetter suits common development languages and practices.\n\nWith bitcoin being a project that could benefit most from what MinorFs has\nto offer, I would like to ask bitcoin developers to think about what\nattributes from the current granularity level (pseudo persistent process)\nshould be kept, what attributes should be dropped, and what properties\nshould be added to arrive at an 'id' that is the best fit for granularity\nof persistent private storage for bitcoin.\n\nI really want to accommodate bitcoin developer needs in this, so all input\nthat helps me help you guys to get the next MinorFs version to accommodate\nyour needs to a level that code to use MinorFs where available can be\nadded to bitcoin, would be extremely welcome.\n\nLet me know what you think,\n\nRob"
            }
        ],
        "thread_summary": {
            "title": "BitCoin and MinorFs/AppArmor",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rob Meijer"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2718
        }
    },
    {
        "title": "[Bitcoin-development] Project status",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2011-08-29T20:10:01",
                "message_text_only": "Quick brain dump on a bunch of stuff:\n\nI'd like to get a 0.4 release out, but am still working on a fix for\nthe deadlock bugs that the new wallet encryption and/or the CWallet\nrefactoring caused. My short-term plan is to reduce the number of\nlocks and make sure they're always acquired in a consistent order.\nLonger term, I think reworking the design to be based on\nboost::asio and use fewer threads is probably the right thing to do.\n\nOther things on the 0.4 TODO list:  block chain checkpoint (got a PULL\nfor that, thanks).  Updated list of hard-coded seed nodes (nanotube\ndid that last time). Pieter's dump/import privkey patch.\n\nAfter my talk at the conference, Alex Waters approached me about being\nthe core bitcoin Q/A lead; he'll be working on creating test plans,\nkeeping on top of the issues list, testing new features, and\nsuggesting improvements to the code/test/release process.  And\nwhatever else he thinks needs to be done to improve core bitcoin.\n\nI'll be rewriting the m-of-n signature \"standard transaction\" proposal\nto mitigate a potential denial-of-service attack that I realized it\nwould open up (details later, I don't want to give bad guys ideas).\n\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Luke-Jr",
                "date": "2011-08-29T20:15:47",
                "message_text_only": "On Monday, August 29, 2011 4:10:01 PM Gavin Andresen wrote:\n> Other things on the 0.4 TODO list:\n\nCan we get some form of the signmessage method in?"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-30T01:09:03",
                "message_text_only": "On Mon, 2011-08-29 at 16:10 -0400, Gavin Andresen wrote:\n> Quick brain dump on a bunch of stuff:\n> \n> I'd like to get a 0.4 release out, but am still working on a fix for\n> the deadlock bugs that the new wallet encryption and/or the CWallet\n> refactoring caused. My short-term plan is to reduce the number of\n> locks and make sure they're always acquired in a consistent order.\n> Longer term, I think reworking the design to be based on\n> boost::asio and use fewer threads is probably the right thing to do.\nHopefully working on something that would help do this now.\n> \n> Other things on the 0.4 TODO list:  block chain checkpoint (got a PULL\n> for that, thanks).  Updated list of hard-coded seed nodes (nanotube\n> did that last time). Pieter's dump/import privkey patch.\nAlso my build update pull would be much appreciated.\n> \n> After my talk at the conference, Alex Waters approached me about being\n> the core bitcoin Q/A lead; he'll be working on creating test plans,\n> keeping on top of the issues list, testing new features, and\n> suggesting improvements to the code/test/release process.  And\n> whatever else he thinks needs to be done to improve core bitcoin.\nNICE"
            }
        ],
        "thread_summary": {
            "title": "Project status",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Luke-Jr",
                "Gavin Andresen"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2513
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-qt ready for merging",
        "thread_messages": [
            {
                "author": "John Smith",
                "date": "2011-08-31T14:20:48",
                "message_text_only": "Hi,\n\nBitcoin-qt is now feature complete (including wallet encryption), and has\nbeen tested for a while by various people without any major problems.\n\nIt is now in status of feature freeze.\n\nThe project builds on Windows, MacOSX and Linux using qmake.\n\nImpact to the core bitcoin functions is still minimal, and it can co-exist\nwith Wx in the source tree. The only thing it lacks compared to the Wx GUI\nis translations, currently we only have English, Dutch and Russian.\n\nSo IMO, it is ready to be merged.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110831/f5880f9a/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2011-08-31T15:07:10",
                "message_text_only": "On Wed, 2011-08-31 at 14:20 +0000, John Smith wrote:\n> Hi,\n> \n> Bitcoin-qt is now feature complete (including wallet encryption), and\n> has been tested for a while by various people without any major\n> problems.\n> \n> It is now in status of feature freeze.\n> \n> The project builds on Windows, MacOSX and Linux using qmake.\n> \n> Impact to the core bitcoin functions is still minimal, and it can\n> co-exist with Wx in the source tree. The only thing it lacks compared\n> to the Wx GUI is translations, currently we only have English, Dutch\n> and Russian.\nWould it be possible to port some of the existing translations?\nSomething is better than nothing so some text that is close to the wx\nversion can just be copied.\nThough IMHO its not a huge deal if qt is merged without all the\ntranslations as IMHO it should be merged soon and then not the default\nrelease GUI until its in tree for a bit (like one release) and some\ntranslations can be built up.\n> \n> So IMO, it is ready to be merged.\nIMHO it should be merged right after 0.4 is pushed.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110831/b0f12e10/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-qt ready for merging",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Smith",
                "Matt Corallo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2026
        }
    }
]